void sub_1000029C0(unint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t vars8;

  if (a2)
  {
    if (sub_100003088(a1) <= 1) {
      sub_100002A4C(a2);
    }
    if (sub_10000352C(a1, a2, v12, v13, v14, v15, v16, v17)) {
      sub_100003008(a1);
    }
    CFRelease(a2);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"send_response", @"No response to send", a4, a5, a6, a7, a8, a9);
  }
}

void sub_100002A4C(const __CFDictionary *a1)
{
  if (sub_10000FE94(a1))
  {
    Value = CFDictionaryGetValue(a1, @"Error");
    v3 = sub_10000FF0C(Value);
    if (v3)
    {
      v4 = v3;
      v5 = (CFTypeRef *)off_1001B6AE0[0];
      if (!off_1001B6AE0[0]) {
        goto LABEL_9;
      }
      v6 = off_1001B6AE8;
      while (!CFEqual(v4, *v5))
      {
        v7 = (CFTypeRef *)*v6++;
        v5 = v7;
        if (!v7) {
          goto LABEL_9;
        }
      }
      if (!*(v6 - 1))
      {
LABEL_9:
        int v8 = CFEqual(v4, @"ServiceProhibited");
        v9 = off_1001878B8;
        if (v8) {
          v9 = off_100187960;
        }
        v10 = *v9;
        if (*v9)
        {
          CFDictionarySetValue(a1, @"Error", v10);
        }
      }
    }
  }
}

__CFDictionary *sub_100002B30(const void *a1)
{
  v2 = sub_10002637C();
  int v8 = v2;
  if (v2) {
    CFDictionarySetValue(v2, @"Request", a1);
  }
  else {
    sub_10001A558(0, (uint64_t)"create_response", @"Could not create response dict", v3, v4, v5, v6, v7, v10);
  }
  return v8;
}

void sub_100002B8C(int a1, uint64_t a2, CFMutableDictionaryRef theDict, void *value)
{
  if (a1)
  {
    if (a2) {
      LOBYTE(v6) = a2;
    }
    else {
      uint64_t v6 = " ";
    }
    sub_10000FF0C(value);
    sub_10001A558(0, (uint64_t)"set_response_error", @"%s %@", v7, v8, v9, v10, v11, (char)v6);
  }

  CFDictionarySetValue(theDict, @"Error", value);
}

CFTypeRef sub_100002C28(const void *a1)
{
  v2 = CFWriteStreamCreateWithAllocatedBuffers(kCFAllocatorDefault, kCFAllocatorDefault);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  if (CFWriteStreamOpen(v2))
  {
    if (CFPropertyListWrite(a1, v3, kCFPropertyListBinaryFormat_v1_0, 0, 0) < 1) {
      CFTypeRef v4 = 0;
    }
    else {
      CFTypeRef v4 = CFWriteStreamCopyProperty(v3, kCFStreamPropertyDataWritten);
    }
    CFWriteStreamClose(v3);
  }
  else
  {
    CFTypeRef v4 = 0;
  }
  CFRelease(v3);
  return v4;
}

BOOL sub_100002CD0()
{
  memset(&v1, 0, sizeof(v1));
  return !stat("/System/Library/CoreServices/Carousel.app", &v1) || *__error() != 2;
}

BOOL sub_100002D34()
{
  memset(&v1, 0, sizeof(v1));
  return !stat("/System/Library/CoreServices/SurfBoard.app", &v1) || *__error() != 2;
}

id sub_100002D98()
{
  v0 = +[UMUserManager sharedManager];
  id v1 = [v0 isMultiUser];

  return v1;
}

id sub_100002DD8()
{
  id result = sub_100002D98();
  if (result)
  {
    id v1 = +[UMUserManager sharedManager];
    id v2 = [v1 isLoginSession];

    return v2;
  }
  return result;
}

CFBooleanRef sub_100002E20(const __CFString *a1)
{
  if (sub_10000FF0C(a1))
  {
    if (CFEqual(@"ShouldSubmit", a1))
    {
      int v13 = DiagnosticLogSubmissionEnabled();
      v14 = &kCFBooleanTrue;
      if (!v13) {
        v14 = &kCFBooleanFalse;
      }
      return *v14;
    }
    else
    {
      return (CFBooleanRef)sub_10001ABE4(a1, @"com.apple.MobileDeviceCrashCopy", v7, v8, v9, v10, v11, v12);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_crashcopier_value", @"Invalid key for domain %@.", v2, v3, v4, v5, v6, (char)@"com.apple.MobileDeviceCrashCopy");
    return 0;
  }
}

BOOL sub_100002EE4(const __CFString *a1, void *a2)
{
  if (!sub_10000FF0C(a1) || !sub_10000FF84(a2))
  {
    sub_10001A558(0, (uint64_t)"set_crashcopier_value", @"Invalid key '%@' or value '%@'.", v4, v5, v6, v7, v8, (char)a1);
    return 0;
  }
  if (!CFEqual(a1, @"ShouldSubmit")) {
    return !sub_10001AAC4(a1, a2, @"com.apple.MobileDeviceCrashCopy", v9, v10, v11, v12, v13);
  }
  v14 = +[MCProfileConnection sharedConnection];
  id v15 = [a2 BOOLValue];
  [v14 setBoolValue:v15 forSetting:MCFeatureDiagnosticsSubmissionAllowed];

  return 1;
}

void *sub_100002FBC()
{
  return malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040BB563593uLL);
}

void sub_100002FD8(void *a1)
{
  if (a1) {
    free(a1);
  }
}

double sub_100002FE4(uint64_t a1, int a2, int a3)
{
  if (a1)
  {
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_DWORD *)a1 = a2;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = a3;
    *(_DWORD *)(a1 + 32) = 0;
  }
  return result;
}

unint64_t sub_100003008(unint64_t result)
{
  if (result)
  {
    id v1 = (unsigned int *)result;
    uint64_t v2 = *(NSObject **)(result + 40);
    if (v2)
    {
      dispatch_source_cancel(v2);
      dispatch_release(*((dispatch_object_t *)v1 + 5));
      *((void *)v1 + 5) = 0;
    }
    double result = *v1;
    if (result != -1) {
      double result = close(result);
    }
    *id v1 = -1;
  }
  return result;
}

uint64_t sub_100003060(unsigned int *a1)
{
  if (a1) {
    return *a1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100003074(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 16);
  }
  else {
    return 4;
  }
}

uint64_t sub_100003088(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  if (v1 <= 1) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000030A4(uint64_t a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, int a5)
{
  uint64_t v6 = sub_100028E08(*(_DWORD *)a1, a2, a3, a4, a5);
  *(void *)(a1 + 24) = v6;
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 20) = 1;
  return result;
}

uint64_t sub_1000030E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20))
  {
    OSStatus v2 = SSLClose(*(SSLContextRef *)(a1 + 24));
    if (v2) {
      sub_10001A558(0, (uint64_t)"lockconn_disable_ssl", @"Could not shutdown SSL connection: %d\n", v3, v4, v5, v6, v7, v2);
    }
    *(unsigned char *)(a1 + 20) = 0;
  }
  uint64_t v8 = *(SSLContext **)(a1 + 24);
  if (v8)
  {
    _SSLDisposeContext(v8);
    *(void *)(a1 + 24) = 0;
  }
  return 0;
}

uint64_t sub_100003158(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20);
  }
  return result;
}

ssize_t sub_100003164(uint64_t a1, const void *a2, size_t a3)
{
  size_t processed = -1;
  if (!*(unsigned char *)(a1 + 20)) {
    return send(*(_DWORD *)a1, a2, a3, 0);
  }
  OSStatus v3 = SSLWrite(*(SSLContextRef *)(a1 + 24), a2, a3, &processed);
  if (v3)
  {
    OSStatus v4 = v3;
    *__error() = 5;
    if (!processed) {
      size_t processed = -1;
    }
    if (v4 == -9806)
    {
      uint64_t v5 = __error();
      int v6 = 32;
      goto LABEL_10;
    }
    if (v4 == -9803)
    {
      uint64_t v5 = __error();
      int v6 = 35;
LABEL_10:
      int *v5 = v6;
    }
  }
  return processed;
}

ssize_t sub_100003210(uint64_t a1, void *data, size_t dataLength, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t processed = -1;
  if (!*(unsigned char *)(a1 + 20))
  {
    if (!sub_100003328(*(_DWORD *)a1, (uint64_t)data, dataLength, a4, a5, a6, a7, a8)) {
      return recv(*(_DWORD *)a1, data, dataLength, 0);
    }
    *__error() = 54;
    sub_10001A558(0, (uint64_t)"lockconn_recv", @"walk away", v13, v14, v15, v16, v17, v21);
    return processed;
  }
  OSStatus v11 = SSLRead(*(SSLContextRef *)(a1 + 24), data, dataLength, &processed);
  if (!v11) {
    return processed;
  }
  OSStatus v12 = v11;
  *__error() = 5;
  if (!processed) {
    size_t processed = -1;
  }
  switch(v12)
  {
    case -9806:
      v18 = __error();
      int v19 = 54;
LABEL_14:
      int *v18 = v19;
      return processed;
    case -9803:
      v18 = __error();
      int v19 = 2;
      goto LABEL_14;
    case -9805:
      return 0;
  }
  return processed;
}

uint64_t sub_100003328(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)&v23.tv_usec = 0;
  memset(&v24, 0, sizeof(v24));
  if (a1 >= 1024)
  {
    sub_10001A558(0, (uint64_t)"_select_socket", @"Invalid socket (received %d, max is %d).", a4, a5, a6, a7, a8, a1);
    return 0xFFFFFFFFLL;
  }
  if (a1 == -1)
  {
    CFStringRef v18 = @"Invalid socket";
LABEL_20:
    sub_10001A558(0, (uint64_t)"_select_socket", (uint64_t)v18, a4, a5, a6, a7, a8, v21);
    return 0xFFFFFFFFLL;
  }
  if (__darwin_check_fd_set_overflow(a1, &v24, 0)) {
    *(__int32_t *)((char *)v24.fds_bits + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << a1;
  }
  v23.tv_usec = 0;
  v23.tv_sec = 60;
  char v9 = fcntl(a1, 3, 4);
  uint64_t result = 0;
  if ((v9 & 4) == 0)
  {
    int v11 = 0;
    while (1)
    {
      int v12 = select(a1 + 1, &v24, 0, 0, &v23);
      memset(&v24, 0, sizeof(v24));
      if (__darwin_check_fd_set_overflow(a1, &v24, 0)) {
        v24.fds_bits[(unint64_t)a1 >> 5] |= 1 << a1;
      }
      if (v12 != -1) {
        break;
      }
      if (*__error() != 4)
      {
        v20 = __error();
        char v22 = strerror(*v20);
        CFStringRef v19 = @"select error receiving message: %s";
        goto LABEL_18;
      }
      if (++v11 == 20)
      {
        LOBYTE(v11) = 20;
LABEL_19:
        char v21 = v11;
        CFStringRef v18 = @"Failed to select socket after %d attempts.";
        goto LABEL_20;
      }
    }
    if (!v12)
    {
      CFStringRef v19 = @"receive secure message timeout!";
LABEL_18:
      sub_10001A558(0, (uint64_t)"_select_socket", (uint64_t)v19, v13, v14, v15, v16, v17, v22);
      goto LABEL_19;
    }
    return 0;
  }
  return result;
}

uint64_t sub_10000352C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100003534(a1, a2, kCFPropertyListXMLFormat_v1_0, a4, a5, a6, a7, a8);
}

uint64_t sub_100003534(uint64_t a1, const void *a2, CFPropertyListFormat a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFStringRef v10 = @"no connection";
LABEL_21:
    sub_10001A558(0, (uint64_t)"_send_message", (uint64_t)v10, a4, a5, a6, a7, a8, v31);
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 == -1)
  {
    CFStringRef v10 = @"no socket";
    goto LABEL_21;
  }
  if (!*(unsigned char *)(a1 + 20))
  {
    if (!a2) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_10;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && *(void *)(a1 + 24))
  {
LABEL_10:
    CFDataRef Data = CFPropertyListCreateData(kCFAllocatorDefault, a2, a3, 0, 0);
    if (Data)
    {
      CFDataRef v12 = Data;
      CFIndex Length = CFDataGetLength(Data);
      if (Length < 0)
      {
        sub_10001A558(0, (uint64_t)"_send_message", @"message length too small", v14, v15, v16, v17, v18, v31);
        CFRelease(v12);
        return 0xFFFFFFFFLL;
      }
      unint64_t v19 = Length;
      BytePtr = CFDataGetBytePtr(v12);
      uint64_t v21 = 0;
      unsigned int v32 = bswap32(v19);
      do
      {
        ssize_t v22 = sub_100003164(a1, (char *)&v32 + v21, 4 - v21);
        if (v22 == -1)
        {
          CFRelease(v12);
          v25 = __error();
          strerror(*v25);
          sub_10001A558(0, (uint64_t)"_send_message", @"Could not send message size %ld: %s\n", v26, v27, v28, v29, v30, v19);
          return 0xFFFFFFFFLL;
        }
        v21 += v22;
      }
      while (v21 != 4);
      if (!v19)
      {
LABEL_19:
        CFRelease(v12);
        return 0;
      }
      unint64_t v23 = 0;
      while (1)
      {
        ssize_t v24 = sub_100003164(a1, BytePtr, v19 - v23);
        if (v24 == -1) {
          break;
        }
        v23 += v24;
        BytePtr += v24;
        if (v23 >= v19) {
          goto LABEL_19;
        }
      }
      CFRelease(v12);
      CFStringRef v10 = @"Could not send secure message.\n";
    }
    else
    {
      CFStringRef v10 = @"Could not encode message as XML";
    }
    goto LABEL_21;
  }
  return result;
}

CFDictionaryRef sub_100003704(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || sub_100003328(*a1, a2, a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  CFDictionaryRef v18 = (const __CFDictionary *)sub_1000037EC((uint64_t)a1, v9, v10, v11, v12, v13, v14, v15);
  CFDictionaryRef v16 = v18;
  if (!v18)
  {
LABEL_8:
    sub_100003A8C(v16);
    return v16;
  }
  CFTypeID v19 = CFGetTypeID(v18);
  if (v19 == CFDictionaryGetTypeID())
  {
    if (!a1[8])
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v16, @"ProtocolVersion");
      if (Value)
      {
        CFStringRef v26 = Value;
        CFTypeID v27 = CFGetTypeID(Value);
        if (v27 == CFStringGetTypeID())
        {
          IntCFStringRef Value = CFStringGetIntValue(v26);
          if (IntValue >= 1) {
            a1[8] = IntValue;
          }
        }
      }
    }
    goto LABEL_8;
  }
  sub_10001A558(0, (uint64_t)"lockconn_receive_message", @"Ignoring message that is not the right type.\n", v20, v21, v22, v23, v24, v29);
  CFRelease(v16);
  return 0;
}

CFPropertyListRef sub_1000037EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int data = 0;
  CFErrorRef error = 0;
  int v9 = *(_DWORD *)a1;
  if (v9 == -1) {
    return 0;
  }
  size_t processed = 0;
  if (!*(unsigned char *)(a1 + 20))
  {
    if (sub_100003328(v9, a2, a3, a4, a5, a6, a7, a8))
    {
      CFStringRef v23 = @"walk away - non-SSL 2";
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  uint64_t v10 = *(SSLContext **)(a1 + 24);
  if (!v10) {
    return 0;
  }
  if (SSLRead(v10, &data, 4uLL, &processed) == -9805)
  {
    *(unsigned char *)(a1 + 20) = 0;
    sub_1000030E8(a1);
    if (sub_100003328(*(_DWORD *)a1, v16, v17, v18, v19, v20, v21, v22))
    {
      CFStringRef v23 = @"walk away - non-SSL 1";
LABEL_16:
      sub_10001A558(0, (uint64_t)"_receive_message", (uint64_t)v23, v11, v12, v13, v14, v15, v52);
      return 0;
    }
LABEL_9:
    size_t v24 = recv(*(_DWORD *)a1, &data, 4uLL, 0);
    size_t processed = v24;
    if (!v24) {
      return 0;
    }
    goto LABEL_12;
  }
  size_t v24 = processed;
  if (!processed) {
    return 0;
  }
LABEL_12:
  if (v24 != 4)
  {
    __error();
    CFStringRef v26 = __error();
    strerror(*v26);
    char v52 = 4;
    CFStringRef v23 = @"Could not receive size of message, expected %d bytes, got %ld bytes: (%d, %s)";
    goto LABEL_16;
  }
  size_t v25 = bswap32(data);
  if (v25 > 0x300000)
  {
    char v52 = data;
    CFStringRef v23 = @"swapped %d message size %d exceeds %d limit";
    goto LABEL_16;
  }
  if (!data)
  {
    CFStringRef v23 = @"msize is zero";
    goto LABEL_16;
  }
  char v29 = (char *)malloc_type_malloc(v25, 0x3C0CF081uLL);
  if (!v29)
  {
    sub_10001A558(0, (uint64_t)"_receive_message", @"can't alloc message size %d", v30, v31, v32, v33, v34, v25);
    return 0;
  }
  v35 = v29;
  size_t v36 = 0;
  v37 = v29;
  do
  {
    ssize_t v38 = sub_100003210(a1, v37, v25 - v36, v30, v31, v32, v33, v34);
    size_t processed = v38;
    if (v38 <= 0)
    {
      sub_10001A558(0, (uint64_t)"_receive_message", @"Could not receive message: %ld.\n", v30, v31, v32, v33, v34, v38);
LABEL_36:
      free(v35);
      return 0;
    }
    v36 += v38;
    v37 += v38;
  }
  while (v36 < v25);
  CFDataRef v39 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v35, v25, kCFAllocatorMalloc);
  if (!v39)
  {
    sub_10001A558(0, (uint64_t)"_receive_message", @"Could not create CFData for message.\n", v40, v41, v42, v43, v44, v52);
    goto LABEL_36;
  }
  CFDataRef v45 = v39;
  CFPropertyListRef v27 = CFPropertyListCreateWithData(0, v39, 0, 0, &error);
  if (v27) {
    BOOL v51 = error == 0;
  }
  else {
    BOOL v51 = 0;
  }
  if (!v51)
  {
    sub_10001A558(0, (uint64_t)"_receive_message", @"there was an err.", v46, v47, v48, v49, v50, v52);
    if (error) {
      CFRelease(error);
    }
  }
  CFRelease(v45);
  return v27;
}

void sub_100003A8C(const __CFDictionary *a1)
{
  if (a1)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"Warning");
    if (Value)
    {
      CFStringRef v2 = Value;
      memcpy(__dst, "Error creating CFString", sizeof(__dst));
      LODWORD(v2) = CFStringGetCString(v2, __dst, 1024, 0x8000100u);
      BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
      if (!v2)
      {
        if (!v3) {
          return;
        }
        LOWORD(v5) = 0;
        OSStatus v4 = "CFStringGetCString failure in lockdown_warning_break";
        goto LABEL_10;
      }
      if (v3)
      {
        int v5 = 136315138;
        int v6 = __dst;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v5, 0xCu);
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v5) = 0;
        OSStatus v4 = "*** this is a CLIENT bug, NOT a lockdown bug; set a breakpoint in lockdown_warning_break to debug";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&v5, 2u);
      }
    }
  }
}

void sub_100003BDC()
{
  uint64_t valuePtr = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2020000000;
  char v29 = 0;
  uint64_t v24 = 0;
  size_t v25 = &v24;
  uint64_t v26 = 0x2020000000;
  uint64_t v27 = 0;
  CFDictionaryRef v0 = sub_100003D70();
  if (sub_10000FE94(v0))
  {
    if (CFDictionaryGetCount(v0)) {
      goto LABEL_10;
    }
    CFNumberRef v6 = sub_1000075D8();
    v25[3] = (uint64_t)v6;
    if (v6)
    {
      if (CFNumberGetValue(v6, kCFNumberDoubleType, &valuePtr))
      {
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_100003E18;
        v23[3] = &unk_100185D78;
        v23[4] = v28;
        v23[5] = &v24;
        sub_1000143DC(v23);
        goto LABEL_10;
      }
      CFStringRef v19 = @"Failed to query number.";
    }
    else
    {
      CFStringRef v19 = @"Failed to query time.";
    }
    sub_10001A558(0, (uint64_t)"initialize_pairing_expirations", (uint64_t)v19, v7, v8, v9, v10, v11, v22);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"initialize_pairing_expirations", @"hinky input from the dictionary", v1, v2, v3, v4, v5, v22);
    sub_10001AD50(@"com.apple.mobile.ldpair", v12, v13, v14, v15, v16, v17, v18);
  }
LABEL_10:
  uint64_t v20 = v25;
  uint64_t v21 = (const void *)v25[3];
  if (v21)
  {
    CFRelease(v21);
    uint64_t v20 = v25;
  }
  v20[3] = 0;
  if (v0) {
    CFRelease(v0);
  }
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(v28, 8);
}

void sub_100003D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 56), 8);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_100003D70()
{
  CFDictionaryRef v0 = sub_10001AEC0(@"com.apple.mobile.ldpair");
  if (sub_10000FE94(v0))
  {
    CFDictionaryApplyFunction(v0, (CFDictionaryApplierFunction)sub_1000043E0, 0);
    if (v0) {
      CFRelease(v0);
    }
    return sub_10001AEC0(@"com.apple.mobile.ldpair");
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_paired_hosts_and_dates", @"Invalid paired hosts records.", v1, v2, v3, v4, v5, v7);
    if (v0) {
      CFRelease(v0);
    }
    return 0;
  }
}

uint64_t sub_100003E18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = v3;
  if (v3)
  {
    uint64_t v10 = [v3 objectForKey:@"HostID"];
    uint64_t v11 = sub_10001B06C(v10);

    if (v11)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_100003F08(v10, *(const void **)(*(void *)(*(void *)(a1 + 40)+ 8)+ 24), v12, v13, v14, v15, v16, v17);
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        sub_10001A558(0, (uint64_t)"initialize_pairing_expirations_block_invoke", @"Failed to set last paired date for %@.", v18, v19, v20, v21, v22, (char)v10);
      }
    }
    else
    {
      sub_10001A558(0, (uint64_t)"initialize_pairing_expirations_block_invoke", @"Pair record doesn't contain host id.", v13, v14, v15, v16, v17, v24);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"initialize_pairing_expirations_block_invoke", @"Invalid pair record.", v4, v5, v6, v7, v8, v24);
    uint64_t v10 = 0;
  }

  return 1;
}

uint64_t sub_100003F08(const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    CFDictionaryRef v10 = sub_10001AEC0(@"com.apple.mobile.ldpair");
    if (sub_10000FE94(v10))
    {
      CFDictionaryRef v11 = v10;
      if ((unint64_t)[(__CFDictionary *)v11 count] < 0x201)
      {
        uint64_t v17 = 0;
      }
      else
      {
        sub_10001A558(0, (uint64_t)"set_last_paired_date", @"Detected greater than %d hosts in domain '%@', trimming list.", v12, v13, v14, v15, v16, 0);
        uint64_t v17 = [(__CFDictionary *)v11 keysSortedByValueUsingComparator:&stru_100185DB8];
        uint64_t v18 = (char *)[v17 count];
        uint64_t v19 = v18 - 256;
        if (v18 != (char *)256)
        {
          for (i = 0; v19 != i; ++i)
          {
            uint64_t v21 = [v17 objectAtIndexedSubscript:i];
            uint64_t v22 = sub_10001B06C(v21);

            if (v22)
            {
              CFStringRef v23 = [v17 objectAtIndexedSubscript:i];
              sub_100004334(v23, v24, v25, v26, v27, v28, v29, v30, v60);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
              {
                uint64_t v44 = [v17 objectAtIndexedSubscript:i];
                CFDataRef v45 = objc_opt_class();
                *(_DWORD *)buf = 138412546;
                CFStringRef v62 = @"com.apple.mobile.ldpair";
                __int16 v63 = 2112;
                v64 = v45;
                id v46 = v45;
                _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Unexpected format in preferences for domain %@: %@", buf, 0x16u);
              }
              uint64_t v31 = [v17 objectAtIndexedSubscript:i];
              int v38 = sub_10001AC90((uint64_t)v31, @"com.apple.mobile.ldpair", v32, v33, v34, v35, v36, v37);

              if (!v38) {
                continue;
              }
              CFStringRef v23 = [v17 objectAtIndexedSubscript:i];
              sub_10001A558(0, (uint64_t)"set_last_paired_date", @"Failed to remove pairing pairing info for %@.", v39, v40, v41, v42, v43, (char)v23);
            }
          }
        }
      }
      CFStringRef v48 = (const __CFString *)sub_10000FF0C(a1);
      if (!sub_10001AAC4(v48, a2, @"com.apple.mobile.ldpair", v49, v50, v51, v52, v53))
      {
        uint64_t v47 = 1;
        if (!v10) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_10001A558(0, (uint64_t)"set_last_paired_date", @"Failed to set pairing date.", v54, v55, v56, v57, v58, v60);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
        sub_100104868(@"com.apple.mobile.ldpair");
      }
      uint64_t v17 = 0;
      CFDictionaryRef v11 = 0;
    }
    uint64_t v47 = 0;
    if (v10) {
LABEL_23:
    }
      CFRelease(v10);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"set_last_paired_date", @"Invalid input", a4, a5, a6, a7, a8, v60);
    uint64_t v47 = 0;
    CFDictionaryRef v11 = 0;
    uint64_t v17 = 0;
  }
LABEL_24:

  return v47;
}

uint64_t sub_1000041EC(const __CFString *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && a2)
  {
    CFNumberRef v9 = (const __CFNumber *)sub_10001ABE4(a1, @"com.apple.mobile.ldpair", a3, a4, a5, a6, a7, a8);
    if (sub_10000FE58(v9))
    {
      if (CFNumberGetValue(v9, kCFNumberDoubleType, a2))
      {
        uint64_t v15 = 1;
        if (!v9) {
          return v15;
        }
        goto LABEL_11;
      }
      CFStringRef v16 = @"Failed to retrieve number.";
    }
    else
    {
      CFStringRef v16 = @"No last paired date for this host.";
    }
    sub_10001A558(0, (uint64_t)"get_last_paired_date", (uint64_t)v16, v10, v11, v12, v13, v14, v18);
    uint64_t v15 = 0;
    if (v9) {
LABEL_11:
    }
      CFRelease(v9);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"get_last_paired_date", @"Invalid input", a4, a5, a6, a7, a8, v18);
    return 0;
  }
  return v15;
}

int64_t sub_1000042A8(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  [v4 doubleValue];
  double v7 = v6;
  [v5 doubleValue];
  if (v7 <= v8)
  {
    [v4 doubleValue];
    double v11 = v10;
    [v5 doubleValue];
    if (v11 >= v12) {
      int64_t v9 = 0;
    }
    else {
      int64_t v9 = -1;
    }
  }
  else
  {
    int64_t v9 = 1;
  }

  return v9;
}

void sub_100004334(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1)
  {
    sub_1000153B0((uint64_t)a1, 0);
    sub_10002944C(a1);
    sub_100014760((uint64_t)a1, 0, v10, v11, v12, v13, v14, v15);
    if (sub_10001AC90((uint64_t)a1, @"com.apple.mobile.ldpair", v16, v17, v18, v19, v20, v21)) {
      sub_10001A558(0, (uint64_t)"remove_pairing_info_for_host", @"Failed to remove pairing pairing info for %@.", v22, v23, v24, v25, v26, (char)a1);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"remove_pairing_info_for_host", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_1000043E0(const __CFString *a1, const void *a2)
{
  double v24 = 0.0;
  double valuePtr = 0.0;
  if (!sub_10000FF0C(a1) || !sub_10000FE58(a2))
  {
    sub_10001A558(0, (uint64_t)"expire_old_hosts", @"Invalid input.", v4, v5, v6, v7, v8, SLOBYTE(v24));
    CFNumberRef v15 = 0;
    goto LABEL_13;
  }
  CFNumberRef Value = sub_1000075D8();
  CFNumberRef v15 = Value;
  if (!Value)
  {
    CFStringRef v16 = @"Failed to query time.";
LABEL_12:
    sub_10001A558((uint64_t)Value, (uint64_t)"expire_old_hosts", (uint64_t)v16, v10, v11, v12, v13, v14, SLOBYTE(v24));
    goto LABEL_13;
  }
  CFNumberRef Value = (CFNumberRef)CFNumberGetValue(Value, kCFNumberDoubleType, &v24);
  if (!Value)
  {
    CFStringRef v16 = @"Failed to query number.";
    goto LABEL_12;
  }
  CFNumberRef Value = (CFNumberRef)CFNumberGetValue((CFNumberRef)a2, kCFNumberDoubleType, &valuePtr);
  if (!Value)
  {
    CFStringRef v16 = @"Failed to get double value.";
    goto LABEL_12;
  }
  if (v24 <= valuePtr + 2592000.0)
  {
    sub_10000FF0C(a1);
LABEL_16:
    CFRelease(v15);
    return;
  }
LABEL_13:
  if (sub_10000FF0C(a1)) {
    sub_100004334(a1, v17, v18, v19, v20, v21, v22, v23, SLOBYTE(v24));
  }
  if (v15) {
    goto LABEL_16;
  }
}

uint64_t sub_100004504()
{
  return 2592000;
}

uint64_t sub_100004510(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v32 = 0;
  int v33 = 1;
  *(void *)&v34.sa_len = 0;
  *(void *)&v34.sa_data[6] = 0;
  uint64_t v30 = 0;
  in6_addr v31 = (in6_addr)0;
  socklen_t v29 = 0;
  if (!a1)
  {
    CFStringRef v13 = @"Invalid input.";
LABEL_7:
    sub_10001A558(0, (uint64_t)"create_inet_sock", (uint64_t)v13, a4, a5, a6, a7, a8, v27);
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = socket(a2, 1, 0);
  if (v10 == -1)
  {
    int v14 = *__error();
    CFNumberRef v15 = __error();
    strerror(*v15);
    char v27 = v14;
    CFStringRef v13 = @"Failed to create socket: %d (%s)";
    goto LABEL_7;
  }
  uint64_t v11 = v10;
  if (setsockopt(v10, 0xFFFF, 4354, &v33, 4u))
  {
    CFStringRef v12 = @"Failed to set socket option (SO_OPPORTUNISTIC): %d (%s)";
LABEL_10:
    int v16 = *__error();
    uint64_t v17 = __error();
    strerror(*v17);
    sub_10001A558(0, (uint64_t)"create_inet_sock", (uint64_t)v12, v18, v19, v20, v21, v22, v16);
    close(v11);
    return 0xFFFFFFFFLL;
  }
  int v28 = 4;
  if (setsockopt(v11, 0xFFFF, 4225, &v28, 4u))
  {
    CFStringRef v12 = @"Failed to set socket option (SO_RESTRICTIONS): %d (%s)";
    goto LABEL_10;
  }
  if (*a1)
  {
    if (setsockopt(v11, 0xFFFF, 4, &v33, 4u))
    {
      CFStringRef v12 = @"Failed to set socket option (SO_REUSEADDR): %d (%s)";
      goto LABEL_10;
    }
    if (setsockopt(v11, 0xFFFF, 512, &v33, 4u))
    {
      CFStringRef v12 = @"Failed to set socket option (SO_REUSEPORT): %d (%s)";
      goto LABEL_10;
    }
  }
  if (a2 == 30)
  {
    LOWORD(v30) = 7708;
    in6_addr v31 = in6addr_any;
    WORD1(v30) = bswap32(*(unsigned __int16 *)a1) >> 16;
    socklen_t v24 = 28;
    socklen_t v29 = 28;
    if (setsockopt(v11, 41, 27, &v33, 4u))
    {
      CFStringRef v12 = @"Failed to set socket option (IPV6_V6ONLY): %d (%s)";
      goto LABEL_10;
    }
    uint64_t v25 = (sockaddr *)&v30;
  }
  else
  {
    *(_WORD *)&v34.sa_len = 528;
    *(_DWORD *)&v34.sa_data[2] = 0;
    *(_WORD *)v34.sa_unsigned int data = bswap32(*(unsigned __int16 *)a1) >> 16;
    socklen_t v24 = 16;
    socklen_t v29 = 16;
    uint64_t v25 = &v34;
  }
  if (bind(v11, v25, v24) == -1)
  {
    CFStringRef v12 = @"Failed to bind socket: %d (%s)";
    goto LABEL_10;
  }
  if (getsockname(v11, v25, &v29) == -1)
  {
    CFStringRef v12 = @"Failed to get socket name: %d (%s)";
    goto LABEL_10;
  }
  if (listen(v11, 128) == -1)
  {
    CFStringRef v12 = @"Failed to listen on socket: %d (%s)";
    goto LABEL_10;
  }
  sa_unsigned int data = v34.sa_data;
  if (a2 == 30) {
    sa_unsigned int data = (char *)&v30 + 2;
  }
  *a1 = bswap32(*(unsigned __int16 *)sa_data) >> 16;
  return v11;
}

BOOL sub_100004800(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = a4;
  uint64_t v23 = 0;
  socklen_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  char v26 = 0;
  if (a1 && *a1 && (CFStringRef v12 = a1[2]) != 0)
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100004948;
    v19[3] = &unk_100185DE0;
    char v20 = a4;
    char v21 = a3;
    v19[5] = a1;
    v19[6] = a2;
    char v22 = a5;
    v19[4] = &v23;
    dispatch_sync(v12, v19);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"dns_register", @"Invalid input.", a4, a5, a6, a7, a8, v19[0]);
  }
  if (*((unsigned char *)v24 + 24))
  {
    BOOL v17 = 1;
  }
  else
  {
    sub_100005710(a1, a3, v9, a5, v13, v14, v15, v16, v19[0]);
    BOOL v17 = *((unsigned char *)v24 + 24) != 0;
  }
  _Block_object_dispose(&v23, 8);
  return v17;
}

void sub_100004930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100004948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v59 = 0u;
  long long v60 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v58 = 0u;
  if (!*(unsigned char *)(a1 + 56) && !*(unsigned char *)(a1 + 57))
  {
    sub_10001A558(0, (uint64_t)"dns_register_block_invoke", @"Invalid input. No DNS registration requested.", a4, a5, a6, a7, a8, v56);
    xpc_object_t v34 = 0;
    socklen_t v24 = 0;
    goto LABEL_26;
  }
  CFStringRef v9 = (const __CFString *)sub_10000DF38(**(void **)(a1 + 40), @"com.apple.mobile.wireless_lockdown", @"InstanceName");
  uint64_t CString = (uint64_t)sub_10000FF0C(v9);
  if (!CString)
  {
    CFStringRef v33 = @"Invalid wireless instance name.";
LABEL_22:
    sub_10001A558(CString, (uint64_t)"dns_register_block_invoke", (uint64_t)v33, v11, v12, v13, v14, v15, v56);
    socklen_t v24 = 0;
LABEL_23:
    xpc_object_t v34 = 0;
    goto LABEL_24;
  }
  uint64_t CString = CFStringGetCString(v9, buffer, 64, 0x8000100u);
  if (!CString)
  {
    CFStringRef v33 = @"Failed to create string.";
    goto LABEL_22;
  }
  if (!*(unsigned char *)(a1 + 57))
  {
LABEL_16:
    socklen_t v24 = 0;
    goto LABEL_17;
  }
  uint64_t v16 = *(const char **)(a1 + 48);
  if (!v16)
  {
    CFStringRef v33 = @"Invalid service string name.";
    uint64_t CString = 0;
    goto LABEL_22;
  }
  uint64_t v17 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v17 + 32))
  {
    uint64_t v18 = *(const char **)(v17 + 24);
    if (!v18 || !strcmp(v18, v16)) {
      goto LABEL_16;
    }
  }
  xpc_set_event();
  socklen_t v24 = strdup(*(const char **)(a1 + 48));
  if (!v24)
  {
    sub_10001A558(0, (uint64_t)"dns_register_block_invoke", @"Failed to copy service string.", v19, v20, v21, v22, v23, v56);
    goto LABEL_23;
  }
  uint64_t v25 = *(void *)(a1 + 40);
  char v26 = *(void **)(v25 + 24);
  if (v26)
  {
    free(v26);
    uint64_t v25 = *(void *)(a1 + 40);
  }
  *(void *)(v25 + 24) = 0;
  *(void *)(*(void *)(a1 + 40) + 24) = v24;
  socklen_t v24 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v24, "Flags", 0);
  xpc_dictionary_set_string(v24, "Name", buffer);
  xpc_dictionary_set_string(v24, "RegistrationType", *(const char **)(*(void *)(a1 + 40) + 24));
  xpc_dictionary_set_int64(v24, "InterfaceIndex", 0);
  xpc_dictionary_set_int64(v24, "Port", 32498);
  xpc_set_event();
  uint64_t v27 = *(void *)(a1 + 40);
  *(unsigned char *)(v27 + 32) = 1;
  sub_10001A558(0, (uint64_t)"dns_register_block_invoke", @"Registered DNS (syncing): %s", v28, v29, v30, v31, v32, *(void *)(v27 + 24));
LABEL_17:
  if (*(unsigned char *)(a1 + 56) && !*(unsigned char *)(*(void *)(a1 + 40) + 33))
  {
    xpc_set_event();
    xpc_object_t v34 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v34, "Flags", 0);
    xpc_dictionary_set_string(v34, "Name", buffer);
    xpc_dictionary_set_string(v34, "RegistrationType", "_apple-pairable._tcp");
    xpc_dictionary_set_int64(v34, "InterfaceIndex", 0);
    xpc_dictionary_set_int64(v34, "Port", 32498);
    xpc_set_event();
    *(unsigned char *)(*(void *)(a1 + 40) + 33) = 1;
    sub_10001A558(0, (uint64_t)"dns_register_block_invoke", @"Registered DNS (pairing): %s ", v35, v36, v37, v38, v39, (char)"_apple-pairable._tcp");
  }
  else
  {
    xpc_object_t v34 = 0;
  }
  if (!*(unsigned char *)(a1 + 58)) {
    goto LABEL_41;
  }
  uint64_t v40 = *(void *)(a1 + 40);
  if (*(void *)(v40 + 40))
  {
    if (*(_DWORD *)(v40 + 52) && *(void *)(v40 + 56)) {
      goto LABEL_41;
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v40 + 40));
    *(void *)(*(void *)(a1 + 40) + 40) = 0;
    uint64_t v40 = *(void *)(a1 + 40);
  }
  if (*(_DWORD *)(v40 + 52))
  {
    IOServiceClose(*(_DWORD *)(v40 + 52));
    uint64_t v40 = *(void *)(a1 + 40);
    *(_DWORD *)(v40 + 52) = 0;
  }
  if (*(void *)(v40 + 56))
  {
    CFRelease(*(CFTypeRef *)(v40 + 56));
    *(void *)(*(void *)(a1 + 40) + 56) = 0;
    uint64_t v40 = *(void *)(a1 + 40);
  }
  CFRunLoopSourceRef RunLoopSource = (CFRunLoopSourceRef)IORegisterForSystemPower((void *)v40, (IONotificationPortRef *)(v40 + 40), (IOServiceInterestCallback)sub_100004E34, (io_object_t *)(v40 + 48));
  uint64_t v47 = *(void *)(a1 + 40);
  *(_DWORD *)(v47 + 52) = RunLoopSource;
  if (RunLoopSource)
  {
    CFRunLoopSourceRef RunLoopSource = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v47 + 40));
    if (RunLoopSource)
    {
      CFStringRef v48 = RunLoopSource;
      Current = CFRunLoopGetCurrent();
      CFRunLoopAddSource(Current, v48, kCFRunLoopDefaultMode);
      *(void *)(*(void *)(a1 + 40) + 56) = WiFiManagerClientCreate();
      CFRunLoopSourceRef RunLoopSource = *(CFRunLoopSourceRef *)(*(void *)(a1 + 40) + 56);
      if (RunLoopSource)
      {
        WiFiManagerClientSetWoWState();
        sub_10001A558(0, (uint64_t)"dns_register_block_invoke", @"Registered WOL.", v50, v51, v52, v53, v54, v56);
LABEL_41:
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        goto LABEL_24;
      }
      CFStringRef v55 = @"WiFiManagerClientCreate failed.";
    }
    else
    {
      CFStringRef v55 = @"IONotificationPortGetRunLoopSource failed for power notifications.";
    }
  }
  else
  {
    CFStringRef v55 = @"IORegisterForSystemPower failed.";
  }
  sub_10001A558((uint64_t)RunLoopSource, (uint64_t)"dns_register_block_invoke", (uint64_t)v55, v42, v43, v44, v45, v46, v56);
LABEL_24:
  if (v9) {
    CFRelease(v9);
  }
LABEL_26:
}

void sub_100004E34(uint64_t a1, int a2, int a3, intptr_t notificationID, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  memset(v115, 0, sizeof(v115));
  size_t v104 = 128;
  HIDWORD(v9) = a3;
  LODWORD(v9) = a3 + 536870288;
  switch((v9 >> 4))
  {
    case 0u:
      if (dword_1001B6AD0) {
        sub_10001A558(0, (uint64_t)"_sleep_wake_notification_callback", @"Power notification: kIOMessageCanSystemSleep", notificationID, a5, a6, a7, a8, v103);
      }
      goto LABEL_8;
    case 1u:
      if (dword_1001B6AD0) {
        sub_10001A558(0, (uint64_t)"_sleep_wake_notification_callback", @"Power notification: kIOMessageSystemWillSleep", notificationID, a5, a6, a7, a8, v103);
      }
      sub_100005710((void *)a1, 1, 1, 0, a5, a6, a7, a8, v103);
LABEL_8:
      IOReturn v12 = IOAllowPowerChange(*(_DWORD *)(a1 + 52), notificationID);
      if (v12) {
        sub_10001A558(0, (uint64_t)"_sleep_wake_notification_callback", @"IOAllowPowerChange failed: 0x%08x", v13, v14, v15, v16, v17, v12);
      }
      return;
    case 2u:
      if (dword_1001B6AD0)
      {
        sub_10001A558(0, (uint64_t)"_sleep_wake_notification_callback", @"Power notification: kIOMessageCanSystemSleep", notificationID, a5, a6, a7, a8, a9);
      }
      return;
    case 9u:
      sysctlbyname("kern.wakereason", v115, &v104, 0, 0);
      if (dword_1001B6AD0) {
        sub_10001A558(0, (uint64_t)"_sleep_wake_notification_callback", @"Power notification: kIOMessageSystemHasPoweredOn (Wake Reason - %s)", v18, v19, v20, v21, v22, (char)v115);
      }
      BOOL v28 = (sub_10000E660(*(void *)a1, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", v18, v19, v20, v21, v22)|| sub_10000E660(*(void *)a1, @"com.apple.mobile.wireless_lockdown", @"EnableWifiConnections", v23, v24, v25, v26, v27))&& *(void *)(a1 + 24) != 0;
      unsigned int v29 = sub_10000E660(*(void *)a1, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", v23, v24, v25, v26, v27);
      if (v29 != 0 || !~v28) {
        sub_100004800(a1, *(void *)(a1 + 24), v28, v29 != 0, 0);
      }
      clock_serv_t clock_serv = 0;
      mach_timespec_t cur_time = 0;
      uint64_t valuePtr = 0;
      mach_port_t v30 = mach_host_self();
      if (host_get_clock_service(v30, 0, &clock_serv))
      {
        CFStringRef v36 = @"Failed to query clock service.";
LABEL_26:
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", (uint64_t)v36, v31, v32, v33, v34, v35, v103);
        return;
      }
      if (clock_get_time(clock_serv, &cur_time))
      {
        CFStringRef v36 = @"Failed to get clock time.";
        goto LABEL_26;
      }
      uint64_t v37 = 1000 * cur_time.tv_sec;
      if (dword_1001B6AD0) {
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Current time since boot: %lld.", v31, v32, v33, v34, v35, -24 * LOBYTE(cur_time.tv_sec));
      }
      CFDictionaryRef v38 = IOServiceMatching("AppleBCMWLANCore");
      if (!v38)
      {
        CFStringRef v36 = @"Failed to query AppleBCMWLANCore service.";
        goto LABEL_26;
      }
      io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v38);
      io_object_t v40 = MatchingService;
      if (!MatchingService)
      {
        CFStringRef v36 = @"Failed to get matching service.";
        goto LABEL_26;
      }
      CFDictionaryRef CFProperty = (const __CFDictionary *)IORegistryEntryCreateCFProperty(MatchingService, @"IO80211InterfaceWoWWakeUpParams", kCFAllocatorDefault, 0);
      CFDictionaryRef v47 = CFProperty;
      if (!CFProperty)
      {
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"IORegistryEntryCreateCFProperty failed for %s.", v42, v43, v44, v45, v46, (char)"IO80211InterfaceWoWWakeUpParams");
        IOObjectRelease(v40);
        return;
      }
      if (dword_1001B6AD0) {
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"APPLE80211_REGKEY_WOW_WAKEUP_PARAMS: %@", v42, v43, v44, v45, v46, (char)CFProperty);
      }
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v47, @"IO80211InterfaceWoWWakeUpData");
      CFDataRef v54 = Value;
      if (!Value)
      {
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Failed to query %s.", v49, v50, v51, v52, v53, (char)"IO80211InterfaceWoWWakeUpData");
        goto LABEL_43;
      }
      BytePtr = CFDataGetBytePtr(Value);
      CFIndex Length = CFDataGetLength(v54);
      if (Length <= 115)
      {
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Packet is too short.", v57, v58, v59, v60, v61, v103);
LABEL_43:
        CFRelease(v47);
        IOObjectRelease(v40);
        return;
      }
      unsigned int v62 = __rev16(*((unsigned __int16 *)BytePtr + 6));
      switch(v62)
      {
        case 0x86DDu:
          if (BytePtr[20] != 17)
          {
            sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Unrecognized IPv6 protocol 0x%02X", v57, v58, v59, v60, v61, BytePtr[20]);
            goto LABEL_43;
          }
          __int16 v63 = BytePtr + 68;
          break;
        case 0x842u:
          __int16 v63 = BytePtr + 20;
          break;
        case 0x800u:
          if (BytePtr[23] != 17)
          {
            sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Unrecognized IPv4 protocol 0x%02X", v57, v58, v59, v60, v61, BytePtr[23]);
            goto LABEL_43;
          }
          __int16 v63 = &BytePtr[4 * (BytePtr[14] & 0xF) + 28];
          break;
        default:
          sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Unrecognized etherType 0x%04X", v57, v58, v59, v60, v61, v62);
          goto LABEL_43;
      }
      if (v63 + 96 > &BytePtr[Length])
      {
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Payload underrun.", v57, v58, v59, v60, v61, v103);
        goto LABEL_43;
      }
      if (qword_1001B7FF0 != -1)
      {
        v102 = v63;
        dispatch_once(&qword_1001B7FF0, &stru_100186258);
        __int16 v63 = v102;
      }
      if (memcmp(v63, (const void *)qword_1001B7FE8, 0x60uLL))
      {
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Not a WOL packet.", v64, v65, v66, v67, v68, v103);
        goto LABEL_43;
      }
      v69 = CFDictionaryGetValue(v47, @"IO80211InterfaceWoWWakeUpTimeStamp");
      if (!sub_10000FE58(v69))
      {
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Failed to query %s.", v70, v71, v72, v73, v74, (char)"IO80211InterfaceWoWWakeUpTimeStamp");
        goto LABEL_43;
      }
      uint64_t v75 = CFNumberGetValue((CFNumberRef)v69, kCFNumberLongLongType, &valuePtr);
      if (!v75)
      {
        sub_10001A558(v75, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Failed to convert to integer.", v76, v77, v78, v79, v80, v103);
        goto LABEL_43;
      }
      if (qword_1001B7FE0)
      {
        if (valuePtr == qword_1001B7FE0)
        {
          sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Wake time did not change: %lld", v76, v77, v78, v79, v80, qword_1001B7FE0);
          goto LABEL_43;
        }
        CFStringRef v81 = @"New Wake time: %lld";
      }
      else
      {
        CFStringRef v81 = @"note the time for future reference: %lld";
      }
      sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", (uint64_t)v81, v76, v77, v78, v79, v80, valuePtr);
      uint64_t v87 = valuePtr;
      qword_1001B7FE0 = valuePtr;
      if (dword_1001B6AD0)
      {
        sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Wake time since boot: %lld.", v82, v83, v84, v85, v86, valuePtr);
        uint64_t v87 = valuePtr;
      }
      uint64_t v88 = v87 - v37;
      if (v88 >= 0) {
        unint64_t v89 = v88;
      }
      else {
        unint64_t v89 = -v88;
      }
      sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"Wake time difference: %lld.", v82, v83, v84, v85, v86, v89);
      if (v89 > 0x7CF) {
        goto LABEL_43;
      }
      sub_10001A558(0, (uint64_t)"_did_wake_for_wifi_wake_packet", @"waker was: %02x:%02x:%02x:%02x:%02x:%02x", v90, v91, v92, v93, v94, BytePtr[6]);
      CFRelease(v47);
      IOObjectRelease(v40);
      uint64_t valuePtr = 0;
      p_uint64_t valuePtr = &valuePtr;
      uint64_t v113 = 0x2020000000;
      int v114 = 0;
      if (qword_1001B8000 != -1) {
        dispatch_once(&qword_1001B8000, &stru_100186278);
      }
      IOReturn v95 = IOPMAssertionCreateWithDescription(@"PreventUserIdleSystemSleep", @"com.apple.mobile.lockdownd.wake-on-wlan", @"The 411 on sync.", 0, 0, 0.0, 0, (IOPMAssertionID *)p_valuePtr + 6);
      if (v95)
      {
        sub_10001A558(0, (uint64_t)"_takePowerAssertionForInterval", @"IOPMAssertionCreateWithDescription failed with %d", v96, v97, v98, v99, v100, v95);
      }
      else
      {
        if (dword_1001B6AD0) {
          sub_10001A558(0, (uint64_t)"_takePowerAssertionForInterval", @"Aquired %ld second power assertion.", v96, v97, v98, v99, v100, 30);
        }
        dispatch_time_t v101 = dispatch_time(0, 30000000000);
        mach_timespec_t cur_time = (mach_timespec_t)_NSConcreteStackBlock;
        uint64_t v107 = 3221225472;
        v108 = sub_10000CEA0;
        v109 = &unk_1001861C8;
        v110 = &valuePtr;
        dispatch_after(v101, (dispatch_queue_t)qword_1001B7FF8, &cur_time);
      }
      _Block_object_dispose(&valuePtr, 8);
      return;
    case 0xBu:
      return;
    default:
      sub_10001A558(0, (uint64_t)"_sleep_wake_notification_callback", @"Unknown power notification: %d", notificationID, a5, a6, a7, a8, a3);
      return;
  }
}

void sub_1000056C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100005710(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1 && *a1 && (unint64_t v9 = a1[2]) != 0)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000057D0;
    v10[3] = &unk_100185E00;
    char v11 = a2;
    char v12 = a3;
    v10[4] = a1;
    char v13 = a4;
    dispatch_sync(v9, v10);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"dns_unregister", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_1000057D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v10 + 32))
    {
      *(unsigned char *)(v10 + 32) = 0;
      xpc_set_event();
      sub_10001A558(0, (uint64_t)"dns_unregister_block_invoke", @"Unregistered DNS (syncing).", v11, v12, v13, v14, v15, v27);
    }
  }
  else if (!*(unsigned char *)(a1 + 41))
  {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 41))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v16 + 33))
    {
      *(unsigned char *)(v16 + 33) = 0;
      xpc_set_event();
      sub_10001A558(0, (uint64_t)"dns_unregister_block_invoke", @"Unregistered DNS (pairing).", v17, v18, v19, v20, v21, v27);
    }
  }
LABEL_8:
  if (*(unsigned char *)(a1 + 42))
  {
    uint64_t v22 = *(void *)(a1 + 32);
    if (*(_DWORD *)(v22 + 48))
    {
      IOReturn v23 = IODeregisterForSystemPower((io_object_t *)(v22 + 48));
      if (v23) {
        sub_10001A558(0, (uint64_t)"dns_unregister_block_invoke", @"IODeregisterForSystemPower failed: %d", a4, a5, a6, a7, a8, v23);
      }
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)(v22 + 48) = 0;
    }
    uint64_t v24 = *(IONotificationPort **)(v22 + 40);
    if (v24)
    {
      IONotificationPortDestroy(v24);
      *(void *)(*(void *)(a1 + 32) + 40) = 0;
      uint64_t v22 = *(void *)(a1 + 32);
    }
    io_connect_t v25 = *(_DWORD *)(v22 + 52);
    if (v25)
    {
      IOServiceClose(v25);
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)(v22 + 52) = 0;
    }
    uint64_t v26 = *(const void **)(v22 + 56);
    if (v26)
    {
      CFRelease(v26);
      uint64_t v22 = *(void *)(a1 + 32);
    }
    *(void *)(v22 + 56) = 0;
    sub_10001A558(0, (uint64_t)"dns_unregister_block_invoke", @"Unregistered WOL.", a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_10000594C()
{
  if (!MGGetBoolAnswer()) {
    return 1;
  }
  CFPropertyListRef v6 = sub_10001ABE4(@"LastSystemVersion", @"com.apple.migration", v0, v1, v2, v3, v4, v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (const void *)MGCopyAnswer();
  if (!sub_10000FF0C(v8))
  {
    BOOL v9 = 0;
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v9 = CFEqual(v7, v8) != 0;
  if (v8) {
LABEL_5:
  }
    CFRelease(v8);
LABEL_6:
  CFRelease(v7);
  return v9;
}

uint64_t sub_100005A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2)
  {
    CFStringRef v9 = @"Invalid input(s).";
LABEL_9:
    sub_10001A558(0, (uint64_t)"notify_configd", (uint64_t)v9, a4, a5, a6, a7, a8, v11);
    return byte_1001B7F90;
  }
  if (qword_1001B7F98 != -1) {
    dispatch_once(&qword_1001B7F98, &stru_100185E40);
  }
  if (!qword_1001B7F88)
  {
    CFStringRef v9 = @"Failed to create queue.";
    goto LABEL_9;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100005B34;
  block[3] = &unk_100185E60;
  block[4] = a2;
  dispatch_sync((dispatch_queue_t)qword_1001B7F88, block);
  return byte_1001B7F90;
}

void sub_100005AF4(id a1)
{
  qword_1001B7F88 = (uint64_t)dispatch_queue_create("com.apple.lockdownd.configd", 0);

  _objc_release_x1();
}

void sub_100005B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int out_token = -1;
  if (*(void *)(a1 + 32))
  {
    if ((byte_1001B7F90 & 1) == 0)
    {
      if (notify_register_check("com.apple.mobile.lockdown", &out_token))
      {
        sub_10001A558(0, (uint64_t)"notify_configd_block_invoke_2", @"Failed to register notification (%s): %d", v9, v10, v11, v12, v13, (char)"com.apple.mobile.lockdown");
      }
      else
      {
        notify_set_state(out_token, 1uLL);
        notify_post("com.apple.mobile.lockdown");
        CFTypeRef cf = 0;
        IOUSBDeviceControllerCreate();
        if (cf)
        {
          int v14 = IOUSBDeviceControllerForceOffBus();
          if (v14) {
            sub_10001A558(0, (uint64_t)"allow_usb_on_bus", @"IOUSBDeviceControllerForceOffBus returned: %d", v15, v16, v17, v18, v19, v14);
          }
          CFRelease(cf);
        }
        else
        {
          NSLog(@"we failed to create an IOUSBDeviceController");
        }
        sub_10001A558(0, (uint64_t)"notify_configd_block_invoke_2", @"Pinged configd, USB is now enabled.", v20, v21, v22, v23, v24, v25);
        byte_1001B7F90 = 1;
      }
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"notify_configd_block_invoke_2", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_100005C70(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1)
  {
    sub_100005CE4(@"DiagnosticsAllowed", a1, @"com.apple.iqagent", a4, a5, a6, a7, a8, vars0);
    sub_100010480(@"com.apple.iqagent.IQAllowedChangeNotification");
  }
  else
  {
    sub_10001A558(0, (uint64_t)"set_iqagent", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_100005CE4(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFStringRef v11 = (const __CFString *)sub_10000FF0C(a1);
  CFStringRef v12 = (const __CFString *)sub_10000FF0C(a3);
  CFStringRef v18 = @"bogus request";
  if (v11 && v12)
  {
    if (!sub_10001AAC4(v11, a2, v12, v13, v14, v15, v16, v17)) {
      return;
    }
    CFStringRef v18 = @"Could not set preference via lockbot";
  }

  sub_10001A558(0, (uint64_t)"_set_mobile_preference", (uint64_t)v18, v13, v14, v15, v16, v17, a9);
}

uint64_t sub_100005D7C()
{
  mach_port_t mainPort = 0;
  if (IOMasterPort(bootstrap_port, &mainPort))
  {
    CFStringRef v5 = @"Could not get master port";
    uint64_t v6 = 0;
LABEL_3:
    sub_10001A558(v6, (uint64_t)"disable_auto_boot", (uint64_t)v5, v0, v1, v2, v3, v4, v22);
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = IORegistryEntryFromPath(mainPort, "IODeviceTree:/options");
  if (!v6)
  {
    CFStringRef v5 = @"Could not get options entry from the device tree";
    goto LABEL_3;
  }
  io_registry_entry_t v8 = v6;
  CFDataRef v9 = CFDataCreate(0, (const UInt8 *)"false", 5);
  if (v9)
  {
    CFDataRef v15 = v9;
    if (IORegistryEntrySetCFProperty(v8, @"auto-boot", v9))
    {
      sub_10001A558(0, (uint64_t)"disable_auto_boot", @"Could not set auto-boot setting", v16, v17, v18, v19, v20, v22);
      uint64_t v7 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v7 = 0;
    }
    CFRelease(v15);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"disable_auto_boot", @"Could not create CFData", v10, v11, v12, v13, v14, v22);
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  IOObjectRelease(v8);
  return v7;
}

__CFDictionary *sub_100005E98(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v46 = 0;
  CFDictionaryRef v47 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2020000000;
  if ((sub_1000064B8(a3, @"NANDInfo", &v47, &stru_100185EA0) & 1) == 0)
  {
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100006688;
    v42[3] = &unk_100185EC0;
    v42[4] = a1;
    if ((sub_1000064B8(a3, @"CalculateDiskUsage", &v47, v42) & 1) == 0)
    {
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = sub_1000068AC;
      v41[3] = &unk_100185EE8;
      v41[4] = &v43;
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_100006930;
      v39[3] = &unk_100185F10;
      uint64_t v6 = objc_retainBlock(v41);
      id v40 = v6;
      char v7 = sub_1000064B8(a3, @"TotalSystemCapacity", &v47, v39);

      if ((v7 & 1) == 0)
      {
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472;
        v37[2] = sub_10000694C;
        v37[3] = &unk_100185F10;
        io_registry_entry_t v8 = v6;
        id v38 = v8;
        char v9 = sub_1000064B8(a3, @"TotalSystemAvailable", &v47, v37);

        if ((v9 & 1) == 0)
        {
          v35[0] = _NSConcreteStackBlock;
          v35[1] = 3221225472;
          v35[2] = sub_100006968;
          v35[3] = &unk_100185F10;
          uint64_t v10 = v8;
          id v36 = v10;
          char v11 = sub_1000064B8(a3, @"TotalDataCapacity", &v47, v35);

          if ((v11 & 1) == 0)
          {
            v33[0] = _NSConcreteStackBlock;
            v33[1] = 3221225472;
            v33[2] = sub_100006984;
            v33[3] = &unk_100185F10;
            uint64_t v12 = v10;
            id v34 = v12;
            char v13 = sub_1000064B8(a3, @"TotalDataAvailable", &v47, v33);

            if ((v13 & 1) == 0)
            {
              v31[0] = _NSConcreteStackBlock;
              v31[1] = 3221225472;
              v31[2] = sub_1000069A0;
              v31[3] = &unk_100185F10;
              uint64_t v14 = v12;
              id v32 = v14;
              char v15 = sub_1000064B8(a3, @"TotalDiskCapacity", &v47, v31);

              if ((v15 & 1) == 0)
              {
                v29[0] = _NSConcreteStackBlock;
                v29[1] = 3221225472;
                v29[2] = sub_1000069BC;
                v29[3] = &unk_100185F10;
                uint64_t v16 = v14;
                id v30 = v16;
                char v17 = sub_1000064B8(a3, @"AmountDataReserved", &v47, v29);

                if ((v17 & 1) == 0)
                {
                  v27[0] = _NSConcreteStackBlock;
                  v27[1] = 3221225472;
                  v27[2] = sub_1000069D8;
                  v27[3] = &unk_100185F10;
                  uint64_t v18 = v16;
                  id v28 = v18;
                  char v19 = sub_1000064B8(a3, @"AmountDataAvailable", &v47, v27);

                  if ((v19 & 1) == 0)
                  {
                    v25[0] = _NSConcreteStackBlock;
                    v25[1] = 3221225472;
                    v25[2] = sub_1000069F4;
                    v25[3] = &unk_100185F10;
                    uint64_t v26 = v18;
                    char v20 = sub_1000064B8(a3, @"AmountRestoreAvailable", &v47, v25);

                    if ((v20 & 1) == 0
                      && CFEqual(a2, @"com.apple.disk_usage.factory")
                      && (sub_1000064B8(a3, @"PhotoUsage", &v47, &stru_100185F30) & 1) == 0
                      && (sub_1000064B8(a3, @"CameraUsage", &v47, &stru_100185F50) & 1) == 0
                      && (sub_100006A30(a3, @"CalendarUsage", &v47, (uint64_t)"/var/mobile/Library/Calendar") & 1) == 0
                      && (sub_100006A30(a3, @"VoicemailUsage", &v47, (uint64_t)"/var/mobile/Library/Voicemail") & 1) == 0
                      && (sub_100006A30(a3, @"NotesUsage", &v47, (uint64_t)"/var/mobile/Library/Notes") & 1) == 0
                      && (sub_100006A30(a3, @"MediaCacheUsage", &v47, (uint64_t)"/var/mobile/tmp/com.apple.mediaplaybackd/MediaCache") & 1) == 0)
                    {
                      sub_100006A30(a3, @"WebAppCacheUsage", &v47, (uint64_t)"/var/mobile/Library/Caches/com.apple.WebAppCache");
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v21 = v44;
  char v22 = (const void *)v44[3];
  if (v22)
  {
    CFRelease(v22);
    uint64_t v21 = v44;
  }
  v21[3] = 0;
  uint64_t v23 = v47;
  _Block_object_dispose(&v43, 8);
  return v23;
}

void sub_10000649C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000064B8(const void *a1, const void *a2, __CFDictionary **a3, void *a4)
{
  char v7 = a4;
  io_registry_entry_t v8 = v7;
  if (!a1)
  {
    uint64_t v16 = v7[2](v7);
    if (v16)
    {
      char v22 = (const void *)v16;
      uint64_t v23 = *a3;
      if (*a3 || (uint64_t v23 = sub_10002637C(), (*a3 = v23) != 0)) {
        CFDictionarySetValue(v23, a2, v22);
      }
      CFRelease(v22);
    }
    else
    {
      sub_10001A558(0, (uint64_t)"set_stat_if_wanted", @"Could not get value for %@", v17, v18, v19, v20, v21, (char)a2);
    }
    goto LABEL_12;
  }
  if (!CFEqual(a1, a2))
  {
LABEL_12:
    uint64_t v15 = 0;
    goto LABEL_13;
  }
  uint64_t v14 = v8[2](v8);
  if (!v14) {
    sub_10001A558(0, (uint64_t)"set_stat_if_wanted", @"Could not get value for %@", v9, v10, v11, v12, v13, (char)a2);
  }
  *a3 = (__CFDictionary *)v14;
  uint64_t v15 = 1;
LABEL_13:

  return v15;
}

void *__cdecl sub_1000065B0(id a1)
{
  uint64_t v4 = 0;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  if (qword_1001B7FC8 != -1) {
    dispatch_once(&qword_1001B7FC8, &stru_1001861A0);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000C8D0;
  block[3] = &unk_1001861C8;
  block[4] = &v4;
  dispatch_sync((dispatch_queue_t)qword_1001B7FC0, block);
  uint64_t v1 = (void *)v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

CFTypeRef sub_100006688(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  io_registry_entry_t v8 = v2;
  if (!v2)
  {
    CFStringRef v10 = @"Failed to create dictionary.";
LABEL_6:
    sub_10001A558(0, (uint64_t)"copy_disk_usage_block_invoke_2", (uint64_t)v10, v3, v4, v5, v6, v7, v12);
    CFTypeRef v9 = 0;
    goto LABEL_7;
  }
  xpc_dictionary_set_string(v2, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_C, 0);
  xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, 0);
  xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, 10);
  if ((sub_1000067B8(*(void *)(a1 + 32), v8, 0) & 1) == 0)
  {
    CFStringRef v10 = @"Failed to schedule application disk usage XPC activity.";
    goto LABEL_6;
  }
  CFTypeRef v9 = CFRetain(@"OkilyDokily");
LABEL_7:

  return v9;
}

uint64_t sub_1000067B8(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  uint64_t v6 = sub_100006AE4();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100006B44;
  v10[3] = &unk_100185FD8;
  char v12 = &v15;
  uint64_t v13 = a1;
  id v11 = v5;
  char v14 = a3;
  id v7 = v5;
  dispatch_sync(v6, v10);

  uint64_t v8 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v15, 8);
  return v8;
}

const void *sub_1000068AC(uint64_t a1, void *key)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v4)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = MGCopyAnswer();
    CFDictionaryRef v4 = *(const __CFDictionary **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (!v4) {
      return 0;
    }
  }
  CFDataRef Value = CFDictionaryGetValue(v4, key);
  uint64_t v6 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v6;
}

uint64_t sub_100006930(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10000694C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100006968(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100006984(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000069A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000069BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000069D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000069F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__cdecl sub_100006A10(id a1)
{
  return sub_10002DD80(@"PhotoUsage");
}

void *__cdecl sub_100006A20(id a1)
{
  return sub_10002DD80(@"CameraUsage");
}

uint64_t sub_100006A30(const void *a1, const void *a2, __CFDictionary **a3, uint64_t a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10000C900;
  v5[3] = &unk_100185EC0;
  v5[4] = a4;
  return sub_1000064B8(a1, a2, a3, v5);
}

void sub_100006A9C()
{
  uint64_t v0 = sub_100006AE4();
  dispatch_async(v0, &stru_100185F70);
}

id sub_100006AE4()
{
  if (qword_1001B7FD8 != -1) {
    dispatch_once(&qword_1001B7FD8, &stru_1001861E8);
  }
  uint64_t v0 = (void *)qword_1001B7FD0;

  return v0;
}

void sub_100006B38(id a1)
{
  byte_1001B7FA0 = 0;
}

void sub_100006B44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (byte_1001B7FA0 == 1)
  {
    uint64_t v3 = sub_10000E740(v2, @"com.apple.disk_usage", @"MobileApplicationUsage");
    sub_100006BDC(*(void *)(a1 + 48), v3);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_10002359C(v2, "com.apple.lockdownd.usage", *(void **)(a1 + 32), *(unsigned char *)(a1 + 56), &stru_100185FB0);
  }
}

void sub_100006BDC(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v4 = sub_100006AE4();
  dispatch_assert_queue_V2(v4);

  sub_10000DC10(a1, @"com.apple.disk_usage", @"MobileApplicationUsage", a2);
  sub_10000DC10(a1, @"com.apple.disk_usage.factory", @"MobileApplicationUsage", a2);
  byte_1001B7FA0 = 1;
}

void sub_100006C6C(id a1, _data_ark *a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x3032000000;
  CFStringRef v10 = sub_10000BB90;
  id v11 = sub_10000BBA0;
  id v12 = 0;
  uint64_t v3 = os_transaction_create();
  CFDictionaryRef v4 = (void *)v8[5];
  v8[5] = v3;

  id v5 = sub_100006AE4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000CB08;
  v6[3] = &unk_100186238;
  v6[4] = &v7;
  v6[5] = a2;
  dispatch_async(v5, v6);

  _Block_object_dispose(&v7, 8);
}

void sub_100006D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

char *sub_100006D80(char *result)
{
  return result;
}

CFStringRef sub_100006D9C(const __CFString *a1)
{
  if (sub_10000FF0C(a1) && CFStringGetLength(a1) <= 63 && CFStringGetLength(a1) >= 1)
  {
    CFStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, a1);
    if (MutableCopy)
    {
      uint64_t v8 = (__CFString *)MutableCopy;
      v32.length = CFStringGetLength(MutableCopy);
      v32.location = 0;
      CFStringFindAndReplace(v8, @" ", @"-", v32, 0);
      v33.length = CFStringGetLength(v8);
      v33.location = 0;
      CFStringFindAndReplace(v8, @"_", @"-", v33, 0);
      v34.length = CFStringGetLength(v8);
      v34.location = 0;
      CFStringFindAndReplace(v8, @"--", @"-", v34, 0);
      CFStringTrim(v8, @"-");
      uint64_t Length = CFStringGetLength(v8);
      if (Length < 1) {
        goto LABEL_24;
      }
      v31.length = Length;
      v31.location = 0;
      CFStringTokenizerRef v15 = CFStringTokenizerCreate(0, v8, v31, 0x10004uLL, 0);
      if (v15)
      {
        uint64_t v16 = v15;
        CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
        while (CFStringTokenizerAdvanceToNextToken(v16))
        {
          CFStringRef v18 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(v16, 0x10000uLL);
          if (v18)
          {
            CFStringRef v19 = v18;
            CFStringAppend(Mutable, v18);
            CFRelease(v19);
          }
        }
        CFRelease(v16);
        if (!Mutable) {
          goto LABEL_24;
        }
      }
      else
      {
        CFMutableStringRef Mutable = CFStringCreateMutableCopy(0, 0, v8);
        if (!Mutable) {
          goto LABEL_24;
        }
      }
      range.location = 0;
      range.length = CFStringGetLength(Mutable);
      CFStringTransform(Mutable, &range, @"Latin; NFD; [^-_a-zA-Z0-9] Remove", 0);
      uint64_t v22 = CFStringGetLength(Mutable);
      if (v22 >= 255) {
        v23.length = 255;
      }
      else {
        v23.length = v22;
      }
      range.location = 0;
      range.length = v23.length;
      v23.location = 0;
      CFStringRef v20 = CFStringCreateWithSubstring(0, Mutable, v23);
      CFRelease(Mutable);
      if (v20)
      {
        if (CFStringGetLength(v20) && CFStringGetLength(v20) < 64)
        {
LABEL_26:
          CFRelease(v8);
          return v20;
        }
        CFRelease(v20);
      }
LABEL_24:
      sub_10001A558(0, (uint64_t)"sanitize_device_name", @"Failed to create posix name, using default.", v10, v11, v12, v13, v14, v29);
      CFStringRef v20 = (const __CFString *)MGCopyAnswer();
      if (!v20) {
        sub_10001A558(0, (uint64_t)"sanitize_device_name", @"Failed to query %@.", v24, v25, v26, v27, v28, (char)@"MarketingDeviceFamilyName");
      }
      goto LABEL_26;
    }
    sub_10001A558(0, (uint64_t)"sanitize_device_name", @"Failed to copy string.", v3, v4, v5, v6, v7, v29);
  }
  return 0;
}

CFStringRef sub_100007034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1001B7FB0 != -1) {
    dispatch_once(&qword_1001B7FB0, &stru_100185FF8);
  }
  if (qword_1001B7FA8)
  {
    CFStringRef result = SCDynamicStoreCopyComputerName((SCDynamicStoreRef)qword_1001B7FA8, 0);
    if (result) {
      return result;
    }
    int v9 = SCError();
    char v10 = SCErrorString(v9);
    sub_10001A558(0, (uint64_t)"copy_device_name", @"SCDynamicStoreCopyComputerName failed: %s", v11, v12, v13, v14, v15, v10);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_device_name", @"Failed to create dynamic store.", a4, a5, a6, a7, a8, v16);
  }
  return 0;
}

void sub_1000070CC(id a1)
{
  qword_1001B7FA8 = (uint64_t)SCDynamicStoreCreate(0, @"lockdownd", 0, 0);
}

uint64_t sub_100007100(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    int v9 = SCPreferencesCreate(0, @"com.apple.mobile.lockdown", 0);
    if (v9)
    {
      char v10 = v9;
      if (SCPreferencesLock(v9, 1u))
      {
        if (!SCPreferencesSetComputerName(v10, a1, 0x8000100u))
        {
          int v11 = SCError();
          SCErrorString(v11);
          sub_10001A558(0, (uint64_t)"set_device_name", @"SCPreferencesSetComputerName failed (%@): %s", v12, v13, v14, v15, v16, (char)a1);
        }
        CFStringRef v17 = sub_100006D9C(a1);
        if (v17)
        {
          CFStringRef v23 = v17;
          if (!SCPreferencesSetHostName())
          {
            int v24 = SCError();
            SCErrorString(v24);
            sub_10001A558(0, (uint64_t)"set_device_name", @"SCPreferencesSetHostName failed (%@): %s", v25, v26, v27, v28, v29, (char)v23);
          }
          if (!SCPreferencesSetLocalHostName(v10, v23))
          {
            int v30 = SCError();
            SCErrorString(v30);
            sub_10001A558(0, (uint64_t)"set_device_name", @"SCPreferencesSetLocalHostName failed (%@): %s", v31, v32, v33, v34, v35, (char)v23);
          }
          if (SCPreferencesCommitChanges(v10))
          {
            if (SCPreferencesApplyChanges(v10))
            {
              uint64_t v36 = 1;
LABEL_23:
              SCPreferencesUnlock(v10);
              CFRelease(v23);
              goto LABEL_24;
            }
            CFStringRef v46 = @"SCPreferencesApplyChanges failed: %s";
          }
          else
          {
            CFStringRef v46 = @"SCPreferencesCommitChanges failed: %s";
          }
          int v47 = SCError();
          char v48 = SCErrorString(v47);
          sub_10001A558(0, (uint64_t)"set_device_name", (uint64_t)v46, v49, v50, v51, v52, v53, v48);
          uint64_t v36 = 0;
          goto LABEL_23;
        }
        sub_10001A558(0, (uint64_t)"set_device_name", @"Failed to sanitize device name.", v18, v19, v20, v21, v22, v55);
        SCPreferencesUnlock(v10);
      }
      else
      {
        int v39 = SCError();
        char v40 = SCErrorString(v39);
        sub_10001A558(0, (uint64_t)"set_device_name", @"SCPreferencesLock failed: %s", v41, v42, v43, v44, v45, v40);
      }
      uint64_t v36 = 0;
LABEL_24:
      CFRelease(v10);
      return v36;
    }
    int v38 = SCError();
    char v55 = SCErrorString(v38);
    CFStringRef v37 = @"SCPreferencesCreate failed: %s";
  }
  else
  {
    CFStringRef v37 = @"Invalid input.";
  }
  sub_10001A558(0, (uint64_t)"set_device_name", (uint64_t)v37, a4, a5, a6, a7, a8, v55);
  return 0;
}

CFDataRef sub_100007310()
{
  uint64_t v0 = (NSObject **)__chkstk_darwin();
  uint64_t v16 = 0;
  CFStringRef v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 4096;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000075BC;
  v15[3] = &unk_100186020;
  v15[4] = &v16;
  v15[5] = bytes;
  int v1 = sub_100007478(v0, v15);
  if (v1)
  {
    sub_10001A558(0, (uint64_t)"extract_cesm_certificate", @"Could not get certificate chain from vault: %ld", v2, v3, v4, v5, v6, v1);
    goto LABEL_4;
  }
  CFDataRef v12 = CFDataCreate(0, bytes, *((unsigned int *)v17 + 6));
  if (!v12)
  {
    sub_10001A558(0, (uint64_t)"extract_cesm_certificate", @"Could not create CFData from cert chain", v7, v8, v9, v10, v11, v14);
LABEL_4:
    CFDataRef v12 = 0;
  }
  _Block_object_dispose(&v16, 8);
  return v12;
}

void sub_10000745C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100007478(NSObject **a1, void *a2)
{
  uint64_t v3 = a2;
  unsigned int valuePtr = 0;
  char v4 = 1;
  while (1)
  {
    char v5 = v4;
    uint64_t v6 = (const void *)sub_10000DF38((uint64_t)a1, @"com.apple.fairplay", @"FairPlayContextID");
    if (!sub_10000FE58(v6))
    {
      CFStringRef v27 = @"Could not find context in ark";
      goto LABEL_11;
    }
    if (!CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr))
    {
      CFStringRef v27 = @"Could not convert context";
LABEL_11:
      sub_10001A558(0, (uint64_t)"retryFairplay", (uint64_t)v27, v7, v8, v9, v10, v11, v28);
      if (v6) {
        CFRelease(v6);
      }
LABEL_6:
      uint64_t v25 = 4294925264;
      goto LABEL_8;
    }
    CFRelease(v6);
    uint64_t v12 = v3[2](v3, valuePtr);
    if (v12 != -42032) {
      break;
    }
    sub_10001A558(0, (uint64_t)"retryFairplay", @"Context died", v13, v14, v15, v16, v17, v28);
    sub_100011EAC(a1, v18, v19, v20, v21, v22, v23, v24, v29);
    char v4 = 0;
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
  }
  uint64_t v25 = v12;
LABEL_8:

  return v25;
}

void sub_1000075BC(uint64_t a1, uint64_t a2)
{
}

CFNumberRef sub_1000075D8()
{
  v9.tv_sec = 0;
  *(void *)&v9.tv_usec = 0;
  if (gettimeofday(&v9, 0))
  {
    CFStringRef v5 = @"Could not get current time";
LABEL_3:
    sub_10001A558(0, (uint64_t)"copy_time_since_bowie", (uint64_t)v5, v0, v1, v2, v3, v4, v7);
    return 0;
  }
  double valuePtr = (double)v9.tv_usec / 1000000.0 + (double)v9.tv_sec;
  CFNumberRef result = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!result)
  {
    CFStringRef v5 = @"Could not create CFNumber";
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_100007674(int a1, CFNumberRef number, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t valuePtr = 0;
  if (number && CFNumberGetValue(number, kCFNumberDoubleType, &valuePtr))
  {
    TMSetSourceTime();
    sub_100010480(@"SignificantTimeChangeNotification");
    return 0;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"set_time_since_bowie", @"Failed to get number.", a4, a5, a6, a7, a8, v9);
    return 0xFFFFFFFFLL;
  }
}

CFStringRef sub_100007708()
{
  CFTimeZoneResetSystem();
  CFTimeZoneRef v0 = CFTimeZoneCopySystem();
  if (v0)
  {
    CFTimeZoneRef v6 = v0;
    CFStringRef Name = CFTimeZoneGetName(v0);
    CFStringRef v13 = Name;
    if (Name) {
      CFRetain(Name);
    }
    else {
      sub_10001A558(0, (uint64_t)"copy_timezone", @"Could not get time zone name", v8, v9, v10, v11, v12, v15);
    }
    CFRelease(v6);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_timezone", @"Could not copy system time zone", v1, v2, v3, v4, v5, v15);
    return 0;
  }
  return v13;
}

uint64_t sub_100007788(int a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!theString)
  {
    CFStringRef v8 = @"Invalid input.";
    goto LABEL_5;
  }
  if (CFStringFind(theString, @".", 0).location != -1)
  {
    CFStringRef v8 = @"Timezone shenanigans.";
LABEL_5:
    sub_10001A558(0, (uint64_t)"set_timezone", (uint64_t)v8, a4, a5, a6, a7, a8, v10);
    return 0xFFFFFFFFLL;
  }
  TMSetSourceTimeZone();
  return 0;
}

CFBooleanRef sub_100007814()
{
  CFPropertyListRef v0 = sub_100007868(@"AppleICUForce24HourTime", 0);
  if (!sub_10000FF84(v0))
  {
    if (v0) {
      CFRelease(v0);
    }
    return kCFBooleanFalse;
  }
  return (CFBooleanRef)v0;
}

CFPropertyListRef sub_100007868(const void *a1, const void *a2)
{
  CFStringRef v3 = (const __CFString *)sub_10000FF0C(a1);
  CFStringRef v4 = (const __CFString *)sub_10000FF0C(a2);
  if (v3)
  {
    return sub_10001ABE4(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"_copy_mobile_preference", @"bogus request", v6, v7, v8, v9, v10, v12);
    return 0;
  }
}

uint64_t sub_1000078DC(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    sub_100005CE4(@"AppleICUForce24HourTime", a1, kCFPreferencesAnyApplication, a4, a5, a6, a7, a8, vars0);
    sub_100010480(@"AppleTimePreferencesChangedNotification");
    sub_100010480(@"SignificantTimeChangeNotification");
    return 0;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"set_military_time", @"Invalid input.", a4, a5, a6, a7, a8, vars0);
    return 0xFFFFFFFFLL;
  }
}

CFPropertyListRef sub_100007948()
{
  return sub_100007868(@"EnableTetheredDisplayPortMode", 0);
}

CFBooleanRef sub_10000795C()
{
  int v0 = MKBGetDeviceLockState();
  BOOL v1 = (v0 - 1) < 2 || v0 == -1;
  uint64_t v2 = &kCFBooleanFalse;
  if (v1) {
    uint64_t v2 = &kCFBooleanTrue;
  }
  return *v2;
}

void sub_1000079A0(const __CFBoolean *a1)
{
  if (sub_10000FF84(a1))
  {
    if (CFEqual(a1, kCFBooleanTrue)) {
      CFBooleanRef v7 = a1;
    }
    else {
      CFBooleanRef v7 = kCFBooleanFalse;
    }
    sub_100005CE4(@"EnableTetheredDisplayPortMode", v7, kCFPreferencesAnyApplication, v2, v3, v4, v5, v6, v8);
    sub_100010480(@"com.apple.mobile.demo_mode_changed");
  }
}

CFNumberRef sub_100007A34()
{
  CFTimeInterval valuePtr = 0.0;
  CFTimeZoneResetSystem();
  CFTimeZoneRef v0 = CFTimeZoneCopySystem();
  if (v0)
  {
    CFTimeZoneRef v1 = v0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFTimeInterval valuePtr = CFTimeZoneGetSecondsFromGMT(v1, Current);
    CFRelease(v1);
  }
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
}

void sub_100007A9C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a2)
  {
    CFArrayRef v10 = (const __CFArray *)sub_100007868(@"AppleLanguages", 0);
    if (sub_10000FED0(v10))
    {
      sub_10001A558(0, (uint64_t)"set_language", @"Pre-pending the language list with %@.", v11, v12, v13, v14, v15, (char)a2);
      CFArrayRef Mutable = sub_100007C5C(v10, a2);
      if (!Mutable)
      {
        CFStringRef v22 = @"Failed to create languages list.";
        goto LABEL_18;
      }
    }
    else
    {
      sub_10001A558(0, (uint64_t)"set_language", @"Failed to copy language list, creating new one.", v11, v12, v13, v14, v15, v28);
      CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      if (!Mutable)
      {
        CFStringRef v22 = @"Failed to create array.";
LABEL_18:
        sub_10001A558(0, (uint64_t)"set_language", (uint64_t)v22, v16, v17, v18, v19, v20, v29);
        if (!v10)
        {
LABEL_12:
          if (Mutable)
          {
            CFRelease(Mutable);
          }
          return;
        }
LABEL_11:
        CFRelease(v10);
        goto LABEL_12;
      }
      sub_10001A558(0, (uint64_t)"set_language", @"Creating a language with with %@", v16, v17, v18, v19, v20, (char)a2);
      CFArrayAppendValue(Mutable, a2);
    }
    sub_100005CE4(@"LockdownSetLanguage", kCFBooleanTrue, @"com.apple.purplebuddy", v16, v17, v18, v19, v20, v29);
    sub_100005CE4(@"AppleLanguages", Mutable, kCFPreferencesAnyApplication, v23, v24, v25, v26, v27, v30);
    sub_100010480(@"com.apple.language.changed");
    sub_100010480(@"AppleLanguagePreferencesChangedNotification");
    if (!v10) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  sub_10001A558(0, (uint64_t)"set_language", @"Invalid input.", a4, a5, a6, a7, a8, a9);
}

CFArrayRef sub_100007C5C(const __CFArray *a1, const void *a2)
{
  if (sub_10000FED0(a1))
  {
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, a1);
    CFArrayRef v15 = MutableCopy;
    if (MutableCopy)
    {
      CFIndex Count = CFArrayGetCount(MutableCopy);
      if (Count >= 1)
      {
        CFIndex v17 = Count;
        CFIndex v18 = 0;
        CFIndex v19 = Count;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v15, v18);
          int v21 = CFEqual(ValueAtIndex, a2);
          if (v21) {
            CFIndex v22 = v17;
          }
          else {
            CFIndex v22 = v18;
          }
          if (v21) {
            CFIndex v19 = v18;
          }
          CFIndex v18 = v22 + 1;
        }
        while (v22 + 1 < v17);
        if (v19 != v17) {
          CFArrayRemoveValueAtIndex(v15, v19);
        }
      }
      CFArrayInsertValueAtIndex(v15, 0, a2);
    }
    else
    {
      sub_10001A558(0, (uint64_t)"_move_to_front", @"Could not copy array", v10, v11, v12, v13, v14, v24);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"_move_to_front", @"bad input", v4, v5, v6, v7, v8, v24);
    return 0;
  }
  return v15;
}

void sub_100007D54(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int valuePtr = 0;
  if (a1)
  {
    if (CFEqual(a1, @"th"))
    {
      CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (v9)
      {
        CFNumberRef v15 = v9;
        sub_100005CE4(@"contactsSortOrder", v9, @"com.apple.PeoplePicker", v10, v11, v12, v13, v14, v16);
        sub_100010480(@"com.apple.AddressBook.PreferenceChanged");
        CFRelease(v15);
      }
      else
      {
        sub_10001A558(0, (uint64_t)"set_contact_sort_order", @"Failed to create number.", v10, v11, v12, v13, v14, v16);
      }
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"set_contact_sort_order", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_100007E24(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sub_10000FF0C(a1))
  {
    if (CFEqual(a1, @"ja")
      || CFEqual(a1, @"zh-Hans")
      || CFEqual(a1, @"zh-Hant")
      || CFEqual(a1, @"ko"))
    {
      sub_100005CE4(@"personNameOrdering", &__kCFBooleanTrue, @"com.apple.PeoplePicker", v15, v16, v17, v18, v19, v20);
      sub_100010480(@"com.apple.AddressBook.PreferenceChanged");
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"set_name_order", @"Invalid input.", v10, v11, v12, v13, v14, a9);
  }
}

CFTypeRef sub_100007F08()
{
  CFArrayRef v0 = (const __CFArray *)sub_100007868(@"AppleLanguages", 0);
  if (v0)
  {
    CFArrayRef v6 = v0;
    ValueAtIndex = CFArrayGetValueAtIndex(v0, 0);
    if (sub_10000FF0C(ValueAtIndex))
    {
      CFTypeRef v13 = CFRetain(ValueAtIndex);
    }
    else
    {
      sub_10001A558(0, (uint64_t)"copy_language", @"Failed to retrieve first language in list.", v8, v9, v10, v11, v12, v15);
      CFTypeRef v13 = 0;
    }
    CFRelease(v6);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_language", @"Failed to lookup %@.", v1, v2, v3, v4, v5, (char)@"AppleLanguages");
    return 0;
  }
  return v13;
}

CFStringRef sub_100007FB0(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (CFStringHasPrefix(a1, @"th_TH@")) {
      return @"th_TH";
    }
    else {
      return a1;
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"transform_locale", @"Invalid input", a4, a5, a6, a7, a8, v10);
    return 0;
  }
}

void sub_10000800C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a2)
  {
    sub_100005CE4(@"AppleLocale", a2, kCFPreferencesAnyApplication, a4, a5, a6, a7, a8, vars0);
    sub_100005CE4(@"LockdownSetLocale", kCFBooleanTrue, @"com.apple.purplebuddy", v10, v11, v12, v13, v14, vars0a);
    sub_100010480(@"com.apple.mobile.lockdown.phone_number_changed");
    sub_100010480(@"AppleDatePreferencesChangedNotification");
    sub_100010480(@"AppleTimePreferencesChangedNotification");
  }
  else
  {
    sub_10001A558(0, (uint64_t)"set_locale", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

CFTypeRef sub_1000080B8()
{
  CFPropertyListRef v0 = sub_100007868(@"AppleLocale", 0);
  CFArrayRef v6 = v0;
  if (!v0)
  {
    sub_10001A558(0, (uint64_t)"copy_locale", @"Failed to copy %@.", v1, v2, v3, v4, v5, (char)@"AppleLocale");
    return v6;
  }
  if (sub_10000FF0C(v0)) {
    return v6;
  }
  CFRelease(v6);

  return CFRetain(@"en_US");
}

CFStringRef sub_100008150(const __CFString *a1)
{
  CFStringRef v1 = a1;
  if (sub_10000FF0C(a1) && CFStringHasPrefix(v1, @"th_TH@")) {
    return @"th_TH";
  }
  return v1;
}

void sub_10000819C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a2)
  {
    CFArrayRef v15 = (const __CFArray *)sub_100007868(@"AppleKeyboards", 0);
    if (v15)
    {
      sub_10001A558(0, (uint64_t)"set_keyboard", @"Prepending the keyboard list with %@.", v10, v11, v12, v13, v14, (char)a2);
      CFArrayRef v16 = sub_100007C5C(v15, a2);
      if (!v16)
      {
        sub_10001A558(0, (uint64_t)"set_keyboard", @"Failed to re-arrange keyboard list.", v17, v18, v19, v20, v21, v31);
        CFArrayRef v30 = v15;
        goto LABEL_13;
      }
      CFIndex v22 = v16;
      if (CFEqual(v16, v15)) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    sub_10001A558(0, (uint64_t)"set_keyboard", @"Failed to copy %@.", v10, v11, v12, v13, v14, (char)@"AppleKeyboards");
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      CFIndex v22 = Mutable;
      sub_10001A558(0, (uint64_t)"set_keyboard", @"Creating the keyboard list with %@.", a4, a5, a6, a7, a8, (char)a2);
      CFArrayAppendValue(v22, a2);
LABEL_9:
      sub_100005CE4(@"AppleKeyboards", v22, kCFPreferencesAnyApplication, v23, v24, v25, v26, v27, v31);
      sub_100010480(@"AppleKeyboardsPreferencesChangedNotification");
      if (!v15)
      {
LABEL_11:
        CFArrayRef v30 = v22;
LABEL_13:
        CFRelease(v30);
        return;
      }
LABEL_10:
      CFRelease(v15);
      goto LABEL_11;
    }
    CFStringRef v28 = @"Failed to create array.";
  }
  else
  {
    CFStringRef v28 = @"Invalid input.";
  }

  sub_10001A558(0, (uint64_t)"set_keyboard", (uint64_t)v28, a4, a5, a6, a7, a8, a9);
}

const void *sub_100008330()
{
  CFArrayRef v0 = (const __CFArray *)sub_100007868(@"AppleKeyboards", 0);
  if (v0)
  {
    CFArrayRef v6 = v0;
    ValueAtIndex = CFArrayGetValueAtIndex(v0, 0);
    uint64_t v13 = ValueAtIndex;
    if (ValueAtIndex) {
      CFRetain(ValueAtIndex);
    }
    else {
      sub_10001A558(0, (uint64_t)"copy_keyboard", @"Failed to get first keyboard in the list.", v8, v9, v10, v11, v12, v15);
    }
    CFRelease(v6);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_keyboard", @"Failed to copy %@.", v1, v2, v3, v4, v5, (char)@"AppleKeyboards");
    return 0;
  }
  return v13;
}

uint64_t sub_1000083CC()
{
  CFURLRef v0 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, @"/System/Library/PrivateFrameworks/MusicLibrary.framework", kCFURLPOSIXPathStyle, 0);
  if (!v0)
  {
    sub_10001A558(0, (uint64_t)"copy_sort_sections", @"Failed to create bundle URL for %s.", v1, v2, v3, v4, v5, (char)"/System/Library/PrivateFrameworks/MusicLibrary.framework");
    return 0;
  }
  CFURLRef v6 = v0;
  CFBundleRef v7 = CFBundleCreate(kCFAllocatorDefault, v0);
  if (!v7)
  {
    sub_10001A558(0, (uint64_t)"copy_sort_sections", @"Failed to create bundle for %s.", v8, v9, v10, v11, v12, (char)"/System/Library/PrivateFrameworks/MusicLibrary.framework");
    CFStringRef v41 = (const __CFString *)v6;
LABEL_26:
    CFRelease(v41);
    return 0;
  }
  uint64_t v13 = v7;
  CFPropertyListRef v14 = sub_100007868(@"AppleLanguages", 0);
  if (!v14)
  {
    sub_10001A558(0, (uint64_t)"_copy_localization_name", @"Could not load languages list or bundle was NULL", v15, v16, v17, v18, v19, v74);
LABEL_21:
    sub_10001A558(0, (uint64_t)"copy_sort_sections", @"Failed to get localization for %s.", v42, v43, v44, v45, v46, (char)"/System/Library/PrivateFrameworks/MusicLibrary.framework");
    CFStringRef ValueAtIndex = 0;
    CFURLRef v53 = 0;
    goto LABEL_22;
  }
  uint64_t v20 = v14;
  CFArrayRef v21 = CFBundleCopyBundleLocalizations(v13);
  if (!v21)
  {
    sub_10001A558(0, (uint64_t)"_copy_localization_name", @"Could not load localizations from bundle", v22, v23, v24, v25, v26, v74);
    CFRelease(v20);
    goto LABEL_21;
  }
  CFArrayRef v27 = v21;
  CFArrayRef v28 = CFBundleCopyLocalizationsForPreferences(v21, (CFArrayRef)v20);
  if (v28)
  {
    CFArrayRef v34 = v28;
    if (CFArrayGetCount(v28) <= 0)
    {
      sub_10001A558(0, (uint64_t)"_copy_localization_name", @"No preferred localizations found", v35, v36, v37, v38, v39, v74);
      CFStringRef ValueAtIndex = 0;
    }
    else
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v34, 0);
      CFRetain(ValueAtIndex);
    }
    CFRelease(v34);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"_copy_localization_name", @"Could not load preferred localizations from bundle", v29, v30, v31, v32, v33, v74);
    CFStringRef ValueAtIndex = 0;
  }
  CFRelease(v27);
  CFRelease(v20);
  if (!ValueAtIndex) {
    goto LABEL_21;
  }
  CFURLRef v47 = CFBundleCopyResourceURLForLocalization(v13, @"MLSections", @"plist", 0, ValueAtIndex);
  CFURLRef v53 = v47;
  if (!v47)
  {
    sub_10001A558(0, (uint64_t)"copy_sort_sections", @"Failed to copy bundle resource URL (%s / %s).", v48, v49, v50, v51, v52, (char)"MLSections");
    goto LABEL_22;
  }
  CFDataRef v54 = CFReadStreamCreateWithFile(kCFAllocatorDefault, v47);
  if (!v54)
  {
    sub_10001A558(0, (uint64_t)"copy_sort_sections", @"Failed to create read stream (%s / %s).", v55, v56, v57, v58, v59, (char)"MLSections");
LABEL_22:
    CFRelease(v6);
    CFRelease(v13);
    if (!v53) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v60 = v54;
  CFReadStreamOpen(v54);
  CFPropertyListRef v61 = CFPropertyListCreateWithStream(kCFAllocatorDefault, v60, 0, 0, 0, 0);
  CFReadStreamClose(v60);
  if (v61)
  {
    CFTypeID v67 = CFGetTypeID(v61);
    if (v67 == CFDictionaryGetTypeID())
    {
      CFRelease(v6);
      CFURLRef v6 = (const __CFURL *)v61;
    }
    else
    {
      sub_10001A558(0, (uint64_t)"copy_sort_sections", @"Invalid property list (%s / %s).", v68, v69, v70, v71, v72, (char)"MLSections");
      CFRelease(v61);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_sort_sections", @"Failed to load property list (%s / %s).", v62, v63, v64, v65, v66, (char)"MLSections");
  }
  CFRelease(v6);
  CFRelease(v60);
  CFRelease(v13);
LABEL_23:
  CFRelease(v53);
LABEL_24:
  if (ValueAtIndex)
  {
    CFStringRef v41 = ValueAtIndex;
    goto LABEL_26;
  }
  return 0;
}

__CFDictionary *sub_10000873C(NSObject **a1)
{
  uint64_t v46 = 0;
  CFURLRef v47 = &v46;
  uint64_t v48 = 0x2020000000;
  uint64_t v49 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x2020000000;
  int v45 = 0;
  memset(valuePtr, 0, sizeof(valuePtr));
  uint64_t v38 = 0;
  uint64_t v39 = &v38;
  uint64_t v40 = 0x2020000000;
  int v41 = 20;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100008A44;
  v37[3] = &unk_100186048;
  void v37[4] = &v46;
  v37[5] = &v42;
  v37[6] = &v38;
  v37[7] = valuePtr;
  int v1 = sub_100007478(a1, v37);
  if (v1)
  {
    sub_10001A558(0, (uint64_t)"load_rental_bag_request", @"Could not generate rental bag request: %ld", v2, v3, v4, v5, v6, v1);
    goto LABEL_13;
  }
  uint64_t v12 = sub_10002637C();
  if (!v12)
  {
    sub_10001A558(0, (uint64_t)"load_rental_bag_request", @"Failed to create dictionary.", v7, v8, v9, v10, v11, v36);
LABEL_13:
    uint64_t v12 = 0;
    goto LABEL_18;
  }
  CFDataRef v18 = CFDataCreate(0, (const UInt8 *)v47[3], *((unsigned int *)v43 + 6));
  if (v18)
  {
    CFDictionarySetValue(v12, @"Message", v18);
    uint64_t v24 = sub_1000263D4();
    if (v24)
    {
      if (*((_DWORD *)v39 + 6))
      {
        unint64_t v25 = 0;
        uint64_t v26 = valuePtr;
        do
        {
          CFNumberRef v32 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v26);
          if (v32)
          {
            CFArrayAppendValue(v24, v32);
            CFRelease(v32);
          }
          else
          {
            sub_10001A558(0, (uint64_t)"load_rental_bag_request", @"Failed to create number.", v27, v28, v29, v30, v31, v36);
          }
          ++v25;
          uint64_t v26 = (_OWORD *)((char *)v26 + 4);
        }
        while (v25 < *((unsigned int *)v39 + 6));
      }
      CFDictionarySetValue(v12, @"DiversityElements", v24);
    }
    else
    {
      sub_10001A558(0, (uint64_t)"load_rental_bag_request", @"Failed to create array.", v19, v20, v21, v22, v23, v36);
    }
    CFRelease(v18);
    if (v24) {
      CFRelease(v24);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"load_rental_bag_request", @"Failed to create data.", v13, v14, v15, v16, v17, v36);
  }
LABEL_18:
  uint64_t v33 = v47;
  CFArrayRef v34 = (void *)v47[3];
  if (v34)
  {
    free(v34);
    uint64_t v33 = v47;
  }
  v33[3] = 0;
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v46, 8);
  return v12;
}

void sub_100008A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100008A44(void *a1, uint64_t a2)
{
}

void sub_100008A78(NSObject **a1)
{
  CFNumberRef v1 = sub_100008AAC(a1);
  if (v1)
  {
    CFRelease(v1);
  }
}

CFNumberRef sub_100008AAC(NSObject **a1)
{
  int v1 = sub_100007478(a1, &stru_1001860B0);
  int valuePtr = v1;
  if (v1)
  {
    sub_10001A558(0, (uint64_t)"copy_rental_bag_verification", @"Response processing failed: %ld\n", v2, v3, v4, v5, v6, v1);
    return CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  }
  uint64_t v7 = "/var/mobile/Media/iTunes_Control/iTunes/IC-Info.sidr";
  int v8 = sub_100026AC0("/var/mobile/Media/iTunes_Control/iTunes/IC-Info.sidr", 256, 0x8000, v2, v3, v4, v5, v6);
  if (v8 == -1) {
    goto LABEL_12;
  }
  int v9 = v8;
  uint64_t v10 = getpwnam("mobile");
  if (v10)
  {
    uid_t pw_uid = v10->pw_uid;
    gid_t pw_gid = v10->pw_gid;
  }
  else
  {
    gid_t pw_gid = 501;
    uid_t pw_uid = 501;
  }
  if (fchown(v9, pw_uid, pw_gid) == -1) {
    goto LABEL_9;
  }
  close(v9);
  uint64_t v7 = "/var/mobile/Library/FairPlay/vdpf";
  int v18 = sub_100026AC0("/var/mobile/Library/FairPlay/vdpf", 256, 0x8000, v13, v14, v15, v16, v17);
  if (v18 == -1)
  {
LABEL_12:
    uint64_t v26 = __error();
    strerror(*v26);
    sub_10001A558(0, (uint64_t)"copy_rental_bag_verification", @"hmm, symlink - that isn't right, path: %s, %s", v27, v28, v29, v30, v31, (char)v7);
    return CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  }
  int v9 = v18;
  if (fchown(v18, pw_uid, pw_gid) == -1)
  {
LABEL_9:
    uint64_t v19 = __error();
    strerror(*v19);
    sub_10001A558(0, (uint64_t)"copy_rental_bag_verification", @"Could not chown %s: %s", v20, v21, v22, v23, v24, (char)v7);
  }
  close(v9);
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
}

CFNumberRef sub_100008C18()
{
  int valuePtr = 3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (!v5) {
    sub_10001A558(0, (uint64_t)"copy_rental_request_version", @"Could not create number", v0, v1, v2, v3, v4, v7);
  }
  return v5;
}

void sub_100008C7C(NSObject **a1, const void *a2)
{
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x2020000000;
  uint64_t v40 = 0;
  uint64_t v33 = 0;
  CFArrayRef v34 = &v33;
  uint64_t v35 = 0x2020000000;
  int v36 = 0;
  if (!sub_10000FF48(a2))
  {
    CFStringRef v30 = @"value is not CFData";
LABEL_14:
    sub_10001A558(0, (uint64_t)"trigger_rental_checkin_request", (uint64_t)v30, v4, v5, v6, v7, v8, v31);
    goto LABEL_10;
  }
  size_t Length = CFDataGetLength((CFDataRef)a2);
  uint64_t v10 = malloc_type_malloc(Length, 0xFDEC5366uLL);
  if (!v10)
  {
    CFStringRef v30 = @"Could not allocate a buffer for the a copy of the original message";
    goto LABEL_14;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a2);
  memcpy(v10, BytePtr, Length);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100008ED0;
  v32[3] = &unk_100186070;
  v32[6] = v10;
  v32[7] = Length;
  v32[4] = &v37;
  v32[5] = &v33;
  int v12 = sub_100007478(a1, v32);
  if (v12)
  {
    sub_10001A558(0, (uint64_t)"trigger_rental_checkin_request", @"Could not get response ack: %ld", v13, v14, v15, v16, v17, v12);
  }
  else
  {
    int v18 = (const UInt8 *)v38[3];
    if (v18 && (CFIndex v19 = *((unsigned int *)v34 + 6), v19))
    {
      CFDataRef v25 = CFDataCreate(kCFAllocatorDefault, v18, v19);
      if (v25)
      {
        sub_10000E2FC(a1, @"com.apple.fairplay", @"RentalCheckinAckResponse", 1, v21, v22, v23, v24);
        sub_10000D5A8((uint64_t)a1, @"com.apple.fairplay", @"RentalCheckinAckResponse", (uint64_t)v25, v26, v27, v28, v29);
        CFRelease(v25);
      }
      else
      {
        sub_10001A558(0, (uint64_t)"trigger_rental_checkin_request", @"Could not create data from ack.", v20, v21, v22, v23, v24, v31);
      }
    }
    else
    {
      sub_10001A558(0, (uint64_t)"trigger_rental_checkin_request", @"Invalid ack! Ack. Ack. Ack.", v13, v14, v15, v16, v17, v31);
    }
  }
  free(v10);
LABEL_10:
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
}

void sub_100008EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100008ED0(uint64_t a1, uint64_t a2)
{
}

int sub_100008EF8(id a1, unsigned int a2)
{
  sub_10004D1D8();
  return result;
}

CFNumberRef sub_100008F00()
{
  int valuePtr = 0;
  sub_10004E4D0((uint64_t)&valuePtr);
  if (v0)
  {
    char v8 = v0;
    CFStringRef v6 = @"Could not get necessary rental clock bias: %ld";
LABEL_3:
    sub_10001A558(0, (uint64_t)"copy_rental_clock_bias", (uint64_t)v6, v1, v2, v3, v4, v5, v8);
    return 0;
  }
  CFNumberRef result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (!result)
  {
    CFStringRef v6 = @"Could not create bias number";
    goto LABEL_3;
  }
  return result;
}

id sub_100008F84()
{
  id v5 = objc_alloc_init((Class)NSMutableArray);
  if (v5)
  {
    CFStringRef v6 = (void *)MobileStorageCopyDevicesWithError();
    id v7 = v6;
    if (v6 && [v6 count])
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v7 = v7;
      id v8 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v21;
        uint64_t v11 = kMobileStorageDeviceTypeKey;
        uint64_t v12 = kMobileStorageDeviceTypeDiskImage;
        uint64_t v13 = kMobileStorageMountPathKey;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(void *)v21 != v10) {
              objc_enumerationMutation(v7);
            }
            uint64_t v15 = *(void **)(*((void *)&v20 + 1) + 8 * i);
            uint64_t v16 = [v15 objectForKeyedSubscript:v11];
            if ([v16 isEqualToString:v12])
            {
              uint64_t v17 = [v15 objectForKeyedSubscript:v13];
              if (v17)
              {
                int v18 = (void *)v17;
                [v5 addObject:v17];
              }
            }
          }
          id v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
        }
        while (v9);
      }
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_disk_image_mount_points", @"Failed to allocate array.", v0, v1, v2, v3, v4, v20);
    id v7 = 0;
  }

  return v5;
}

void sub_100009140(uint64_t a1, dispatch_queue_t *a2, void *a3, unsigned char *a4)
{
  memset(&v60, 0, sizeof(v60));
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  id v7 = a3;
  bzero(__str, 0x400uLL);
  char v59 = 0;
  sub_10001A558(0, (uint64_t)"load_agents_for_mount", @"Loading images for mount %@.", v8, v9, v10, v11, v12, (char)v7);
  if (a4) {
    *a4 = 0;
  }
  id v13 = v7;
  if (snprintf(__str, 0x400uLL, "%s%s", (const char *)[v13 UTF8String], "/Library/Lockdown/ServiceAgents") >= 0x400)
  {
    char v14 = [v13 UTF8String];
    sub_10001A558(0, (uint64_t)"load_agents_for_mount", @"Path too long: %s%s", v15, v16, v17, v18, v19, v14);
LABEL_30:
    uint64_t v29 = 0;
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    goto LABEL_31;
  }
  if (lstat(__str, &v60) == -1)
  {
    if (*__error() != 2)
    {
      __error();
      uint64_t v46 = __error();
      strerror(*v46);
      sub_10001A558(0, (uint64_t)"load_agents_for_mount", @"Failed to stat %s: %d (%s)", v47, v48, v49, v50, v51, (char)__str);
    }
    goto LABEL_30;
  }
  if ((v60.st_mode & 0xF000) != 0x4000)
  {
    sub_10001A558(0, (uint64_t)"load_agents_for_mount", @"%s is not a directory, ignoring", v20, v21, v22, v23, v24, (char)__str);
    goto LABEL_30;
  }
  uint64_t v62 = __str;
  uint64_t v63 = 0;
  CFDataRef v25 = fts_open(&v62, 21, 0);
  if (!v25)
  {
    int v52 = *__error();
    CFURLRef v53 = __error();
    strerror(*v53);
    sub_10001A558(0, (uint64_t)"load_agents_for_mount", @"fts_open failed: %d (%s)", v54, v55, v56, v57, v58, v52);
    goto LABEL_30;
  }
  uint64_t v26 = v25;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  while (1)
  {
    CFStringRef v30 = fts_read(v26);
    if (!v30) {
      break;
    }
    char v31 = v30;
    if (v30->fts_info == 8 && !strncmp(&v30->fts_name[v30->fts_namelen - 6], ".plist", 6uLL))
    {
      CFNumberRef v32 = (void *)sub_10002610C(v31->fts_path);

      if (v32)
      {
        uint64_t v38 = [v32 objectForKeyedSubscript:@"Label"];

        uint64_t v29 = (void *)v38;
        if (v38)
        {
          uint64_t v27 = MobileStorageCopyAndFixPlist();

          if (!v27)
          {
            CFNumberRef v32 = 0;
            CFStringRef v44 = @"Failed to copy/fix %s.";
            goto LABEL_18;
          }
          id v45 = [v27 mutableCopy];

          if (([v13 isEqualToString:@"/Developer"] & 1) != 0
            || [v13 isEqualToString:@"/System/Developer"])
          {
            [v45 setObject:&__kCFBooleanTrue forKeyedSubscript:@"DeveloperModeRequired"];
          }
          sub_10001A1F8(a2, a1, v29, (uint64_t)v45, &v59);
          uint64_t v28 = v45;
          if (a4)
          {
            uint64_t v28 = v45;
            if (v59)
            {
              *a4 = 1;
              uint64_t v28 = v45;
            }
          }
        }
        else
        {
          CFStringRef v44 = @"%s did not contain a label.";
LABEL_18:
          sub_10001A558(0, (uint64_t)"load_agents_for_mount", (uint64_t)v44, v39, v40, v41, v42, v43, (char)v31->fts_path);
          uint64_t v27 = v32;
        }
      }
      else
      {
        sub_10001A558(0, (uint64_t)"load_agents_for_mount", @"Failed to load %s.", v33, v34, v35, v36, v37, (char)v31->fts_path);
        uint64_t v27 = 0;
      }
    }
  }
  fts_close(v26);
LABEL_31:
}

CFStringRef sub_10000950C(const __CFString *a1)
{
  char v1 = (char)a1;
  uint64_t v29 = 0;
  *(_OWORD *)cStr = 0u;
  memset(v38, 0, sizeof(v38));
  uint64_t CString = CFStringGetCString(a1, buffer, 20, 0x8000100u);
  if (!CString)
  {
    sub_10001A558(CString, (uint64_t)"createV6Address", @"Failed to query C string for %@.", v3, v4, v5, v6, v7, v1);
    return @"0.0.0.0";
  }
  uint64_t v8 = ether_aton(buffer);
  if (!v8)
  {
    sub_10001A558(0, (uint64_t)"createV6Address", @"ether_aton failed for %@.", v9, v10, v11, v12, v13, v1);
    return @"0.0.0.0";
  }
  LOWORD(v29) = -32514;
  char v30 = v8->octet[0] ^ 2;
  u_char v31 = v8->octet[1];
  u_char v32 = v8->octet[2];
  __int16 v33 = -257;
  u_char v34 = v8->octet[3];
  u_char v35 = v8->octet[4];
  u_char v36 = v8->octet[5];
  if (!inet_ntop(30, &v29, cStr, 0x2Eu))
  {
    __error();
    uint64_t v22 = __error();
    strerror(*v22);
    sub_10001A558(0, (uint64_t)"createV6Address", @"inet_ntop failed for %@: %d (%s)", v23, v24, v25, v26, v27, v1);
    return @"0.0.0.0";
  }
  CFStringRef v14 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (!v14)
  {
    sub_10001A558(0, (uint64_t)"createV6Address", @"Failed to create string for %s.", v15, v16, v17, v18, v19, (char)cStr);
    return @"0.0.0.0";
  }
  CFStringRef v20 = v14;
  CFTypeRef v21 = CFRetain(v14);
  CFRelease(v20);
  return (const __CFString *)v21;
}

void sub_1000096AC(NSObject **a1)
{
  strcpy(regtype, "_apple-mobdev2._tcp");
  *(_OWORD *)domain = *(_OWORD *)"local";
  LODWORD(v73) = 0;
  uint64_t v2 = (const void *)sub_10000DF38((uint64_t)a1, @"com.apple.mobile.wireless_lockdown", @"SupportsWifi");
  sub_10000E2FC(a1, @"com.apple.mobile.wireless_lockdown", @"SupportsWifiSyncing", 1, v3, v4, v5, v6);
  if (!sub_10000FF84(v2) || !CFEqual(v2, kCFBooleanTrue))
  {
    sub_10000D5A8((uint64_t)a1, @"com.apple.mobile.wireless_lockdown", @"SupportsWifiSyncing", (uint64_t)kCFBooleanFalse, v7, v8, v9, v10);
    CFStringRef v11 = 0;
LABEL_11:
    uint64_t v27 = 0;
    CFStringRef v28 = 0;
    CFStringRef v29 = 0;
    goto LABEL_12;
  }
  sub_10000D5A8((uint64_t)a1, @"com.apple.mobile.wireless_lockdown", @"SupportsWifiSyncing", (uint64_t)kCFBooleanTrue, v7, v8, v9, v10);
  CFStringRef v11 = (const __CFString *)sub_10000DF38((uint64_t)a1, 0, @"WiFiAddress");
  if (!sub_10000FF0C(v11))
  {
    CFStringRef v26 = @"Missing Wifi MAC Address.";
LABEL_10:
    sub_10001A558(0, (uint64_t)"intialize_wifi_syncing", (uint64_t)v26, v12, v13, v14, v15, v16, v68);
    goto LABEL_11;
  }
  uint64_t CurrentWireProtocolVersion = RemotePairingGetCurrentWireProtocolVersion();
  if (CurrentWireProtocolVersion < 0)
  {
    CFStringRef v26 = @"Failed to read RemotePairing protocol version.";
    goto LABEL_10;
  }
  uint64_t v18 = CurrentWireProtocolVersion;
  CFStringRef v19 = sub_10000950C(v11);
  if (remotePairingIsEnabled()) {
    CFStringRef v20 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@@%@-%@-%ld", v11, v19, @"supportsRP", v18, *(void *)domain, *(void *)&domain[8], v73);
  }
  else {
    CFStringRef v20 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@@%@", v11, v19, v70, v71, *(void *)domain, *(void *)&domain[8], v73);
  }
  CFStringRef v29 = v20;
  if (!v20)
  {
    CFStringRef v39 = @"Failed to create v6 address string.";
    goto LABEL_29;
  }
  uint64_t CString = CFStringGetCString(v20, buffer, 64, 0x8000100u);
  if (!CString)
  {
    CFStringRef v39 = @"Failed to create v6 address C string.";
    goto LABEL_31;
  }
  sub_10000E2FC(a1, @"com.apple.mobile.wireless_lockdown", @"InstanceName", 1, v22, v23, v24, v25);
  sub_10000E2FC(a1, @"com.apple.mobile.wireless_lockdown", @"InstanceName", 2, v31, v32, v33, v34);
  sub_10000D5A8((uint64_t)a1, @"com.apple.mobile.wireless_lockdown", @"InstanceName", (uint64_t)v29, v35, v36, v37, v38);
  if (DNSServiceConstructFullName(fullName, buffer, regtype, domain))
  {
    CFStringRef v39 = @"Failed to construct DNS full service name.";
LABEL_29:
    uint64_t CString = 0;
LABEL_31:
    sub_10001A558(CString, (uint64_t)"intialize_wifi_syncing", (uint64_t)v39, v21, v22, v23, v24, v25, v69);
    CFStringRef v28 = 0;
    goto LABEL_32;
  }
  CFStringRef v28 = CFStringCreateWithCString(kCFAllocatorDefault, fullName, 0x8000100u);
  if (v28)
  {
    CFStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, v28);
    uint64_t v27 = (__CFString *)MutableCopy;
    if (MutableCopy)
    {
      v77.length = CFStringGetLength(MutableCopy);
      v77.location = 0;
      CFStringFindAndReplace(v27, @"\\"", &stru_100192118, v77, 0);
      sub_10000E2FC(a1, @"com.apple.mobile.wireless_lockdown", @"BonjourFullServiceName", 1, v51, v52, v53, v54);
      sub_10000E2FC(a1, @"com.apple.mobile.wireless_lockdown", @"BonjourFullServiceName", 0, v55, v56, v57, v58);
      sub_10000D5A8((uint64_t)a1, @"com.apple.mobile.wireless_lockdown", @"BonjourFullServiceName", (uint64_t)v27, v59, v60, v61, v62);
      if (dword_1001B6AD0) {
        sub_10001A558(0, (uint64_t)"intialize_wifi_syncing", @"Full service name is '%@'.", v63, v64, v65, v66, v67, (char)v27);
      }
    }
    else
    {
      sub_10001A558(0, (uint64_t)"intialize_wifi_syncing", @"Failed to copy DNS full service name string.", v46, v47, v48, v49, v50, v69);
    }
    goto LABEL_33;
  }
  sub_10001A558(0, (uint64_t)"intialize_wifi_syncing", @"Failed to create DNS full service name string.", v40, v41, v42, v43, v44, v69);
LABEL_32:
  uint64_t v27 = 0;
LABEL_33:
  if (v19) {
    CFRelease(v19);
  }
LABEL_12:
  if (v2) {
    CFRelease(v2);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v27) {
    CFRelease(v27);
  }
}

CFBooleanRef sub_100009ACC()
{
  CFBooleanRef v0 = kCFBooleanFalse;
  char v1 = SCPreferencesCreate(0, @"racoon", @"com.apple.ipsec.plist");
  if (v1)
  {
    uint64_t v7 = v1;
    int valuePtr = 0;
    CFDictionaryRef Value = (const __CFDictionary *)SCPreferencesGetValue(v1, @"Global");
    if (sub_10000FE94(Value))
    {
      CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(Value, @"DebugLevel");
      if (sub_10000FE58(v9))
      {
        CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
        if (valuePtr) {
          CFBooleanRef v0 = kCFBooleanTrue;
        }
      }
    }
    CFRelease(v7);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_vpn_logging", @"Could not create configd prefs", v2, v3, v4, v5, v6, v11);
  }
  return v0;
}

void sub_100009BA8(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int valuePtr = 0;
  if (sub_10000FF84(a1))
  {
    uint64_t v15 = SCPreferencesCreate(0, @"racoon", @"com.apple.ipsec.plist");
    if (v15)
    {
      uint64_t v16 = v15;
      CFPropertyListRef Value = SCPreferencesGetValue(v15, @"Global");
      CFDictionaryRef v18 = (const __CFDictionary *)sub_10000FE94(Value);
      if (!v18 || (CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v18)) == 0)
      {
        CFMutableDictionaryRef MutableCopy = sub_10002637C();
        if (!MutableCopy)
        {
          sub_10001A558(0, (uint64_t)"enable_vpn_logging", @"Failed to create dictionary.", v20, v21, v22, v23, v24, v41);
LABEL_21:
          CFRelease(v16);
          return;
        }
      }
      int valuePtr = 2 * (CFEqual(a1, kCFBooleanTrue) != 0);
      CFNumberRef v25 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (!v25)
      {
        sub_10001A558(0, (uint64_t)"enable_vpn_logging", @"Could not create debug level number", v26, v27, v28, v29, v30, v41);
LABEL_20:
        CFRelease(MutableCopy);
        goto LABEL_21;
      }
      CFNumberRef v31 = v25;
      CFDictionarySetValue(MutableCopy, @"DebugLevel", v25);
      CFDictionarySetValue(MutableCopy, @"DebugLogfile", @"/var/log/racoon.log");
      SCPreferencesSetValue(v16, @"Global", MutableCopy);
      if (SCPreferencesCommitChanges(v16))
      {
        if (SCPreferencesApplyChanges(v16))
        {
LABEL_19:
          CFRelease(v31);
          goto LABEL_20;
        }
        CFStringRef v32 = @"SCPreferencesApplyChanges: %s";
      }
      else
      {
        CFStringRef v32 = @"SCPreferencesCommitChanges: %s";
      }
      int v34 = SCError();
      char v35 = SCErrorString(v34);
      sub_10001A558(0, (uint64_t)"enable_vpn_logging", (uint64_t)v32, v36, v37, v38, v39, v40, v35);
      goto LABEL_19;
    }
    CFStringRef v33 = @"SCPreferencesCreate failed.";
  }
  else
  {
    CFStringRef v33 = @"Invalid input";
  }

  sub_10001A558(0, (uint64_t)"enable_vpn_logging", (uint64_t)v33, v10, v11, v12, v13, v14, a9);
}

void sub_100009D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"remove_vpn_logs", @"Removing %s", a4, a5, a6, a7, a8, (char)"/var/log/racoon.log");
  }
  if (unlink("/var/log/racoon.log") == -1)
  {
    uint64_t v8 = __error();
    strerror(*v8);
    sub_10001A558(0, (uint64_t)"remove_vpn_logs", @"Could not unlink %s: %s", v9, v10, v11, v12, v13, (char)"/var/log/racoon.log");
  }
}

CFBooleanRef sub_100009E34()
{
  CFBooleanRef v0 = kCFBooleanFalse;
  char v1 = SCPreferencesCreate(0, @"eapolclient", @"com.apple.eapolclient.plist");
  if (v1)
  {
    uint64_t v7 = v1;
    CFPropertyListRef Value = SCPreferencesGetValue(v1, @"LogFlags");
    if (sub_10000FE58(Value)) {
      CFBooleanRef v0 = kCFBooleanTrue;
    }
    CFRelease(v7);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_8021X_logging", @"Could not create configd prefs", v2, v3, v4, v5, v6, v10);
  }
  return v0;
}

void sub_100009EC4(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sub_10000FF84(a1))
  {
    SCPreferencesRef v15 = SCPreferencesCreate(0, @"eapolclient", @"com.apple.eapolclient.plist");
    if (v15)
    {
      uint64_t v16 = v15;
      int valuePtr = 0;
      if (CFEqual(a1, kCFBooleanTrue))
      {
        int valuePtr = -1;
        CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
        if (v17)
        {
          CFNumberRef v23 = v17;
          SCPreferencesSetValue(v16, @"LogFlags", v17);
          CFRelease(v23);
        }
        else
        {
          sub_10001A558(0, (uint64_t)"enable_8021X_logging", @"Could not create dflags number", v18, v19, v20, v21, v22, v39);
        }
      }
      else
      {
        SCPreferencesRemoveValue(v16, @"LogFlags");
      }
      if (!SCPreferencesCommitChanges(v16))
      {
        int v25 = SCError();
        char v26 = SCErrorString(v25);
        sub_10001A558(0, (uint64_t)"enable_8021X_logging", @"SCPreferencesCommitChanges: %s", v27, v28, v29, v30, v31, v26);
      }
      if (!SCPreferencesApplyChanges(v16))
      {
        int v32 = SCError();
        char v33 = SCErrorString(v32);
        sub_10001A558(0, (uint64_t)"enable_8021X_logging", @"SCPreferencesApplyChanges: %s", v34, v35, v36, v37, v38, v33);
      }
      CFRelease(v16);
      return;
    }
    CFStringRef v24 = @"Could not create configd prefs";
  }
  else
  {
    CFStringRef v24 = @"tried to enable logging without a BOOLean";
  }

  sub_10001A558(0, (uint64_t)"enable_8021X_logging", (uint64_t)v24, v10, v11, v12, v13, v14, a9);
}

void sub_10000A04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"remove_8021X_logs", @"Removing %s", a4, a5, a6, a7, a8, (char)"/var/log/eapolclient.en0.log");
  }
  if (unlink("/var/log/eapolclient.en0.log") == -1)
  {
    uint64_t v8 = __error();
    strerror(*v8);
    sub_10001A558(0, (uint64_t)"remove_8021X_logs", @"Could not unlink %s: %s", v9, v10, v11, v12, v13, (char)"/var/log/eapolclient.en0.log");
  }
}

CFTypeRef sub_10000A0E4()
{
  CFBooleanRef v0 = kCFBooleanFalse;
  char v1 = SCPreferencesCreate(0, @"OSThermalStatus", @"OSThermalStatus.plist");
  if (v1)
  {
    uint64_t v7 = v1;
    CFBooleanRef Value = (const __CFBoolean *)SCPreferencesGetValue(v1, @"OSThermalNotificationLoggingEnabled");
    if (Value) {
      CFBooleanRef v0 = Value;
    }
    CFRelease(v7);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_CLTM_logging", @"Could not create configd prefs", v2, v3, v4, v5, v6, v10);
  }

  return CFRetain(v0);
}

void sub_10000A174(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sub_10000FF84(a1))
  {
    SCPreferencesRef v15 = SCPreferencesCreate(0, @"OSThermalStatus", @"OSThermalStatus.plist");
    if (v15)
    {
      uint64_t v16 = v15;
      SCPreferencesSetValue(v15, @"logFile", @"/var/logs/cltm.log");
      SCPreferencesSetValue(v16, @"OSThermalNotificationLoggingEnabled", a1);
      if (!SCPreferencesCommitChanges(v16))
      {
        int v17 = SCError();
        char v18 = SCErrorString(v17);
        sub_10001A558(0, (uint64_t)"enable_CLTM_logging", @"SCPreferencesCommitChanges: %s", v19, v20, v21, v22, v23, v18);
      }
      if (!SCPreferencesApplyChanges(v16))
      {
        int v24 = SCError();
        char v25 = SCErrorString(v24);
        sub_10001A558(0, (uint64_t)"enable_CLTM_logging", @"SCPreferencesApplyChanges: %s", v26, v27, v28, v29, v30, v25);
      }
      CFRelease(v16);
      return;
    }
    CFStringRef v31 = @"Could not create configd prefs";
  }
  else
  {
    CFStringRef v31 = @"Bad value";
  }

  sub_10001A558(0, (uint64_t)"enable_CLTM_logging", (uint64_t)v31, v10, v11, v12, v13, v14, a9);
}

void sub_10000A2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"remove_CLTM_logs", @"Removing %s", a4, a5, a6, a7, a8, (char)"/var/logs/cltm.log");
  }
  if (unlink("/var/logs/cltm.log") == -1)
  {
    uint64_t v8 = __error();
    strerror(*v8);
    sub_10001A558(0, (uint64_t)"remove_CLTM_logs", @"Could not unlink %s: %s", v9, v10, v11, v12, v13, (char)"/var/logs/cltm.log");
  }
}

void sub_10000A33C(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sub_10000FF84(a1))
  {
    SCPreferencesRef v15 = SCPreferencesCreate(0, @"OSThermalStatus", @"OSThermalStatus.plist");
    if (v15)
    {
      uint64_t v16 = v15;
      SCPreferencesSetValue(v15, @"tGraphLogFile", @"/var/logs/tGraph.csv");
      SCPreferencesSetValue(v16, @"OSThermalNotificationLoggingEnabled", a1);
      if (!SCPreferencesCommitChanges(v16))
      {
        int v17 = SCError();
        char v18 = SCErrorString(v17);
        sub_10001A558(0, (uint64_t)"enable_CLTM_TGraph_logging", @"SCPreferencesCommitChanges: %s", v19, v20, v21, v22, v23, v18);
      }
      if (!SCPreferencesApplyChanges(v16))
      {
        int v24 = SCError();
        char v25 = SCErrorString(v24);
        sub_10001A558(0, (uint64_t)"enable_CLTM_TGraph_logging", @"SCPreferencesApplyChanges: %s", v26, v27, v28, v29, v30, v25);
      }
      CFRelease(v16);
      return;
    }
    CFStringRef v31 = @"Could not create configd prefs";
  }
  else
  {
    CFStringRef v31 = @"Bad value";
  }

  sub_10001A558(0, (uint64_t)"enable_CLTM_TGraph_logging", (uint64_t)v31, v10, v11, v12, v13, v14, a9);
}

void sub_10000A46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"remove_CLTM_TGraph_logs", @"Removing %s", a4, a5, a6, a7, a8, (char)"/var/logs/tGraph.csv");
  }
  if (unlink("/var/logs/tGraph.csv") == -1)
  {
    uint64_t v8 = __error();
    strerror(*v8);
    sub_10001A558(0, (uint64_t)"remove_CLTM_TGraph_logs", @"Could not unlink %s: %s", v9, v10, v11, v12, v13, (char)"/var/logs/tGraph.csv");
  }
}

void sub_10000A504(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sub_10000FF84(a1))
  {
    SCPreferencesRef v15 = SCPreferencesCreate(0, @"OSThermalStatus", @"OSThermalStatus.plist");
    if (v15)
    {
      uint64_t v16 = v15;
      SCPreferencesSetValue(v15, @"ThermStatsEnabled", a1);
      if (!SCPreferencesCommitChanges(v16))
      {
        int v17 = SCError();
        char v18 = SCErrorString(v17);
        sub_10001A558(0, (uint64_t)"enable_CLTM_Thermstat_logging", @"SCPreferencesCommitChanges: %s", v19, v20, v21, v22, v23, v18);
      }
      if (!SCPreferencesApplyChanges(v16))
      {
        int v24 = SCError();
        char v25 = SCErrorString(v24);
        sub_10001A558(0, (uint64_t)"enable_CLTM_Thermstat_logging", @"SCPreferencesApplyChanges: %s", v26, v27, v28, v29, v30, v25);
      }
      CFRelease(v16);
      return;
    }
    CFStringRef v31 = @"Could not create configd prefs";
  }
  else
  {
    CFStringRef v31 = @"Bad value";
  }

  sub_10001A558(0, (uint64_t)"enable_CLTM_Thermstat_logging", (uint64_t)v31, v10, v11, v12, v13, v14, a9);
}

void sub_10000A61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"remove_CLTM_Thermstat_logs", @"Removing %s", a4, a5, a6, a7, a8, (char)"/Library/Logs/CrashReporter/*.thermstats");
  }
  if (unlink("/Library/Logs/CrashReporter/*.thermstats") == -1)
  {
    uint64_t v8 = __error();
    strerror(*v8);
    sub_10001A558(0, (uint64_t)"remove_CLTM_Thermstat_logs", @"Could not unlink %s: %s", v9, v10, v11, v12, v13, (char)"/Library/Logs/CrashReporter/*.thermstats");
  }
}

void sub_10000A6B4(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sub_10000FF84(a1))
  {
    CFStringRef v14 = @"Value is not a CFBoolean";
LABEL_3:
    sub_10001A558(0, (uint64_t)"enable_wifimanager_logging", (uint64_t)v14, v9, v10, v11, v12, v13, a9);
    return;
  }
  uint64_t v15 = WiFiManagerClientCreate();
  if (!v15)
  {
    CFStringRef v14 = @"Couldn't create WiFiManager client";
    goto LABEL_3;
  }
  uint64_t v16 = (const void *)v15;
  WiFiManagerClientSetProperty();
  WiFiManagerClientSetProperty();

  CFRelease(v16);
}

void sub_10000A780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"remove_wifimanager_logs", @"Removing %s", a4, a5, a6, a7, a8, (char)"/var/log/wifimanager.log");
  }
  if (unlink("/var/log/wifimanager.log") == -1)
  {
    uint64_t v8 = __error();
    strerror(*v8);
    sub_10001A558(0, (uint64_t)"remove_wifimanager_logs", @"Could not unlink %s: %s", v9, v10, v11, v12, v13, (char)"/var/log/wifimanager.log");
  }
}

void sub_10000A818(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sub_10000FF84(a1))
  {
    CFStringRef v15 = @"Value is not a CFBoolean";
LABEL_3:
    sub_10001A558(0, (uint64_t)"enable_lockdown_disk_logging", (uint64_t)v15, v10, v11, v12, v13, v14, a9);
    return;
  }
  if (CFEqual(a1, kCFBooleanTrue))
  {
    dword_1001B6AD8 = 1;
    sub_10001A558(0, (uint64_t)"enable_lockdown_disk_logging", @"Enabling the log to disk preference", v16, v17, v18, v19, v20, v26);
  }
  else if (CFEqual(a1, kCFBooleanFalse))
  {
    sub_10001A558(0, (uint64_t)"enable_lockdown_disk_logging", @"Disabling the log to disk preference", v21, v22, v23, v24, v25, v26);
    dword_1001B6AD8 = 0;
  }
  CFPreferencesSetValue(@"LogToDisk", a1, @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  if (!CFPreferencesSynchronize(@"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost))
  {
    CFStringRef v15 = @"Could not synchronize preferences";
    goto LABEL_3;
  }
}

CFPropertyListRef sub_10000A960()
{
  return CFPreferencesCopyValue(@"LogToDisk", @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
}

void sub_10000A994(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFTypeID v10 = CFGetTypeID(a1);
  if (v10 != CFBooleanGetTypeID())
  {
    CFStringRef v23 = @"Value is not a CFBoolean";
    goto LABEL_10;
  }
  if (CFEqual(a1, kCFBooleanTrue))
  {
    int v21 = 1;
    CFStringRef v22 = @"Enabling the extended logging preference";
LABEL_7:
    sub_10001A558(0, (uint64_t)"enable_lockdown_extended_logging", (uint64_t)v22, v16, v17, v18, v19, v20, v24);
    dword_1001B6AD0 = v21;
    goto LABEL_8;
  }
  if (CFEqual(a1, kCFBooleanFalse))
  {
    int v21 = 0;
    CFStringRef v22 = @"Disabling the extended logging preference";
    goto LABEL_7;
  }
LABEL_8:
  CFPreferencesSetValue(@"ExtendedLogging", a1, @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  if (CFPreferencesSynchronize(@"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost))
  {
    return;
  }
  CFStringRef v23 = @"Could not synchronize preferences";
LABEL_10:

  sub_10001A558(0, (uint64_t)"enable_lockdown_extended_logging", (uint64_t)v23, v11, v12, v13, v14, v15, a9);
}

void sub_10000AAD0(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFTypeID v11 = CFGetTypeID(a1);
  if (v11 != CFBooleanGetTypeID())
  {
    CFStringRef v27 = @"Value is not a CFBoolean";
    goto LABEL_10;
  }
  if (CFEqual(a1, kCFBooleanTrue))
  {
    dword_1001B6AD4 = 1;
    sub_10000D5A8(a2, 0, @"UseRaptorCerts", (uint64_t)a1, v17, v18, v19, v20);
    CFStringRef v26 = @"Enabling the raptor certs";
LABEL_7:
    sub_10001A558(0, (uint64_t)"enable_raptor_certs", (uint64_t)v26, v21, v22, v23, v24, v25, v32);
    goto LABEL_8;
  }
  if (CFEqual(a1, kCFBooleanFalse))
  {
    sub_10000D5A8(a2, 0, @"UseRaptorCerts", (uint64_t)a1, v28, v29, v30, v31);
    dword_1001B6AD4 = 0;
    CFStringRef v26 = @"Disabling the raptor certs";
    goto LABEL_7;
  }
LABEL_8:
  CFPreferencesSetValue(@"RaptorCertsPref", a1, @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  if (CFPreferencesSynchronize(@"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost))
  {
    return;
  }
  CFStringRef v27 = @"Could not synchronize preferences";
LABEL_10:

  sub_10001A558(0, (uint64_t)"enable_raptor_certs", (uint64_t)v27, v12, v13, v14, v15, v16, a9);
}

CFPropertyListRef sub_10000AC50()
{
  return CFPreferencesCopyValue(@"ExtendedLogging", @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
}

CFPropertyListRef sub_10000AC84()
{
  return CFPreferencesCopyValue(@"RaptorCertsPref", @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
}

void *sub_10000ACB8()
{
  CFBooleanRef v0 = kCFBooleanFalse;
  CFPropertyListRef v1 = sub_100007868(@"stream_trace", @"com.apple.coremedia");
  if (v1)
  {
    uint64_t v2 = v1;
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID())
    {
      CFBooleanRef v0 = (void *)CFRetain(v2);
    }
    else
    {
      CFTypeID v4 = CFGetTypeID(v2);
      if (v4 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v2, kCFNumberIntType, &valuePtr)) {
          CFBooleanRef v0 = kCFBooleanTrue;
        }
      }
    }
    CFRelease(v2);
  }
  return v0;
}

CFDataRef sub_10000AD7C()
{
  CFTypeRef result = 0;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassKey);
    CFDictionaryAddValue(v6, kSecReturnRef, kCFBooleanTrue);
    CFDictionaryAddValue(v6, kSecAttrAccessGroup, @"lockdown-identities");
    CFDictionaryAddValue(v6, kSecAttrLabel, @"com.apple.lockdown.pairingkeypair");
    CFDictionaryAddValue(v6, kSecUseSystemKeychain, kCFBooleanTrue);
    char v7 = 1;
    while (1)
    {
      char v8 = v7;
      OSStatus v9 = SecItemCopyMatching(v6, &result);
      if (!v9) {
        break;
      }
      OSStatus v15 = v9;
      sub_10001A558(0, (uint64_t)"copy_pairing_private_key", @"Failed to retrieve private key from keychain: %d", v10, v11, v12, v13, v14, v9);
      if (v15 != -25291)
      {
        sub_100012210(1, v16, v17, v18, v19, v20, v21, v22, v31);
        char v7 = 0;
        if (v8) {
          continue;
        }
      }
      CFDataRef v23 = 0;
      goto LABEL_10;
    }
    CFDataRef v23 = sub_10000EC94((uint64_t)result, "RSA PRIVATE KEY");
    if (!v23) {
      sub_10001A558(0, (uint64_t)"copy_pairing_private_key", @"Failed to create PEM from private key data.", v24, v25, v26, v27, v28, v30);
    }
LABEL_10:
    CFRelease(v6);
    if (result) {
      CFRelease(result);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_pairing_private_key", @"Failed to create dictionary.", v1, v2, v3, v4, v5, v30);
    return 0;
  }
  return v23;
}

CFDataRef sub_10000AF34()
{
  CFTypeRef result = 0;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassKey);
    CFDictionaryAddValue(v6, kSecReturnRef, kCFBooleanTrue);
    CFDictionaryAddValue(v6, kSecAttrAccessGroup, @"lockdown-identities");
    CFDictionaryAddValue(v6, kSecAttrLabel, @"com.apple.lockdown.pairingkeypair");
    CFDictionaryAddValue(v6, kSecUseSystemKeychain, kCFBooleanTrue);
    char v7 = 1;
    while (1)
    {
      char v8 = v7;
      OSStatus v9 = SecItemCopyMatching(v6, &result);
      if (!v9) {
        break;
      }
      OSStatus v15 = v9;
      sub_10001A558(0, (uint64_t)"copy_pairing_public_key", @"Failed to retrieve private key from keychain: %d", v10, v11, v12, v13, v14, v9);
      if (v15 != -25291)
      {
        sub_100012210(1, v16, v17, v18, v19, v20, v21, v22, v38);
        char v7 = 0;
        if (v8) {
          continue;
        }
      }
      goto LABEL_13;
    }
    SecKeyRef v23 = SecKeyCopyPublicKey((SecKeyRef)result);
    if (!v23)
    {
      sub_10001A558(0, (uint64_t)"copy_pairing_public_key", @"Failed to retrieve public key.", v24, v25, v26, v27, v28, v37);
LABEL_13:
      CFRelease(v6);
      goto LABEL_14;
    }
    SecKeyRef v29 = v23;
    CFDataRef v35 = sub_10000EC94((uint64_t)v23, "RSA PUBLIC KEY");
    if (!v35) {
      sub_10001A558(0, (uint64_t)"copy_pairing_public_key", @"Failed to create PEM from public key data.", v30, v31, v32, v33, v34, v37);
    }
    CFRelease(v6);
    CFRelease(v29);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_pairing_public_key", @"Failed to create dictionary.", v1, v2, v3, v4, v5, v37);
LABEL_14:
    CFDataRef v35 = 0;
  }
  if (result) {
    CFRelease(result);
  }
  return v35;
}

uint64_t sub_10000B11C(void *a1, unint64_t a2, CFDataRef *a3)
{
  SecCertificateRef certificateRef = 0;
  SecKeyRef privateKeyRef = 0;
  uint64_t v6 = (__SecIdentity *)MAECopyLegacyDeviceIdentityWithError();
  id v7 = 0;
  uint64_t v13 = v7;
  if (!v6)
  {
    sub_10001A558(0, (uint64_t)"copy_keys_and_certs", @"Failed to load legacy device identity: %@", v8, v9, v10, v11, v12, (char)v7);
LABEL_26:
    CFDataRef v32 = 0;
    CFDataRef v24 = 0;
LABEL_35:
    CFDataRef v33 = 0;
    CFDataRef v48 = 0;
    uint64_t v34 = 0;
    SecKeyRef v35 = 0;
    uint64_t v36 = 0xFFFFFFFFLL;
    goto LABEL_40;
  }
  if (!a1)
  {
    CFDataRef v24 = 0;
    goto LABEL_8;
  }
  SecIdentityCopyPrivateKey(v6, &privateKeyRef);
  if (!privateKeyRef)
  {
    sub_10001A558(0, (uint64_t)"copy_keys_and_certs", @"Failed to copy private key.", v14, v15, v16, v17, v18, v50);
    goto LABEL_26;
  }
  CFDataRef v24 = sub_10000EC94((uint64_t)privateKeyRef, "RSA PRIVATE KEY");
  if (!v24)
  {
    CFStringRef v25 = @"Failed to create pem data for private key.";
LABEL_34:
    sub_10001A558(0, (uint64_t)"copy_keys_and_certs", (uint64_t)v25, v19, v20, v21, v22, v23, v50);
    CFDataRef v32 = 0;
    goto LABEL_35;
  }
LABEL_8:
  if (!(a2 | (unint64_t)a3))
  {
    CFDataRef v32 = 0;
    CFDataRef v33 = 0;
    CFDataRef v51 = 0;
    goto LABEL_15;
  }
  SecIdentityCopyCertificate(v6, &certificateRef);
  if (!certificateRef)
  {
    CFStringRef v25 = @"Failed to copy certificate from device identity.";
    goto LABEL_34;
  }
  if (!a3)
  {
    CFDataRef v32 = 0;
    CFDataRef v51 = 0;
LABEL_29:
    if (a2)
    {
      SecCertificateRef v54 = certificateRef;
      uint64_t v34 = +[NSArray arrayWithObjects:&v54 count:1];
      SecKeyRef v37 = sub_10000F320(v34);
      SecKeyRef v35 = v37;
      if (!v37)
      {
        sub_10001A558(0, (uint64_t)"copy_keys_and_certs", @"Failed to extract public key from certificate chain.", v38, v39, v40, v41, v42, v50);
        CFDataRef v33 = 0;
        goto LABEL_38;
      }
      CFDataRef v33 = sub_10000EC94((uint64_t)v37, "RSA PUBLIC KEY");
      if (!v33)
      {
        sub_10001A558(0, (uint64_t)"copy_keys_and_certs", @"Failed to create pem data for public key.", v43, v44, v45, v46, v47, v50);
        goto LABEL_38;
      }
LABEL_16:
      if (a1 && v24) {
        *a1 = v24;
      }
      if (a2 && v33) {
        *(void *)a2 = v33;
      }
      uint64_t v36 = 0;
      if (a3 && v32)
      {
        CFDataRef v32 = v32;
        uint64_t v36 = 0;
        *a3 = v32;
      }
      goto LABEL_39;
    }
    CFDataRef v33 = 0;
LABEL_15:
    uint64_t v34 = 0;
    SecKeyRef v35 = 0;
    goto LABEL_16;
  }
  CFDataRef v26 = SecCertificateCopyData(certificateRef);
  if (!v26)
  {
    CFStringRef v25 = @"Failed to copy certificate data.";
    goto LABEL_34;
  }
  CFDataRef v51 = v26;
  CFDataRef v32 = sub_10000ECFC(v26, "CERTIFICATE");
  if (v32) {
    goto LABEL_29;
  }
  sub_10001A558(0, (uint64_t)"copy_keys_and_certs", @"Failed to create pem data for certificate.", v27, v28, v29, v30, v31, v50);
  CFDataRef v33 = 0;
  uint64_t v34 = 0;
  SecKeyRef v35 = 0;
LABEL_38:
  uint64_t v36 = 0xFFFFFFFFLL;
LABEL_39:
  CFDataRef v48 = v51;
LABEL_40:
  if (certificateRef) {
    CFRelease(certificateRef);
  }
  SecCertificateRef certificateRef = 0;
  if (privateKeyRef) {
    CFRelease(privateKeyRef);
  }
  SecKeyRef privateKeyRef = 0;
  if (v35) {
    CFRelease(v35);
  }
  if (v6) {
    CFRelease(v6);
  }

  return v36;
}

uint64_t sub_10000B420()
{
  uint64_t v1 = 0;
  sub_10000B11C(0, (unint64_t)&v1, 0);
  uint64_t result = v1;
  if (!v1)
  {
    sub_100010480(@"com.apple.mobile.lockdown.requestreactivation");
    return v1;
  }
  return result;
}

uint64_t sub_10000B46C()
{
  uint64_t v1 = 0;
  sub_10000B11C(&v1, 0, 0);
  uint64_t result = v1;
  if (!v1)
  {
    sub_100010480(@"com.apple.mobile.lockdown.requestreactivation");
    return v1;
  }
  return result;
}

CFDataRef sub_10000B4B8()
{
  CFDataRef v1 = 0;
  sub_10000B11C(0, 0, &v1);
  CFDataRef result = v1;
  if (!v1)
  {
    sub_100010480(@"com.apple.mobile.lockdown.requestreactivation");
    return v1;
  }
  return result;
}

void sub_10000B504(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1)
  {
    CFTypeID v10 = CFGetTypeID(a1);
    if (v10 == CFBooleanGetTypeID())
    {
      int v85 = 0;
      int v86 = 1;
      int v84 = 2;
      int v11 = CFEqual(a1, kCFBooleanTrue);
      if (v11) {
        uint64_t v12 = &v86;
      }
      else {
        uint64_t v12 = &v85;
      }
      if (v11) {
        uint64_t v13 = &v84;
      }
      else {
        uint64_t v13 = &v85;
      }
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, v12);
      CFNumberRef v15 = CFNumberCreate(0, kCFNumberIntType, v13);
      CFNumberRef v21 = v15;
      if (v14) {
        BOOL v22 = v15 == 0;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        sub_10001A558(0, (uint64_t)"enable_media_stream_logging", @"Weird- couldn't create a number", v16, v17, v18, v19, v20, v73);
        if (!v14)
        {
          if (!v21) {
            return;
          }
          goto LABEL_16;
        }
      }
      else
      {
        sub_100005CE4(@"stream_trace", v14, @"com.apple.coremedia", v16, v17, v18, v19, v20, v73);
        sub_100005CE4(@"fhttpchunk_alt_trace", v14, @"com.apple.coremedia", v23, v24, v25, v26, v27, v74);
        sub_100005CE4(@"fhttpchunk_trace", v14, @"com.apple.coremedia", v28, v29, v30, v31, v32, v75);
        sub_100005CE4(@"fp_trace", v14, @"com.apple.coremedia", v33, v34, v35, v36, v37, v76);
        sub_100005CE4(@"crabs_trace", v14, @"com.apple.coremedia", v38, v39, v40, v41, v42, v77);
        sub_100005CE4(@"playmon_trace", v21, @"com.apple.coremedia", v43, v44, v45, v46, v47, v78);
        sub_100005CE4(@"FormatReaderLoaderTrace", v14, @"com.apple.coremedia", v48, v49, v50, v51, v52, v79);
        sub_100005CE4(@"DiskCacheRepository", v14, @"com.apple.coremedia", v53, v54, v55, v56, v57, v80);
        sub_100005CE4(@"faq_trace", v14, @"com.apple.coremedia", v58, v59, v60, v61, v62, v81);
        sub_100005CE4(@"boss_trace", v14, @"com.apple.coremedia", v63, v64, v65, v66, v67, v82);
        sub_100005CE4(@"videomentor_trace", v14, @"com.apple.coremedia", v68, v69, v70, v71, v72, v83);
      }
      CFRelease(v14);
      if (!v21) {
        return;
      }
LABEL_16:
      CFRelease(v21);
      return;
    }
  }

  sub_10001A558(0, (uint64_t)"enable_media_stream_logging", @"Value is not a CFBoolean", a4, a5, a6, a7, a8, a9);
}

void sub_10000B70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"remove_lockdown_logs", @"Removing %s", a4, a5, a6, a7, a8, (char)"/private/var/logs/lockdownd.log");
  }
  if (unlink("/private/var/logs/lockdownd.log") == -1)
  {
    uint64_t v8 = __error();
    strerror(*v8);
    sub_10001A558(0, (uint64_t)"remove_lockdown_logs", @"Could not unlink %s: %s", v9, v10, v11, v12, v13, (char)"/private/var/logs/lockdownd.log");
  }
}

CFMutableDictionaryRef sub_10000B7A4()
{
  kern_return_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFStringRef v6;
  uint64_t v7;
  io_object_t v9;
  kern_return_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  mach_port_t mainPort;
  CFMutableDictionaryRef properties;

  properties = 0;
  mach_port_t mainPort = 0;
  CFBooleanRef v0 = IOMasterPort(bootstrap_port, &mainPort);
  if (v0)
  {
    uint64_t v17 = v0;
    uint64_t v6 = @"Could not get master port %d";
    id v7 = 0;
LABEL_3:
    sub_10001A558(v7, (uint64_t)"copy_nvram_info", (uint64_t)v6, v1, v2, v3, v4, v5, v17);
    return 0;
  }
  id v7 = IORegistryEntryFromPath(mainPort, "IODeviceTree:/options");
  if (!v7)
  {
    uint64_t v6 = @"Could not find NVRAM via IOKit";
    goto LABEL_3;
  }
  uint64_t v9 = v7;
  uint64_t v10 = IORegistryEntryCreateCFProperties(v7, &properties, kCFAllocatorDefault, 0);
  if (v10) {
    uint64_t v16 = properties == 0;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16) {
    sub_10001A558(0, (uint64_t)"copy_nvram_info", @"Could not load NVRAM info (%d)", v11, v12, v13, v14, v15, v10);
  }
  IOObjectRelease(v9);
  return properties;
}

uint64_t sub_10000B888()
{
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  uint64_t v43 = 0x3032000000;
  uint64_t v44 = sub_10000BB90;
  uint64_t v45 = sub_10000BBA0;
  id v46 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x3032000000;
  uint64_t v38 = sub_10000BB90;
  uint64_t v39 = sub_10000BBA0;
  id v40 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x3032000000;
  uint64_t v32 = sub_10000BB90;
  uint64_t v33 = sub_10000BBA0;
  id v34 = 0;
  id v0 = objc_alloc_init((Class)CoreTelephonyClient);
  CFDataRef v1 = (void *)v36[5];
  v36[5] = (uint64_t)v0;

  if (!v36[5])
  {
    CFStringRef v25 = @"Failed to create a CoreTelephonyClient";
LABEL_10:
    sub_10001A558(0, (uint64_t)"copy_carrier_bundle_info", (uint64_t)v25, v2, v3, v4, v5, v6, v27);
    goto LABEL_11;
  }
  dispatch_semaphore_t v7 = dispatch_semaphore_create(0);
  uint64_t v8 = (void *)v30[5];
  v30[5] = (uint64_t)v7;

  if (!v30[5])
  {
    CFStringRef v25 = @"Failed to create a semaphore";
    goto LABEL_10;
  }
  uint64_t v9 = (void *)v36[5];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_10000BBA8;
  void v28[3] = &unk_100186100;
  v28[4] = &v35;
  v28[5] = &v41;
  v28[6] = &v29;
  [v9 getSubscriptionInfo:v28];
  dispatch_semaphore_wait((dispatch_semaphore_t)v30[5], 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v10 = (void *)v42[5];
  if (!v10)
  {
    CFStringRef v25 = @"Failed to query bundle location";
    goto LABEL_10;
  }
  uint64_t v11 = [v10 stringByAppendingString:@"/Info.plist"];
  uint64_t v12 = (void *)v42[5];
  void v42[5] = v11;

  uint64_t v18 = (void *)v42[5];
  if (!v18)
  {
    sub_10001A558(0, (uint64_t)"copy_carrier_bundle_info", @"Failed to append /Info.plist to %@", v13, v14, v15, v16, v17, 0);
    uint64_t v24 = 0;
    goto LABEL_12;
  }
  uint64_t v24 = sub_10002610C([v18 UTF8String]);
  if (!v24)
  {
    sub_10001A558(0, (uint64_t)"copy_carrier_bundle_info", @"Could not load %s", v19, v20, v21, v22, v23, (char)&v47);
LABEL_11:
    uint64_t v24 = 0;
  }
LABEL_12:
  _Block_object_dispose(&v29, 8);

  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v41, 8);

  return v24;
}

void sub_10000BB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_10000BB90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000BBA0(uint64_t a1)
{
}

void sub_10000BBA8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v12 = v6;
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x3032000000;
  uint64_t v35 = sub_10000BB90;
  uint64_t v36 = sub_10000BBA0;
  id v37 = 0;
  if (!v5 || v6)
  {
    sub_10001A558(0, (uint64_t)"copy_carrier_bundle_info_block_invoke", @"Error while getting subscription information for carrier bundle: %@", v7, v8, v9, v10, v11, (char)v6);
  }
  else
  {
    dispatch_semaphore_t v13 = dispatch_semaphore_create(0);
    uint64_t v14 = (void *)v33[5];
    v33[5] = (uint64_t)v13;

    if (v33[5])
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      uint64_t v20 = [v5 subscriptions];
      id v21 = [v20 countByEnumeratingWithState:&v28 objects:v38 count:16];
      if (v21)
      {
        uint64_t v22 = *(void *)v29;
LABEL_6:
        uint64_t v23 = 0;
        while (1)
        {
          if (*(void *)v29 != v22) {
            objc_enumerationMutation(v20);
          }
          uint64_t v24 = *(void **)(*((void *)&v28 + 1) + 8 * v23);
          if ([v24 slotID])
          {
            CFStringRef v25 = *(void **)(*(void *)(a1[4] + 8) + 40);
            v27[0] = _NSConcreteStackBlock;
            v27[1] = 3221225472;
            v27[2] = sub_10000BE64;
            v27[3] = &unk_1001860D8;
            void v27[4] = a1[5];
            v27[5] = &v32;
            [v25 copyCarrierBundleLocation:v24 completion:v27];
            dispatch_semaphore_wait((dispatch_semaphore_t)v33[5], 0xFFFFFFFFFFFFFFFFLL);
            if (*(void *)(*(void *)(a1[5] + 8) + 40)) {
              break;
            }
          }
          if (v21 == (id)++v23)
          {
            id v21 = [v20 countByEnumeratingWithState:&v28 objects:v38 count:16];
            if (v21) {
              goto LABEL_6;
            }
            break;
          }
        }
      }

      uint64_t v12 = 0;
    }
    else
    {
      sub_10001A558(0, (uint64_t)"copy_carrier_bundle_info_block_invoke", @"Failed to create semaphore", v15, v16, v17, v18, v19, v26);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1[6] + 8) + 40));
  _Block_object_dispose(&v32, 8);
}

void sub_10000BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10000BE64(uint64_t a1, void *a2, uint64_t a3)
{
  id v13 = a2;
  if (!v13 || a3) {
    sub_10001A558(0, (uint64_t)"copy_carrier_bundle_info_block_invoke_2", @"Could not get the carrier bundle info file path: %@", v5, v6, v7, v8, v9, a3);
  }
  id v10 = [v13 copy];
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

uint64_t sub_10000BEFC(unsigned int a1)
{
  if (a1 > 1) {
    return 0;
  }
  else {
    return MGCopyAnswer();
  }
}

__CFString *sub_10000BF2C()
{
  if (sub_1000269BC("/Developer"))
  {
    id v0 = off_1001877E0;
    return *v0;
  }
  memset(&v9, 0, 512);
  if (!statfs("/Developer", &v9))
  {
    if (*(void *)v9.f_mntonname == 0x706F6C657665442FLL && *(void *)&v9.f_mntonname[3] == 0x7265706F6C6576) {
      id v0 = off_1001877D8;
    }
    else {
      id v0 = off_1001877E8;
    }
    return *v0;
  }
  uint64_t v2 = __error();
  strerror(*v2);
  sub_10001A558(0, (uint64_t)"check_dev_tools_available", @"Can't stat %s: %s", v3, v4, v5, v6, v7, (char)"/Developer");
  return 0;
}

CFStringRef sub_10000C070(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 > 1)
  {
    sub_10001A558(0, (uint64_t)"copy_phonenumber", @"Invalid slotID: %d", a4, a5, a6, a7, a8, a1);
    return 0;
  }
  CFStringRef v8 = (const __CFString *)MGCopyAnswer();
  if (!sub_10000FF0C(v8))
  {
    if (!v8)
    {
      sub_10001A558(0, (uint64_t)"copy_phonenumber", @"CTSettingCopyMyPhoneNumber() returned NULL", v9, v10, v11, v12, v13, v25);
      return v8;
    }
    char v25 = (char)v8;
    CFStringRef v23 = @"CTSettingCopyMyPhoneNumber() returned non-string: %@, but we're returning NULL anyway";
    goto LABEL_17;
  }
  CFStringRef v14 = (const __CFString *)sub_1000080B8();
  if (v14)
  {
    CFStringRef v15 = v14;
    CFLocaleRef v16 = CFLocaleCreate(0, v14);
    if (v16)
    {
      CFLocaleRef v17 = v16;
      CFStringRef Value = (const __CFString *)CFLocaleGetValue(v16, kCFLocaleCountryCode);
      if (Value)
      {
        CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(0, 0, Value);
        if (MutableCopy)
        {
          uint64_t v20 = MutableCopy;
          CFStringLowercase(MutableCopy, v17);
          uint64_t v21 = PNCreateFormattedStringWithCountry();
          if (v21)
          {
            CFStringRef v22 = (const __CFString *)v21;
            CFRelease(v8);
            CFStringRef v8 = v22;
          }
          CFRelease(v20);
        }
      }
      CFRelease(v17);
    }
    CFRelease(v15);
  }
  if (!CFStringGetLength(v8))
  {
    CFStringRef v23 = @"CTSettingCopyMyPhoneNumber() returned an empty phone number - returning NULL";
LABEL_17:
    sub_10001A558(0, (uint64_t)"copy_phonenumber", (uint64_t)v23, v9, v10, v11, v12, v13, v25);
    CFRelease(v8);
    return 0;
  }
  return v8;
}

uint64_t sub_10000C1F0()
{
  return MGCopyAnswer();
}

void sub_10000C200(const __CFBoolean *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1)
  {
    if (kCFBooleanTrue == a1) {
      CFBooleanRef v9 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v9 = kCFBooleanFalse;
    }
    sub_100005CE4(@"FileSharingEnabled", v9, kCFPreferencesAnyApplication, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"set_file_sharing", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

CFBooleanRef sub_10000C258()
{
  CFBooleanRef result = (CFBooleanRef)sub_100007868(@"FileSharingEnabled", 0);
  if (!result) {
    return kCFBooleanTrue;
  }
  return result;
}

CFBooleanRef sub_10000C294()
{
  CFPropertyListRef v0 = sub_100007868(@"HDHealthInUse", @"com.apple.healthd");
  if (!sub_10000FF84(v0))
  {
    if (v0) {
      CFRelease(v0);
    }
    return kCFBooleanFalse;
  }
  return (CFBooleanRef)v0;
}

CFBooleanRef sub_10000C2EC()
{
  CFBooleanRef v0 = kCFBooleanFalse;
  CFDictionaryRef v1 = IOServiceMatching("AppleUSBDeviceAudioDevice");
  if (v1 && IOServiceGetMatchingService(kIOMasterPortDefault, v1)) {
    return kCFBooleanTrue;
  }
  return v0;
}

CFBooleanRef sub_10000C350()
{
  unsigned int v0 = sub_100002D98();
  CFDictionaryRef v1 = &kCFBooleanTrue;
  if (!v0) {
    CFDictionaryRef v1 = &kCFBooleanFalse;
  }
  return *v1;
}

CFBooleanRef sub_10000C384()
{
  unsigned int v0 = sub_100002DD8();
  CFDictionaryRef v1 = &kCFBooleanTrue;
  if (!v0) {
    CFDictionaryRef v1 = &kCFBooleanFalse;
  }
  return *v1;
}

__CFDictionary *sub_10000C3B8()
{
  CFTypeRef cf = 0;
  updated = ramrod_update_copy_deviceinfo(0, (CFErrorRef *)&cf);
  if (!updated) {
    sub_10001A558(0, (uint64_t)"copy_ramrod_preflight_info", @"Failed to get the preflight info: %@", v0, v1, v2, v3, v4, (char)cf);
  }
  if (cf) {
    CFRelease(cf);
  }
  return updated;
}

CFDictionaryRef sub_10000C420()
{
  CFDictionaryRef updated = ramrod_update_copy_ap_parameters_generating_nonces(0);
  if (!updated) {
    sub_10001A558(0, (uint64_t)"copy_ramrod_ap_parameters", @"Failed to get ap parameters: %@", v0, v1, v2, v3, v4, 0);
  }
  return updated;
}

uint64_t sub_10000C488(unint64_t a1)
{
  if (qword_1001B7FB8 && sub_10000C5BC((void *)qword_1001B7FB8, a1)) {
    return 1;
  }
  unsigned int v2 = MKBGetDeviceLockState();
  if (v2 <= 3 && v2 != 1) {
    return 1;
  }
  uint64_t v4 = BiomeLibrary();
  uint64_t v5 = [v4 Device];
  uint64_t v6 = [v5 KeybagLocked];
  uint64_t v7 = +[BMPublisherOptions reversed];
  CFStringRef v8 = [v6 publisherWithOptions:v7];
  id v9 = [v8 sinkWithCompletion:&stru_100186140 shouldContinue:&stru_100186180];

  if (qword_1001B7FB8)
  {
    if (sub_10000C5BC((void *)qword_1001B7FB8, a1)) {
      return 1;
    }
    char v15 = qword_1001B7FB8;
  }
  else
  {
    char v15 = 0;
  }
  sub_10001A558(0, (uint64_t)"hasDeviceBeenUnlockedWithinNumberOfHours", @"Device last unlocked at %@, which is not within the last %llu hours.", v10, v11, v12, v13, v14, v15);
  return 0;
}

BOOL sub_10000C5BC(void *a1, unint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSDate date];
  if (v4)
  {
    id v5 = [objc_alloc((Class)NSCalendar) initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    uint64_t v6 = v5;
    if (v5
      && ([v5 components:32 fromDate:v3 toDate:v4 options:0],
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      CFStringRef v8 = v7;
      BOOL v9 = (unint64_t)[v7 hour] < a2;
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 0;
    uint64_t v6 = 0;
  }

  return v9;
}

void sub_10000C688(id a1, BPSCompletion *a2)
{
  BOOL v9 = a2;
  unsigned int v2 = [(BPSCompletion *)v9 error];

  if (v2)
  {
    id v3 = [(BPSCompletion *)v9 error];
    sub_10001A558(0, (uint64_t)"hasDeviceBeenUnlockedWithinNumberOfHours_block_invoke", @"Failed to subscribe for \"KeybagLocked\" events: %@", v4, v5, v6, v7, v8, (char)v3);
  }
}

BOOL sub_10000C70C(id a1, BMStoreEvent *a2)
{
  unsigned int v2 = a2;
  id v3 = [(BMStoreEvent *)v2 eventBody];
  unsigned __int8 v4 = [v3 starting];

  if ((v4 & 1) == 0)
  {
    id v5 = objc_alloc((Class)NSDate);
    [(BMStoreEvent *)v2 timestamp];
    id v6 = [v5 initWithTimeIntervalSinceReferenceDate:];
    uint64_t v7 = (void *)qword_1001B7FB8;
    qword_1001B7FB8 = (uint64_t)v6;
  }
  return v4;
}

uint64_t sub_10000C78C()
{
  return sub_10000C488(0x18uLL);
}

id sub_10000C794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    id v8 = [objc_alloc((Class)NSMutableData) initWithLength:a1];
    arc4random_buf([v8 bytes], (size_t)[v8 length]);
  }
  else
  {
    sub_10001A558(a1, (uint64_t)"createRandomData", @"Invalid input.", a4, a5, a6, a7, a8, v10);
    return 0;
  }
  return v8;
}

BOOL sub_10000C810()
{
  uint64_t v8 = 0;
  size_t v7 = 8;
  if (!sysctlbyname("security.mac.amfi.developer_mode_status", &v8, &v7, 0, 0)) {
    return v8 == 1;
  }
  uint64_t v0 = __error();
  sub_10001A558(0, (uint64_t)"isDeveloperModeEnabled", @"Failed to read developer mode status: %{darwin.errno}d", v1, v2, v3, v4, v5, *v0);
  return 0;
}

void sub_10000C890(id a1)
{
  qword_1001B7FC0 = (uint64_t)dispatch_queue_create("com.apple.lockdownd.nandinfo", 0);

  _objc_release_x1();
}

CFDataRef sub_10000C8D0(uint64_t a1)
{
  CFDataRef result = gather_nand_info();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFNumberRef sub_10000C900(uint64_t a1)
{
  uint64_t valuePtr = sub_10000C938(*(const char **)(a1 + 32));
  return CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
}

uint64_t sub_10000C938(const char *a1)
{
  uint64_t v2 = opendir(a1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = readdir(v2);
  for (i = 0; v4; uint64_t v4 = readdir(v3))
  {
    d_name = v4->d_name;
    if (strcmp(v4->d_name, ".") && strcmp(d_name, ".."))
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      size_t v7 = strlen(a1);
      uint64_t v8 = 0;
      size_t v9 = v7 + strlen(d_name) + 2;
      if (v9 <= 0x400)
      {
        char v10 = (char *)malloc_type_malloc(v9, 0xDB498916uLL);
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = &strcpy(v10, a1)[v7];
          *uint64_t v12 = 47;
          strcpy(v12 + 1, d_name);
          uint64_t v17 = 0;
          uint64_t v15 = 0;
          uint64_t v14 = 0;
          uint64_t v16 = 0x800000005;
          uint64_t v18 = 4;
          uint64_t v8 = 0;
          if (!getattrlist(v11, &v16, &v14, 0x10uLL, 1u))
          {
            if (HIDWORD(v14) == 2) {
              uint64_t v8 = sub_10000C938(v11);
            }
            else {
              uint64_t v8 = v15;
            }
          }
          free(v11);
        }
        else
        {
          uint64_t v8 = 0;
        }
      }
      i += v8;
    }
  }
  closedir(v3);
  return i;
}

void sub_10000CAC8(id a1)
{
  qword_1001B7FD0 = (uint64_t)dispatch_queue_create("com.apple.lockdownd.usage", 0);

  _objc_release_x1();
}

void sub_10000CB08(uint64_t a1)
{
  uint64_t v22 = 0;
  CFStringRef v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"calculate_application_usage_block_invoke", @"Calculating application disk usage.", v2, v3, v4, v5, v6, v17[0]);
  }
  if (byte_1001B7FA0 == 1)
  {
    CFMutableDictionaryRef v13 = sub_10000E740(*(void *)(a1 + 40), @"com.apple.disk_usage", @"MobileApplicationUsage", v2, v3, v4, v5, v6);
  }
  else
  {
    uint64_t v14 = +[LSApplicationWorkspace defaultWorkspace];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10000CCD4;
    v17[3] = &unk_100186210;
    v17[4] = &v18;
    v17[5] = &v22;
    [v14 enumerateApplicationsOfType:0 block:v17];

    CFMutableDictionaryRef v13 = (CFMutableDictionaryRef)(v19[3] + v23[3]);
  }
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"calculate_application_usage_block_invoke", @"Completed calculating application usage.", v8, v9, v10, v11, v12, v17[0]);
  }
  sub_100006BDC(*(void *)(a1 + 40), (uint64_t)v13);
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = 0;

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
}

void sub_10000CCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10000CCD4(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (v8)
  {
    uint64_t v3 = [v8 diskUsage];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = [v3 dynamicUsage];
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += [v5 longLongValue];

      uint64_t v6 = [v4 onDemandResourcesUsage];
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += [v6 longLongValue];

      uint64_t v7 = [v4 staticUsage];
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [v7 longLongValue];
    }
  }
}

void sub_10000CDC8(id a1)
{
  CFDataRef v1 = (const __CFData *)MGCopyAnswer();
  if (v1)
  {
    CFDataRef v2 = v1;
    BytePtr = CFDataGetBytePtr(v1);
    uint64_t v4 = (char *)malloc_type_malloc(0x60uLL, 0x469C542FuLL);
    uint64_t v5 = 0;
    qword_1001B7FE8 = (uint64_t)v4;
    do
    {
      uint64_t v6 = &v4[v5];
      int v7 = *(_DWORD *)BytePtr;
      *((_WORD *)v6 + 2) = *((_WORD *)BytePtr + 2);
      *(_DWORD *)uint64_t v6 = v7;
      v5 += 6;
    }
    while (v5 != 96);
    CFRelease(v2);
  }
}

void sub_10000CE60(id a1)
{
  qword_1001B7FF8 = (uint64_t)dispatch_queue_create("com.apple.lockdown.power.assertion", 0);

  _objc_release_x1();
}

uint64_t sub_10000CEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"_takePowerAssertionForInterval_block_invoke_2", @"Releasing power assertion.", a4, a5, a6, a7, a8, v11);
  }
  IOPMAssertionID v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);

  return IOPMAssertionRelease(v9);
}

void *sub_10000CF04()
{
  bzero(v18, 0x400uLL);
  bzero(__str, 0x400uLL);
  uint64_t v0 = malloc_type_calloc(1uLL, 0xA8uLL, 0x10A0040973172F9uLL);
  if (v0)
  {
    CFMutableArrayRef Mutable = dispatch_queue_create("com.apple.mobile.lockdown.dark", 0);
    *(void *)uint64_t v0 = Mutable;
    if (Mutable
      && (CFMutableArrayRef Mutable = dispatch_queue_create("com.apple.mobile.lockdown.dark.block", 0),
          (*((void *)v0 + 1) = Mutable) != 0))
    {
      sub_100006D80(v18);
      snprintf(__str, 0x400uLL, "%s%s", v18, "/Library/Lockdown/data_ark.plist");
      uint64_t v7 = sub_10002610C(__str);
      *((void *)v0 + 3) = v7;
      if (v7) {
        return v0;
      }
      sub_10001A558(0, (uint64_t)"data_ark_load", @"Failed to load %s.", v8, v9, v10, v11, v12, (char)__str);
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *((void *)v0 + 3) = Mutable;
      if (Mutable) {
        return v0;
      }
      CFStringRef v13 = @"Failed to allocacte dictionary.";
    }
    else
    {
      CFStringRef v13 = @"Failed to create queue.";
    }
    sub_10001A558((uint64_t)Mutable, (uint64_t)"data_ark_load", (uint64_t)v13, v2, v3, v4, v5, v6, v16);
    uint64_t v14 = (const void *)*((void *)v0 + 3);
    if (v14) {
      CFRelease(v14);
    }
    *((void *)v0 + 3) = 0;

    free(v0);
    return 0;
  }
  return v0;
}

uint64_t sub_10000D09C(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = -1;
  uint64_t v5 = *a1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10000D158;
  v8[3] = &unk_1001862A0;
  int v9 = a5;
  v8[4] = &v10;
  v8[5] = a1;
  v8[6] = a2;
  v8[7] = a3;
  v8[8] = a4;
  dispatch_sync(v5, v8);
  uint64_t v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t sub_10000D158(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result;
  int v9 = *(_DWORD *)(result + 72);
  if ((v9 & 4) != 0)
  {
    CFDataRef result = sub_10000D204((CFMutableDictionaryRef *)(*(void *)(result + 40) + 128), *(void *)(result + 48), *(void *)(result + 56), *(const void **)(result + 64), a5, a6, a7, a8);
    *(_DWORD *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = result;
    if (*(_DWORD *)(*(void *)(*(void *)(v8 + 32) + 8) + 24)) {
      return result;
    }
    int v9 = *(_DWORD *)(v8 + 72);
  }
  if (v9)
  {
    CFDataRef result = sub_10000D204((CFMutableDictionaryRef *)(*(void *)(v8 + 40) + 120), *(void *)(v8 + 48), *(void *)(v8 + 56), *(const void **)(v8 + 64), a5, a6, a7, a8);
    *(_DWORD *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = result;
    if (*(_DWORD *)(*(void *)(*(void *)(v8 + 32) + 8) + 24)) {
      return result;
    }
    int v9 = *(_DWORD *)(v8 + 72);
  }
  if ((v9 & 2) != 0)
  {
    CFDataRef result = sub_10000D204((CFMutableDictionaryRef *)(*(void *)(v8 + 40) + 136), *(void *)(v8 + 48), *(void *)(v8 + 56), *(const void **)(v8 + 64), a5, a6, a7, a8);
    *(_DWORD *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_10000D204(CFMutableDictionaryRef *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFStringRef v16 = @"Invalid input.";
LABEL_8:
    sub_10001A558(0, (uint64_t)"_register_notification", (uint64_t)v16, (uint64_t)a4, a5, a6, a7, a8, v17);
    return 0xFFFFFFFFLL;
  }
  if (!*a1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *a1 = Mutable;
    if (!Mutable)
    {
      CFStringRef v16 = @"Failed to allocate dictionary.";
      goto LABEL_8;
    }
  }
  CFStringRef v13 = sub_10000D990(a2, a3);
  if (v13)
  {
    CFStringRef v14 = v13;
    CFDictionarySetValue(*a1, v13, a4);
    CFRelease(v14);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

void sub_10000D2C8(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1 && (int v9 = *a1) != 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000D374;
    block[3] = &unk_100185E60;
    block[4] = a1;
    dispatch_sync(v9, block);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_store", @"Invalid inputs.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_10000D374(uint64_t a1)
{
  bzero(v46, 0x400uLL);
  bzero(__str, 0x400uLL);
  bzero(&__from, 0x400uLL);
  uint64_t v2 = *(void *)(a1 + 32);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableDictionaryRef v9 = Mutable;
  if (Mutable)
  {
    uint64_t v10 = *(void *)(v2 + 88);
    context[0] = *(void *)(v2 + 40);
    context[1] = v10;
    context[2] = Mutable;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(v2 + 24), (CFDictionaryApplierFunction)sub_10000E800, context);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"_filter_store", @"Failed to create dictionary.", v4, v5, v6, v7, v8, v40);
  }
  sub_100006D80(v46);
  snprintf((char *)__str, 0x400uLL, "%s%s", v46, "/Library/Lockdown/data_ark.plist");
  if (v9 && CFDictionaryGetCount(v9))
  {
    snprintf((char *)&__from, 0x400uLL, "%s.XXXXXX", (const char *)__str);
    if (sub_100025ED4((uint64_t)&__from, (uint64_t)v9, v16, v17, v18, v19, v20, v21))
    {
      sub_10001A558(0, (uint64_t)"data_ark_store_block_invoke", @"Failed to store %s.", v23, v24, v25, v26, v27, (char)&__from);
    }
    else
    {
      rename(&__from, __str, v22);
      if (v33)
      {
        __error();
        uint64_t v34 = __error();
        strerror(*v34);
        sub_10001A558(0, (uint64_t)"data_ark_store_block_invoke", @"Failed to rename %s: %d (%s)", v35, v36, v37, v38, v39, (char)&__from);
      }
      else if (dword_1001B6AD0)
      {
        sub_10001A558(0, (uint64_t)"data_ark_store_block_invoke", @"Saved.", v28, v29, v30, v31, v32, v42);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
LABEL_17:
    CFRelease(v9);
    return;
  }
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"data_ark_store_block_invoke", @"Nothing mutable changed.", v11, v12, v13, v14, v15, v41);
  }
  unlink((const char *)__str);
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
  if (v9) {
    goto LABEL_17;
  }
}

uint64_t sub_10000D5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  int v16 = -1;
  if (a1 && (uint64_t v8 = *(NSObject **)a1) != 0 && a4 && *(void *)(a1 + 24))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000D6B0;
    block[3] = &unk_1001862C8;
    block[6] = a3;
    block[7] = a1;
    block[8] = a4;
    block[4] = &v13;
    void block[5] = a2;
    dispatch_sync(v8, block);
    uint64_t v9 = *((unsigned int *)v14 + 6);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_set", @"Invalid inputs.", a4, a5, a6, a7, a8, v11);
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_10000D698(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10000D6B0(uint64_t a1)
{
  CFStringRef v2 = sub_10000D990(*(void *)(a1 + 40), *(void *)(a1 + 48));
  if (v2)
  {
    CFStringRef v3 = v2;
    CFStringRef v4 = sub_10000D990(*(void *)(a1 + 40), 0);
    if (v4)
    {
      CFStringRef v5 = v4;
      CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 56) + 24), v3);
      uint64_t v7 = Value;
      BOOL v8 = !Value || !CFEqual(Value, *(CFTypeRef *)(a1 + 64));
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 56) + 24), v3, *(const void **)(a1 + 64));
      if (!v7 && *(void *)(a1 + 48))
      {
        uint64_t v14 = 0;
        do
        {
          if (sub_10000DA14(*(NSObject ***)(a1 + 56), *(void *)(a1 + 40), 0, v14, v10, v11, v12, v13)) {
            sub_10000DAC0(*(NSObject ***)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 48), v14, v10, v11, v12, v13);
          }
          uint64_t v14 = (v14 + 1);
        }
        while (v14 != 11);
      }
      uint64_t v15 = *(void **)(a1 + 56);
      if (v8)
      {
        CFDictionaryRef v16 = (const __CFDictionary *)v15[16];
        if (v16)
        {
          CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(v16, v3);
          if (v17) {
            sub_100010480(v17);
          }
          CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 56) + 128), v5);
          if (v18) {
            sub_100010480(v18);
          }
        }
        uint64_t v15 = *(void **)(a1 + 56);
        CFDictionaryRef v19 = (const __CFDictionary *)v15[19];
        if (v19)
        {
          uint64_t v20 = CFDictionaryGetValue(v19, v3);
          if (v20) {
            dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 56) + 8), v20);
          }
          uint64_t v21 = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 56) + 152), v5);

          if (v21) {
            dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 56) + 8), v21);
          }

          uint64_t v15 = *(void **)(a1 + 56);
        }
      }
      CFDictionaryRef v22 = (const __CFDictionary *)v15[15];
      if (v22)
      {
        CFStringRef v23 = (const __CFString *)CFDictionaryGetValue(v22, v3);
        if (v23) {
          sub_100010480(v23);
        }
        CFStringRef v24 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 56) + 120), v5);
        if (v24) {
          sub_100010480(v24);
        }
      }
      CFDictionaryRef v25 = *(const __CFDictionary **)(*(void *)(a1 + 56) + 144);
      if (v25)
      {
        uint64_t v26 = CFDictionaryGetValue(v25, v3);
        if (v26) {
          dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 56) + 8), v26);
        }
        uint64_t v27 = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 56) + 144), v5);

        if (v27) {
          dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 56) + 8), v27);
        }
      }
      if (v8)
      {
        uint64_t v28 = *(void **)(a1 + 56);
        CFSetRef v29 = (const __CFSet *)v28[5];
        if (!v29 || !CFSetContainsValue(v29, v3))
        {
          CFSetRef v30 = (const __CFSet *)v28[9];
          if (!v30 || !CFSetContainsValue(v30, v3))
          {
            CFSetRef v31 = (const __CFSet *)v28[11];
            if (!v31 || !CFSetContainsValue(v31, v3))
            {
              if (dword_1001B6AD0) {
                sub_10001A558(0, (uint64_t)"data_ark_set_block_invoke", @"dirtied by changing %@", v9, v10, v11, v12, v13, (char)v3);
              }
              *(unsigned char *)(*(void *)(a1 + 56) + 16) = 1;
            }
          }
        }
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      CFRelease(v3);
    }
    else
    {
      CFStringRef v5 = v3;
    }
    CFRelease(v5);
  }
}

CFStringRef sub_10000D990(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return CFStringCreateWithFormat(0, 0, @"%@-%@", a1, a2);
  }
  if (a1) {
    return CFStringCreateWithFormat(0, 0, @"%@-", a1);
  }
  if (a2) {
    return CFStringCreateWithFormat(0, 0, @"-%@", a2);
  }
  CFRetain(@"-");
  return @"-";
}

BOOL sub_10000DA14(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || (uint64_t v9 = *a1) == 0)
  {
    sub_10001A558(0, (uint64_t)"_data_ark_has_attr_nolock", @"Invalid inputs.", a4, a5, a6, a7, a8, v20);
    return 0;
  }
  unsigned int v10 = a4;
  dispatch_assert_queue_V2(v9);
  if (v10 > 0xA) {
    return 0;
  }
  uint64_t v13 = &a1[v10];
  uint64_t v15 = v13[4];
  uint64_t v14 = (CFSetRef *)(v13 + 4);
  if (!v15) {
    return 0;
  }
  CFStringRef v16 = sub_10000D990(a2, a3);
  if (!v16) {
    return 0;
  }
  CFStringRef v17 = v16;
  BOOL v18 = CFSetGetValue(*v14, v16) != 0;
  CFRelease(v17);
  return v18;
}

uint64_t sub_10000DAC0(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (uint64_t v9 = *a1) != 0)
  {
    unsigned int v10 = a4;
    dispatch_assert_queue_V2(v9);
    if (v10 <= 0xA)
    {
      uint64_t v13 = &a1[v10];
      uint64_t v15 = v13[4];
      uint64_t v14 = (CFMutableSetRef *)(v13 + 4);
      if (v15 || (Mutable = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks), (CFMutableSetRef *v14 = Mutable) != 0))
      {
        CFStringRef v17 = sub_10000D990(a2, a3);
        if (v17)
        {
          CFStringRef v18 = v17;
          CFSetAddValue(*v14, v17);
          CFRelease(v18);
          return 0;
        }
      }
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"_data_ark_set_attr_nolock", @"Invalid inputs.", a4, a5, a6, a7, a8, v20);
  }
  return 0xFFFFFFFFLL;
}

void sub_10000DB80(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int valuePtr = a4;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v7)
  {
    CFNumberRef v13 = v7;
    sub_10000D5A8(a1, a2, a3, (uint64_t)v7, v9, v10, v11, v12);
    CFRelease(v13);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_set_int", @"Failed to allocate number.", v8, v9, v10, v11, v12, v14);
  }
}

void sub_10000DC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t valuePtr = a4;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
  if (v7)
  {
    CFNumberRef v13 = v7;
    sub_10000D5A8(a1, a2, a3, (uint64_t)v7, v9, v10, v11, v12);
    CFRelease(v13);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_set_int64", @"Failed to allocate number.", v8, v9, v10, v11, v12, v14);
  }
}

CFMutableDictionaryRef sub_10000DCA0(uint64_t a1, uint64_t a2, const __CFString *a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = 0;
  CFStringRef v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  if (a2 && *(void *)a2 && *(void *)(a2 + 24))
  {
    CFMutableDictionaryRef v11 = sub_100020148(a1, (NSObject **)a2, a3, a4);
    v16[3] = (uint64_t)v11;
    if (!v11)
    {
      uint64_t v12 = *(NSObject **)a2;
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10000DDC8;
      v14[3] = &unk_1001862F0;
      v14[4] = &v15;
      v14[5] = a4;
      v14[6] = a3;
      v14[7] = a2;
      dispatch_sync(v12, v14);
      CFMutableDictionaryRef v11 = (CFMutableDictionaryRef)v16[3];
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_copy_with_conn_state", @"Invalid inputs.", (uint64_t)a4, a5, a6, a7, a8, v14[0]);
    CFMutableDictionaryRef v11 = 0;
  }
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_10000DDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000DDC8(void *a1)
{
  uint64_t v2 = a1[5];
  if (!v2)
  {
    uint64_t v6 = a1[6];
    CFDictionaryRef v7 = *(const __CFDictionary **)(a1[7] + 24);
    CFStringRef context = 0;
    CFIndex Length = 0;
    CFMutableDictionaryRef v19 = 0;
    if (v6)
    {
      char v16 = v6;
      CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"%@-");
    }
    else
    {
      CFStringRef v8 = CFStringCreateWithCString(0, "-", 0x8000100u);
    }
    CFStringRef v9 = v8;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFStringRef context = v9;
      CFIndex Length = CFStringGetLength(v9);
      CFMutableDictionaryRef v19 = Mutable;
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)sub_10000E884, &context);
      if (!v9)
      {
LABEL_14:
        *(void *)(*(void *)(a1[4] + 8) + 24) = Mutable;
        return;
      }
    }
    else
    {
      sub_10001A558(0, (uint64_t)"_copy_domain", @"Failed to create dictionary.", v10, v11, v12, v13, v14, v16);
      if (!v9) {
        goto LABEL_14;
      }
    }
    CFRelease(v9);
    goto LABEL_14;
  }
  CFStringRef v3 = sub_10000D990(a1[6], v2);
  if (v3)
  {
    CFStringRef v4 = v3;
    *(void *)(*(void *)(a1[4] + 8) + 24) = CFDictionaryGetValue(*(CFDictionaryRef *)(a1[7] + 24), v3);
    CFStringRef v5 = *(const void **)(*(void *)(a1[4] + 8) + 24);
    if (v5) {
      CFRetain(v5);
    }
    CFRelease(v4);
  }
}

uint64_t sub_10000DF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000DCA0(0, a1, a2, a3);
}

uint64_t sub_10000DF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (CFStringRef v9 = *(NSObject **)a1) != 0 && *(void *)(a1 + 24))
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10000DFFC;
    v11[3] = &unk_100186310;
    v11[4] = a2;
    v11[5] = a3;
    v11[6] = a1;
    char v12 = a4;
    dispatch_sync(v9, v11);
    return 0;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_remove_extended", @"Invalid inputs.", a4, a5, a6, a7, a8, v11[0]);
    return 0xFFFFFFFFLL;
  }
}

void sub_10000DFFC(uint64_t a1)
{
  CFStringRef v2 = sub_10000D990(*(void *)(a1 + 32), *(void *)(a1 + 40));
  if (v2)
  {
    CFStringRef v3 = v2;
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(*(void *)(a1 + 48) + 24), v2))
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 48) + 24), v3);
      char v9 = 1;
      for (uint64_t i = 4; i != 15; ++i)
      {
        CFSetRef v11 = *(const __CFSet **)(*(void *)(a1 + 48) + 8 * i);
        if (v11)
        {
          if ((i == 11 || i == 5) && CFSetContainsValue(v11, v3)) {
            char v9 = 0;
          }
          if (*(unsigned char *)(a1 + 56)) {
            CFSetRemoveValue(*(CFMutableSetRef *)(*(void *)(a1 + 48) + 8 * i), v3);
          }
        }
      }
      CFDictionaryRef v12 = *(const __CFDictionary **)(*(void *)(a1 + 48) + 136);
      if (v12)
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v12, v3);
        if (Value) {
          sub_100010480(Value);
        }
      }
      CFDictionaryRef v14 = *(const __CFDictionary **)(*(void *)(a1 + 48) + 160);
      if (v14)
      {
        uint64_t v15 = CFDictionaryGetValue(v14, v3);
        if (v15) {
          dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 48) + 8), v15);
        }
      }
      if (((dword_1001B6AD0 != 0) & v9) == 1) {
        sub_10001A558(0, (uint64_t)"data_ark_remove_extended_block_invoke", @"dirtied by removing %@", v4, v5, v6, v7, v8, (char)v3);
      }
      if (v9) {
        *(unsigned char *)(*(void *)(a1 + 48) + 16) = 1;
      }
    }
    CFRelease(v3);
  }
}

uint64_t sub_10000E184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10000DF4C(a1, a2, a3, 1, a5, a6, a7, a8);
}

uint64_t sub_10000E18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  if (a1 && (uint64_t v8 = *(NSObject **)a1) != 0 && *(void *)(a1 + 24))
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10000E284;
    v11[3] = &unk_1001862F0;
    v11[4] = &v12;
    v11[5] = a2;
    v11[6] = a3;
    void v11[7] = a1;
    dispatch_sync(v8, v11);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_exists", @"Invalid inputs.", a4, a5, a6, a7, a8, v11[0]);
  }
  uint64_t v9 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_10000E26C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10000E284(void *a1)
{
  CFStringRef v2 = sub_10000D990(a1[5], a1[6]);
  if (v2)
  {
    CFStringRef v3 = v2;
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1[7] + 24), v2) != 0;
    CFRelease(v3);
  }
}

uint64_t sub_10000E2FC(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = 0;
  char v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = -1;
  if (a1 && (uint64_t v8 = *a1) != 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000E3F4;
    block[3] = &unk_100186338;
    block[4] = &v14;
    void block[5] = a1;
    block[6] = a2;
    block[7] = a3;
    int v13 = a4;
    dispatch_sync(v8, block);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_set_attr", @"Invalid inputs.", a4, a5, a6, a7, a8, v11);
  }
  uint64_t v9 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v9;
}

void sub_10000E3DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_10000DAC0(*(NSObject ***)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64), a5, a6, a7, a8);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_10000E430(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = 0;
  char v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  if (a1 && (uint64_t v8 = *a1) != 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000E524;
    block[3] = &unk_100186338;
    block[4] = &v14;
    void block[5] = a1;
    block[6] = a2;
    block[7] = a3;
    int v13 = a4;
    dispatch_sync(v8, block);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_has_attr", @"Invalid inputs.", a4, a5, a6, a7, a8, v11);
  }
  uint64_t v9 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  return v9;
}

void sub_10000E50C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL sub_10000E524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL result = sub_10000DA14(*(NSObject ***)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64), a5, a6, a7, a8);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_10000E560(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  if (a1 && (uint64_t v8 = *a1) != 0)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10000E64C;
    v11[3] = &unk_100186238;
    v11[4] = &v12;
    v11[5] = a1;
    dispatch_sync(v8, v11);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_dirty", @"Invalid inputs.", a4, a5, a6, a7, a8, v11[0]);
  }
  uint64_t v9 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_10000E634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E64C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 16);
  return result;
}

CFMutableDictionaryRef sub_10000E660(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int valuePtr = 0;
  if (a1)
  {
    CFMutableDictionaryRef result = sub_10000DCA0(0, a1, a2, a3, a5, a6, a7, a8);
    if (result)
    {
      CFStringRef v9 = (const __CFString *)result;
      CFTypeID v10 = CFGetTypeID(result);
      if (v10 == CFBooleanGetTypeID())
      {
        unsigned int valuePtr = CFEqual(v9, kCFBooleanTrue) != 0;
      }
      else if (v10 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)v9, kCFNumberIntType, &valuePtr);
      }
      else if (v10 == CFStringGetTypeID())
      {
        unsigned int valuePtr = CFStringGetIntValue(v9);
      }
      CFRelease(v9);
      return (CFMutableDictionaryRef)valuePtr;
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"data_ark_get_int", @"Invalid input.", a4, a5, a6, a7, a8, v11);
    return 0;
  }
  return result;
}

CFMutableDictionaryRef sub_10000E740(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t valuePtr = 0;
  CFMutableDictionaryRef result = sub_10000DCA0(0, a1, a2, a3, a5, a6, a7, a8);
  if (result)
  {
    CFStringRef v9 = (const __CFString *)result;
    CFTypeID v10 = CFGetTypeID(result);
    if (v10 == CFBooleanGetTypeID())
    {
      if (CFEqual(v9, kCFBooleanTrue))
      {
        IntCFStringRef Value = 1;
LABEL_9:
        uint64_t valuePtr = IntValue;
      }
    }
    else if (v10 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt64Type, &valuePtr);
    }
    else if (v10 == CFStringGetTypeID())
    {
      IntCFStringRef Value = CFStringGetIntValue(v9);
      goto LABEL_9;
    }
    CFRelease(v9);
    return (CFMutableDictionaryRef)valuePtr;
  }
  return result;
}

void sub_10000E800(void *value, void *a2, CFSetRef *a3)
{
  CFSetRef v6 = a3[1];
  uint64_t v5 = a3[2];
  if ((!*a3 || !CFSetGetValue(*a3, value)) && (!v6 || !CFSetGetValue(v6, value)))
  {
    CFDictionarySetValue(v5, value, a2);
  }
}

void sub_10000E884(const __CFString *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  CFSetRef v6 = *(__CFDictionary **)(a3 + 16);
  if (CFStringHasPrefix(a1, *(CFStringRef *)a3))
  {
    v9.length = CFStringGetLength(a1) - v5;
    v9.location = v5;
    CFStringRef v7 = CFStringCreateWithSubstring(0, a1, v9);
    CFDictionarySetValue(v6, v7, a2);
    if (v7)
    {
      CFRelease(v7);
    }
  }
}

uint64_t start()
{
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  char v47 = 0;
  openlog("lockdownd", 1, 24);
  uint64_t v1 = dispatch_get_global_queue(0, 0);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v1, &stru_100186378);

  xpc_set_event_stream_handler("com.apple.iokit.matching", v1, &stru_100186398);
  xpc_set_event_stream_handler("com.apple.bonjour.registration", v1, &stru_1001863B8);

  signal(15, (void (__cdecl *)(int))1);
  CFStringRef v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, 0);
  if (!v2) {
    sub_1001048E8();
  }
  CFStringRef v3 = v2;
  dispatch_source_set_event_handler(v2, &stru_1001863D8);
  dispatch_resume(v3);
  sub_10001A558(0, (uint64_t)"main", @"Starting Up", v4, v5, v6, v7, v8, v46);
  MGSetLogHandler();
  CFRange v9 = (void *)os_transaction_create();
  *(void *)&long long v49 = dispatch_queue_create("com.apple.mobile.lockdown.dns", 0);
  if (!(void)v49) {
    sub_100104904();
  }
  sub_100003BDC();
  sub_10000FC70(0, v10, v11, v12, v13, v14, v15, v16);
  char v17 = sub_1000109CC((uint64_t)&v48, &v47);
  *(void *)&long long v48 = v17;
  if (!v17) {
    sub_100104920(&v47, v18, v19, v20, v21, v22, v23, v24);
  }
  if ((sub_1000067B8((uint64_t)v17, 0, 0) & 1) == 0) {
    sub_100104A38();
  }
  if ((sub_100023EE8((uint64_t)&v48, &v47, v25, v26, v27, v28, v29, v30) & 1) == 0) {
    sub_1001049E4(&v47, v31, v32, v33, v34, v35, v36, v37);
  }
  if ((sub_100024578((uint64_t)&v48, &v47, v32, v33, v34, v35, v36, v37) & 1) == 0) {
    sub_100104990(&v47, v38, v39, v40, v41, v42, v43, v44);
  }
  if ((sub_100024918(&v48) & 1) == 0) {
    sub_100104974();
  }

  CFRunLoopRun();

  return 1;
}

void sub_10000EB08(id a1, OS_xpc_object *a2)
{
  CFStringRef v2 = a2;
  id v3 = objc_alloc((Class)NSString);
  string = xpc_dictionary_get_string(v2, _xpc_event_key_name);

  id v10 = [v3 initWithUTF8String:string];
  sub_10001A558(0, (uint64_t)"main_block_invoke", @"Received notification: %@", v5, v6, v7, v8, v9, (char)v10);
}

void sub_10000EBA8(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (string)
  {
    if (dword_1001B6AD0) {
      sub_10001A558(0, (uint64_t)"main_block_invoke_2", @"com.apple.iokit.matching event: %s", v3, v4, v5, v6, v7, (char)string);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"main_block_invoke_2", @"Failed to get event name.", v3, v4, v5, v6, v7, v9);
  }
}

void sub_10000EC38(id a1)
{
}

void sub_10000EC4C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"mglog", @"%s", a4, a5, a6, a7, a8, a1);
  }
}

CFDataRef sub_10000EC94(uint64_t a1, const char *a2)
{
  CFDictionaryRef v3 = (const __CFDictionary *)SecKeyCopyAttributeDictionary();
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = v3;
  CFStringRef Value = (void *)CFDictionaryGetValue(v3, kSecValueData);
  if (Value) {
    CFDataRef v6 = sub_10000ECFC(Value, a2);
  }
  else {
    CFDataRef v6 = 0;
  }
  CFRelease(v4);
  return v6;
}

CFDataRef sub_10000ECFC(void *a1, const char *a2)
{
  uint64_t v5 = [a1 base64EncodedDataWithOptions:1];
  CFDataRef v6 = (CFDataRef)[v5 length];
  if (v6)
  {
    int v7 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", a2);
    CFIndex v8 = (CFIndex)v6 + v7 + snprintf(__src, 0x50uLL, "\n-----END %s-----\n", a2);
    char v9 = (char *)malloc_type_malloc(v8 + 1, 0x3C9BA930uLL);
    if (v9)
    {
      id v10 = (const UInt8 *)v9;
      uint64_t v11 = (UInt8 *)&strcpy(v9, __str)[v7];
      v15.location = 0;
      v15.length = (CFIndex)v6;
      CFDataGetBytes((CFDataRef)v5, v15, v11);
      strcpy((char *)v6 + (void)v11, __src);
      CFDataRef v6 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v10, v8, kCFAllocatorMalloc);
    }
    else
    {
      CFDataRef v6 = 0;
    }
  }

  return v6;
}

uint64_t sub_10000EE50(int a1)
{
  CFErrorRef error = 0;
  int valuePtr = a1;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v6)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v13 = Mutable;
    if (!Mutable)
    {
      CFStringRef v21 = @"Failed to create dictionary.";
      goto LABEL_12;
    }
    CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, @"lockdown-identities");
    CFDictionaryAddValue(v13, kSecAttrLabel, @"com.apple.lockdown.pairingkeypair");
    CFDictionaryAddValue(v13, kSecUseSystemKeychain, kCFBooleanTrue);
    CFDictionaryAddValue(v13, kSecClass, kSecClassKey);
    OSStatus v14 = SecItemDelete(v13);
    if (v14 != -25300)
    {
      OSStatus v20 = v14;
      if (v14)
      {
        sub_10001A558(0, (uint64_t)"lockcrypto_genenerate_keypair", @"Failed to delete keychain item (%@/%@): %d", v15, v16, v17, v18, v19, (char)@"lockdown-identities");
        if (v20 == -25291)
        {
          CFStringRef v21 = @"Keychain not available, no key generation attempted.";
LABEL_12:
          sub_10001A558(0, (uint64_t)"lockcrypto_genenerate_keypair", (uint64_t)v21, v8, v9, v10, v11, v12, v37);
          SecKeyRef v22 = 0;
          uint64_t v23 = 0;
          goto LABEL_15;
        }
      }
    }
    CFDictionaryAddValue(v13, kSecAttrKeyType, kSecAttrKeyTypeRSA);
    CFDictionaryAddValue(v13, kSecAttrAccessible, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate);
    CFDictionaryAddValue(v13, kSecAttrKeySizeInBits, v6);
    uint64_t v24 = SecKeyCreateRandomKey(v13, &error);
    uint64_t v23 = v24;
    if (v24)
    {
      SecKeyRef v22 = SecKeyCopyPublicKey(v24);
      if (v22)
      {
        sub_10000F104(v23);
        sub_100010480(@"com.apple.mobile.lockdown.BonjourServiceChanged");
        uint64_t v35 = 0;
        goto LABEL_16;
      }
      sub_10001A558(0, (uint64_t)"lockcrypto_genenerate_keypair", @"Failed to copy public key.", v30, v31, v32, v33, v34, v37);
    }
    else
    {
      sub_10001A558(0, (uint64_t)"lockcrypto_genenerate_keypair", @"Failed to create private key.", v25, v26, v27, v28, v29, v37);
      SecKeyRef v22 = 0;
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"lockcrypto_genenerate_keypair", @"Failed to create number.", v1, v2, v3, v4, v5, v37);
    SecKeyRef v22 = 0;
    uint64_t v23 = 0;
    uint64_t v13 = 0;
  }
LABEL_15:
  uint64_t v35 = 0xFFFFFFFFLL;
LABEL_16:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0;
  if (v13) {
    CFRelease(v13);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  return v35;
}

uint64_t sub_10000F104(const void *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v8 = Mutable;
    CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, @"lockdown-identities");
    CFDictionaryAddValue(v8, kSecAttrLabel, @"com.apple.lockdown.pairingkeypair");
    uint64_t v9 = (const void *)kSecUseSystemKeychain;
    CFDictionaryAddValue(v8, kSecUseSystemKeychain, kCFBooleanTrue);
    CFDictionaryAddValue(v8, kSecClass, kSecClassKey);
    OSStatus v10 = SecItemDelete(v8);
    if (v10 != -25300 && v10 != 0)
    {
      sub_10001A558(0, (uint64_t)"store_keypair", @"SecItemDelete failed: %d", v11, v12, v13, v14, v15, v10);
      goto LABEL_11;
    }
    CFRelease(v8);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      uint64_t v8 = Mutable;
      CFDictionaryAddValue(Mutable, kSecValueRef, a1);
      CFDictionaryAddValue(v8, kSecAttrAccessible, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate);
      CFDictionaryAddValue(v8, kSecAttrAccessGroup, @"lockdown-identities");
      CFDictionaryAddValue(v8, kSecAttrLabel, @"com.apple.lockdown.pairingkeypair");
      CFDictionaryAddValue(v8, v9, kCFBooleanTrue);
      OSStatus v17 = SecItemAdd(v8, 0);
      if (!v17)
      {
        uint64_t v23 = 1;
        goto LABEL_12;
      }
      sub_10001A558(0, (uint64_t)"store_keypair", @"SecItemAdd failed: %d", v18, v19, v20, v21, v22, v17);
LABEL_11:
      uint64_t v23 = 0;
LABEL_12:
      CFRelease(v8);
      return v23;
    }
  }
  sub_10001A558((uint64_t)Mutable, (uint64_t)"store_keypair", @"Failed to create dictionary.", v3, v4, v5, v6, v7, v25);
  return 0;
}

SecKeyRef sub_10000F320(const void *a1)
{
  SecTrustRef trust = 0;
  SecPolicyRef BasicX509 = SecPolicyCreateBasicX509();
  if (!BasicX509) {
    return 0;
  }
  SecPolicyRef v3 = BasicX509;
  OSStatus v4 = SecTrustCreateWithCertificates(a1, BasicX509, &trust);
  SecTrustRef v5 = trust;
  if (!v4)
  {
    SecKeyRef v6 = SecTrustCopyKey(trust);
    SecTrustRef v5 = trust;
    if (!trust) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  SecKeyRef v6 = 0;
  if (trust) {
LABEL_4:
  }
    CFRelease(v5);
LABEL_5:
  CFRelease(v3);
  return v6;
}

id sub_10000F3A8(const __CFData *a1, const char *a2)
{
  if (!a1) {
    return 0;
  }
  BytePtr = (const char *)CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  if (Length < 0) {
    return 0;
  }
  size_t v6 = Length;
  int v7 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", a2);
  snprintf(__little, 0x50uLL, "\n-----END %s-----\n", a2);
  uint64_t v8 = strnstr(BytePtr, __str, v6);
  uint64_t v9 = strnstr(BytePtr, __little, v6);
  id v10 = 0;
  if (v8)
  {
    uint64_t v11 = v9;
    if (v9)
    {
      uint64_t v12 = &v8[v7];
      uint64_t v14 = +[NSData dataWithBytesNoCopy:v12 length:v11 - v12 freeWhenDone:0];
      id v10 = [objc_alloc((Class)NSData) initWithBase64EncodedData:v14 options:1];
    }
  }
  return v10;
}

CFDataRef sub_10000F4E8(const __CFData *a1)
{
  CFDataRef result = (const __CFData *)sub_10000F3A8(a1, "CERTIFICATE");
  if (result)
  {
    CFDataRef v2 = result;
    SecCertificateRef v3 = SecCertificateCreateWithData(kCFAllocatorDefault, result);
    CFRelease(v2);
    return v3;
  }
  return result;
}

uint64_t sub_10000F53C(const __CFData *a1)
{
  CFDataRef v1 = (const __CFData *)sub_10000F3A8(a1, "RSA PRIVATE KEY");
  if (v1)
  {
    CFDataRef v7 = v1;
    CFDataGetBytePtr(v1);
    CFDataGetLength(v7);
    uint64_t RSAPrivateKey = SecKeyCreateRSAPrivateKey();
    if (!RSAPrivateKey) {
      sub_10001A558(0, (uint64_t)"lockcrypto_private_key_from_pem_data", @"SecKeyCreateRSAPrivateKey failed", v8, v9, v10, v11, v12, v15);
    }
    CFRelease(v7);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"lockcrypto_private_key_from_pem_data", @"lockcrypto_decode_pem failed", v2, v3, v4, v5, v6, v15);
    return 0;
  }
  return RSAPrivateKey;
}

uint64_t sub_10000F5E8(void *a1, int a2, CFDataRef theData, const __CFString **a4)
{
  if (a4) {
    *a4 = 0;
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  CCDigest();
  __sprintf_chk(v27, 0, 0x29uLL, "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0,
    0,
    0,
    0,
    0);
  CFDataGetLength(theData);
  sub_10001A558(0, (uint64_t)"unlock_with_escrow", @"Starting service with bag=%s, %ld", v7, v8, v9, v10, v11, (char)v27);
  int v12 = MKBKeyBagCreateWithData();
  if (v12)
  {
    sub_10001A558(0, (uint64_t)"unlock_with_escrow", @"Can't instantiate escrow bag: %d", v13, v14, v15, v16, v17, v12);
    if (a4)
    {
      CFStringRef v18 = @"Failure";
LABEL_9:
      uint64_t v25 = 0;
      *a4 = v18;
      return v25;
    }
    return 0;
  }
  int v19 = MKBKeyBagUnlock();
  if (v19)
  {
    sub_10001A558(0, (uint64_t)"unlock_with_escrow", @"Can't unlock escrow bag: %d", v20, v21, v22, v23, v24, v19);
    if (a4)
    {
      CFStringRef v18 = @"EscrowFailure";
      goto LABEL_9;
    }
    return 0;
  }
  if (a1) {
    *a1 = 0;
  }
  return 1;
}

id sub_10000F804(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v13 = a4;
  id v14 = a5;
  id v15 = [objc_alloc((Class)NSMutableString) initWithFormat:v14 arguments:&a9];

  int v19 = sub_10000F920(a1, a2, a3, v13, @"%@", v16, v17, v18, (uint64_t)v15);
  if (v13) {
    +[NSString stringWithFormat:@"%s: %@ // %@", a1, v15, v13];
  }
  else {
  uint64_t v20 = +[NSString stringWithFormat:@"%s: %@", a1, v15, v27];
  }

  sub_10001A558(0, (uint64_t)"createAndLogError", @"%@", v21, v22, v23, v24, v25, (char)v20);

  return v19;
}

id sub_10000F920(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v13 = a4;
  id v14 = a5;
  id v15 = [objc_alloc((Class)NSMutableString) initWithFormat:v14 arguments:&a9];

  id v16 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v17 = v16;
  if (v15) {
    [v16 setObject:v15 forKeyedSubscript:NSLocalizedDescriptionKey];
  }
  if (v13) {
    [v17 setObject:v13 forKeyedSubscript:NSUnderlyingErrorKey];
  }
  if (os_variant_allows_internal_security_policies())
  {
    if (a1)
    {
      uint64_t v18 = +[NSString stringWithUTF8String:a1];
      [v17 setObject:v18 forKeyedSubscript:@"FunctionName"];
    }
    if (a2)
    {
      int v19 = +[NSNumber numberWithInt:a2];
      [v17 setObject:v19 forKeyedSubscript:@"SourceLine"];
    }
  }
  uint64_t v20 = +[NSError errorWithDomain:@"com.apple.MobileLockdown.ErrorDomain" code:a3 userInfo:v17];

  return v20;
}

uint64_t sub_10000FAA8(void *a1, void *a2, id a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  if (v5 && v6)
  {
    do
    {
      uint64_t v9 = [v5 domain];
      if ([v9 isEqualToString:v7])
      {
        id v10 = [v5 code];

        if (v10 == a3)
        {
          uint64_t v8 = 1;
          goto LABEL_9;
        }
      }
      else
      {
      }
      uint64_t v11 = [v5 userInfo];
      uint64_t v12 = [v11 objectForKeyedSubscript:NSUnderlyingErrorKey];

      id v5 = (id)v12;
    }
    while (v12);
    uint64_t v8 = 0;
  }
LABEL_9:

  return v8;
}

__CFString *sub_10000FB88(void *a1)
{
  id v1 = a1;
  if (sub_10000FAA8(v1, @"com.apple.MobileLockdown.ErrorDomain", (id)0xFFFFFFFFFFFFFFFDLL))
  {
    uint64_t v2 = off_1001878B0;
  }
  else if (sub_10000FAA8(v1, @"com.apple.MobileLockdown.ErrorDomain", (id)0xFFFFFFFFFFFFFFFCLL))
  {
    uint64_t v2 = off_1001879B8;
  }
  else if (sub_10000FAA8(v1, @"com.apple.MobileLockdown.ErrorDomain", (id)0xFFFFFFFFFFFFFFFBLL))
  {
    uint64_t v2 = off_100187990;
  }
  else if (sub_10000FAA8(v1, @"com.apple.MobileLockdown.ErrorDomain", (id)0xFFFFFFFFFFFFFFFALL))
  {
    uint64_t v2 = off_100187928;
  }
  else
  {
    int v3 = sub_10000FAA8(v1, @"com.apple.MobileLockdown.ErrorDomain", (id)0xFFFFFFFFFFFFFFF9);
    uint64_t v2 = off_1001879E8;
    if (v3) {
      uint64_t v2 = off_100187930;
    }
  }
  uint64_t v4 = *v2;

  return v4;
}

uint64_t sub_10000FC70(char *key, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1001B8010 == -1)
  {
    if (key) {
      goto LABEL_3;
    }
    return 0;
  }
  dispatch_once(&qword_1001B8010, &stru_1001864C8);
  if (!key) {
    return 0;
  }
LABEL_3:
  if (!qword_1001B8008)
  {
    CFStringRef v17 = @"launchd not initialized yet.";
LABEL_12:
    sub_10001A558(0, (uint64_t)"checkin_with_launchd", (uint64_t)v17, a4, a5, a6, a7, a8, v18);
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = launch_data_dict_lookup((const launch_data_t)qword_1001B8008, key);
  if (!v9)
  {
    sub_10001A558(0, (uint64_t)"checkin_with_launchd", @"No info about socket %s.", v10, v11, v12, v13, v14, (char)key);
    return 0xFFFFFFFFLL;
  }
  index = launch_data_array_get_index(v9, 0);
  if (!index)
  {
    CFStringRef v17 = @"No file descriptor available.";
    goto LABEL_12;
  }

  return launch_data_get_fd(index);
}

void sub_10000FD54(id a1)
{
  id v1 = (_launch_data *)launch_socket_service_check_in();
  if (v1)
  {
    uint64_t v7 = v1;
    if (launch_data_get_type(v1) == LAUNCH_DATA_ERRNO)
    {
      int errno = launch_data_get_errno(v7);
      char v9 = launch_data_get_errno(v7);
      strerror(errno);
      sub_10001A558(0, (uint64_t)"checkin_with_launchd_block_invoke", @"launch_socket_service_check_in failed: %d (%s)", v10, v11, v12, v13, v14, v9);
    }
    else
    {
      id v15 = launch_data_dict_lookup(v7, "Sockets");
      qword_1001B8008 = (uint64_t)v15;
      if (v15) {
        qword_1001B8008 = (uint64_t)launch_data_copy(v15);
      }
      else {
        sub_10001A558(0, (uint64_t)"checkin_with_launchd_block_invoke", @"No sockets in checkin response.", v16, v17, v18, v19, v20, v21);
      }
    }
    launch_data_free(v7);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"checkin_with_launchd_block_invoke", @"launch_socket_service_check_in failed.", v2, v3, v4, v5, v6, v23);
  }
}

const void *sub_10000FE58(const void *result)
{
  if (result)
  {
    id v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFNumberGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *sub_10000FE94(const void *result)
{
  if (result)
  {
    id v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFDictionaryGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *sub_10000FED0(const void *result)
{
  if (result)
  {
    id v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFArrayGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *sub_10000FF0C(const void *result)
{
  if (result)
  {
    id v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFStringGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *sub_10000FF48(const void *result)
{
  if (result)
  {
    id v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFDataGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *sub_10000FF84(const void *result)
{
  if (result)
  {
    id v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFBooleanGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL sub_10000FFC0(int a1)
{
  int v10 = 1;
  int v1 = setsockopt(a1, 0xFFFF, 4130, &v10, 4u);
  if (v1 == -1)
  {
    CFTypeID v2 = __error();
    char v3 = strerror(*v2);
    sub_10001A558(0, (uint64_t)"_disable_sigpipe", @"setsockopt(SO_NOSIGPIPE) failed: %s", v4, v5, v6, v7, v8, v3);
  }
  return v1 != -1;
}

BOOL sub_10001003C(int a1)
{
  int v10 = 1;
  int v1 = setsockopt(a1, 0xFFFF, 0x10000, &v10, 4u);
  if (v1 == -1)
  {
    CFTypeID v2 = __error();
    char v3 = strerror(*v2);
    sub_10001A558(0, (uint64_t)"_disable_wake_from_sleep", @"setsockopt(SO_NOWAKEFROMSLEEP) failed: %s", v4, v5, v6, v7, v8, v3);
  }
  return v1 != -1;
}

uint64_t sub_1000100B8(int a1)
{
  int v2 = fcntl(a1, 3, 0);
  if (v2 < 0)
  {
    CFStringRef v4 = @"Couldn't read socket status flags: %s";
  }
  else
  {
    if ((fcntl(a1, 4, v2 & 0xFFFFFFFB) & 0x80000000) == 0) {
      return 1;
    }
    CFStringRef v4 = @"Couldn't write socket status flags: %s";
  }
  uint64_t v5 = __error();
  char v6 = strerror(*v5);
  sub_10001A558(0, (uint64_t)"set_socket_option_blocking", (uint64_t)v4, v7, v8, v9, v10, v11, v6);
  return 0;
}

uint64_t sub_10001014C(int a1)
{
  int v14 = 1;
  int v12 = 2;
  int v13 = 10;
  int v11 = 5;
  if (setsockopt(a1, 0xFFFF, 8, &v14, 4u) == -1)
  {
    CFStringRef v3 = @"setsockopt(SO_KEEPALIVE) failed: %s";
  }
  else if (setsockopt(a1, 6, 16, &v13, 4u) == -1)
  {
    CFStringRef v3 = @"setsockopt(TCP_KEEPALIVE) failed: %s";
  }
  else if (setsockopt(a1, 6, 257, &v12, 4u) == -1)
  {
    CFStringRef v3 = @"setsockopt(TCP_KEEPINTVL) failed: %s";
  }
  else
  {
    if (setsockopt(a1, 6, 258, &v11, 4u) != -1) {
      return 1;
    }
    CFStringRef v3 = @"setsockopt(TCP_KEEPCNT) failed: %s";
  }
  CFStringRef v4 = __error();
  char v5 = strerror(*v4);
  sub_10001A558(0, (uint64_t)"set_socket_option_keepalive", (uint64_t)v3, v6, v7, v8, v9, v10, v5);
  return 0;
}

CFStringRef sub_100010268(int a1, char *a2)
{
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  sockaddr v33 = (sockaddr)0;
  long long v34 = 0u;
  socklen_t v31 = 128;
  if (getpeername(a1, &v33, &v31))
  {
    uint64_t v10 = __error();
    char v11 = strerror(*v10);
    sub_10001A558(0, (uint64_t)"createIPString", @"Can't get socket address: %s", v12, v13, v14, v15, v16, v11);
  }
  else if (v33.sa_family == 30)
  {
    if (inet_ntop(30, &v33.sa_data[6], cStr, 0x80u))
    {
      char v8 = 1;
      goto LABEL_8;
    }
    uint64_t v24 = __error();
    char v25 = strerror(*v24);
    sub_10001A558(0, (uint64_t)"createIPString", @"Can't convert to ipv6 string: %s", v26, v27, v28, v29, v30, v25);
  }
  else if (v33.sa_family == 2)
  {
    if (inet_ntop(2, &v33.sa_data[2], cStr, 0x80u))
    {
      char v8 = 0;
LABEL_8:
      *a2 = v8;
      return CFStringCreateWithCString(0, cStr, 0x8000100u);
    }
    uint64_t v17 = __error();
    char v18 = strerror(*v17);
    sub_10001A558(0, (uint64_t)"createIPString", @"Can't convert to ipv4 string: %s", v19, v20, v21, v22, v23, v18);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"createIPString", @"Unknown socket family %d", v3, v4, v5, v6, v7, v33.sa_family);
  }
  return 0;
}

xpc_object_t sub_1000103EC(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDataRef Data = CFPropertyListCreateData(kCFAllocatorDefault, a1, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data) {
    return 0;
  }
  CFDataRef v4 = Data;
  BytePtr = CFDataGetBytePtr(Data);
  size_t Length = CFDataGetLength(v4);
  xpc_object_t v7 = xpc_data_create(BytePtr, Length);
  CFRelease(v4);
  return v7;
}

void sub_100010480(const __CFString *a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();

  CFNotificationCenterPostNotification(DarwinNotifyCenter, a1, a1, 0, 1u);
}

CFStringRef sub_1000104C4()
{
  memset(out, 0, sizeof(out));
  memset(v1, 0, sizeof(v1));
  uuid_generate(out);
  uuid_unparse(out, v1);
  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

uint64_t sub_100010544(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100010744;
  v13[3] = &unk_1001864F0;
  v13[5] = a1;
  v13[6] = a2;
  v13[4] = &v15;
  char v14 = a4;
  sub_1000106A8((uint64_t)&unk_1001B5420, 0x8Eu, (uint64_t)v13);
  uint64_t v8 = v16[3];
  if (v8) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = a3 == 0;
  }
  if (!v9)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000107E8;
    v11[3] = &unk_1001864F0;
    v11[5] = a1;
    void v11[6] = a2;
    v11[4] = &v15;
    char v12 = a4;
    sub_1000106A8((uint64_t)&unk_1001B6A50, 3u, (uint64_t)v11);
    uint64_t v8 = v16[3];
  }
  _Block_object_dispose(&v15, 8);
  return v8;
}

void sub_100010690(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000106A8(uint64_t result, unsigned int a2, uint64_t a3)
{
  char v10 = 0;
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = a2 - 1;
    do
    {
      if (*(void *)v4) {
        uint64_t v6 = **(void **)v4;
      }
      else {
        uint64_t v6 = 0;
      }
      xpc_object_t v7 = *(uint64_t **)(v4 + 8);
      if (v7) {
        uint64_t v8 = *v7;
      }
      else {
        uint64_t v8 = 0;
      }
      CFDataRef result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a3 + 16))(a3, v6, v8, v4, &v10);
      if (v10) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v5 == 0;
      }
      --v5;
      v4 += 40;
    }
    while (!v9);
  }
  return result;
}

uint64_t sub_100010744(uint64_t result, unint64_t cf1, unint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(result + 40);
  if (!(cf1 | v9) || cf1 && v9 && (CFDataRef result = CFEqual((CFTypeRef)cf1, (CFTypeRef)v9), result))
  {
    unint64_t v10 = *(void *)(v8 + 48);
    if (!(a3 | v10) || a3 && v10 && (CFDataRef result = CFEqual((CFTypeRef)a3, (CFTypeRef)v10), result))
    {
      uint64_t v11 = 24;
      if (!*(unsigned char *)(v8 + 56)) {
        uint64_t v11 = 16;
      }
      *(void *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *(void *)(a4 + v11);
      *a5 = 1;
    }
  }
  return result;
}

uint64_t sub_1000107E8(uint64_t result, unint64_t cf1, unint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(result + 40);
  if (!(cf1 | v9) || cf1 && v9 && (CFDataRef result = CFEqual((CFTypeRef)cf1, (CFTypeRef)v9), result))
  {
    unint64_t v10 = *(void *)(v8 + 48);
    if (!(a3 | v10) || a3 && v10 && (CFDataRef result = CFEqual((CFTypeRef)a3, (CFTypeRef)v10), result))
    {
      uint64_t v11 = 24;
      if (!*(unsigned char *)(v8 + 56)) {
        uint64_t v11 = 16;
      }
      *(void *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *(void *)(a4 + v11);
      *a5 = 1;
    }
  }
  return result;
}

void sub_10001088C(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100010930;
  v3[3] = &unk_100186510;
  v3[4] = a1;
  v3[5] = a2;
  CFTypeID v2 = objc_retainBlock(v3);
  sub_1000106A8((uint64_t)&unk_1001B5420, 0x8Eu, (uint64_t)v2);
  sub_1000106A8((uint64_t)&unk_1001B6A50, 3u, (uint64_t)v2);
}

void sub_100010930(uint64_t a1, unint64_t cf1, const void *a3)
{
  unint64_t v5 = *(void *)(a1 + 32);
  if (!(cf1 | v5) || cf1 && v5 && CFEqual((CFTypeRef)cf1, (CFTypeRef)v5))
  {
    uint64_t v6 = (const void *)MGCopyAnswer();
    if (v6)
    {
      xpc_object_t v7 = v6;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a3, v6);
      CFRelease(v7);
    }
  }
}

NSObject **sub_1000109CC(uint64_t a1, void *a2)
{
  bzero(__s, 0x400uLL);
  sub_100006D80(__s);
  strlen(__s);
  __strncat_chk();
  if (mkdir(__s, 0x1C0u) && *__error() != 17)
  {
    __error();
    sockaddr v33 = __error();
    strerror(*v33);
    sub_10000F804((uint64_t)"lockstart_local", 481, -1, 0, @"Failed to mkdir %s: %d (%s)", v34, v35, v36, (uint64_t)__s);
    id v37 = (id)objc_claimAutoreleasedReturnValue();
    long long v38 = __error();
    strerror(*v38);
    sub_10001A558(0, (uint64_t)"lockstart_local", @"Could not mkdir %s : %s", v39, v40, v41, v42, v43, (char)__s);
    sub_1000266EC(__s);
  }
  else
  {
    int v8 = sub_100026AC0(__s, 256, 0x4000, v3, v4, v5, v6, v7);
    if (v8 != -1)
    {
      int v9 = v8;
      if (fchmod(v8, 0x1C0u) == -1)
      {
        __error();
        long long v49 = __error();
        strerror(*v49);
        sub_10000F804((uint64_t)"lockstart_local", 494, -1, 0, @"Failed to chmod %s: %d (%s)", v50, v51, v52, (uint64_t)__s);
LABEL_78:
        id v37 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_79;
      }
      int v15 = sub_100026AC0("/private/var/db/timezone", 256, 0x4000, v10, v11, v12, v13, v14);
      if (v15 == -1)
      {
        sub_10001A558(0, (uint64_t)"repair_permissions", @"no fixing up the TZ dir", v16, v17, v18, v19, v20, v550);
      }
      else
      {
        int v21 = v15;
        if (fchmod(v15, 0x16Du) == -1)
        {
          uint64_t v22 = __error();
          strerror(*v22);
          sub_10001A558(0, (uint64_t)"repair_permissions", @"Could not chmod %s: %s", v23, v24, v25, v26, v27, (char)"/private/var/db/timezone");
        }
        close(v21);
      }
      int v53 = sub_100026AC0("/private/var/mobile/Media/ApplicationArchives", 256, 0x4000, v28, v29, v30, v31, v32);
      if (v53 == -1)
      {
        if (*__error() != 2)
        {
          uint64_t v58 = __error();
          strerror(*v58);
          sub_10001A558(0, (uint64_t)"repair_permissions", @"sym link: %s, error: %s", v59, v60, v61, v62, v63, (char)"/private/var/mobile/Media/ApplicationArchives");
        }
      }
      else
      {
        int v54 = v53;
        uint64_t v55 = getpwnam("mobile");
        if (v55)
        {
          uid_t pw_uid = v55->pw_uid;
          gid_t pw_gid = v55->pw_gid;
        }
        else
        {
          gid_t pw_gid = 501;
          uid_t pw_uid = 501;
        }
        if (fchown(v54, pw_uid, pw_gid) == -1 && *__error() != 2)
        {
          uint64_t v64 = __error();
          strerror(*v64);
          sub_10001A558(0, (uint64_t)"repair_permissions", @"Could not chown %s: %s", v65, v66, v67, v68, v69, (char)"/private/var/mobile/Media/ApplicationArchives");
        }
        close(v54);
      }
      uint64_t v70 = (NSObject **)sub_10000CF04();
      if (!v70)
      {
        sub_10000F804((uint64_t)"lockstart_local", 504, -1, 0, @"Failed to load data ark.", v71, v72, v73, v550);
        id v37 = (id)objc_claimAutoreleasedReturnValue();
        sub_10001A558(0, (uint64_t)"lockstart_local", @"Failed to load data ark.", v380, v381, v382, v383, v384, v551);
LABEL_79:
        long long v48 = 0;
        goto LABEL_80;
      }
      long long v48 = v70;
      v558[0] = _NSConcreteStackBlock;
      v558[1] = 3221225472;
      v558[2] = sub_100012998;
      v558[3] = &unk_100186530;
      v558[4] = v70;
      sub_1000106A8((uint64_t)&unk_1001B6A50, 3u, (uint64_t)v558);
      v557[0] = _NSConcreteStackBlock;
      v557[1] = 3221225472;
      v557[2] = sub_100012AA8;
      v557[3] = &unk_100186530;
      v557[4] = v48;
      sub_1000106A8((uint64_t)&unk_1001B5420, 0x8Eu, (uint64_t)v557);
      if ((sub_10000E18C((uint64_t)v48, 0, @"ActivationState", v74, v75, v76, v77, v78) & 1) == 0)
      {
        sub_10000E2FC(v48, 0, @"ActivationState", 1, v80, v81, v82, v83);
        sub_10000D5A8((uint64_t)v48, 0, @"ActivationState", @"Unactivated", v84, v85, v86, v87);
      }
      if (sub_10000E18C((uint64_t)v48, 0, @"WeHaveATicket", v79, v80, v81, v82, v83)) {
        sub_10000E184((uint64_t)v48, 0, @"WeHaveATicket", v88, v89, v90, v91, v92);
      }
      sub_10000E2FC(v48, 0, @"StoredIdentity", 2, v89, v90, v91, v92);
      sub_10000E2FC(v48, 0, @"StoredIDBuild", 2, v93, v94, v95, v96);
      sub_10000E2FC(v48, 0, @"TrustedHostAttached", 1, v97, v98, v99, v100);
      sub_10000E2FC(v48, 0, @"HostAttached", 1, v101, v102, v103, v104);
      sub_10000E2FC(v48, 0, @"WeHaveATicket", 1, v105, v106, v107, v108);
      sub_10000E2FC(v48, 0, @"WeHaveATicket", 2, v109, v110, v111, v112);
      sub_10000E2FC(v48, 0, @"LastActivated", 2, v113, v114, v115, v116);
      sub_10000E2FC(v48, 0, @"InProgress", 1, v117, v118, v119, v120);
      sub_10000E2FC(v48, 0, @"InProgress", 2, v121, v122, v123, v124);
      sub_10000E2FC(v48, @"com.apple.mobile.internal", @"VoidWarranty", 2, v125, v126, v127, v128);
      sub_10000E2FC(v48, 0, @"HasSiDP", 0, v129, v130, v131, v132);
      sub_10000D5A8((uint64_t)v48, 0, @"HasSiDP", (uint64_t)kCFBooleanTrue, v133, v134, v135, v136);
      sub_10000E2FC(v48, @"com.apple.mobile.restriction", @"ProhibitAppInstall", 2, v137, v138, v139, v140);
      sub_10000E2FC(v48, @"com.apple.mobile.restriction", @"ProhibitAppInstall", 3, v141, v142, v143, v144);
      sub_10000E2FC(v48, @"com.apple.mobile.restriction", @"ProhibitAppDelete", 2, v145, v146, v147, v148);
      sub_10000E2FC(v48, @"com.apple.mobile.restriction", @"ProhibitAppDelete", 3, v149, v150, v151, v152);
      sub_10000E2FC(v48, @"com.apple.purplebuddy", @"SetupDone", 3, v153, v154, v155, v156);
      sub_10000E2FC(v48, @"com.apple.purplebuddy", @"SetupFinishedAllSteps", 3, v157, v158, v159, v160);
      sub_10000E2FC(v48, @"com.apple.fmip", @"ActivationRecord", 2, v161, v162, v163, v164);
      sub_10000E2FC(v48, 0, @"IntegratedCircuitCardIdentity", 1, v165, v166, v167, v168);
      sub_10000E2FC(v48, 0, @"IntegratedCircuitCardIdentity2", 1, v169, v170, v171, v172);
      sub_10000E2FC(v48, 0, @"InternationalMobileSubscriberIdentity", 1, v173, v174, v175, v176);
      sub_10000E2FC(v48, @"com.apple.mobile.lockdown.paired_hosts", 0, 1, v177, v178, v179, v180);
      sub_10000E2FC(v48, 0, @"InverseDeviceID", 2, v181, v182, v183, v184);
      sub_10000E2FC(v48, 0, @"SIMStatus", 1, v185, v186, v187, v188);
      sub_10000E2FC(v48, 0, @"PreviousSIMStatus", 2, v189, v190, v191, v192);
      sub_10000E2FC(v48, @"com.apple.mobile.backup", @"Version", 1, v193, v194, v195, v196);
      sub_10000E2FC(v48, 0, @"PhoneNumber", 1, v197, v198, v199, v200);
      sub_10000E2FC(v48, @"com.apple.disk_usage", @"MobileApplicationUsage", 1, v201, v202, v203, v204);
      sub_10000E2FC(v48, @"com.apple.disk_usage.factory", @"MobileApplicationUsage", 1, v205, v206, v207, v208);
      sub_10000E2FC(v48, 0, @"FirstPurpleBuddyCompletion", 2, v209, v210, v211, v212);
      sub_10000E2FC(v48, @"com.apple.mobile.iTunes", @"iTunesSetupComplete", 0, v213, v214, v215, v216);
      sub_10000E2FC(v48, @"com.apple.mobile.iTunes", @"FamilyID", 0, v217, v218, v219, v220);
      sub_10000E2FC(v48, @"com.apple.mobile.iTunes", @"MinITunesVersion", 0, v221, v222, v223, v224);
      sub_10000E2FC(v48, @"com.apple.mobile.iTunes", @"MinMacOSVersion", 0, v225, v226, v227, v228);
      sub_10000E2FC(v48, 0, @"UntrustedHostBUID", 0, v229, v230, v231, v232);
      sub_10000E2FC(v48, 0, @"UntrustedHostBUID", 8, v233, v234, v235, v236);
      sub_10000E2FC(v48, 0, @"UntrustedHostBUID", 7, v237, v238, v239, v240);
      sub_10000E2FC(v48, @"com.apple.smf", @"ScienceReportComplete", 0, v241, v242, v243, v244);
      sub_10000E2FC(v48, @"com.apple.smf", @"IDLastSeenAtBoot", 0, v245, v246, v247, v248);
      sub_10000E2FC(v48, @"com.apple.smf", @"IDLastSeenAtBootBuild", 0, v249, v250, v251, v252);
      sub_10000E2FC(v48, 0, @"IDAMConfig", 0, v253, v254, v255, v256);
      sub_10000E2FC(v48, 0, @"DevicePublicKey", 1, v257, v258, v259, v260);
      sub_10000E2FC(v48, 0, @"DevicePublicKey", 0, v261, v262, v263, v264);
      sub_10000E2FC(v48, 0, @"DevicePrivateKey", 1, v265, v266, v267, v268);
      sub_10000E2FC(v48, 0, @"DevicePrivateKey", 2, v269, v270, v271, v272);
      sub_10000E2FC(v48, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", 0, v273, v274, v275, v276);
      sub_10000E2FC(v48, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", 9, v277, v278, v279, v280);
      sub_10000E2FC(v48, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", 0, v281, v282, v283, v284);
      sub_10000E2FC(v48, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", 9, v285, v286, v287, v288);
      sub_10000E2FC(v48, @"com.apple.mobile.wireless_lockdown", @"EnableWifiConnections", 0, v289, v290, v291, v292);
      sub_10000E2FC(v48, 0, @"PreflightInfo", 0, v293, v294, v295, v296);
      sub_10000E2FC(v48, 0, @"ApParameters", 0, v297, v298, v299, v300);
      sub_10000E2FC(v48, @"com.apple.lockdown.datamigrator", @"MigrationDone", 0, v301, v302, v303, v304);
      sub_10000E2FC(v48, @"com.apple.lockdown.datamigrator", @"MigrationDone", 6, v305, v306, v307, v308);
      sub_10000E2FC(v48, 0, @"DeviceName", 0, v309, v310, v311, v312);
      uint64_t v317 = sub_10000E2FC(v48, 0, @"DeviceName", 6, v313, v314, v315, v316);
      CFStringRef v332 = sub_100007034(v317, v318, v319, v320, v321, v322, v323, v324);
      if (v332 || (CFStringRef v332 = (const __CFString *)MGCopyAnswer()) != 0)
      {
        sub_100007100(v332, v325, v326, v327, v328, v329, v330, v331);
        sub_10000D5A8((uint64_t)v48, 0, @"DeviceName", (uint64_t)v332, v333, v334, v335, v336);
        char v337 = 0;
      }
      else
      {
        char v337 = 1;
      }
      sub_10000E2FC(v48, 0, @"DarkProductVersion", 2, v328, v329, v330, v331);
      sub_10000E2FC(v48, 0, @"ProductName", 6, v338, v339, v340, v341);
      sub_10000E2FC(v48, 0, @"HardwareModel", 6, v342, v343, v344, v345);
      sub_10000E2FC(v48, 0, @"ProductVersion", 6, v346, v347, v348, v349);
      sub_10000E2FC(v48, 0, @"HumanReadableProductVersionString", 6, v350, v351, v352, v353);
      sub_10000E2FC(v48, 0, @"ProductType", 6, v354, v355, v356, v357);
      sub_10000E2FC(v48, 0, @"CPUArchitecture", 6, v358, v359, v360, v361);
      sub_10000E2FC(v48, 0, @"SupportedDeviceFamilies", 6, v362, v363, v364, v365);
      sub_10000E2FC(v48, @"com.apple.mobile.lockdown.paired_host_info", 0, 10, v366, v367, v368, v369);
      if ((v337 & 1) == 0) {
        CFRelease(v332);
      }
      sub_10000D09C(v48, @"com.apple.mobile.backup", 0, @"com.apple.mobile.backup.domain_changed", 4);
      sub_10000D09C(v48, @"com.apple.mobile.data_sync", 0, @"com.apple.mobile.data_sync.domain_changed", 1);
      sub_10000D09C(v48, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", @"com.apple.mobile.lockdown.BonjourServiceChanged", 6);
      sub_10000D09C(v48, @"com.apple.mobile.wireless_lockdown", @"EnableWifiConnections", @"com.apple.mobile.lockdown.BonjourServiceChanged", 6);
      sub_10000D09C(v48, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", @"com.apple.mobile.lockdown.BonjourPairingServiceChanged", 6);
      sub_10000D09C(v48, @"com.apple.disk_usage", @"MobileApplicationUsage", @"com.apple.mobile.lockdown.disk_usage_changed", 1);
      sub_10000D09C(v48, @"com.apple.xcode.developerdomain", @"DeveloperStatus", @"com.apple.mobile.lockdown.developer_status_changed", 6);
      sub_10000D09C(v48, @"com.apple.purplebuddy", @"com.apple.purplebuddy.backup_state", @"com.apple.purplebuddy.backup_state", 6);
      sub_10000D09C(v48, @"com.apple.purplebuddy", @"SetupState", @"com.apple.purplebuddy.SetupStateChanged", 6);
      sub_10000D09C(v48, 0, @"DeviceName", @"com.apple.mobile.lockdown.device_name_changed", 6);
      CFPropertyListRef v370 = CFPreferencesCopyValue(@"LogToDisk", @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
      if (!v370)
      {
LABEL_43:
        CFPropertyListRef v385 = CFPreferencesCopyValue(@"ExtendedLogging", @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        if (v385)
        {
          v386 = v385;
          CFTypeID v387 = CFGetTypeID(v385);
          if (v387 == CFBooleanGetTypeID())
          {
            uint64_t v393 = CFEqual(v386, kCFBooleanTrue);
            if (v393)
            {
              sub_10001A558(0, (uint64_t)"load_preferences", @"Enabling the extended logging preference", v394, v395, v396, v397, v398, v550);
              dword_1001B6AD0 = 1;
            }
            else
            {
              sub_10001A558(v393, (uint64_t)"load_preferences", @"Disabling the extended logging preference", v394, v395, v396, v397, v398, v550);
              dword_1001B6AD0 = 0;
            }
          }
          else
          {
            sub_10001A558(0, (uint64_t)"load_preferences", @"Value for extended logging is not a BOOLean", v388, v389, v390, v391, v392, v550);
          }
          CFRelease(v386);
        }
        CFPropertyListRef v399 = CFPreferencesCopyValue(@"RaptorCertsPref", @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        if (v399)
        {
          v400 = v399;
          CFTypeID v401 = CFGetTypeID(v399);
          if (v401 == CFBooleanGetTypeID())
          {
            uint64_t v407 = CFEqual(v400, kCFBooleanTrue);
            if (v407)
            {
              sub_10001A558(0, (uint64_t)"load_preferences", @"Enabling the raptor certs", v408, v409, v410, v411, v412, v550);
              dword_1001B6AD4 = 1;
            }
            else
            {
              sub_10001A558(v407, (uint64_t)"load_preferences", @"Disabling the raptor certs", v408, v409, v410, v411, v412, v550);
              dword_1001B6AD4 = 0;
            }
          }
          else
          {
            sub_10001A558(0, (uint64_t)"load_preferences", @"Value for raptor is not a BOOLean", v402, v403, v404, v405, v406, v550);
          }
          CFRelease(v400);
        }
        CFPropertyListRef v413 = CFPreferencesCopyValue(@"DebugKDB", @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        if (v413)
        {
          v414 = v413;
          if (CFEqual(v413, kCFBooleanTrue))
          {
            sub_10001A558(0, (uint64_t)"load_preferences", @"Enabling debug with kdb", v415, v416, v417, v418, v419, v550);
            dword_1001B8FE0 = 1;
          }
          CFRelease(v414);
        }
        CFPropertyListRef v420 = CFPreferencesCopyValue(@"SecureCopyValue", @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        if (v420)
        {
          v426 = v420;
          sub_10001A558(0, (uint64_t)"load_preferences", @"enable lockdown paranoia", v421, v422, v423, v424, v425, v550);
          sub_10000E2FC(v48, 0, @"SecureCopyValue", 1, v427, v428, v429, v430);
          sub_10000D5A8((uint64_t)v48, 0, @"SecureCopyValue", @"SCVEnabled", v431, v432, v433, v434);
          CFRelease(v426);
        }
        sub_10000D5A8((uint64_t)v48, 0, @"ProtocolVersion", @"2", v422, v423, v424, v425);
        sub_10000E2FC(v48, 0, @"ProtocolVersion", 0, v435, v436, v437, v438);
        if (sub_1000141C0(v48))
        {
          if (MKBDeviceUnlockedSinceBoot() && (sub_100013F58((uint64_t)v48) & 1) == 0) {
            sub_10001A558(0, (uint64_t)"lockstart_local", @"Failed to upgrade pair records' protection class.", v442, v443, v444, v445, v446, v550);
          }
          v447 = (void *)sub_10000DF38((uint64_t)v48, 0, @"BuildVersion");
          sub_10001A558(0, (uint64_t)"lockstart_local", @"Build version: %@", v448, v449, v450, v451, v452, (char)v447);
          int v453 = sub_10000594C();
          v459 = "false";
          if (v453) {
            v459 = "true";
          }
          sub_10001A558(0, (uint64_t)"lockstart_local", @"Data Migration Completed: %s", v454, v455, v456, v457, v458, (char)v459);
          sub_100029EDC((uint64_t)v48, v460, v461, v462, v463, v464, v465, v466);
          BOOL v472 = sub_10002A00C();
          if (v472) {
            CFStringRef v473 = @"using Raptor Certs";
          }
          else {
            CFStringRef v473 = @"old school Certs";
          }
          sub_10001A558(0, (uint64_t)"_load_product_type", (uint64_t)v473, v467, v468, v469, v470, v471, v552);
          if (dword_1001B6AD4 == 1)
          {
            CFStringRef v479 = @"use raptor certs by overriding old school - this is almost never correct";
          }
          else
          {
            if (dword_1001B6AD4)
            {
              v481 = (uint64_t *)&kCFBooleanFalse;
              if (v472) {
                v481 = (uint64_t *)&kCFBooleanTrue;
              }
              goto LABEL_88;
            }
            CFStringRef v479 = @"use old school certs with raptor override";
          }
          sub_10001A558(0, (uint64_t)"_load_product_type", (uint64_t)v479, v474, v475, v476, v477, v478, v553);
          v481 = (uint64_t *)&kCFBooleanFalse;
LABEL_88:
          sub_10000D5A8((uint64_t)v48, 0, @"UseRaptorCerts", *v481, v475, v476, v477, v478);
          sub_100011EAC(v48, v482, v483, v484, v485, v486, v487, v488, v553);
          CFDataRef v489 = sub_100007310();
          if (v489)
          {
            CFDataRef v495 = v489;
            sub_10000E2FC(v48, @"com.apple.mobile.iTunes", @"FairPlayCertificate", 1, v491, v492, v493, v494);
            sub_10000D5A8((uint64_t)v48, @"com.apple.mobile.iTunes", @"FairPlayCertificate", (uint64_t)v495, v496, v497, v498, v499);
            CFRelease(v495);
          }
          else
          {
            sub_10001A558(0, (uint64_t)"_load_cesm_certificate", @"Could not extract necessary certificate", v490, v491, v492, v493, v494, v554);
          }
          id v503 = sub_1000271D0();
          if (v503)
          {
            v504 = (void *)sub_10000DF38((uint64_t)v48, 0, @"BootSessionID");
            uint64_t v505 = sub_10001B06C(v504);
            if (!v505
              || (v511 = (void *)v505,
                  unsigned __int8 v512 = [v504 isEqualToString:v503],
                  v511,
                  (v512 & 1) == 0))
            {
              sub_10001A558(0, (uint64_t)"performBootSessionIntialization", @"Boot session changed (reboot detected).", v506, v507, v508, v509, v510, v554);
              if ((sub_100027D14((uint64_t)v48, v513, v514, v515, v516, v517, v518, v519) & 1) == 0)
              {
                sub_10001A558(0, (uint64_t)"performBootSessionIntialization", @"Device is in buddy upon new boot session, deleting all existing pair records.", v520, v521, v522, v523, v524, v555);
                sub_1000145A8(1);
                sub_100029580();
                sub_100012210(1, v525, v526, v527, v528, v529, v530, v531, v556);
              }
              sub_1000269B0((uint64_t)"/private/var/mobile/Media/PublicStaging");
              sub_10000D5A8((uint64_t)v48, 0, @"BootSessionID", (uint64_t)v503, v532, v533, v534, v535);
              sub_10000D2C8(v48, v536, v537, v538, v539, v540, v541, v542, v555);
            }
            id v543 = 0;
          }
          else
          {
            sub_10000F920((uint64_t)"performBootSessionIntialization", 392, -1, 0, @"Failed to copy boot session UUID.", v500, v501, v502, v554);
            id v543 = objc_claimAutoreleasedReturnValue();

            v504 = 0;
          }

          id v37 = v543;
          if (v503)
          {
            sub_10000E184((uint64_t)v48, 0, @"ActivationState", v544, v545, v546, v547, v548);
            sub_100013320(v48);
            sub_100027BDC(v48);
          }
          else
          {
            uint64_t v549 = sub_10000F804((uint64_t)"lockstart_local", 563, -1, v37, @"Failed to initialize boot session.", v546, v547, v548, v554);

            long long v48 = 0;
            id v37 = (id)v549;
          }
LABEL_80:
          close(v9);
          if (!a2) {
            goto LABEL_83;
          }
          goto LABEL_81;
        }
        sub_10000F804((uint64_t)"lockstart_local", 539, -1, 0, @"Failed to perform migration tasks.", v439, v440, v441, v550);
        goto LABEL_78;
      }
      v371 = v370;
      CFTypeID v372 = CFGetTypeID(v370);
      if (v372 == CFBooleanGetTypeID())
      {
        uint64_t v378 = CFEqual(v371, kCFBooleanTrue);
        if (!v378)
        {
          sub_10001A558(v378, (uint64_t)"load_preferences", @"Disabling the log to disk preference", v373, v374, v375, v376, v377, v550);
          dword_1001B6AD8 = 0;
          goto LABEL_42;
        }
        dword_1001B6AD8 = 1;
        CFStringRef v379 = @"Enabling the log to disk preference";
      }
      else
      {
        CFStringRef v379 = @"Value for disk logging is not a BOOLean";
      }
      sub_10001A558(0, (uint64_t)"load_preferences", (uint64_t)v379, v373, v374, v375, v376, v377, v550);
LABEL_42:
      CFRelease(v371);
      goto LABEL_43;
    }
    __error();
    uint64_t v44 = __error();
    strerror(*v44);
    sub_10000F804((uint64_t)"lockstart_local", 489, -1, 0, @"Failed to open %s: %d (%s)", v45, v46, v47, (uint64_t)__s);
    id v37 = (id)objc_claimAutoreleasedReturnValue();
  }
  long long v48 = 0;
  if (!a2) {
    goto LABEL_83;
  }
LABEL_81:
  if (!v48) {
    *a2 = v37;
  }
LABEL_83:

  return v48;
}

void sub_100011EAC(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  memset(v35, 0, sizeof(v35));
  int valuePtr = 0;
  if (!sub_100029E98())
  {
    sub_100062760(0, 0, (uint64_t)v35);
    if (v15)
    {
      char v33 = v15;
      CFStringRef v21 = @"FairPlayGetHWInfo failed: %ld";
    }
    else
    {
      int v22 = sub_10002F1D0(0, (uint64_t)v35, (uint64_t)"/private/var/mobile/Media/iTunes_Control/iTunes", (uint64_t)&valuePtr);
      if (v22)
      {
        char v33 = v22;
        CFStringRef v21 = @"FairPlayInitContext failed: %ld";
      }
      else
      {
        CFNumberRef v23 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
        if (v23)
        {
          CFNumberRef v24 = v23;
          sub_10000E2FC(a1, @"com.apple.fairplay", @"FairPlayContextID", 1, v17, v18, v19, v20);
          sub_10000E2FC(a1, @"com.apple.fairplay", @"FairPlayContextID", 2, v25, v26, v27, v28);
          sub_10000D5A8((uint64_t)a1, @"com.apple.fairplay", @"FairPlayContextID", (uint64_t)v24, v29, v30, v31, v32);
          CFRelease(v24);
          return;
        }
        CFStringRef v21 = @"Failed to create number.";
      }
    }
    sub_10001A558(0, (uint64_t)"create_cesm_context", (uint64_t)v21, v16, v17, v18, v19, v20, v33);
    return;
  }

  sub_10001A558(0, (uint64_t)"bringup_stuff_ok", @"FPGA workaround enabled, no stuff", v10, v11, v12, v13, v14, a9);
}

void *sub_10001206C(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100012210(0, a2, a3, a4, a5, a6, a7, a8, v68);
  int v9 = sub_100019744((uint64_t)a1);
  sub_10001304C(a1, @"Bookmarks", 0, v10, v11, v12, v13, v14, v69);
  sub_10001304C(a1, @"Calendars", 0, v15, v16, v17, v18, v19, v70);
  sub_10001304C(a1, @"Contacts", 0, v20, v21, v22, v23, v24, v71);
  sub_10001304C(a1, @"Mail Accounts", 1, v25, v26, v27, v28, v29, v72);
  sub_10001304C(a1, @"Notes", 0, v30, v31, v32, v33, v34, v73);
  sub_10000E2FC(a1, @"com.apple.mobile.sync_data_class", @"DeviceHandlesDefaultCalendar", 1, v35, v36, v37, v38);
  sub_10000E2FC(a1, @"com.apple.mobile.sync_data_class", @"SyncSupportsCalDAV", 1, v39, v40, v41, v42);
  sub_10000E2FC(a1, @"com.apple.mobile.sync_data_class", @"SupportsEncryptedBackups", 1, v43, v44, v45, v46);
  sub_10000E2FC(a1, @"com.apple.mobile.sync_data_class", @"DeviceSupportsClearingData", 1, v47, v48, v49, v50);
  sub_10000D5A8((uint64_t)a1, @"com.apple.mobile.sync_data_class", @"DeviceHandlesDefaultCalendar", (uint64_t)kCFBooleanTrue, v51, v52, v53, v54);
  sub_10000D5A8((uint64_t)a1, @"com.apple.mobile.sync_data_class", @"SyncSupportsCalDAV", (uint64_t)kCFBooleanTrue, v55, v56, v57, v58);
  sub_10000D5A8((uint64_t)a1, @"com.apple.mobile.sync_data_class", @"SupportsEncryptedBackups", (uint64_t)kCFBooleanTrue, v59, v60, v61, v62);
  sub_10000D5A8((uint64_t)a1, @"com.apple.mobile.sync_data_class", @"DeviceSupportsClearingData", (uint64_t)kCFBooleanTrue, v63, v64, v65, v66);
  sub_1000096AC(a1);
  return v9;
}

void sub_100012210(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (qword_1001B8020 != -1) {
    dispatch_once(&qword_1001B8020, &stru_100186550);
  }
  if (qword_1001B8018)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100012C8C;
    block[3] = &unk_100186570;
    char v11 = a1;
    dispatch_sync((dispatch_queue_t)qword_1001B8018, block);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"_pairing_keypair_worker", @"Invalid queue.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_1000122EC(NSObject **a1)
{
  id v7 = objc_alloc_init((Class)NSMutableArray);
  if (!v7)
  {
    CFStringRef v92 = @"Failed to create array.";
LABEL_44:
    sub_10001A558(0, (uint64_t)"load_supported_languages", (uint64_t)v92, v2, v3, v4, v5, v6, v140);
LABEL_48:

    goto LABEL_49;
  }
  int v8 = +[IPLanguageListGenerator generator];
  int v9 = [v8 deviceLanguagesForChangingDeviceLanguage:1];

  if (!v9)
  {
    CFStringRef v92 = @"Failed to query IntlPreferences languages.";
    goto LABEL_44;
  }
  long long v150 = 0u;
  long long v151 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  id v10 = v9;
  id v11 = [v10 countByEnumeratingWithState:&v148 objects:v152 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v149;
    do
    {
      for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v149 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = [*(id *)(*((void *)&v148 + 1) + 8 * i) identifier];
        [v7 addObject:v15];
      }
      id v12 = [v10 countByEnumeratingWithState:&v148 objects:v152 count:16];
    }
    while (v12);
  }

  uint64_t v16 = +[NSLocale systemLanguages];
  if (!v16)
  {
    sub_10001A558(0, (uint64_t)"load_supported_languages", @"Failed to query system languages.", v17, v18, v19, v20, v21, v140);
LABEL_47:

    goto LABEL_48;
  }
  uint64_t v22 = (void *)v16;
  id v23 = [objc_alloc((Class)NSMutableSet) initWithArray:v7];
  if (!v23)
  {
    sub_10001A558(0, (uint64_t)"load_supported_languages", @"Failed to create set.", v24, v25, v26, v27, v28, v140);

    goto LABEL_47;
  }
  uint64_t v29 = v23;
  [v23 addObjectsFromArray:v22];
  CFArrayRef v30 = [v29 allObjects];

  if (!v30)
  {
LABEL_49:
    sub_10001A558(0, (uint64_t)"load_international_filters", @"Failed to load supported languages.", v31, v32, v33, v34, v35, v140);
    return;
  }
  sub_10000E2FC(a1, @"com.apple.international", @"SupportedLanguages", 1, v32, v33, v34, v35);
  sub_10000D5A8((uint64_t)a1, @"com.apple.international", @"SupportedLanguages", (uint64_t)v30, v36, v37, v38, v39);
  uint64_t v40 = sub_100012B34(v30);
  if (!v40)
  {
    sub_10001A558(0, (uint64_t)"load_supported_locales", @"Failed to create locale maps for supported languages.", v41, v42, v43, v44, v45, v140);
LABEL_63:
    sub_10001A558(0, (uint64_t)"load_international_filters", @"Failed to load supported locales.", v93, v94, v95, v96, v97, v140);
    CFArrayRef v139 = v30;
LABEL_64:
    CFRelease(v139);
    return;
  }
  uint64_t v46 = v40;
  CFArrayRef v47 = CFLocaleCopyAvailableLocaleIdentifiers();
  if (!v47)
  {
    sub_10001A558(0, (uint64_t)"load_supported_locales", @"Failed to copy available locale identifiers.", v48, v49, v50, v51, v52, v140);
    CFRelease(v46);
    goto LABEL_63;
  }
  CFArrayRef v53 = v47;
  theArray = sub_100012B34(v47);
  if (theArray)
  {
    CFMutableDictionaryRef v59 = sub_10002637C();
    if (v59)
    {
      uint64_t v146 = v59;
      uint64_t v142 = a1;
      CFIndex Count = CFArrayGetCount(v53);
      CFArrayRef v141 = v30;
      CFIndex v66 = CFArrayGetCount(v30);
      if (Count >= 1)
      {
        uint64_t v67 = v66;
        CFIndex v68 = 0;
        CFArrayRef v143 = v53;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v53, v68);
          CFIndex v145 = v68;
          CFDictionaryRef v69 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v68);
          if (CFDictionaryContainsKey(v69, kCFLocaleCountryCode))
          {
            if (v67 >= 1) {
              break;
            }
          }
LABEL_38:
          CFIndex v68 = v145 + 1;
          CFArrayRef v53 = v143;
          if (v145 + 1 == Count) {
            goto LABEL_39;
          }
        }
        CFIndex v70 = 0;
        while (1)
        {
          CFDictionaryRef v71 = (const __CFDictionary *)CFArrayGetValueAtIndex(v46, v70);
          CFStringRef Value = CFDictionaryGetValue(v69, kCFLocaleLanguageCode);
          char v73 = CFDictionaryGetValue(v71, kCFLocaleLanguageCode);
          uint64_t v74 = CFDictionaryGetValue(v69, kCFLocaleScriptCode);
          uint64_t v75 = CFDictionaryGetValue(v71, kCFLocaleScriptCode);
          if (Value && v73)
          {
            int v76 = CFEqual(Value, v73);
            BOOL v77 = v76 != 0;
            if (v74) {
              goto LABEL_29;
            }
            if (v76) {
              goto LABEL_34;
            }
          }
          else if (v74)
          {
            BOOL v77 = 0;
LABEL_29:
            if (!v75) {
              goto LABEL_37;
            }
            if (!CFEqual(v74, v75) || !v77) {
              goto LABEL_37;
            }
LABEL_34:
            CFLocaleIdentifier CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString(kCFAllocatorDefault, ValueAtIndex);
            if (CanonicalLocaleIdentifierFromString)
            {
              CFLocaleIdentifier v85 = CanonicalLocaleIdentifierFromString;
              CFDictionarySetValue(v146, CanonicalLocaleIdentifierFromString, kCFBooleanTrue);
              CFRelease(v85);
            }
            else
            {
              sub_10001A558(0, (uint64_t)"load_supported_locales", @"Could not create canonical locale identifier", v80, v81, v82, v83, v84, v140);
            }
          }
LABEL_37:
          if (v67 == ++v70) {
            goto LABEL_38;
          }
        }
      }
LABEL_39:
      uint64_t v91 = sub_100026424(v146);
      if (!v91) {
        sub_10001A558(0, (uint64_t)"load_supported_locales", @"Failed to copy supported locales.", v86, v87, v88, v89, v90, v140);
      }
      CFRelease(v146);
      CFArrayRef v30 = v141;
      a1 = v142;
    }
    else
    {
      sub_10001A558(0, (uint64_t)"load_supported_locales", @"Failed to create dictionary.", v60, v61, v62, v63, v64, v140);
      uint64_t v91 = 0;
    }
    CFRelease(theArray);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"load_supported_locales", @"Failed to create locale maps for available locales.", v54, v55, v56, v57, v58, v140);
    uint64_t v91 = 0;
  }
  CFRelease(v53);
  CFRelease(v46);
  if (!v91) {
    goto LABEL_63;
  }
  sub_10000E2FC(a1, @"com.apple.international", @"SupportedLocales", 1, v94, v95, v96, v97);
  sub_10000D5A8((uint64_t)a1, @"com.apple.international", @"SupportedLocales", (uint64_t)v91, v98, v99, v100, v101);
  CFArrayRef v108 = (const __CFArray *)sub_10001ABE4(@"AppleLanguages", 0, v102, v103, v104, v105, v106, v107);
  CFArrayRef v114 = v108;
  if (!v108)
  {
    sub_10001A558(0, (uint64_t)"load_international_filters", @"Failed to copy %@.", v109, v110, v111, v112, v113, (char)@"AppleLanguages");
LABEL_67:
    CFTypeRef v129 = 0;
    goto LABEL_68;
  }
  uint64_t v115 = CFArrayGetValueAtIndex(v108, 0);
  if (!v115)
  {
    sub_10001A558(0, (uint64_t)"load_international_filters", @"Failed to query the first language in the list.", v117, v118, v119, v120, v121, v140);
    goto LABEL_67;
  }
  uint64_t v122 = (uint64_t)v115;
  CFPropertyListRef v123 = sub_10001ABE4(@"AppleLocale", 0, v116, v117, v118, v119, v120, v121);
  CFTypeRef v129 = v123;
  if (v123)
  {
    if (!sub_10000FF0C(v123))
    {
      sub_10001A558(0, (uint64_t)"load_international_filters", @"Using default locale en_US.", v130, v131, v132, v133, v134, v140);
      CFRelease(v129);
      CFTypeRef v129 = CFRetain(@"en_US");
    }
    sub_10000D5A8((uint64_t)a1, @"com.apple.international", @"Language", v122, v131, v132, v133, v134);
    sub_10000D5A8((uint64_t)a1, @"com.apple.international", @"Locale", (uint64_t)v129, v135, v136, v137, v138);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"load_international_filters", @"Failed to copy %@.", v124, v125, v126, v127, v128, (char)@"AppleLocale");
  }
LABEL_68:
  CFRelease(v91);
  CFRelease(v30);
  if (v114) {
    CFRelease(v114);
  }
  if (v129)
  {
    CFArrayRef v139 = (const __CFArray *)v129;
    goto LABEL_64;
  }
}

void sub_100012998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(unsigned __int8 *)(a4 + 32);
  int v9 = *(NSObject ***)(a1 + 32);
  uint64_t v10 = *(void *)(a4 + 16);
  if (v8) {
    sub_1000129E4(v9, a2, a3, v10, 2, a6, a7, a8, 1);
  }
  else {
    sub_1000129E4(v9, a2, a3, v10, 1, a6, a7, a8, 1);
  }
}

void sub_1000129E4(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v20 = &a9;
  if ((int)a5 >= 1)
  {
    int v12 = a5;
    do
    {
      uint64_t v13 = (unsigned int *)v20++;
      sub_10000E2FC(a1, a2, a3, *v13, a5, a6, a7, a8);
      --v12;
    }
    while (v12);
  }
  sub_10000E2FC(a1, a2, a3, 4, a5, a6, a7, a8);
  uint64_t v14 = MGCopyAnswer();
  if (v14)
  {
    uint64_t v19 = (const void *)v14;
    sub_10000D5A8((uint64_t)a1, a2, a3, v14, v15, v16, v17, v18);
    CFRelease(v19);
  }
}

uint64_t sub_100012AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000E2FC(*(NSObject ***)(a1 + 32), a2, a3, 1, a5, a6, a7, a8);
  uint64_t result = sub_10000E2FC(*(NSObject ***)(a1 + 32), a2, a3, 4, v12, v13, v14, v15);
  if (*(unsigned char *)(a4 + 32))
  {
    uint64_t v21 = *(NSObject ***)(a1 + 32);
    return sub_10000E2FC(v21, a2, a3, 0, v17, v18, v19, v20);
  }
  return result;
}

__CFArray *sub_100012B34(const __CFArray *a1)
{
  id v7 = sub_1000263D4();
  if (v7)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 0; i != v9; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
        if (ValueAtIndex)
        {
          char v17 = (char)ValueAtIndex;
          CFDictionaryRef ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(kCFAllocatorDefault, ValueAtIndex);
          if (ComponentsFromLocaleIdentifier)
          {
            CFDictionaryRef v24 = ComponentsFromLocaleIdentifier;
            CFArrayAppendValue(v7, ComponentsFromLocaleIdentifier);
            CFRelease(v24);
          }
          else
          {
            sub_10001A558(0, (uint64_t)"build_locale_maps", @"Failed to create dictionary of locale components for %@.", v19, v20, v21, v22, v23, v17);
          }
        }
        else
        {
          sub_10001A558(0, (uint64_t)"build_locale_maps", @"Failed to extract locale identifier %ld of %ld.", v12, v13, v14, v15, v16, i);
        }
      }
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"build_locale_maps", @"Failed to create array.", v2, v3, v4, v5, v6, v26);
  }
  return v7;
}

void sub_100012C4C(id a1)
{
  qword_1001B8018 = (uint64_t)dispatch_queue_create("com.apple.mobile.lockdown.pair", 0);

  _objc_release_x1();
}

void sub_100012C8C(uint64_t a1)
{
  bzero(v52, 0x400uLL);
  bzero(__str, 0x400uLL);
  memset(&v50, 0, sizeof(v50));
  CFTypeRef result = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    sub_10001A558(0, (uint64_t)"_check_keypair", @"Failed to allocate dictionary.", v3, v4, v5, v6, v7, v48);
    goto LABEL_24;
  }
  int v8 = Mutable;
  CFDictionarySetValue(Mutable, kSecClass, kSecClassKey);
  CFDictionarySetValue(v8, kSecAttrAccessGroup, @"lockdown-identities");
  CFDictionarySetValue(v8, kSecAttrLabel, @"com.apple.lockdown.pairingkeypair");
  CFDictionaryAddValue(v8, kSecUseSystemKeychain, kCFBooleanTrue);
  if (SecItemCopyMatching(v8, &result) != -25300)
  {
    uint64_t v21 = 0;
    CFDataRef v22 = 0;
    int v23 = 1;
    int v15 = -1;
    goto LABEL_13;
  }
  sub_100014C98();
  sub_100006D80(v52);
  snprintf(__str, 0x400uLL, "%s%s", v52, "/Library/Lockdown/device_private_key.pem");
  int v14 = sub_100026AC0(__str, 256, 0x8000, v9, v10, v11, v12, v13);
  int v15 = v14;
  if (v14 == -1) {
    goto LABEL_10;
  }
  if (fstat(v14, &v50))
  {
    sub_10001A558(0, (uint64_t)"_check_keypair", @"Failed to fstat %s", v16, v17, v18, v19, v20, (char)__str);
LABEL_10:
    uint64_t v21 = 0;
LABEL_11:
    CFDataRef v22 = 0;
LABEL_12:
    int v23 = 0;
    goto LABEL_13;
  }
  off_t st_size = v50.st_size;
  if (v50.st_size >= (uint64_t)&_mh_execute_header)
  {
    sub_10001A558(0, (uint64_t)"_check_keypair", @"Invalid file size.", v16, v17, v18, v19, v20, v48);
    goto LABEL_10;
  }
  uint64_t v31 = (UInt8 *)malloc_type_malloc(v50.st_size, 0xCAC4A62uLL);
  uint64_t v21 = v31;
  if (!v31)
  {
    CFStringRef v44 = @"Failed to allocate memory.";
LABEL_36:
    sub_10001A558(0, (uint64_t)"_check_keypair", (uint64_t)v44, v32, v33, v34, v35, v36, v48);
    goto LABEL_11;
  }
  if (read(v15, v31, st_size) <= 0)
  {
    int v45 = *__error();
    uint64_t v46 = __error();
    strerror(*v46);
    char v48 = v45;
    CFStringRef v44 = @"Failed to read bytes: %d (%s)";
    goto LABEL_36;
  }
  CFDataRef v37 = CFDataCreate(0, v21, st_size);
  CFDataRef v22 = v37;
  if (!v37)
  {
    CFStringRef v47 = @"Failed to create data.";
LABEL_40:
    sub_10001A558(0, (uint64_t)"_check_keypair", (uint64_t)v47, v38, v39, v40, v41, v42, v48);
    goto LABEL_12;
  }
  uint64_t v43 = (const void *)sub_10000F53C(v37);
  CFTypeRef result = v43;
  if (!v43)
  {
    CFStringRef v47 = @"Failed to create key.";
    goto LABEL_40;
  }
  if ((sub_10000F104(v43) & 1) == 0)
  {
    CFStringRef v47 = @"Failed to store key pair.";
    goto LABEL_40;
  }
  sub_100010480(@"com.apple.mobile.lockdown.BonjourServiceChanged");
  int v23 = 1;
LABEL_13:
  CFRelease(v8);
  if (result) {
    CFRelease(result);
  }
  CFTypeRef result = 0;
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    free(v21);
  }
  if (v15 == -1)
  {
    if (!v23) {
      goto LABEL_24;
    }
LABEL_23:
    if (!*(unsigned char *)(a1 + 32)) {
      return;
    }
    goto LABEL_24;
  }
  close(v15);
  if (v23) {
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v25 = sub_10000EE50(2048);
  if (v25)
  {
    sub_10001A558(0, (uint64_t)"_pairing_keypair_worker_block_invoke_2", @"Failed to generate keypair.", v26, v27, v28, v29, v30, v48);
  }
  else
  {
    sub_10001A558(v25, (uint64_t)"_pairing_keypair_worker_block_invoke_2", @"Destroying old pair records.", v26, v27, v28, v29, v30, v48);
    sub_1000145A8(0);
  }
}

void sub_10001304C(NSObject **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = sub_10002637C();
  if (v12)
  {
    uint64_t v18 = v12;
    if (a3) {
      CFDictionarySetValue(v12, @"ReadOnly", kCFBooleanTrue);
    }
    sub_10000E2FC(a1, @"com.apple.mobile.sync_data_class", a2, 1, v14, v15, v16, v17);
    sub_10000D5A8((uint64_t)a1, @"com.apple.mobile.sync_data_class", a2, (uint64_t)v18, v19, v20, v21, v22);
    CFRelease(v18);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"_insert_data_class", @"Failed to create dictionary.", v13, v14, v15, v16, v17, a9);
  }
}

uint64_t sub_100013120(uint64_t result)
{
  if (result)
  {
    CFTypeRef result = CFEqual((CFTypeRef)result, @"com.apple.mobile.user_preferences");
    if (result)
    {
      if (dword_1001B6AD0) {
        sub_10001A558(0, (uint64_t)"is_userprefs_domain", @"kLockdownUserPreferencesDomainKey is the domain", v1, v2, v3, v4, v5, vars0);
      }
      return 1;
    }
  }
  return result;
}

CFPropertyListRef sub_10001317C(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    sub_10001A558(0, (uint64_t)"copy_userprefs_value", @"getting NULL for %@ domain is unsupported", a4, a5, a6, a7, a8, (char)a1);
    return 0;
  }
  if (!sub_100013120((uint64_t)a1)) {
    return 0;
  }
  sub_10001A558(0, (uint64_t)"copy_userprefs_value", @"copying %@ domain: %@ key", v10, v11, v12, v13, v14, (char)a1);

  return sub_10001ABE4(a2, a1, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_10001321C(const __CFString *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    char v20 = (char)a1;
    CFStringRef v18 = @"setting NULL for %@ domain is unsupported";
LABEL_9:
    uint64_t v11 = 0;
LABEL_11:
    sub_10001A558(v11, (uint64_t)"set_userprefs_value", (uint64_t)v18, a4, a5, a6, a7, a8, v20);
    return 0;
  }
  uint64_t v11 = sub_100013120((uint64_t)a1);
  if (!v11)
  {
    CFStringRef v18 = @"unsupported domain";
    goto LABEL_11;
  }
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"set_userprefs_value", @"setting %@ domain: %@ key: %@ value", a4, a5, a6, a7, a8, (char)a1);
  }
  CFStringRef v12 = (const __CFString *)sub_10000FF0C(a2);
  if (sub_10001AAC4(v12, a3, a1, v13, v14, v15, v16, v17))
  {
    if (!dword_1001B6AD0) {
      return 0;
    }
    CFStringRef v18 = @"not set";
    goto LABEL_9;
  }
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"set_userprefs_value", @"set", a4, a5, a6, a7, a8, v20);
  }
  return 1;
}

void sub_100013320(NSObject **a1)
{
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2000000000;
  char v28 = 0;
  CFDictionaryRef v2 = (const __CFDictionary *)sub_10000DF38((uint64_t)a1, @"com.apple.mobile.user_preferences", 0);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 0x40000000;
  v24[2] = sub_100013430;
  v24[3] = &unk_100186598;
  v24[5] = @"com.apple.mobile.user_preferences";
  v24[6] = a1;
  v24[4] = &v25;
  sub_1000261E0(v2, v24);
  CFRelease(v2);
  int v3 = *((unsigned __int8 *)v26 + 24);
  _Block_object_dispose(&v25, 8);
  if (v3)
  {
    sub_10001A558(0, (uint64_t)"migrate_userprefs_values", @"kLockdownUserPreferencesDomainKey migrated", v4, v5, v6, v7, v8, v21);
    sub_10001A558(0, (uint64_t)"migrate_userprefs_values", @"flushing changes to the data ark", v9, v10, v11, v12, v13, v22);
    sub_10000D2C8(a1, v14, v15, v16, v17, v18, v19, v20, v23);
  }
}

void sub_100013430(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = sub_10001321C(*(const __CFString **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    sub_10000E184(*(void *)(a1 + 48), *(void *)(a1 + 40), (uint64_t)a2, v11, v12, v13, v14, v15);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    sub_10001A558(v10, (uint64_t)"migrate_userprefs_domain_block_invoke", @"failed to migrate %@/%@", v11, v12, v13, v14, v15, *(void *)(a1 + 40));
  }
}

uint64_t sub_1000134A4(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3032000000;
  v15[3] = sub_100013614;
  v15[4] = sub_100013624;
  id v16 = 0;
  uint64_t v8 = sub_10001362C();
  dispatch_assert_queue_not_V2(v8);

  uint64_t v9 = sub_10001362C();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100013680;
  block[3] = &unk_1001865E8;
  block[6] = a1;
  block[7] = a4;
  char v13 = a3;
  char v14 = a2;
  void block[4] = v15;
  void block[5] = &v17;
  dispatch_sync(v9, block);

  uint64_t v10 = *((unsigned __int8 *)v18 + 24);
  _Block_object_dispose(v15, 8);

  _Block_object_dispose(&v17, 8);
  return v10;
}

void sub_1000135F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013614(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100013624(uint64_t a1)
{
}

id sub_10001362C()
{
  if (qword_1001B8080 != -1) {
    dispatch_once(&qword_1001B8080, &stru_1001868D8);
  }
  uint64_t v0 = (void *)qword_1001B8078;

  return v0;
}

void sub_100013680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unint64_t v10 = sub_100027124();
  if (*(void *)(a1 + 48))
  {
    unint64_t v16 = v10;
    id v17 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
    {
      id v20 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", "-----BEGIN CERTIFICATE-----\nMIIDPTCCAiWgAwIBAgIBATANBgkqhkiG9w0BAQsFADBOMSkwJwYDVQQDDCBUZXN0\nIEF1dG9tYXRpb24gTG9ja2Rvd24gUm9vdCBDQTEUMBIGA1UECgwLQXBwbGUsIElu\nYy4xCzAJBgNVBAYTAlVTMB4XDTE3MDkyMTAxNDIyN1oXDTE3MDkyMjAxNDIyN1ow\nTjEpMCcGA1UEAwwgVGVzdCBBdXRvbWF0aW9uIExvY2tkb3duIFJvb3QgQ0ExFDAS\nBgNVBAoMC0FwcGxlLCBJbmMuMQswCQYDVQQGEwJVUzCCASIwDQYJKoZIhvcNAQEB\nBQADggEPADCCAQoCggEBALb4vJZBLlbrG9NE7BvAGf0WgNmgeHWKXEwM+HHTHM7x\n0gJunt5R6z+lb8lSH1/lz1VMwPV4mAoShObmLHhiYKfmdbeMzDmeOkGV6bJKNHxU\n854NJPd9e7yQkUlVXrkewsnmhRE1WytgGVpTns1JcKT7bFGiUGIFfX/l8ciLtGXA\nZ8rgeXzl2EUq62rOaNzLkHm1WAiUhWW3MU70MQXKFa3JbhLysa4XHxPqIzdmBe+N\nKHiMT3cLENYMQ/OSiIr1Ssa622+zTTaRHXT+ysc7smrgr2ZKaMY+a+oqJ00AMUJI\nXbEtMjLr5BPQqWPZSTThK2crxUwoTZuLg+PLYbApjrECAwEAAaMmMCQwEgYDVR0T\nAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAqQwDQYJKoZIhvcNAQELBQADggEB\nAD/1Hy7Sf6xE8nWiBy+ioOc7jXwWXNaRQb9lF8yAAFBtzRvkFKyN8LX+1QielIMx\n41Z8XTwv9ibhZF0ETlxZch9wduwL3wwKirBLbvqUJJ5XKW7hlUUXR7MC8trQFWIk\nntGLrtmcKSDWyWHu2eVPjJmQh+v6xetufq0u3TokqE/X+/fpPcu596mYRrovJY8g\np9gFmpAN8E4gqEfQUj9ak8aIces12cnOapL7ZHo0XHltLBBQd+4sLDO7JUlKAi2A\n"
              "SQxevep+SlLsUQYoAvr1CPxGkWuEBj/3oXhmk7EesJjDsnSnloMGoHVxxkRIipvr\n"
              "6TK70j9afDnOjNWRNmXMHLM=\n"
              "-----END CERTIFICATE-----\n",
              1184);
      if (v20)
      {
        id v53 = v20;
        id v21 = sub_1000271D0();
        if (v21)
        {
          v58[0] = _NSConcreteStackBlock;
          v58[1] = 3221225472;
          v58[2] = sub_100013BDC;
          v58[3] = &unk_1001865C0;
          uint64_t v27 = *(void *)(a1 + 56);
          uint64_t v61 = *(void *)(a1 + 32);
          uint64_t v62 = v27;
          char v65 = *(unsigned char *)(a1 + 64);
          id v28 = v21;
          id v59 = v28;
          unint64_t v63 = v16;
          char v66 = *(unsigned char *)(a1 + 65);
          id v29 = v53;
          uint64_t v30 = *(void *)(a1 + 48);
          id v60 = v29;
          uint64_t v64 = v30;
          sub_100013A4C(v58);

          if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) count])
          {
            char v31 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) count];
            sub_10001A558(0, (uint64_t)"cleanup_old_records_with_buid_block_invoke_2", @"Cleaning up %lu old pairing record(s) for BUID %@.", v32, v33, v34, v35, v36, v31);
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            id v37 = *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
            id v38 = [v37 countByEnumeratingWithState:&v54 objects:v69 count:16];
            if (v38)
            {
              id v39 = v38;
              uint64_t v40 = *(void *)v55;
              do
              {
                uint64_t v41 = 0;
                do
                {
                  if (*(void *)v55 != v40) {
                    objc_enumerationMutation(v37);
                  }
                  id v42 = *(id *)(*((void *)&v54 + 1) + 8 * (void)v41);
                  uint64_t v43 = (const char *)[v42 UTF8String];
                  if ((sub_100013E54(v43, v44, v45, v46, v47, v48, v49, v50) & 1) == 0
                    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
                  {
                    sub_100104A54(buf, (uint64_t)v42, &v68);
                  }
                  uint64_t v41 = (char *)v41 + 1;
                }
                while (v39 != v41);
                id v39 = [v37 countByEnumeratingWithState:&v54 objects:v69 count:16];
              }
              while (v39);
            }
          }
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        }
        else
        {
          sub_10001A558(0, (uint64_t)"cleanup_old_records_with_buid_block_invoke", @"Failed to read boot session UUID.", v22, v23, v24, v25, v26, v52);
        }
        return;
      }
      CFStringRef v51 = @"Failed to load automation root cert.";
    }
    else
    {
      CFStringRef v51 = @"Failed to allocate set.";
    }
  }
  else
  {
    CFStringRef v51 = @"Invalid argument.";
  }

  sub_10001A558(0, (uint64_t)"cleanup_old_records_with_buid_block_invoke", (uint64_t)v51, v11, v12, v13, v14, v15, a9);
}

uint64_t sub_100013A4C(void *a1)
{
  uint64_t v1 = a1;
  bzero(v17, 0x400uLL);
  sub_100006D80(v17);
  uint64_t v2 = __strlcat_chk();
  int v3 = opendir(v17);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = readdir(v3);
    if (v5)
    {
      uint64_t v6 = &v17[v2];
      size_t v7 = 1024 - v2;
      while (1)
      {
        d_name = v5->d_name;
        if (strcmp(v5->d_name, "."))
        {
          if (strcmp(d_name, ".."))
          {
            strncpy(v6, d_name, v7);
            if (!v1[2](v1, v17)) {
              break;
            }
          }
        }
        uint64_t v5 = readdir(v4);
        if (!v5) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = 0;
    }
    else
    {
LABEL_8:
      uint64_t v9 = 1;
    }
    closedir(v4);
  }
  else
  {
    __error();
    unint64_t v10 = __error();
    strerror(*v10);
    sub_10001A558(0, (uint64_t)"enumerate_pair_record_paths", @"Failed to open %s: %d (%s)", v11, v12, v13, v14, v15, (char)v17);
    uint64_t v9 = 1;
  }

  return v9;
}

uint64_t sub_100013BDC(uint64_t a1, char *__s1)
{
  uint64_t v4 = *(const char **)(a1 + 56);
  if (!v4 || strncmp(__s1, v4, 0x400uLL))
  {
    CFDictionaryRef v5 = (const __CFDictionary *)sub_10002610C(__s1);
    if (v5)
    {
      CFDictionaryRef v6 = v5;
      CFStringRef Value = CFDictionaryGetValue(v5, @"SystemBUID");
      if (sub_10000FF0C(Value))
      {
        if (*(unsigned char *)(a1 + 80))
        {
          uint64_t v13 = 0;
          goto LABEL_7;
        }
        uint64_t v13 = CFDictionaryGetValue(v6, @"BootSessionWhenCreated");
        uint64_t v14 = sub_10001B06C(v13);
        if (!v14) {
          goto LABEL_8;
        }
        unsigned int v19 = [v13 isEqual:*(void *)(a1 + 32)];

        if (!v19)
        {
LABEL_7:
          uint64_t v14 = 0;
          if (*(unsigned char *)(a1 + 81)) {
            goto LABEL_28;
          }
LABEL_8:
          uint64_t v27 = CFDictionaryGetValue(v6, @"RootCertificate");
          if (!sub_10000FF48(v27)) {
            sub_10001A558(0, (uint64_t)"cleanup_old_records_with_buid_block_invoke", @"Pair record doesn't contain root certificate.", v28, v29, v30, v31, v32, v39);
          }
          if (sub_10000FF48(v27) && CFEqual(*(CFTypeRef *)(a1 + 40), v27))
          {
            sub_10001A558(0, (uint64_t)"cleanup_old_records_with_buid_block_invoke", @"Preserving pair record (%s) because it is an automation record.", v33, v34, v35, v36, v37, (char)__s1);
          }
          else
          {
LABEL_28:
            if (CFEqual(*(CFTypeRef *)(a1 + 72), Value))
            {
              uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
              unint64_t v16 = +[NSString stringWithUTF8String:__s1];
              [v15 addObject:v16];
            }
          }
          goto LABEL_24;
        }
        uint64_t v14 = CFDictionaryGetValue(v6, @"TimeWhenCreated");
        id v20 = sub_10001B0D4(v14);

        if (!v20) {
          goto LABEL_8;
        }
        uint64_t v21 = *(void *)(a1 + 64);
        if (v21 - (uint64_t)[v14 unsignedLongLongValue] > 4) {
          goto LABEL_8;
        }
        sub_10001A558(0, (uint64_t)"cleanup_old_records_with_buid_block_invoke", @"Preserving pair record (%s) which was created less than %d seconds ago.", v22, v23, v24, v25, v26, (char)__s1);
      }
      else
      {
        sub_10001A558(0, (uint64_t)"cleanup_old_records_with_buid_block_invoke", @"Failed to read BUID from pair record (%s). Marking for deletion.", v8, v9, v10, v11, v12, (char)__s1);
        id v17 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        uint64_t v18 = +[NSString stringWithUTF8String:__s1];
        [v17 addObject:v18];

        uint64_t v13 = 0;
        uint64_t v14 = 0;
      }
LABEL_24:
      CFRelease(v6);

      return 1;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
      sub_100104AA0((uint64_t)__s1);
    }
  }
  return 1;
}

uint64_t sub_100013E54(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    char v8 = (char)a1;
    if (!unlink(a1) || *__error() == 2) {
      return 1;
    }
    __error();
    uint64_t v11 = __error();
    strerror(*v11);
    char v12 = v8;
    CFStringRef v10 = @"Failed to delete %s: %d (%s)";
  }
  else
  {
    CFStringRef v10 = @"Invalid argument.";
  }
  sub_10001A558(0, (uint64_t)"delete_file_at_path", (uint64_t)v10, a4, a5, a6, a7, a8, v12);
  return 0;
}

BOOL sub_100013EEC()
{
  int v0 = ACMKernelControl(34);
  int v6 = v0;
  if (v0) {
    sub_10001A558(0, (uint64_t)"resetUSBRMPolicy", @"ACMDRMNotifyTrustedDeviceAttached failed: %d", v1, v2, v3, v4, v5, v0);
  }
  return v6 == 0;
}

uint64_t sub_100013F58(uint64_t a1)
{
  uint64_t v7 = 0;
  char v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  uint64_t v2 = sub_10001362C();
  dispatch_assert_queue_not_V2(v2);

  uint64_t v3 = sub_10001362C();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100014044;
  v6[3] = &unk_100186238;
  v6[4] = &v7;
  v6[5] = a1;
  dispatch_sync(v3, v6);

  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_10001402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100014044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_10000E660(*(void *)(a1 + 40), 0, @"PairRecordProtectionClass", a4, a5, a6, a7, a8) != 4)
  {
    if (!MKBDeviceUnlockedSinceBoot()) {
      return;
    }
    sub_100013A4C(&stru_100186628);
    sub_10000DB80(*(void *)(a1 + 40), 0, @"PairRecordProtectionClass", 4);
    sub_10000D2C8(*(NSObject ***)(a1 + 40), v9, v10, v11, v12, v13, v14, v15, v16);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
}

BOOL sub_1000140C8(id a1, const char *a2)
{
  char v2 = (char)a2;
  int v3 = open(a2, 0);
  if (v3 == -1)
  {
    __error();
    uint64_t v10 = __error();
    strerror(*v10);
    sub_10001A558(0, (uint64_t)"upgradePairRecordProtectionClass_block_invoke_2", @"Failed to load %s while upgrading protection class: %d (%s).", v11, v12, v13, v14, v15, v2);
  }
  else
  {
    int v4 = v3;
    if (fcntl(v3, 64, 4) == -1)
    {
      __error();
      char v16 = __error();
      strerror(*v16);
      sub_10001A558(0, (uint64_t)"upgradePairRecordProtectionClass_block_invoke_2", @"Failed to upgrade %s to protection class %d: %d (%s)", v17, v18, v19, v20, v21, v2);
    }
    else
    {
      sub_10001A558(0, (uint64_t)"upgradePairRecordProtectionClass_block_invoke_2", @"Upgraded pairing record %s to protection class %d.", v5, v6, v7, v8, v9, v2);
    }
    close(v4);
  }
  return 1;
}

uint64_t sub_1000141C0(NSObject **a1)
{
  uint64_t v46 = 0;
  uint64_t v47 = &v46;
  uint64_t v48 = 0x2020000000;
  char v49 = 0;
  char v2 = (void *)sub_10000DF38((uint64_t)a1, 0, @"ProductVersion");
  int v3 = (void *)sub_10000DF38((uint64_t)a1, 0, @"DarkProductVersion");
  uint64_t v9 = v3;
  if (v3 && ([v3 isEqualToString:v2] & 1) != 0)
  {
    id v10 = 0;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"perform_migration", @"Detected upgrade from %@ to %@.", v4, v5, v6, v7, v8, (char)v9);
    if (!v9 || [v9 compare:@"17.0" options:64] == (id)-1)
    {
      id v15 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", "-----BEGIN CERTIFICATE-----\nMIIDPTCCAiWgAwIBAgIBATANBgkqhkiG9w0BAQsFADBOMSkwJwYDVQQDDCBUZXN0\nIEF1dG9tYXRpb24gTG9ja2Rvd24gUm9vdCBDQTEUMBIGA1UECgwLQXBwbGUsIElu\nYy4xCzAJBgNVBAYTAlVTMB4XDTE3MDkyMTAxNDIyN1oXDTE3MDkyMjAxNDIyN1ow\nTjEpMCcGA1UEAwwgVGVzdCBBdXRvbWF0aW9uIExvY2tkb3duIFJvb3QgQ0ExFDAS\nBgNVBAoMC0FwcGxlLCBJbmMuMQswCQYDVQQGEwJVUzCCASIwDQYJKoZIhvcNAQEB\nBQADggEPADCCAQoCggEBALb4vJZBLlbrG9NE7BvAGf0WgNmgeHWKXEwM+HHTHM7x\n0gJunt5R6z+lb8lSH1/lz1VMwPV4mAoShObmLHhiYKfmdbeMzDmeOkGV6bJKNHxU\n854NJPd9e7yQkUlVXrkewsnmhRE1WytgGVpTns1JcKT7bFGiUGIFfX/l8ciLtGXA\nZ8rgeXzl2EUq62rOaNzLkHm1WAiUhWW3MU70MQXKFa3JbhLysa4XHxPqIzdmBe+N\nKHiMT3cLENYMQ/OSiIr1Ssa622+zTTaRHXT+ysc7smrgr2ZKaMY+a+oqJ00AMUJI\nXbEtMjLr5BPQqWPZSTThK2crxUwoTZuLg+PLYbApjrECAwEAAaMmMCQwEgYDVR0T\nAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAqQwDQYJKoZIhvcNAQELBQADggEB\nAD/1Hy7Sf6xE8nWiBy+ioOc7jXwWXNaRQb9lF8yAAFBtzRvkFKyN8LX+1QielIMx\n41Z8XTwv9ibhZF0ETlxZch9wduwL3wwKirBLbvqUJJ5XKW7hlUUXR7MC8trQFWIk\nntGLrtmcKSDWyWHu2eVPjJmQh+v6xetufq0u3TokqE/X+/fpPcu596mYRrovJY8g\np9gFmpAN8E4gqEfQUj9ak8aIces12cnOapL7ZHo0XHltLBBQd+4sLDO7JUlKAi2A\n"
              "SQxevep+SlLsUQYoAvr1CPxGkWuEBj/3oXhmk7EesJjDsnSnloMGoHVxxkRIipvr\n"
              "6TK70j9afDnOjNWRNmXMHLM=\n"
              "-----END CERTIFICATE-----\n",
              1184);
      if (!v15)
      {
        sub_10001A558(0, (uint64_t)"perform_migration", @"Failed to load automation root cert.", v16, v17, v18, v19, v20, v42);
        uint64_t v40 = 0;
        id v10 = 0;
        goto LABEL_14;
      }
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_100014470;
      v43[3] = &unk_100186650;
      id v10 = v15;
      id v44 = v10;
      uint64_t v45 = &v46;
      sub_1000143DC(v43);

      if (!*((unsigned char *)v47 + 24))
      {
        sub_1000145A8(1);
        sub_100029580();
        sub_100012210(1, v26, v27, v28, v29, v30, v31, v32, v42);
      }
      sub_10001A558(0, (uint64_t)"perform_migration", @"Successfully performed upgrade key rolling.", v21, v22, v23, v24, v25, v42);
    }
    else
    {
      id v10 = 0;
    }
    if (v2)
    {
      sub_10000D5A8((uint64_t)a1, 0, @"DarkProductVersion", (uint64_t)v2, v11, v12, v13, v14);
      sub_10000D2C8(a1, v33, v34, v35, v36, v37, v38, v39, v42);
    }
  }
  uint64_t v40 = 1;
LABEL_14:
  _Block_object_dispose(&v46, 8);

  return v40;
}

void sub_1000143C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000143DC(void *a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100014DC4;
  v4[3] = &unk_100186678;
  id v5 = a1;
  id v1 = v5;
  uint64_t v2 = sub_100013A4C(v4);

  return v2;
}

uint64_t sub_100014470(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = v3;
  if (!v3)
  {
    sub_10001A558(0, (uint64_t)"perform_migration_block_invoke", @"Invalid pair record.", v4, v5, v6, v7, v8, v25);
    id v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_10;
  }
  id v10 = [v3 objectForKey:@"RootCertificate"];
  uint64_t v11 = sub_10001B004(v10);

  if (!v11)
  {
    CFStringRef v23 = @"Pair record doesn't contain root certificate.";
LABEL_9:
    sub_10001A558(0, (uint64_t)"perform_migration_block_invoke", (uint64_t)v23, v12, v13, v14, v15, v16, v25);
    goto LABEL_10;
  }
  uint64_t v11 = [v9 objectForKey:@"HostID"];
  uint64_t v17 = sub_10001B06C(v11);

  if (!v17)
  {
    CFStringRef v23 = @"Pair record doesn't contain host id.";
    goto LABEL_9;
  }
  if ([*(id *)(a1 + 32) isEqualToData:v10])
  {
    sub_10001A558(0, (uint64_t)"perform_migration_block_invoke", @"Skipping deletion of automation cert/keys (%@).", v18, v19, v20, v21, v22, (char)v11);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
LABEL_10:

  return 1;
}

void sub_1000145A8(char a1)
{
  uint64_t v2 = sub_10001362C();
  dispatch_assert_queue_not_V2(v2);

  id v3 = sub_10001362C();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100014644;
  block[3] = &unk_100186570;
  char v5 = a1;
  dispatch_sync(v3, block);
}

void sub_100014644(uint64_t a1)
{
  bzero(v11, 0x400uLL);
  bzero(__str, 0x400uLL);
  sub_100006D80(v11);
  snprintf(__str, 0x400uLL, "%s%s", v11, "/Library/Lockdown/pair_records");
  sub_1000269B0((uint64_t)__str);
  if (*(unsigned char *)(a1 + 32)) {
    unlink((const char *)[@"/private/var/root/Library/Lockdown/untrusted_hosts.plist" fileSystemRepresentation]);
  }
  sub_100014760(0, 1, v2, v3, v4, v5, v6, v7);
  char v8 = remotepairing_delete_pair_records();
  id v9 = 0;
  if ((v8 & 1) == 0 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
    sub_100104B20((uint64_t)v9);
  }
  sub_100014C58();
  sub_1000275D0();
}

uint64_t sub_100014760(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v66 = 0;
  uint64_t v67 = &v66;
  uint64_t v68 = 0x3032000000;
  CFDictionaryRef v69 = sub_100013614;
  CFIndex v70 = sub_100013624;
  id v71 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = &v60;
  uint64_t v62 = 0x3032000000;
  unint64_t v63 = sub_100013614;
  uint64_t v64 = sub_100013624;
  id v65 = 0;
  if (!a1 && (a2 & 1) == 0)
  {
    CFStringRef v9 = @"Invalid input.";
LABEL_21:
    sub_10001A558(0, (uint64_t)"deleteSRPPairingRecord", (uint64_t)v9, a4, a5, a6, a7, a8, v43);
    uint64_t v40 = 0;
    dsema = 0;
    dispatch_queue_t v44 = 0;
LABEL_22:
    uint64_t v41 = 0;
    goto LABEL_23;
  }
  dispatch_queue_t v10 = dispatch_queue_create("com.apple.mobilelockdown-srp", 0);
  if (!v10)
  {
    CFStringRef v9 = @"Failed to create dispatch queue.";
    goto LABEL_21;
  }
  dispatch_queue_t v44 = v10;
  dsema = dispatch_semaphore_create(0);
  if (!dsema)
  {
    sub_10001A558(0, (uint64_t)"deleteSRPPairingRecord", @"Failed to create semaphore.", v11, v12, v13, v14, v15, v43);
    uint64_t v40 = 0;
    dsema = 0;
    goto LABEL_22;
  }
  char v49 = a2;
  id v16 = objc_alloc_init((Class)CUPairingManager);
  uint64_t v22 = v16;
  if (!v16)
  {
    sub_10001A558(0, (uint64_t)"deleteSRPPairingRecord", @"Failed to create pairing manager.", v17, v18, v19, v20, v21, v43);
    uint64_t v40 = 0;
    goto LABEL_22;
  }
  [v16 setDispatchQueue:v44];
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_100015924;
  v57[3] = &unk_100186710;
  id v59 = &v66;
  dsema = dsema;
  uint64_t v58 = dsema;
  [v22 getPairedPeersWithOptions:4 completion:v57];
  uint64_t v47 = v22;

  dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id obj = (id)v67[5];
  id v23 = [obj countByEnumeratingWithState:&v53 objects:v76 count:16];
  if (v23)
  {
    uint64_t v24 = *(void *)v54;
    do
    {
      for (CFIndex i = 0; i != v23; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v54 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v26 = *(void **)(*((void *)&v53 + 1) + 8 * i);
        if ((v49 & 1) == 0)
        {
          uint64_t v27 = [*(id *)(*((void *)&v53 + 1) + 8 * i) info];
          uint64_t v28 = [v27 objectForKeyedSubscript:@"HostID"];
          unsigned int v29 = [v28 isEqualToString:a1];

          if (!v29) {
            continue;
          }
        }
        CFStringRef v74 = @"HostID";
        uint64_t v30 = +[NSNull null];
        uint64_t v75 = v30;
        uint64_t v31 = +[NSDictionary dictionaryWithObjects:&v75 forKeys:&v74 count:1];
        [v26 setInfo:v31];

        CFStringRef v72 = @"com.apple.developer";
        uint64_t v32 = +[NSNull null];
        char v73 = v32;
        uint64_t v33 = +[NSDictionary dictionaryWithObjects:&v73 forKeys:&v72 count:1];
        [v26 setAcl:v33];

        v50[0] = _NSConcreteStackBlock;
        v50[1] = 3221225472;
        v50[2] = sub_100015974;
        v50[3] = &unk_1001866E8;
        char v52 = &v60;
        uint64_t v34 = dsema;
        CFStringRef v51 = v34;
        [v47 savePairedPeer:v26 options:4 completion:v50];
        dispatch_semaphore_wait(v34, 0xFFFFFFFFFFFFFFFFLL);
      }
      id v23 = [obj countByEnumeratingWithState:&v53 objects:v76 count:16];
    }
    while (v23);
  }

  if (v61[5])
  {
    sub_10001A558(0, (uint64_t)"deleteSRPPairingRecord", @"Failed to remove SRP pairing record: %@", v35, v36, v37, v38, v39, v61[5]);
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = 1;
  }
  uint64_t v41 = v47;
LABEL_23:
  [v41 invalidate];
  _Block_object_dispose(&v60, 8);

  _Block_object_dispose(&v66, 8);
  return v40;
}

void sub_100014C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_100014C58()
{
  int v0 = sub_10001362C();
  dispatch_assert_queue_V2(v0);

  qword_1001B8070 = 0;
  qword_1001B8068 = 0;
}

void sub_100014C98()
{
  bzero(v13, 0x400uLL);
  bzero(__str, 0x400uLL);
  sub_100006D80(v13);
  snprintf(__str, 0x400uLL, "%s%s", v13, "/Library/Lockdown/device_private_key.pem");
  if (unlink(__str))
  {
    int v0 = __error();
    strerror(*v0);
    sub_10001A558(0, (uint64_t)"destroy_pairing_keypair_pems", @"Failed to delete %s: %s", v1, v2, v3, v4, v5, (char)__str);
  }
  snprintf(__str, 0x400uLL, "%s%s", v13, "/Library/Lockdown/device_public_key.pem");
  if (unlink(__str))
  {
    uint64_t v6 = __error();
    strerror(*v6);
    sub_10001A558(0, (uint64_t)"destroy_pairing_keypair_pems", @"Failed to delete %s: %s", v7, v8, v9, v10, v11, (char)__str);
  }
}

uint64_t sub_100014DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = +[NSString stringWithCString:a2 encoding:4];
  uint64_t v9 = v3;
  if (!v3)
  {
    sub_10001A558(0, (uint64_t)"enumerate_pair_records_block_invoke", @"Failed to create string.", v4, v5, v6, v7, v8, v20);
    goto LABEL_6;
  }
  uint64_t v10 = [v3 pathExtension];
  unsigned int v11 = [v10 isEqualToString:@"plist"];

  if (!v11)
  {
LABEL_6:
    id v17 = 0;
    goto LABEL_7;
  }
  id v17 = [objc_alloc((Class)NSDictionary) initWithContentsOfFile:v9];
  if (!v17) {
    sub_10001A558(0, (uint64_t)"enumerate_pair_records_block_invoke", @"Failed to load %@.", v12, v13, v14, v15, v16, (char)v9);
  }
LABEL_7:
  uint64_t v18 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v18;
}

id sub_100014EB0(const void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v8 = v2;
  if (v2)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100014FA0;
    v14[3] = &unk_1001866A0;
    id v9 = v2;
    id v15 = v9;
    sub_1000143DC(v14);

    if (sub_10000FF0C(a1))
    {
      id v10 = [v9 objectForKeyedSubscript:a1];
    }
    else
    {
      id v10 = v9;
    }
    id v11 = v10;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_paired_host_info", @"Failed to create array.", v3, v4, v5, v6, v7, v13);
    id v11 = 0;
  }

  return v11;
}

uint64_t sub_100014FA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (!v3)
  {
    CFStringRef v18 = @"Invalid pair record.";
LABEL_6:
    sub_10001A558(0, (uint64_t)"copy_paired_host_info_block_invoke", (uint64_t)v18, v4, v5, v6, v7, v8, v20);
    goto LABEL_7;
  }
  uint64_t v10 = [v3 objectForKeyedSubscript:@"HostID"];
  if (!v10)
  {
    CFStringRef v18 = @"Failed to read host ID from pair record.";
    goto LABEL_6;
  }
  id v11 = (void *)v10;
  v21[0] = @"SystemBUID";
  v21[1] = @"HostName";
  v21[2] = @"SerialNumber";
  v21[3] = @"MarketingName";
  v21[4] = @"TimeWhenCreated";
  v21[5] = @"WallTimeWhenCreated";
  uint64_t v12 = +[NSArray arrayWithObjects:v21 count:6];
  char v13 = [v9 dictionaryWithValuesForKeys:v12];
  id v14 = [v13 mutableCopy];

  id v15 = +[NSNull null];
  uint64_t v16 = [v14 allKeysForObject:v15];
  [v14 removeObjectsForKeys:v16];

  id v17 = [v14 copy];
  [*(id *)(a1 + 32) setObject:v17 forKeyedSubscript:v11];

LABEL_7:
  return 1;
}

CFBooleanRef sub_100015140(const __CFString *a1)
{
  CFBooleanRef v2 = kCFBooleanFalse;
  uint64_t CString = (uint64_t)sub_10000FF0C(a1);
  if (!CString)
  {
    CFStringRef v9 = @"Invalid input.";
LABEL_8:
    sub_10001A558(CString, (uint64_t)"copy_pair_record_exists", (uint64_t)v9, v4, v5, v6, v7, v8, v11);
    return v2;
  }
  memset(&v12, 0, sizeof(v12));
  uint64_t CString = CFStringGetCString(a1, buffer, 1024, 0x8000100u);
  if (!CString)
  {
    CFStringRef v9 = @"Failed to create C string.";
    goto LABEL_8;
  }
  sub_100006D80(v14);
  snprintf(__str, 0x400uLL, "%s%s/%s.plist", v14, "/Library/Lockdown/pair_records", buffer);
  if (!stat(__str, &v12)) {
    return kCFBooleanTrue;
  }
  return v2;
}

uint64_t sub_100015268(const __CFString *a1)
{
  bzero(buffer, 0x400uLL);
  bzero(v17, 0x400uLL);
  bzero(__str, 0x400uLL);
  uint64_t CString = CFStringGetCString(a1, buffer, 1024, 0x8000100u);
  if (!CString)
  {
    CFStringRef v14 = @"Failed to create C string.";
LABEL_7:
    sub_10001A558(CString, (uint64_t)"load_pair_record", (uint64_t)v14, v3, v4, v5, v6, v7, v15);
    return 0;
  }
  sub_100026594(buffer);
  if (!(*(unsigned __int16 *)buffer ^ 0x2E2E | v19))
  {
    CFStringRef v14 = @"Invalid host ID.";
    uint64_t CString = 0;
    goto LABEL_7;
  }
  sub_100006D80(v17);
  snprintf(__str, 0x400uLL, "%s%s/%s.plist", v17, "/Library/Lockdown/pair_records", buffer);
  uint64_t result = sub_10002610C(__str);
  if (result) {
    return result;
  }
  sub_10001A558(0, (uint64_t)"load_pair_record", @"Failed to load %s.", v9, v10, v11, v12, v13, (char)__str);
  return 0;
}

void sub_1000153B0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_10001362C();
  dispatch_assert_queue_not_V2(v4);

  uint64_t v5 = sub_10001362C();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001545C;
  v6[3] = &unk_1001866C0;
  v6[4] = a1;
  char v7 = a2;
  dispatch_sync(v5, v6);
}

void sub_10001545C(uint64_t a1)
{
  bzero(buffer, 0x400uLL);
  bzero(v18, 0x400uLL);
  bzero(__str, 0x400uLL);
  uint64_t CString = CFStringGetCString(*(CFStringRef *)(a1 + 32), buffer, 1024, 0x8000100u);
  if (!CString)
  {
    CFStringRef v15 = @"Failed to create C string.";
LABEL_12:
    sub_10001A558(CString, (uint64_t)"destroy_pair_record_block_invoke", (uint64_t)v15, v3, v4, v5, v6, v7, (char)v16);
    return;
  }
  sub_100026594(buffer);
  if (!(*(unsigned __int16 *)buffer ^ 0x2E2E | v20))
  {
    CFStringRef v15 = @"Invalid host ID.";
LABEL_11:
    uint64_t CString = 0;
    goto LABEL_12;
  }
  sub_100006D80(v18);
  snprintf(__str, 0x400uLL, "%s%s/%s.plist", v18, "/Library/Lockdown/pair_records", buffer);
  if ((sub_100013E54(__str, v8, v9, v10, v11, v12, v13, v14) & 1) == 0)
  {
    uint64_t v16 = __str;
    CFStringRef v15 = @"Failed to remove record (%s)";
    goto LABEL_11;
  }
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"destroy_pair_record_block_invoke", @"Deleted pair record (%s).", v3, v4, v5, v6, v7, (char)__str);
  }
  sub_1000275D0();
  if (*(unsigned char *)(a1 + 40)) {
    sub_100014C58();
  }
}

uint64_t sub_1000155E4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v10 = v4;
  uint64_t v50 = 0;
  CFStringRef v51 = &v50;
  uint64_t v52 = 0x3032000000;
  long long v53 = sub_100013614;
  long long v54 = sub_100013624;
  id v55 = 0;
  CFStringRef v11 = @"Invalid input.";
  if (!v3 || !v4) {
    goto LABEL_10;
  }
  dispatch_queue_t v12 = dispatch_queue_create("com.apple.mobilelockdown-srp", 0);
  if (!v12)
  {
    CFStringRef v11 = @"Failed to create dispatch queue.";
LABEL_10:
    sub_10001A558(0, (uint64_t)"updateSRPPairingRecord", (uint64_t)v11, v5, v6, v7, v8, v9, v46);
    dispatch_queue_t v13 = 0;
LABEL_11:
    unsigned __int8 v20 = 0;
LABEL_12:
    uint64_t v44 = 0;
    id v24 = 0;
LABEL_13:
    uint64_t v37 = 0;
    goto LABEL_14;
  }
  dispatch_queue_t v13 = v12;
  dispatch_semaphore_t v14 = dispatch_semaphore_create(0);
  if (!v14)
  {
    sub_10001A558(0, (uint64_t)"updateSRPPairingRecord", @"Failed to create semaphore.", v15, v16, v17, v18, v19, v46);
    goto LABEL_11;
  }
  unsigned __int8 v20 = v14;
  id v21 = objc_alloc((Class)NSMutableDictionary);
  uint64_t v22 = [v3 pairedPeer];
  id v23 = [v22 info];
  id v24 = [v21 initWithDictionary:v23];

  if (!v24)
  {
    sub_10001A558(0, (uint64_t)"updateSRPPairingRecord", @"Failed to copy peer info.", v25, v26, v27, v28, v29, v46);
    goto LABEL_12;
  }
  [v24 addEntriesFromDictionary:v10];
  uint64_t v30 = [v3 pairedPeer];
  [v30 setInfo:v24];

  id v31 = objc_alloc_init((Class)CUPairingManager);
  uint64_t v37 = v31;
  if (!v31)
  {
    sub_10001A558(0, (uint64_t)"updateSRPPairingRecord", @"Failed to create pairing manager.", v32, v33, v34, v35, v36, v46);
    uint64_t v44 = 0;
    goto LABEL_13;
  }
  [v31 setDispatchQueue:v13];
  uint64_t v38 = [v3 pairedPeer];
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472;
  v47[2] = sub_1000158D4;
  v47[3] = &unk_1001866E8;
  char v49 = &v50;
  unsigned __int8 v20 = v20;
  uint64_t v48 = v20;
  [v37 savePairedPeer:v38 options:4 completion:v47];

  dispatch_semaphore_wait(v20, 0xFFFFFFFFFFFFFFFFLL);
  if (v51[5])
  {
    sub_10001A558(0, (uint64_t)"updateSRPPairingRecord", @"Failed to update SRP pairing record: %@", v39, v40, v41, v42, v43, v51[5]);
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v44 = 1;
  }
LABEL_14:
  [v37 invalidate];
  _Block_object_dispose(&v50, 8);

  return v44;
}

void sub_1000158BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1000158D4(uint64_t a1, void *a2)
{
  id v3 = [a2 copy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v6);
}

intptr_t sub_100015924(uint64_t a1, void *a2)
{
  id v3 = [a2 copy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v6);
}

intptr_t sub_100015974(uint64_t a1, void *a2)
{
  id v3 = [a2 copy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v6);
}

uint64_t sub_1000159C4(uint64_t a1, const __CFDictionary *a2, void *a3, void *a4, void *a5)
{
  uint64_t v77 = 0;
  uint64_t v78 = &v77;
  uint64_t v79 = 0x2020000000;
  int v80 = -1;
  sub_100006D80(v84);
  __snprintf_chk(v83, 0x400uLL, 0, 0x400uLL, "%s%s", v84, "/Library/Lockdown/pair_records");
  if (mkdir(v83, 0x1EDu) && *__error() != 17)
  {
    __error();
    uint64_t v25 = __error();
    strerror(*v25);
    sub_10001A558(0, (uint64_t)"store_pair_record", @"Failed to create %s : %d (%s)", v26, v27, v28, v29, v30, (char)v83);
LABEL_10:
    id v31 = 0;
    a3 = 0;
    id v14 = 0;
LABEL_12:
    a5 = 0;
    a4 = 0;
LABEL_13:
    uint64_t v32 = 0xFFFFFFFFLL;
    goto LABEL_14;
  }
  id v14 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:a2];
  if (!v14)
  {
    sub_10001A558(0, (uint64_t)"store_pair_record", @"Failed to create dictionary.", v9, v10, v11, v12, v13, v71);
    goto LABEL_10;
  }
  CFStringRef Value = CFDictionaryGetValue(a2, @"HostID");
  CFStringRef v16 = (const __CFString *)sub_10000FF0C(Value);
  uint64_t CString = CFStringGetCString(v16, buffer, 1024, 0x8000100u);
  if (!CString)
  {
    sub_10001A558(CString, (uint64_t)"store_pair_record", @"Failed to create C string.", v18, v19, v20, v21, v22, v71);
    id v31 = 0;
    a3 = 0;
    goto LABEL_12;
  }
  if (a3)
  {
    id v23 = a3;
    if ((unint64_t)[v23 length] > 0x3E) {
      uint64_t v24 = 63;
    }
    else {
      uint64_t v24 = (uint64_t)[v23 length];
    }
    id v34 = [v23 rangeOfComposedCharacterSequencesForRange:0, v24];
    a3 = [v23 substringWithRange:v34, v35];

    [v14 setObject:a3 forKeyedSubscript:@"HostName"];
  }
  if (a4)
  {
    id v36 = a4;
    if ((unint64_t)[v36 length] > 0x3E) {
      uint64_t v37 = 63;
    }
    else {
      uint64_t v37 = (uint64_t)[v36 length];
    }
    id v38 = [v36 rangeOfComposedCharacterSequencesForRange:0, v37];
    a4 = [v36 substringWithRange:v38, v39];

    [v14 setObject:a4 forKeyedSubscript:@"SerialNumber"];
  }
  if (a5)
  {
    id v40 = a5;
    if ((unint64_t)[v40 length] > 0x3E) {
      uint64_t v41 = 63;
    }
    else {
      uint64_t v41 = (uint64_t)[v40 length];
    }
    id v42 = [v40 rangeOfComposedCharacterSequencesForRange:0, v41];
    a5 = [v40 substringWithRange:v42, v43];

    [v14 setObject:a5 forKeyedSubscript:@"MarketingName"];
  }
  uint64_t v44 = +[NSNumber numberWithUnsignedLongLong:sub_100027124()];
  [v14 setObject:v44 forKeyedSubscript:@"TimeWhenCreated"];

  uint64_t v45 = +[NSNumber numberWithLong:sub_1000271A0()];
  [v14 setObject:v45 forKeyedSubscript:@"WallTimeWhenCreated"];

  id v31 = sub_1000271D0();
  if (!v31)
  {
    sub_10001A558(0, (uint64_t)"store_pair_record", @"Failed to read boot session UUID.", v46, v47, v48, v49, v50, v71);
    id v31 = 0;
    goto LABEL_13;
  }
  [v14 setObject:v31 forKeyedSubscript:@"BootSessionWhenCreated"];
  sub_100026594(buffer);
  if (!(*(unsigned __int16 *)buffer ^ 0x2E2E | v82))
  {
    sub_10001A558(0, (uint64_t)"store_pair_record", @"Invalid host ID.", v51, v52, v53, v54, v55, v71);
    goto LABEL_13;
  }
  __snprintf_chk(v83, 0x400uLL, 0, 0x400uLL, "%s%s/%s.plist", v84, "/Library/Lockdown/pair_records", buffer);
  long long v56 = sub_10001362C();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100015F80;
  block[3] = &unk_100186738;
  uint64_t v75 = &v77;
  int v76 = v83;
  id v14 = v14;
  id v74 = v14;
  dispatch_sync(v56, block);

  if (*((_DWORD *)v78 + 6) == -1)
  {
    sub_10001A558(0, (uint64_t)"store_pair_record", @"Failed to store %s.", v57, v58, v59, v60, v61, (char)v83);
    goto LABEL_13;
  }
  CFNumberRef v62 = sub_1000075D8();
  if (sub_10000FE58(v62))
  {
    if (sub_100003F08(v16, v62, v63, v64, v65, v66, v67, v68))
    {
      CFDictionaryRef v69 = CFDictionaryGetValue(a2, @"SystemBUID");
      if (sub_10000FF0C(v69))
      {
        sub_100015FB8((uint64_t)v69);
        sub_1000134A4((uint64_t)v69, 0, 0, (uint64_t)v83);
      }
      sub_1000275D0();
      uint64_t v32 = 0;
      goto LABEL_41;
    }
    CFStringRef v70 = @"Failed to store pair record initial expiration.";
  }
  else
  {
    CFStringRef v70 = @"Failed to create bowie.";
  }
  sub_10001A558(0, (uint64_t)"store_pair_record", (uint64_t)v70, v64, v65, v66, v67, v68, v72);
  sub_1000153B0((uint64_t)v16, 0);
  uint64_t v32 = 0xFFFFFFFFLL;
LABEL_41:
  if (v62) {
    CFRelease(v62);
  }
LABEL_14:

  _Block_object_dispose(&v77, 8);
  return v32;
}

void sub_100015F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100015F80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_100025ED4(a1[6], a1[4], a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = result;
  return result;
}

void sub_100015FB8(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x3032000000;
  v5[3] = sub_100013614;
  v5[4] = sub_100013624;
  id v6 = 0;
  CFBooleanRef v2 = sub_10001362C();
  dispatch_assert_queue_not_V2(v2);

  if (a1)
  {
    id v3 = sub_10001362C();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100018F64;
    v4[3] = &unk_100186238;
    void v4[4] = v5;
    v4[5] = a1;
    dispatch_sync(v3, v4);
  }
  _Block_object_dispose(v5, 8);
}

void sub_1000160AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000160C4(const __CFDictionary *a1)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"HostID");
  if (sub_10000FF0C(Value))
  {
    CFUUIDRef v7 = CFUUIDCreateFromString(kCFAllocatorDefault, Value);
    if (v7)
    {
      CFUUIDRef v8 = v7;
      CFStringRef v9 = CFUUIDCreateString(kCFAllocatorDefault, v7);
      if (!v9)
      {
        sub_10001A558(0, (uint64_t)"verify_pair_record", @"Failed to create string host ID from UUID.", v10, v11, v12, v13, v14, v43);
        uint64_t v22 = 0xFFFFFFFFLL;
LABEL_26:
        CFRelease(v8);
        return v22;
      }
      CFStringRef v15 = v9;
      uint64_t v16 = CFEqual(v9, Value);
      if (v16)
      {
        uint64_t v22 = 0;
LABEL_25:
        CFRelease(v15);
        goto LABEL_26;
      }
      sub_10001A558(v16, (uint64_t)"verify_pair_record", @"The strings don't match. Is this really a UUID?", v17, v18, v19, v20, v21, v43);
      CFIndex Length = CFStringGetLength(Value);
      uint64_t v25 = (char *)malloc_type_malloc(Length + 1, 0x4F2D6056uLL);
      if (!v25)
      {
        sub_10001A558(0, (uint64_t)"verify_pair_record", @"Failed to allocate buffer.", v26, v27, v28, v29, v30, v44);
        uint64_t v22 = 0xFFFFFFFFLL;
        goto LABEL_25;
      }
      id v31 = v25;
      if (CFStringGetCString(Value, v25, Length + 1, 0x8000100u))
      {
        if (Length < 1)
        {
LABEL_20:
          uint64_t v22 = 0;
LABEL_24:
          free(v31);
          goto LABEL_25;
        }
        CFStringRef v37 = @"This host ID is not valid.";
        id v38 = v31;
        while (1)
        {
          int v39 = *v38++;
          unsigned int v40 = v39 - 58;
          if (v39 != 45 && v40 <= 0xFFFFFFF5) {
            break;
          }
          if (!--Length) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        CFStringRef v37 = @"Failed to convert host ID to C string.";
      }
      sub_10001A558(0, (uint64_t)"verify_pair_record", (uint64_t)v37, v32, v33, v34, v35, v36, v44);
      uint64_t v22 = 0xFFFFFFFFLL;
      goto LABEL_24;
    }
    CFStringRef v23 = @"Failed to create UUID from host ID.";
  }
  else
  {
    CFStringRef v23 = @"Pair record is missing the host ID.";
  }
  sub_10001A558(0, (uint64_t)"verify_pair_record", (uint64_t)v23, v2, v3, v4, v5, v6, v43);
  return 0xFFFFFFFFLL;
}

void sub_100016280()
{
  int v0 = sub_10001362C();
  dispatch_assert_queue_not_V2(v0);

  uint64_t v1 = sub_10001362C();
  dispatch_sync(v1, &stru_100186758);
}

void sub_1000162E4(id a1)
{
  if (qword_1001B8038)
  {
    CFUserNotificationCancel((CFUserNotificationRef)qword_1001B8038);
    if (qword_1001B8038) {
      CFRelease((CFTypeRef)qword_1001B8038);
    }
    qword_1001B8038 = 0;
  }
  if (qword_1001B8040)
  {
    CFUserNotificationCancel((CFUserNotificationRef)qword_1001B8040);
    if (qword_1001B8040) {
      CFRelease((CFTypeRef)qword_1001B8040);
    }
    qword_1001B8040 = 0;
  }
}

void sub_10001634C(char a1)
{
  uint64_t v2 = sub_10001362C();
  dispatch_assert_queue_V2(v2);

  byte_1001B8048 = a1;
}

uint64_t sub_100016388()
{
  int v0 = sub_10001362C();
  dispatch_assert_queue_V2(v0);

  return byte_1001B8048;
}

void sub_1000163C0()
{
  int v0 = sub_10001362C();
  dispatch_async(v0, &stru_100186778);
}

void sub_100016408(id a1)
{
  if (sub_100016388())
  {
    sub_10001A558(0, (uint64_t)"trigger_host_pair", @"Notifying host to pair.", v1, v2, v3, v4, v5, vars0);
    notify_post("com.apple.mobile.lockdown.request_pair");
    sub_10001634C(0);
  }
}

uint64_t sub_100016464()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  int v0 = sub_10001362C();
  dispatch_assert_queue_not_V2(v0);

  uint64_t v1 = sub_10001362C();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100016544;
  block[3] = &unk_1001861C8;
  void block[4] = &v5;
  dispatch_sync(v1, block);

  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_10001652C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100016544(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = byte_1001B8049;
  return result;
}

void sub_10001655C(char a1)
{
  uint64_t v2 = sub_10001362C();
  dispatch_assert_queue_not_V2(v2);

  uint64_t v3 = sub_10001362C();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000165F8;
  block[3] = &unk_100186570;
  char v5 = a1;
  dispatch_sync(v3, block);
}

void sub_1000165F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0)
  {
    if (*(unsigned char *)(a1 + 32)) {
      CFStringRef v9 = "mux";
    }
    else {
      CFStringRef v9 = "non-mux";
    }
    sub_10001A558(0, (uint64_t)"usb_host_connected_block_invoke", @"%s connection", a4, a5, a6, a7, a8, (char)v9);
  }
  byte_1001B8049 = 1;
  byte_1001B804A = 0;
  byte_1001B8048 = 0;
  if ([(id)qword_1001B8030 count] && objc_msgSend((id)qword_1001B8030, "count"))
  {
    unsigned int v10 = 1;
    do
    {
      uint64_t v11 = [(id)qword_1001B8030 lastObject];
      dispatch_group_leave(v11);

      [(id)qword_1001B8030 removeLastObject];
    }
    while ((unint64_t)[(id)qword_1001B8030 count] > v10++);
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((byte_1001B804B & 1) == 0) {
      byte_1001B804B = 1;
    }
    if (!qword_1001B8050)
    {
      uint64_t v13 = os_transaction_create();
      uint64_t v14 = (void *)qword_1001B8050;
      qword_1001B8050 = v13;
    }
  }
  int v15 = MKBGetDeviceLockState();
  if ((v15 == 3 || !v15) && !sub_100013EEC()) {
    sub_10001A558(0, (uint64_t)"usb_host_connected_block_invoke", @"Failed to reset USB RM policy.", v16, v17, v18, v19, v20, v21);
  }

  sub_100016764();
}

void sub_100016764()
{
  int v0 = sub_10001362C();
  dispatch_assert_queue_V2(v0);

  uint64_t v6 = qword_1001B6AC8 + 1;
  if (qword_1001B6AC8 == -1) {
    uint64_t v6 = 2;
  }
  qword_1001B6AC8 = v6;
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"bump_connection_count", @"Connection count is now %llu.", v1, v2, v3, v4, v5, v6);
  }
}

void sub_1000167E0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_10001362C();
  dispatch_assert_queue_not_V2(v4);

  uint64_t v5 = sub_10001362C();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001688C;
  v6[3] = &unk_1001866C0;
  char v7 = a2;
  v6[4] = a1;
  dispatch_sync(v5, v6);
}

void sub_10001688C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0)
  {
    if (*(unsigned char *)(a1 + 40)) {
      CFStringRef v9 = "mux";
    }
    else {
      CFStringRef v9 = "non-mux";
    }
    sub_10001A558(0, (uint64_t)"usb_host_disconnected_block_invoke", @"%s", a4, a5, a6, a7, a8, (char)v9);
  }
  [(id)qword_1001B8028 invalidate];
  if (qword_1001B8038)
  {
    CFUserNotificationCancel((CFUserNotificationRef)qword_1001B8038);
    if (qword_1001B8038) {
      CFRelease((CFTypeRef)qword_1001B8038);
    }
    qword_1001B8038 = 0;
  }
  if (qword_1001B8040)
  {
    CFUserNotificationCancel((CFUserNotificationRef)qword_1001B8040);
    if (qword_1001B8040) {
      CFRelease((CFTypeRef)qword_1001B8040);
    }
    qword_1001B8040 = 0;
  }
  sub_10000DF4C(*(void *)(a1 + 32), 0, @"UntrustedHostBUID", 0, v10, v11, v12, v13);
  uint64_t v14 = (void *)qword_1001B8058;
  qword_1001B8058 = 0;

  byte_1001B8049 = 0;
  byte_1001B804A = 0;
  byte_1001B8048 = 0;
  if ([(id)qword_1001B8030 count] && objc_msgSend((id)qword_1001B8030, "count"))
  {
    unsigned int v15 = 1;
    do
    {
      uint64_t v16 = [(id)qword_1001B8030 lastObject];
      dispatch_group_leave(v16);

      [(id)qword_1001B8030 removeLastObject];
    }
    while ((unint64_t)[(id)qword_1001B8030 count] > v15++);
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if (byte_1001B804B == 1) {
      byte_1001B804B = 0;
    }
    uint64_t v18 = (void *)qword_1001B8050;
    if (qword_1001B8050)
    {
      qword_1001B8050 = 0;
    }
  }

  sub_100016764();
}

void sub_100016A28(uint64_t a1)
{
  uint64_t v2 = sub_10001362C();
  dispatch_assert_queue_not_V2(v2);

  uint64_t v3 = sub_10001362C();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100016AC4;
  block[3] = &unk_100185E60;
  void block[4] = a1;
  dispatch_sync(v3, block);
}

id sub_100016AC4(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (result)
  {
    id v2 = [result copy];
    uint64_t v3 = (void *)qword_1001B8058;
    qword_1001B8058 = (uint64_t)v2;

    id result = [(id)qword_1001B8030 count];
    if (result)
    {
      id result = [(id)qword_1001B8030 count];
      if (result)
      {
        unsigned int v4 = 1;
        do
        {
          uint64_t v5 = [(id)qword_1001B8030 lastObject];
          dispatch_group_leave(v5);

          [(id)qword_1001B8030 removeLastObject];
          id result = [(id)qword_1001B8030 count];
        }
        while ((unint64_t)result > v4++);
      }
    }
  }
  return result;
}

void sub_100016B58(const __CFDictionary *a1)
{
  if (a1)
  {
    CFStringRef Value = CFDictionaryGetValue(a1, @"SystemBUID");
    sub_100016A28((uint64_t)Value);
  }
}

uint64_t sub_100016B90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  CFStringRef v16 = @"UserDeniedPairing";
  char v8 = sub_10001362C();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100016C78;
  block[3] = &unk_100186868;
  void block[4] = &v13;
  void block[5] = a1;
  block[6] = a2;
  block[7] = a3;
  char v12 = a4;
  dispatch_sync(v8, block);

  uint64_t v9 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_100016C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v88 = 0;
  uint64_t v89 = &v88;
  uint64_t v90 = 0x3032000000;
  uint64_t v91 = sub_100013614;
  CFStringRef v92 = sub_100013624;
  id v93 = 0;
  uint64_t v84 = 0;
  CFLocaleIdentifier v85 = &v84;
  uint64_t v86 = 0x2020000000;
  uint64_t v87 = 0;
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v9)
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"NULL connection state.", a4, a5, a6, a7, a8, v71);
    dispatch_semaphore_t v14 = 0;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = @"InvalidConnection";
    goto LABEL_21;
  }
  uint64_t v10 = *(void *)v9;
  int v11 = *(_DWORD *)(v9 + 16);
  char v12 = *(const void **)(a1 + 48);
  if (v12) {
    BOOL v13 = CFEqual(v12, @"com.apple.SystemConfiguration.InterfaceNamer") != 0;
  }
  else {
    BOOL v13 = 0;
  }
  uint64_t v15 = (const void *)sub_10000DF38(v10, 0, @"ActivationState");
  CFStringRef v16 = v15;
  if (v15 && CFEqual(v15, @"FactoryActivated")) {
    goto LABEL_10;
  }
  if (MKBUserSessionIsLoginWindow())
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"At LOGIN window. Defaulting to allow pair.", v17, v18, v19, v20, v21, v71);
    goto LABEL_10;
  }
  if ((byte_1001B8049 & 1) == 0 && v11 != 2)
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"USB or proxy host no longer connected.", v17, v18, v19, v20, v21, v71);
    CFMutableDictionaryRef Mutable = 0;
    dispatch_semaphore_t v14 = 0;
    CFStringRef v23 = off_100187930;
LABEL_25:
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v23;
    goto LABEL_17;
  }
  if (qword_1001B8060 && qword_1001B8060 == qword_1001B6AC8)
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"Denying pair from connection %llu since we're still on that connection.", v17, v18, v19, v20, v21, qword_1001B8060);
    goto LABEL_15;
  }
  if (qword_1001B8068)
  {
    unint64_t v24 = sub_100027124();
    v85[3] = v24;
    if (qword_1001B8068 == qword_1001B6AC8)
    {
      sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"Allowing pairing from connection %llu since we're still on that connection.", v25, v26, v27, v28, v29, qword_1001B8068);
      goto LABEL_10;
    }
    if (v24 - qword_1001B8070 <= 9)
    {
      sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"Allowing pairing from connnection %llu since only %llu seconds have elapsed since the user said trust from connection %llu.", v25, v26, v27, v28, v29, v24 - qword_1001B8070);
LABEL_10:
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      if (*(unsigned char *)(a1 + 64) && v11 != 2) {
        sub_10001634C(1);
      }
      if (!v13) {
        sub_100010480(@"com.apple.mobile.lockdown.trusted_ptp_attached");
      }
      goto LABEL_15;
    }
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"Ignoring user-allowed pairing from connection %llu since %llu seconds have elapsed since the user said trust from connection %llu.", v25, v26, v27, v28, v29, v24 - qword_1001B8070);
    sub_100014C58();
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = @"PairingDialogResponsePending";
  if (!qword_1001B8038)
  {
    if (v13)
    {
      CFMutableDictionaryRef Mutable = 0;
      dispatch_semaphore_t v14 = 0;
      CFStringRef v23 = off_100187900;
      goto LABEL_25;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      value = (void *)sub_100027284(@"TRUST_DIALOG_HEADER");
      uint64_t v35 = *(void **)(a1 + 56);
      if (v35)
      {
        id v36 = v35;
        if ((unint64_t)[v36 length] > 0x3E) {
          uint64_t v37 = 63;
        }
        else {
          uint64_t v37 = (uint64_t)[v36 length];
        }
        id v39 = [v36 rangeOfComposedCharacterSequencesForRange:0, v37];
        char v73 = [v36 substringWithRange:v39, v40];

        uint64_t v41 = (void *)sub_100027284(@"TRUST_DIALOG_MESSAGE_DETAILED");
        char v71 = (char)v73;
        id v38 = +[NSString stringWithValidatedFormat:v41 validFormatSpecifiers:@"%@" error:0];

        if (!v38)
        {
          sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"Failed to validate format string.", v42, v43, v44, v45, v46, (char)v73);

          goto LABEL_16;
        }
      }
      else
      {
        id v38 = (void *)sub_100027284(@"TRUST_DIALOG_MESSAGE");
        char v73 = 0;
      }
      uint64_t v47 = (void *)sub_100027284(@"TRUST_DIALOG_DENY_TRUST");
      uint64_t v48 = (void *)sub_100027284(@"TRUST_DIALOG_ALLOW_TRUST");
      CFDictionarySetValue(Mutable, kCFUserNotificationAlertHeaderKey, value);
      CFDictionarySetValue(Mutable, kCFUserNotificationAlertMessageKey, v38);
      CFDictionarySetValue(Mutable, kCFUserNotificationDefaultButtonTitleKey, v47);
      CFDictionarySetValue(Mutable, kCFUserNotificationAlternateButtonTitleKey, v48);
      CFDictionarySetValue(Mutable, SBUserNotificationAlternateButtonPresentationStyleKey, &off_1001A88C8);
      CFDictionarySetValue(Mutable, SBUserNotificationDefaultButtonPresentationStyleKey, &off_1001A88E0);
      CFDictionarySetValue(Mutable, SBUserNotificationAllowInSetupKey, kCFBooleanTrue);
      CFDictionarySetValue(Mutable, SBUserNotificationPendWhileKeyBagLockedKey, kCFBooleanTrue);

      sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"Asking the user if they want to pair.", v49, v50, v51, v52, v53, v71);
      dispatch_semaphore_t v54 = dispatch_semaphore_create(0);
      if (v54)
      {
        dispatch_semaphore_t v14 = v54;
        CFUserNotificationRef v65 = CFUserNotificationCreate(0, 0.0, 3uLL, 0, Mutable);
        if (v65)
        {
          sub_100010480(@"com.apple.mobile.lockdown.open_trust_dialog");
          qword_1001B8038 = (uint64_t)v65;
          CFRetain(v65);
          uint64_t v66 = qword_1001B6AC8;
          uint64_t v67 = os_transaction_create();
          uint64_t v68 = (void *)v89[5];
          v89[5] = v67;

          CFDictionaryRef v69 = dispatch_get_global_queue(0, 0);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000173B4;
          block[3] = &unk_100186840;
          CFUserNotificationRef v80 = v65;
          uint64_t v81 = v66;
          uint64_t v77 = &v84;
          char v83 = 0;
          dispatch_semaphore_t v14 = v14;
          uint64_t v70 = *(void *)(a1 + 32);
          dispatch_semaphore_t v76 = v14;
          uint64_t v82 = v10;
          uint64_t v78 = v70;
          uint64_t v79 = &v88;
          dispatch_async(v69, block);
        }
        else
        {
          sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"Failed to create user notification.", v60, v61, v62, v63, v64, v72);
        }
        goto LABEL_17;
      }
      sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"Failed to create semaphore.", v55, v56, v57, v58, v59, v72);
      goto LABEL_16;
    }
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke", @"Failed to create dictionary.", v30, v31, v32, v33, v34, v71);
  }
LABEL_15:
  CFMutableDictionaryRef Mutable = 0;
LABEL_16:
  dispatch_semaphore_t v14 = 0;
LABEL_17:
  if (v16) {
    CFRelease(v16);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_21:
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(&v88, 8);
}

void sub_100017384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1000173B4(uint64_t a1)
{
  CFOptionFlags responseFlags = 0;
  SInt32 v2 = CFUserNotificationReceiveResponse(*(CFUserNotificationRef *)(a1 + 64), 0.0, &responseFlags);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_100027124();
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x2020000000;
  char v28 = 0;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  char v26 = 0;
  uint64_t v3 = sub_10001362C();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100017584;
  block[3] = &unk_1001867F0;
  SInt32 v23 = v2;
  uint64_t v21 = *(void *)(a1 + 72);
  CFOptionFlags v22 = responseFlags;
  uint64_t v19 = v25;
  char v24 = *(unsigned char *)(a1 + 88);
  long long v8 = *(_OWORD *)(a1 + 32);
  id v4 = (id)v8;
  long long v18 = v8;
  uint64_t v20 = v27;
  dispatch_sync(v3, block);

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v5 = sub_10001362C();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100017B98;
  v9[3] = &unk_100186818;
  v9[4] = v27;
  long long v10 = *(_OWORD *)(a1 + 40);
  char v16 = *(unsigned char *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = v6;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  int v11 = v25;
  uint64_t v12 = v7;
  dispatch_sync(v5, v9);

  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v27, 8);
}

void sub_100017584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(_DWORD *)(a1 + 80);
  if (v9)
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke_3", @"CFUserNotificationReceiveResponse returned %ld at time %llu connection %llu.", a4, a5, a6, a7, a8, v9);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 72) & 3;
    if (v10 == 1 && MKBGetDeviceLockState() - 1 <= 1)
    {
      uint64_t v26 = 0;
      uint64_t v27 = &v26;
      uint64_t v28 = 0x3032000000;
      uint64_t v29 = sub_100013614;
      uint64_t v30 = sub_100013624;
      id v31 = 0;
      uint64_t v11 = os_transaction_create();
      uint64_t v12 = (void *)v27[5];
      v27[5] = v11;

      uint64_t v13 = dispatch_get_global_queue(0, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000177B8;
      block[3] = &unk_1001861C8;
      void block[4] = &v26;
      dispatch_async(v13, block);

      _Block_object_dispose(&v26, 8);
      LODWORD(v10) = 3;
    }
    uint64_t v14 = dispatch_get_global_queue(0, 0);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10001786C;
    v18[3] = &unk_1001867C8;
    int v23 = v10;
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v22 = *(void *)(a1 + 64);
    uint64_t v20 = v15;
    char v24 = *(unsigned char *)(a1 + 84);
    long long v17 = *(_OWORD *)(a1 + 32);
    id v16 = (id)v17;
    long long v19 = v17;
    uint64_t v21 = *(void *)(a1 + 56);
    dispatch_async(v14, v18);
  }
}

void sub_1000177A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000177B8(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)sub_100027284(@"TRUST_FAILED_HEADER");
  CFStringRef v3 = (const __CFString *)sub_100027284(@"TRUST_FAILED_TEXT");
  CFUserNotificationDisplayNotice(0.0, 2uLL, 0, 0, 0, v2, v3, 0);
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;
}

void sub_10001786C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(_DWORD *)(a1 + 72);
  if (v9 == 3)
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke_5", @"The notification was cancelled at time %llu connection %llu.", a4, a5, a6, a7, a8, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    goto LABEL_11;
  }
  if (v9 != 1)
  {
    if (!v9)
    {
      sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke_5", @"User said don't trust at time %llu connection %llu.", a4, a5, a6, a7, a8, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      if (!*(unsigned char *)(a1 + 76))
      {
        uint64_t v10 = &off_100186448;
LABEL_13:
        sub_100010480(*v10);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke_5", @"Unknown button %d at time %llu connection %llu.", a4, a5, a6, a7, a8, v9);
LABEL_11:
    if (!*(unsigned char *)(a1 + 76))
    {
      uint64_t v10 = &off_100186458;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke_5", @"User said trust at time %llu connection %llu.", a4, a5, a6, a7, a8, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  if (MKBGetDeviceLockState() != 3)
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke_5", @"Prompting user for passcode.", v11, v12, v13, v14, v15, v20);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100017AF8;
    v21[3] = &unk_1001867A0;
    uint64_t v23 = *(void *)(a1 + 56);
    char v24 = *(unsigned char *)(a1 + 76);
    id v22 = *(id *)(a1 + 32);
    long long v17 = v21;
    long long v18 = sub_10001362C();
    dispatch_assert_queue_not_V2(v18);

    long long v19 = sub_10001362C();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100019080;
    block[3] = &unk_100186950;
    id v26 = v17;
    dispatch_sync(v19, block);

    return;
  }
  if (!*(unsigned char *)(a1 + 76))
  {
    uint64_t v10 = &off_100186440;
    goto LABEL_13;
  }
LABEL_14:
  id v16 = *(NSObject **)(a1 + 32);

  dispatch_semaphore_signal(v16);
}

intptr_t sub_100017AF8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke_6", @"Passcode authentication succeeded.", a4, a5, a6, a7, a8, v12);
    if (*(unsigned char *)(a1 + 48)) {
      goto LABEL_7;
    }
    int v9 = &off_100186440;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_block_invoke_6", @"Passcode authentication failed.", a4, a5, a6, a7, a8, v12);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    if (*(unsigned char *)(a1 + 48)) {
      goto LABEL_7;
    }
    int v9 = &off_100186448;
  }
  sub_100010480(*v9);
LABEL_7:
  uint64_t v10 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v10);
}

void sub_100017B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  unint64_t v9 = *(void *)(a1 + 72);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if (qword_1001B8068 < v9)
    {
      qword_1001B8068 = *(void *)(a1 + 72);
      uint64_t v10 = *(void *)(a1 + 48);
      qword_1001B8070 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      *(void *)(*(void *)(v10 + 8) + 24) = 0;
      if (!*(unsigned char *)(a1 + 96)) {
        sub_100010480(@"com.apple.mobile.lockdown.trusted_ptp_attached");
      }
    }
    if (byte_1001B804B == 1 && qword_1001B8058 != 0)
    {
      sub_10001A558(0, (uint64_t)"trigger_host_pair", @"Notifying host to pair.", a4, a5, a6, a7, a8, v37);
      notify_post("com.apple.mobile.lockdown.request_pair");
    }
  }
  else
  {
    if (qword_1001B8060 < v9) {
      qword_1001B8060 = *(void *)(a1 + 72);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      char v12 = sub_10001362C();
      dispatch_assert_queue_V2(v12);

      if (qword_1001B8058)
      {
        uint64_t v38 = v8;
        time_t v13 = time(0);
        id v14 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/private/var/root/Library/Lockdown/untrusted_hosts.plist"];
        if (!v14) {
          id v14 = objc_alloc_init((Class)NSMutableDictionary);
        }
        uint64_t v15 = +[NSNumber numberWithLong:v13];
        [v14 setObject:v15 forKey:qword_1001B8058];

        if ((unint64_t)[v14 count] >= 0x65)
        {
          id v39 = v14;
          do
          {
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            id v16 = v14;
            id v17 = [v16 countByEnumeratingWithState:&v40 objects:v44 count:16];
            if (v17)
            {
              id v18 = v17;
              long long v19 = 0;
              id v20 = 0;
              uint64_t v21 = *(void *)v41;
              while (2)
              {
                for (CFIndex i = 0; i != v18; CFIndex i = (char *)i + 1)
                {
                  if (*(void *)v41 != v21) {
                    objc_enumerationMutation(v16);
                  }
                  uint64_t v23 = *(void **)(*((void *)&v40 + 1) + 8 * i);
                  char v24 = [v16 objectForKey:v23];
                  if (v20)
                  {
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) == 0)
                    {
                      id v28 = v23;

                      long long v19 = v28;
                      goto LABEL_32;
                    }
                    if ([v20 compare:v24] == (id)1)
                    {
                      id v25 = v23;

                      id v26 = v24;
                      long long v19 = v25;
                      id v20 = v26;
                    }
                  }
                  else
                  {
                    id v27 = v23;

                    id v20 = v24;
                    long long v19 = v27;
                  }
                }
                id v18 = [v16 countByEnumeratingWithState:&v40 objects:v44 count:16];
                if (v18) {
                  continue;
                }
                break;
              }
LABEL_32:

              if (v19) {
                [v16 removeObjectForKey:v19];
              }
              id v14 = v39;
            }
            else
            {

              id v20 = 0;
              long long v19 = 0;
            }
          }
          while ((unint64_t)[v16 count] > 0x64);
        }
        if (([v14 writeToFile:@"/private/var/root/Library/Lockdown/untrusted_hosts.plist" atomically:0] & 1) == 0)sub_10001A558(0, (uint64_t)"add_untrusted_host", @"Failed to write %@.", v29, v30, v31, v32, v33, (char)@"/private/var/root/Library/Lockdown/untrusted_hosts.plist"); {
        uint64_t v8 = v38;
        }
      }
      else
      {
        id v14 = 0;
      }
    }
  }
  uint64_t v34 = *(const void **)(v8 + 88);
  if ((const void *)qword_1001B8038 == v34)
  {
    if (qword_1001B8038)
    {
      CFRelease((CFTypeRef)qword_1001B8038);
      uint64_t v34 = *(const void **)(v8 + 88);
    }
    else
    {
      uint64_t v34 = 0;
    }
    qword_1001B8038 = 0;
  }
  CFRelease(v34);
  uint64_t v35 = *(void *)(*(void *)(v8 + 64) + 8);
  id v36 = *(void **)(v35 + 40);
  *(void *)(v35 + 40) = 0;
}

uint64_t sub_100017F60(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  CFStringRef v10 = @"UserDeniedPTP";
  CFStringRef v3 = sub_10001362C();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001802C;
  v6[3] = &unk_100186238;
  v6[4] = &v7;
  void v6[5] = a2;
  dispatch_sync(v3, v6);

  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_10001802C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v67 = 0;
  uint64_t v68 = &v67;
  uint64_t v69 = 0x3032000000;
  uint64_t v70 = sub_100013614;
  char v71 = sub_100013624;
  id v72 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = &v63;
  uint64_t v65 = 0x2020000000;
  uint64_t v66 = 0;
  if ((byte_1001B8049 & 1) == 0)
  {
    uint64_t v11 = (uint64_t *)(a1 + 32);
    char v12 = off_1001879B0;
LABEL_5:
    *(void *)(*(void *)(*v11 + 8) + 24) = *v12;
    goto LABEL_10;
  }
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9) {
    BOOL v10 = CFEqual(v9, @"com.apple.SystemConfiguration.InterfaceNamer") != 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (qword_1001B8060 && qword_1001B8060 == qword_1001B6AC8)
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke", @"Denied ptp access from connection %llu since we're still on that connection.", a4, a5, a6, a7, a8, qword_1001B8060);
    goto LABEL_10;
  }
  if (qword_1001B8068)
  {
    unint64_t v13 = sub_100027124();
    v64[3] = v13;
    if (qword_1001B8068 == qword_1001B6AC8)
    {
      sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke", @"Allowing ptp from connection %llu since we're still on that connection.", v14, v15, v16, v17, v18, qword_1001B8068);
      goto LABEL_16;
    }
    if (v13 - qword_1001B8070 <= 9)
    {
      sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke", @"Allowing ptp from connnection %llu since only %llu seconds have elapsed since the user said trust from connection %llu.", v14, v15, v16, v17, v18, v13 - qword_1001B8070);
LABEL_16:
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      if (!v10) {
        sub_100010480(@"com.apple.mobile.lockdown.trusted_ptp_attached");
      }
      goto LABEL_10;
    }
    uint64_t v59 = qword_1001B6AC8;
    uint64_t v60 = qword_1001B8068;
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke", @"Ignoring user-allowed ptp from connection %llu since %llu seconds have elapsed since the user said trust from connection %llu.", v14, v15, v16, v17, v18, v13 - qword_1001B8070);
    sub_100014C58();
  }
  long long v19 = *(const void **)(a1 + 40);
  if (!v19 || !CFEqual(v19, @"com.apple.SystemConfiguration.InterfaceNamer"))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v11 = (uint64_t *)(a1 + 32);
    *(void *)(*(void *)(v20 + 8) + 24) = @"PTPDialogResponsePending";
    if (!qword_1001B8040)
    {
      if (v10)
      {
        char v12 = off_100187900;
        goto LABEL_5;
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        CFTypeRef v27 = sub_100027284(@"PTP_DIALOG_MESSAGE");
        uint64_t v28 = MGCopyAnswer();
        if (v28) {
          CFStringRef v29 = (const __CFString *)v28;
        }
        else {
          CFStringRef v29 = @"iOS device";
        }
        uint64_t v30 = +[NSString stringWithValidatedFormat:v27, @"%@", 0, v29, v59, v60 validFormatSpecifiers error];
        CFRelease(v29);
        if (v27) {
          CFRelease(v27);
        }
        if (v30)
        {
          CFTypeRef v36 = sub_100027284(@"PTP_DIALOG_HEADER");
          CFTypeRef v37 = sub_100027284(@"PTP_DIALOG_DENY_TRUST");
          CFTypeRef v38 = sub_100027284(@"PTP_DIALOG_ALLOW_TRUST");
          CFDictionarySetValue(Mutable, kCFUserNotificationAlertHeaderKey, v36);
          CFDictionarySetValue(Mutable, kCFUserNotificationAlertMessageKey, v30);
          CFDictionarySetValue(Mutable, kCFUserNotificationDefaultButtonTitleKey, v37);
          CFDictionarySetValue(Mutable, kCFUserNotificationAlternateButtonTitleKey, v38);
          CFDictionarySetValue(Mutable, SBUserNotificationAllowInSetupKey, kCFBooleanTrue);
          CFDictionarySetValue(Mutable, SBUserNotificationPendWhileKeyBagLockedKey, kCFBooleanTrue);
          if (v36) {
            CFRelease(v36);
          }
          CFRelease(v30);
          if (v37) {
            CFRelease(v37);
          }
          if (v38) {
            CFRelease(v38);
          }
          sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke", @"Asking the user if they want to allow ptp.", v39, v40, v41, v42, v43, v57);
          CFUserNotificationRef v44 = CFUserNotificationCreate(0, 0.0, 3uLL, 0, Mutable);
          CFUserNotificationRef v50 = v44;
          if (v44)
          {
            qword_1001B8040 = (uint64_t)v44;
            CFRetain(v44);
            uint64_t v51 = qword_1001B6AC8;
            uint64_t v52 = os_transaction_create();
            uint64_t v53 = (void *)v68[5];
            v68[5] = v52;

            dispatch_semaphore_t v54 = dispatch_get_global_queue(0, 0);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1000185B0;
            block[3] = &unk_1001868B8;
            block[7] = v50;
            void block[8] = v51;
            uint64_t v55 = *v11;
            void block[4] = &v63;
            void block[5] = v55;
            char v62 = 0;
            block[6] = &v67;
            dispatch_async(v54, block);
          }
          else
          {
            sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke", @"Failed to create user notification.", v45, v46, v47, v48, v49, v58);
          }
        }
        else
        {
          sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke", @"Failed to validate format string.", v31, v32, v33, v34, v35, v57);
        }
        CFRelease(Mutable);
      }
      else
      {
        sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke", @"Failed to create dictionary.", v21, v22, v23, v24, v25, v56);
      }
    }
  }
LABEL_10:
  _Block_object_dispose(&v63, 8);
  _Block_object_dispose(&v67, 8);
}

void sub_100018570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000185B0(uint64_t a1)
{
  CFOptionFlags responseFlags = 0;
  SInt32 v2 = CFUserNotificationReceiveResponse(*(CFUserNotificationRef *)(a1 + 56), 0.0, &responseFlags);
  CFStringRef v3 = sub_10001362C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001867C;
  v7[3] = &unk_100186890;
  SInt32 v13 = v2;
  long long v8 = *(_OWORD *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 48);
  CFOptionFlags v11 = responseFlags;
  uint64_t v12 = v5;
  uint64_t v9 = v6;
  uint64_t v10 = v4;
  dispatch_sync(v3, v7);
}

void sub_10001867C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_100027124();
  int v7 = *(_DWORD *)(a1 + 80);
  if (v7)
  {
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke_3", @"CFUserNotificationReceiveResponse returned %ld at time %llu connection %llu.", v2, v3, v4, v5, v6, v7);
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if ((v8 & 3) == 1 && MKBGetDeviceLockState() - 1 <= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x3032000000;
    uint64_t v20 = sub_100013614;
    uint64_t v21 = sub_100013624;
    id v22 = 0;
    uint64_t v9 = os_transaction_create();
    uint64_t v10 = (void *)v18[5];
    v18[5] = v9;

    CFOptionFlags v11 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100018978;
    block[3] = &unk_1001861C8;
    void block[4] = &v17;
    dispatch_async(v11, block);

    _Block_object_dispose(&v17, 8);
LABEL_10:
    sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke_3", @"The notification was cancelled at time %llu connection %llu.", v2, v3, v4, v5, v6, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    goto LABEL_15;
  }
  if ((v8 & 3) == 3) {
    goto LABEL_10;
  }
  if ((v8 & 3) != 1)
  {
    if ((v8 & 3) != 0) {
      sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke_3", @"Unknown button %d at time %llu connection %llu.", v2, v3, v4, v5, v6, v8 & 3);
    }
    else {
      sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke_3", @"User said don't trust ptp at time %llu connection %llu.", v2, v3, v4, v5, v6, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    }
LABEL_15:
    if ((unint64_t)qword_1001B8060 < *(void *)(a1 + 56)) {
      qword_1001B8060 = *(void *)(a1 + 56);
    }
    goto LABEL_17;
  }
  sub_10001A558(0, (uint64_t)"ask_user_to_trust_ptp_block_invoke_3", @"User said trust at time ptp %llu connection %llu.", v2, v3, v4, v5, v6, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  if ((unint64_t)qword_1001B8068 < *(void *)(a1 + 56))
  {
    qword_1001B8068 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 40);
    qword_1001B8070 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    *(void *)(*(void *)(v12 + 8) + 24) = 0;
    if (!*(unsigned char *)(a1 + 84)) {
      sub_100010480(@"com.apple.mobile.lockdown.trusted_ptp_attached");
    }
  }
LABEL_17:
  SInt32 v13 = *(const void **)(a1 + 72);
  if ((const void *)qword_1001B8040 == v13)
  {
    if (qword_1001B8040)
    {
      CFRelease((CFTypeRef)qword_1001B8040);
      SInt32 v13 = *(const void **)(a1 + 72);
    }
    else
    {
      SInt32 v13 = 0;
    }
    qword_1001B8040 = 0;
  }
  CFRelease(v13);
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = 0;
}

void sub_100018960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100018978(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)sub_100027284(@"PTP_FAILED_HEADER");
  CFStringRef v3 = (const __CFString *)sub_100027284(@"PTP_FAILED_TEXT");
  CFUserNotificationDisplayNotice(0.0, 2uLL, 0, 0, 0, v2, v3, 0);
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;
}

BOOL sub_100018A2C(uint64_t *a1, const void *a2, CFDictionaryRef theDict, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v59 = 0;
  if (!a1)
  {
    sub_10001A558(0, (uint64_t)"is_host_trusted", @"NULL connection state.", (uint64_t)a4, a5, a6, a7, a8, v57);
    id v14 = 0;
    id v15 = 0;
    uint64_t v16 = off_1001879E0;
    goto LABEL_5;
  }
  uint64_t v9 = a5;
  uint64_t v12 = *a1;
  if (theDict) {
    BOOL v13 = CFDictionaryGetValue(theDict, @"IgnoreUntrustedList") == kCFBooleanTrue;
  }
  else {
    BOOL v13 = 0;
  }
  unsigned int v18 = sub_10000E660(v12, 0, @"TrustedHostAttached", (uint64_t)a4, a5, a6, a7, a8);
  uint64_t v17 = 0;
  id v15 = 0;
  id v14 = 0;
  if (!v18)
  {
    char v58 = v9;
    uint64_t v69 = 0;
    uint64_t v70 = &v69;
    uint64_t v71 = 0x3032000000;
    id v72 = sub_100013614;
    char v73 = sub_100013624;
    id v74 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = &v63;
    uint64_t v65 = 0x3032000000;
    uint64_t v66 = sub_100013614;
    uint64_t v67 = sub_100013624;
    id v68 = 0;
    uint64_t v19 = sub_10001362C();
    dispatch_assert_queue_not_V2(v19);

    uint64_t v20 = sub_10001362C();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100019590;
    block[3] = &unk_1001861C8;
    void block[4] = &v63;
    dispatch_sync(v20, block);

    uint64_t v21 = v64[5];
    if (v21)
    {
      dispatch_time_t v22 = dispatch_time(0, 10000000000);
      if (dispatch_group_wait(v21, v22))
      {
        uint64_t v23 = sub_10001362C();
        v61[0] = _NSConcreteStackBlock;
        v61[1] = 3221225472;
        v61[2] = sub_1000196B4;
        v61[3] = &unk_1001861C8;
        v61[4] = &v63;
        dispatch_async(v23, v61);
      }
    }
    uint64_t v24 = sub_10001362C();
    v60[0] = _NSConcreteStackBlock;
    v60[1] = 3221225472;
    v60[2] = sub_10001972C;
    v60[3] = &unk_1001861C8;
    v60[4] = &v69;
    dispatch_sync(v24, v60);

    id v15 = (id)v70[5];
    _Block_object_dispose(&v63, 8);

    _Block_object_dispose(&v69, 8);
    if (v15) {
      char v30 = v13;
    }
    else {
      char v30 = 1;
    }
    if (v30)
    {
      id v14 = 0;
      goto LABEL_21;
    }
    id v14 = [objc_alloc((Class)NSDictionary) initWithContentsOfFile:@"/private/var/root/Library/Lockdown/untrusted_hosts.plist"];
    uint64_t v31 = [v14 objectForKey:v15];

    if (!v31)
    {
LABEL_21:
      if (sub_10000E660(v12, 0, @"TrustedHostAttached", v25, v26, v27, v28, v29))
      {
LABEL_22:
        uint64_t v17 = 0;
        goto LABEL_23;
      }
      if ((sub_100027930(0, 0, 0, (unsigned char *)&v59 + 1, &v59) & 1) == 0)
      {
        sub_10001A558(0, (uint64_t)"is_host_trusted", @"MC disallowed pairing.", v34, v35, v36, v37, v38, v9);
        uint64_t v16 = off_1001878E0;
        goto LABEL_5;
      }
      if (a2)
      {
        if (CFEqual(a2, @"com.apple.ptp") || CFEqual(a2, @"com.apple.SystemConfiguration.InterfaceNamer"))
        {
          if (CFEqual(a2, @"com.apple.SystemConfiguration.InterfaceNamer")) {
            uint64_t v9 = (uint64_t)a2;
          }
          if ((sub_100027D14(v12, v39, v40, v41, v42, v43, v44, v45) & 1) == 0)
          {
            sub_10001A558(0, (uint64_t)"is_host_trusted", @"Buddy has not completed. Implicitly trusting host.", v46, v47, v48, v49, v50, v58);
            goto LABEL_22;
          }
          CFMutableDictionaryRef v51 = sub_10000E660(v12, @"com.apple.mobile.debug", @"DisableUnpairedPTP", v46, v47, v48, v49, v50);
          if (v51)
          {
            sub_10001A558(0, (uint64_t)"is_host_trusted", @"Not allowing PTP access since DisableUnpairedPTP is set.", v52, v53, v54, v55, v56, v58);
LABEL_33:
            uint64_t v16 = off_100187928;
            goto LABEL_5;
          }
          if ((byte_1001B804B & 1) == 0)
          {
            uint64_t v17 = sub_100017F60((uint64_t)v51, v9);
            goto LABEL_6;
          }
        }
        else if (CFEqual(a2, @"com.apple.InternetTethering") && (byte_1001B804B & 1) == 0)
        {
          goto LABEL_33;
        }
      }
      uint64_t v17 = sub_100016B90((uint64_t)a1, v9, 0, 0);
      goto LABEL_6;
    }
    uint64_t v16 = off_100187900;
LABEL_5:
    uint64_t v17 = (uint64_t)*v16;
LABEL_6:
    if (a4 && v17) {
      *a4 = v17;
    }
  }
LABEL_23:
  BOOL v32 = v17 == 0;

  return v32;
}

void sub_100018EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100018F1C(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mobile.lockdownd.pairing", 0);
  CFStringRef v2 = (void *)qword_1001B8078;
  qword_1001B8078 = (uint64_t)v1;

  if (!qword_1001B8078) {
    sub_100104904();
  }
}

void sub_100018F64(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/private/var/root/Library/Lockdown/untrusted_hosts.plist"];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v5)
  {
    uint64_t v6 = [v5 objectForKey:*(void *)(a1 + 40)];

    if (v6)
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) removeObjectForKey:*(void *)(a1 + 40)];
      if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) count])
      {
        if (([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) writeToFile:@"/private/var/root/Library/Lockdown/untrusted_hosts.plist" atomically:0] & 1) == 0)sub_10001A558(0, (uint64_t)"remove_untrusted_host_block_invoke", @"Failed to write %@.", v7, v8, v9, v10, v11, (char)@"/private/var/root/Library/Lockdown/untrusted_hosts.plist"); {
      }
        }
      else if (unlink((const char *)[@"/private/var/root/Library/Lockdown/untrusted_hosts.plist" fileSystemRepresentation]))
      {
        uint64_t v12 = __error();
        strerror(*v12);
        sub_10001A558(0, (uint64_t)"remove_untrusted_host_block_invoke", @"Failed to unlink %@: %s", v13, v14, v15, v16, v17, (char)@"/private/var/root/Library/Lockdown/untrusted_hosts.plist");
      }
    }
  }
}

void sub_100019080(uint64_t a1)
{
  v49[0] = 0;
  v49[1] = v49;
  v49[2] = 0x2020000000;
  char v50 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x3032000000;
  uint64_t v46 = sub_100013614;
  uint64_t v47 = sub_100013624;
  id v48 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x2020000000;
  uint64_t v42 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x3032000000;
  uint64_t v36 = sub_100013614;
  uint64_t v37 = sub_100013624;
  id v38 = 0;
  id v2 = objc_alloc_init((Class)LAContext);
  uint64_t v3 = (void *)qword_1001B8028;
  qword_1001B8028 = (uint64_t)v2;

  if (!qword_1001B8028)
  {
    CFStringRef v24 = @"Failed to allocate LAContext.";
LABEL_13:
    sub_10001A558(0, (uint64_t)"askUserForPasscode_block_invoke", (uint64_t)v24, v4, v5, v6, v7, v8, v26);
    uint64_t v11 = 0;
LABEL_17:
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    goto LABEL_18;
  }
  uint64_t v9 = objc_opt_new();
  uint64_t v10 = (void *)v34[5];
  v34[5] = v9;

  if (!v34[5])
  {
    CFStringRef v24 = @"Failed to allocate dictionary.";
    goto LABEL_13;
  }
  uint64_t v11 = (void *)sub_100027284(@"TRUST_DIALOG_MESSAGE_SIMPLE");
  if (v11) {
    [(id)v34[5] setObject:v11 forKey:&off_1001A88E0];
  }
  dispatch_semaphore_t v12 = dispatch_semaphore_create(0);
  uint64_t v13 = (void *)v44[5];
  v44[5] = (uint64_t)v12;

  if (!v44[5])
  {
    CFStringRef v25 = @"Failed to allocate wait semaphore.";
    goto LABEL_16;
  }
  v40[3] = 1028;
  uint64_t v19 = getpwnam("mobile");
  if (!v19 || !v19->pw_uid)
  {
    CFStringRef v25 = @"Failed to query mobile user ID.";
LABEL_16:
    sub_10001A558(0, (uint64_t)"askUserForPasscode_block_invoke", (uint64_t)v25, v14, v15, v16, v17, v18, v26);
    goto LABEL_17;
  }
  uint64_t v20 = (void *)v34[5];
  uint64_t v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
  [v20 setObject:v21 forKey:&off_1001A88F8];

  dispatch_time_t v22 = (void *)sub_100027284(@"ENTER_PASSCODE_TITLE");
  if (v22) {
    [(id)v34[5] setObject:v22 forKey:&off_1001A8910];
  }

  uint64_t v23 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100019404;
  block[3] = &unk_100186928;
  uint64_t v29 = &v39;
  char v30 = &v33;
  uint64_t v31 = v49;
  BOOL v32 = &v43;
  id v28 = *(id *)(a1 + 32);
  dispatch_async(v23, block);

LABEL_18:
  _Block_object_dispose(&v33, 8);

  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);

  _Block_object_dispose(v49, 8);
}

void sub_1000193C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100019404(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100019518;
  v12[3] = &unk_100186900;
  long long v13 = *(_OWORD *)(a1 + 56);
  [(id)qword_1001B8028 evaluatePolicy:v2 options:v3 reply:v12];
  uint64_t v4 = *(NSObject **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  dispatch_time_t v5 = dispatch_time(0, 120000000000);
  if (dispatch_semaphore_wait(v4, v5))
  {
    sub_10001A558(0, (uint64_t)"askUserForPasscode_block_invoke", @"Timed out waiting %d minutes for passcode.", v6, v7, v8, v9, v10, 2);
    [(id)qword_1001B8028 invalidate];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

intptr_t sub_100019518(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else {
    sub_10001A558(0, (uint64_t)"askUserForPasscode_block_invoke_2", @"Passcode policy evaluation FAILED: %@", a4, a5, a6, a7, a8, a3);
  }
  uint64_t v9 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  return dispatch_semaphore_signal(v9);
}

void sub_100019590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  BOOL v9 = byte_1001B804B == 1 && qword_1001B8058 == 0;
  if (v9 && (byte_1001B804A != 1 || [(id)qword_1001B8030 count]))
  {
    dispatch_group_t v11 = dispatch_group_create();
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (v19)
    {
      uint64_t v20 = (void *)qword_1001B8030;
      if (qword_1001B8030)
      {
LABEL_12:
        [v20 addObject:v19];
        dispatch_group_enter(*(dispatch_group_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
        byte_1001B804A = 1;
        return;
      }
      id v21 = objc_alloc_init((Class)NSMutableArray);
      dispatch_time_t v22 = (void *)qword_1001B8030;
      qword_1001B8030 = (uint64_t)v21;

      uint64_t v20 = (void *)qword_1001B8030;
      if (qword_1001B8030)
      {
        uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        goto LABEL_12;
      }
      CFStringRef v23 = @"Failed to create array.";
    }
    else
    {
      CFStringRef v23 = @"Failed to create group.";
    }
    sub_10001A558(0, (uint64_t)"get_untrusted_host_buid_block_invoke", (uint64_t)v23, v14, v15, v16, v17, v18, a9);
  }
}

void sub_1000196B4(uint64_t a1)
{
  if ([(id)qword_1001B8030 containsObject:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)])
  {
    [(id)qword_1001B8030 removeObject:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
    uint64_t v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    dispatch_group_leave(v2);
  }
}

void sub_10001972C(uint64_t a1)
{
}

void *sub_100019744(uint64_t a1)
{
  uint64_t v38 = 0;
  uint64_t v39 = &v38;
  uint64_t v40 = 0x2020000000;
  char v41 = 0;
  uint64_t v7 = malloc_type_calloc(1uLL, 0x20uLL, 0xE004003B0627DuLL);
  if (!v7)
  {
    sub_10001A558(0, (uint64_t)"service_ark_load", @"Could not allocate service ark", v2, v3, v4, v5, v6, v34);
LABEL_10:
    uint64_t v7 = 0;
    goto LABEL_27;
  }
  dispatch_queue_t v8 = dispatch_queue_create("com.apple.mobile.lockdownd.dark", 0);
  void *v7 = v8;
  if (!v8)
  {
    sub_10001A558(0, (uint64_t)"service_ark_load", @"Failed to initialize queue.", v9, v10, v11, v12, v13, v34);
    free(v7);
    goto LABEL_10;
  }
  unint64_t size = 0;
  uint64_t v14 = getsectiondata(&_mh_execute_header, "__TEXT", "__services", &size);
  if (v14)
  {
    if (size)
    {
      CFDataRef v20 = CFDataCreate(0, v14, size);
      if (v20)
      {
        CFPropertyListRef v21 = CFPropertyListCreateWithData(0, v20, 0, 0, 0);
        CFRelease(v20);
        if (sub_10000FE94(v21))
        {
          v7[1] = v21;
        }
        else
        {
          sub_10001A558(0, (uint64_t)"service_ark_load", @"Bogus Service Map supplied", v15, v16, v17, v18, v19, v34);
          if (v21) {
            CFRelease(v21);
          }
        }
      }
    }
  }
  if (!v7[1]) {
    sub_10001A558(0, (uint64_t)"service_ark_load", @"Could not load service map", v15, v16, v17, v18, v19, v34);
  }
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_100019BE0;
  v36[3] = &unk_100186978;
  v36[5] = a1;
  v36[6] = v7;
  v36[4] = &v38;
  sub_100019A10((uint64_t)v7, v36);
  CFArrayRef v22 = (const __CFArray *)sub_100008F84();
  CFArrayRef v23 = v22;
  if (v22)
  {
    CFIndex Count = CFArrayGetCount(v22);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        char v35 = 0;
        CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v23, i);
        sub_100009140(a1, (dispatch_queue_t *)v7, ValueAtIndex, &v35);
        if (v35) {
          *((unsigned char *)v39 + 24) = 1;
        }
      }
    }
    CFRelease(v23);
  }
  if (*((unsigned char *)v39 + 24))
  {
    if (sub_10002ABBC()) {
      CFStringRef v32 = @"Refreshed remote services.";
    }
    else {
      CFStringRef v32 = @"Failed to refresh remote services.";
    }
    sub_10001A558(0, (uint64_t)"service_ark_load", (uint64_t)v32, v27, v28, v29, v30, v31, v34);
  }
LABEL_27:
  _Block_object_dispose(&v38, 8);
  return v7;
}

void sub_1000199E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100019A10(uint64_t a1, void *a2)
{
  id v8 = a2;
  uint64_t v23 = 0;
  CFStringRef v24 = &v23;
  uint64_t v25 = 0x2020000000;
  char v26 = 1;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3032000000;
  CFDataRef v20 = sub_10001A3F4;
  CFPropertyListRef v21 = sub_10001A404;
  id v22 = 0;
  if (a1 && *(void *)(a1 + 8) && (uint64_t v9 = *(NSObject **)a1) != 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001A40C;
    block[3] = &unk_100186238;
    void block[4] = &v17;
    void block[5] = a1;
    dispatch_sync(v9, block);
    uint64_t v10 = (void *)v18[5];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10001A458;
    v13[3] = &unk_1001869E8;
    uint64_t v15 = &v23;
    id v14 = v8;
    [v10 enumerateKeysAndObjectsUsingBlock:v13];
  }
  else
  {
    sub_10001A558(0, (uint64_t)"service_ark_enumerate", @"Invalid argument.", v3, v4, v5, v6, v7, v13[0]);
  }
  uint64_t v11 = *((unsigned __int8 *)v24 + 24);
  _Block_object_dispose(&v17, 8);

  _Block_object_dispose(&v23, 8);
  return v11;
}

void sub_100019BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100019BE0(uint64_t a1, void *a2)
{
  char v5 = 0;
  if ((sub_10002A590(a2, *(void *)(a1 + 40), *(dispatch_queue_t **)(a1 + 48), &v5) & 1) == 0
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
  {
    sub_100104BA0((uint64_t)a2);
  }
  if (v5) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return 1;
}

NSObject **sub_100019C60(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 0;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*a1);
    uint64_t v4 = *v2;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100019D3C;
    block[3] = &unk_1001869A0;
    void block[5] = v2;
    void block[6] = a2;
    void block[4] = &v7;
    dispatch_sync(v4, block);
    uint64_t v2 = (NSObject **)v8[3];
  }
  _Block_object_dispose(&v7, 8);
  return v2;
}

void sub_100019D24(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

const void **sub_100019D3C(const void **result)
{
  if (*((void *)result[5] + 1))
  {
    uint64_t v1 = result;
    if (sub_10000FF0C(result[6])) {
      *(void *)(*((void *)v1[4] + 1) + 24) = CFDictionaryGetValue(*((CFDictionaryRef *)v1[5] + 1), v1[6]);
    }
    id result = *(const void ***)(*((void *)v1[4] + 1) + 24);
    if (result)
    {
      return (const void **)CFRetain(result);
    }
  }
  return result;
}

BOOL sub_100019DB8(NSObject **a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  if (a1)
  {
    uint64_t v4 = *a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100019E80;
    block[3] = &unk_100186338;
    int v8 = a3;
    void block[6] = a2;
    void block[7] = a4;
    void block[4] = &v9;
    void block[5] = a1;
    dispatch_sync(v4, block);
    BOOL v5 = *((unsigned char *)v10 + 24) != 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_100019E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = *(void *)(a1 + 40);
  if ((*(void *)(v10 + 16)
     || (*(void *)(*(void *)(a1 + 40) + 16) = sub_10002637C(), uint64_t v10 = *(void *)(a1 + 40), *(void *)(v10 + 16)))
    && ((CFDictionaryRef v16 = *(const __CFDictionary **)(v10 + 24)) != 0
     || (*(void *)(*(void *)(a1 + 40) + 24) = sub_10002637C(),
         (CFDictionaryRef v16 = *(const __CFDictionary **)(*(void *)(a1 + 40) + 24)) != 0)))
  {
    int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v16, *(const void **)(a1 + 48));
    if (sub_10000FE58(Value)) {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    }
    else {
      int valuePtr = 0;
    }
    unsigned int v18 = *(_DWORD *)(a1 + 64);
    if (!v18 || valuePtr + 1 <= v18)
    {
      int v19 = dword_1001B8088++;
      **(_DWORD **)(a1 + 56) = v19;
      ++valuePtr;
      CFNumberRef v20 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 24), *(const void **)(a1 + 48), v20);
      CFRelease(v20);
      CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, *(const void **)(a1 + 56));
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 16), v21, *(const void **)(a1 + 48));
      CFRelease(v21);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"service_ark_increment_block_invoke", @"Failed to create dictionary.", v11, v12, v13, v14, v15, a9);
  }
}

void sub_10001A008(NSObject **a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10001A088;
    v3[3] = &unk_1001869C0;
    int v4 = a2;
    v3[4] = a1;
    dispatch_sync(v2, v3);
  }
}

void sub_10001A088(uint64_t a1)
{
  CFNumberRef v2 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 40));
  CFDictionaryRef v3 = *(const __CFDictionary **)(*(void *)(a1 + 32) + 16);
  if (v3 && (int v4 = CFDictionaryGetValue(v3, v2)) != 0)
  {
    BOOL v5 = v4;
    CFRetain(v4);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 16), v2);
    CFRelease(v2);
    if (!CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 16)))
    {
      CFRelease(*(CFTypeRef *)(*(void *)(a1 + 32) + 16));
      *(void *)(*(void *)(a1 + 32) + 16) = 0;
    }
    int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 24), v5);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (--valuePtr)
      {
        CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 24), v5, v7);
        CFRelease(v7);
      }
      else
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 24), v5);
        if (!CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 24)))
        {
          CFRelease(*(CFTypeRef *)(*(void *)(a1 + 32) + 24));
          *(void *)(*(void *)(a1 + 32) + 24) = 0;
        }
      }
    }
    CFRelease(v5);
  }
  else if (v2)
  {
    CFRelease(v2);
  }
}

void sub_10001A1F8(dispatch_queue_t *a1, uint64_t a2, void *a3, uint64_t a4, char *a5)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if (a1)
  {
    uint64_t v9 = *a1;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10001A310;
    v10[3] = &unk_1001862F0;
    v10[6] = a3;
    v10[7] = a4;
    void v10[4] = &v11;
    void v10[5] = a1;
    dispatch_sync(v9, v10);
    if (!*((unsigned char *)v12 + 24)
      && (sub_10002A590(a3, a2, a1, a5) & 1) == 0
      && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    {
      sub_100104BA0((uint64_t)a3);
    }
  }
  _Block_object_dispose(&v11, 8);
}

void sub_10001A2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001A310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, *(CFDictionaryRef *)(*(void *)(a1 + 40) + 8));
  if (MutableCopy)
  {
    CFDictionaryRef v16 = MutableCopy;
    if (CFDictionaryContainsKey(MutableCopy, *(const void **)(a1 + 48)))
    {
      CFRelease(v16);
      sub_10001A558(0, (uint64_t)"service_ark_add_entry_block_invoke", @"Overwriting service: %@ not allowed", v17, v18, v19, v20, v21, *(void *)(a1 + 48));
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
    else
    {
      CFDictionarySetValue(v16, *(const void **)(a1 + 48), *(const void **)(a1 + 56));
      CFRelease(*(CFTypeRef *)(*(void *)(a1 + 40) + 8));
      *(void *)(*(void *)(a1 + 40) + 8) = v16;
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"service_ark_add_entry_block_invoke", @"Could not make copy of service map", v11, v12, v13, v14, v15, a9);
  }
}

uint64_t sub_10001A3F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001A404(uint64_t a1)
{
}

uint64_t sub_10001A40C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [*(id *)(*(void *)(a1 + 40) + 8) copy];

  return _objc_release_x1();
}

uint64_t sub_10001A458(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v3 + 24)) {
    char v4 = result;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(v3 + 24) = v4;
  return result;
}

BOOL sub_10001A4A0(const std::__fs::filesystem::path *a1, uint64_t a2)
{
  if (a2 >= 0x80000)
  {
    snprintf(__str, 0x400uLL, "%s.%d", (const char *)a1, 1);
    unlink(__str);
    snprintf((char *)&__to, 0x400uLL, "%s.1", (const char *)a1);
    rename(a1, &__to, v4);
  }
  return a2 >= 0x80000;
}

void sub_10001A558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = __chkstk_darwin();
  CFStringRef v11 = v10;
  uint64_t v13 = v12;
  int v14 = v9;
  uint64_t v21 = 0;
  bzero(buffer, 0x800uLL);
  if (!v13) {
    uint64_t v13 = "";
  }
  uint64_t v21 = &a9;
  CFStringRef v15 = CFStringCreateWithFormatAndArguments(0, 0, v11, &a9);
  CFStringRef v16 = v15;
  if (v15 && !CFStringGetCString(v15, buffer, 2048, 0x8000100u))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Failed to retrieve C string.", buf, 2u);
    }
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v27 = v13;
    __int16 v28 = 2080;
    uint64_t v29 = buffer;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s: %s", buf, 0x16u);
  }
  if (!v14 && dword_1001B6AD8)
  {
    bzero(buf, 0x800uLL);
    v20.tv_sec = 0;
    *(void *)&v20.__darwin_suseconds_t tv_usec = 0;
    *(void *)uint64_t v23 = 0;
    uint64_t v24 = 0;
    __int16 v25 = 0;
    gettimeofday(&v20, 0);
    uint64_t v17 = localtime(&v20.tv_sec);
    strftime(v23, 0x12uLL, "%D %H:%M:%S", v17);
    __darwin_suseconds_t tv_usec = v20.tv_usec;
    pid_t v19 = getpid();
    snprintf((char *)buf, 0x800uLL, "%s.%06d pid=%d %s: %s\n", v23, tv_usec, v19, v13, buffer);
    if (qword_1001B80A0 != -1) {
      dispatch_once(&qword_1001B80A0, &stru_100186A28);
    }
    if (qword_1001B8090)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_10001A824;
      block[3] = &unk_100186A48;
      void block[4] = buf;
      dispatch_sync((dispatch_queue_t)qword_1001B8090, block);
    }
  }
  if (v16) {
LABEL_14:
  }
    CFRelease(v16);
}

void sub_10001A7F8(id a1)
{
  qword_1001B8090 = (uint64_t)dispatch_queue_create("com.apple.mobile.lockdownd.log", 0);
}

uint64_t sub_10001A824(uint64_t a1)
{
  memset(&v16, 0, sizeof(v16));
  if ((dword_1001B6ADC & 0x80000000) == 0)
  {
LABEL_2:
    size_t v2 = strlen(*(const char **)(a1 + 32));
    write(dword_1001B6ADC, *(const void **)(a1 + 32), v2);
    qword_1001B8098 += v2;
    uint64_t result = sub_10001A4A0((const std::__fs::filesystem::path *)"/private/var/logs/lockdownd.log", qword_1001B8098);
    if (!result) {
      return result;
    }
    int v4 = dword_1001B6ADC;
    goto LABEL_20;
  }
  bzero(v18, 0x400uLL);
  memset(&v17, 0, sizeof(v17));
  int v5 = open("/private/var/logs/lockdownd.log", 777, 420);
  if (v5 != -1)
  {
    int v6 = v5;
    if (fcntl(v5, 50, v18) == -1)
    {
      uint64_t v12 = __error();
      strerror(*v12);
      CFStringRef v10 = @"F_GETPATH(%s) failed: %s";
    }
    else if (v18[0] == 0x657461766972702FLL {
           && v18[1] == 0x676F6C2F7261762FLL
    }
           && v18[2] == 0x6F646B636F6C2F73
           && v18[3] == 0x676F6C2E646E77)
    {
      if (fstat(v6, &v17) == -1)
      {
        CFStringRef v15 = __error();
        strerror(*v15);
        CFStringRef v10 = @"fstat(%s) failed: %s";
      }
      else
      {
        if ((v17.st_mode & 0xF000) == 0x8000)
        {
          dword_1001B6ADC = v6;
          int v13 = fstat(v6, &v16);
          off_t st_size = v16.st_size;
          if (v13) {
            off_t st_size = 0;
          }
          qword_1001B8098 = st_size;
          goto LABEL_2;
        }
        CFStringRef v10 = @"%s type is %d, not %d";
      }
    }
    else
    {
      CFStringRef v10 = @"path %s was actually %s, something fishy is going on";
    }
    sub_10001A558(1, "log_safe_create", v10);
    int v4 = v6;
LABEL_20:
    uint64_t result = close(v4);
    goto LABEL_21;
  }
  CFStringRef v11 = __error();
  strerror(*v11);
  uint64_t result = sub_10001A558(1, "log_safe_create", @"open(%s) failed: %s");
LABEL_21:
  dword_1001B6ADC = -1;
  return result;
}

uint64_t sub_10001AAC4(const __CFString *a1, const void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && a2)
  {
    if (a3) {
      CFStringRef v10 = a3;
    }
    else {
      CFStringRef v10 = kCFPreferencesAnyApplication;
    }
    CFStringRef v11 = (const __CFString *)sub_10001AB90();
    CFPreferencesSetValue(a1, a2, v10, v11, kCFPreferencesAnyHost);
    CFStringRef v12 = (const __CFString *)sub_10001AB90();
    uint64_t v13 = CFPreferencesSynchronize(v10, v12, kCFPreferencesAnyHost);
    if (v13) {
      return 0;
    }
    char v16 = (char)v10;
    CFStringRef v15 = @"Failed to synchronize preferences (%@).";
  }
  else
  {
    CFStringRef v15 = @"Invalid input(s).";
    uint64_t v13 = 0;
  }
  sub_10001A558(v13, (uint64_t)"lockbot_set_preference", (uint64_t)v15, a4, a5, a6, a7, a8, v16);
  return 0xFFFFFFFFLL;
}

id sub_10001AB90()
{
  if (qword_1001B80B0 != -1) {
    dispatch_once(&qword_1001B80B0, &stru_100186A88);
  }
  int v0 = (void *)qword_1001B80A8;

  return v0;
}

CFPropertyListRef sub_10001ABE4(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      CFStringRef v9 = a2;
    }
    else {
      CFStringRef v9 = kCFPreferencesAnyApplication;
    }
    CFStringRef v10 = (const __CFString *)sub_10001AB90();
    CFPreferencesSynchronize(v9, v10, kCFPreferencesAnyHost);
    CFStringRef v11 = (const __CFString *)sub_10001AB90();
    return CFPreferencesCopyValue(a1, v9, v11, kCFPreferencesAnyHost);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"lockbot_copy_preference", @"Invalid input.", a4, a5, a6, a7, a8, v13);
    return 0;
  }
}

uint64_t sub_10001AC90(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    CFStringRef v8 = (const __CFString *)a1;
    if (a2) {
      CFStringRef v9 = a2;
    }
    else {
      CFStringRef v9 = kCFPreferencesAnyApplication;
    }
    CFStringRef v10 = (const __CFString *)sub_10001AB90();
    CFPreferencesSetValue(v8, 0, v9, v10, kCFPreferencesAnyHost);
    CFStringRef v11 = (const __CFString *)sub_10001AB90();
    a1 = CFPreferencesSynchronize(v9, v11, kCFPreferencesAnyHost);
    if (a1) {
      return 0;
    }
    char v14 = (char)v9;
    CFStringRef v13 = @"Failed to synchronize preferences (%@).";
  }
  else
  {
    CFStringRef v13 = @"Invalid input.";
  }
  sub_10001A558(a1, (uint64_t)"lockbot_remove_preference", (uint64_t)v13, a4, a5, a6, a7, a8, v14);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10001AD50(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    CFStringRef v9 = (const __CFString *)sub_10001AB90();
    CFDictionaryRef v10 = CFPreferencesCopyMultiple(0, a1, v9, kCFPreferencesAnyHost);
    CFStringRef v11 = sub_10001B13C(v10);

    if (v11)
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10001AE3C;
      v15[3] = &unk_100186A68;
      v15[4] = a1;
      [(__CFDictionary *)v10 enumerateKeysAndObjectsUsingBlock:v15];
    }
    uint64_t v12 = 0;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"lockbot_remove_preference_domain", @"Invalid input (cannot remove global domain).", a4, a5, a6, a7, a8, v14);
    CFDictionaryRef v10 = 0;
    uint64_t v12 = 0xFFFFFFFFLL;
  }

  return v12;
}

uint64_t sub_10001AE3C(uint64_t a1, void *a2)
{
  CFStringRef v3 = *(const __CFString **)(a1 + 32);
  int v4 = a2;
  CFStringRef v5 = (const __CFString *)sub_10001AB90();
  CFPreferencesSetValue(v4, 0, v3, v5, kCFPreferencesAnyHost);

  CFStringRef v6 = *(const __CFString **)(a1 + 32);
  CFStringRef v7 = (const __CFString *)sub_10001AB90();

  return CFPreferencesSynchronize(v6, v7, kCFPreferencesAnyHost);
}

CFDictionaryRef sub_10001AEC0(const __CFString *a1)
{
  if (a1) {
    CFStringRef v1 = a1;
  }
  else {
    CFStringRef v1 = kCFPreferencesAnyApplication;
  }
  CFStringRef v2 = (const __CFString *)sub_10001AB90();
  CFPreferencesSynchronize(v1, v2, kCFPreferencesAnyHost);
  CFStringRef v3 = (const __CFString *)sub_10001AB90();

  return CFPreferencesCopyMultiple(0, v1, v3, kCFPreferencesAnyHost);
}

void sub_10001AF34(id a1)
{
  memset(&v5, 0, sizeof(v5));
  int v4 = 0;
  bzero(v6, 0x400uLL);
  if (getpwnam_r("mobile", &v5, v6, 0x400uLL, &v4) || !v4) {
    sub_100104C3C();
  }
  id v1 = objc_alloc((Class)NSString);
  id v2 = [v1 initWithUTF8String:v4->pw_name];
  CFStringRef v3 = (void *)qword_1001B80A8;
  qword_1001B80A8 = (uint64_t)v2;

  if (!qword_1001B80A8) {
    sub_100104C20();
  }
}

id sub_10001B004(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id sub_10001B06C(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id sub_10001B0D4(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id sub_10001B13C(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id sub_10001B1A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (&_CRGenerateRepairReport)
  {
    CRGenerateRepairReport();
    CFStringRef v9 = @"Failed to query repair report.";
    uint64_t v10 = 39;
  }
  else
  {
    CFStringRef v9 = @"CoreRepair not supported on this platform.";
    uint64_t v10 = 32;
  }
  CFStringRef v11 = sub_10000F804((uint64_t)"copyRepairReport", v10, -1, 0, v9, a6, a7, a8, 0);
  uint64_t v12 = v11;
  if (a1) {
    *a1 = v11;
  }
  if (cf) {
    CFRelease(cf);
  }

  return 0;
}

uint64_t sub_10001B294(uint64_t a1, const void *a2, const void *a3)
{
  int v5 = sub_100003074(*(void *)(a1 + 24));
  if (!sub_10000FE94(a2)) {
    return 0;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"Request");
  CFStringRef v7 = sub_10000FF0C(Value);
  uint64_t v8 = (uint64_t)v7;
  if (!v7) {
    goto LABEL_47;
  }
  if (CFEqual(v7, @"QueryType"))
  {
    uint64_t v8 = 2;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"StartSession"))
  {
    uint64_t v8 = 13;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"StopSession"))
  {
    uint64_t v8 = 14;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"StartService"))
  {
    uint64_t v8 = 15;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"Pair"))
  {
    uint64_t v8 = 9;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"Unpair"))
  {
    uint64_t v8 = 11;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"ResetPairing"))
  {
    uint64_t v8 = 12;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"GetValue"))
  {
    uint64_t v8 = 3;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"GetValueCU"))
  {
    uint64_t v8 = 4;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"GetMultipleValues"))
  {
    uint64_t v8 = 5;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"GetMultipleValuesCU"))
  {
    uint64_t v8 = 6;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"SetValue"))
  {
    uint64_t v8 = 7;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"RemoveValue"))
  {
    uint64_t v8 = 8;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"EnterRecovery"))
  {
    uint64_t v8 = 16;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"SaveValue"))
  {
    uint64_t v8 = 17;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"IsHostTrusted"))
  {
    uint64_t v8 = 18;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"Goodbye"))
  {
    uint64_t v8 = 1;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"EnableWirelessPairing"))
  {
    uint64_t v8 = 19;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"CUPairingCreate"))
  {
    uint64_t v8 = 20;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"CUPairingVerify"))
  {
    uint64_t v8 = 21;
    goto LABEL_47;
  }
  if (CFEqual((CFTypeRef)v8, @"PairCU"))
  {
    uint64_t v8 = 10;
    goto LABEL_47;
  }
  uint64_t v9 = CFEqual((CFTypeRef)v8, @"ValidateAutomationRecord");
  if (!v9)
  {
    sub_10001A558(v9, (uint64_t)"parse_message", @"Unsupported request: %@", v10, v11, v12, v13, v14, v8);
    return 0;
  }
  uint64_t v8 = 23;
LABEL_47:
  if (v5 == 4 && v8 <= 0x10 && ((1 << v8) & 0x1E604) != 0)
  {
    stat v17 = sub_10000FF0C(a3);
    CFStringRef v23 = @"unknown";
    if (v17) {
      LOBYTE(v23) = (_BYTE)a3;
    }
    sub_10001A558(0, (uint64_t)"parse_message", @"Client '%@' made improper request type %d, setting to unknown.", v18, v19, v20, v21, v22, (char)v23);
    return 0;
  }
  return v8;
}

void sub_10001B5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = sub_100002B30(@"Goodbye");
  unint64_t v17 = *(void *)(a1 + 24);

  sub_1000029C0(v17, v10, v11, v12, v13, v14, v15, v16, a9);
}

void sub_10001B61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = sub_100002B30(@"QueryType");
  CFDictionarySetValue(v10, @"Type", @"com.apple.mobile.lockdown");
  unint64_t v17 = *(void *)(a1 + 24);

  sub_1000029C0(v17, v10, v11, v12, v13, v14, v15, v16, a9);
}

void sub_10001B678(uint64_t a1, void *a2, uint64_t a3, const void *a4, uint64_t *a5, void *a6, uint64_t a7)
{
  id v18 = a6;
  CFTypeRef v164 = 0;
  uint64_t v165 = 0;
  if (!a1)
  {
    sub_10001A558(0, (uint64_t)"handle_get_multiple_values", @"Invalid connection.", v13, v14, v15, v16, v17, v144);
    uint64_t v39 = 0;
    goto LABEL_106;
  }
  if (a7) {
    CFStringRef v19 = @"GetMultipleValuesCU";
  }
  else {
    CFStringRef v19 = @"GetMultipleValues";
  }
  uint64_t v20 = sub_100002B30(v19);
  if (v20)
  {
    char v26 = v20;
    uint64_t v160 = a4;
    uint64_t v27 = sub_10000FE94(a2);
    CFMutableDictionaryRef v33 = 0;
    int v34 = 1;
    CFStringRef v35 = @"Invalid input(s).";
    if (!a5)
    {
      uint64_t v36 = off_1001878C0;
      uint64_t v37 = 0;
      uint64_t v163 = 0;
      uint64_t v38 = 0;
      goto LABEL_90;
    }
    uint64_t v159 = a3;
    uint64_t v36 = off_1001878C0;
    uint64_t v37 = 0;
    uint64_t v163 = 0;
    uint64_t v38 = 0;
    if (!v27)
    {
LABEL_90:
      CFMutableDictionaryRef v161 = v37;
      CFMutableDictionaryRef v162 = v38;
      sub_10001A558(0, (uint64_t)"handle_get_multiple_values", (uint64_t)v35, v28, v29, v30, v31, v32, v144);
      sub_100002B8C(v34, (uint64_t)"handle_get_multiple_values", v26, *v36);
      CFArrayRef v141 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
LABEL_91:
      sub_10001A558(0, (uint64_t)"handle_get_multiple_values", @"Failed to get values for every single key-domain in the request", v136, v137, v138, v139, v140, v144);
      sub_100002B8C(1, (uint64_t)"handle_get_multiple_values", v26, @"GetProhibited");
LABEL_92:
      sub_1000029C0(*(void *)(a1 + 24), v26, v142, v136, v137, v138, v139, v140, v144);
      if (v33) {
        CFRelease(v33);
      }
      if (v162) {
        CFRelease(v162);
      }
      if (v141) {
        CFRelease(v141);
      }
      if (v163) {
        CFRelease(v163);
      }
      if (v161) {
        CFRelease(v161);
      }
      goto LABEL_102;
    }
    if (!v18 && (a7 & 1) != 0)
    {
      CFMutableDictionaryRef v33 = 0;
      uint64_t v37 = 0;
      uint64_t v163 = 0;
      uint64_t v38 = 0;
      uint64_t v36 = off_1001878C0;
      CFStringRef v35 = @"Invalid pairing session.";
      goto LABEL_90;
    }
    if (a7)
    {
      id v41 = sub_10002C5E0(v18, a2);
      if (!v41)
      {
        int v34 = 0;
        CFMutableDictionaryRef v33 = 0;
        uint64_t v37 = 0;
        uint64_t v163 = 0;
        uint64_t v38 = 0;
        uint64_t v36 = off_1001879E8;
        CFStringRef v35 = @"Failed to decrypt message.";
        goto LABEL_90;
      }
      a2 = v41;
      CFMutableDictionaryRef v33 = sub_10002637C();
      if (!v33)
      {
        int v34 = 0;
        uint64_t v37 = 0;
        uint64_t v163 = 0;
        uint64_t v38 = 0;
        uint64_t v36 = off_1001878A8;
        CFStringRef v35 = @"Failed to create result.";
        goto LABEL_90;
      }
    }
    else
    {
      CFMutableDictionaryRef v33 = 0;
    }
    uint64_t v42 = CFDictionaryGetValue((CFDictionaryRef)a2, @"MultipleKeys");
    CFDictionaryRef v43 = (const __CFDictionary *)sub_10000FE94(v42);
    uint64_t v36 = off_1001878C0;
    if (!v43)
    {
      uint64_t v37 = 0;
      uint64_t v163 = 0;
      uint64_t v38 = 0;
      CFStringRef v35 = @"Invalid message.";
      goto LABEL_90;
    }
    CFDictionaryRef v44 = v43;
    uint64_t v163 = (const void *)CFDictionaryCopyKeys();
    if (!v163)
    {
      uint64_t v37 = 0;
      uint64_t v163 = 0;
      uint64_t v38 = 0;
      int v34 = 1;
      uint64_t v36 = off_1001879E8;
      CFStringRef v35 = @"Failed to get key retrieve dictionary keys.";
      goto LABEL_90;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!Mutable)
    {
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      int v34 = 1;
      uint64_t v36 = off_1001879E8;
      CFStringRef v35 = @"Failed to create dictionary.";
      goto LABEL_90;
    }
    CFMutableDictionaryRef v161 = Mutable;
    CFMutableDictionaryRef v46 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!v46)
    {
      uint64_t v38 = 0;
      int v34 = 1;
      uint64_t v36 = off_1001879E8;
      CFStringRef v35 = @"Failed to create dictionary.";
      uint64_t v37 = v161;
      goto LABEL_90;
    }
    CFDictionaryRef theDict = v44;
    CFMutableDictionaryRef v162 = v46;
    CFMutableDictionaryRef v47 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!v47)
    {
      int v34 = 1;
      CFStringRef v35 = @"Failed to create dictionary.";
      uint64_t v36 = off_1001879E8;
      uint64_t v37 = v161;
      uint64_t v38 = v162;
      goto LABEL_90;
    }
    id v48 = v47;
    CFDictionarySetValue(v161, @"SuccessValueKey", v162);
    long long v150 = v48;
    CFDictionarySetValue(v161, @"FailureValueKey", v48);
    CFIndex Count = CFArrayGetCount((CFArrayRef)v163);
    if (Count < 1)
    {
      char v143 = 0;
      uint64_t v40 = 0;
    }
    else
    {
      CFIndex v49 = 0;
      uint64_t v40 = 0;
      uint64_t v148 = 0;
      uint64_t v146 = 0;
      char v50 = (const void *)v159;
      long long v149 = a5;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v163, v49);
        if (!sub_10000FF0C(ValueAtIndex))
        {
          sub_10001A558(0, (uint64_t)"handle_get_multiple_values", @"Invalid domain, expected string: %@", v52, v53, v54, v55, v56, (char)ValueAtIndex);
          goto LABEL_118;
        }
        CFStringRef v157 = ValueAtIndex;
        char v57 = CFDictionaryGetValue(theDict, ValueAtIndex);
        if (!sub_10000FED0(v57)) {
          break;
        }
        CFIndex v156 = CFArrayGetCount((CFArrayRef)v57);
        if (v156 >= 1)
        {
          CFIndex v63 = 0;
          uint64_t v154 = v57;
          CFIndex v155 = v49;
          while (1)
          {
            CFIndex v158 = v63;
            CFStringRef v64 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v57, v63);
            if (!sub_10000FF0C(v64))
            {
              sub_10001A558(0, (uint64_t)"handle_get_multiple_values", @"Invalid key, expected string: %@", v65, v66, v67, v68, v69, (char)v64);
              uint64_t v98 = @"GetProhibited";
              goto LABEL_80;
            }
            if (dword_1001B6AD0) {
              sub_10001A558(0, (uint64_t)"handle_get_multiple_values", @"%@ attempting to get [%@]:[%@]", v65, v66, v67, v68, v69, (char)v50);
            }
            CFStringRef v70 = v157;
            if (CFEqual(v157, @"NULL")) {
              CFStringRef v70 = 0;
            }
            if (CFStringCompare(v64, @"NULL", 0)) {
              CFStringRef v72 = v64;
            }
            else {
              CFStringRef v72 = 0;
            }
            if ((sub_10001C130(v72, v70, v50, v160, a1, 0, a7, v71) & 1) == 0)
            {
              char v57 = v154;
              uint64_t v165 = @"GetProhibited";
              char v50 = (const void *)v159;
              CFStringRef v97 = v157;
              goto LABEL_60;
            }
            if (!v70
              || !v72
              || !CFEqual(v70, @"com.apple.mobile.wireless_lockdown")
              || !CFEqual(v72, @"reset_adverts"))
            {
              char v50 = (const void *)v159;
              uint64_t v99 = sub_10001C220(v72, v70, v159, (uint64_t *)a1, (uint64_t)v160, &v165, v76, v77);
              CFStringRef v97 = v157;
              char v57 = v154;
              goto LABEL_52;
            }
            CFTypeRef value = CFRetain(kCFBooleanTrue);
            sub_100005710(v149, 1, 1, 0, v78, v79, v80, v81, v144);
            if (sub_10000E660(*v149, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", v82, v83, v84, v85, v86)|| sub_10000E660(*v149, @"com.apple.mobile.wireless_lockdown", @"EnableWifiConnections", v87, v88, v89, v90, v91))
            {
              uint64_t v40 = sub_100027608();
              BYTE4(v148) |= v40 != 0;
            }
            char v50 = (const void *)v159;
            CFStringRef v97 = v157;
            char v57 = v154;
            LOBYTE(v148) = (sub_10000E660(*v149, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", v92, v93, v94, v95, v96) != 0) | v148;
            if ((v148 & 1) == 0 && (v148 & 0x100000000) == 0) {
              break;
            }
            if (sub_100004800(v149, (uint64_t)v40, BYTE4(v148) & 1, v148 & 1, 1, v75, v76, v77)) {
              goto LABEL_72;
            }
            uint64_t v99 = (void *)CFRetain(kCFBooleanFalse);
LABEL_52:
            if (v99)
            {
              valuea = v99;
              if (v97 && v64)
              {
                CFDictionaryRef v100 = v162;
                if (CFDictionaryContainsKey(v162, v97)) {
                  goto LABEL_58;
                }
                CFMutableDictionaryRef v101 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                if (v101)
                {
                  CFMutableDictionaryRef v107 = v101;
                  CFDictionaryRef v100 = v162;
                  CFDictionarySetValue(v162, v157, v101);
                  CFMutableDictionaryRef v108 = v107;
                  CFStringRef v97 = v157;
                  char v57 = v154;
                  CFRelease(v108);
LABEL_58:
                  uint64_t v109 = (__CFDictionary *)CFDictionaryGetValue(v100, v97);
                  if (sub_10000FE94(v109))
                  {
                    CFDictionarySetValue(v109, v64, valuea);
                    uint64_t v98 = 0;
                    LOBYTE(v146) = 1;
                    goto LABEL_78;
                  }
                  sub_10001A558(0, (uint64_t)"populate_success_value", @"Invalid keyValueDict, expected dictionary: %@", v110, v111, v112, v113, v114, (char)v109);
                }
                else
                {
                  sub_10001A558(0, (uint64_t)"populate_success_value", @"Failed to create dictionary.", v102, v103, v104, v105, v106, v144);
                }
                uint64_t v98 = @"InternalError";
LABEL_78:
                char v50 = (const void *)v159;
              }
              else
              {
                sub_10001A558(0, (uint64_t)"populate_success_value", @"Invalid input(s).", v73, v74, v75, v76, v77, v144);
                uint64_t v98 = @"InternalError";
              }
              CFRelease(valuea);
              goto LABEL_80;
            }
LABEL_60:
            sub_10001A558(0, (uint64_t)"handle_get_multiple_values", @"%@ failed to get [%@]:[%@]: %@", v73, v74, v75, v76, v77, (char)v50);
            if (!v97 || !v64)
            {
              sub_10001A558(0, (uint64_t)"populate_failed_value", @"Invalid input(s).", v115, v116, v117, v118, v119, v144);
              uint64_t v98 = @"InternalError";
              goto LABEL_80;
            }
            valueb = v165;
            CFDictionaryRef v120 = v150;
            if (!CFDictionaryContainsKey(v150, v97))
            {
              CFMutableDictionaryRef v121 = CFDictionaryCreateMutable(0, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              if (!v121)
              {
                sub_10001A558(0, (uint64_t)"populate_failed_value", @"Failed to create dictionary.", v122, v123, v124, v125, v126, v144);
LABEL_74:
                uint64_t v98 = @"InternalError";
                char v50 = (const void *)v159;
LABEL_80:
                CFIndex v135 = v158;
                if (v98) {
                  goto LABEL_119;
                }
                goto LABEL_81;
              }
              CFMutableDictionaryRef v127 = v121;
              CFDictionaryRef v120 = v150;
              CFDictionarySetValue(v150, v157, v121);
              CFMutableDictionaryRef v128 = v127;
              CFStringRef v97 = v157;
              char v57 = v154;
              CFRelease(v128);
            }
            CFTypeRef v129 = (void *)CFDictionaryGetValue(v120, v97);
            if (!sub_10000FE94(v129))
            {
              sub_10001A558(0, (uint64_t)"populate_failed_value", @"Invalid value, expected dictionary: %@", v130, v131, v132, v133, v134, (char)v129);
              goto LABEL_74;
            }
            CFDictionarySetValue((CFMutableDictionaryRef)v129, v64, valueb);
            BYTE4(v146) = 1;
            CFIndex v135 = v158;
            char v50 = (const void *)v159;
LABEL_81:
            CFIndex v63 = v135 + 1;
            CFIndex v49 = v155;
            if (v156 == v63) {
              goto LABEL_82;
            }
          }
          uint64_t v148 = 0;
LABEL_72:
          uint64_t v99 = (void *)value;
          goto LABEL_52;
        }
LABEL_82:
        if (++v49 == Count) {
          goto LABEL_122;
        }
      }
      sub_10001A558(0, (uint64_t)"handle_get_multiple_values", @"Invalid request keys, expected array: %@", v58, v59, v60, v61, v62, (char)v57);
LABEL_118:
      uint64_t v98 = @"GetProhibited";
      if (@"GetProhibited")
      {
LABEL_119:
        sub_100002B8C(1, (uint64_t)"handle_get_multiple_values", v26, v98);
        uint64_t v39 = 0;
        CFArrayRef v141 = v150;
        char v143 = v146;
        goto LABEL_120;
      }
LABEL_122:
      char v143 = v146;
      if ((v146 & 0x100000000) != 0)
      {
LABEL_109:
        if (a7)
        {
          CFDictionarySetValue(v33, @"Value", v161);
          uint64_t v39 = sub_10002C8D4(v18, v33, &v164);
          if (v39 && v164)
          {
            CFDictionarySetValue(v26, @"Payload", v39);
            CFDictionarySetValue(v26, @"Nonce", v164);
          }
          else
          {
            sub_100002B8C(0, (uint64_t)"handle_get_multiple_values", v26, @"InvalidResponse");
          }
        }
        else
        {
          CFDictionarySetValue(v26, @"Value", v161);
          uint64_t v39 = 0;
        }
        CFArrayRef v141 = v150;
LABEL_120:
        if (v143) {
          goto LABEL_92;
        }
        goto LABEL_91;
      }
    }
    CFDictionaryRemoveValue(v161, @"FailureValueKey");
    goto LABEL_109;
  }
  sub_10001A558(0, (uint64_t)"handle_get_multiple_values", @"Failed to create response message.", v21, v22, v23, v24, v25, v144);
  uint64_t v40 = 0;
  uint64_t v39 = 0;
LABEL_102:
  if (v164) {
    CFRelease(v164);
  }
  CFTypeRef v164 = 0;
  if (v40) {
    free(v40);
  }
LABEL_106:
}

uint64_t sub_10001C130(const __CFString *a1, const __CFString *a2, const void *a3, const void *a4, uint64_t a5, CFTypeRef *a6, uint64_t a7, uint64_t a8)
{
  char v8 = a7;
  if (a1 || (sub_10000E430(*(NSObject ***)a5, (uint64_t)a2, 0, 10, a5, (uint64_t)a6, a7, a8) & 1) != 0)
  {
    CFStringRef v15 = (const __CFString *)sub_10000FF0C(a3);
    uint64_t v16 = sub_10000FE94(a4);
    return sub_100022228((NSObject ***)a5, a2, a1, v15, v16, a6, v8);
  }
  else
  {
    int v18 = sub_100003074(*(void *)(a5 + 24));
    if (a6 && !a2 && v18 == 4) {
      *a6 = CFRetain(@"Attempting to get NULL/NULL. Please fetch explicit values!!!");
    }
    return 1;
  }
}

CFDictionaryRef sub_10001C220(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t *a4, uint64_t a5, __CFString **a6, uint64_t a7, uint64_t a8)
{
  CFMutableDictionaryRef v14 = sub_10000DCA0((uint64_t)a4, *a4, a2, a1, a5, (uint64_t)a6, a7, a8);
  if (!v14)
  {
    CFMutableDictionaryRef MutableCopy = 0;
    uint64_t v28 = off_1001878B8;
    if (!a6) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v29 = *v28;
    if (v29) {
      *a6 = v29;
    }
    goto LABEL_11;
  }
  CFDictionaryRef v15 = v14;
  if (a1
    || !sub_10000FE94(v14)
    || (sub_10000E430((NSObject **)*a4, (uint64_t)a2, 0, 10, v16, v17, v18, v19) & 1) != 0)
  {
    return v15;
  }
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v15);
  CFRelease(v15);
  if (MutableCopy)
  {
    sub_10002148C((NSObject ***)a4, a2, MutableCopy);
    CFMutableDictionaryRef v26 = sub_10002637C();
    if (v26)
    {
      CFMutableDictionaryRef v27 = v26;
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_10002269C;
      v33[3] = &unk_100186AC8;
      void v33[4] = a4;
      v33[5] = a2;
      v33[6] = a3;
      v33[7] = a5;
      v33[8] = v26;
      sub_1000261E0(MutableCopy, v33);
      CFDictionaryRef v15 = (const __CFDictionary *)CFRetain(v27);
      CFRelease(MutableCopy);
      CFRelease(v27);
      return v15;
    }
    CFStringRef v31 = @"Failed to create dictionary.";
  }
  else
  {
    CFStringRef v31 = @"Failed to copy dictionary.";
  }
  sub_10001A558(0, (uint64_t)"copy_value_for_domain_and_key", (uint64_t)v31, v21, v22, v23, v24, v25, v32);
  uint64_t v28 = off_1001879E8;
  if (a6) {
    goto LABEL_9;
  }
LABEL_11:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return 0;
}

void sub_10001C3D4(uint64_t a1, void *a2, const void *a3, const void *a4, uint64_t *a5, void *a6, uint64_t a7)
{
  id v18 = a6;
  uint64_t v105 = 0;
  CFTypeRef value = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    sub_10001A558(0, (uint64_t)"handle_get_value", @"Invalid connection.", v13, v14, v15, v16, v17, v102);
    int v34 = 0;
    CFTypeRef cf = 0;
    goto LABEL_28;
  }
  if (a7) {
    CFStringRef v19 = @"GetValueCU";
  }
  else {
    CFStringRef v19 = @"GetValue";
  }
  uint64_t v20 = sub_100002B30(v19);
  if (v20)
  {
    CFMutableDictionaryRef v26 = v20;
    CFMutableDictionaryRef v27 = sub_10000FE94(a2);
    if (!a5 || !v27)
    {
      CFStringRef v33 = @"Invalid input(s).";
      goto LABEL_14;
    }
    if (!v18 && a7)
    {
      CFStringRef v33 = @"Invalid pairing session.";
LABEL_14:
      sub_10001A558(0, (uint64_t)"handle_get_value", (uint64_t)v33, v28, v29, v30, v31, v32, v102);
      uint64_t v37 = @"GetProhibited";
      int v38 = 1;
LABEL_15:
      sub_100002B8C(v38, (uint64_t)"handle_get_value", v26, v37);
      uint64_t v45 = 0;
      CFStringRef v35 = 0;
      int v34 = 0;
      uint64_t v36 = 0;
      goto LABEL_16;
    }
    if (a7)
    {
      id v47 = sub_10002C5E0(v18, a2);
      if (v47)
      {
        a2 = v47;
        CFMutableDictionaryRef v53 = sub_10002637C();
        if (v53)
        {
          uint64_t v59 = v53;
          CFDictionaryRef theDict = v53;
          goto LABEL_36;
        }
        sub_10001A558(0, (uint64_t)"handle_get_value", @"Failed to create result.", v54, v55, v56, v57, v58, v102);
        uint64_t v69 = off_1001878A8;
      }
      else
      {
        sub_10001A558(0, (uint64_t)"handle_get_value", @"Failed to decrypt message.", v48, v49, v50, v51, v52, v102);
        uint64_t v69 = off_1001879E8;
      }
      uint64_t v37 = *v69;
      int v38 = 0;
      goto LABEL_15;
    }
    CFDictionaryRef theDict = 0;
    uint64_t v59 = v26;
LABEL_36:
    uint64_t v60 = CFDictionaryGetValue((CFDictionaryRef)a2, @"Domain");
    CFStringRef v61 = (const __CFString *)sub_10000FF0C(v60);
    uint64_t v62 = CFDictionaryGetValue((CFDictionaryRef)a2, @"Key");
    CFStringRef v68 = (const __CFString *)sub_10000FF0C(v62);
    if (v61) {
      CFDictionarySetValue(v59, @"Domain", v61);
    }
    if (v68) {
      CFDictionarySetValue(v59, @"Key", v68);
    }
    if (dword_1001B6AD0)
    {
      if (v61) {
        sub_10001A558(0, (uint64_t)"handle_get_value", @"%@ attempting to get [%@]:[%@]", v63, v64, v65, v66, v67, (char)a3);
      }
      else {
        sub_10001A558(0, (uint64_t)"handle_get_value", @"%@ attempting to get [%@]", v63, v64, v65, v66, v67, (char)a3);
      }
    }
    if (sub_10001C130(v68, v61, a3, a4, a1, (CFTypeRef *)&value, a7, v67))
    {
      if (v61
        && v68
        && CFEqual(v61, @"com.apple.mobile.wireless_lockdown")
        && CFEqual(v68, @"reset_adverts"))
      {
        CFStringRef v35 = CFRetain(kCFBooleanTrue);
        sub_100005710(a5, 1, 1, 0, v72, v73, v74, v75, v102);
        if (sub_10000E660(*a5, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", v76, v77, v78, v79, v80)|| sub_10000E660(*a5, @"com.apple.mobile.wireless_lockdown", @"EnableWifiConnections", v81, v82, v83, v84, v85))
        {
          uint64_t v36 = sub_100027608();
          char v91 = v36 != 0;
        }
        else
        {
          char v91 = 0;
          uint64_t v36 = 0;
        }
        unsigned int v92 = sub_10000E660(*a5, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", v86, v87, v88, v89, v90);
        if (((v91 & 1) != 0 || v92) && !sub_100004800(a5, (uint64_t)v36, v91, v92 != 0, 1, v93, v94, v95)) {
          CFStringRef v35 = CFRetain(kCFBooleanFalse);
        }
      }
      else
      {
        CFStringRef v35 = sub_10001C220(v68, v61, (uint64_t)a3, (uint64_t *)a1, (uint64_t)a4, &v105, v70, v71);
        uint64_t v36 = 0;
      }
      uint64_t v45 = theDict;
      if (v35)
      {
        if (a7)
        {
          CFDictionarySetValue(theDict, @"Value", v35);
          int v34 = sub_10002C8D4(v18, theDict, &cf);
          if (v34 && cf)
          {
            CFDictionarySetValue(v26, @"Payload", v34);
            CFDictionarySetValue(v26, @"Nonce", cf);
          }
          else
          {
            sub_10001A558(0, (uint64_t)"handle_get_value", @"Failed to encrypt message.", v96, v97, v98, v99, v100, v102);
            sub_100002B8C(0, (uint64_t)"handle_get_value", v26, @"InvalidResponse");
          }
          goto LABEL_16;
        }
        CFDictionarySetValue(v26, @"Value", v35);
      }
      else
      {
        if (v105) {
          CFMutableDictionaryRef v101 = v105;
        }
        else {
          CFMutableDictionaryRef v101 = @"InternalError";
        }
        sub_100002B8C(1, (uint64_t)"handle_get_value", v26, v101);
      }
      int v34 = 0;
    }
    else
    {
      sub_100002B8C(1, (uint64_t)"handle_get_value", v26, @"GetProhibited");
      CFStringRef v35 = 0;
      int v34 = 0;
      uint64_t v36 = 0;
      uint64_t v45 = theDict;
    }
LABEL_16:
    if (value)
    {
      CFStringRef v46 = @"unknown";
      if (a3) {
        LOBYTE(v46) = (_BYTE)a3;
      }
      sub_10001A558(0, (uint64_t)"handle_get_value", @"Warning (%@): %@", v40, v41, v42, v43, v44, (char)v46);
      CFDictionarySetValue(v26, @"Warning", value);
    }
    sub_1000029C0(*(void *)(a1 + 24), v26, v39, v40, v41, v42, v43, v44, v102);
    if (v45) {
      CFRelease(v45);
    }
    goto LABEL_22;
  }
  sub_10001A558(0, (uint64_t)"handle_get_value", @"Failed to create response message.", v21, v22, v23, v24, v25, v102);
  CFStringRef v35 = 0;
  int v34 = 0;
  uint64_t v36 = 0;
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  if (v36) {
    free(v36);
  }
  if (v35) {
    CFRelease(v35);
  }
LABEL_28:
  if (value) {
    CFRelease(value);
  }
  CFTypeRef value = 0;
}

void sub_10001C97C(uint64_t a1, const void *a2, const __CFString *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1)
  {
    uint64_t v13 = sub_100002B30(@"SetValue");
    if (v13)
    {
      uint64_t v14 = v13;
      if (!sub_10000FE94(a2))
      {
        sub_100002B8C(1, (uint64_t)"handle_set_value", v14, @"SetProhibited");
        CFDictionarySetValue(v14, @"Warning", @"Invalid message.");
LABEL_22:
        unint64_t v45 = *(void *)(a1 + 24);
        sub_1000029C0(v45, v14, v39, v40, v41, v42, v43, v44, a9);
        return;
      }
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"Key");
      CFStringRef v16 = (const __CFString *)sub_10000FF0C(Value);
      uint64_t v17 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"Value");
      CFTypeID v18 = CFGetTypeID(v17);
      if (!v16 || !v17)
      {
        uint64_t v37 = off_1001878B0;
        goto LABEL_21;
      }
      CFTypeID v19 = v18;
      uint64_t v20 = CFDictionaryGetValue((CFDictionaryRef)a2, @"Domain");
      CFStringRef v21 = (const __CFString *)sub_10000FF0C(v20);
      if (dword_1001B6AD0)
      {
        uint64_t v22 = sub_10000FF0C(a3);
        CFStringRef v28 = @"unknown";
        if (v22) {
          LOBYTE(v28) = (_BYTE)a3;
        }
        CFTypeID v156 = v19;
        sub_10001A558(0, (uint64_t)"handle_set_value", @"%@ attempting to set [%@]:[%@] to [%@] of type %ld", v23, v24, v25, v26, v27, (char)v28);
      }
      CFDictionarySetValue(v14, @"Key", v16);
      CFDictionarySetValue(v14, @"Value", v17);
      if (v21) {
        CFDictionarySetValue(v14, @"Domain", v21);
      }
      if (sub_10000E430(*(NSObject ***)a1, (uint64_t)v21, (uint64_t)v16, 1, v29, v30, v31, v32))
      {
        uint64_t v37 = off_1001878C8;
LABEL_21:
        sub_100002B8C(1, (uint64_t)"handle_set_value", v14, *v37);
        goto LABEL_22;
      }
      if (sub_10000E430(*(NSObject ***)a1, (uint64_t)v21, (uint64_t)v16, 9, v33, v34, v35, v36)
        && sub_100027D14(*(void *)a1, v46, v47, v48, v49, v50, v51, v52)
        && MKBGetDeviceLockState() == 3)
      {
        uint64_t v37 = off_1001879D8;
        goto LABEL_21;
      }
      if (sub_100003074(*(void *)(a1 + 24)) == 4)
      {
        uint64_t v57 = sub_10000FF0C(a3);
        CFDictionaryRef v58 = (const __CFDictionary *)sub_10000FE94(a4);
        if (sub_100026F6C(a1, v57, v58, (uint64_t)v21, (uint64_t)v16, 7))
        {
          CFStringRef v59 = 0;
          int v60 = 1;
        }
        else
        {
          BOOL v61 = sub_10001D290((uint64_t *)a1);
          BOOL v62 = v61;
          CFStringRef v63 = @"NULL";
          if (a3) {
            CFStringRef v64 = a3;
          }
          else {
            CFStringRef v64 = @"NULL";
          }
          if (v21) {
            CFStringRef v63 = v21;
          }
          uint64_t v65 = " (non-fatal for now)";
          if (v61) {
            uint64_t v65 = "";
          }
          CFStringRef v59 = CFStringCreateWithFormat(0, 0, @"client %@'s entitlement plist must have a com.apple.private.lockdown.finegrained-set key whose value is an array containing the string %@/%@%s", v64, v63, v16, v65, v156);
          int v60 = !v62;
        }
      }
      else
      {
        int v60 = 0;
        CFStringRef v59 = 0;
      }
      if (sub_10000E430(*(NSObject ***)a1, (uint64_t)v21, (uint64_t)v16, 2, v53, v54, v55, v56)) {
        int v70 = 1;
      }
      else {
        int v70 = sub_10000E430(*(NSObject ***)a1, (uint64_t)v21, (uint64_t)v16, 3, v66, v67, v68, v69);
      }
      if (*(void *)(a1 + 48)) {
        int v71 = v70 ^ 1;
      }
      else {
        int v71 = 0;
      }
      if ((sub_10000E430(*(NSObject ***)a1, (uint64_t)v21, (uint64_t)v16, 8, v66, v67, v68, v69) & 1) == 0
        && !(v60 | v71))
      {
        goto LABEL_49;
      }
      if (v21)
      {
        if (CFEqual(v21, @"com.apple.mobile.internal")
          && (sub_100029FC8() & 1) == 0
          && CFEqual(v16, @"VoidWarranty"))
        {
          goto LABEL_49;
        }
        if (CFEqual(v21, @"com.apple.mobile.iTunes"))
        {
          sub_10000FF0C(v16);
          uint64_t v80 = (const void *)MCCopyCheckpointValue();
          if (v80)
          {
            CFRelease(v80);
LABEL_49:
            uint64_t v72 = off_1001878C8;
            goto LABEL_50;
          }
        }
        if (!CFEqual(v21, @"com.apple.international"))
        {
LABEL_127:
          if (!sub_10001D360(a1, v21, v16, v17))
          {
            sub_10000D5A8(*(void *)a1, (uint64_t)v21, (uint64_t)v16, (uint64_t)v17, v150, v151, v152, v153);
            if (!v59) {
              goto LABEL_22;
            }
LABEL_51:
            CFStringRef v73 = @"unknown";
            if (a3) {
              LOBYTE(v73) = (_BYTE)a3;
            }
            sub_10001A558(0, (uint64_t)"handle_set_value", @"Warning (%@): %@", v40, v41, v42, v43, v44, (char)v73);
            CFDictionarySetValue(v14, @"Warning", v59);
            sub_1000029C0(*(void *)(a1 + 24), v14, v74, v75, v76, v77, v78, v79, v155);
            CFRelease(v59);
            return;
          }
          uint64_t v72 = off_1001879E8;
LABEL_50:
          sub_100002B8C(1, (uint64_t)"handle_set_value", v14, *v72);
          if (!v59) {
            goto LABEL_22;
          }
          goto LABEL_51;
        }
        sub_1000122EC(*(NSObject ***)a1);
        if (!CFEqual(v16, @"Language"))
        {
          uint64_t v89 = 0;
          goto LABEL_86;
        }
        if (sub_10000FF0C(v17))
        {
          uint64_t v89 = (const void *)sub_10000DF38(*(void *)a1, @"com.apple.international", @"SupportedLanguages");
          if (!sub_10000FED0(v89))
          {
            CFStringRef v148 = @"Failed to lookup supported languages.";
            goto LABEL_107;
          }
          v160.length = CFArrayGetCount((CFArrayRef)v89);
          v160.location = 0;
          uint64_t v95 = CFArrayContainsValue((CFArrayRef)v89, v160, v17);
          if (!v95)
          {
            sub_10001A558(v95, (uint64_t)"verify_set", @"Unsupported language: %@", v96, v97, v98, v99, v100, (char)v17);
LABEL_108:
            char v112 = 0;
            CFStringRef v136 = 0;
            CFTypeRef cf = 0;
LABEL_119:
            if (v89) {
              CFRelease(v89);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (!v136)
            {
LABEL_126:
              if ((v112 & 1) == 0) {
                goto LABEL_49;
              }
              goto LABEL_127;
            }
            CFStringRef v134 = v136;
LABEL_125:
            CFRelease(v134);
            goto LABEL_126;
          }
LABEL_86:
          if (!CFEqual(v16, @"Locale"))
          {
            CFStringRef v157 = v89;
            CFTypeRef cf = 0;
            CFStringRef v121 = v17;
            goto LABEL_100;
          }
          if (sub_10000FF0C(v17))
          {
            CFStringRef v157 = v89;
            CFStringRef v115 = sub_100007FB0(v17, v113, v114, v90, v91, v92, v93, v94);
            if (!v115)
            {
              sub_10001A558(0, (uint64_t)"verify_set", @"Failed to transform locale.", v116, v117, v118, v119, v120, v154);
              char v112 = 0;
              CFStringRef v136 = 0;
              CFTypeRef cf = 0;
              goto LABEL_118;
            }
            CFStringRef v121 = v115;
            uint64_t v122 = (const void *)sub_10000DF38(*(void *)a1, @"com.apple.international", @"SupportedLocales");
            CFTypeRef cf = v122;
            if (!sub_10000FED0(v122))
            {
              CFStringRef v149 = @"Failed to lookup supported languages.";
              goto LABEL_114;
            }
            v161.length = CFArrayGetCount((CFArrayRef)v122);
            v161.location = 0;
            uint64_t v128 = CFArrayContainsValue((CFArrayRef)v122, v161, v121);
            if (!v128)
            {
              sub_10001A558(v128, (uint64_t)"verify_set", @"Unsupported locale: %@", v129, v130, v131, v132, v133, (char)v121);
LABEL_115:
              char v112 = 0;
              CFStringRef v136 = 0;
              goto LABEL_118;
            }
LABEL_100:
            if (!CFEqual(v16, @"Keyboard"))
            {
              CFStringRef v136 = 0;
LABEL_110:
              char v112 = 1;
LABEL_118:
              uint64_t v89 = v157;
              goto LABEL_119;
            }
            if (sub_10000FF0C(v121))
            {
              CFStringRef v135 = sub_100008150(v121);
              CFStringRef v136 = (const __CFString *)sub_10000DF38(*(void *)a1, @"com.apple.international", @"SupportedKeyboards");
              if (!sub_10000FED0(v136))
              {
                sub_10001A558(0, (uint64_t)"verify_set", @"Failed to lookup supported keyboards.", v137, v138, v139, v140, v141, v154);
                goto LABEL_117;
              }
              v162.length = CFArrayGetCount((CFArrayRef)v136);
              v162.location = 0;
              uint64_t v142 = CFArrayContainsValue((CFArrayRef)v136, v162, v135);
              if (!v142)
              {
                sub_10001A558(v142, (uint64_t)"verify_set", @"Unsupported keyboard: %@", v143, v144, v145, v146, v147, (char)v135);
LABEL_117:
                char v112 = 0;
                goto LABEL_118;
              }
              goto LABEL_110;
            }
            CFStringRef v149 = @"Invalid keyboard type..";
LABEL_114:
            sub_10001A558(0, (uint64_t)"verify_set", (uint64_t)v149, v123, v124, v125, v126, v127, v154);
            goto LABEL_115;
          }
          CFStringRef v148 = @"Invalid locale type.";
LABEL_107:
          sub_10001A558(0, (uint64_t)"verify_set", (uint64_t)v148, v90, v91, v92, v93, v94, v154);
          goto LABEL_108;
        }
        CFStringRef v88 = @"Invalid language type.";
LABEL_94:
        sub_10001A558(0, (uint64_t)"verify_set", (uint64_t)v88, v82, v83, v84, v85, v86, v154);
        goto LABEL_49;
      }
      if (CFEqual(v16, @"DeviceName"))
      {
        if (!a4
          || sub_100003074(*(void *)(a1 + 24)) != 4
          || (uint64_t v81 = CFDictionaryGetValue((CFDictionaryRef)a4, @"com.apple.private.lockdown.ignore-mc-name-restriction"), !sub_10000FF84(v81))|| !CFEqual(v81, kCFBooleanTrue))
        {
          if ((sub_1000278B0() & 1) == 0)
          {
            CFStringRef v88 = @"MC is preventing name change.";
            goto LABEL_94;
          }
        }
        if (!sub_10000FF0C(v17))
        {
          CFStringRef v88 = @"Invalid value type.";
          goto LABEL_94;
        }
        CFStringRef v87 = sub_100006D9C(v17);
        if (!v87)
        {
          CFStringRef v88 = @"Failed to sanitize device name.";
          goto LABEL_94;
        }
      }
      else
      {
        CFStringRef v87 = 0;
      }
      if (CFEqual(v16, @"UntrustedHostBUID"))
      {
        if (!sub_10000FF0C(v17))
        {
          sub_10001A558(0, (uint64_t)"verify_set", @"Invalid value type.", v101, v102, v103, v104, v105, v154);
          goto LABEL_96;
        }
        CFIndex Length = CFStringGetLength(v17);
        if (Length >= 51)
        {
          sub_10001A558(0, (uint64_t)"verify_set", @"Invalid string length: %lld", v107, v108, v109, v110, v111, Length);
LABEL_96:
          char v112 = 0;
          goto LABEL_97;
        }
      }
      char v112 = 1;
LABEL_97:
      if (!v87) {
        goto LABEL_126;
      }
      CFStringRef v134 = v87;
      goto LABEL_125;
    }
    CFStringRef v38 = @"Failed to create response message.";
  }
  else
  {
    CFStringRef v38 = @"Invalid connection.";
  }

  sub_10001A558(0, (uint64_t)"handle_set_value", (uint64_t)v38, (uint64_t)a4, a5, a6, a7, a8, a9);
}

BOOL sub_10001D290(uint64_t *a1)
{
  id v1 = (const void *)sub_10000DF38(*a1, 0, @"SecureCopyValue");
  if (!sub_10000FF0C(v1)) {
    goto LABEL_9;
  }
  sub_10001A558(0, (uint64_t)"enforce_fine_grained_entitlements", @"we got a value for SCV", v2, v3, v4, v5, v6, v16);
  int v7 = CFEqual(v1, @"SCVEnabled");
  BOOL v13 = v7 != 0;
  if (v7)
  {
    CFStringRef v14 = @"and it was true! So entitlements are now being tested";
    goto LABEL_6;
  }
  if (!CFEqual(v1, @"SCVDisabled"))
  {
LABEL_9:
    BOOL v13 = 0;
    if (!v1) {
      return v13;
    }
    goto LABEL_7;
  }
  CFStringRef v14 = @"and it was false! So entitlements are now NOT being tested";
LABEL_6:
  sub_10001A558(0, (uint64_t)"enforce_fine_grained_entitlements", (uint64_t)v14, v8, v9, v10, v11, v12, v17);
  if (v1) {
LABEL_7:
  }
    CFRelease(v1);
  return v13;
}

uint64_t sub_10001D360(uint64_t a1, const __CFString *cf1, const __CFString *a3, __CFString *a4)
{
  uint64_t v6 = *(NSObject ***)a1;
  if (cf1)
  {
    if (CFEqual(cf1, @"com.apple.international"))
    {
      if (CFEqual(a3, @"Language"))
      {
        uint64_t v9 = sub_10000FF0C(a4);
        sub_100007A9C((uint64_t)v6, v9, v10, v11, v12, v13, v14, v15, v320);
        char v16 = sub_10000FF0C(a4);
        sub_100007E24(v16, v17, v18, v19, v20, v21, v22, v23, v321);
        uint64_t v24 = sub_10000FF0C(a4);
        sub_100007D54(v24, v25, v26, v27, v28, v29, v30, v31, v322);
      }
      if (CFEqual(a3, @"Locale"))
      {
        CFStringRef v32 = (const __CFString *)sub_10000FF0C(a4);
        CFStringRef v40 = sub_100007FB0(v32, v33, v34, v35, v36, v37, v38, v39);
        sub_10000800C((uint64_t)v6, v40, v41, v42, v43, v44, v45, v46, v320);
      }
      if (CFEqual(a3, @"Keyboard"))
      {
        CFStringRef v47 = (const __CFString *)sub_10000FF0C(a4);
        CFStringRef v48 = sub_100008150(v47);
        sub_10000819C((uint64_t)v6, v48, v49, v50, v51, v52, v53, v54, v320);
      }
    }
    if (CFEqual(cf1, @"com.apple.fairplay"))
    {
      if (CFEqual(a3, @"RentalBagResponse")) {
        sub_100008A78(v6);
      }
      if (CFEqual(a3, @"RentalCheckinAckRequest"))
      {
        uint64_t v55 = sub_10000FF48(a4);
        sub_100008C7C(v6, v55);
      }
    }
    if (CFEqual(cf1, @"com.apple.mobile.debug"))
    {
      if (CFEqual(a3, @"EnableVPNLogs"))
      {
        uint64_t v56 = sub_10000FF84(a4);
        sub_100009BA8(v56, v57, v58, v59, v60, v61, v62, v63, v320);
      }
      uint64_t v64 = CFEqual(a3, @"RemoveVPNLogs");
      if (v64) {
        sub_100009D9C(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      if (CFEqual(a3, @"EnableCLTMLogs"))
      {
        uint64_t v72 = sub_10000FF84(a4);
        sub_10000A174(v72, v73, v74, v75, v76, v77, v78, v79, v320);
      }
      uint64_t v80 = CFEqual(a3, @"RemoveCLTMLogs");
      if (v80) {
        sub_10000A2A4(v80, v81, v82, v83, v84, v85, v86, v87);
      }
      if (CFEqual(a3, @"EnableCLTMTGraphLogs"))
      {
        CFStringRef v88 = sub_10000FF84(a4);
        sub_10000A33C(v88, v89, v90, v91, v92, v93, v94, v95, v320);
      }
      uint64_t v96 = CFEqual(a3, @"RemoveCLTMTGraphLogs");
      if (v96) {
        sub_10000A46C(v96, v97, v98, v99, v100, v101, v102, v103);
      }
      if (CFEqual(a3, @"EnableCLTMThermstatLogs"))
      {
        uint64_t v104 = sub_10000FF84(a4);
        sub_10000A504(v104, v105, v106, v107, v108, v109, v110, v111, v320);
      }
      uint64_t v112 = CFEqual(a3, @"RemoveCLTMThermstatLogs");
      if (v112) {
        sub_10000A61C(v112, v113, v114, v115, v116, v117, v118, v119);
      }
      if (CFEqual(a3, @"EnableMediaStreamLogs"))
      {
        uint64_t v120 = sub_10000FF84(a4);
        sub_10000B504(v120, v121, v122, v123, v124, v125, v126, v127, v320);
      }
      if (CFEqual(a3, @"EnableWiFiManagerLogs"))
      {
        uint64_t v128 = sub_10000FF84(a4);
        sub_10000A6B4(v128, v129, v130, v131, v132, v133, v134, v135, v320);
      }
      uint64_t v136 = CFEqual(a3, @"RemoveWiFiManagerLogs");
      if (v136) {
        sub_10000A780(v136, v137, v138, v139, v140, v141, v142, v143);
      }
      if (CFEqual(a3, @"Enable8021XLogs"))
      {
        uint64_t v144 = sub_10000FF84(a4);
        sub_100009EC4(v144, v145, v146, v147, v148, v149, v150, v151, v320);
      }
      uint64_t v152 = CFEqual(a3, @"Remove8021XLogs");
      if (v152) {
        sub_10000A04C(v152, v153, v154, v155, v156, v157, v158, v159);
      }
      if (CFEqual(a3, @"EnableLockdownLogToDisk"))
      {
        CFRange v160 = sub_10000FF84(a4);
        sub_10000A818(v160, v161, v162, v163, v164, v165, v166, v167, v320);
      }
      if (CFEqual(a3, @"EnableLockdownExtendedLogging"))
      {
        uint64_t v168 = sub_10000FF84(a4);
        sub_10000A994(v168, v169, v170, v171, v172, v173, v174, v175, v320);
      }
      uint64_t v176 = CFEqual(a3, @"RemoveLockdownLog");
      if (v176) {
        sub_10000B70C(v176, v177, v178, v179, v180, v181, v182, v183);
      }
      if (CFEqual(a3, @"EnableRaptorCerts"))
      {
        uint64_t v184 = sub_10000FF84(a4);
        sub_10000AAD0(v184, (uint64_t)v6, v185, v186, v187, v188, v189, v190, v320);
      }
    }
    if (CFEqual(cf1, @"com.apple.mobile.demo") && CFEqual(a3, @"EnableTetheredDisplayPortMode"))
    {
      CFBooleanRef v191 = (const __CFBoolean *)sub_10000FF84(a4);
      sub_1000079A0(v191);
    }
    if (CFEqual(cf1, @"com.apple.MobileSystemServices"))
    {
      sub_10002DB80(a3, a4);
      sub_10000E184((uint64_t)v6, (uint64_t)cf1, (uint64_t)a3, v192, v193, v194, v195, v196);
    }
    if (CFEqual(cf1, @"com.apple.purplebuddy")
      && sub_100003074(*(void *)(a1 + 24)) == 4
      && CFEqual(a3, @"SetupState"))
    {
      sub_1000237B0(v6, v197, v198, v199, v200, v201, v202, v203);
    }
    if (CFEqual(cf1, @"com.apple.Accessibility"))
    {
      _AXSAccessibilitySetiTunesPreference();
      uint64_t v204 = sub_10000FF0C(a3);
      sub_10000E184((uint64_t)v6, (uint64_t)cf1, (uint64_t)v204, v205, v206, v207, v208, v209);
    }
    if (CFEqual(cf1, @"com.apple.AssetCacheTetherator"))
    {
      CFStringRef v210 = (const __CFString *)sub_10000FF0C(a3);
      sub_10001AAC4(v210, a4, @"com.apple.AssetCacheTetherator", v211, v212, v213, v214, v215);
      uint64_t v216 = sub_10000FF0C(a3);
      sub_10000E184((uint64_t)v6, (uint64_t)cf1, (uint64_t)v216, v217, v218, v219, v220, v221);
    }
    if (CFEqual(cf1, @"com.apple.MobileDeviceCrashCopy"))
    {
      CFStringRef v222 = (const __CFString *)sub_10000FF0C(a3);
      sub_100002EE4(v222, a4);
      uint64_t v223 = sub_10000FF0C(a3);
      sub_10000E184((uint64_t)v6, (uint64_t)cf1, (uint64_t)v223, v224, v225, v226, v227, v228);
    }
    if (CFEqual(cf1, @"com.apple.purplebuddy"))
    {
      CFStringRef v229 = (const __CFString *)sub_10000FF0C(a3);
      sub_10001AAC4(v229, a4, @"com.apple.purplebuddy", v230, v231, v232, v233, v234);
      uint64_t v235 = sub_10000FF0C(a3);
      sub_10000E184((uint64_t)v6, (uint64_t)cf1, (uint64_t)v235, v236, v237, v238, v239, v240);
    }
    if (CFEqual(cf1, @"com.apple.mobileipod"))
    {
      CFStringRef v241 = (const __CFString *)sub_10000FF0C(a3);
      sub_10001AAC4(v241, a4, @"com.apple.mobileipod.mobile-preferences-proxy", v242, v243, v244, v245, v246);
      uint64_t v247 = sub_10000FF0C(a3);
      sub_10000E184((uint64_t)v6, (uint64_t)cf1, (uint64_t)v247, v248, v249, v250, v251, v252);
    }
    if (CFEqual(cf1, @"com.apple.mobile.user_preferences"))
    {
      if (CFEqual(a3, @"FileSharingEnabled"))
      {
        CFBooleanRef v253 = (const __CFBoolean *)sub_10000FF84(a4);
        sub_10000C200(v253, v254, v255, v256, v257, v258, v259, v260, v320);
      }
      else if (CFEqual(@"DiagnosticsAllowed", a3))
      {
        uint64_t v296 = sub_10000FF84(a4);
        sub_100005C70(v296, v297, v298, v299, v300, v301, v302, v303, v320);
        sub_100010480(@"com.apple.iqagent.IQAllowedChangeNotification");
      }
      else
      {
        if (!sub_10001321C(cf1, a3, a4, v291, v292, v293, v294, v295)) {
          return 0xFFFFFFFFLL;
        }
        sub_10000E184((uint64_t)v6, (uint64_t)cf1, (uint64_t)a3, v304, v305, v306, v307, v308);
      }
    }
    if (CFEqual(cf1, @"com.apple.mobile.backup"))
    {
      sub_10001AAC4(a3, a4, @"com.apple.mobile.ldbackup", v309, v310, v311, v312, v313);
      sub_10000E184((uint64_t)v6, (uint64_t)cf1, (uint64_t)a3, v314, v315, v316, v317, v318);
      sub_100010480(@"com.apple.mobile.backup.domain_changed");
    }
    if (!CFEqual(cf1, @"com.apple.securityd.ae")
      || !CFEqual(a3, @"AEToken")
      || !sub_10000FF0C(a4)
      || sub_100023C04(a4))
    {
      return 0;
    }
  }
  else
  {
    if (CFEqual(a3, @"DeviceName")) {
      sub_100007100(a4, v261, v262, v263, v264, v265, v266, v267);
    }
    if (!CFEqual(a3, @"TimeIntervalSince1970")
      || (CFNumberRef v268 = (const __CFNumber *)sub_10000FE58(a4),
          !sub_100007674((int)v6, v268, v269, v270, v271, v272, v273, v274)))
    {
      if (!CFEqual(a3, @"TimeZone")
        || (CFStringRef v275 = (const __CFString *)sub_10000FF0C(a4),
            !sub_100007788((int)v6, v275, v276, v277, v278, v279, v280, v281)))
      {
        if (!CFEqual(a3, @"Uses24HourClock")
          || (uint64_t v282 = sub_10000FF84(a4), !sub_1000078DC(v282, v283, v284, v285, v286, v287, v288, v289)))
        {
          if (CFEqual(a3, @"UntrustedHostBUID"))
          {
            uint64_t v290 = sub_10000FF0C(a4);
            sub_100016A28((uint64_t)v290);
          }
          return 0;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_10001DB24(uint64_t a1, const void *a2, const __CFString *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13 = sub_100002B30(@"RemoveValue");
  if (!sub_10000FE94(a2))
  {
    sub_100002B8C(1, (uint64_t)"handle_remove_value", v13, @"RemoveProhibited");
    CFDictionarySetValue(v13, @"Warning", @"hinky message passed in");
    goto LABEL_41;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"Key");
  uint64_t v15 = sub_10000FF0C(Value);
  if (!v15)
  {
    sub_100002B8C(1, (uint64_t)"handle_remove_value", v13, @"MissingValue");
    goto LABEL_41;
  }
  char v16 = v15;
  uint64_t v17 = CFDictionaryGetValue((CFDictionaryRef)a2, @"Domain");
  CFStringRef v18 = (const __CFString *)sub_10000FF0C(v17);
  if (dword_1001B6AD0)
  {
    if (sub_10000FF0C(a3)) {
      LOBYTE(v24) = (_BYTE)a3;
    }
    else {
      CFStringRef v24 = @"unknown";
    }
    sub_10001A558(0, (uint64_t)"handle_remove_value", @"%@ attempting to remove [%@]:[%@]", v19, v20, v21, v22, v23, (char)v24);
  }
  CFDictionarySetValue(v13, @"Key", v16);
  if (v18) {
    CFDictionarySetValue(v13, @"Domain", v18);
  }
  if (sub_10000E430(*(NSObject ***)a1, (uint64_t)v18, (uint64_t)v16, 2, v25, v26, v27, v28)) {
    int v33 = 1;
  }
  else {
    int v33 = sub_10000E430(*(NSObject ***)a1, (uint64_t)v18, (uint64_t)v16, 3, v29, v30, v31, v32);
  }
  if ((sub_10000E430(*(NSObject ***)a1, (uint64_t)v18, (uint64_t)v16, 1, v29, v30, v31, v32) & 1) == 0)
  {
    if (sub_100003074(*(void *)(a1 + 24)) == 4)
    {
      uint64_t v46 = sub_10000FF0C(a3);
      CFDictionaryRef v47 = (const __CFDictionary *)sub_10000FE94(a4);
      if (sub_100026F6C(a1, v46, v47, (uint64_t)v18, (uint64_t)v16, 8))
      {
        CFStringRef v40 = 0;
        goto LABEL_34;
      }
      BOOL v48 = sub_10001D290((uint64_t *)a1);
      if (sub_10000FF0C(a3)) {
        CFStringRef v49 = a3;
      }
      else {
        CFStringRef v49 = @"unknown";
      }
      CFStringRef v50 = @"NULL";
      if (v18) {
        CFStringRef v50 = v18;
      }
      uint64_t v51 = " (non-fatal for now)";
      if (v48) {
        uint64_t v51 = "";
      }
      CFStringRef v40 = CFStringCreateWithFormat(0, 0, @"client %@'s entitlement plist must have a com.apple.private.lockdown.finegrained-remove key whose value is an array containing the string %@/%@%s", v49, v50, v16, v51);
    }
    else
    {
      CFStringRef v40 = 0;
      LOBYTE(v48) = 1;
    }
    if (*(void *)(a1 + 48)) {
      int v52 = v33;
    }
    else {
      int v52 = 1;
    }
    if (v52 == 1 && v48) {
      goto LABEL_35;
    }
LABEL_34:
    if (!sub_10000E184(*(void *)a1, (uint64_t)v18, (uint64_t)v16, v41, v42, v43, v44, v45)) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  sub_100002B8C(1, (uint64_t)"handle_remove_value", v13, @"ImmutableValue");
  CFStringRef v40 = 0;
LABEL_35:
  sub_100002B8C(1, (uint64_t)"handle_remove_value", v13, @"RemoveProhibited");
LABEL_36:
  if (v40)
  {
    if (a3) {
      LOBYTE(v53) = (_BYTE)a3;
    }
    else {
      CFStringRef v53 = @"unknown";
    }
    sub_10001A558(0, (uint64_t)"handle_remove_value", @"Warning (%@): %@", v35, v36, v37, v38, v39, (char)v53);
    CFDictionarySetValue(v13, @"Warning", v40);
    CFRelease(v40);
  }
LABEL_41:
  unint64_t v54 = *(void *)(a1 + 24);

  sub_1000029C0(v54, v13, v34, v35, v36, v37, v38, v39, a9);
}

void sub_10001DE88(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0)
  {
    CFStringRef v11 = @"unknown";
    if (a4) {
      LOBYTE(v11) = a4;
    }
    sub_10001A558(0, (uint64_t)"handle_unpair", @"Preparing to unpair for %@.", a4, a5, a6, a7, a8, (char)v11);
  }
  uint64_t v12 = sub_100002B30(@"Unpair");
  if (!sub_10000FE94(a2))
  {
    sub_10001A558(0, (uint64_t)"handle_unpair", @"Invalid message.", v13, v14, v15, v16, v17, v53);
    uint64_t v19 = off_1001878B8;
LABEL_16:
    CFStringRef v18 = *v19;
    goto LABEL_17;
  }
  if (!a1)
  {
    sub_10001A558(0, (uint64_t)"handle_unpair", @"Invalid input.", v13, v14, v15, v16, v17, v53);
    sub_100002B8C(1, (uint64_t)"handle_unpair", v12, @"MissingValue");
    CFDictionaryRef v26 = 0;
    goto LABEL_22;
  }
  if (sub_100003074(*(void *)(a1 + 24)) != 1
    && sub_100003074(*(void *)(a1 + 24)) != 3
    && sub_100003074(*(void *)(a1 + 24)) != 2
    && sub_100003074(*(void *)(a1 + 24)) != 4)
  {
    char v46 = sub_100003074(*(void *)(a1 + 24));
    sub_10001A558(0, (uint64_t)"handle_unpair", @"Invalid connection type for unpairing: %d", v47, v48, v49, v50, v51, v46);
    uint64_t v19 = off_1001879E0;
    goto LABEL_16;
  }
  if (sub_100003074(*(void *)(a1 + 24)) == 4
    && (!sub_10000FE94(a3)
     || CFDictionaryGetValue((CFDictionaryRef)a3, @"com.apple.private.lockdown.unpair") != kCFBooleanTrue))
  {
    CFStringRef v18 = @"RemoveProhibited";
LABEL_17:
    sub_100002B8C(1, (uint64_t)"handle_unpair", v12, v18);
    CFDictionaryRef v26 = 0;
    goto LABEL_18;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"PairRecord");
  if (!sub_10000FE94(Value))
  {
    sub_10001A558(0, (uint64_t)"handle_unpair", @"Request missing pair record.", v28, v29, v30, v31, v32, v53);
    uint64_t v19 = off_100187988;
    goto LABEL_16;
  }
  CFStringRef v33 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, @"HostID");
  if (!sub_10000FF0C(v33))
  {
    sub_10001A558(0, (uint64_t)"handle_unpair", @"Request missing host id.", v34, v35, v36, v37, v38, v53);
    uint64_t v19 = off_100187928;
    goto LABEL_16;
  }
  CFDictionaryRef v26 = (const __CFDictionary *)sub_100015268(v33);
  if (v26)
  {
    CFBooleanRef v44 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a2, @"ResetTrustPrompt");
    if (sub_10000FF84(v44)) {
      char v45 = CFBooleanGetValue(v44) != 0;
    }
    else {
      char v45 = 0;
    }
    sub_1000153B0((uint64_t)v33, v45);
    sub_10002944C(v33);
    sub_10001E20C(*(NSObject ***)a1, 0);
    int v52 = CFDictionaryGetValue(v26, @"SystemBUID");
    if (sub_10000FF0C(v52)) {
      sub_1000134A4((uint64_t)v52, 1, 1, 0);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"handle_unpair", @"Failed to load pair record for %@.", v39, v40, v41, v42, v43, (char)v33);
    sub_100002B8C(1, (uint64_t)"handle_unpair", v12, @"InvalidHostID");
  }
LABEL_18:
  if (a1 && v12)
  {
    sub_1000029C0(*(void *)(a1 + 24), v12, v20, v21, v22, v23, v24, v25, v53);
    goto LABEL_24;
  }
LABEL_22:
  if (v12) {
    CFRelease(v12);
  }
LABEL_24:
  if (v26)
  {
    CFRelease(v26);
  }
}

void sub_10001E20C(NSObject **a1, int a2)
{
  uint64_t v4 = (const void *)sub_10000DF38((uint64_t)a1, 0, @"TrustedHostAttached");
  uint64_t v5 = sub_10000FF84(v4);
  uint64_t v10 = (CFTypeRef *)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v10 = (CFTypeRef *)&kCFBooleanFalse;
  }
  CFTypeRef v11 = *v10;
  if (!v5 || !CFEqual(v4, *v10))
  {
    sub_10000E2FC(a1, 0, @"TrustedHostAttached", 1, v6, v7, v8, v9);
    sub_10000D5A8((uint64_t)a1, 0, @"TrustedHostAttached", (uint64_t)v11, v12, v13, v14, v15);
    sub_100010480(@"com.apple.mobile.lockdown.trusted_host_attached");
    sub_100010480(@"com.apple.mobile.lockdown.trusted_ptp_attached");
    if (a2)
    {
      if (!sub_100013EEC()) {
        sub_10001A558(0, (uint64_t)"set_trusted_host", @"Failed to reset USB RM policy.", v16, v17, v18, v19, v20, v21);
      }
    }
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_10001E328(uint64_t a1, const __CFDictionary *a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (dword_1001B6AD0)
  {
    CFStringRef v12 = @"unknown";
    if (a3) {
      LOBYTE(v12) = a3;
    }
    sub_10001A558(0, (uint64_t)"handle_reset_pair", @"Preparing to reset pairing for %@.", (uint64_t)a4, a5, a6, a7, a8, (char)v12);
  }
  uint64_t v18 = sub_100002B30(@"ResetPairing");
  if (a1)
  {
    if (sub_100003074(*(void *)(a1 + 24)) == 4
      && sub_10000FE94(a4)
      && CFDictionaryGetValue((CFDictionaryRef)a4, @"com.apple.private.lockdown.reset-pairing") == kCFBooleanTrue)
    {
      CFNumberRef Value = CFDictionaryGetValue(a2, @"FullReset");
      CFBooleanRef v28 = (const __CFBoolean *)sub_10000FF84(Value);
      if (sub_10000FF84(v28))
      {
        char v29 = CFBooleanGetValue(v28) != 0;
        sub_1000145A8(v29);
        sub_100029580();
        sub_100012210(1, v30, v31, v32, v33, v34, v35, v36, v37);
        if (!v18) {
          return;
        }
        goto LABEL_11;
      }
      uint64_t v19 = off_1001878B8;
    }
    else
    {
      uint64_t v19 = off_1001878D0;
    }
    sub_100002B8C(1, (uint64_t)"handle_reset_pair", v18, *v19);
    if (!v18) {
      return;
    }
LABEL_11:
    unint64_t v26 = *(void *)(a1 + 24);
    sub_1000029C0(v26, v18, v20, v21, v22, v23, v24, v25, a9);
    return;
  }
  sub_10001A558(0, (uint64_t)"handle_reset_pair", @"Invalid input.", v13, v14, v15, v16, v17, v37);
  sub_100002B8C(1, (uint64_t)"handle_reset_pair", v18, @"MissingValue");
  if (v18)
  {
    CFRelease(v18);
  }
}

void sub_10001E4F4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  double valuePtr = 0.0;
  double v108 = 0.0;
  if (a1 && a2)
  {
    CFTypeRef v11 = sub_100002B30(@"StartSession");
    if (v11)
    {
      CFStringRef v12 = v11;
      if (*(void *)(a1 + 32))
      {
        uint64_t v13 = off_1001879E0;
        CFStringRef v14 = @"Lockdown sessions not supported over remote service interface.";
LABEL_6:
        sub_10001A558(0, (uint64_t)"handle_start_session", (uint64_t)v14, a4, a5, a6, a7, a8, v103);
        sub_100002B8C(1, (uint64_t)"handle_start_session", v12, *v13);
        unint64_t v21 = *(void *)(a1 + 24);
        sub_1000029C0(v21, v12, v15, v16, v17, v18, v19, v20, a9);
        return;
      }
      CFNumberRef v23 = sub_1000075D8();
      if (!v23)
      {
        uint64_t v13 = off_1001878A8;
        CFStringRef v14 = @"Failed to retrieve current time.";
        goto LABEL_6;
      }
      CFNumberRef v24 = v23;
      uint64_t Value = CFNumberGetValue(v23, kCFNumberDoubleType, &valuePtr);
      if (Value)
      {
        if (!sub_10000FE94(a2))
        {
          sub_10001A558(0, (uint64_t)"handle_start_session", @"Invalid message.", v31, v32, v33, v34, v35, v103);
          CFDictionaryRef v36 = 0;
LABEL_23:
          char v37 = off_100187930;
          goto LABEL_24;
        }
        if (*(void *)(a1 + 48))
        {
          sub_10001A558(0, (uint64_t)"handle_start_session", @"Session already active.", v31, v32, v33, v34, v35, v103);
          CFDictionaryRef v36 = 0;
          char v37 = off_100187938;
LABEL_24:
          sub_100002B8C(1, (uint64_t)"handle_start_session", v12, *v37);
          sub_1000029C0(*(void *)(a1 + 24), v12, v38, v39, v40, v41, v42, v43, v104);
          CFRelease(v24);
          if (!v36) {
            return;
          }
          CFDictionaryRef v44 = v36;
          goto LABEL_26;
        }
        char v45 = CFDictionaryGetValue((CFDictionaryRef)a2, @"HostID");
        CFStringRef v46 = (const __CFString *)sub_10000FF0C(v45);
        if (!v46)
        {
          sub_10001A558(0, (uint64_t)"handle_start_session", @"Invalid host id.", v47, v48, v49, v50, v51, v103);
          CFDictionaryRef v36 = 0;
          char v37 = off_100187928;
          goto LABEL_24;
        }
        CFStringRef v52 = v46;
        CFDictionaryRef v36 = (const __CFDictionary *)sub_100015268(v46);
        if (!v36)
        {
          sub_10001A558(0, (uint64_t)"handle_start_session", @"No pairing record for %@.", v54, v55, v56, v57, v58, (char)v52);
          goto LABEL_23;
        }
        int v59 = sub_1000041EC(v52, &v108, v53, v54, v55, v56, v57, v58);
        if (v59)
        {
          double v60 = valuePtr;
          double v61 = v108;
          if (v60 > v61 + (double)sub_100004504())
          {
            sub_10001A558(0, (uint64_t)"handle_start_session", @"Expired pairing record for %@.", v62, v63, v64, v65, v66, (char)v52);
            sub_100004334(v52, v67, v68, v69, v70, v71, v72, v73, v105);
            goto LABEL_23;
          }
        }
        CFStringRef v74 = sub_1000104C4();
        if (v74)
        {
          CFStringRef v80 = v74;
          CFDictionarySetValue(v12, @"SessionID", v74);
          CFDictionarySetValue(v12, @"EnableSessionSSL", kCFBooleanTrue);
          sub_1000029C0(*(void *)(a1 + 24), v12, v81, v82, v83, v84, v85, v86, v103);
          uint64_t v87 = CFDictionaryGetValue(v36, @"DeviceCertificate");
          CFDataRef v88 = (const __CFData *)sub_10000FF48(v87);
          if (!v88)
          {
            uint64_t v95 = 0;
            CFStringRef v102 = @"Invalid certificate.";
            goto LABEL_45;
          }
          CFDataRef v94 = v88;
          uint64_t v95 = (const void *)sub_10000DF38(*(void *)a1, 0, @"DevicePrivateKey");
          if (!v95)
          {
            CFStringRef v102 = @"Invalid private key.";
            goto LABEL_45;
          }
          uint64_t v96 = CFDictionaryGetValue(v36, @"RootCertificate");
          CFDataRef v97 = (const __CFData *)sub_10000FF48(v96);
          if (!v97)
          {
            CFStringRef v102 = @"Invalid root certificate.";
            goto LABEL_45;
          }
          CFDataRef v98 = v97;
          uint64_t v99 = *(void *)(a1 + 24);
          CFDataRef v100 = (const __CFData *)sub_10000FF48(v95);
          if (sub_1000030A4(v99, v94, v100, v98, 0))
          {
            CFStringRef v102 = @"Failed to enable SSL.";
LABEL_45:
            sub_10001A558(0, (uint64_t)"handle_start_session", (uint64_t)v102, v89, v90, v91, v92, v93, v106);
            sub_100003008(*(void *)(a1 + 24));
LABEL_46:
            CFRelease(v24);
            CFRelease(v36);
            if (v95) {
              CFRelease(v95);
            }
            CFDictionaryRef v44 = (const __CFDictionary *)v80;
LABEL_26:
            CFRelease(v44);
            return;
          }
          if (v59)
          {
            if (valuePtr > v108 + 86400.0 && (sub_100003F08(v52, v24, v101, v89, v90, v91, v92, v93) & 1) == 0) {
              goto LABEL_52;
            }
          }
          else if (!sub_100003F08(v52, v24, v101, v89, v90, v91, v92, v93))
          {
LABEL_52:
            CFStringRef v102 = @"Failed to update pair record timestamp.";
            goto LABEL_45;
          }
          *(void *)(a1 + 40) = CFRetain(v36);
          *(void *)(a1 + 48) = CFRetain(v80);
          if (sub_100003074(*(void *)(a1 + 24)) == 1
            || sub_100003074(*(void *)(a1 + 24)) == 2)
          {
            sub_10001E20C(*(NSObject ***)a1, 1);
            sub_100016B58(*(const __CFDictionary **)(a1 + 40));
          }
          goto LABEL_46;
        }
        sub_10001A558(0, (uint64_t)"handle_start_session", @"Failed to generated uuid.", v75, v76, v77, v78, v79, v103);
      }
      else
      {
        sub_10001A558(Value, (uint64_t)"handle_start_session", @"Failed to convert current time.", v26, v27, v28, v29, v30, v103);
        CFDictionaryRef v36 = 0;
      }
      char v37 = off_1001878A8;
      goto LABEL_24;
    }
    CFStringRef v22 = @"Failed to create response";
  }
  else
  {
    CFStringRef v22 = @"Invalid input.";
  }

  sub_10001A558(0, (uint64_t)"handle_start_session", (uint64_t)v22, a4, a5, a6, a7, a8, a9);
}

void sub_10001E9C8(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16 = sub_100002B30(@"StopSession");
  if (!a1 || !a2)
  {
    sub_10001A558(0, (uint64_t)"handle_stop_session", @"Invalid input.", v11, v12, v13, v14, v15, v34);
    uint64_t v17 = off_1001879E8;
    goto LABEL_6;
  }
  if (*(void *)(a1 + 32))
  {
    sub_10001A558(0, (uint64_t)"handle_stop_session", @"Lockdown sessions not supported over remote service interface.", v11, v12, v13, v14, v15, v34);
    uint64_t v17 = off_1001879E0;
LABEL_6:
    uint64_t v18 = *v17;
LABEL_7:
    sub_100002B8C(1, (uint64_t)"handle_stop_session", v16, v18);
    goto LABEL_8;
  }
  if (!sub_10000FE94(a2))
  {
    sub_100002B8C(1, (uint64_t)"handle_stop_session", v16, @"SessionInactive");
    sub_10001A558(0, (uint64_t)"handle_stop_session", @"hinky message", v28, v29, v30, v31, v32, v34);
    goto LABEL_8;
  }
  if (!*(void *)(a1 + 48))
  {
    uint64_t v33 = off_100187940;
LABEL_28:
    uint64_t v18 = *v33;
    goto LABEL_7;
  }
  uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"SessionID");
  if (!sub_10000FF0C(Value))
  {
    uint64_t v33 = off_100187948;
    goto LABEL_28;
  }
  if (!CFEqual(Value, *(CFTypeRef *)(a1 + 48)))
  {
    uint64_t v33 = off_100187950;
    goto LABEL_28;
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v27 = *(const void **)(a1 + 40);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 40) = 0;
  }
LABEL_8:
  if (a1 && v16)
  {
    unint64_t v25 = *(void *)(a1 + 24);
    sub_1000029C0(v25, v16, v19, v20, v21, v22, v23, v24, a9);
  }
  else if (v16)
  {
    CFRelease(v16);
  }
}

CFStringRef sub_10001EB9C(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, const void *a9, int a10, CFNumberRef *a11)
{
  CFStringRef v148 = 0;
  unsigned __int8 v147 = 0;
  if (!a1 || !a11)
  {
    CFStringRef v30 = @"Invalid input.";
LABEL_11:
    sub_10001A558(0, (uint64_t)"spawn_and_handle_checkin", (uint64_t)v30, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, v142);
    return v148;
  }
  CFMutableDictionaryRef v19 = sub_10002637C();
  if (!v19)
  {
    CFStringRef v30 = @"Failed to allocate dictionary.";
    goto LABEL_11;
  }
  uint64_t v20 = v19;
  uint64_t v146 = a2;
  CFDictionaryRef v21 = *(const __CFDictionary **)(a1 + 40);
  if (v21)
  {
    uint64_t Value = CFDictionaryGetValue(v21, @"HostID");
    if (!sub_10000FF0C(Value))
    {
      sub_10001A558(0, (uint64_t)"spawn_and_handle_checkin", @"Invalid or missing host ID.", v23, v24, v25, v26, v27, v142);
      uint64_t v72 = v20;
LABEL_88:
      CFRelease(v72);
      return v148;
    }
    CFDictionarySetValue(v20, @"HostID", Value);
  }
  uint64_t v28 = +[NSNumber numberWithUnsignedInt:sub_100003074(*(void *)(a1 + 24))];
  CFDictionarySetValue(v20, @"HostConnectionType", v28);
  if (*(void *)(a1 + 32))
  {
    CFStringRef v29 = 0;
  }
  else
  {
    int v31 = sub_100003060(*(unsigned int **)(a1 + 24));
    CFStringRef v29 = sub_100010268(v31, (char *)&v147);
    if (v29) {
      CFDictionarySetValue(v20, @"HostIP", v29);
    }
  }
  if (a3) {
    CFDictionarySetValue(v20, @"HostSideClientName", a3);
  }
  if (a4) {
    CFDictionarySetValue(v20, @"HostSideHostName", a4);
  }
  if (a7 && a8 && a9)
  {
    CFDictionarySetValue(v20, @"DevicePrivateKey", a7);
    CFDictionarySetValue(v20, @"DeviceCertificate", a8);
    CFDictionarySetValue(v20, @"HostRootCertificate", a9);
  }
  if (a5)
  {
    if (a6)
    {
      CFDictionarySetValue(v20, @"EscrowSecret", a6);
      CFDictionarySetValue(v20, @"EscrowBag", a5);
      if ((sub_10000F5E8(0, (int)a5, (CFDataRef)a6, &v148) & 1) == 0)
      {
        sub_10001A558(0, (uint64_t)"spawn_and_handle_checkin", @"Failed to unlock escrow bag.", v32, v33, v34, v35, v36, v142);
        char v37 = 0;
        goto LABEL_84;
      }
    }
  }
  char v37 = (void *)sub_10000DF38(*(void *)a1, @"com.apple.mobile.debug", @"ForceHeartbeat");
  if (sub_100003074(*(void *)(a1 + 24)) == 3)
  {
    CFBooleanRef v38 = kCFBooleanTrue;
LABEL_29:
    CFDictionaryAddValue(v20, @"UseHostTracker", v38);
    goto LABEL_30;
  }
  if (sub_10000FF84(v37))
  {
    CFBooleanRef v38 = kCFBooleanTrue;
    if (CFEqual(v37, kCFBooleanTrue)) {
      goto LABEL_29;
    }
  }
LABEL_30:
  uint64_t v39 = sub_10000FF0C(v146);
  int v45 = v147;
  unsigned int v152 = 0;
  if (!v39 || (CFStringRef v46 = *(dispatch_queue_t **)(a1 + 8)) == 0)
  {
    sub_10001A558(0, (uint64_t)"spawn_service_agent", @"Invalid input.", v40, v41, v42, v43, v44, v142);
LABEL_38:
    LOBYTE(v71) = (_BYTE)v146;
    if (!v146) {
      CFStringRef v71 = @"unknown";
    }
    sub_10001A558(0, (uint64_t)"spawn_and_handle_checkin", @"Failed to spawn '%@' service agent: %@", v66, v67, v68, v69, v70, (char)v71);
    goto LABEL_84;
  }
  uint64_t v47 = v39;
  uint64_t v48 = sub_10000FF0C(v39);
  uint64_t v49 = sub_100019C60(v46, (uint64_t)v48);
  if (!v49)
  {
    sub_10001A558(0, (uint64_t)"spawn_service_agent", @"Failed to look up service in the map.", v50, v51, v52, v53, v54, v142);
    CFStringRef v148 = @"InvalidService";
    goto LABEL_38;
  }
  CFDictionaryRef v55 = (const __CFDictionary *)v49;
  uint64_t v56 = CFDictionaryGetValue((CFDictionaryRef)v49, @"AllowUnactivatedService");
  uint64_t v57 = sub_10000FF84(v56);
  if (v57 && !CFEqual(v57, kCFBooleanFalse))
  {
    CFBooleanRef cf = 0;
  }
  else
  {
    CFBooleanRef v58 = (const __CFBoolean *)sub_10000DF38(*(void *)a1, 0, @"BrickState");
    if (sub_10000FF84(v58))
    {
      CFBooleanRef v64 = kCFBooleanTrue;
      CFBooleanRef v65 = v58;
    }
    else
    {
      sub_10001A558(0, (uint64_t)"spawn_service_agent", @"Failed to look up brick state, assuming unactivated.", v59, v60, v61, v62, v63, v142);
      if (v58) {
        CFRelease(v58);
      }
      CFBooleanRef v64 = kCFBooleanTrue;
      CFBooleanRef v65 = kCFBooleanTrue;
    }
    CFBooleanRef cf = v65;
    if (CFEqual(v65, v64))
    {
      uint64_t v73 = sub_10000FF0C(v47);
      CFStringRef v79 = @"unknown";
      if (v73) {
        LOBYTE(v79) = (_BYTE)v47;
      }
      sub_10001A558(0, (uint64_t)"spawn_service_agent", @"Service '%@' is currently prohibited from running (device is not activated).", v74, v75, v76, v77, v78, (char)v79);
      goto LABEL_75;
    }
  }
  CFStringRef v80 = CFDictionaryGetValue(v55, @"DeveloperModeRequired");
  uint64_t v81 = sub_10000FF84(v80);
  if (v81 && CFEqual(v81, kCFBooleanTrue) && !sub_10000C810())
  {
    uint64_t v99 = sub_10000FF0C(v47);
    CFStringRef v105 = @"unknown";
    if (v99) {
      LOBYTE(v105) = (_BYTE)v47;
    }
    sub_10001A558(0, (uint64_t)"spawn_service_agent", @"Service '%@' is currently prohibited from running (developer mode not enabled).", v100, v101, v102, v103, v104, (char)v105);
    goto LABEL_75;
  }
  if (*(_DWORD *)(a1 + 16) == 4)
  {
    CFStringRef v87 = @"Internal clients are prohibited from starting services.";
LABEL_74:
    sub_10001A558(0, (uint64_t)"spawn_service_agent", (uint64_t)v87, v82, v83, v84, v85, v86, v142);
LABEL_75:
    char v116 = 0;
    CFStringRef v106 = 0;
    CFDataRef v98 = 0;
    uint64_t v117 = off_1001879B0;
LABEL_76:
    CFStringRef v148 = *v117;
    int v118 = -1;
    goto LABEL_77;
  }
  CFDataRef v88 = CFDictionaryGetValue(v55, @"USBOnlyService");
  if (sub_10000FF84(v88) && CFEqual(v88, kCFBooleanTrue) && *(_DWORD *)(a1 + 16) != 1)
  {
    uint64_t v114 = sub_10000FF0C(v47);
    CFStringRef v115 = @"unknown";
    if (v114) {
      LOBYTE(v115) = (_BYTE)v47;
    }
    char v142 = (char)v115;
    CFStringRef v87 = @"Service '%@' is only allowed to run over USB.";
    goto LABEL_74;
  }
  CFNumberRef v89 = (const __CFNumber *)CFDictionaryGetValue(v55, @"InstanceLimit");
  if (sub_10000FE58(v89))
  {
    uint64_t valuePtr = 0;
    uint64_t v90 = *(NSObject ***)(a1 + 8);
    int v91 = CFNumberGetValue(v89, kCFNumberIntType, (char *)&valuePtr + 4);
    uint64_t v92 = sub_10000FF0C(v47);
    if (v91)
    {
      if (sub_100019DB8(v90, (uint64_t)v92, SHIDWORD(valuePtr), (uint64_t)&valuePtr))
      {
        v149[0] = _NSConcreteStackBlock;
        v149[1] = 3221225472;
        v149[2] = sub_100022740;
        v149[3] = &unk_1001869C0;
        v149[4] = v90;
        int v150 = valuePtr;
        CFDataRef v98 = objc_retainBlock(v149);
        goto LABEL_68;
      }
      uint64_t v92 = sub_10000FF0C(v47);
      CFStringRef v120 = @"Too many instances of service '%@' already running.";
    }
    else
    {
      CFStringRef v120 = @"Invalid instance limit specified for '%@'";
    }
    CFStringRef v134 = @"unknown";
    if (v92) {
      LOBYTE(v134) = (_BYTE)v47;
    }
    sub_10001A558(0, (uint64_t)"spawn_service_agent", (uint64_t)v120, v93, v94, v95, v96, v97, (char)v134);
    char v116 = 0;
    CFStringRef v106 = 0;
    CFDataRef v98 = 0;
    uint64_t v117 = off_100187968;
    goto LABEL_76;
  }
  CFDataRef v98 = 0;
LABEL_68:
  CFStringRef v106 = (const __CFString *)CFDictionaryGetValue(v55, @"XPCServiceName");
  uint64_t v144 = sub_10000FF0C(v106);
  if (!v144)
  {
    uint64_t v121 = sub_10000FF0C(v47);
    CFStringRef v122 = (const __CFString *)sub_100022750(v121, v55);
    if (!v122)
    {
      if (v98) {
        ((void (*)(void *))v98[2])(v98);
      }
      uint64_t v135 = sub_10000FF0C(v47);
      CFStringRef v141 = @"unknown";
      if (v135) {
        LOBYTE(v141) = (_BYTE)v47;
      }
      sub_10001A558(0, (uint64_t)"spawn_service_agent", @"Failed to register service '%@' with launchd.", v136, v137, v138, v139, v140, (char)v141);
      char v116 = 0;
      CFStringRef v106 = 0;
      uint64_t v117 = off_100187960;
      goto LABEL_76;
    }
    CFStringRef v106 = v122;
    goto LABEL_93;
  }
  CFRetain(v106);
  uint64_t v107 = CFDictionaryGetValue(v55, @"MultipleInstances");
  if (!sub_10000FF84(v107))
  {
LABEL_93:
    BOOL v143 = 0;
    goto LABEL_94;
  }
  BOOL v143 = CFEqual(v107, kCFBooleanTrue) != 0;
LABEL_94:
  int v118 = a10;
  if (a10 == -1
    && (v45 ? (v123 = 30) : (v123 = 2), int v118 = sub_100004510(&v152, v123, v108, v109, v110, v111, v112, v113),
                                        v118 == -1))
  {
    sub_10001A558(0, (uint64_t)"spawn_service_agent", @"Failed to create a socket for the host to connect to.", v124, v125, v126, v127, v128, v142);
    char v116 = 0;
    CFStringRef v148 = @"CheckinSetupFailed";
  }
  else
  {
    sub_10000FFC0(v118);
    sub_10001003C(v118);
    if (sub_100022BC4(a1, v106, v118, v20, v144 == 0, v143, v98, &v148))
    {
      sub_10001A558(0, (uint64_t)"spawn_service_agent", @"Failed to spawn XPC service agent for %@.", v129, v130, v131, v132, v133, (char)v106);
      char v116 = 0;
    }
    else
    {
      *a11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v152);
      char v116 = 1;
    }
  }
LABEL_77:
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v55);
  if (v106) {
    CFRelease(v106);
  }
  if (v118 != -1) {
    close(v118);
  }

  if ((v116 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_84:
  CFRelease(v20);
  if (v29) {
    CFRelease(v29);
  }
  if (v37)
  {
    uint64_t v72 = (__CFDictionary *)v37;
    goto LABEL_88;
  }
  return v148;
}

void sub_10001F458(uint64_t a1, const void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFMutableDictionaryRef v19 = 0;
  if (a1)
  {
    if (*(void *)(a1 + 32))
    {
      sub_10001A558(0, (uint64_t)"handle_start_service", @"Cannot start lockdown services via lockdown remote service. Use remote service discovery.", a4, a5, a6, a7, a8, v18);
      sub_100002B8C(1, (uint64_t)"handle_start_service", 0, @"InvalidConnection");
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v17 = sub_10001F554(a1, a2, a3, 0xFFFFFFFFLL, &v19, a6, a7, a8);
      uint64_t v16 = v17;
      if (v17) {
        sub_10001A558(0, (uint64_t)"handle_start_service", @"Failed to start service: %@", v11, v12, v13, v14, v15, (char)v17);
      }
    }
    if (v19)
    {
      sub_1000029C0(*(void *)(a1 + 24), v19, v10, v11, v12, v13, v14, v15, v18);
      CFMutableDictionaryRef v19 = 0;
    }
    if (v16) {
      CFRelease(v16);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"handle_start_service", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

const void *sub_10001F554(uint64_t a1, const void *a2, const __CFString *a3, uint64_t a4, __CFDictionary **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef cf = 0;
  CFTypeRef v99 = 0;
  if (!a1)
  {
    sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", @"Invalid input.", a4, (uint64_t)a5, a6, a7, a8, v93);
    int v31 = 0;
    char v18 = 0;
LABEL_14:
    uint64_t v32 = 0;
    goto LABEL_44;
  }
  int v9 = a4;
  char v18 = sub_100002B30(@"StartService");
  if (!v18)
  {
    sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", @"Failed to create response.", v13, v14, v15, v16, v17, v93);
    int v31 = 0;
    goto LABEL_14;
  }
  if (!sub_10000FF0C(a3)) {
    a3 = @"unknown";
  }
  if (!sub_10000FE94(a2))
  {
    CFStringRef v33 = @"Invalid message.";
LABEL_16:
    sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", (uint64_t)v33, v19, v20, v21, v22, v23, v93);
    uint64_t v34 = off_1001878B8;
LABEL_41:
    sub_100002B8C(1, (uint64_t)"handle_start_service_with_socket", v18, *v34);
    int v31 = 0;
    goto LABEL_42;
  }
  uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"Service");
  if (!sub_10000FF0C(Value))
  {
    char v93 = (char)a3;
    CFStringRef v35 = @"%@ did not specify a service to launch.";
LABEL_18:
    sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", (uint64_t)v35, v25, v26, v27, v28, v29, v93);
    uint64_t v34 = off_100187958;
    goto LABEL_41;
  }
  BOOL v30 = sub_100003074(*(void *)(a1 + 24)) != 1 && sub_100003074(*(void *)(a1 + 24)) != 2
     || !CFEqual(Value, @"com.apple.mobile.insecure_notification_proxy")
     && !CFEqual(Value, @"com.apple.preboardservice_v2");
  uint64_t v36 = *(void *)(a1 + 32);
  BOOL v37 = v36 != 0;
  if (v36) {
    BOOL v38 = 0;
  }
  else {
    BOOL v38 = v30;
  }
  uint64_t v39 = MKBDeviceUnlockedSinceBoot();
  if (!v39)
  {
    CFStringRef v64 = @"Device not unlocked since boot.";
LABEL_40:
    sub_10001A558(v39, (uint64_t)"handle_start_service_with_socket", (uint64_t)v64, v40, v41, v42, v43, v44, v93);
    uint64_t v34 = off_1001878F8;
    goto LABEL_41;
  }
  if ((sub_10000C78C() & 1) == 0)
  {
    CFStringRef v64 = @"Device not unlocked within required time.";
    uint64_t v39 = 0;
    goto LABEL_40;
  }
  CFDictionarySetValue(v18, @"Service", Value);
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", @"%@ attempting to spawn %@ service.", v25, v26, v27, v28, v29, (char)a3);
  }
  if (!v38)
  {
    int v31 = 0;
    uint64_t v63 = 0;
    uint64_t v51 = 0;
    uint64_t v62 = 0;
    if (!v37)
    {
LABEL_68:
      CFTypeRef v83 = 0;
      uint64_t v67 = 0;
LABEL_71:
      CFStringRef v84 = sub_10001EB9C(a1, Value, a3, v62, v67, v83, v31, v63, v51, v9, (CFNumberRef *)&v99);
      if (!v84)
      {
        CFDictionarySetValue(v18, @"Port", v99);
        if (v31) {
          CFDictionarySetValue(v18, @"EnableServiceSSL", kCFBooleanTrue);
        }
        goto LABEL_42;
      }
      CFStringRef v90 = v84;
      sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", @"Failed to spawn %@.", v85, v86, v87, v88, v89, (char)Value);
      uint64_t v81 = v18;
      uint64_t v82 = (__CFString *)v90;
      goto LABEL_73;
    }
    goto LABEL_56;
  }
  if (!*(void *)(a1 + 48))
  {
    sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", @"The connection is not within a session. We cannot start services.", v25, v26, v27, v28, v29, v93);
    uint64_t v34 = off_100187940;
    goto LABEL_41;
  }
  CFDictionaryRef v45 = *(const __CFDictionary **)(a1 + 40);
  if (!v45)
  {
    CFStringRef v35 = @"Invalid pair record.";
    goto LABEL_18;
  }
  CFStringRef v46 = CFDictionaryGetValue(v45, @"HostName");
  uint64_t v47 = v46;
  if (v46)
  {
    uint64_t v48 = v46;
    uint64_t v49 = sub_10000FF0C(v46);
    uint64_t v47 = v48;
    if (!v49)
    {
      CFStringRef v33 = @"Invalid hostname.";
      goto LABEL_16;
    }
  }
  uint64_t v96 = v47;
  BOOL v50 = ((unint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"HostID") | v36) != 0;
  if (sub_100003074(*(void *)(a1 + 24)) == 3
    || !CFEqual(Value, @"com.apple.afc")
    && !CFEqual(Value, @"com.apple.afc.unrestricted")
    && !CFEqual(Value, @"com.apple.mobile.installation_proxy")
    && !CFEqual(Value, @"com.apple.mobile.file_relay")
    && !CFEqual(Value, @"com.apple.mobile.FactoryServices"))
  {
    int v31 = (const void *)sub_10000DF38(*(void *)a1, 0, @"DevicePrivateKey");
    uint64_t v94 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"DeviceCertificate");
    uint64_t v51 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"RootCertificate");
    if (sub_10000FF48(v31))
    {
      if (sub_10000FF48(v94))
      {
        if (sub_10000FF48(v51))
        {
          uint64_t v63 = v94;
          uint64_t v62 = v96;
          if (!v50) {
            goto LABEL_68;
          }
          goto LABEL_56;
        }
        CFStringRef v92 = @"Missing root certificate.";
      }
      else
      {
        CFStringRef v92 = @"Missing certificate.";
      }
      sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", (uint64_t)v92, v57, v58, v59, v60, v61, v93);
      int v91 = off_1001878B8;
    }
    else
    {
      sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", @"Missing private key.", v52, v53, v54, v55, v56, v93);
      int v91 = off_1001878B0;
    }
    uint64_t v82 = *v91;
    uint64_t v81 = v18;
    goto LABEL_73;
  }
  int v31 = 0;
  uint64_t v63 = 0;
  uint64_t v51 = 0;
  uint64_t v62 = v96;
  if (!v50) {
    goto LABEL_68;
  }
LABEL_56:
  uint64_t v95 = v63;
  uint64_t v97 = v62;
  uint64_t v67 = CFDictionaryGetValue((CFDictionaryRef)a2, @"EscrowBag");
  if (!sub_10000FF48(v67))
  {
    CFTypeRef v83 = 0;
LABEL_70:
    uint64_t v63 = v95;
    uint64_t v62 = v97;
    goto LABEL_71;
  }
  CFStringRef v74 = sub_10001FB4C(a1, &cf, v68, v69, v70, v71, v72, v73);
  if (!v74)
  {
    CFTypeRef v83 = cf;
    goto LABEL_70;
  }
  CFStringRef v80 = v74;
  sub_10001A558(0, (uint64_t)"handle_start_service_with_socket", @"Failed to copy escrow secret.", v75, v76, v77, v78, v79, v93);
  uint64_t v81 = v18;
  uint64_t v82 = (__CFString *)v80;
LABEL_73:
  sub_100002B8C(1, (uint64_t)"handle_start_service_with_socket", v81, v82);
LABEL_42:
  CFBooleanRef v65 = CFDictionaryGetValue(v18, @"Error");
  uint64_t v32 = v65;
  if (v65) {
    CFRetain(v65);
  }
LABEL_44:
  if (a5)
  {
    *a5 = v18;
    char v18 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  if (v31) {
    CFRelease(v31);
  }
  if (v99) {
    CFRelease(v99);
  }
  CFTypeRef v99 = 0;
  if (v18) {
    CFRelease(v18);
  }
  return v32;
}

CFStringRef sub_10001FB4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void **)(a1 + 32);
  if (v10)
  {
    id v34 = 0;
    sub_10002B284(v10, &v34);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    id v17 = v34;
    if (v17)
    {
      char name = remote_device_get_name();
      sub_10001A558(0, (uint64_t)"conn_state_copy_escrow_secret", @"Failed to copy escrow key for remote device '%s': %@", v19, v20, v21, v22, v23, name);
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  CFDictionaryRef v26 = *(const __CFDictionary **)(a1 + 40);
  if (!v26)
  {
    CFStringRef v25 = @"MissingPairRecord";
    CFStringRef v30 = @"No pairing record to retrieve secret from.";
LABEL_19:
    sub_10001A558(0, (uint64_t)"conn_state_copy_escrow_secret", (uint64_t)v30, a4, a5, a6, a7, a8, v32);
    id v11 = 0;
    id v17 = 0;
    goto LABEL_20;
  }
  uint64_t Value = (void *)CFDictionaryGetValue(v26, @"HostID");
  if (!sub_10000FF0C(Value))
  {
    CFStringRef v25 = @"InvalidPairRecord";
    CFStringRef v30 = @"Pairing record is missing host ID.";
    goto LABEL_19;
  }
  id v33 = 0;
  sub_100029608(Value, &v33);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  id v28 = v33;
  id v17 = v28;
  if (v28)
  {
    sub_10001A558(0, (uint64_t)"conn_state_copy_escrow_secret", @"Failed to copy escrow key: %@", v12, v13, v14, v15, v16, (char)v28);
LABEL_4:
    char v24 = sub_10000FAA8(v17, @"com.apple.MobileLockdown.ErrorDomain", (id)0xFFFFFFFFFFFFFFF8) ^ 1;
    if (v11) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  char v24 = 1;
  if (v11)
  {
LABEL_5:
    if (a2)
    {
      id v11 = v11;
      CFStringRef v25 = 0;
      *a2 = v11;
    }
    else
    {
      CFStringRef v25 = 0;
    }
    goto LABEL_20;
  }
LABEL_12:
  if (v24)
  {
    sub_10001A558(0, (uint64_t)"conn_state_copy_escrow_secret", @"Failed to copy escrow key.", v12, v13, v14, v15, v16, v32);
    id v11 = 0;
    uint64_t v29 = off_1001878F8;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"conn_state_copy_escrow_secret", @"Escrow unlock unavailable because user has not unlocked device since boot.", v12, v13, v14, v15, v16, v32);
    id v11 = 0;
    uint64_t v29 = off_100187920;
  }
  CFStringRef v25 = *v29;
LABEL_20:

  return v25;
}

void sub_10001FD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (dword_1001B6AD0)
  {
    CFStringRef v11 = @"unknown";
    if (a3) {
      LOBYTE(v11) = a3;
    }
    sub_10001A558(0, (uint64_t)"handle_enter_recovery", @"Preparing to enter recovery for %@.", a4, a5, a6, a7, a8, (char)v11);
  }
  if (!a1 || !a2)
  {
    CFStringRef v22 = @"Invalid input(s)";
LABEL_14:
    sub_10001A558(0, (uint64_t)"handle_enter_recovery", (uint64_t)v22, a4, a5, a6, a7, a8, a9);
    return;
  }
  uint64_t v12 = sub_100002B30(@"EnterRecovery");
  if (!v12)
  {
    CFStringRef v22 = @"Failed to create response.";
    goto LABEL_14;
  }
  uint64_t v13 = v12;
  int v14 = sub_100003074(*(void *)(a1 + 24));
  uint64_t v20 = off_1001879E0;
  CFStringRef v21 = @"Invalid connection type.";
  switch(v14)
  {
    case 1:
    case 5:
      if (*(void *)(a1 + 48) || (sub_1000278F0() & 1) != 0) {
        goto LABEL_18;
      }
      uint64_t v20 = off_100187940;
      CFStringRef v21 = @"Session required to enter recovery over USB.";
      goto LABEL_24;
    case 3:
    case 6:
      if (!*(void *)(a1 + 48))
      {
        uint64_t v20 = off_100187940;
        CFStringRef v21 = @"Session required to enter recovery over WiFi.";
        goto LABEL_24;
      }
LABEL_18:
      if (sub_100005D7C())
      {
        CFStringRef v21 = @"Failed to disable auto-boot.";
LABEL_24:
        sub_10001A558(0, (uint64_t)"handle_enter_recovery", (uint64_t)v21, v15, v16, v17, v18, v19, v43);
        sub_100002B8C(1, (uint64_t)"handle_enter_recovery", v13, *v20);
        unint64_t v42 = *(void *)(a1 + 24);
        sub_1000029C0(v42, v13, v36, v37, v38, v39, v40, v41, a9);
        return;
      }
      sub_1000029C0(*(void *)(a1 + 24), v13, v23, v15, v16, v17, v18, v19, v43);
      sub_10001A558(0, (uint64_t)"handle_enter_recovery", @"Closing connection and rebooting the device into recovery mode.", v24, v25, v26, v27, v28, v44);
      sub_100003008(*(void *)(a1 + 24));
      if (reboot3())
      {
        int v29 = *__error();
        CFStringRef v30 = __error();
        strerror(*v30);
        sub_10001A558(0, (uint64_t)"handle_enter_recovery", @"Failed to reboot device: %d (%s)", v31, v32, v33, v34, v35, v29);
      }
      break;
    default:
      goto LABEL_24;
  }
}

void sub_10001FF5C(uint64_t *a1, const __CFDictionary *a2, uint64_t a3, const void *a4)
{
  CFStringRef v26 = @"InvalidResponse";
  uint64_t v8 = sub_100002B30(@"IsHostTrusted");
  if (sub_100003074(a1[3]) != 4) {
    goto LABEL_12;
  }
  uint64_t Value = CFDictionaryGetValue(a2, @"Client");
  if (!sub_10000FF0C(Value))
  {
    CFStringRef v22 = off_1001878B0;
    goto LABEL_14;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"Options");
  CFDictionaryRef v11 = v10;
  if (v10 && !sub_10000FE94(v10))
  {
    uint64_t v24 = v8;
    uint64_t v23 = @"InvalidResponse";
    goto LABEL_16;
  }
  if (!sub_10000FE94(a4)
    || CFDictionaryGetValue((CFDictionaryRef)a4, @"com.apple.private.lockdown.lockdown_query") != kCFBooleanTrue
    && ((uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)a4, @"com.apple.private.lockdown.is-host-trusted"),
         !sub_10000FED0(v15))
     || (v27.length = CFArrayGetCount((CFArrayRef)v15),
         v27.location = 0,
         !CFArrayContainsValue((CFArrayRef)v15, v27, Value))))
  {
LABEL_12:
    CFStringRef v22 = off_1001878C0;
LABEL_14:
    uint64_t v23 = *v22;
LABEL_15:
    uint64_t v24 = v8;
LABEL_16:
    sub_100002B8C(1, (uint64_t)"handle_is_host_trusted", v24, v23);
    goto LABEL_17;
  }
  if (!sub_100018A2C(a1, Value, v11, (uint64_t *)&v26, a3, v12, v13, v14))
  {
    if (dword_1001B6AD0) {
      sub_10001A558(0, (uint64_t)"handle_is_host_trusted", @"Host client %@ is not trusted.", v17, v18, v19, v20, v21, (char)Value);
    }
    uint64_t v23 = (__CFString *)v26;
    goto LABEL_15;
  }
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"handle_is_host_trusted", @"Host client %@ is trusted.", v17, v18, v19, v20, v21, (char)Value);
  }
LABEL_17:
  sub_1000029C0(a1[3], v8, v16, v17, v18, v19, v20, v21, v25);
}

CFMutableDictionaryRef sub_100020148(uint64_t a1, NSObject **a2, const __CFString *a3, const __CFString *a4)
{
  uint64_t v8 = sub_10000FF0C(a3);
  int v9 = sub_10000FF0C(a4);
  if (sub_100010544((uint64_t)v8, (uint64_t)v9, 0, 0))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)MGCopyAnswer();
    if (result) {
      return result;
    }
    CFDictionaryRef v11 = sub_10000FF0C(a3);
    uint64_t v12 = sub_10000FF0C(a4);
    char v13 = sub_100010544((uint64_t)v11, (uint64_t)v12, 0, 1);
    sub_10001A558(0, (uint64_t)"special_case_get", @"MGCopyAnswer(%@) returned NULL", v14, v15, v16, v17, v18, v13);
    return 0;
  }
  if (!sub_10000FF0C(a3))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    uint64_t v20 = CFEqual(a4, @"DeviceName");
    if (v20)
    {
      return (CFMutableDictionaryRef)sub_100007034(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    if (!CFEqual(a4, @"WeHaveATicket"))
    {
      if (CFEqual(a4, @"DevicePrivateKey"))
      {
        return sub_10000AD7C();
      }
      if (CFEqual(a4, @"DevicePublicKey"))
      {
        return sub_10000AF34();
      }
      if (CFEqual(a4, @"BrickState"))
      {
        return sub_1000293D0();
      }
      if (CFEqual(a4, @"ActivationState"))
      {
        return (CFMutableDictionaryRef)sub_100029444();
      }
      if (CFEqual(a4, @"PasswordProtected"))
      {
        return sub_10000795C();
      }
      if (CFEqual(a4, @"TimeIntervalSince1970"))
      {
        return sub_1000075D8();
      }
      if (CFEqual(a4, @"TimeZone"))
      {
        return (CFMutableDictionaryRef)sub_100007708();
      }
      if (CFEqual(a4, @"TimeZoneOffsetFromUTC"))
      {
        return sub_100007A34();
      }
      if (CFEqual(a4, @"Uses24HourClock"))
      {
        return sub_100007814();
      }
      if (CFEqual(a4, @"CarrierBundleInfo"))
      {
        return (CFMutableDictionaryRef)sub_10000B888();
      }
      if (CFEqual(a4, @"NonVolatileRAM"))
      {
        return sub_10000B7A4();
      }
      if (CFEqual(a4, @"IntegratedCircuitCardIdentity"))
      {
        unsigned int v41 = 0;
      }
      else
      {
        if (!CFEqual(a4, @"IntegratedCircuitCardIdentity2"))
        {
          if (CFEqual(a4, @"PhoneNumber"))
          {
            unsigned int v50 = 0;
          }
          else
          {
            if (!CFEqual(a4, @"PhoneNumber2"))
            {
              if (CFEqual(a4, @"EscrowBag"))
              {
                return (CFMutableDictionaryRef)sub_100029954(a1, v57, v58, v59, v60, v61, v62, v63);
              }
              else if (CFEqual(a4, @"SIMStatus"))
              {
                return (CFMutableDictionaryRef)sub_10000C1F0();
              }
              else if (CFEqual(a4, @"BasebandStatus"))
              {
                return (CFMutableDictionaryRef)MGCopyAnswer();
              }
              else if (CFEqual(a4, @"ActivationPublicKey"))
              {
                return (CFMutableDictionaryRef)sub_10000B420();
              }
              else if (CFEqual(a4, @"DeviceCertificate"))
              {
                return sub_10000B4B8();
              }
              else if (CFEqual(a4, @"ActivationPrivateKey"))
              {
                return (CFMutableDictionaryRef)sub_10000B46C();
              }
              else if (CFEqual(a4, @"IDAMConfig"))
              {
                return sub_10000C2EC();
              }
              else if (CFEqual(a4, @"MultiUserMode"))
              {
                return sub_10000C350();
              }
              else if (CFEqual(a4, @"MultiUserLoginWindow"))
              {
                return sub_10000C384();
              }
              else if (CFEqual(a4, @"PreflightInfo"))
              {
                return sub_10000C3B8();
              }
              else
              {
                if (!CFEqual(a4, @"ApParameters")) {
                  return 0;
                }
                return sub_10000C420();
              }
            }
            unsigned int v50 = 1;
          }
          return (CFMutableDictionaryRef)sub_10000C070(v50, v43, v44, v45, v46, v47, v48, v49);
        }
        unsigned int v41 = 1;
      }
      return (CFMutableDictionaryRef)sub_10000BEFC(v41);
    }
    int v29 = &kCFBooleanTrue;
    return *v29;
  }
  if (CFEqual(a3, @"com.apple.mobile.lockdown.paired_hosts"))
  {
    CFStringRef v19 = (const __CFString *)sub_10000FF0C(a4);
    return sub_100015140(v19);
  }
  if (CFEqual(a3, @"com.apple.mobile.lockdown.paired_host_info"))
  {
    uint64_t v28 = sub_10000FF0C(a4);
    return (CFMutableDictionaryRef)sub_100014EB0(v28);
  }
  if (CFEqual(a3, @"com.apple.mobile.internal"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    if (CFEqual(a4, @"DevToolsAvailable"))
    {
      return (CFMutableDictionaryRef)sub_10000BF2C();
    }
    return 0;
  }
  if (CFEqual(a3, @"com.apple.disk_usage") || CFEqual(a3, @"com.apple.disk_usage.factory"))
  {
    CFStringRef v30 = sub_10000FF0C(a4);
    return sub_100005E98((uint64_t)a2, a3, v30);
  }
  if (CFEqual(a3, @"com.apple.mobile.iTunes"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (result)
    {
      return (CFMutableDictionaryRef)MCCopyCheckpointValue();
    }
    return result;
  }
  if (CFEqual(a3, @"com.apple.fairplay"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    if (CFEqual(a4, @"RentalBagRequest"))
    {
      return sub_10000873C(a2);
    }
    else if (CFEqual(a4, @"RBRequestVersion"))
    {
      return sub_100008C18();
    }
    else if (CFEqual(a4, @"FairPlayRentalClockBias"))
    {
      return sub_100008F00();
    }
    else
    {
      if (!CFEqual(a4, @"RentalBagResponse")) {
        return 0;
      }
      return sub_100008AAC(a2);
    }
  }
  if (CFEqual(a3, @"com.apple.mobile.restriction"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    if (CFEqual(a4, @"ProhibitAppInstall"))
    {
      return sub_100028504();
    }
    else
    {
      if (!CFEqual(a4, @"ProhibitAppDelete")) {
        return 0;
      }
      return sub_10002855C();
    }
  }
  if (CFEqual(a3, @"com.apple.international"))
  {
    sub_1000122EC(a2);
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    if (CFEqual(a4, @"Language"))
    {
      return (CFMutableDictionaryRef)sub_100007F08();
    }
    else if (CFEqual(a4, @"Locale"))
    {
      return (CFMutableDictionaryRef)sub_1000080B8();
    }
    else if (CFEqual(a4, @"Keyboard"))
    {
      return (CFMutableDictionaryRef)sub_100008330();
    }
    else
    {
      if (!CFEqual(a4, @"SortSections")) {
        return 0;
      }
      return (CFMutableDictionaryRef)sub_1000083CC();
    }
  }
  if (CFEqual(a3, @"com.apple.mobile.debug"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    if (CFEqual(a4, @"EnableVPNLogs"))
    {
      return sub_100009ACC();
    }
    else if (CFEqual(a4, @"Enable8021XLogs"))
    {
      return sub_100009E34();
    }
    else if (CFEqual(a4, @"EnableLockdownLogToDisk"))
    {
      return (CFMutableDictionaryRef)sub_10000A960();
    }
    else if (CFEqual(a4, @"EnableLockdownExtendedLogging"))
    {
      return (CFMutableDictionaryRef)sub_10000AC50();
    }
    else if (CFEqual(a4, @"EnableCLTMLogs") || CFEqual(a4, @"EnableCLTMTGraphLogs"))
    {
      return (CFMutableDictionaryRef)sub_10000A0E4();
    }
    else if (CFEqual(a4, @"EnableMediaStreamLogs"))
    {
      return (CFMutableDictionaryRef)sub_10000ACB8();
    }
    else
    {
      if (!CFEqual(a4, @"EnableRaptorCerts")) {
        return 0;
      }
      return (CFMutableDictionaryRef)sub_10000AC84();
    }
  }
  if (CFEqual(a3, @"com.apple.mobile.demo"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    if (!CFEqual(a4, @"EnableTetheredDisplayPortMode")) {
      return 0;
    }
    return (CFMutableDictionaryRef)sub_100007948();
  }
  if (CFEqual(a3, @"com.apple.PurpleBuddy"))
  {
    return (CFMutableDictionaryRef)sub_10002610C("/private/var/mobile/Library/Preferences/com.apple.purplebuddy.plist");
  }
  if (CFEqual(a3, @"com.apple.fmip"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    if (!CFEqual(a4, @"IsAssociated")) {
      return 0;
    }
    int v31 = sub_1000272E0();
LABEL_149:
    int v29 = &kCFBooleanTrue;
    if (!v31) {
      int v29 = &kCFBooleanFalse;
    }
    return *v29;
  }
  if (CFEqual(a3, @"com.apple.Accessibility"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (result)
    {
      return (CFMutableDictionaryRef)__AXSAccessibilityCopyiTunesPreference(a4);
    }
    return result;
  }
  CFStringRef v32 = @"com.apple.AssetCacheTetherator";
  if (CFEqual(a3, @"com.apple.AssetCacheTetherator")) {
    goto LABEL_175;
  }
  if (CFEqual(a3, @"com.apple.MobileDeviceCrashCopy"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (result)
    {
      return sub_100002E20(a4);
    }
    return result;
  }
  CFStringRef v32 = @"com.apple.purplebuddy";
  if (CFEqual(a3, @"com.apple.purplebuddy"))
  {
LABEL_175:
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    CFStringRef v39 = a4;
    CFStringRef v40 = v32;
    goto LABEL_177;
  }
  if (CFEqual(a3, @"com.apple.mobileipod"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    unint64_t v42 = off_1001878A0;
LABEL_200:
    CFStringRef v40 = *v42;
    CFStringRef v39 = a4;
LABEL_177:
    return (CFMutableDictionaryRef)sub_10001ABE4(v39, v40, v33, v34, v35, v36, v37, v38);
  }
  if (CFEqual(a3, @"com.apple.mobile.user_preferences"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (result)
    {
      if (CFEqual(a4, @"FileSharingEnabled"))
      {
        return sub_10000C258();
      }
      else
      {
        return (CFMutableDictionaryRef)sub_10001317C(a3, a4, v51, v52, v53, v54, v55, v56);
      }
    }
    return result;
  }
  if (CFEqual(a3, @"com.apple.mobile.chaperone"))
  {
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    if (!CFEqual(a4, @"DeviceIsChaperoned")) {
      return 0;
    }
    return sub_100027B84();
  }
  else
  {
    if (!CFEqual(a3, @"com.apple.healthd"))
    {
      if (!CFEqual(a3, @"com.apple.mobile.backup"))
      {
        if (CFEqual(a3, @"com.apple.lockdown.datamigrator"))
        {
          CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
          if (!result) {
            return result;
          }
          int v31 = sub_10000594C();
        }
        else
        {
          if (!CFEqual(a3, @"com.apple.security.mac.amfi"))
          {
            if (CFEqual(a3, @"com.apple.securityd.ae"))
            {
              CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
              if (!result) {
                return result;
              }
              if (CFEqual(a4, @"AEToken"))
              {
                sub_100023848();
                return (CFMutableDictionaryRef)objc_claimAutoreleasedReturnValue();
              }
            }
            else if (CFEqual(a3, @"com.apple.corerepair"))
            {
              CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
              if (!result) {
                return result;
              }
              if (CFEqual(a4, @"RepairReport"))
              {
                sub_10001B1A4(0, v69, v70, v71, v72, v73, v74, v75);
                return (CFMutableDictionaryRef)objc_claimAutoreleasedReturnValue();
              }
            }
            return 0;
          }
          CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
          if (!result) {
            return result;
          }
          if (!CFEqual(a4, @"DeveloperModeStatus")) {
            return 0;
          }
          int v31 = sub_10000C810();
        }
        goto LABEL_149;
      }
      CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
      if (!result) {
        return result;
      }
      sub_10001A558(0, (uint64_t)"special_case_get", @"key %@", v64, v65, v66, v67, v68, (char)a4);
      unint64_t v42 = off_100187620;
      goto LABEL_200;
    }
    CFMutableDictionaryRef result = (CFMutableDictionaryRef)sub_10000FF0C(a4);
    if (!result) {
      return result;
    }
    if (!CFEqual(a4, @"HDHealthInUse")) {
      return 0;
    }
    return sub_10000C294();
  }
}

void sub_10002148C(NSObject ***a1, const __CFString *a2, void *a3)
{
  if (sub_10000FF0C(a2) || !sub_10000FE94(a3))
  {
    if (!sub_10000FF0C(a2)) {
      return;
    }
    if (CFEqual(a2, @"com.apple.mobile.iTunes"))
    {
      uint64_t v6 = MCCopyCheckpoint();
      if (v6)
      {
        CFDictionaryRef v12 = (const __CFDictionary *)v6;
        if (sub_10000FE94(a3))
        {
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472;
          v50[2] = sub_10002220C;
          v50[3] = &unk_100186AA8;
          void v50[4] = a3;
          sub_1000261E0(v12, v50);
        }
        else
        {
          sub_10001A558(0, (uint64_t)"special_case_get_domain", @"MobileCheckpoint returned nothing!", v13, v14, v15, v16, v17, v48);
        }
        CFRelease(v12);
      }
      else
      {
        sub_10001A558(0, (uint64_t)"special_case_get_domain", @"MobileCheckpoint returned nothing!", v7, v8, v9, v10, v11, v48);
      }
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"FairPlayGUID");
      uint64_t v23 = off_1001871E8;
LABEL_49:
      sub_10002218C(a1, (__CFDictionary *)a3, a2, *v23);
      return;
    }
    if (CFEqual(a2, @"com.apple.mobile.internal"))
    {
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"CarrierBuild");
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"IsInternal");
      uint64_t v22 = off_1001870F0;
    }
    else
    {
      if (!CFEqual(a2, @"com.apple.Accessibility"))
      {
        if (CFEqual(a2, @"com.apple.international")
          || CFEqual(a2, @"com.apple.mobile.wireless_lockdown")
          || CFEqual(a2, @"com.apple.mobile.battery")
          || CFEqual(a2, @"com.apple.mobile.software_behavior"))
        {
          sub_10001088C((uint64_t)a2, (uint64_t)a3);
        }
        else if (CFEqual(a2, @"com.apple.mobile.backup"))
        {
          CFDictionaryRef v46 = sub_10001AEC0(@"com.apple.mobile.ldbackup");
          if (v46)
          {
            CFDictionaryRef v47 = v46;
            CFDictionaryApplyFunction(v46, (CFDictionaryApplierFunction)sub_100022214, a3);
            CFRelease(v47);
          }
        }
        return;
      }
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"VoiceOverTouchEnabledByiTunes");
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ZoomTouchEnabledByiTunes");
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"InvertDisplayEnabledByiTunes");
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"SpeakAutoCorrectionsEnabledByiTunes");
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"MonoAudioEnabledByiTunes");
      uint64_t v22 = off_100187880;
    }
    CFStringRef v24 = *v22;
    sub_10002218C(a1, (__CFDictionary *)a3, a2, v24);
    return;
  }
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"WeHaveATicket");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ActivationState");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"BrickState");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"PasswordProtected");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"UniqueDeviceID");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"TimeIntervalSince1970");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"TimeZone");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"TimeZoneOffsetFromUTC");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"Uses24HourClock");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"NonVolatileRAM");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"SIMStatus");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"BoardId");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ChipID");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"SerialNumber");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"MLBSerialNumber");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ModelNumber");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"RegionInfo");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"WiFiAddress");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"EthernetAddress");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"BluetoothAddress");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"HardwareModel");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"BuildVersion");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ProductVersion");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"HumanReadableProductVersionString");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ProductName");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ReleaseType");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"CPUArchitecture");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"FirmwareVersion");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ProductionSOC");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"UniqueChipID");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"SupportedDeviceFamilies");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"DieID");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"DeviceColor");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"SoftwareBundleVersion");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"SDIOProductInfo");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"SDIOManufacturerTuple");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"InverseDeviceID");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ProductType");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"DeviceClass");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"PartitionType");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"ProximitySensorCalibration");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"CompassCalibration");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"BasebandBoardSerialNumber");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"WirelessBoardSerialNumber");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"HardwarePlatform");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"TelephonyCapability");
  sub_10002218C(a1, (__CFDictionary *)a3, a2, @"SoftwareBehavior");
  if (sub_100029FC8())
  {
    sub_10002218C(a1, (__CFDictionary *)a3, a2, @"PhoneNumber");
    sub_10002218C(a1, (__CFDictionary *)a3, a2, @"BasebandRegionSKU");
    sub_10002218C(a1, (__CFDictionary *)a3, a2, @"BasebandVersion");
    CFDictionaryRef v18 = (const __CFDictionary *)MGCopyAnswer();
    CFDictionaryRef v19 = (const __CFDictionary *)MGCopyAnswer();
    uint64_t v20 = (const void *)MGCopyAnswer();
    if (sub_10000FF0C(v20))
    {
      if (CFEqual(v20, @"kCTPostponementStatusNotReady"))
      {
        CFStringRef v21 = @"BBNotReady";
LABEL_35:
        CFDictionarySetValue((CFMutableDictionaryRef)a3, @"BasebandStatus", v21);
        char v30 = 0;
        goto LABEL_36;
      }
      if (CFEqual(v20, @"kCTPostponementStatusReady") || CFEqual(v20, @"kCTPostponementStatusActivated"))
      {
        if (v18)
        {
          v52[0] = _NSConcreteStackBlock;
          v52[1] = 3221225472;
          v52[2] = sub_1000221FC;
          v52[3] = &unk_100186AA8;
          v52[4] = a3;
          sub_1000261E0(v18, v52);
        }
        if (v19)
        {
          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472;
          v51[2] = sub_100022204;
          v51[3] = &unk_100186AA8;
          v51[4] = a3;
          sub_1000261E0(v19, v51);
        }
        CFDictionaryRemoveValue((CFMutableDictionaryRef)a3, @"kCTPostponementInfoUniqueID");
        CFDictionaryRemoveValue((CFMutableDictionaryRef)a3, @"ProposedTicket");
        CFStringRef v21 = @"BBInfoAvailable";
        goto LABEL_35;
      }
      if (!CFEqual(v20, @"kCTPostponementStatusError"))
      {
        if (CFEqual(v20, @"kCTPostponementStatusRejected"))
        {
          sub_10002218C(a1, (__CFDictionary *)a3, a2, @"InternationalMobileEquipmentIdentity");
          sub_10002218C(a1, (__CFDictionary *)a3, a2, @"MobileEquipmentIdentifier");
          CFStringRef v21 = @"BBRejectedTicket";
        }
        else
        {
          CFStringRef v21 = @"Other-CheckLogs";
        }
        goto LABEL_35;
      }
      CFDictionarySetValue((CFMutableDictionaryRef)a3, @"BasebandStatus", @"BBError");
      sub_10001A558(0, (uint64_t)"special_case_get_domain", @"check for kCTPostponementStatusError* keys", v41, v42, v43, v44, v45, v48);
    }
    else
    {
      CFDictionarySetValue((CFMutableDictionaryRef)a3, @"BasebandStatus", @"BBNotAnswering");
    }
    char v30 = 1;
LABEL_36:
    if (v20) {
      CFRelease(v20);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v30) {
      sub_10001A558(0, (uint64_t)"special_case_get_domain", @"baseband error reported, no key hash available", v25, v26, v27, v28, v29, v48);
    }
    else {
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"BasebandKeyHashInformation");
    }
    sub_10002218C(a1, (__CFDictionary *)a3, a2, @"MobileSubscriberNetworkCode");
    sub_10002218C(a1, (__CFDictionary *)a3, a2, @"MobileSubscriberCountryCode");
    if (v30)
    {
      sub_10001A558(0, (uint64_t)"special_case_get_domain", @"baseband error reported, no SIMTrayStatus available", v31, v32, v33, v34, v35, v48);
      sub_10001A558(0, (uint64_t)"special_case_get_domain", @"baseband error reported, no Carrier Bundle Info available", v36, v37, v38, v39, v40, v49);
    }
    else
    {
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"SIMTrayStatus");
      sub_10002218C(a1, (__CFDictionary *)a3, a2, @"CarrierBundleInfoArray");
    }
    uint64_t v23 = off_100187320;
    goto LABEL_49;
  }

  CFDictionarySetValue((CFMutableDictionaryRef)a3, @"BasebandStatus", @"NoTelephonyCapabilty");
}

void sub_10002218C(NSObject ***a1, __CFDictionary *a2, const __CFString *a3, const __CFString *a4)
{
  CFMutableDictionaryRef v6 = sub_100020148((uint64_t)a1, *a1, a3, a4);
  if (v6)
  {
    CFMutableDictionaryRef v7 = v6;
    CFDictionarySetValue(a2, a4, v6);
    CFRelease(v7);
  }
}

void sub_1000221FC(uint64_t a1, const void *a2, const void *a3)
{
}

void sub_100022204(uint64_t a1, const void *a2, const void *a3)
{
}

void sub_10002220C(uint64_t a1, const void *a2, const void *a3)
{
}

void sub_100022214(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t sub_100022228(NSObject ***a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const void *a5, CFTypeRef *a6, char a7)
{
  if (sub_100003074((uint64_t)a1[3]) != 4)
  {
    if (a1[6])
    {
      uint64_t v31 = *a1;
      uint64_t v32 = sub_10000FF0C(a2);
      uint64_t v33 = sub_10000FF0C(a3);
      if (!sub_10000E430(v31, (uint64_t)v32, (uint64_t)v33, 2, v34, v35, v36, v37)) {
        goto LABEL_37;
      }
      uint64_t v38 = *a1;
      uint64_t v39 = sub_10000FF0C(a2);
      uint64_t v40 = sub_10000FF0C(a3);
      uint64_t v45 = v38;
      uint64_t v46 = (uint64_t)v39;
      uint64_t v47 = 3;
    }
    else
    {
      if (sub_100003074((uint64_t)a1[3]) == 3)
      {
        if ((a7 & 1) == 0)
        {
          uint64_t v62 = *a1;
          uint64_t v63 = sub_10000FF0C(a2);
          uint64_t v64 = sub_10000FF0C(a3);
          if (!sub_10000E430(v62, (uint64_t)v63, (uint64_t)v64, 6, v65, v66, v67, v68))
          {
            CFStringRef v59 = 0;
            goto LABEL_42;
          }
        }
        goto LABEL_37;
      }
      uint64_t v69 = *a1;
      uint64_t v70 = sub_10000FF0C(a2);
      uint64_t v40 = sub_10000FF0C(a3);
      uint64_t v45 = v69;
      uint64_t v46 = (uint64_t)v70;
      uint64_t v47 = 0;
    }
    uint64_t v61 = sub_10000E430(v45, v46, (uint64_t)v40, v47, v41, v42, v43, v44);
    CFStringRef v59 = 0;
LABEL_43:
    char v60 = 1;
    goto LABEL_44;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = sub_10000FF0C(a2);
  uint64_t v16 = sub_10000FF0C(a3);
  if (sub_10000E430(v14, (uint64_t)v15, (uint64_t)v16, 4, v17, v18, v19, v20))
  {
    CFStringRef v21 = sub_10000FF0C(a2);
    uint64_t v22 = sub_10000FF0C(a3);
    CFStringRef v23 = (const __CFString *)sub_100010544((uint64_t)v21, (uint64_t)v22, 1, 1);
    if (!sub_10000FF0C(a4)) {
      a4 = @"unknown";
    }
    if (!sub_10000FF0C(v23)) {
      CFStringRef v23 = @"noKey";
    }
    if (!a2) {
      a2 = @"NULL";
    }
    if (sub_10000FF0C(a3)) {
      CFStringRef v24 = a3;
    }
    else {
      CFStringRef v24 = @"NULL";
    }
    CFStringRef v25 = CFStringCreateWithFormat(0, 0, @"client %@ must use MGCopyAnswer(%@) instead of lockdown_copy_value(%@,%@)", a4, v23, a2, v24);
    goto LABEL_31;
  }
  char v48 = sub_10000FF0C(a4);
  CFDictionaryRef v49 = (const __CFDictionary *)sub_10000FE94(a5);
  unsigned int v50 = sub_10000FF0C(a2);
  uint64_t v51 = sub_10000FF0C(a3);
  char v52 = sub_100026F6C((uint64_t)a1, v48, v49, (uint64_t)v50, (uint64_t)v51, 3);
  char v53 = v52;
  if (a2 || (v52 & 1) != 0 || !sub_10000FF0C(a3) || !CFEqual(a3, @"ActivationState"))
  {
    if ((v53 & 1) == 0) {
      goto LABEL_23;
    }
LABEL_37:
    CFStringRef v59 = 0;
    char v60 = 1;
    uint64_t v61 = 1;
    goto LABEL_44;
  }
  uint64_t v54 = sub_10000FF0C(a4);
  CFDictionaryRef v55 = (const __CFDictionary *)sub_10000FE94(a5);
  uint64_t v56 = sub_10000FF0C(0);
  uint64_t v57 = sub_10000FF0C(a3);
  if (sub_100026F6C((uint64_t)a1, v54, v55, (uint64_t)v56, (uint64_t)v57, 22)) {
    goto LABEL_37;
  }
LABEL_23:
  if (!sub_10000FF0C(a4)) {
    a4 = @"unknown";
  }
  if (!a2) {
    a2 = @"NULL";
  }
  if (sub_10000FF0C(a3)) {
    CFStringRef v58 = a3;
  }
  else {
    CFStringRef v58 = @"NULL";
  }
  CFStringRef v25 = CFStringCreateWithFormat(0, 0, @"client %@'s entitlement plist must have a com.apple.private.lockdown.finegrained-get key whose value is an array containing the string %@/%@ (FATAL)", a4, a2, v58);
LABEL_31:
  CFStringRef v59 = v25;
  if (!v25)
  {
LABEL_42:
    uint64_t v61 = 0;
    goto LABEL_43;
  }
  if (a6)
  {
    char v60 = 0;
    uint64_t v61 = 0;
    *a6 = CFRetain(v25);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"connection_can_get_key", @"%@", v26, v27, v28, v29, v30, (char)v25);
    char v60 = 0;
    uint64_t v61 = 0;
  }
LABEL_44:
  if (kCFBooleanFalse) {
    CFRelease(kCFBooleanFalse);
  }
  if ((v60 & 1) == 0) {
    CFRelease(v59);
  }
  return v61;
}

void sub_1000225E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = *(NSObject ***)a1;
    if (v9 && sub_10000E560(v9, a2, a3, a4, a5, a6, a7, a8)) {
      sub_10000D2C8(*(NSObject ***)a1, v10, v11, v12, v13, v14, v15, v16, v22);
    }
    if (*(void *)(a1 + 48))
    {
      uint64_t v17 = *(void *)(a1 + 24);
      if (v17 && sub_100003158(v17)) {
        sub_1000030E8(*(void *)(a1 + 24));
      }
      CFRelease(*(CFTypeRef *)(a1 + 48));
      *(void *)(a1 + 48) = 0;
      uint64_t v18 = *(const void **)(a1 + 40);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(a1 + 40) = 0;
      }
    }
    uint64_t v19 = *(void **)(a1 + 32);
    if (v19)
    {

      *(void *)(a1 + 32) = 0;
    }
    uint64_t v20 = *(const void **)(a1 + 64);
    if (v20) {
      CFRelease(v20);
    }
    *(void *)(a1 + 64) = 0;
    unint64_t v21 = *(void *)(a1 + 24);
    if (v21)
    {
      sub_100003008(v21);
      sub_100002FD8(*(void **)(a1 + 24));
      *(void *)(a1 + 24) = 0;
    }
  }
}

void sub_10002269C(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFMutableDictionaryRef v6 = *(NSObject ****)(a1 + 32);
  CFStringRef v7 = *(const __CFString **)(a1 + 40);
  CFStringRef v8 = (const __CFString *)sub_10000FF0C(*(const void **)(a1 + 48));
  uint64_t v9 = sub_10000FE94(*(const void **)(a1 + 56));
  if (sub_100022228(v6, v7, a2, v8, v9, 0, 0))
  {
    uint64_t v10 = *(__CFDictionary **)(a1 + 64);
    CFDictionarySetValue(v10, a2, a3);
  }
}

void sub_100022740(uint64_t a1)
{
}

void *sub_100022750(const void *a1, const void *a2)
{
  values = 0;
  keys = 0;
  uint64_t v67 = @"LOCKDOWN_MACH_SERVICE";
  CFErrorRef outError = 0;
  uint64_t v66 = @"JetsamMemoryLimit";
  int valuePtr = -1;
  if (!sub_10000FF0C(a1))
  {
    CFStringRef v63 = @"bad service string";
LABEL_45:
    sub_10001A558(0, (uint64_t)"register_launchd_job", (uint64_t)v63, v4, v5, v6, v7, v8, v64);
    goto LABEL_46;
  }
  if (!sub_10000FE94(a2))
  {
    CFStringRef v63 = @"bad service info";
    goto LABEL_45;
  }
  uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"ProgramArguments");
  if (!Value)
  {
    sub_10001A558(0, (uint64_t)"register_launchd_job", @"No ProgramArguments for %@", v10, v11, v12, v13, v14, (char)a1);
LABEL_46:
    uint64_t v54 = 0;
    uint64_t v19 = 0;
    goto LABEL_22;
  }
  uint64_t v15 = Value;
  uint64_t v16 = CFDictionaryGetValue((CFDictionaryRef)a2, @"UserName");
  uint64_t v17 = (void *)CFDictionaryGetValue((CFDictionaryRef)a2, @"MaterializeDatalessFiles");
  uint64_t v18 = v17;
  if (v17)
  {
    uint64_t v19 = sub_10001B0D4(v17);

    if (!v19)
    {
      sub_10001A558(0, (uint64_t)"register_launchd_job", @"Invalid value for 'MaterializeDataLessFiles' for %@.", v20, v21, v22, v23, v24, (char)a1);
LABEL_21:
      uint64_t v54 = 0;
LABEL_22:
      CFDictionaryRef v41 = 0;
      goto LABEL_23;
    }
  }
  uint64_t v25 = mach_absolute_time();
  keys = (void *)CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"lockdown.%llu.%@", v25, a1);
  if (keys)
  {
    values = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (values)
    {
      uint64_t v19 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&kCFBooleanTrue, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v19)
      {
        CFDictionaryRef v41 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&v67, (const void **)&keys, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v41)
        {
          CFDictionaryRef v47 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&v66, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (v47)
          {
            char v48 = sub_10002637C();
            uint64_t v54 = v48;
            if (v48)
            {
              CFDictionarySetValue(v48, @"Label", keys);
              CFDictionarySetValue(v54, @"MachServices", v19);
              CFDictionarySetValue(v54, @"EnvironmentVariables", v41);
              CFDictionarySetValue(v54, @"POSIXSpawnType", @"Interactive");
              CFDictionarySetValue(v54, @"RunAtLoad", kCFBooleanFalse);
              CFDictionarySetValue(v54, @"KeepAlive", kCFBooleanFalse);
              CFDictionarySetValue(v54, @"LaunchOnlyOnce", kCFBooleanTrue);
              CFDictionarySetValue(v54, @"ProgramArguments", v15);
              if (v16) {
                CFDictionarySetValue(v54, @"UserName", v16);
              }
              if (v18) {
                CFDictionarySetValue(v54, @"MaterializeDatalessFiles", v18);
              }
              uint64_t v55 = SMJobSubmit(kSMDomainSystemLaunchd, v54, 0, &outError);
              if (v55)
              {
                uint64_t v61 = keys;
                goto LABEL_27;
              }
              sub_10001A558(v55, (uint64_t)"register_launchd_job", @"SMJobSubmit failed for %@: %@", v56, v57, v58, v59, v60, (char)a1);
            }
            else
            {
              sub_10001A558(0, (uint64_t)"register_launchd_job", @"Couldn't create launchd plist for %@", v49, v50, v51, v52, v53, (char)a1);
            }
          }
          else
          {
            sub_10001A558(0, (uint64_t)"register_launchd_job", @"Couldn't create jetsam dict for %@", v42, v43, v44, v45, v46, (char)a1);
            uint64_t v54 = 0;
          }
          goto LABEL_24;
        }
        sub_10001A558(0, (uint64_t)"register_launchd_job", @"Couldn't create env dict for %@", v36, v37, v38, v39, v40, (char)a1);
        uint64_t v54 = 0;
LABEL_23:
        CFDictionaryRef v47 = 0;
LABEL_24:
        if (keys) {
          CFRelease(keys);
        }
        goto LABEL_26;
      }
      sub_10001A558(0, (uint64_t)"register_launchd_job", @"Couldn't create mach dict for %@", v31, v32, v33, v34, v35, (char)a1);
      goto LABEL_21;
    }
    char v64 = (char)a1;
    CFStringRef v63 = @"Couldn't create memory limit for %@";
    goto LABEL_45;
  }
  sub_10001A558(0, (uint64_t)"register_launchd_job", @"Couldn't create label for %@", v26, v27, v28, v29, v30, (char)a1);
  CFDictionaryRef v47 = 0;
  CFDictionaryRef v41 = 0;
  uint64_t v19 = 0;
  uint64_t v54 = 0;
LABEL_26:
  uint64_t v61 = 0;
LABEL_27:
  keys = 0;
  if (values) {
    CFRelease(values);
  }
  values = 0;
  if (v19) {
    CFRelease(v19);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (outError) {
    CFRelease(outError);
  }
  return v61;
}

uint64_t sub_100022BC4(uint64_t a1, const __CFString *a2, int a3, const void *a4, int a5, int a6, void *a7, void *a8)
{
  id v74 = a7;
  uint64_t v90 = 0;
  int v91 = &v90;
  uint64_t v92 = 0x2020000000;
  uint64_t v93 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = &v84;
  uint64_t v86 = 0x3032000000;
  uint64_t v87 = sub_10002322C;
  uint64_t v88 = sub_10002323C;
  id v89 = 0;
  v82[0] = 0;
  v82[1] = v82;
  v82[2] = 0x2020000000;
  char v83 = 0;
  if (!*(void *)(a1 + 24))
  {
    CFStringRef v38 = @"Invalid input.";
LABEL_11:
    sub_10001A558(0, (uint64_t)"spawn_xpc_service", (uint64_t)v38, v14, v15, v16, v17, v18, v72);
LABEL_12:
    xpc_object_t v24 = 0;
LABEL_13:
    mach_service = 0;
    xpc_object_t v30 = 0;
    xpc_object_t v31 = 0;
    uint64_t v40 = 0;
    int v41 = -1;
LABEL_33:
    *a8 = @"InvalidService";
    uint64_t v69 = 0xFFFFFFFFLL;
    goto LABEL_34;
  }
  if (!sub_10000FF0C(a2))
  {
    CFStringRef v38 = @"bad xpc name string";
    goto LABEL_11;
  }
  if (!CFStringGetCString(a2, buffer, 1024, 0x8000100u))
  {
    CFStringRef v71 = @"Couldn't convert %@ to string";
LABEL_40:
    sub_10001A558(0, (uint64_t)"spawn_xpc_service", (uint64_t)v71, v19, v20, v21, v22, v23, (char)a2);
    goto LABEL_12;
  }
  xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
  if (!v24)
  {
    CFStringRef v71 = @"Couldn't create xpc message for %@";
    goto LABEL_40;
  }
  xpc_object_t v30 = sub_1000103EC(a4);
  if (!v30)
  {
    sub_10001A558(0, (uint64_t)"spawn_xpc_service", @"Couldn't convert checkin info to xpc", v25, v26, v27, v28, v29, v72);
    goto LABEL_13;
  }
  xpc_object_t v31 = xpc_date_create_from_current();
  int64_t value = xpc_date_get_value(v31);
  xpc_dictionary_set_string(v24, "_LDCHECKININFO", "xpc");
  xpc_dictionary_set_date(v24, "_LDTIMESTAMP", value);
  xpc_dictionary_set_value(v24, "_LDCHECKINDICT", v30);
  xpc_dictionary_set_fd(v24, "_LDSERVICESOCK", a3);
  uint64_t v94 = 0;
  uint64_t v95 = &v94;
  uint64_t v96 = 0x2020000000;
  int v97 = -1;
  if (qword_1001B80C0 != -1) {
    dispatch_once(&qword_1001B80C0, &stru_100186B38);
  }
  if (qword_1001B80B8)
  {
    block = _NSConcreteStackBlock;
    uint64_t v100 = 3221225472;
    uint64_t v101 = sub_1000234E4;
    uint64_t v102 = &unk_1001861C8;
    uint64_t v103 = &v94;
    dispatch_sync((dispatch_queue_t)qword_1001B80B8, &block);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"open_service_log_fd", @"Failed to create queue.", v33, v34, v35, v36, v37, v72);
  }
  int v41 = *((_DWORD *)v95 + 6);
  _Block_object_dispose(&v94, 8);
  if (v41 != -1) {
    xpc_dictionary_set_fd(v24, "_LDSERVICELOGSOCK", v41);
  }
  if (a5) {
    xpc_dictionary_set_BOOL(v24, "_LDSHUTDOWNLISTENER", 1);
  }
  mach_service = xpc_connection_create_mach_service(buffer, 0, 0);
  if (!mach_service)
  {
    sub_10001A558(0, (uint64_t)"spawn_xpc_service", @"Couldn't create xpc connection for %@", v42, v43, v44, v45, v46, (char)a2);
    mach_service = 0;
LABEL_44:
    uint64_t v40 = 0;
    goto LABEL_33;
  }
  CFDictionaryRef v47 = dispatch_queue_create("com.apple.mobile.lockdown.checkin_queue", 0);
  if (!v47)
  {
    sub_10001A558(0, (uint64_t)"spawn_xpc_service", @"Couldn't create checkin queue.", v48, v49, v50, v51, v52, v72);
    goto LABEL_44;
  }
  uint64_t v40 = v47;
  xpc_connection_set_target_queue(mach_service, v47);
  if (v74) {
    xpc_dictionary_set_BOOL(v24, "_LDKEEPCONNALIVE", 1);
  }
  if (a6)
  {
    block = 0;
    uint64_t v100 = 0;
    uuid_generate((unsigned __int8 *)&block);
    xpc_connection_set_oneshot_instance();
  }
  CFTypeRef v53 = CFRetain(a2);
  uint64_t v54 = (void *)v85[5];
  v85[5] = (uint64_t)v53;

  uint64_t v55 = mach_service;
  v91[3] = (uint64_t)v55;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100023244;
  handler[3] = &unk_100186AF0;
  uint64_t v79 = &v84;
  CFStringRef v80 = v82;
  id v78 = v74;
  uint64_t v81 = &v90;
  mach_service = v55;
  uint64_t v77 = mach_service;
  xpc_connection_set_event_handler(mach_service, handler);

  if (!*(void *)(a1 + 32)) {
    goto LABEL_28;
  }
  uint64_t v56 = sub_100002B30(@"StartService");
  if (!v56)
  {
    sub_10001A558(0, (uint64_t)"spawn_xpc_service", @"Failed to create response.", v58, v59, v60, v61, v62, v72);
    goto LABEL_33;
  }
  sub_1000029C0(*(void *)(a1 + 24), v56, v57, v58, v59, v60, v61, v62, v72);
LABEL_28:
  xpc_connection_resume(mach_service);
  xpc_connection_send_message(mach_service, v24);
  dispatch_time_t v63 = dispatch_time(0, 60000000000);
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472;
  v75[2] = sub_100023440;
  v75[3] = &unk_100186B18;
  v75[4] = &v90;
  v75[5] = v82;
  v75[6] = &v84;
  dispatch_after(v63, v40, v75);
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"spawn_xpc_service", @"service %@ started", v64, v65, v66, v67, v68, (char)a2);
  }
  uint64_t v69 = 0;
LABEL_34:
  if (v41 != -1) {
    close(v41);
  }
  _Block_object_dispose(v82, 8);
  _Block_object_dispose(&v84, 8);

  _Block_object_dispose(&v90, 8);
  return v69;
}

void sub_1000231DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

uint64_t sub_10002322C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002323C(uint64_t a1)
{
}

void sub_100023244(uint64_t a1, void *a2)
{
  xpc_object_t xdict = a2;
  xpc_type_t type = xpc_get_type(xdict);
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      if (xpc_dictionary_get_BOOL(xdict, "ACK"))
      {
        if (dword_1001B6AD0) {
          sub_10001A558(0, (uint64_t)"spawn_xpc_service_block_invoke", @"Received checkin acknowledgement from '%@'", v9, v10, v11, v12, v13, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
        xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
      }
      else
      {
        sub_10001A558(0, (uint64_t)"spawn_xpc_service_block_invoke", @"Received invalid checkin acknowledgment from '%@'", v9, v10, v11, v12, v13, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
      }
    }
    goto LABEL_23;
  }
  if (xdict == &_xpc_error_connection_invalid)
  {
    if (!dword_1001B6AD0) {
      goto LABEL_19;
    }
    CFStringRef v14 = @"XPC_ERROR_CONNECTION_INVALID %@";
  }
  else if (xdict == &_xpc_error_connection_interrupted)
  {
    if (dword_1001B6AD0) {
      sub_10001A558(0, (uint64_t)"spawn_xpc_service_block_invoke", @"XPC_ERROR_CONNECTION_INTERRUPTED %@", v4, v5, v6, v7, v8, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
      goto LABEL_19;
    }
    CFStringRef v14 = @"Service %@ did not acknowledge checkin before connection was closed.";
  }
  else
  {
    if (!dword_1001B6AD0) {
      goto LABEL_19;
    }
    CFStringRef v14 = @"Non specific XPC error %@";
  }
  sub_10001A558(0, (uint64_t)"spawn_xpc_service_block_invoke", (uint64_t)v14, v4, v5, v6, v7, v8, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
LABEL_19:
  uint64_t v15 = *(void *)(a1 + 40);
  if (v15 && *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
    (*(void (**)(void))(v15 + 16))();
  }

  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
LABEL_23:
}

void sub_100023440(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(*(void *)(a1[4] + 8) + 24))
  {
    if (!*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
      sub_10001A558(0, (uint64_t)"spawn_xpc_service_block_invoke_2", @"Service %@ has taken longer than one minute to acknowledge checkin.", a4, a5, a6, a7, a8, *(void *)(*(void *)(a1[6] + 8) + 40));
    }
  }
}

void sub_1000234A4(id a1)
{
  qword_1001B80B8 = (uint64_t)dispatch_queue_create("com.apple.mobile.lockdownd.log", 0);

  _objc_release_x1();
}

void sub_1000234E4(uint64_t a1)
{
  memset(&v11, 0, sizeof(v11));
  if (!lstat("/private/var/logs/lockdown_service.log", &v11)) {
    sub_10001A4A0((const std::__fs::filesystem::path *)"/private/var/logs/lockdown_service.log", v11.st_size);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_100026D04("/private/var/logs/lockdown_service.log", 521, 0x1A4u, 0x8000, v2, v3, v4, v5);
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10001A558(0, (uint64_t)"open_service_log_fd_block_invoke_2", @"Failed to create %s.", v6, v7, v8, v9, v10, (char)"/private/var/logs/lockdown_service.log");
  }
}

uint64_t sub_10002359C(uint64_t a1, const char *a2, void *a3, char a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  uint64_t v16 = v10;
  if (a1) {
    BOOL v17 = a2 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  BOOL v18 = v17 || v10 == 0;
  uint64_t v19 = !v18;
  if (v18)
  {
    sub_10001A558(0, (uint64_t)"register_lockdown_xpc_activity", @"Invalid argument(s).", v11, v12, v13, v14, v15, v21);
  }
  else
  {
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000236C0;
    handler[3] = &unk_100186B60;
    uint64_t v25 = a2;
    id v23 = v9;
    char v27 = a4;
    id v24 = v16;
    uint64_t v26 = a1;
    xpc_activity_register(a2, XPC_ACTIVITY_CHECK_IN, handler);
  }
  return v19;
}

void sub_1000236C0(uint64_t a1, void *a2)
{
  activity = a2;
  if (xpc_activity_get_state(activity) == 2 && xpc_activity_should_defer(activity))
  {
    if (xpc_activity_set_state(activity, 3)) {
      goto LABEL_13;
    }
    sub_10001A558(0, (uint64_t)"register_lockdown_xpc_activity_block_invoke", @"Failed to defer activity '%s'.", v3, v4, v5, v6, v7, *(void *)(a1 + 48));
  }
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  id v9 = activity;
  if (!state)
  {
    xpc_object_t v10 = xpc_activity_copy_criteria(activity);
    uint64_t v11 = v10;
    uint64_t v12 = *(void **)(a1 + 32);
    if (v12 && (!v10 || *(unsigned char *)(a1 + 64))) {
      xpc_activity_set_criteria(activity, v12);
    }

    id v9 = activity;
  }
  if (xpc_activity_get_state(v9) == 2) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
LABEL_13:
}

CFMutableDictionaryRef sub_1000237B0(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFMutableDictionaryRef result = sub_10000E740((uint64_t)a1, 0, @"FirstPurpleBuddyCompletion", a4, a5, a6, a7, a8);
  if (!result)
  {
    time_t v10 = time(0);
    sub_10000DC10((uint64_t)a1, 0, @"FirstPurpleBuddyCompletion", v10);
    sub_10000D2C8(a1, v11, v12, v13, v14, v15, v16, v17, v22);
    return (CFMutableDictionaryRef)sub_10000D5A8((uint64_t)a1, 0, @"ActivationStateAcknowledged", (uint64_t)kCFBooleanTrue, v18, v19, v20, v21);
  }
  return result;
}

id sub_100023848()
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x3032000000;
  uint64_t v17 = sub_1000239C0;
  uint64_t v18 = sub_1000239D0;
  id v19 = 0;
  int v0 = sub_1000239D8();
  uint64_t v6 = v0;
  if (v0)
  {
    [v0 resume];
    uint64_t v7 = [v6 synchronousRemoteObjectProxyWithErrorHandler:&stru_100186BA0];
    uint64_t v8 = v7;
    if (v7)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100023ADC;
      v13[3] = &unk_100186BC8;
      void v13[4] = &v14;
      [v7 getLockdownToken:v13];
      goto LABEL_7;
    }
    CFStringRef v9 = @"Failed to create remote object proxy.";
  }
  else
  {
    CFStringRef v9 = @"Failed to create XPC connection.";
  }
  sub_10001A558(0, (uint64_t)"copySecuritydAEToken", (uint64_t)v9, v1, v2, v3, v4, v5, v12);
  uint64_t v8 = 0;
LABEL_7:
  id v10 = (id)v15[5];
  _Block_object_dispose(&v14, 8);

  return v10;
}

void sub_1000239A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000239C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000239D0(uint64_t a1)
{
}

id sub_1000239D8()
{
  id v5 = [objc_alloc((Class)NSXPCConnection) initWithMachServiceName:@"com.apple.security.tribeca" options:4096];
  if (v5)
  {
    uint64_t v6 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___TribecaXPCProtocol];
    if (v6)
    {
      char v12 = (void *)v6;
      [v5 setRemoteObjectInterface:v6];
    }
    else
    {
      sub_10001A558(0, (uint64_t)"createSecuritydXPCConnection", @"Failed to create service interface.", v7, v8, v9, v10, v11, v14);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"createSecuritydXPCConnection", @"Failed to create connection to '%@'", v0, v1, v2, v3, v4, (char)@"com.apple.security.tribeca");
  }

  return v5;
}

void sub_100023A98(id a1, NSError *a2)
{
  if (a2) {
    sub_10001A558(0, (uint64_t)"copySecuritydAEToken_block_invoke", @"Error during XPC communication: %@", v2, v3, v4, v5, v6, (char)a2);
  }
}

void sub_100023ADC(uint64_t a1, void *a2)
{
  id v23 = a2;
  uint64_t v3 = [v23 objectForKeyedSubscript:@"status"];
  uint64_t v4 = sub_10001B06C(v3);
  if (v4
    && (uint64_t v10 = (void *)v4,
        unsigned __int8 v11 = [v3 isEqual:@"ok"],
        v10,
        (v11 & 1) != 0))
  {
    char v12 = [v23 objectForKeyedSubscript:@"aetoken"];
    uint64_t v13 = v12;
    if (v12 && (sub_10001B06C(v12), char v14 = objc_claimAutoreleasedReturnValue(), v14, !v14))
    {
      sub_10001A558(0, (uint64_t)"copySecuritydAEToken_block_invoke_2", @"Invalid AEToken with value '%@'", v15, v16, v17, v18, v19, (char)v13);
    }
    else
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v21 = *(void **)(v20 + 40);
      *(void *)(v20 + 40) = v13;
      id v22 = v13;
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copySecuritydAEToken_block_invoke_2", @"Failed to get AEToken with status '%@'", v5, v6, v7, v8, v9, (char)v3);
  }
}

BOOL sub_100023C04(void *a1)
{
  id v1 = a1;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 0;
  uint64_t v2 = sub_1000239D8();
  uint64_t v8 = v2;
  if (!v2)
  {
    CFStringRef v16 = @"Failed to create XPC connection.";
LABEL_7:
    sub_10001A558(0, (uint64_t)"setSecuritydAEToken", (uint64_t)v16, v3, v4, v5, v6, v7, v19[0]);
    uint64_t v15 = 0;
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  [v2 resume];
  uint64_t v9 = [v8 synchronousRemoteObjectProxyWithErrorHandler:&stru_100186BE8];
  if (!v9)
  {
    CFStringRef v16 = @"Failed to create remote object proxy.";
    goto LABEL_7;
  }
  CFStringRef v24 = @"aetoken";
  id v25 = v1;
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  if (v15)
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100023E2C;
    v19[3] = &unk_100186BC8;
    v19[4] = &v20;
    [v9 setLockdownToken:v15 :v19];
  }
  else
  {
    sub_10001A558(0, (uint64_t)"setSecuritydAEToken", @"Failed to create request.", v10, v11, v12, v13, v14, v19[0]);
    uint64_t v15 = 0;
  }
LABEL_8:
  BOOL v17 = *((unsigned char *)v21 + 24) != 0;

  _Block_object_dispose(&v20, 8);
  return v17;
}

void sub_100023DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100023DE8(id a1, NSError *a2)
{
  if (a2) {
    sub_10001A558(0, (uint64_t)"setSecuritydAEToken_block_invoke", @"Error during XPC communication: %@", v2, v3, v4, v5, v6, (char)a2);
  }
}

void sub_100023E2C(uint64_t a1, void *a2)
{
  id v11 = [a2 objectForKeyedSubscript:@"status"];
  uint64_t v3 = sub_10001B06C(v11);
  if (v3
    && (uint64_t v9 = (void *)v3,
        unsigned __int8 v10 = [v11 isEqual:@"ok"],
        v9,
        (v10 & 1) != 0))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"setSecuritydAEToken_block_invoke_2", @"Failed to set AEToken with status '%@'", v4, v5, v6, v7, v8, (char)v11);
  }
}

uint64_t sub_100023EE8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = sub_10000FC70("MyUnixSocket", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v10 == -1)
  {
    uint64_t v21 = @"Failed to checkin with launchd and setup communication port.";
    uint64_t v22 = 171;
  }
  else
  {
    int v14 = v10;
    uintptr_t v15 = v10;
    CFStringRef v16 = sub_100024094();
    dispatch_source_t v17 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v15, 0, v16);

    if (v17)
    {
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1000240E8;
      handler[3] = &unk_1001869C0;
      int v27 = v14;
      void handler[4] = a1;
      uint64_t v18 = v17;
      dispatch_source_set_event_handler(v18, handler);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100024570;
      void v25[3] = &unk_100185E60;
      void v25[4] = v18;
      dispatch_source_set_cancel_handler(v18, v25);
      dispatch_resume(v18);

      id v19 = 0;
      uint64_t v20 = 1;
      goto LABEL_9;
    }
    uint64_t v21 = @"Failed to create dispatch source.";
    uint64_t v22 = 177;
  }
  sub_10000F804((uint64_t)"local_worker", v22, -1, 0, v21, v11, v12, v13, v24);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    id v19 = v19;
    uint64_t v20 = 0;
    *a2 = v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
LABEL_9:

  return v20;
}

id sub_100024094()
{
  if (qword_1001B80D0 != -1) {
    dispatch_once(&qword_1001B80D0, &stru_100186C48);
  }
  uint64_t v0 = (void *)qword_1001B80C8;

  return v0;
}

void sub_1000240E8(uint64_t a1)
{
}

void sub_1000240F8(int a1, uint64_t *a2)
{
  uint64_t v62 = 0;
  dispatch_time_t v63 = &v62;
  uint64_t v64 = 0x3032000000;
  uint64_t v65 = sub_100025718;
  uint64_t v66 = sub_100025728;
  id v67 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = &v53;
  uint64_t v55 = *(void *)"";
  uint64_t v56 = "";
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  uint64_t v61 = 0;
  memset(v70, 0, sizeof(v70));
  int v51 = -1;
  socklen_t v52 = 128;
  int v3 = accept(a1, v70, &v52);
  int v4 = v3;
  if (v3 == -1)
  {
    int v21 = *__error();
    uint64_t v22 = __error();
    strerror(*v22);
    sub_10001A558(0, (uint64_t)"socket_accept_callback", @"Failed to accept the connection: %d (%s)", v23, v24, v25, v26, v27, v21);
  }
  else
  {
    if (!sub_10000FFC0(v3) || !sub_10001003C(v4)) {
      goto LABEL_35;
    }
    int sa_family = v70[0].sa_family;
    if (v70[0].sa_family == 1)
    {
      socklen_t v69 = 4;
      if (getsockopt(v4, 0, 2, &v51, &v69))
      {
        int v11 = *__error();
        uint64_t v12 = __error();
        strerror(*v12);
        sub_10001A558(0, (uint64_t)"socket_accept_callback", @"getsockopt failed: %d (%s)", v13, v14, v15, v16, v17, v11);
        int v51 = -1;
      }
      int v18 = 0;
      int v19 = v70[0].sa_family;
      int v20 = 4;
    }
    else if (v70[0].sa_family == 2 && *(_DWORD *)&v70[0].sa_data[2] == 16777343 {
           || (int v20 = 0,
    }
               (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)&v70[0].sa_data[6], (int32x4_t)xmmword_10015DA20)))) & 1) == 0)&& v70[0].sa_family == 30)
    {
      int v20 = 0;
      int v18 = 1;
      int v19 = v70[0].sa_family;
    }
    else
    {
      int v19 = v70[0].sa_family;
      int v18 = 0;
    }
    if (v19 == 30 || v19 == 2)
    {
      if (v18)
      {
        socklen_t v68 = 4;
        socklen_t v69 = -1;
        int v28 = getsockopt(v4, 6, 516, &v69, &v68);
        socklen_t v29 = v69;
        if (v28) {
          socklen_t v29 = -1;
        }
        if (v29)
        {
          sub_10001A558(0, (uint64_t)"peer_is_safe", @"non kernel peer, pid %d!\n", v5, v6, v7, v8, v9, v29);
          CFStringRef v30 = @"Peer is unsafe.";
LABEL_34:
          sub_10001A558(0, (uint64_t)"socket_accept_callback", (uint64_t)v30, v5, v6, v7, v8, v9, v49);
LABEL_35:
          close(v4);
          goto LABEL_36;
        }
        int v20 = 1;
      }
      else
      {
        int v20 = 3;
      }
    }
    else if (sa_family != 1)
    {
      CFStringRef v30 = @"Unknown connection type.";
      goto LABEL_34;
    }
    unsigned int v31 = sub_10000E660(*a2, @"com.apple.mobile.wireless_lockdown", @"EnableWifiConnections", v5, v6, v7, v8, v9);
    unsigned int v37 = sub_10000E660(*a2, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", v32, v33, v34, v35, v36);
    unsigned int v43 = sub_10000E660(*a2, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", v38, v39, v40, v41, v42);
    if (v20 == 3 && !v37 && !v31 && !v43)
    {
      CFStringRef v30 = @"Killing the WiFi connection immediately.";
      goto LABEL_34;
    }
    uint64_t v44 = v54;
    *((_OWORD *)v54 + 2) = *(_OWORD *)a2;
    *((_DWORD *)v44 + 12) = v20;
    *((_DWORD *)v44 + 22) = v51;
    uint64_t v45 = sub_100002FBC();
    v54[7] = (uint64_t)v45;
    if (!v45)
    {
      CFStringRef v30 = @"Could not create lockconn";
      goto LABEL_34;
    }
    sub_100002FE4((uint64_t)v45, v4, v20);
    uint64_t v46 = os_transaction_create();
    CFDictionaryRef v47 = (void *)v63[5];
    v63[5] = v46;

    uint64_t v48 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100025730;
    block[3] = &unk_100186C70;
    void block[4] = &v53;
    void block[5] = &v62;
    void block[6] = a2;
    dispatch_async(v48, block);
  }
LABEL_36:
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v62, 8);
}

void sub_100024540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_100024570(uint64_t a1)
{
}

uint64_t sub_100024578(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 8) = sub_10001206C(*(NSObject ***)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if ((sub_1000246C4(a1, 0, v10, v11, v12, v13, v14, v15) & 1) == 0)
  {
    uint64_t v34 = @"Failed to enable ipv4 socket/listener.";
    uint64_t v35 = 279;
    goto LABEL_9;
  }
  if ((sub_1000246C4(a1, 1, v16, v17, v18, v19, v20, v21) & 1) == 0)
  {
    uint64_t v34 = @"Failed to enable ipv6 socket/listener.";
    uint64_t v35 = 284;
    goto LABEL_9;
  }
  if ((sub_100005A08(*(void *)a1, a1, v22, v23, v24, v19, v20, v21) & 1) == 0)
  {
    uint64_t v34 = @"Failed to notify configd to enable USB.";
    uint64_t v35 = 290;
LABEL_9:
    sub_10000F804((uint64_t)"remote_worker", v35, -1, 0, v34, v19, v20, v21, v38);
    id v32 = (id)objc_claimAutoreleasedReturnValue();
    if (!a2)
    {
LABEL_12:
      uint64_t v33 = 0;
      goto LABEL_13;
    }
LABEL_10:
    id v32 = v32;
    uint64_t v33 = 0;
    *a2 = v32;
    goto LABEL_13;
  }
  id v39 = 0;
  BOOL v28 = sub_10002AD80(a1, &v39, v25, v26, v27, v19, v20, v21);
  id v32 = v39;
  if (!v28)
  {
    uint64_t v36 = sub_10000F804((uint64_t)"remote_worker", 295, -1, v32, @"Failed to set up remote services.", v29, v30, v31, v38);

    id v32 = (id)v36;
    if (!a2) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v33 = 1;
LABEL_13:

  return v33;
}

uint64_t sub_1000246C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  unsigned int v48 = 62078;
  int v49 = 1;
  if (a2) {
    uint64_t v10 = "MyIPv6Socket";
  }
  else {
    uint64_t v10 = "MyIPv4Socket";
  }
  int v17 = sub_10000FC70(v10, a2, a3, a4, a5, a6, a7, a8);
  if (v17 == -1)
  {
    int v18 = v8 ? 30 : 2;
    int v17 = sub_100004510(&v48, v18, v11, v12, v13, v14, v15, v16);
    if (v17 == -1)
    {
      CFStringRef v38 = @"Failed to create server socket.";
      goto LABEL_17;
    }
  }
  if (!setsockopt(v17, 0xFFFF, 4354, &v49, 4u))
  {
    int v47 = 4;
    if (setsockopt(v17, 0xFFFF, 4225, &v47, 4u))
    {
      int v31 = *__error();
      id v32 = __error();
      strerror(*v32);
      sub_10001A558(0, (uint64_t)"ipWorker", @"Failed to set socket options (SO_RESTRICTIONS): %d (%s)", v33, v34, v35, v36, v37, v31);
      return 0;
    }
    sub_10001003C(v17);
    id v39 = sub_100024094();
    dispatch_source_t v40 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v17, 0, v39);

    if (v40)
    {
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_100025700;
      handler[3] = &unk_1001869C0;
      int v46 = v17;
      void handler[4] = a1;
      uint64_t v41 = v40;
      dispatch_source_set_event_handler(v41, handler);
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = sub_100025710;
      v44[3] = &unk_100185E60;
      v44[4] = v41;
      dispatch_source_set_cancel_handler(v41, v44);
      dispatch_resume(v41);

      return 1;
    }
    CFStringRef v38 = @"Failed to create dispatch source.";
LABEL_17:
    sub_10001A558(0, (uint64_t)"ipWorker", (uint64_t)v38, v19, v20, v21, v22, v23, v43);
    return 0;
  }
  int v24 = *__error();
  uint64_t v25 = __error();
  strerror(*v25);
  sub_10001A558(0, (uint64_t)"ipWorker", @"Failed to set socket options (SO_OPPORTUNISTIC): %d (%s)", v26, v27, v28, v29, v30, v24);
  return 0;
}

uint64_t sub_100024918(void *a1)
{
  kern_return_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  IONotificationPort *v13;
  __CFRunLoop *Current;
  __CFRunLoopSource *RunLoopSource;
  CFMutableDictionaryRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFDictionary *v22;
  __CFDictionary *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __CFDictionary *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __CFNotificationCenter *DistributedCenter;
  __CFNotificationCenter *v36;
  __CFNotificationCenter *v37;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v39;
  __CFNotificationCenter *v40;
  __CFNotificationCenter *v41;
  __CFNotificationCenter *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __CFNotificationCenter *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CFStringRef v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  void v73[5];
  void v74[5];
  mach_port_t mainPort;

  mach_port_t mainPort = 0;
  uint64_t v2 = IOMasterPort(0, &mainPort);
  if (v2 || !mainPort)
  {
    char v72 = v2;
    uint64_t v65 = @"Failed to create IOKit master port: 0x%08x";
LABEL_18:
    sub_10001A558(0, (uint64_t)"notification_worker", (uint64_t)v65, v3, v4, v5, v6, v7, v72);
    uint64_t v22 = 0;
LABEL_19:
    uint64_t v29 = 0;
LABEL_20:
    uint64_t v13 = 0;
LABEL_21:
    uint64_t v64 = 0;
    goto LABEL_22;
  }
  uint64_t v13 = IONotificationPortCreate(mainPort);
  if (!v13)
  {
    sub_10001A558(0, (uint64_t)"notification_worker", @"Failed to create IOKit notification port: 0x%08x", v8, v9, v10, v11, v12, 0);
    uint64_t v22 = 0;
    uint64_t v29 = 0;
    goto LABEL_21;
  }
  CFAbsoluteTime Current = CFRunLoopGetCurrent();
  CFRunLoopSourceRef RunLoopSource = IONotificationPortGetRunLoopSource(v13);
  CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
  uint64_t v16 = IOServiceMatching("AppleUSBDeviceMux");
  if (!v16)
  {
    uint64_t v65 = @"Failed to create IOKit matching dictionary for 'AppleUSBDeviceMux'.";
    goto LABEL_18;
  }
  v74[0] = _NSConcreteStackBlock;
  v74[1] = 3221225472;
  v74[2] = sub_100024E68;
  v74[3] = &unk_100186C08;
  v74[4] = a1;
  if ((sub_1000281C8(v13, "IOServiceFirstMatch", (uint64_t)"IOGeneralInterest", (uint64_t)v16, 1, v74) & 1) == 0)
  {
    uint64_t v65 = @"Failed to register IOKit matching message notification.";
    goto LABEL_18;
  }
  uint64_t v22 = IOServiceMatching("IOUSBDeviceInterface");
  if (!v22)
  {
    sub_10001A558(0, (uint64_t)"notification_worker", @"Failed to create IOKit matching dictionary for 'IOUSBDeviceInterface'.", v17, v18, v19, v20, v21, v72);
    goto LABEL_19;
  }
  uint64_t v23 = sub_10002637C();
  uint64_t v29 = v23;
  if (!v23)
  {
    sub_10001A558(0, (uint64_t)"notification_worker", @"Failed to create dictionary.", v24, v25, v26, v27, v28, v72);
    goto LABEL_20;
  }
  CFDictionarySetValue(v23, @"USBDeviceFunction", @"PTP");
  CFDictionarySetValue(v22, @"IOPropertyMatch", v29);
  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472;
  v73[2] = sub_100025010;
  v73[3] = &unk_100186C08;
  v73[4] = a1;
  if ((sub_1000281C8(v13, "IOServiceFirstMatch", (uint64_t)"IOGeneralInterest", (uint64_t)v22, 0, v73) & 1) == 0)
  {
    sub_10001A558(0, (uint64_t)"notification_worker", @"Failed to register IOKit matching message notification.", v30, v31, v32, v33, v34, v72);
    uint64_t v22 = 0;
    goto LABEL_20;
  }
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterAddObserver(DistributedCenter, a1, (CFNotificationCallback)sub_10002504C, @"com.apple.LaunchServices.applicationRegistered", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  uint64_t v36 = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterAddObserver(v36, a1, (CFNotificationCallback)sub_10002504C, @"com.apple.LaunchServices.applicationUnregistered", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  uint64_t v37 = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterAddObserver(v37, a1, (CFNotificationCallback)sub_100025050, kDiskImageMountedNotification, kStorageMounterName, CFNotificationSuspensionBehaviorDeliverImmediately);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_100025204, kMassStorageUnmountedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  id v39 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v39, a1, (CFNotificationCallback)sub_100025250, @"com.apple.mobile.lockdown.BonjourServiceChanged", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  dispatch_source_t v40 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v40, a1, (CFNotificationCallback)sub_1000253A4, @"com.apple.mobile.lockdown.BonjourPairingServiceChanged", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  uint64_t v41 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v41, a1, (CFNotificationCallback)sub_100025494, @"com.apple.managedconfiguration.passcodechanged", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  uint64_t v42 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v42, a1, (CFNotificationCallback)sub_10002554C, @"com.apple.mobile.keybagd.lock_status", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  sub_100028CF0(&stru_100186C28);
  if ((sub_10000594C() & 1) == 0)
  {
    unsigned int v48 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v48, a1, (CFNotificationCallback)sub_100025660, @"com.apple.datamigrator.migrationDidFinish", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  if (sub_10000E660(*a1, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", v43, v44, v45, v46, v47)|| sub_10000E660(*a1, @"com.apple.mobile.wireless_lockdown", @"EnableWifiConnections", v49, v50, v51, v52, v53))
  {
    uint64_t v13 = (IONotificationPort *)sub_100027608();
    long long v59 = v13 != 0;
  }
  else
  {
    long long v59 = 0;
    uint64_t v13 = 0;
  }
  long long v60 = sub_10000E660(*a1, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", v54, v55, v56, v57, v58);
  if ((v59 & 1) != 0 || v60)
  {
    uint64_t v64 = 1;
    if (!sub_100004800(a1, (uint64_t)v13, v59, v60 != 0, 1, v61, v62, v63)) {
      sub_10001A558(0, (uint64_t)"notification_worker", @"Failed to register DNS.", v67, v68, v69, v70, v71, v72);
    }
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v64 = 1;
  }
LABEL_22:
  if (mainPort) {
    mach_port_deallocate(mach_task_self_, mainPort);
  }
  if (v13) {
    free(v13);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v22) {
    CFRelease(v22);
  }
  return v64;
}

void sub_100024E68(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  if (a3 == -469794303)
  {
    uint64_t v9 = **(NSObject ****)(a1 + 32);
    sub_10000E2FC(v9, 0, @"HostAttached", 1, a5, a6, a7, a8);
    if (v8)
    {
      sub_10000D5A8((uint64_t)v9, 0, @"HostAttached", (uint64_t)kCFBooleanTrue, v10, v11, v12, v13);
      sub_10000E2FC(v9, 0, @"TrustedHostAttached", 1, v14, v15, v16, v17);
      sub_10000D5A8((uint64_t)v9, 0, @"TrustedHostAttached", (uint64_t)kCFBooleanFalse, v18, v19, v20, v21);
      sub_100010480(@"com.apple.mobile.lockdown.host_attached");
      sub_10001655C(1);
    }
    else
    {
      sub_10000D5A8((uint64_t)v9, 0, @"HostAttached", (uint64_t)kCFBooleanFalse, v10, v11, v12, v13);
      sub_10000E2FC(v9, 0, @"TrustedHostAttached", 1, v22, v23, v24, v25);
      sub_10000D5A8((uint64_t)v9, 0, @"TrustedHostAttached", (uint64_t)kCFBooleanFalse, v26, v27, v28, v29);
      sub_100010480(@"com.apple.mobile.lockdown.host_detached");
      sub_1000167E0((uint64_t)v9, 1);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"mux_notification_handler", @"Misc usbmuxd event: (messageType=0x%08x, argument=%p)", a4, a5, a6, a7, a8, a3);
  }
}

void sub_100025010(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == -469794543)
  {
    sub_1000167E0(**(void **)(a1 + 32), 0);
  }
  else if (a3 == -469794544)
  {
    sub_10001655C(0);
  }
}

void sub_100025050(int a1, uint64_t a2, int a3, uint64_t a4, CFDictionaryRef theDict, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!theDict)
  {
    CFStringRef v16 = @"No user info in notification.";
LABEL_13:
    sub_10001A558(0, (uint64_t)"mounted_image_callback", (uint64_t)v16, a4, (uint64_t)theDict, a6, a7, a8, a9);
    return;
  }
  uint64_t Value = (__CFString *)CFDictionaryGetValue(theDict, kDiskImageMountPathKey);
  if (!sub_10000FF0C(Value))
  {
    CFStringRef v16 = @"Missing mount path in notification.";
    goto LABEL_13;
  }
  CFArrayRef v11 = (const __CFArray *)sub_100008F84();
  if (!v11)
  {
    CFStringRef v16 = @"Failed to query mounted paths list.";
    goto LABEL_13;
  }
  CFArrayRef v12 = v11;
  if (CFArrayGetCount(v11) < 1)
  {
LABEL_9:
    char v15 = 0;
  }
  else
  {
    CFIndex v13 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v13);
      if (sub_10000FF0C(ValueAtIndex))
      {
        if (CFEqual(ValueAtIndex, Value)) {
          break;
        }
      }
      if (++v13 >= CFArrayGetCount(v12)) {
        goto LABEL_9;
      }
    }
    sub_100009140(*(void *)a2, *(dispatch_queue_t **)(a2 + 8), Value, 0);
    char v15 = 1;
  }
  if (sub_10002ABBC())
  {
    sub_10001A558(0, (uint64_t)"mounted_image_callback", @"Reset the remote service interface in response to mounting image at %@.", v17, v18, v19, v20, v21, (char)Value);
    if (v15) {
      sub_100010480(@"com.apple.mobile.new_service_available");
    }
    else {
      sub_10001A558(0, (uint64_t)"mounted_image_callback", @"No service agents were loaded for %@.", v22, v23, v24, v25, v26, (char)Value);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"mounted_image_callback", @"Failed to reset the remote service interface in response to mounting image at %@.", v17, v18, v19, v20, v21, (char)Value);
  }

  CFRelease(v12);
}

void sub_100025204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sub_10002ABBC()) {
    CFStringRef v14 = @"Reset the remote service interface in response to unmounting image.";
  }
  else {
    CFStringRef v14 = @"Failed to reset the remote service interface in response to unmounting image.";
  }

  sub_10001A558(0, (uint64_t)"unmounted_image_callback", (uint64_t)v14, v9, v10, v11, v12, v13, a9);
}

void sub_100025250(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"bonjour_service_callback", @"Bonjour (sync) service notification.", a4, a5, a6, a7, a8, v24);
  }
  if (a2)
  {
    if (sub_10000E660(*a2, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", a4, a5, a6, a7, a8)|| sub_10000E660(*a2, @"com.apple.mobile.wireless_lockdown", @"EnableWifiConnections", v10, v11, v12, v13, v14))
    {
      uint64_t v19 = sub_100027608();
      BOOL v20 = v19 != 0;
    }
    else
    {
      BOOL v20 = 0;
      uint64_t v19 = 0;
    }
    sub_100005710(a2, 1, 0, 0, v15, v16, v17, v18, v24);
    lockdown_kill_wireless_connections();
    if (v20)
    {
      sub_100004800(a2, (uint64_t)v19, 1, 0, 1, v21, v22, v23);
      if (!v19) {
        return;
      }
    }
    else
    {
      lockdown_kill_wireless_connections();
      if (!v19) {
        return;
      }
    }
    free(v19);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"bonjour_service_callback", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_1000253A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"bonjour_service_pairing_callback", @"Bonjour (pairing) service notification.", a4, a5, a6, a7, a8, v14);
  }
  if (a2)
  {
    if (sub_10000E660(*a2, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", a4, a5, a6, a7, a8))
    {
      sub_100004800(a2, 0, 0, 1, 1, v11, v12, v13);
    }
    else
    {
      sub_100005710(a2, 0, 1, 0, v10, v11, v12, v13, a9);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"bonjour_service_pairing_callback", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_100025494(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"password_changed_callback", @"Device passcode changed.", a4, a5, a6, a7, a8, v15);
  }
  if (a2)
  {
    sub_100016280();
    uint64_t v14 = *a2;
    sub_10000D5A8(v14, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", (uint64_t)kCFBooleanFalse, v10, v11, v12, v13);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"password_changed_callback", @"Invalid input.", a4, a5, a6, a7, a8, a9);
  }
}

void sub_10002554C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a2)
  {
    int v10 = MKBGetDeviceLockState();
    if (v10 != 3 && v10) {
      return;
    }
    if ((sub_100013F58(*a2) & 1) == 0) {
      sub_10001A558(0, (uint64_t)"lockstate_changed_callback", @"Failed to upgrade pair records' protection class.", v11, v12, v13, v14, v15, v17);
    }
    if (!sub_100016464() || sub_100013EEC())
    {
      sub_1000163C0();
      return;
    }
    CFStringRef v16 = @"Failed to reset USB RM policy.";
  }
  else
  {
    CFStringRef v16 = @"Invalid input.";
  }

  sub_10001A558(0, (uint64_t)"lockstate_changed_callback", (uint64_t)v16, a4, a5, a6, a7, a8, a9);
}

void sub_100025618(id a1)
{
  if (!sub_100013EEC())
  {
    sub_10001A558(0, (uint64_t)"notification_worker_block_invoke_3", @"Failed to reset USB RM policy.", v1, v2, v3, v4, v5, v7);
  }
}

void sub_100025660(__CFNotificationCenter *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001A558(0, (uint64_t)"migrator_finished_callback", @"Data Migration is complete.", a4, a5, a6, a7, a8, v10);

  CFNotificationCenterRemoveObserver(a1, a2, @"com.apple.datamigrator.migrationDidFinish", 0);
}

void sub_1000256C4(id a1)
{
  qword_1001B80C8 = (uint64_t)dispatch_workloop_create("com.apple.lockdown.workers");

  _objc_release_x1();
}

void sub_100025700(uint64_t a1)
{
}

void sub_100025710(uint64_t a1)
{
}

uint64_t sub_100025718(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100025728(uint64_t a1)
{
}

void sub_100025730(uint64_t a1)
{
  sub_10002581C(*(void *)(*(void *)(a1 + 32) + 8) + 32, *(uint64_t **)(a1 + 48));
  dispatch_time_t v3 = dispatch_time(0, 10000000000);
  uint64_t v4 = sub_100024094();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100025808;
  block[3] = &unk_1001861C8;
  void block[4] = *(void *)(a1 + 40);
  dispatch_after(v3, v4, block);
}

void sub_100025808(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_10002581C(uint64_t a1, uint64_t *a2)
{
  IOPMAssertionID AssertionID = 0;
  int v4 = *(_DWORD *)(a1 + 56);
  if (v4 == -1)
  {
    BOOL v119 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = sub_100026DB0(v4);
    BOOL v119 = sub_10000FE94(v5)
        && (uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)v5, @"com.apple.lockdownd.allow-save-value"),
            (CFBooleanRef v7 = (const __CFBoolean *)sub_10000FF84(Value)) != 0)
        && CFBooleanGetValue(v7) != 0;
  }
  int v8 = objc_alloc_init(LockdownSRPState);
  if (sub_100003074(*(void *)(a1 + 24)) == 3)
  {
    IOReturn v16 = IOPMAssertionCreateWithDescription(@"PreventUserIdleSystemSleep", @"com.apple.mobile.lockdownd.active-connection", @"Servicing a host-side client.", 0, 0, 0.0, 0, &AssertionID);
    if (v16) {
      sub_10001A558(0, (uint64_t)"handle_connection", @"Could not create power assertion while serving Wifi client: %d", v11, v12, v13, v14, v15, v16);
    }
  }
  CFTypeRef v17 = 0;
  CFAllocatorRef v18 = kCFAllocatorDefault;
  CFStringRef v19 = @"Label";
  do
  {
    CFDictionaryRef v20 = sub_100003704(*(int **)(a1 + 24), v9, v10, v11, v12, v13, v14, v15);
    if (sub_10000FE94(v20))
    {
      if (!v17)
      {
        uint64_t v21 = CFDictionaryGetValue(v20, v19);
        uint64_t v22 = sub_10000FF0C(v21);
        if (!v22) {
          goto LABEL_17;
        }
        uint64_t v23 = v22;
        CFStringRef v117 = @"com.apple.mobile.lockdownd.active-connection";
        CFStringRef v24 = CFStringCreateWithFormat(v18, 0, @"%@ %@");
        if (v24)
        {
          CFStringRef v25 = v24;
          IOPMAssertionSetProperty(AssertionID, @"AssertName", v24);
          CFRelease(v25);
        }
        CFTypeRef v17 = CFRetain(v23);
        if (!v17) {
LABEL_17:
        }
          CFTypeRef v17 = CFRetain(@"unknown");
      }
      uint64_t v26 = sub_10000FF0C(v17);
      int v33 = 1;
      switch(sub_10001B294(a1, v20, v26))
      {
        case 1u:
          sub_10001B5D8(a1, (uint64_t)v20, v27, v28, v29, v30, v31, v32, (char)v117);
          break;
        case 2u:
          sub_10001B61C(a1, (uint64_t)v20, v27, v28, v29, v30, v31, v32, (char)v117);
          goto LABEL_48;
        case 3u:
          uint64_t v34 = sub_10000FF0C(v17);
          uint64_t v35 = sub_10000FE94(v5);
          sub_10001C3D4(a1, v20, v34, v35, a2, 0, 0);
          goto LABEL_48;
        case 4u:
          uint64_t v36 = sub_10000FE94(v5);
          [(LockdownSRPState *)v8 pairingSession];
          CFStringRef v38 = v37 = v19;
          sub_10001C3D4(a1, v20, v17, v36, a2, v38, 1);

          CFStringRef v19 = v37;
          goto LABEL_48;
        case 5u:
          id v39 = sub_10000FF0C(v17);
          dispatch_source_t v40 = sub_10000FE94(v5);
          sub_10001B678(a1, v20, (uint64_t)v39, v40, a2, 0, 0);
          goto LABEL_48;
        case 6u:
          int v118 = sub_10000FF0C(v17);
          uint64_t v41 = sub_10000FE94(v5);
          uint64_t v42 = v5;
          CFAllocatorRef v43 = v18;
          uint64_t v44 = a2;
          CFStringRef v45 = v19;
          int v46 = v41;
          int v47 = [(LockdownSRPState *)v8 pairingSession];
          unsigned int v48 = v46;
          CFStringRef v19 = v45;
          a2 = v44;
          CFAllocatorRef v18 = v43;
          uint64_t v5 = v42;
          sub_10001B678(a1, v20, (uint64_t)v118, v48, a2, v47, 1);

          goto LABEL_48;
        case 7u:
          CFStringRef v49 = (const __CFString *)sub_10000FF0C(v17);
          uint64_t v50 = sub_10000FE94(v5);
          sub_10001C97C(a1, v20, v49, v50, v51, v52, v53, v54, (char)v117);
          goto LABEL_48;
        case 8u:
          CFStringRef v55 = (const __CFString *)sub_10000FF0C(v17);
          uint64_t v56 = sub_10000FE94(v5);
          sub_10001DB24(a1, v20, v55, v56, v57, v58, v59, v60, (char)v117);
          goto LABEL_48;
        case 9u:
          goto LABEL_31;
        case 0xAu:
          if (sub_10000E660(*a2, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", v28, v29, v30, v31, v32)&& sub_100003074(*(void *)(a1 + 24)) == 3)
          {
            CFStringRef v61 = (const __CFString *)sub_10000FF0C(v17);
            uint64_t v62 = [(LockdownSRPState *)v8 pairingSession];
            sub_10002BB10((uint64_t *)a1, v20, v61, 1, v62);
          }
          else
          {
LABEL_31:
            CFStringRef v63 = (const __CFString *)sub_10000FF0C(v17);
            sub_10002BB10((uint64_t *)a1, v20, v63, 0, 0);
          }
          goto LABEL_48;
        case 0xBu:
          uint64_t v64 = sub_10000FE94(v5);
          uint64_t v65 = sub_10000FF0C(v17);
          sub_10001DE88(a1, v20, v64, (uint64_t)v65, v66, v67, v68, v69);
          goto LABEL_48;
        case 0xCu:
          uint64_t v70 = sub_10000FF0C(v17);
          CFStringRef v71 = sub_10000FE94(v5);
          sub_10001E328(a1, v20, (uint64_t)v70, v71, v72, v73, v74, v75, (char)v117);
          goto LABEL_48;
        case 0xDu:
          sub_10001E4F4(a1, v20, v27, v28, v29, v30, v31, v32, (char)v117);
          goto LABEL_48;
        case 0xEu:
          sub_10001E9C8(a1, v20, v27, v28, v29, v30, v31, v32, (char)v117);
          goto LABEL_48;
        case 0xFu:
          CFStringRef v76 = (const __CFString *)sub_10000FF0C(v17);
          sub_10001F458(a1, v20, v76, v77, v78, v79, v80, v81, (char)v117);
          goto LABEL_48;
        case 0x10u:
          uint64_t v82 = sub_10000FF0C(v17);
          sub_10001FD1C(a1, (uint64_t)v20, (uint64_t)v82, v83, v84, v85, v86, v87, (char)v117);
          goto LABEL_48;
        case 0x11u:
          CFStringRef v97 = (const __CFString *)sub_10000FF0C(v17);
          CFDataRef v98 = sub_10000FE94(v5);
          sub_10001C97C(a1, v20, v97, v98, v99, v100, v101, v102, (char)v117);
          if (v119)
          {
            if (sub_10000E560(*(NSObject ***)a1, v103, v104, v105, v106, v107, v108, v109)) {
              sub_10000D2C8(*(NSObject ***)a1, v110, v111, v112, v113, v114, v115, v116, (char)v117);
            }
          }
          else
          {
            sub_10001A558(0, (uint64_t)"handle_connection", @"but you didn't know the secret handshake", v105, v106, v107, v108, v109, (char)v117);
          }
          goto LABEL_48;
        case 0x12u:
          uint64_t v88 = sub_10000FF0C(v17);
          id v89 = sub_10000FE94(v5);
          sub_10001FF5C((uint64_t *)a1, v20, (uint64_t)v88, v89);
          goto LABEL_48;
        case 0x13u:
          uint64_t v90 = sub_10000FF0C(v17);
          int v91 = sub_10000FE94(v5);
          sub_10002CB80(a1, a2, v20, (uint64_t)v90, v91, v92, v93, v94, (char)v117);
          goto LABEL_48;
        case 0x14u:
          int v95 = 1;
          goto LABEL_46;
        case 0x15u:
          int v95 = 0;
LABEL_46:
          sub_10002CDA8(v95, a1, v8, v20);
LABEL_48:
          int v33 = 0;
          break;
        case 0x17u:
          uint64_t v96 = sub_10000FF0C(v17);
          sub_1000285E0(a1, v20, v96);
          break;
        default:
          break;
      }
    }
    else
    {
      int v33 = 1;
    }
    if (v20) {
      CFRelease(v20);
    }
  }
  while (((sub_100003060(*(unsigned int **)(a1 + 24)) != -1) & ~v33) != 0);
  sub_1000225E8(a1, v9, v10, v11, v12, v13, v14, v15);
  if (v17) {
    CFRelease(v17);
  }
  if (AssertionID) {
    IOPMAssertionRelease(AssertionID);
  }
  if (v5) {
    CFRelease(v5);
  }
  [(LockdownSRPState *)v8 invalidate];
}

uint64_t sub_100025ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2)
  {
    CFStringRef v25 = @"Invalid inputs.";
LABEL_11:
    sub_10001A558(0, (uint64_t)"store_dict", (uint64_t)v25, a4, a5, a6, a7, a8, v42);
    return 0xFFFFFFFFLL;
  }
  id v9 = [objc_alloc((Class)NSString) initWithCString:a1 encoding:4];
  if (!v9)
  {
    CFStringRef v25 = @"Failed to create string.";
    goto LABEL_11;
  }
  uint64_t v10 = v9;
  id v43 = 0;
  uint64_t v11 = +[NSPropertyListSerialization dataWithPropertyList:a2 format:200 options:0 error:&v43];
  id v12 = v43;
  CFAllocatorRef v18 = v12;
  if (v11)
  {
    CFStringRef v19 = +[NSFileManager defaultManager];
    unsigned __int8 v20 = [v19 fileExistsAtPath:v10];

    id v21 = v10;
    int v22 = open_dprotected_np((const char *)[v21 fileSystemRepresentation], 1794, 4, 0);
    if (v22 != -1)
    {
      int v23 = v22;
      if ((v20 & 1) != 0
        || !chmod((const char *)[v21 fileSystemRepresentation], 0x1A4u))
      {
        id v28 = v11;
        id v29 = (id)write(v23, [v28 bytes], (size_t)[v28 length]);
        if (v29 == [v28 length])
        {
          uint64_t v26 = 0;
LABEL_20:
          close(v23);

          return v26;
        }
        CFStringRef v24 = @"Failed to write data to %@: %s";
      }
      else
      {
        CFStringRef v24 = @"Failed to update file permissions for %@: %s";
      }
      uint64_t v36 = __error();
      strerror(*v36);
      sub_10001A558(0, (uint64_t)"store_dict", (uint64_t)v24, v37, v38, v39, v40, v41, (char)v21);
      uint64_t v26 = 0xFFFFFFFFLL;
      goto LABEL_20;
    }
    uint64_t v30 = __error();
    strerror(*v30);
    sub_10001A558(0, (uint64_t)"store_dict", @"Failed to create %@: %s", v31, v32, v33, v34, v35, (char)v21);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"store_dict", @"Failed to serialize dictionary: %@", v13, v14, v15, v16, v17, (char)v12);
  }
  return 0xFFFFFFFFLL;
}

id sub_100026110(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v8 = a1;
  if (!a1)
  {
    sub_10001A558(0, (uint64_t)"_load_dict", @"Invalid input.", a4, a5, a6, a7, a8, v23);
    return v8;
  }
  id v9 = [objc_alloc((Class)NSString) initWithCString:a1 encoding:4];
  if (!v9)
  {
    sub_10001A558(0, (uint64_t)"_load_dict", @"Failed to create string for %s.", v10, v11, v12, v13, v14, (char)v8);
    return 0;
  }
  uint64_t v15 = v9;
  id v16 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:v9];
  if (!v16)
  {
    sub_10001A558(0, (uint64_t)"_load_dict", @"Failed to load %s.", v17, v18, v19, v20, v21, (char)v8);

    return 0;
  }
  id v8 = v16;

  return v8;
}

void sub_1000261E0(const __CFDictionary *a1, void *a2)
{
  uint64_t v11 = a2;
  CFIndex Count = CFDictionaryGetCount(a1);
  int v4 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  uint64_t v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFDictionaryGetKeysAndValues(a1, v4, v5);
  if (Count)
  {
    uint64_t v6 = v4;
    CFBooleanRef v7 = v5;
    do
    {
      uint64_t v9 = (uint64_t)*v6++;
      uint64_t v8 = v9;
      uint64_t v10 = (uint64_t)*v7++;
      v11[2](v11, v8, v10);
      --Count;
    }
    while (Count);
  }
  free(v4);
  free(v5);
}

void sub_1000262CC(const __CFSet *a1, void *a2)
{
  CFBooleanRef v7 = a2;
  CFIndex Count = CFSetGetCount(a1);
  int v4 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFSetGetValues(a1, v4);
  if (Count)
  {
    uint64_t v5 = v4;
    do
    {
      uint64_t v6 = (uint64_t)*v5++;
      v7[2](v7, v6);
      --Count;
    }
    while (Count);
  }
  free(v4);
}

CFMutableDictionaryRef sub_10002637C()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    sub_10001A558(0, (uint64_t)"create_dict", @"Failed to allocate dictionary.", v0, v1, v2, v3, v4, v7);
  }
  return Mutable;
}

CFMutableArrayRef sub_1000263D4()
{
  CFMutableArrayRef result = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!result)
  {
    sub_10001A558(0, (uint64_t)"create_array", @"Could not create mutable dictionary! We are dead!", v1, v2, v3, v4, v5, vars0);
    exit(-1);
  }
  return result;
}

__CFArray *sub_100026424(const __CFDictionary *a1)
{
  uint64_t v2 = sub_1000263D4();
  if (a1)
  {
    size_t Count = CFDictionaryGetCount(a1);
    if (Count)
    {
      uint64_t v4 = Count;
      uint64_t v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
      if (!v5)
      {
        sub_10001A558(0, (uint64_t)"copy_keys", @"Could not allocate key list. We are dead.", v6, v7, v8, v9, v10, v15);
        exit(-1);
      }
      uint64_t v11 = v5;
      CFDictionaryGetKeysAndValues(a1, v5, 0);
      if (v4 >= 1)
      {
        uint64_t v12 = v11;
        do
        {
          uint64_t v13 = *v12++;
          CFArrayAppendValue(v2, v13);
          --v4;
        }
        while (v4);
      }
      free(v11);
    }
  }
  return v2;
}

char *sub_1000264E0(char *__s)
{
  if (__s)
  {
    int v2 = *__s;
    if (*__s)
    {
      uint64_t v3 = &__s[strlen(__s) - 1];
      while (v3 > __s)
      {
        int v4 = *v3--;
        if (v4 != 47)
        {
          while (v3 > __s)
          {
            int v5 = *v3--;
            if (v5 == 47)
            {
              ++v3;
              goto LABEL_11;
            }
          }
          goto LABEL_16;
        }
      }
LABEL_11:
      if (v3 == __s)
      {
LABEL_16:
        if (v2 == 47) {
          __int16 v9 = 47;
        }
        else {
          __int16 v9 = 46;
        }
        *(_WORD *)__s = v9;
        return __s;
      }
      uint64_t v6 = v3 - 1;
      do
      {
        uint64_t v7 = v3;
        if (v6 <= __s) {
          break;
        }
        int v8 = *v6--;
        --v3;
      }
      while (v8 == 47);
      char *v7 = 0;
    }
  }
  return __s;
}

char *sub_100026594(char *__s)
{
  if (__s)
  {
    int v2 = *__s;
    if (*__s)
    {
      size_t v3 = strlen(__s) - 1;
      do
      {
        size_t v4 = v3;
        int v5 = &__s[v3];
        if (v5 <= __s) {
          break;
        }
        int v6 = *v5;
        size_t v3 = v4 - 1;
      }
      while (v6 == 47);
      if (v4 || v2 != 47)
      {
        size_t v7 = v4 + 1;
        uint64_t v8 = 1;
        do
        {
          size_t v9 = v7;
          size_t v10 = v8;
          uint64_t v11 = &__s[v7];
          uint64_t v12 = v11 - 1;
          if (v11 - 1 <= __s) {
            break;
          }
          int v13 = *(v11 - 2);
          size_t v7 = v9 - 1;
          ++v8;
        }
        while (v13 != 47);
        if (v9 != 1) {
          memmove(__s, v12, v10);
        }
        __s[v10] = 0;
      }
      else
      {
        *(_WORD *)__s = 47;
      }
    }
  }
  return __s;
}

void sub_100026654(const char *a1)
{
  char v1 = (char)a1;
  memset(&v14, 0, sizeof(v14));
  uint64_t v2 = stat(a1, &v14);
  if (v2)
  {
    uint64_t v8 = __error();
    strerror(*v8);
    sub_10001A558(0, (uint64_t)"log_file_info", @"Can't stat %s: %s", v9, v10, v11, v12, v13, v1);
  }
  else
  {
    sub_10001A558(v2, (uint64_t)"log_file_info", @"stat %s uid=%d gid=%d p=%o", v3, v4, v5, v6, v7, v1);
  }
}

void sub_1000266EC(const char *a1)
{
  sub_100026654(a1);
  __strlcpy_chk();
  sub_1000264E0(__s);
  sub_100026654(__s);
}

uint64_t sub_100026768(uint64_t a1, char a2, const char *a3)
{
  __strlcpy_chk();
  v41[0] = &v43;
  v41[1] = 0;
  if (!a3) {
    goto LABEL_4;
  }
  uint64_t v5 = v42;
  if (!realpath_DARWIN_EXTSN(a3, v42))
  {
    sub_10001A558(0, (uint64_t)"empty_directory_ignoring_path", @"ignorePath %s was invalid", v6, v7, v8, v9, v10, (char)a3);
LABEL_4:
    uint64_t v5 = 0;
  }
  uint64_t v11 = fts_open(v41, 21, 0);
  if (!v11)
  {
    CFStringRef v24 = @"fts_open: %s";
    goto LABEL_27;
  }
  uint64_t v12 = v11;
  uint64_t v13 = fts_read(v11);
  if (!v13)
  {
LABEL_22:
    uint64_t v23 = 0;
    goto LABEL_25;
  }
  stat v14 = v13;
  CFStringRef v15 = @"unlink %s: %s";
  while (1)
  {
    unsigned int fts_info = v14->fts_info;
    if (fts_info > 0xD) {
      goto LABEL_14;
    }
    if (((1 << fts_info) & 0x3108) == 0) {
      break;
    }
    if (v5 && realpath_DARWIN_EXTSN(v14->fts_path, __s2) && (uint64_t v17 = strcmp(v5, __s2), !v17))
    {
      sub_10001A558(v17, (uint64_t)"empty_directory_ignoring_path", @"ignoring unlink of %s", v18, v19, v20, v21, v22, (char)v5);
    }
    else if (unlink(v14->fts_path) == -1)
    {
      goto LABEL_24;
    }
LABEL_14:
    stat v14 = fts_read(v12);
    if (!v14) {
      goto LABEL_22;
    }
  }
  if (fts_info != 6 || (a2 & 1) == 0 && !v14->fts_level || rmdir(v14->fts_path) != -1) {
    goto LABEL_14;
  }
  CFStringRef v15 = @"rmdir %s: %s";
LABEL_24:
  fts_path = v14->fts_path;
  uint64_t v26 = __error();
  strerror(*v26);
  sub_10001A558(0, (uint64_t)"empty_directory_ignoring_path", (uint64_t)v15, v27, v28, v29, v30, v31, (char)fts_path);
  sub_1000266EC(v14->fts_path);
  fts_read(v12);
  uint64_t v23 = 1;
LABEL_25:
  if (fts_close(v12))
  {
    CFStringRef v24 = @"fts_close: %s";
LABEL_27:
    uint64_t v32 = __error();
    char v33 = strerror(*v32);
    sub_10001A558(0, (uint64_t)"empty_directory_ignoring_path", (uint64_t)v24, v34, v35, v36, v37, v38, v33);
    return 1;
  }
  return v23;
}

uint64_t sub_1000269B0(uint64_t a1)
{
  return sub_100026768(a1, 0, 0);
}

uint64_t sub_1000269BC(const char *a1)
{
  __strlcpy_chk();
  v15[0] = &v16;
  v15[1] = 0;
  uint64_t v2 = fts_open(v15, 21, 0);
  if (!v2)
  {
    uint64_t v5 = 1;
    CFStringRef v6 = @"fts_open: %s";
LABEL_10:
    uint64_t v7 = __error();
    char v8 = strerror(*v7);
    sub_10001A558(0, (uint64_t)"is_empty_path", (uint64_t)v6, v9, v10, v11, v12, v13, v8);
    return v5;
  }
  uint64_t v3 = v2;
  while (1)
  {
    uint64_t v4 = fts_read(v3);
    if (!v4) {
      break;
    }
    if (strcmp(v4->fts_path, a1))
    {
      uint64_t v5 = 0;
      goto LABEL_8;
    }
  }
  uint64_t v5 = 1;
LABEL_8:
  if (fts_close(v3))
  {
    CFStringRef v6 = @"fts_close: %s";
    goto LABEL_10;
  }
  return v5;
}

uint64_t sub_100026AC0(const char *a1, __int16 a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 0x200) != 0)
  {
    sub_10001A558(0, (uint64_t)"safe_open", @"safe_open can't be used to create %s", a4, a5, a6, a7, a8, (char)a1);
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return sub_100026B24(a1, a2, 0, a3);
  }
}

uint64_t sub_100026B24(const char *a1, int a2, unsigned int a3, int a4)
{
  memset(&v37, 0, sizeof(v37));
  uint64_t v6 = open(a1, a2 | 0x100, a3);
  if (v6 == -1)
  {
    if (*__error() != 2)
    {
      __error();
      uint64_t v13 = __error();
      strerror(*v13);
      sub_10001A558(0, (uint64_t)"_safe_open", @"Failed to open %s: %d (%s)", v14, v15, v16, v17, v18, (char)a1);
    }
  }
  else
  {
    uint64_t v7 = v6;
    if (fcntl(v6, 50, __s1) == -1)
    {
      __error();
      uint64_t v19 = __error();
      strerror(*v19);
      sub_10001A558(0, (uint64_t)"_safe_open", @"F_GETPATH failed for %s: %d (%s)", v20, v21, v22, v23, v24, (char)a1);
    }
    else if (!strcmp(__s1, a1))
    {
      if (fstat(v7, &v37) == -1)
      {
        __error();
        uint64_t v31 = __error();
        strerror(*v31);
        sub_10001A558(0, (uint64_t)"_safe_open", @"fstat failed for %s: %d (%s)", v32, v33, v34, v35, v36, (char)a1);
      }
      else
      {
        if ((v37.st_mode & 0xF000) == a4) {
          return v7;
        }
        sub_10001A558(0, (uint64_t)"_safe_open", @"File type for %s is not expected type (actual/expected): %d/%d", v26, v27, v28, v29, v30, (char)a1);
      }
    }
    else
    {
      sub_10001A558(0, (uint64_t)"_safe_open", @"%s was actually %s, something fishy is going on", v8, v9, v10, v11, v12, (char)a1);
    }
    close(v7);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100026D04(const char *a1, __int16 a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 0x200) != 0)
  {
    return sub_100026B24(a1, a2, a3, a4);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"safe_create", @"safe_create requires O_CREAT %s", a4, a5, a6, a7, a8, (char)a1);
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

BOOL sub_100026D60()
{
  int v0 = sub_100026B24("/AppleInternal/Lockdown/.hactivateoff", 256, 0, 0x8000);
  int v1 = v0;
  if (v0 != -1) {
    close(v0);
  }
  return v1 != -1;
}

const void *sub_100026DB0(char a1)
{
  if (!csops()) {
    return 0;
  }
  if (*__error() != 34)
  {
    uint64_t v14 = __error();
    strerror(*v14);
    sub_10001A558(0, (uint64_t)"copy_entitlements_for_pid", @"csops1(%d): %s\n", v15, v16, v17, v18, v19, a1);
    return 0;
  }
  uint64_t v2 = (UInt8 *)malloc_type_calloc(1uLL, bswap32(0), 0x6A1037DEuLL);
  if (csops())
  {
    uint64_t v8 = __error();
    strerror(*v8);
    sub_10001A558(0, (uint64_t)"copy_entitlements_for_pid", @"csops2(%d): %s\n", v9, v10, v11, v12, v13, a1);
    if (!v2) {
      return 0;
    }
    goto LABEL_15;
  }
  if (*(_DWORD *)v2 != 1903288058)
  {
    sub_10001A558(0, (uint64_t)"copy_entitlements_for_pid", @"bad magic 0x%08x\n", v3, v4, v5, v6, v7, *(_DWORD *)v2);
LABEL_15:
    free(v2);
    return 0;
  }
  unsigned int v20 = bswap32(*((_DWORD *)v2 + 1));
  if (v20 < 9) {
    goto LABEL_15;
  }
  CFIndex v21 = v20 - 8;
  *((_DWORD *)v2 + 1) = v21;
  CFDataRef v22 = CFDataCreateWithBytesNoCopy(0, v2 + 8, v21, kCFAllocatorNull);
  if (!v22) {
    goto LABEL_15;
  }
  CFDataRef v23 = v22;
  CFPropertyListRef v24 = CFPropertyListCreateWithData(0, v22, 0, 0, 0);
  CFStringRef v25 = v24;
  if (v24)
  {
    CFTypeID v26 = CFGetTypeID(v24);
    if (v26 != CFDictionaryGetTypeID())
    {
      CFRelease(v25);
      CFStringRef v25 = 0;
    }
  }
  free(v2);
  CFRelease(v23);
  return v25;
}

uint64_t sub_100026F6C(uint64_t a1, const void *a2, const __CFDictionary *Value, uint64_t a4, uint64_t a5, int a6)
{
  if (sub_100003074(*(void *)(a1 + 24)) != 4) {
    return 1;
  }
  if (Value)
  {
    if (CFDictionaryGetValue(Value, @"com.apple.private.lockdown.lockdown_query")
      && CFEqual(a2, @"lockdown_query"))
    {
      return 1;
    }
    if (a4 && a5)
    {
      CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"%@/%@", a4, a5);
    }
    else if (a4)
    {
      CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"%@/NULL", a4);
    }
    else
    {
      if (!a5)
      {
        CFStringRef v13 = @"NULL/NULL";
LABEL_15:
        if ((a6 - 3) > 1)
        {
          switch(a6)
          {
            case 22:
              uint64_t Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"com.apple.private.MobileActivation");
              if (v13) {
                CFRelease(v13);
              }
              CFStringRef v13 = @"GetActivationState";
LABEL_26:
              if (!Value) {
                goto LABEL_30;
              }
              CFTypeID v15 = CFGetTypeID(Value);
              if (v15 == CFArrayGetTypeID())
              {
                v16.length = CFArrayGetCount(Value);
                v16.location = 0;
                uint64_t Value = (const __CFDictionary *)(CFArrayContainsValue(Value, v16, v13) != 0);
                goto LABEL_30;
              }
LABEL_29:
              uint64_t Value = 0;
LABEL_30:
              if (v13) {
                CFRelease(v13);
              }
              return (uint64_t)Value;
            case 8:
              CFStringRef v14 = @"com.apple.private.lockdown.finegrained-remove";
              break;
            case 7:
              CFStringRef v14 = @"com.apple.private.lockdown.finegrained-set";
              break;
            default:
              goto LABEL_29;
          }
        }
        else
        {
          CFStringRef v14 = @"com.apple.private.lockdown.finegrained-get";
        }
        uint64_t Value = (const __CFDictionary *)CFDictionaryGetValue(Value, v14);
        goto LABEL_26;
      }
      CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"NULL/%@", a5);
    }
    CFStringRef v13 = v12;
    goto LABEL_15;
  }
  return (uint64_t)Value;
}

unint64_t sub_100027124()
{
  if (qword_1001B80E0 != -1) {
    dispatch_once(&qword_1001B80E0, &stru_100186C90);
  }
  uint64_t v0 = mach_absolute_time();
  LODWORD(v1) = dword_1001B80D8;
  LODWORD(v2) = *(_DWORD *)algn_1001B80DC;
  return (unint64_t)((double)v0 * (double)v1 / (double)v2 / 1000000000.0);
}

void sub_100027194(id a1)
{
}

__darwin_time_t sub_1000271A0()
{
  v1.tv_sec = 0;
  v1.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v1);
  return v1.tv_sec;
}

id sub_1000271D0()
{
  size_t size = 0;
  id v0 = 0;
  if (!sysctlbyname("kern.bootsessionuuid", 0, &size, 0, 0))
  {
    timespec v1 = malloc_type_malloc(size, 0xF0FA1E88uLL);
    if (v1)
    {
      unint64_t v2 = v1;
      id v0 = 0;
      if (!sysctlbyname("kern.bootsessionuuid", v1, &size, 0, 0)) {
        id v0 = [objc_alloc((Class)NSString) initWithUTF8String:v2];
      }
      free(v2);
    }
    else
    {
      return 0;
    }
  }
  return v0;
}

CFTypeRef sub_100027284(const void *a1)
{
  CFTypeRef result = (CFTypeRef)_MGSCopyLocalizedString();
  if (!result)
  {
    return CFRetain(a1);
  }
  return result;
}

uint64_t sub_1000272E0()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  char v6 = 0;
  if (qword_1001B80F0 != -1) {
    dispatch_once(&qword_1001B80F0, &stru_100186CB0);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000273F8;
  block[3] = &unk_1001861C8;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1001B80E8, block);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000273B8(id a1)
{
  qword_1001B80E8 = (uint64_t)dispatch_queue_create("com.apple.lockdown.fmip.restore", 0);

  _objc_release_x1();
}

void sub_1000273F8(uint64_t a1)
{
  id v2 = +[FMDFMIPManager sharedInstance];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v2 lockdownShouldDisableDeviceRestore];
}

uint64_t sub_100027458()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  char v6 = 0;
  if (qword_1001B8100 != -1) {
    dispatch_once(&qword_1001B8100, &stru_100186CD0);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100027570;
  block[3] = &unk_1001861C8;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1001B80F8, block);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100027530(id a1)
{
  qword_1001B80F8 = (uint64_t)dispatch_queue_create("com.apple.lockdown.fmip.pairing", 0);

  _objc_release_x1();
}

void sub_100027570(uint64_t a1)
{
  id v2 = +[FMDFMIPManager sharedInstance];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v2 lockdownShouldDisableDevicePairing];
}

uint64_t sub_1000275D0()
{
  uint64_t v0 = (const char *)[(__CFString *)@"com.apple.mobile.lockdown.BonjourServiceChanged" UTF8String];

  return notify_post(v0);
}

char *sub_100027608()
{
  CFMutableSetRef Mutable = CFSetCreateMutable(0, 0, 0);
  if (Mutable)
  {
    CFSetRef v7 = Mutable;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10002779C;
    v19[3] = &unk_100186CF0;
    v19[4] = Mutable;
    sub_1000143DC(v19);
    if (CFSetGetCount(v7))
    {
      +[NSMutableString stringWithString:@"_apple-mobdev2._tcp"];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100027880;
      v17[3] = &unk_100186D18;
      id v8 = (id)objc_claimAutoreleasedReturnValue();
      id v18 = v8;
      sub_1000262CC(v7, v17);

      id v9 = v8;
      CFTypeID v15 = strdup((const char *)[v9 UTF8String]);
      if (!v15) {
        sub_10001A558(0, (uint64_t)"copy_mdns_service_string", @"Failed to copy string.", v10, v11, v12, v13, v14, v17[0]);
      }
    }
    else
    {
      id v9 = 0;
      CFTypeID v15 = 0;
    }
    CFRelease(v7);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_mdns_service_string", @"Failed to create set.", v2, v3, v4, v5, v6, v17[0]);
    CFTypeID v15 = 0;
  }
  return v15;
}

uint64_t sub_10002779C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (v3)
  {
    id v10 = [v3 objectForKey:@"SystemBUID"];
    uint64_t v11 = sub_10001B06C(v10);

    if (v11)
    {
      id v17 = v10;
      id v18 = (const Bytef *)[v17 UTF8String];
      id v10 = v17;
      uInt v19 = strlen((const char *)[v10 UTF8String]);
      unsigned int v20 = (const void *)adler32(0, v18, v19);
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v20);
    }
    else
    {
      sub_10001A558(0, (uint64_t)"copy_mdns_service_string_block_invoke", @"Pair record doesn't contain buid.", v12, v13, v14, v15, v16, v22);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"copy_mdns_service_string_block_invoke", @"Invalid pair record.", v4, v5, v6, v7, v8, v22);
  }

  return 1;
}

id sub_100027880(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@",%08x", a2];
}

id sub_1000278B0()
{
  uint64_t v0 = +[MCProfileConnection sharedConnection];
  id v1 = [v0 isDeviceNameModificationAllowed];

  return v1;
}

id sub_1000278F0()
{
  uint64_t v0 = +[MCProfileConnection sharedConnection];
  id v1 = [v0 isUnpairedExternalBootToRecoveryAllowed];

  return v1;
}

uint64_t sub_100027930(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  id v9 = +[MCProfileConnection sharedConnection];
  unsigned int v10 = [v9 hostMayPairWithOptions:a1 challenge:a3];

  switch(v10)
  {
    case 0u:
      sub_10001A558(0, (uint64_t)"mc_allow_pairing", @"hostMayPairWithOptions said no", v11, v12, v13, v14, v15, v17);
      uint64_t result = 0;
      *a4 = 0;
      goto LABEL_6;
    case 1u:
      sub_10001A558(0, (uint64_t)"mc_allow_pairing", @"hostMayPairWithOptions said yes with prompt", v11, v12, v13, v14, v15, v17);
      *a4 = 0;
      *a5 = 0;
      uint64_t result = 1;
      break;
    case 2u:
      sub_10001A558(0, (uint64_t)"mc_allow_pairing", @"hostMayPairWithOptions said yes without prompt", v11, v12, v13, v14, v15, v17);
      uint64_t result = 1;
      *a4 = 1;
LABEL_6:
      *a5 = 0;
      break;
    case 3u:
      sub_10001A558(0, (uint64_t)"mc_allow_pairing", @"hostMayPairWithOptions said challenge", v11, v12, v13, v14, v15, v17);
      *a4 = 0;
      uint64_t result = 1;
      *a5 = 1;
      break;
    default:
      sub_10001A558(0, (uint64_t)"mc_allow_pairing", @"hostMayPairWithOptions returned unknown value: %d", v11, v12, v13, v14, v15, v10);
      uint64_t result = 0;
      break;
  }
  return result;
}

CFDataRef sub_100027A94(size_t a1)
{
  int v2 = sub_100026B24("/dev/random", 0, 0, 0x2000);
  if (v2 == -1) {
    return 0;
  }
  int v3 = v2;
  uint64_t v4 = malloc_type_malloc(a1, 0xD4E5EDE5uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    if (read(v3, v4, a1) != a1)
    {
      sub_10001A558(0, (uint64_t)"create_random_challenge", @"failed to read %zu random bytes", v6, v7, v8, v9, v10, a1);
LABEL_9:
      close(v3);
      free(v5);
      return 0;
    }
    CFDataRef v11 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v5, a1, kCFAllocatorMalloc);
    if (!v11) {
      goto LABEL_9;
    }
  }
  else
  {
    CFDataRef v11 = 0;
  }
  close(v3);
  return v11;
}

CFBooleanRef sub_100027B84()
{
  uint64_t v0 = +[MCProfileConnection sharedConnection];
  unsigned int v1 = [v0 isSupervised];

  int v2 = &kCFBooleanTrue;
  if (!v1) {
    int v2 = &kCFBooleanFalse;
  }
  return *v2;
}

void sub_100027BDC(void *a1)
{
  int v2 = (__CFDictionary *)sub_10000DF38((uint64_t)a1, @"com.apple.mobile.backup", 0);
  CFPropertyListRef v9 = sub_10001ABE4(@"Version", @"com.apple.mobile.ldbackup", v3, v4, v5, v6, v7, v8);
  if (!v2)
  {
LABEL_8:
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (CFDictionaryGetCount(v2) > 0 || v9 == 0)
  {
    CFDictionarySetValue(v2, @"Version", @"2.0");
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)sub_100027CBC, a1);
    goto LABEL_8;
  }
LABEL_9:
  CFRelease(v9);
LABEL_10:
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t sub_100027CBC(const __CFString *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001AAC4(a1, a2, @"com.apple.mobile.ldbackup", a4, a5, a6, a7, a8);

  return sub_10000E184(a3, @"com.apple.mobile.backup", (uint64_t)a1, v10, v11, v12, v13, v14);
}

uint64_t sub_100027D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFPropertyListRef v8 = sub_10001ABE4(@"SetupState", @"com.apple.purplebuddy", a3, a4, a5, a6, a7, a8);
  CFPropertyListRef v15 = sub_10001ABE4(@"SetupDone", @"com.apple.purplebuddy", v9, v10, v11, v12, v13, v14);
  CFPropertyListRef v22 = sub_10001ABE4(@"SetupFinishedAllSteps", @"com.apple.purplebuddy", v16, v17, v18, v19, v20, v21);
  unsigned int v23 = sub_100002D98();
  if (sub_10000FF84(v15) && CFEqual(v15, kCFBooleanTrue)
    || sub_10000FF84(v22) && CFEqual(v22, kCFBooleanTrue)
    || (sub_10000FF0C(v8) ? (int v24 = 1) : (int v24 = v23), v24 == 1))
  {
    uint64_t v25 = 1;
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v25 = 0;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
LABEL_11:
  if (v15) {
    CFRelease(v15);
  }
  if (v22) {
    CFRelease(v22);
  }
  return v25;
}

void sub_100027E2C(io_iterator_t a1, void *a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = IOIteratorNext(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    do
    {
      v5[2](v5, v4);
      IOObjectRelease(v4);
      uint64_t v4 = IOIteratorNext(a1);
    }
    while (v4);
  }
}

uint64_t sub_100027EB8(IONotificationPort *a1, const char *a2, uint64_t a3, void *a4)
{
  kern_return_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  io_iterator_t v22;
  id v23;
  char v25;
  io_iterator_t notification;

  id v7 = a4;
  uint64_t v13 = v7;
  notification = 0;
  if (a3)
  {
    id v14 = objc_retainBlock(v7);
    CFPropertyListRef v15 = sub_100027FC4(v14);

    uint64_t v16 = IOServiceAddMatchingNotification(a1, a2, (CFDictionaryRef)a3, (IOServiceMatchingCallback)sub_100028050, v15, &notification);
    if (v16)
    {
      sub_10001A558(0, (uint64_t)"register_matching_notification", @"IOServiceAddMatchingNotification: 0x%08x", v17, v18, v19, v20, v21, v16);
      a3 = 0;
    }
    else
    {
      CFPropertyListRef v22 = notification;
      unsigned int v23 = objc_retainBlock(v15);
      sub_100027E2C(v22, v23);

      a3 = 1;
    }
    uint64_t v13 = v15;
  }
  else
  {
    sub_10001A558(0, (uint64_t)"register_matching_notification", @"no matching dictionary", v8, v9, v10, v11, v12, v25);
  }

  return a3;
}

id sub_100027FC4(void *a1)
{
  uint64_t v1 = qword_1001B8110;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1001B8110, &stru_100186DA0);
  }
  id v3 = [v2 copy];

  uint64_t v4 = (__CFSet *)qword_1001B8108;
  id v5 = v3;
  CFSetAddValue(v4, v5);

  return v5;
}

void sub_100028050(void *a1, io_iterator_t a2)
{
  id v3 = objc_retainBlock(a1);
  sub_100027E2C(a2, v3);
}

BOOL sub_1000280A0(IONotificationPort *a1, const char *a2, io_service_t a3, id a4)
{
  kern_return_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  kern_return_t v15;
  io_object_t notification;

  notification = 0;
  id v7 = objc_retainBlock(a4);
  uint64_t v8 = sub_100027FC4(v7);

  uint64_t v9 = IOServiceAddInterestNotification(a1, a3, a2, (IOServiceInterestCallback)sub_10002815C, v8, &notification);
  CFPropertyListRef v15 = v9;
  if (v9) {
    sub_10001A558(0, (uint64_t)"register_message_notification", @"IOServiceAddInterestNotification: 0x%08x", v10, v11, v12, v13, v14, v9);
  }

  return v15 == 0;
}

void sub_10002815C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = objc_retainBlock(a1);
  v7[2](v7, a2, a3, a4);
}

uint64_t sub_1000281C8(IONotificationPort *a1, const char *a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  id v11 = a6;
  id v17 = v11;
  if (a4)
  {
    id v18 = objc_retainBlock(v11);
    uint64_t v19 = sub_100027FC4(v18);

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000282E0;
    v21[3] = &unk_100186D80;
    char v25 = a5;
    unsigned int v23 = a1;
    uint64_t v24 = a3;
    id v17 = v19;
    id v22 = v17;
    a4 = sub_100027EB8(a1, a2, a4, v21);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"register_matching_message_notification", @"no matching dictionary", v12, v13, v14, v15, v16, v21[0]);
  }

  return a4;
}

void sub_1000282E0(uint64_t a1, io_service_t a2)
{
  io_iterator_t existing = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    CFDictionaryRef v4 = IOServiceMatching("IOUSBDeviceInterface");
    if (IOServiceGetMatchingServices(kIOMasterPortDefault, v4, &existing)) {
      sub_10001A558(0, (uint64_t)"register_matching_message_notification_block_invoke", @"Failed to get the IO service matching dictionary.", v5, v6, v7, v8, v9, v15);
    }
    else {
      sub_100027E2C(existing, &stru_100186D58);
    }
  }
  if (!sub_1000280A0(*(IONotificationPort **)(a1 + 40), *(const char **)(a1 + 48), a2, *(id *)(a1 + 32))) {
    sub_10001A558(0, (uint64_t)"register_matching_message_notification_block_invoke", @"register_matching_notification failed", v10, v11, v12, v13, v14, v15);
  }
}

void sub_100028398(id a1, unsigned int a2)
{
  CFMutableDictionaryRef properties = 0;
  if (a2)
  {
    if (IORegistryEntryCreateCFProperties(a2, &properties, kCFAllocatorDefault, 0))
    {
      CFStringRef v12 = @"Failed to create properties for IO service.";
    }
    else
    {
      uint64_t Value = CFDictionaryGetValue(properties, @"USBDeviceFunction");
      if (sub_10000FF0C(Value))
      {
        if (CFEqual(Value, @"AppleUSBMux") || CFEqual(Value, @"PTP"))
        {
          uint64_t v14 = CFDictionaryGetValue(properties, @"IsActive");
          if (sub_10000FF84(v14))
          {
            if (CFEqual(v14, kCFBooleanTrue))
            {
              int v20 = CFEqual(Value, @"AppleUSBMux");
              if (v20) {
                LOBYTE(v20) = 1;
              }
              sub_10001655C(v20);
            }
          }
          else
          {
            sub_10001A558(0, (uint64_t)"detect_connected_usb_host", @"Invalid value: %@", v15, v16, v17, v18, v19, (char)v14);
          }
        }
        goto LABEL_5;
      }
      if (!Value)
      {
LABEL_5:
        if (properties) {
          CFRelease(properties);
        }
        return;
      }
      char v21 = (char)Value;
      CFStringRef v12 = @"Invalid value: %@";
    }
    sub_10001A558(0, (uint64_t)"detect_connected_usb_host", (uint64_t)v12, v7, v8, v9, v10, v11, v21);
    goto LABEL_5;
  }

  sub_10001A558(*(uint64_t *)&a2, (uint64_t)"detect_connected_usb_host", @"Invalid input.", v2, v3, v4, v5, v6, v24);
}

CFBooleanRef sub_100028504()
{
  uint64_t v0 = +[MCProfileConnection sharedConnection];
  unsigned int v1 = [v0 isAppInstallationAllowed];

  uint64_t v2 = &kCFBooleanFalse;
  if (!v1) {
    uint64_t v2 = &kCFBooleanTrue;
  }
  return *v2;
}

CFBooleanRef sub_10002855C()
{
  uint64_t v0 = +[MCProfileConnection sharedConnection];
  unsigned int v1 = [v0 isAppRemovalAllowed];

  uint64_t v2 = &kCFBooleanFalse;
  if (!v1) {
    uint64_t v2 = &kCFBooleanTrue;
  }
  return *v2;
}

void sub_1000285B4(id a1)
{
  qword_1001B8108 = (uint64_t)CFSetCreateMutable(0, 0, 0);
}

void sub_1000285E0(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6 = sub_100002B30(@"ValidateAutomationRecord");
  if (v6)
  {
    uint64_t v10 = v6;
    if (!sub_10000FF0C(a3) || (uint64_t v14 = sub_10000FE94(a2), !a1) || !v14)
    {
      sub_10000F804((uint64_t)"handle_validate_pairing_and_enable_remotepairing_promptless_approval", 227, -3, 0, @"Invalid input(s).", v11, v12, v13, v91);
      id v40 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v41 = sub_10000FB88(v40);
      sub_100002B8C(1, (uint64_t)"handle_validate_pairing_and_enable_remotepairing_promptless_approval", v10, v41);
      if (!a1) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    if (sub_100003074(*(void *)(a1 + 24)) == 5)
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, @"SignedUDID");
      if (sub_10000FF48(Value))
      {
        CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, @"PairRecord");
        if (sub_10000FE94(v19))
        {
          int v20 = CFDictionaryGetValue(v19, @"HostID");
          if (sub_10000FF0C(v20))
          {
            CFErrorRef error = 0;
            if (v19)
            {
              unsigned int v23 = CFDictionaryGetValue(v19, @"DeviceCertificate");
              if (sub_10000FF48(v23))
              {
                CFStringRef v27 = (const __CFString *)CFDictionaryGetValue(v19, @"HostID");
                if (sub_10000FF0C(v27))
                {
                  CFDictionaryRef v28 = (const __CFDictionary *)sub_100015268(v27);
                  if (v28)
                  {
                    CFDictionaryRef v29 = v28;
                    uint64_t v30 = CFDictionaryGetValue(v28, @"DeviceCertificate");
                    if (sub_10000FF48(v30))
                    {
                      if (!CFEqual(v23, v30))
                      {
                        uint64_t v88 = @"Host pairing record does not have a matching device certificate.";
                        uint64_t v89 = 70;
                        int v90 = -5;
LABEL_55:
                        uint64_t v39 = sub_10000F804((uint64_t)"copy_device_root_cert_for_host_record", v89, v90, 0, v88, v31, v32, v33, v91);
                        uint64_t v38 = 0;
LABEL_56:
                        id v57 = v39;
                        CFRelease(v29);
LABEL_36:

                        id v61 = v57;
                        if (!v38)
                        {
                          uint64_t v77 = sub_10000F804((uint64_t)"udid_signature_is_valid", 149, -5, v61, @"Failed to copy root cert matching host pair record.", v58, v59, v60, v91);

                          id v76 = v77;
                          BOOL v71 = 0;
LABEL_47:

                          id v84 = v76;
                          if (v71)
                          {
                            sub_100028C14(v19);
                            char v85 = remotepairingAllowPromptlessPairing();
                            id v40 = v84;

                            if ((v85 & 1) == 0)
                            {
                              uint64_t v86 = sub_10000F804((uint64_t)"handle_validate_pairing_and_enable_remotepairing_promptless_approval", 267, -1, v40, @"Failed to allowlist host for promptless RemotePairing.", v45, v46, v47, v91);

                              uint64_t v87 = sub_10000FB88(v86);
                              sub_100002B8C(1, (uint64_t)"handle_validate_pairing_and_enable_remotepairing_promptless_approval", v10, v87);
                              id v40 = v86;
                            }
                            goto LABEL_27;
                          }
                          sub_10000F804((uint64_t)"handle_validate_pairing_and_enable_remotepairing_promptless_approval", 261, -5, v84, @"Failed to validate signature from host.", v81, v82, v83, v91);
                          id v40 = (id)objc_claimAutoreleasedReturnValue();

                          uint64_t v51 = v40;
LABEL_26:
                          uint64_t v52 = sub_10000FB88(v51);
                          sub_100002B8C(1, (uint64_t)"handle_validate_pairing_and_enable_remotepairing_promptless_approval", v10, v52);
LABEL_27:
                          sub_1000029C0(*(void *)(a1 + 24), v10, v42, v43, v44, v45, v46, v47, v91);
                          goto LABEL_28;
                        }
                        uint64_t v62 = (void *)MGCopyAnswer();
                        CFStringRef v63 = sub_10001B06C(v62);

                        if (v63)
                        {
                          SecKeyRef v67 = SecCertificateCopyKey(v38);
                          if (v67)
                          {
                            uint64_t v68 = v67;
                            CFDataRef v69 = [v62 dataUsingEncoding:4];
                            int v70 = SecKeyVerifySignature(v68, kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw, v69, Value, &error);
                            BOOL v71 = v70 != 0;

                            if (!v70)
                            {
                              uint64_t v75 = sub_10000F804((uint64_t)"udid_signature_is_valid", 166, -5, error, @"Failed to validate signature.", v72, v73, v74, v91);

                              id v61 = (id)v75;
                            }
                            id v76 = v61;
                            CFRelease(v68);
                            goto LABEL_46;
                          }
                          uint64_t v78 = @"Failed to copy public key.";
                          uint64_t v79 = 161;
                        }
                        else
                        {
                          uint64_t v78 = @"Failed to query UDID.";
                          uint64_t v79 = 155;
                        }
                        uint64_t v80 = sub_10000F804((uint64_t)"udid_signature_is_valid", v79, -1, 0, v78, v64, v65, v66, v91);

                        id v76 = v80;
                        BOOL v71 = 0;
LABEL_46:
                        CFRelease(v38);

                        goto LABEL_47;
                      }
                      CFDataRef v34 = (const __CFData *)CFDictionaryGetValue(v29, @"RootCertificate");
                      if (sub_10000FF48(v34))
                      {
                        uint64_t v38 = sub_10000F4E8(v34);
                        if (v38)
                        {
                          uint64_t v39 = 0;
                        }
                        else
                        {
                          uint64_t v39 = sub_10000F804((uint64_t)"copy_device_root_cert_for_host_record", 82, -5, 0, @"Failed to load PEM.", v35, v36, v37, v91);
                        }
                        goto LABEL_56;
                      }
                      uint64_t v88 = @"Device pair record missing host certificate.";
                      uint64_t v89 = 76;
                    }
                    else
                    {
                      uint64_t v88 = @"Device pair record missing device certificate.";
                      uint64_t v89 = 65;
                    }
                    int v90 = -3;
                    goto LABEL_55;
                  }
                  uint64_t v54 = @"Failed to load pair record for %@.";
                  uint64_t v91 = (uint64_t)v27;
                  uint64_t v55 = 59;
                  int v56 = -7;
                }
                else
                {
                  uint64_t v54 = @"Host pairing record is missing host id.";
                  uint64_t v55 = 53;
                  int v56 = -6;
                }
              }
              else
              {
                uint64_t v54 = @"Host pair record missing device certificate.";
                uint64_t v55 = 47;
                int v56 = -3;
              }
              uint64_t v53 = sub_10000F804((uint64_t)"copy_device_root_cert_for_host_record", v55, v56, 0, v54, v24, v25, v26, v91);
            }
            else
            {
              sub_10001A558(0, (uint64_t)"copy_device_root_cert_for_host_record", @"Invalid inputs.", v21, v22, v15, v16, v17, v91);
              uint64_t v53 = 0;
            }
            id v57 = v53;
            uint64_t v38 = 0;
            goto LABEL_36;
          }
          unsigned int v48 = @"Host pairing record is missing host id.";
          uint64_t v49 = 255;
          int v50 = -6;
LABEL_25:
          uint64_t v51 = sub_10000F804((uint64_t)"handle_validate_pairing_and_enable_remotepairing_promptless_approval", v49, v50, 0, v48, v15, v16, v17, v91);
          id v40 = v51;
          goto LABEL_26;
        }
        unsigned int v48 = @"Request is missing the host's pair record.";
        uint64_t v49 = 248;
      }
      else
      {
        unsigned int v48 = @"Request is missing the signed UDID.";
        uint64_t v49 = 240;
      }
      int v50 = -3;
      goto LABEL_25;
    }
    unsigned int v48 = @"Pairing upgrade is only supported over RSD.";
    uint64_t v49 = 233;
    int v50 = -4;
    goto LABEL_25;
  }
  sub_10000F804((uint64_t)"handle_validate_pairing_and_enable_remotepairing_promptless_approval", 222, -1, 0, @"Failed to create response message.", v7, v8, v9, v91);
  id v40 = (id)objc_claimAutoreleasedReturnValue();
LABEL_28:
}

uint64_t sub_100028C14(const __CFDictionary *a1)
{
  id v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", "-----BEGIN CERTIFICATE-----\nMIIDPTCCAiWgAwIBAgIBATANBgkqhkiG9w0BAQsFADBOMSkwJwYDVQQDDCBUZXN0\nIEF1dG9tYXRpb24gTG9ja2Rvd24gUm9vdCBDQTEUMBIGA1UECgwLQXBwbGUsIElu\nYy4xCzAJBgNVBAYTAlVTMB4XDTE3MDkyMTAxNDIyN1oXDTE3MDkyMjAxNDIyN1ow\nTjEpMCcGA1UEAwwgVGVzdCBBdXRvbWF0aW9uIExvY2tkb3duIFJvb3QgQ0ExFDAS\nBgNVBAoMC0FwcGxlLCBJbmMuMQswCQYDVQQGEwJVUzCCASIwDQYJKoZIhvcNAQEB\nBQADggEPADCCAQoCggEBALb4vJZBLlbrG9NE7BvAGf0WgNmgeHWKXEwM+HHTHM7x\n0gJunt5R6z+lb8lSH1/lz1VMwPV4mAoShObmLHhiYKfmdbeMzDmeOkGV6bJKNHxU\n854NJPd9e7yQkUlVXrkewsnmhRE1WytgGVpTns1JcKT7bFGiUGIFfX/l8ciLtGXA\nZ8rgeXzl2EUq62rOaNzLkHm1WAiUhWW3MU70MQXKFa3JbhLysa4XHxPqIzdmBe+N\nKHiMT3cLENYMQ/OSiIr1Ssa622+zTTaRHXT+ysc7smrgr2ZKaMY+a+oqJ00AMUJI\nXbEtMjLr5BPQqWPZSTThK2crxUwoTZuLg+PLYbApjrECAwEAAaMmMCQwEgYDVR0T\nAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAqQwDQYJKoZIhvcNAQELBQADggEB\nAD/1Hy7Sf6xE8nWiBy+ioOc7jXwWXNaRQb9lF8yAAFBtzRvkFKyN8LX+1QielIMx\n41Z8XTwv9ibhZF0ETlxZch9wduwL3wwKirBLbvqUJJ5XKW7hlUUXR7MC8trQFWIk\nntGLrtmcKSDWyWHu2eVPjJmQh+v6xetufq0u3TokqE/X+/fpPcu596mYRrovJY8g\np9gFmpAN8E4gqEfQUj9ak8aIces12cnOapL7ZHo0XHltLBBQd+4sLDO7JUlKAi2A\n"
         "SQxevep+SlLsUQYoAvr1CPxGkWuEBj/3oXhmk7EesJjDsnSnloMGoHVxxkRIipvr\n"
         "6TK70j9afDnOjNWRNmXMHLM=\n"
         "-----END CERTIFICATE-----\n",
         1184);
  if (!v5)
  {
    uint64_t v9 = @"Failed to load automation root cert.";
    uint64_t v10 = 111;
    int v11 = -1;
LABEL_8:
    sub_10000F804((uint64_t)"host_record_is_automation_record", v10, v11, 0, v9, v2, v3, v4, v13);

    uint64_t v8 = 0;
    goto LABEL_9;
  }
  CFDataRef Value = CFDictionaryGetValue(a1, @"RootCertificate");
  uint64_t v7 = sub_10000FF48(Value);
  if (!v7)
  {
    uint64_t v9 = @"Invalid root certificate.";
    uint64_t v10 = 117;
    int v11 = -3;
    goto LABEL_8;
  }
  if (!CFEqual(v7, v5))
  {
    uint64_t v9 = @"Host pairing record is not for automation.";
    uint64_t v10 = 122;
    int v11 = -5;
    goto LABEL_8;
  }
  uint64_t v8 = 1;
LABEL_9:

  return v8;
}

void sub_100028CF0(void *a1)
{
  id v1 = a1;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  id v3 = [v1 copy];

  CFStringRef v4 = (const __CFString *)kRemotePairingTrustedHostsUpdatedNotificationName;

  CFNotificationCenterAddObserver(DarwinNotifyCenter, v3, (CFNotificationCallback)sub_100028D70, v4, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_100028D70(int a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"remotepairing_new_pairing_callback", @"New RemotePairing-based pairing established.", a4, a5, a6, a7, a8, v15);
  }
  id v9 = objc_retainBlock(a2);
  id v16 = v9;
  if (v9) {
    (*((void (**)(void))v9 + 2))();
  }
  else {
    sub_10001A558(0, (uint64_t)"remotepairing_new_pairing_callback", @"Invalid input.", v10, v11, v12, v13, v14, v15);
  }
}

SSLContext *sub_100028E08(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, int a5)
{
  CFTypeRef cf = 0;
  SecTrustRef trust = 0;
  CFErrorRef error = 0;
  CFTypeRef certificates = 0;
  SSLContextRef context = 0;
  CFDataRef v14 = sub_10000F4E8(a2);
  if (v14)
  {
    uint64_t v15 = sub_10000F53C(a3);
    if (v15)
    {
      uint64_t v21 = (const void *)v15;
      _SSLNewContext(a5 == 0, &context);
      if (context)
      {
        if (!SSLSetIOFuncs(context, (SSLReadFunc)sub_100029250, (SSLWriteFunc)sub_100029338)
          && !_SSLSetEnableCertVerify(context, 0)
          && (a5 || !SSLSetClientSideAuthenticate(context, kAlwaysAuthenticate)))
        {
          values = (void *)SecIdentityCreate();
          CFArrayRef v27 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
          CFRelease(values);
          if (!SSLSetCertificate(context, v27))
          {
            if (!v27) {
              goto LABEL_12;
            }
            goto LABEL_10;
          }
          sub_10001A558(0, (uint64_t)"lockssl_create_context", @"Could not set identity", v28, v29, v30, v31, v32, v56);
          if (v27) {
LABEL_10:
          }
            CFRelease(v27);
        }
      }
      else
      {
        sub_10001A558(0, (uint64_t)"lockssl_create_context", @"Could not create SSL context", v22, v23, v24, v25, v26, v56);
      }
LABEL_12:
      CFRelease(v21);
      if (!v14) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"lockssl_create_context", @"Could not decode certificate", v9, v10, v11, v12, v13, v56);
    uint64_t v21 = (const void *)sub_10000F53C(a3);
    if (v21) {
      goto LABEL_12;
    }
  }
  sub_10001A558(0, (uint64_t)"lockssl_create_context", @"Could not decode private key", v16, v17, v18, v19, v20, v56);
  if (v14) {
LABEL_13:
  }
    CFRelease(v14);
LABEL_14:
  uint64_t v38 = context;
  if (context)
  {
    if (SSLSetProtocolVersionMin(context, kTLSProtocol1))
    {
      CFStringRef v55 = @"Could Not Set Minimum Protocol Version";
    }
    else
    {
      OSStatus v39 = SSLSetConnection(v38, (SSLConnectionRef)a1);
      if (v39)
      {
        sub_10001A558(0, (uint64_t)"lockssl_handshake", @"SSLSetConnection returned %ld", v40, v41, v42, v43, v44, v39);
        goto LABEL_65;
      }
      SSLSetSessionOption(v38, (SSLSessionOption)(2 * (a5 == 0)), 1u);
      do
      {
        OSStatus v45 = SSLHandshake(v38);
        if (v45 == -9841)
        {
          if (_SSLCopyPeerCertificates(v38, (CFArrayRef *)&certificates))
          {
            CFStringRef v55 = @"SSLCopyPeerCertificates failed";
            goto LABEL_64;
          }
          LockdownPairing = (const void *)SecPolicyCreateLockdownPairing();
          if (SecTrustCreateWithCertificates(certificates, LockdownPairing, &trust))
          {
            sub_10001A558(0, (uint64_t)"lockssl_handshake", @"SecTrustCreateWithCertificates failed", v47, v48, v49, v50, v51, v56);
LABEL_60:
            uint64_t v53 = 0;
            goto LABEL_66;
          }
          CFTypeRef cf = sub_10000F4E8(a4);
          if (!cf) {
            goto LABEL_60;
          }
          CFArrayRef v52 = CFArrayCreate(kCFAllocatorDefault, &cf, 1, &kCFTypeArrayCallBacks);
          if (SecTrustSetAnchorCertificates(trust, v52)) {
            goto LABEL_62;
          }
          if (!SecTrustEvaluateWithError(trust, &error))
          {
            sub_10001A558(0, (uint64_t)"lockssl_handshake", @"SecTrustEvalute failed", v33, v34, v35, v36, v37, v56);
LABEL_62:
            uint64_t v53 = 0;
            goto LABEL_38;
          }
          if (certificates) {
            CFRelease(certificates);
          }
          CFTypeRef certificates = 0;
          if (v52) {
            CFRelease(v52);
          }
          if (cf) {
            CFRelease(cf);
          }
          CFTypeRef cf = 0;
          if (LockdownPairing) {
            CFRelease(LockdownPairing);
          }
          if (trust) {
            CFRelease(trust);
          }
          SecTrustRef trust = 0;
          OSStatus v45 = -9803;
        }
      }
      while (v45 == -9803);
      if (!v45)
      {
        LockdownPairing = 0;
        CFArrayRef v52 = 0;
        uint64_t v53 = v38;
        uint64_t v38 = 0;
        goto LABEL_38;
      }
      char v56 = v45;
      CFStringRef v55 = @"SSLHandshake returned %ld";
    }
  }
  else
  {
    CFStringRef v55 = @"Could not create ssl context";
  }
LABEL_64:
  sub_10001A558(0, (uint64_t)"lockssl_handshake", (uint64_t)v55, v33, v34, v35, v36, v37, v56);
LABEL_65:
  uint64_t v53 = 0;
  LockdownPairing = 0;
LABEL_66:
  CFArrayRef v52 = 0;
LABEL_38:
  if (certificates) {
    CFRelease(certificates);
  }
  CFTypeRef certificates = 0;
  if (v52) {
    CFRelease(v52);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  if (LockdownPairing) {
    CFRelease(LockdownPairing);
  }
  if (trust) {
    CFRelease(trust);
  }
  SecTrustRef trust = 0;
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0;
  if (v38)
  {
    SSLClose(v38);
    _SSLDisposeContext(v38);
  }
  return v53;
}

uint64_t sub_100029250(int a1, char *a2, size_t *a3)
{
  size_t v6 = *a3;
  *a3 = 0;
  size_t v7 = v6;
  while (1)
  {
    *__error() = -555;
    if (sub_100003328(a1, v8, v9, v10, v11, v12, v13, v14))
    {
      sub_10001A558(0, (uint64_t)"SocketRead", @"walk away", v15, v16, v17, v18, v19, v23);
      goto LABEL_7;
    }
    ssize_t v20 = recv(a1, a2, v7, 0);
    if (v20 <= 0) {
      break;
    }
    a2 += v20;
    v7 -= v20;
    if (!v7)
    {
      uint64_t result = 0;
      goto LABEL_14;
    }
  }
  if (!v20)
  {
    uint64_t result = 4294957491;
    goto LABEL_14;
  }
  int v22 = *__error();
  uint64_t result = 4294957493;
  if (v22 != 2 && v22 != 35)
  {
    if (v22 != 54)
    {
      uint64_t result = 4294967260;
      goto LABEL_14;
    }
LABEL_7:
    uint64_t result = 4294957490;
  }
LABEL_14:
  *a3 = v6 - v7;
  return result;
}

uint64_t sub_100029338(int __fd, uint64_t a2, unint64_t *a3)
{
  unint64_t v6 = 0;
  unint64_t v7 = *a3;
  *a3 = 0;
  while (1)
  {
    ssize_t v8 = write(__fd, (const void *)(a2 + v6), v7 - v6);
    if (v8 < 1) {
      break;
    }
    v6 += v8;
    if (v6 >= v7)
    {
      uint64_t result = 0;
      goto LABEL_11;
    }
  }
  int v10 = *__error();
  if (v10 == 32) {
    unsigned int v11 = -9806;
  }
  else {
    unsigned int v11 = -36;
  }
  if (v10 == 35) {
    uint64_t result = 4294957493;
  }
  else {
    uint64_t result = v11;
  }
LABEL_11:
  *a3 = v6;
  return result;
}

CFBooleanRef sub_1000293D0()
{
  uint64_t v0 = (void *)MAEGetActivationStateWithError();
  if (([v0 isEqualToString:kMAActivationStateActivated] & 1) != 0
    || [v0 isEqualToString:kMAActivationStateFactoryActivated])
  {
    id v1 = &kCFBooleanFalse;
  }
  else
  {
    id v1 = &kCFBooleanTrue;
  }
  CFBooleanRef v2 = *v1;

  return v2;
}

uint64_t sub_100029444()
{
  return MAEGetActivationStateWithError();
}

void sub_10002944C(const __CFString *a1)
{
  char v1 = (char)a1;
  uint64_t CString = CFStringGetCString(a1, buffer, 1024, 0x8000100u);
  if (CString)
  {
    sub_100006D80(v20);
    snprintf(__str, 0x400uLL, "%s%s/%s.plist", v20, "/Library/Lockdown/escrow_records", buffer);
    sub_10001A558(0, (uint64_t)"destroy_escrow_record", @"Destroying escrow bag for %s", v8, v9, v10, v11, v12, (char)buffer);
    if (unlink(__str) == -1 && *__error() != 2)
    {
      uint64_t v13 = __error();
      strerror(*v13);
      sub_10001A558(0, (uint64_t)"destroy_escrow_record", @"Could not unlink %s: %s", v14, v15, v16, v17, v18, (char)__str);
      sub_1000266EC(__str);
    }
  }
  else
  {
    sub_10001A558(CString, (uint64_t)"destroy_escrow_record", @"CFStringGetCString failure for %@", v3, v4, v5, v6, v7, v1);
  }
}

uint64_t sub_100029580()
{
  sub_100006D80(v2);
  snprintf(__str, 0x400uLL, "%s%s", v2, "/Library/Lockdown/escrow_records");
  return sub_1000269B0((uint64_t)__str);
}

id sub_100029608(void *a1, void *a2)
{
  id v3 = a1;
  if (MKBDeviceUnlockedSinceBoot() == 1)
  {
    sub_100006D80(v22);
    snprintf(__str, 0x400uLL, "%s%s/%s.plist", v22, "/Library/Lockdown/escrow_records", (const char *)[v3 UTF8String]);
    CFDictionaryRef v7 = (const __CFDictionary *)sub_10002610C(__str);
    if (sub_10000FE94(v7))
    {
      uint64_t v11 = CFDictionaryGetValue(v7, @"BagBag");
      uint64_t v12 = sub_10001B004(v11);

      if (v12)
      {
        id v16 = v11;
        id v17 = 0;
        uint64_t v11 = v16;
        goto LABEL_11;
      }
      sub_10000F804((uint64_t)"copy_escrow_key", 177, -3, 0, @"Escrow key is missing from escrow record.", v13, v14, v15, v20);
      id v17 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      sub_10000F804((uint64_t)"copy_escrow_key", 171, -9, 0, @"Failed to load escrow record.", v8, v9, v10, v20);
      id v17 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v11 = 0;
    }
  }
  else
  {
    sub_10000F804((uint64_t)"copy_escrow_key", 161, -8, 0, @"Escrow records are not available before first unlock.", v4, v5, v6, v19);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = 0;
    CFDictionaryRef v7 = 0;
  }
  id v16 = 0;
  if (a2 && v17)
  {
    id v17 = v17;
    id v16 = 0;
    *a2 = v17;
  }
LABEL_11:
  if (v7) {
    CFRelease(v7);
  }

  return v16;
}

const void *sub_1000297F0(const __CFDictionary *a1)
{
  uint64_t v8 = 0;
  uint64_t result = CFDictionaryGetValue(a1, @"HostID");
  if (result)
  {
    sub_10002982C((uint64_t)result, (uint64_t)&v8, v2, v3, v4, v5, v6, v7);
    return (const void *)v8;
  }
  return result;
}

uint64_t sub_10002982C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = -1;
  if (qword_1001B8120 != -1)
  {
    dispatch_once(&qword_1001B8120, &stru_100186DC0);
    if (a2) {
      goto LABEL_3;
    }
LABEL_7:
    sub_10001A558(0, (uint64_t)"_create_escrow_bag", @"Invalid input.", a4, a5, a6, a7, a8, v12);
    goto LABEL_8;
  }
  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (!a1 || !qword_1001B8118) {
    goto LABEL_7;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100029A44;
  block[3] = &unk_1001869A0;
  void block[4] = &v14;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync((dispatch_queue_t)qword_1001B8118, block);
LABEL_8:
  uint64_t v10 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_10002993C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

CFStringRef sub_100029954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = 0;
  if (!a1)
  {
    CFStringRef v13 = @"Can't create escrow bag without connection";
    goto LABEL_10;
  }
  if (!*(void *)(a1 + 48))
  {
    CFStringRef v13 = @"Can't create escrow bag without session";
    goto LABEL_10;
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 40);
  if (!v8 || (CFDataRef Value = CFDictionaryGetValue(v8, @"HostID")) == 0)
  {
    CFStringRef v13 = @"Can't determine host ID of connection";
LABEL_10:
    sub_10001A558(0, (uint64_t)"create_escrow_bag", (uint64_t)v13, a4, a5, a6, a7, a8, v14);
    return 0;
  }
  int v11 = sub_10002982C((uint64_t)Value, (uint64_t)&v15, v10, a4, a5, a6, a7, a8);
  if (!v11) {
    return (const __CFString *)v15;
  }
  if (v11 == -2) {
    return @"DEVICE_LOCKED";
  }
  return 0;
}

void sub_100029A04(id a1)
{
  qword_1001B8118 = (uint64_t)dispatch_queue_create("com.apple.mobile.lockdownd.escrow", 0);

  _objc_release_x1();
}

void sub_100029A44(uint64_t a1)
{
  memset(bytes, 0, sizeof(bytes));
  if (SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, bytes))
  {
    sub_10001A558(0, (uint64_t)"_create_escrow_bag_block_invoke_2", @"Failed to create key.", v2, v3, v4, v5, v6, v19);
    CFDataRef v7 = 0;
    goto LABEL_9;
  }
  CFDataRef v7 = CFDataCreate(0, (const UInt8 *)bytes, 32);
  if (v7)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = MKBKeyBagCreateEscrow();
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      sub_10001A558(0, (uint64_t)"_create_escrow_bag_block_invoke_2", @"Failed to create escrow bag: %d", v13, v14, v15, v16, v17, *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      goto LABEL_9;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = MKBKeyBagCopyData();
    int v19 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    CFStringRef v18 = @"Failed to copy bag data: %d";
  }
  else
  {
    CFStringRef v18 = @"Failed to create data.";
  }
  sub_10001A558(0, (uint64_t)"_create_escrow_bag_block_invoke_2", (uint64_t)v18, v8, v9, v10, v11, v12, v19);
LABEL_9:
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t sub_100029E98()
{
  if (qword_1001B8160 != -1) {
    dispatch_once(&qword_1001B8160, &stru_100186E00);
  }
  return byte_1001B8140;
}

void sub_100029EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1001B8160 != -1) {
    dispatch_once(&qword_1001B8160, &stru_100186E00);
  }
  if (byte_1001B8138 == 1)
  {
    if (byte_1001B8142) {
      uint64_t v9 = (uint64_t *)&kCFBooleanTrue;
    }
    else {
      uint64_t v9 = (uint64_t *)&kCFBooleanFalse;
    }
    sub_10000D5A8(a1, 0, @"TelephonyCapability", *v9, a5, a6, a7, a8);
    sub_10000D5A8(a1, 0, @"DeviceClass", qword_1001B8130, v10, v11, v12, v13);
    uint64_t v18 = qword_1001B8128;
    sub_10000D5A8(a1, 0, @"ProductType", v18, v14, v15, v16, v17);
  }
}

uint64_t sub_100029FC8()
{
  if (qword_1001B8160 != -1) {
    dispatch_once(&qword_1001B8160, &stru_100186E00);
  }
  return byte_1001B8142;
}

BOOL sub_10002A00C()
{
  if (qword_1001B8160 != -1) {
    dispatch_once(&qword_1001B8160, &stru_100186E00);
  }
  return dword_1001B8158 == 1;
}

void sub_10002A058(id a1)
{
  CFStringRef v1 = (const __CFString *)CFPreferencesCopyValue(@"MachineHack", @"com.apple.mobile.lockdownd", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  if (v1)
  {
    CFStringRef v7 = v1;
    byte_1001B8138 = 1;
    CFTypeID v8 = CFGetTypeID(v1);
    if (v8 != CFStringGetTypeID()
      || CFStringCompare(v7, @"n78", 1uLL) && CFStringCompare(v7, @"iPod5,1", 1uLL))
    {
      sub_10001A558(0, (uint64_t)"get_device_type_internal_block_invoke", @"MachineHack value of '%@' is not supported; assuming %@",
        v9,
        v10,
        v11,
        v12,
        v13,
        (char)v7);
    }
    CFRelease(v7);
  }
  if (byte_1001B8138) {
    goto LABEL_12;
  }
  CFStringRef v14 = (const __CFString *)MGCopyAnswer();
  qword_1001B8128 = (uint64_t)v14;
  if (v14 && CFStringFind(v14, @"iFPGA", 1uLL).location != -1)
  {
    sub_10001A558(0, (uint64_t)"get_device_type_internal_block_invoke", @"This is an FPGA, faking out product type as %@", v2, v3, v4, v5, v6, (char)@"n78");
    byte_1001B8138 = 1;
    byte_1001B8140 = 1;
    CFRelease((CFTypeRef)qword_1001B8128);
    qword_1001B8128 = 0;
  }
  if (byte_1001B8138 == 1)
  {
LABEL_12:
    sub_10001A558(0, (uint64_t)"get_device_type_internal_block_invoke", @"Overriding machine type with %@ (%@)", v2, v3, v4, v5, v6, (char)@"n78");
    qword_1001B8128 = @"iPod5,1";
    qword_1001B8130 = @"iPod";
    byte_1001B8142 = 0;
    int v15 = byte_1001B8140;
    byte_1001B8148 = byte_1001B8140;
    int v16 = -1;
    dword_1001B8150 = -1;
  }
  else
  {
    byte_1001B8142 = sub_10002A428();
    byte_1001B8148 = sub_10002A428();
    dword_1001B8150 = sub_10002A494("IODeviceTree:/baseband", @"class");
    int v16 = sub_10002A494("IODeviceTree:/product", @"lockdown-certtype");
    int v15 = byte_1001B8148;
  }
  dword_1001B8158 = v16;
  if (v15) {
    goto LABEL_21;
  }
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  *(_OWORD *)__s = 0u;
  long long v49 = 0u;
  size_t v47 = 128;
  if (sysctlbyname("hw.model", __s, &v47, 0, 0) == -1)
  {
    sub_10001A558(0, (uint64_t)"get_device_type_internal_block_invoke", @"Could not lookup hardware model", v17, v18, v19, v20, v21, v46);
  }
  else
  {
    size_t v22 = strlen(__s);
    size_t v47 = v22;
    if (v22 >= 3)
    {
      uint64_t v28 = strncmp(&__s[v22 - 3], "DEV", 3uLL);
      if (!v28)
      {
        sub_10001A558(v28, (uint64_t)"get_device_type_internal_block_invoke", @"This is some kinda dev board: %s", v23, v24, v25, v26, v27, (char)__s);
        byte_1001B8148 = 1;
        goto LABEL_21;
      }
    }
  }
  if (byte_1001B8148)
  {
LABEL_21:
    BOOL v29 = sub_100026D60();
    if (v29)
    {
      sub_10001A558(0, (uint64_t)"get_device_type_internal_block_invoke", @"we are overriding hactivation", v30, v31, v32, v33, v34, v46);
      byte_1001B8148 = 0;
    }
    else
    {
      sub_10001A558(v29, (uint64_t)"get_device_type_internal_block_invoke", @"no hactivation override detected", v30, v31, v32, v33, v34, v46);
    }
  }
  sub_10001A558(0, (uint64_t)"get_device_type_internal_block_invoke", @"product_type: %@\n", v23, v24, v25, v26, v27, qword_1001B8128);
  if (byte_1001B8142) {
    uint64_t v40 = "true";
  }
  else {
    uint64_t v40 = "false";
  }
  sub_10001A558(0, (uint64_t)"get_device_type_internal_block_invoke", @"has_telephony: %s, should_hactivate: %s", v35, v36, v37, v38, v39, (char)v40);
  sub_10001A558(0, (uint64_t)"get_device_type_internal_block_invoke", @"baseband_class: %d, cert_type %d", v41, v42, v43, v44, v45, dword_1001B8150);
}

BOOL sub_10002A428()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  CFBooleanRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  BOOL v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

uint64_t sub_10002A494(char *path, const __CFString *a2)
{
  io_registry_entry_t v3 = IORegistryEntryFromPath(kIOMasterPortDefault, path);
  if (v3 && (io_object_t v9 = v3, CFProperty = IORegistryEntryCreateCFProperty(v3, a2, 0, 0), IOObjectRelease(v9), CFProperty))
  {
    CFTypeID v11 = CFGetTypeID(CFProperty);
    if (v11 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)CFProperty) == 4)
    {
      uint64_t v17 = *(unsigned int *)CFDataGetBytePtr((CFDataRef)CFProperty);
    }
    else
    {
      sub_10001A558(0, (uint64_t)"getDeviceTreeInt", @"value for %@ property of %s is invalid (%@)", v12, v13, v14, v15, v16, (char)a2);
      uint64_t v17 = 0xFFFFFFFFLL;
    }
    CFRelease(CFProperty);
  }
  else
  {
    sub_10001A558(0, (uint64_t)"getDeviceTreeInt", @"no %@ property of %s", v4, v5, v6, v7, v8, (char)a2);
    return 0xFFFFFFFFLL;
  }
  return v17;
}

uint64_t sub_10002A590(void *a1, uint64_t a2, dispatch_queue_t *a3, char *a4)
{
  id v6 = a1;
  uint64_t v7 = dispatch_get_global_queue(0, 0);
  uint64_t v8 = sub_100019C60(a3, (uint64_t)v6);
  uint64_t v9 = sub_10001B06C(v6);
  if (!v9
    || (uint64_t v15 = (void *)v9,
        sub_10001B13C(v8),
        uint64_t v16 = objc_claimAutoreleasedReturnValue(),
        v16,
        v15,
        !v16))
  {
    sub_10001A558(0, (uint64_t)"register_remote_service_for_lockdown_service", @"Service ark contains unexpected types.", v10, v11, v12, v13, v14, v63);
    goto LABEL_7;
  }
  uint64_t v17 = [v8 objectForKeyedSubscript:@"OmitFromRSD"];
  uint64_t v18 = sub_10001B0D4(v17);
  if (v18)
  {
    uint64_t v19 = (void *)v18;
    unsigned int v20 = [v17 BOOLValue];

    if (v20)
    {
      sub_10001A558(0, (uint64_t)"register_remote_service_for_lockdown_service", @"Omitting service '%@' from registration with RSD.", v21, v22, v23, v24, v25, (char)v6);

LABEL_20:
      uint64_t v26 = 1;
      goto LABEL_21;
    }
  }
  uint64_t v27 = [v8 objectForKeyedSubscript:@"ExposedToUntrustedDevices"];
  uint64_t v28 = sub_10001B0D4(v27);

  if (!v28)
  {

    uint64_t v27 = &off_1001A8928;
  }
  unsigned int v29 = [v27 BOOLValue];
  id v30 = [objc_alloc((Class)NSString) initWithFormat:@"%@.shim.remote"];
  if (!v30)
  {
    sub_10001A558(0, (uint64_t)"register_remote_service_for_lockdown_service", @"Failed to allocate string.", v31, v32, v33, v34, v35, (char)v6);

    goto LABEL_7;
  }
  SecKeyRef v67 = v17;
  id v66 = v30;
  [v66 UTF8String];
  unsigned int v36 = v29;
  if (v29) {
    uint64_t v37 = "com.apple.mobile.lockdown.remote.untrusted";
  }
  else {
    uint64_t v37 = "com.apple.mobile.lockdown.remote.trusted";
  }
  uint64_t v38 = xpc_copy_event();
  if (v38)
  {
    xpc_object_t v39 = (xpc_object_t)v38;
    char v40 = 0;
    char v41 = 1;
  }
  else
  {
    unsigned int v64 = v36;
    string = (char *)v37;
    xpc_object_t v39 = xpc_dictionary_create(0, 0, 0);
    if (v39)
    {
      xpc_object_t v56 = xpc_dictionary_create(0, 0, 0);
      uint64_t v42 = v67;
      if (v56)
      {
        uint64_t v62 = v56;
        xpc_dictionary_set_BOOL(v56, "UsesRemoteXPC", 0);
        xpc_dictionary_set_string(v39, "RequireEntitlement", string);
        xpc_dictionary_set_value(v39, "ServiceProperties", v62);
        if (v64) {
          xpc_dictionary_set_BOOL(v39, "ExposedToUntrustedDevices", 1);
        }
        xpc_set_event();

        char v41 = 1;
        char v40 = 1;
      }
      else
      {
        sub_10001A558(0, (uint64_t)"register_service_with_rsd", @"Failed to allocate XPC dictionary.", v57, v58, v59, v60, v61, (char)v6);
        char v41 = 0;
        char v40 = 0;
      }
      uint64_t v43 = v66;
      if (!a4) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    sub_10001A558(0, (uint64_t)"register_service_with_rsd", @"Failed to allocate XPC dictionary.", v51, v52, v53, v54, v55, (char)v6);
    char v41 = 0;
    char v40 = 0;
  }
  uint64_t v43 = v66;
  uint64_t v42 = v67;
  if (a4) {
LABEL_17:
  }
    *a4 = v40;
LABEL_18:

  if (v41)
  {
    id v49 = v43;
    [v49 UTF8String];
    id v68 = v6;
    remote_service_listen_with_device();

    goto LABEL_20;
  }
  sub_10001A558(0, (uint64_t)"register_remote_service_for_lockdown_service", @"Failed to register remote service: %@", v44, v45, v46, v47, v48, (char)v43);

LABEL_7:
  uint64_t v26 = 0;
LABEL_21:

  return v26;
}

void sub_10002A974(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 32);
  id v9 = v5;
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  CFTypeRef cf = 0;
  int type = remote_device_get_type();
  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v17 = v11;
  if (!v11)
  {
    CFStringRef v32 = @"Failed to create dictionary.";
LABEL_15:
    sub_10001A558(0, (uint64_t)"handle_connection_for_rsd_lockdown_service", (uint64_t)v32, v12, v13, v14, v15, v16, v33);
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    goto LABEL_16;
  }
  [v11 setObject:v8 forKeyedSubscript:@"Service"];
  sub_1000100B8(a3);
  if ((sub_10001014C(a3) & 1) == 0)
  {
    CFStringRef v32 = @"Failed to turn on keepalive.";
    goto LABEL_15;
  }
  if (sub_10002B3D0((uint64_t)&v37, v9, v7, v6, a3))
  {
    id v34 = 0;
    id v35 = 0;
    int v23 = sub_10002B514(*((int **)&v38 + 1), &v35, &v34, v18, v19, v20, v21, v22);
    uint64_t v24 = (__CFString *)v35;
    id v25 = v34;
    uint64_t v26 = v25;
    if (v23)
    {
      if (!v25) {
        goto LABEL_8;
      }
      if (type == 13)
      {
        [v17 setObject:v25 forKeyedSubscript:@"EscrowBag"];
LABEL_8:
        uint64_t v27 = (void *)sub_10001F554((uint64_t)&v37, v17, v24, a3, (__CFDictionary **)&cf, v20, v21, v22);
        if (v27)
        {
          id v30 = v27;
          uint64_t v31 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"Failed to spawn lockdown service '%@': %@", v8, v27];

          if (!v31) {
            goto LABEL_21;
          }
          if (cf && *((void *)&v38 + 1)) {
            sub_10000352C(*((uint64_t *)&v38 + 1), cf, v29, v18, v19, v20, v21, v22);
          }
          goto LABEL_20;
        }
LABEL_16:
        uint64_t v31 = 0;
        goto LABEL_21;
      }
      uint64_t v31 = @"Unlocking with escrow bag requires trusted connection to host.";
    }
    else
    {
      uint64_t v31 = @"RSD checkin failed.";
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v26 = 0;
    uint64_t v31 = @"Initializing connection state failed.";
  }
LABEL_20:
  sub_10001A558(0, (uint64_t)"handle_connection_for_rsd_lockdown_service", @"Lockdown remote service shim error: %@", v18, v19, v20, v21, v22, (char)v31);
  close(a3);
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  sub_1000225E8((uint64_t)&v37, v28, v29, v18, v19, v20, v21, v22);
}

uint64_t sub_10002ABBC()
{
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  if (v5)
  {
    uint64_t v11 = dispatch_get_global_queue(0, 0);
    if (v11)
    {
      uint64_t v14 = v5;
      remote_device_browse_present();

      dispatch_semaphore_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v11 = 1;
    }
    else
    {
      sub_10001A558(0, (uint64_t)"refresh_remote_services", @"Failed to create queue.", v6, v7, v8, v9, v10, v13);
    }
  }
  else
  {
    sub_10001A558(0, (uint64_t)"refresh_remote_services", @"Failed to create semaphore.", v0, v1, v2, v3, v4, v13);
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_10002ACC8(uint64_t a1, void *a2, int a3)
{
  id v10 = a2;
  if (a3)
  {
    sub_10001A558(0, (uint64_t)"refresh_remote_services_block_invoke", @"Done resetting remote devices.", v5, v6, v7, v8, v9, v17);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }
  else if (remote_device_reset())
  {
    char name = remote_device_get_name();
    sub_10001A558(0, (uint64_t)"refresh_remote_services_block_invoke", @"Reset remote device %s", v12, v13, v14, v15, v16, name);
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
  {
    sub_100104C58();
  }
}

BOOL sub_10002AD80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = dispatch_get_global_queue(0, 0);
    remote_service_listen_with_device();
    remote_service_listen_with_device();

    id v10 = 0;
  }
  else
  {
    sub_10000F804((uint64_t)"lockdown_rsd_setup", 482, -2, 0, @"Invalid argument(s).", a6, a7, a8, v13);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    if (a2)
    {
      id v10 = v10;
      *a2 = v10;
    }
  }

  return a1 != 0;
}

uint64_t sub_10002AEC8(uint64_t a1, void *a2, int a3)
{
  uint64_t result = sub_10002AF48(a2, a3, *(uint64_t **)(a1 + 32), 1);
  if ((result & 1) == 0)
  {
    sub_10001A558(0, (uint64_t)"lockdown_rsd_setup_block_invoke", @"Failed to process trusted remote connection on socket %d.", v5, v6, v7, v8, v9, a3);
    return close(a3);
  }
  return result;
}

uint64_t sub_10002AF48(void *a1, int a2, uint64_t *a3, int a4)
{
  id v7 = a1;
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  uint64_t v43 = *(void *)"";
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v44 = "";
  uint64_t v49 = 0;
  uint64_t v35 = 0;
  unsigned int v36 = &v35;
  uint64_t v37 = 0x3032000000;
  long long v38 = sub_10002B7CC;
  long long v39 = sub_10002B7DC;
  id v40 = 0;
  sub_10000FFC0(a2);
  sub_10001003C(a2);
  sub_1000100B8(a2);
  if ((sub_10001014C(a2) & 1) == 0)
  {
    CFStringRef v24 = @"Failed to turn on keepalive.";
LABEL_10:
    sub_10001A558(0, (uint64_t)"handle_lockdown_remote_service", (uint64_t)v24, v8, v9, v10, v11, v12, v33);
    sub_1000225E8((uint64_t)(v42 + 4), v25, v26, v27, v28, v29, v30, v31);
    uint64_t v23 = 0;
    goto LABEL_11;
  }
  if (!sub_10002B3D0((uint64_t)(v42 + 4), v7, a3[1], *a3, a2))
  {
    CFStringRef v24 = @"Initializing connection state failed.";
    goto LABEL_10;
  }
  if ((sub_10002B514((int *)v42[7], 0, 0, v8, v9, v10, v11, v12) & 1) == 0)
  {
    CFStringRef v24 = @"RSD checkin failed.";
    goto LABEL_10;
  }
  CFStringRef v50 = @"Request";
  CFStringRef v51 = @"StartService";
  uint64_t v13 = +[NSDictionary dictionaryWithObjects:&v51 forKeys:&v50 count:1];
  sub_10000352C(v42[7], v13, v14, v15, v16, v17, v18, v19);
  if (a4) {
    v42[10] = (uint64_t)sub_1000104C4();
  }
  uint64_t v20 = os_transaction_create();
  uint64_t v21 = (void *)v36[5];
  v36[5] = v20;

  uint64_t v22 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002B7E4;
  block[3] = &unk_100186C70;
  void block[4] = &v41;
  void block[5] = &v35;
  void block[6] = a3;
  dispatch_async(v22, block);

  uint64_t v23 = 1;
LABEL_11:
  _Block_object_dispose(&v35, 8);

  _Block_object_dispose(&v41, 8);
  return v23;
}

void sub_10002B1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

uint64_t sub_10002B204(uint64_t a1, void *a2, int a3)
{
  uint64_t result = sub_10002AF48(a2, a3, *(uint64_t **)(a1 + 32), 0);
  if ((result & 1) == 0)
  {
    sub_10001A558(0, (uint64_t)"lockdown_rsd_setup_block_invoke_2", @"Failed to process untrusted remote connection on socket %d.", v5, v6, v7, v8, v9, a3);
    return close(a3);
  }
  return result;
}

id sub_10002B284(void *a1, void *a2)
{
  id v3 = a1;
  if (MKBDeviceUnlockedSinceBoot() == 1)
  {
    uint64_t name = remote_device_get_name();
    if (!name)
    {
      sub_10001A558(0, (uint64_t)"copy_escrow_secret_for_remote_device", @"Failed to get remote device name.", v8, v9, v10, v11, v12, v21);
      id v15 = 0;
      uint64_t v14 = 0;
      goto LABEL_10;
    }
    uint64_t v13 = +[NSString stringWithUTF8String:name];
    uint64_t v14 = RemotePairingCopyRemoteUnlockDeviceKeyForTunnel();
    id v15 = 0;

    if (!v14)
    {
      uint64_t v19 = sub_10000F920((uint64_t)"copy_escrow_secret_for_remote_device", 539, -1, v15, @"Failed to copy remote unlock key from RemotePairingDevice.", v16, v17, v18, v21);

      id v15 = (id)v19;
    }
  }
  else
  {
    sub_10000F804((uint64_t)"copy_escrow_secret_for_remote_device", 527, -8, 0, @"Device has not been unlocked since boot.", v4, v5, v6, v21);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v14 = 0;
  }
  if (a2 && v15)
  {
    id v15 = v15;
    *a2 = v15;
  }
LABEL_10:

  return v14;
}

uint64_t sub_10002B3D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  id v9 = a2;
  id v15 = v9;
  if (!a1 || !a3 || !a4 || a5 < 0)
  {
    sub_10001A558(0, (uint64_t)"init_rsd_conn_state", @"Invalid argument(s).", v10, v11, v12, v13, v14, type);
    if (!a1) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a3;
  id v16 = v9;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = v16;
  if (remote_device_get_type() == 9 || remote_device_get_type() == 13)
  {
    int v17 = 5;
  }
  else
  {
    if (remote_device_get_type() != 7)
    {
      char type = remote_device_get_type();
      CFStringRef v31 = @"Unexpected remote device type: %d";
      goto LABEL_16;
    }
    int v17 = 6;
  }
  *(_DWORD *)(a1 + 16) = v17;
  uint64_t v18 = sub_100002FBC();
  *(void *)(a1 + 24) = v18;
  if (!v18)
  {
    CFStringRef v31 = @"Failed to create connection object.";
LABEL_16:
    sub_10001A558(0, (uint64_t)"init_rsd_conn_state", (uint64_t)v31, v19, v20, v21, v22, v23, type);
LABEL_17:
    sub_1000225E8(a1, v24, v25, v26, v27, v28, v29, v30);
    a1 = 0;
    goto LABEL_18;
  }
  sub_100002FE4((uint64_t)v18, a5, *(_DWORD *)(a1 + 16));
  a1 = 1;
LABEL_18:

  return a1;
}

uint64_t sub_10002B514(int *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_10001A558(0, (uint64_t)"rsd_client_checkin", @"Invalid input.", a4, a5, a6, a7, a8, v54);
    uint64_t v51 = 0;
    id v31 = 0;
    uint64_t v18 = 0;
    long long v38 = 0;
    uint64_t v12 = 0;
    CFDictionaryRef v11 = 0;
    goto LABEL_18;
  }
  CFDictionaryRef v11 = sub_100003704(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v12 = sub_10001B13C(v11);

  if (!v12)
  {
    CFStringRef v52 = @"Failed to receive message.";
LABEL_14:
    sub_10001A558(0, (uint64_t)"rsd_client_checkin", (uint64_t)v52, v13, v14, v15, v16, v17, v54);
    uint64_t v51 = 0;
    id v31 = 0;
    uint64_t v18 = 0;
LABEL_17:
    long long v38 = 0;
    goto LABEL_18;
  }
  uint64_t v12 = [(__CFDictionary *)v11 objectForKeyedSubscript:@"Request"];
  uint64_t v18 = sub_10001B06C(v12);

  if (!v18)
  {
    sub_10001A558(0, (uint64_t)"rsd_client_checkin", @"Invalid or missing request key: %@", v19, v20, v21, v22, v23, (char)@"Request");
LABEL_16:
    uint64_t v51 = 0;
    id v31 = 0;
    goto LABEL_17;
  }
  if (([v12 isEqual:@"RSDCheckin"] & 1) == 0)
  {
    char v54 = (char)v12;
    CFStringRef v52 = @"Unexpected message type: %@";
    goto LABEL_14;
  }
  uint64_t v18 = [(__CFDictionary *)v11 objectForKeyedSubscript:@"Label"];
  uint64_t v24 = sub_10001B06C(v18);

  if (!v24)
  {
    sub_10001A558(0, (uint64_t)"rsd_client_checkin", @"Invalid or missing request key: %@", v25, v26, v27, v28, v29, (char)@"Label");
    goto LABEL_16;
  }
  uint64_t v30 = [(__CFDictionary *)v11 objectForKeyedSubscript:@"EscrowBag"];
  id v31 = v30;
  if (v30)
  {
    CFStringRef v32 = sub_10001B004(v30);

    if (!v32)
    {
      sub_10001A558(0, (uint64_t)"rsd_client_checkin", @"Invalid request key: %@", v33, v34, v35, v36, v37, (char)@"EscrowBag");
      uint64_t v51 = 0;
      goto LABEL_17;
    }
  }
  CFStringRef v55 = @"Request";
  CFStringRef v56 = @"RSDCheckin";
  long long v38 = +[NSDictionary dictionaryWithObjects:&v56 forKeys:&v55 count:1];
  int v45 = sub_10000352C((uint64_t)a1, v38, v39, v40, v41, v42, v43, v44);
  if (v45)
  {
    sub_10001A558(0, (uint64_t)"rsd_client_checkin", @"Failed to send message: %d", v46, v47, v48, v49, v50, v45);
    uint64_t v51 = 0;
  }
  else
  {
    if (a2) {
      *a2 = v18;
    }
    if (a3)
    {
      id v31 = v31;
      *a3 = v31;
    }
    uint64_t v51 = 1;
  }
LABEL_18:

  return v51;
}

uint64_t sub_10002B7CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002B7DC(uint64_t a1)
{
}

void sub_10002B7E4(uint64_t a1)
{
  sub_10002581C(*(void *)(*(void *)(a1 + 32) + 8) + 32, *(uint64_t **)(a1 + 48));
  dispatch_time_t v3 = dispatch_time(0, 10000000000);
  uint64_t v4 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002B8C4;
  block[3] = &unk_1001861C8;
  void block[4] = *(void *)(a1 + 40);
  dispatch_after(v3, v4, block);
}

void sub_10002B8C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

uint64_t sub_10002BA1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (uint64_t v8 = *a1) != 0)
  {
    sub_10000D5A8(v8, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", (uint64_t)kCFBooleanTrue, a5, a6, a7, a8);
    uint64_t v9 = 1;
    CFStringRef v10 = @"Wireless pairing enabled.";
  }
  else
  {
    uint64_t v9 = 0;
    CFStringRef v10 = @"Invalid input.";
  }
  sub_10001A558(0, (uint64_t)"advertise_wireless_pairing", (uint64_t)v10, a4, a5, a6, a7, a8, v12);
  return v9;
}

uint64_t sub_10002BA9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (uint64_t v8 = *a1) != 0)
  {
    sub_10000E184(v8, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing", a4, a5, a6, a7, a8);
    uint64_t v9 = 1;
    CFStringRef v10 = @"Wireless pairing disabled.";
  }
  else
  {
    uint64_t v9 = 0;
    CFStringRef v10 = @"Invalid input.";
  }
  sub_10001A558(0, (uint64_t)"stop_advertising_wireless_pairing", (uint64_t)v10, a4, a5, a6, a7, a8, v12);
  return v9;
}

void sub_10002BB10(uint64_t *a1, void *a2, const __CFString *a3, int a4, void *a5)
{
  CFMutableDictionaryRef v14 = a5;
  int64_t value = 0;
  __int16 v141 = 0;
  if (a3) {
    CFStringRef v15 = a3;
  }
  else {
    CFStringRef v15 = @"unknown";
  }
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"handle_pair", @"Preparing to pair for %@ %s.", v9, v10, v11, v12, v13, (char)v15);
  }
  if (a4) {
    CFStringRef v16 = @"PairCU";
  }
  else {
    CFStringRef v16 = @"Pair";
  }
  uint64_t v22 = sub_100002B30(v16);
  if (!v22)
  {
    CFMutableDictionaryRef v30 = v14;
    sub_10001A558(0, (uint64_t)"handle_pair", @"Failed to create response message.", v17, v18, v19, v20, v21, v134);
    uint64_t v36 = 0;
    CFMutableDictionaryRef v14 = 0;
    a1 = 0;
    uint64_t v29 = 0;
    CFMutableDictionaryRef v37 = 0;
    goto LABEL_121;
  }
  char v139 = (char)v15;
  uint64_t v140 = a1;
  if (!sub_10000FE94(a2))
  {
    CFMutableDictionaryRef v30 = v14;
    CFStringRef v38 = @"Invalid message.";
LABEL_19:
    sub_10001A558(0, (uint64_t)"handle_pair", (uint64_t)v38, v23, v24, v25, v26, v27, v134);
    CFMutableDictionaryRef v14 = 0;
LABEL_20:
    uint64_t v29 = 0;
    goto LABEL_21;
  }
  if (!a1)
  {
    CFMutableDictionaryRef v30 = v14;
    sub_10001A558(0, (uint64_t)"handle_pair", @"Invalid input.", v23, v24, v25, v26, v27, v134);
    CFMutableDictionaryRef v14 = 0;
    uint64_t v29 = 0;
    goto LABEL_23;
  }
  if (!a4)
  {
    uint64_t v29 = 0;
    goto LABEL_30;
  }
  if (!v14)
  {
    CFMutableDictionaryRef v30 = 0;
    sub_10001A558(0, (uint64_t)"handle_pair", @"Invalid pairing session.", v23, v24, v25, v26, v27, v134);
    goto LABEL_20;
  }
  id v28 = sub_10002C5E0(v14, a2);
  if (!v28)
  {
    CFMutableDictionaryRef v30 = v14;
    CFStringRef v38 = @"Failed to decrypt message.";
    goto LABEL_19;
  }
  a2 = v28;
  uint64_t v29 = sub_10002637C();
  if (!v29)
  {
    CFMutableDictionaryRef v30 = v14;
    sub_10001A558(0, (uint64_t)"handle_pair", @"Failed to create response dictionary.", v23, v24, v25, v26, v27, v134);
    CFMutableDictionaryRef v14 = 0;
LABEL_21:
    a1 = 0;
LABEL_23:
    uint64_t v39 = 0;
    uint64_t v36 = 0;
LABEL_24:
    uint64_t v40 = off_1001878B8;
LABEL_25:
    uint64_t v41 = *v40;
    goto LABEL_26;
  }
LABEL_30:
  if (dword_1001B6AD0) {
    sub_10001A558(0, (uint64_t)"handle_pair", @"Pair message: %@", v23, v24, v25, v26, v27, (char)a2);
  }
  CFDictionaryRef v54 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, @"PairingOptions");
  if (sub_10000FE94(v54) && (CFStringRef v55 = CFDictionaryGetValue(v54, @"ExtendedPairingErrors"), sub_10000FF84(v55)))
  {
    CFStringRef v56 = CFDictionaryGetValue(v54, @"ExtendedPairingErrors");
    BOOL v57 = CFEqual(v56, kCFBooleanTrue) != 0;
  }
  else
  {
    BOOL v57 = 0;
  }
  uint64_t v58 = (void *)CFDictionaryGetValue((CFDictionaryRef)a2, @"PairRecord");
  if (!sub_10000FE94(v58))
  {
    CFMutableDictionaryRef v30 = v14;
    sub_10001A558(0, (uint64_t)"handle_pair", @"Invalid pair record.", v59, v60, v61, v62, v63, v134);
    CFMutableDictionaryRef v14 = 0;
    a1 = 0;
    uint64_t v39 = 0;
    uint64_t v36 = 0;
    uint64_t v40 = off_100187988;
    goto LABEL_25;
  }
  BOOL v138 = v57;
  uint64_t v36 = [v58 objectForKeyedSubscript:@"HostID"];
  if (!v36)
  {
    CFMutableDictionaryRef v30 = v14;
    sub_10001A558(0, (uint64_t)"handle_pair", @"Pair record missing host ID.", v64, v65, v66, v67, v68, v134);
    CFMutableDictionaryRef v14 = 0;
    a1 = 0;
    uint64_t v39 = 0;
LABEL_52:
    uint64_t v40 = off_1001878A8;
    goto LABEL_25;
  }
  CFDictionaryRef v137 = (const __CFDictionary *)v58;
  CFDataRef v69 = (void *)CFDictionaryGetValue((CFDictionaryRef)a2, @"HostName");
  int v70 = v69;
  if (v69 && !sub_10000FF0C(v69))
  {
    CFMutableDictionaryRef v30 = v14;
    CFStringRef v80 = @"Invalid host name.";
LABEL_68:
    sub_10001A558(0, (uint64_t)"handle_pair", (uint64_t)v80, v71, v72, v73, v74, v75, v134);
    CFMutableDictionaryRef v14 = 0;
    a1 = 0;
    uint64_t v39 = 0;
    goto LABEL_24;
  }
  uint64_t v136 = v70;
  id v76 = (void *)CFDictionaryGetValue((CFDictionaryRef)a2, @"SerialNumber");
  uint64_t v77 = v76;
  if (v76 && !sub_10000FF0C(v76))
  {
    CFMutableDictionaryRef v30 = v14;
    CFStringRef v80 = @"Invalid serial number.";
    goto LABEL_68;
  }
  uint64_t v78 = (void *)CFDictionaryGetValue((CFDictionaryRef)a2, @"MarketingName");
  uint64_t v79 = v78;
  if (v78 && !sub_10000FF0C(v78))
  {
    CFMutableDictionaryRef v30 = v14;
    CFStringRef v80 = @"Invalid marketing name.";
    goto LABEL_68;
  }
  if (sub_100003074(a1[3]) == 1 || sub_100003074(a1[3]) == 2) {
    sub_100016B58(v137);
  }
  if (sub_100027458())
  {
    CFMutableDictionaryRef v30 = v14;
    CFMutableDictionaryRef v14 = 0;
    a1 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = off_1001878D8;
    goto LABEL_70;
  }
  if (sub_100003074(a1[3]) != 1 && sub_100003074(a1[3]) != 5)
  {
    CFMutableDictionaryRef v30 = v14;
    CFMutableDictionaryRef v14 = 0;
    a1 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = off_1001879B8;
    goto LABEL_25;
  }
  if ((sub_100027930((uint64_t)v54, *a1, a1[8], (unsigned char *)&v141 + 1, &v141) & 1) == 0)
  {
    CFMutableDictionaryRef v30 = v14;
    CFMutableDictionaryRef v14 = 0;
    a1 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = off_1001878E0;
LABEL_70:
    if (!v138) {
      uint64_t v40 = off_1001878F8;
    }
    goto LABEL_25;
  }
  if ((_BYTE)v141)
  {
    CFMutableDictionaryRef v30 = v14;
    uint64_t v81 = off_1001878E8;
    if (!v138) {
      uint64_t v81 = off_1001878F8;
    }
    uint64_t v41 = *v81;
    CFMutableDictionaryRef v14 = sub_10002637C();
    if (v14)
    {
      uint64_t v87 = (const void *)a1[8];
      if (v87) {
        CFRelease(v87);
      }
      a1[8] = 0;
      CFDataRef v88 = sub_100027A94(0x400uLL);
      a1[8] = (uint64_t)v88;
      if (v88)
      {
        CFDictionaryAddValue(v14, @"PairingChallenge", v88);
        CFDictionarySetValue(v22, @"ExtendedResponse", v14);
LABEL_80:
        a1 = 0;
        uint64_t v39 = 0;
        goto LABEL_26;
      }
      CFStringRef v94 = @"Failed to create random challenge.";
    }
    else
    {
      CFStringRef v94 = @"Failed to create dictionary.";
    }
    sub_10001A558(0, (uint64_t)"handle_pair", (uint64_t)v94, v82, v83, v84, v85, v86, v134);
    goto LABEL_80;
  }
  if (HIBYTE(v141) || (MGGetBoolAnswer() & 1) == 0 && !sub_100002CD0() && !sub_100002D34())
  {
LABEL_75:
    if (sub_1000160C4(v137))
    {
      CFMutableDictionaryRef v30 = v14;
      sub_10001A558(0, (uint64_t)"handle_pair", @"Invalid pairing record.", v89, v90, v91, v92, v93, v134);
      CFMutableDictionaryRef v14 = 0;
      a1 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = off_100187990;
      goto LABEL_25;
    }
    uint64_t v39 = (void *)sub_1000297F0(v137);
    if (v39)
    {
      if (a4)
      {
        CFDictionarySetValue(v29, @"EscrowBag", v39);
LABEL_96:
        a1 = (uint64_t *)MGCopyAnswer();
        if (!sub_10000FF0C(a1))
        {
          CFMutableDictionaryRef v30 = v14;
          sub_10001A558(0, (uint64_t)"handle_pair", @"Failed to query udid.", v105, v106, v107, v108, v109, v134);
          CFMutableDictionaryRef v14 = 0;
          goto LABEL_24;
        }
        CFDictionarySetValue(v29, @"UDID", a1);
        id v110 = sub_10002C8D4(v14, v29, (CFTypeRef *)&value);
        if (!v110 || !value)
        {
          CFMutableDictionaryRef v30 = v14;
          CFStringRef v133 = @"Failed to encrypt response.";
LABEL_135:
          sub_10001A558(0, (uint64_t)"handle_pair", (uint64_t)v133, v111, v112, v113, v114, v115, v134);
          CFMutableDictionaryRef v14 = 0;
          goto LABEL_52;
        }
        CFDictionarySetValue(v22, @"Payload", v110);
        CFDictionarySetValue(v22, @"Nonce", value);
LABEL_106:
        if (sub_1000159C4(*v140, v137, v136, v77, v79))
        {
          CFMutableDictionaryRef v30 = v14;
          sub_10001A558(0, (uint64_t)"handle_pair", @"Failed to store pairing record.", v122, v123, v124, v125, v126, v134);
          CFMutableDictionaryRef v14 = 0;
          uint64_t v40 = off_100187998;
          goto LABEL_25;
        }
        sub_100010480(@"com.apple.mobile.lockdown.host_paired");
        if (!a4)
        {
          CFMutableDictionaryRef v30 = v14;
          sub_10001E20C((NSObject **)*v140, 1);
          sub_100016280();
          goto LABEL_117;
        }
        CFStringRef v143 = @"HostID";
        uint64_t v144 = v36;
        uint64_t v127 = +[NSDictionary dictionaryWithObjects:&v144 forKeys:&v143 count:1];
        CFMutableDictionaryRef v30 = v14;
        char v128 = sub_1000155E4(v14, v127);

        if (v128)
        {
          sub_10001E20C((NSObject **)*v140, 1);
          sub_100016280();
          sub_10000D5A8(*v140, @"com.apple.mobile.wireless_lockdown", @"EnableWifiDebugging", (uint64_t)kCFBooleanTrue, v129, v130, v131, v132);
LABEL_117:
          CFMutableDictionaryRef v37 = 0;
          goto LABEL_118;
        }
        CFStringRef v133 = @"Failed to update SRP pairing record.";
        goto LABEL_135;
      }
      CFDictionarySetValue(v22, @"EscrowBag", v39);
    }
    else if (a4)
    {
      goto LABEL_96;
    }
    a1 = 0;
    goto LABEL_106;
  }
  int v95 = MKBGetDeviceLockState();
  if ((v95 - 1) < 2)
  {
    uint64_t v103 = (uint64_t)v15;
    CFMutableDictionaryRef v30 = v14;
    CFStringRef v104 = (const __CFString *)sub_100016B90((uint64_t)a1, v103, (uint64_t)v136, 1);
    if (v104)
    {
      uint64_t v41 = (__CFString *)v104;
      if (CFEqual(v104, @"UserDeniedPairing"))
      {
        CFMutableDictionaryRef v14 = 0;
        a1 = 0;
        CFMutableDictionaryRef v37 = 0;
        goto LABEL_27;
      }
    }
LABEL_112:
    CFMutableDictionaryRef v14 = 0;
    a1 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = off_1001878F8;
    goto LABEL_25;
  }
  if (!v95) {
    goto LABEL_100;
  }
  if (v95 != 3)
  {
    CFMutableDictionaryRef v30 = v14;
    sub_10001A558(0, (uint64_t)"handle_pair", @"Unknown lock state (%d), disallowing pairing.", v98, v99, v100, v101, v102, v95);
    goto LABEL_112;
  }
  if (a4)
  {
    CFMutableDictionaryRef v30 = v14;
    sub_10001A558(0, (uint64_t)"handle_pair", @"Wireless pairing requires a passcode to be set.", v98, v99, v100, v101, v102, v134);
    CFMutableDictionaryRef v14 = 0;
    a1 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = off_1001879D8;
    goto LABEL_25;
  }
LABEL_100:
  if ((sub_100027D14(*a1, v96, v97, v98, v99, v100, v101, v102) & 1) == 0)
  {
    sub_10001A558(0, (uint64_t)"handle_pair", @"Buddy has not completed. Implicitly trusting host.", v116, v117, v118, v119, v120, v134);
    goto LABEL_75;
  }
  uint64_t v121 = sub_100016B90((uint64_t)a1, (uint64_t)v15, (uint64_t)v136, 0);
  if (!v121) {
    goto LABEL_75;
  }
  CFMutableDictionaryRef v30 = v14;
  CFMutableDictionaryRef v14 = 0;
  if (v138)
  {
    uint64_t v41 = (__CFString *)v121;
    a1 = 0;
    CFMutableDictionaryRef v37 = 0;
LABEL_27:
    sub_10001A558(0, (uint64_t)"handle_pair", @"Pair for %@ failed %s: %@", v31, v32, v33, v34, v35, v139);
    CFDictionaryRemoveValue(v22, @"Payload");
    sub_100002B8C(1, (uint64_t)"handle_pair", v22, v41);
    if (v36)
    {
      sub_1000153B0((uint64_t)v36, 0);
      sub_100014760((uint64_t)v36, 0, v48, v49, v50, v51, v52, v53);
    }
    goto LABEL_119;
  }
  uint64_t v41 = @"PasswordProtected";
  a1 = 0;
  uint64_t v39 = 0;
LABEL_26:
  CFMutableDictionaryRef v37 = v14;
  CFMutableDictionaryRef v14 = (CFMutableDictionaryRef)v39;
  if (v41) {
    goto LABEL_27;
  }
LABEL_118:
  sub_10001A558(0, (uint64_t)"handle_pair", @"Pair for %@ succeeded %s.", v31, v32, v33, v34, v35, v139);
  CFMutableDictionaryRef v14 = (CFMutableDictionaryRef)v39;
LABEL_119:
  if (v140)
  {
    sub_1000029C0(v140[3], v22, v42, v43, v44, v45, v46, v47, v135);
    uint64_t v22 = 0;
  }
LABEL_121:
  if (value) {
    CFRelease(value);
  }
  int64_t value = 0;
  if (a1) {
    CFRelease(a1);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v37) {
    CFRelease(v37);
  }
}

id sub_10002C5E0(void *a1, void *a2)
{
  id v8 = a1;
  memset(v41, 0, sizeof(v41));
  if (!v8 || !a2)
  {
    CFStringRef v14 = @"Invalid input(s)";
    goto LABEL_14;
  }
  id v9 = [a2 objectForKey:@"Payload"];
  if (!sub_10000FF48(v9))
  {
    CFStringRef v14 = @"Invalid payload.";
    goto LABEL_14;
  }
  id v10 = [a2 objectForKey:@"Nonce"];
  if (!sub_10000FF48(v10))
  {
    CFStringRef v14 = @"Invalid nonce.";
    goto LABEL_14;
  }
  CFDataGetBytePtr((CFDataRef)v10);
  CFDataGetLength((CFDataRef)v10);
  id v11 = v9;
  id v12 = [v11 bytes];
  uint64_t v13 = (char *)[v11 length];
  if ((unint64_t)v13 <= 0xF)
  {
    CFStringRef v14 = @"ciphertext is too short.";
LABEL_14:
    sub_10001A558(0, (uint64_t)"doDecryptCUOneShotMessage", (uint64_t)v14, v3, v4, v5, v6, v7, v39);
    id v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    goto LABEL_15;
  }
  CFStringRef v15 = v13 - 16;
  CFStringRef v16 = malloc_type_malloc((size_t)(v13 - 16), 0xB98C0829uLL);
  if (!v16)
  {
    CFStringRef v14 = @"Failed to allocate memory.";
    goto LABEL_14;
  }
  uint64_t v17 = v16;
  if ([v8 deriveKeyWithSaltPtr:"WriteKeySaltMDLD" saltLen:16 infoPtr:"WriteKeyInfoMDLD" infoLen:16 keyLen:32 outputKeyPtr:v41])
  {
    CFStringRef v23 = @"Failed to derive readKey.";
LABEL_20:
    sub_10001A558(0, (uint64_t)"doDecryptCUOneShotMessage", (uint64_t)v23, v18, v19, v20, v21, v22, v39);
    uint64_t v26 = 0;
    goto LABEL_21;
  }
  char v39 = (char)v15;
  if (CryptoAEADDecryptMessageOneShot())
  {
    CFStringRef v23 = @"Failed to decrypt message.";
    goto LABEL_20;
  }
  uint64_t v26 = +[NSData dataWithBytes:v17 length:v15];
  if (v26)
  {
    id v40 = 0;
    uint64_t v25 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v26, 0, 0, &v40, v15, v17, &v15[(void)v12], 16);
    id v24 = v40;
    uint64_t v33 = sub_10001B13C(v25);

    if (!v33) {
      sub_10001A558(0, (uint64_t)"doDecryptCUOneShotMessage", @"Failed to create message: %@", v34, v35, v36, v37, v38, (char)v24);
    }
    goto LABEL_22;
  }
  sub_10001A558(0, (uint64_t)"doDecryptCUOneShotMessage", @"Failed to convert data.", v28, v29, v30, v31, v32, (char)v15);
LABEL_21:
  uint64_t v25 = 0;
  id v24 = 0;
LABEL_22:
  free(v17);
LABEL_15:

  return v25;
}

id sub_10002C8D4(void *a1, void *a2, CFTypeRef *a3)
{
  id v5 = a1;
  id v6 = a2;
  memset(v51, 0, sizeof(v51));
  sub_10001A558(0, (uint64_t)"doEncryptCUOneShotMessage", @"response_payload : %@", v7, v8, v9, v10, v11, (char)v6);
  if (!v5 || !v6)
  {
    CFStringRef v26 = @"Invalid input(s)";
LABEL_9:
    sub_10001A558(0, (uint64_t)"doEncryptCUOneShotMessage", (uint64_t)v26, v12, v13, v14, v15, v16, v50);
    id v18 = 0;
    goto LABEL_10;
  }
  uint64_t v17 = (void *)sub_100002C28(v6);
  if (!v17)
  {
    CFStringRef v26 = @"Failed to convert payload to binary blob.";
    goto LABEL_9;
  }
  id v18 = v17;
  [v18 bytes];
  uint64_t v19 = (char *)[v18 length];
  if ([v5 deriveKeyWithSaltPtr:"ReadKeySaltMDLD" saltLen:15 infoPtr:"ReadKeyInfoMDLD" infoLen:15 keyLen:32 outputKeyPtr:v51])
  {
    CFStringRef v25 = @"Failed to derive writeKey.";
LABEL_6:
    sub_10001A558(0, (uint64_t)"doEncryptCUOneShotMessage", (uint64_t)v25, v20, v21, v22, v23, v24, v50);
LABEL_10:
    uint64_t v27 = 0;
    goto LABEL_11;
  }
  uint64_t v29 = malloc_type_malloc((size_t)(v19 + 16), 0xACBBE341uLL);
  if (!v29)
  {
    CFStringRef v25 = @"Failed to allocate memory.";
    goto LABEL_6;
  }
  uint64_t v32 = v29;
  CFDataRef v33 = (const __CFData *)sub_10000C794(12, v30, v31, v20, v21, v22, v23, v24);
  if (!v33)
  {
    sub_10001A558(0, (uint64_t)"doEncryptCUOneShotMessage", @"Failed to create nonce.", v34, v35, v36, v37, v38, v50);
    free(v32);
    goto LABEL_10;
  }
  CFDataRef v39 = v33;
  CFDataGetBytePtr(v33);
  CFDataGetLength(v39);
  if (CryptoAEADEncryptMessageOneShot())
  {
    sub_10001A558(0, (uint64_t)"doEncryptCUOneShotMessage", @"Failed to encrypt message.", v40, v41, v42, v43, v44, (char)v19);
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = +[NSData dataWithBytes:v32 length:v19 + 16];
    if (v27)
    {
      if (a3) {
        *a3 = CFRetain(v39);
      }
    }
    else
    {
      sub_10001A558(0, (uint64_t)"doEncryptCUOneShotMessage", @"Failed to convert to data.", v45, v46, v47, v48, v49, (char)v19);
    }
  }
  free(v32);
  CFRelease(v39);
LABEL_11:

  return v27;
}

void sub_10002CB80(uint64_t a1, uint64_t *a2, const __CFDictionary *a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1 && *(void *)(a1 + 24))
  {
    if (dword_1001B6AD0)
    {
      CFStringRef v13 = @"unknown";
      if (a4) {
        LOBYTE(v13) = a4;
      }
      sub_10001A558(0, (uint64_t)"handle_enable_wireless_pairing", @"%@ attempting to enable/disable wireless pairing.", a4, (uint64_t)a5, a6, a7, a8, (char)v13);
    }
    uint64_t v14 = sub_100002B30(@"EnableWirelessPairing");
    if (v14)
    {
      uint64_t v15 = v14;
      if (*(void *)(a1 + 32))
      {
        uint64_t v16 = off_1001879E0;
        CFStringRef v17 = @"Wireless pairing not supported over remote service interface.";
      }
      else
      {
        uint64_t v16 = off_1001878A8;
        CFStringRef v17 = @"Invalid inputs.";
        if (a2 && a3)
        {
          if (MKBGetDeviceLockState() == 3)
          {
            uint64_t v16 = off_1001879D8;
            goto LABEL_11;
          }
          CFDataRef Value = CFDictionaryGetValue(a3, @"Options");
          if (Value && (uint64_t v22 = Value, sub_10000FF84(Value)))
          {
            if (sub_10000FE94(a5))
            {
              if (CFEqual(v22, kCFBooleanTrue))
              {
                if (sub_10002BA1C(a2, v23, v24, v25, v26, v27, v28, v29)) {
                  goto LABEL_12;
                }
                uint64_t v16 = off_1001878C0;
                CFStringRef v17 = @"Failed to enable wireless pairing.";
              }
              else
              {
                if (sub_10002BA9C(a2, v23, v24, v25, v26, v27, v28, v29)) {
                  goto LABEL_12;
                }
                uint64_t v16 = off_1001878C0;
                CFStringRef v17 = @"Failed to disable wireless pairing.";
              }
            }
            else
            {
              uint64_t v16 = off_1001878C0;
              CFStringRef v17 = @"Invalid entitlements.";
            }
          }
          else
          {
            uint64_t v16 = off_1001878C0;
            CFStringRef v17 = @"Invalid options.";
          }
        }
      }
      sub_10001A558(0, (uint64_t)"handle_enable_wireless_pairing", (uint64_t)v17, a4, (uint64_t)a5, a6, a7, a8, v30);
LABEL_11:
      sub_100002B8C(1, (uint64_t)"handle_enable_wireless_pairing", v15, *v16);
LABEL_12:
      unint64_t v19 = *(void *)(a1 + 24);
      sub_1000029C0(v19, v15, v18, a4, (uint64_t)a5, a6, a7, a8, a9);
      return;
    }
    CFStringRef v20 = @"Failed to create response.";
  }
  else
  {
    CFStringRef v20 = @"Invalid connection.";
  }

  sub_10001A558(0, (uint64_t)"handle_enable_wireless_pairing", (uint64_t)v20, a4, (uint64_t)a5, a6, a7, a8, a9);
}

void sub_10002CDA8(int a1, uint64_t a2, void *a3, const __CFDictionary *a4)
{
  id v12 = a3;
  uint64_t v103 = 0;
  CFStringRef v104 = &v103;
  uint64_t v105 = 0x3032000000;
  uint64_t v106 = sub_10002D7E4;
  uint64_t v107 = sub_10002D7F4;
  id v108 = 0;
  if (dword_1001B6AD0)
  {
    CFStringRef v13 = "verify";
    if (a1) {
      CFStringRef v13 = "create";
    }
    sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Request (%s): %@", v7, v8, v9, v10, v11, (char)v13);
  }
  if (a2 && v12)
  {
    if (*(void *)(a2 + 32))
    {
      sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"CU pairing not supported over remote service interface.", v7, v8, v9, v10, v11, v95);
      uint64_t v14 = @"InvalidConnection";
      int v15 = 0;
LABEL_9:
      uint64_t v16 = 0;
      goto LABEL_46;
    }
    if (a1)
    {
      uint64_t v16 = sub_100002B30(@"CUPairingCreate");
      uint64_t v22 = 2;
      if (v16) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v16 = sub_100002B30(@"CUPairingVerify");
      uint64_t v22 = 4;
      if (v16)
      {
LABEL_14:
        if (a4)
        {
          uint64_t v23 = [v12 pairingSession];
          BOOL v24 = v23 == 0;

          if (v24)
          {
            id v30 = objc_alloc_init((Class)CUPairingSession);
            [v12 setPairingSession:v30];
          }
          else
          {
            CFDataRef Value = (void *)CFDictionaryGetValue(a4, @"Flags");
            if (sub_10000FF84(Value) && CFEqual(Value, kCFBooleanTrue)
              || sub_10000FE58(Value) && [Value isEqualToValue:&off_1001A8940])
            {
              uint64_t v26 = [v12 pairingSession];

              if (v26)
              {
                uint64_t v27 = [v12 pairingSession];
                [v27 invalidate];

                if ([v12 pairingSessionStarted])
                {
                  uint64_t v28 = [v12 sem];
                  dispatch_semaphore_wait(v28, 0xFFFFFFFFFFFFFFFFLL);
                }
                [v12 setPairingSession:0];
              }
              id v29 = objc_alloc_init((Class)CUPairingSession);
              [v12 setPairingSession:v29];

              [v12 setPairingSessionStarted:0];
            }
          }
          uint64_t v31 = [v12 pairingSession];
          BOOL v32 = v31 == 0;

          if (!v32)
          {
            if (([v12 pairingSessionStarted] & 1) == 0)
            {
              objc_initWeak(&location, v12);
              uint64_t v38 = (void *)MGCopyAnswer();
              CFDataRef v39 = sub_10001B06C(v38);
              BOOL v40 = v39 == 0;

              if (v40)
              {
                sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Failed to query udid.", v41, v42, v43, v44, v45, v95);
                uint64_t v14 = 0;
              }
              else
              {
                id v46 = objc_alloc_init((Class)NSMutableDictionary);
                uint64_t v47 = (void *)v104[5];
                v104[5] = (uint64_t)v46;

                if (v104[5])
                {
                  v100[0] = _NSConcreteStackBlock;
                  v100[1] = 3221225472;
                  v100[2] = sub_10002D7FC;
                  v100[3] = &unk_100187AA8;
                  objc_copyWeak(&v101, &location);
                  v100[4] = &v103;
                  uint64_t v53 = [v12 pairingSession];
                  [v53 setCompletionHandler:v100];

                  v98[0] = _NSConcreteStackBlock;
                  v98[1] = 3221225472;
                  v98[2] = sub_10002D97C;
                  v98[3] = &unk_100187AD0;
                  objc_copyWeak(&v99, &location);
                  v98[4] = &v103;
                  CFDictionaryRef v54 = [v12 pairingSession];
                  [v54 setPromptForPINHandler:v98];

                  v96[0] = _NSConcreteStackBlock;
                  v96[1] = 3221225472;
                  v96[2] = sub_10002DAAC;
                  v96[3] = &unk_100187AF8;
                  objc_copyWeak(&v97, &location);
                  v96[4] = &v103;
                  CFStringRef v55 = [v12 pairingSession];
                  [v55 setSendDataHandler:v96];

                  CFStringRef v56 = [v12 pairingSession];
                  [v56 setSessionType:v22];

                  BOOL v57 = [v12 pairingSession];
                  [v57 setFlags:8];

                  if (a1)
                  {
                    uint64_t v58 = [v12 pairingSession];
                    [v58 setFlags:[v58 flags] | 0x80];
                  }
                  uint64_t v59 = [v12 pairingSession];
                  [v59 setAcl:&off_1001A8A00];

                  dispatch_queue_t v60 = dispatch_queue_create("com.apple.mobilelockdown-srp", 0);
                  uint64_t v61 = [v12 pairingSession];
                  [v61 setDispatchQueue:v60];

                  CFStringRef v109 = @"udid";
                  id v110 = v38;
                  uint64_t v62 = +[NSDictionary dictionaryWithObjects:&v110 forKeys:&v109 count:1];
                  uint64_t v63 = [v12 pairingSession];
                  [v63 setAdditionalSelfInfo:v62];

                  [v12 setPairingSessionStarted:1];
                  uint64_t v64 = [v12 pairingSession];
                  [v64 activate];

                  objc_destroyWeak(&v97);
                  objc_destroyWeak(&v99);
                  objc_destroyWeak(&v101);

                  objc_destroyWeak(&location);
                  goto LABEL_37;
                }
                sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Failed to create dictionary.", v48, v49, v50, v51, v52, v95);
                uint64_t v14 = @"MissingValue";
              }

              objc_destroyWeak(&location);
              goto LABEL_45;
            }
LABEL_37:
            uint64_t v65 = CFDictionaryGetValue(a4, @"Payload");
            if (sub_10000FF48(v65))
            {
              uint64_t v71 = [v12 pairingSession];
              [v71 receivedData:v65];

              uint64_t v72 = [v12 sem];
              dispatch_semaphore_wait(v72, 0xFFFFFFFFFFFFFFFFLL);

              switch([v12 retval])
              {
                case 0u:
                  if (dword_1001B6AD0) {
                    sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"SRP FAIL", v73, v74, v75, v76, v77, v95);
                  }
                  uint64_t v78 = off_1001879C8;
                  goto LABEL_81;
                case 1u:
                  if (!dword_1001B6AD0) {
                    goto LABEL_77;
                  }
                  CFStringRef v93 = @"SRP SUCCEED";
                  goto LABEL_76;
                case 2u:
                  if (!dword_1001B6AD0) {
                    goto LABEL_77;
                  }
                  CFStringRef v93 = @"SRP PINCODE";
                  goto LABEL_76;
                case 3u:
                  if (dword_1001B6AD0) {
                    sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"SRP BADPINCODE", v73, v74, v75, v76, v77, v95);
                  }
                  uint64_t v78 = off_1001879C0;
                  goto LABEL_81;
                case 4u:
                  if (dword_1001B6AD0) {
                    sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"SRP RESET", v73, v74, v75, v76, v77, v95);
                  }
                  CFStringRef v94 = [v12 pairingSession];
                  [v94 invalidate];

                  [v12 setPairingSession:0];
                  [v12 setPairingSessionStarted:0];
                  goto LABEL_80;
                case 5u:
                  if (!dword_1001B6AD0) {
                    goto LABEL_77;
                  }
                  CFStringRef v93 = @"SRP KEEPGOING";
LABEL_76:
                  sub_10001A558(0, (uint64_t)"handle_cupairingdriver", (uint64_t)v93, v73, v74, v75, v76, v77, v95);
LABEL_77:
                  uint64_t v14 = 0;
                  goto LABEL_82;
                case 6u:
                  if (dword_1001B6AD0) {
                    sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"SRP CANCELLED", v73, v74, v75, v76, v77, v95);
                  }
LABEL_80:
                  uint64_t v78 = off_1001879D0;
                  goto LABEL_81;
                default:
                  if (dword_1001B6AD0) {
                    sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Invalid SRP response.", v73, v74, v75, v76, v77, v95);
                  }
                  uint64_t v78 = off_1001878A8;
LABEL_81:
                  uint64_t v14 = *v78;
LABEL_82:
                  int v15 = 1;
                  break;
              }
              goto LABEL_46;
            }
            sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Missing payload data.", v66, v67, v68, v69, v70, v95);
            goto LABEL_44;
          }
          sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Failed to allocate pairing session.", v33, v34, v35, v36, v37, v95);
        }
        else
        {
          sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Invalid message.", v17, v18, v19, v20, v21, v95);
        }
LABEL_44:
        uint64_t v14 = @"MissingValue";
LABEL_45:
        int v15 = 0;
        goto LABEL_46;
      }
    }
    sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Failed to create response message.", v17, v18, v19, v20, v21, v95);
    int v15 = 0;
    uint64_t v14 = 0;
    goto LABEL_9;
  }
  sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Invalid inputs.", v7, v8, v9, v10, v11, v95);
  uint64_t v14 = 0;
  if (!v12)
  {
    uint64_t v16 = 0;
    goto LABEL_57;
  }
  int v15 = 0;
  uint64_t v16 = 0;
LABEL_46:
  uint64_t v79 = [v12 srpResponse];
  if ([v79 count])
  {
    unsigned int v80 = [v12 pairingSessionStarted];

    if ((v15 & v80) == 0) {
      goto LABEL_50;
    }
    uint64_t v79 = [v12 srpResponse];
    [(__CFDictionary *)v16 addEntriesFromDictionary:v79];
  }

LABEL_50:
  if (v16)
  {
    if (v14) {
      sub_100002B8C(1, (uint64_t)"handle_cupairingdriver", v16, v14);
    }
    if (dword_1001B6AD0) {
      sub_10001A558(0, (uint64_t)"handle_cupairingdriver", @"Response: %@", v81, v82, v83, v84, v85, (char)v16);
    }
    if (a2)
    {
      unint64_t v86 = *(void *)(a2 + 24);
      uint64_t v16 = v16;
      sub_1000029C0(v86, v16, v87, v88, v89, v90, v91, v92, v95);
    }
  }
LABEL_57:
  _Block_object_dispose(&v103, 8);
}

void sub_10002D75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  objc_destroyWeak(v32);
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak(&a32);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D7E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002D7F4(uint64_t a1)
{
}

void sub_10002D7FC(uint64_t a1, void *a2)
{
  id v15 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v15)
  {
    [WeakRetained setRetval:1];
    uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFStringRef v5 = @"succeed";
    goto LABEL_9;
  }
  if ([v15 code] == (id)-6727)
  {
    [WeakRetained setRetval:4];
    uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFStringRef v5 = @"resetcu";
    goto LABEL_9;
  }
  if ([v15 code] != (id)-6723)
  {
    char v6 = [v15 code];
    sub_10001A558(0, (uint64_t)"handle_cupairingdriver_block_invoke", @"SRP Failure: %ld", v7, v8, v9, v10, v11, v6);
    [WeakRetained setRetval:0];
    uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFStringRef v5 = @"fail";
LABEL_9:
    [v4 setObject:v5 forKeyedSubscript:@"doSRPPair"];
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFStringRef v13 = [WeakRetained srpResponse];
    [v13 setObject:v12 forKeyedSubscript:@"ExtendedResponse"];

    if (!WeakRetained) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  [WeakRetained setRetval:6];
  if (WeakRetained)
  {
LABEL_10:
    uint64_t v14 = [WeakRetained sem];
    dispatch_semaphore_signal(v14);
  }
LABEL_11:
}

void sub_10002D97C(uint64_t a1, int a2, int a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ((a2 & 0x10000) != 0)
  {
    sub_10001A558(0, (uint64_t)"handle_cupairingdriver_block_invoke_2", @"Invalid PIN code entered.", v6, v7, v8, v9, v10, v15);
    [WeakRetained setRetval:3];
  }
  if (a3 >= 1) {
    sub_10001A558(0, (uint64_t)"handle_cupairingdriver_block_invoke_2", @"SRP Throttled. Wait %d seconds.", v6, v7, v8, v9, v10, a3);
  }
  if ([WeakRetained retval] != 3) {
    [WeakRetained setRetval:2];
  }
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:@"badPinCode" forKeyedSubscript:@"doSRPPair"];
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v12 = [WeakRetained srpResponse];
  [v12 setObject:v11 forKeyedSubscript:@"ExtendedResponse"];

  CFStringRef v13 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v14 = [WeakRetained sem];
    dispatch_semaphore_signal(v14);

    CFStringRef v13 = WeakRetained;
  }
}

void sub_10002DAAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 40);
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained setRetval:5];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v5 forKeyedSubscript:@"Payload"];

  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v7 = [WeakRetained srpResponse];
  [v7 setObject:v6 forKeyedSubscript:@"ExtendedResponse"];

  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = [WeakRetained sem];
    dispatch_semaphore_signal(v9);

    uint64_t v8 = WeakRetained;
  }
}

void sub_10002DB80(const __CFString *a1, const void *a2)
{
  if (CFStringHasSuffix(a1, @"-LogLevel"))
  {
    v42.length = CFStringGetLength(a1) - 9;
    v42.id location = 0;
    CFStringRef v4 = CFStringCreateWithSubstring(0, a1, v42);
    if (v4)
    {
      CFStringRef v10 = v4;
      CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"com.apple.MobileSystemServices.Logging.%@", v4);
      if (v11)
      {
        CFStringRef v17 = v11;
        uint64_t CString = CFStringGetCString(v11, buffer, 1024, 0x8000100u);
        if (CString)
        {
          CFStringRef v24 = CFStringCreateWithFormat(0, 0, @"MobileSystemServices-%@", a1);
          if (sub_10001AAC4(v24, a2, kCFPreferencesAnyApplication, v25, v26, v27, v28, v29))
          {
            sub_10001A558(0, (uint64_t)"set_logging_key", @"failed to set %@ preference", v30, v31, v32, v33, v34, (char)a1);
          }
          else if (notify_post(buffer))
          {
            sub_10001A558(0, (uint64_t)"set_logging_key", @"failed to post %s notification", v35, v36, v37, v38, v39, (char)buffer);
          }
        }
        else
        {
          sub_10001A558(CString, (uint64_t)"set_logging_key", @"failed to construct notification string from %@", v19, v20, v21, v22, v23, (char)v17);
          CFStringRef v24 = 0;
        }
        CFRelease(v10);
        CFRelease(v17);
        if (v24) {
          CFRelease(v24);
        }
      }
      else
      {
        sub_10001A558(0, (uint64_t)"set_logging_key", @"failed to build notename from %@", v12, v13, v14, v15, v16, (char)a1);
        CFRelease(v10);
      }
    }
    else
    {
      sub_10001A558(0, (uint64_t)"set_logging_key", @"failed to extract identifier from %@", v5, v6, v7, v8, v9, (char)a1);
    }
  }
}

CFNumberRef sub_10002DD80(const void *a1)
{
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v21[3] = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  uint64_t v2 = (const void *)MGCopyAnswer();
  if (sub_10000FF84(v2) && CFEqual(v2, kCFBooleanFalse))
  {
    sub_10001A558(0, (uint64_t)"copy_photo_usage", @"CameraUsage and PhotoUsage keys are not supported on non-UI builds.", v3, v4, v5, v6, v7, v12[0]);
LABEL_4:
    dispatch_semaphore_t v8 = 0;
    dispatch_queue_t v9 = 0;
    goto LABEL_17;
  }
  if (!CFEqual(a1, @"PhotoUsage") && !CFEqual(a1, @"CameraUsage")) {
    goto LABEL_4;
  }
  dispatch_queue_t v9 = dispatch_queue_create(0, 0);
  if (v9)
  {
    dispatch_semaphore_t v8 = dispatch_semaphore_create(0);
    if (v8)
    {
      CFNumberRef v10 = (CFNumberRef)off_1001B8168;
      if (off_1001B8168) {
        goto LABEL_13;
      }
      if (qword_1001B8170 != -1) {
        dispatch_once(&qword_1001B8170, &stru_100187B40);
      }
      CFNumberRef v10 = (CFNumberRef)off_1001B8168;
      if (off_1001B8168)
      {
LABEL_13:
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_10002DFCC;
        v12[3] = &unk_100187B20;
        uint64_t v14 = &v17;
        uint64_t v15 = v21;
        uint64_t v16 = 32;
        dispatch_semaphore_t v8 = v8;
        dispatch_semaphore_t v13 = v8;
        ((void (*)(dispatch_queue_t, uint64_t, void *))v10)(v9, 32, v12);

        dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
        CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt64Type, v18 + 3);
      }
      if (v2) {
        goto LABEL_18;
      }
      goto LABEL_19;
    }
  }
  else
  {
    dispatch_semaphore_t v8 = 0;
  }
LABEL_17:
  CFNumberRef v10 = 0;
  if (v2) {
LABEL_18:
  }
    CFRelease(v2);
LABEL_19:

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  return v10;
}

void sub_10002DFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10002DFCC(intptr_t result, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)(a3 - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
    *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) += a3;
  }
  *(void *)(*(void *)(*(void *)(result + 48) + 8) + 24) |= a2;
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 24) == *(void *)(result + 56)) {
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(result + 32));
  }
  return result;
}

void sub_10002E020(id a1)
{
  qword_1001B8178 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PhotoLibraryServicesCore.framework/PhotoLibraryServicesCore", 1);
  off_1001B8168 = dlsym((void *)qword_1001B8178, "ALGetLibrarySizes");
}

void *sub_10002E060(void *result)
{
  *uint64_t result = ++qword_1001B8180;
  return result;
}

uint64_t sub_10002E07C(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v30 = 1;
  uint64_t v31 = a4;
  int v32 = 16777472;
  int v33 = a5;
  NDR_record_t v34 = NDR_record;
  int v17 = *a3;
  int v35 = a2;
  int v36 = v17;
  int v37 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            int v21 = v33;
            if (v33 == v47)
            {
              uint64_t v20 = 0;
              int v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              long long v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              long long v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              long long v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              long long v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              int v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port) {
              uint64_t v20 = 4294966996;
            }
            else {
              uint64_t v20 = HIDWORD(v31);
            }
          }
        }
        else
        {
          uint64_t v20 = 4294966996;
        }
      }
      else
      {
        uint64_t v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_10002E2D8(mach_port_t a1, unsigned int a2, long long *a3)
{
  long long v4 = a3[5];
  long long v19 = a3[4];
  long long v20 = v4;
  long long v5 = a3[7];
  long long v21 = a3[6];
  long long v22 = v5;
  long long v6 = a3[1];
  long long v15 = *a3;
  long long v16 = v6;
  long long v7 = a3[3];
  long long v17 = a3[2];
  NDR_record_t v13 = NDR_record;
  unsigned int v14 = a2;
  long long v18 = v7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    uint64_t v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    uint64_t v10 = 4294966995;
    goto LABEL_17;
  }
  uint64_t v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_17;
  }
  return v10;
}

uint64_t sub_10002E468(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, void *a9, _DWORD *a10)
{
  int v18 = 1;
  uint64_t v19 = a6;
  int v20 = 16777472;
  int v21 = a7;
  NDR_record_t v22 = NDR_record;
  *(_DWORD *)long long v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&char v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  int v24 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              uint64_t v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }
        else
        {
          uint64_t v14 = 4294966996;
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_10002E658(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v18;
            if (!v18)
            {
              int v15 = v20;
              *a2 = v19;
              *a3 = v15;
              int v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v18 == 0;
          }
          if (v13) {
            uint64_t v12 = 4294966996;
          }
          else {
            uint64_t v12 = v18;
          }
          goto LABEL_23;
        }
      }
      uint64_t v12 = 4294966996;
    }
    else
    {
      uint64_t v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

uint64_t sub_10002E7D4(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)*(&off_10018D100
                           + ((-113 * ((qword_1001B6D98 + dword_1001B6E58) ^ 0xEA)) ^ byte_100167EB0[byte_100163C10[(-113 * ((qword_1001B6D98 + dword_1001B6E58) ^ 0xEA))] ^ 0x20])
                           - 9);
  uint64_t v2 = (unint64_t *)*(&off_10018D100
                           + ((-113 * ((qword_1001B6D98 + *v1) ^ 0xEA)) ^ byte_10016DCC0[byte_100167CB0[(-113 * ((qword_1001B6D98 + *v1) ^ 0xEA))] ^ 0x69])
                           + 32);
  unint64_t v3 = 1932141199 * ((unint64_t)&v5[*v1 + *v2] ^ 0xA437147DE07F15EALL);
  *uint64_t v1 = v3;
  unint64_t *v2 = v3;
  v6[1] = (3804331 * (((v6 | 0x9ADC4F9B) - (v6 & 0x9ADC4F9B)) ^ 0xE4096A6D)) ^ 0x203;
  uint64_t v7 = a1;
  LOBYTE(v1) = -113 * (*(_DWORD *)v1 ^ 0xEA ^ *(_DWORD *)v2);
  (*(void (**)(_DWORD *))((char *)*(&off_10018D100
                                             + ((-113 * ((qword_1001B6D98 - dword_1001B6E58) ^ 0xEA)) ^ byte_10016DCC0[byte_100167CB0[(-113 * ((qword_1001B6D98 - dword_1001B6E58) ^ 0xEA))] ^ 0xB6])
                                             - 71)
                                   + 8
                                   * (byte_100167EB4[(byte_100163C18[v1 - 8] ^ 0x83)
                                                                                  - 4] ^ v1)
                                   + 17332))(v6);
  return v6[0];
}

uint64_t sub_10002E9C4(uint64_t a1)
{
  uint64_t v1 = *(&off_10018D100
       + ((-113 * ((qword_1001B6D98 - dword_1001B6E00) ^ 0xEA)) ^ byte_100163D10[byte_1001609A0[(-113 * ((qword_1001B6D98 - dword_1001B6E00) ^ 0xEA))] ^ 0xBB])
       - 70);
  uint64_t v2 = *(&off_10018D100
       + (byte_1001680BC[(byte_100163E10[(-113 * ((qword_1001B6D98 + *v1) ^ 0xEA))] ^ 0x62)
                                        - 12] ^ (-113 * ((qword_1001B6D98 + *v1) ^ 0xEA)))
       - 20);
  unint64_t v3 = (*v2 - *v1) ^ (unint64_t)&v5;
  *uint64_t v1 = 1932141199 * v3 + 0x5BC8EB821F80EA16;
  void *v2 = 1932141199 * (v3 ^ 0xA437147DE07F15EALL);
  unsigned int v7 = (235795823 * ((&v6 & 0xFBBFBC65 | ~(&v6 | 0xFBBFBC65)) ^ 0x90ED0AC3)) ^ 0x12D;
  uint64_t v6 = a1;
  LOBYTE(v2) = -113 * (*(_DWORD *)v1 ^ 0xEA ^ *(_DWORD *)v2);
  return (*(uint64_t (**)(uint64_t *))((char *)*(&off_10018D100
                                                        + ((-113
                                                                                         * ((qword_1001B6D98
                                                                                           - dword_1001B6E00) ^ 0xEA)) ^ byte_100163D10[byte_1001609A0[(-113 * ((qword_1001B6D98 - dword_1001B6E00) ^ 0xEA))] ^ 0x85])
                                                        + 29)
                                              + 8
                                              * (byte_100167DB8[(byte_100163B10[v2] ^ 0xAF)
                                                                                             - 8] ^ v2)
                                              + 18956))(&v6);
}

uint64_t sub_10002EBB8(unsigned int a1)
{
  return byte_10016DDC8[(byte_100167FB8[a1 - 8] ^ 0x66) - 8] ^ a1;
}

uint64_t sub_10002EBE8(char a1, unsigned int a2)
{
  return byte_1001680BC[(byte_100163E10[a2] ^ a1) - 12] ^ a2;
}

uint64_t sub_10002EC14(unsigned int a1)
{
  return byte_1001680BC[(byte_100163E10[a1] ^ 0x8C) - 12] ^ a1;
}

uint64_t sub_10002EC44(unsigned int a1)
{
  return byte_10016DCC0[byte_100167CB0[a1] ^ 0x48] ^ a1;
}

uint64_t sub_10002EC70(unsigned int a1)
{
  return byte_100167DB8[(byte_100163B10[a1] ^ 0x2F) - 8] ^ a1;
}

uint64_t sub_10002ECA0(unsigned int a1)
{
  return byte_10016DCC0[byte_100167CB0[a1] ^ 0xB6] ^ a1;
}

uint64_t sub_10002ECCC(int a1)
{
  uint64_t v1 = (uint64_t)*(&off_10018D100
                + ((-113 * ((qword_1001B6D98 + dword_1001B6EA8) ^ 0xEA)) ^ byte_100167EB0[byte_100163C10[(-113 * ((qword_1001B6D98 + dword_1001B6EA8) ^ 0xEA))] ^ 0x20])
                - 34);
  uint64_t v2 = *(void *)(v1 - 4);
  unint64_t v3 = *(&off_10018D100
       + (byte_100167EB4[(byte_100163C18[(-113 * ((qword_1001B6D98 + v2) ^ 0xEA)) - 8] ^ 0x83)
                                        - 4] ^ (-113 * ((qword_1001B6D98 + v2) ^ 0xEA)))
       - 173);
  uint64_t v4 = (*v3 ^ v2) - (void)&v6;
  *(void *)(v1 - 4) = 1932141199 * v4 - 0x5BC8EB821F80EA16;
  void *v3 = 1932141199 * (v4 ^ 0xA437147DE07F15EALL);
  v7[2] = -1543737703 * ((v7 - 664868972 - 2 * ((unint64_t)v7 & 0xD85EE794)) ^ 0xA6AAB7E8)
        + 368378341 * a1
        + 1707427049;
  v7[0] = 1524 - 1543737703 * ((v7 - 664868972 - 2 * ((unint64_t)v7 & 0xD85EE794)) ^ 0xA6AAB7E8);
  LOBYTE(v3) = -113 * ((*(_DWORD *)v3 + *(_DWORD *)(v1 - 4)) ^ 0xEA);
  (*(void (**)(_DWORD *))((char *)*(&off_10018D100
                                             + ((-113
                                                                              * ((qword_1001B6D98 - dword_1001B6EA8) ^ 0xEA)) ^ byte_100163D10[byte_1001609A0[(-113 * ((qword_1001B6D98 - dword_1001B6EA8) ^ 0xEA))] ^ 0x85])
                                             + 29)
                                   + 8
                                   * (byte_1001680BC[(byte_100163E10[v3] ^ 0x62)
                                                                                  - 12] ^ v3)
                                   + 18820))(v7);
  return v7[1] ^ 0xDE6BE0E6;
}

uint64_t sub_10002EEF4(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)*(&off_10018D100
                           + ((-113 * ((qword_1001B6D98 - dword_1001B6E50) ^ 0xEA)) ^ byte_100163D10[byte_1001609A0[(-113 * ((qword_1001B6D98 - dword_1001B6E50) ^ 0xEA))] ^ 0xBB])
                           - 140);
  uint64_t v2 = (unint64_t *)*(&off_10018D100
                           + (byte_10016DDC0[byte_100167FB0[(-113
                                                                                             * ((qword_1001B6D98 - *v1) ^ 0xEA))] ^ 0x9D] ^ (-113 * ((qword_1001B6D98 - *v1) ^ 0xEA)))
                           - 71);
  unint64_t v3 = 1932141199 * ((unint64_t)&v5[*v1 + *v2] ^ 0xA437147DE07F15EALL);
  *uint64_t v1 = v3;
  unint64_t *v2 = v3;
  int v6 = (235795823 * ((&v6 + 1969711254 - 2 * ((unint64_t)&v6 & 0x75676896)) ^ 0xE1CA21CF)) ^ 0x43B;
  uint64_t v7 = a1;
  LOBYTE(v2) = -113 * ((*(_DWORD *)v2 - *(_DWORD *)v1) ^ 0xEA);
  return (*(uint64_t (**)(int *))((char *)*(&off_10018D100
                                                    + ((-113
                                                                       * (dword_1001B6E50 ^ 0xEA ^ qword_1001B6D98)) ^ byte_100167EB0[byte_100163C10[(-113 * (dword_1001B6E50 ^ 0xEA ^ qword_1001B6D98))] ^ 0x83])
                                                    - 175)
                                          + 8
                                          * (v2 ^ byte_10016DDC0[byte_100167FB0[v2] ^ 0x9D])
                                          + 17812))(&v6);
}

uint64_t sub_10002F0E4(unsigned int a1)
{
  return aQ5g[(byte_1001609A8[a1 - 8] ^ 0x85) - 4] ^ a1;
}

uint64_t sub_10002F114(unsigned int a1)
{
  return byte_10016DDC8[(byte_100167FB8[a1 - 8] ^ 0x9D) - 8] ^ a1;
}

uint64_t sub_10002F144(unsigned int a1)
{
  return byte_10016DCC0[byte_100167CB0[a1] ^ 0x69] ^ a1;
}

uint64_t sub_10002F170(unsigned int a1)
{
  return aQ5g[(byte_1001609A8[a1 - 8] ^ 0xBB) - 4] ^ a1;
}

uint64_t sub_10002F1A0(unsigned int a1)
{
  return byte_100167DB8[(byte_100163B10[a1] ^ 0xAF) - 8] ^ a1;
}

uint64_t sub_10002F1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(&off_10018D100
       + (aQ5g[(byte_1001609A8[(-113 * ((qword_1001B6D98 - dword_1001B6DA0) ^ 0xEA))
                                              - 8] ^ 0x5A)
                              - 4] ^ (-113 * ((qword_1001B6D98 - dword_1001B6DA0) ^ 0xEA)))
       - 104);
  uint64_t v5 = *(&off_10018D100
       + (byte_1001680BC[(byte_100163E10[(-113 * ((qword_1001B6D98 - *v4) ^ 0xEA))] ^ 0x8C)
                                        - 12] ^ (-113 * ((qword_1001B6D98 - *v4) ^ 0xEA)))
       - 122);
  unint64_t v6 = (unint64_t)&v8[*v5 ^ *v4];
  void *v4 = 1932141199 * v6 + 0x5BC8EB821F80EA16;
  void *v5 = 1932141199 * (v6 ^ 0xA437147DE07F15EALL);
  unsigned int v9 = 2196 - 241568881 * (&v9 ^ 0xD6110442);
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v10 = a1;
  uint64_t v11 = a4;
  LOBYTE(v5) = -113 * ((*(_DWORD *)v5 - *(_DWORD *)v4) ^ 0xEA);
  (*(void (**)(unsigned int *))((char *)*(&off_10018D100
                                                   + ((-113
                                                                      * ((qword_1001B6D98 + dword_1001B6DA0) ^ 0xEA)) ^ byte_100167DB0[byte_100163B10[(-113 * ((qword_1001B6D98 + dword_1001B6DA0) ^ 0xEA))] ^ 3])
                                                   - 74)
                                         + 8
                                         * (byte_10016DDC8[(byte_100167FB8[v5 - 8] ^ 0x66)
                                                                                        - 8] ^ v5)
                                         + 17364))(&v9);
  return v12 ^ 0xDE6BE0E6;
}

uint64_t sub_10002F3C0(char a1, unsigned int a2)
{
  return byte_10016DCC0[(byte_100167CB0[a2] ^ a1)] ^ a2;
}

uint64_t sub_10002F3EC(unsigned int a1)
{
  return byte_10016DCC0[byte_100167CB0[a1] ^ 0xB9] ^ a1;
}

uint64_t sub_10002F418(char a1, unsigned int a2)
{
  return byte_100167DB8[(byte_100163B10[a2] ^ a1) - 8] ^ a2;
}

uint64_t sub_10002F444(unsigned int a1)
{
  return byte_100167DB8[(byte_100163B10[a1] ^ 3) - 8] ^ a1;
}

uint64_t sub_10002F470(char a1, unsigned int a2)
{
  return byte_100167EB4[(byte_100163C18[a2 - 8] ^ a1) - 4] ^ a2;
}

uint64_t sub_10002F49C(unsigned int a1)
{
  return byte_100167EB4[(byte_100163C18[a1 - 8] ^ 0x20) - 4] ^ a1;
}

uint64_t sub_10002F4C8(char a1, unsigned int a2)
{
  return byte_10016DDC8[(byte_100167FB8[a2 - 8] ^ a1) - 8] ^ a2;
}

uint64_t sub_10002F4F4(char a1, unsigned int a2)
{
  return aQ5g[(byte_1001609A8[a2 - 8] ^ a1) - 4] ^ a2;
}

uint64_t sub_10002F520(unsigned int a1)
{
  return byte_1001680BC[(byte_100163E10[a1] ^ 0x62) - 12] ^ a1;
}

uint64_t sub_10002F550(unsigned int a1)
{
  return byte_100167EB4[(byte_100163C18[a1 - 8] ^ 0x83) - 4] ^ a1;
}

uint64_t sub_10002F580(unsigned int a1)
{
  return aQ5g[(byte_1001609A8[a1 - 8] ^ 0x5A) - 4] ^ a1;
}

uint64_t sub_10002F5B0(unsigned int a1)
{
  return byte_10016DCC0[byte_100167CB0[a1] ^ 0x55] ^ a1;
}

uint64_t sub_10002F5DC(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  int v2 = *(_DWORD *)(result + 8) ^ (235795823 * ((2 * (result & 0x2C7AE860) - result + 1401231263) ^ 0xC7285EC6));
  *(_DWORD *)(v1 - 0xB999BAB1C512023) = ((v2 & 0x1FF ^ 0x10070F)
                                         + (v2 & 0x90 ^ 0xE7636090)
                                         - ((v2 & 0x1FF ^ 0x10070F) & 0x100690)) ^ 0x50AFD38;
  *(void *)(v1 - 0xB999BAB1C512043) = 0x6CAA79AEDFF50366;
  *(_DWORD *)(v1 - 0xB999BAB1C512027) = 1491164578;
  int v3 = v2 ^ 0x2E;
  if (v3 == 1)
  {
    int v4 = 1491164594;
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    *(_DWORD *)(v1 - 0xB999BAB1C51202BLL) = -1684979659;
    int v4 = 1491164598;
LABEL_5:
    *(void *)(v1 - 0xB999BAB1C51203BLL) = 0xB78E0A4C3F0682C4;
    *(void *)(v1 - 0xB999BAB1C512033) = 0x4871F5B3C0F97D3BLL;
    *(_DWORD *)(v1 - 0xB999BAB1C512027) = v4;
  }
  *(_DWORD *)(result + 16) = 453445646;
  return result;
}

void sub_10002F758(uint64_t a1)
{
  int v1 = 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 32) - 0x4E07305EAF801B1FLL) + 491918637;
  unsigned int v3 = *(_DWORD *)(a1 + 8) - v1 + 1296166826;
  BOOL v4 = v2 < 0x550D5C59;
  BOOL v5 = v2 > v3;
  if (v3 < 0x550D5C59 != v4) {
    BOOL v5 = v4;
  }
  __asm { BRAA            X9, X17 }
}

uint64_t sub_10002F844@<X0>(int a1@<W0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  BOOL v34 = v27 < v29;
  *(&a27 + (a2 - 1456016381)) = 17 * (v31 ^ 0xBB)
                                            + *(unsigned char *)(v33 + (v28 + v30))
                                            - ((2 * *(unsigned char *)(v33 + (v28 + v30))) & 0xEF)
                                            + 68;
  unsigned int v35 = v28 + 1 + a1;
  int v36 = v34 ^ (v35 < v29);
  BOOL v37 = v35 < v27;
  if (!v36) {
    BOOL v34 = v37;
  }
  return (*(uint64_t (**)(void))(v32 + 8 * ((112 * v34) ^ v31)))();
}

uint64_t sub_10002F8C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)(((v4 < ((a4 - 1658) | 0x2Cu) - 268) * (((a4 + 1582133837) & 0xA1B2877F) - 107)) ^ a4)))();
}

uint64_t sub_10002F918@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((1434 * (((11 * (v2 ^ 0x238)) ^ 0x84B21478) + a1 < (v2 ^ 0x238u) + 1021 + v1)) ^ v2)))();
}

uint64_t sub_10002F96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  return (*(uint64_t (**)(void))(v22
                              + 8
                              * ((1283
                                * (a21 - *(_DWORD *)(a2 + 4) + 1370577857 == ((((v21 + 474) | 0xA8) + 601342828) ^ v21 ^ 0xA3))) ^ v21)))();
}

uint64_t sub_10002F9D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v9 = a1 + 1;
  unsigned char *v2 = (v1 + v9 + v5) * ((v3 + v9) ^ v4);
  return (*(uint64_t (**)(void))(v7 + 8 * (((v9 == 31) * v6) ^ v8)))();
}

uint64_t sub_10002FCD0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(v6 + 8 * (v7 + 1961)))(a1, 0);
  if (result == 16)
  {
    v3 += 3;
    goto LABEL_7;
  }
  if (result == 12)
  {
LABEL_7:
    uint64_t result = (*(uint64_t (**)(uint64_t))(v6 + 8 * (v4 ^ 0xB76)))(a1);
    int v10 = v3;
    goto LABEL_8;
  }
  if (result)
  {
    v3 += 2;
    goto LABEL_7;
  }
  void *v5 = a1;
  int v10 = 481369318;
LABEL_8:
  *char v1 = v10 ^ v2;
  return result;
}

uint64_t sub_10002FD58@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((30 * (v1 == 1704253533)) ^ 0x5EBu)))();
}

void sub_10002FD88(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (69008221 * ((-2 - ((a1 | 0xFC1C80D3) + (~a1 | 0x3E37F2C))) ^ 0xD0412D26));
  __asm { BRAA            X10, X17 }
}

uint64_t sub_10002FE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  *(void *)(*(void *)(a17 + 96) + 504) = v42 + 1;
  *(_DWORD *)(*(void *)(a17 + 96) + 496) = a19 - 1;
  int v45 = 235795823 * ((((v44 - 152) | 0x8A773861) - (v44 - 152) + ((v44 - 152) & 0x7588C798)) ^ 0x1EDA7138);
  *(_DWORD *)(v44 - 144) = v45 ^ 0x78F2562C;
  *(_DWORD *)(v44 - 140) = v45 - 1882357464;
  *(void *)(v44 - 152) = &STACK[0xB999BAB1C51213F];
  uint64_t v46 = (*(uint64_t (**)(uint64_t))(v43 + 19112))(v44 - 152);
  return (*(uint64_t (**)(uint64_t))(v43
                                            + 8
                                            * ((438
                                              * (a19
                                               - 1702013085
                                               + ((2 * (a42 & 0x3F)) ^ 0x5C)
                                               + (a42 & 0x3F ^ 0xFFDDCFD1) < 0xFFFFFFC0)) ^ 0xFDu)))(v46);
}

uint64_t sub_100030038()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (v0 ^ (46
                                     * ((((v0 - 315) | 0x110) ^ 0x41D8C4F9 ^ (v0 + 1474089100) & (2 * v1))
                                      + (v1 ^ 0x1F038A1A)
                                      - 168312832 != 568732660)))))();
}

uint64_t sub_1000300AC(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((*(unsigned __int8 *)(v4 + 1) == (v5 + 59))
                                     * (a3 + ((v5 + 1084228167) | 0xB202D400) + 2306)) ^ v5)))();
}

uint64_t sub_1000300FC()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((v0 - 251) * (LODWORD(STACK[0x290]) != 136246100)) ^ (v0 - 62))))();
}

uint64_t sub_100030160()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((((v2 - 479750768) & 0x1C986BBB) - 897) ^ 0xD7) * (v0 == v1)) ^ v2)))();
}

uint64_t sub_1000301A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(void))(v15 + 8 * (((((v14 - 2001) | 0x184) - 355) * (a14 == 0)) ^ v14)))();
}

uint64_t sub_1000301EC()
{
  return sub_100043540();
}

uint64_t sub_10003023C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * ((3167 * ((int)a6 + v27 + 1260 < ((a9 - 773236923) & 0x2E16A43Fu) - 53)) ^ a9)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_10003028C@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v10 = a5 - 32 + (a3 ^ (v8 + 488));
  long long v11 = *(_OWORD *)(v7 + v10 - 15);
  long long v12 = *(_OWORD *)(v7 + v10 - 31);
  uint64_t v13 = a6 + v10;
  *(_OWORD *)(v13 - 15) = v11;
  *(_OWORD *)(v13 - 31) = v12;
  return (*(uint64_t (**)(void))(v6 + 8 * (((a1 == 32) * a4) ^ (v9 + a2 + 879))))();
}

uint64_t sub_100030298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (int)(((((v8 - 33571367) & 0xFF0BEBAF ^ 0xFFFFF22C) + a6 + v8 - 290) * (v6 == v7)) ^ v8)))();
}

uint64_t sub_1000302E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v18 - 112) = &STACK[0x5E8E72AB319E42C9];
  *(_DWORD *)(v18 - 120) = v14
                         + 831981571 * ((((2 * (v18 - 128)) | 0x7BACAC24) - (v18 - 128) - 1037456914) ^ 0xA4778636)
                         + 97;
  *(void *)(v18 - 128) = a14;
  (*(void (**)(uint64_t))(v15 + 8 * (v14 ^ 0xF4E)))(v18 - 128);
  *(_DWORD *)(v18 - 104) = (v14 - 466) ^ (((((v18 - 128) | 0xD2A1CF3A) - ((v18 - 128) & 0xD2A1CF3A)) ^ 0x1039D30) * v17);
  *(void *)(v18 - 128) = v16;
  *(void *)(v18 - 112) = a14;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v14 + 815)))(v18 - 128);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (((*(_DWORD *)(v18 - 120) > 0x74F05479u)
                                              * ((v14 - 443) ^ 0x6A3 ^ ((v14 - 888) | 1))) ^ v14)))(v19);
}

uint64_t sub_1000303FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
  return (*(uint64_t (**)(void))(v19 + 8 * ((120 * (v18 - 1922352602 + (a18 | 0x20000581u) < v18 + a2)) ^ 0x69Du)))();
}

uint64_t sub_100030448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 8 * (((8 * (a4 + (((a31 ^ 0x1E9) + 40) ^ 0xBF61DB3C) < 8)) | (32 * (a4 + (((a31 ^ 0x1E9) + 40) ^ 0xBF61DB3C) < 8))) ^ a31 ^ 0x1E9)))(1084105855, a2, a3, 2099684491, 0x284FA45E2E8D3F12, 9, ((unint64_t)*(unsigned __int8 *)(a2 + a4 + (((a31 ^ 0x1E9) + 40) ^ 0xBF61DB3C)) << ((((a4 ^ 0x98) & 0x80) << (((a31 ^ 0xE9) - 66) ^ v31)) & 0xF8)) ^ a1 ^ 0xE1360CF3818976F1, 3210861372, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_1000304D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v19 = (v16 + 437) | 0x200;
  int v20 = 3804331 * ((v18 - 128) ^ 0x7ED525F6);
  *(void *)(v18 - 128) = v17;
  *(_DWORD *)(v18 - 120) = v20 + v16 + 1526;
  *(_DWORD *)(v18 - 116) = v15 - v20 + v19 - 486808148;
  (*(void (**)(uint64_t))(v14 + 8 * (v16 ^ 0xBFF)))(v18 - 128);
  *(_DWORD *)(v18 - 104) = (v19 - 466) ^ (69008221
                                        * ((((v18 - 128) | 0x867F775D) + (~(v18 - 128) | 0x798088A2)) ^ 0x55DD2556));
  *(void *)(v18 - 128) = a13;
  *(void *)(v18 - 112) = a14;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v19 ^ 0xF7F)))(v18 - 128);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * (((*(_DWORD *)(v18 - 120) > 0x74F05479u)
                                              * (((v19 - 291478121) & 0x115F96F1) + ((v19 - 1543) | 0x44C) - 1695)) ^ v19)))(v21);
}

uint64_t sub_1000305F8@<X0>(int a1@<W2>, int a2@<W3>, int a3@<W8>)
{
  int v10 = (a1 - 522) | 0x412;
  unsigned int v11 = *(_DWORD *)(*(void *)(v9 - 0x5E8E72AB319E4281) + 4 * (v7 + v6)) ^ v4;
  *(_DWORD *)(*(void *)(v9 - 0x5E8E72AB319E4281) + 4 * (v3 + a3 + 1)) = ((v11 >> (32 - v5)) | (v4 + v10 - 208 - 1351) ^ a2)
                                                                            + v4
                                                                            - ((2
                                                                              * ((v11 >> (32 - v5)) | (v4 + v10 - 208 - 1351) ^ a2)) & 0xC9C56542);
  return (*(uint64_t (**)(void))(v8 + 8 * (int)((43 * ((v7 - 1 + v6) >> 31)) ^ v10)))();
}

void sub_1000306AC(uint64_t a1)
{
  int v1 = 831981571 * ((((2 * a1) | 0xACFEB304) - a1 + 696297086) ^ 0x4FDE89A6);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_100030748(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v7 & (2 * (*(unsigned __int8 *)(a2 + 7) - 100)))
                                 + ((*(unsigned __int8 *)(a2 + 7) - 100) ^ v6) == v6)
                                * (a3 + (v5 ^ (v3 + 201)) + 1200)) ^ v5)))();
}

uint64_t sub_10003078C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1765
                                * (*(_DWORD *)(*(void *)(a1 - 0x5E8E72AB319E4281)
                                             + 4 * (v2 + v5 + ((v1 - 1156) | 0x484u) - 1197)) == v3)) ^ (v1 - 980))))();
}

uint64_t sub_1000307E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v7
                                                                               + 8
                                                                               * (((31 * (v4 ^ 0x3D3)
                                                                                  + 523 * (v4 ^ 0x3C3)
                                                                                  - 1583)
                                                                                 * ((v6 & 8) == 0)) ^ v4)))(a1, a2, a3, a4, (v5 - a4));
}

uint64_t sub_100030830@<X0>(uint64_t a1@<X0>, int a2@<W5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v9 = (a2 + v5);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a3 + v9) ^ *(unsigned char *)(v4 + (v9 & 0xF)) ^ *(unsigned char *)(a4 + (v9 & 0xF)) ^ *(unsigned char *)((v9 & 0xF) + v6 + 2) ^ (-73 * ((a2 + v5) & 0xF)) ^ 0x77;
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((2 * ((v9 + 1) > 0x14F)) | (4 * ((v9 + 1) > 0x14F))) ^ v7)))();
}

uint64_t sub_1000308A4()
{
  *(void *)(v2 - 184) = &STACK[0x48DAFC6ABDD90938];
  *(void *)(v2 - 168) = &STACK[0x6C1B4F99CC2E8B5F];
  *(_DWORD *)(v2 - 160) = (v0 - 1127) ^ (1178560073
                                       * ((((v2 - 192) | 0xFAD1E183) - ((v2 - 192) | 0x52E1E7C) + 86908540) ^ 0x1DE4C3EB));
  LOBYTE(STACK[0x18F0]) = 73 * ((((v2 + 64) | 0x83) - ((v2 + 64) | 0x7C) + 124) ^ 0xEB) + 93;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 + 965)))(v2 - 192);
  int v4 = *(_DWORD *)(v2 - 192);
  LODWORD(STACK[0x4AC]) = v4;
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * ((3547 * (v4 == ((927 * ((v0 - 1481) & 0xFFFFFCD3)) ^ 0xDE6BE7D8))) ^ v0)))(v3);
}

uint64_t sub_1000309AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(uint64_t))(v64
                                            + 8
                                            * (((((3 * a64) ^ 0x33553D36) == 861224225) * ((2 * v65) ^ 0x7A8)) ^ (v65 + 442))))(803);
}

uint64_t sub_100030A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t x8_0@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19,uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v64 = (char *)&STACK[0x1880] + x8_0;
  char *v64 = *(unsigned char *)a1;
  *(void *)(v64 + 1) = *(void *)(a1 + 1);
  *(_DWORD *)(v64 + 9) = *(_DWORD *)(a1 + 9);
  *(_WORD *)(v64 + 13) = *(_WORD *)(a1 + 13);
  v64[15] = *(unsigned char *)(a1 + 15);
  uint64_t v65 = *(void *)(a1 + 8);
  *((void *)v64 + 2) = *(void *)a1;
  *((void *)v64 + 3) = v65;
  return sub_100033934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

uint64_t sub_100030A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LODWORD(STACK[0x374]) = v9;
  STACK[0x460] = *(void *)(v11 + 8 * v10);
  return sub_10003BEF4(a1, -653949007, 58, a4, 51, 3037000498, a7, a8, a9);
}

uint64_t sub_100030A94@<X0>(unint64_t a1@<X2>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  STACK[0x260] = a1;
  LODWORD(STACK[0x290]) = v18;
  if (v18 == 136246120)
  {
    int v22 = LODWORD(STACK[0x2D4]) - 771;
    int v23 = 15;
  }
  else
  {
    if (v18 != 136246116)
    {
      STACK[0x220] = 0;
      LODWORD(STACK[0x238]) = 0;
      LODWORD(STACK[0x240]) = 0;
      goto LABEL_7;
    }
    int v22 = LODWORD(STACK[0x2D4]) ^ 0x327;
    int v23 = 18;
  }
  LODWORD(STACK[0x240]) = v23;
  STACK[0x220] = (unint64_t)*(&off_10018D100 + v22) - 12;
  LODWORD(STACK[0x238]) = 1;
LABEL_7:
  int v24 = STACK[0x2D4];
  LODWORD(STACK[0x250]) = LODWORD(STACK[0x2D4]) - 64;
  int v25 = 2078219279 * ((v21 - 192) ^ 0xDAFA9674);
  *(void *)(v21 - 128) = v20 + 1168;
  *(_DWORD *)(v21 - 168) = LODWORD(STACK[0x2B8]) - v25 - 238065456;
  *(_DWORD *)(v21 - 132) = v25 + v24 - 140;
  *(void *)(v21 - 184) = 0;
  *(void *)(v21 - 176) = a18;
  *(void *)(v21 - 152) = STACK[0x2C8];
  *(void *)(v21 - 144) = 0;
  *(void *)(v21 - 160) = a2 + 0x5E8E72AB319E45A9;
  *(void *)(v21 - 192) = a2 + 0x5E8E72AB319E4499;
  (*(void (**)(uint64_t))(v19 + 8 * (v24 + 1629)))(v21 - 192);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v19
                                                                       + 8
                                                                       * ((1918
                                                                         * (*(_DWORD *)(v21 - 136) == LODWORD(STACK[0x298]) - 563357572)) ^ LODWORD(STACK[0x250]))))(44, 0x3A737B19B9CD1C16, STACK[0x260]);
}

void sub_100030C24(uint64_t a1)
{
  *(unsigned char *)(a1 + v1 + 4) = 87;
  JUMPOUT(0x10002F9E0);
}

uint64_t sub_100030C50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v9 = a1 + 1;
  unsigned char *v3 = ((v2 + v9 + ((7 * (v1 ^ 0x70)) ^ v5)) ^ v6) * (v4 + v9);
  return (*(uint64_t (**)(void))(v8 + 8 * (((v9 != 91) * v7) ^ v1)))();
}

uint64_t sub_100030C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v9 = STACK[0x430];
  STACK[0x540] = *(void *)(v7 + 8 * (v8 - 771));
  STACK[0x3B0] = v9;
  STACK[0x358] = STACK[0x2B0];
  uint64_t v10 = *(_DWORD *)(v9 - 0xB999BAB1C51203FLL) & 0x3F;
  *(unsigned char *)(v9 - 0xB999BAB1C512083 + (v10 ^ 0x2E)) = -9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8 * ((((v10 ^ 0x2E) > (((((v8 - 790) | 5) + 495) | 0x122) ^ 0x319u)) * (((((v8 - 790) | 5) + 1027) | 0x381) ^ 0x2A9)) ^ ((v8 - 790) | 5))))(a1, -653949007, 58, 27, 51, a6, a7, 3367574058);
}

void sub_100030C70(_DWORD *a1)
{
  unsigned int v1 = 1543737703 * ((1016161312 - (a1 | 0x3C916420) + (a1 | 0xC36E9BDF)) ^ 0xBD9ACBA3);
  unsigned int v2 = *a1 + v1;
  int v3 = a1[2] ^ v1;
  BOOL v5 = (v3 & 0x30000000) == 0 || (v3 & 0x3F000000) == 671088640;
  __asm { BRAA            X10, X17 }
}

uint64_t sub_100030D6C()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1314
                                * ((((*(unsigned __int8 *)(v2 + 4) - 247) << (((v3 - 85) | 0x40) ^ 0x6C)) & v1)
                                 + ((*(unsigned __int8 *)(v2 + 4) - 247) ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_100030DB4()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((481
                                * ((v4 ^ 0x5EBF5BE6) - 514916354 + ((v2 - 1115770480) & v1) + (v0 ^ 0x365u) - 1074683100 >= (((v0 ^ 0x365) + 868304382) & 0xCC3EBB5A ^ 0x7FFFFDAF))) ^ v0 ^ 0x365)))();
}

uint64_t sub_100030E4C()
{
  BOOL v4 = v2 + 124562644 < (int)(v1 + 1039594227);
  if (v1 > 0x42090D0C != v2 + 124562644 < -1107889421) {
    BOOL v4 = v1 > 0x42090D0C;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((!v4 * ((v0 - 2) ^ 0x1F1)) ^ v0)))();
}

uint64_t sub_100030EC4@<X0>(int a1@<W8>)
{
  STACK[0x508] = v1 - 16;
  return (*(uint64_t (**)(void))(v3 + 8 * ((725 * (v2 == ((a1 + 415219362) & 0xE7403FAF ^ (v4 + a1 - 15 - 491)))) ^ a1)))();
}

uint64_t sub_100030F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  STACK[0x288] = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                         + 8
                                                                                         * ((1770
                                                                                           * (v7 == v9 + v8 + 1375 - 2189)) ^ (v8 - 751))))(959364704, 3335604717, a3, a4, a5, 119);
}

uint64_t sub_100030F80()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (v1 & ~((v0 + 42691551) ^ (v2 == 80601692) ^ 0x28B730B) | (8
                                                                                         * (v1 & ~((v0 + 42691551) ^ (v2 == 80601692) ^ 0x28B730B))) | v0)))();
}

uint64_t sub_100030FC0@<X0>(int a1@<W1>, int a2@<W8>)
{
  v9.i64[0] = 0x7777777777777777;
  v9.i64[1] = 0x7777777777777777;
  uint64_t v10 = (v5 + v3);
  int8x16_t v11 = *(int8x16_t *)(v2 + v10 - 15);
  int8x16_t v12 = *(int8x16_t *)(v2 + v10 - 31);
  uint64_t v13 = v6 + v10;
  *(int8x16_t *)(v13 - 15) = veorq_s8(v11, v9);
  *(int8x16_t *)(v13 - 31) = veorq_s8(v12, v9);
  LODWORD(v13) = ((a1 - v7) ^ 0x785) == (v4 & 0xFFFFFFE0);
  return (*(uint64_t (**)(void))(v8 + 8 * (int)((v13 | (16 * v13)) ^ (a2 + a1 + 1344))))();
}

uint64_t sub_100031028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  BOOL v18 = a15 == v16 + ((10 * (v15 ^ 0x256) + 259) | 0x4C) - 1245;
  return (*(uint64_t (**)(void))(v17 + 8 * (((4 * v18) | (16 * v18)) ^ v15)))();
}

uint64_t sub_100031070()
{
  return sub_100060FC0();
}

uint64_t sub_100031090(uint64_t a1, int a2)
{
  uint64_t v6 = *(void *)(a1 + 8);
  memset((void *)(v5 - 176), 119, 16);
  int v7 = ((2 * ((v5 - 160) & 0x8B7C4E0) - (v5 - 160) - 146261217) ^ 0x63E57246) * a2;
  *(void *)(v5 - 120) = v5 - 176;
  *(void *)(v5 - 160) = v5 - 192;
  *(void *)(v5 - 144) = &STACK[0x278];
  *(void *)(v5 - 136) = v6;
  *(_DWORD *)(v5 - 124) = (v4 + 1961) ^ v7;
  *(_DWORD *)(v5 - 152) = v7 + 396484252;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v4 + 2308)))(v5 - 160);
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (((*(_DWORD *)(v5 - 128) == ((v4 - 35084495) & 0x21759C9 ^ (v3 + 137)))
                                              * ((v4 - 85) ^ 0x5DF)) ^ v4)))(v8);
}

uint64_t sub_100031180()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((**(_DWORD **)(v2 + 8 * (v0 - 1078)) == 0) * ((v0 ^ 0x535) + 135)) ^ v0)))();
}

uint64_t sub_1000311C8@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*v3 + 4 * (v6 + v5)) = *(_DWORD *)(*v4 + 4 * (v6 + v5));
  return (*(uint64_t (**)(void))(a1 + 8 * (((v2 + v6 - 121 == v1) * v7) ^ v2)))();
}

uint64_t sub_100031208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  int v19 = ((v16 - 98) ^ 0x448) + (a16 ^ v17) - ((2 * (a16 ^ v17)) & 0x2C452384) + 371362685;
  return (*(uint64_t (**)(void))(v18
                              + 8
                              * ((230
                                * (((2 * v19) & 0x7A6F5CF8 ^ 0x28450080) + (v19 ^ 0x2B153FBE) - 86016540 == 941042784)) ^ v16)))();
}

uint64_t sub_100031298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51)
{
  return (*(uint64_t (**)(void))(v52
                              + 8
                              * (((a51 - 1074653292 < (((v51 + 1224845573) | 0xB40A00AB) ^ (a6 + 16))) * (v51 ^ 0x10C)) ^ v51)))();
}

uint64_t sub_1000312F8()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((7 * (STACK[0x2D8] == 0)) ^ (v0 + 1347))))();
}

uint64_t sub_100031330@<X0>(int a1@<W0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  BOOL v24 = v17 < v19;
  *(&a17 + (v18 - 602656388)) = *(unsigned char *)(v23 + (a2 + a1))
                                            - ((2 * *(unsigned char *)(v23 + (a2 + a1))) & 0xEF)
                                            + 119;
  unsigned int v25 = a2 + 1 + v20;
  int v26 = v24 ^ (v25 < v19);
  BOOL v27 = v25 < v17;
  if (!v26) {
    BOOL v24 = v27;
  }
  return (*(uint64_t (**)(void))(v21 + 8 * ((125 * !v24) ^ v22)))();
}

uint64_t sub_1000313B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int v19 = (v17 + 707566491) & 0xD5D367AB;
  int v20 = 3804331 * ((v18 - 136) ^ 0x7ED525F6);
  *(void *)(v18 - 136) = v14;
  *(_DWORD *)(v18 - 128) = v20 + v17 + 1926;
  *(_DWORD *)(v18 - 124) = v16 - v20 + v19 - 1700721024;
  (*(void (**)(uint64_t))(v15 + 8 * (v17 ^ 0x96F)))(v18 - 136);
  *(void *)(v18 - 120) = a14;
  *(void *)(v18 - 136) = a12;
  *(_DWORD *)(v18 - 112) = (v19 + 44) ^ (69008221 * ((v18 - 1243966731 - 2 * ((v18 - 136) & 0xB5DA937D)) ^ 0x6678C177));
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (int)(v19 + 1325)))(v18 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (int)(((*(_DWORD *)(v18 - 128) <= 0x74F05479u)
                                                   * (((v19 - 597968175) & 0x23A4476F) - 1613)) ^ v19)))(v21);
}

uint64_t sub_1000314E4(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((52 * (v3 + 1 == v4 + 16)) ^ a3)))();
}

uint64_t sub_1000314FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v8 = (a6 - 834) | 0x260;
  *int v6 = a3;
  uint64_t v13 = v11;
  unsigned int v12 = (v8 - 435) ^ (69008221
                    * (((&v12 | 0x90C46521) - &v12 + (&v12 & 0x6F3B9AD8)) ^ 0x4366372B));
  (*(void (**)(unsigned int *))(v7 + 8 * (v8 + 1719)))(&v12);
  uint64_t v13 = v10;
  unsigned int v12 = ((v8 ^ 0xA8) - 523) ^ (69008221
                             * ((-128049727 - (&v12 | 0xF85E1DC1) + (&v12 | 0x7A1E23E)) ^ 0xD403B034));
  (*(void (**)(unsigned int *))(v7 + 8 * (v8 ^ 0xB77)))(&v12);
  return 0;
}

uint64_t sub_100031638()
{
  LODWORD(STACK[0x578]) = v0;
  return sub_100043540();
}

uint64_t sub_100031658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,int a52,uint64_t a53,uint64_t a54)
{
  int v57 = 69008221 * ((((v56 - 192) | 0xE9AA6CBB) + (~(v56 - 192) | 0x16559344)) ^ 0x3A083EB0);
  *(_DWORD *)(v56 - 188) = LODWORD(STACK[0x47C]) - v57 + (((v54 ^ 0x286) + 977) ^ 0x16E6399D);
  *(void *)(v56 - 184) = a54;
  *(_DWORD *)(v56 - 152) = v57 + a52 + 1375404271;
  *(void *)(v56 - 168) = a49;
  *(void *)(v56 - 160) = a50;
  *(_DWORD *)(v56 - 176) = (v54 + 1587) ^ v57;
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(v55 + 8 * (v54 ^ 0x8D1)))(v56 - 192);
  int v59 = *(_DWORD *)(v56 - 192);
  LODWORD(STACK[0x4AC]) = v59;
  return (*(uint64_t (**)(uint64_t))(v55 + 8 * ((102 * (v59 == -563355418)) ^ v54)))(v58);
}

void sub_100031748(uint64_t a1@<X8>, uint64_t a2, unsigned int a3, uint64_t a4)
{
  a4 = a1;
  a3 = (v5 - 543) ^ (69008221 * ((((2 * &a3) | 0x51435E80) - &a3 - 681684800) ^ 0xFB03FD4A));
  (*(void (**)(unsigned int *))(v4 + 8 * (v5 + 1611)))(&a3);
  sub_100061830();
}

uint64_t sub_1000317A8(uint64_t a1)
{
  int v5 = ((15 * (v3 ^ 0x8B8)) ^ 0xBE4209AB) + v2;
  BOOL v6 = v5 < -1491539134;
  BOOL v7 = v4 - 1102967299 < v5;
  if (v4 - 1102967299 < (int)(v3 - 1491541424) != v6) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * ((482 * v7) ^ v3)))(a1, 1961907321);
}

uint64_t sub_100031828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  HIDWORD(a23) = HIDWORD(a18) - 1745640416;
  v52.i64[0] = 0x7777777777777777;
  v52.i64[1] = 0x7777777777777777;
  return sub_10004B8A8(119, a2, 1476395008, a4, a5, a6, v52, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           v51 - 118,
           v50 - 16,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_10003188C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  *(_DWORD *)(a35 + 4 * v36) ^= a29;
  return (*(uint64_t (**)(void))(v37
                              + 8
                              * (int)(((((v38 + v35 - 269486460) & 0x5FF3DEBF) + ((v38 + v35 + 1340331332) ^ 0xFFFFFCF4))
                                     * (v39 == 623634654)) ^ (v38 + v35 + 1319))))();
}

uint64_t sub_100031914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v67 = (*(uint64_t (**)(uint64_t))(v64 + 8 * (v66 ^ 0xA5B)))(a64);
  STACK[0x508] = STACK[0x288] - 1824;
  LODWORD(STACK[0x54C]) = v65;
  return (*(uint64_t (**)(uint64_t))(v64
                                            + 8
                                            * (((STACK[0x3A0] != 0) * (((v66 - 294) | 0x444) - 1490)) ^ (v66 - 120))))(v67);
}

uint64_t sub_100031984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  int v60 = v58 + 746;
  int v61 = (char)(v57 + v58 - 22 + 81) - (char)(v56 - 26);
  LODWORD(STACK[0x2C8]) = (v61 ^ 0xEFB7E9C3) + 2003736512 + ((2 * v61) & 0xDF6FD386);
  uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8 * (v58 + 2259)))(1576, 2940923044);
  STACK[0x4A0] = v62;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 8 * ((105 * (((v62 == 0) ^ (-105 * (v60 ^ 0xAF) + (v60 ^ 0xAF) + 79)) & 1)) ^ v60)))(v62, v63, v64, v65, v66, v67, v68, v69, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

uint64_t sub_1000319C8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  int v37 = v34 + v33 - 2147348469;
  unsigned int v38 = v37 + ((v35 - 613) ^ 0x13A);
  if (v38 <= 0x40) {
    unsigned int v38 = 64;
  }
  BOOL v39 = __CFADD__(v37 + 598, a33 + 2147346993 + a1 + v38 + 877);
  return (*(uint64_t (**)(void))(v36 + 8 * ((v39 | (4 * v39)) ^ v35)))();
}

uint64_t sub_100031A38@<X0>(uint64_t a1@<X0>, int8x16_t *a2@<X4>, int a3@<W8>)
{
  int8x16_t v8 = *(int8x16_t *)(a1 + (v4 + v3 + 57));
  *a2 = vaddq_s8(vsubq_s8(v8, vandq_s8(vaddq_s8(v8, v8), v7)), v6);
  return (*(uint64_t (**)(void))(v5 + 8 * (a3 + 1241)))();
}

uint64_t sub_100031A88(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((((a2 - 632) ^ 0x2BE) * ((unint64_t)(v2 - v3) < 0x20)) ^ a2)))();
}

uint64_t sub_100031AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                + 8
                                                                                * (((v5 == ((v6 + 2029022225) & 0x870F96FA ^ 0x628))
                                                                                  * v7) ^ v6)))(a1, a2, a3, a4, a5);
}

uint64_t sub_100031B04(int a1)
{
  int v5 = *(_DWORD *)(v3 + v4 * (uint64_t)a1 + 36) + 783687968;
  BOOL v7 = v5 > -622747206 && v5 < SLODWORD(STACK[0x298]);
  return (*(uint64_t (**)(void))(v2 + 8 * (int)((v7 * ((v1 + 1970300828) & 0x8A8F9B2F ^ 0xBFA)) ^ v1)))();
}

uint64_t sub_100031B78()
{
  (*(void (**)(void))(v0 + 8 * (v1 + 1607)))();
  return (*(uint64_t (**)(void))(v0 + 8 * ((127 * (STACK[0x498] == 0)) ^ (v1 + 1423))))();
}

uint64_t sub_100031BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13
                                                                       + 8
                                                                       * ((110
                                                                         * (a13
                                                                          - 1296018759
                                                                          + (a12 & 0x65DD31FEu)
                                                                          + 816
                                                                          + 372 < 0xFFFFFFFB)) ^ (v14 + 1765))))(a1, a2, a3, a4);
}

uint64_t sub_100031C0C(uint64_t result)
{
  unint64_t v1 = 241568881
     * (((result ^ 0x9C42EF4B24AB98A7)
       - 2 * ((result ^ 0x9C42EF4B24AB98A7) & 0xDC1EF8D758FBB55ELL)
       - 0x23E10728A7044AA2) ^ 0x4F09C315AA4129BBLL);
  uint64_t v2 = (_DWORD *)(result + 4);
  unint64_t v3 = *(void *)(result + 16) - v1;
  unint64_t v4 = *(void *)(result + 32) - v1;
  BOOL v5 = (uint64_t)v4 < (uint64_t)v3;
  BOOL v6 = v4 < v3;
  int v7 = v5;
  if (((*(_DWORD *)(result + 40)
       - 241568881
       * (((result ^ 0x24AB98A7) - 2 * ((result ^ 0x24AB98A7) & 0x58FBB55E) + 1492890974) ^ 0xAA4129BB)) & 1) != 0)
    int v8 = v7;
  else {
    int v8 = v6;
  }
  if (v8) {
    uint64_t v2 = (_DWORD *)result;
  }
  *(_DWORD *)(result + 24) = *(_DWORD *)(result + 44) ^ (241568881
                                                       * (((result ^ 0x24AB98A7)
                                                         - 2 * ((result ^ 0x24AB98A7) & 0x58FBB55E)
                                                         + 1492890974) ^ 0xAA4129BB)) ^ *v2 ^ (241568881
                                                                                             * (((result ^ 0x24AB98A7)
                                                                                               - 2
                                                                                               * ((result ^ 0x24AB98A7) & 0x58FBB55E)
                                                                                               + 1492890974) ^ 0xAA4129BB));
  return result;
}

uint64_t sub_100031CAC()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((2003
                                * ((((9 * (v2 ^ 0x1C1)) ^ (v1 - 828)) & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
                                 + ((*(unsigned __int8 *)(v3 + 7) - 1) ^ v0) == v0)) ^ v2)))();
}

uint64_t sub_100031CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(_DWORD *)(v29 - 112) = v27
                         - 1224239923 * ((~((v29 - 144) | 0x36183663) + ((v29 - 144) & 0x36183663)) ^ 0x3B54344B)
                         - 1063;
  *(void *)(v29 - 144) = a25;
  *(void *)(v29 - 136) = v25;
  *(void *)(v29 - 104) = a21;
  *(void *)(v29 - 128) = v25;
  *(void *)(v29 - 120) = v28;
  (*(void (**)(uint64_t))(v26 + 8 * (v27 ^ 0xEFC)))(v29 - 144);
  return sub_10003C79C();
}

void sub_100031D70(uint64_t a1)
{
  int v1 = 235795823 * ((2 * (a1 & 0x125A82D6) - a1 - 307921623) ^ 0x79083470);
  int v2 = *(_DWORD *)(a1 + 16) + v1;
  int v3 = *(_DWORD *)(a1 + 4) - v1;
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) - 0x5E8E72AB319E4285);
  int v6 = v4 - 1758911813;
  BOOL v5 = v4 - 1758911813 < 0;
  int v7 = 1758911813 - v4;
  if (!v5) {
    int v7 = v6;
  }
  __asm { BRAA            X12, X17 }
}

void sub_100031E58(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) + 1224239923 * ((2 * (a1 & 0x188FD632) - a1 - 412079667) ^ 0x15C3D41A);
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v6 = v1 - 460628867 * (((&v4 | 0xA020558C) - (&v4 & 0xA020558C)) ^ 0xECB6D7F1) - 62;
  uint64_t v4 = v2;
  int v3 = (char *)*(&off_10018D100 + (v1 ^ 0x2E0)) - 4;
  (*(void (**)(uint64_t *))&v3[8 * v1 + 13528])(&v4);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100031F6C(int a1)
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((127 * (v2 + 1 == v3 + 64)) ^ a1)))();
}

uint64_t sub_100032044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v19 - 104) = (v14 + 483) ^ ((((((v19 - 128) | 0x22BA0E34) ^ 0xFFFFFFFE) - (~(v19 - 128) | 0xDD45F1CB)) ^ 0xEE7A3C1)
                                        * v16);
  *(void *)(v19 - 128) = v18;
  *(void *)(v19 - 112) = a14;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v14 ^ 0xB24)))(v19 - 128);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (((*(_DWORD *)(v19 - 120) == v17 + 2) * ((788 * (v14 ^ 0x271)) ^ 0xD6)) ^ v14)))(v20);
}

uint64_t sub_1000320EC(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62)
{
  return (*(uint64_t (**)(unint64_t, uint64_t))(v62 + 8 * ((((a62 & a2) == 18) * a4) ^ (v63 + 448))))(STACK[0x218], 2943156503);
}

uint64_t sub_10003217C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((((a4 ^ 0x482) - 496) * ((v4 & 0x18) != 0)) ^ a4)))();
}

uint64_t sub_1000321AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return a18(a18, a2, 0xFFFFFFFFLL, 1669055439, 1265103363, a6, 3029863991, 837, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

void sub_1000321E0(uint64_t a1)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100032268@<X0>(int a1@<W7>, int a2@<W8>)
{
  if ((a2 + 405001088) <= 0x12 && ((1 << (a2 + 0x80)) & 0x42405) != 0) {
    return (*(uint64_t (**)(void))(v3
  }
                                + 8
                                * ((((v2 & 0xFFFFFFFFFFFFFFFLL) + (unint64_t)((a1 - 49567107) | 0x200u) - 513 < 2)
                                  * (((a1 - 49567026) | 0xAA) ^ 0xE1)) ^ (a1 - 49565652))))();
  else {
    return sub_10006CE3C();
  }
}

uint64_t sub_1000322FC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((182 * (v1 != 1704253533)) ^ 0x37Bu)))();
}

uint64_t sub_100032330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(v10
                                            + 8
                                            * (int)(((a9 + 4 >= a9) * ((v9 + 1565019377) & 0xA2B7ABFF ^ 0x18B)) ^ v9)))(a1);
}

uint64_t sub_1000323B4@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  uint64_t v4 = a1 + v2;
  if ((unint64_t)(v4 + 1) > 0x38) {
    uint64_t v5 = v4 + 1;
  }
  else {
    uint64_t v5 = 56;
  }
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((v5 - v2 + ((a2 - 729) | 0x104u) + ((a2 - 2018037471) & 0x7848CFBE ^ 0x602256EFuLL) < 8) | a2)))();
}

uint64_t sub_100032424(int a1, int a2)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((57
                                * (a2
                                 + a1
                                 + ((v2 - 1063365279) & 0x3F61A9BF ^ 0x940A8A81 ^ (v2 + 1363691905) & 0xAEB7AF7F) > 7)) ^ v2)))();
}

uint64_t sub_1000324C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(result + 24) = a5;
  return result;
}

uint64_t sub_1000324CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  int v19 = ((v16 ^ 0x22C) - 64930673) & 0x3DEC367;
  BOOL v20 = a12 > (v16 ^ 0x1673CAA4u);
  unsigned int v21 = (*(_DWORD *)(*(void *)(a10 + 8) - 0x5693A2FF918C2410) - 971999952) * (*a16 ^ 0xE4E2B2A1);
  int v22 = 69008221 * ((((v18 - 128) | 0x8CA5F255) - ((v18 - 128) & 0x8CA5F255)) ^ 0x5F07A05F);
  *(void *)(v18 - 120) = a14;
  *(_DWORD *)(v18 - 112) = ((v21 ^ 0x7DDCF92B)
                          - 12845345
                          + ((v21 << (((((v16 ^ 0x2C) - 113) & 0x67) + 1) ^ 0x29)) & 0xFBB9F256)) ^ v22;
  *(void *)(v18 - 104) = a13;
  *(_DWORD *)(v18 - 128) = v22 + v19 + 922;
  *(_DWORD *)(v18 - 124) = 1758911813 - v22;
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v19 ^ 0x8E7u)))(v18 - 128);
  BOOL v24 = (int)(a12 + 1770796615) > 1770796616;
  if (v20) {
    BOOL v24 = v20;
  }
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * ((23 * v24) ^ v19)))(v23);
}

uint64_t sub_100032678()
{
  LODWORD(STACK[0x54C]) = v2;
  return (*(uint64_t (**)(void))(v1 + 8 * ((((v0 ^ 0xBEE) - 2188) * v3) ^ (v0 + 1200))))();
}

uint64_t sub_1000326AC(int a1, int a2)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((a2 + a1 + ((v2 + 339437257) & 0xEBC49477 ^ 0xF031369F) < 8) * (v2 - 2246)) ^ v2)))();
}

uint64_t sub_10003272C()
{
  int v4 = 460628867 * ((2120966109 - ((v3 - 192) | 0x7E6B5FDD) + ((v3 - 192) | 0x8194A022)) ^ 0xCD02225F);
  *(void *)(v3 - 144) = STACK[0x268];
  *(void *)(v3 - 192) = STACK[0x278];
  *(void *)(v3 - 152) = STACK[0x270];
  *(void *)(v3 - 160) = STACK[0x280];
  *(_DWORD *)(v3 - 164) = v0 - v4 + 488;
  *(_DWORD *)(v3 - 184) = v1 + v4 + ((v0 - 1845084404) & 0x6DF9C3BF ^ 0xA236977C);
  *(void *)(v3 - 176) = STACK[0x2B0];
  (*(void (**)(uint64_t))(v2 + 8 * (v0 + 2339)))(v3 - 192);
  return (*(uint64_t (**)(uint64_t, __n128))(v2 + 8 * ((1345 * (*(_DWORD *)(v3 - 168) == -563355418)) ^ v0)))(48, (__n128)0);
}

uint64_t sub_100032844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  void *v10 = a1;
  *uint64_t v11 = (v5 + a5 - 124 - 525) ^ v13;
  int v9 = a5 - 276;
  uint64_t v16 = v12;
  unsigned int v15 = (a5 - 468) ^ (((&v15 & 0x5AEC8B8A | ~(&v15 | 0x5AEC8B8A)) ^ 0x76B1267F) * v6);
  (*(void (**)(unsigned int *))(v7 + 8 * (a5 + 1686)))(&v15);
  uint64_t v16 = v14;
  unsigned int v15 = (v9 - 192) ^ ((&v15 ^ 0xD3A2520A) * v6);
  (*(void (**)(unsigned int *))(v7 + 8 * (v9 ^ 0x86A)))(&v15);
  return 0;
}

uint64_t sub_100032960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16, uint64_t a17)
{
  a17 = v17;
  a13 = 0x3B842D404CB6A8ACLL;
  a14 = a10;
  a16 = v21
      + 1178560073 * ((2 * (&a13 & 0xE19D760) - &a13 - 236574567) ^ 0x16D30AF1)
      + v18
      - 469;
  (*(void (**)(uint64_t *))(v19 + 8 * (v18 ^ (v20 + 29))))(&a13);
  a13 = a10;
  LODWORD(a14) = v21
               - 241568881 * ((2 * (&a13 & 0x242697B0) - &a13 - 606508978) ^ 0xDC86C0C)
               + v18
               - 61;
  (*(void (**)(uint64_t *))(v19 + 8 * (v18 + v21 + 1719)))(&a13);
  a14 = a10;
  LODWORD(a13) = (v18 + v21 - 533) ^ (69008221
                                    * ((2 * (&a13 & 0x7906D9E0) - &a13 + 116991516) ^ 0xD55B7416));
  (*(void (**)(uint64_t *))(v19 + 8 * (v18 ^ v20)))(&a13);
  LODWORD(a13) = (v18 + v21 - 533) ^ (69008221
                                    * ((((2 * &a13) | 0x85777BEA) - &a13 - 1119600117) ^ 0x9119EFFF));
  a14 = a12;
  uint64_t v22 = (*(uint64_t (**)(uint64_t *))(v19 + 8 * ((v18 + v21) ^ 0xBD5)))(&a13);
  return sub_10003FBF8(v22);
}

uint64_t sub_1000329E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  int v12 = (a7 | 0x81DA88A) + a5;
  uint64_t v13 = a4 + ((v12 | 0x430) ^ v9);
  long long v14 = *(_OWORD *)(v8 + v13 - 15);
  long long v15 = *(_OWORD *)(v8 + v13 - 31);
  uint64_t v16 = v10 + v13;
  *(_OWORD *)(v16 - 15) = v14;
  *(_OWORD *)(v16 - 31) = v15;
  return (*(uint64_t (**)(void))(v7 + 8 * ((1117 * ((v11 & 0xFFFFFFE0) == 32)) ^ (v12 + 105))))();
}

uint64_t sub_100032A48()
{
  uint64_t v4 = (*(uint64_t (**)(void))(v1 + 8 * (v0 ^ 0xA5B)))();
  LODWORD(STACK[0x54C]) = v2;
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * ((((v0 ^ 0xBEE) - 2188) * v3) ^ (v0 + 1200))))(v4);
}

uint64_t sub_100032A98()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((v1 + v2 - 2078011391 < 29 * (v0 ^ 0x27Cu) - 452) * (((v0 - 611) | 0x846) ^ 0x8B4)) ^ v0)))();
}

uint64_t sub_100032AFC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v5 + 96) + 1428) = 136246120;
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((*(_DWORD *)(a2 + 4) == ((v3 + 1742773441) & 0x981F645B ^ (v2 + 985)))
                                * (((v3 - 827) | 0x16C) - 175)) ^ v3)))();
}

uint64_t sub_100032B70(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + v2 - 1) = ((v4 + 1 + v5) ^ v6) * (v4 + 31);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8 * (((v2 != 1) * (int)a1) ^ v3)))(a1, a2);
}

uint64_t sub_100032B78(int a1, char a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  *(_DWORD *)(v63 - 152) = v56;
  *(void *)(v63 - 128) = v62 - 7;
  *(void *)(v63 - 120) = v57 - 7;
  *(_DWORD *)(v63 - 140) = a1 & 0xFFFFFFF8;
  *(_DWORD *)(v63 - 136) = a1;
  *(_DWORD *)(v63 - 132) = 8 - (a1 & 0xFFFFFFF8);
  int v64 = -a6;
  char v65 = a2 + a4 + a3;
  uint64_t v66 = (a5 + a4 + a3 + 1046 + v64);
  v68.val[0].i64[0] = ((_BYTE)a5 + (_BYTE)a4 + (_BYTE)a3 + 22 + (_BYTE)v64) & 0xF;
  v68.val[0].i64[1] = (v65 + 10 + (_BYTE)v64) & 0xF;
  v68.val[1].i64[0] = (v65 + 9 + (_BYTE)v64) & 0xF;
  v68.val[1].i64[1] = (v65 + 8 + (_BYTE)v64) & 0xF;
  v68.val[2].i64[0] = (v65 + 7 + (_BYTE)v64) & 0xF;
  v68.val[2].i64[1] = (v65 + 6 + (_BYTE)v64) & 0xF;
  v68.val[3].i64[0] = (v61 + (_BYTE)v64 + (a7 ^ 0xA3)) & 0xF;
  v68.val[3].i64[1] = (v65 + 4 + (_BYTE)v64) & 0xF;
  *(int8x8_t *)(*(void *)(v63 - 128) + v66) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v58 + (v66 & 0xF) - 7), *(int8x8_t *)(*(void *)(v63 - 120) + v66)), veor_s8(*(int8x8_t *)(v60 + (v66 & 0xF) - 7), *(int8x8_t *)((v66 & 0xF) + v59 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v68, (int8x16_t)xmmword_10016DEE0), (int8x8_t)0x1717171717171717)));
  return (*(uint64_t (**)(__n128))(a56 + 8 * ((1320 * (*(_DWORD *)(v63 - 132) == v64)) ^ a7)))((__n128)xmmword_10016DEE0);
}

uint64_t sub_100032CC8@<X0>(int a1@<W8>)
{
  *(unsigned char *)(*v1 + (v2 + v7)) = *(unsigned char *)(*v1 + (v7 + v5));
  return (*(uint64_t (**)(void))(v8 + 8 * (((v3 + v7 - 2335 == v4) * v6) | a1)))();
}

uint64_t sub_100032D04(uint64_t a1, uint64_t a2)
{
  STACK[0x328] = *(void *)(v2 + 8 * (v3 - 768));
  return sub_100073680(a1, a2, 1062661589, 44);
}

uint64_t sub_100032D28()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((31 * ((v2 ^ 0x2C1u) + 1477247277 + v1 + v0 - 813 < 8)) ^ v2)))();
}

uint64_t sub_100032D74(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((((a6 + v7 + 1319) > 0xFFFFFFFA) * ((((a3 - 57) | 0x34) + 1152) ^ 0x484)) | (a3 + 2126))))();
}

uint64_t sub_100032DBC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((a2 + v7 - 343 == (((a6 ^ 0x114) + 212) ^ 0xCF)) * ((13 * (a6 ^ 0x114)) ^ 0x4CE)) ^ a6)))();
}

uint64_t sub_100032E08@<X0>(int a1@<W1>, int a2@<W8>, int8x16_t a3@<Q0>, int8x16_t a4@<Q4>)
{
  int8x16_t *v5 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v6 + (v4 + a1)), vandq_s8(vaddq_s8(*(int8x16_t *)(v6 + (v4 + a1)), *(int8x16_t *)(v6 + (v4 + a1))), a4)), a3);
  return (*(uint64_t (**)(void))(v7 + 8 * ((v8 + a2 - 844) ^ 0xE)))();
}

uint64_t sub_100032E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9
                              + 8 * (((((v7 - 8392873) & 0x4BE7FE43) + ((v7 - 1064) ^ (a7 + 216))) * (v8 == a1)) ^ v7)))();
}

uint64_t sub_100032EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return (*(uint64_t (**)(void))(v8
                              + 8 * ((2035 * ((a8 & 0xFFFFFFF0) == ((((a7 - 5) | 0x505) + 288) ^ 0x6BF57757))) ^ a7)))();
}

uint64_t sub_100032EE8()
{
  uint64_t v5 = (v1 + 2102064947) & 0x82B504DB;
  if (v0 <= 0x30) {
    uint64_t v6 = 48;
  }
  else {
    uint64_t v6 = v0;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * (int)((2523 * ((unint64_t)(v2 + v6 + v5 - 218 + v4) < 0x40)) ^ v5)))();
}

uint64_t sub_100032FF4()
{
  int v6 = *(unsigned __int8 *)(*(void *)(v1 + 32) + v0 - 0x6F104D712713834CLL)
     - *(unsigned __int8 *)(v5 + v0 - 0x6F104D712713834CLL);
  uint64_t v7 = v0 + 1;
  BOOL v9 = (v6 ^ 0x6BAB7F5F) - 671091477 + ((2 * v6) & 0xD756FEBE) != 1135309898 || v7 == ((v4 - 377) | 0x29) + v2;
  return (*(uint64_t (**)(void))(v3 + 8 * ((28 * v9) ^ v4)))();
}

uint64_t sub_100033080@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                                           + 8
                                           * (((((2 * v1) ^ 0x186) - 1756)
                                             * ((a1 + v2 + 1814) < 0x7FFFFFFF)) ^ v1)))(((v1 - 227976148) & 0xD96A5EF ^ 0xFFFFFA94) + v2);
}

uint64_t sub_1000330D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14)
{
  *(_DWORD *)(a10 - 0x5693A2FF918C2410) = 1569729929 - v14;
  int v19 = 831981571 * ((((v18 - 136) | 0x1D8DD29A) - (v18 - 136) + ((v18 - 136) & 0xE2722D60)) ^ 0x842C02BE);
  *(void *)(v18 - 136) = v15;
  *(_DWORD *)(v18 - 128) = v17 - v19 - 563;
  *(_DWORD *)(v18 - 124) = v19 + 517764793;
  (*(void (**)(uint64_t))(v16 + 8 * (v17 | 0x15E)))(v18 - 136);
  int v20 = 3804331 * (((v18 - 136) & 0xBBAC2B3F | ~((v18 - 136) | 0xBBAC2B3F)) ^ 0x3A86F136);
  *(_DWORD *)(v18 - 128) = v20 + v17 + 72;
  *(_DWORD *)(v18 - 124) = ((a13 << 6) & 0x9FFFEDC0)
                         - v20
                         + 988672000
                         + ((a13 << (((v17 - 16) | 0x28) ^ 0x3C)) ^ 0xCFFFF6F1);
  *(void *)(v18 - 136) = v15;
  (*(void (**)(uint64_t))(v16 + 8 * (int)(v17 + 363)))(v18 - 136);
  *(_DWORD *)(v18 - 128) = v17
                         + 831981571 * (((v18 - 136) & 0x2C0498D9 | ~((v18 - 136) | 0x2C0498D9)) ^ 0x4A5AB702)
                         - 408;
  *(void *)(v18 - 136) = a14;
  *(void *)(v18 - 120) = &STACK[0x5E8E72AB319E42B9];
  (*(void (**)(uint64_t))(v16 + 8 * (v17 ^ 0x147)))(v18 - 136);
  *(_DWORD *)(v18 - 112) = (v17 - 971) ^ (69008221
                                        * (((v18 - 136) & 0xDFB6986 | ~((v18 - 136) | 0xDFB6986)) ^ 0x21A6C473));
  *(void *)(v18 - 136) = v15;
  *(void *)(v18 - 120) = a14;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v16 + 8 * (int)(v17 + 310)))(v18 - 136);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((90 * (*(_DWORD *)(v18 - 128) > 0x74F05479u)) | v17)))(v21);
}

uint64_t sub_10003332C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = STACK[0x260] & 0x13F819FA;
  int v7 = STACK[0x374];
  LODWORD(STACK[0x3D4]) = LODWORD(STACK[0x374]) + ((v6 - 2107) ^ 0xF5) - 162;
  unsigned int v8 = LODWORD(STACK[0x594]) + 465802555;
  BOOL v9 = v7 - 208648310 > v8;
  if ((v7 - 208648310) < 0x67BC6544 != v8 < 0x67BC6544) {
    BOOL v9 = (v7 - 208648310) < 0x67BC6544;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                                         + 8
                                                                                         * ((4 * v9) | (8 * v9) | v6)))(a1, a2, a3, a4, a5, 3037000498);
}

uint64_t sub_1000333C0@<X0>(int a1@<W1>, unsigned int a2@<W2>, char a3@<W3>, char a4@<W6>, uint64_t a5@<X8>)
{
  unsigned int v9 = (v6 + 877714065) & 0xCBAF22CB;
  unint64_t v10 = STACK[0x358];
  int v11 = *(_DWORD *)(a5 - 0xB999BAB1C51203BLL + 4 * ((a1 + 1110362572) >> (((v9 + a3) & a4) - 44)));
  *(unsigned char *)(v10 + (a1 + 1110362572)) = (v7 ^ HIBYTE(v11)) - ((2 * (v7 ^ HIBYTE(v11))) & 0xEF) + 119;
  *(unsigned char *)(v10 + (a1 + 1110362573)) = (BYTE2(v11) ^ 0x43) - ((2 * (BYTE2(v11) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(v10 + (a1 + 1110362574)) = (BYTE1(v11) ^ 0xA1) - ((2 * (BYTE1(v11) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(v10 + (a1 + 1110362575)) = v11 ^ 0xB2;
  unsigned int v12 = *v5 - 1351850628;
  BOOL v13 = v12 < a2;
  BOOL v14 = v12 > 0x84DC322;
  if (a2 > 0x84DC322 != v13) {
    BOOL v14 = v13;
  }
  return (*(uint64_t (**)(void))(v8 + 8 * (int)((3027 * v14) ^ v9)))();
}

uint64_t sub_1000334D0()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (((2 * (STACK[0x4A0] != 0)) | (4 * (STACK[0x4A0] != 0))) ^ (v1 + 196))))();
}

uint64_t sub_1000334F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  return (*(uint64_t (**)(void))(v28
                              + 8
                              * ((((unint64_t)(&a25 + a14 + v25 + ((v27 + 280) ^ (v26 + 2571))) < 0x10)
                                * ((13 * (v27 ^ 0x4EE)) ^ 0x768)) ^ v27)))();
}

uint64_t sub_10003354C(int a1)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((992 * (v2 + v1 + 1477247021 >= (((a1 + 421) | 4) ^ 0x3ADu))) ^ a1)))();
}

uint64_t sub_1000335B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  LODWORD(a12) = a2;
  return sub_100054E50(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_1000335C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v29 - 144) = a25;
  *(void *)(v29 - 136) = a23;
  *(void *)(v29 - 128) = a23;
  *(void *)(v29 - 112) = v27;
  *(_DWORD *)(v29 - 120) = v25
                         + 127
                         + 69008221 * ((~((v29 - 144) | 0xBBD811F3) + ((v29 - 144) & 0xBBD811F3)) ^ 0x9785BC06);
  (*(void (**)(uint64_t))(v26 + 8 * (v25 + 1140)))(v29 - 144);
  *(void *)(v29 - 136) = a23;
  *(void *)(v29 - 128) = a23;
  *(void *)(v29 - 112) = v27;
  *(void *)(v29 - 144) = a25;
  *(_DWORD *)(v29 - 120) = v25
                         + 127
                         + 69008221
                         * ((((v29 - 144) | 0x72FD70B0) - (v29 - 144) + ((v29 - 144) & 0x8D028F48)) ^ 0xA15F22BA);
  (*(void (**)(uint64_t))(v26 + 8 * (v25 + 1140)))(v29 - 144);
  int v30 = 2078219279 * ((-1280682396 - ((v29 - 144) | 0xB3AA5664) + ((v29 - 144) | 0x4C55A99B)) ^ 0x96AF3FEF);
  *(_DWORD *)(v29 - 140) = -1131453697 - v30 + v28 + 1;
  *(_DWORD *)(v29 - 128) = (v25 + 513) ^ v30;
  *(void *)(v29 - 136) = a24;
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(v26 + 8 * (v25 + 1156)))(v29 - 144);
  return (*(uint64_t (**)(uint64_t))(v26
                                            + 8
                                            * ((484
                                              * (((v25 + 23) ^ (*(_DWORD *)(v29 - 144) == -56550210)) & 1)) ^ v25)))(v31);
}

uint64_t sub_100033754@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  *(unsigned char *)(a1 + (a2 - 941042785)) = *(unsigned char *)(v5 + (a2 - 941042785)) ^ 0x77;
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((28 * (((a3 ^ (v4 + 10)) ^ (a2 - 1 == a4)) & 1)) ^ (v6 + a3 + 683))))();
}

uint64_t sub_1000337A8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (int)(((v1 + 22 + ((v1 + 1588156896) & 0xA156A3F3) - 948) * (v0 > 0)) ^ v1)))();
}

uint64_t sub_100033810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  STACK[0x460] = *(void *)(v10 + 8 * v9);
  return sub_10003BEF4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100033844(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  int v40 = v37 + v38;
  unsigned int v41 = v37 + v38 + 469835780;
  if (v41 <= 0x40) {
    unsigned int v41 = 64;
  }
  BOOL v42 = __CFADD__(v40 + (((v36 - 1952) | 0x5C6) ^ 0x1C0125DC), a2 - 469837757 + a36 + v41 + 1977);
  return (*(uint64_t (**)(void))(v39 + 8 * ((95 * v42) ^ v36)))();
}

void sub_1000338C0(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X9, X17 }
}

uint64_t sub_100033934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v67 = v64 ^ 0x3A1;
  uint64_t v68 = *(void *)(v66 + 8 * (v64 - 981)) - 8;
  uint64_t v69 = *(void *)(v66 + 8 * (v64 ^ 0x446)) - 4;
  uint64_t v70 = *(void *)(v66 + 8 * (v64 ^ 0x420)) - 4;
  char v71 = *(unsigned char *)(v70 + (v63[14] ^ ((v64 ^ 0xA1) - 89)));
  char v72 = *(unsigned char *)(v70 + (v63[10] ^ 0xCBLL));
  uint64_t v73 = *(void *)(v66 + 8 * (v64 ^ 0x478)) - 12;
  unsigned int v74 = *(unsigned __int8 *)(v73 + (v63[1] ^ 0x1ALL));
  int v75 = (v74 >> 1) ^ (((((v74 ^ 0x48) + (v74 & 0xD5 ^ 0xBF) + 1) ^ v74 & 0xDF) & 0xF0) >> 4) ^ 0x47;
  int v76 = ((v63[3] ^ 0xB8) + *(unsigned char *)(v68 + (v63[3] ^ 0x54)) - 46) | ((v74 ^ 9 ^ (v75 + (~(2 * v75) | 0xFB) - 125)) << 16);
  LOBYTE(v74) = *(unsigned char *)(v70 + (v63[6] ^ 0x2ELL));
  int v77 = (((*(unsigned __int8 *)(v69 + (v63[8] ^ 0x65)) + (v63[8] ^ 0x34) - 117) ^ 0xF5) << 24) | (((v72 ^ (16 * v72)) ^ 0x4E) << 8) | ((v63[11] ^ 0x3E) + *(unsigned char *)(v68 + (v63[11] ^ 0xD2)) - 46);
  unsigned int v78 = *(unsigned __int8 *)(v73 + (v63[13] ^ 0x5BLL));
  int v79 = ((v63[7] ^ 0x90) + *(unsigned char *)(v68 + (v63[7] ^ 0x7CLL)) - 46) | ((((v63[4] ^ 0x13)
                                                                                         + *(unsigned __int8 *)(v69 + (v63[4] ^ 0x42))
                                                                                         - 117) ^ 0xE6) << 24) | (((v74 ^ (16 * v74)) ^ 0x52) << 8);
  unsigned int v80 = (((v78 >> 4) ^ (v78 >> 1) ^ 0x47) + (~(2 * ((v78 >> 4) ^ (v78 >> 1) ^ 0x47)) | 0xFFFFFFC5) - 98) ^ v78;
  int v81 = (((v71 ^ (16 * v71)) ^ 0x82) << 8) | ((v80 - ((2 * v80) & 0x2E) + 23) << 16);
  LOBYTE(v80) = *(unsigned char *)(v73 + (v63[5] ^ 0xEDLL));
  int v82 = ((v80 ^ 0x9D) >> 4) ^ ((v80 ^ 0x9D) >> 1);
  LOBYTE(v80) = v80 ^ 0x6C ^ (v82 - ((2 * v82) & 0xBC) - 34);
  unsigned int v83 = *(unsigned __int8 *)(v73 + (v63[9] ^ 0x38));
  uint64_t v333 = v69;
  uint64_t v334 = v68;
  uint64_t v332 = v70;
  unsigned int v84 = v76 & 0xFFFF00FF | (((*(unsigned __int8 *)(v69 + (*v63 ^ 0x81)) + (*v63 ^ 0xD0) - 117) ^ 0x3C) << 24) | (((*(unsigned char *)(v70 + (v63[2] ^ 0x22)) ^ (16 * *(unsigned char *)(v70 + (v63[2] ^ 0x22)))) ^ 0x7C) << 8);
  LODWORD(STACK[0x2C8]) = (v81 & 0xFFFFFF00 | ((((v63[12] ^ 0x13) + *(unsigned __int8 *)(v69 + (v63[12] ^ 0x42)) - 117) ^ 0xE6) << 24) | (*(unsigned char *)(v68 + (v63[15] ^ 0x38)) + (v63[15] ^ 0xD4) - 46)) ^ 0x71B038AF;
  LODWORD(STACK[0x2A8]) = v84 ^ 0x43F817AC;
  LODWORD(STACK[0x2A0]) = (v79 & 0xFF00FFFF | (v80 << 16)) ^ 0x6F25ED1;
  LODWORD(STACK[0x2C0]) = (v77 & 0xFF00FFFF | (((v83 ^ (((v83 >> 4) ^ (v83 >> 1) ^ 0x47)
                                                                       - ((2 * ((v83 >> 4) ^ (v83 >> 1) ^ 0x47)) & 0x8C)
                                                                       - 58)) ^ 0xF0) << 16)) ^ 0x5E8B1198;
  uint64_t v330 = (unsigned char *)STACK[0x568];
  uint64_t v331 = (unsigned __int8 *)STACK[0x570];
  STACK[0x288] = 14;
  uint64_t v85 = v70;
  unsigned int v86 = *(unsigned __int8 *)(v70 + (v331[14] ^ 0xD9));
  HIDWORD(v340) = v67 - 865;
  unint64_t v87 = ((v67 - 865) ^ 0xFFFFFB85) & 0x3C355D3D ^ 0x3C355D3D;
  STACK[0x200] = v87;
  HIDWORD(a17) = (v67 - 1560840450) & 0x5D08873B;
  uint64_t v88 = v331[v87];
  int v89 = (((HIDWORD(a17) - 9) ^ (16 * v86)) - (v86 >> 1 << 6) - 31) ^ v86;
  LOBYTE(v86) = v88 ^ 0xB7;
  char v90 = *(unsigned char *)(v69 + (v88 ^ 0xE6));
  STACK[0x298] = 15;
  int v91 = v331[15];
  unsigned __int8 v92 = v90 + v86 - 117;
  if ((v91 & 0x20) != 0) {
    int v93 = -32;
  }
  else {
    int v93 = 32;
  }
  uint64_t v94 = (v93 + v91);
  int v95 = *(unsigned __int8 *)(v68 + (v94 ^ 0xDD));
  STACK[0x260] = 6;
  int v349 = v95 + (v94 ^ 0x31);
  LODWORD(v94) = *(unsigned __int8 *)(v70 + (v331[6] ^ 0x51));
  STACK[0x220] = 12;
  HIDWORD(v96) = v94 ^ (((16 * v94) ^ 0x10) - (v94 >> 1 << 6) - 31) ^ 0x3F;
  LODWORD(v96) = BYTE4(v96) & 0xF8;
  unint64_t v97 = ((v96 >> 3) | ((unint64_t)(v92 ^ 0xE5u) << 13)) ^ 0x58F620A6;
  unsigned int v98 = (v97 >> 21) | (v97 << 11);
  int v348 = *(unsigned __int8 *)(v69 + (v331[12] ^ 0xF7) - 2 * ((v331[12] ^ 0xFFFFFFE7) & 0xAE) + 174) + (v331[12] ^ 8);
  uint64_t v99 = *v331;
  STACK[0x240] = 3;
  uint64_t v100 = v331[3];
  int v101 = *(unsigned __int8 *)(v69 + (v99 ^ 0xD8)) + (v99 ^ 0x76) - 2 * (v99 ^ 0x76);
  STACK[0x250] = 8;
  int v346 = (v100 ^ 0xFFFFFFBB) + *(unsigned __int8 *)(v68 + (v100 ^ 0x57));
  LOBYTE(v99) = (v331[8] ^ 0xA7) + *(unsigned char *)(v69 + (v331[8] ^ 0xF6));
  STACK[0x238] = 7;
  uint64_t v102 = v331[7];
  char v345 = v99 - ((2 * v99 + 22) & 0x4E);
  LOBYTE(v100) = v102 ^ 0xE9;
  LOBYTE(v99) = *(unsigned char *)(v68 + (v102 ^ 5));
  LODWORD(v102) = *(unsigned __int8 *)(v73 + (v331[13] ^ 0x12));
  LOBYTE(v99) = v100 + v99;
  LODWORD(v100) = ((unint64_t)((v102 >> 3) & 0xFFFFFFFB ^ v102 & 0x5A | (v102 >> 3) & 4 ^ v102 & 0xA4) >> 1) ^ 0x47;
  unsigned __int8 v103 = v102 ^ 0xA1 ^ (v100 - ((2 * v100) & 0xC4) - 30);
  LOBYTE(v100) = *(unsigned char *)(v73 + (v331[5] ^ 0x9CLL));
  int v104 = ((v100 ^ 0x9D) >> 4) ^ ((v100 ^ 0x9D) >> 1);
  int v105 = (v99 - 46) | ((v100 ^ 0xE6 ^ (v104 - ((2 * v104) & 0xBC) - 34)) << 16);
  unsigned int v106 = *(unsigned __int8 *)(v73 + (v331[9] ^ 0x76));
  LODWORD(v100) = v106 & 8 ^ 0xFFFFFFD9;
  int v107 = v67;
  BOOL v108 = ((v100 + 15) & (v106 >> 3)) == 0;
  char v109 = v100 + 112;
  char v110 = 18 - v100;
  if (v108) {
    char v110 = v109;
  }
  int v111 = ((((((v106 >> 3) ^ 0x13) + v110 - 65) ^ v106 & 0xF7) & 0xFE) >> 1) ^ 0x4A;
  unsigned __int8 v343 = v106 ^ (v111 - ((2 * v111) & 0xC0) + 96);
  int v112 = *(unsigned __int8 *)(v73 + (v331[1] ^ 0xCFLL));
  unsigned int v113 = ((v112 | 0xFFFFFFBF) + 68) ^ v112 & 0xFFFFFFBF;
  int v114 = (v113 >> 4) ^ (v113 >> 1) ^ 0x46;
  char v115 = *(unsigned char *)(v70 + (v331[10] ^ 0xFBLL));
  unsigned int v116 = (v114 - ((2 * v114) & 0xCCCCCCCC) + 102) ^ v113;
  int v117 = v107;
  HIDWORD(v350) = v107;
  uint64_t v118 = *(void *)(v66 + 8 * (v107 - 1903)) - 4;
  LODWORD(v340) = v103;
  int v119 = *(_DWORD *)(v118 + 4 * (v103 ^ 0xABu));
  uint64_t v120 = *(void *)(v66 + 8 * (v117 - 1847)) - 4;
  LODWORD(v338) = (v115 ^ (16 * v115)) ^ 0x48;
  int v121 = *(_DWORD *)(v120 + 4 * ((v115 ^ (16 * v115)) ^ 0xC7u));
  HIDWORD(v122) = v121 ^ 0xF930;
  LODWORD(v122) = v121 ^ 0x17560000;
  HIDWORD(v338) = v101 - 118;
  uint64_t v123 = *(void *)(v66 + 8 * (v117 ^ 0x7F0)) - 8;
  int v124 = (v122 >> 16) ^ *(_DWORD *)(v123 + 4 * ((v101 - 118) ^ 0xF9u)) ^ (16 * (v119 ^ 0xA0F4B4B0)
                                                                                           + 1759093154
                                                                                           - ((32 * (v119 ^ 0xA0F4B4B0)) & 0xD1B34340));
  int v125 = v105 ^ v98;
  uint64_t v126 = *(void *)(v66 + 8 * (v117 ^ 0x7C9));
  int v127 = *(_DWORD *)(v126 + 4 * ((v105 ^ v98) ^ 0x78u)) ^ v119;
  LODWORD(v341) = v89;
  int v128 = *(_DWORD *)(v120 + 4 * (v89 ^ 0x71u));
  unsigned int v129 = v127 ^ (v124 - 970714929 - ((2 * v124) & 0x8C48219E));
  HIDWORD(v122) = v128 ^ 0xF930;
  LODWORD(v122) = v128 ^ 0x17560000;
  HIDWORD(v339) = v116;
  unsigned int v130 = *(_DWORD *)(v118 + 4 * (v116 ^ 0x47u)) ^ 0xA0F4B4B0;
  int v131 = (v122 >> 16) ^ (16 * v130 + 1759093154 - ((32 * v130) & 0xD1B34340)) ^ *(_DWORD *)(v123
                                                                                          + 4 * (HIBYTE(v98) ^ 0xDD));
  HIDWORD(v337) = (*(unsigned char *)(v68 + (v331[11] ^ 0x12)) + (v331[11] ^ 0xFE) - 46);
  unsigned int v132 = *(_DWORD *)(v126 + 4 * (HIDWORD(v337) ^ 0xB9u)) ^ v130 ^ (v131 - 970714929 - ((2 * v131) & 0x8C48219E));
  int v133 = *(unsigned __int8 *)(v85 + (v331[2] ^ 0x26)) ^ 0x59;
  int v134 = v133 ^ (16 * v133);
  LODWORD(v339) = v125;
  unsigned int v135 = *(_DWORD *)(v118 + 4 * (BYTE2(v125) ^ 3u)) ^ 0xA0F4B4B0;
  LODWORD(v337) = v134;
  int v136 = *(_DWORD *)(v120 + 4 * (v134 ^ 0xFBu));
  HIDWORD(v122) = v136 ^ 0xF930;
  LODWORD(v122) = v136 ^ 0x17560000;
  LODWORD(v336) = (v345 - 78);
  int v137 = (v122 >> 16) ^ *(_DWORD *)(v123 + 4 * (v336 ^ 0x40)) ^ (16 * v135
                                                                               + 1759093154
                                                                               - ((32 * v135) & 0xD1B34340));
  HIDWORD(v336) = v349 - 46;
  unsigned int v138 = *(_DWORD *)(v126 + 4 * ((v349 - 46) ^ 0xEBu)) ^ v135 ^ (v137
                                                                                  - 970714929
                                                                                  - ((2 * v137) & 0x8C48219E));
  LODWORD(v335) = v343 ^ 0xF8;
  int v139 = *(_DWORD *)(v118 + 4 * (v343 ^ 0x81u));
  int v140 = *(_DWORD *)(v120 + 4 * (BYTE1(v98) ^ 0x31u));
  HIDWORD(v122) = v140 ^ 0xF930;
  LODWORD(v122) = v140 ^ 0x17560000;
  HIDWORD(v335) = v348 - 117;
  int v141 = (v122 >> 16) ^ *(_DWORD *)(v123 + 4 * ((v348 - 117) ^ 0xF7u)) ^ (16 * (v139 ^ 0xA0F4B4B0)
                                                                                           + 1759093154
                                                                                           - ((32 * (v139 ^ 0xA0F4B4B0)) & 0xD1B34340));
  HIDWORD(a32) = v346 - 46;
  unsigned int v142 = *(_DWORD *)(v126 + 4 * ((v346 - 46) ^ 0x33u)) ^ v139 ^ (v141
                                                                                  - 970714929
                                                                                  - ((2 * v141) & 0x8C48219E));
  int v143 = *(_DWORD *)(v120 + 4 * (BYTE1(v138) ^ 0xF4u));
  HIDWORD(v122) = v143 ^ 0xF930;
  LODWORD(v122) = v143 ^ 0x17560000;
  unsigned int v144 = *(_DWORD *)(v118 + 4 * (BYTE2(v142) ^ 0x4Fu)) ^ 0xA0F4B4B0;
  unsigned int v145 = v144 ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v129) ^ 0xF7)) ^ *(_DWORD *)(v126
                                                                            + 4 * (v132 ^ 0xDBu)) ^ (16 * v144 + 1759093154 - ((32 * v144) & 0xD1B34340)) ^ (v122 >> 16);
  int v146 = *(_DWORD *)(v118 + 4 * (BYTE2(v129) ^ 0x18u));
  int v147 = *(_DWORD *)(v120 + 4 * ((unsigned __int16)(v142 ^ 0xB69E) >> 8));
  HIDWORD(v122) = v147 ^ 0xF930;
  LODWORD(v122) = v147 ^ 0x17560000;
  int v148 = (16 * (v146 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v146 ^ 0xA0F4B4B0)) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v132) ^ 0xF)) ^ (v122 >> 16);
  unsigned int v149 = *(_DWORD *)(v126 + 4 * (v138 ^ 0x80u)) ^ v146 ^ (v148 - 970714929 - ((2 * v148) & 0x8C48219E));
  unsigned int v150 = *(_DWORD *)(v118 + 4 * (BYTE2(v132) ^ 0xD6u)) ^ 0xA0F4B4B0;
  unsigned int v151 = (16 * v150 + 1759093154 - ((32 * v150) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v138) ^ 0x19));
  int v152 = *(_DWORD *)(v120 + 4 * (BYTE1(v129) ^ 0x52u));
  HIDWORD(v122) = v152 ^ 0xF930;
  LODWORD(v122) = v152 ^ 0x17560000;
  unsigned int v153 = *(_DWORD *)(v126 + 4 * (v142 ^ 0x9Eu)) ^ v150 ^ (v122 >> 16) ^ (v151
                                                                                          - 970714928
                                                                                          + ~((2 * v151) & 0x8C48219E));
  int v154 = *(_DWORD *)(v118 + 4 * (BYTE2(v138) ^ 0x32u));
  int v155 = *(_DWORD *)(v120 + 4 * (BYTE1(v132) ^ 0xADu));
  HIDWORD(v122) = v155 ^ 0xF930;
  LODWORD(v122) = v155 ^ 0x17560000;
  int v156 = (v122 >> 16) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v142) ^ 0x1D)) ^ (16 * (v154 ^ 0xA0F4B4B0)
                                                                         + 1759093154
                                                                         - ((32 * (v154 ^ 0xA0F4B4B0)) & 0xD1B34340));
  unsigned int v157 = v154 ^ *(_DWORD *)(v126 + 4 * (v129 ^ 0x10u)) ^ 0xD13D6274 ^ (v156
                                                                                        - 970714929
                                                                                        - ((2 * v156) & 0x8C48219E));
  unsigned int v158 = v157
       - ((2 * v157) & 0x5F186BF6)
       + 797718011
       - ((2 * (v157 - ((2 * v157) & 0x5F186BF6) + 797718011)) & 0x60EECA6)
       + 50820691;
  int v159 = *(_DWORD *)(v118 + 4 * (BYTE2(v158) ^ 0xC4u));
  int v160 = *(_DWORD *)(v120 + 4 * (BYTE1(v153) ^ 0xDFu));
  unsigned int v161 = (16 * (v159 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v159 ^ 0xA0F4B4B0)) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v145) ^ 0x50)) ^ (((v160 ^ 0x1756F930u) >> (v145 & 0x10) >> (v145 & 0x10 ^ 0x10)) + ((v160 << 16) ^ 0xF9300000));
  unsigned int v162 = *(_DWORD *)(v126 + 4 * (v149 ^ 0x69u)) ^ v159 ^ (v161 - 970714929 - ((2 * v161) & 0x8C48219E));
  LOWORD(v161) = v145 ^ 0xC60B;
  unsigned int v163 = *(_DWORD *)(v118 + 4 * (((v145 ^ 0xB7EDC60B) >> 16) ^ 0x93u)) ^ 0xA0F4B4B0;
  int v164 = *(_DWORD *)(v120 + 4 * (BYTE1(v158) ^ 0xE5u));
  HIDWORD(v122) = v164 ^ 0xF930;
  LODWORD(v122) = v164 ^ 0x17560000;
  int v165 = (16 * v163 + 1759093154 - ((32 * v163) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v149) ^ 0xEB)) ^ (v122 >> 16);
  unsigned int v166 = *(_DWORD *)(v126 + 4 * (v153 ^ 0xF9u)) ^ v163 ^ (v165 - 970714929 - ((2 * v165) & 0x8C48219E));
  int v167 = *(_DWORD *)(v123 + 4 * (HIBYTE(v153) ^ 5));
  HIDWORD(v122) = v167 ^ 0x1A2;
  LODWORD(v122) = v167 ^ 0x68D9A000;
  int v168 = v122 >> 10;
  int v169 = *(_DWORD *)(v120 + 4 * (BYTE1(v161) ^ 2u));
  HIDWORD(v122) = v169 ^ 0xF930;
  LODWORD(v122) = v169 ^ 0x17560000;
  unsigned int v170 = *(_DWORD *)(v118 + 4 * (BYTE2(v149) ^ 0xC1u)) ^ 0xA0F4B4B0;
  unsigned int v171 = ((v168 ^ 0x25EB099C) << 10) ^ (16 * v170) ^ ((v168 ^ 0x25EB099Cu) >> 22);
  int v172 = *(_DWORD *)(v126 + 4 * (v158 ^ 0x60u)) ^ v170 ^ (v122 >> 16);
  int v173 = *(_DWORD *)(v120 + 4 * (BYTE1(v149) ^ 0x79u));
  HIDWORD(v122) = v173 ^ 0xF930;
  LODWORD(v122) = v173 ^ 0x17560000;
  unsigned int v174 = v172 ^ (v171 - 970714929 - ((2 * v171) & 0x8C48219E));
  int v175 = *(_DWORD *)(v118 + 4 * (BYTE2(v153) ^ 0xEBu));
  int v176 = (v122 >> 16) ^ (16 * (v175 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v175 ^ 0xA0F4B4B0)) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v158) ^ 0xEA));
  unsigned int v177 = *(_DWORD *)(v126 + 4 * (v161 ^ 0xD7u)) ^ v175 ^ (v176 - 970714929 - ((2 * v176) & 0x8C48219E));
  unsigned int v178 = *(_DWORD *)(v118 + 4 * (BYTE2(v177) ^ 0x96u)) ^ 0xA0F4B4B0;
  int v179 = *(_DWORD *)(v120 + 4 * (BYTE1(v174) ^ 0xE4u));
  HIDWORD(v122) = v179 ^ 0xF930;
  LODWORD(v122) = v179 ^ 0x17560000;
  unsigned int v180 = (16 * v178 + 1759093154 - ((32 * v178) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v162) ^ 0x7D));
  unsigned int v181 = *(_DWORD *)(v126 + 4 * (v166 ^ 0x68u)) ^ v178 ^ (v122 >> 16) ^ (v180
                                                                                          - 970714929
                                                                                          - ((2 * v180) & 0x8C48219E));
  int v182 = *(_DWORD *)(v118 + 4 * (BYTE2(v162) ^ 0xAFu));
  int v183 = *(_DWORD *)(v120 + 4 * ((unsigned __int16)(v177 ^ 0x9DE7) >> 8));
  HIDWORD(v122) = v183 ^ 0xF930;
  LODWORD(v122) = v183 ^ 0x17560000;
  int v184 = (16 * (v182 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v182 ^ 0xA0F4B4B0)) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v166) ^ 0xCE)) ^ (v122 >> 16);
  unsigned int v185 = *(_DWORD *)(v126 + 4 * (v174 ^ 0x15u)) ^ v182 ^ (v184
                                                                           - 970714928
                                                                           + ~((2 * v184) & 0x8C48219E));
  unsigned int v186 = *(_DWORD *)(v118 + 4 * (BYTE2(v166) ^ 0x60u)) ^ 0xA0F4B4B0;
  int v187 = *(_DWORD *)(v120 + 4 * (BYTE1(v162) ^ 0x2Fu));
  HIDWORD(v122) = v187 ^ 0xF930;
  LODWORD(v122) = v187 ^ 0x17560000;
  int v188 = (16 * v186 + 1759093154 - ((32 * v186) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v174) ^ 0xF1)) ^ (v122 >> 16);
  unsigned int v189 = *(_DWORD *)(v126 + 4 * (v177 ^ 0xE7u)) ^ v186 ^ (v188 - 970714929 - ((2 * v188) & 0x8C48219E));
  int v190 = BYTE1(v166) ^ 0xC;
  if ((v166 & 0x1000) != 0) {
    int v191 = -16;
  }
  else {
    int v191 = 16;
  }
  unsigned int v192 = *(_DWORD *)(v118 + 4 * (BYTE2(v174) ^ 0xF7u)) ^ 0xA0F4B4B0;
  unsigned int v193 = *(_DWORD *)(v120 + 4 * ((v190 + v191) ^ 0x83u));
  unsigned int v194 = *(_DWORD *)(v123 + 4 * (HIBYTE(v177) ^ 1)) ^ HIWORD(v193) ^ (v193 << 16) ^ (16 * v192
                                                                                     + 1759093154
                                                                                     - ((32 * v192) & 0xD1B34340)) ^ 0xF9301756;
  unsigned int v195 = *(_DWORD *)(v126 + 4 * (v162 ^ 0xD3u)) ^ v192 ^ (v194 - 970714929 - ((2 * v194) & 0x8C48219E));
  int v196 = *(_DWORD *)(v118 + 4 * (BYTE2(v195) ^ 0xBCu));
  int v197 = *(_DWORD *)(v120 + 4 * (BYTE1(v189) ^ 0x8Du));
  HIDWORD(v198) = v197 ^ 0xF930;
  LODWORD(v198) = v197 ^ 0x17560000;
  int v199 = (v198 >> 16) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v181) ^ 0xCC)) ^ (16 * (v196 ^ 0xA0F4B4B0)
                                                                         + 1759093154
                                                                         - ((32 * (v196 ^ 0xA0F4B4B0)) & 0xD1B34340));
  unsigned int v200 = *(_DWORD *)(v126 + 4 * (v185 ^ 0x19u)) ^ v196 ^ (v199 - 970714929 - ((2 * v199) & 0x8C48219E));
  int v201 = *(_DWORD *)(v118 + 4 * (BYTE2(v181) ^ 0x9Cu));
  int v202 = *(_DWORD *)(v120 + 4 * (BYTE1(v195) ^ 0x3Bu));
  HIDWORD(v198) = v202 ^ 0xF930;
  LODWORD(v198) = v202 ^ 0x17560000;
  int v203 = (v198 >> 16) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v185) ^ 0xA0)) ^ (16 * (v201 ^ 0xA0F4B4B0)
                                                                         + 1759093154
                                                                         - ((32 * (v201 ^ 0xA0F4B4B0)) & 0xD1B34340));
  unsigned int v204 = *(_DWORD *)(v126 + 4 * (v189 ^ 0x48u)) ^ v201 ^ (v203 - 970714929 - ((2 * v203) & 0x8C48219E));
  unsigned int v205 = *(_DWORD *)(v118 + 4 * ((v185 ^ 0x49C0A519) >> 16)) ^ 0xA0F4B4B0;
  int v206 = *(_DWORD *)(v120 + 4 * (BYTE1(v181) ^ 0xD5u));
  HIDWORD(v198) = v206 ^ 0xF930;
  LODWORD(v198) = v206 ^ 0x17560000;
  int v207 = (16 * v205 + 1759093154 - ((32 * v205) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v189) ^ 0x80)) ^ (v198 >> 16);
  unsigned int v208 = *(_DWORD *)(v126 + 4 * (v195 ^ 0x77u)) ^ v205 ^ (v207 - 970714929 - ((2 * v207) & 0x8C48219E));
  int v209 = *(_DWORD *)(v118 + 4 * (BYTE2(v189) ^ 0xBEu));
  int v210 = *(_DWORD *)(v120 + 4 * (BYTE1(v185) ^ 0x36u));
  HIDWORD(v198) = v210 ^ 0xF930;
  LODWORD(v198) = v210 ^ 0x17560000;
  int v211 = (v198 >> 16) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v195) ^ 0xEF)) ^ (16 * (v209 ^ 0xA0F4B4B0)
                                                                         + 1759093154
                                                                         - ((32 * (v209 ^ 0xA0F4B4B0)) & 0xD1B34340));
  unsigned int v212 = *(_DWORD *)(v126 + 4 * (v181 ^ 0x83u)) ^ v209 ^ (v211 - 970714929 - ((2 * v211) & 0x8C48219E));
  unsigned int v213 = *(_DWORD *)(v118 + 4 * ((v212 ^ 0x35F9172D) >> 16)) ^ 0xA0F4B4B0;
  int v214 = *(_DWORD *)(v120 + 4 * (BYTE1(v208) ^ 0x89u));
  unsigned int v215 = (16 * v213 + 1759093154 - ((32 * v213) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * ((v200 ^ 0xB1A6AF7A) >> 24));
  HIDWORD(v198) = v214 ^ 0xF930;
  LODWORD(v198) = v214 ^ 0x17560000;
  unsigned __int8 v216 = BYTE1(v204) ^ 0x65;
  int v217 = *(_DWORD *)(v126 + 4 * (v204 ^ 0x38u)) ^ v213 ^ (v198 >> 16) ^ 0x71C9D6C4 ^ (v215 - 970714929 - ((2 * v215) & 0x8C48219E));
  int v218 = *(_DWORD *)(v120 + 4 * (BYTE1(v212) ^ 0x84u));
  HIDWORD(v198) = v218 ^ 0xF930;
  LODWORD(v198) = v218 ^ 0x17560000;
  int v219 = *(_DWORD *)(v118 + 4 * ((v200 ^ 0xB1A6AF7A) >> 16));
  int v220 = v217 - ((2 * v217) & 0xA4F186FA);
  int v221 = (16 * (v219 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v219 ^ 0xA0F4B4B0)) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v204) ^ 0x7F)) ^ (v198 >> 16);
  unsigned int v222 = *(_DWORD *)(v126 + 4 * (v208 ^ 0x43u)) ^ v219 ^ (v221 - 970714929 - ((2 * v221) & 0x8C48219E));
  unsigned int v223 = ((HIBYTE(v208) ^ 0xFFFFFF6C) + 234) ^ ((HIBYTE(v208) ^ 0xFFFFFF85) + 1);
  unsigned int v224 = *(_DWORD *)(v118 + 4 * (BYTE2(v204) ^ 0x53u)) ^ 0xA0F4B4B0;
  int v225 = *(_DWORD *)(v120 + 4 * (BYTE1(v200) ^ 0x3Cu));
  HIDWORD(v198) = v225 ^ 0xF930;
  LODWORD(v198) = v225 ^ 0x17560000;
  int v226 = (16 * v224 + 1759093154 - ((32 * v224) & 0xD1B34340)) ^ (v198 >> 16) ^ *(_DWORD *)(v123
                                                                                          + 4
                                                                                          * ((HIBYTE(v208) ^ 0xE6CFEF2F ^ (v223 - 422580433 - ((2 * v223) & 0xCD9FDEAA) + 38))
                                                                                           + 233));
  unsigned int v227 = *(_DWORD *)(v126 + 4 * (v212 ^ 0x2Du)) ^ v224 ^ (v226 - 970714929 - ((2 * v226) & 0x8C48219E));
  int v228 = *(_DWORD *)(v118 + 4 * (BYTE2(v208) ^ 0x85u));
  int v229 = *(_DWORD *)(v120 + 4 * v216);
  HIDWORD(v198) = v229 ^ 0xF930;
  LODWORD(v198) = v229 ^ 0x17560000;
  int v230 = (v198 >> 16) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v212) ^ 0xDC)) ^ (16 * (v228 ^ 0xA0F4B4B0)
                                                                         + 1759093154
                                                                         - ((32 * (v228 ^ 0xA0F4B4B0)) & 0xD1B34340));
  unsigned int v231 = *(_DWORD *)(v126 + 4 * (v200 ^ 0x49u)) ^ v228 ^ (v230 - 970714929 - ((2 * v230) & 0x8C48219E));
  int v232 = *(_DWORD *)(v118 + 4 * (BYTE2(v231) ^ 0x73u));
  int v233 = *(_DWORD *)(v120 + 4 * (BYTE1(v227) ^ 0xDEu));
  HIDWORD(v198) = v233 ^ 0xF930;
  LODWORD(v198) = v233 ^ 0x17560000;
  int v234 = v220 + 1383646077;
  int v235 = (v198 >> 16) ^ *(_DWORD *)(v123 + 4 * (((v220 + 1383646077) >> 24) ^ 0x3B)) ^ (16 * (v232 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v232 ^ 0xA0F4B4B0)) & 0xD1B34340));
  int v236 = *(_DWORD *)(v120 + 4 * (BYTE1(v231) ^ 0x8Bu));
  unsigned int v237 = *(_DWORD *)(v126 + 4 * (v222 ^ 0x63u)) ^ v232 ^ (v235 - 970714929 - ((2 * v235) & 0x8C48219E));
  HIDWORD(v198) = v236 ^ 0xF930;
  LODWORD(v198) = v236 ^ 0x17560000;
  unsigned int v238 = *(_DWORD *)(v118 + 4 * (BYTE2(v234) ^ 0x12u)) ^ 0xA0F4B4B0;
  int v239 = *(_DWORD *)(v118 + 4 * (BYTE2(v222) ^ 0xEu));
  unsigned int v240 = v238 ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v222) ^ 0x7D)) ^ *(_DWORD *)(v126
                                                                            + 4 * (v227 ^ 0x69u)) ^ ((v198 >> 16) - 970714929 - ((2 * (v198 >> 16)) & 0x8C48219E)) ^ (16 * v238 + 1759093154 - ((32 * v238) & 0xD1B34340));
  int v241 = *(_DWORD *)(v120 + 4 * (BYTE1(v234) ^ 0xA8u));
  HIDWORD(v198) = v241 ^ 0xF930;
  LODWORD(v198) = v241 ^ 0x17560000;
  int v242 = (16 * (v239 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v239 ^ 0xA0F4B4B0)) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v227) ^ 0x5F)) ^ (v198 >> 16);
  unsigned int v243 = *(_DWORD *)(v126
                   + 4
                   * ((((v231 ^ 0xFFFFFF33) - v231 + 256) ^ 0xFFFFFFFE)
                    + (v231 ^ 0xFF))) ^ v239 ^ (v242 - 970714929 - ((2 * v242) & 0x8C48219E));
  int v244 = *(_DWORD *)(v118 + 4 * (BYTE2(v227) ^ 0x2Du));
  int v245 = *(_DWORD *)(v120 + 4 * (BYTE1(v222) ^ 0x6Bu));
  HIDWORD(v198) = v245 ^ 0xF930;
  LODWORD(v198) = v245 ^ 0x17560000;
  int v246 = (v198 >> 16) ^ *(_DWORD *)(v123
                                  + 4
                                  * ((HIBYTE(v231) ^ 0xB5) & 0x90 ^ 0x86u ^ (~(2
                                                                                              * (HIBYTE(v231) ^ 0xB5 | 0x90))
                                                                                            + (HIBYTE(v231) ^ 0xB5 | 0x90)))) ^ (16 * (v244 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v244 ^ 0xA0F4B4B0)) & 0xD1B34340));
  unsigned int v247 = *(_DWORD *)(v126 + 4 * (v234 ^ 0x26u)) ^ v244 ^ (v246 - 970714929 - ((2 * v246) & 0x8C48219E));
  int v248 = *(_DWORD *)(v118 + 4 * ((v247 ^ 0xF9514007) >> 16));
  int v249 = *(_DWORD *)(v120 + 4 * ((unsigned __int16)(v243 ^ 0x339B) >> 8));
  HIDWORD(v198) = v249 ^ 0xF930;
  LODWORD(v198) = v249 ^ 0x17560000;
  int v250 = (16 * (v248 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v248 ^ 0xA0F4B4B0)) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v237) ^ 0x72)) ^ (v198 >> 16);
  unsigned int v251 = *(_DWORD *)(v126 + 4 * (v240 ^ 0xEEu)) ^ v248 ^ (v250 - 970714929 - ((2 * v250) & 0x8C48219E));
  unsigned int v252 = *(_DWORD *)(v118 + 4 * (BYTE2(v237) ^ 0xD1u)) ^ 0xA0F4B4B0;
  int v253 = *(_DWORD *)(v120 + 4 * (BYTE1(v247) ^ 0xD3u));
  HIDWORD(v198) = v253 ^ 0xF930;
  LODWORD(v198) = v253 ^ 0x17560000;
  unsigned int v254 = v252 ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v240) ^ 0xD6)) ^ *(_DWORD *)(v126
                                                                            + 4 * (v243 ^ 0xA8u)) ^ (16 * v252 + 1759093154 - ((32 * v252) & 0xD1B34340)) ^ ((v198 >> 16) - 970714929 - ((2 * (v198 >> 16)) & 0x8C48219E));
  unsigned int v255 = *(_DWORD *)(v118 + 4 * (BYTE2(v240) ^ 0x56u)) ^ 0xA0F4B4B0;
  int v256 = *(_DWORD *)(v120 + 4 * (BYTE1(v237) ^ 0xFu));
  HIDWORD(v198) = v256 ^ 0xF930;
  LODWORD(v198) = v256 ^ 0x17560000;
  int v257 = *(_DWORD *)(v123 + 4 * ((v243 ^ 0x31EF339B) >> 24)) ^ *(_DWORD *)(v118 + 4 * (BYTE2(v240) ^ 0x56u)) ^ 0xCDB5C6CE ^ (16 * v255 + 1759093154 - ((32 * v255) & 0xD1B34340)) ^ (v198 >> 16);
  HIDWORD(v198) = *(_DWORD *)(v126 + 4 * (v247 ^ 7u)) ^ 0xDAACB475;
  LODWORD(v198) = HIDWORD(v198);
  LODWORD(v198) = (v198 >> 21) ^ __ROR4__(v257, 21) ^ 0x549BF9D9;
  HIDWORD(v198) = v198;
  int v258 = (v198 >> 11) - ((2 * (v198 >> 11)) & 0x455F60E2);
  unsigned int v259 = *(_DWORD *)(v118 + 4 * (BYTE2(v243) ^ 0x2Cu)) ^ 0xA0F4B4B0;
  int v260 = *(_DWORD *)(v120 + 4 * (BYTE1(v240) ^ 0xE4u));
  HIDWORD(v198) = v260 ^ 0xF930;
  LODWORD(v198) = v260 ^ 0x17560000;
  int v261 = (v198 >> 16) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v247) ^ 0x10)) ^ (16 * v259
                                                                         + 1759093154
                                                                         - ((32 * v259) & 0xD1B34340));
  unsigned int v262 = *(_DWORD *)(v126 + 4 * (v237 ^ 0x16u)) ^ v259 ^ (v261 - 970714929 - ((2 * v261) & 0x8C48219E));
  unsigned int v263 = *(_DWORD *)(v118 + 4 * (BYTE2(v251) ^ 0x80u)) ^ 0xA0F4B4B0;
  int v264 = *(_DWORD *)(v120 + 4 * (BYTE1(v262) ^ 0x66u));
  HIDWORD(v198) = v264 ^ 0xF930;
  LODWORD(v198) = v264 ^ 0x17560000;
  int v265 = *(_DWORD *)(v123 + 4 * (HIBYTE(v254) ^ 0x17)) ^ 0x6D41727E ^ v263 ^ (v198 >> 16) ^ (16 * v263
                                                                                             + 1759093154
                                                                                             - ((32 * v263) & 0xD1B34340));
  int v266 = v258 + 581939313;
  int v267 = *(_DWORD *)(v126 + 4 * (v266 ^ 0x9Eu));
  int v268 = (v265 & 0x200 | ((((unsigned __int16)(v265 & 0x200) >> 9) & 1) << 10)) ^ 0x3FF6F36D;
  BOOL v108 = ((v268 - 1073148781) & (v267 ^ 0xC62410CF)) == 0;
  int v269 = *(_DWORD *)(v118 + 4 * (BYTE2(v262) ^ 0x72u));
  int v270 = *(_DWORD *)(v120 + 4 * (BYTE1(v266) ^ 0x10u));
  HIDWORD(v198) = v270 ^ 0xF930;
  LODWORD(v198) = v270 ^ 0x17560000;
  int v271 = (v198 >> 16) ^ *(_DWORD *)(v123 + 4 * ((v251 ^ 0x744389F7) >> 24)) ^ (16 * (v269 ^ 0xA0F4B4B0)
                                                                               + 1759093154
                                                                               - ((32 * (v269 ^ 0xA0F4B4B0)) & 0xD1B34340));
  unsigned int v272 = *(_DWORD *)(v126 + 4 * (v254 ^ 0xEAu)) ^ v269 ^ (v271 - 970714929 - ((2 * v271) & 0x8C48219E));
  int v273 = v268 - 415252524;
  int v274 = 1731045038 - v268;
  if (v108) {
    int v274 = v273;
  }
  unsigned int v275 = ((v267 ^ 0xDAACB475) - 657896257 + v274) ^ v265 & 0xFFFFFDFF;
  int v276 = *(_DWORD *)(v118 + 4 * (BYTE2(v254) ^ 0x7Cu));
  unsigned int v277 = (16 * (v276 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v276 ^ 0xA0F4B4B0)) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * ((v266 ^ 0x3C0E839Eu) >> 24));
  int v278 = *(_DWORD *)(v120 + 4 * (BYTE1(v251) ^ 0x1Au));
  HIDWORD(v279) = v278 ^ 0xF930;
  LODWORD(v279) = v278 ^ 0x17560000;
  unsigned int v280 = *(_DWORD *)(v126 + 4 * (v262 ^ 0xDu)) ^ v276 ^ (v279 >> 16) ^ (v277
                                                                                         - 970714929
                                                                                         - ((2 * v277) & 0x8C48219E));
  int v281 = *(_DWORD *)(v118 + 4 * (BYTE2(v266) ^ 0xCDu));
  int v282 = *(_DWORD *)(v120 + 4 * (BYTE1(v254) ^ 0xD9u));
  HIDWORD(v279) = v282 ^ 0xF930;
  LODWORD(v279) = v282 ^ 0x17560000;
  int v283 = (16 * (v281 ^ 0xA0F4B4B0) + 1759093154 - ((32 * (v281 ^ 0xA0F4B4B0)) & 0xD1B34340)) ^ *(_DWORD *)(v123 + 4 * (HIBYTE(v262) ^ 0x32)) ^ (v279 >> 16);
  unsigned int v284 = *(_DWORD *)(v126 + 4 * (v251 ^ 0xC4u)) ^ v281 ^ (v283 - 970714929 - ((2 * v283) & 0x8C48219E));
  uint64_t v285 = (char *)*(&off_10018D100 + HIDWORD(v350) - 1888) - 8;
  HIDWORD(v341) = *(_DWORD *)&v285[4 * (HIBYTE(v272) ^ 0x73)];
  uint64_t v286 = (char *)*(&off_10018D100 + (HIDWORD(v350) ^ 0x755)) - 12;
  unsigned int v287 = *(_DWORD *)&v286[4 * (BYTE2(v272) ^ 0x6D)];
  uint64_t v288 = (char *)*(&off_10018D100 + (HIDWORD(v350) & 0x5A17805F)) - 4;
  unsigned int v289 = *(_DWORD *)&v288[4 * (BYTE1(v284) ^ 0xC8)] ^ 0xE1EA2667;
  LODWORD(v347) = HIBYTE(v280);
  LODWORD(v344) = *(_DWORD *)&v285[4 * (HIBYTE(v280) ^ 0x14)];
  unsigned int v290 = (v287 >> 4) ^ 0x28749843 ^ (v287 >> 2) ^ ((HIBYTE(v275) ^ 0x9FD529D8)
                                                 - 1796885826
                                                 + *(_DWORD *)&v285[4 * (HIBYTE(v275) ^ 0x45)]) ^ (1515496080 * v289);
  LODWORD(v350) = HIBYTE(v284);
  HIDWORD(v347) = *(_DWORD *)&v285[4 * (HIBYTE(v284) ^ 0x31)];
  unsigned int v291 = v290 - ((2 * v290) & 0x64D4E05A);
  unsigned int v292 = *(_DWORD *)&v286[4 * (BYTE2(v284) ^ 0xF1)];
  unsigned int v293 = *(_DWORD *)&v286[4 * (BYTE2(v275) ^ 0x37)];
  unsigned int v294 = *(_DWORD *)&v286[4 * ~HIWORD(v280)];
  int v295 = *(_DWORD *)&v288[4 * (BYTE1(v280) ^ 0x77)];
  int v296 = *(_DWORD *)&v288[4 * (BYTE1(v272) ^ 2)];
  HIDWORD(v344) = *(_DWORD *)&v288[4 * (BYTE1(v275) ^ 0x5E)];
  int v297 = v275;
  uint64_t v298 = (char *)*(&off_10018D100 + (HIDWORD(v350) ^ 0x7FE)) - 12;
  LODWORD(v286) = *(_DWORD *)&v298[4 * (v275 ^ 0x9D)];
  LODWORD(v288) = v284;
  int v299 = *(_DWORD *)&v298[4 * (v284 ^ 0x2E)];
  HIDWORD(v342) = v272;
  LODWORD(v342) = *(_DWORD *)&v298[4 * (v272 ^ 0x14)];
  uint64_t v300 = ((v280 ^ 0xCB) - 702133862 - ((2 * (v280 ^ 0xCB) - 102555424) & 0xB0612254)) ^ LODWORD(STACK[0x2A0]) ^ *(_DWORD *)&v298[4 * (v280 ^ 0xC9)] ^ v287 ^ v289 ^ (v291 - 1301647315);
  uint64_t v301 = v300 ^ 0x6761C395;
  uint64_t v302 = (char *)*(&off_10018D100 + (int)(HIDWORD(v350) & 0xDBB89858)) - 4;
  v330[5] = v302[BYTE2(v301) ^ 0x5ELL] ^ BYTE2(v301) ^ 0x8A ^ ((BYTE2(v301) ^ 0x8A)
                                                             - ((2 * (BYTE2(v301) ^ 0x8A) - 18) & 0xA0)
                                                             + 71) ^ 0xB9;
  LODWORD(v285) = ((HIBYTE(v272) ^ 0x9FD529EE) - 1796885826 + HIDWORD(v341)) ^ 0x28749843 ^ (v292 >> 2) ^ (v292 >> 4) ^ (1515496080 * (v295 ^ 0xE1EA2667));
  unsigned int v303 = v292 ^ LODWORD(STACK[0x2A8]) ^ v295 ^ 0xE1EA2667 ^ v286 ^ ((v297 ^ 0x9F)
                                                                                - 702133862
                                                                                - ((2 * (v297 ^ 0x9F) - 102555424) & 0xB0612254)) ^ (v285 - ((2 * v285) & 0xD7D1291E) - 337079153);
  unsigned int v304 = v303 ^ 0xB049ACC;
  uint64_t v305 = (BYTE1(v304) | 0x88) ^ (v304 >> 8) & 0x88;
  uint64_t v306 = (char *)*(&off_10018D100 + (HIDWORD(v350) ^ 0x7AA)) - 12;
  v330[2] = (((unsigned __int16)(v303 ^ 0x9ACC) >> 8) | 0x88) ^ ((unsigned __int16)(v303 ^ 0x9ACC) >> 8) & 0x88 ^ 0x35 ^ ((v306[v305 ^ 0x14] ^ 0x82) - ((2 * v306[v305 ^ 0x14]) & 0x20) - 112);
  LODWORD(v305) = ((HIBYTE(v280) ^ 0x9FD52989) - 1796885826 + v344) ^ 0x28749843 ^ (v293 >> 2) ^ (v293 >> 4);
  int v307 = v293 ^ 0xD182C89 ^ (v305 - ((2 * v305) & 0x194A0EF6) - 1935341701);
  uint64_t v308 = (char *)*(&off_10018D100 + (HIDWORD(v350) ^ 0x79A)) - 12;
  int v309 = v308[BYTE3(v300) ^ 0xDALL];
  HIDWORD(v279) = v309 ^ 5;
  LODWORD(v279) = (v309 ^ 0x80) << 24;
  unsigned int v310 = (v307 & 0x1000000 | ((((v307 & 0x1000000u) >> 24) & 1) << 25)) ^ 0xDDB32FDF;
  BOOL v108 = ((v310 + 575459361) & (v299 ^ 0x59000000)) == 0;
  v330[STACK[0x200]] = (v279 >> 29) ^ 0x83;
  unsigned int v311 = v299 ^ ((v288 ^ 0x2C) - 702133862 - ((2 * (v288 ^ 0x2C) - 102555424) & 0xB0612254));
  unsigned int v312 = v310 + 785380668;
  unsigned int v313 = -365538054 - v310;
  if (v108) {
    unsigned int v313 = v312;
  }
  unsigned int v314 = v307 & 0xFEFFFFFF ^ (1515496080 * (v296 ^ 0xE1EA2667)) ^ (v311 - 209921307 + v313);
  unsigned int v315 = v296 ^ LODWORD(STACK[0x2C0]) ^ (v314 + 1586172312 - ((2 * v314) & 0xBD1623BC) + 70);
  uint64_t v316 = (char *)*(&off_10018D100 + (int)(HIDWORD(v350) & 0x8C879068)) - 8;
  v330[11] = v316[v315 ^ 0x4FLL] & 0xFB ^ ((v316[v315 ^ 0x4FLL] | 0xFB) + 24) ^ 0xE0;
  int v317 = v308[HIBYTE(v303) ^ 0xD0];
  HIDWORD(v318) = v317 ^ 5;
  LODWORD(v318) = (v317 ^ 0x80) << 24;
  *uint64_t v330 = (v318 >> 29) ^ 0xFB;
  v330[1] = BYTE2(v304) ^ 0x61 ^ ((BYTE2(v304) ^ 0x61) - ((2 * (BYTE2(v304) ^ 0x61) - 18) & 0xA0) + 71) ^ 0xB8 ^ v302[BYTE2(v304) ^ 0xB5];
  int v319 = (v350 ^ 0x9FD529AC) - 1796885826 + HIDWORD(v347);
  int v320 = (((v294 >> 4) ^ (v294 >> 2) ^ 0x28749843)
        - 2 * (((v294 >> 4) ^ (v294 >> 2) ^ 0x28749843) & 0x19D960DE ^ ((v294 >> 4) ^ (v294 >> 2)) & 0x18)
        + 1507418310) ^ v294;
  int v321 = v320 & 0x80000 | 0x6E716433;
  if ((v320 & 0x80000 & v319) != 0) {
    int v321 = -589117338 - v321;
  }
  unsigned int v322 = (1515496080 * (HIDWORD(v344) ^ 0xE1EA2667)) ^ v320 & 0xFFF7FFFF ^ 0xD8644B34 ^ (v319 - 1852924979 + v321);
  int v323 = v342 ^ ((v272 ^ 0x16) + 2096205936) ^ (v322 - ((2 * v322) & 0xB2697254) + 1496627498);
  unsigned int v324 = HIDWORD(v344) ^ LODWORD(STACK[0x2C8]) ^ (v323 + 1907374239 - ((2 * v323) & 0xE360713E));
  v330[13] = v302[(BYTE2(v324) ^ 0x71) + 213 + ((v324 >> 15) & 0x1A8 ^ 0xFFFFFF5F)] ^ BYTE2(v324) ^ ((BYTE2(v324) ^ 0x71) + (~(2 * (BYTE2(v324) ^ 0x71) - 18) | 0x5F) + 72) ^ 0xF7;
  int v325 = v308[HIBYTE(v324) ^ 0x1BLL];
  HIDWORD(v326) = v325 ^ 5;
  LODWORD(v326) = (v325 ^ 0x80) << 24;
  v330[STACK[0x220]] = (v326 >> 29) ^ 0x50;
  v330[9] = ((v315 ^ 0x2E37FF00) >> 16) ^ 0x94 ^ ((((v315 ^ 0x2E37FF00) >> 16) ^ 0x94)
                                                - ((2 * (((v315 ^ 0x2E37FF00) >> 16) ^ 0x94) - 18) & 0xA0)
                                                + 71) ^ v302[((v315 ^ 0x2E37FF00) >> 16) ^ 0x40] ^ 0xC;
  unsigned int v327 = (((v324 ^ 0xBEDFB448) >> 4) & 0xF0 | ((unsigned __int16)(v324 ^ 0xB448) >> 12)) ^ 0xE6;
  v330[STACK[0x288]] = v306[((v327 >> 4) & 0xFFFFFF0F | (16 * (v327 & 0xF))) ^ 0xAELL] ^ (((v327 >> 4) & 0xF | (16 * (v327 & 0xF)))
                                                                                        - ((v327 >> 3) & 4)
                                                                                        - 126) ^ 0x2B;
  v330[10] = (((unsigned __int16)(v315 ^ 0xFF00) >> 8) - (((v315 ^ 0x2E37FF00) >> 7) & 4) - 126) ^ 0xDB ^ v306[((unsigned __int16)(v315 ^ 0xFF00) >> 8) ^ 0xA0];
  v330[STACK[0x260]] = (BYTE1(v301) - ((v301 >> 7) & 4) - 126) ^ v306[BYTE1(v301) ^ 0x75] ^ 0x80;
  v330[STACK[0x240]] = v316[v303 ^ 0xFFLL] ^ 0x5E;
  v330[STACK[0x238]] = v316[v300 ^ 0x59] ^ 0xCF;
  v330[STACK[0x298]] = v316[v324 ^ 0xE7] ^ 0x60;
  int v328 = v308[HIBYTE(v315) ^ 0xA8];
  HIDWORD(v326) = v328 ^ 5;
  LODWORD(v326) = (v328 ^ 0x80) << 24;
  v330[STACK[0x250]] = (v326 >> 29) ^ 0x2E;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 8 * SHIDWORD(v350)))(0, v300, 230, 5, v301, 95, &off_10018D100, 1010130221, a9, a10, a11, a12, a13, a14, a15, a16, a17, v330, v331,
           v73,
           v332,
           v333,
           v334,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           v335,
           v336,
           v337,
           v338,
           v339,
           v340,
           v341,
           v342,
           v344,
           v347,
           v350,
           2,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           5,
           11,
           1,
           a63);
}

uint64_t sub_100035DF0@<X0>(uint64_t a1@<X2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return sub_100066788(a1, a18, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100035DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,unsigned int a21,uint64_t a22,unint64_t *a23,int a24)
{
  unsigned int v27 = 1224239923 * ((((2 * &a19) | 0xA63C9F70) - &a19 - 1394495416) ^ 0xA1ADB26F);
  a22 = a17;
  a23 = &STACK[0x634ED76D4AB882AD];
  a20 = (v24 - 2024873993) ^ v27;
  a21 = v27 ^ 0xA69AE8A0;
  a19 = v27 ^ 0x6BCE570A;
  uint64_t v28 = (*(uint64_t (**)(int *))(v26 + 8 * (v24 + 1471)))(&a19);
  return (*(uint64_t (**)(uint64_t))(v26 + 8 * (((a24 == v25) * (((v24 + 814004201) & 0x5FD) - 347)) ^ v24)))(v28);
}

uint64_t sub_100035ED0(double a1, __n128 a2, __n128 a3, __n128 a4, int8x16_t a5, int8x16_t a6, int8x16_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15)
{
  unsigned int v28 = v21 - 16;
  uint64_t v29 = v28 & 0xF;
  v31.i64[0] = vqtbl4q_s8(*(int8x16x4_t *)(&a2 - 1), a5).u64[0];
  v31.i64[1] = vqtbl4q_s8(*(int8x16x4_t *)&v24, a5).u64[0];
  int8x16_t v32 = vrev64q_s8(veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(a14 + v28), *(int8x16_t *)(v18 + v29 - 15)), *(int8x16_t *)(v29 + v16 - 14)), *(int8x16_t *)(v20 + v29 + v17 - 2258)));
  int8x16_t v33 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v32, v32, 8uLL), a7), vmulq_s8(v31, a6)));
  *(int8x16_t *)(v19 + v28) = vextq_s8(v33, v33, 8uLL);
  return (*(uint64_t (**)(void))(v23 + 8 * (((v22 == 16) * v15) ^ a13)))();
}

uint64_t sub_100035EDC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((v6 & (2 * (*(unsigned __int8 *)(a2 + 8) - 1)))
                                      + ((*(unsigned __int8 *)(a2 + 8) - 1) ^ v5) == v5)
                                     * ((v4 - 67643796) & 0xF6AAFFDA ^ (v2 - 553))) ^ v4)))();
}

uint64_t sub_100035F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  return sub_100031828(a1, a2, a3, a4, (int)a8 + v50 + 5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_100035F3C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((83 * ((v0 ^ 0x11u) >= (v1 ^ 0x789u) - 1164)) ^ v1)))();
}

uint64_t sub_100035F90(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  int v12 = v7 + v6;
  int v13 = v12 + a6;
  if ((v12 + a6) <= 0x40) {
    int v13 = 64;
  }
  BOOL v14 = __CFADD__(v12 + ((v8 - 595) ^ (a6 - 33)), a4 + v9 + v10 + v13 + 819);
  return (*(uint64_t (**)(void))(v11 + 8 * ((v14 * ((7 * (v8 ^ 0x358)) ^ 0x2E3)) ^ v8)))();
}

uint64_t sub_100036000@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, int a4@<W4>, int a5@<W7>, int a6@<W8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int v20 = 3 * ((a6 + 493895509) & 0xE28FC6E7 ^ 0x486);
  uint64_t v21 = 4 * a1;
  unsigned int v22 = (v12 ^ 0x811882A1)
      + (v15 ^ (v13 + 449) ^ v20) * (*(_DWORD *)(*v19 + 4 * (int)(v20 - 1731)) ^ v13)
      + (*(_DWORD *)(a12 + v21) ^ v13);
  *(_DWORD *)(a12 + v21) = (v22 + a2 - (a3 & (2 * v22))) ^ v17;
  BOOL v23 = v14 > v16;
  if (v23 == a4 > 50790258) {
    BOOL v23 = a5 > 50790258;
  }
  return (*(uint64_t (**)(void))(v18 + 8 * (int)(v20 ^ (4 * v23))))();
}

void sub_1000360CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, int a14)
{
  unsigned int v17 = 3804331 * (((&a10 | 0x41D7377E) - (&a10 & 0x41D7377E)) ^ 0x3F021288);
  a14 = ((v14 & 0x3BA7AF77) - 2065) ^ v17;
  a13 = 0x5267DA57ABB8ED88;
  a10 = v15;
  a11 = v17 ^ 0x14EDA71E;
  a12 = v17 ^ 0x4CDE25C;
  (*(void (**)(uint64_t *))(v16 + 8 * ((v14 & 0x3BA7AF77u) + 103)))(&a10);
  sub_100055840();
}

uint64_t sub_100036168(uint64_t result)
{
  *(_DWORD *)(result + 4) = -545080081;
  return result;
}

uint64_t sub_1000361A4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int8x16x4_t v33 = vld4q_s8(v5);
  int v6 = LODWORD(STACK[0x2C0]) + 10;
  v7.i64[0] = 0x7777777777777777;
  v7.i64[1] = 0x7777777777777777;
  uint8x16_t v8 = (uint8x16_t)veorq_s8(v33.val[0], v7);
  uint16x8_t v9 = vmovl_u8(*(uint8x8_t *)v8.i8);
  int8x16_t v10 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v9.i8);
  int8x16_t v11 = (int8x16_t)vmovl_high_u16(v9);
  uint16x8_t v12 = vmovl_high_u8(v8);
  int8x16_t v13 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v12.i8);
  int8x16_t v14 = (int8x16_t)vmovl_high_u16(v12);
  uint8x16_t v15 = (uint8x16_t)veorq_s8(v33.val[1], v7);
  uint16x8_t v16 = vmovl_high_u8(v15);
  uint16x8_t v17 = vmovl_u8(*(uint8x8_t *)v15.i8);
  uint8x16_t v18 = (uint8x16_t)veorq_s8(v33.val[2], v7);
  _Q21 = (int8x16_t)vmovl_high_u8(v18);
  _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v18.i8);
  int8x16_t v21 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
  __asm { SHLL2           V20.4S, V20.8H, #0x10 }
  int8x16_t v26 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
  __asm { SHLL2           V21.4S, V21.8H, #0x10 }
  v33.val[0] = veorq_s8(v33.val[3], v7);
  v33.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v33.val[0]);
  v33.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v33.val[1]);
  v33.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v33.val[0].i8);
  v33.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v33.val[0]);
  v33.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v33.val[0].i8), 0x18uLL), v21), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v17.i8, 8uLL), v10));
  v33.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v33.val[3], 0x18uLL), _Q20), vorrq_s8((int8x16_t)vshll_high_n_u16(v17, 8uLL), v11));
  v33.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v33.val[1].i8), 0x18uLL), v26), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v16.i8, 8uLL), v13));
  v33.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v33.val[2], 0x18uLL), _Q21), vorrq_s8((int8x16_t)vshll_high_n_u16(v16, 8uLL), v14));
  int32x4_t v27 = (int32x4_t)veorq_s8(vandq_s8(v33.val[0], *(int8x16_t *)&STACK[0x250]), (int8x16_t)(*(_OWORD *)&v10 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
  int32x4_t v28 = (int32x4_t)veorq_s8(vandq_s8(v33.val[3], *(int8x16_t *)&STACK[0x250]), (int8x16_t)(*(_OWORD *)&v11 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
  int32x4_t v29 = (int32x4_t)veorq_s8(vandq_s8(v33.val[1], *(int8x16_t *)&STACK[0x250]), (int8x16_t)(*(_OWORD *)&v13 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
  int32x4_t v30 = (int32x4_t)veorq_s8(vandq_s8(v33.val[2], *(int8x16_t *)&STACK[0x250]), (int8x16_t)(*(_OWORD *)&v14 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
  v33.val[2] = (int8x16_t)vsubq_s32((int32x4_t)v33.val[2], vaddq_s32(v30, v30));
  int32x4_t v31 = *(int32x4_t *)&STACK[0x240];
  v33.val[0] = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v33.val[0], vaddq_s32(v27, v27)), *(int32x4_t *)&STACK[0x240]);
  v33.val[2] = (int8x16_t)vaddq_s32((int32x4_t)v33.val[2], *(int32x4_t *)&STACK[0x240]);
  *(int32x4_t *)(a5 + 32) = vaddq_s32(vsubq_s32((int32x4_t)v33.val[1], vaddq_s32(v29, v29)), *(int32x4_t *)&STACK[0x240]);
  *(int8x16_t *)(a5 + 48) = v33.val[2];
  *(int8x16_t *)a5 = v33.val[0];
  *(int32x4_t *)(a5 + 16) = vaddq_s32(vsubq_s32((int32x4_t)v33.val[3], vaddq_s32(v28, v28)), v31);
  return sub_10005AA34(v6, a1, a2, a3, a4, 456671172);
}

uint64_t sub_1000362E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20)
{
  int v25 = 235795823 * ((v24 - 144) ^ 0x94AD4959);
  *(void *)(v24 - 120) = a10;
  *(void *)(v24 - 136) = v22;
  *(_DWORD *)(v24 - 140) = v20 + v25 + 359211049 + 7 * (v23 ^ 0x398);
  *(_DWORD *)(v24 - 128) = v23 - v25 + 737;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(v21 + 8 * (v23 ^ 0xA1Fu)))(v24 - 144);
  return sub_100044B10(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_100036358()
{
  LODWORD(STACK[0x4AC]) = v0 - 135;
  return sub_100038944();
}

uint64_t sub_100036370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,int a33)
{
  *unsigned int v36 = v36[623];
  uint64_t v38 = 241568881
      * ((((v37 - 144) | 0x4EF753332C06FA70) - ((v37 - 144) & 0x4EF753332C06FA70)) ^ 0x41A287BAFA17FE32);
  *(void *)(v37 - 112) = v38 + 3;
  *(void *)(v37 - 128) = (v34 + 1) + v38;
  *(_DWORD *)(v37 - 144) = a33 ^ v38;
  *(_DWORD *)(v37 - 140) = a33 ^ v38 ^ 0x2C;
  *(_DWORD *)(v37 - 104) = v38;
  *(_DWORD *)(v37 - 100) = a31 ^ v38;
  *(_DWORD *)(v37 - 136) = v38 + v33 + 1452949797;
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(v35 + 8 * (v33 ^ (v33 + 2419))))(v37 - 144);
  return (*(uint64_t (**)(uint64_t))(v35 + 8 * *(int *)(v37 - 120)))(v39);
}

uint64_t sub_100036440()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((v2 == 0) ^ (v0 + 90)) & 1)
                                * (((v0 + 532777818) ^ 0x1FC194C4) - 1837)) ^ v0)))();
}

uint64_t sub_10003647C()
{
  STACK[0x508] = STACK[0x508] + ((v0 - 60) | 0x202u) - 830;
  return (*(uint64_t (**)(void))(v3 + 8 * (v0 ^ (590 * (v2 == v1)))))();
}

uint64_t sub_1000364B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v24 = a8 + 1;
  *(unsigned char *)(v20 + (v24 + v16)) = *(unsigned char *)(a16 + v22 + v19)
                                              + (v18 ^ 0x20)
                                              - ((2 * *(unsigned char *)(a16 + v22 + v19)) & 0xEF);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8 * ((((a3 + v24 + 1) < 0x40) * v21) ^ v17)))(v18 ^ 0x20u, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1000364C0()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((v2 - 1340331332) ^ (1109 * (v0 < v3)))))();
}

uint64_t sub_1000364FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  unint64_t v19 = STACK[0x418];
  STACK[0x560] -= 32;
  *(unsigned char *)(v19 + 335) = *(unsigned char *)(a13 + 335) ^ (15 * (((a18 ^ 8) - 21) & 0x6B ^ 0xB)) ^ *(unsigned char *)(*(void *)(a7 + 8 * (a18 ^ 0x615)) + 7) ^ *(unsigned char *)(*(void *)(a7 + 8 * ((a18 ^ 8) & 0x514830A9)) + 9) ^ *(unsigned char *)(*(void *)(a7 + 8 * (int)((a18 ^ 8) - 1494)) + 10) ^ 0x77;
  return (*(uint64_t (**)(void))(v18 + 8 * a18))();
}

uint64_t sub_1000365E4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  unint64_t v7 = v5 - 1;
  STACK[0x3A8] = v7;
  *(unsigned char *)(a1 + v7) = ((v2 + 1) ^ v3) * (v2 + 18);
  return (*(uint64_t (**)(void))(v6 + 8 * ((31 * (STACK[0x3A8] == v4)) ^ a2)))();
}

uint64_t sub_100036630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18, unsigned int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,int a26,int a27)
{
  int v30 = (v29 - 1995) | 0x50A;
  int v31 = (((a25 ^ a8) + a26) ^ 0xBDCDEE9C)
      + 2004284412
      + ((((a25 ^ a8) + a26) << (((v29 + 53) | 0xA) ^ 0x1B)) & 0x7B9BDD38);
  BOOL v32 = a19 < a18;
  if (v32 == v31 - 1576382955 < (v30 - 682677357)) {
    BOOL v32 = v31 - 1576382955 < a19;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * (((16 * !v32) | (!v32 << 6)) ^ v30)))(((a27 + (v27 ^ a8)) ^ 0x7BBFFFB6)- 1127746308+ ((2 * (a27 + (v27 ^ a8))) & 0xF77FFF6C), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_100036714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,int a24,int a25)
{
  _DWORD *v25 = v25[623];
  return sub_1000680F8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_100036724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  unsigned int v18 = (v17 + 1314085630) & 0xB1ACA4FF;
  unsigned int v19 = a16 - 1758911814 + v18;
  unsigned int v21 = v19 - 1130;
  BOOL v20 = (int)(v19 - 1130) < 0;
  unsigned int v22 = 1130 - v19;
  if (!v20) {
    unsigned int v22 = v21;
  }
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * (int)((((int)((v22 ^ 0xFAD6DDF5) + ((2 * v22) & 0xF5ADBBEA) + 86581770) >= 0)
                                                   * ((v18 - 1895117942) & 0x70F535DE ^ 0x537)) ^ v18)))(3840062113);
}

uint64_t sub_1000367E8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  BOOL v16 = a13 > 0x3B648894;
  if (v16 == a1 + 319880890 < (int)((v14 + 1791530326) & 0x95376CED ^ 0xC49B730F)) {
    BOOL v16 = a1 + 319880890 < v15;
  }
  return (*(uint64_t (**)(void))(v13 + 8 * (!v16 | v14)))();
}

uint64_t sub_100036898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((*(_DWORD *)(v7 + 72) == a5)
                                * ((11 * ((596 * (v5 ^ 0x224)) ^ 0x4B5)) ^ (596 * (v5 ^ 0x224) - 430))) ^ (596 * (v5 ^ 0x224)))))();
}

uint64_t sub_1000368EC()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((28 * (((v0 == v1) ^ (v2 - 13)) & 1)) ^ v2)))();
}

uint64_t sub_100036928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v12 = *(unsigned char *)(a1 + (v6 ^ v8) + v9 + v5);
  *(unsigned char *)(a5 + v7) = v12 - ((2 * v12) & 0xEF) + 119;
  return (*(uint64_t (**)(void))(v11 + 8 * (((v7 != 63) * v10) ^ v6)))();
}

uint64_t sub_100036974(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v4
                              + 8 * (((((a2 + 1) & 0x7FFFFFE0) == v3) | (16 * (((a2 + 1) & 0x7FFFFFE0) == v3))) ^ v2)))();
}

uint64_t sub_100036A54@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((*(void *)(v1 + 16) == 0) * ((a1 ^ 0x74A) + 385)) ^ a1 ^ 0x74A)))();
}

uint64_t sub_100036AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = v11 + ((2 * v10) ^ 0x7Eu) - 3246;
  STACK[0x508] = v12;
  LODWORD(STACK[0x4AC]) = v9;
  LODWORD(STACK[0x2A0]) = STACK[0x4DC];
  LODWORD(STACK[0x298]) = STACK[0x53C];
  uint64_t v13 = (char *)&a9 + v12 - 0x2C2F364FA24C4B49;
  STACK[0x260] = (unint64_t)(v13 + 2048);
  STACK[0x288] = (unint64_t)(v13 + 2176);
  STACK[0x2C8] = (unint64_t)v13;
  STACK[0x290] = (unint64_t)(v13 + 2304);
  LODWORD(STACK[0x2C0]) = -395483150;
  return sub_100065AF8();
}

uint64_t sub_100036B3C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v12 = (v7 - 1065286766 + v6 + 326 - v8);
  int8x8_t v13 = vrev64_s8(*(int8x8_t *)(v4 - 7 + v12));
  *(int8x8_t *)(v3 - 7 + v12) = vrev64_s8(vadd_s8(vsub_s8(v13, vand_s8(vadd_s8(v13, v13), v10)), v11));
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((490
                                * ((((a3 ^ 0xEA) + 79) ^ (((a3 ^ 0xFFFFFED4) & v5) - v8 == 8)) & 1)) ^ a3 ^ 0x1EA)))();
}

uint64_t sub_100036BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  LOBYTE(STACK[0x28C]) = *(unsigned char *)(a8 + v10);
  BOOL v12 = v9 + a6 + v8 + ((v8 + 1145) ^ 6u) > 3;
  return (*(uint64_t (**)(void))(v11 + 8 * (((2 * v12) | (4 * v12)) ^ (v8 + 1145))))();
}

uint64_t sub_100036C08()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((124 * (v0 - 100 < ((v1 + 160) ^ (v1 + 28)))) ^ v1)))();
}

uint64_t sub_100036C40(uint64_t a1, int a2)
{
  BOOL v5 = v3 < v2;
  unint64_t v6 = ((389 * (a2 ^ 0x267u)) ^ 0xA2C6920EBFB5B0CDLL) + a1;
  uint64_t v7 = a1 + 1;
  int v8 = v5 ^ (v6 < v2);
  BOOL v9 = v6 < v3;
  if (!v8) {
    BOOL v5 = v9;
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 8 * ((15 * v5) ^ a2)))(v7);
}

uint64_t sub_100036CB0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  int v58 = v55 ^ (a2 + 108);
  *(_DWORD *)uint64_t v57 = 0x80000000;
  (*(void (**)(uint64_t))(v56 + 8 * (v55 ^ 0x901)))(a33);
  int8x16_t v59 = (int8x16_t)vld1q_dup_f32((const float *)v57);
  v60.i64[0] = 0x8000000080000000;
  v60.i64[1] = 0x8000000080000000;
  v61.i64[0] = *(void *)(v57 + 4);
  v61.i32[2] = *(_DWORD *)(v57 + 12);
  int8x16_t v62 = vextq_s8(v59, v61, 0xCuLL);
  int8x16_t v63 = v61;
  v63.i32[3] = *(_DWORD *)(v57 + 16);
  int32x4_t v64 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v63, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), vandq_s8(v62, v60)), 1uLL), *(int8x16_t *)(v57 + 4 * ((v58 - 1340331192) ^ 0x42)));
  v62.i32[0] = *((_DWORD *)&a55 + (*(_DWORD *)(v57 + 4) & 1));
  v62.i32[1] = *((_DWORD *)&a55 + (*(_DWORD *)(v57 + 8) & 1));
  v62.i32[2] = *((_DWORD *)&a55 + (*(_DWORD *)(v57 + 12) & 1));
  v62.i32[3] = *((_DWORD *)&a55 + (v63.i8[12] & 1));
  *(int8x16_t *)uint64_t v57 = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v64, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v64, v64), (int8x16_t)vdupq_n_s32(0x7CDE2A3Eu))), vdupq_n_s32(0xBE6F151F)), v62);
  return (*(uint64_t (**)(void))(v56 + 8 * (v58 - 1340330491)))();
}

uint64_t sub_100036E14@<X0>(uint64_t a1@<X8>)
{
  return 0;
}

uint64_t sub_100036E2C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, _DWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  int v25 = v19 - 852;
  int v22 = 235795823 * ((2 * ((v21 - 136) & 0x7FA36D20) - (v21 - 136) + 6066909) ^ 0x94F1DB84);
  *(_DWORD *)(v21 - 128) = ((((a1 - 948434098) & 0xFFFFFFF0) + 16) ^ 0x9FF6D686)
                         - v22
                         + ((2 * (((a1 - 948434098) & 0xFFFFFFF0) + 16)) & 0x3FEDAD00)
                         + 1996091392;
  *(void *)(v21 - 120) = a19;
  *(_DWORD *)(v21 - 136) = a1 - a13 - v22 + ((v19 + 705) ^ 0x7E9) + 446514157;
  *(_DWORD *)(v21 - 132) = (v19 + 1028) ^ v22;
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(v20 + 8 * (v19 + 1109)))(v21 - 136);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((1771 * (*a14 == -563355418)) ^ v25)))(v23);
}

uint64_t sub_100036F44(int a1, int a2, uint64_t a3, int a4, int a5, int a6, unint64_t a7)
{
  int v16 = v11 + 1;
  uint64_t v17 = 4 * (v16 + a4);
  unint64_t v18 = (*(_DWORD *)(*v10 + v17) ^ v9) + HIDWORD(a7);
  *(_DWORD *)(*v10 + v17) = v18 + v13 - ((v15 + (v12 | a1) - 1896) & (2 * v18));
  BOOL v19 = v16 + a5 < v8;
  if (v8 < v7 != v16 + a5 < v7) {
    BOOL v19 = v8 < v7;
  }
  return (*(uint64_t (**)(void))(v14 + 8 * ((v19 * a6) ^ a2)))();
}

uint64_t sub_100036F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x55D5CC6D86BC0F2F];
  a14 = (831981571 * (((&a13 | 0x5366F27) + (~&a13 | 0xFAC990D8)) ^ 0x9C97BF02)) ^ 0x8F;
  uint64_t v17 = (*(uint64_t (**)(unint64_t **))(v16 + 18816))(&a13);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((3013 * (a15 == v15)) ^ 0x2F2u)))(v17);
}

uint64_t sub_100036FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v28 - 144) = a25;
  *(void *)(v28 - 136) = a23;
  *(_DWORD *)(v28 - 112) = v26 - ((v28 - 144) ^ 0xF2B3FDD7) * v25 + 40;
  *(void *)(v28 - 104) = a18;
  *(void *)(v28 - 128) = a23;
  *(void *)(v28 - 120) = a22;
  (*(void (**)(uint64_t))(v27 + 8 * (v26 ^ 0x94F)))(v28 - 144);
  return sub_10003C79C();
}

uint64_t sub_10003703C()
{
  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8
                                            * ((195
                                              * (v0 - v3 < (((v2 + 172096661) | 0xE0198400) ^ ((unint64_t)((v2 + 1143) ^ 0xFD9u)
                                                                                             + 3931864325u)))) ^ (v2 + 1143))))(v1);
}

uint64_t sub_100037098(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18
                                                                       + 8
                                                                       * ((252
                                                                         * (((((a4 ^ 0xDA5) - v17 - 1993) ^ ((v19 + a7 + a6 + 1) < 8)) & 1) == 0)) ^ a4 ^ 0x28)))(a1, a2, a3, a17);
}

uint64_t sub_1000370F0@<X0>(int a1@<W5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14 = 23 * (a2 ^ 0x90);
  *(_DWORD *)(a8 + 4 * v12) = (v8 ^ 0x811882A1) + v9 - 2 * ((v8 ^ 0x811882A1) & 0x64E2B2AB ^ (v14 - 588) & 0x811882A1);
  BOOL v15 = v10 > 0x2B989B6D;
  if (v15 == v13 + 1116846177 < -731421550) {
    BOOL v15 = v13 + 1116846177 < a1;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((221 * !v15) ^ v14)))();
}

uint64_t sub_100037108()
{
  LODWORD(STACK[0x2A8]) = v0;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((LODWORD(STACK[0x2E4]) - 1704253533 + 478 * (v2 ^ 0x323u) - 3005 > 0xFFFFF7FE)
                                * (((2 * v2) ^ 0x56C) - 735)) ^ v2)))();
}

uint64_t sub_10003715C()
{
  BOOL v3 = (v0 + 243531678) > 0x5A7CCFA7;
  if (v0 + 243531678 < (((v1 + 360) | 0x12) ^ 0x5A7CC9B5u) != (v1 + 1518127887) > 0x5A7CCFA7) {
    BOOL v3 = v0 + 243531678 < (((v1 + 360) | 0x12) ^ 0x5A7CC9B5u);
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((63 * v3) ^ v1)))();
}

uint64_t sub_100037170()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((241 * (v1 + 1 == v2 + 16)) ^ v0)))();
}

uint64_t sub_100037258()
{
  return sub_10004D558();
}

uint64_t sub_10003728C(int a1, int a2, int a3, int8x8_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(int8x8_t *)(a6 + (v7 + a3)) = veor_s8(*(int8x8_t *)(v8 + (v7 + a3)), a4);
  return (*(uint64_t (**)(void))(v9 + 8 * (((a7 + a3 != 8) * a1) ^ a2)))();
}

uint64_t sub_1000372C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,unsigned int *a63)
{
  (*(void (**)(void, unint64_t *, uint64_t))(v63 + 8 * (v65 + 1441)))(*a63, &STACK[0x338], 2048);
  uint64_t v66 = *(uint64_t (**)(void))(v63
                            + 8
                            * ((((*(unsigned int (**)(void, unint64_t *, void, uint64_t))(v63 + 8 * (v65 + 1533)))(*a63, &STACK[0x3D8], LODWORD(STACK[0x2E4]) + ((2 * v65) ^ 0x456 ^ (v64 - 790)), 1) == 0)* ((661 * (v65 ^ 0x3BE)) ^ 0x146)) ^ v65));
  return v66();
}

uint64_t sub_100037370()
{
  BOOL v4 = v1 + 844508200 < (int)(v2 + 1759539783);
  if (v2 > 0x171F8DB8 != v1 + 844508200 < -387943865) {
    BOOL v4 = v2 > 0x171F8DB8;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((!v4 * ((6 * (v0 ^ 0x584)) ^ 0x3B5)) ^ v0)))();
}

uint64_t sub_1000373F8()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((1845
                                * ((v0 << LODWORD(STACK[0x2A0])) - LODWORD(STACK[0x2B8]) == (((LODWORD(STACK[0x2B0]) - 706) | 0x302) ^ 0x92C86151))) ^ LODWORD(STACK[0x2B0]))))();
}

uint64_t sub_10003744C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((806
                                * (((((v1 ^ 0x2B) + 30) ^ (*(void *)(v0 + 16) == 0x5267DA57ABB8ED88)) & 1) == 0)) ^ v1)))();
}

uint64_t sub_1000374A8@<X0>(int a1@<W8>)
{
  unsigned int v6 = ((2 * (v8 & 0x487604E0) - v8 + 931789599) ^ 0x495CDEE9) * v2;
  uint64_t v9 = v3;
  v8[0] = -1142731271 - (v6 + a1) - ((((v4 + 894650303) & 0x4AACBFEB ^ 0x15DBC58B) - v5) & 0x61EACE10);
  v8[1] = v6 + v4 + 1181;
  return (*(uint64_t (**)(_DWORD *))(v1 + 8 * (v4 + 2106)))(v8);
}

uint64_t sub_100037570@<X0>(int a1@<W1>, unsigned int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (a1 | (4 * (a2 < ((a1 - 632) | 0x30C) + ((a1 - 241) ^ 0xFFFFFD5B))))))();
}

uint64_t sub_1000375A8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  int v7 = *(_DWORD *)((char *)&STACK[0x28C] + ((v5 + v2) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + (v5 + v2)) = v7 ^ 0xB2;
  *(unsigned char *)(a1 + (v5 + v2 + 1)) = 19 * (v3 ^ 0xCB)
                                               + (BYTE1(v7) ^ 0xA1)
                                               - ((2 * (BYTE1(v7) ^ 0xA1)) & 0xEF)
                                               + 62;
  *(unsigned char *)(a1 + (v5 + v2 + 2)) = (BYTE2(v7) ^ 0x43) - ((2 * (BYTE2(v7) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v5 + v2 + 3)) = (HIBYTE(v7) ^ 0x58) - ((2 * (HIBYTE(v7) ^ 0x58)) & 0xEF) + 119;
  unsigned int v8 = LODWORD(STACK[0x2E8]) - 1579562589;
  BOOL v9 = v8 < a2;
  BOOL v10 = v5 - 731623592 < v8;
  if (v5 - 731623592 < a2 != v9) {
    BOOL v10 = v9;
  }
  return (*(uint64_t (**)(void))(v6 + 8 * ((v10 * v4) ^ v3)))();
}

uint64_t sub_100037694(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((((a6 - 1396504762) & 0x533CF59E ^ 0x465) * ((a4 + a3 - 737045492) < 8)) ^ a6)))();
}

uint64_t sub_1000376F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(v67 + 14376))(a1, a2, a3, a4, a5, 2854199772, 1440767523, a8, a9, &a67);
}

uint64_t sub_10003781C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((242
                                * (((v5 < 0x20) ^ (((-81 * (a5 ^ 0x15)) ^ 0x75)
                                                                  + ((-81 * (a5 ^ 0x15)) ^ 0x5D)
                                                                  + 1)) & 1)) ^ (431 * (a5 ^ 0x515)))))();
}

uint64_t sub_100037870(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = *(uint64_t (**)(void))(v7 + 8 * (v8 - 1969));
  uint64_t v12 = *v9;
  unsigned int v13 = v3 + 4 + v5;
  *(unsigned char *)(*v9 + v13) = (v10 ^ ((a3 + 4) >> 24))
                        - ((2 * (v10 ^ ((a3 + 4) >> 24))) & 0xEF)
                        + 119;
  *(unsigned char *)(v12 + v13 + 1) = (((a3 + 4) >> 16) ^ 0x18)
                            - ((2 * (((a3 + 4) >> 16) ^ 0x18)) & 0xEF)
                            + 119;
  *(unsigned char *)(v12 + v13 + 2) = (v6 ^ ((unsigned __int16)(a3 + 4) >> 8))
                            - ((2 * (v6 ^ ((unsigned __int16)(a3 + 4) >> 8))) & 0xEF)
                            + 119;
  *(unsigned char *)(v12 + v13 + 3) = (a3 + 4) ^ v4;
  return v11();
}

uint64_t sub_1000378FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)(v27 - 128) = v25;
  *(void *)(v27 - 112) = a23;
  *(_DWORD *)(v27 - 104) = (v24 + 326) ^ (((~((v27 - 128) | 0xA0F37DE4) + ((v27 - 128) & 0xA0F37DE4)) ^ 0x8CAED011) * v26);
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v23 + 8 * (v24 + 1607)))(v27 - 128);
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8
                                            * (int)((((*(_DWORD *)(v27 - 120) - 1961907323) < 0xB8579690)
                                                   * ((v24 + 760363822) & 0xD2ADC5E5 ^ 0x466)) | v24)))(v28);
}

uint64_t sub_1000379B4@<X0>(int a1@<W1>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((((((a1 + 2023538513) & 0x87633FB9 ^ 0x1B1) & a2) == 0)
                                     * ((a1 + 1097910609) & 0xBE8F373E ^ 0x52D)) ^ a1)))();
}

uint64_t sub_100037A14()
{
  unsigned int v4 = ((v2 + v1 + 311 - 700) ^ v0)
     + ((v1 + 1744795190) & 0xFFC2CFF6 ^ 0x71E0D670)
     - ((2 * ((v2 + v1 + 311 - 700) ^ v0)) & 0x2C452384);
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((54 * (((2 * v4) & 0x7A6F5CF8 ^ 0x28450080) + (v4 ^ 0x2B153FBE) - 86016540 != 941042784)) ^ v1)))();
}

uint64_t sub_100037AB8(uint64_t a1, int a2)
{
  BOOL v5 = v2 + v3 + (((a2 - 151) | 0x403) ^ 0xC2C85673) < ((a2 + 106171244) & 0xF9ABF09F ^ 0x9F);
  return (*(uint64_t (**)(void))(v4 + 8 * (((8 * v5) | (32 * v5)) ^ a2)))();
}

uint64_t sub_100037B28@<X0>(int a1@<W8>)
{
  unsigned int v4 = ((a1 - 532815146) & 0x1FC21563) + v3 + 1443919288;
  BOOL v5 = v1 - 2081814454 < v4;
  if ((v1 - 2081814454) < 0xBBA54F77 != v4 < 0xBBA54F77) {
    BOOL v5 = v4 < 0xBBA54F77;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((21 * !v5) ^ a1)))();
}

uint64_t sub_100037BA8@<X0>(int a1@<W3>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  int v54 = (unsigned int *)(v53 + 4 * v49);
  unsigned int v55 = v50 & 0x80000000;
  uint64_t v56 = v49 + 1;
  int v57 = *(_DWORD *)(v53 + 4 * v56);
  unsigned int v58 = v54[397] ^ ((v57 & 0x7FFFFFFE | v55) >> 1);
  *int v54 = (v58 + v51 - (((a2 - 53) ^ (a1 + 358)) & (2 * v58))) ^ *((_DWORD *)&a49 + (v57 & 1));
  return (*(uint64_t (**)(void))(v52 + 8 * (((4 * (v56 != 227)) | (32 * (v56 != 227))) ^ a2)))();
}

uint64_t sub_100037C14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((((v2 + 1887288225) & 0x8F8241CE ^ 0x31C) + 1540) ^ 0x842)
                                     * ((unint64_t)(v1 - a1) < 0x20)) ^ (v2 + 1887288225) & 0x8F8241CE)))();
}

uint64_t sub_100037C64(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((4088 * (v3 - v4 - (unint64_t)(a3 - 1888) + 147 < 0x20)) ^ a3)))();
}

uint64_t sub_100037C98(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)a1 - 0x5E8E72AB319E4285);
  int v4 = v2 - 1758911813;
  BOOL v3 = v2 - 1758911813 < 0;
  int v5 = 1758911813 - v2;
  if (!v3) {
    int v5 = v4;
  }
  int v1 = *(_DWORD *)(a1 + 12) + 460628867 * ((((2 * a1) | 0x5510E07A) - a1 - 713584701) ^ 0x661EF240) + 2;
  return (*(uint64_t (**)(void))((char *)*(&off_10018D100 + v1 - 612)
                              + 8
                              * ((1695
                                * ((v5 ^ 0xB7DFDF9F) + 1210064992 + ((v1 ^ 0x6FBFBD9F) & (2 * v5)) < ((v1 - 813361890) & 0x307AEADFu) + 2147482976)) ^ v1)
                              - 4))();
}

uint64_t sub_100037DB4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((((v8 & (2 * (*(unsigned __int8 *)(a2 + 6) - 44)))
                                 + ((*(unsigned __int8 *)(a2 + 6) - 44) ^ v7) == v7)
                                * (a4 ^ (v4 - 1481))) ^ v6)))();
}

uint64_t sub_100037DF0()
{
  int v5 = ((v3 - 1457) | 0x15D) + *(unsigned __int8 *)(v2 + 2) - 421;
  return (*(uint64_t (**)(void))(v4 + 8 * ((637 * (((v5 << ((v3 + 36) ^ 0xD4)) & v1) + (v5 ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_100037E48(uint64_t a1)
{
  int v3 = (*(uint64_t (**)(void))(v1 + 19240))();
  if (v3 == 16) {
    unsigned int v4 = -42029;
  }
  else {
    unsigned int v4 = -42030;
  }
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(v1 + 19368))(a1);
  return v5;
}

uint64_t sub_100037E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int a22)
{
  int v28 = v27 - 56;
  unsigned int v29 = 69008221 * ((&a19 & 0x60EEFFDA | ~(&a19 | 0x60EEFFDA)) ^ 0x4CB3522F);
  HIDWORD(a20) = v29 + v28 + 1693;
  a22 = v29 ^ ((v25 ^ 0xFD79BDAC) + 332852216 + ((2 * v25) & 0xFAF37B58));
  a21 = a14;
  a19 = v24;
  (*(void (**)(uint64_t *))(v26 + 8 * (v28 + 1798)))(&a19);
  unsigned int v30 = 1224239923 * ((25684038 - (&a19 | 0x187E846) + (&a19 | 0xFE7817B9)) ^ 0xCCBEA6E);
  LODWORD(a19) = (*v23 ^ 0x6F7E9F79) - v30 + ((*v23 << (((v28 - 40) | 0x80) ^ 0xC1)) & 0xDEFD3EF2) - 125700353;
  LODWORD(a21) = (v28 + 335) ^ v30;
  a20 = a14;
  (*(void (**)(uint64_t *))(v26 + 8 * (v28 ^ 0xBFD)))(&a19);
  int v31 = *v22 ^ 0x7FB9967D;
  unsigned int v32 = (2 * *v22) & 0xFF732CFA;
  unsigned int v33 = 1224239923 * ((((2 * &a19) | 0xC43AEF80) - &a19 + 501385280) ^ 0x10AE8A17);
  LODWORD(a21) = (v28 + 335) ^ v33;
  a20 = a14;
  LODWORD(a19) = v31 - v33 + v32 - 398000133;
  uint64_t v34 = (*(uint64_t (**)(uint64_t *))(v26 + 8 * (v28 + 1837)))(&a19);
  return (*(uint64_t (**)(uint64_t))(v26 + 8 * ((1697 * (HIDWORD(a19) == -563355418)) ^ v28)))(v34);
}

uint64_t sub_100038098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)(a5 + v7 + a2) = v9;
  return (*(uint64_t (**)(void))(v10 + 8 * ((((unint64_t)(v7 + a2 + v6 - 56) < 0x38) * v8) | v5)))();
}

uint64_t sub_1000380C8@<X0>(int a1@<W7>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((v8 + ((a2 + v4) & v5) - 2080 == ((a2 + a1) & v2 ^ v6)) * v7) ^ a2)))();
}

uint64_t sub_100038104(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))*(&off_1001882B0 + ((22 * (*(_DWORD *)(a2 + 4) != 1704253534)) ^ 0x487u)))();
}

uint64_t sub_100038140@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x250]) = v3;
  LODWORD(STACK[0x1838]) = v4;
  LODWORD(STACK[0x183C]) = 1367427329;
  int v6 = *(_DWORD **)(v1 + 8 * (a1 ^ 0x323));
  STACK[0x240] = (unint64_t)v6;
  LODWORD(STACK[0x504]) = *v6;
  int v7 = *(unsigned int **)(v1 + 8 * ((a1 ^ 0x2F) - 804));
  STACK[0x288] = (unint64_t)v7;
  uint64_t v8 = *v7;
  unint64_t v9 = 235795823 * ((0x621F11AEB51988FCLL - ((v5 - 192) | 0x621F11AEB51988FCLL) + STACK[0x238]) ^ 0x955054AFDE4B3E5ALL);
  int v10 = ((a1 ^ 0x2F) - 857891782) ^ v9;
  *(_DWORD *)(v5 - 192) = -235795823 * ((-1256617732 - ((v5 - 192) | 0xB51988FC) + LODWORD(STACK[0x238])) ^ 0xDE4B3E5A);
  *(void *)(v5 - 184) = -(uint64_t)v9;
  *(_DWORD *)(v5 - 176) = v10;
  *(_DWORD *)(v5 - 172) = ((a1 ^ 0x2F) + 2021362963) ^ v9;
  *(void *)(v5 - 168) = v8 - v9;
  *(_DWORD *)(v5 - 160) = (a1 ^ 0x2F) - 857891782 - v9 - 96;
  *(_DWORD *)(v5 - 156) = v10 ^ 0xF;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v2 + 8 * ((a1 ^ 0x2F) + 1603)))(v5 - 192);
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * *(int *)(v5 - 188)))(v11);
}

uint64_t sub_100038244@<X0>(int a1@<W0>, char a2@<W2>, int a3@<W6>, int a4@<W8>)
{
  *(unsigned char *)(v5 + v4) = *(unsigned char *)(v8 + (a4 + a1))
                      + (a2 ^ (2 * *(unsigned char *)(v8 + (a4 + a1))) | 0x11)
                      + 120;
  return (*(uint64_t (**)(void))(v7 + 8 * ((2 * (v4 == 63)) | ((v4 == 63) << 8) | (a3 + v6 + 1511))))();
}

uint64_t sub_100038294()
{
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v2
                                                                                + 8 * ((v1 | 0x109) ^ (45 * (v0 > 1)))))(831158450, 0xFEF02AA3466616EFLL, 4277152419, 3463808846);
}

void sub_100038460(uint64_t a1)
{
  BOOL v4 = *(void *)(a1 + 8) == 0x6BA7059072F2C1D3
    || *(void *)(a1 + 32) == 0x296CA2447D59DC54
    || *(void *)(a1 + 24) == 0x5122BBEDD94E300FLL;
  int v1 = *(_DWORD *)(a1 + 16) ^ (69008221 * ((~a1 & 0xFA1A7A5E | a1 & 0x5E585A1) ^ 0x29B82854));
  __asm { BRAA            X9, X17 }
}

uint64_t sub_100038570(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (v4 - 1718889655) & 0x66742BC7;
  BOOL v8 = v3 + 1153485646 > ((v6 + 185) ^ 0x2D97AC12) || v3 + 1153485646 < a3 + v6 - 1382570804;
  return (*(uint64_t (**)(void))(v5 + 8 * ((1525 * v8) ^ v6)))();
}

uint64_t sub_1000385F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11
                                                     + 8
                                                     * (((((v9 == v8) ^ (v10 + 83)) & 1)
                                                       * (a6 + v10 - 336 + a8)) | v10)))(a1, 4432325);
}

uint64_t sub_10003864C@<X0>(int a1@<W8>)
{
  int *v3 = v9 ^ v4;
  int v5 = ((a1 & 0x29AB4FB7) - 1168) | 0x2B;
  uint64_t v11 = v8;
  unsigned int v10 = ((a1 & 0x29AB4FB7) - 2015) ^ (69008221
                                    * ((((&v10 | 0x475A7F8C) ^ 0xFFFFFFFE)
                                      - (~&v10 | 0xB8A58073)) ^ 0x6B07D279));
  (*(void (**)(unsigned int *))(v2 + 8 * (a1 & 0x29AB4FB7 ^ 0x18Bu)))(&v10);
  uint64_t v11 = v7;
  unsigned int v10 = (v5 - 890) ^ (69008221 * ((&v10 & 0x83CD08BF | ~(&v10 | 0x83CD08BF)) ^ 0xAF90A54A));
  uint64_t result = (*(uint64_t (**)(unsigned int *))(v2 + 8 * (v5 + 1264)))(&v10);
  *(_DWORD *)(v1 + 24) = -563355418;
  return result;
}

uint64_t sub_100038780@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unint64_t a5@<X8>)
{
  uint64_t v9 = (a2 + a1 + a3);
  unint64_t v10 = v9 + a5 + 1;
  uint64_t v11 = (a2 + a1) & 0xF;
  uint64_t v12 = v11 - v9;
  unint64_t v13 = v6 + v12;
  unint64_t v14 = v6 + (((a4 - 1559) | 0x2C9u) ^ 0x3C8) + v11;
  unint64_t v15 = v12 + v7 + 2;
  unint64_t v16 = v11 + v7 + 3;
  unint64_t v17 = v12 + v5 + 4;
  unint64_t v18 = v11 + ((a4 - 1534266776) & 0x5B730EB7) + v5 - 2098;
  BOOL v20 = v16 > a5 && v15 < v10;
  int v22 = v13 < v10 && v14 > a5 || v20;
  if (v17 < v10 && v18 > a5) {
    int v24 = 1;
  }
  else {
    int v24 = v22;
  }
  return (*(uint64_t (**)(void))(v8 + 8 * ((49 * (v24 ^ 1)) ^ a4)))();
}

uint64_t sub_100038838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  unsigned int v19 = 1224239923
      * ((((&a13 | 0x5C26CAC4) ^ 0xFFFFFFFE) - (~&a13 | 0xA3D9353B)) ^ 0x516AC8EC);
  a16 = v19 ^ 0x3B7;
  a15 = a10;
  a13 = (v16 ^ 0xEBBCDE78) + ((2 * v16) & 0xD779BCF0) - v19 + 2084812800;
  uint64_t v20 = (*(uint64_t (**)(unsigned int *))(v18 + 19624))(&a13);
  return (*(uint64_t (**)(uint64_t))(v18 + 8 * ((3349 * (a14 == v17)) ^ 0x500u)))(v20);
}

uint64_t sub_10003891C@<X0>(uint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,unsigned int *a57)
{
  uint64_t v58 = (*(uint64_t (**)(void, uint64_t, void))(v57 + 8 * (a2 + 1410)))(*a57, a1, LODWORD(STACK[0x500]));
  return sub_100038944(v58);
}

uint64_t sub_100038944()
{
  *(_DWORD *)(v3 - 192) = (v0 + 2138962546) ^ (69008221 * ((v3 - 192) ^ 0xD3A2520A));
  uint64_t result = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 + 1666)))(v3 - 192);
  _DWORD *v2 = v5;
  return result;
}

void sub_1000389D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(_DWORD *)(v27 - 112) = v25
                         - ((-1089388878 - ((v27 - 144) | 0xBF113EB2) + ((v27 - 144) | 0x40EEC14D)) ^ 0xB25D3C9A) * v26
                         + 243;
  *(void *)(v27 - 104) = a13;
  *(void *)(v27 - 128) = a23;
  *(void *)(v27 - 120) = a22;
  *(void *)(v27 - 144) = a25;
  *(void *)(v27 - 136) = a23;
  JUMPOUT(0x100037024);
}

void sub_100038A48()
{
  if (v0 == 1810274106) {
    int v1 = -563355418;
  }
  else {
    int v1 = 563395390;
  }
  *(_DWORD *)(v2 + 32) = v1;
}

uint64_t sub_100038AAC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  return (*(uint64_t (**)(void))(v12
                              + 8
                              * (int)(((((((a1 + 330497681) ^ 0x13B3040A) - 505) & (v13 - 1704253530)) - a12 == -1704253534)
                                     * ((a1 + 330497681) & 0xEC4CFBF5 ^ 0x1EE)) ^ a1)))();
}

uint64_t sub_100038B10()
{
  return v0();
}

uint64_t sub_100038B18@<X0>(int a1@<W8>)
{
  uint64_t v5 = (a1 + 1039538008) & 0xC209E6FF;
  LODWORD(STACK[0x53C]) = STACK[0x298];
  LODWORD(STACK[0x4DC]) = STACK[0x2A0];
  STACK[0x2E8] = STACK[0x260];
  STACK[0x3E8] = STACK[0x288];
  STACK[0x488] = STACK[0x290];
  *(_DWORD *)(v1 + 52) += (v5 + 120033529) & 0xF8D86FFF ^ 0x7F9;
  LODWORD(STACK[0x47C]) = *(_DWORD *)(v1 + 360);
  STACK[0x508] = (v5 ^ 0xFFFFFFFFFFFFF07FLL) + (v5 ^ 0xF7F) + v2;
  LODWORD(STACK[0x4AC]) = v4;
  LODWORD(STACK[0x2A0]) = STACK[0x4DC];
  LODWORD(STACK[0x298]) = STACK[0x53C];
  return (*(uint64_t (**)(void))(v3 + 8 * (int)((478 * (STACK[0x3C8] == 0)) ^ v5)))();
}

uint64_t sub_100038B6C@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(v5 + (v6 + a3)) = *(_OWORD *)(a4 + a3);
  return (*(uint64_t (**)(void))(v7 + 8 * (((((a1 == a3) ^ a2) & 1) * v8) ^ v4)))();
}

uint64_t sub_100038BA0()
{
  int v5 = v3 - 533 + *(unsigned __int8 *)(v2 + 6) - 366;
  return (*(uint64_t (**)(void))(v4 + 8 * ((1295 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_100038BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v16 - 136) = v14;
  *(void *)(v16 - 120) = a13;
  *(_DWORD *)(v16 - 128) = v15
                         + 831981571 * (((v16 - 136) & 0xF66E908A | ~((v16 - 136) | 0xF66E908A)) ^ 0x9030BF51)
                         + 633;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v13 + 8 * (v15 + 1366)))(v16 - 136);
  return (*(uint64_t (**)(uint64_t))(v13 + 8 * ((3186 * (a10 < (v15 ^ 0x5E4) + v15 - 14 - 1525)) ^ v15)))(v17);
}

uint64_t sub_100038C88@<X0>(uint64_t a1@<X3>, int a2@<W8>, int8x16_t a3@<Q0>)
{
  uint64_t v11 = v10 - 32 + (v8 ^ (a2 + 387));
  uint64_t v12 = v4 + v11;
  int8x16_t v13 = veorq_s8(*(int8x16_t *)(a1 + v11 - 31), a3);
  *(int8x16_t *)(v12 - 15) = veorq_s8(*(int8x16_t *)(a1 + v11 - 15), a3);
  *(int8x16_t *)(v12 - 31) = v13;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v6 == 32) * v9) ^ (v3 + v5 + 402))))();
}

uint64_t sub_100038C94@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((201
                                * (*(unsigned __int8 *)(v1 + (v3 - 1704253534)) == ((a1 - 1687790050) & 0xDA ^ 0x2D))) ^ a1)))();
}

uint64_t sub_100038CFC@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W8>)
{
  *(unsigned char *)(v7 + (v8 + v6 + 1053)) = *(unsigned char *)(v9 + (v8 + v6 + 1053));
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * ((((((v5 ^ 2) * a3) ^ a4) + v6 == ((3 * (((v5 ^ 2) * a3) ^ a1)) ^ a5))
                                * ((2 * (v5 ^ 2) * a3) ^ a2)) ^ ((v5 ^ 2) * a3 + 442))))();
}

uint64_t sub_100038D58()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((548
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                 + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == ((v2 + 619701776) & 0xDB1019FF ^ (v0 - 365)))) ^ v2)))();
}

void sub_100038DAC(_DWORD *a1@<X8>)
{
  uint64_t v4 = *(void *)v1 ^ v2;
  unsigned char *v5 = (HIBYTE(v4) ^ 0x6C) + ((2 * (HIBYTE(v4) ^ 0x6C)) & 0xEF ^ (3 * (v3 ^ 0xA8) - 36)) + 120;
  v5[1] = (BYTE6(v4) ^ 0x63) + (~(2 * (BYTE6(v4) ^ 0x63)) | 0x11) + 120;
  v5[2] = (BYTE5(v4) ^ 0xE4) - ((2 * (BYTE5(v4) ^ 0xE4)) & 0xEF) + 119;
  v5[3] = (BYTE4(v4) ^ 0x78) - ((2 * (BYTE4(v4) ^ 0x78)) & 0xEF) + 119;
  v5[4] = (BYTE3(v4) ^ 0xA2) - ((2 * (BYTE3(v4) ^ 0xA2)) & 0xEF) + 119;
  void v5[5] = (BYTE2(v4) ^ 0x51) - ((2 * (BYTE2(v4) ^ 0x51)) & 0xEF) + 119;
  v5[6] = (BYTE1(v4) ^ 0xD1) - ((2 * (BYTE1(v4) ^ 0xD1)) & 0xEF) + 119;
  v5[7] = v4 ^ 0x4D;
  *(_DWORD *)(v1 + 12) = *a1;
}

uint64_t sub_100038EF8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v31 = a8 + 1;
  *(unsigned char *)(v27 + ((a4 ^ (v22 + 119)) & (v31 + v23))) = *(unsigned char *)(a22 + v30 + v25)
                                                       + (v26 ^ (2 * *(unsigned char *)(a22 + v30 + v25)) | 0x11)
                                                       + 120;
  unsigned int v32 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * ((((a6 + v31 + 1) < 0x40) * v28) ^ v24));
  return v32(v32, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100038F00()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((1010 * (unk_1001B99E8 == 0)) ^ 0x1F8)))();
}

uint64_t sub_100038F40@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = v2;
  *(_DWORD *)(result + 24) = 563395539;
  return result;
}

uint64_t sub_100038F5C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((a1 ^ 0x11u) < ((v1 + 1779656034) & 0x95EC96E7) - 670) * ((v1 - 95) ^ 0x53B)) ^ v1)))();
}

uint64_t sub_100038FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,char a38)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v41
                                                             + 8
                                                             * ((1809 * ((((v38 - 832) | 0x42) ^ (v40 + 1207)) + v39 < 4)) ^ v38)))(a1, a2, &a38);
}

void sub_100038FF4(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (2078219279 * (((a1 | 0x2CA10C87) - (a1 & 0x2CA10C87)) ^ 0xF65B9AF3));
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 - 0x5E8E72AB319E4285) - 1758911813 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x5E8E72AB319E4285) - 1758911813;
  }
  else {
    unsigned int v4 = 1758911813 - *(_DWORD *)(v2 - 0x5E8E72AB319E4285);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v3 - 0x5E8E72AB319E4285) - 1758911813 >= 0) {
    unsigned int v5 = *(_DWORD *)(v3 - 0x5E8E72AB319E4285) - 1758911813;
  }
  else {
    unsigned int v5 = 1758911813 - *(_DWORD *)(v3 - 0x5E8E72AB319E4285);
  }
  v8[1] = v1 - 1224239923 * ((v8 - 1649905341 - 2 * (v8 & 0x9DA87143)) ^ 0x6F1B8C94) - 463;
  uint64_t v9 = v2;
  int v6 = (char *)*(&off_10018D100 + v1 - 1135) - 4;
  (*(void (**)(_DWORD *))&v6[8 * (v1 ^ 0xD9F)])(v8);
  if (v4 >= v5) {
    unsigned int v7 = v5;
  }
  else {
    unsigned int v7 = v4;
  }
  __asm { BRAA            X12, X17 }
}

uint64_t sub_100039198@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v5 = (v3 - 320);
  int8x8_t v6 = vrev64_s8(*(int8x8_t *)(a2 + v5 - 7));
  *(int8x8_t *)(a1 - 7 + v5) = vrev64_s8(vadd_s8(vsub_s8(v6, vand_s8(vadd_s8(v6, v6), (int8x8_t)0xEEEEEEEEEEEEEEEELL)), (int8x8_t)0x7777777777777777));
  return (*(uint64_t (**)(void))(v4 + 8 * ((77 * (((v2 + 393) ^ 0x5E7) == 328)) ^ (v2 - 635))))();
}

uint64_t sub_100039204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,uint64_t a63)
{
  STACK[0x288] = ((unint64_t)&STACK[0x3E0] ^ 0x738A76FFF763F96DLL)
               - 0x260A5C2001804
               + ((2 * (void)&STACK[0x3E0]) & 0xE714EDFFEEC7F2D0);
  unint64_t v75 = STACK[0x290];
  STACK[0x238] = STACK[0x290] + 49;
  STACK[0x220] = v73 + 49;
  STACK[0x200] = v75 + 29;
  a72 = v75 + 9;
  a73 = v73 + 29;
  a71 = v73 + 9;
  STACK[0x2A8] = (unint64_t)&a9 - 0x2C2F364FA24C4B09;
  LODWORD(STACK[0x298]) = v74 - 782;
  LODWORD(STACK[0x260]) = v74 - 335025367;
  a68 = v74 - 1137795656;
  a66 = 2 * (v74 ^ 0x35F);
  LODWORD(STACK[0x2A0]) = v74 + 951739273;
  *(int32x4_t *)&STACK[0x240] = vdupq_n_s32(0xDE6BE0E6);
  *(int32x4_t *)&STACK[0x250] = vdupq_n_s32(0x5E6BE0F6u);
  LODWORD(STACK[0x2C0]) = v74 ^ 0xA;
  a64 = v74 ^ 0x323;
  a62 = v74 + 1455643005;
  return sub_100043540();
}

uint64_t sub_10003935C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((49 * (a4 + ((2 * ((v4 + 957711010) & 0xC6EA7CFF ^ 0xA7C)) ^ (a3 + 998)) < 0xFFFFFFF0)) ^ (v4 - 7))))();
}

uint64_t sub_1000393B4()
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * ((((v2 + 320) ^ (v4 - 1604) ^ (v4 + v2 - 778)) * (v0 - v1 == 1147951923)) ^ v2)))();
}

uint64_t sub_100039408()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((95 * (v1 < (LODWORD(STACK[0x2D4]) ^ 0x7AF60E3Cu))) ^ (LODWORD(STACK[0x2D4]) - 46))))();
}

uint64_t sub_100039448@<X0>(int a1@<W8>)
{
  BOOL v3 = (a1 ^ (v1 - 895) ^ (v1 - 1530) ^ 0x694) < 8;
  return (*(uint64_t (**)(void))(v2 + 8 * (((2 * v3) | (16 * v3)) ^ v1)))();
}

uint64_t sub_10003948C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,int a52,uint64_t a53,uint64_t a54)
{
  int v57 = (v54 + 540) | 0x100;
  STACK[0x1878] = 0xDC6A836410CFA66BLL;
  STACK[0x1870] = 0x37D4A6B27C52F517;
  int v58 = STACK[0x548];
  LODWORD(STACK[0x47C]) = STACK[0x548];
  int v59 = 944348131 * ((v56 - 192) ^ 0xA319A44E);
  *(void *)(v56 - 128) = &STACK[0x24EBBF705D887860];
  *(void *)(v56 - 184) = a54;
  *(_DWORD *)(v56 - 136) = (2144460849 * v58 - 1553245275) ^ v59;
  *(void *)(v56 - 168) = &STACK[0x5EC77446536A63B6];
  *(void *)(v56 - 160) = &STACK[0x1870];
  *(void *)(v56 - 144) = &STACK[0x7D0C57D6EC0D606A];
  *(_DWORD *)(v56 - 152) = v59 + v57 - 457;
  *(_DWORD *)(v56 - 192) = v59 + a52 - ((2 * a52 - 487618760) & 0xC52B974A) - 737308863;
  uint64_t v60 = (*(uint64_t (**)(uint64_t))(v55 + 8 * (v57 + 1585)))(v56 - 192);
  int v61 = *(_DWORD *)(v56 - 176);
  LODWORD(STACK[0x4AC]) = v61;
  return (*(uint64_t (**)(uint64_t))(v55 + 8 * ((1463 * (v61 == -563355418)) ^ (v57 + 173))))(v60);
}

uint64_t sub_1000394C8@<X0>(int a1@<W0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x200]) = v65 ^ 0x34C;
  unint64_t v70 = STACK[0x2B8];
  *(_DWORD *)(v70 + 392) = a2;
  *(_DWORD *)(v70 + 396) = STACK[0x528];
  *(void *)(v70 + 400) = STACK[0x480];
  *(_DWORD *)(v70 + 408) = 23889152 - v66 + ((v65 - 96) | 0x2E0) + LODWORD(STACK[0x324]) - 738;
  *(void *)(v70 + 416) = STACK[0x2B0] + (v66 - 935020333);
  int v71 = (*(uint64_t (**)(unint64_t, uint64_t))(v68 + v69 * (uint64_t)a1 + 8))(STACK[0x260], a65);
  return (*(uint64_t (**)(uint64_t, __n128))(v67
                                                    + 8
                                                    * (((v71 - 563355418 - ((2 * v71) & 0xBCD7C1CC) == -563355418)
                                                      * (LODWORD(STACK[0x200]) - 389)) ^ v65)))(48, (__n128)0);
}

uint64_t sub_1000395B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,unsigned int *a63)
{
  int v67 = (v63 - 565) | 0x10C;
  (*(void (**)(void, unint64_t, void))(v65 + 8 * ((v63 + 549) ^ 0xF21)))(*a63, STACK[0x4E8], LODWORD(STACK[0x39C]));
  uint64_t v68 = 235795823 * (v64 ^ 0x8B0BAFE94AD4959);
  *(void *)(v66 - 168) = LODWORD(STACK[0x4AC]) - v68;
  *(_DWORD *)(v66 - 192) = -235795823 * (v64 ^ 0x94AD4959);
  *(void *)(v66 - 184) = 563395388 - v68;
  *(_DWORD *)(v66 - 160) = ((v67 + 1248619592) | 0x80) - v68;
  *(_DWORD *)(v66 - 156) = (v67 + 1248619577) ^ v68;
  *(_DWORD *)(v66 - 176) = (v67 + 1248619592) ^ v68;
  *(_DWORD *)(v66 - 172) = (v67 + 2021362963) ^ v68;
  uint64_t v69 = (*(uint64_t (**)(uint64_t))(v65 + 8 * (v67 ^ 0xA5F)))(v66 - 192);
  return (*(uint64_t (**)(uint64_t))(v65 + 8 * *(int *)(v66 - 188)))(v69);
}

uint64_t sub_100039698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x55D5CC6D86BC0F37];
  a14 = (831981571 * (((&a13 | 0x8187B219) - (&a13 & 0x8187B219)) ^ 0x1826623D)) ^ 0x8F;
  uint64_t v18 = (*(uint64_t (**)(unint64_t **))(v16 + 18816))(&a13);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * (int)(((a15 == v15) * ((v17 + 1326) ^ 0xC35E9A66)) ^ 0x2CA)))(v18);
}

uint64_t sub_10003973C(uint64_t a1, uint64_t a2, char a3)
{
  int v3 = LOBYTE(STACK[0x2EC]) ^ 0x89;
  if (v3 == 1)
  {
    unsigned int v8 = STACK[0x2D0];
    unsigned int v9 = STACK[0x2CC];
    LOBYTE(STACK[0x2C4]) = ((8 * LOBYTE(STACK[0x2D0])) ^ 0x70)
                         - ((2 * ((8 * LOBYTE(STACK[0x2D0])) ^ 0x70)) & 0xE0)
                         + 119;
    unsigned int v10 = (v8 >> (((a3 - 25) | 0x41) - 92)) ^ 0xFFFFFFCD;
    LOBYTE(STACK[0x2C5]) = v10 - ((2 * v10) & 0xEF) + 119;
    LOBYTE(STACK[0x2C6]) = ((v8 >> 13) ^ 0x53) - ((2 * ((v8 >> 13) ^ 0x53)) & 0xEF) + 119;
    HIDWORD(v11) = v9 ^ 6;
    LODWORD(v11) = v8 ^ 0x60000000;
    LOBYTE(STACK[0x2C7]) = ((v8 >> 21) ^ 0x65) - ((2 * ((v8 >> 21) ^ 0x65)) & 0xEF) + 119;
    LOBYTE(STACK[0x2C8]) = (v11 >> 29) - ((2 * (v11 >> 29)) & 0xEF) + 119;
    LOBYTE(STACK[0x2C9]) = ((v9 >> 5) ^ 0x1B) - ((2 * ((v9 >> 5) ^ 0x1B)) & 0xEF) + 119;
    LOBYTE(STACK[0x2CA]) = ((v9 >> 13) ^ 0xA8) - ((2 * ((v9 >> 13) ^ 0xA8)) & 0xEF) + 119;
    unsigned int v7 = 118 - (v9 >> 21) - ((2 * ~(v9 >> 21)) & 0xFFFFFFEF);
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    unsigned int v4 = STACK[0x2CC];
    unsigned int v5 = STACK[0x2D0];
    LOBYTE(STACK[0x2C4]) = ((LODWORD(STACK[0x2CC]) >> 20) | 0x11) - (LODWORD(STACK[0x2CC]) >> 21) + 119;
    LOBYTE(STACK[0x2C5]) = ((v4 >> ((a3 + 40) ^ 0x6C)) ^ 0xA8)
                         - ((2 * ((v4 >> ((a3 + 40) ^ 0x6C)) ^ 0xA8)) & 0xEF)
                         + 119;
    HIDWORD(v6) = v4 ^ 6;
    LODWORD(v6) = v5 ^ 0x60000000;
    LOBYTE(STACK[0x2C6]) = ((v4 >> 5) ^ 0x1B) - ((2 * ((v4 >> 5) ^ 0x1B)) & 0xEF) + 119;
    LOBYTE(STACK[0x2C7]) = (v6 >> 29) + (~(2 * (v6 >> 29)) | 0x11) + 120;
    LOBYTE(STACK[0x2C8]) = ((v5 >> 21) ^ 0x65) - ((2 * ((v5 >> 21) ^ 0x65)) & 0xEF) + 119;
    LOBYTE(STACK[0x2C9]) = ((v5 >> 13) ^ 0x53) - ((2 * ((v5 >> 13) ^ 0x53)) & 0xEF) + 119;
    LOBYTE(STACK[0x2CA]) = ((v5 >> 5) ^ 0xCD) - ((2 * ((v5 >> 5) ^ 0xCD)) & 0xEF) + 119;
    unsigned int v7 = ((8 * v5) ^ 0x70) - 32 * (((8 * v5) ^ 0x70) >> 4) + 119;
LABEL_5:
    LOBYTE(STACK[0x2CB]) = v7;
  }
  return sub_100054E4C();
}

uint64_t sub_100039974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  return (*(uint64_t (**)(uint64_t))(v36
                                            + 8 * ((((v35 ^ 0x1E4) + 5 * (v35 ^ 0x508) - 1295) * (v34 == v33)) ^ v35)))(a33);
}

uint64_t sub_1000399C8@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W6>, int a4@<W8>)
{
  int v7 = *(_DWORD *)(v6 + v4 * (uint64_t)a1 + 36);
  BOOL v9 = v7 + 341539994 > a4 - 1064896537 && v7 + 341539994 < SLODWORD(STACK[0x2C0]) && v7 != a3;
  return (*(uint64_t (**)(void))(v5 + 8 * ((195 * (a2 & ~((a4 - 1259) ^ v9))) ^ a4)))();
}

uint64_t sub_100039A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  int v28 = (((v27 - 144) & 0xF81837B4 | ~((v27 - 144) | 0xF81837B4)) ^ 0x9E46186F) * v23;
  *(_DWORD *)(v27 - 136) = v26 - v28 + 844;
  *(_DWORD *)(v27 - 132) = v28 + 517830329;
  *(void *)(v27 - 144) = &a22 + v22;
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v24 + 8 * (v26 + 1757)))(v27 - 144);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * (int)(((((3 * (v26 ^ 0x30F)) ^ 0xFFFFFBF3) + ((v26 + 354) | 0x103))
                                                   * (v25 == 0)) ^ (v26 - 164))))(v29);
}

uint64_t sub_100039AEC()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((85 * (STACK[0x340] == 0)) ^ (v1 - 506))))();
}

uint64_t sub_100039B18@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(unsigned char *)(v3 + a1 + v5 + ((a2 - 565) | 0x202u)) = *(unsigned char *)(a3 + a1 + v5 + ((a2 - 565) | 0x202u));
  return (*(uint64_t (**)(void))(v6 + 8 * ((1979 * (a1 - 1 == v4)) ^ a2)))();
}

uint64_t sub_100039B58@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v39 = 4 * (a1 + 1 + a4);
  unint64_t v40 = (*(_DWORD *)(a25 + v39) ^ v25)
      + ((a3 + (a9 ^ v30) - 544) ^ HIDWORD(a6))
      + a5 * (unint64_t)(*(_DWORD *)(*v26 + v39) ^ v25);
  unint64_t v41 = HIDWORD(v38)
      + v35 * (unint64_t)(*(_DWORD *)(*v36 + v39) ^ v25)
      + ((v40 + a2 - (a8 & (2 * v40))) ^ v37);
  *(_DWORD *)(a25 + 4 * (a1 + a4)) = v41 + v25 - (v31 & (2 * v41));
  BOOL v42 = a1 + v32 < a7;
  if (v28 > v29 != a1 + v32 < v27) {
    BOOL v42 = v28 > v29;
  }
  return (*(uint64_t (**)(void))(v33 + 8 * ((v42 * v34) ^ a9)))();
}

uint64_t sub_100039C1C()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((v0 ^ 0x3D6) * (((v3 - v2) & 0x1F) == 0x19)) ^ v0)))();
}

uint64_t sub_100039C94@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((*(_DWORD *)(a1 + 4 * (v3 + v5 + 1)) == v1)
                                * ((((v2 | 0x432) - 978) | 0x190) ^ 0x2D3)) | ((v2 | 0x432) - 22))))();
}

uint64_t sub_100039CE4(unsigned int a1)
{
  LODWORD(STACK[0x3B8]) = v2;
  return (*(uint64_t (**)(void))(v3
                              + 8 * ((((((v1 & 0x6499A9DA) - 2136) | 0x32C) ^ 0x329) * (a1 < 4)) ^ v1 & 0x6499A9DA)))();
}

uint64_t sub_100039D2C(uint64_t a1, uint64_t a2)
{
  *(void *)(v5 + v4 - 0xB999BAAF556A832 + ((v3 - 565) ^ (unint64_t)(a2 - 450))) = v7;
  return (*(uint64_t (**)(void))(v6 + 8 * ((423 * ((v2 & 0x38) == 8)) ^ v3)))();
}

uint64_t sub_100039D84()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((44 * (v1 + v0 + (((v2 ^ 0xA54) + 208) ^ 0x802832Fu) < 8)) ^ v2)))();
}

uint64_t sub_100039DCC@<X0>(unint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((41 * (a1 > 3)) ^ (v1 - 598192747) & 0x23A7AB17u)))(4145960564);
}

void sub_100039E48(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) + 1543737703 * ((150514792 - (a1 | 0x8F8AC68) + (a1 | 0xF7075397)) ^ 0x89F303EB);
  __asm { BRAA            X15, X17 }
}

uint64_t sub_100039F84(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v11 = v9 + a6;
  if (v11 <= 0x40) {
    unsigned int v11 = 64;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10
                                                                       + 8
                                                                       * (((a1
                                                                          - v7
                                                                          - v8
                                                                          + ((v6 - 1459921970) & 0x57049FF3)
                                                                          + v11 < 0xF)
                                                                         * ((107 * (v6 ^ 0x776)) ^ 0x214)) ^ v6)))(3095667141, a2, a3, 3615489095);
}

uint64_t sub_10003A018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100054E4C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10003A024@<X0>(uint64_t a1@<X8>, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 - 0x3A31F5D96A0DCBB0) = a3;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((*(void *)(v4 + 32) == 0x61DFFFBC86B80B30)
                                * (((((v3 ^ 0x3B6) - 771) | 0x80) + 2) ^ (58 * (((v3 ^ 0x3B6) + 914) ^ 0x7ED)))) ^ ((v3 ^ 0x3B6) + 914))))();
}

uint64_t sub_10003A0A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v10 = v2 - 1313839094;
  int v11 = v2 - 1;
  int v12 = *(unsigned __int8 *)(v7 + v10);
  if (v12 == 119) {
    __asm { BRAA            X11, X17 }
  }
  if (v12 == 247)
  {
    int v13 = -563355418;
    uint64_t v14 = *(void *)(v4 + 16);
    int v15 = (*(unsigned char *)(v4 + 8) + v5);
    *(void *)uint64_t result = v7;
    *(_DWORD *)(result + 8) = v6;
    *(_DWORD *)(result + 12) = v11;
    if (v15 == 82) {
      int v16 = 1081653;
    }
    else {
      int v16 = 1081652;
    }
    *(_DWORD *)(result + 16) = 218024909;
    *(_DWORD *)(result + 20) = v16;
    *(_DWORD *)(result + 24) = -563355418;
    *(void *)(v14 - 0x73801E9372C50DB3) = a2;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v9 + 8 * (v8 + 638)))();
    int v13 = 563395391;
  }
  *(_DWORD *)(v4 + 12) = v13;
  return result;
}

uint64_t sub_10003A184@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)((((((((a1 & 0x53E7CFDF) + 1528948091) & 0xA4DE17EF) + 327) | 0x120) ^ 0xF51)
                                     * (v2 > (((a1 & 0x53E7CFDF) + 1528948091) & 0xA4DE17EF) - 712)) ^ ((a1 & 0x53E7CFDF) + 1528948091) & 0xA4DE17EF)))();
}

uint64_t sub_10003A2B4()
{
  BOOL v4 = (*(uint64_t (**)(void, uint64_t))(v0 + 8 * (v3 ^ 0x9E7)))((*(_DWORD *)(v2 + 24 * v1 + 16) - 1704253533), 2970849626) == 0;
  return (*(uint64_t (**)(void))(v0 + 8 * ((v4 * ((((4 * v3) ^ 0x618) - 168724645) & 0xA0E80DD ^ 0xFD)) ^ v3)))();
}

uint64_t sub_10003A334@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v7 = v5 + 1477247020 + v4;
  uint64_t v8 = v2 + v7;
  long long v9 = *(_OWORD *)(v8 - 31);
  uint64_t v10 = a2 + v7;
  *(_OWORD *)(v10 - 15) = *(_OWORD *)(v8 - 15);
  *(_OWORD *)(v10 - 31) = v9;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((((v3 & 0xFFFFFFE0) == 32) * ((((a1 ^ 0x75C) - 1604844977) & 0x5FA7FEE3) + 1564)) ^ ((a1 ^ 0x75C) - 146))))();
}

uint64_t sub_10003A3AC@<X0>(int a1@<W1>, int a2@<W3>, uint64_t a3@<X4>, uint64_t a4@<X6>, int a5@<W8>)
{
  char v11 = *(unsigned char *)((v5 - 830) + v6 + v8 + a4);
  *(unsigned char *)(a3 + (a5 + a1)) = v11 + (v10 ^ (2 * v11) | 0x11) + 120;
  return (*(uint64_t (**)(void))(v9 + 8 * ((((a2 + a5 + 50) > 0x3F) * v7) ^ v5)))();
}

uint64_t sub_10003A404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v21 = 1224239923 * ((((2 * &a13) | 0x7801179A) - &a13 + 1140814899) ^ 0x4EB3761A);
  a14 = (v20 - 2024874569) ^ v21;
  a15 = v21 ^ 0xBD8E7B6;
  a13 = v21 ^ 0x6BCE5709;
  a16 = a10;
  a17 = &STACK[0x634ED76D4AB8829D];
  uint64_t v22 = (*(uint64_t (**)(int *))(v19 + 8 * (v20 + 895)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * ((995 * (a18 == ((((v20 + 1369146796) & 0xAE6476C5) + 277) ^ (v18 + 717)))) ^ (v20 - 1002))))(v22);
}

uint64_t sub_10003A4F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * ((1919 * ((v3 + 673 + v1 - 1612863796) < 0x38)) ^ (v3 + 583))))(a1, -1612863066);
}

uint64_t sub_10003A544(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v3
                                                    + 8
                                                    * (((((((v2 - 1840559207) & 0x6DB4B2FC) - 572) & v1) == 0)
                                                      * (v2 - 944)) ^ (v2 + 728))))(a1, (v2 + 1192));
}

void sub_10003A58C()
{
}

uint64_t sub_10003A5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  int v38 = a16
      + (STACK[0x2D4] & 0x3F ^ a21 ^ 0xE3FED8D0)
      + ((2 * LODWORD(STACK[0x2D4])) & 0x7A ^ ((a14 & 0x38E0EFFD) - 1612)) < 0xFFFFFFC0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(v36 + 8 * (((16 * v38) | (v38 << 8)) ^ (v37 + 1617))))(a36, a2, a3, 2342826110, 2952075895, &STACK[0x290], 45, 1689);
}

uint64_t sub_10003A6B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + a1 + v2 - 1) = v4;
  return (*(uint64_t (**)(void))(v5 + 8 * ((2029 * ((unint64_t)(a2 + a1) < 0x40)) ^ (v3 - 851))))();
}

uint64_t sub_10003A6F0()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((v2 - 1340331332) ^ (1109 * (v0 > v3 + 623)))))();
}

uint64_t sub_10003A730()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1000
                                * (((v1 + ((v3 + 485085772) & 0xE316295F) - 349) & (2
                                                                                  * (*(unsigned __int8 *)(v2 + 5) - 13)))
                                 + ((v3 - 756503250) & 0x2D174DF5 ^ (v0 - 213) ^ (*(unsigned __int8 *)(v2 + 5) - 13)) == v0)) ^ v3)))();
}

uint64_t sub_10003A7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  BOOL v38 = (((_BYTE)a11 + (_BYTE)a6 + 21 - 15) & 0xF) == 0 && a11 != 396484236;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8 * ((39 * v38) ^ ((int)a6 + 96))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_10003A7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v10 + 8 * (((v7 - 335 + (v7 ^ v9) * a7 - 1394) * (v8 == 2)) ^ v7)))();
}

void sub_10003A828()
{
}

uint64_t sub_10003A838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8 * (int)(((v24 == -563355418) * ((((a9 - 909) ^ 0x199) - a8 - 205) ^ (a6 + 648))) ^ (a9 - 909))))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t sub_10003A890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10
                                                                                         + 8
                                                                                         * ((((((a6 + 252) ^ 0xB7) + 594) ^ ((a6 + 252) | 0x312))
                                                                                           * (v11 == 0x7419917862B0D7EBLL)) ^ a6)))(a1, a2, a3, a4, a10, 2536055483);
}

uint64_t sub_10003A8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  (*(void (**)(uint64_t, uint64_t))(v18 + 8 * (v16 + 1425)))(a12, 2965982036);
  unsigned int v19 = (*(uint64_t (**)(void))(v18 + 8 * (v16 + 1353)))();
  *int v17 = v19;
  uint64_t v20 = 1812433253 * (v19 ^ (v19 >> 30)) + 1;
  v17[1] = v20;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8 * (((2 * (((v16 + 12) ^ 1) & 1)) & 0xEF | (16 * (((v16 + 12) ^ 1) & 1))) ^ (v16 + 962))))(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10003A96C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8 * (((((v17 - 1121999940) & 0x42E05BFF) - 228) * (a9 != 0)) ^ v17)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a1, a12, a13, a14, a15, v19 + 0x5883B0A40B206ABBLL, a17);
}

uint64_t sub_10003AA80@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ (8 * (v4 + 1 != v3 + 40)))))(a2);
}

uint64_t sub_10003AB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return (*(uint64_t (**)(void))(v27
                              + 8
                              * (int)(((*(_DWORD *)(a24 + 4 * (v26 + ((v25 - 867968364) & 0x33BC2718u))) == v24)
                                     * (((v25 - 867968364) ^ 0xCC43DCB0) - 800)) ^ (v25 - 540))))();
}

uint64_t sub_10003AB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v9
                                                                      + 8
                                                                      * (((((v8 < 0x10) ^ a8) & 1)
                                                                        * ((a8 - 1355292623) & 0x50C81DFF ^ 0x1DF)) ^ a8)))(a1, a2, a3, 0);
}

uint64_t sub_10003ABD4@<X0>(unsigned int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((2221 * (v1 + v3 + 1 < ((a1 - 208081927) & 0xC6713F6) + 2147483227)) ^ a1)))();
}

uint64_t sub_10003AC24(int a1, uint64_t a2, int a3, int a4)
{
  int v10 = (v8 - 656253162) & 0x271DA67F;
  BOOL v11 = v5 < v9;
  if (v11 == a1 + v4 < (v10 ^ a3 ^ a4 ^ ((v10 - 1490) | 0x14u))) {
    BOOL v11 = v5 > a1 + v4;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((!v11 * v6) ^ v10)))();
}

uint64_t sub_10003B03C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  BOOL v9 = v6 < v5;
  if (v9 == ((6 * (v4 ^ 0x156)) ^ a4) + v7 > 0x8EDF3615) {
    BOOL v9 = v5 + v7 + 1 < v6;
  }
  return (*(uint64_t (**)(void))(v8 + 8 * ((110 * v9) ^ v4)))();
}

uint64_t sub_10003B0C8@<X0>(int a1@<W3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((a1 ^ (a1 - 2)) + 1190) ^ 0x699 ^ (275 * (a1 ^ (a1 - 2)))) * (a2 == v4)) ^ (v3 + a1 + 554))))();
}

uint64_t sub_10003B114@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((((a1 - 1287) | 0x14A) ^ 0x304) * (*v2 > 0x14u)) ^ a1)))();
}

uint64_t sub_10003B148(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = v4 > v7;
  if (v8 == a3 + 1582461697 < ((a4 - 1913637443) & 0x720FCDC6) - 543166976) {
    BOOL v8 = a3 + 1582461697 < v6;
  }
  return (*(uint64_t (**)(uint64_t, void))(v5 + 8 * ((131 * v8) ^ a4)))(a1, 0);
}

void sub_10003B1C4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (3804331 * ((-2 - ((a1 | 0x7F5042C2) + (~a1 | 0x80AFBD3D))) ^ 0xFE7A98CB));
  __asm { BRAA            X10, X17 }
}

void sub_10003B288()
{
  *(_DWORD *)(v0 + 16) = -552278683;
}

void sub_10003B294()
{
  *(_DWORD *)(v0 + 8) = *(_DWORD *)(v1 - 0x6BA7059072F2C1BBLL);
}

uint64_t sub_10003B2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_DWORD **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  int v58 = *a24;
  if (((unint64_t)*a24 & ((HIDWORD(a11) + 1203575690) - 656)) != (HIDWORD(a11) + 1203575449)
                                                                                       - 418
    || (uint64_t v59 = (uint64_t)*(&off_10018D100 + (int)(HIDWORD(a11) ^ 0xB842E798)),
        uint64_t v61 = *(void *)(v59 - 4),
        uint64_t v60 = (void *)(v59 - 4),
        v61))
  {
    *a10 = 563395417;
    return sub_100049F54(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28);
  }
  else
  {
    *uint64_t v60 = v58;
    *(_DWORD *)*(&off_10018D100 + HIDWORD(a11) + 1203575135) = 255;
    *v58 |= ~v58[*v58 & 0x3ELL] << 16;
    int v62 = (HIDWORD(a11) + 1203575035) | 0x200;
    v58[4] |= ~v58[v58[4] & 0x3ELL] << 16;
    v58[8] |= ~v58[v58[8] & (v62 - 454)] << 16;
    v58[12] |= ~v58[v58[12] & 0x3ELL] << 16;
    v58[16] |= ~v58[v58[16] & 0x3ELL] << 16;
    v58[20] |= ~v58[v58[20] & 0x3ELL] << 16;
    v58[24] |= ~v58[v58[24] & 0x3ELL] << 16;
    v58[28] |= ~v58[v58[28] & 0x3ELL] << 16;
    v58[32] |= ~v58[v58[32] & 0x3ELL] << 16;
    v58[36] |= ~v58[v58[36] & 0x3ELL] << 16;
    v58[40] |= ~v58[v58[40] & 0x3ELL] << 16;
    v58[44] |= ~v58[v58[44] & 0x3ELL] << 16;
    v58[48] |= ~v58[v58[48] & 0x3ELL] << 16;
    v58[52] |= ~v58[v58[52] & 0x3ELL] << 16;
    v58[56] |= ~v58[v58[56] & 0x3ELL] << 16;
    v58[60] |= ~v58[v58[60] & 0x3ELL] << 16;
    uint64_t v63 = (*(uint64_t (**)(char *, void, uint64_t))(v57 + 8 * (HIDWORD(a11) + 1203577510)))(&a57, 0, 1024);
    return (*(uint64_t (**)(uint64_t))(v57 + 8 * (int)(((v62 ^ 0xB01C2B8C) + v62 + 1340331139) ^ v62)))(v63);
  }
}

uint64_t sub_10003B5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v20 - 136) = a15;
  *(void *)(v20 - 128) = v19;
  *(void *)(v20 - 104) = a11;
  *(_DWORD *)(v20 - 112) = v15 + 69008221 * ((v20 - 1931034688 - 2 * ((v20 - 136) & 0x8CE6C048)) ^ 0x5F449242) - 52;
  *(void *)(v20 - 120) = v19;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v15 ^ 0xCFF)))(v20 - 136);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * ((50
                                              * (((v16
                                                 + (((v18 - 1140034895) >> 1) ^ 0x77F7BF4F)
                                                 + ((v18 - 1140034895) & 0xEFEF7E9E)
                                                 + 2) & a10) != 0)) ^ v15)))(v21);
}

void sub_10003B6CC()
{
}

uint64_t sub_10003B830(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v7 = (((a6 - 438) | 0x89A) ^ 0x3FBFFF63 ^ (((a6 + 148) ^ 0x24B) + a2) & 0x7F)
     + ((2 * (((a6 + 148) ^ 0x24B) + a2)) & 0xF2u)
     - 1069545466 > 3;
  return (*(uint64_t (**)(void))(v6 + 8 * (v7 | (8 * v7) | a6)))();
}

uint64_t sub_10003B89C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((1317
                                * ((*(_DWORD *)(a1 + 532) - 1758911814) < LODWORD(STACK[0x2A8]))) ^ LODWORD(STACK[0x2B0]))))();
}

uint64_t sub_10003B8DC(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((a2 != v5) | (2 * (a2 != v5))) ^ (a4 + 28))))();
}

void sub_10003B8FC()
{
  STACK[0x328] = *(void *)(v0 + 8 * (v1 - 770));
  JUMPOUT(0x100073674);
}

uint64_t sub_10003B920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,_DWORD *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  unsigned int v30 = (int *)(a25 + 4 * v28);
  int v31 = *v30;
  LODWORD(v30) = -1805087677 * ((*(_DWORD *)(*a22 + (*a21 & 0x6868FD58)) ^ v30) & 0x7FFFFFFF);
  LODWORD(v30) = (v30 >> (v26 + 11)) ^ v30;
  unsigned int v32 = -1805087677 * v30;
  *(_DWORD *)(a26 + 4 * v28) ^= v31 ^ *((_DWORD *)*(&off_10018D100 + a20) + HIBYTE(v32) - 1) ^ *((_DWORD *)*(&off_10018D100 + v26 - 1004)
                                                                                               + HIBYTE(v32)
                                                                                               - 2) ^ *((_DWORD *)*(&off_10018D100 + a19) + HIBYTE(v32) + 5) ^ (-1941766144 * v30) ^ v32 ^ (1018030627 * HIBYTE(v32));
  return (*(uint64_t (**)(void))(v27 + 8 * ((2014 * (v29 - 1 == ((v26 - 1) | 1) - 1029)) ^ (v26 - 9))))();
}

uint64_t sub_10003BA1C@<X0>(int a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((((a1 + 1601) ^ 0xB98) - 569) ^ 0x11D) * ((unint64_t)(a3 - a2 - 1452) < 0x20)) ^ (a1 + 1601))))();
}

uint64_t sub_10003BA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, uint64_t a18, unint64_t *a19, int a20)
{
  unsigned int v22 = 1224239923 * ((2 * (&a15 & 0x137ED580) - &a15 - 327079302) ^ 0x1E32D7AD);
  a18 = a12;
  a19 = &STACK[0x634ED76D4AB882AD];
  a15 = v22 ^ 0x6BCE570A;
  a16 = (a10 - 2024873871) ^ v22;
  a17 = v22 ^ 0x3EC6CCC9;
  uint64_t v23 = (*(uint64_t (**)(int *))(v21 + 8 * (a10 + 1593)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v21 + 8 * (((a20 != v20) * ((a10 + 339) ^ 0x46A)) ^ a10)))(v23);
}

void sub_10003BB2C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (831981571
                            * (((a1 ^ 0x8A003497) - 575953088 - 2 * ((a1 ^ 0x8A003497) & 0xDDABA740)) ^ 0xCE0A43F3));
  uint64_t v2 = (char *)*(&off_10018D100 + (v1 ^ 0xB2)) - 4;
  uint64_t v3 = *(void *)&v2[8
                    * ((29
                      * ((*(uint64_t (**)(uint64_t, uint64_t))&v2[8 * (v1 ^ 0x919)])(32, 0x101004023FF3BD5) != 0)) ^ v1)];
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10003BBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  unint64_t v30 = ((a6 >> (((a5 + 12) | 6u) - 86)) ^ a2) + HIDWORD(v29) + (*(_DWORD *)(a26 + a12) ^ v26);
  *(_DWORD *)(a26 + 4 * a15) = v30 + v26 - ((v30 << (((a5 + 11) & 0x99) - 8)) & v27);
  *(_DWORD *)(a26 + a12) = HIDWORD(v30) + v26 - ((2 * HIDWORD(v30)) & 0x49C5655A);
  BOOL v32 = a23 - 695708230 < 1512476109 && a23 - 695708230 >= a19;
  return (*(uint64_t (**)(void))(v28 + 8 * (a5 ^ (246 * v32))))();
}

uint64_t sub_10003BCB0()
{
  int v2 = v0 - 668;
  BOOL v3 = 829 * (v2 ^ 0xC0) == 1594;
  return (*(uint64_t (**)(void))(v1 + 8 * (((16 * v3) | (32 * v3)) ^ v2)))();
}

uint64_t sub_10003BCF8()
{
  int v4 = (v0 + 689571733) & 0x56E5F7D7;
  uint64_t v5 = (*(uint64_t (**)(void))(v1 + 8 * (v0 ^ 0xA0Du)))(*v3);
  int v6 = ((*v2 == 0) ^ ((v4 - 1) ^ (v4 + 118))) & 1;
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * ((v6 | (8 * v6)) ^ v4)))(v5);
}

void sub_10003BD68(uint64_t a1)
{
  int v1 = 3804331 * ((a1 - 881405234 - 2 * (a1 & 0xCB76D2CE)) ^ 0xB5A3F738);
  int v2 = *(_DWORD *)(a1 + 8) - v1;
  __asm { BRAA            X15, X17 }
}

uint64_t sub_10003BE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((1013 * (v6 == (v7 ^ (a6 + 179)) + 1124218302 + 293 * (v7 ^ 0x1F2))) ^ v7)))();
}

uint64_t sub_10003BE84@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(void, uint64_t))(v18
                                                    + 8
                                                    * (v17 ^ (62
                                                            * ((unint64_t)(a16 - a2 - a1 - 0x6E436DE5799F9208) > 0x1F)))))((v17 ^ 0x4F0u) - 817, v16);
}

uint64_t sub_10003BED4@<X0>(unint64_t a1@<X1>, int a2@<W3>, uint64_t a3@<X4>, unsigned int a4@<W5>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v10 = v6 + 16;
  *(_OWORD *)(a3 + (((v7 + a2) & a4 ^ a1) & (a6 + v10))) = *(_OWORD *)(a5 + v10);
  return (*(uint64_t (**)(void))(v9 + 8 * ((52 * (v8 != v10)) ^ v7)))();
}

uint64_t sub_10003BEDC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 24);
  return 0;
}

uint64_t sub_10003BEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  STACK[0x598] = v10;
  STACK[0x5A0] = v9;
  unint64_t v15 = STACK[0x508];
  uint64_t v16 = (char *)&a9 + STACK[0x508] - 0x2C2F364FA24C4B49;
  STACK[0x5A8] = (unint64_t)v16;
  STACK[0x508] = v15 + 320;
  LODWORD(STACK[0x428]) = *(_DWORD *)(v10 - 0xB999BAB1C51203BLL);
  LODWORD(STACK[0x42C]) = *(_DWORD *)(v10 - 0xB999BAB1C512037);
  LODWORD(STACK[0x4CC]) = *(_DWORD *)(v10 - 0xB999BAB1C512033);
  LODWORD(STACK[0x43C]) = *(_DWORD *)(v10 - 0xB999BAB1C51202FLL);
  int v17 = *(unsigned __int8 *)(v10 - 0xB999BAB1C512023) ^ 0x89;
  if (v17 == 2)
  {
    unsigned int v22 = STACK[0x2A0] & 0xC7459BFA;
    LODWORD(STACK[0x404]) = *(_DWORD *)(v10 - 0xB999BAB1C51202BLL);
    LODWORD(STACK[0x304]) = 456671172;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13
                                                       + 8
                                                       * (int)((((((v22 - 673) | 0x340) ^ (v12 + 817)) + 456671172 < 0x40)
                                                              * (((v22 - 687) | 8) + 59)) ^ v22)))(1584128230, 847);
  }
  else if (v17 == 1)
  {
    int v18 = STACK[0x2C0];
    LODWORD(STACK[0x304]) = v11;
    BOOL v20 = v9 >= STACK[0x2A8] + v15 || (unint64_t)v16 >= v9 + 64;
    return (*(uint64_t (**)(void))(v13 + 8 * (((v18 - 788) * v20) | (v14 - 138))))();
  }
  else
  {
    return sub_10003C10C();
  }
}

void sub_10003C094()
{
  int v9 = v5 - 1541;
  LODWORD(STACK[0x428]) = v0;
  LODWORD(STACK[0x42C]) = v3;
  LODWORD(STACK[0x4CC]) = v1;
  LODWORD(STACK[0x43C]) = v4;
  LODWORD(STACK[0x404]) = v2;
  unint64_t v10 = STACK[0x598];
  int v11 = *(_DWORD *)(STACK[0x598] - 0xB999BAB1C51202BLL);
  LODWORD(STACK[0x304]) = v6 + 80;
  *(_DWORD *)(v10 - 0xB999BAB1C51202BLL) = (v11 ^ v7)
                                         + (v2 ^ (v7 - 347) ^ v9)
                                         + v7
                                         - (v8 & (2 * ((v11 ^ v7) + (v2 ^ (v7 - 347) ^ v9))));
  JUMPOUT(0x10003C108);
}

uint64_t sub_10003C10C()
{
  int v8 = (*(_DWORD *)(v5 - 0xB999BAB1C51203BLL) ^ v6) + (v1 ^ v6);
  *(_DWORD *)(v5 - 0xB999BAB1C51203BLL) = v8 + v6 - (v7 & (2 * v8));
  int v9 = (*(_DWORD *)(v5 - 0xB999BAB1C512037) ^ v6) + (v3 ^ v6);
  *(_DWORD *)(v5 - 0xB999BAB1C512037) = v9 + v6 - (v7 & (2 * v9));
  int v10 = (*(_DWORD *)(v5 - 0xB999BAB1C512033) ^ v6) + (v2 ^ v6);
  *(_DWORD *)(v5 - 0xB999BAB1C512033) = v10 + v6 - (v7 & (2 * v10));
  int v11 = (*(_DWORD *)(v5 - 0xB999BAB1C51202FLL) ^ v6) + (v4 ^ v6);
  *(_DWORD *)(v5 - 0xB999BAB1C51202FLL) = v11 + v6 - (v7 & (2 * v11));
  STACK[0x508] = v0 - 320;
  return ((uint64_t (*)(void))STACK[0x460])();
}

uint64_t sub_10003C1EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v9 + 8 * (int)(((((a8 + 192) ^ 0xFFFFFC21) + ((a8 + 192) | 2)) * (v8 == a4)) ^ a8)))();
}

uint64_t sub_10003C21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v6
                                                                               + 8
                                                                               * ((25 * (v5 < ((4 * v4) ^ 0xB34u) - 888)) ^ v4)))(a1, a2, a3, a4, 0);
}

void sub_10003C250(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12) - 69008221 * ((-2 - ((~a1 | 0x2A929A22) + (a1 | 0xD56D65DD))) ^ 0xF930C828);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_10003C340@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W5>, int a4@<W6>, int a5@<W8>)
{
  int v11 = (unsigned int *)(v10 + 4 * v6);
  uint64_t v12 = v6 + 1;
  int v13 = *(_DWORD *)(v10 + 4 * v12);
  unsigned int v14 = v11[397] ^ ((v13 & (v8 + 14 * (a5 ^ a3) + 911) | v5 & 0x80000000) >> 1);
  *int v11 = (v14 + a1 - (a2 & (2 * v14))) ^ *(_DWORD *)(v7 + 4 * (v13 & 1));
  return (*(uint64_t (**)(void))(v9 + 8 * (((v12 != 227) * a4) | a5)))();
}

uint64_t sub_10003C3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(_DWORD *)(v24 - 128) = (v20 + 586) ^ (268847287 * ((v24 - 128) ^ 0xFFAA1128));
  *(void *)(v24 - 120) = a20;
  *(void *)(v24 - 112) = v23;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(v21 + 8 * (v20 ^ 0x8A7)))(v24 - 128);
  return (*(uint64_t (**)(uint64_t))(v21
                                            + 8
                                            * ((1010
                                              * (((3 * (v20 ^ 0xA0)) ^ (v22 == ((3 * (v20 ^ 0xA0)) ^ 0x32A5ABEB))) & 1)) ^ v20)))(v25);
}

uint64_t sub_10003C44C@<X0>(int a1@<W0>, int a2@<W3>, int a3@<W8>)
{
  BOOL v7 = *(_DWORD *)(v6 + (v3 + a2) * (uint64_t)a1 + 36) == a3;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((2 * ((v7 ^ ((v4 - 24) ^ (3 * (v4 ^ 0xC3)))) & 1)) & 0xFB | (4 * ((v7 ^ ((v4 - 24) ^ (3 * (v4 ^ 0xC3)))) & 1))) ^ v4)))();
}

uint64_t sub_10003C4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v19 - 112) = (v18 - 470) ^ (((((v19 - 136) | 0x5DAE806E) - (v19 - 136) + ((v19 - 136) & 0xA2517F90)) ^ 0x8E0CD264)
                                        * v15);
  *(void *)(v19 - 136) = v17;
  *(void *)(v19 - 120) = a14;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(v16 + 8 * (v18 + 811)))(v19 - 136);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * ((((v14 + *(_DWORD *)(v19 - 128) + 1642) < 0xC2681844)
                                              * (v18 ^ 0x842)) ^ v18)))(v20);
}

uint64_t sub_10003C54C()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((4064 * ((((v0 - 1520) ^ (v2 == 1176923396)) & 1) == 0)) ^ v0)))();
}

uint64_t sub_10003C584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((25
                                * (((a7 - 18) ^ (v7 < ((a7 - 405836550) & 0x7FF2D7F6 ^ (v8 + 1925)))) & 1)) ^ a7)))();
}

uint64_t sub_10003C5E8@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W7>, int a4@<W8>)
{
  unsigned int v10 = a1 + a4 + 1;
  BOOL v11 = v5 < v6;
  *(unsigned char *)(v8 - 0xB999BAB1C512083 + (v4 + a3)) = *(unsigned char *)(STACK[0x4C0]
                                                                            + (a4 - 1949048314));
  if (v11 == v10 < a2 + 1522) {
    BOOL v11 = v10 < v5;
  }
  return (*(uint64_t (**)(void))(v9 + 8 * ((78 * !v11) ^ (v7 + 169))))();
}

uint64_t sub_10003C66C@<X0>(uint64_t a1@<X8>)
{
  BOOL v11 = v6 > v2;
  *(unsigned char *)(a1 + (v8 - 1048981338)) = *(unsigned char *)(v1 + (v8 - 1048981338)) ^ ((v4 ^ 0xDF) * v5) ^ (97 * ((v8 - 90) & 0xF)) ^ *(unsigned char *)(*(void *)(v9 + 8 * (v4 - 1547)) + (((_BYTE)v8 - 90) & 0xF) - 8) ^ *(unsigned char *)(*(void *)(v9 + 8 * (v4 ^ 0x6C1)) + (((_BYTE)v8 - 90) & 0xF) - 12) ^ *(unsigned char *)(*(void *)(v9 + 8 * (v4 ^ 0x6CD)) + (((_BYTE)v8 - 90) & 0xF) - 4) ^ 0x89;
  if (v11 == v8 - 259357589 < v3) {
    BOOL v11 = v8 - 259357589 < v7;
  }
  return (*(uint64_t (**)(void))(v10 + 8 * ((472 * v11) ^ v4)))();
}

uint64_t sub_10003C738@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + v3 + a1 - 1) = v7;
  return (*(uint64_t (**)(void))(v6
                              + 8 * (((a2 + v3 < (unint64_t)(7 * ((v2 - 524) ^ v5)) - 14) * v4) ^ (v2 - 524))))();
}

uint64_t sub_10003C774@<X0>(int a1@<W8>)
{
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 8 * (((v1 + 8 == ((a1 - 731) | 0x40) - 70) * (a1 ^ 0x6B8)) ^ a1));
  STACK[0x2A8] = (unint64_t)*(&off_10018D100 + (a1 ^ 0x390)) - 4;
  STACK[0x2A0] = (unint64_t)*(&off_10018D100 + a1 - 665);
  return v3();
}

void sub_10003C77C()
{
  STACK[0x328] = *(void *)(v0 + 8 * (v1 - 752));
  JUMPOUT(0x100073674);
}

uint64_t sub_10003C79C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)((((v2 - 1131453695) < 0x7FFFFFFF)
                                     * (v0 ^ 0x3DA ^ (v0 + 1593065657) & 0xA10BBFFF)) ^ (v0 + 839))))();
}

uint64_t sub_10003C800()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((1893 * (v1 == v3 + (v2 ^ 0x369) - 71)) ^ (v2 - 743))))();
}

uint64_t sub_10003C834(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v2
                                                    + 8
                                                    * ((11
                                                      * ((((v1 - 1378) | 0x90) ^ 0xB1B068BE)
                                                       + *(_DWORD *)(v3 - 0x6BA7059072F2C1C7) == 0)) ^ (v1 + 697))))(a1, *(void *)(v3 - 0x6BA7059072F2C1D3));
}

void sub_10003C8A4()
{
}

uint64_t sub_10003C8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v68 = STACK[0x4B8];
  STACK[0x420] = *(void *)(v66 + 8 * (v67 - 758));
  LODWORD(STACK[0x240]) = v67 - 845719929;
  STACK[0x508] = a65 + 112;
  STACK[0x318] = v68;
  if (v68) {
    BOOL v69 = v65 == 0;
  }
  else {
    BOOL v69 = 1;
  }
  int v70 = !v69;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v66 + 8 * (((v67 - 810) | 0x280) ^ (8 * v70))))(a1, a2, 1, (__n128)0);
}

uint64_t sub_10003C9A0(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(uint64_t, void))(v4
                                                    + 8
                                                    * ((a3 - 1519) | (32
                                                                    * (v3 >= ((a3 - 789683833) & 0x2F1197CF)
                                                                           + ((a3 - 1831) | 0x25u)
                                                                           - 547)))))(a1, 0);
}

uint64_t sub_10003C9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,int a52)
{
  return (*(uint64_t (**)(void))(v54
                              + 8
                              * ((((LODWORD(STACK[0x4C8]) ^ v52) != (((v53 ^ 0x40E) + 188) ^ 0xF177C0B2) + a52)
                                * (2 * (v53 ^ 0x40E) - 1040)) ^ v53)))();
}

uint64_t sub_10003CA3C@<X0>(int a1@<W4>, int a2@<W6>, int a3@<W8>)
{
  unsigned int v3 = (unint64_t *)STACK[0x3C0];
  STACK[0x260] = STACK[0x220];
  STACK[0x2B0] = *v3;
  return sub_10003F8A4(a1, a2, a3);
}

uint64_t sub_10003CA8C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v25 = 4 * (v21 + v18);
  int v26 = v13 + v22 + (*(_DWORD *)(*(void *)(a10 - 0x5E8E72AB319E4281) + v25) ^ v23);
  *(_DWORD *)(*(void *)(a13 - 0x5E8E72AB319E4281) + v25) = v26 + v23 - (v19 & (2 * v26));
  int v27 = v21 + 1 + v15;
  int v28 = (v20 > a1) ^ (v27 < v14);
  BOOL v29 = v27 < v17;
  if (v28) {
    BOOL v29 = v20 > a1;
  }
  return (*(uint64_t (**)(void))(v24 + 8 * ((2484 * v29) ^ (v16 + 107))))();
}

void sub_10003CB78(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  a5 = v6;
  a4 = v7 + 831981571 * (&a3 ^ 0x99A1D024) - 89;
  a3 = a1;
  (*(void (**)(uint64_t *))(v5 + 8 * (v7 ^ 0xF84)))(&a3);
  sub_100040F54();
}

uint64_t sub_10003CBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v54 = *(void *)(v50 + 24);
  *(int8x16_t *)(v53 - 112) = veorq_s8(*(int8x16_t *)*(void *)(v50 + 16), (int8x16_t)xmmword_10016DEF0);
  if (v52) {
    BOOL v55 = v54 == 0x5EC77446536A4B76;
  }
  else {
    BOOL v55 = 1;
  }
  int v56 = v55;
  LODWORD(a24) = 2 * v49;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 8 * (int)(((4 * v56) | (16 * v56)) ^ a7)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49);
}

uint64_t sub_10003CC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9
                              + 8 * ((2576 * (v7 == ((a7 + 79 * (v8 ^ 0x21C) + 1543) ^ (14 * (v8 ^ 0x283))))) ^ v8)))();
}

uint64_t sub_10003CC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(void))(v12 + 8 * ((107 * (a11 == ((v13 - 85) ^ (v11 + 596)))) ^ v13)))();
}

void sub_10003CCD4()
{
}

uint64_t sub_10003CD04(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (a1
                               + 6 * (v6 - a5 - (unint64_t)(a1 - 897) + 955 < 0x20))))();
}

void sub_10003CD34()
{
  uint64_t v0 = (unint64_t *)*(&off_10018D100
                           + ((-113 * (dword_1001B6EB0 ^ 0xEA ^ qword_1001B6D98)) ^ byte_100167DB0[byte_100163B10[(-113 * (dword_1001B6EB0 ^ 0xEA ^ qword_1001B6D98))] ^ 0x2F])
                           - 64);
  unsigned __int8 v1 = -113 * ((qword_1001B6D98 - *v0) ^ 0xEA);
  uint64_t v2 = (unint64_t *)*(&off_10018D100 + (aQ5g[(byte_1001609A8[v1 - 8] ^ 0xBB) - 4] ^ v1) - 121);
  unint64_t v3 = *v2 - *v0 - (void)&v8;
  unint64_t v4 = (1932141199 * v3) ^ 0xA437147DE07F15EALL;
  unint64_t v5 = 1932141199 * (v3 ^ 0xA437147DE07F15EALL);
  unint64_t *v0 = v4;
  unint64_t *v2 = v5;
  LOBYTE(v5) = -113 * ((v5 - *(_DWORD *)v0) ^ 0xEA);
  *(_DWORD *)*(&off_10018D100
             + (byte_10016DDC8[(byte_100167FB8[v5 - 8] ^ 0x66) - 8] ^ v5)
             - 47) = -563355418;
  uint64_t v6 = (char *)*(&off_10018D100
               + ((-113 * (dword_1001B6EB0 ^ 0xEA ^ qword_1001B6D98)) ^ byte_10016DCC0[byte_100167CB0[(-113 * (dword_1001B6EB0 ^ 0xEA ^ qword_1001B6D98))] ^ 0xB6])
               - 71)
     - 4;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))&v6[8
                                                      * (byte_1001680BC[(byte_100163E10[(-113 * ((*(_DWORD *)v2 - *(_DWORD *)v0) ^ 0xEA))] ^ 0x8C)
                                                                                       - 12] ^ (-113
                                                                                              * ((*(_DWORD *)v2
                                                                                                - *(_DWORD *)v0) ^ 0xEA)))
                                                      + 18152])(512, 1509315540);
  *(void *)*(&off_10018D100
             + (byte_10016DCC0[byte_100167CB0[(-113
                                                                                             * ((*(_DWORD *)v2
                                                                                               + *(_DWORD *)v0) ^ 0xEA))] ^ 0xB6] ^ (-113 * ((*(_DWORD *)v2 + *(_DWORD *)v0) ^ 0xEA)))
             + 40) = v7;
  __asm { BRAA            X8, X17 }
}

void sub_10003CFA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(_DWORD *)(v28 - 192) = (v26 + 2138962936) ^ (69008221
                                               * ((20409577
                                                 - ((v28 - 192) ^ 0xBC004747 | 0x1376CE9)
                                                 + ((v28 - 192) ^ 0xBC004747 | 0xFEC89316)) ^ 0x916A865B));
  (*(void (**)(uint64_t))(v27 + 8 * (v26 + 2056)))(v28 - 192);
  LODWORD(STACK[0x298]) += v26 ^ 0x1A9;
  LOBYTE(STACK[0x18F0]) = 73 * ((~(v28 + 64) & 0x53 | (v28 + 64) & 0xAC) ^ 0x3B) + 94;
  *(void *)(v28 - 184) = a26;
  *(void *)(v28 - 168) = a25;
  *(_DWORD *)(v28 - 160) = (v26 - 68) ^ (1178560073
                                       * ((~(v28 - 192) & 0x3960D353 | (v28 - 192) & 0xC69F2CAC) ^ 0xDE55F13B));
  (*(void (**)(uint64_t))(v27 + 8 * (v26 ^ 0x838)))(v28 - 192);
  LODWORD(STACK[0x4AC]) = *(_DWORD *)(v28 - 192);
  JUMPOUT(0x100036AE0);
}

uint64_t sub_10003D0D8()
{
  uint64_t v3 = 829 * (v0 ^ 0xF0u);
  int v4 = ((v3 - 1659) & v1)
     - ((((v3 + 4294965637) & v1) << ((v3 - 120) ^ 3)) & (((v3 - 1400) | 0x31) ^ 0x59EAC301))
     - 1393204967;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((204
                                     * (((2 * v4) & 0x4FE5FFA6 ^ 0x49E0C222) + (v4 ^ 0xB079ECA) + 1602052080 == 124805059)) ^ v3)))();
}

uint64_t sub_10003D190@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((a1 - 668) | 0x212) ^ (a1 - 1046752231) & 0x3E642BEF ^ 0x8E) * (*v1 == 0)) ^ a1)))();
}

void sub_10003D1EC()
{
}

uint64_t sub_10003D370()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((4 * (v1 ^ 0x73C) - 292) | 0x10A) ^ 0x14D) * (v0 == 0x3D1A9DC82F89EAE1)) ^ v1)))();
}

uint64_t sub_10003D3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int v19 = v16 + 2240514;
  if (v19 <= 0x40) {
    unsigned int v19 = 64;
  }
  uint64_t v20 = (a4 - v14 - v15);
  int v21 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8 * ((((53 * (v17 ^ 0x6F6) + 1731) ^ ((v17 + 303) | 0x11)) * (v20 + v19 > 0xE)) ^ v17));
  return v21(v21, 64, v20, a4, a5, a6, 2838950915, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10003D450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  *(_DWORD *)(*(void *)(v31 + 96) + 1428) = 136246132;
  return sub_10004F5D0(995893064, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
           a27,
           a28,
           a29,
           a30,
           a31);
}

uint64_t sub_10003D47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((2 * (a3 == 0)) | (8 * (a3 == 0))) ^ 0x187u)))();
}

uint64_t sub_10003D4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  *(unsigned char *)(*v15 + (v12 + a6)) = -9;
  unsigned int v16 = v12 - 1412934752 + (v13 ^ 0x602);
  int v17 = (a12 > 0x3268F8F2) ^ (v16 < 0xCD97070D);
  BOOL v18 = v16 < a12 - 845740275;
  if (v17) {
    BOOL v19 = a12 > 0x3268F8F2;
  }
  else {
    BOOL v19 = v18;
  }
  return (*(uint64_t (**)(void))(v14 + 8 * ((4034 * v19) ^ v13)))();
}

uint64_t sub_10003D530(uint64_t a1, int8x8_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(int8x8_t *)(a6 + v8) = veor_s8(*(int8x8_t *)(a1 + v8), a2);
  return (*(uint64_t (**)(void))(v9 + 8 * (((a5 == 0) * v7) | v6)))();
}

uint64_t sub_10003D564(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(v8 + (v5 ^ v6)) = v10;
  return (*(uint64_t (**)(void))(v9 + 8 * (((v7 == 0) * a4) ^ v4)))();
}

uint64_t sub_10003D590@<X0>(int a1@<W6>, int a2@<W7>, int a3@<W8>)
{
  *(unsigned char *)(v6 + (v5 + a1 + 684)) = *(unsigned char *)(v4 + (v5 + a1 + 684));
  return (*(uint64_t (**)(void))(v3 + 8 * (((a1 - 1 == a3) * ((a2 - 269237861) & 0x100C3DF5 ^ 0x32)) ^ a2)))();
}

uint64_t sub_10003D5E0(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  int v12 = (v7 ^ a3) + v5;
  *(_DWORD *)(*v9 + 4 * (v10 + v12)) = *(_DWORD *)(*v9 + 4 * (v6 + v12 + 1703));
  return (*(uint64_t (**)(void))(v11 + 8 * (((v6 + v12 + 1702 < a4) * a5) ^ v8)))();
}

uint64_t sub_10003D5EC()
{
  *(_DWORD *)(*(void *)(v4 - 0x5E8E72AB319E4281) + 4 * (v1 + v0 + 870)) = -454905183;
  return (*(uint64_t (**)(void))(v3 + 8 * ((54 * ((v1 + v0 + 869) < 0x7FFFFFFF)) ^ (v2 - 552))))();
}

void sub_10003D654()
{
  *(_DWORD *)(v2 - 120) = v1;
  *(_DWORD *)(v2 - 128) = v0;
  *(_DWORD *)(v2 - 136) = v0 & 0xFFFFFFF8;
  JUMPOUT(0x10003D6ACLL);
}

uint64_t sub_10003D780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9 + 8 * ((22 * (v7 == a7 + ((v8 - 687) ^ (a5 + 370)) + 5)) ^ v8)))();
}

uint64_t sub_10003D7B4@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  BOOL v8 = a1 + 67212571 < (a6 + 224194813);
  if ((a6 + 224194813) < 0xEC975FD != (a1 + 67212571) < 0xEC975FD) {
    BOOL v8 = (a6 + 224194813) < 0xEC975FD;
  }
  return (*(uint64_t (**)(void))(v6 + 8 * ((!v8 * (((v7 - 142) | 0x32) + 67)) ^ v7)))();
}

uint64_t sub_10003D824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v10 + 8 * ((83 * ((v8 ^ 0x11u) < a8 + a6 + (v9 ^ 0x75Fu) - 767 - 38)) ^ v9)))();
}

uint64_t sub_10003D864()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((4 * (v1 + 1 == v2 + 4)) | (16 * (v1 + 1 == v2 + 4)) | v0)))();
}

uint64_t sub_10003D948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, void *a19)
{
  uint64_t v25 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8 * (v24 ^ ((v23 > a16) * v20)));
  return v25(*(_DWORD *)(*a19 + 4 * (v21 - 1970106864)) ^ v19, a2, a3, a4, a5, v25, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10003D960@<X0>(int a1@<W0>, int a2@<W8>)
{
  v7.i64[0] = 0x7777777777777777;
  v7.i64[1] = 0x7777777777777777;
  uint64_t v8 = (a1 + a2);
  int8x16_t v9 = *(int8x16_t *)(v3 + v8 - 15);
  int8x16_t v10 = *(int8x16_t *)(v3 + v8 - 31);
  uint64_t v11 = v5 + v8;
  *(int8x16_t *)(v11 - 15) = veorq_s8(v9, v7);
  *(int8x16_t *)(v11 - 31) = veorq_s8(v10, v7);
  return (*(uint64_t (**)(void))(v6 + 8 * ((2840 * (((v2 + 1904) | 0xC) - 2173 == (v4 & 0xFFFFFFE0))) ^ (v2 + 571))))();
}

uint64_t sub_10003D9C8()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((620
                                * ((((2 * v2) ^ 0x138 ^ (v1 + v2 + 16 - 1263)) & (2
                                                                                * (*(unsigned __int8 *)(v3 + 3) - 134)))
                                 + ((*(unsigned __int8 *)(v3 + 3) - 134) ^ v0) == v0)) ^ v2)))();
}

uint64_t sub_10003DA18()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((496
                                * (*(_DWORD *)(v1 + 48 * v0 + 36)
                                 + 706715346
                                 + ((v2 - v4 + 16) ^ (v5 - 762)) >= 0x80000004)) ^ v2)))();
}

uint64_t sub_10003DA7C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * ((((((((v2 - 86) | 6) ^ 0x114) + 212) ^ 0xCF) == 32)
                                              * ((13 * (((v2 - 86) | 6) ^ 0x114)) ^ 0x4CE)) ^ ((v2 - 86) | 6))))(a1);
}

uint64_t sub_10003DB0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((582 * (a1 + 1 == v2 + 32)) ^ v1)))();
}

uint64_t sub_10003DBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  int v61 = (v57 - 927) | 0x23;
  int v62 = 1543737703 * ((v58 + 742264651 - 2 * (v58 & 0x2C3E0F4B)) ^ 0x52CA5F37);
  *(void *)(v60 - 176) = 0x4455824F020409ECLL;
  *(_DWORD *)(v60 - 192) = v61 - v62 + 161;
  *(_DWORD *)(v60 - 184) = v62 ^ 0xE86D67F5;
  *(void *)(v60 - 168) = a56;
  *(void *)(v60 - 160) = a57;
  uint64_t v63 = (*(uint64_t (**)(uint64_t))(v59 + 8 * (v61 + 2154)))(v60 - 192);
  return (*(uint64_t (**)(uint64_t))(v59
                                            + 8
                                            * (((*(_DWORD *)(v60 - 188) != -563355418) * ((v61 ^ 0x110) - 34)) ^ v61)))(v63);
}

uint64_t sub_10003DCD4()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (int)(((((v2 + 1634160838) & 0x9E98ADFF) - 71) * (v0 == 1730576771)) ^ v2)))();
}

uint64_t sub_10003DD24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  *a4 = 0;
  *a5 = 0;
  a14 = 1178560073 * ((&a13 & 0xFB2A6C05 | ~(&a13 | 0xFB2A6C05)) ^ 0xE3E0B192) - 504207030;
  uint64_t v17 = (*(uint64_t (**)(int *))(v15 + 18936))(&a13);
  return (*(uint64_t (**)(uint64_t))(v15 + 8 * ((1808 * (a13 == v16)) ^ v14)))(v17);
}

uint64_t sub_10003DDB8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((19 * (v3 - 1 + ((739 * (v2 ^ 0x584)) ^ (v1 + 1217)) >= 0)) ^ v2)))();
}

uint64_t sub_10003DDFC@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 - 3 + (v4 + v3)) = *(_DWORD *)(v2 - 3 + (v4 + v3));
  return (*(uint64_t (**)(void))(v6 + 8 * (((v5 == 4) * ((a1 ^ 0x347) - 123)) ^ (a1 + 961))))();
}

uint64_t sub_10003DE48()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((83 * (*(_DWORD *)(v2 - 0x6BA7059072F2C1C3) == v0 + 218022627 + ((v0 + 1210) | 0x24))) ^ v0)))();
}

uint64_t sub_10003DE98()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((458 * (((v0 + 980) ^ (v2 - 1198)) + v1 < 0x7FFFFFFF)) ^ v0)))();
}

uint64_t sub_10003DED0()
{
  *(void *)(v3 - 112) = *(void *)(v5 + 16);
  *(void *)(v3 - 128) = v2;
  *(_DWORD *)(v3 - 120) = v0
                        + 831981571 * ((((v3 - 128) | 0x955F512A) - (v3 - 128) + ((v3 - 128) & 0x6AA0AED0)) ^ 0xCFE810E)
                        + 181;
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 ^ 0xCB2)))(v3 - 128);
}

uint64_t sub_10003DF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23)
{
  *(void *)(&a23 + v25 - 301084339) = 0x7777777777777777;
  return (*(uint64_t (**)(void))(v26
                              + 8
                              * ((((((v24 ^ 0x7Bu) - 195) & v23) != 8) * (((v24 ^ 0x7B) + 315) ^ 0x18D)) ^ v24 ^ 0x7B)))();
}

uint64_t sub_10003DFF0()
{
  (*(void (**)(void))(v0 + 8 * (v1 + 1607)))();
  return (*(uint64_t (**)(void))(v0 + 8 * (((2 * (STACK[0x4A0] != 0)) | (4 * (STACK[0x4A0] != 0))) ^ (v1 + 196))))();
}

uint64_t sub_10003E028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return (*(uint64_t (**)(void))(v12 + 8 * ((958 * (a10 == ((v10 + 358) ^ (v11 + 452)))) ^ v10)))();
}

uint64_t sub_10003E058@<X0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v7 = v5 + ((a1 + 1287) ^ (v3 + 2678));
  long long v8 = *(_OWORD *)(a2 + v7 - 15);
  long long v9 = *(_OWORD *)(a2 + v7 - 31);
  uint64_t v10 = v2 + v7;
  *(_OWORD *)(v10 - 15) = v8;
  *(_OWORD *)(v10 - 31) = v9;
  return (*(uint64_t (**)(void))(v6 + 8 * ((216 * ((v4 & 0xFFFFFFE0) == 32)) ^ a1)))();
}

uint64_t sub_10003E0AC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  int v55 = a1 ^ 0x1D;
  unsigned __int8 v56 = 7 * (a1 ^ 0x3B);
  int v57 = a1 ^ 0x10D;
  int v58 = 1543737703 * (((v50 | 0x173579D6) - (v50 & 0x173579D6)) ^ 0x69C129AA);
  *(void *)(v54 - 168) = a49;
  *(void *)(v54 - 160) = a50;
  *(void *)(v54 - 176) = v51;
  *(_DWORD *)(v54 - 192) = v55 - v58 + 161;
  *(_DWORD *)(v54 - 184) = v58 ^ 0xE86D67F7;
  uint64_t v59 = (*(uint64_t (**)(uint64_t))(v52 + 8 * (v55 + 2154)))(v54 - 192);
  return (*(uint64_t (**)(uint64_t))(v52
                                            + 8
                                            * ((29 * ((v56 ^ (*(_DWORD *)(v54 - 188) == v53 + v57 - 63)) & 1)) ^ v55)))(v59);
}

uint64_t sub_10003E180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t (*a52)(void))
{
  STACK[0x350] = v52;
  STACK[0x490] = STACK[0x2C0];
  return a52();
}

void sub_10003E1A8()
{
}

uint64_t sub_10003E1B4@<X0>(int a1@<W8>)
{
  unint64_t v4 = 460628867 * ((~(v3 - 160) & 0x21D797604EF5C5DELL | (v3 - 160) & 0xDE28689FB10A3A21) ^ 0x6348DA0E026347A3);
  *(_DWORD *)(v3 - 140) = a1 - 1387236649 + v4;
  *(void *)(v3 - 136) = 1135309898 - v4;
  *(_DWORD *)(v3 - 128) = v4;
  *(_DWORD *)(v3 - 124) = ((a1 - 1387236649) ^ 0xF3) - v4;
  *(_DWORD *)(v3 - 144) = a1 - 1387236649 - v4 + 142;
  *(_DWORD *)(v3 - 152) = (a1 - 1689051559) ^ v4;
  *(void *)(v3 - 160) = v1 ^ v4;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 + 2366)))(v3 - 160);
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * *(int *)(v3 - 148)))(v5);
}

uint64_t sub_10003E284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (int)((a7 + 89408598) & 0xFAABBDFF ^ (2
                                                                    * (((((a7 + 89408598) & 0xFAABBDFF) + v7) ^ a6) >> 31)))))();
}

void sub_10003E2D8()
{
}

uint64_t sub_10003E35C()
{
  STACK[0x288] = v0;
  return (*(uint64_t (**)(void))(v1 + 8 * ((1908 * (v2 == ((v3 - 741) ^ (v4 - 55)))) ^ (v3 - 751))))();
}

uint64_t sub_10003E394()
{
  int v5 = 6 * (v4 ^ 0x221);
  unsigned int v13 = v4 - 944348131 * ((&v11 + 1244961591 - 2 * (&v11 & 0x4A349B37)) ^ 0xE92D3F79) - 248;
  int v11 = &STACK[0x5F548590D8AA6311];
  uint64_t v12 = v10;
  (*(void (**)(unint64_t **))(v1 + 8 * (v4 ^ 0xBA9u)))(&v11);
  LODWORD(v12) = v4
               - 241568881 * (((&v11 | 0xD00DEA05) - (&v11 & 0xD00DEA05)) ^ 0x61CEE47)
               - 82;
  int v11 = v10;
  (*(void (**)(unint64_t **))(v1 + 8 * (v4 ^ 0xB5Eu)))(&v11);
  if (HIDWORD(v12) == (v5 ^ (v2 + 1068))) {
    int v6 = v8;
  }
  else {
    int v6 = HIDWORD(v12);
  }
  uint64_t v12 = v10;
  LODWORD(v11) = (v4 - 554) ^ (((2 * (&v11 & 0x181C2120) - &v11 - 404496677) ^ 0x34418CD1)
                             * v3);
  (*(void (**)(unint64_t **))(v1 + 8 * (v4 ^ 0xBC0u)))(&v11);
  uint64_t v12 = v9;
  LODWORD(v11) = (v5 - 1343) ^ (((&v11 & 0xF2CCF7CB | ~(&v11 | 0xF2CCF7CB)) ^ 0xDE915A3E)
                              * v3);
  uint64_t result = (*(uint64_t (**)(unint64_t **))(v1 + 8 * (v5 ^ 0xCEB)))(&v11);
  *(_DWORD *)(v0 + 4) = v6;
  return result;
}

uint64_t sub_10003E588(int a1)
{
  int v4 = v3 + 1846618888 + ((23 * (a1 ^ 0x455)) ^ 0x6A);
  int v5 = (v1 > 0xE509994) ^ (v4 < -240163221);
  BOOL v6 = v4 < (int)(v1 + 1907320427);
  if (v5) {
    BOOL v6 = v1 > 0xE509994;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((252 * v6) ^ a1)))();
}

uint64_t sub_10003E60C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  int v24 = a1 ^ 0x149;
  _DWORD *v20 = a20 + 1;
  unsigned int v25 = 69008221 * ((-1144326816 - (v22 | 0xBBCAF560) + a8) ^ 0x97975895);
  *(_DWORD *)(v23 - 148) = v25 ^ 1;
  *(_DWORD *)(v23 - 136) = ((v24 + 731903356) | 0x1A) - v25;
  *(_DWORD *)(v23 - 120) = v25 + v24 + 731903356 + 88;
  *(_DWORD *)(v23 - 116) = v24 + 731903356 - v25;
  *(_DWORD *)(v23 - 112) = v25 + v24 + 2104631361;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(v21 + 8 * (v24 ^ 0xD56)))(v23 - 152);
  return (*(uint64_t (**)(uint64_t))(v21 + 8 * *(int *)(v23 - 152)))(v26);
}

uint64_t sub_10003E6F4()
{
  uint64_t v0 = (uint64_t)*(&off_10018D100
                + ((-113 * ((qword_1001B6D98 + dword_1001B6E48) ^ 0xEA)) ^ byte_100163D10[byte_1001609A0[(-113 * ((qword_1001B6D98 + dword_1001B6E48) ^ 0xEA))] ^ 0xBB])
                - 114);
  uint64_t v1 = *(void *)(v0 - 4);
  uint64_t v2 = *(&off_10018D100
       + ((-113 * ((qword_1001B6D98 + v1) ^ 0xEA)) ^ byte_10016DCC0[byte_100167CB0[(-113 * ((qword_1001B6D98 + v1) ^ 0xEA))] ^ 0x48])
       - 19);
  uint64_t v3 = v1 - (void)&v6 + *v2;
  *(void *)(v0 - 4) = (1932141199 * v3) ^ 0xA437147DE07F15EALL;
  void *v2 = 1932141199 * (v3 ^ 0xA437147DE07F15EALL);
  unsigned int v8 = (3804331
      * (((&v7 | 0x175DD214) - &v7 + (&v7 & 0xE8A22DE8)) ^ 0x6988F7E2)) ^ 0x203;
  LOBYTE(v3) = -113 * ((*(_DWORD *)v2 - *(_DWORD *)(v0 - 4)) ^ 0xEA);
  long long v9 = (char *)*(&off_10018D100
               + (byte_10016DDC8[(byte_100167FB8[v3 - 8] ^ 0x9D) - 8] ^ v3)
               - 47);
  int v4 = (char *)*(&off_10018D100
               + ((-113 * (dword_1001B6E48 ^ 0xEA ^ qword_1001B6D98)) ^ byte_10016DCC0[byte_100167CB0[(-113 * (dword_1001B6E48 ^ 0xEA ^ qword_1001B6D98))] ^ 0x48])
               - 21)
     - 4;
  (*(void (**)(unsigned int *))&v4[8
                                            * (byte_100163D10[byte_1001609A0[(-113 * (*(unsigned char *)(v0 - 4) ^ 0xEA ^ *(unsigned char *)v2))] ^ 0xBB] ^ (-113 * (*(unsigned char *)(v0 - 4) ^ 0xEA ^ *(unsigned char *)v2)))
                                            + 17752])(&v7);
  long long v9 = (char *)*(&off_10018D100
               + (byte_1001680BC[(byte_100163E10[(-113
                                                                                  * ((*(_DWORD *)v2 - *(_DWORD *)(v0 - 4)) ^ 0xEA))] ^ 0x8C)
                                                - 12] ^ (-113 * ((*(_DWORD *)v2 - *(_DWORD *)(v0 - 4)) ^ 0xEA)))
               - 95)
     - 4;
  unsigned int v8 = (3804331 * ((1141020232 - (&v7 | 0x44029648) + (&v7 | 0xBBFD69B7)) ^ 0xC5284C41)) ^ 0x203;
  (*(void (**)(unsigned int *))&v4[8
                                            * ((-113 * ((*(_DWORD *)v2 - *(_DWORD *)(v0 - 4)) ^ 0xEA)) ^ byte_100163D10[byte_1001609A0[(-113 * ((*(_DWORD *)v2 - *(_DWORD *)(v0 - 4)) ^ 0xEA))] ^ 0x85])
                                            + 18968])(&v7);
  unsigned int v7 = 1408 - 1178560073 * ((((2 * &v7) | 0x784A44C) - &v7 + 2084416986) ^ 0x64F7704E);
  LOBYTE(v8) = (73 * ((((2 * &v7) | 0x4C) - &v7 - 38) ^ 0x4E)) ^ 0x39;
  return (*(uint64_t (**)(unsigned int *))&v4[8
                                                      * ((-113
                                                                         * ((*(_DWORD *)v2 - *(_DWORD *)(v0 - 4)) ^ 0xEA)) ^ byte_100163D10[byte_1001609A0[(-113 * ((*(_DWORD *)v2 - *(_DWORD *)(v0 - 4)) ^ 0xEA))] ^ 0x5A])
                                                      + 18208])(&v7);
}

void sub_10003EABC(uint64_t a1)
{
  int v1 = 831981571 * ((-2 - ((~a1 | 0xF33FFBC4) + (a1 | 0xCC0043B))) ^ 0x6A9E2BE0);
  int v2 = *(_DWORD *)(a1 + 8) + v1;
  int v3 = (unsigned __int16)(*(_WORD *)(a1 + 12) + v1);
  BOOL v5 = *(void *)a1 != 0x3BD3A467C7BE8E49 && v3 != 10373;
  __asm { BRAA            X8, X17 }
}

void sub_10003EB98()
{
  STACK[0x420] = *(void *)(v1 + 8 * (v0 - 728));
  JUMPOUT(0x10003C974);
}

uint64_t sub_10003EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  unint64_t v63 = STACK[0x4E8];
  int v64 = 2078219279 * ((v62 - 192 - 2 * ((v62 - 192) & 0x177082E3) + 393249507) ^ 0xCD8A1497);
  *(_DWORD *)(v62 - 132) = v64
                         + (LODWORD(STACK[0x39C]) ^ 0xF79DFDDF)
                         + ((v61 - 281283845 + ((v61 - 14210805) & 0xD8D6DF)) & (2 * LODWORD(STACK[0x39C])))
                         + 1576004464;
  *(_DWORD *)(v62 - 128) = v64 + v61 - 408;
  *(void *)(v62 - 184) = v63;
  *(void *)(v62 - 176) = a58;
  *(void *)(v62 - 160) = a27;
  LOBYTE(STACK[0x1918]) = 15 * ((v62 + 64 - 2 * ((v62 + 64) & 0xE3) - 29) ^ 0x97) - 68;
  *(void *)(v62 - 144) = a47;
  *(_DWORD *)(v62 - 152) = (v59 + 499745704) ^ v64;
  *(void *)(v62 - 192) = a59;
  uint64_t v65 = (*(uint64_t (**)(uint64_t))(v60 + 8 * (v61 ^ 0xDDE)))(v62 - 192);
  int v66 = *(_DWORD *)(v62 - 168);
  LODWORD(STACK[0x4AC]) = v66;
  return (*(uint64_t (**)(uint64_t))(v60 + 8 * ((31 * (v66 == -563355418)) ^ v61)))(v65);
}

uint64_t sub_10003ECF4(int a1)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((2366 * ((v1 + 21 + v2) < 0x28)) ^ (6 * (a1 ^ 0x7AC)))))();
}

uint64_t sub_10003EDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(unsigned char *)(a1 + v7 + a6 + ((v6 - 824759313) & 0x3128D4FFu)) = *(unsigned char *)(v8
                                                                         + v7
                                                                         + a6
                                                                         + ((v6 - 824759313) & 0x3128D4FFu));
  return (*(uint64_t (**)(void))(v9 + 8 * ((62 * (v7 == 861224210)) ^ (v6 + 1308))))();
}

uint64_t sub_10003EE0C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (int)(v1 ^ (2 * ((v0 >> v3) & 1)))))();
}

uint64_t sub_10003EE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  BOOL v15 = a12 == (v12 ^ 0x838 ^ (v14 + 1932));
  return (*(uint64_t (**)(void))(v13
                              + 8
                              * (((4 * ((((v12 - 699090896) ^ v15) & 1) == 0)) & 0xEF | (16
                                                                                       * (((v12 + 48) ^ ~v15) & 1))) ^ v12)))();
}

uint64_t sub_10003EE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,unint64_t a62)
{
  int v65 = *(_DWORD *)(v64 + 1428);
  if (v65 == 136246120 || v65 == 136246116) {
    return (*(uint64_t (**)(void))(v63
  }
                                + 8
                                * ((55
                                  * (((*(_DWORD *)(a5 + 476) == 1054301366) ^ (LODWORD(STACK[0x2D4]) - 1)) & 1)) ^ (LODWORD(STACK[0x2D4]) - 85))))();
  STACK[0x508] = a62;
  return v62(a1, a2, a3, 707, a4, 152);
}

uint64_t sub_10003EF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t))(v9 + 8 * ((1345 * (v7 + 1 == v8 + 24)) ^ v6)))(a6);
}

uint64_t sub_10003F058@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v15 = v13 - 262639726;
  int v16 = v11 - 261;
  *(_DWORD *)(a9 + 4 * (v10 + a1 + v9)) = *(_DWORD *)(*(void *)(v12 - 0x5E8E72AB319E4281) + 4 * (v10 + a1 + v9));
  BOOL v18 = v9 - 491210222 < 1884843922 && v9 - 491210222 >= v15;
  return (*(uint64_t (**)(void))(v14 + 8 * ((27 * v18) ^ v16)))();
}

uint64_t sub_10003F0D4(int a1)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((157 * ((((v1 ^ 0x7B5) + v1 - 541 - 1428) & a1) == 0)) ^ v1)))();
}

uint64_t sub_10003F10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8 * ((37 * (((((v8 ^ 0x3AC) - 778) | 0x446) ^ ((v8 ^ 0x3AC) - 1084237739) & 0x79FEEFE2 ^ 0xE7352FE2) == -563355418)) ^ v8 ^ 0x3AC)))(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10003F188()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((37 * (v0 != ((46 * (v1 ^ 0x552u)) ^ 0x293E9C4C918FD589))) ^ v1)))();
}

uint64_t sub_10003F1D0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((112 * (((((v2 ^ 0x65F) - 324) ^ ((unint64_t)(v1 - a1) < 0x20)) & 1) == 0)) ^ v2)))();
}

uint64_t sub_10003F210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  a16 = v17
      + 1178560073 * ((((2 * &a15) | 0x40AB890A) - &a15 + 1604991867) ^ 0x4760E6ED)
      - 504208157;
  uint64_t v18 = (*(uint64_t (**)(int *))(v16 + 8 * (v17 + 1240)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * ((924 * (a15 == ((v17 + 1742664595) & 0x67C34FB7 ^ 0xB9A9A754))) ^ v17)))(v18);
}

uint64_t sub_10003F2B4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_DWORD *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  *a27 = a38 + 1;
  uint64_t v42 = *v39;
  uint64_t v43 = 69008221 * ((v41 - 144) ^ 0x529C46E3D3A2520ALL);
  *(void *)(v41 - 136) = v43 + 5119;
  *(_DWORD *)(v41 - 140) = v43 | 1;
  *(void *)(v41 - 120) = v42 - v43;
  *(_DWORD *)(v41 - 104) = v43 + v38 + 764300735;
  *(_DWORD *)(v41 - 112) = v43 + v38 - 299939364 + 139;
  *(_DWORD *)(v41 - 108) = v38 - 299939364 - v43;
  *(_DWORD *)(v41 - 128) = ((v38 - 299939364) ^ 1) - v43;
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(v40 + 8 * (v38 ^ (a1 + 2381))))(v41 - 144);
  return (*(uint64_t (**)(uint64_t))(v40 + 8 * *(int *)(v41 - 144)))(v44);
}

uint64_t sub_10003F378(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((460 * (((v5 < 0x20) ^ (v6 + (a4 ^ 0x8A) + v4 - 1)) & 1)) ^ a4 ^ 0xE8A)))();
}

void sub_10003F3C4(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  unsigned int v11 = (((&a3 | 0x2E438E06) - (&a3 & 0x2E438E06)) ^ 0x5096ABF0) * v7;
  a6 = 0x5267DA57ABB8ED88;
  a7 = (v8 - 36) ^ v11;
  a3 = v9;
  a4 = v11 ^ a1;
  a5 = v11 ^ 0x4CDE25C;
  (*(void (**)(uint64_t *))(v10 + 8 * (v8 + 2132)))(&a3);
  sub_10005E474();
}

uint64_t sub_10003F448@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((v3 + ((v1 + 1031731113) ^ 0x3D7EF909) + ((v1 + 1031731113) & 0xFBDFCF4E) - 1487)
                                     * (a1 != 0)) ^ v1)))();
}

uint64_t sub_10003F490@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33)
{
  int v38 = v33 ^ 0x512;
  *(unsigned char *)(a2 + (v34 + v36 + v38)) = a33;
  *(unsigned char *)(a2 + (v35 + a3 + 68)) = *(unsigned char *)(a1 + (v38 ^ 0xB2C05473) + 1296017610);
  return (*(uint64_t (**)(uint64_t))(v37 + 8 * (v38 ^ 0x77D)))(2998948537);
}

uint64_t sub_10003F520(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v4
                                                    + 8
                                                    * ((1426
                                                      * ((((((a2 ^ 0x3D0) - 211) | 0x88) ^ 0x180) & v2) == (((a2 ^ 0x3D0) - 18) | 0x20C) - 989)) ^ a2 ^ 0x3D0)))(a1, (v3 - a1));
}

void sub_10003F570()
{
}

uint64_t sub_10003F5E4()
{
  BOOL v6 = (*(_DWORD *)(v2 + 24) ^ v0) - 290499045 > 0xFFFFFFBE
    || (*(_DWORD *)(v3 - 0x6BA7059072F2C1BFLL) & ((v1 + 10) ^ 0x1CD)) != ((v1 - 322) | 0x14C) - 460;
  return (*(uint64_t (**)(void))(v4 + 8 * (v6 ^ v1)))();
}

uint64_t sub_10003F660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  *(void *)(&a25 + v27 + (v25 ^ 0x7C2u ^ (unint64_t)(a2 - 310))) = 0x7777777777777777;
  return (*(uint64_t (**)(void))(v28 + 8 * ((392 * ((v26 & 0xFFFFFFFFFFFFFFF8) == 8)) ^ v25)))();
}

uint64_t sub_10003F6B0@<X0>(int a1@<W0>, uint64_t a2@<X3>, unint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unint64_t v26 = ((v24 >> ((a1 + 29) & 0xBF ^ 0x8Fu)) ^ a2) + HIDWORD(a3) + (*(_DWORD *)(a22 + a8) ^ v22);
  *(_DWORD *)(a22 + 4 * a9) = v26 + v22 - ((v23 + a1 + 483 - 949) & (2 * v26));
  *(_DWORD *)(a22 + a8) = HIDWORD(v26) + v22 - ((2 * HIDWORD(v26)) & 0x49C56542);
  BOOL v28 = a18 + 328885511 > 151508725 || a18 + 328885511 < a14;
  return (*(uint64_t (**)(void))(v25 + 8 * (a1 ^ (2326 * v28))))();
}

uint64_t sub_10003F774()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((v0 - 455) | 5) + 421 * (v0 ^ 0x653) - 1532) * (v2 == v1)) ^ v0)))();
}

void sub_10003F7B4(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  a6 = v8 + 1224239923 * ((2 * (&a3 & 0x28F022A0) - &a3 - 686826150) ^ 0x25BC208D) - 1370;
  a4 = v7;
  a5 = a1;
  a3 = v7;
  (*(void (**)(uint64_t *))(v6 + 8 * (v8 ^ 0xF7Au)))(&a3);
  sub_100040F54();
}

uint64_t sub_10003F81C@<X0>(int a1@<W0>, int a2@<W8>)
{
  *(void *)(v2 + 1516) = v3;
  *(void *)(v2 + 1524) = v3;
  *(_DWORD *)(v2 + 1532) = a1;
  *(void *)(v4 + 96) = v2;
  *(_DWORD *)(v2 + 476) = 1054301366;
  STACK[0x2B0] = STACK[0x318];
  unint64_t v6 = STACK[0x508];
  unint64_t v7 = v5 + STACK[0x508] + ((a2 + 1745) ^ 0xD3D0C9B05DB3A80ELL);
  STACK[0x288] = STACK[0x508];
  STACK[0x250] = v6 + 432;
  STACK[0x2B8] = v7;
  STACK[0x260] = v4;
  return sub_10003F8A4(48);
}

uint64_t sub_10003F8A4@<X0>(int a1@<W4>, int a2@<W6>, int a3@<W8>)
{
  STACK[0x2A8] = *(void *)(v5 + 8 * a3);
  STACK[0x508] = STACK[0x250];
  LODWORD(STACK[0x448]) = -405001058;
  LODWORD(STACK[0x528]) = 1704253533;
  STACK[0x480] = 0;
  LODWORD(STACK[0x324]) = 935020333;
  unint64_t v6 = (_DWORD *)STACK[0x2B8];
  *unint64_t v6 = a1;
  LODWORD(STACK[0x2A0]) = v4 + 1464086843;
  LODWORD(STACK[0x2C0]) = v4 - 639570007;
  LODWORD(STACK[0x2C8]) = (v3 ^ 0x69B) + v4 + 436168605;
  LODWORD(STACK[0x290]) = v4 - 1645259736;
  LODWORD(STACK[0x298]) = v4 - 197422033;
  BOOL v8 = *v6 != a1 || a2 + 1 != ((77 * (v3 ^ 0x6FE)) ^ (a2 + 487));
  return (*(uint64_t (**)(void))(v5 + 8 * ((1690 * v8) ^ v3 ^ 0x69B)))();
}

uint64_t sub_10003F998@<X0>(int a1@<W1>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v2 ^ 0x15E) - 807) * (a2 == a1)) | v2)))();
}

void sub_10003F9D8()
{
  *(_DWORD *)(v0 - 0x6BA7059072F2C1BBLL) = 563395378;
  sub_10006DFE4();
}

uint64_t sub_10003F9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x55D5CC6D86BC0F2F];
  a14 = (831981571 * (&a13 ^ 0x99A1D024)) ^ 0x8F;
  uint64_t v17 = (*(uint64_t (**)(unint64_t **))(v15 + 18816))(&a13);
  return (*(uint64_t (**)(uint64_t))(v15 + 8 * ((1453 * (a15 == ((v16 + 449) ^ 0x241))) ^ 0x3F7)))(v17);
}

uint64_t sub_10003FA90(uint64_t a1, uint64_t a2)
{
  if (**(unsigned char **)(a2 + 8)) {
    char v2 = 82;
  }
  else {
    char v2 = 80;
  }
  *(unsigned char *)(a1 + 88) = ((**(unsigned char **)(a2 + 8) != 0) ^ 0xF3) + v2;
  return 0;
}

uint64_t sub_10003FBF8()
{
  return v1 ^ v0;
}

void sub_10003FC38(_DWORD *a1)
{
  unsigned int v1 = *a1 + 1543737703 * (a1 ^ 0x7EF4507C);
  v3[1] = v1
        + 1178560073 * (((~v3 & 0x39D0C9BC) - (~v3 | 0x39D0C9BD)) ^ 0xDEE5EBD5)
        - 504208554;
  char v2 = (char *)*(&off_10018D100 + (int)(v1 ^ 0x5C9)) - 4;
  (*(void (**)(_DWORD *))&v2[8 * (v1 + 843)])(v3);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10003FD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(void))(v16
                              + 8
                              * ((509 * (a14 + v15 - (unint64_t)(((1219 - v17) ^ 0x8FB74639) + v14) < 0x10)) ^ 0x8FAu)))();
}

uint64_t sub_10003FD88()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((61 * (((STACK[0x380] == 0) ^ (((v0 + 113) | 0x2C) - 83)) & 1)) ^ (((v0 + 113) | 0x22C) + 669))))();
}

uint64_t sub_10003FDD0()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((239 * ((((v1 ^ 0x31B) - 1134) & v0) == ((v1 - 779) ^ 0x35A3A60))) ^ v1)))();
}

uint64_t sub_10003FE14(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((247 * ((a6 + 1 + v6) > 0x2F)) ^ a2)))();
}

uint64_t sub_10003FEEC@<X0>(unsigned int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W8>)
{
  BOOL v12 = a3 < a1;
  *(unsigned char *)(a6 + (v7 + v9)) = *(unsigned char *)(v10 + (v8 + a4))
                                           - ((2 * *(unsigned char *)(v10 + (v8 + a4))) & 0xEF)
                                           + 119;
  if (v12 == v8 + a2 < a1) {
    BOOL v12 = v8 + a2 < a3;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((v12 * a5) ^ a7)))();
}

uint64_t sub_10003FF60@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + (v6 + v4)) = *(unsigned char *)(v3 + (v6 + v4));
  return (*(uint64_t (**)(void))(v1 + 8 * (((v6 - 1 == v2) * v5) ^ v7)))(0);
}

uint64_t sub_10003FF90@<X0>(uint64_t a1@<X4>, uint64_t a2@<X7>, int a3@<W8>)
{
  *(unsigned char *)(a1 + (a3 - 1199300153)) = *(unsigned char *)(a2 + (v5 - 1349855228));
  return (*(uint64_t (**)(void))(v7 + 8 * (((3 * (v4 ^ 0x4A7) + 639) * ((v6 + v3 + 1263) < 4)) ^ v4)))();
}

uint64_t sub_10003FFEC()
{
  int v4 = (v3 - 1270) | 0x284;
  unsigned int v12 = v3
      - 944348131 * ((((2 * &v10) | 0xFE58FDAA) - &v10 - 2133622485) ^ 0xDC35DA9B)
      - 793;
  uint64_t v10 = &STACK[0x5F548590D8AA6329];
  uint64_t v11 = v7;
  (*(void (**)(unint64_t **))(v1 + 8 * (v3 + 1142)))(&v10);
  LODWORD(v11) = v3 - 241568881 * (&v10 ^ 0xD6110442) - 627;
  uint64_t v10 = v7;
  (*(void (**)(unint64_t **))(v1 + 8 * (v3 ^ 0xC81u)))(&v10);
  if (HIDWORD(v11) == (v4 ^ (v0 + 386))) {
    int v5 = v9;
  }
  else {
    int v5 = HIDWORD(v11);
  }
  LODWORD(v10) = (v3 - 1099) ^ (((((&v10 | 0x239FE8D4) ^ 0xFFFFFFFE) - (~&v10 | 0xDC60172B)) ^ 0xFC24521)
                              * v2);
  uint64_t v11 = v7;
  (*(void (**)(unint64_t **))(v1 + 8 * (v3 ^ 0xC1Fu)))(&v10);
  LODWORD(v10) = (v4 - 473) ^ (((((&v10 | 0x7CEACA56) ^ 0xFFFFFFFE) - (~&v10 | 0x831535A9)) ^ 0x50B767A3)
                             * v2);
  uint64_t v11 = v8;
  (*(void (**)(unint64_t **))(v1 + 8 * (v4 + 1681)))(&v10);
  return v5 ^ v0;
}

uint64_t sub_1000401B8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (v1 ^ (1651 * (v0 > 1)))))();
}

void sub_1000401C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100040238()
{
  return sub_10004D52C();
}

uint64_t sub_100040258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(_DWORD *)(v22 - 188) = v21
                         - 1178560073 * ((((v22 - 192) | 0xC410A109) + (~(v22 - 192) | 0x3BEF5EF6)) ^ 0x23258360)
                         + 1064656144;
  (*(void (**)(uint64_t))(v20 + 8 * (v21 ^ 0xB5F)))(v22 - 192);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8 * (v21 ^ 0xBB5)))(336, 1777295586);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8 * (((v23 == 0) * (((v21 - 162) ^ 0x2AF) - 810)) | v21)))(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_100040314@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v1 == 0) ^ (a1 - 88)) & 1) * ((a1 - 291) ^ 0x2F)) ^ a1)))();
}

uint64_t sub_100040350@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  *(void *)(*a1 - 0x4B3FB627E137F32ALL) = 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((1869 * (*a2 == v3)) ^ (v4 - 1852))))();
}

uint64_t sub_100040394()
{
  return (*(uint64_t (**)(void))(v1
                                           + 8
                                           * ((11
                                             * (((((v0 - 576) ^ 0x9A6B25C2) + LODWORD(STACK[0x528])) ^ 0xFBDB3B9BFFFDFD7DLL)
                                              + 0x424C464DA44652FLL
                                              + ((2 * (((v0 - 576) ^ 0x9A6B25C2) + LODWORD(STACK[0x528]))) & 0x1FFFBFAFALL) != 3661783724)) ^ v0)))(v0 ^ 0x4C3u);
}

uint64_t sub_10004042C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((*(_DWORD *)(v9 + v10 * (uint64_t)a1 + 32) == a7)
                                * (v7 - 640 + ((2 * v7) ^ 0x5A6) - 186)) ^ v7)))();
}

uint64_t sub_100040464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned int v10 = v8 + ((a6 - 1300) | 0x130) + 201325895;
  if (v10 <= 0x40) {
    unsigned int v10 = 64;
  }
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((53 * (-v7 - v6 + ((a6 + 1266150966) & 0xFFEFFBF3) - 1466430271 + v10 < 0xF)) ^ a6)))();
}

uint64_t sub_1000404FC(int a1)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((v4 & ~(((v1 ^ 0x79F) * v2 - 1756) ^ (*(_DWORD *)(v6 + 1424) == (((v1 ^ 0x79F) * v2
                                                                                                  - 1756) | v3)
                                                                                                + 278073191)))
                                * a1) ^ ((v1 ^ 0x79F) * v2))))();
}

void sub_100040548(int a1@<W8>)
{
  BOOL v7 = *(_DWORD *)(*v4 + 4 * (v2 + a1 + 1)) == v3;
  *uint64_t v6 = (v2 + 3 * (v5 ^ 0x5EC) + a1 - v7 - 1177) * v1 - 1694193230 * (a1 - v7) + 828867143;
}

uint64_t sub_1000405D8@<X0>(int a1@<W8>, int8x16_t a2@<Q1>, int8x16_t a3@<Q4>, int8x16_t a4@<Q5>, int32x4_t a5@<Q6>, int8x16_t a6@<Q7>)
{
  unsigned int v10 = (const float *)(v9 + 908);
  int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10);
  uint64_t v12 = 4 * v6 - 4196;
  a2.i32[0] = *(_DWORD *)(v9 + v12);
  a2.i32[1] = *(_DWORD *)(v9 + 916);
  a2.i32[2] = *(_DWORD *)(v9 + 920);
  int8x16_t v13 = vextq_s8(v11, a2, 0xCuLL);
  int8x16_t v14 = a2;
  v14.i32[3] = *(_DWORD *)(v9 + 924);
  int32x4_t v15 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v14, a3), vandq_s8(v13, a6)), 1uLL), *(int8x16_t *)v9);
  v13.i32[0] = *(_DWORD *)(v7 + 4 * (*(_DWORD *)(v9 + v12) & 1));
  v13.i32[1] = *(_DWORD *)(v7 + 4 * (*(_DWORD *)(v9 + 916) & 1));
  v13.i32[2] = *(_DWORD *)(v7 + 4 * (*(_DWORD *)(v9 + 920) & 1));
  v13.i32[3] = *(_DWORD *)(v7 + 4 * (v14.i8[12] & 1));
  *(int8x16_t *)(v9 + 908) = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v15, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v15, v15), a4)), a5), v13);
  return (*(uint64_t (**)(void))(v8 + 8 * a1))();
}

uint64_t sub_100040694()
{
  STACK[0x2B8] = v2 + 1432;
  return (*(uint64_t (**)(void))(v1 + 8 * ((v0 - 1808) ^ (51 * (LODWORD(STACK[0x238]) ^ 1)))))();
}

uint64_t sub_100040710@<X0>(int a1@<W4>, int a2@<W5>, uint64_t a3@<X8>)
{
  uint64_t v8 = (a2 - 1224025616);
  *(unsigned char *)(a3 + v8) ^= *(unsigned char *)(v5 + (v8 & 0xF)) ^ *(unsigned char *)((v8 & 0xF) + v6 + 2) ^ *(unsigned char *)((v8 & 0xF) + v4 + 4) ^ (119 * (v8 & 0xF));
  return (*(uint64_t (**)(void))(v7 + 8 * ((30 * (a2 - 1 != v3)) ^ (a1 - 1993))))();
}

void sub_10004077C()
{
}

uint64_t sub_100040788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v10 = v6 != a5 && LODWORD(STACK[0x324]) - v7 == -769233200;
  return (*(uint64_t (**)(void))(v8 + 8 * ((v10 * (((v5 - 1879377313) & 0x700502DB) - 36)) ^ v5)))();
}

uint64_t sub_1000407D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (((((v8 ^ 0x91F) - v6 - 107) ^ (v5 + 2250)) * (a5 < 0x20)) ^ v8)))();
}

uint64_t sub_100040810(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(unsigned char *)(*(void *)(v5 + 96) + 1568) = 1;
  return (*(uint64_t (**)(void))(v4 + 8 * ((3905 * (*(_DWORD *)(v5 + 72) == ((a4 - 211) ^ 0x753) + 192842800)) ^ 0x753)))();
}

void sub_100040874()
{
}

void sub_1000408A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,unsigned __int8 a33,int a34,int a35,int a36,unsigned __int8 a37,__int16 a38,unsigned __int8 a39,int a40,int a41,int a42,int a43,unsigned __int8 a44,int a45,int a46,char a47)
{
  LODWORD(STACK[0x2A8]) = (a33 | ((a42 ^ (a46 + 865) ^ 0xD3) << 24) | ((a39 ^ 0xEF) << 8) | ((a44 ^ 0x6A) << 16)) ^ 0xDB78C477;
  LODWORD(STACK[0x2A0]) = a43 ^ 0x1732A7A;
  LODWORD(STACK[0x2C0]) = ((a41 << 8) | (a36 << 24) | (a34 << 16) | a40) ^ 0x77553B61;
  LODWORD(STACK[0x2C8]) = (((a35 ^ 0x1A) << 24) | (a45 << 16) | a37 | ((a47 ^ a3) << 8)) ^ 0x6221910E;
  JUMPOUT(0x100033CA8);
}

uint64_t sub_100040988@<X0>(int a1@<W3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((14 * (a1 ^ (a1 - 9))) ^ 0xFFFFF844) + 1875) * (a2 == v4)) ^ (v3 + a1 + 216))))();
}

uint64_t sub_1000409CC@<X0>(int a1@<W8>)
{
  _DWORD *v2 = v2[623];
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)((((((50 * (a1 ^ 0x1F3)) ^ 0x442) + 1401636673) & 0xAC74B5FF ^ 0x553)
                                     * (v3 == 1460804440)) ^ (25 * (a1 ^ 0x1F3)))))();
}

uint64_t sub_100040A3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)(((v4 + a4 + v5 - 118 - 899 < (v4 + a4))
                                     * ((v5 + 277850999) & 0xEF7056D7 ^ 0x6FC)) ^ v5)))();
}

uint64_t sub_100040A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  int8x16x4_t v72 = vld4q_s8(a5);
  uint64_t v51 = (v44 - 393842807) & 0x17798CCE;
  uint8x16_t v52 = (uint8x16_t)veorq_s8(v72.val[1], v50);
  _Q17 = vmovl_u8(*(uint8x8_t *)v52.i8);
  _Q16 = vmovl_high_u8(v52);
  __asm
  {
    SHLL2           V18.4S, V16.8H, #0x10
    SHLL2           V19.4S, V17.8H, #0x10
  }
  uint64_t v61 = (v51 + 1293789113) & 0xB2E25A7F;
  uint64_t v62 = (_DWORD *)(v45 + 4 * (v49 + 16 + v48));
  int v63 = *(v62 - 8) ^ *(_DWORD *)(v45 + 4 * (v49 + 16 + v48 + v61) - 2568);
  unsigned int v64 = v63 + v46 - ((2 * v63) & 0xBCD7C1CC);
  int v65 = *(v62 - 16) ^ *(v62 - 14);
  uint64_t v66 = v65 ^ 0x5E6BE0E6 ^ v64;
  HIDWORD(v68) = v65 ^ 0x5E6BE0E6 ^ v64;
  LODWORD(v68) = v65 ^ ~v64;
  int v67 = v68 >> 31;
  uint64_t v69 = (2 * v67) & 0xBCD7C1CC;
  *uint64_t v62 = v67 + v46 - v69;
  int v70 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8 * ((680 * (v49 + 17 == v49 + 80)) ^ ((int)v51 + 145)));
  return v70(v70, a2, a3, v51, 680, v61, v69, v66, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44);
}

uint64_t sub_100040C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  a14 = 1178560073 * ((2 * (&a13 & 0xFF65FB8) - &a13 + 1879679046) ^ 0x973C822E) - 504207030;
  uint64_t v18 = (*(uint64_t (**)(int *))(v15 + 18936))(&a13);
  return (*(uint64_t (**)(uint64_t))(v15 + 8 * (int)(((a13 == v14) * ((v17 - v16) ^ 0xC35E9A72)) ^ v17)))(v18);
}

uint64_t sub_100040D08(uint64_t a1)
{
  int v2 = 268847287 * (((a1 | 0x9AE06DE0) - (a1 & 0x9AE06DE0)) ^ 0x654A7CC8);
  int v3 = *(_DWORD *)(a1 + 40) + v2;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 24) + v2;
  unsigned int v9 = 235795823
     * (((&v11 | 0x5FD02389) - &v11 + (&v11 & 0xA02FDC70)) ^ 0xCB7D6AD0);
  int v16 = v9 ^ (v3 - 368398074);
  uint64_t v11 = v7;
  unsigned int v12 = v9 + (v8 ^ 0x47E75027) - 1611137057 + ((2 * v8) & 0xEF53BD5A ^ 0x60111D10);
  uint64_t v17 = v5;
  uint64_t v13 = v6;
  uint64_t v14 = v4;
  uint64_t result = (*(uint64_t (**)(uint64_t *))((char *)*(&off_10018D100 + v3 - 368400116) + 8 * (v3 ^ 0x15F55EA3) - 4))(&v11);
  *(_DWORD *)(a1 + 8) = v15;
  return result;
}

uint64_t sub_100040E80(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v13 = (a6 - 71) | 0x14u;
  uint64_t v14 = (a1 + v9 + v8 + 1972 - a3);
  *(int8x8_t *)(v11 - 7 + v14) = veor_s8(*(int8x8_t *)(v6 - 7 + v14), (int8x8_t)0x7777777777777777);
  return (*(uint64_t (**)(void, uint64_t, void, void))(v12
                                                                    + 8
                                                                    * (int)(((((v13 - 132) & v7) - a3 != 8)
                                                                           * (v13 + 87)) ^ v13)))((v13 + 87), v13, (-a3 - 8), v10 - ((v13 - 132) & v7));
}

uint64_t sub_100040EF4@<X0>(uint64_t a1@<X8>, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a5 = v7;
  a6 = a1;
  a3 = (v8 - 566) ^ (2078219279 * (((&a3 | 0xC3A7E2FA) - (&a3 & 0xC3A7E2FA)) ^ 0x195D748E));
  a4 = v7;
  uint64_t v9 = (*(uint64_t (**)(unsigned int *))(v6 + 8 * (v8 + 730)))(&a3);
  return sub_100040F54(v9);
}

void sub_100040F7C(_DWORD *a1)
{
  unsigned int v1 = *a1 - 69008221 * ((a1 - 2 * (a1 & 0x90A0864D) - 1868528051) ^ 0x4302D447);
  __asm { BRAA            X14, X17 }
}

uint64_t sub_100041074@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1973 * (v1 + 1 == v3)) ^ a1)))();
}

uint64_t sub_100041088@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((3946 * (v1 + 1 == v3 + 32)) ^ a1)))();
}

uint64_t sub_100041158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = v8 - (((v5 ^ 0xD27) + 349586956 + (v6 << (((v5 ^ 0x27) - 48) ^ 0xB))) & 0x1750AEDC) + 638811920;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                         + 8
                                                                                         * ((127
                                                                                           * (((2 * v9) & 0xEFFAFFFE ^ 0x750AEDC)
                                                                                            + (v9 ^ 0x7C552891)
                                                                                            + 995605778 == 861224209)) ^ v5 ^ 0xD27u)))(a1, a2, a3, a4, a5, 3433742033);
}

uint64_t sub_100041204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = v3 - (**(unsigned char **)(a2 + 8) == 0);
  *(_DWORD *)(*(void *)(a1 + 96) + 800) = 434174314;
  *(_DWORD *)(*(void *)(a1 + 96) + 804) = 1758911813;
  *(void *)(*(void *)(a1 + 96) + 808) = *(void *)(a1 + 96) + 816;
  uint64_t v5 = *(void *)(a2 + 8) + (*(_DWORD *)(a2 + 4) - v4);
  unsigned int v6 = 831981571 * (((v8 | 0xE5A776CE) - v8 + (v8 & 0x1A588930)) ^ 0x7C06A6EA);
  uint64_t v9 = *(void *)(a1 + 96) + 0x5E8E72AB319E45A9;
  uint64_t v10 = v5;
  v8[0] = (v4 - 429451004) ^ v6;
  v8[1] = v6 + 1299;
  (*(void (**)(_DWORD *))(a3 + 19160))(v8);
  return (-896403937 * v11 - 1561189052);
}

void sub_100041220(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20) - 1178560073 * ((-846133519 - (a1 | 0xCD9106F1) + (a1 | 0x326EF90E)) ^ 0xD55BDB66);
  __asm { BRAA            X10, X17 }
}

void sub_100041300()
{
}

uint64_t sub_100041490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  return sub_10005A41C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44);
}

uint64_t sub_10004149C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v21 = (((((v20 - 144) | 0x5E4A50D4) ^ 0xFFFFFFFE) - (~(v20 - 144) | 0xA1B5AF2B)) ^ 0x7B4F395F) * v19;
  *(_DWORD *)(v20 - 128) = (v18 + 1281) ^ v21;
  *(_DWORD *)(v20 - 140) = a1 - v21;
  *(void *)(v20 - 136) = a17;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v18 ^ 0x89C)))(v20 - 144);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * (int)(((*(_DWORD *)(v20 - 144) == ((2 * v18) ^ 0x26A) - 56550644)
                                                   * ((v18 + 2100239331) & 0x82D0E7FD ^ 0x61E)) ^ v18)))(v22);
}

uint64_t sub_10004155C(uint64_t a1, double a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int32x4_t a19, int8x16_t a20,int8x16_t a21)
{
  int8x16_t v24 = (int8x16_t)vld1q_dup_f32((const float *)v23);
  v25.i64[0] = 0x8000000080000000;
  v25.i64[1] = 0x8000000080000000;
  a3.i64[0] = *(void *)(v23 + 4);
  a3.i32[2] = *(_DWORD *)(v23 + 12);
  int8x16_t v26 = vextq_s8(v24, a3, 0xCuLL);
  int8x16_t v27 = a3;
  v27.i32[3] = *(_DWORD *)(v23 + 16);
  int32x4_t v28 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v27, a21), vandq_s8(v26, v25)), 1uLL), *(int8x16_t *)(v23 + 1588));
  v26.i32[0] = *(_DWORD *)(v21 + 4 * (*(_DWORD *)(v23 + 4) & 1));
  v26.i32[1] = *(_DWORD *)(v21 + 4 * (*(_DWORD *)(v23 + 8) & 1));
  v26.i32[2] = *(_DWORD *)(v21 + 4 * (*(_DWORD *)(v23 + 12) & 1));
  v26.i32[3] = *(_DWORD *)(v21 + 4 * (v27.i8[12] & 1));
  *(int8x16_t *)uint64_t v23 = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v28, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v28, v28), a20)), a19), v26);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 14336))(a1, 3857937780, 3028246781, 1266719999);
}

void sub_100041568()
{
  *(_DWORD *)(v0 - 0x6BA7059072F2C1BBLL) = 563395391;
  sub_10003B294();
}

uint64_t sub_100041588(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((60 * (*(_DWORD *)(v9 + v10 * (uint64_t)a1 + 36) == ((v7 - 1900) ^ (a7 + 94)))) ^ v7)))();
}

uint64_t sub_1000415BC()
{
  *(_DWORD *)(v5 - 128) = (v0 + 866) ^ (268847287
                                      * ((~((v5 - 128) | 0x58EB8656) + ((v5 - 128) & 0x58EB8656)) ^ 0x58BE6881));
  *(void *)(v5 - 120) = v4;
  *(void *)(v5 - 112) = v2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 ^ 0x9BF)))(v5 - 128);
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * ((11 * (v3 == (v0 ^ 0x3F5) + 396414563)) ^ v0)))(v6);
}

uint64_t sub_100041664()
{
  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8
                                            * ((((v1 - 1374483600) & 0x51ECF7DF ^ 0x51A)
                                              * ((v3 + v2 + 134381569) > 7)) ^ v1)))(v0);
}

uint64_t sub_1000416DC()
{
  return ((uint64_t (*)(void))STACK[0x540])();
}

uint64_t sub_10004170C@<X0>(int a1@<W8>)
{
  uint64_t v6 = (v3 + a1);
  int v7 = *(_DWORD *)((char *)&STACK[0x290] + v6 + 72);
  *(unsigned char *)(v4 + v6) = ((((v2 - 31) | 0x42) + 18) ^ HIBYTE(v7))
                      - ((2 * ((((v2 - 31) | 0x42) + 18) ^ HIBYTE(v7))) & 0xEF)
                      + 119;
  *(unsigned char *)(v4 + (v6 + 1)) = (BYTE2(v7) ^ 0x43) - ((2 * (BYTE2(v7) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(v4 + (v6 + 2)) = (BYTE1(v7) ^ 0xA1) - ((2 * (BYTE1(v7) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(v4 + (v6 + 3)) = v7 ^ 0xB2;
  unsigned int v8 = LODWORD(STACK[0x2EC]) + 303393374;
  BOOL v9 = v3 + 1603496192 < v8;
  if (v3 + 1603496192 < v1 != v8 < v1) {
    BOOL v9 = v8 < v1;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * ((8 * v9) | (16 * v9) | v2)))();
}

uint64_t sub_1000417F0@<X0>(uint64_t a1@<X4>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  int v36 = *(_DWORD *)(&a19 + ((v34 + a2) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + (v34 + a2)) = (v32 - 13) & 0xBF ^ 0x1B ^ v36;
  *(unsigned char *)(a1 + (v34 + a2 + 1)) = (BYTE1(v36) ^ 0xA1) - ((2 * (BYTE1(v36) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v34 + a2 + 2)) = (BYTE2(v36) ^ 0x43) - ((2 * (BYTE2(v36) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v34 + a2 + 3)) = (HIBYTE(v36) ^ 0x58) - ((2 * (HIBYTE(v36) ^ 0x58)) & 0xEF) + 119;
  BOOL v37 = v34 + 383737548 < (a31 - 112158172);
  if (v34 + 383737548 < v31 != a31 - 112158172 < v31) {
    BOOL v37 = a31 - 112158172 < v31;
  }
  return (*(uint64_t (**)(void))(v35 + 8 * ((!v37 * v33) ^ v32)))();
}

uint64_t sub_1000418E8()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((141 * (STACK[0x520] != 0)) ^ (v1 + 801))))();
}

uint64_t sub_100041910@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v10 = (a2 + a1 + a3) + a4;
  uint64_t v11 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3) & 0xF;
  unint64_t v12 = v11 - v10 + v8;
  uint64_t v13 = (v6 | v11) - v10;
  uint64_t v14 = (v7 | v11) - v10;
  BOOL v16 = v12 > 0xF && v4 - a4 >= (unint64_t)((v5 ^ 0x33Bu) + 1544) - 2087 && (unint64_t)(v13 + 1) > 0xF;
  unint64_t v17 = v14 + 2;
  int v19 = v16 && v17 > 0xF;
  return (*(uint64_t (**)(void))(v9 + 8 * ((2 * v19) | (8 * v19) | v5)))();
}

uint64_t sub_100041988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((1771 * (a7 + 1 == v8 + 48)) ^ a6)))();
}

uint64_t sub_100041A5C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v5 = 3 * (v4 ^ 0x7D4);
  if (v3 + 388571835 < 0) {
    int v6 = v3;
  }
  else {
    int v6 = v5 - v3 - 777144780;
  }
  return (*(uint64_t (**)(uint64_t, void))(v2 + 8 * ((3350 * (v6 - 1758911814 >= 0)) ^ v5)))(a1, (a2 + 1));
}

uint64_t sub_100041AFC(int a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((58
                                * (*(_DWORD *)(v7 + (v5 + a4) * (uint64_t)a1) != 74
                                                                              * ((((v4 - 1103721571) & 0x41C977CB)
                                                                                - 156464103) & 0x953773B ^ 0x72B)
                                                                              + 1336679324)) ^ (v4 - 1103721571) & 0x41C977CB)))();
}

uint64_t sub_100041C1C()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (((v1 < ((v2 + 564) ^ 0x48399A6Eu)) * ((v2 ^ 0x64C) - 1128)) ^ (v2 + 593))))();
}

void sub_100041C58()
{
}

uint64_t sub_100041C84()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((v2 > 0x82) * ((v0 ^ 0x7D1) - 1347)) ^ (v0 + 1139))))();
}

uint64_t sub_100041CB0(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((((a3 + 1 + v4) < 0x3C) | (8 * ((a3 + 1 + v4) < 0x3C))) ^ v3)))();
}

void sub_100041D80()
{
}

uint64_t sub_100041D88@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (v2 - 430653321) & 0x19AB3F7C;
  unint64_t v5 = ((unint64_t)&STACK[0x308] ^ 0xD77BBFBE5BC3BEFFLL)
     + 0x7DAFFF5FFD3DE001
     + ((v4 - 0x510880834878864CLL) & (2 * (void)&STACK[0x308]));
  unint64_t v6 = a2 - 1;
  STACK[0x308] = v6;
  *(unsigned char *)(a1 + v6) = (v5 ^ 0xBA) * (v5 + 17);
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((116 * ((v4 ^ 0x6B ^ (STACK[0x308] == 0)) & 1)) ^ v4)))();
}

uint64_t sub_100041E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a1 + (v3 - 1657738042) + 4) = (**(unsigned char **)(a2 + 8) ^ 0xD7)
                                                       + ((2 * **(unsigned char **)(a2 + 8)) & 0xAE)
                                                       + 43;
  unsigned int v4 = *(_DWORD *)(a2 + 4) + 1029604229;
  BOOL v5 = v4 < 0xA2F35BE2;
  BOOL v6 = v4 > 0xA2F35BE3;
  if (v5) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(a3 + 8 * ((662 * v6) ^ 0x5F5u)))();
}

uint64_t sub_100041EF0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v7 = a3 + a1;
  *(unsigned char *)(a2 + v7) = v5;
  return (*(uint64_t (**)(void))(v6
                              + 8 * (((v7 + (unint64_t)((v3 - 314) ^ 0x2B9u) - 56 < 0x38) * v4) | (v3 - 314))))();
}

uint64_t sub_100041F30@<X0>(uint64_t a1@<X0>, int a2@<W5>, int a3@<W7>, int a4@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5
                                                     + 8
                                                     * ((((a4 - 255000199) < 0x38) * (v4 - a2 + 2760)) ^ (a3 + v4 + 482))))(a1, -255000199);
}

uint64_t sub_100041F70()
{
  return sub_10006D9B4();
}

uint64_t sub_100041F88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int8x16_t *a6)
{
  *a6 = vaddq_s8(vsubq_s8(*(int8x16_t *)(a1 + (v7 + a4)), vandq_s8(vaddq_s8(*(int8x16_t *)(a1 + (v7 + a4)), *(int8x16_t *)(a1 + (v7 + a4))), v10)), v9);
  return (*(uint64_t (**)(void))(v8 + 8 * v6))();
}

void sub_100041FD8()
{
  int v0 = *(&off_10018D100
       + ((-113 * ((qword_1001B6D98 - dword_1001B6EB8) ^ 0xEA)) ^ byte_100163D10[byte_1001609A0[(-113 * ((qword_1001B6D98 - dword_1001B6EB8) ^ 0xEA))] ^ 0xBB])
       - 44);
  unsigned __int8 v1 = -113 * ((qword_1001B6D98 + *v0) ^ 0xEA);
  int v2 = *(&off_10018D100 + (byte_10016DDC8[(byte_100167FB8[v1 - 8] ^ 0x66) - 8] ^ v1) - 174);
  unint64_t v3 = (*v2 + *v0) ^ (unint64_t)&v5;
  void *v0 = 1932141199 * v3 - 0xC02EA2D01B5AE4ALL;
  void *v2 = 1932141199 * (v3 ^ 0xA437147DE07F15EALL);
  v6[1] = 1178560073 * ((-1176344558 - (v6 | 0xB9E26812) + (v6 | 0x461D97ED)) ^ 0xA128B585)
        - 504207030;
  LOBYTE(v2) = -113 * (*(_DWORD *)v0 ^ 0xEA ^ *(_DWORD *)v2);
  int v4 = (char *)*(&off_10018D100
               + ((-113 * (dword_1001B6EB8 ^ 0xEA ^ qword_1001B6D98)) ^ byte_10016DCC0[byte_100167CB0[(-113 * (dword_1001B6EB8 ^ 0xEA ^ qword_1001B6D98))] ^ 0xB9])
               - 23)
     - 4;
  (*(void (**)(_DWORD *))&v4[8
                                      * (byte_100167DB8[(byte_100163B10[v2] ^ 0x2F)
                                                                       - 8] ^ v2)
                                      + 17056])(v6);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100042210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v9 + 8 * (((v7 - 956 + (v7 ^ (v8 + 1038)) + 363104085) * (v6 == a6)) ^ v7)))();
}

uint64_t sub_100042248@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W8>)
{
  *(unsigned char *)(v3 + a2 + v4 + ((a1 - 541) | 0x905u)) = *(unsigned char *)(v5 + a2 + v4 + ((a1 - 541) | 0x905u))
                                                   - ((2 * *(unsigned char *)(v5 + a2 + v4 + ((a1 - 541) | 0x905u))) & 0xEF)
                                                   + 119;
  return (*(uint64_t (**)(void))(v6 + 8 * ((2039 * (a2 - 1 == a3)) ^ a1)))();
}

uint64_t sub_100042298(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  *(unsigned char *)(v7 + (a2 + a6)) = *(unsigned char *)(v8 + (a2 + a6))
                                           - ((*(unsigned char *)(v8 + (a2 + a6)) << ((a1 - 25) ^ v9)) & 0xEE)
                                           + 119;
  return (*(uint64_t (**)(void))(v10 + 8 * (((a2 - 1 == v11) * a7) ^ a1)))();
}

uint64_t sub_1000422DC(int a1)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((701 * (a1 ^ 0x117)) ^ 0x92E) + (a1 ^ 0x4EA))
                                * (*(_DWORD *)(v2 - 144) == *(_DWORD *)(v2 - 152))) ^ a1)))();
}

uint64_t sub_100042330(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1011 * (**(unsigned char **)(a2 + 8) == 0)) ^ 0x4D9u)))();
}

uint64_t sub_100042374@<X0>(int a1@<W8>)
{
  v7.i64[0] = 0xEEEEEEEEEEEEEEEELL;
  v7.i64[1] = 0xEEEEEEEEEEEEEEEELL;
  v8.i64[0] = 0x7777777777777777;
  v8.i64[1] = 0x7777777777777777;
  *(int8x16_t *)(v2 + (v4 + a1)) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
  return (*(uint64_t (**)(void))(v5 + 8 * (((((v3 + 1) & 0x1FFFFFFF0) == 16) * (v1 ^ 0x684)) ^ v1)))();
}

uint64_t sub_1000423DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8 * ((((v20 + 373) ^ 0xF52 ^ (2 * (v20 ^ 0x539))) * (v21 == a1)) ^ v20)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

void sub_10004242C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 460628867 * ((-1228667218 - (a1 | 0xB6C406AE) + (a1 | 0x493BF951)) ^ 0x5AD7B2C);
  uint64_t v2 = *(void *)(a1 + 40);
  int v4 = *(unint64_t **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(unint64_t **)(v2 - 0x5693A2FF918C2418);
  uint64_t v13 = *(void *)a1;
  unsigned int v12 = v1 - 1224239923 * ((&v8 - 1600500025 - 2 * (&v8 & 0xA09A4EC7)) ^ 0x5229B310) - 710;
  uint64_t v10 = v5;
  uint64_t v11 = v2;
  uint64_t v8 = v3;
  char v9 = &STACK[0x5E8E72AB319E42A9];
  uint64_t v6 = (char *)*(&off_10018D100 + v1 - 1123) - 4;
  (*(void (**)(uint64_t *))&v6[8 * v1 + 8936])(&v8);
  uint64_t v7 = *(void *)(v2 - 0x5693A2FF918C2420);
  LODWORD(v9) = v1
              + 831981571
              * ((1193525828 - (&v8 | 0x4723C244) + (&v8 | 0xB8DC3DBB)) ^ 0x217DED9F)
              + 489;
  uint64_t v8 = v7;
  uint64_t v10 = &STACK[0x5E8E72AB319E42B9];
  (*(void (**)(uint64_t *))&v6[8 * v1 + 9776])(&v8);
  char v9 = v4;
  LODWORD(v10) = (944348131 * (((&v8 | 0x113A7D54) - (&v8 & 0x113A7D54)) ^ 0xB223D91A)) ^ (v1 - 987);
  (*(void (**)(uint64_t *))&v6[8 * v1 + 10256])(&v8);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10004269C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a14 = (831981571 * ((295820161 - (&a13 | 0x11A1DB81) + (&a13 | 0xEE5E247E)) ^ 0x77FFF45A)) ^ 0x8F;
  a13 = &STACK[0x55D5CC6D86BC0F1F];
  uint64_t v17 = (*(uint64_t (**)(unint64_t **))(v16 + 18816))(&a13);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((3996 * (a15 == v15)) ^ 0x792u)))(v17);
}

uint64_t sub_100042750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4
                                                              + 8
                                                              * ((((((v3 + 93) | 0x60)
                                                                                   + *(unsigned char *)(a3 + a2)
                                                                                   - **(unsigned char **)(a1 + 8 * (v3 ^ 0x36C))) == 211)
                                                                * ((v3 ^ 0x3ED) - 167)) ^ (v3 + 218))))(1005, 352, 169);
}

uint64_t sub_1000427B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,unint64_t a27,uint64_t a28,_DWORD *a29)
{
  *a29 = v30 + 1;
  int v33 = v32 & ((v29 ^ (v29 >> 11)) << 7) ^ v29 ^ (v29 >> 11);
  *(_DWORD *)(*a25 + a27) ^= a15 & (v33 << 15) ^ v33 ^ ((a15 & (v33 << 15) ^ v33) >> 18);
  return (*(uint64_t (**)(void))(v31 + 8 * ((8 * (a27 < 0x1FC)) | 0x680)))();
}

uint64_t sub_100042824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v21 = 4 * (v16 + v14);
  int v22 = v17
      + 797567713
      + ((v20 - 111) ^ 0x93)
      + (*(_DWORD *)(*(void *)(a10 - 0x5E8E72AB319E4281) + v21) ^ v18)
      + (*(_DWORD *)(*(void *)(a11 - 0x5E8E72AB319E4281) + v21) ^ v18)
      - 394;
  *(_DWORD *)(*(void *)(a13 - 0x5E8E72AB319E4281) + v21) = v22 + v18 - (v15 & (2 * v22));
  BOOL v23 = v16 - 44208401 < (int)(v13 + 870823181);
  if (v13 > 0x4C184AF2 != v16 - 44208401 < -1276660467) {
    BOOL v23 = v13 > 0x4C184AF2;
  }
  return (*(uint64_t (**)(void))(v19 + 8 * ((35 * !v23) ^ (v20 - 111))))();
}

uint64_t sub_100042958@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * ((57 * ((((a1 ^ 0x680) - 728) ^ 0x208) != 32)) ^ a1 ^ 0x680)))();
}

uint64_t sub_1000429C0()
{
  int v5 = *(unsigned __int8 *)STACK[0x480]
     - (*(unsigned char *)(*(void *)(v3 + v4 * (uint64_t)v1 + 24) - 0x6F040A998C7EE55DLL) - 88);
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * ((198
                                              * ((((49 * (v0 ^ 0x263) + 716) ^ 0xFFDE4EA2) & (2 * v5))
                                               + (v5 ^ 0xFFEF26C6) == ((49 * (v0 ^ 0x263) + 511) ^ 0xFFEF24A7))) ^ (49 * (v0 ^ 0x263)))))(48);
}

uint64_t sub_100042A80()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((41
                                * (*(unsigned __int8 *)((v2 | ((unint64_t)(v2 < v1) << 32)) + v4 - 1417509658) == (((v0 + 39) & 0xCB) - 11))) ^ v0)))();
}

uint64_t sub_100042AE4()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((((v3 ^ 0x188 ^ (v1 - 347)) & (2 * (*(unsigned __int8 *)(v2 + 8) - 4)))
                                 + ((*(unsigned __int8 *)(v2 + 8) - 4) ^ v0) == v0)
                                * (v3 ^ 0x2E0)) ^ v3)))();
}

uint64_t sub_100042B30()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((206
                                * (((*(void *)(v1 + 24) == 0x3A31F5D96A0DCBB0) ^ (v0 - 120)) & 1)) ^ v0)))();
}

void sub_100042B70(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 1224239923 * ((-223099009 - (a1 | 0xF2B3C77F) + (a1 | 0xD4C3880)) ^ 0xFFFFC557);
  if (*(_DWORD *)(*(void *)(a1 + 8) - 0x5E8E72AB319E4285) - 1758911813 >= 0) {
    unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x5E8E72AB319E4285) - 1758911813;
  }
  else {
    unsigned int v3 = 1758911813 - *(_DWORD *)(*(void *)(a1 + 8) - 0x5E8E72AB319E4285);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v2 - 0x5E8E72AB319E4285) - 1758911813 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x5E8E72AB319E4285) - 1758911813;
  }
  else {
    unsigned int v4 = 1758911813 - *(_DWORD *)(v2 - 0x5E8E72AB319E4285);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  v7[1] = v1 - 1224239923 * ((((2 * v7) | 0x15CF2FCC) - v7 + 1964533786) ^ 0x78546A31) + 341;
  int v5 = (char *)*(&off_10018D100 + (v1 ^ 0x1B5)) - 4;
  (*(void (**)(_DWORD *))&v5[8 * (v1 ^ 0x8BB)])(v7);
  if (v3 >= v4) {
    unsigned int v6 = v4;
  }
  else {
    unsigned int v6 = v3;
  }
  __asm { BRAA            X12, X17 }
}

uint64_t sub_100042D20()
{
  *(_DWORD *)(v3 + v2) = v0;
  *(void *)(v7 - 128) = v3;
  *(_DWORD *)(v7 - 136) = (v1 ^ 0x3D9)
                        + ((((v7 - 144) | 0xF8EEAC69) - (v7 - 144) + ((v7 - 144) & 0x7115390)) ^ 0x614F7C4D) * v6
                        + 1239;
  *(void *)(v7 - 144) = v4;
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * (v1 ^ 0xB0D)))(v7 - 144);
}

uint64_t sub_100042DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return (*(uint64_t (**)(void))(v16
                              + 8 * (((a13 == ((v14 + 552287381) & 0xDF14C56F ^ (v13 + 1219))) * (v15 ^ 0x753)) ^ v14)))();
}

uint64_t sub_100042E10@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  unint64_t v8 = v2 - 1;
  STACK[0x348] = v8;
  *(unsigned char *)(a1 + v8) = ((v3 + v6 + 82) ^ v4) * (v3 + v6 + 99);
  return (*(uint64_t (**)(void))(v7 + 8 * (((STACK[0x348] == 0) * v5) ^ a2)))();
}

uint64_t sub_100042E1C()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((((v0 - 1021) | 0x77) ^ 0x22A) * (v2 == 1)) | (v0 + 29))))();
}

void sub_100042E54(_DWORD *a1@<X8>)
{
  *a1 = v1 + 148;
  sub_10006CF24(a1);
}

uint64_t sub_100042E64()
{
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (((((v0 == 63) ^ v1) & 1) * ((v1 ^ 0x165) - 1503)) ^ v1)))(119);
}

uint64_t sub_100042EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6
                                           + 8
                                           * ((((((a5 - 347636077) & 0x14B881AB) + 202) ^ 0x266) * (v5 < 0x20)) ^ a5)))(0);
}

uint64_t sub_100042EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  unsigned int v21 = 1224239923
      * ((((2 * (&a13 ^ 0x9F5B1C94)) | 0xF1532BEC) - (&a13 ^ 0x9F5B1C94) + 123103754) ^ 0x954174B5);
  LODWORD(a13) = (v18 ^ 0x6DE1BF7B) + ((2 * v18) & 0xDBC37EF6) - v21 - 98642179;
  LODWORD(a15) = v21 ^ 0x3B7;
  a14 = a11;
  (*(void (**)(uint64_t *))(v20 + 19624))(&a13);
  unsigned int v22 = 69008221 * (((~&a13 & 0x57029748) - (~&a13 | 0x57029749)) ^ 0x84A0C543);
  a13 = v16;
  a16 = ((v17 ^ 0x5174BDEE) - 1076106314 + ((2 * v17) & 0xA2E97BDC)) ^ v22;
  a15 = a11;
  HIDWORD(a14) = v22 + 2309;
  uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v20 + 19312))(&a13);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((267 * (a14 == v19)) ^ 0x6F4u)))(v23);
}

uint64_t sub_100043058(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)(((((a3 + 1104030494) & 0xBE31D7DD) + ((a3 + 1921) | 5) - 3309) * (v3 != v4)) ^ a3)))();
}

uint64_t sub_1000430A4(unsigned int a1)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((236
                                * ((((*(unsigned __int8 *)(v3 + 6) - 1) << (((a1 - 116) & 0x3E) - 59)) & v2)
                                 + ((a1 - 1480758164) & 0x584293BF ^ v4 ^ (*(unsigned __int8 *)(v3 + 6) - 1)) != v1)) ^ a1)))();
}

uint64_t sub_100043114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  unsigned int v20 = (&a16 ^ 0xE7352268) * v17;
  a16 = v19 - v20 + 1052;
  a17 = v20 ^ 0x3A;
  (*(void (**)(int *))(v18 + 8 * (v19 + 2053)))(&a16);
  return sub_100031180();
}

uint64_t sub_100043158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  return (*(uint64_t (**)(void))(v8 + 8 * (((*(_DWORD *)(*v9 + 4 * a6) != v6 + 2236) * (v7 ^ a5)) ^ (v7 - 1313))))();
}

uint64_t sub_100043190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                       + 8
                                                                       * (((2
                                                                          * ((((v4 + 33) ^ (v5 == v3)) & 1) == 0)) & 0xDF | (32 * (((v4 + 33) ^ ~(v5 == v3)) & 1))) ^ v4)))(a1, a2, a3, 27);
}

uint64_t sub_1000431DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  int v14 = (unsigned int *)(v13 + 4 * v9);
  uint64_t v15 = v9 + 1;
  int v16 = *(_DWORD *)(v13 + 4 * v15);
  unsigned int v17 = v14[397] ^ ((v16 & 0x7FFFFFFE | v8 & 0x80000000) >> 1);
  unsigned int *v14 = (v17 + v12 - ((v17 << ((v7 + 63) ^ a6)) & a2)) ^ *(_DWORD *)(v10 + 4 * (v16 & 1));
  return (*(uint64_t (**)(void))(v11 + 8 * (((v15 == 227) * a7) ^ v7)))();
}

uint64_t sub_100043248()
{
  STACK[0x518] = v0;
  return sub_1000418E8();
}

uint64_t sub_10004325C@<X0>(uint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,unsigned int *a57)
{
  int v58 = 52 * (a2 ^ 0x11C);
  uint64_t v59 = (*(uint64_t (**)(void, uint64_t, void))(v57 + 8 * (a2 ^ 0x85E)))(*a57, a1, LODWORD(STACK[0x46C]));
  return (*(uint64_t (**)(uint64_t))(v57
                                            + 8
                                            * ((((v58 ^ 0x68B) + 225 + 9 * (v58 ^ 0x68B) - 2179)
                                              * (LODWORD(STACK[0x54C]) != -563355418)) ^ v58)))(v59);
}

uint64_t sub_1000432D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13)
{
  int v16 = 3804331
      * ((((2 * ((v15 - 128) ^ 0x377493FC)) | 0xB4D0945C) - ((v15 - 128) ^ 0x377493FC) - 1516784174) ^ 0x13C9FC24);
  *(void *)(v15 - 120) = a13;
  *(_DWORD *)(v15 - 128) = v13 - v16 + 682;
  *(_DWORD *)(v15 - 124) = (((32 * a12) ^ 0x7FFEFFFB) + ((a12 << 6) & 0xFFFDFFFF) + (((v13 - 551) | 0x6C) ^ 0xF2FB70FA)) ^ v16;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v13 + 923)))(v15 - 128);
  return (*(uint64_t (**)(uint64_t))(v14 + 8
                                                  * ((369 * ((*a9 - 1758911814) < 0x7FFFFFFF)) ^ v13)))(v17);
}

uint64_t sub_1000433BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  return (*(uint64_t (**)(void))(v12
                              + 8
                              * (int)(((((265 * (a6 ^ 0xA3)) ^ 0xFFFFFBF4) + ((a6 - 2989224) & 0x2D9DDA))
                                     * ((a12 - 674700959) > 0x7FFFFFFE)) ^ a6)))();
}

uint64_t sub_100043420@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  unsigned int v10 = 3804331 * ((2 * (&a3 & 0x22CC8A28) - &a3 + 1563653584) ^ 0x23E65026);
  a3 = v7;
  a6 = a1;
  a7 = (v9 - 216) ^ v10;
  a4 = v10 ^ 0x34EDA71E;
  a5 = v10 ^ 0x4CDE268;
  uint64_t v11 = (*(uint64_t (**)(uint64_t *))(v8 + 8 * (v9 ^ 0x8A0)))(&a3);
  return (*(uint64_t (**)(uint64_t))(v8
                                            + 8
                                            * ((652
                                              * (*(_DWORD *)(v7 - 0x6BA7059072F2C1BBLL) == (((v9 + 660) | 0x18A) ^ 0xDE6BD20B)
                                                                                         + ((v9 + 1605351979) & 0xA0504D0D))) ^ v9)))(v11);
}

uint64_t sub_100043514()
{
  return sub_100043540();
}

uint64_t sub_100043540()
{
  return (*(uint64_t (**)(void))(v1 + 8 * v0))();
}

uint64_t sub_1000435BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21,_DWORD *a22,void *a23)
{
  int v28 = a15 & 0x2A99E3FC;
  *int8x16_t v27 = v24 + 1;
  unsigned int v29 = ((v23 ^ (v23 >> 11)) << 7) & 0x9D2C5680 ^ v23 ^ (v23 >> 11);
  int v30 = (unsigned char *)(a17 + a20 + (((a15 & 0x2A99E3FC) - 632) | 0x421u) - 1314);
  unsigned int v31 = -1805087677 * ((v30 ^ *(_DWORD *)(*a23 + (*a22 & 0xCDE29BC))) & 0x7FFFFFFF);
  unint64_t v32 = -1805087677 * ((v31 >> ((((a15 & 0xFC) - 120) ^ 5) + 11)) ^ v31);
  LOBYTE(v32) = *(unsigned char *)(*(void *)(v26 + 8 * (v28 - 872)) + (v32 >> 24)) ^ v29 ^ (((v29 << ((a15 & 0xFC) - 105)) & 0xEFC60000 ^ v29) >> 18) ^ *(unsigned char *)(*(void *)(v26 + 8 * (v28 - 694)) + (v32 >> 24)) ^ *(unsigned char *)(*(void *)(v26 + 8 * (v28 - 712)) + (v32 >> 24) + 2) ^ v32 ^ (-93 * ((-1805087677 * ((v31 >> (((v28 - 120) ^ 5) + 11)) ^ v31)) >> 24));
  *int v30 = v32;
  return (*(uint64_t (**)(void))(v25 + 8 * ((1052 * (a20 == (v32 != 0))) ^ a15 & 0x2A99E3FC)))();
}

uint64_t sub_1000436F0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((107 * (((v1 == 1704253533) ^ (-105 * (v0 ^ 0x35) + 53)) & 1)) ^ v0)))();
}

uint64_t sub_10004374C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v22 = ((&a13 & 0x94F48E05 | ~(&a13 | 0x94F48E05)) ^ 0x99B88C2D) * v21;
  a16 = a10;
  a17 = &STACK[0x634ED76D4AB8828D];
  a15 = v22 ^ 0x3177271F;
  a13 = v22 ^ 0x6BCE5709;
  a14 = (v20 - 2024874363) ^ v22;
  uint64_t v23 = (*(uint64_t (**)(int *))(v19 + 8 * (v20 ^ 0xC4D)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * (((a18 == v18) * ((v20 + 1786260927) & 0xFCE ^ 0x297)) | v20)))(v23);
}

uint64_t sub_100043820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v9 = v7 - 393410167 + 13 * (v2 ^ 0x130u);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(v1 + v9);
  BOOL v10 = v7 - 857168935 < v5;
  if (v4 > 0x1BA46D0D != v7 - 857168935 < v3) {
    BOOL v10 = v4 > 0x1BA46D0D;
  }
  return (*(uint64_t (**)(void))(v8 + 8 * ((v10 * v6) ^ v2)))();
}

uint64_t sub_100043898()
{
  int v3 = *(_DWORD *)(v2 - 0x6BA7059072F2C1C3)
     - ((2 * *(_DWORD *)(v2 - 0x6BA7059072F2C1C3) + 100821094) & 0x1750AEDC)
     + 2125040545;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((44
                                * (((((v0 ^ 0x51F) + 413) ^ 0xEFFAFCA3) & (2 * v3) ^ 0x750AEDC)
                                 + (v3 ^ 0x7C552891)
                                 + 995605778 != 861224209)) ^ v0)))();
}

uint64_t sub_100043940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v5
                                                                                        + 8
                                                                                        * ((31
                                                                                          * (((v6 < 0x20) ^ ((((v7 + 79) | 8) - 27) ^ (((v7 + 79) | 8) - 106))) & 1)) ^ ((v7 - 1201) | 0x408))))(a1, a2, a3, a4, a5, 0);
}

void sub_100043990(uint64_t a1)
{
  BOOL v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x5E8E72AB319E4285) == 1758911813
    || *(_DWORD *)(*(void *)a1 - 0x5E8E72AB319E4285) == 1758911813;
  int v1 = *(_DWORD *)(a1 + 16) + 460628867 * ((-2 - ((a1 | 0x675F0E27) + (~a1 | 0x98A0F1D8))) ^ 0xD43673A5);
  __asm { BRAA            X12, X17 }
}

uint64_t sub_100043AA4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(*(void *)(a2 + 96) + 468) = *(unsigned char *)(*(void *)(a1 + 8) + 12);
  return (*(uint64_t (**)(void))(v2 + 13320))(0);
}

uint64_t sub_100043B08@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  *(&a19 + a2 + a1) = 119;
  return (*(uint64_t (**)(void))(v20 + 8 * ((4088 * ((unint64_t)(a2 + a1 + 1) > 0x3F)) ^ v19)))();
}

uint64_t sub_100043B64@<X0>(int a1@<W8>)
{
  uint64_t v7 = v1;
  unsigned int v6 = (a1 - 614) ^ (69008221
                   * (((&v6 | 0x4F9F18DC) - &v6 + (&v6 & 0xB060E720)) ^ 0x9C3D4AD6));
  (*(void (**)(unsigned int *))(v3 + 8 * (a1 + 1540)))(&v6);
  return v4 ^ v2;
}

uint64_t sub_100043C04(unint64_t a1)
{
  STACK[0x508] = STACK[0x288] - 176;
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8 * (int)(((STACK[0x2C8] <= a1) * ((v2 + 1941122058) & 0x8C4CD3FF ^ 0x274)) | v2));
  STACK[0x418] = a1;
  return v3();
}

void sub_100043CC4()
{
}

uint64_t sub_100043CCC()
{
  LODWORD(STACK[0x53C]) = STACK[0x298];
  LODWORD(STACK[0x4DC]) = STACK[0x2A0];
  STACK[0x2E8] = STACK[0x260];
  STACK[0x3E8] = STACK[0x288];
  STACK[0x488] = STACK[0x290];
  STACK[0x508] = STACK[0x2B8];
  LODWORD(STACK[0x440]) = 2;
  STACK[0x3A0] = 0;
  LODWORD(STACK[0x46C]) = 0;
  LODWORD(STACK[0x52C]) = 0;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((13 * ((STACK[0x2B0] & 2) == ((v0 + 1002724030) & 0xC43B9FAF ^ 0xFFFFFFFC) + v0 - 1426)) ^ v0)))();
}

uint64_t sub_100043D64(int a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v12 = v9 + v8;
  unsigned int v13 = ((a2 + 853) ^ 0x4767F475 ^ (a2 + 2146955906) & 0xCB6FFB8B) + v12;
  if (v13 <= 0x40) {
    unsigned int v13 = a4;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((1949 * (a8 - v12 < v10 + a8 + a1 + v13)) ^ a2)))();
}

void sub_100043DD0()
{
}

uint64_t sub_100043DDC()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((((*(_DWORD *)(v1 - 136) + 441) ^ 0x16 ^ ((*(_DWORD *)(v1 - 136) + 441) | 0x16) ^ 0x1C)
                                * (*(_DWORD *)(v1 - 128) == *(_DWORD *)(v1 - 132))) ^ *(_DWORD *)(v1 - 136))))();
}

uint64_t sub_100043E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  LODWORD(STACK[0x444]) = 1804529743;
  LODWORD(STACK[0x334]) = 128;
  unint64_t v51 = STACK[0x388] + 0x5E8E72AB319E4499;
  unint64_t v52 = STACK[0x388] + 0x5E8E72AB319E45A9;
  unint64_t v53 = STACK[0x4F0];
  unint64_t v54 = STACK[0x408];
  int v55 = 2078219279 * ((~((v50 - 192) | 0xAFF9E70E) + ((v50 - 192) & 0xAFF9E70E)) ^ 0x8AFC8E85);
  *(_DWORD *)(v50 - 132) = v55 + v48 - 218;
  *(void *)(v50 - 128) = v53;
  *(void *)(v50 - 184) = 0;
  *(void *)(v50 - 176) = a48;
  *(void *)(v50 - 152) = 0;
  *(void *)(v50 - 144) = v54;
  *(_DWORD *)(v50 - 168) = 40008677 - v55;
  *(void *)(v50 - 160) = v52;
  *(void *)(v50 - 192) = v51;
  uint64_t v56 = (*(uint64_t (**)(uint64_t))(v49 + 8 * (v48 + 1551)))(v50 - 192);
  return (*(uint64_t (**)(uint64_t))(v49
                                            + 8
                                            * (((*(_DWORD *)(v50 - 136) == ((v48 + 874033219) & 0xCBE74F6E ^ 0xDE6BE3C8))
                                              * (v48 ^ 0x4E6)) ^ v48)))(v56);
}

uint64_t sub_100043F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v12 = *(unsigned __int8 *)(v9 - 0xB999BAB1C512023) ^ 0x89;
  if (v12 == 1)
  {
    unsigned int v18 = *(_DWORD *)(v9 - 0xB999BAB1C51203FLL);
    int v14 = v11 + 1365;
    *(unsigned char *)(v9 - 0xB999BAB1C51204BLL) = ((8 * v18) ^ 0x70) + ((v11 + 85) ^ 0xF4) - ((2 * ((8 * v18) ^ 0x70)) & 0xE0);
    *(unsigned char *)(v9 - 0xB999BAB1C51204ALL) = ((v18 >> 5) ^ 0xCD) - ((2 * ((v18 >> 5) ^ 0xCD)) & 0xEF) + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C512049) = ((v18 >> 13) ^ 0x53) - ((2 * ((v18 >> 13) ^ 0x53)) & 0xEF) + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C512048) = ((v18 >> 21) ^ 0x65) - 2 * ((v18 >> 21) ^ 0x65 ^ (v18 >> 21) & 8) + 119;
    unsigned int v19 = *(_DWORD *)(v9 - 0xB999BAB1C512043);
    HIDWORD(v20) = v19 ^ 6;
    LODWORD(v20) = v18 ^ 0x60000000;
    *(unsigned char *)(v9 - 0xB999BAB1C512047) = (v20 >> 29) - ((2 * (v20 >> 29)) & 0xEF) + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C512046) = (a4 ^ (v19 >> 5)) - ((2 * (a4 ^ (v19 >> 5))) & 0xEF) + 119;
    unsigned int v17 = ((v19 >> 20) | 0x11) - (v19 >> 21) + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C512045) = ((v19 >> 13) ^ 0xA8) - ((2 * ((v19 >> 13) ^ 0xA8)) & 0xEF) + 119;
    goto LABEL_5;
  }
  int v13 = v11;
  if (v12 == 2)
  {
    unsigned int v17 = *(_DWORD *)(v9 - 0xB999BAB1C512043);
    int v14 = (v11 + 1362) | 3;
    unsigned int v15 = *(_DWORD *)(v9 - 0xB999BAB1C51203FLL);
    HIDWORD(v16) = v17 ^ 6;
    LODWORD(v16) = v15 ^ 0x60000000;
    *(unsigned char *)(v9 - 0xB999BAB1C51204BLL) = ((v17 >> 20) | 0x11) - (v17 >> 21) + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C51204ALL) = ((v17 >> 13) ^ 0xA8)
                                         - ((((v11 + 82) | 3) ^ 0x6D) & (2 * ((v17 >> 13) ^ 0xA8)))
                                         + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C512049) = (a4 ^ (v17 >> 5)) - ((2 * (a4 ^ (v17 >> 5))) & 0xEF) + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C512048) = (v16 >> 29) - ((2 * (v16 >> 29)) & 0xEF) + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C512047) = ((v15 >> 21) ^ 0x65) - ((2 * ((v15 >> 21) ^ 0x65)) & 0xEF) + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C512046) = ((v15 >> 13) ^ 0x53) - ((2 * ((v15 >> 13) ^ 0x53)) & 0xEF) + 119;
    LOBYTE(v17) = ((8 * v15) ^ 0x70) - 2 * ((8 * v15) ^ 0x70 ^ (8 * v15) & 8) + 119;
    *(unsigned char *)(v9 - 0xB999BAB1C512045) = ((v15 >> 5) ^ 0xCD) - ((2 * ((v15 >> 5) ^ 0xCD)) & 0xEF) + 119;
LABEL_5:
    int v13 = 22 * (v14 ^ 0x8A6);
    *(unsigned char *)(v9 - 0xB999BAB1C512044) = v17;
  }
  STACK[0x460] = *(void *)(v10 + 8 * (v13 - 766));
  return sub_10003BEF4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000442B4()
{
  int v3 = ((*v2 == 0) ^ ((v0 - 1) ^ (v0 + 118))) & 1;
  return (*(uint64_t (**)(void))(v1 + 8 * ((v3 | (8 * v3)) ^ v0)))();
}

uint64_t sub_1000442F4()
{
  *uint64_t v1 = v0;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((463
                                * (((v0 - ((2 * v0) & 0x2C452384) + 371364290) ^ ((((v3 - 1111576640) & 0x42414EFE) - 734) | 0x8B) ^ (((v3 - 1111576640) & 0x42414EFE) - 251287263) & 0xEFA539F ^ 0x2B1538AA)
                                 + ((2 * (v0 - ((2 * v0) & 0x2C452384) + 371364290)) & 0x7A6F5CF8 ^ 0x28450080)
                                 - 86016540 != 941042784)) ^ (v3 - 1111576640) & 0x42414EFEu)))();
}

uint64_t sub_1000443B8@<X0>(int a1@<W0>, int a2@<W4>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * ((((a2 + v9 - 2057) ^ (a2 + 35))
                                * (a8 + v8 - (unint64_t)(a3 + a1) < 0x10)) ^ v9)))();
}

void sub_1000443F8(uint64_t a1)
{
  __asm { BRAA            X9, X17 }
}

uint64_t sub_100044434@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  unsigned int v13 = (((&a3 | 0x5190169B) - &a3 + (&a3 & 0xAE6FE960)) ^ 0x2F45336D) * v7;
  a6 = v8;
  a3 = v9;
  a4 = v13 ^ a1;
  a5 = (((v12 - 1417509657) ^ 0x17DDEF7E)
      - 319819042
      + (((v12 - 1417509657) << ((-73 * (v11 ^ 0xE)) ^ 0x92)) & 0x2FBBDEFC)) ^ v13;
  a7 = (v11 - 791) ^ v13;
  uint64_t v14 = (*(uint64_t (**)(uint64_t *))(v10 + 8 * (v11 ^ 0xD67)))(&a3);
  return (*(uint64_t (**)(uint64_t))(v10
                                            + 8
                                            * (((2 * (*(_DWORD *)(v9 - 0x6BA7059072F2C1BBLL) == -563355418)) | (16 * (*(_DWORD *)(v9 - 0x6BA7059072F2C1BBLL) == -563355418))) ^ v11)))(v14);
}

uint64_t sub_10004452C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28 = *(_DWORD *)(a1 + 24)
      + 3804331 * ((-2 - ((~a1 | 0x3DED129D) + (a1 | 0xC212ED62))) ^ 0x4338376B);
  unsigned int v29 = 235795823 * ((&v34 - 1061334659 - 2 * (&v34 & 0xC0BD517D)) ^ 0x54101824);
  int v34 = &STACK[0xB999BAB1C51230F];
  int v35 = v29 ^ 0x78F2562C;
  int v36 = v28 + v29 - 1882357521;
  (*(void (**)(unint64_t **))((char *)*(&off_10018D100 + (int)v28 + 4) + 8 * (int)(v28 ^ 0x96C) - 4))(&v34);
  return sub_100060568(3615489095, v28, v28 ^ 0x48B, (uint64_t)v33, v30, (uint64_t)&v32, v28, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_100044784()
{
  int v4 = v3 ^ 0x406;
  unsigned int v12 = v3
      - 944348131 * ((((2 * &v10) | 0x21534596) - &v10 + 1867930933) ^ 0x33B00685)
      - 1293;
  uint64_t v10 = &STACK[0x5F548590D8AA6311];
  int v11 = v7;
  (*(void (**)(unint64_t **))(v1 + 8 * (v3 + 642)))(&v10);
  LODWORD(v11) = v3
               - 241568881 * ((&v10 - 1200860867 - 2 * (&v10 & 0xB86C513D)) ^ 0x6E7D557F)
               - 1127;
  uint64_t v10 = v7;
  (*(void (**)(unint64_t **))(v1 + 8 * (v3 ^ 0xF75u)))(&v10);
  if (HIDWORD(v11) == (v3 ^ 0x406 ^ (v0 + 302))) {
    int v5 = v8;
  }
  else {
    int v5 = HIDWORD(v11);
  }
  int v11 = v7;
  LODWORD(v10) = (v3 - 1599) ^ (((((2 * (&v10 ^ 0x804118BC)) | 0x67E0F30A)
                                - (&v10 ^ 0x804118BC)
                                - 871397765) ^ 0x60133333)
                              * v2);
  (*(void (**)(unint64_t **))(v1 + 8 * (v3 + 555)))(&v10);
  LODWORD(v10) = (v4 - 573) ^ (((&v10 & 0xFBD564C | ~(&v10 | 0xFBD564C)) ^ 0x23E0FBB9) * v2);
  int v11 = v9;
  (*(void (**)(unint64_t **))(v1 + 8 * (v4 + 1581)))(&v10);
  return v5 ^ v0;
}

uint64_t sub_10004496C()
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(v1 + 8 * (v3 ^ 0x838)))(**(unsigned int **)(v2 + 8 * (v3 ^ 0x16B)), v6, v7);
  *(_DWORD *)(v0 + 16) = v4;
  return result;
}

uint64_t sub_1000449DC()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((((v1 + 1769609043) & 0x9685E67F ^ 0xA0A)
                                     * ((int)((v3 ^ 0xB5EFF3EF) + 1538698975 + (v0 & 0x6BDFE7DE) - 296133327) >= 0)) ^ v1)))();
}

uint64_t sub_100044A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v20 = 3804331 * ((((v19 - 144) | 0x65655D98) - ((v19 - 144) & 0x65655D98)) ^ 0x1BB0786E);
  *(void *)(v19 - 120) = v17;
  *(_DWORD *)(v19 - 128) = (v18 + 970) ^ v20;
  *(_DWORD *)(v19 - 124) = (v15 + 696745573 + 28 * (v18 ^ 0x383)) ^ v20;
  *(void *)(v19 - 136) = a15;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v16 + 8 * (v18 + 1534)))(v19 - 144);
  return sub_100044B10(v21);
}

uint64_t sub_100044B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20)
{
  *a20 = a14;
  return sub_100044B24();
}

void sub_100044B24()
{
  *(_DWORD *)(v1 + 56) = v0;
}

uint64_t sub_100044B64@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((58
                                * ((*(unsigned char *)(a1 + 32)
                                                   + 3 * (v1 ^ 0x51)
                                                   - *((unsigned char *)*(&off_10018D100 + (v1 ^ 0x3EE)) - 8)
                                                   + 60) != ((-99 * (v1 ^ 0x2D)) ^ 0x76))) ^ (v1 + 555))))();
}

uint64_t sub_100044C14@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W8>)
{
  *(unsigned char *)(v3 + (a1 + v4)) = *(unsigned char *)(a2 + (a1 + v4));
  return (*(uint64_t (**)(void))(v6 + 8 * (((a1 - 1 == a3) * (v5 ^ 0x4BA)) ^ (v5 - 871))))();
}

uint64_t sub_100044C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a35 == 2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35
  }
                                                                + 8
                                                                * (((LODWORD(STACK[0x2EC]) != 1491164578) * (v36 - 46)) | (v36 + 733))))(a1, a17, 235795823);
  if (a35 != 1) {
    JUMPOUT(0x100044D94);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35
                                                                       + 8
                                                                       * ((119
                                                                         * (LODWORD(STACK[0x2EC]) == v36 + 1491164508)) ^ (v36 + 1260))))(a1, a17, 235795823, a19);
}

uint64_t sub_100044DD8(int a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((((a3 + 375) ^ 0x250) * (v3 == a1)) ^ a3)))();
}

uint64_t sub_100044E00@<X0>(int a1@<W8>)
{
  *(unsigned char *)(*(void *)(v4 - 0x6BA7059072F2C1D3) + (v5 - 1394948306 + v2)) = *(unsigned char *)(*(void *)(v4 - 0x6BA7059072F2C1D3) + (v2 - 218024910));
  return (*(uint64_t (**)(void))(v3 + 8 * ((25 * ((a1 ^ 0xFFA) + v2 - 2335 == v1 + 2282)) | a1)))();
}

uint64_t sub_100044E70()
{
  int v2 = STACK[0x4FC];
  unint64_t v3 = STACK[0x2F8];
  STACK[0x348] = (LODWORD(STACK[0x4FC]) - 1704253533);
  return (*(uint64_t (**)(unint64_t))(v0
                                                     + 8
                                                     * (((v2 != 1704253533) * (((v1 - 813) | 0x2E0) ^ 0x2A3)) ^ (v1 + 1271))))(v3);
}

uint64_t sub_100044EC8()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((54
                                * (((v2 - 1) ^ ((v0 + v2 - 56247003) < 0xFFFFFFFE)) & 1)) ^ v2)))();
}

void sub_100044F08()
{
}

uint64_t sub_100044F1C(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  *(_DWORD *)(v63 - 120) = a8;
  *(_DWORD *)(v63 - 132) = v61 & 0xFFFFFFF8;
  *(_DWORD *)(v63 - 128) = v61;
  int v64 = -a4;
  int v65 = a2 + a1;
  char v66 = v60 + a2 + a1;
  char v67 = v66 + 5;
  char v68 = v66 + 6;
  char v69 = v66 + 7;
  char v70 = v66 + 8;
  char v71 = v66 + 9;
  char v72 = v66 + 11;
  *(_DWORD *)(v63 - 136) = (a7 - 1743826615) & 0x67F0AECF;
  uint64_t v73 = (v65 + a3 + v64);
  v75.val[0].i64[0] = ((_BYTE)v65 + (_BYTE)a3 + (_BYTE)v64) & 0xF;
  v75.val[0].i64[1] = (v72 + (_BYTE)v64) & 0xF;
  v75.val[1].i64[0] = (v59 + (_BYTE)v64 + ((a7 + 73) ^ 0xFD)) & 0xF;
  v75.val[1].i64[1] = (v71 + (_BYTE)v64) & 0xF;
  v75.val[2].i64[0] = (v70 + (_BYTE)v64) & 0xF;
  v75.val[2].i64[1] = (v69 + (_BYTE)v64) & 0xF;
  v75.val[3].i64[0] = (v68 + (_BYTE)v64) & 0xF;
  v75.val[3].i64[1] = (v67 + (_BYTE)v64) & 0xF;
  *(int8x8_t *)(v62 - 7 + v73) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(v62 - 7 + v73), *(int8x8_t *)(v58 + (v73 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v57 + (v73 & 0xF) - 7), *(int8x8_t *)(v56 + (v73 & 0xF) - 7)))), (int8x8_t)0x7777777777777777), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v75, (int8x16_t)xmmword_10016DEE0), (int8x8_t)0x505050505050505)));
  return (*(uint64_t (**)(__n128))(a56 + 8 * ((101 * (8 - (v61 & 0xFFFFFFF8) == v64)) ^ a7)))((__n128)xmmword_10016DEE0);
}

void sub_100045068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, int a14)
{
  int v17 = v14 & 0x203E6E33;
  int v18 = (v14 & 0x203E6E33) - 319;
  unsigned int v19 = 3804331 * ((2 * (&a10 & 0x3A058450) - &a10 - 973440084) ^ 0xBB2F5E5A);
  a14 = v18 ^ v19;
  a10 = v15;
  a13 = 0x5267DA57ABB8ED88;
  a11 = v19 ^ 0x143A90D2;
  a12 = v19 ^ 0x4CDE25C;
  (*(void (**)(uint64_t *))(v16 + 8 * (v17 ^ 0xB5Fu)))(&a10);
  sub_10003B294();
}

uint64_t sub_10004510C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((89
                                * ((*(unsigned char *)(a3 + a2)
                                                   - *(unsigned char *)(*(void *)(a1 + 8 * (v3 ^ 0x308)) - 4)
                                                   - 71) != (v3 ^ 0x52 ^ ((v3 + 101) | 8) ^ 0x46))) | (v3 + 1138))))();
}

uint64_t sub_100045184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,unsigned int a39)
{
  int v43 = a9 + 839;
  int v44 = (a9 + 839) ^ (a1 - 899);
  unsigned int v45 = v42[396] ^ ((*v42 & 0x7FFFFFFE | v42[623] & 0x80000000) >> 1);
  v42[623] = (v45 + v41 - (a2 & (2 * v45))) ^ *(_DWORD *)(v39 + 4 * (*v42 & (v44 ^ (a1 - 1))));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8 * ((592 * (a39 > (v44 ^ (a1 - 415)))) ^ v43)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_100045200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17
                                                              + 8
                                                              * (((*(_DWORD *)(v19 + 72) == 1704253544)
                                                                * ((((a5 - 575) ^ 0x6D) - v18 - 259) ^ 0x5A164EAB)) ^ (a5 - 575))))(a1, a17, 173609183);
}

uint64_t sub_10004526C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  *(_DWORD *)(v27 - 104) = (v22 + 63) ^ (((2 * ((v27 - 128) & 0x547DE090) - (v27 - 128) - 1417535634) ^ 0x78204D64) * v24);
  *(void *)(v27 - 128) = v26;
  *(void *)(v27 - 112) = a22;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v23 + 8 * (v22 ^ 0xD40)))(v27 - 128);
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8
                                            * (((*(_DWORD *)(v27 - 120) == v25 + 681) * (((v22 + 761) | 8) ^ 0x6A7)) ^ v22)))(v28);
}

uint64_t sub_100045308@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((51 * ((((v2 - 1405) ^ (v1 == ((v2 - 1369) ^ 0x2AE))) & 1) == 0)) ^ v2)))();
}

uint64_t sub_100045344()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((*(unsigned char *)(v2 - 0x6BA7059072F2C1BFLL) & 1) == 0) * ((v0 ^ 0x3DB) + v0 - 863 - 2078)) ^ v0)))();
}

uint64_t sub_100045388@<X0>(int a1@<W8>)
{
  BOOL v4 = (*(uint64_t (**)(void, uint64_t))(v3 + 8 * (v1 + 1964)))(a1 ^ v2, 51302153) == 0;
  return (*(uint64_t (**)(void))(v3 + 8 * (((((7 * (v1 ^ 0x1B3) + 21) | 0x10A) + 89) * v4) ^ v1)))();
}

uint64_t sub_1000453E8()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((25 * (v1 + v0 + v2 - 348129396 + 1084 < 43 * (v2 ^ 0x66Fu) - 1970)) ^ v2)))();
}

uint64_t sub_100045448(uint64_t result)
{
  return sub_10004BE40(result);
}

void sub_100045490()
{
}

uint64_t sub_1000454A4()
{
  _DWORD *v0 = 1758911813;
  return sub_1000484A0();
}

uint64_t sub_1000454B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, int a6@<W8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,int a28,unint64_t a29)
{
  int v34 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8 * a6);
  int v35 = STACK[0x2DC];
  int v36 = STACK[0x2DC];
  int v37 = STACK[0x2E0];
  int v38 = STACK[0x2E4];
  uint64_t v39 = LODWORD(STACK[0x2E0]);
  int v40 = STACK[0x2E4];
  int v41 = LOBYTE(STACK[0x2F0]) ^ 0x89;
  if (v41 == 2)
  {
    BOOL v46 = (unint64_t)&STACK[0x290] < a29 && v29 < (unint64_t)&STACK[0x2D0];
    return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8 * (((a27 + v31 + 936) * v46) ^ (v31 + 2238))))(821153383, 4432325);
  }
  else if (v41 == 1)
  {
    BOOL v43 = (unint64_t)&STACK[0x290] < a29 && v29 < (unint64_t)&STACK[0x2D0];
    return (*(uint64_t (**)(uint64_t))(v30 + 8 * (((a28 ^ ((v31 + 2042) | 9) ^ 0x63) * v43) ^ (v31 + 607))))(821153383);
  }
  else
  {
    LODWORD(STACK[0x2D8]) = 2 * (LODWORD(STACK[0x2D8]) ^ v32) + v32 - (v33 & (4 * (LODWORD(STACK[0x2D8]) ^ v32)));
    LODWORD(STACK[0x2DC]) = (v36 ^ v32) + (v35 ^ v32) + v32 - (v33 & (2 * ((v36 ^ v32) + (v35 ^ v32))));
    LODWORD(STACK[0x2E0]) = (v39 ^ v32) + (v37 ^ v32) + v32 - (v33 & (2 * ((v39 ^ v32) + (v37 ^ v32))));
    LODWORD(STACK[0x2E4]) = (v40 ^ v32) + (v38 ^ v32) + v32 - (v33 & (2 * ((v40 ^ v32) + (v38 ^ v32))));
    return v34(a1, v39, v34, a2, &STACK[0x290], a3, a4, a5, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17,
             a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24);
  }
}

uint64_t sub_100045688@<X0>(int a1@<W8>)
{
  *int v1 = STACK[0x52C];
  v1[85] = STACK[0x444];
  v1[86] = STACK[0x378];
  v1[87] = STACK[0x45C];
  v1[88] = STACK[0x44C];
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((STACK[0x3A0] != 0) * ((((a1 ^ 0x200) - 294) | 0x444) - 1490)) ^ ((a1 ^ 0x200) - 120))))();
}

uint64_t sub_1000456F0()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((((10 * (v1 ^ 0x504) - 1878) | 0xC8) ^ 0x1C8)
                                * ((v3 + v2 - 1) < 0x7FFFFFFD)) ^ v1 ^ 0x106)))();
}

uint64_t sub_100045754()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((v2 + 1340332720) ^ (25 * (v0 <= v3 + 623)))))();
}

uint64_t sub_100045788@<X0>(int a1@<W4>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  BOOL v19 = a15 - v16 == -769233200 && a16 == a1 + 17;
  return (*(uint64_t (**)(void))(v17 + 8 * ((v19 * ((a2 + 883) ^ 0x139)) ^ a2)))();
}

uint64_t sub_1000457CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((11 * (a3 & ~(v6 ^ (((v7 - 1704253530) & 0xFFFFFFFC) - a6 == -1704253533)))) ^ v6)))();
}

uint64_t sub_100045814@<X0>(int a1@<W1>, unsigned int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  *a6 = (a2 >> 2) ^ 0x379AF839;
  return (*(uint64_t (**)(void))(v11 + 8 * ((49 * (a10 == ((v10 + 65 * (a1 ^ 0x39F) - 872) ^ (a1 - 423)))) ^ a1)))();
}

uint64_t sub_100045878(uint64_t a1, uint64_t a2)
{
  STACK[0x328] = *(void *)(v2 + 8 * (v3 - 776));
  return sub_100073680(a1, a2, 1062661589, 44);
}

uint64_t sub_100045888()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((98 * ((v0 + 1) < 0x14)) ^ v1)))();
}

uint64_t sub_1000458A0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(*(void *)(a2 + 96) + 448) = *(unsigned char *)(*(void *)(a1 + 8) + 12);
  return (*(uint64_t (**)(void))(v2 + 8816))(0);
}

uint64_t sub_1000458F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LODWORD(STACK[0x53C]) = STACK[0x298];
  LODWORD(STACK[0x4DC]) = STACK[0x2A0];
  STACK[0x2E8] = STACK[0x260];
  STACK[0x3E8] = STACK[0x288];
  STACK[0x488] = STACK[0x290];
  LODWORD(STACK[0x54C]) = v9;
  return sub_100036AB8(a1, a2, a3, a4, a5, a6, a7, 563395391, a9);
}

uint64_t sub_10004593C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((504 * ((a2 - 732163551) > 0x2F)) ^ (a4 - 1727))))();
}

void sub_100045A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  *int v32 = 0x80000000;
  (*(void (**)(uint64_t))(v31 + 8 * ((v30 - 217) ^ 0x91F)))(a30);
  JUMPOUT(0x100045A98);
}

uint64_t sub_100045BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  BOOL v24 = v22 != a7 || a19 != ((((v19 - 1094) | 0x184) + 184527822) ^ (v19 - 1094 + v21));
  return (*(uint64_t (**)(void))(v20 + 8 * ((835 * v24) ^ v19)))();
}

uint64_t sub_100045C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16)
{
  a16 = v16 - 944348131 * ((2 * (&a14 & 0xA75C168) - &a14 + 1971994257) ^ 0xD6939ADF) - 1105;
  a14 = &STACK[0x5F548590D8AA63C9];
  a15 = a10;
  uint64_t v20 = (*(uint64_t (**)(unint64_t **))(v18 + 8 * (v16 ^ 0xF4Eu)))(&a14);
  return (*(uint64_t (**)(uint64_t))(v18
                                            + 8
                                            * (int)(((a12 == v17)
                                                   * (((v16 - 411125819) & 0xC35EDE3B) + ((v16 - v19 - 878) ^ 0xFFFFF813))) ^ v16)))(v20);
}

void sub_100045CCC()
{
}

uint64_t sub_100045CE0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7, unsigned int a8)
{
  a8 = v10
     - 944348131
     * (((&a6 ^ 0x314AC0E1 | 0xCC251B0C) + (&a6 ^ 0x240B00 | 0x33DAE4F3)) ^ 0x92776FAE)
     - 788;
  a6 = &STACK[0x5F548590D8AA63C1];
  a7 = a1;
  (*(void (**)(unint64_t **))(v8 + 8 * (v10 + 1147)))(&a6);
  a6 = a4;
  LODWORD(a7) = v10
              - 241568881
              * ((((&a6 | 0xDDC2490C) ^ 0xFFFFFFFE) - (~&a6 | 0x223DB6F3)) ^ 0xF42CB2B1)
              - 622;
  uint64_t v11 = (*(uint64_t (**)(unint64_t **))(v8 + 8 * (v10 + 1158)))(&a6);
  return (*(uint64_t (**)(uint64_t))(v8
                                            + 8
                                            * ((4 * (((a4 == 0) ^ (114 * (v10 ^ 0xEA) + v9 + 92)) & 1)) & 0xF7 | (8 * (((a4 == 0) ^ (114 * (v10 ^ 0xEA) + v9 + 92)) & 1)) | (114 * (v10 ^ 0x4EA)))))(v11);
}

uint64_t sub_100045E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(*(void *)(a1 + 96) + 1424) = ((a5 + 1000 + v5) ^ 0x8663C29D) + *(_DWORD *)(a2 + 4);
  *(void *)(*(void *)(a1 + 96) + 520) = *(void *)(a2 + 8) + 1;
  return 0;
}

uint64_t sub_100045E70@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v1 + 96) + 528) = 434174314;
  *(_DWORD *)(*(void *)(v1 + 96) + 532) = 1758911813;
  *(void *)(*(void *)(v1 + 96) + 536) = *(void *)(v1 + 96) + 544;
  uint64_t v4 = *(void *)(v2 + 8) + (*(_DWORD *)(v2 + 4) - v3);
  unsigned int v5 = 831981571 * (((v8 | 0xE332320C) - v8 + (v8 & 0x1CCDCDF0)) ^ 0x7A93E228);
  uint64_t v9 = *(void *)(v1 + 96) + 0x5E8E72AB319E4499;
  uint64_t v10 = v4;
  v8[0] = (v3 - 429451004) ^ v5;
  v8[1] = v5 + 1299;
  (*(void (**)(_DWORD *))(a1 + 19160))(v8);
  int v6 = v11;
  *(void *)(*(void *)(v1 + 96) + 512) = *(void *)(v2 + 8) + (*(_DWORD *)(v2 + 4) - v3);
  return (-896403937 * v6 - 1561189052);
}

void sub_100045FB0()
{
}

uint64_t sub_100045FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,unsigned int a24)
{
  if (a24 < 0xFD887C7E != (v25 - 184117388) < 0xFD887C7E) {
    BOOL v26 = (v25 - 184117388) < 0xFD887C7E;
  }
  else {
    BOOL v26 = v25 - 184117388 > a24;
  }
  return (*(uint64_t (**)(void))(v24 + 8 * ((v26 * (((366 * (a6 ^ (a6 + 4)) - 936) | 3) - 441)) ^ (a8 + a6 + 1169))))();
}

void sub_100046060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *a5 = v5;
}

void sub_100046084()
{
  LODWORD(STACK[0x428]) = v0;
  LODWORD(STACK[0x4CC]) = v1;
  LODWORD(STACK[0x42C]) = v2;
  LODWORD(STACK[0x43C]) = v3;
  LODWORD(STACK[0x304]) = v4 + 64;
  JUMPOUT(0x10003C0FCLL);
}

uint64_t sub_1000460B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23)
{
  *(&a23 + v23 - 301084339) = 119;
  return (*(uint64_t (**)(void))(v25 + 8 * ((1224 * ((unint64_t)(v23 - 301084338) < 0x40)) ^ (a7 + v24 + 958))))();
}

uint64_t sub_1000460FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  BOOL v13 = v7 == v11 && v9 != ((a7 + ((v8 - 521) | 0x40) - 4) ^ (v8 - 457));
  return (*(uint64_t (**)(void))(v10 + 8 * ((389 * v13) ^ v8)))();
}

uint64_t sub_100046144@<X0>(int a1@<W1>, char a2@<W6>, uint64_t a3@<X8>)
{
  int v13 = ((v12 ^ a1) + v8) & v9;
  *(_DWORD *)(*v6 + 4 * (v3 + v4 + v13 - 570)) = v10;
  return (*(uint64_t (**)(void))(a3 + 8 * (((((v11 == v13 + 669 + v5) ^ (v13 + a2)) & 1) * v7) ^ v13)))();
}

uint64_t sub_1000461A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v8 = v5 < v6;
  if (v8 == a3 - 0xAD4458B9BF006CLL < v3 + (unint64_t)((((v4 ^ 0x4B67FA46) - 2037) | 0xA8u) - 37) + 37) {
    BOOL v8 = a3 - 0xAD4458B9BF006CLL < v5;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((16 * v8) | (32 * v8) | v4 ^ 0x4B67FA46)))();
}

uint64_t sub_100046220()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1762 * ((v1 ^ 0x77E5D731u) + v0 < (((v1 ^ 0x22B) + 622) | 0xAu) + 2147482276)) ^ v1 ^ 0x22B)))();
}

uint64_t sub_100046294()
{
  unint64_t v4 = STACK[0x368] + 0xB999BAB1C512103;
  STACK[0x430] = v4;
  int v5 = 235795823 * ((((v3 - 192) | 0x3D2F07D7) - ((v3 - 192) & 0x3D2F07D7)) ^ 0xA9824E8E);
  *(_DWORD *)(v3 - 184) = v5 ^ 0x78F2562C;
  *(_DWORD *)(v3 - 180) = v2 - 1882357529 + v5 + 46;
  *(void *)(v3 - 192) = v4;
  (*(void (**)(uint64_t))(v1 + 8 * (v2 ^ 0x946)))(v3 - 192);
  STACK[0x328] = *(void *)(v1 + 8 * v2);
  STACK[0x2C8] = v0;
  return sub_100073680(1062661589, 44, v0);
}

uint64_t sub_10004636C(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((54 * (((((a3 ^ 0x85F) + 2143) ^ (v3 < ((3 * (a3 ^ 0x85F)) ^ 0x35u))) & 1) == 0)) ^ a3)))();
}

void sub_1000463B8()
{
  STACK[0x328] = *(void *)(v0 + 8 * (v1 - 761));
  JUMPOUT(0x100073674);
}

uint64_t sub_1000463E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,unsigned int a21,uint64_t a22,uint64_t a23,int a24,int a25)
{
  int v27 = (a25 ^ a8) - ((2 * (a25 ^ a8)) & 0xF0023CC8) + a20;
  BOOL v28 = ((2 * v27) & 0x7EFDF64E ^ 0x70003448) + (v27 ^ 0xC77FE543) - 638222849 == 427063590;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v25
                                                                                                 + 8
                                                                                                 * (((4 * v28) | (8 * v28)) ^ (v26 - 22))))(a1, a2, a21, a4, a5, 3867903705, 22);
}

uint64_t sub_100046478()
{
  *(void *)(v6 - 136) = v4;
  *(void *)(v6 - 120) = v2;
  *(_DWORD *)(v6 - 112) = (v3 - 627) ^ (((v6 + 1569708531 - 2 * ((v6 - 136) & 0x5D8FDA7B)) ^ 0x8E2D8871) * v0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v3 + 654)))(v6 - 136);
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * ((462 * (*(_DWORD *)(v6 - 128) > (v5 + v3 - 1519 - 218))) ^ v3)))(v7);
}

uint64_t sub_100046518()
{
  *(void *)(v3 - 112) = v5;
  *(_DWORD *)(v3 - 120) = v0
                        + 831981571 * (((~(v3 - 128) & 0xAD7B35B8) - (~(v3 - 128) | 0xAD7B35B9)) ^ 0x34DAE59D)
                        + 994;
  *(void *)(v3 - 128) = v2;
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 ^ 0xBC1)))(v3 - 128);
}

void sub_1000465B8(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v9 = 944348131 * ((((2 * &a3) | 0x25FABA30) - &a3 + 1828889320) ^ 0x31E4F956);
  a3 = v6;
  a4 = v7 - v9 + 954;
  a5 = a1 + v9 - (((v7 + 1963) ^ 0x852C4D9B) & (v8 - 366726626)) - 1213711352;
  (*(void (**)(uint64_t *))(v5 + 8 * (v7 ^ 0x924)))(&a3);
  JUMPOUT(0x100037548);
}

uint64_t sub_100046650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  unint64_t v36 = (*(_DWORD *)(a8 + v28) ^ v26) + HIDWORD(v29);
  *(_DWORD *)(a8 + 4 * a5) = v36 + ((23 * (v34 ^ 0x1C5) + v35) & v33 ^ (v26 - 155)) - (v27 & (2 * v36));
  *(_DWORD *)(a26 + v28) = HIDWORD(v36) + v26 - 2 * HIDWORD(v36);
  BOOL v38 = v31 + 720971691 > 543594905 || v31 + 720971691 < v30;
  return (*(uint64_t (**)(void))(v32 + 8 * ((v34 + 228) ^ (2016 * v38))))();
}

uint64_t sub_1000466E0()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (((STACK[0x3A0] != 0) * (((v1 - 294) | 0x444) - 1490)) ^ (v1 - 120))))();
}

void sub_10004671C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v27 - 104) = a15;
  *(_DWORD *)(v27 - 112) = (v25 | 0xE4)
                         - 1224239923
                         * ((((v27 - 144) | 0xAB3AC3) - (v27 - 144) + ((v27 - 144) & 0xFF54C538)) ^ 0xF218C714)
                         + 243;
  *(void *)(v27 - 128) = v26;
  *(void *)(v27 - 120) = a22;
  *(void *)(v27 - 144) = a25;
  *(void *)(v27 - 136) = v26;
  JUMPOUT(0x10004F388);
}

uint64_t sub_10004679C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int v30 = (v27 - 1207) | 0xEC;
  HIDWORD(a19) = a1;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, void))(v29 + 8 * (v30 + 1363)))(a4, 0);
  (*(void (**)(uint64_t))(v29 + 8 * (v30 ^ 0xAB2)))(v31);
  uint64_t v32 = (*(uint64_t (**)(void))(v29 + 8 * (v30 + 1362)))();
  return sub_100046814(v32, v33, v34, v35, v36, v37, v38, v39, a2, a3, a4, a5, v28, a7, a8, a9, a10, a11, a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_100046814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  unsigned int v32 = *(_DWORD *)(v28 + 4 * (v26 - 1));
  *(_DWORD *)(v28 + 4 * v26) = *(_DWORD *)(a25 + 4 * v30)
                               + v30
                               + ((1664525 * (v32 ^ (v32 >> 30))) ^ *(_DWORD *)(v28 + 4 * v26));
  int v33 = (v27 + 1077033186) ^ v25;
  *(_DWORD *)(v31 - 152) = v33;
  *(_DWORD *)(v31 - 148) = v33 ^ 0xF7;
  *(_DWORD *)(v31 - 112) = v25;
  *(_DWORD *)(v31 - 108) = (v27 + 1077033186) & 0x4C7A7D63 ^ v25;
  *(_DWORD *)(v31 - 144) = v25 + v27 - 1501686873;
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(v29 + 8 * (v27 + 1400)))(v31 - 152);
  return (*(uint64_t (**)(uint64_t))(v29 + 8 * *(int *)(v31 - 128)))(v34);
}

uint64_t sub_1000468D0(int a1, uint64_t a2, uint64_t a3, int a4)
{
  v10.i64[0] = 0x7777777777777777;
  v10.i64[1] = 0x7777777777777777;
  uint64_t v11 = v7 + v8 + a1 + (a4 ^ 0x6EFu);
  int8x16_t v12 = *(int8x16_t *)(v5 + v11 - 15);
  int8x16_t v13 = *(int8x16_t *)(v5 + v11 - 31);
  uint64_t v14 = v4 + v11;
  *(int8x16_t *)(v14 - 15) = veorq_s8(v12, v10);
  *(int8x16_t *)(v14 - 31) = veorq_s8(v13, v10);
  return (*(uint64_t (**)(void))(v9 + 8 * ((1271 * ((v6 & 0xFFFFFFE0) == 32)) ^ (a4 + 67))))();
}

uint64_t sub_100046934@<X0>(unsigned int a1@<W8>)
{
  *(_DWORD *)(v6 + 4 * a1) = a1 + (v1 ^ (v1 >> 30)) * v3;
  return (*(uint64_t (**)(void))(v5 + 8 * (((a1 < 0x26F) * v2) ^ v4)))();
}

uint64_t sub_100046960()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((508
                                * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 3) - 134)))
                                 + ((47 * (v3 ^ 0xCA)) ^ (v0 - 1457) ^ (*(unsigned __int8 *)(v2 + 3) - 134)) == v0)) ^ v3)))();
}

uint64_t sub_1000469B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  BOOL v20 = v17 > -1876501194;
  *(_DWORD *)(a14 + 4 * (v18 - 1379738350)) = v15;
  int v21 = ((v14 + 283) ^ 0x9D9BFC7F) + v18;
  int v22 = v20 ^ (v21 < 1876501193);
  BOOL v23 = v21 < v16;
  if (!v22) {
    BOOL v20 = v23;
  }
  return (*(uint64_t (**)(void))(v19 + 8 * ((111 * v20) ^ v14)))();
}

uint64_t sub_100046A30@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, int a5, unint64_t *a6, int a7)
{
  int v10 = a1 - 1628;
  unsigned int v11 = 3804331 * ((-980822518 - (&a3 | 0xC589D60A) + (&a3 | 0x3A7629F5)) ^ 0x44A30C03);
  a6 = &STACK[0x5267DA57ABB8ED88];
  a7 = (a1 - 1607) ^ v11;
  a4 = v11 ^ 0x143A90D2;
  a5 = ((v9 ^ 0x5CCFF2DC) - 1476530304 + (((a1 - 1628) ^ 0x399FE566) & (2 * v9))) ^ v11;
  a3 = v7;
  uint64_t v12 = (*(uint64_t (**)(uint64_t *))(v8 + 8 * ((a1 - 1628) ^ 0x9B3)))(&a3);
  return (*(uint64_t (**)(uint64_t))(v8
                                            + 8
                                            * ((1145
                                              * (*(_DWORD *)(v7 - 0x6BA7059072F2C1BBLL) == ((442 * (v10 ^ 0xDD)) ^ 0xDE6BE392))) ^ v10)))(v12);
}

uint64_t sub_100046B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((14 * (a5 + 1 == v9 + 64)) ^ a8)))();
}

uint64_t sub_100046C18(int a1)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((577 * (*(_DWORD *)(v2 + 4 * v3) == a1 + (v1 ^ 0x1BF) - 1492)) ^ v1)))();
}

unsigned int *sub_100046C4C@<X0>(unsigned int *result@<X0>, char a2@<W8>)
{
  unsigned int v4 = ((*(_DWORD *)(*(void *)(v2 - 0x5E8E72AB319E4281) + 4 * v3) ^ 0xE4E2B2A1) >> a2) ^ 0x27FE7EFE;
  *uint64_t result = v4 & 0x79AA9A81 ^ 0x13FB22D7 ^ ((v4 & 0x10A08080 | 0xEF5A3E69) - (v4 & 0x690A1A00 | 0x10A5C196) + 279298454);
  return result;
}

uint64_t sub_100046CCC(int a1, int a2, int a3)
{
  *(int8x8_t *)(v3 - 7 + a1 + v6 + v7 - a2 + 1268 + ((a3 - 296) | 0x100u)) = veor_s8(*(int8x8_t *)(v4- 7+ a1+ v6+ v7- a2+ 1268+ ((a3 - 296) | 0x100u)), (int8x8_t)0x7777777777777777);
  return (*(uint64_t (**)(void))(v8 + 8 * ((1385 * (a2 - (v5 & 0xFFFFFFF8) == -8)) ^ a3)))();
}

void sub_100046D34()
{
}

uint64_t sub_100046D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,int a57)
{
  unint64_t v71 = ((~(v59 - 144) | 0x67AA49DF751AC8F0) + ((v59 - 144) | 0x9855B6208AE5370FLL)) ^ 0x90E50CDE1E487E57;
  LODWORD(a32) = 627257967;
  LODWORD(a31) = 627257862;
  int32x4_t v69 = vdupq_n_s32(0xE5F37574);
  int32x4_t v70 = vdupq_n_s32(0x7FFFFFFEu);
  int32x4_t v68 = vdupq_n_s32(0x72F9BABAu);
  HIDWORD(a11) = -1203575031;
  HIDWORD(a14) = -272236544;
  a56 = 1928968890;
  a57 = -336524699;
  HIDWORD(a37) = dword_1001B99C8;
  *(void *)(v59 - 120) = dword_1001B99B8 - 235795823 * v71;
  *(_DWORD *)(v59 - 112) = -318040021 - 235795823 * v71;
  *(_DWORD *)(v59 - 108) = (235795823 * v71) ^ 0xED0B1841;
  *(void *)(v59 - 136) = -235795823 * v71;
  *(_DWORD *)(v59 - 144) = -235795823 * v71;
  *(_DWORD *)(v59 - 128) = (235795823 * v71) ^ 0xED0B1817;
  *(_DWORD *)(v59 - 124) = (235795823 * v71) ^ 0x787B9041;
  (*(void (**)(uint64_t))(v57 + 19336))(v59 - 144);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void, int *, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 8 * *(int *)(v59 - 140)))(1340331655, v60, v61, v62, v63, v64, v65, v66, a9, v58, a11, &a47, ((unint64_t)&a37 + 4) % 0x25 + 16, a14, 241568881* ((2 * ((v59 - 144) & 0xA72BA0363416570) - (v59 - 144) - 0xA72BA0363416578) ^ 0xFAD891754AAF9ECALL)+ 5119, 241568881* ((2 * ((v59 - 144) & 0xA72BA0363416570) - (v59 - 144) - 0xA72BA0363416578) ^ 0xFAD891754AAF9ECALL),
           v68.i64[0],
           v68.i64[1],
           v69.i64[0],
           v69.i64[1],
           v70.i64[0],
           v70.i64[1],
           v71,
           a24,
           a25,
           0,
           &dword_1001B99C8,
           &dword_1001B99B8,
           a29,
           a30,
           a31,
           a32,
           241568881 * ((v59 - 144) ^ 0xF55D489D6110442),
           v57,
           &a45,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

uint64_t sub_100047008()
{
  (*(void (**)(void))(v1 + 8 * (v0 + 1607)))();
  return (*(uint64_t (**)(void))(v1 + 8 * ((46 * (STACK[0x390] != 0)) ^ (v0 + 480))))();
}

uint64_t sub_100047044@<X0>(int a1@<W2>, int a2@<W5>, int a3@<W8>)
{
  uint64_t v8 = (unsigned int *)(v6 + 4 * v4);
  uint64_t v9 = v4 + 1;
  *uint64_t v8 = *(_DWORD *)(v5 + 4 * (*(_DWORD *)(v6 + 4 * v9) & 1)) ^ v8[397] ^ ((*(_DWORD *)(v6 + 4 * v9) & 0x7FFFFFFE | (a1 + a3 - 845 + 329) & v3) >> 1);
  return (*(uint64_t (**)(void))(v7 + 8 * (((v9 == 227) * a2) ^ a3)))();
}

uint64_t sub_1000470A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  v7.n128_u64[0] = (v6 + 9) & 0xF;
  v7.n128_u64[1] = (v6 + 8) & 0xF;
  v8.n128_u64[0] = (v6 + 7) & 0xF;
  v8.n128_u64[1] = (v6 + 6) & 0xF;
  v9.n128_u64[0] = (v6 + 5) & 0xF;
  v9.n128_u64[1] = (v6 + 4) & 0xF;
  v10.n128_u64[0] = 0x1717171717171717;
  v10.n128_u64[1] = 0x1717171717171717;
  return sub_100047184(a1, a2, a3, a4, a5, a1 & 0xFFFFFFF0, 0, a6, v7, v8, v9, (__n128)xmmword_10016DED0, v10);
}

uint64_t sub_100047184(double a1, __n128 a2, __n128 a3, __n128 a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14)
{
  uint64_t v28 = (v18 + v17 - a13);
  uint64_t v29 = ((_BYTE)v18 + (_BYTE)v17 - (_BYTE)a13) & 0xF;
  uint64_t v30 = v21;
  v31.i64[0] = vqtbl4q_s8(*(int8x16x4_t *)(&a2 - 1), a5).u64[0];
  v31.i64[1] = vqtbl4q_s8(*(int8x16x4_t *)&v24, a5).u64[0];
  int8x16_t v32 = vrev64q_s8(vmulq_s8(v31, a6));
  *(int8x16_t *)(v22 + v28) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v14 + (v28 & 0xF) - 15), *(int8x16_t *)(v20 + v28)), veorq_s8(*(int8x16_t *)(v16 + (v28 & 0xF) - 15), *(int8x16_t *)((v28 & 0xF) + v15 - 14))), vextq_s8(v32, v32, 8uLL));
  return (*(uint64_t (**)(void))(v23 + 8 * (((2 * (a13 + v19 - 440 == a12)) | (4 * (a13 + v19 - 440 == a12))) ^ a14)))();
}

uint64_t sub_100047208()
{
  int v5 = STACK[0x250];
  *(_DWORD *)STACK[0x288] = v1 + 1;
  unsigned int v6 = ((v0 ^ (v0 >> 11)) << 7) & 0x9D2C5680 ^ v0 ^ (v0 >> 11);
  unsigned int v7 = (v6 << ((v4 + 56) ^ 0x69)) & 0xEFC60000 ^ v6;
  unint64_t v8 = STACK[0x260] + (v5 - 1354851959);
  unsigned int v9 = -1805087677
     * ((*(_DWORD *)(*(void *)STACK[0x2A8] + (*(_DWORD *)STACK[0x2A0] & 0x57FB0EB0)) ^ v8) & (2
                                                                                              * (((v4 - 302) | 0x101) ^ 0x184)
                                                                                              + v2));
  unint64_t v10 = -1805087677 * (v9 ^ HIWORD(v9));
  LOBYTE(v10) = *((unsigned char *)*(&off_10018D100 + ((v4 - 712) ^ 0xC2)) + (v10 >> 24) - 8) ^ v7 ^ 0xBC ^ (v7 >> 18) ^ 0xBC ^ *((unsigned char *)*(&off_10018D100 + ((v4 - 712) ^ 0x7A)) + (v10 >> 24) - 12) ^ *((unsigned char *)*(&off_10018D100 + ((v4 - 712) ^ 0xF1)) + (v10 >> 24) + 5) ^ v10 ^ (-85 * BYTE3(v10));
  *(unsigned char *)unint64_t v8 = v10;
  return (*(uint64_t (**)(void))(v3 + 8 * ((191 * (v5 - (v10 != 0) == 1354851958)) ^ (v4 - 712))))();
}

uint64_t sub_10004739C(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((121 * (v4 + v3 + ((a3 - 388) | 0x401u) - 1027060661 < 8)) ^ a3)))();
}

uint64_t sub_1000473EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  int v36 = 831981571 * ((v35 - 168) ^ 0x99A1D024);
  *(void *)(v35 - 160) = a27;
  *(_DWORD *)(v35 - 168) = v36 ^ a16;
  *(_DWORD *)(v35 - 164) = v36 + v34 + 1185;
  (*(void (**)(uint64_t))(v33 + 8 * (v34 + 2420)))(v35 - 168);
  uint64_t v37 = STACK[0x2D4] & 0x3F;
  *((unsigned char *)&STACK[0x290] + (v37 ^ 0x2E)) = -9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33
                                                                       + 8
                                                                       * ((783 * ((v37 ^ 0x2E) > 0x37)) ^ v34)))(a33, 1284, 413, 2342826110);
}

uint64_t sub_1000474D4(uint64_t result)
{
  uint64_t v2 = *v1;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0x4E4F97F54E4F97F5;
  *(void *)(result + 16) = 0x1081360CFECBCDLL;
  *(_DWORD *)(result + 24) = -563355418;
  *(void *)(v2 - 0x55D5CC6D86BC0F1FLL) = result + 0x6BA7059072F2C1D3;
  *((_DWORD *)v1 + 3) = -563355418;
  return result;
}

uint64_t sub_100047538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v28 = ((-1813384685 - ((v27 - 144) | 0x93E9F213) + ((v27 - 144) | 0x6C160DEC)) ^ 0xB6EC9B98) * v26;
  *(_DWORD *)(v27 - 140) = -v28;
  *(_DWORD *)(v27 - 128) = (v24 + 1353) ^ v28;
  *(void *)(v27 - 136) = a24;
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v25 + 8 * (v24 + 1996)))(v27 - 144);
  return (*(uint64_t (**)(uint64_t))(v25
                                            + 8
                                            * (int)(((*(_DWORD *)(v27 - 144) == -56550210)
                                                   * (((v24 + 1117) ^ 0xFFFFFC0E) + (v24 ^ 0x7A5))) | v24)))(v29);
}

uint64_t sub_100047540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v18 - 120) = a14;
  *(void *)(v18 - 136) = v14;
  *(_DWORD *)(v18 - 112) = (v16 + 892) ^ (69008221
                                        * ((((v18 - 136) | 0xA5C87F5D) - ((v18 - 136) & 0xA5C87F5D)) ^ 0x766A2D57));
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v16 + 2173)))(v18 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * ((57 * (*(_DWORD *)(v18 - 128) != v17 + 41 * (v16 ^ 0xC0) - 1064)) ^ v16)))(v19);
}

void sub_1000475E8()
{
}

uint64_t sub_10004765C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return (*(uint64_t (**)(void))(v5 + 8 * (((*(_DWORD *)(v7 + 72) == a5 + 7) * (v6 + a4 + 1858)) ^ (v6 + a4 + 228))))();
}

uint64_t sub_10004769C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_100060FC0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1000476B4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 88) = 67;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 80) = *(void *)(a2 + 8);
  return 0;
}

uint64_t sub_1000476D4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 64) = *(void *)(a2 + 8);
  return 0;
}

uint64_t sub_1000476EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return (*(uint64_t (**)(void))(v13 + 8 * (((2 * (v15 != a13)) | (32 * (v15 != a13))) ^ v14)))();
}

uint64_t sub_100047720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v17 - 128) = v13;
  *(void *)(v17 - 112) = a12;
  *(_DWORD *)(v17 - 104) = (v15 + 421) ^ (((v17 - 128) ^ 0xD3A2520A) * v14);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v12 + 8 * (v15 + 1702)))(v17 - 128);
  return (*(uint64_t (**)(uint64_t))(v12
                                            + 8
                                            * ((((v15 ^ (*(_DWORD *)(v17 - 120) > v16)) & 1)
                                              * ((v15 - 385058699) & 0x16F387DD ^ 0x2B1)) ^ v15)))(v18);
}

uint64_t sub_1000477D0()
{
  return 4294925278;
}

uint64_t sub_1000477D8(int a1, int a2, int a3)
{
  uint64_t v9 = (a2 + a1 + a3);
  unint64_t v10 = v9 + v8 + 1;
  uint64_t v11 = ((523 * (v3 ^ 0x875) + 861821281) & 0xCCA1A7FF ^ 0x578) & v9;
  uint64_t v12 = v11 - v9;
  unint64_t v13 = v6 + v12;
  ++v11;
  unint64_t v14 = v6 + v11;
  unint64_t v15 = v5 + v12;
  unint64_t v16 = v5 + v11;
  unint64_t v17 = v4 + v12;
  unint64_t v18 = v4 + v11;
  BOOL v20 = v14 > v8 && v13 < v10;
  if (v16 > v8 && v15 < v10) {
    BOOL v20 = 1;
  }
  int v23 = v18 > v8 && v17 < v10 || v20;
  return (*(uint64_t (**)(void))(v7 + 8 * ((247 * (v23 ^ 1)) ^ v3)))();
}

uint64_t sub_100047880(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))*(&off_1001882B0 + ((100 * (*(_DWORD *)(a2 + 4) == 1704253534)) ^ 0xA5u)))();
}

uint64_t sub_1000478BC@<X0>(int a1@<W6>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * (((v2 == 24) * a1) | v3)))();
}

uint64_t sub_10004791C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  *(void *)(&a16 + a1 + ((v17 - 289) ^ 0xFFFFFFFFEE0DD0CFLL)) = 0x7777777777777777;
  return (*(uint64_t (**)(void))(v18 + 8 * ((2036 * ((v16 & 0x38) == 8)) ^ v17)))();
}

void sub_100047970(int a1@<W8>, int a2, __int16 a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,char a25,char a26,char a27,char a28,char a29,char a30,char a31,char a32,char a33,char a34,char a35,char a36,char a37,char a38,char a39,char a40,char a41,char a42,char a43,char a44,char a45,char a46,char a47,char a48,char a49,char a50,char a51,char a52,char a53)
{
  uint64_t v59 = *(unsigned int **)(v57 + 8 * (a1 ^ 0x1E4));
  uint64_t v60 = *v59;
  uint64_t v61 = *(void *)(v57 + 8 * (a1 ^ 0x1C1));
  uint64_t v62 = *(unsigned char **)(v61 - 4);
  a24 = *v62 - 106;
  a25 = v62[1] - 106;
  a26 = v62[2] - 106;
  a27 = v62[3] - 106;
  a28 = v62[4] - 106;
  a29 = v62[5] - 106;
  a30 = v62[6] - 106;
  a31 = v62[7] - 106;
  a32 = v62[8] - 106;
  a33 = v62[9] - 106;
  a34 = v62[10] - 106;
  a35 = v62[11] - 106;
  a36 = v62[12] - 106;
  a37 = v62[13] - 106;
  a38 = v62[14] - 106;
  a39 = v62[15] - 106;
  a40 = v62[16] - 106;
  a41 = v62[17] - 106;
  a42 = v62[18] - 106;
  a43 = v62[19] - 106;
  a44 = v62[20] - 106;
  a45 = v62[21] - 106;
  uint64_t v63 = *(unsigned char **)(v61 - 4);
  a46 = v63[22] - 106;
  a47 = v63[23] - 106;
  a48 = v63[24] - 106;
  a49 = v63[25] - 106;
  a50 = v63[26] - 106;
  a51 = v63[27] - 106;
  a52 = v63[28] - 106;
  a53 = v63[29] - 106;
  uint64_t v64 = (*(uint64_t (**)(uint64_t, char *, unsigned int *))(v55 + 8 * (a1 ^ 0x8ED)))(v60, &a24, v53);
  int v71 = ((2 * v64) & 0xBF2F29F2) + (v64 ^ 0xDF9794F9);
  if (v71 == -543714055)
  {
    *(_DWORD *)(v58 + 348) |= v56 - 346;
    *(_DWORD *)(v58 + 48) = 1837280493;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 8 * (v56 + 2055)))(*v53, v58 + 336, v58 + 340, v58 + 344, v54);
    sub_100056C84();
  }
  else
  {
    if (v71 == -543712953)
    {
      uint64_t v72 = *v59;
      uint64_t v73 = *(unsigned char **)(*(void *)(v57 + 8 * (v56 - 232)) - 4);
      a4 = *v73 - 53;
      a5 = v73[1] - 53;
      a6 = v73[2] - 53;
      a7 = v73[3] - 53;
      a8 = v73[4] - 53;
      a9 = v73[5] - 53;
      a10 = v73[6] - 53;
      a11 = v73[7] - 53;
      a12 = v73[8] - 53;
      a13 = v73[9] - 53;
      a14 = v73[10] - 53;
      a15 = v73[11] - 53;
      a16 = v73[12] - 53;
      a17 = v73[13] - 53;
      a18 = v73[14] - 53;
      a19 = v73[15] - 53;
      a20 = v73[16] - 53;
      a21 = v73[17] - 53;
      a22 = v73[18] - 53;
      a23 = v73[19] - 53;
      uint64_t v64 = (*(uint64_t (**)(uint64_t, char *, unsigned int *))(v55 + 8 * (v56 + 2085)))(v72, &a4, v53);
      int v74 = (2 * v64) & 0xAF6FBFF2;
      int v71 = (v64 ^ 0x57B7DFF9) - 279071488;
    }
    else
    {
      int v74 = 1736310784;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55
                                                                                          + 8
                                                                                          * ((83
                                                                                            * (v71 + v74 == 17 * (v56 ^ 0x101) + 1192595012)) ^ (v56 + 1361))))(v64, v65, v66, v67, v68, v69, v70);
  }
}

void sub_100047D1C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36) ^ (235795823
                             * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214));
  __asm { BRAA            X11, X17 }
}

uint64_t sub_100047E34(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, double a5, double a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int32x4_t a10)
{
  unsigned int v14 = v10 ^ 0x21;
  unint64_t v15 = (const float *)&v13[56].i32[3];
  int8x16_t v16 = (int8x16_t)vld1q_dup_f32(v15);
  a4.i64[0] = v13[57].i64[0];
  a4.i32[2] = v13[57].i32[2];
  int8x16_t v17 = vextq_s8(v16, a4, 0xCuLL);
  int8x16_t v18 = a4;
  v18.i32[3] = v13[57].i32[3];
  int32x4_t v19 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v18, a8), vandq_s8(v17, a7)), 1uLL), *v13);
  v17.i32[0] = *(_DWORD *)(v11 + 4 * (v13[57].i32[0] & 1));
  v17.i32[1] = *(_DWORD *)(v11 + 4 * (v13[57].i32[1] & 1));
  v17.i32[2] = *(_DWORD *)(v11 + 4 * (v13[57].i32[2] & 1));
  v17.i32[3] = *(_DWORD *)(v11 + 4 * (v18.i8[12] & 1));
  *(int8x16_t *)((char *)v13 + 4 * (v14 ^ 0x1B8)) = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v19, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v19, v19), a9)), a10), v17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8 * (int)(v14 ^ 0x21)))(a1, a2, 1269, 1357);
}

uint64_t sub_100047F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8 * (((((a9 == 0) ^ (-69 * (v17 ^ 0xDE) + 1)) & 1) * ((229 * (v17 ^ 0x1D1)) ^ 0x2A9)) ^ v17)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, *(void *)(a1 + 24), a12, a13, a14, a15, a16, a17);
}

uint64_t sub_100047F74()
{
  unsigned int v3 = LODWORD(STACK[0x324]) + 1142073664;
  int v4 = ((v1 + 372840464) < 0x7BCDF06D) ^ (v3 < 0x7BCDF06D);
  BOOL v5 = v3 < v1 + 372840464;
  if (v4) {
    BOOL v5 = (v1 + 372840464) < 0x7BCDF06D;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * (int)((v5 * ((((v0 ^ 0x22B) + 1144) ^ 0xFFFFFBCF) + 49 * (v0 ^ 0x22B))) ^ v0)))();
}

uint64_t sub_100047FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v50 = (_DWORD *)(a27 + 24 * v43);
  *uint64_t v50 = v48;
  v50[1] = v44;
  *(void *)(v46 + 24 * v43 + 16) = v45;
  void v50[4] = a32;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 8 * ((((*(_DWORD *)(a28 + 48 * v47 + 32) + 1020415285) < 0x80000003) * (((v42 ^ 0x2FB) + 751) ^ 0x180)) ^ v42 ^ 0x2FB)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42);
}

uint64_t sub_10004807C()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((1613 * (v1 == 1222)) ^ v1 ^ 0x584)))();
}

uint64_t sub_1000480F8()
{
  return (*(uint64_t (**)(uint64_t))(v5
                                            + 8
                                            * (((v1 + v0 + ((v4 + v3 + 462) ^ 0xB25684BD) > 7) * (v3 + 1014)) ^ v3)))(v2);
}

uint64_t sub_100048144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  return (*(uint64_t (**)(uint64_t))(v29
                                            + 8
                                            * (((v27 - 1449786096 >= (v27 - 1449786216 + v28 - 769))
                                              * ((103 * ((v28 + 1436) ^ 0x8DC)) ^ 0x43D)) ^ (v28 + 1436))))(a27);
}

uint64_t sub_1000481A8@<X0>(uint64_t a1@<X8>)
{
  int v4 = *(_DWORD *)(v2 - 0x5E8E72AB319E4285);
  int v5 = v4 - 1758911813;
  if (v4 - 1758911813 < 0) {
    int v5 = 1758911813 - v4;
  }
  *(_DWORD *)(v1 - 0x5E8E72AB319E4285) = v4;
  BOOL v6 = (v5 ^ 0x7F63CED3) - 1342243841 + ((v5 << ((v3 - 8) ^ 0xF0 ^ (v3 - 21) & 0xFB)) & 0xFEC79DA6) == 795003602;
  return (*(uint64_t (**)(void))(a1 + 8 * (((8 * v6) | (32 * v6)) ^ v3)))();
}

void sub_100048258()
{
}

void sub_100048268(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v9 = v7 + 282;
  a4 = v7 + 831981571 * ((&a3 + 2089891314 - 2 * ((unint64_t)&a3 & 0x7C9135F2)) ^ 0xE530E5D6) + 860;
  a3 = a1;
  a5 = v6;
  (*(void (**)(uint64_t *))(v5 + 8 * (v7 + 1593)))(&a3);
  *unint64_t v8 = (v9 ^ 0xD1ADBECD) - *v8;
  sub_100069C04();
}

uint64_t sub_1000482E4@<X0>(int a1@<W0>, int a2@<W4>, int a3@<W6>, int a4@<W7>, uint64_t a5@<X8>)
{
  HIDWORD(v16) = a1 ^ v15;
  LODWORD(v16) = a1 ^ v10;
  int v17 = (a4 ^ v11)
      + (v16 >> 27)
      + (*(_DWORD *)(v14 + 4 * (a5 + v12)) ^ v9)
      + (((a3 ^ v6) + v11 - ((v7 + a2 + 993 - 1912) & (2 * (a3 ^ v6)))) ^ v5);
  return (*(uint64_t (**)(void))(v8 + 8 * ((2738 * (a5 + 1 == v13 + 24)) ^ a2)))(v17
                                                                                             - ((2 * v17 - 575416510) & v7) - 954364570);
}

uint64_t sub_1000483A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((500 * (a5 != v5)) ^ v7)))();
}

uint64_t sub_1000483D4@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + v4 + a1 - 1) = v7;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((228 * (a2 + v4 < (unint64_t)(((v2 ^ 0x1FD) + v5) & v3) - 6)) ^ v2 ^ 0x1FD)))();
}

void sub_100048414()
{
  uint64_t v7 = *(void *)(v5 - 0x5E8E72AB319E4281);
  unsigned int v8 = (*(_DWORD *)(v7 + 4 * (v6 - 1)) ^ v2) >> v1;
  *(_DWORD *)(v7 + 4 * (v4 + v0 + 1092)) = v8 + v2 - (v3 & (2 * v8));
  JUMPOUT(0x10004849CLL);
}

uint64_t sub_1000484DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  int v66 = v61 - 88;
  LODWORD(STACK[0x504]) = v60;
  uint64_t v67 = (*(uint64_t (**)(uint64_t, void))(v62 + 8 * (v61 + 1481)))(a60, 0);
  uint64_t v68 = (_DWORD *)STACK[0x2C8];
  uint64_t v69 = *(void *)(STACK[0x2C8] + 16);
  v68[1] = *(_DWORD *)(STACK[0x2C8] + 24);
  v68[2] = v69;
  uint64_t v70 = 8 * (v61 ^ 0xAC8);
  v68[3] = (*(uint64_t (**)(uint64_t))(v62 + v70))(v67);
  *uint64_t v68 = (*(uint64_t (**)(void))(v62 + v70))();
  v63[1] = *(_DWORD *)STACK[0x2C8] + ((1664525 * (*v63 ^ (*v63 >> 30))) ^ v63[1]);
  *(_DWORD *)(v65 - 188) = v64 | 1;
  *(void *)(v65 - 168) = STACK[0x2B8];
  *(_DWORD *)(v65 - 176) = ((v66 - 1827871433) ^ 0xFE) - v64;
  *(_DWORD *)(v65 - 152) = v64 + v66 + 2104631576;
  *(_DWORD *)(v65 - 160) = v64 + v66 - 1827871433 + 123;
  *(_DWORD *)(v65 - 156) = v66 - 1827871433 - v64;
  *(void *)(v65 - 184) = v64 + 2062945556;
  uint64_t v71 = (*(uint64_t (**)(uint64_t))(v62 + 8 * (v66 + 1573)))(v65 - 192);
  return (*(uint64_t (**)(uint64_t))(v62 + 8 * *(int *)(v65 - 192)))(v71);
}

uint64_t sub_10004862C()
{
  BOOL v5 = v2 + 1376984849 > (int)((v0 - 1645859033) ^ 0x94B0C5D5) || v2 + 1376984849 < v3 - 1990790557;
  return (*(uint64_t (**)(void))(v1 + 8 * ((411 * (((v0 + 39) ^ v5) & 1)) ^ v0)))();
}

uint64_t sub_1000486D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = (((v7 - 556) | 0x80u) ^ a4) + v6;
  BOOL v12 = v8 != 2 && v10 != a2 + ((v7 - 974) | 0x10u) + 24;
  return (*(uint64_t (**)(void))(v9 + 8 * ((v12 * a6) ^ v7)))();
}

uint64_t sub_100048710(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  int v12 = *(unsigned __int8 *)(v8 + (a6 + v11 + 438)) | (a3 << 8);
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v9 + 8 * ((949 * (v10 - 1 == a7)) ^ a8)))(a1, a2, ((v12 + 1797759744) ^ 0x67D7FD5F) - 37954818 + (((2 * a8) ^ 0xCFAFF13E) & (2 * (v12 + 1797759744))));
}

uint64_t sub_100048784@<X0>(uint64_t a1@<X2>, int a2@<W7>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28)
{
  *(&a28 + a3 + a1) = 119;
  return (*(uint64_t (**)(void))(v29 + 8 * ((1352 * ((unint64_t)(a3 + 1 + a1) < 0x40)) ^ (a2 + v28 + 290))))();
}

uint64_t sub_1000487C8@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v12 = (char)(v3 - 2) - (char)(v4 + v2 + 66 + 78);
  LODWORD(STACK[0x2C0]) = a1 + (v12 ^ 0xC7E7FBC6) + ((2 * v12) & 0x8FCFF78C) + 965;
  int v13 = (*(unsigned __int8 *)(a2 + 1128) ^ 0x77) - *(unsigned __int8 *)(v10 + 1148);
  return (*(uint64_t (**)(uint64_t))(v8
                                            + 8
                                            * ((((v13 ^ 0x5E7F9F7F) + v5 + ((v13 << ((v2 + 66) ^ v9)) & v7) != v6) * v11) ^ (v2 - 958))))(44);
}

uint64_t sub_100048808@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W4>, int a5@<W8>)
{
  *(unsigned char *)(*(void *)(a1 + 8) + (a4 + a5)) = ((a3 ^ v7) >> v8)
                                                            - ((((a2 + 48) & 0x7F) - 33) & (2 * ((a3 ^ v7) >> v8)))
                                                            + 119;
  return (*(uint64_t (**)(void))(v5 + 8 * (a2 ^ (1497 * (a4 - 1 == v6)))))();
}

void sub_100048870()
{
}

void sub_100048890(uint64_t a1)
{
  __asm { BRAA            X8, X17 }
}

_DWORD *sub_1000489B4(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  *uint64_t result = a4;
  return result;
}

uint64_t sub_1000489BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (((((a7 - 362157433) & 0x159610F5) + 4) * (v8 != a6)) ^ a7)))();
}

uint64_t sub_1000489F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v29 - 136) = v25;
  *(void *)(v29 - 128) = v25;
  *(_DWORD *)(v29 - 120) = v27
                         + 69008221
                         * ((((2 * ((v29 - 144) ^ 0x2C1F9B2D)) | 0xC27ADE42) - ((v29 - 144) ^ 0x2C1F9B2D) - 1631416097) ^ 0x9E80A606)
                         - 150;
  *(void *)(v29 - 144) = a25;
  *(void *)(v29 - 112) = v28;
  (*(void (**)(uint64_t))(v26 + 8 * (v27 + 863)))(v29 - 144);
  *(void *)(v29 - 144) = a25;
  *(void *)(v29 - 136) = v25;
  *(_DWORD *)(v29 - 112) = v27
                         - 1224239923
                         * (((((v29 - 144) | 0x14627EE0) ^ 0xFFFFFFFE) - (~(v29 - 144) | 0xEB9D811F)) ^ 0x192E7CC8)
                         - 1063;
  *(void *)(v29 - 104) = a17;
  *(void *)(v29 - 128) = v25;
  *(void *)(v29 - 120) = v28;
  (*(void (**)(uint64_t))(v26 + 8 * (v27 ^ 0xEFC)))(v29 - 144);
  return sub_10003C79C();
}

uint64_t sub_100048AF4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  unsigned int v11 = 3804331 * ((-302084566 - (&a3 | 0xEDFE8E2A) + (&a3 | 0x120171D5)) ^ 0x6CD45423);
  a7 = (v10 - 216) ^ v11;
  a6 = a1;
  a4 = v11 ^ 0x14EDA71E;
  a5 = (v9 - 209897288) ^ v11;
  a3 = v7;
  uint64_t v12 = (*(uint64_t (**)(uint64_t *))(v8 + 8 * (v10 + 1952)))(&a3);
  return (*(uint64_t (**)(uint64_t))(v8
                                            + 8
                                            * ((21
                                              * (*(_DWORD *)(v7 - 0x6BA7059072F2C1BBLL) == ((((v10 + 1592) | 0x101)
                                                                                           - 563355709) ^ ((v10 + 1626) | 8)))) ^ v10)))(v12);
}

void sub_100048BDC(int a1@<W8>, uint64_t a2, int a3, int a4, uint64_t a5)
{
  unsigned int v10 = ((2 * (&a3 & 0x3297F1E8) - &a3 - 848818670) ^ 0xB3BD2BE4) * v7;
  a5 = v8;
  a3 = v5 - v10 - (((a1 ^ 0x1A0B125F) + v9) & 0x61EACE10) + 1039856246;
  a4 = v10 + a1 + 216;
  (*(void (**)(int *))(v6 + 8 * (a1 + 1141)))(&a3);
  sub_100065878();
}

uint64_t sub_100048CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v75 = (v71 + 159) | 0x220;
  *(_DWORD *)uint64_t v74 = 0x80000000;
  (*(void (**)(unint64_t))(v73 + 8 * (v71 ^ 0x91A)))(STACK[0x2C0]);
  int8x16_t v76 = (int8x16_t)vld1q_dup_f32((const float *)v74);
  v77.i64[0] = 0x8000000080000000;
  v77.i64[1] = 0x8000000080000000;
  uint64_t v78 = 131 * (v75 ^ 0x32Au);
  v79.i32[0] = *(_DWORD *)(v74 + 4 * (v78 ^ 0x20D));
  v79.i32[1] = *(_DWORD *)(v74 + 8);
  v79.i32[2] = *(_DWORD *)(v74 + 12);
  int8x16_t v80 = vextq_s8(v76, v79, 0xCuLL);
  int8x16_t v81 = v79;
  v81.i32[3] = *(_DWORD *)(v74 + 16);
  int32x4_t v82 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v81, *(int8x16_t *)&STACK[0x220]), vandq_s8(v80, v77)), 1uLL), *(int8x16_t *)(v74 + 1588));
  v80.i32[0] = *(_DWORD *)(v72 + 4 * (*(_DWORD *)(v74 + 4 * (v78 ^ 0x20D)) & 1));
  v80.i32[1] = *(_DWORD *)(v72 + 4 * (*(_DWORD *)(v74 + 8) & 1));
  v80.i32[2] = *(_DWORD *)(v72 + 4 * (*(_DWORD *)(v74 + 12) & 1));
  v80.i32[3] = *(_DWORD *)(v72 + 4 * (v81.i8[12] & 1));
  *(int8x16_t *)uint64_t v74 = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v82, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v82, v82), *(int8x16_t *)&STACK[0x200])), a71), v80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v73
                                                                                                  + 8 * (v75 ^ 0x3F)))(3364485598, 2434003900, 789, 131, 525, 535, 19);
}

uint64_t sub_100048DF0()
{
  (*(void (**)(void))(v0 + 8 * (v1 ^ 0xA5B)))();
  return (*(uint64_t (**)(void))(v0 + 8 * ((85 * (STACK[0x340] == 0)) ^ (v1 - 506))))();
}

uint64_t sub_100048E30(uint64_t a1, int a2)
{
  BOOL v5 = v4 + 1932435421 > (v2 - 1558283687);
  if (v2 - 1558283687 < (a2 - 1427513506) != v4 + 1932435421 < (a2 - 1427513506)) {
    BOOL v5 = v4 + 1932435421 < (a2 - 1427513506);
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((105 * !v5) ^ a2)))();
}

uint64_t sub_100048EA8(int a1)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v2 + 257) ^ 0x75B ^ ((v2 - 301) | 0x22E)) * (v1 == a1)) ^ v2)))();
}

uint64_t sub_100048EE4()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((*(void *)(*(void *)(v1 + 8 * (((v2 - 301) | 0x141) ^ 0x12F)) - 4) == 0)
                                * (((((v2 - 301) | 0x141) - 284) | 0x108) + ((((v2 - 301) | 0x141) + 1155) ^ 0xDEF))) ^ ((v2 - 301) | 0x141))))();
}

uint64_t sub_100048F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15)
{
  int v20 = 460628867 * ((~((v19 - 160) | 0x6BDD079) + ((v19 - 160) & 0x6BDD079)) ^ 0xB5D4ADFB);
  STACK[0x250] = v18;
  STACK[0x270] = a12;
  STACK[0x268] = a13;
  STACK[0x260] = a15;
  STACK[0x240] = a14;
  *(_DWORD *)(v19 - 152) = v20 + v16 - 1573481390;
  *(_DWORD *)(v19 - 132) = v15 - v20 - 192;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v15 ^ 0xA8F)))(v19 - 160);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8 * ((45 * (*(_DWORD *)(v19 - 136) == (v15 ^ 0x7D0) - 563356660)) ^ v15)))(v21);
}

uint64_t sub_100049020()
{
  return sub_10004902C();
}

uint64_t sub_10004902C(int8x16_t a1, double a2, double a3, double a4, int8x16_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  int8x16_t v20 = *(int8x16_t *)(v19 + (v14 + v17 + v13));
  *(int8x16_t *)(v15 + v13) = vaddq_s8(vsubq_s8(v20, vandq_s8(vaddq_s8(v20, v20), a5)), a1);
  return (*(uint64_t (**)(void))(v18 + 8 * ((60 * (v13 != 48)) ^ (a13 + v16 + 1261))))();
}

void sub_100049078()
{
}

void sub_100049088()
{
}

uint64_t sub_100049094@<X0>(int a1@<W8>)
{
  BOOL v6 = ((4 * v5) ^ 0x11FC ^ (v2 + 332) ^ ((v4 ^ (2 * a1)) + v2 - (v4 & (2 * (v4 ^ (2 * a1)))))) <= v1;
  return (*(uint64_t (**)(void))(v3 + 8 * (((2 * v6) | (16 * v6)) ^ v5)))();
}

uint64_t sub_1000490D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  STACK[0x460] = *(void *)(v10 + 8 * v9);
  return sub_10003BEF4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000490E4()
{
  if (v2 >= 0) {
    unsigned int v4 = v2;
  }
  else {
    unsigned int v4 = -v2;
  }
  if (v1 >= 0) {
    unsigned int v5 = v1;
  }
  else {
    unsigned int v5 = -v1;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v0 | 0x380) + 651) * (v4 > v5)) ^ (v0 | 0x380))))();
}

uint64_t sub_10004911C@<X0>(uint64_t a1@<X8>, int8x16_t a2@<Q0>, int8x16_t a3@<Q1>, int8x16_t a4@<Q2>, int8x16_t a5@<Q3>, int32x4_t a6@<Q4>, int8x16_t a7@<Q5>)
{
  uint64_t v12 = v10 + 16;
  a7.i64[0] = *(void *)(v12 + 912);
  a7.i32[2] = *(_DWORD *)(v12 + 920);
  int8x16_t v13 = vextq_s8(a2, a7, 0xCuLL);
  int8x16_t v14 = a7;
  v14.i32[3] = *(_DWORD *)(v12 + a1);
  int32x4_t v15 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v14, a4), vandq_s8(v13, a3)), 1uLL), *(int8x16_t *)v12);
  v13.i32[0] = *(_DWORD *)(v8 + 4 * (*(_DWORD *)(v12 + 912) & 1));
  v13.i32[1] = *(_DWORD *)(v8 + 4 * (*(_DWORD *)(v12 + 916) & 1));
  v13.i32[2] = *(_DWORD *)(v8 + 4 * (*(_DWORD *)(v12 + 920) & 1));
  v13.i32[3] = *(_DWORD *)(v8 + 4 * (v14.i8[12] & 1));
  *(int8x16_t *)(v12 + 908) = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v15, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v15, v15), a5)), a6), v13);
  return (*(uint64_t (**)(void))(v11 + 8 * (((2 * (v9 == 4)) | (4 * (v9 == 4))) ^ v7)))();
}

uint64_t sub_100049128@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v1 - 838) | 0x44) - 110) * (a1 != 866215440)) ^ v1)))();
}

void sub_100049164()
{
}

uint64_t sub_10004916C@<X0>(uint64_t a1@<X2>, char a2@<W6>, unsigned int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30)
{
  int v35 = *((_DWORD *)&a18 + ((v33 + v30) >> (a2 + ((v31 + 72) | 1) - 56)) + 18);
  *(unsigned char *)(a1 + (v33 + v30)) = v35 ^ 0xB2;
  *(unsigned char *)(a1 + (v33 + v30 + 1)) = (BYTE1(v35) ^ 0xA1) - ((2 * (BYTE1(v35) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v33 + v30 + 2)) = (BYTE2(v35) ^ 0x43) - ((2 * (BYTE2(v35) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v33 + v30 + 3)) = (HIBYTE(v35) ^ 0x58) - ((2 * (HIBYTE(v35) ^ 0x58)) & 0xEF) + 119;
  BOOL v36 = v33 - 1693148158 < (a30 - 2124613016);
  if (v33 - 1693148158 < a3 != a30 - 2124613016 < a3) {
    BOOL v36 = a30 - 2124613016 < a3;
  }
  return (*(uint64_t (**)(void))(v34 + 8 * ((!v36 * v32) ^ v31)))();
}

uint64_t sub_100049268(int a1, uint64_t a2, uint64_t a3, int a4)
{
  HIDWORD(v18) = a1 ^ v16;
  LODWORD(v18) = a1 ^ v11;
  int v19 = (v17 ^ v12)
      + (v18 >> 27)
      + ((v5 ^ v12 | v6 ^ v12) & (v7 ^ v12) | (v5 ^ v12) & (v6 ^ v12))
      + (*(_DWORD *)(v15 + 4 * (v4 + v13)) ^ v10);
  return (*(uint64_t (**)(void))(v9 + 8 * ((231 * (v4 + 1 != v14 + 44)) ^ a4)))(v19
                                                                                            - ((2 * v19 + 506952120) & v8) - 413180255);
}

uint64_t sub_100049324@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  *(void *)(&a27 + a2 + a1) = 0x7777777777777777;
  return (*(uint64_t (**)(void))(v29 + 8 * (int)((2738 * ((v28 ^ 0x2F7) == (v27 & 0x38))) ^ v28)))();
}

uint64_t sub_100049378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v31 - 112) = v29;
  *(void *)(v31 - 144) = a25;
  *(void *)(v31 - 136) = v25;
  *(_DWORD *)(v31 - 120) = v27 + 69008221 * ((v31 - 144) ^ 0xD3A2520A) - 114;
  *(void *)(v31 - 128) = v25;
  (*(void (**)(uint64_t))(v26 + 8 * (v27 + 899)))(v31 - 144);
  int v32 = ((v31 - 144) ^ 0xDAFA9674) * v28;
  *(_DWORD *)(v31 - 128) = (v27 + 272) ^ v32;
  *(_DWORD *)(v31 - 140) = -1131453697 - v32 + v30 + 2;
  *(void *)(v31 - 136) = a24;
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(v26 + 8 * (v27 ^ 0xCAD)))(v31 - 144);
  return (*(uint64_t (**)(uint64_t))(v26 + 8 * ((988 * (*(_DWORD *)(v31 - 144) == (v27 ^ 0xFCA11963))) ^ v27)))(v33);
}

uint64_t sub_10004945C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v8
                                                                      + 8
                                                                      * (a6 ^ (8
                                                                             * (v7 < ((v6 + a6 - 1930651701 + 223) | 0xD0u)
                                                                                   - 688)))))(a1, a2, a3, 0);
}

uint64_t sub_10004949C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((42 * (a8 + 1 != v9 + 16)) ^ a7)))();
}

uint64_t sub_1000494AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t, void))(v10
                                                    + 8 * ((405 * (((((a5 + v5 + v9) | 0xAE) - 150) & v6) == 0)) ^ a5)))(a1, (v7 - v8));
}

void sub_1000494E4()
{
}

void sub_1000494EC()
{
}

uint64_t sub_1000494F8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((v2 - 955) | 0x404) - 1520) * (v1 != a1)) ^ v2)))();
}

uint64_t sub_100049530@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(void *)(a1 - 7 + v3 + v2 + v4 - v5 + ((v6 - 592853689) & 0x23563B7Fu)) = *(void *)(v7
                                                                                         - 7
                                                                                         + v3
                                                                                         + v2
                                                                                         + v4
                                                                                         - v5
                                                                                         + ((v6 - 592853689) & 0x23563B7Fu));
  return (*(uint64_t (**)(void))(v8 + 8 * ((1716 * (v5 - (a2 & 0xFFFFFFF8) == -8)) ^ v6)))();
}

uint64_t sub_100049598()
{
  STACK[0x280] = (unint64_t)&STACK[0x4E07305EAF801E43];
  STACK[0x278] = (unint64_t)&STACK[0x6F85854725FFECD6];
  STACK[0x270] = (unint64_t)&STACK[0x24E69FC949684844];
  STACK[0x268] = (unint64_t)&STACK[0x5E9044A69B37DF3];
  *(void *)(v4 - 192) = &STACK[0x3BD3A467C7BE915D];
  *(_DWORD *)(v4 - 184) = v0
                        - 831981571
                        * ((((2 * ((v4 - 192) ^ 0x5A635D1D)) | 0x9439548E) - ((v4 - 192) ^ 0x5A635D1D) + 904091065) ^ 0x9DE277E)
                        - 825;
  *(_WORD *)(v4 - 180) = 10377
                       - 2051 * ((((2 * ((v4 - 192) ^ 0x5D1D)) | 0x548E) - ((v4 - 192) ^ 0x5D1D) + 21945) ^ 0x277E);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 + 544)))(v4 - 192);
  int v6 = LOBYTE(STACK[0x317]);
  int v7 = (LOBYTE(STACK[0x314]) << 24) | (LOBYTE(STACK[0x315]) << 16) | (LOBYTE(STACK[0x316]) << 8) | v6;
  LODWORD(STACK[0x2F0]) = v7 + ((v0 - 1040) ^ 0x7440D614) - ((v7 & 0x7440D53F ^ v6 & 5) << (v0 - 61));
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v1 + 8 * ((92 * ((STACK[0x2F4] & 8) == 0)) ^ v0));
  uint64_t v9 = *(void *)(v2 + 8 * (v0 ^ 0x71D));
  STACK[0x210] = v9 - 8;
  STACK[0x218] = v9 + 0x5EC77446536A4B92;
  LODWORD(STACK[0x2D4]) = v3;
  return v8(v5);
}

uint64_t sub_1000498C4@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  int v13 = v9 + 682;
  unsigned int v14 = (((&a4 | 0x76062D6A) - &a4 + (&a4 & 0x89F9D290)) ^ 0x91330F02) * a1;
  a4 = &STACK[0x4B3FB627E137F332];
  a5 = &STACK[0x5F548590D8AA63B9];
  a9 = v12;
  a6 = v9 + 682 - v14 - 462;
  a7 = 1175189840 - v14;
  uint64_t v15 = (*(uint64_t (**)(unint64_t **))(v11 + 8 * (v9 + 2175)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v11
                                            + 8
                                            * (((*(_DWORD *)(v12 - 0x6BA7059072F2C1BBLL) == ((49 * (v13 ^ 0x39A)) ^ (v10 - 211)))
                                              * ((v13 ^ 0xB80) - 307)) ^ v13)))(v15);
}

uint64_t sub_1000499B8@<X0>(char a1@<W6>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * (((((v4 == v5 + 669 + v2) ^ (v5 + a1)) & 1) * v3) ^ v5)))();
}

uint64_t sub_1000499EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v11.i64[0] = 0xEEEEEEEEEEEEEEEELL;
  v11.i64[1] = 0xEEEEEEEEEEEEEEEELL;
  v12.i64[0] = 0x7777777777777777;
  v12.i64[1] = 0x7777777777777777;
  uint64_t v13 = (v6 + v8 + 2309);
  int8x16_t v14 = vrev64q_s8(*(int8x16_t *)(v9 + v13 - 15));
  int8x16_t v15 = vextq_s8(v14, v14, 8uLL);
  int8x16_t v16 = vrev64q_s8(*(int8x16_t *)(v9 + v13 - 31));
  int8x16_t v17 = vextq_s8(v16, v16, 8uLL);
  uint64_t v18 = v5 + v13;
  int8x16_t v19 = vrev64q_s8(vaddq_s8(vsubq_s8(v15, vandq_s8(vaddq_s8(v15, v15), v11)), v12));
  *(int8x16_t *)(v18 - 15) = vextq_s8(v19, v19, 8uLL);
  int8x16_t v20 = vrev64q_s8(vaddq_s8(vsubq_s8(v17, vandq_s8(vaddq_s8(v17, v17), v11)), v12));
  *(int8x16_t *)(v18 - 31) = vextq_s8(v20, v20, 8uLL);
  return (*(uint64_t (**)(void))(v10 + 8 * ((1669 * (29 * (a5 ^ 0x92C) - 1157 == (v7 & 0xFFFFFFE0))) ^ (a5 - 1663))))();
}

uint64_t sub_100049A9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((4080 * (v4 < (a4 ^ 0x216 ^ (a4 + 276) ^ 0xCC2u))) ^ a4)))();
}

uint64_t sub_100049AD8()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (int)(((STACK[0x290] & 0xAC162767 ^ 0x598) * (v1 > 0x48399F0F)) ^ (v2 + 593))))();
}

uint64_t sub_100049B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,_DWORD *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  *uint64_t v58 = 0;
  int v62 = v61 & ((v57 ^ (v57 >> 11)) << 7) ^ v57 ^ (v57 >> 11);
  unsigned int v63 = (v62 << 15) & 0xEFC60000 ^ v62 ^ 0x10398E0C ^ (((v62 << 15) & 0xEFC60000 ^ v62) >> 18);
  uint64_t v64 = &a57 + (a26 - 839283907);
  unsigned int v65 = -1805087677 * ((*(_DWORD *)(*a30 + (*a31 & 0x4F6A45DC)) ^ v64) & 0x7FFFFFFF);
  unint64_t v66 = -1805087677 * (v65 ^ HIWORD(v65));
  uint64_t v67 = (v66 >> 24) + 2;
  char v68 = byte_100163F10[v67];
  char v69 = byte_100164038[(v66 >> 24) - 8];
  LOBYTE(v66) = byte_1001621A4[v67 - 4] ^ v66;
  char *v64 = v69 ^ v63 ^ 0xC ^ v68 ^ v66 ^ (-41 * BYTE3(v66));
  return (*(uint64_t (**)(void))(v59
                              + 8
                              * ((239
                                * (a26
                                 - (((v69 ^ v63 ^ 0xC ^ v68 ^ v66) ^ (-41 * BYTE3(v66))) != 0) != v60)) ^ 0x27C)))();
}

void sub_100049B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned char *a21,uint64_t a22,uint64_t a23,unsigned char *a24,uint64_t a25,unsigned char *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  a24[3] = (BYTE3(a7) ^ 0x6E) - ((((a7 >> 24) ^ 0x6E) << (((a27 + 77) & 0x97) + 122)) & 0x5E) + 47;
  a21[9] = BYTE5(a1) ^ 0x86;
  a21[15] = BYTE1(a7) ^ 0x9E;
  a26[8] = a7 ^ 0x58;
  a24[9] = (BYTE2(a7) ^ 0x82) - ((2 * (BYTE2(a7) ^ 0x82)) & 0x5E) + 47;
  a26[26] = BYTE4(a1) ^ 0x20;
  if ((v32 ^ 0x1CFFA89239170C78uLL) >= 0x8134422366A90F03) {
    char v31 = (v32 ^ 0x78) - ((2 * (v32 ^ 0x78) - 6) & 0x96) + 72;
  }
  char v37 = v31 ^ 0x4B;
  if ((v32 ^ 0x1CFFA89239170C78uLL) >= 0x8134422366A90F03) {
    char v38 = 3;
  }
  else {
    char v38 = 0;
  }
  char v39 = v37 + v38;
  char v40 = *(unsigned char *)(a31 + 531 + (BYTE6(a1) ^ 0xDLL));
  a21[7] = HIBYTE(a1) ^ 0x5C;
  a26[27] = BYTE1(v32) ^ 0xC;
  a24[10] = 7 * (v40 ^ 0x9C) - ((14 * (v40 ^ 0x9C)) & 0x5E) + 47;
  a21[10] = v39;
  HIDWORD(v41) = *(unsigned __int8 *)(a31 + (((BYTE2(v32) ^ 0x17) - 15) ^ 0x78)) ^ 0xFFFFFFDD;
  LODWORD(v41) = (HIDWORD(v41) << 26) ^ (HIDWORD(v41) << 24);
  a26[10] = BYTE4(v32) ^ 0x92;
  a24[14] = (BYTE3(v32) ^ 0x39) - ((2 * (BYTE3(v32) ^ 0x39)) & 0x5E) + 47;
  a24[20] = (v41 >> 25) ^ 0x33;
  a24[4] = ((2 * BYTE6(v32)) | 0xA1) - BYTE6(v32) + 47;
  a24[16] = (BYTE5(v32) ^ 0xA8) - ((2 * (BYTE5(v32) ^ 0xA8)) & 0x5E) + 47;
  unsigned int v42 = *(unsigned __int8 *)(a31 + (((HIBYTE(v32) ^ 0x1C) - 15) ^ 0x78)) ^ 0xFFFFFFDD;
  a26[20] = v33 ^ 0x42;
  HIDWORD(v41) = v42;
  LODWORD(v41) = (v42 << 26) ^ (v42 << 24);
  a24[15] = (v41 >> 25) ^ 0x33;
  unsigned int v43 = *(unsigned __int8 *)(a19 + (((v33 >> 1) & 0x80 | ((unsigned __int16)v33 >> 9)) ^ 0xE1));
  a26[17] = BYTE3(v33) ^ 0x48;
  a21[14] = BYTE4(v33) ^ 0xCC;
  *a24 = BYTE5(v33) + (~(2 * BYTE5(v33)) | 0xA1) - 80;
  a26[21] = HIBYTE(v33) ^ 0x1F;
  a26[13] = BYTE2(v33) ^ 0x50;
  a26[3] = (v43 ^ 0x8A ^ (v43 >> 2) & 0x17) + 32;
  a21[12] = BYTE6(v33) ^ 6;
  char v44 = *(unsigned char *)(a31 + 531 + (v36 ^ 0x35) + 2 * (v36 & 0xD5 ^ 0x15) - 4 * (v36 & 0xD5 ^ 0x15) + 213) ^ 0x9C;
  a26[11] = BYTE2(v36) ^ 0xB6;
  a24[5] = 7 * v44 - ((14 * v44) & 0x5E) + 47;
  a24[2] = (BYTE3(v36) ^ 0xE4) - ((2 * (BYTE3(v36) ^ 0xE4)) & 0x5E) + 47;
  a26[25] = BYTE1(v36) ^ 0x76;
  unsigned int v45 = *(unsigned __int8 *)(a19 + (((v36 >> 25) & 0x80 | (v36 >> 33) & 0x7F) ^ 0xB1));
  a26[22] = BYTE5(v36) ^ 0xD3;
  a26[18] = HIBYTE(v36) ^ 0x50;
  a26[2] = BYTE1(v35) ^ 0x56;
  a24[1] = v35 ^ 0x7F;
  a26[30] = BYTE3(v34) ^ 0x5F;
  a26[9] = BYTE2(v35) ^ 0xBE;
  a26[19] = (v45 ^ 0x8A ^ (v45 >> 2) & 0x17) + 32;
  a24[7] = (BYTE6(v36) ^ 0x2B) + (~(2 * (BYTE6(v36) ^ 0x2B)) | 0xA1) + 48;
  unsigned int v46 = *(unsigned __int8 *)(a31 + (((BYTE4(v34) ^ 0xF6) - 15) ^ 0x78)) ^ 0xFFFFFFDD;
  a26[24] = BYTE6(v34) ^ 0x81;
  a26[12] = BYTE5(v34) ^ 0xFD;
  HIDWORD(v41) = v46;
  LODWORD(v41) = (v46 << 26) ^ (v46 << 24);
  a26[1] = HIBYTE(v34) ^ 0x9D;
  a26[23] = (v41 >> 25) ^ 0x1C;
  JUMPOUT(0x100049F50);
}

uint64_t sub_100049F90(double a1, double a2, double a3, double a4, int8x16_t a5, int8x16_t a6, uint64_t a7, int a8)
{
  int v14 = 163 * (a8 ^ 0x145);
  unsigned int v15 = v12 - 1065286766 + v11 + v14;
  int8x16_t v16 = vrev64q_s8(*(int8x16_t *)(v9 + v15 - 15));
  int8x16_t v17 = vextq_s8(v16, v16, 8uLL);
  int8x16_t v18 = vrev64q_s8(*(int8x16_t *)(v9 + v15 - 31));
  int8x16_t v19 = vextq_s8(v18, v18, 8uLL);
  uint64_t v20 = v8 + v15;
  int8x16_t v21 = vrev64q_s8(vaddq_s8(vsubq_s8(v17, vandq_s8(vaddq_s8(v17, v17), a5)), a6));
  *(int8x16_t *)(v20 - 15) = vextq_s8(v21, v21, 8uLL);
  int8x16_t v22 = vrev64q_s8(vaddq_s8(vsubq_s8(v19, vandq_s8(vaddq_s8(v19, v19), a5)), a6));
  *(int8x16_t *)(v20 - 31) = vextq_s8(v22, v22, 8uLL);
  return (*(uint64_t (**)(void))(v13 + 8 * ((((v14 - 358) & v10) != 32) | v14)))(0);
}

uint64_t sub_10004A038()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((1875 * (*(_DWORD *)(v2 - 0x6BA7059072F2C1BBLL) == -563355418)) ^ v0)))();
}

uint64_t sub_10004A078@<X0>(int a1@<W0>, int a2@<W4>, int a3@<W6>, int a4@<W8>)
{
  BOOL v6 = a1 + a4 + 63 < a1 + a4 + ((a3 + a2 + v4 - 440 + 1998) | 1u) - 2057;
  return (*(uint64_t (**)(void))(v5 + 8 * (v6 | (4 * v6) | v4)))();
}

uint64_t sub_10004A0BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((53 * (((v5 == a2) ^ ((a5 - 18) ^ (a5 - 123))) & 1)) ^ a5)))();
}

uint64_t sub_10004A0F0@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v3 - 0x5E8E72AB319E4281) + 4 * (v5 - 795003603)) = *(_DWORD *)(*(void *)(v4 - 0x5E8E72AB319E4281)
                                                                                           + 4 * (v5 - 795003603));
  return (*(uint64_t (**)(void))(a1 + 8 * ((1770 * (v2 + v5 - 121 == v1)) ^ v2)))();
}

uint64_t sub_10004A150()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (v1 ^ (109 * (v0 != 0x29F83432)))))();
}

uint64_t sub_10004A1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = STACK[0x3B0];
  int v9 = *(unsigned __int8 *)(STACK[0x3B0] - 0xB999BAB1C512023) ^ 0x89;
  if (v9 == 2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8 * ((243 * (*(_DWORD *)(v8 - 0xB999BAB1C512027) == ((v7 + 576) ^ 0x58E158CC))) ^ (v7 + 1090))))(a1, 3184604724, 139313950, 2606871779, a5, a6, 1688095615);
  }
  if (v9 == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6
  }
                                                                         + 8
                                                                         * ((98
                                                                           * (*(_DWORD *)(v8 - 0xB999BAB1C512027) == (((v7 - 800) | 0x1D0) ^ 0x58E15C7C))) ^ (v7 - 133))))(a1, 3659506700, 3135324643, 88);
  unint64_t v11 = STACK[0x288];
  STACK[0x3E0] = 91;
  *(unsigned char *)(v8 - 0xB999BAB1C512028) = ((v11 - 105) ^ 0xBA) * (v11 - 88);
  return (*(uint64_t (**)(void))(v6 + 8 * ((298 * (STACK[0x3E0] == 0)) ^ ((v7 - 812) | 0x6CC))))();
}

uint64_t sub_10004A350@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((4 * (((a1 == 0) ^ (v3 - 105 + v2 + 92)) & 1)) & 0xF7 | (8 * (((a1 == 0) ^ (v3 - 105 + v2 + 92)) & 1)) | (v3 + 663))))();
}

uint64_t sub_10004A39C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((15 * (v2 == ((300 * ((v1 + 1779212333) & 0x95F35EF7 ^ 0x6A7)) ^ 0x4BFBF339))) ^ v1)))();
}

uint64_t sub_10004A410@<X0>(int a1@<W8>)
{
  int v4 = a1 + v2 + ((v1 - 265) ^ 0x1DEu) + 853 < ((v1 - 265) | 0x420u) + 2147482587;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v4 << 6) | (v4 << 9) | v1)))();
}

uint64_t sub_10004A460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v59 + 8 * ((4 * (((v60 - 806) ^ 0x5092FDCE) != 1351810518)) | (16 * (((v60 - 806) ^ 0x5092FDCE) != 1351810518)) | (v60 + 1170))))(a1, a59, 2943156503, 1351810518, STACK[0x2B0], 73, 35, 115);
}

uint64_t sub_10004A4D8()
{
  return 0;
}

void sub_10004A518()
{
}

uint64_t sub_10004A524(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10004CC30(a1, a2, a3, a4, a4 ^ 0x9CA);
}

uint64_t sub_10004A544(uint64_t a1, void *a2, unint64_t a3)
{
  STACK[0x390] = a3;
  *a2 = 0x8888888888888888;
  a2[1] = 0x7777777771777765;
  int v6 = 3804331 * ((((v5 - 192) | 0x77F22C4) - (v5 - 192) + ((v5 - 192) & 0xF880DD38)) ^ 0x79AA0732);
  *(_DWORD *)(v5 - 188) = v3 - v6 + 1172344228;
  *(_DWORD *)(v5 - 184) = v6 ^ 0x42B3778E;
  int v7 = *(void (**)(uint64_t))(v4 + 8 * (v3 ^ 0xDEF));
  STACK[0x2C8] = a3;
  v7(v5 - 192);
  LODWORD(STACK[0x3B8]) = 1704253869;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8 * (v3 ^ 0xD21)))(336, 1925803308);
  STACK[0x3F8] = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4
                                                                                         + 8
                                                                                         * (((v8 != 0)
                                                                                           * (v3 - 579 + v3 - 393 - 1378)) ^ v3)))(v8, v9, v10, v11, v12, v13);
}

uint64_t sub_10004A638()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (v1 ^ (2 * ((v0 & 0x1F ^ 8) != 3 * (v1 ^ 0x187) - 1005)))))();
}

uint64_t sub_10004A66C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1003
                                * ((v8 & (2 * (*(unsigned __int8 *)(a2 + 4) - 147)))
                                 + (a4 ^ (a5 + 1056) ^ (*(unsigned __int8 *)(a2 + 4) - 147)) == v7)) ^ v6)))();
}

uint64_t sub_10004A6AC()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)((((v1 & (2 * (*(unsigned __int8 *)(v2 + 7) - 1)))
                                      + ((v3 - 626) ^ (v0 - 272) ^ (*(unsigned __int8 *)(v2 + 7) - 1)) == v0)
                                     * ((v3 + 161564269) & 0xF65EB77D ^ 0x628)) ^ v3)))();
}

uint64_t sub_10004A708@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return (*(uint64_t (**)(void))(v9 + 8 * ((((a8 ^ 0x796) + a8 - 1341 - 634) * (a1 == v8)) ^ a8)))();
}

uint64_t sub_10004A744()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1999 * (v1 + v3 + (v0 ^ 0x692) + 910 + (v0 ^ 0x692u) + 210 - 3093 < 0x7FFFFFFF)) ^ v0 ^ 0x692)))();
}

uint64_t sub_10004A788()
{
  uint64_t v3 = (*(uint64_t (**)(void))(v0 + 8 * (v1 ^ 0x897)))();
  LODWORD(STACK[0x580]) = v2;
  return (*(uint64_t (**)(uint64_t))(v0
                                            + 8
                                            * (((v2 == ((v1 - 1523218995) & 0x5ACA7B7E) - 563356232)
                                              * (((v1 - 218) | 0x226) + 1525)) ^ v1)))(v3);
}

uint64_t sub_10004A7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(_DWORD *)(v18 - 112) = (v16 - 483) ^ (((~((v18 - 136) | 0x4108C787) + ((v18 - 136) & 0x4108C787)) ^ 0x6D556A72) * v13);
  *(void *)(v18 - 136) = v17;
  *(void *)(v18 - 120) = a13;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v16 ^ 0xF6E)))(v18 - 136);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * ((122
                                              * (*(_DWORD *)(v18 - 128) <= ((((v16 - 502) | 0x200) - 1290) ^ (v15 + 199)))) ^ v16)))(v19);
}

uint64_t sub_10004A8AC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((29 * ((a5 + 1 + v5) < 0x40)) ^ a1)))();
}

uint64_t sub_10004A998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v11
                              + 8
                              * (((a8 + ((106 * (v9 ^ 0x21C)) ^ (a6 + 498)) + 9)
                                * (v8 + v10 + 63 >= (v8 + v10))) ^ v9)))();
}

uint64_t sub_10004A9E8@<X0>(uint64_t a1@<X2>, unsigned int a2@<W3>, uint64_t a3@<X5>, uint64_t a4@<X7>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int v50 = a5 - 413;
  LODWORD(a29) = 935020333;
  BOOL v52 = ((v50 - a4 - 205) ^ 0xBE261861) != 0x432DB2CB
     || ((v50 - 1270319405) & 0x4BB78EBF ^ 0x400DEEE2) != 1074653292;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t, void, void, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 8 * ((665 * v52) ^ v50)))(1127068362, 1074653292, a1, 3024647891, 1270320831, a3, 3190167649, a4, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           &STACK[0x2D8],
           &a49,
           a25,
           0,
           0,
           a2 | 0xE7DC2C9E00000000,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39);
}

uint64_t sub_10004AA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  unsigned int v21 = 1224239923 * ((2 * (&a13 & 0x7345948) - &a13 + 2026612400) ^ 0x8A785B67);
  LODWORD(a15) = (v19 + 374) ^ v21;
  a14 = a11;
  LODWORD(a13) = (v18 ^ 0x6E80BF79) - v21 + ((v18 << (((v19 + 54) | 0x80) ^ 0xF6)) & 0xDD017EF2) - 109062401;
  (*(void (**)(uint64_t *))(v20 + 8 * (v19 + 1876)))(&a13);
  unsigned int v22 = 69008221 * (&a13 ^ 0xD3A2520A);
  a13 = v16;
  a16 = ((v17 ^ 0xD974FDE6) + 937143230 + (((v19 ^ 0xD) - 1293289088) & (2 * v17))) ^ v22;
  HIDWORD(a14) = v22 + v19 + 1732;
  a15 = a11;
  uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v20 + 8 * (v19 + 1837)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((13 * (a14 != -563355418)) ^ v19)))(v23);
}

void sub_10004ABF0()
{
}

uint64_t sub_10004AC34@<X0>(unsigned int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,char a21)
{
  BOOL v27 = v22 < a1;
  *(&a21 + (a4 - 1540116380)) = *(unsigned char *)(v25 + (v21 + a2))
                                            + ~((v23 + 98) & (2 * *(unsigned char *)(v25 + (v21 + a2))))
                                            + 120;
  unsigned int v28 = v21 + 1 + a3;
  int v29 = v27 ^ (v28 < a1);
  BOOL v30 = v28 < v22;
  if (!v29) {
    BOOL v27 = v30;
  }
  return (*(uint64_t (**)(void))(v26 + 8 * ((v27 * v24) ^ v23)))();
}

uint64_t sub_10004ACAC()
{
  BOOL v4 = v0 < 0xDA4262AC;
  if (v4 == (unint64_t)(v1 - 0x204F192C60D392D0) < 0xDA4262AC) {
    BOOL v4 = v1 - 0x204F192C60D392D0 < v0;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * (((7 * (v2 ^ 0x26F) - 82) * !v4) | v2)))(v2 ^ 0x203u);
}

uint64_t sub_10004AD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v18 = (a15 ^ v16) - ((((v15 - 1964969182) & 0x751F0BFB) + 1508556343) & (2 * (a15 ^ v16))) - 1393204967;
  return (*(uint64_t (**)(uint64_t, void))(v17
                                                    + 8
                                                    * ((44
                                                      * (((2 * v18) & 0x4FE5FFA6 ^ 0x49E0C222)
                                                       + (v18 ^ (v15 + 185047533))
                                                       + 1602052080 != 124805059)) ^ v15)))(a1, (v15 - 332));
}

uint64_t sub_10004ADD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45)
{
  unsigned int v50 = *(_DWORD *)(&a33 + ((v48 + v45) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + (v48 + v45)) = v50 ^ 0xB2;
  *(unsigned char *)(a1 + (v48 + v45 + 1)) = (BYTE1(v50) ^ 0xA1)
                                                 - ((((v50 >> 8) ^ 0xFFFFFFA1) << (a6 + v47 + 103)) & 0xEE)
                                                 + 119;
  *(unsigned char *)(a1 + (v48 + v45 + 2)) = (BYTE2(v50) ^ 0x43) - ((2 * (BYTE2(v50) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v48 + v45 + 3)) = (HIBYTE(v50) ^ 0x58) - ((2 * (HIBYTE(v50) ^ 0x58)) & 0xEF) + 119;
  BOOL v51 = v48 - 1114611644 < (a45 - 1255448017);
  if (v48 - 1114611644 < v46 != a45 - 1255448017 < v46) {
    BOOL v51 = a45 - 1255448017 < v46;
  }
  return (*(uint64_t (**)(void))(v49 + 8 * ((506 * !v51) ^ v47)))();
}

uint64_t sub_10004AEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  int v27 = ((v26 - 1407700273) ^ 0x86E112D4) + v24;
  BOOL v29 = v27 > 543594905 || v27 < a24 - 1603888742;
  return (*(uint64_t (**)(void))(v25
                              + 8
                              * ((((v26 - 48) ^ v29) & 1 | (16
                                                                           * (((v26 - 48) ^ v29) & 1))) ^ v26)))();
}

uint64_t sub_10004AF28@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5
                                                              + 8
                                                              * ((((a1 - 1762949364) & 0x69147BBF ^ 0x287)
                                                                * (a3 + v3 - v4 == -139828042)) ^ a1)))(48, a2, 1);
}

uint64_t sub_10004AF90@<X0>(int a1@<W5>, int a2@<W7>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1906 * (((a1 + v3 + ((v3 - a2 - 308) ^ 0x17DB2B58) - 354) ^ a3) == v4 - 2117318372)) ^ v3)))();
}

void sub_10004AFE8()
{
}

uint64_t sub_10004B090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unsigned int a20,int a21)
{
  a20 = (831981571 * ((&a19 & 0xC67EF54C | ~(&a19 | 0xC67EF54C)) ^ 0xA020DA97)) ^ 0x8F;
  a19 = &STACK[0x55D5CC6D86BC0F47];
  uint64_t v23 = (*(uint64_t (**)(unint64_t **))(v21 + 18816))(&a19);
  return (*(uint64_t (**)(uint64_t))(v21
                                            + 8
                                            * (((32 * (((a21 == v22) ^ 0x9F) & 1)) & 0xBF | ((((a21 == v22) ^ 0x9F) & 1) << 6)) ^ 0x2A0u)))(v23);
}

uint64_t sub_10004B13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1000646A0(a5, a3);
}

uint64_t sub_10004B150(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = (a4 - 1929319614) & 0x72FF13F0;
  void *v5 = a1;
  int *v4 = (v6 + v8 - 896) ^ v11;
  int v9 = 203 * (v8 ^ 0x385);
  unsigned int v14 = ((v8 ^ 0x1CC) - 407) ^ (69008221
                              * ((2 * (&v14 & 0x64DF65F8) - &v14 + 455121410) ^ 0xC882C808));
  uint64_t v15 = v12;
  (*(void (**)(unsigned int *))(v7 + 8 * ((v8 ^ 0x1CC) + 1747)))(&v14);
  unsigned int v14 = (v9 - 834) ^ (69008221 * (((&v14 | 0xD42F85AB) - (&v14 & 0xD42F85AB)) ^ 0x78DD7A1));
  uint64_t v15 = v13;
  (*(void (**)(unsigned int *))(v7 + 8 * (v9 ^ 0xAE8)))(&v14);
  return 0;
}

uint64_t sub_10004B2A8()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((2 * ((v0 + 388906065) > 7)) | (4 * ((v0 + 388906065) > 7))) ^ v2)))();
}

uint64_t sub_10004B2F4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = (v4 - 2320) | 0x90Au;
  *(void *)(v6 + v5 - 0xB999BAB1C512083 + (((v9 ^ 0x905) * a3) ^ (unint64_t)(a2 - 1787))) = v8;
  return (*(uint64_t (**)(uint64_t))(v7 + 8 * (int)(((((v9 - 2338) & v3) != 8) * a3) ^ v9)))(8);
}

void sub_10004B368(_DWORD *a1)
{
  unsigned int v1 = *a1 + 1178560073 * ((((2 * a1) | 0xD228BF70) - a1 - 1762942904) ^ 0x8E217DD0);
  __asm { BRAA            X11, X17 }
}

uint64_t sub_10004B41C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((((((v7 ^ a2 ^ v2) + 18 + v3) & (a1 + 1)) == v6) * v4) ^ v7 ^ a2)))();
}

uint64_t sub_10004B454(uint64_t result)
{
  *(_DWORD *)(result + 8) = -371152652 - v1;
  return result;
}

uint64_t sub_10004B468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_1000661D4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_10004B4BC@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X5>, int a6@<W8>)
{
  *(unsigned char *)(a5 + (v8 + a6 + 67)) = *(unsigned char *)(a3 + (v7 + v6 + 1149));
  return (*(uint64_t (**)(void))(v9 + 8 * ((((a6 & 0xFFFFFFC0) != a1) * ((a2 - 1447) ^ a4)) ^ a2)))();
}

uint64_t sub_10004B508(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v29 = (v26 ^ a4) + v27;
  *(_DWORD *)(a24 + 4 * (v29 + a3)) = v24;
  int v30 = v29 + a5;
  if (v29 + a5 < a6)
  {
    BOOL v33 = __OFSUB__(v30, v25);
    BOOL v31 = v30 == v25;
    BOOL v32 = v30 - v25 < 0;
  }
  else
  {
    BOOL v33 = 0;
    BOOL v31 = 1;
    BOOL v32 = 0;
  }
  if (v32 ^ v33 | v31) {
    int v34 = 0;
  }
  else {
    int v34 = 1;
  }
  return (*(uint64_t (**)(void))(v28 + 8 * ((v34 * a7) ^ a2)))();
}

void sub_10004B514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4) {
    BOOL v5 = a5 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  __asm { BRAA            X9, X17 }
}

uint64_t sub_10004B598()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((62 * (unk_1001B99E8 == 0)) ^ v0)))();
}

uint64_t sub_10004B5C4(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((2 * (((a2 - 985) | 0x480) ^ 0x7C7)) ^ 0x789)
                                * (*(_DWORD *)(v3 - 136) == *(_DWORD *)(v3 - 140))) ^ a2)))();
}

uint64_t sub_10004B610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8 + 8 * (((v7 == 1) * a6) ^ v6)))();
}

uint64_t sub_10004B62C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, int a6@<W8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if ((v61 + 405001088) > 0x12 || ((1 << (v61 + 0x80)) & 0x42405) == 0) {
    return sub_100073B88(a1, a2, a3, a4, a5);
  }
  uint64_t v67 = a6 & 0xFFFFFFFFFFFFFFFLL;
  if (!v67) {
    return (*(uint64_t (**)(void))(v63
  }
                                + 8
                                * ((3425 * ((a17 & 0xFFFFFFF0) == ((v65 - 1442389339) & 0x1C9A565E ^ 0x33A16256))) ^ (v64 + v65 + 316))))();
  if (v67 != 3) {
    return (*(uint64_t (**)(uint64_t))(v63
  }
                                              + 8
                                              * ((15
                                                * (((v65 - 812877635) & 0xF714BF0A)
                                                 + ((HIDWORD(a16) - 1704253533) ^ 0xFEFF98F5BF397D77)
                                                 + (((v65 - 812877635) ^ 0x17699B911) & (2 * (HIDWORD(a16) - 1704253533))) != 0xFEFF98F5BF398081)) ^ (v64 + v65 - 165))))(0x5D396DF14AA35D0FLL);
  uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 48 * a6 + 8))(a9, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 8 * ((3196 * (v68 - 563355418 - ((2 * v68) & 0xBCD7C1CC) == -563355418)) ^ (v64 + v65 + 316))))(v68, v69, v70, v71, 3731611878, 2854199772, 1440767523, v72, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

void sub_10004B870()
{
}

void sub_10004B878()
{
}

uint64_t sub_10004B8A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W7>, int a6@<W8>)
{
  return sub_10004B8A8(a1, a2, a3, a4, (a5 + a6 - 5));
}

uint64_t sub_10004B8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int8x16_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  unsigned int v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v55 + 8 * a5);
  LODWORD(a24) = BYTE4(a45) ^ 0xFFFFFF89;
  int v58 = BYTE4(a45) ^ 0x89;
  if (v58 == 2)
  {
    int8x16x4_t v82 = vld4q_s8(v51);
    int v69 = a6 ^ (a6 + 97);
    HIDWORD(a21) = HIDWORD(a44);
    uint8x16_t v70 = (uint8x16_t)veorq_s8(v82.val[1], a7);
    _Q22 = vmovl_u8(*(uint8x8_t *)v70.i8);
    _Q21 = vmovl_high_u8(v70);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    int v75 = (_DWORD *)(v52 + 4 * (v56 + 1442442312));
    int v76 = *(v75 - 8) ^ *(v75 - 3);
    unsigned int v77 = v76 + v53 - ((2 * v76) & 0xBCD7C1CC);
    int v78 = *(v75 - 16) ^ *(_DWORD *)(v52 + 4 * (((v69 - 883712184) & 0x34AC5FF8 ^ a28) + 1442442312));
    HIDWORD(v79) = v78 ^ v77 ^ 0x5E6BE0E6;
    LODWORD(v79) = v78 ^ ~v77;
    *int v75 = (v79 >> 31) + v53 - ((2 * (v79 >> 31)) & 0xBCD7C1CC);
    int8x16_t v80 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void), unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 8 * ((22 * (v54 == 1442442249)) ^ v69));
    return v80(v80, a2, a3, 3168256460, a43, a6, HIDWORD(a42), a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             __PAIR64__(a43, HIDWORD(a42)),
             __PAIR64__(a44, HIDWORD(a43)),
             v57,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51);
  }
  else if (v58 == 1)
  {
    int8x16x4_t v81 = vld4q_s8(v51);
    int v59 = a6 ^ (a6 - 279);
    uint8x16_t v60 = (uint8x16_t)veorq_s8(v81.val[2], a7);
    _Q26 = vmovl_high_u8(v60);
    _Q25 = vmovl_u8(*(uint8x8_t *)v60.i8);
    __asm
    {
      SHLL2           V25.4S, V25.8H, #0x10
      SHLL2           V26.4S, V26.8H, #0x10
    }
    uint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void), unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 8 * ((180 * (a29 + 1 != v54)) ^ v59));
    return v67(a29 + 1, 3053110526, a3, v67, a43, *(_DWORD *)(v52+ 4 * (*((unsigned char *)*(&off_10018D100 + (v59 ^ 0x35A)) + a29 + v56 - 4) - 116)) ^ v53, HIDWORD(a42), a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             __PAIR64__(a43, HIDWORD(a42)),
             __PAIR64__(a44, HIDWORD(a43)),
             v57,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51);
  }
  else
  {
    return v57(a1, a2, a3, a4, a43);
  }
}

void sub_10004BD30()
{
}

uint64_t sub_10004BE24()
{
  return sub_10004BE40();
}

uint64_t sub_10004BE40(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 8) - 0x650624C8F5E8EE41) = v1;
  return result;
}

uint64_t sub_10004BE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v9 = STACK[0x430];
  STACK[0x540] = *(void *)(v7 + 8 * (v8 - 812));
  STACK[0x3B0] = v9;
  STACK[0x358] = STACK[0x2B0];
  uint64_t v10 = *(_DWORD *)(v9 - 0xB999BAB1C51203FLL) & 0x3F;
  *(unsigned char *)(v9 - 0xB999BAB1C512083 + (v10 ^ 0x2E)) = -9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8 * ((((v10 ^ 0x2E) > (((((v8 - 806) | 0x15) + 495) | 0x122) ^ 0x319u)) * (((((v8 - 806) | 0x15) + 1027) | 0x381) ^ 0x2A9)) ^ ((v8 - 806) | 0x15))))(a1, -653949007, 58, 27, 51, a6, a7, 3367574058);
}

uint64_t sub_10004BE70()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((((v2 == v3) ^ (v1 - 87)) & 1)
                                * ((v1 - 615637096) & 0x24B1E17F ^ 0x189)) ^ v1)))();
}

uint64_t sub_10004BEB8@<X0>(uint64_t a1@<X4>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((57 * (a1 + 1 != v3 + 24)) ^ a2)))();
}

uint64_t sub_10004BF68@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((424
                                * (v3
                                 - a2
                                 + (a1 ^ 0x40Du)
                                 - 0xB999BAB1C512123
                                 + (unint64_t)(v2 + ((a1 - 1886728366) & 0x70752F2B ^ 0xC0A91101)) > 0xF)) ^ a1)))();
}

uint64_t sub_10004BFE4(int a1)
{
  int v8 = v1 + v6;
  *(_DWORD *)(*v3 + 4 * (v8 + 870)) = v2;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v8 + 869 < v5) * a1) ^ v4)))();
}

uint64_t sub_10004C020@<X0>(int a1@<W8>)
{
  int v3 = v2 ^ a1;
  BOOL v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v2 ^ 0xF5A)))(200, 1616997413) == 0;
  return (*(uint64_t (**)(void))(v1 + 8 * ((v4 * (v3 ^ 0x27 ^ ((v2 - 1739) | 0x202))) ^ v2)))();
}

uint64_t sub_10004C080(uint64_t a1, int8x8_t a2, int8x8_t a3, uint64_t a4, int a5)
{
  uint64_t v11 = (v6 - 8 + v5);
  int8x8_t v12 = vrev64_s8(*(int8x8_t *)(v7 + v11));
  *(int8x8_t *)(a1 + v11) = vrev64_s8(vadd_s8(vsub_s8(v12, vand_s8(vadd_s8(v12, v12), a2)), a3));
  return (*(uint64_t (**)(void))(v10 + 8 * (((v8 == -8) * v9) ^ a5)))();
}

uint64_t sub_10004C08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  STACK[0x338] = STACK[0x3D8];
  int v9 = LODWORD(STACK[0x2E4]) - ((2 * LODWORD(STACK[0x2E4]) + 886460230) & 0x59EAC232) + 1197508796;
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((14
                                * (((2 * v9) & 0x4FE5FFA6 ^ 0x49E0C222)
                                 + 1602052080
                                 + (v9 ^ (((v7 - 1250) | 0xA4) + 185048542)) == a7)) ^ (v7 + 375))))();
}

void sub_10004C138(uint64_t a1, int a2)
{
  if (v2 + v3 + ((a2 - 1533525464) & 0x5B67BE37u) - 1575 >= 0x7FFFFFFF) {
    int v7 = -v4;
  }
  else {
    int v7 = v6;
  }
  int *v5 = v7;
  JUMPOUT(0x100036170);
}

uint64_t sub_10004C178(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24,uint64_t a25,int a26)
{
  unsigned int v27 = a23 + ((((a3 + 939) ^ 0x1F) - 1984) ^ 0xAB17D9F0);
  int v28 = ((a26 - 1642525145) < 0xD6A102D9) ^ (v27 < 0xD6A102D9);
  BOOL v29 = v27 < a26 - 1642525145;
  if (v28) {
    BOOL v29 = (a26 - 1642525145) < 0xD6A102D9;
  }
  return (*(uint64_t (**)(void))(v26 + 8 * ((55 * v29) ^ (a3 + 619))))();
}

uint64_t sub_10004C240@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  _DWORD *v2 = a2;
  *(_DWORD *)(result + 12) = 563395539;
  return result;
}

uint64_t sub_10004C254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  *(void *)(v24 - 128) = a22;
  *(void *)(v24 - 112) = a19;
  *(_DWORD *)(v24 - 120) = v22
                         + 831981571
                         * ((((v24 - 128) | 0x8A1B7C9A) - (v24 - 128) + ((v24 - 128) & 0x75E48360)) ^ 0x13BAACBE)
                         - 143;
  (*(void (**)(uint64_t))(v23 + 8 * (v22 + 590)))(v24 - 128);
  *(_DWORD *)(v24 - 104) = (v22 - 706) ^ (69008221
                                        * ((((v24 - 128) | 0xD14AED18) - ((v24 - 128) & 0xD14AED18)) ^ 0x2E8BF12));
  *(void *)(v24 - 128) = a20;
  *(void *)(v24 - 112) = a22;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(v23 + 8 * (v22 ^ 0xE4F)))(v24 - 128);
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8
                                            * ((42 * (*(_DWORD *)(v24 - 120) > (v22 ^ 0x5BFu) + 1961906642)) ^ v22)))(v25);
}

void sub_10004C390()
{
}

void sub_10004C3C8()
{
  _DWORD *v0 = v1 + 1;
}

uint64_t sub_10004C404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,unsigned int a35)
{
  unsigned int v38 = v37 - 227758300 + ((v36 + 962) | 0x30) + 620;
  BOOL v39 = v38 < 0x66C8050A;
  BOOL v40 = v38 > a35;
  if (a35 < 0x66C8050A != v39) {
    BOOL v41 = v39;
  }
  else {
    BOOL v41 = v40;
  }
  return (*(uint64_t (**)(void))(v35 + 8 * ((21 * v41) ^ (v36 + 1596))))();
}

uint64_t sub_10004C480()
{
  int v6 = ((((2 * (v5 - 144)) | 0x1839231E) - (v5 - 144) + 1944284785) ^ 0xF2C9B479) * v0;
  *(void *)(v5 - 120) = v4;
  *(_DWORD *)(v5 - 128) = (v1 + 1389) ^ v6;
  *(_DWORD *)(v5 - 124) = (v9 + 417365691 + v1 + 152) ^ v6;
  *(void *)(v5 - 136) = v10;
  uint64_t result = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v1 ^ 0x863)))(v5 - 144);
  *(_DWORD *)(v8 - 0x209B06B4820BA795) = v9;
  *(_DWORD *)(v2 + 24) = -563355418;
  return result;
}

uint64_t sub_10004C55C(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void, uint64_t))(v6
                                                    + 8
                                                    * ((117 * (v5 - v3 >= (((a3 - 682) | 0x2E1u) ^ 0x7D1uLL))) ^ a3)))((a3 - 1437), v4);
}

uint64_t sub_10004C59C(uint64_t a1, int a2)
{
  uint64_t v8 = a2 - 32 + (v5 ^ (v3 + 1390));
  long long v9 = *(_OWORD *)(v2 + v8 - 15);
  long long v10 = *(_OWORD *)(v2 + v8 - 31);
  uint64_t v11 = a1 + v8;
  *(_OWORD *)(v11 - 15) = v9;
  *(_OWORD *)(v11 - 31) = v10;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v6 == 32) | (2 * (v6 == 32))) ^ (v4 + 972))))();
}

uint64_t sub_10004C5A8()
{
  LODWORD(STACK[0x54C]) = v2;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((1594 * ((*(_DWORD *)(STACK[0x210] + 360) - 56245773) < 0xFFFFFFFE)) ^ v0)))();
}

uint64_t sub_10004C5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, unsigned int a19)
{
  int v23 = v19 + 469835780;
  if ((v19 + 469835780) <= 0x40) {
    int v23 = 64;
  }
  return (*(uint64_t (**)(uint64_t))(v22
                                            + 8
                                            * ((28 * (-v21 - 469837757 - v20 + 3 * (a19 ^ 0x590) + v23 > 0xE)) ^ a19)))(-1952141186);
}

void sub_10004C69C()
{
}

uint64_t sub_10004C6B8@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x54C]) = v2;
  STACK[0x338] = STACK[0x2C8];
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((*(_DWORD *)STACK[0x210] == a1 - 2215) * (((a1 - 1327771128) & 0x4F2425FA) - 161)) ^ a1)))();
}

uint64_t sub_10004C710@<X0>(uint64_t a1@<X0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  unsigned int v36 = *(_DWORD *)(&a19 + ((v34 + a2) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + (v34 + a2 + 1)) = (BYTE2(v36) ^ 0x43) - ((2 * (BYTE2(v36) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v34 + a2)) = (HIBYTE(v36) ^ 0x58)
                                            - (((HIBYTE(v36) ^ 0x58) << ((((v32 + 25) | 0x89) ^ 0x20) & 0x77)) & 0xEE)
                                            + 119;
  *(unsigned char *)(a1 + (v34 + a2 + 2)) = (BYTE1(v36) ^ 0xA1) - ((2 * (BYTE1(v36) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v34 + a2 + 3)) = v36 ^ 0xB2;
  BOOL v37 = v34 + 1852498675 < (a31 + 756094822);
  if (v34 + 1852498675 < v31 != a31 + 756094822 < v31) {
    BOOL v37 = a31 + 756094822 < v31;
  }
  return (*(uint64_t (**)(void))(v35 + 8 * ((v37 * v33) ^ v32)))();
}

uint64_t sub_10004C80C()
{
  int v4 = ((v0 + 903041907) & 0xCA2CABFF ^ 0xBBFB60C7) + v2;
  BOOL v6 = v4 > 1933522652 || v4 < v3 - 213960995;
  return (*(uint64_t (**)(void))(v1 + 8 * ((61 * v6) ^ v0)))();
}

uint64_t sub_10004C870()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((1045 * (v1 + 1 == v2 + 80)) ^ v0)))();
}

uint64_t sub_10004C940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,int a58)
{
  int v60 = (((a58 - 1051) ^ 0x2A7FED98) & a24) + (v58 ^ 0x153FF63E);
  int v61 = ((((a58 - 27) ^ 0x98) & a24) + (v58 ^ 0x3E) + 2) & 0xF;
  BOOL v63 = v60 == 356513342 || v61 != (a58 ^ 0x6CD ^ (5 * ((a58 - 1051) ^ 0x1CC)));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 8 * ((1019 * v63) ^ (a58 - 1051))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47);
}

void sub_10004C9C0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 944348131 * ((((2 * a1) | 0x23956760) - a1 + 1848986704) ^ 0x32D317FE);
  int v2 = *(_DWORD *)(*(void *)a1 - 0x5E8E72AB319E4285);
  uint64_t v6 = *(void *)a1;
  unsigned int v5 = v1 - 1224239923 * (((v4 | 0x11165558) - (v4 & 0x11165558)) ^ 0xE3A5A88F) - 411;
  uint64_t v3 = (char *)*(&off_10018D100 + (v1 ^ 0x445)) - 4;
  (*(void (**)(unsigned char *))&v3[8 * v1 + 9688])(v4);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10004CB00()
{
  return (*(uint64_t (**)(uint64_t))(v4 + 8 * ((3246 * (v2 + 1 == v3 + 44)) ^ v0)))(v1);
}

uint64_t sub_10004CBCC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v8 = v6 + 1547575002 > 447421440 || v6 + 1547575002 < v5;
  return (*(uint64_t (**)(void))(v4 + 8 * ((480 * ((v8 ^ ((a4 ^ 0xE0) + 80)) & 1)) ^ a4)))();
}

uint64_t sub_10004CC24(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  *(void *)(a5 + v9 - 8 + (v8 ^ (v7 + 740))) = *(void *)(a4 + v9 - 8 + (v8 ^ (v7 + 740)));
  return (*(uint64_t (**)(void))(v6 + 8 * (((a3 == -8) * a6) ^ v10)))();
}

uint64_t sub_10004CC30(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unsigned int v8 = a5 + 2037295286 + a3 + v7;
  unsigned int v9 = v5 - 409719763;
  int v10 = (v9 < 0xEF5F98DC) ^ (v8 < 0xEF5F98DC);
  BOOL v11 = v8 > v9;
  if (v10) {
    BOOL v11 = v8 < 0xEF5F98DC;
  }
  return (*(uint64_t (**)(void))(v6 + 8 * ((251 * !v11) ^ (a5 + 1302))))();
}

void sub_10004CCA8(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x5E8E72AB319E4285) = (((v3 + v2) * (v1 - 1694193230)) ^ 0xECDFFF6F)
                                         + 2079776214
                                         + ((2 * (v3 + v2) * (v1 - 1694193230)) & 0xD9BFFEDE);
}

uint64_t sub_10004CD34()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((v0 + 1568) ^ 0x8C ^ ((v0 - 518) | 0x826))
                                * (*(_DWORD *)(v2 - 128) == *(_DWORD *)(v2 - 136))) ^ v0)))();
}

uint64_t sub_10004CD78()
{
  unsigned int v5 = *(unsigned __int8 *)(v2 + 1) + ((v3 + 415) ^ 0xFFFFFC46);
  return (*(uint64_t (**)(void))(v4 + 8 * ((1369 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_10004CDB8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5
                                                              + 8
                                                              * ((((((v4 - 2020) | 0x165) ^ 0xE09) + (v4 ^ 0x7FA))
                                                                * (v2 == v3)) ^ v4)))(-1952141186, a2, 3181458807);
}

void sub_10004CE18(uint64_t a1)
{
  int v1 = (*(_DWORD *)(a1 + 16) ^ (944348131 * ((-2 - ((a1 | 0x128ABCF6) + (~a1 | 0xED754309))) ^ 0x4E6CE747)))
     + 1313;
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0x5E8E72AB319E4285);
  int v4 = v2 - 1758911813;
  BOOL v3 = v2 - 1758911813 < 0;
  int v5 = 1758911813 - v2;
  if (!v3) {
    int v5 = v4;
  }
  BOOL v6 = (v5 ^ 0xFFBB6FDF) + 1651367540 + ((v1 ^ 0xFF76DA58) & (2 * v5)) - 1646874196 < ((v1 + 282286617) & 0xEF2CA0C5 ^ 0x7FFFFF3A);
  __asm { BRAA            X6, X17 }
}

uint64_t sub_10004CF50(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((95 * ((a3 ^ (*v3 == 0x3B842D404CB6A8ACLL)) & 1)) ^ a3)))();
}

void sub_10004CF8C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) + 944348131 * ((2 * (a1 & 0x4CB3C068) - a1 - 1286848617) ^ 0x10559BD9);
  __asm { BRAA            X8, X17 }
}

void sub_10004D060()
{
}

void sub_10004D068(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (831981571 * ((~a1 & 0xE26CEAFC | a1 & 0x1D931503) ^ 0x7BCD3AD8));
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10004D150@<X0>(int a1@<W0>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((*(_DWORD *)(v4 + 4 * (a1 + a2 + ((v5 + v3) & 0x33BC2718u))) == v2)
                                * (((v5 + v3) ^ (v3 + 540)) - 800)) ^ (v5 - 540))))();
}

uint64_t sub_10004D19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t))(v6
                                            + 8
                                            * (((1167 * (a5 ^ 0x512) - 2250) * ((unint64_t)(a2 - v7 - a3) > 0x1F)) ^ a5)))(v5);
}

void sub_10004D1D8()
{
  int v0 = *(&off_10018D100
       + (byte_10016DDC8[(byte_100167FB8[(-113
                                                                          * (dword_1001B6E98 ^ 0xEA ^ qword_1001B6D98))
                                                        - 8] ^ 0x66)
                                        - 8] ^ (-113 * (dword_1001B6E98 ^ 0xEA ^ qword_1001B6D98)))
       - 135);
  int v1 = *(&off_10018D100
       + ((-113 * (*v0 ^ qword_1001B6D98 ^ 0xEA)) ^ byte_10016DCC0[byte_100167CB0[(-113 * (*v0 ^ qword_1001B6D98 ^ 0xEA))] ^ 0xB9])
       - 21);
  unint64_t v2 = *v0 ^ (unint64_t)&v4 ^ *v1;
  void *v0 = 1932141199 * v2 + 0x5BC8EB821F80EA16;
  *int v1 = 1932141199 * (v2 ^ 0xA437147DE07F15EALL);
  v5[1] = 1178560073 * ((v5 & 0x294D8B40 | ~(v5 | 0x294D8B40)) ^ 0x318756D7) - 504207030;
  LOBYTE(v1) = -113 * (*(_DWORD *)v0 ^ 0xEA ^ *(_DWORD *)v1);
  int v3 = (char *)*(&off_10018D100
               + ((-113 * ((qword_1001B6D98 + dword_1001B6E98) ^ 0xEA)) ^ byte_10016DCC0[byte_100167CB0[(-113 * ((qword_1001B6D98 + dword_1001B6E98) ^ 0xEA))] ^ 0x55])
               + 31)
     - 4;
  (*(void (**)(_DWORD *))&v3[8
                                      * (byte_100167DB8[(byte_100163B10[v1] ^ 3) - 8] ^ v1)
                                      + 17856])(v5);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10004D3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  int v21 = *(_DWORD *)(v16 + 8) + v19;
  unsigned int v22 = 1224239923 * ((54336456 - (&a13 | 0x33D1BC8) + (&a13 | 0xFCC2E437)) ^ 0xE7119E0);
  a15 = a11;
  a13 = ((v20 - 1005465572) & 0x3BEE2FFF ^ 0xEE41FC20)
      - v22
      + (((((v20 + 1794567474) & 0x950915FE) - 1051701767) * v21 - 1590187701) ^ 0x79BE9779)
      + ((2 * ((((v20 + 1794567474) & 0x950915FE) - 1051701767) * v21 - 1590187701)) & 0xF37D2EF2);
  a16 = (v20 + 244) ^ v22;
  uint64_t v23 = (*(uint64_t (**)(unsigned int *))(v17 + 8 * (v20 + 1746)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * ((28 * (a14 != v18)) ^ v20)))(v23);
}

uint64_t sub_10004D4F4()
{
  STACK[0x2B0] = STACK[0x480];
  LODWORD(STACK[0x324]) = 935020333;
  return sub_10004D52C();
}

uint64_t sub_10004D52C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1691 * (v0 == v3 + v1 - 98)) ^ v1)))();
}

uint64_t sub_10004D558()
{
  return sub_10004D57C(&off_10018D100);
}

uint64_t sub_10004D57C@<X0>(int a1@<W3>, void *a2@<X8>)
{
  uint64_t v13 = v2 ^ (a1 + 492) ^ (a1 + 101);
  uint64_t v14 = v3 + (v13 ^ 0x5D396DF1404A4C92);
  int v15 = *(unsigned __int8 *)(*a2 + v8 + 0x5D396DF14AA35D0FLL)
      - (*(unsigned __int8 *)(v4 + v8 + 0x5D396DF14AA35D0FLL) ^ v5);
  BOOL v17 = (v15 ^ v9) + (v6 & (2 * v15)) + v12 != v10 || v14 == 0x5D396DF14AA35D0FLL;
  return (*(uint64_t (**)(void))(v7 + 8 * (int)((v17 * v11) ^ v13)))();
}

void sub_10004D600(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1224239923 * ((((2 * a1) | 0x124C8F9E) - a1 - 153503695) ^ 0xFB95BA18));
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10004D6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, unsigned int a20)
{
  a20 = 1178560073
      * ((-68329684 - (&a19 ^ 0xA429BDE0 | 0xFBED5F2C) + (&a19 ^ 0xA429BDE0 | 0x412A0D3)) ^ 0x470E3F5B)
      - 504207030;
  uint64_t v22 = (*(uint64_t (**)(int *))(v20 + 18936))(&a19);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((1452 * (a19 == v21)) ^ 0x2C0u)))(v22);
}

uint64_t sub_10004D794()
{
  return sub_10004D7B8();
}

uint64_t sub_10004D7B8()
{
  int v5 = v0 - 375351194;
  int v6 = 831981571 * ((((v4 - 192) | 0xE649E4DB) + (~(v4 - 192) | 0x19B61B24)) ^ 0x7FE834FE);
  *(void *)(v4 - 184) = v1;
  *(_DWORD *)(v4 - 192) = v5 ^ v6;
  *(_DWORD *)(v4 - 188) = v6 + v3 + 425;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v3 + 1660)))(v4 - 192);
  return ((uint64_t (*)(uint64_t))STACK[0x328])(v7);
}

uint64_t sub_10004D844()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((2013 * ((((v1 - 716) ^ 0x60) & v0) == v1 - 814)) ^ (v1 - 355))))();
}

_DWORD *sub_10004D87C@<X0>(_DWORD *result@<X0>, int a2@<W8>)
{
  *uint64_t result = v2 - 28913025 + (a2 << (((v3 + 26) | 0xC5) ^ 0xC0));
  return result;
}

void sub_10004D8AC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) ^ (3804331 * (((a1 | 0x16831F20) - (a1 | 0xE97CE0DF) - 377691937) ^ 0x68563AD6));
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10004D994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  return (*(uint64_t (**)(void, uint64_t))(v17
                                                    + 8
                                                    * ((31
                                                      * (((a14 - 108) ^ (v15
                                                                                        + v14
                                                                                        + ((a14 + 63) ^ 0xC0810753) < 8)) & 1)) ^ a14)))((a14 + 597387668) & 0xDC649769, v16);
}

uint64_t sub_10004DA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,int a29)
{
  uint64_t v31 = (*(uint64_t (**)(void))(v30 + 8 * (v29 + 1607)))();
  STACK[0x508] -= 16;
  return (*(uint64_t (**)(uint64_t))(v30
                                            + 8
                                            * ((725
                                              * (a29 == ((((v29 + 422) | 8) + 415219362) & 0xE7403FAF ^ (((v29 + 422) | 8) - 563355924)))) ^ ((v29 + 422) | 8))))(v31);
}

uint64_t sub_10004DA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59)
{
  unsigned int v60 = ((a59 + 1405858519) & 0xAC344FFD ^ 0x7190A9E4) + a23 - (((a59 - 490) ^ 0x73CEFF38) & a25);
  return (*(uint64_t (**)(void))(v59
                              + 8
                              * ((39
                                * (((2 * v60) & 0x1F9D9AEE ^ 0x138C9A2E) + (v60 ^ 0xB629B0E0) - 41943044 == 223268211)) ^ a59)))();
}

uint64_t sub_10004DB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37)
{
  BOOL v41 = (unsigned __int8 *)(a5 + a1 + v40);
  int v42 = ((*v41 ^ 0x77) << ((a37 - 101) ^ 0x5E)) | ((v41[1] ^ 0x77) << 16) | ((v41[2] ^ 0x77) << 8);
  *(_DWORD *)(v37 + ((a1 + v40) & 0xFFFFFFFFFFFFFFFCLL)) = (v42 | v41[3] ^ 0x77)
                                                         + v38
                                                         - 2
                                                         * ((v42 | v41[3] ^ 0x77) & 0x5E6BE0EF ^ (v41[3] ^ 0x77) & 9);
  return (*(uint64_t (**)(void))(v39 + 8 * ((69 * ((unint64_t)(a1 + 4 + v40) > 0x3F)) ^ a37)))();
}

uint64_t sub_10004DC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  return sub_100073FFC(a33, a2, a3, 2342826110);
}

uint64_t sub_10004DC28@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((389 * (((9 * (v1 ^ v2)) ^ 0x3ELL) + a1 == 20)) ^ v1)))();
}

uint64_t sub_10004DC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  HIDWORD(a16) = HIDWORD(a12) + 1645166287;
  v41.i64[0] = 0x7777777777777777;
  v41.i64[1] = 0x7777777777777777;
  return sub_100068478(*(double *)vdupq_n_s32(0x5E6BE0EFu).i64, *(double *)vdupq_n_s32(0xDE6BE0E6).i64, v41, a1, 1476395008, 0xFFFFFFFFLL, a4, a5, a6, a7, 837, a9, a10, a11, a12, a13, a14, a15, a16,
           a17,
           a18,
           a19,
           v40 - 16,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40);
}

uint64_t sub_10004DCC8(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10004DD98(a3 + 2102540621 + ((v3 - 1041) | 0x107u), 717980745);
}

uint64_t sub_10004DD98(int a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  BOOL v9 = a3 > 0x2ADC4FB;
  if (v9 == v6 + a5 < -44942588) {
    BOOL v9 = v6 + a5 < a1;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * ((v9 * ((73 * (v7 ^ 0x1A5)) ^ v8)) ^ v7)))();
}

uint64_t sub_10004DE04()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((4066
                                * ((STACK[0x47C] & 0xFFFFFFFE) == ((74 * (v0 ^ 0x7F3) + 1330590332) & 0xB0B0CBFC ^ 0x35A3FA4))) ^ v0)))();
}

void sub_10004DE64()
{
}

void sub_10004DEAC(uint64_t a1)
{
  int v1 = 2078219279 * ((a1 & 0x58BF7D47 | ~(a1 | 0x58BF7D47)) ^ 0x7DBA14CC);
  int v2 = *(_DWORD *)(a1 + 60) - v1;
  if (*(void *)(a1 + 8) | *(void *)(a1 + 64)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) + v1 == 40008549;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  __asm { BRAA            X9, X17 }
}

uint64_t sub_10004DFFC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * (((2 * (v1 < 0xC2CC8C0C)) | (8 * (v1 < 0xC2CC8C0C))) ^ (v3 + v4 + 643))))(a1, 1340331655);
}

uint64_t sub_10004E03C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((((v4 - 600) ^ (v4 - 441)) * (v5 != a4)) ^ v4)))();
}

uint64_t sub_10004E064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  a16 = (v18 - 984) ^ (831981571
                     * ((((2 * &a15) | 0x74AE8078) - &a15 + 1168687044) ^ 0x23F69018));
  a15 = &STACK[0x55D5CC6D86BC0F37];
  uint64_t v19 = (*(uint64_t (**)(unint64_t **))(v17 + 8 * (v18 ^ 0xD57u)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * (((a17 == ((v18 - 847) ^ 0x67C246AA) + 1990826292)
                                              * (((v18 - 847) | 0x201) ^ 0x1AF)) ^ v18)))(v19);
}

uint64_t sub_10004E12C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3
                                                     + 8
                                                     * ((2892 * (((v2 + 266) | 0x28u) + v1 - 1574145288 < 0x38)) ^ (v2 + 798))))(a1, 1);
}

uint64_t sub_10004E184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_DWORD *a35)
{
  int v40 = v36 - v35 - 1319;
  uint64_t v41 = (*(uint64_t (**)(uint64_t, void))(v37 + 8 * (v36 ^ 0xF25u)))(a12, 0);
  (*(void (**)(uint64_t))(v37 + 8 * (v36 ^ 0xF24u)))(v41);
  (*(void (**)(void))(v37 + 8 * (v36 ^ 0xF24u)))();
  v38[1] = *a35 + ((1664525 * (*v38 ^ (*v38 >> 30))) ^ v38[1]);
  int v42 = (v40 - 1446973477) ^ a33;
  *(_DWORD *)(v39 - 144) = v42;
  *(_DWORD *)(v39 - 140) = v42 ^ 0xDB;
  *(_DWORD *)(v39 - 136) = a33 + v40 + 1452949797;
  *(_DWORD *)(v39 - 104) = a33;
  *(_DWORD *)(v39 - 100) = (v40 - 1446973519) ^ a33;
  *(void *)(v39 - 112) = a33 + 3050292072;
  *(void *)(v39 - 128) = a33 + 3050292070;
  uint64_t v43 = (*(uint64_t (**)(uint64_t))(a34 + 8 * (v40 ^ 0x4FE3DFFA)))(v39 - 144);
  return (*(uint64_t (**)(uint64_t))(a34 + 8 * *(int *)(v39 - 120)))(v43);
}

void sub_10004E300(uint64_t a1)
{
  int v2 = (uint64_t *)*(&off_10018D100
                  + ((-113 * (dword_1001B6E60 ^ 0xEA ^ qword_1001B6D98)) ^ byte_10016DDC0[byte_100167FB0[(-113 * (dword_1001B6E60 ^ 0xEA ^ qword_1001B6D98))] ^ 0x66])
                  - 102);
  uint64_t v3 = (unint64_t *)*(&off_10018D100
                           + (byte_1001680B0[byte_100163E10[(-113
                                                                                             * ((qword_1001B6D98 + *v2) ^ 0xEA))] ^ 0x8C] ^ (-113 * ((qword_1001B6D98 + *v2) ^ 0xEA)))
                           - 122);
  unint64_t v4 = (*v3 ^ *v2) - (void)&v8;
  uint64_t v5 = 1932141199 * v4 + 0x5BC8EB821F80EA16;
  unint64_t v6 = 1932141199 * (v4 ^ 0xA437147DE07F15EALL);
  uint64_t *v2 = v5;
  unint64_t *v3 = v6;
  LOBYTE(v3) = -113 * ((v6 - *(_DWORD *)v2) ^ 0xEA);
  int v7 = (char *)*(&off_10018D100
               + ((-113 * (dword_1001B6E60 ^ 0xEA ^ qword_1001B6D98)) ^ byte_10016DDC0[byte_100167FB0[(-113 * (dword_1001B6E60 ^ 0xEA ^ qword_1001B6D98))] ^ 0x66])
               - 176)
     - 4;
  (*(void (**)(char *, uint64_t (*)()))&v7[8
                                                   * (byte_10016DCC0[byte_100167CB0[v3] ^ 0x69] ^ v3)
                                                   + 18920])((char *)*(&off_10018D100+ (v3 ^ byte_1001680B0[byte_100163E10[v3] ^ 0x62])- 51)- 12, sub_100064A04);
  __asm { BRAA            X10, X17 }
}

void sub_10004E4C8()
{
}

void sub_10004E4D0(uint64_t a1)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10004E544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                                + 8
                                                                                * (int)((((((v6 - 2105559406) ^ 0x827FBBA2)
                                                                                         - 416) ^ (v6 - 2105559406) & 0x7D8046FE)
                                                                                       * (v4 == 399219794)) ^ v6)))(a1, a2, a3, a4, 2608590190);
}

uint64_t sub_10004E59C(int a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v7 = v4 + 1153485646 > ((a4 + 185) ^ 0x2D97AC12) || v4 + 1153485646 < a1;
  return (*(uint64_t (**)(void))(v5 + 8 * ((1525 * v7) ^ a4)))();
}

uint64_t sub_10004E5E8@<X0>(int a1@<W8>)
{
  BOOL v2 = ((2 * (a1 - 1704253533)) & 0x177F8CF7ALL)
     + ((a1 - 1704253533) ^ 0x4BFF27FDBBFC67BDLL)
     - 0x4BFF27FD64D6990ALL != 1462095539;
  return (*(uint64_t (**)(void))(v1 + 8 * ((16 * v2) | (32 * v2) | 0x845u)))();
}

uint64_t sub_10004E690(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((((((a4 + 274) | 0x80) + 42) ^ (a4 - 437)) * (v4 == v5)) ^ a4)))();
}

uint64_t sub_10004E6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  STACK[0x508] = v58 - 112;
  return v57(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57);
}

uint64_t sub_10004E6DC@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((13 * (a1 == ((v1 - 958) | 0x34) - 822)) | v1)))((v1 - 586));
}

uint64_t sub_10004E730(int a1)
{
  unsigned int v5 = (a1 ^ 0xFFFFFA9B) + a1 - 1244 + *(unsigned __int8 *)(v3 + 7);
  return (*(uint64_t (**)(void))(v4 + 8 * ((615 * ((v2 & (2 * v5)) + (v5 ^ v1) == v1)) ^ a1)))();
}

uint64_t sub_10004E780@<X0>(int a1@<W1>, int a2@<W8>, __n128 a3@<Q0>)
{
  *(__n128 *)(v5 + v4 + 2297) = a3;
  *(__n128 *)(v5 + v4 + 2313) = a3;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v3 != v4) * a1) ^ a2)))();
}

uint64_t sub_10004E7B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1
                                                     + 8
                                                     * (((*(_DWORD *)(*v4 + 4 * v7) ^ (v6 + 118 + v2)) > (*(_DWORD *)(*v5 + 4 * v7) ^ (v2 + v6 + 118))) | v6)))(a1, v3);
}

void sub_10004E7FC()
{
}

uint64_t sub_10004E804@<X0>(int a1@<W8>)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0xDDE));
  return v3(v1);
}

uint64_t sub_10004E838(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)&v8[qword_1001B6DB0 + qword_1001B6D98];
  qword_1001B6DB0 = 1932141199 * v2 - 0x5BC8EB821F80EA16;
  qword_1001B6D98 = 1932141199 * (v2 ^ 0xA437147DE07F15EALL);
  int v3 = *(_DWORD *)(a2 + 4);
  unsigned __int8 v4 = -113 * ((qword_1001B6D98 + -113 * v2 - 22) ^ 0xEA);
  uint64_t v5 = (char *)*(&off_10018D100 + (v4 ^ byte_1001680B0[byte_100163E10[v4] ^ 0x8C]) - 124) - 4;
  if (v3 == 1704253536) {
    __asm { BRAA            X1, X17 }
  }
  if (v3 == 1704253543)
  {
    int v6 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BRAA            X4, X17 }
  }
  return 4294925278;
}

void sub_10004E9FC(int a1@<W8>)
{
  *(_DWORD *)(v1 - 0x5E8E72AB319E4285) = a1;
}

uint64_t sub_10004EA14@<X0>(void *a1@<X0>, int a2@<W3>, _DWORD *a3@<X8>)
{
  uint64_t v7 = (a2 - 1558) | 0x91u;
  *(void *)(*a1 - 0x4B3FB627E137F32ALL) = v6 + v5 + v7 - 457;
  return (*(uint64_t (**)(void))(v3 + 8 * (int)((1869 * (*a3 == v4)) ^ v7)))();
}

void sub_10004EA78()
{
}

void sub_10004EA84()
{
}

uint64_t sub_10004EBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(v6
                              + 8 * ((30 * (a4 - v4 >= ((((v5 - 217) | 0x82u) - 1930653203) ^ 0x8CEC9AA0uLL))) ^ v5)))();
}

uint64_t sub_10004EC10(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, unsigned int a8)
{
  unsigned int v13 = ((2 * (v11 + 4)) & 0xC7AFBCA6) + ((v11 + 4) ^ 0xE3D7DE53) + 472392109;
  int v14 = ((*(unsigned __int8 *)(v10 + v13) ^ 0x77777777) << 24) | ((*(unsigned __int8 *)(v10 + v13 + 1) ^ a6) << 16) | ((*(unsigned __int8 *)(v10 + v13 + 2) ^ a6) << 8);
  int v15 = *(unsigned __int8 *)(v10 + v13 + 3) ^ a6;
  return (*(uint64_t (**)(uint64_t, void))(v8
                                                    + 8
                                                    * (((((a4 - 1905) | 0x219) - 919) * (((-1 - v12) & 0x40000000) == 0)) | a4)))(a1, (v14 | v15) + v9 - 2 * ((v14 | v15) & a7 ^ v15 & a8));
}

uint64_t sub_10004ECC4()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1492 * (((v1 == 0x86ADDE5E) ^ (v0 - 68)) & 1)) ^ v0)))();
}

uint64_t sub_10004ED10()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(void *)(v1 + 32) == 0x61DFFFBC86B80B30)
                                * ((((v0 - 1685) | 0x80) + 2) ^ (58 * (v0 ^ 0x7ED)))) ^ v0)))();
}

uint64_t sub_10004ED8C(unint64_t a1)
{
  unsigned int v2 = 1224239923 * ((-2 - ((~a1 | 0xC412E5) + (a1 | 0xFF3BED1A))) ^ 0xF277EF32);
  unsigned int v3 = *(_DWORD *)(a1 + 20) - v2;
  int v28 = *(_DWORD *)(a1 + 44) ^ v2;
  int v4 = *(_DWORD *)a1;
  unint64_t v13 = 1224239923 * ((-2 - ((~a1 | 0x60AD954400C412E5) + (a1 | 0x9F526ABBFF3BED1ALL))) ^ 0x48F7202DF277EF32);
  int v5 = v4 - v2;
  unsigned int v6 = 235795823 * ((&v31 - 357749991 - 2 * (&v31 & 0xEAAD2B19)) ^ 0x7E006240);
  int v32 = v6 ^ 0x78F2562C;
  unsigned int v33 = v3 + v6 - 1882357534;
  int v21 = &STACK[0xB999BAB1C512313];
  uint64_t v31 = &STACK[0xB999BAB1C512313];
  (*(void (**)(unint64_t **))((char *)*(&off_10018D100 + (int)(v3 - 9)) + 8 * (int)(v3 ^ 0x913) - 4))(&v31);
  int v27 = v5 + 190382744;
  int v12 = v5 - 1064166063;
  int v15 = v5 + 1137360609;
  int v14 = v5 - 634755587;
  uint64_t v24 = &v30;
  _DWORD v8[2] = &v8[-196768032];
  v8[1] = (char *)&v8[-196768193] + 2;
  int v29 = v3 ^ 0x3ED;
  unsigned int v22 = v3 ^ 0xFFFFFC63;
  int v23 = (v3 - 924235113) & 0x3716BD6B;
  int v17 = (v3 - 356047019) & 0x1538DF67;
  unsigned int v10 = v3 - 954263968;
  unsigned int v11 = 37 * (v3 ^ 0x6F);
  unsigned int v9 = v3 - 1708995121;
  uint64_t v25 = v3 - 1708995121;
  unsigned int v26 = v3;
  unint64_t v16 = a1;
  int32x4_t v19 = vdupq_n_s32(0xDE6BE0E6);
  int32x4_t v20 = vdupq_n_s32(0x5E6BE0EFu);
  int32x4_t v18 = vdupq_n_s32(0x5E6BE0F6u);
  return sub_100061A1C(49, v11, 0x59BF7E53u, 88);
}

uint64_t sub_10004F094()
{
  int v5 = 3804331 * ((v4 + 1666699428 - 2 * ((v4 - 128) & 0x6357D124)) ^ 0x1D82F4D2);
  *(_DWORD *)(v4 - 120) = v5 + v2 + 1369;
  *(_DWORD *)(v4 - 116) = v0 - v5 + (v2 ^ 0xF34D166F);
  *(void *)(v4 - 128) = v3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v2 + 1660)))(v4 - 128);
  return sub_10004F110(v6);
}

uint64_t sub_10004F110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(_DWORD *)(v27 - 104) = (v26 + 50) ^ (((2 * ((v27 - 128) & 0x2919DEE0) - (v27 - 128) + 1457922332) ^ 0x85447316) * v25);
  *(void *)(v27 - 112) = a23;
  *(void *)(v27 - 128) = a21;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v24 + 8 * (v26 + 1331)))(v27 - 128);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * (((*(_DWORD *)(v27 - 120) <= (v23 + v26 - 831 - 229))
                                              * ((3 * (v26 ^ 0x45B)) ^ 0x171)) ^ v26)))(v28);
}

uint64_t sub_10004F1B8(uint64_t a1, uint64_t a2)
{
  int v6 = 73 * (v4 ^ 0x158) + **(unsigned __int8 **)(a2 + 8) - 407;
  return (*(uint64_t (**)(void))(v5 + 8 * ((1044 * ((v3 & (2 * v6)) + (v6 ^ v2) == v2)) ^ v4)))();
}

uint64_t sub_10004F288@<X0>(int a1@<W0>, unsigned char *a2@<X5>, int a3@<W8>)
{
  unsigned int v13 = a3 + 16;
  uint64_t v14 = v13 - 16;
  unsigned int v15 = (v14 >> 4) - (v5 & (v14 >> 3)) + v6;
  a2[12] = (v7 ^ HIBYTE(v15)) - (((v7 ^ HIBYTE(v15)) << (v4 + 89)) & v8) + 119;
  a2[13] = (BYTE2(v15) ^ 0x18) - ((2 * (BYTE2(v15) ^ 0x18)) & 0xEF) + 119;
  a2[14] = (v9 ^ BYTE1(v15)) - ((2 * (v9 ^ BYTE1(v15))) & 0xEF) + 119;
  a2[15] = v15 ^ v10;
  unint64_t v16 = (unsigned char *)(v3 + v14);
  *v16 ^= *a2 ^ 0x77;
  v16[1] ^= a2[1] ^ 0x77;
  v16[2] ^= a2[2] ^ 0x77;
  v16[3] ^= a2[3] ^ 0x77;
  v16[4] ^= a2[4] ^ 0x77;
  v16[5] ^= a2[5] ^ 0x77;
  v16[6] ^= a2[6] ^ 0x77;
  v16[7] ^= a2[7] ^ 0x77;
  v16[8] ^= a2[8] ^ 0x77;
  v16[9] ^= a2[9] ^ 0x77;
  v16[10] ^= a2[10] ^ 0x77;
  v16[11] ^= a2[11] ^ 0x77;
  v16[12] ^= a2[12] ^ 0x77;
  v16[13] ^= a2[13] ^ 0x77;
  v16[14] ^= a2[14] ^ 0x77;
  v16[15] ^= a2[15] ^ 0x77;
  return (*(uint64_t (**)(void))(v11 + 8 * (((v13 > 0x14F) * a1) ^ (v12 + 321))))();
}

uint64_t sub_10004F290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int v33 = 268847287 * ((v32 - 192) ^ 0xFFAA1128);
  *(_DWORD *)(v32 - 192) = (v29 - ((2 * v29 + 75767828) & 0xBCD7C1CC) + v31 - 525472318) ^ v33;
  *(void *)(v32 - 184) = a29;
  *(_DWORD *)(v32 - 176) = v33 + v31 + 589 - 362;
  (*(void (**)(uint64_t))(v30 + 8 * (v31 + 1508)))(v32 - 192);
  return sub_100038944();
}

void sub_10004F314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v27 - 144) = a25;
  *(void *)(v27 - 136) = v26;
  *(void *)(v27 - 128) = v26;
  *(void *)(v27 - 120) = a22;
  *(_DWORD *)(v27 - 112) = v25
                         - 1029
                         - 1224239923
                         * ((68696897 - ((v27 - 144) | 0x4183B41) + ((v27 - 144) | 0xFBE7C4BE)) ^ 0x9543969)
                         + 243;
  *(void *)(v27 - 104) = a16;
  JUMPOUT(0x10004F384);
}

uint64_t sub_10004F39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int v73 = (v70 + 433637874) & 0xE627337F;
  LODWORD(STACK[0x504]) = 0;
  int v74 = LODWORD(STACK[0x504])++;
  *(_DWORD *)STACK[0x240] = v74 + 1;
  *(void *)(v72 - 176) = *(unsigned int *)STACK[0x288] + a70;
  *(void *)(v72 - 160) = a69;
  *(_DWORD *)(v72 - 152) = a70;
  *(_DWORD *)(v72 - 148) = (v73 + 1602953937) ^ a70;
  *(_DWORD *)(v72 - 184) = a70 + v73 - 1501686658;
  int v75 = (v73 + 1602953798) ^ a70;
  *(_DWORD *)(v72 - 192) = v75;
  *(_DWORD *)(v72 - 188) = v75 ^ 0x1B;
  uint64_t v76 = (*(uint64_t (**)(uint64_t))(v71 + 8 * (int)(v73 ^ 0xA53)))(v72 - 192);
  return (*(uint64_t (**)(uint64_t))(v71 + 8 * *(int *)(v72 - 168)))(v76);
}

uint64_t sub_10004F460()
{
  LODWORD(STACK[0x2B8]) = v0;
  return sub_10004F4A0(2147482357);
}

uint64_t sub_10004F4A0()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((385
                                * (((v2 - 1) ^ (*(unsigned __int8 *)(v0
                                                                                    + v3
                                                                                    + v5
                                                                                    + (v2 + 428)) == *(unsigned __int8 *)(v1 + v3 + v5 + (v2 + 428)))) & 1)) ^ v2)))();
}

uint64_t sub_10004F4E0(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5 + 8 * (((a4 + 155 + ((a4 - 154) | 0x2A9) - 647) * (v4 == a2)) ^ a4)))();
}

uint64_t sub_10004F514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25
                                                                                         + 8
                                                                                         * ((1704
                                                                                           * (a24 == ((v24 + 642) ^ 0xE7DC2832))) ^ v24)))(a1, a2, a3, a4, a5, 3731611878);
}

uint64_t sub_10004F558()
{
  unsigned int v5 = v2 + v4 + ((v3 - 2124) ^ 0x204) - 1111285206;
  BOOL v6 = v5 < 0x353E6398;
  BOOL v7 = v5 > v0 + 762509033;
  if ((v0 + 762509033) < 0x353E6398 != v6) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((92 * v7) ^ v3)))();
}

uint64_t sub_10004F5D0@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  int v28 = 235795823 * ((((v27 - 120) ^ 0x256BA31D) & 0xF7DF73A9 | ~((v27 - 120) ^ 0x256BA31D | 0xF7DF73A9)) ^ 0xB9E66612);
  *(_DWORD *)(v27 - 112) = (-1874843427 * a1 - ((545280442 * a1 + 355171766) & 0xF1E4AC5C) - 2088233719) ^ v28;
  *(_DWORD *)(v27 - 108) = v28 + v25 - 1882358577;
  *(void *)(v27 - 120) = &STACK[0xB999BAB1C5120EF];
  (*(void (**)(uint64_t))(v24 + 8 * (v25 + 1276)))(v27 - 120);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * ((63
                                              * (*v26
                                               + 177437691
                                               + ((2 * a24) & 0xA ^ 8)
                                               + (a24 & 0x3F ^ (((5 * (v25 ^ 0x447) - 1930858647) & 0x731697D9u)
                                                              - 201328878)) > 0xFFFFFFBF)) ^ v25)))(4114095902);
}

uint64_t sub_10004F7A8@<X0>(int a1@<W8>, __n128 a2@<Q0>)
{
  uint64_t v6 = (a1 + 1505148183) & 0xA64943ED;
  uint64_t v7 = v4 + v2 + ((v6 - 0x2C2F364FA24C55B0) ^ ((a1 + 156) | 0xEu));
  *(_DWORD *)uint64_t v7 = 23889152;
  *(void *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 16) = 14250141;
  *(_DWORD *)(v7 + 24) = 1704253533;
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = 1704253533;
  *(void *)(v7 + 48) = 0;
  STACK[0x4D0] = v7 + 40;
  STACK[0x558] = v7 + 48;
  *(_DWORD *)(v7 + 56) = 1704253533;
  STACK[0x470] = v7 + 56;
  *(void *)(v7 + 64) = 0;
  *(_DWORD *)(v7 + 72) = 1704253533;
  STACK[0x3C0] = v7 + 64;
  STACK[0x530] = v7 + 72;
  *(void *)(v7 + 80) = 0;
  STACK[0x4E0] = v7 + 80;
  *(unsigned char *)(v7 + 88) = 67;
  *(_DWORD *)uint64_t v3 = 23889152;
  *(__n128 *)(v3 + 4) = a2;
  *(_DWORD *)(v3 + 20) = 0;
  *(_DWORD *)(v3 + 24) = 1704253533;
  *(_DWORD *)(v3 + 28) = 1657738042;
  STACK[0x238] = v3 + 28;
  *(_DWORD *)(v3 + 232) = 1657738042;
  STACK[0x220] = v3 + 232;
  *(__n128 *)(v3 + 436) = a2;
  *(__n128 *)(v3 + 452) = a2;
  *(void *)(v3 + 468) = 0;
  strcpy((char *)(v3 + 1128), "wwwwwwwwwwwwwwwwwwww");
  *(unsigned char *)(v3 + 1149) = 0;
  *(_WORD *)(v3 + 1150) = 0;
  *(__n128 *)(v3 + 1152) = a2;
  *(__n128 *)(v3 + 1168) = a2;
  *(__n128 *)(v3 + 1184) = a2;
  return (*(uint64_t (**)(void))(v5 + 8 * ((230 * (-v6 != -1129)) ^ ((int)v6 - 26))))();
}

uint64_t sub_10004F910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F934(a1, a2, a3, 853);
}

uint64_t sub_10004F934@<X0>(int a1@<W1>, unsigned int a2@<W3>, uint64_t a3@<X4>, int a4@<W8>, int8x16_t a5@<Q2>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  *(int8x16_t *)(a3 + (a4 + a1 + v25)) = vaddq_s8(vaddq_s8(*(int8x16_t *)(a24 + v25), a5), vmvnq_s8(vandq_s8(vaddq_s8(*(int8x16_t *)(a24 + v25), *(int8x16_t *)(a24 + v25)), v28)));
  return (*(uint64_t (**)(void))(v27 + 8 * ((1941 * (v25 + 3 * (v24 ^ a2) - 758 == v26)) ^ v24)))();
}

uint64_t sub_10004F98C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = 4 * (v11 + v8);
  int v15 = v3 + v13 + (*(_DWORD *)(*(void *)(a3 - 0x5E8E72AB319E4281) + v14) ^ v9);
  *(_DWORD *)(*(void *)(a1 - 0x5E8E72AB319E4281) + v14) = v9 + v15 - (v12 & (2 * v15));
  int v16 = v4 + v11 + 709;
  BOOL v18 = v16 > v5 || v16 < v6;
  return (*(uint64_t (**)(void))(v10 + 8 * ((2904 * v18) ^ (v7 - 115086191) & 0x6DC13FBu)))();
}

uint64_t sub_10004FA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  unint64_t v64 = STACK[0x380];
  int v65 = STACK[0x554];
  int v66 = ((v62 ^ 0x286) + 1620908518) & (2 * LODWORD(STACK[0x554]));
  int v67 = 268847287 * ((((v63 - 192) | 0x63168F3F) - ((v63 - 192) & 0x63168F3F)) ^ 0x9CBC9E17);
  *(_DWORD *)(v63 - 136) = v60 - v67 + 628442011;
  *(void *)(v63 - 144) = a59;
  *(_DWORD *)(v63 - 168) = v65 - v67 - v66 + 810454666;
  *(_DWORD *)(v63 - 152) = v62 - v67 + 368399753;
  *(void *)(v63 - 160) = v64;
  *(void *)(v63 - 192) = a58;
  *(void *)(v63 - 176) = v59;
  uint64_t v68 = (*(uint64_t (**)(uint64_t))(v61 + 8 * (v62 ^ 0x8C5)))(v63 - 192);
  int v69 = *(_DWORD *)(v63 - 184);
  LODWORD(STACK[0x4AC]) = v69;
  return (*(uint64_t (**)(uint64_t))(v61 + 8 * ((668 * (v69 == -563355418)) ^ v62)))(v68);
}

uint64_t sub_10004FB70@<X0>(int a1@<W8>)
{
  uint64_t v9 = v2 - 1;
  *(unsigned char *)(v4 + v9) = ((v1 + 106) ^ v3) * (v1 + 123);
  return (*(uint64_t (**)(void))(v7 + 8 * (((v5 & ~(v8 ^ (v9 == 0))) * v6) ^ a1)))();
}

uint64_t sub_10004FB7C(int a1)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((a1 ^ 0x347) + 2113) * (v1 == v2)) ^ a1)))();
}

uint64_t sub_10004FBA8@<X0>(int a1@<W8>)
{
  unsigned __int8 v4 = *(void *)(v1 + 16) == 0x354295EB77E74961 || *(_OWORD *)(v1 + 40) == 0;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((32 * (((((a1 + 8) ^ (a1 + 18)) ^ v4) & 1) == 0)) & 0xBF | (((((a1 + 8) ^ (a1 + 18)) ^ ~v4) & 1) << 6)) ^ (a1 + 273))))();
}

void sub_10004FC1C()
{
  _DWORD *v0 = v1;
  sub_100056398();
}

void sub_10004FC24()
{
}

uint64_t sub_10004FD00@<X0>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, char a6@<W5>, int a7@<W6>, int a8@<W7>, int a9@<W8>)
{
  int v17 = a2 + 1;
  unsigned int v18 = ((2 * (*(_DWORD *)(*a1 + 4 * (v17 + a9 + v13 + 1)) ^ v10)) << a6) | ((*(_DWORD *)(*a1 + 4 * (v17 + a9 + v13)) ^ v10) >> v9);
  *(_DWORD *)(*a1 + 4 * (v17 + a7 + (a3 | a4))) = v18 + v10 - (v11 & (2 * v18));
  BOOL v20 = v17 + a8 > v15 || v17 + a8 < v12;
  return (*(uint64_t (**)(void))(v14 + 8 * ((v20 * v16) ^ a5)))();
}

void sub_10004FD08(uint64_t a1@<X8>, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a4 = v7;
  a5 = v7;
  a3 = (v8 + 101) ^ (2078219279
                   * (((&a3 | 0xEB04F5FB) - &a3 + (&a3 & 0x14FB0A00)) ^ 0x31FE638F));
  a6 = a1;
  (*(void (**)(unsigned int *))(v6 + 8 * (v8 ^ 0xDFB)))(&a3);
  sub_100069C04();
}

uint64_t sub_10004FD74(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v4
                              + 8 * (((a2 - 732163552 < (a4 - 1928)) * (73 * (a4 ^ 0x7BB) - 102)) ^ a4)))();
}

uint64_t sub_10004FDB4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, unsigned int a17)
{
  unsigned int v18 = ((a7 + a5 + 382) ^ 0x58B3E203 ^ ((a7 + a5 - 38) | 0x82)) + a14;
  BOOL v19 = v18 < a4;
  BOOL v20 = v18 > a17;
  if (a17 < a4 != v19) {
    BOOL v21 = v19;
  }
  else {
    BOOL v21 = v20;
  }
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * (v21 ^ (a7 + a5 + 1274))))(4114095902);
}

uint64_t sub_10004FDBC()
{
  return (*(uint64_t (**)(void))(v5
                              + 8 * ((1765 * (*(_DWORD *)(v1 + 4 * (v3 + v6 + (v2 | 0x484u) - 1197)) == v4)) ^ v0)))();
}

uint64_t sub_10004FDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v20 = 3804331 * ((((v19 - 136) | 0x5617FA1D) - (v19 - 136) + ((v19 - 136) & 0xA9E805E0)) ^ 0x28C2DFEB);
  *(void *)(v19 - 136) = v14;
  *(_DWORD *)(v19 - 128) = v20 + v18 + 1653;
  *(_DWORD *)(v19 - 124) = v17 - v20 - 740910630;
  (*(void (**)(uint64_t))(v16 + 8 * (v18 ^ 0x878)))(v19 - 136);
  *(_DWORD *)(v19 - 112) = (v18 + 610) ^ (69008221 * ((v19 - 136) ^ 0xD3A2520A));
  *(void *)(v19 - 120) = a14;
  *(void *)(v19 - 136) = v15;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v16 + 8 * (v18 + 1891)))(v19 - 136);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * ((90 * (*(_DWORD *)(v19 - 128) > ((9 * (v18 ^ 0x145)) ^ 0x74F05240u))) ^ (v18 + 1581))))(v21);
}

uint64_t sub_10004FF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  if (v12) {
    BOOL v16 = a12 == ((v13 + 1768) ^ (v14 + 1614));
  }
  else {
    BOOL v16 = 0;
  }
  int v17 = v16;
  return (*(uint64_t (**)(void))(v15 + 8 * ((v17 * (v13 ^ 0xF6)) ^ v13)))();
}

uint64_t sub_10004FF5C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = (*(unsigned __int8 *)(STACK[0x4A0] + 1516) ^ a6) - (*(unsigned char *)STACK[0x518] - 55);
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * ((((((((v6 - 2165) | 0x27) + a1) & a2 ^ v8) & (2 * v11)) + (v11 ^ v7) == v7) * v9) ^ ((v6 - 2165) | 0x27))))();
}

uint64_t sub_10004FFC8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(a2 + 96) + 24) = v3;
  int v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) + 886460230) & 0x59EAC232) + 1197508796;
  return (*(uint64_t (**)(void))(v2
                                           + 8
                                           * ((122
                                             * (((2 * v4) & 0x4FE5FFA6 ^ 0x49E0C222) + (v4 ^ 0xB079ECA) + 1602052080 != 124805059)) ^ 0xB6u)))(0);
}

uint64_t sub_10005008C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(void))(v22
                              + 8
                              * ((740
                                * (*(_DWORD *)(a19 + 4 * (v20 - 205 + a1 + v20 + 586 + v21)) == v19)) ^ (v20 - 205))))();
}

uint64_t sub_1000500CC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,_DWORD *a28)
{
  *a28 ^= a26;
  return (*(uint64_t (**)(void))(v28
                              + 8
                              * (int)((v29 - 1340331332 + ((a1 + 2146575159) & 0x800DDA7D) + 1340331071 == 1904945320) | (a1 + 2146575159) & 0x800DDA7D)))();
}

uint64_t sub_100050148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, uint64_t a18, unint64_t *a19, int a20)
{
  unsigned int v23 = 1224239923 * (&a15 ^ 0xF2B3FDD7);
  a18 = a12;
  a19 = &STACK[0x634ED76D4AB882AD];
  a15 = v23 ^ 0x6BCE5709;
  a16 = (v22 - 2024874624) ^ v23;
  a17 = v23 ^ 0x74453DCB;
  uint64_t v24 = (*(uint64_t (**)(int *))(v20 + 8 * (v22 + 840)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v20
                                            + 8
                                            * (((a20 == v21)
                                              * ((((v22 - 506) | 0x24) + 2690) ^ (v22 - 172932680) & 0xA4EB8FA)) ^ v22)))(v24);
}

uint64_t sub_100050214()
{
  unsigned int v5 = (((v3 + 111) | 0x130) ^ 0xFFFFFC35) + *(unsigned __int8 *)(v2 + 4);
  return (*(uint64_t (**)(void))(v4 + 8 * ((1027 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_10005025C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33)
{
  *(void *)(&a33 + v35 + a2) = 0x7777777777777777;
  return (*(uint64_t (**)(void))(v36 + 8 * ((((v34 & 0xFFFFFFFFFFFFFFF8) == 8) * (145 * (v33 ^ 0x172) + 1519)) ^ v33)))();
}

uint64_t sub_1000502AC()
{
  unsigned int v4 = ((v3 + v2 - 512 - 302) ^ v1) + (LODWORD(STACK[0x57C]) ^ v3);
  *(_DWORD *)(STACK[0x210] + 52) = ((v4 % 0x2710) ^ 0xF6FBE7D7) + 1842740733 + ((2 * (v4 % 0x2710)) & 0x4FAE);
  int v5 = STACK[0x584];
  STACK[0x508] -= 1616;
  LODWORD(STACK[0x54C]) = v5;
  return (*(uint64_t (**)(void))(v0 + 8 * ((51 * (v5 != v3)) ^ (v2 - 529))))();
}

uint64_t sub_100050344()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v0 == v1) ^ (29 * (v2 ^ 0xB1))) & 1) * ((3 * (v2 ^ 0x755)) ^ 0x244)) ^ v2)))();
}

uint64_t sub_10005038C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0x90DDF0DD)
                       + 1878753216
                       + ((2 * **(unsigned __int8 **)(a2 + 8)) & 0xBBBB);
  return 0;
}

void sub_1000503C4()
{
}

uint64_t sub_1000503CC(int8x8_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  *(int8x8_t *)(a4 + (v6 - 8)) = veor_s8(*(int8x8_t *)(v7 + (v6 - 8)), a1);
  return (*(uint64_t (**)(void))(v9 + 8 * (((v8 == -8) * a3) ^ a6)))();
}

uint64_t sub_1000503DC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(void *)(a4 + v6) = *(void *)(v5 + v6);
  return (*(uint64_t (**)(void))(v7 + 8 * (((a3 == 0) * v4) ^ a2)))();
}

uint64_t sub_10005040C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = v3 + 127 - v1;
  int8x16_t v6 = vrev64q_s8(*(int8x16_t *)(v5 - 15));
  int8x16_t v7 = vextq_s8(v6, v6, 8uLL);
  int8x16_t v8 = vrev64q_s8(*(int8x16_t *)(v5 - 31));
  int8x16_t v9 = vextq_s8(v8, v8, 8uLL);
  uint64_t v10 = a1 + 127 - v1;
  v11.i64[0] = 0xEEEEEEEEEEEEEEEELL;
  v11.i64[1] = 0xEEEEEEEEEEEEEEEELL;
  v12.i64[0] = 0x7777777777777777;
  v12.i64[1] = 0x7777777777777777;
  int8x16_t v13 = vrev64q_s8(vaddq_s8(vsubq_s8(v7, vandq_s8(vaddq_s8(v7, v7), v11)), v12));
  *(int8x16_t *)(v10 - 15) = vextq_s8(v13, v13, 8uLL);
  int8x16_t v14 = vrev64q_s8(vaddq_s8(vsubq_s8(v9, vandq_s8(vaddq_s8(v9, v9), v11)), v12));
  *(int8x16_t *)(v10 - 31) = vextq_s8(v14, v14, 8uLL);
  return (*(uint64_t (**)(void))(v4 + 8 * ((2002 * (v1 + 32 == (v2 - 225) - 370)) ^ v2)))();
}

void sub_1000504A0()
{
}

uint64_t sub_1000504C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(a5 + 1) = *(unsigned char *)(a8 + (v8 - 1349855229));
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * ((((v8 & 0xFFFFFFFC) == 1349855228) * ((v9 - 1122621559) & 0x42E9D3FB ^ 0x3F2)) ^ v9)))();
}

uint64_t sub_100050548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8 * (int)(((((3 * (v10 ^ 0x30F)) ^ 0xFFFFFBF3) + ((v10 + 354) | 0x103)) * (v9 == 0)) ^ (v10 - 164))))(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100050598(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned char *a22)
{
  uint64_t v25 = *(unsigned char **)(v24 + 96);
  v25[1167] = a22[19];
  v25[1166] = a22[18];
  v25[1165] = a22[17];
  v25[1164] = a22[16];
  v25[1163] = a22[15];
  v25[1162] = a22[14];
  v25[1161] = a22[13];
  v25[1160] = a22[12];
  v25[1159] = a22[11];
  v25[1158] = a22[10];
  v25[1157] = a22[9];
  v25[1156] = a22[8];
  v25[1155] = a22[7];
  v25[1154] = a22[6];
  v25[1153] = a22[5];
  v25[1152] = a22[4];
  v25[1151] = a22[3];
  v25[1150] = a22[2];
  v25[1149] = a22[1];
  v25[1148] = *a22;
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8
                                            * (int)((((((v22 + 1165518999) & 0xBA8793FF) + 1515641792) & 0xFFBF6F37 ^ (a4 - 131))
                                                   * (*(_DWORD *)(v24 + 72) == a5 + 7)) ^ (v22 + 1165518999) & 0xBA8793FF)))(a7);
}

void sub_1000506C0()
{
}

uint64_t sub_10005079C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = *v4;
  unint64_t v9 = (2 * ((v7 - 144) & 0x44A332D25A70D0D8) - (v7 - 144) - 0x44A332D25A70D0DCLL) ^ 0xB3EC77D33122667DLL;
  int v10 = (v3 + 1335686706) ^ (v9 * v6);
  *(_DWORD *)(v7 - 112) = ((v3 + 1335686706) ^ 0x59) - v9 * v6;
  *(_DWORD *)(v7 - 108) = v10 ^ 0x2D;
  *(_DWORD *)(v7 - 144) = -(v9 * v6);
  *(void *)(v7 - 136) = -(uint64_t)(v9 * v6);
  *(void *)(v7 - 120) = v8 - v9 * v6;
  *(_DWORD *)(v7 - 128) = v10;
  *(_DWORD *)(v7 - 124) = (v3 + 681032122) ^ (v9 * v6);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v5 + 8 * (v3 ^ (a3 + 2415))))(v7 - 144);
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * *(int *)(v7 - 140)))(v11);
}

void sub_100050898()
{
}

uint64_t sub_1000508A0(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 8) = a4;
  return result;
}

uint64_t sub_1000508A8@<X0>(uint64_t a1@<X6>, int a2@<W7>, uint64_t a3@<X8>)
{
  *(unsigned char *)(v5 + (v4 + a2)) = *(unsigned char *)(v6 + a3 + a1);
  return (*(uint64_t (**)(void))(v7 + 8 * ((((a2 + v4 + 1) > 0x3F) * v8) ^ v3)))();
}

void sub_1000508F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  LODWORD(STACK[0x4AC]) = a8 - 54;
  JUMPOUT(0x100036AE0);
}

uint64_t sub_100050900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  *(_DWORD *)(STACK[0x210] + 360) = 56245773;
  uint64_t v65 = (*(uint64_t (**)(void, uint64_t, unint64_t *, unint64_t, void, uint64_t, unint64_t *, unint64_t *))(v62 + 8 * (v57 ^ 0xA62)))(LODWORD(STACK[0x2A8]), 2, &STACK[0x440], STACK[0x338], (v59 - 1704253533), a6, &STACK[0x3A0], &STACK[0x46C]);
  int v69 = ((2 * v65) & 0xF26E5FFE) + (v65 ^ 0xF9372FFF);
  LODWORD(STACK[0x3BC]) = v69 + 1610413280;
  if (v69 == -113823745)
  {
    LODWORD(STACK[0x444]) = 1804530023;
    STACK[0x4B8] = STACK[0x3A0];
    uint64_t v71 = (LODWORD(STACK[0x46C]) ^ 0xF59EDAFD) + 1878392160 + ((2 * LODWORD(STACK[0x46C])) & 0xEB3DB5FA);
    STACK[0x408] = v60;
    STACK[0x4B0] = v58;
    uint64_t v72 = (char *)&STACK[0x5C0] + v61 - 0x2C2F364FA24C4789;
    STACK[0x4F0] = (unint64_t)v72;
    STACK[0x388] = (unint64_t)&STACK[0x5C0] + v61 - 0x2C2F364FA24C4709;
    *(void *)uint64_t v72 = 0x6370646600;
    v72[8] = 1;
    STACK[0x260] = (unint64_t)&STACK[0x5C0] + v61 - 0x2C2F364FA24C4780;
    STACK[0x508] = v61 + 4208;
    BOOL v73 = ((v63 - 1883204015) & 0x703F66E6 ^ 0x7BC3E791) != 2076436352;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8 * ((v73 | (8 * v73)) ^ (v63 + 1059))))(v65, v66, v67, 3553918821, 1892305836, v71, 741048474, 563395391, &STACK[0x378], &STACK[0x45C], &STACK[0x44C], &STACK[0x52C], a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             *(void *)(v62 + 8 * (v63 - 789)),
             a53,
             a54,
             a55,
             a56,
             a57);
  }
  else if (v69 == 154611714)
  {
    LODWORD(STACK[0x54C]) = 563395550;
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v62
                                                                                  + 8
                                                                                  * (((STACK[0x3A0] != 0)
                                                                                    * (((v63 - 294) | 0x444) - 1490)) ^ (v63 - 120))))(v65, STACK[0x3A0], v67, v68);
  }
  else
  {
    unsigned int v74 = v69 - ((2 * (v69 + 1610413280) + 1301788226) & 0xBCD7C1CC) - 449531673;
    int v75 = 268847287 * ((((v64 - 192) | 0xA2D6F03B) - (v64 - 192) + ((v64 - 192) & 0x5D290FC0)) ^ 0x5D7CE113);
    *(_DWORD *)(v64 - 176) = v75 + v63 + 227;
    *(_DWORD *)(v64 - 192) = v74 ^ v75;
    *(void *)(v64 - 184) = a30;
    uint64_t v76 = (*(uint64_t (**)(uint64_t))(v62 + 8 * (v63 ^ 0xA3C)))(v64 - 192);
    return (*(uint64_t (**)(uint64_t))(v62
                                              + 8
                                              * (((STACK[0x3A0] != 0) * (((v63 - 294) | 0x444) - 1490)) ^ (v63 - 120))))(v76);
  }
}

uint64_t sub_100050C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((((v9 - 181 + v6) ^ (v9 - v7 - 1108)) * (v8 == a5)) ^ v9)))(0);
}

uint64_t sub_100050CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(void))(v17
                              + 8
                              * (((*(_DWORD *)(a14 + 4 * (v16 + v18 + 1)) == v14)
                                * (((v15 - 978) | 0x190) ^ 0x2D3)) | (v15 - 22))))();
}

uint64_t sub_100050D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (v48 == 56245776 || v48 == 56245779)
  {
    int v52 = v50 + 661;
    LOBYTE(STACK[0x185F]) = LOBYTE(STACK[0x186F]) - ((2 * LOBYTE(STACK[0x186F])) & 0xEF) + 119;
    LOBYTE(STACK[0x185E]) = LOBYTE(STACK[0x186E]) - ((v50 - 64) & (2 * LOBYTE(STACK[0x186E]))) + 119;
    LOBYTE(STACK[0x185D]) = LOBYTE(STACK[0x186D]) - ((2 * LOBYTE(STACK[0x186D])) & 0xEF) + 119;
    LOBYTE(STACK[0x185C]) = LOBYTE(STACK[0x186C]) - ((2 * LOBYTE(STACK[0x186C])) & 0xEF) + 119;
    LOBYTE(STACK[0x185B]) = LOBYTE(STACK[0x186B]) - ((2 * LOBYTE(STACK[0x186B])) & 0xEF) + 119;
    LOBYTE(STACK[0x185A]) = LOBYTE(STACK[0x186A]) - ((2 * LOBYTE(STACK[0x186A])) & 0xEF) + 119;
    LOBYTE(STACK[0x1859]) = LOBYTE(STACK[0x1869]) - ((2 * LOBYTE(STACK[0x1869])) & 0xEF) + 119;
    LOBYTE(STACK[0x1858]) = LOBYTE(STACK[0x1868]) - ((2 * LOBYTE(STACK[0x1868])) & 0xEF) + 119;
    LOBYTE(STACK[0x1857]) = LOBYTE(STACK[0x1867]) - ((2 * LOBYTE(STACK[0x1867])) & 0xEF) + 119;
    LOBYTE(STACK[0x1856]) = LOBYTE(STACK[0x1866]) - ((2 * LOBYTE(STACK[0x1866])) & 0xEF) + 119;
    LOBYTE(STACK[0x1855]) = LOBYTE(STACK[0x1865]) - ((2 * LOBYTE(STACK[0x1865])) & 0xEF) + 119;
    LOBYTE(STACK[0x1854]) = LOBYTE(STACK[0x1864]) - ((2 * LOBYTE(STACK[0x1864])) & 0xEF) + 119;
    LOBYTE(STACK[0x1853]) = LOBYTE(STACK[0x1863]) - ((2 * LOBYTE(STACK[0x1863])) & 0xEF) + 119;
    LOBYTE(STACK[0x1852]) = LOBYTE(STACK[0x1862]) - ((2 * LOBYTE(STACK[0x1862])) & 0xEF) + 119;
    LOBYTE(STACK[0x1851]) = LOBYTE(STACK[0x1861]) - ((2 * LOBYTE(STACK[0x1861])) & 0xEF) + 119;
    int v48 = STACK[0x47C];
    char v53 = LOBYTE(STACK[0x1860]) - ((2 * LOBYTE(STACK[0x1860])) & 0xEF) + 119;
  }
  else
  {
    int v52 = v50 + 661;
    LOBYTE(STACK[0x185F]) = STACK[0x187F];
    LODWORD(STACK[0x185B]) = STACK[0x187B];
    STACK[0x1853] = STACK[0x1873];
    LOWORD(STACK[0x1851]) = STACK[0x1871];
    char v53 = STACK[0x1870];
  }
  LOBYTE(STACK[0x1850]) = v53;
  unint64_t v54 = STACK[0x4E8];
  int v55 = LODWORD(STACK[0x39C]) ^ 0x578FEB5F;
  unsigned int v56 = (LODWORD(STACK[0x39C]) << ((61 * (v52 ^ 0xD4)) ^ 0x7A)) & 0xAF1FD6BE;
  int v57 = 2078219279 * ((v51 - 192 - 2 * ((v51 - 192) & 0x1033CA39) + 271829561) ^ 0xCAC95C4D);
  LOBYTE(STACK[0x1918]) = 15 * ((v51 + 64 - 2 * ((v51 + 64) & 0x39) + 57) ^ 0x4D) - 68;
  *(_DWORD *)(v51 - 152) = (v48 + 499745704) ^ v57;
  *(void *)(v51 - 192) = v47;
  *(void *)(v51 - 184) = v54;
  *(void *)(v51 - 144) = a47;
  *(void *)(v51 - 176) = &STACK[0x1850];
  *(void *)(v51 - 160) = a27;
  *(_DWORD *)(v51 - 132) = v57 + 3 * (v52 ^ 0x48A) + v55 + v56 - 33687019;
  *(_DWORD *)(v51 - 128) = v57 + v52 - 751;
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(v49 + 8 * (v52 + 1007)))(v51 - 192);
  int v59 = *(_DWORD *)(v51 - 168);
  LODWORD(STACK[0x4AC]) = v59;
  return (*(uint64_t (**)(uint64_t))(v49 + 8 * ((961 * (v59 == -563355418)) ^ v52)))(v58);
}

uint64_t sub_100051038@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v5 = (335 - v2);
  int8x16_t v6 = vrev64q_s8(*(int8x16_t *)(a2 + v5 - 15));
  int8x16_t v7 = vextq_s8(v6, v6, 8uLL);
  int8x16_t v8 = vrev64q_s8(*(int8x16_t *)(a2 + v5 - 31));
  int8x16_t v9 = vextq_s8(v8, v8, 8uLL);
  uint64_t v10 = a1 + v5;
  v11.i64[0] = 0xEEEEEEEEEEEEEEEELL;
  v11.i64[1] = 0xEEEEEEEEEEEEEEEELL;
  v12.i64[0] = 0x7777777777777777;
  v12.i64[1] = 0x7777777777777777;
  int8x16_t v13 = vrev64q_s8(vaddq_s8(vsubq_s8(v7, vandq_s8(vaddq_s8(v7, v7), v11)), v12));
  *(int8x16_t *)(v10 - 15) = vextq_s8(v13, v13, 8uLL);
  int8x16_t v14 = vrev64q_s8(vaddq_s8(vsubq_s8(v9, vandq_s8(vaddq_s8(v9, v9), v11)), v12));
  *(int8x16_t *)(v10 - 31) = vextq_s8(v14, v14, 8uLL);
  return (*(uint64_t (**)(void))(v4 + 8 * ((63 * (((v3 + 429) ^ 0x30E) + v2 == 320)) ^ v3)))();
}

uint64_t sub_1000510D0(int a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((19 * (((a4 - ((((a1 ^ 0xC17) - 648) ^ 0x1D3) & v4)) & 0xFFFFFFFC) > a4 + 3)) ^ a1)))();
}

uint64_t sub_10005111C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8 * ((117 * ((a5 + 1 + v7) < 0x50)) ^ v6)))(v5, a4);
}

uint64_t sub_1000511D8@<X0>(int a1@<W3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((4044 * (a2 == v4)) ^ (v3 + a1 + 1784))))();
}

uint64_t sub_100051204()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((((*(unsigned __int8 *)(v2 + 5) - 13) << ((v3 + 98) & 0x71 ^ 0x70)) & v1)
                                 + ((*(unsigned __int8 *)(v2 + 5) - 13) ^ v0) == v0)
                                * (((v3 - 47736415) & 0x2D867FD) - 278)) ^ v3)))();
}

void sub_100051274(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 268847287 * ((((2 * a1) | 0x834EB920) - a1 - 1101487248) ^ 0xBE0D4DB8);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_100051334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  *(void *)(v26 - 136) = a24;
  *(_DWORD *)(v26 - 128) = (v25 + 1339) ^ (2078219279
                                         * ((((v26 - 144) ^ 0x2A25DA3C | 0xB199E2BB)
                                           - ((v26 - 144) ^ 0x2A25DA3C)
                                           + (((v26 - 144) ^ 0x2A25DA3C) & 0x4E661D44)) ^ 0x4146AEF3));
  *(_DWORD *)(v26 - 140) = -2078219279
                         * ((((v26 - 144) ^ 0x2A25DA3C | 0xB199E2BB)
                           - ((v26 - 144) ^ 0x2A25DA3C)
                           + (((v26 - 144) ^ 0x2A25DA3C) & 0x4E661D44)) ^ 0x4146AEF3);
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v24 + 8 * (v25 ^ 0x8C2)))(v26 - 144);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * ((221
                                              * ((((v25 + 58) ^ (v25 + 79)) ^ (*(_DWORD *)(v26 - 144) == -56550210)) & 1)) ^ (v25 + 674))))(v27);
}

uint64_t sub_1000513F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((46
                                * (v2 - a1 < (unint64_t)((407 * (v1 ^ 0x25C) + 1894673516) & 0x8F1192FF) - 634)) ^ v1)))();
}

uint64_t sub_10005144C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((3764 * (a1 + 1 == v4 + 80)) ^ a3)))();
}

uint64_t sub_100051630@<X0>(int a1@<W0>, int a2@<W7>, int a3@<W8>)
{
  *(unsigned char *)(v5 + v3) = *(unsigned char *)(v8 + (v4 + v6))
                      - ((2 * *(unsigned char *)(v8 + (v4 + v6))) & 0xEF)
                      + 119;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v3 == 63) * a1) ^ (a2 + a3 + 1785))))();
}

void sub_10005167C()
{
}

void sub_100051694()
{
}

uint64_t sub_100051760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v8 + 8 * (v7 ^ ((v9 == v10) * a7))))();
}

uint64_t sub_100051780@<X0>(unsigned __int8 *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,unsigned int a37,uint64_t a38,uint64_t a39)
{
  int v44 = v39 - 616;
  int v45 = 3 * ((v39 - 616) ^ 0x14B);
  uint64_t v46 = *(void *)(v42 + 8 * ((v39 - 616) ^ 0x381));
  int v47 = *(unsigned __int8 *)(v46 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B75) ^ 0x85));
  HIDWORD(v48) = v47 ^ 1;
  LODWORD(v48) = ((v45 + 9) ^ v47) << 24;
  int v49 = ((v48 >> 30) ^ 0x9F) << 16;
  uint64_t v50 = *(void *)(v42 + 8 * ((v39 - 616) ^ 0x3BF)) - 8;
  int v51 = *(unsigned __int8 *)(v50 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B6BLL) ^ 0xBFLL));
  HIDWORD(v48) = v51 ^ 2;
  LODWORD(v48) = (v51 ^ 0x40) << 24;
  unsigned __int8 v52 = v48 >> 28;
  int v53 = *(unsigned __int8 *)(v46 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B71) ^ 0x6FLL));
  HIDWORD(v48) = v53 ^ 1;
  LODWORD(v48) = (v53 ^ 0x40) << 24;
  uint64_t v54 = *(void *)(v42 + 8 * (v39 - 1615));
  int v55 = ((v48 >> 30) ^ 0x68) << 16;
  uint64_t v56 = *(void *)(v42 + 8 * (v39 - 1617));
  unsigned __int8 v57 = *(unsigned char *)(v56 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B6ALL) ^ 0xD8));
  int v58 = *(unsigned __int8 *)(v50 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B67) ^ 0xBCLL));
  HIDWORD(v48) = v58 ^ 2;
  LODWORD(v48) = (v58 ^ 0x40) << 24;
  unsigned __int8 v59 = v48 >> 28;
  uint64_t v60 = v59 ^ 0x68;
  int v61 = *(unsigned __int8 *)(v50 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B6FLL) ^ 0x98));
  HIDWORD(v48) = v61 ^ 2;
  LODWORD(v48) = (v61 ^ 0x40) << 24;
  unsigned int v62 = v55 & 0xFFFFFF00 | ((*(unsigned __int8 *)(v54 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B70) ^ 0xDFLL)) ^ 0xF1) << 8) | ((*(unsigned __int8 *)(v56 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B72) ^ 0xAFLL)) ^ 0x72) << 24) | (v48 >> 28);
  int v63 = v49 | ((*(unsigned __int8 *)(v54 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B74) ^ 0x49)) ^ 0x7B) << 8);
  LODWORD(v50) = *(unsigned __int8 *)(v50 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B73) ^ 0xD0));
  HIDWORD(v48) = v50 ^ 2;
  LODWORD(v48) = (v50 ^ 0x40) << 24;
  LOBYTE(v50) = v48 >> 28;
  int v64 = *(unsigned __int8 *)(v46 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B69) ^ 0xB6));
  HIDWORD(v48) = v64 ^ 1;
  LODWORD(v48) = (v64 ^ 0x40) << 24;
  unsigned int v65 = v63 & 0xFFFFFF00 | ((*(unsigned __int8 *)(v56 + (*v41 ^ 0xFELL)) ^ 0xAB) << 24) | v50 ^ 0x3C;
  uint64_t v66 = (v48 >> 30) ^ 0x21;
  int v67 = *(unsigned __int8 *)(v46 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B6DLL) ^ 0xC8));
  HIDWORD(v48) = v67 ^ 1;
  LODWORD(v48) = (v67 ^ 0x40) << 24;
  unint64_t v68 = (((*(unsigned __int8 *)(v54 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B68) ^ 0xC7)) ^ 0x30) << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v57 ^ 0xA2u) << 24) | (v66 << 16) | v60) ^ 0x75F49EF4;
  uint64_t v69 = ((unsigned __int16)((((*(unsigned __int8 *)(v54
                                                                   + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B68) ^ 0xC7)) ^ 0x30) << 8) | v60) ^ 0x9EF4) >> 8);
  uint64_t v70 = *(void *)(v42 + 8 * (v44 & 0x20B0C461)) - 8;
  LODWORD(v60) = v52 | ((*(unsigned __int8 *)(v54 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B6CLL) ^ 0xB7)) ^ 0xD0) << 8) & 0xFF00FFFF | (((v48 >> 30) ^ 0x37) << 16) | ((*(unsigned __int8 *)(v56 + (*(unsigned __int8 *)(v40 - 0x5EC77446536A4B6ELL) ^ 0x18)) ^ 0xED) << 24);
  int v71 = (v69 - ((2 * (v68 >> 8)) & 0x5E) + 358750255) ^ *(_DWORD *)(v70 + 4 * (v69 ^ 0xF5));
  uint64_t v72 = *(void *)(v42 + 8 * (v44 ^ 0x38F)) - 8;
  int v73 = *(_DWORD *)(v72 + 4 * (v57 ^ 0xBDu));
  HIDWORD(v48) = v73 ^ 2;
  LODWORD(v48) = v73 ^ 0xF97227DC;
  uint64_t v74 = *(void *)(v42 + 8 * (v44 ^ 0x388)) - 4;
  LODWORD(v66) = (v48 >> 2) ^ *(_DWORD *)(v74 + 4 * (v66 ^ 0xDD)) ^ (v71
                                                                                   - ((2 * v71) & 0xCE6A6C96)
                                                                                   - 415943093);
  uint64_t v75 = *(void *)(v42 + 8 * (v44 ^ 0x3C2)) - 4;
  unsigned int v228 = v65;
  int v76 = *(_DWORD *)(v75 + 4 * (v59 ^ 0xD9u)) ^ v65 ^ (v66 - ((2 * v66) & 0xDCE9BE20) - 294330608);
  unsigned int v229 = v62;
  int v225 = v76 ^ v62 ^ 0x2789BBD4;
  int v77 = v60 ^ 0xE6 ^ v225;
  int v78 = *(_DWORD *)(v72 + 4 * (((v77 ^ v68) >> 24) ^ 0x21));
  HIDWORD(v48) = v78 ^ 2;
  LODWORD(v48) = v78 ^ 0xF97227DC;
  *(_DWORD *)(v43 - 120) = -294330607;
  int v79 = ((v48 >> 2) - 294330607 + (~(2 * (v48 >> 2)) | 0x231641DF)) ^ *(_DWORD *)(v75
                                                                                + 4
                                                                                * ((v77 ^ v68) ^ 0xDEu));
  HIDWORD(v224) = v77 ^ v68;
  int v226 = v76;
  LODWORD(v224) = *(_DWORD *)(v70 + 4 * (((unsigned __int16)(v77 ^ v68) >> 8) ^ 0x1Eu)) ^ *(_DWORD *)(v74 + 4 * (((v77 ^ v68) >> 16) ^ 0x8Fu)) ^ v76 ^ ((((unsigned __int16)(v77 ^ v68) >> 8) ^ 0xEB) - ((2 * (((v77 ^ v68) >> 8) ^ 0x4BA6EB)) & 0x5E) + 358750255) ^ (v79 - ((2 * v79) & 0xCE6A6C96) - 415943093);
  unsigned int v80 = v224 ^ 0x76E748E2 ^ v76 ^ v62;
  int v227 = v68;
  LODWORD(v68) = v80 ^ v68;
  LODWORD(v66) = *(_DWORD *)(v72 + 4 * (BYTE3(v68) ^ 0xA2));
  HIDWORD(v48) = v66 ^ 2;
  LODWORD(v48) = v66 ^ 0xF97227DC;
  int v81 = v68 ^ 0xC84590C6;
  LODWORD(v66) = *(_DWORD *)(v70 + 4 * (((unsigned __int16)(v68 ^ 0x90C6) >> 8) ^ 0xF5u)) ^ *(_DWORD *)(v74 + 4 * (BYTE2(v68) ^ 0x6Cu)) ^ (((unsigned __int16)(v68 ^ 0x90C6) >> 8) - ((v68 >> 7) & 0x5E) + 358750255) ^ ((v48 >> 2) - ((2 * (v48 >> 2)) & 0xCE6A6C96) - 415943093);
  unint64_t v223 = __PAIR64__(v80, v68);
  HIDWORD(v222) = v224 ^ 0x76E748E2 ^ *(_DWORD *)(v75 + 4 * (v68 ^ 0x83u)) ^ (v66
                                                                                               - ((2 * v66) & 0xDCE9BE20)
                                                                                               - 294330608);
  LODWORD(v222) = HIDWORD(v222) ^ 0x2789BBD4 ^ v80;
  HIDWORD(v221) = v80 ^ v77;
  LODWORD(v68) = v222 ^ 0x8EDEEA78 ^ v80 ^ v77;
  unsigned int v82 = v68 ^ v81;
  int v83 = *(_DWORD *)(v72 + 4 * (((v68 ^ v81) >> 24) ^ 0x67));
  HIDWORD(v48) = v83 ^ 2;
  LODWORD(v48) = v83 ^ 0xF97227DC;
  int v84 = (v48 >> 2) ^ *(_DWORD *)(v70 + 4 * (BYTE1(v82) ^ 0x97u)) ^ ((BYTE1(v82) ^ 0x62)
                                                                    - ((2 * ((v82 >> 8) ^ 0xD8B62)) & 0x5E)
                                                                    + 358750255);
  unsigned int v85 = (v84 - ((2 * v84) & 0xDCE9BE20) - 294330608) ^ *(_DWORD *)(v75 + 4 * (v82 ^ 0xE1u));
  unsigned int v86 = HIDWORD(v222) ^ 0x2789BBD4 ^ *(_DWORD *)(v74 + 4 * (((v82 ^ 0x2142BA5) >> 16) ^ 0xB6u)) ^ (v85 - ((2 * v85) & 0xCE6A6C96) - 415943093);
  int v87 = v86 ^ v222 ^ 0x8EDEEA78;
  LODWORD(v221) = v68;
  LODWORD(v219) = v87 ^ 0x307C325C ^ v68 ^ 0x5EF1BA37;
  int v88 = *(_DWORD *)(v72 + 4 * (((v219 ^ v82) >> 24) ^ 0xA4));
  HIDWORD(v48) = v88 ^ 2;
  LODWORD(v48) = v88 ^ 0xF97227DC;
  int v89 = ((v48 >> 2) - ((2 * (v48 >> 2)) & 0xDCE9BE20) - 294330608) ^ *(_DWORD *)(v75
                                                                               + 4
                                                                               * ((v219 ^ v82) ^ 0x18u));
  HIDWORD(v218) = v219 ^ v82;
  unsigned int v90 = v219 ^ v82 ^ 0xCEE37B5D;
  int v91 = *(_DWORD *)(v74 + 4 * (((v219 ^ v82) >> 16) ^ 0xCAu)) ^ *(_DWORD *)(v70 + 4 * (BYTE1(v90) ^ 0xF5u));
  HIDWORD(v219) = v87;
  unint64_t v220 = __PAIR64__(v82, v86);
  unsigned int v92 = v91 ^ v86 ^ (BYTE1(v90) - ((v90 >> 7) & 0x5E) + 358750255) ^ 0x47F6EBDA ^ (v89
                                                                                 - ((2 * v89) & 0xCE6A6C96)
                                                                                 - 415943093);
  int v93 = v92 ^ ((v68 ^ 0x5EF1BA37) - ((2 * (v68 ^ 0x5EF1BA37)) & 0x8FEDD7B4) + 1207364570);
  LODWORD(v66) = *(_DWORD *)(v72 + 4 * (((v93 ^ v90) >> 24) ^ 0x70));
  HIDWORD(v48) = v66 ^ 2;
  LODWORD(v48) = v66 ^ 0xF97227DC;
  LODWORD(v66) = ((v48 >> 2) - ((2 * (v48 >> 2)) & 0xCE6A6C96) - 415943093) ^ *(_DWORD *)(v74
                                                                                        + 4
                                                                                        * (((v93 ^ v90) >> 16) ^ 0xA0u));
  LODWORD(v66) = (v66 - ((2 * v66) & 0xDCE9BE20) - 294330608) ^ *(_DWORD *)(v75
                                                                          + 4
                                                                          * ((v91 ^ v86 ^ (BYTE1(v90) - ((v90 >> 7) & 0x5E) + 47)) ^ 0xDA ^ (v89 - ((2 * v89) & 0x96) + 75) ^ ((v68 ^ 0x37) - ((2 * (v68 ^ 0x37)) & 0xB4) - 38) ^ v90 ^ 0x91u));
  LODWORD(v217) = v93 ^ v90;
  int v94 = v93 ^ v90 ^ 0x1A89BBD4;
  LODWORD(v66) = (v66 - ((2 * v66) & 0x2AC4305E) + 358750255) ^ *(_DWORD *)(v70 + 4 * (BYTE1(v94) ^ 0xF5u));
  LODWORD(v66) = v92 ^ BYTE1(v94) ^ (v66 - ((2 * v66) & 0x8FEDD7B4) + 1207364570);
  HIDWORD(v217) = v93;
  LODWORD(v218) = v92;
  HIDWORD(v216) = v92 ^ ((v87 ^ 0x307C325C) - 2 * ((v87 ^ 0x307C325C) & 0x47F6EBDB ^ v87 & 1) + 1207364570);
  LODWORD(v216) = v66 ^ 0x883ED7B9;
  LODWORD(v68) = v66 ^ 0x883ED7B9 ^ (HIDWORD(v216) - ((2 * HIDWORD(v216)) & 0x107DAF72) - 2009147463);
  unsigned int v95 = v68 ^ v93 ^ v94;
  int v96 = *(_DWORD *)(v72 + 4 * (HIBYTE(v95) ^ 0xA5));
  HIDWORD(v48) = v96 ^ 2;
  LODWORD(v48) = v96 ^ 0xF97227DC;
  unint64_t v215 = __PAIR64__(v68, v95);
  int v97 = *(_DWORD *)(v70 + 4 * (((unsigned __int16)(v95 ^ 0xF336) >> 8) ^ 0xF5u)) ^ *(_DWORD *)(v74 + 4 * (BYTE2(v95) ^ 0x47u)) ^ (((unsigned __int16)(v95 ^ 0xF336) >> 8) - (((v95 ^ 0xCF6EF336) >> 7) & 0x5E) + 358750255) ^ ((v48 >> 2) - ((2 * (v48 >> 2)) & 0xCE6A6C96) - 415943093);
  int v98 = *(_DWORD *)(v75 + 4 * (v95 ^ 0x73u)) ^ v66 ^ 0x1350FF56 ^ (v97
                                                                                    - ((2 * v97) & 0xDCE9BE20)
                                                                                    - 294330608);
  HIDWORD(v213) = v98 ^ ((v68 ^ 0xE6F58988) - ((2 * (v68 ^ 0xE6F58988)) & 0x26A1FEAC) + 324075350);
  HIDWORD(v214) = v68 ^ v93 ^ 0x2D64964E;
  int v99 = ((HIDWORD(v213) ^ 0x5BF36347) - 2 * ((HIDWORD(v213) ^ 0x5BF36347) & 0x4B911FD6 ^ BYTE4(v213) & 0x10) - 879681594) ^ HIDWORD(v214);
  unsigned int v100 = ((((unsigned __int16)(v99 ^ v95 ^ 0xF336) >> 8) ^ 0xBB)
        - ((2 * (((v99 ^ v95 ^ 0xCF6EF336) >> 8) ^ 0x1A89BB)) & 0x5E)
        + 358750255) ^ *(_DWORD *)(v70 + 4 * (((unsigned __int16)(v99 ^ v95 ^ 0xF336) >> 8) ^ 0x4Eu));
  int v101 = *(_DWORD *)(v72 + 4 * (((v99 ^ v95 ^ 0xCF6EF336) >> 24) ^ 0x70));
  unsigned int v102 = (v100 - ((2 * v100) & 0xDCE9BE20) - 294330608) ^ *(_DWORD *)(v75
                                                                    + 4
                                                                    * ((v99 ^ v95 ^ 0x36) ^ 0x91u));
  HIDWORD(v48) = v101 ^ 2;
  LODWORD(v48) = v101 ^ 0xF97227DC;
  int v103 = (v48 >> 2) ^ *(_DWORD *)(v74 + 4 * (((v99 ^ v95 ^ 0xCF6EF336) >> 16) ^ 0xA0u)) ^ (v102 - ((2 * v102) & 0xCE6A6C96) - 415943093);
  LODWORD(v214) = v98;
  LODWORD(v212) = (v103 - ((2 * v103) & 0x26A1FEAC) + 324075350) ^ v98;
  HIDWORD(v212) = v99 ^ v95 ^ 0xCF6EF336;
  LODWORD(v68) = v212 ^ 0x930000ED ^ HIDWORD(v213) ^ 0x5BF36347;
  LODWORD(v211) = v99 ^ 0x288133AF ^ ((v68 ^ 0x8D06EA22) - 2 * ((v68 ^ 0x8D06EA22) & 0xFC4E35C ^ v68 & 0xC) + 264561488);
  int v104 = *(_DWORD *)(v72 + 4 * (((v211 ^ HIDWORD(v212)) >> 24) ^ 0x23));
  HIDWORD(v48) = v104 ^ 2;
  LODWORD(v48) = v104 ^ 0xF97227DC;
  int v105 = v211 ^ HIDWORD(v212) ^ 0x49571195;
  int v106 = *(_DWORD *)(v75 + 4 * ((v211 ^ BYTE4(v212)) ^ 0xD0u)) ^ *(_DWORD *)(v70
                                                                                              + 4
                                                                                              * (BYTE1(v105) ^ 0xF5u)) ^ 0xFB16C73F ^ (v48 >> 2);
  HIDWORD(v210) = v211 ^ HIDWORD(v212);
  int v107 = (v106 - ((2 * v106) & 0xCE6A6C96) - 415943093) ^ *(_DWORD *)(v74
                                                                    + 4
                                                                    * (((v211 ^ HIDWORD(v212)) >> 16) ^ 0x7Eu)) ^ v212 ^ 0x930000ED ^ BYTE1(v105);
  HIDWORD(v211) = v68;
  LODWORD(v213) = v99;
  LODWORD(v66) = v107 ^ v99;
  unsigned int v108 = v107 ^ v99 ^ v105;
  LODWORD(v72) = *(_DWORD *)(v72 + 4 * (HIBYTE(v108) ^ 0x63));
  LODWORD(v210) = v108 ^ 0x489E5305;
  HIDWORD(v48) = v72 ^ 2;
  LODWORD(v48) = v72 ^ 0xF97227DC;
  int v109 = *(_DWORD *)(v70 + 4 * (BYTE1(v108) ^ 0x2Du)) ^ *(_DWORD *)(v75 + 4
                                                                          * (~(_BYTE)v108 ^ 0xC4u)) ^ ((BYTE1(v108) ^ 0xD8) - ((2 * ((v108 >> 8) ^ 0x97AD8)) & 0x5E) + 358750255) ^ ((v48 >> 2) + *(_DWORD *)(v43 - 120) + (~(2 * (v48 >> 2)) | 0x231641DF));
  unsigned int v110 = (v109 - ((2 * v109) & 0xCE6A6C96) - 415943093) ^ *(_DWORD *)(v74
                                                                    + 4
                                                                    * (((v108 ^ 0x2745D0FF) >> 16) ^ 0x16u));
  int v111 = (char *)*(&off_10018D100 + v44 - 819) - 8;
  int v112 = (char *)*(&off_10018D100 + (v44 ^ 0x38E)) - 12;
  int v113 = v112[*(unsigned __int8 *)(v43 - 109) ^ 0xA5];
  HIDWORD(v48) = v113 ^ 0xE;
  LODWORD(v48) = (v113 ^ 0x40) << 24;
  int v114 = (char *)*(&off_10018D100 + v44 - 939) - 12;
  uint64_t v115 = (uint64_t)*(&off_10018D100 + (int)(v44 & 0x8696E88E));
  unsigned int v208 = v112;
  int v209 = v111;
  uint64_t v206 = v115;
  int v207 = v114;
  LODWORD(v46) = (((((v48 >> 30) ^ 0xDB) >> 2) | (((v48 >> 30) ^ 0xDB) << 6)) | ((v114[*(unsigned __int8 *)(v43 - 111) ^ 0x7ALL] ^ 0x91) << 16) | ((*(unsigned __int8 *)(v115 + (*(unsigned __int8 *)(v43 - 112) ^ 0x78)) ^ 0x59) << 24) | (((v111[*(unsigned __int8 *)(v43 - 110) ^ 0x5DLL] + (*(unsigned char *)(v43 - 110) ^ 0x52) + 105) ^ 0x5D) << 8)) ^ 0xF6F6CD80;
  LODWORD(v70) = ((v112[*(unsigned __int8 *)(v43 - 101) ^ 0x60] ^ 0x85) & 0xFFFF00FF | ((v114[*(unsigned __int8 *)(v43 - 103) ^ 5] ^ 0xC0) << 16) | (((v111[*(unsigned __int8 *)(v43 - 102) ^ 4] + (*(unsigned char *)(v43 - 102) ^ 0xB) + 105) ^ 0x33) << 8) | ((*(unsigned __int8 *)(v115 + (*(unsigned __int8 *)(v43 - 104) ^ 0x1CLL)) ^ 0xAC) << 24)) ^ 0xE55DB34;
  unsigned int v116 = ((v112[*(unsigned __int8 *)(v43 - 105) ^ 0x28] ^ 0x44) & 0xFFFF00FF | ((((*(unsigned char *)(v43 - 106) ^ 0xAC) + v111[*(unsigned __int8 *)(v43 - 106) ^ 0xA3] + 105) ^ 0xF6) << 8) | ((*(unsigned __int8 *)(v115 + (*(unsigned __int8 *)(v43 - 108) ^ 0xB2)) ^ 0x5B) << 24) | ((v114[*(unsigned __int8 *)(v43 - 107) ^ 0x27] ^ 0xA4) << 16)) ^ 0x8ED954AB;
  LODWORD(v111) = ((v112[*(unsigned __int8 *)(v43 - 97) ^ 0x7BLL] ^ 0x31) & 0xFFFF00FF | ((((*(unsigned char *)(v43 - 98) ^ 0xD0) + v111[*(unsigned __int8 *)(v43 - 98) ^ 0xDFLL] + 105) ^ 0xE4) << 8) | ((v114[*(unsigned __int8 *)(v43 - 99) ^ 0xAALL] ^ 0xF2) << 16) | ((*(unsigned __int8 *)(v115 + (*(unsigned __int8 *)(v43 - 100) ^ 0x45)) ^ 0x63) << 24)) ^ 0xB93F03A;
  int v117 = (v68 ^ 0x8D06EA22) - 2 * ((v68 ^ 0x8D06EA22) & 0x5CF9D97 ^ v68 & 5) - 2049991278;
  LODWORD(v68) = v110 - ((2 * v110) & 0xB9F3B24) - 2049991278;
  HIDWORD(v204) = v45 ^ 0x8A4;
  LODWORD(v204) = v45 ^ 0x87B;
  HIDWORD(v203) = v45 ^ 0x8AB;
  LODWORD(v203) = v107 ^ 0x85CF9D92 ^ v117;
  HIDWORD(v205) = v107 ^ 0x85CF9D92;
  LODWORD(v202) = v68 ^ v107 ^ 0x85CF9D92;
  HIDWORD(v202) = v45 ^ 0x896;
  HIDWORD(v201) = v45 ^ 0x884;
  LODWORD(v201) = v45 ^ 0x8AD;
  HIDWORD(v200) = v45 ^ 0x876;
  *(_DWORD *)(v43 - 120) = v45;
  LODWORD(v200) = v45 ^ 0x855;
  HIDWORD(a16) = v66 ^ 0x452FF2BF;
  LODWORD(v205) = v117 ^ 0x3DC8BA5D ^ v68;
  HIDWORD(a4) = v205 ^ v66 ^ 0x452FF2BF;
  *(void *)(v43 - 200) = 7;
  LOBYTE(v68) = a1[7];
  *(void *)(v43 - 168) = 12;
  LODWORD(v68) = v112[(55 * (v45 ^ 0x32)) ^ 0x52 ^ v68];
  uint64_t v118 = a1[12] ^ 0x60;
  *(void *)(v43 - 160) = 8;
  *(void *)(v43 - 128) = 1;
  LODWORD(v118) = *(unsigned __int8 *)(v115 + v118) ^ 0xD8;
  int v119 = *(unsigned __int8 *)(v115 + (a1[8] ^ 0xC1)) ^ 0x6C;
  LODWORD(v69) = v114[a1[1] ^ 0x66] ^ 0x7D;
  *(void *)(v43 - 136) = 15;
  LODWORD(v66) = v69 << 16;
  uint64_t v120 = a1[15] ^ 0xE9;
  *(void *)(v43 - 152) = 11;
  LODWORD(v120) = v112[v120] ^ 0x93;
  int v121 = v112[a1[11] ^ 0xC3];
  *(void *)(v43 - 176) = 0;
  LODWORD(v115) = v120 | (v118 << 24);
  LODWORD(v118) = v66 | ((*(unsigned __int8 *)(v206 + (*a1 ^ 0x30)) ^ 0xE8) << 24);
  LODWORD(v66) = v121 ^ 0x59;
  *(void *)(v43 - 144) = 2;
  LOBYTE(v121) = (v209[a1[2] ^ 0xC0] + (a1[2] ^ 0xCF) + 105) ^ 0xF9;
  *(void *)(v43 - 216) = 4;
  int v122 = *(unsigned __int8 *)(v206 + (a1[4] ^ 0xFCLL)) ^ 0x56;
  *(void *)(v43 - 224) = 9;
  LODWORD(v112) = v114[a1[9] ^ 0x5DLL] ^ 0xAE;
  *(void *)(v43 - 192) = 10;
  int v123 = (v112 << 16) | (((v209[a1[10] ^ 0xD5] + (a1[10] ^ 0xDA) + 105) ^ 0xCF) << 8) | v66 | (v119 << 24);
  *(void *)(v43 - 184) = 14;
  int v124 = (v209[a1[14] ^ 0xE4] + (a1[14] ^ 0xEB) - 23) << 8;
  *(void *)(v43 - 232) = 3;
  *(_DWORD *)(v43 - 208) = 741208253;
  *(_DWORD *)(v43 - 204) = 741208248;
  *(void *)(v43 - 248) = 13;
  int v125 = v124 | ((v114[a1[13] ^ 0x92] ^ 0x93) << 16);
  int v126 = v208[a1[3] ^ 0xDCLL] ^ 0x87;
  *(void *)(v43 - 256) = 6;
  LODWORD(v66) = v123 - 2 * (v123 & 0x37EC628F ^ v66 & 2);
  LOBYTE(v123) = v209[a1[6] ^ 0x4FLL] + (a1[6] ^ 0x40);
  *(void *)(v43 - 240) = 5;
  int v127 = ((v114[a1[5] ^ 0xA9] ^ 0x40) << 16) | (((v123 + 105) ^ 0xB7) << 8) | v68 ^ 0x43 | (v122 << 24);
  unsigned int v128 = v46 ^ v228 ^ ((v126 | v118 & 0xFFFF00FF | (v121 << 8))
                     + 1330607289
                     - 2 * ((v126 & 0x4F4F74BD | v118 & 0x4F4F00BD | (v121 << 8) & 0x74BD) ^ v126 & 4));
  unsigned int v129 = v116 ^ v229 ^ (v127 + 929099026 - 2 * (v127 & 0x3760ED16 ^ (v68 ^ 0x43) & 4));
  LODWORD(v120) = v111 ^ v227 ^ ((v125 | v115)
                                             - 2 * ((v125 | v115) & 0x322A4993 ^ v120 & 0x10)
                                             - 1305851517);
  unsigned int v130 = v70 ^ v60 ^ (v66 - 1209245043);
  int v131 = (char *)*(&off_10018D100 + (v45 ^ 0x8AB)) - 8;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v130) ^ 0x3F)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  unsigned int v132 = (char *)*(&off_10018D100 + (v45 ^ 0x8A4)) - 8;
  LODWORD(v118) = (v48 >> 1) ^ *(_DWORD *)&v132[4 * (BYTE2(v120) ^ 0x34)] ^ ((BYTE2(v120) ^ 0x68)
                                                                           - 873784370
                                                                           - 2
                                                                           * ((WORD1(v120) ^ 0xB768) & 0xDF ^ WORD1(v120) & 0x11));
  int v133 = (char *)*(&off_10018D100 + (v45 ^ 0x87B)) - 4;
  LODWORD(v112) = *(_DWORD *)&v133[4 * (v130 ^ 0xC6)] ^ ((BYTE2(v128) ^ 0xD5)
                                                                        - 873784370
                                                                        - ((2 * (HIWORD(v128) ^ 0x6CD5)) & 0x19C)) ^ *(_DWORD *)&v132[4 * (BYTE2(v128) ^ 0x89)] ^ ((v130 ^ 0xAB) + 414219232 + ((2 * (v130 ^ 0xAB) + 254) & 0x2C0 ^ 0xCDDEFFFF));
  LODWORD(v66) = *(_DWORD *)&v132[4 * (BYTE2(v129) ^ 0x8C)] ^ *(_DWORD *)&v133[4 * (v120 ^ 0xB6)] ^ ((v120 ^ 0xDB) + 414219232 + ((2 * (v120 ^ 0xDB) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ ((BYTE2(v129) ^ 0xD0) - 873784370 - ((2 * (HIWORD(v129) ^ 0xC8D0)) & 0x19C));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v129) ^ 0xC8)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v134 = ((BYTE2(v130) ^ 0xAD) - 873784370 - ((2 * (HIWORD(v130) ^ 0x3FAD)) & 0x19C)) ^ *(_DWORD *)&v133[4 * (v128 ^ 0x1C)] ^ ((v128 ^ 0x71) + 414219232 + ((2 * (v128 ^ 0x71) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ (v48 >> 1) ^ *(_DWORD *)&v132[4 * (BYTE2(v130) ^ 0xF1)];
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v128) ^ 0x6C)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v115) = v48 >> 1;
  unsigned int v135 = (v129 ^ 0x10) + 414219232 + ((2 * (v129 ^ 0x10) + 254) & 0x2C0 ^ 0xCDDEFFFF);
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v120) ^ 0xB7)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  uint64_t v136 = (uint64_t)*(&off_10018D100 + *(_DWORD *)(v43 - 120) - 2035);
  LODWORD(v118) = *(_DWORD *)(v136 + 4 * (BYTE1(v128) ^ 0xDEu)) ^ v60 ^ 0xE6 ^ v225 ^ *(_DWORD *)&v133[4 * (v129 ^ 0x7D)] ^ (v118 + 432970823 - ((2 * v118) & 0x339D388E));
  int v137 = *(_DWORD *)(v136 + 4 * (BYTE1(v129) ^ 0x2Fu)) ^ (v48 >> 1);
  int v138 = *(_DWORD *)(v136 + 4 * (BYTE1(v130) ^ 0x29u));
  LODWORD(v112) = (v112 + 432970823 - ((2 * v112) & 0x339D388E)) ^ v137;
  int v139 = *(_DWORD *)(v136 + 4 * (BYTE1(v120) ^ 0x66u));
  int v140 = v112 - ((2 * v112) & 0x5046120E);
  LOWORD(v137) = v118 ^ v135;
  LODWORD(v120) = v138 ^ v226 ^ v115 ^ (v66 + 432970823 - ((2 * v66) & 0x339D388E));
  LODWORD(v115) = v139 ^ v225 ^ (v134 + 432970823 - ((2 * v134) & 0x339D388E));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * ((v118 ^ ~v135) >> 24)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v66) = v48 >> 1;
  int v141 = (v139 ^ v225 ^ (v134 + 71 - ((2 * v134) & 0x8E)));
  LODWORD(v118) = ((v118 ^ v135) >> 16) ^ 0xFF49;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v120) ^ 0x91)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v142 = v48 >> 1;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v115) ^ 0xA3)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v68) = v142 ^ *(_DWORD *)&v132[4 * (BYTE2(v115) ^ 0xF0)] ^ ((BYTE2(v115) ^ 0xAC)
                                                                    - 873784370
                                                                    - ((2 * (WORD1(v115) ^ 0xA3AC)) & 0x19C));
  LODWORD(v118) = (v48 >> 1) ^ *(_DWORD *)&v133[4 * (v120 ^ 0x7B)] ^ (v118
                                                                                     - 873784370
                                                                                     - ((2 * v118) & 0x19C)) ^ *(_DWORD *)&v132[4 * (v118 ^ 0x5C)] ^ ((v120 ^ 0x16) + 414219232 + ((2 * (v120 ^ 0x16) + 254) & 0x2C0 ^ 0xCDDEFFFF));
  int v143 = v118 + 432970823 - ((2 * v118) & 0x339D388E);
  LODWORD(v118) = (v140 + 673384711) ^ HIDWORD(v224);
  LODWORD(v68) = (v68 + 432970823 - ((2 * v68) & 0x339D388E)) ^ *(_DWORD *)(v136 + 4 * (BYTE1(v137) ^ 0x2Cu));
  LODWORD(v66) = v66 ^ *(_DWORD *)&v133[4 * (v141 ^ 3)] ^ ((v141 ^ 0x6E)
                                                         + 414219232
                                                         + ((2 * (v141 ^ 0x6E) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)&v132[4 * (BYTE2(v118) ^ 0x46)] ^ ((BYTE2(v118) ^ 0x1A) - 873784370 - ((2 * (WORD1(v118) ^ 0x461A)) & 0x19C));
  LODWORD(v112) = *(_DWORD *)&v132[4 * (BYTE2(v120) ^ 0x2E)] ^ ((BYTE2(v120) ^ 0x72)
                                                              - 873784370
                                                              - ((2 * (WORD1(v120) ^ 0x9172)) & 0x19C));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v118) ^ 0x46)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v112) = ((v137 ^ 0xFC)
                 + 414219232
                 + ((2 * (v137 ^ 0xFC) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)(v136
                                                                                                  + 4 * (BYTE1(v115) ^ 0xBDu)) ^ *(_DWORD *)&v133[4 * (v137 ^ 0x91)] ^ (v112 + 432970823 - ((2 * v112) & 0x339D388E)) ^ (v48 >> 1);
  LODWORD(v115) = ((((v140 + 7) ^ BYTE4(v224)) ^ 0x4A) - 1726037377) ^ v224 ^ *(_DWORD *)&v133[4 * (((v140 + 7) ^ BYTE4(v224)) ^ 0x27)] ^ (v68 + 2140256608 - ((2 * v68) & 0xFF2372C0));
  LODWORD(v120) = *(_DWORD *)(v136 + 4 * (BYTE1(v120) ^ 0x57u)) ^ HIDWORD(v221) ^ (v66
                                                                                   + 432970823
                                                                                   - ((2 * v66) & 0x339D388E));
  unsigned int v144 = (v112 - ((2 * v112) & 0xA6D3EF52) + 1399453609) ^ v223;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v144) ^ 0xBE)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  unsigned int v145 = *(_DWORD *)(v136 + 4 * (BYTE1(v118) ^ 0x92u)) ^ HIDWORD(v223) ^ v143;
  LODWORD(v68) = (*(unsigned char *)(v136 + 4 * (BYTE1(v118) ^ 0x92u)) ^ BYTE4(v223) ^ v143);
  LODWORD(v68) = ((v68 ^ 0xA1) + 414219232 + ((2 * (v68 ^ 0xA1) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)&v133[4 * (v68 ^ 0xCC)];
  LODWORD(v118) = *(_DWORD *)&v132[4 * (BYTE2(v115) ^ 0xDB)] ^ ((BYTE2(v115) ^ 0x87)
                                                              - 873784370
                                                              - ((2 * (WORD1(v115) ^ 0x3A87)) & 0x19C)) ^ (v48 >> 1);
  LODWORD(v68) = (v68 + 432970823 - ((2 * v68) & 0x339D388E)) ^ *(_DWORD *)(v136 + 4 * (BYTE1(v115) ^ 0xDEu));
  LODWORD(v66) = ((v115 ^ 0x9E)
                + 414219232
                + ((2 * (v115 ^ 0x9E) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)&v133[4 * (v115 ^ 0xF3)];
  LODWORD(v118) = (v118 + 432970823 - ((2 * v118) & 0x339D388E)) ^ *(_DWORD *)(v136 + 4 * (BYTE1(v145) ^ 0x57u));
  unsigned int v146 = (WORD1(v120) ^ 0x740C) & 0xDF ^ WORD1(v120) & 0x11;
  LODWORD(v112) = BYTE2(v120) ^ 0xC;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v120) ^ 0x37)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v147 = v48 >> 1;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v115) ^ 0x3A)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v115) = BYTE2(v145) ^ *(_DWORD *)&v132[4 * (BYTE2(v145) ^ 0xF6)] ^ *(_DWORD *)(v136
                                                                                       + 4 * (BYTE1(v120) ^ 0xBCu)) ^ 0xD2258723 ^ (v48 >> 1);
  LODWORD(v115) = ((v144 ^ 0xB9) - 1726037377) ^ HIDWORD(v222) ^ *(_DWORD *)&v133[4
                                                                                                 * (v144 ^ 0xD4)] ^ (v115 + 2140256608 - ((2 * v115) & 0xFF2372C0));
  LODWORD(v120) = ((v120 ^ 0x3A) - 1726037377) ^ HIDWORD(v220) ^ *(_DWORD *)&v133[4
                                                                                                 * (v120 ^ 0x57)] ^ (v118 + 2140256608 - ((2 * v118) & 0xFF2372C0));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v145) ^ 0x7C)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  unsigned int v148 = *(_DWORD *)&v132[4 * (BYTE2(v144) ^ 0xEF)] ^ v221 ^ BYTE2(v144) ^ v147 ^ (v68
                                                                                 - 873784370
                                                                                 - ((2 * v68) & 0x97D6379C));
  unsigned int v149 = *(_DWORD *)(v136 + 4 * (BYTE1(v144) ^ 0x17u)) ^ v222 ^ (v112 - 873784370 - 2 * v146) ^ *(_DWORD *)&v132[4 * (v112 ^ 0x5C)] ^ (v66 + 432970823 - ((2 * v66) & 0x339D388E)) ^ (v48 >> 1);
  LODWORD(v66) = ((v148 ^ 0x70)
                + 414219232
                + ((2 * (v148 ^ 0x70) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)&v133[4 * (v148 ^ 0x1D)];
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v115) ^ 0x5B)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v230 = v66 + 432970824 + ~((2 * v66) & 0x339D388E);
  LODWORD(v68) = (v48 >> 1) ^ *(_DWORD *)&v133[4 * (v120 ^ 0x1F)] ^ ((v120 ^ 0x72)
                                                                                    + 414219232
                                                                                    + ((2
                                                                                      * (v120 ^ 0x72)
                                                                                      + 254) & 0x2C0 ^ 0xCDDEFFFF));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v120) ^ 0x28)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v150 = v48 >> 1;
  LODWORD(v114) = v68 + 432970823 - ((2 * v68) & 0x339D388E);
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v148) ^ 0xB9)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v68) = v48 >> 1;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v149) ^ 0xB4)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v68) = v68 ^ *(_DWORD *)&v133[4 * (v149 ^ 0x8B)] ^ ((v149 ^ 0xE6)
                                                                             + 414219232
                                                                             + ((2 * (v149 ^ 0xE6) + 254) & 0x2C0 ^ 0xCDDEFFFF));
  int v151 = BYTE2(v115) ^ 0x95;
  LODWORD(v56) = v151 - 873784370 - ((2 * (WORD1(v115) ^ 0x5B95)) & 0x19C);
  int v152 = v115;
  LODWORD(v75) = (v115 ^ 0xF4)
               + 414219232
               + ((2 * (v115 ^ 0xF4) + 254) & 0x2C0 ^ 0xCDDEFFFF);
  LODWORD(v115) = ((BYTE2(v120) ^ 0x14) - 873784370 - 2 * ((WORD1(v120) ^ 0x2814) & 0xCF ^ WORD1(v120) & 1)) ^ v219 ^ *(_DWORD *)(v136 + 4 * (BYTE1(v115) ^ 0x1Fu)) ^ (v68 + 432970823 - ((2 * v68) & 0x339D388E)) ^ *(_DWORD *)&v132[4 * (BYTE2(v120) ^ 0x48)];
  int v153 = BYTE2(v148) ^ 0x64;
  LODWORD(v68) = v153 - 873784370 - ((2 * (HIWORD(v148) ^ 0xFA64)) & 0x19C);
  unsigned int v154 = *(_DWORD *)(v136 + 4 * (BYTE1(v148) ^ 0xA5u)) ^ v86 ^ ((BYTE2(v149) ^ 0x59)
                                                                - 873784370
                                                                - ((2 * (HIWORD(v149) ^ 0xB459)) & 0x19C)) ^ *(_DWORD *)&v132[4 * (BYTE2(v149) ^ 5)] ^ v114;
  LODWORD(v66) = *(_DWORD *)(v136 + 4 * (BYTE1(v149) ^ 0x34u));
  unsigned int v155 = v68 ^ HIDWORD(v219) ^ *(_DWORD *)&v133[4 * (v152 ^ 0x99)] ^ v75 ^ ((v48 >> 1)
                                                                          + 432970823
                                                                          - ((2 * (v48 >> 1)) & 0x339D388E)) ^ *(_DWORD *)&v132[4 * (v153 ^ 0x5C)] ^ *(_DWORD *)(v136 + 4 * (BYTE1(v120) ^ 0x12u));
  LODWORD(v120) = v66 ^ HIDWORD(v218) ^ v56 ^ *(_DWORD *)&v132[4 * (v151 ^ 0x5C)] ^ v230 ^ v150;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v120) ^ 0xEB)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v156 = (v48 >> 1) + 432970823 - ((2 * (v48 >> 1)) & 0x339D388E);
  LODWORD(v68) = ((BYTE2(v155) ^ 0x81) - 873784370 - ((2 * (HIWORD(v155) ^ 0x1481)) & 0x19C)) ^ *(_DWORD *)&v132[4 * (BYTE2(v155) ^ 0xDD)];
  unsigned int v157 = ((v155 ^ 0x51) + 414219232 + ((2 * (v155 ^ 0x51) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)&v133[4 * (v155 ^ 0x3C)];
  LODWORD(v112) = *(_DWORD *)&v132[4 * (BYTE2(v115) ^ 0xDB)] ^ ((BYTE2(v115) ^ 0x87)
                                                              - 873784370
                                                              - ((2 * (WORD1(v115) ^ 0x7787)) & 0x19C));
  LODWORD(v66) = *(_DWORD *)&v132[4 * (((v120 ^ 0xA87CE98B) >> 16) ^ 0x5C)] ^ ((v120 ^ 0xA87CE98B) >> 16) ^ (v157 - 873784370 - ((2 * v157) & 0x97D6379C));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v155) ^ 0x14)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v158 = v48 >> 1;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v154) ^ 0x9A)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v68) = ((~(2 * (v120 ^ 0x8B) + 842892542) | 0xCDDEFD3F)
                + (v120 ^ 0x8B)
                + 414219232) ^ *(_DWORD *)(v136 + 4 * (BYTE1(v115) ^ 0xDEu)) ^ *(_DWORD *)&v133[4
                                                                                                * (v120 ^ 0xE6)] ^ (v68 + 432970824 + ~((2 * v68) & 0x339D388E)) ^ (v48 >> 1);
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v115) ^ 0x77)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  unsigned int v159 = *(_DWORD *)(v136 + 4 * (BYTE1(v155) ^ 0x34u)) ^ v217 ^ ((BYTE2(v154) ^ 0xE9)
                                                                 - 873784370
                                                                 - ((2 * (HIWORD(v154) ^ 0x9AE9)) & 0x19C)) ^ *(_DWORD *)&v132[4 * (BYTE2(v154) ^ 0xB5)] ^ ((v115 ^ 0x9E) + 414219232 + ((2 * (v115 ^ 0x9E) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ v156 ^ *(_DWORD *)&v133[4 * (v115 ^ 0xF3)];
  LODWORD(v120) = *(_DWORD *)(v136 + 4 * (BYTE1(v120) ^ 0xBu)) ^ HIDWORD(v216) ^ ((v154 ^ 0xA8)
                                                                                  + 414219232
                                                                                  + ((2 * (v154 ^ 0xA8)
                                                                                    + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)&v133[4 * (v154 ^ 0xC5)] ^ v158 ^ (v112 + 432970823 - ((2 * v112) & 0x339D388E));
  unsigned int v160 = *(_DWORD *)(v136 + 4 * (BYTE1(v154) ^ 0x2Du)) ^ HIDWORD(v217) ^ (v48 >> 1) ^ (v66
                                                                                       + 432970823
                                                                                       - ((2 * v66) & 0x339D388E));
  LODWORD(v115) = (v68 + 1207364570 - ((2 * v68) & 0x8FEDD7B4)) ^ v218;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v120) ^ 0x6D)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v66) = v48 >> 1;
  unsigned int v161 = *(_DWORD *)&v131[4 * (BYTE3(v115) ^ 0xFD)];
  LODWORD(v68) = *(_DWORD *)&v132[4 * (BYTE2(v120) ^ 0x52)] ^ (v161 << 31) ^ (v161 >> 1) ^ ((BYTE2(v120) ^ 0xE)
                                                                                          - 873784370
                                                                                          - ((2 * (WORD1(v120) ^ 0x2E0E)) & 0x19C));
  LODWORD(v118) = ((v120 ^ 0x4A)
                 + 414219232
                 + ((2 * (v120 ^ 0x4A) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)&v133[4 * (v120 ^ 0x27)];
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v160) ^ 0xAE)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v118) = (v48 >> 1) ^ *(_DWORD *)(v136 + 4 * (BYTE1(v115) ^ 0xA4u)) ^ (v118
                                                                                + 432970823
                                                                                - ((2 * v118) & 0x339D388E));
  int v162 = BYTE2(v159) ^ *(_DWORD *)&v132[4 * (BYTE2(v159) ^ 0x4A)] ^ 0x16 ^ (v118 - 873784370 - ((2 * v118) & 0x97D6379C));
  LODWORD(v66) = *(_DWORD *)&v132[4 * (BYTE2(v160) ^ 0x3A)] ^ v66 ^ *(_DWORD *)&v133[4 * (v115 ^ 0x4D)] ^ ((v115 ^ 0x20) + 414219232 + ((2 * (v115 ^ 0x20) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ ((BYTE2(v160) ^ 0x66) - 873784370 - 2 * ((HIWORD(v160) ^ 0xAE66) & 0xDE ^ HIWORD(v160) & 0x10));
  LODWORD(v68) = ((v159 ^ 2)
                + 414219232
                + ((2 * (v159 ^ 2) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)(v136
                                                                                              + 4
                                                                                              * (BYTE1(v160) ^ 0x7Cu)) ^ *(_DWORD *)&v133[4 * (v159 ^ 0x6F)] ^ ((v68 ^ 0x31475149) + 432970823 - 2 * ((v68 ^ 0x31475149) & 0x19CE9C57 ^ v68 & 0x10));
  LODWORD(v118) = ((v160 ^ 0xB3)
                 - 1293066553
                 + ((2 * (v160 ^ 0xB3) + 254) & 0x8E ^ 0xCDE2FFFF)) ^ *(_DWORD *)(v136
                                                                                                 + 4
                                                                                                 * (BYTE1(v120) ^ 0x65u));
  LODWORD(v118) = (v118 + 2140256608 - ((2 * v118) & 0xFF2372C0)) ^ *(_DWORD *)&v133[4 * (v160 ^ 0xDE)];
  unsigned int v163 = *(_DWORD *)&v132[4 * (BYTE2(v115) ^ 0x40)] ^ ((BYTE2(v115) ^ 0x1C)
                                                     - 873784370
                                                     - ((2 * (WORD1(v115) ^ 0xFD1C)) & 0x19C));
  LODWORD(v120) = v163 ^ 0x93B8A0D8 ^ (v118 - 794458101 - ((2 * v118) & 0xA14B1016));
  LODWORD(v118) = v118 ^ 0x6500C283;
  LODWORD(v120) = (v118 + v120 + 1) ^ ((v163 ^ 0x261DEA50) + 1);
  LODWORD(v118) = (v163 ^ 0x9479DA4 ^ (v120 - 794458101 - ((2 * v120) & 0xA14B1016))) + v118;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v159) ^ 0x3F)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v120) = (v162 - 879681594 - ((2 * v162) & 0x97223F8C)) ^ HIDWORD(v214);
  int v164 = (v118 ^ (v48 >> 1)) - ((2 * (v118 ^ (v48 >> 1))) & 0x4D10C9D2);
  unsigned int v165 = *(_DWORD *)(v136 + 4 * (BYTE1(v159) ^ 0xCBu)) ^ HIDWORD(v215) ^ (v66 + 432970823 - ((2 * v66) & 0x339D388E));
  unsigned int v166 = (v68 - 2009147463 - ((2 * v68) & 0x107DAF72)) ^ v216;
  LODWORD(v68) = ((BYTE2(v166) ^ 0xE9) - 873784370 - 2 * ((HIWORD(v166) ^ 0xB8E9) & 0xDE ^ HIWORD(v166) & 0x10)) ^ *(_DWORD *)&v132[4 * (BYTE2(v166) ^ 0xB5)];
  LODWORD(v115) = v68 + 432970823 - ((2 * v68) & 0x339D388E);
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v120) ^ 0x9D)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v112) = v48 >> 1;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v165) ^ 0x61)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v68) = *(_DWORD *)&v133[4 * (v166 ^ 0xC5)] ^ *(_DWORD *)&v132[4 * (BYTE2(v120) ^ 0x28)] ^ (v48 >> 1) ^ ((v166 ^ 0xA8) + 414219232 + ((2 * (v166 ^ 0xA8) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ ((BYTE2(v120) ^ 0x74) - 873784370 - ((2 * (WORD1(v120) ^ 0x9D74)) & 0x19C));
  LODWORD(v118) = (v164 + 646472937) ^ v215;
  unsigned int v167 = v112 ^ ((BYTE2(v118) ^ 0x9B) - 873784370 - ((2 * (WORD1(v118) ^ 0x709B)) & 0x19C)) ^ *(_DWORD *)&v132[4 * (BYTE2(v118) ^ 0xC7)];
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v166) ^ 0xB8)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v112) = ((BYTE2(v165) ^ 8) - 873784370 - ((2 * (HIWORD(v165) ^ 0x6108)) & 0x19C)) ^ *(_DWORD *)&v132[4 * (BYTE2(v165) ^ 0x54)] ^ (v48 >> 1) ^ *(_DWORD *)&v133[4 * (((v164 - 23) ^ v215) ^ 0x48)] ^ ((((v164 - 23) ^ v215) ^ 0x25) + 414219232 + ((2 * (((v164 - 23) ^ v215) ^ 0x25) + 254) & 0x2C0 ^ 0xCDDEFFFF));
  unsigned int v168 = *(_DWORD *)(v136 + 4 * (BYTE1(v118) ^ 0x30u)) ^ HIDWORD(v213) ^ (v68 + 432970823 - ((2 * v68) & 0x339D388E));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v118) ^ 0x70)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v118) = (v112 + 432970823 - ((2 * v112) & 0x339D388E)) ^ *(_DWORD *)(v136
                                                                                             + 4
                                                                                             * (BYTE1(v120) ^ 0xBDu));
  LODWORD(v66) = *(_DWORD *)&v133[4 * (v120 ^ 0xB4)] ^ *(_DWORD *)(v136 + 4 * (BYTE1(v165) ^ 0x8Fu)) ^ ((v120 ^ 0xD9) + 414219232 + ((2 * (v120 ^ 0xD9) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ v115;
  int v169 = *(_DWORD *)(v136 + 4 * (BYTE1(v166) ^ 0x2Du));
  unsigned int v170 = (v118 + 324075350 - ((2 * v118) & 0x26A1FEAC)) ^ v214;
  LODWORD(v115) = ((v66 ^ (v48 >> 1)) - ((2 * (v66 ^ (v48 >> 1))) & 0x33E5B526) + 435346067) ^ HIDWORD(v212);
  unsigned int v171 = ((v165 ^ 0x85) + 414219232 + ((2 * (v165 ^ 0x85) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ v213 ^ *(_DWORD *)&v133[4 * (v165 ^ 0xE8)] ^ v169 ^ (v167 + 432970823 - ((2 * v167) & 0x339D388E));
  LODWORD(v66) = ((BYTE2(v171) ^ 0x66) - 873784370 - ((2 * (HIWORD(v171) ^ 0xAE66)) & 0x19C)) ^ *(_DWORD *)&v132[4 * (BYTE2(v171) ^ 0x3A)];
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v115) ^ 0x26)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v172 = ((v48 >> 1) - 873784370 - ((2 * (v48 >> 1)) & 0x97D6379C)) ^ *(_DWORD *)&v132[4 * (BYTE2(v170) ^ 0x40)];
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v170) ^ 0xEF)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v68) = (v48 >> 1) ^ *(_DWORD *)&v133[4 * (v115 ^ 0xFC)] ^ ((v115 ^ 0x91)
                                                                                    + 414219232
                                                                                    + ((2
                                                                                      * (v115 ^ 0x91)
                                                                                      + 254) & 0x2C0 ^ 0xCDDEFFFF));
  int v173 = v66 + 432970823 - ((2 * v66) & 0x339D388E);
  LODWORD(v66) = ((v118 + 86 - ((2 * v118) & 0xAC)) ^ v214);
  unsigned int v174 = ((v168 ^ 0x4A) + 414219232 + ((2 * (v168 ^ 0x4A) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)&v133[4 * (v168 ^ 0x27)];
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v171) ^ 0xAE)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v175 = (v48 >> 1) ^ *(_DWORD *)&v132[4 * (BYTE2(v115) ^ 0xB8)] ^ (v174 - 873784370 - ((2 * v174) & 0x97D6379C));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v168) ^ 0xDC)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v120) = ((BYTE2(v168) ^ 0xE) - 873784370 - 2 * ((HIWORD(v168) ^ 0xDC0E) & 0xDE ^ HIWORD(v168) & 0x10)) ^ v212 ^ *(_DWORD *)&v132[4 * (BYTE2(v168) ^ 0x52)] ^ *(_DWORD *)(v136 + 4 * (BYTE1(v171) ^ 0x7Cu)) ^ (v68 + 432970823 - ((2 * v68) & 0x339D388E));
  LODWORD(v68) = v171;
  LODWORD(v112) = (v171 ^ 0xB3)
                + 414219232
                + ((2 * (v171 ^ 0xB3) + 254) & 0x2C0 ^ 0xCDDEFFFF);
  unsigned int v176 = *(_DWORD *)(v136 + 4 * (BYTE1(v115) ^ 0x11u)) ^ HIDWORD(v211) ^ *(_DWORD *)&v133[4
                                                                                          * (v66 ^ 0x4D)] ^ (v48 >> 1) ^ ((v66 ^ 0x20) + 414219232 + ((2 * (v66 ^ 0x20) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ v173;
  LODWORD(v66) = WORD1(v115);
  unsigned int v177 = (v172 + 432970823 - ((2 * v172) & 0x339D388E)) ^ v211 ^ HIDWORD(v212) ^ *(_DWORD *)(v136
                                                                                           + 4 * (BYTE1(v168) ^ 0x65u)) ^ *(_DWORD *)&v133[4 * (v68 ^ 0xDE)] ^ v112;
  LODWORD(v115) = *(_DWORD *)(v136
                            + 4
                            * (((unsigned __int16)((v118 - 170 - ((2 * v118) & 0xFEAC)) ^ v214) >> 8) ^ 0xA4u)) ^ v211 ^ (v175 + 432970823 - ((2 * v175) & 0x339D388E));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v177) ^ 0x6C)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v178 = v48 >> 1;
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v120) ^ 0xF7)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v179 = v48 >> 1;
  int v180 = ((BYTE2(v177) ^ 0xC8) - 873784370 - 2 * ((HIWORD(v177) ^ 0x6CC8) & 0xDE ^ HIWORD(v177) & 0x10)) ^ *(_DWORD *)&v132[4 * (BYTE2(v177) ^ 0x94)];
  int v181 = v180 + 432970823 - ((2 * v180) & 0x339D388E);
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (BYTE3(v115) ^ 0xE7)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  int v182 = v48 >> 1;
  LODWORD(v68) = v178 ^ *(_DWORD *)&v133[4 * ((v115 ^ v66) ^ 0xAF)] ^ *(_DWORD *)&v132[4 * (BYTE2(v120) ^ 0xB5)] ^ ((BYTE2(v120) ^ 0xE9) - 873784370 - 2 * ((WORD1(v120) ^ 0xF7E9) & 0xDE ^ WORD1(v120) & 0x10)) ^ (((v115 ^ v66) ^ 0xC2) + 414219232 + ((2 * ((v115 ^ v66) ^ 0xC2) + 254) & 0x2C0 ^ 0xCDDEFFFF));
  LODWORD(v68) = (v68 + 432970823 - ((2 * v68) & 0x339D388E)) ^ *(_DWORD *)(v136 + 4 * (BYTE1(v176) ^ 0xECu));
  LODWORD(v118) = v179 ^ *(_DWORD *)&v132[4 * (BYTE2(v176) ^ 0xA7)] ^ *(_DWORD *)&v133[4
                                                                                     * ((v177 ^ BYTE2(v170)) ^ 0x32)] ^ (((v177 ^ BYTE2(v170)) ^ 0x5F) + 414219232 + ((2 * ((v177 ^ BYTE2(v170)) ^ 0x5F) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ ((BYTE2(v176) ^ 0xFB) - 873784370 - ((2 * (HIWORD(v176) ^ 0x57FB)) & 0x19C));
  HIDWORD(v48) = *(_DWORD *)&v131[4 * (HIBYTE(v176) ^ 0x57)];
  LODWORD(v48) = HIDWORD(v48) ^ 0x628EA292;
  LODWORD(v118) = (v118 + 432970823 - ((2 * v118) & 0x339D388E)) ^ *(_DWORD *)(v136 + 4 * (BYTE1(v115) ^ 0x6Du));
  LODWORD(v112) = *(_DWORD *)(v136 + 4 * (BYTE1(v120) ^ 0x2Du));
  LODWORD(v66) = ((BYTE2(v115) ^ 0x31) - 873784370 - ((v115 >> 15) & 0x19C)) ^ *(_DWORD *)&v133[4 * (v120 ^ 0xC5)] ^ ((v120 ^ 0xA8) + 414219232 + ((2 * (v120 ^ 0xA8) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ *(_DWORD *)&v132[4 * (BYTE2(v115) ^ 0x6D)] ^ (v48 >> 1);
  LODWORD(v66) = v203 ^ *(_DWORD *)(v136 + 4 * (BYTE1(v177) ^ 0x61u)) ^ (v66 + 432970823 - ((2 * v66) & 0x339D388E));
  LODWORD(v131) = v66 ^ 0xADE748E2;
  LODWORD(v120) = (v118 - 2049991278 - ((2 * v118) & 0xB9F3B24)) ^ v107 ^ 0x85CF9D92;
  LODWORD(v132) = (v68 + 1105496955 - ((2 * v68) & 0x83C916F6)) ^ v210;
  unsigned int v183 = v112 ^ HIDWORD(a16) ^ v182 ^ *(_DWORD *)&v133[4 * (v176 ^ 0x42)] ^ ((v176 ^ 0x2F) + 414219232 + ((2 * (v176 ^ 0x2F) + 254) & 0x2C0 ^ 0xCDDEFFFF)) ^ v181;
  int v184 = *(_DWORD *)(v43 - 120);
  uint64_t v185 = (uint64_t)*(&off_10018D100 + v184 - 2021);
  uint64_t v186 = (uint64_t)*(&off_10018D100 + v184 - 2067);
  LODWORD(v112) = *(_DWORD *)(v185 + 4 * (v120 ^ 0xA2u));
  int v187 = (char *)*(&off_10018D100 + (v45 ^ 0x896)) - 4;
  LODWORD(v68) = (*(_DWORD *)&v187[4 * (BYTE2(v120) ^ 0x9E)] - 1504334713) ^ (*(_DWORD *)(v185
                                                                                        + 4
                                                                                        * (v183 ^ 0xC9u))
                                                                            + 1923432480);
  LODWORD(v75) = *(_DWORD *)(v185 + 4 * (v66 ^ 0xC8u));
  LODWORD(v133) = *(_DWORD *)(v185 + 4 * (v132 ^ 0xB9u));
  LODWORD(v115) = *(_DWORD *)(v186 + 4 * (BYTE3(v120) ^ 0xE7));
  LODWORD(v185) = *(_DWORD *)(v186 + 4 * (HIBYTE(v183) ^ 0xB8));
  LODWORD(v66) = (*(_DWORD *)&v187[4 * (BYTE2(v183) ^ 0x38)] - 1504334713) ^ (*(_DWORD *)(v186
                                                                                        + 4 * (BYTE3(v66) ^ 0x89))
                                                                            - 1541324812) ^ (v112 + 1923432480);
  int v188 = (char *)*(&off_10018D100 + v184 - 1959) - 8;
  LODWORD(v68) = (v68 + 341094746 - ((2 * v68) & 0x28A962B4)) ^ *(_DWORD *)&v188[4 * (BYTE1(v131) ^ 0x29)] ^ (*(_DWORD *)(v186 + 4 * ((v132 >> 24) ^ 0x65)) - 1541324812);
  uint64_t v189 = *(unsigned int *)&v188[4 * (BYTE1(v120) ^ 0xA0)];
  int v190 = *(_DWORD *)&v188[4 * (BYTE1(v183) ^ 0xE9)];
  LODWORD(v186) = *(_DWORD *)&v188[4 * (BYTE1(v132) ^ 0x74)];
  uint64_t v191 = *(unsigned int *)&v187[4 * (BYTE2(v131) ^ 0x6B)];
  LODWORD(v188) = *(_DWORD *)&v187[4 * (BYTE2(v132) ^ 0x1D)];
  unsigned int v192 = v186 ^ v205 ^ (v66 + 341094746 - ((2 * v66) & 0x28A962B4));
  unsigned int v193 = (char *)*(&off_10018D100 + (v45 ^ 0x884)) - 8;
  LODWORD(v131) = HIDWORD(a4) ^ v210 ^ (v68 + 1105496955 - ((2 * v68) & 0x83C916F6));
  a1[*(void *)(v43 - 256)] = v193[((unsigned __int16)(v186 ^ v205 ^ (v66
                                                                                      - 20134
                                                                                      - ((2 * v66) & 0x62B4))) >> 8) ^ 0x99] ^ 0x74;
  unsigned int v194 = (char *)*(&off_10018D100 + (v45 ^ 0x8AD)) - 12;
  a1[*(void *)(v43 - 248)] = (v194[BYTE2(v131) ^ 0xADLL] - 33) ^ 0xC5;
  LODWORD(v68) = v189 ^ HIDWORD(a4) ^ (v75 - ((2 * v75 + 625639488) & 0x28A962B4) - 2030440070) ^ (v185 - 1541324812) ^ (v188 - 1504334713);
  unsigned int v195 = (char *)*(&off_10018D100 + (v45 ^ 0x876)) - 8;
  a1[*(void *)(v43 - 200)] = v195[(v186 ^ v205 ^ (v66 + 90 - ((2 * v66) & 0xB4))) ^ 0xFCLL] ^ 0xEC;
  a1[*(void *)(v43 - 224)] = (v194[BYTE2(v68) ^ 0x8CLL] - 33) ^ 0x47;
  int v196 = (char *)*(&off_10018D100 + (v45 ^ 0x855)) - 12;
  a1[*(void *)(v43 - 216)] = (v196[HIBYTE(v192) ^ 0xDELL] - 50) ^ 0x1B;
  LODWORD(v185) = v194[BYTE2(v192) ^ 0x15];
  a1[*(void *)(v43 - 240)] = ((v185 + ((v185 - 33) ^ 0xDA) - 32) ^ 0xFE) + v185 - 33;
  unsigned int v197 = v202 ^ v190 ^ (v191 - 1504334713) ^ (v133 + 1923432480) ^ (v115
                                                                          - 2
                                                                          * ((v115 + 69287924) & 0x1454B15B ^ v115 & 1)
                                                                          - 1200230066);
  a1[*(void *)(v43 - 232)] = v195[v197 ^ 5] ^ 0x1E;
  a1[*(void *)(v43 - 168)] = (v196[(v131 >> 24) ^ 0x4ELL] - 50) ^ 0xE6;
  a1[*(void *)(v43 - 160)] = (v196[BYTE3(v68) ^ 0x9CLL] - 50) ^ 0xB8;
  uint64_t v198 = *(void *)(v43 - 176);
  a1[v198] = (v196[HIBYTE(v197) ^ 0x67] - 50) ^ 0x91;
  a1[*(void *)(v43 - 152)] = v195[v68 ^ 0xF2] ^ 0x14;
  a1[*(void *)(v43 - 192)] = v193[BYTE1(v68) ^ 0x1ELL] ^ 0xD7;
  a1[*(void *)(v43 - 144)] = v193[BYTE1(v197) ^ 0x33] ^ 0xCE;
  a1[*(void *)(v43 - 184)] = v193[BYTE1(v131) ^ 0xBCLL];
  a1[*(void *)(v43 - 136)] = v195[v131 ^ 0x9FLL] ^ 0xEC;
  a1[*(void *)(v43 - 128)] = (v194[BYTE2(v197) ^ 0xDLL] - 33) ^ 0x8E;
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(a39 + 8 * ((21 * (((v198 + 741208264 - 2 * ((v198 + 16) & *(_DWORD *)(v43 - 208) ^ *(_DWORD *)(v43 - 204) & 5)) ^ 0x2C2DF0B8u) >= a37)) ^ (v184 - 687))))(5, v202, (v185 - 33) ^ 0xDAu, 341094746, 21, 236, v189, v191, a2, a3, a4, a1, v200, v201, v202, v203, v204, v205, v206,
           v207,
           v208,
           v209,
           a16,
           v210,
           v211,
           v212,
           v213,
           v214,
           v215,
           v216,
           v217,
           v218,
           v219,
           v220,
           v221,
           v222,
           v223,
           v224);
}

uint64_t sub_100054988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v18 - 120) = a13;
  *(void *)(v18 - 136) = v17;
  *(_DWORD *)(v18 - 112) = (v16 + 605) ^ (((((v18 - 136) | 0x27D7B822) - (v18 - 136) + ((v18 - 136) & 0xD82847D8)) ^ 0xF475EA28)
                                        * v15);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v16 + 1886)))(v18 - 136);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * ((2311
                                              * (*(_DWORD *)(v18 - 128)
                                               + ((3 * (v16 ^ 0x166)) ^ (v13 + 1344)) < ((v16 - 278188730) & 0x1094D6EC ^ 0xF4E32CC3))) ^ v16)))(v19);
}

uint64_t sub_100054A5C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (LODWORD(STACK[0x298]) ^ (331
                                                        * ((LODWORD(STACK[0x2B8])
                                                                        - 278074005
                                                                        + ~(v0 + LODWORD(STACK[0x240]) - 136246100)) > 2)))))();
}

uint64_t sub_100054B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(v16 - 136) = (v15 - 642) ^ (268847287
                                        * ((((v16 - 136) ^ 0x7BD70B6 | 0xAD039F8D)
                                          - (((v16 - 136) ^ 0x7BD70B6) & 0xAD039F8D)) ^ 0x5514FE13));
  *(void *)(v16 - 128) = a12;
  *(void *)(v16 - 120) = v13;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v15 + 657)))(v16 - 136);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * (((v12 == (((v15 - 1736) | 0xE2) ^ 0x704CD4AB))
                                              * ((v15 - 1118582255) & 0x42AC2FFF ^ 0xC9)) ^ v15)))(v17);
}

uint64_t sub_100054BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  return (*(uint64_t (**)(void))(v12
                              + 8
                              * ((27
                                * ((a12 ^ 0xC3F7BDCF)
                                 + 2147209088
                                 + ((((v13 ^ 0x79F) + 939) ^ 0x87EF7E00) & (2 * a12))
                                 - 1140034897 < 0x7FFFFFFE)) ^ v13)))();
}

uint64_t sub_100054C50@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W4>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  *(_DWORD *)(v47 - 128) = v45 + 8;
  *(_DWORD *)(v47 - 136) = v45 + 7;
  v53.val[1].i64[0] = ((_BYTE)v45 + 14) & 0xF;
  v53.val[1].i64[1] = ((_BYTE)v45 + 13) & 0xF;
  v53.val[2].i64[0] = ((_BYTE)v45 + 12) & 0xF;
  v53.val[2].i64[1] = ((_BYTE)v45 + 11) & 0xF;
  v53.val[3].i64[0] = ((_BYTE)v45 + 10) & 0xF;
  v53.val[3].i64[1] = ((_BYTE)v45 + 9) & 0xF;
  v48.i64[0] = 0x7777777777777777;
  v48.i64[1] = 0x7777777777777777;
  uint64_t v49 = ((_BYTE)a3 + (_BYTE)a4 + (_BYTE)a2 + (_BYTE)a1 + 6) & 0xF;
  v53.val[0].i64[0] = v49;
  v53.val[0].i64[1] = ((_BYTE)v45 - 1) & 0xF;
  v50.i64[0] = vqtbl4q_s8(v53, (int8x16_t)xmmword_10016DED0).u64[0];
  v54.val[0].i64[1] = *(_DWORD *)(v47 - 136) & 0xF;
  v54.val[1].i64[1] = ((_BYTE)v45 + 5) & 0xF;
  v54.val[2].i64[1] = ((_BYTE)v45 + 3) & 0xF;
  v54.val[3].i64[1] = ((_BYTE)v45 + 1) & 0xF;
  v54.val[0].i64[0] = *(_DWORD *)(v47 - 128) & 0xF;
  v54.val[1].i64[0] = ((_BYTE)v45 + 6) & 0xF;
  v54.val[2].i64[0] = (v45 + 4) & 0xF;
  v54.val[3].i64[0] = ((_BYTE)v45 + 2) & 0xF;
  v50.i64[1] = vqtbl4q_s8(v54, (int8x16_t)xmmword_10016DED0).u64[0];
  int8x16_t v51 = vrev64q_s8(vmulq_s8(v50, v48));
  *(int8x16_t *)(a5 - 15 + a3 + a4 + a2 + a1 - 506) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v43 + v49 - 15), *(int8x16_t *)(a5 - 15 + a3 + a4 + a2 + a1 - 506)), veorq_s8(*(int8x16_t *)(v49 + v44 - 13), *(int8x16_t *)(v49 + v42 - 11))), vextq_s8(v51, v51, 8uLL));
  return (*(uint64_t (**)(void))(a42 + 8 * ((1879 * ((v46 & 0xFFFFFFF0) == 16)) ^ a4)))();
}

uint64_t sub_100054DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, unsigned int a19)
{
  if (a19 < 0xCED197C3 != (v19 + 2108383635) < 0xCED197C3) {
    BOOL v21 = (v19 + 2108383635) < 0xCED197C3;
  }
  else {
    BOOL v21 = v19 + 2108383635 > a19;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8 * ((v21 | (2 * v21)) ^ 0x3A4)))(a1, 2933508496);
}

uint64_t sub_100054E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100054E4C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100054E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  return sub_1000652BC(a3, a4, a5, a6, a8, (const char *)&STACK[0x28C], a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_100054E5C@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X5>, int a4@<W8>)
{
  *(int8x16_t *)(a3 + (((a4 + 519) + a1) & (v4 + 16))) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v9)), v8);
  return (*(uint64_t (**)(void))(v7 + 8 * (((v5 == 16) * a2) ^ a4)))();
}

void sub_100054E68(_DWORD *a1)
{
  unsigned int v1 = (*a1
      + 1224239923 * (((a1 | 0xA81C68C2) - a1 + (a1 & 0x57E3973D)) ^ 0x5AAF9515)
      - 405) | 0x800;
  __asm { BRAA            X3, X17 }
}

void sub_100055048(_DWORD *a1@<X8>)
{
  *a1 = v2;
  *(_DWORD *)(v1 + 20) = 563395539;
}

uint64_t sub_100055090(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  *(_DWORD *)(a2 + (v6 - a4)) = *(_DWORD *)(v5 + (v6 - a4));
  return (*(uint64_t (**)(void))(v8 + 8 * (((a4 + 4 == v7) * a5) ^ a3)))();
}

void sub_1000550BC()
{
}

uint64_t sub_1000550C8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t *a5, char a6, int a7, int a8, unint64_t *a9, unint64_t *a10, uint64_t a11)
{
  uint64_t v14 = *(void *)(v11 + 16);
  unsigned int v15 = 1224239923 * ((~&a4 & 0xAE13C0ED | &a4 & 0x51EC3F12) ^ 0x5CA03D3A);
  a6 = (51 * ((~&a4 & 0xED | &a4 & 0x12) ^ 0x3A)) ^ 0x11;
  a5 = &STACK[0x14281A3685FADE74];
  a7 = v15 + v13 - 423;
  a10 = &STACK[0xD1C4B9DDB1E97B4];
  a11 = v14;
  a9 = &STACK[0x4EABE2FA14688F66];
  a4 = ((a1 ^ 0x1688910B) + 1849687550 + ((2 * a1) & 0xFFCBEDFE ^ 0xD2CACC49 ^ ((v13 - 284) | 0x101))) ^ v15;
  uint64_t v16 = (*(uint64_t (**)(unsigned int *))(v12 + 8 * (v13 + 2008)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v12 + 8 * ((108 * (a8 != -563355418)) ^ v13)))(v16);
}

uint64_t sub_100055214@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((2378 * (LODWORD(STACK[0x2C8]) == v1 + 3 * (a1 ^ 0x127) - 63)) ^ a1)))();
}

uint64_t sub_100055268@<X0>(int a1@<W3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((a2 == v4) * ((v3 + a1 + 218) ^ 0x8CB)) ^ (v3 + a1 + 218))))();
}

uint64_t sub_10005529C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((241 * (((a5 + 126) ^ ((((a5 + 111) ^ 0x178) & v6) == 0)) & 1)) ^ (a5 + 1421))))();
}

uint64_t sub_1000552DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  int v46 = (v43 + 182) ^ (a6 - 105);
  int v47 = 831981571 * ((2 * ((v45 - 152) & 0x62362E68) - (v45 - 152) - 1647717994) ^ 0x46801B2);
  *(_DWORD *)(v45 - 152) = (a19 - 805007343) ^ v47;
  *(_DWORD *)(v45 - 148) = v47 + v43 + 1188;
  *(void *)(v45 - 144) = a16;
  uint64_t v48 = (*(uint64_t (**)(uint64_t))(v44 + 8 * (v43 + 2423)))(v45 - 152);
  unsigned int v49 = a43 & 0x3F ^ (v46 + 49567107);
  *(&a34 + v49) = -9;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8 * ((933 * (v49 > 0x37)) ^ v43)))(v48, 4432325);
}

uint64_t sub_1000553DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int a26,uint64_t a27,int a28,int a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  unsigned int v36 = 460628867
      * ((((&a25 | 0x9A0779E2) ^ 0xFFFFFFFE) - (~&a25 | 0x65F8861D)) ^ 0x296E0460);
  a27 = a23;
  a25 = a15;
  a26 = v36 + a22 - 1573481390;
  a29 = v32 - v36 + 277;
  a31 = a14;
  a32 = a13;
  a30 = a16;
  uint64_t v37 = (*(uint64_t (**)(uint64_t *))(v33 + 8 * (v32 ^ 0x8B0)))(&a25);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33
                                                                                                  + 8 * (((a28 == ((8 * v32) ^ 0xDE6BE94E)) * (v32 + 1417)) ^ v32)))(v37, a17, 173609183, 1511410743, 1704253536, v34, v35);
}

uint64_t sub_1000554EC@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  unsigned int v6 = (v5 + 620091469) & 0xDB0A278E;
  int v7 = v2 + v3;
  int v8 = v3 + 1;
  *(_DWORD *)(*(void *)(v4 - 0x5E8E72AB319E4281) + 4 * (int)(v7 + v6 - 650)) = a1;
  *(_DWORD *)(v4 - 0x5E8E72AB319E4285) = v8;
  int v9 = v8 + v2;
  if (v8 + v2 < 0) {
    int v9 = -v9;
  }
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * (int)((19
                                     * ((int)((((v6 + 380) | 0x180) ^ v9 ^ 0x6EFED8D3)
                                            + ((2 * v9) & 0xDDFDBAAA)
                                            - 103284752
                                            + ((739 * (((v6 + 380) | 0x180) ^ 0x584)) ^ (v2 + 1217))) >= 0)) ^ ((v6 + 380) | 0x180))))();
}

uint64_t sub_1000555DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  int v60 = 1543737703 * ((~((v59 - 192) | 0x395EF543) + ((v59 - 192) & 0x395EF543)) ^ 0xB8555AC0);
  *(_DWORD *)(v59 - 192) = v57 - v60 + 161;
  *(_DWORD *)(v59 - 184) = v60 ^ 0xE86D67F7;
  *(void *)(v59 - 176) = 0x4455824F020409ECLL;
  *(void *)(v59 - 168) = a56;
  *(void *)(v59 - 160) = a57;
  uint64_t v61 = (*(uint64_t (**)(uint64_t))(v58 + 8 * (v57 ^ 0x8B6)))(v59 - 192);
  return (*(uint64_t (**)(uint64_t))(v58
                                            + 8
                                            * (((((v57 - 112) ^ (*(_DWORD *)(v59 - 188) == -563355418)) & 1)
                                              * (v57 - 274)) ^ v57)))(v61);
}

uint64_t sub_1000556DC@<X0>(int a1@<W8>)
{
  int v3 = *(uint64_t (**)(uint64_t))(v2 + 8 * (a1 + 954));
  return v3(v1);
}

void sub_10005570C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  LODWORD(STACK[0x2A0]) = -1985401897;
  LODWORD(STACK[0x4AC]) = a8 + 159;
  JUMPOUT(0x100036AE0);
}

uint64_t sub_10005572C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  a6 = (v7 + v9) ^ (69008221 * (((&a6 | 0x6BD0036D) - (&a6 & 0x6BD0036D)) ^ 0xB8725167));
  a7 = a1;
  uint64_t v10 = (*(uint64_t (**)(unsigned int *))(v8 + 8 * (v7 + v9 + 2154)))(&a6);
  return (*(uint64_t (**)(uint64_t))(v8
                                            + 8 * (((a2 == 0) * (((v9 + v7 + 334) | 0x118) - 775)) ^ (v9 + v7 + 602))))(v10);
}

uint64_t sub_1000557C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  BOOL v11 = *(_DWORD *)STACK[0x2B8] != a5 || v8 != ((77 * (v7 ^ 0x65)) ^ (a7 + 487));
  return (*(uint64_t (**)(void))(v9 + 8 * ((1690 * v11) ^ v7)))();
}

uint64_t sub_100055818(uint64_t a1)
{
  LODWORD(STACK[0x4AC]) = v1 - 54;
  return sub_10005F520(a1);
}

uint64_t sub_100055828()
{
  return sub_100059F8C();
}

void sub_100055840()
{
  *(_DWORD *)(v0 + 8) = *(_DWORD *)(v1 - 0x6BA7059072F2C1BBLL);
}

uint64_t sub_100055890(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  BOOL v11 = (_DWORD *)STACK[0x2B8];
  *BOOL v11 = v8 - 1;
  uint64_t v12 = &v11[6 * (v8 - 1892305837)];
  int v13 = v12[2];
  STACK[0x2B0] = *((void *)v12 + 2);
  LODWORD(STACK[0x324]) = v12[6];
  BOOL v14 = *(_DWORD *)(v10 + (v13 + a4) * (uint64_t)a1 + 36) == ((v7 - 1150) ^ 0x24B ^ (a7 + 537));
  return (*(uint64_t (**)(void))(v9 + 8 * (((16 * v14) | (32 * v14)) ^ (v7 - 709))))();
}

void sub_100055948()
{
}

uint64_t sub_100055960@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W4>, uint64_t a4@<X8>)
{
  int v11 = *(_DWORD *)(a4 + 4 * (v8 + v6 - 8)) ^ *(_DWORD *)(a4 + 4 * (v8 + v6 - 3));
  int v12 = v11 + v10 - (v7 & (2 * v11));
  int v13 = *(_DWORD *)(a4 + 4 * ((((v4 ^ a2) * a3) ^ (v8 + 1434)) + v6)) ^ *(_DWORD *)(a4
                                                                                                  + 4 * (v8 + v6 - 14));
  HIDWORD(v14) = v13 ^ v12 ^ a1;
  LODWORD(v14) = v13 ^ ~v12;
  *(_DWORD *)(a4 + 4 * (v5 + v8)) = (v14 >> 31) + v10 - (v7 & (2 * (v14 >> 31)));
  return (*(uint64_t (**)(void))(v9 + 8 * (v4 | (32 * ((v5 + 1 + v8) > 0x4F)))))();
}

void sub_1000559F0()
{
}

void sub_1000559FC()
{
}

uint64_t sub_100055AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  int v45 = BYTE4(a36) ^ 0x89;
  if (v45 == 1)
  {
    BYTE4(a31) = ((8 * a33) ^ 0x70) - 2 * ((8 * a33) ^ 0x70 ^ (8 * a33) & 8) + 119;
    BYTE5(a31) = ((a33 >> 5) ^ 0xCD)
               - ((((a33 >> 5) ^ 0xFFFFFFCD) << (v44 - 25)) & 0xEE)
               + 119;
    BYTE6(a31) = ((a33 >> 13) ^ 0x53) - ((2 * ((a33 >> 13) ^ 0x53)) & 0xEF) + 119;
    HIBYTE(a31) = ((a33 >> 21) ^ 0x65) - ((2 * ((a33 >> 21) ^ 0x65)) & 0xEF) + 119;
    HIDWORD(v48) = HIDWORD(a32) ^ 6;
    LODWORD(v48) = a33 ^ 0x60000000;
    LOBYTE(a32) = (v48 >> 29) - ((2 * (v48 >> 29)) & 0xEF) + 119;
    BYTE1(a32) = ((HIDWORD(a32) >> 5) ^ 0x1B) + (~(2 * ((HIDWORD(a32) >> 5) ^ 0x1B)) | 0x11) + 120;
    BYTE2(a32) = ((HIDWORD(a32) >> 13) ^ 0xA8) - ((2 * ((HIDWORD(a32) >> 13) ^ 0xA8)) & 0xEF) + 119;
    int v47 = ((HIDWORD(a32) >> 20) | 0x11) - (HIDWORD(a32) >> 21);
    goto LABEL_5;
  }
  if (v45 == 2)
  {
    BYTE4(a31) = 118 - (HIDWORD(a32) >> 21) - ((2 * ~(HIDWORD(a32) >> 21)) & 0xEF);
    BYTE5(a31) = ((HIDWORD(a32) >> 13) ^ 0xA8) + (~(2 * ((HIDWORD(a32) >> 13) ^ 0xA8)) | 0x11) + 120;
    BYTE6(a31) = ((HIDWORD(a32) >> 5) ^ 0x1B) - ((2 * ((HIDWORD(a32) >> 5) ^ 0x1B)) & 0xEF) + 119;
    HIDWORD(v46) = HIDWORD(a32) ^ 6;
    LODWORD(v46) = a33 ^ 0x60000000;
    HIBYTE(a31) = (v46 >> 29) - ((2 * (v46 >> 29)) & 0xEF) + 119;
    LOBYTE(a32) = ((a33 >> 21) ^ 0x65) - ((2 * ((a33 >> 21) ^ 0x65)) & 0xEF) + 119;
    BYTE1(a32) = ((a33 >> 13) ^ 0x53) - ((2 * ((a33 >> 13) ^ 0x53)) & 0xEF) + 119;
    BYTE2(a32) = ((a33 >> 5) ^ 0xCD) - ((2 * ((a33 >> 5) ^ 0xCD)) & 0xEF) + 119;
    int v47 = ((8 * a33) ^ 0x70) - 32 * (((8 * a33) ^ 0x70u) >> 4);
LABEL_5:
    BYTE3(a32) = v47 + 119;
  }
  return sub_10005A41C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44);
}

void sub_100055D08()
{
  _DWORD *v0 = 563395391;
  sub_10005B490();
}

uint64_t sub_100055D18()
{
  BOOL v5 = v2 - 554284973 > 1847529374 || v2 - 554284973 < v3;
  return (*(uint64_t (**)(void))(v0 + 8 * ((v5 * ((v1 - 743) ^ 0x1D1)) ^ v1)))();
}

uint64_t sub_100055D68@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + (v7 + v5)) = *(unsigned char *)(v4 + (v7 + v5));
  return (*(uint64_t (**)(void))(v1 + 8 * (((((v7 - 1 == v2) ^ v6) & 1) * v8) ^ v3)))(0);
}

uint64_t sub_100055DA0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5
                                                     + 8
                                                     * ((215
                                                       * (v2 + v1 - 1027059324 >= (((v4 + 75659868) | 0x207C1A00) ^ 0x24FE9B97))) ^ v4)))(a1, v3);
}

uint64_t sub_100055E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void, unint64_t, uint64_t, uint64_t, uint64_t, void))(v13
                                                                                                + 8
                                                                                                * ((((((v12 - 1618279032) ^ (**(_DWORD **)(a10 - 0x5E8E72AB319E4281) == v10)) & 1) == 0)
                                                                                                  * (((v12 + 1216) | 8) - 1725)) ^ (v12 + 1382))))(0, 0x811882A1EC79A0ECLL, 3995751237, 0x2310543D8F341D8, 2198273905, (v11 + 1416062098));
}

uint64_t sub_100055EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(_DWORD *)(v26 - 104) = (v21 + 881) ^ (((v24 - ((v26 - 128) | v24) + ((v26 - 128) | 0x461595CE)) ^ 0x95B7C7C4) * v23);
  *(void *)(v26 - 112) = a20;
  *(void *)(v26 - 128) = v25;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v22 + 8 * (v21 ^ 0x9B2)))(v26 - 128);
  return (*(uint64_t (**)(uint64_t))(v22
                                            + 8
                                            * (((*(_DWORD *)(v26 - 120) > v20) * (((v21 + 43) | 0x200) + 833)) ^ v21)))(v27);
}

_DWORD *sub_100055F90(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *uint64_t result = a5;
  return result;
}

uint64_t sub_100055F9C@<X0>(int a1@<W0>, int a2@<W6>, int a3@<W8>, int8x16_t a4@<Q3>, int8x16_t a5@<Q4>)
{
  int8x16_t *v5 = vaddq_s8(vaddq_s8(*(int8x16_t *)(v8 + (a3 + a1)), a5), vmvnq_s8(vandq_s8(vaddq_s8(*(int8x16_t *)(v8 + (a3 + a1)), *(int8x16_t *)(v8 + (a3 + a1))), a4)));
  return (*(uint64_t (**)(void))(v7 + 8 * (a2 + v6 + 1208)))();
}

uint64_t sub_100055FF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1632 * (**(unsigned char **)(a2 + 8) == 0)) ^ 0x162u)))();
}

void sub_100056020()
{
  STACK[0x328] = *(void *)(v0 + 8 * (v1 - 811));
  JUMPOUT(0x100073674);
}

uint64_t sub_10005603C(uint64_t a1, unsigned int a2, int a3, char a4)
{
  int v10 = v8 + 4;
  int v11 = *(_DWORD *)(v7 + 4 * ((v10 + a3) >> ((22 * (v4 ^ 0xFB)) ^ 0x2C)));
  *(unsigned char *)(v6 + (v10 + a3)) = v11 ^ 0xB2;
  *(unsigned char *)(v6 + (v10 + a3 + 1)) = (BYTE1(v11) ^ 0xA1) - ((2 * (BYTE1(v11) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(v6 + (v10 + a3 + 2)) = (BYTE2(v11) ^ 0x43) - ((2 * (BYTE2(v11) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(v6 + (v10 + a3 + 3)) = (a4 ^ HIBYTE(v11)) - ((2 * (a4 ^ HIBYTE(v11))) & 0xEF) + 119;
  unsigned int v12 = *v5 - 2126625174;
  BOOL v13 = v12 < a2;
  BOOL v14 = v10 - 1795103245 < v12;
  if (v10 - 1795103245 < a2 != v13) {
    BOOL v14 = v13;
  }
  return (*(uint64_t (**)(void))(v9 + 8 * ((983 * !v14) ^ v4)))();
}

uint64_t sub_100056044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 8 * ((46 * (STACK[0x390] != 0)) ^ (v20 + 480))))(STACK[0x390], a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

void sub_100056074()
{
}

void sub_1000560A8(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X9, X17 }
}

uint64_t sub_100056110(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                                           + 8 * (((((43 * (a4 ^ 0x8A2)) ^ 0x1EE) - 493) * (v4 < 0x20)) ^ a4 ^ 0x910)))(0);
}

void sub_100056154()
{
}

uint64_t sub_100056248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_DWORD *)(v14 - 116) = v13 + 237 - 1224239923 * ((v14 - 2134978843 - 2 * ((v14 - 120) & 0x80BECF5D)) ^ 0x720D328A);
  *(void *)(v14 - 112) = a10;
  (*(void (**)(uint64_t))(v12 + 8 * (v13 + 1859)))(v14 - 120);
  *(_DWORD *)(v14 - 116) = v13
                         + 237
                         - 1224239923 * ((((v14 - 120) | 0x1D62533F) + (~(v14 - 120) | 0xE29DACC0)) ^ 0xEFD1AEE9);
  *(void *)(v14 - 112) = a11;
  (*(void (**)(uint64_t))(v12 + 8 * (v13 ^ 0x8C3)))(v14 - 120);
  *(void *)(v14 - 120) = v11;
  *(void *)(v14 - 104) = a11;
  *(_DWORD *)(v14 - 112) = v13
                         + 831981571 * ((2 * ((v14 - 120) & 0x6F747E28) - (v14 - 120) - 1869905454) ^ 0x92A51F6)
                         + 1177;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(v12 + 8 * (v13 ^ 0x896)))(v14 - 120);
  return sub_100056398(v15);
}

uint64_t sub_1000563D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t *a20,unint64_t *a21,unint64_t *a22,unint64_t *a23)
{
  LODWORD(a20) = a10 + 152 - 2078219279 * (&a20 ^ 0xDAFA9674) - 231789315;
  a22 = &STACK[0x5F548590D8AA63E9];
  a23 = a14;
  a21 = &STACK[0x4B3FB627E137F372];
  (*(void (**)(unint64_t **))(v23 + 8 * (a10 + 2072)))(&a20);
  LODWORD(a21) = a10
               + 152
               + 3804331
               * ((-1325552261 - (&a20 | 0xB0FDAD7B) + (&a20 | 0x4F025284)) ^ 0x31D77772)
               + 453;
  a20 = &STACK[0x2325945160E62A43];
  a22 = a14;
  a23 = &STACK[0x7073A7D8AAAECA4D];
  (*(void (**)(unint64_t **))(v23 + 8 * ((a10 + 152) ^ 0xBA8u)))(&a20);
  LODWORD(a22) = a10 + 152 - 944348131 * (&a20 ^ 0xA319A44E) - 38;
  a20 = &STACK[0x5F548590D8AA63E5];
  a21 = a14;
  (*(void (**)(unint64_t **))(v23 + 8 * (a10 + 2049)))(&a20);
  LODWORD(a21) = a10
               + 152
               - 241568881 * ((2 * (&a20 & 0x36C70448) - &a20 + 1228471220) ^ 0x9F29FFF6)
               + 128;
  a20 = a14;
  uint64_t v24 = (*(uint64_t (**)(unint64_t **))(v23 + 8 * (a10 + 2060)))(&a20);
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8
                                            * (((HIDWORD(a21) == -563355418) * (((a10 - 245) | 0x30E) + 1783)) ^ (a10 + 152))))(v24);
}

uint64_t sub_1000565CC@<X0>(int a1@<W7>, _OWORD *a2@<X8>)
{
  *(_OWORD *)(v3 + (v2 + a1)) = *a2;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((51
                                * (((((((v5 - 158) | 0x91u) + 0x1FFFFFF5DLL) & (v4 + 1)) == 16) ^ (((v5 + 98) | 0x91) + 112)) & 1)) ^ ((v5 - 158) | 0x91))))();
}

uint64_t sub_10005664C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 831981571 * ((2 * (a1 & 0x1F062D56) - a1 - 520498519) ^ 0x7958028D);
  return (*(uint64_t (**)(void))((char *)*(&off_10018D100 + (v1 ^ 0x6B4))
                              + 8
                              * (((*(void *)a1 != *(void *)(a1 + 16)) * (((v1 - 2130237356) & 0x7EF8D7B3) - 1665)) ^ v1)
                              - 4))();
}

void sub_1000566E0()
{
}

uint64_t sub_1000566EC()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((63
                                * (((155 * (v0 ^ 0x19A) - 138945134) & (2 * v1) ^ 0x5139CBC)
                                 + (v1 ^ 0xFD7636FC ^ (377 * (v0 ^ 0x19B)))
                                 - 293850114 == 1784161277)) ^ v0)))();
}

uint64_t sub_100056770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  a14 = 1178560073 * ((((2 * &a13) | 0x3D2F85A6) - &a13 - 513262291) ^ 0xF9A2E0BB)
      - 504207030;
  uint64_t v16 = (*(uint64_t (**)(int *))(v15 + 18936))(&a13);
  return (*(uint64_t (**)(uint64_t))(v15 + 8 * ((253 * (a13 == v14)) ^ 0x355u)))(v16);
}

uint64_t sub_1000567F0(int a1, __n128 a2)
{
  *(_DWORD *)(v3 + 1424) = 278074005;
  *(_DWORD *)(v3 + 1428) = 136246100;
  *(void *)(v3 + 1432) = v4;
  *(void *)(v3 + 1440) = v4;
  *(_DWORD *)(v3 + 1448) = a1;
  *(__n128 *)(v3 + 1452) = a2;
  return (*(uint64_t (**)(void))(v5 + 8 * ((((v2 - 1647) | 0x669) - 1635) | (v2 - 1647) | 0x669)))();
}

uint64_t sub_100056850@<X0>(uint64_t a1@<X1>, unsigned int a2@<W8>)
{
  uint64_t v4 = a2;
  unint64_t v5 = a2 + a1;
  if (v5 <= 0x38) {
    unint64_t v5 = 56;
  }
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((41
                                * (v5 - v4 + (v2 ^ 0x471u) - 707 + 653947828 >= (((v2 ^ 0x471u) + 449) ^ 0x928uLL))) ^ v2 ^ 0x471)))();
}

uint64_t sub_1000568C8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v20 = a1 + 902;
  unsigned int *v18 = 0x80000000;
  (*(void (**)(uint64_t))(v19 + 8 * (a1 ^ 0x90A)))(a17);
  unsigned int v21 = v18[1];
  unsigned int v22 = v18[2];
  unsigned int v23 = v18[398];
  int v24 = *(_DWORD *)(v17 + 4 * (v22 & 1));
  unsigned int *v18 = v18[v20 + 845 - 1477] ^ ((v21 & 0x7FFFFFFE | *v18 & 0x80000000) >> 1) ^ *(_DWORD *)(v17 + 4 * (v21 & 1));
  v18[1] = v23 ^ ((v22 & 0x7FFFFFFE | v21 & 0x80000000) >> 1) ^ v24;
  return (*(uint64_t (**)(void))(v19 + 8 * (v20 - 684)))();
}

void sub_1000569AC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) + 1543737703 * (((a1 | 0xC7921CD6) - (a1 & 0xC7921CD6)) ^ 0xB9664CAA);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100056A88()
{
  int v7 = (v4 - 672) ^ (((&v7 + 2080036327 - 2 * ((unint64_t)&v7 & 0x7BFAD5E7)) ^ 0xA85887ED) * v2);
  uint64_t v8 = v6;
  (*(void (**)(int *))(v1 + 8 * (v4 ^ 0xA4A)))(&v7);
  return v3 ^ v0;
}

uint64_t sub_100056B28@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((a1 != v1) ^ v2)))();
}

uint64_t sub_100056B6C(uint64_t a1, int a2, int a3)
{
  unsigned int v10 = v6 + v5 + v7;
  v11.i64[0] = 0x7777777777777777;
  v11.i64[1] = 0x7777777777777777;
  uint64_t v12 = a1 + v10;
  int8x16_t v13 = veorq_s8(*(int8x16_t *)(v3 + v10 - 31), v11);
  *(int8x16_t *)(v12 - 15) = veorq_s8(*(int8x16_t *)(v3 + v10 - 15), v11);
  *(int8x16_t *)(v12 - 31) = v13;
  return (*(uint64_t (**)(void))(v9 + 8 * ((14 * (a3 - (v4 & 0xFFFFFFE0) == 2231)) ^ (v8 + a2 + 594))))();
}

uint64_t sub_100056BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  return (*(uint64_t (**)(uint64_t))(v36 + 8 * (((v35 + ((8 * v35) ^ 0x900) - 1044) * (v33 == v34)) ^ v35)))(a33);
}

uint64_t sub_100056C24()
{
  int v1 = STACK[0x2D4];
  STACK[0x508] -= 1616;
  LODWORD(STACK[0x54C]) = 563395537;
  return (*(uint64_t (**)(void))(v0 + 8 * (((STACK[0x3A0] != 0) * (((v1 - 294) | 0x444) - 1490)) ^ (v1 - 120))))();
}

void sub_100056C84()
{
  uint64_t v4 = *(void *)(v0 + 24);
  *(_DWORD *)(*(void *)(v0 + 8) - 0x48DAFC6ABDD903E8) = *v1;
  *(_DWORD *)(v4 - 0x6C1B4F99CC2E886BLL) = *v2 + 178 * (v3 ^ 0x6B7) - ((2 * *v2) & 0xA3A976D4) - 774587898;
  *(_DWORD *)uint64_t v0 = -563355418;
}

uint64_t sub_100056D2C()
{
  STACK[0x288] = v0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (v1 ^ 0xCC7)))(1576, 3012117910);
  STACK[0x340] = v3;
  return (*(uint64_t (**)(void))(v2 + 8 * (((v3 == 0) * (((v1 - 1321) ^ 0x306) + ((v1 - 1321) | 0x241) - 1399)) | v1)))();
}

uint64_t sub_100056D94()
{
  STACK[0x380] = STACK[0x3C8];
  LODWORD(STACK[0x500]) = STACK[0x554];
  return sub_10004DE04();
}

uint64_t sub_100056DC0()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((105 * (v1 != v0 + ((v2 + 780829195) & 0xD1757DF7) - 306)) ^ (v2 + 892))))();
}

void sub_100056E08()
{
}

uint64_t sub_100056E1C(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)(((((a2 + 1516133150) & 0xA5A1A3AE ^ 0xFFFFFFCC) + ((a2 - 1885901997) & 0x7068936B))
                                     * (v2 != v3)) | a2)))();
}

uint64_t sub_100056E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, unint64_t *a13, unint64_t *a14, unsigned int a15)
{
  a15 = v18 - 89 - 944348131 * ((2 * (&a13 & 0x15D91B80) - &a13 + 1780933758) ^ 0xC93F4030);
  a13 = &STACK[0x5F548590D8AA63B9];
  a14 = a11;
  (*(void (**)(unint64_t **))(v16 + 8 * (v18 + 1846)))(&a13);
  a13 = &STACK[0x5F548590D8AA63D1];
  a14 = a11;
  a15 = v18 - 89 - 944348131 * (((&a13 | 0xA075B616) - (&a13 & 0xA075B616)) ^ 0x36C1258);
  (*(void (**)(unint64_t **))(v16 + 8 * (v18 ^ 0xB36)))(&a13);
  a13 = a11;
  LODWORD(a14) = v18
               - 241568881 * ((&a13 & 0x134F22A0 | ~(&a13 | 0x134F22A0)) ^ 0x3AA1D91D)
               + 77;
  uint64_t v19 = (*(uint64_t (**)(unint64_t **))(v16 + 8 * (v18 ^ 0xBC1)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8 * (((HIDWORD(a14) == v15) * (v17 + v18 - 1666054042 + 938)) ^ v18)))(v19);
}

uint64_t sub_100056FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int a26,uint64_t a27,int a28,int a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  int v38 = 4 * v32;
  int v34 = *(_DWORD *)(a2 + 4);
  uint64_t v35 = *(void *)(a2 + 8);
  unsigned int v36 = 460628867 * ((96139022 - (&a25 | 0x5BAF70E) + (&a25 | 0xFA4508F1)) ^ 0xB6D38A8C);
  a29 = v32 - v36 + 36;
  a31 = a14;
  a30 = a16;
  a25 = a15;
  a26 = v36 + v34 - 1573481390;
  a32 = a13;
  a27 = v35;
  (*(void (**)(uint64_t *))(v33 + 8 * (v32 + 1887)))(&a25);
  return (*(uint64_t (**)(_UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t))(v33
                                                                                    + 8
                                                                                    * (((a28 == -563355418)
                                                                                      * (v38 ^ 0xC7F)) ^ a20)))(&off_10018D100, a17, 173609183, 1511410743, 1704253536);
}

uint64_t sub_100057114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v71 = STACK[0x388];
  STACK[0x450] = STACK[0x388];
  STACK[0x498] = 0;
  LODWORD(STACK[0x514]) = 1704253533;
  STACK[0x520] = 0;
  LODWORD(STACK[0x414]) = 1704253533;
  STACK[0x4A0] = 0;
  return (*(uint64_t (**)(void))(v70
                              + 8 * (int)(((v71 != 0) * (((a70 - 1772) | 0x32C) + ((a70 - 960) ^ 0xFFFFFD97))) ^ a70)))();
}

uint64_t sub_10005717C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (int)((((v9 + ((v7 + 1339757051) & 0xB024EFFF) - 879) ^ ((v7 + 151390078) | 0x3058C240))
                                     * (v10 != a7)) ^ v7)))();
}

void sub_1000571E8()
{
}

uint64_t sub_1000571F0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v9 = v6 ^ 5;
  a3 = a1;
  a4 = a2;
  a5 = (v6 ^ 5) - 944348131 * ((&a3 & 0xE4E14E4C | ~(&a3 | 0xE4E14E4C)) ^ 0xB80715FD) - 234;
  uint64_t v10 = (*(uint64_t (**)(uint64_t *))(v8 + 8 * (v6 ^ 0xBA2)))(&a3);
  return (*(uint64_t (**)(uint64_t))(v8 + 8 * (((a6 != ((v9 + 3) ^ (v7 + 332))) * (v9 - 685)) | v9)))(v10);
}

uint64_t sub_10005728C@<X0>(int a1@<W4>, unsigned int a2@<W8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = a2 - 301084339;
  if ((unint64_t)(v5 + 1) > 0x38) {
    uint64_t v6 = v5 + 1;
  }
  else {
    uint64_t v6 = 56;
  }
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((((v2 + 661) ^ (a1 - 365)) - a1 + 192) ^ 0xFD)
                                * ((unint64_t)(v6 - v4 + 301084339) < 8)) ^ (v2 + 661))))();
}

uint64_t sub_1000572F8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((((((a6 - 1580) | 0x222) - 499) ^ 0x1BC) * (v6 != a1)) ^ a6)))();
}

void sub_10005732C()
{
}

uint64_t sub_100057334()
{
  int v6 = 9 * (v0 ^ (v5 + 14));
  int v7 = v4 + v0 - 619;
  BOOL v8 = v1 - 1789262125 < 389 * (v0 ^ (v5 - 2)) - 85009370;
  BOOL v9 = v3 - 1020028925 < (v1 - 1789262125);
  if ((v3 - 1020028925) < 0xFAEEDF30 != v8) {
    BOOL v9 = v8;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((!v9 * (v6 - 108)) ^ v7)))();
}

uint64_t sub_1000573C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (int)((((((a5 - 1962) | 0x622) + v6) ^ (a5 - 8417773) & 0xEADBEED1) * (v5 < 0x20)) ^ a5)))();
}

uint64_t sub_100057414(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void, uint64_t, void))(v4
                                                            + 8
                                                            * ((((137 * ((a4 + 980) ^ 0x5EB)) ^ 0x46)
                                                              * ((v5 & 0x18) == 0)) ^ (a4 + 980))))((a4 + 980) ^ 0x1A9u, a2, (v6 - a2));
}

void sub_100057458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5) {
    BOOL v8 = a6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  int v11 = v8 || a7 == 0 || a8 == 0;
  __asm { BRAA            X9, X17 }
}

uint64_t sub_1000574E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  int v8 = (v5 + 275) | 0x1C1;
  *(unsigned char *)(a3 + ((((v8 - 1470) | 0x20u) ^ (unint64_t)(a2 + 1893)) & (a5 + a1))) = *(unsigned char *)(v7 + a4 - 1349855230);
  return (*(uint64_t (**)(void))(v6 + 8 * ((969 * ((a5 - 1199300154) < 0x40)) ^ v8)))();
}

uint64_t sub_10005754C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,int a62,char a63)
{
  *(void *)(a65 + 1560) = *(void *)STACK[0x4E0];
  *(_DWORD *)(a65 + 1552) = *(_DWORD *)STACK[0x530];
  *(void *)(*(void *)(a70 + 96) + 488) = *(void *)(a70 + 8);
  *(_DWORD *)(*(void *)(a70 + 96) + 480) = *(_DWORD *)a70;
  *(unsigned char *)(a70 + 103) = (a63 ^ 0xBA) * (a63 + 17);
  return (*(uint64_t (**)(void))(v70 + 8 * ((107 * (a60 == 103)) ^ a61)))();
}

void sub_1000575D4()
{
}

uint64_t sub_1000575E4@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, uint64_t a8@<X8>)
{
  int v18 = (v10 + v15) & a6;
  uint64_t v19 = (a2 + v11 + 290);
  *(unsigned char *)(a1 + v19 + v16) = *(unsigned char *)(a4 + v19) ^ *(unsigned char *)(v8 + ((v18 ^ a5) & v19)) ^ *(unsigned char *)(((v18 ^ a5) & v19) + v9 + 1) ^ *(unsigned char *)(a8 + ((v18 ^ a5) & v19)) ^ (((v18 ^ a5) & v19) * a7) ^ 0x77;
  return (*(uint64_t (**)(void))(v14 + 8 * (((v11 - 1 == a3 + ((v18 + v17) & v13) - 18) * v12) ^ (v18 + 448))))();
}

uint64_t sub_100057664@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v30 = (*(uint64_t (**)(void, void, unint64_t))(v27 + 8 * (v23 ^ 0x841)))(LODWORD(STACK[0x52C]), (a1 + v24), STACK[0x3E8]);
  int v38 = (v30 ^ (v26 + 778)) - 650893600 + ((v25 ^ 0xFFFFF8D0) & (2 * v30));
  unint64_t v39 = STACK[0x288];
  if (v38 == 1496589535)
  {
    uint64_t v41 = (char *)&STACK[0x5C0] + v39 - 0x2C2F364FA24C5109;
    STACK[0x368] = (unint64_t)(v41 - 1824);
    LODWORD(STACK[0x3F4]) = 319388122;
    STACK[0x508] = v39 + (v28 ^ 0x10Du) + ((v28 - 1041720368) & 0x3E1765DD) - 1983;
    STACK[0x2F8] = 0;
    LODWORD(STACK[0x4FC]) = 1704253533;
    uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * ((v28 + 1297) ^ (124 * (v41 == (char *)1576))));
    STACK[0x290] = STACK[0x488];
    STACK[0x2B0] = (unint64_t)(v41 - 1596);
    STACK[0x2B8] = (unint64_t)(v41 - 1824);
    return v42(v30, v31, v32, v33, v34, v35, v36, v37);
  }
  else if (v38 == 1765024994)
  {
    LODWORD(STACK[0x54C]) = 563395550;
    return (*(uint64_t (**)(void))(v27 + 8 * (((STACK[0x3A0] != 0) * (((v28 - 294) | 0x444) - 1490)) ^ (v28 - 120))))();
  }
  else
  {
    int v43 = 268847287 * ((((v29 - 192) | 0x51786A13) + (~(v29 - 192) | 0xAE8795EC)) ^ 0xAED27B3A);
    *(_DWORD *)(v29 - 192) = (v38 - ((2 * v38 + 1301788226) & 0xBCD7C1CC) - 2059944953) ^ v43;
    *(void *)(v29 - 184) = a23;
    *(_DWORD *)(v29 - 176) = v43 + v28 + 227;
    uint64_t v44 = (*(uint64_t (**)(uint64_t))(v27 + 8 * (v28 + 1508)))(v29 - 192);
    return (*(uint64_t (**)(uint64_t))(v27
                                              + 8
                                              * (((STACK[0x3A0] != 0) * (((v28 - 294) | 0x444) - 1490)) ^ (v28 - 120))))(v44);
  }
}

void sub_1000576BC()
{
}

void sub_1000576D8()
{
}

void sub_1000576E0(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,int *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v29 = 4 * (v28 - 1855926950);
  unsigned int v30 = -1805087677 * ((*(_DWORD *)(*a23 + (*a24 & 0xFFFFFFFFB2DB24FCLL)) ^ (a26 + v29)) & 0x7FFFFFFF);
  int v31 = v30 ^ HIWORD(v30);
  unsigned int v32 = -1805087677 * v31;
  *(_DWORD *)(a28 + v29) ^= *(_DWORD *)(a26 + v29) ^ *((_DWORD *)*(&off_10018D100 + a1 - 1167) + HIBYTE(v32) - 3) ^ *((_DWORD *)*(&off_10018D100 + (a1 ^ 0x406)) + HIBYTE(v32) - 3) ^ *((_DWORD *)*(&off_10018D100 + (a1 ^ 0x421)) + HIBYTE(v32) + 5) ^ (-1941766144 * v31) ^ v32 ^ (HIBYTE(v32) * (292 * (a1 ^ 0x491) + 1568224019));
  JUMPOUT(0x100050100);
}

void sub_1000577D8()
{
}

void sub_100057838()
{
  *(_DWORD *)(v1 - 140) = v0 - 268105278;
  JUMPOUT(0x1000366B0);
}

uint64_t sub_1000579C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(unsigned char *)(v8 + (a4 + v7)) = *(unsigned char *)(v5 + (a4 + v7)) ^ 0x77;
  return (*(uint64_t (**)(void))(v10 + 8 * (((a4 - 1 == v6) * (((a5 + 29505643) | 0x66000792) ^ (v9 + 1956))) ^ a5)))();
}

void sub_100057A14(unint64_t a1)
{
  STACK[0x2F8] = a1;
  LODWORD(STACK[0x4FC]) = v1;
  JUMPOUT(0x100057AA0);
}

uint64_t sub_100057ADC()
{
  BOOL v4 = ((2 * (v2 - (v3 & 0x1FD8DA74) + (v1 ^ 0x8FEC6E4E))) & 0xF4F8DF5C ^ 0x14D8DA54)
     + ((v2 - (v3 & 0x1FD8DA74) + (v1 ^ 0x8FEC6E4E)) ^ 0x75900294)
     + 1979686912 == v1 + 1887177786;
  return (*(uint64_t (**)(void))(v0 + 8 * ((2 * v4) | (8 * v4) | v1)))();
}

uint64_t sub_100057B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return (*(uint64_t (**)(void))(v11 + 8 * ((78 * ((a10 ^ v10) < 0x15)) ^ v12)))();
}

uint64_t sub_100057B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v21 = 1224239923 * ((2 * (&a13 & 0x619B6640) - &a13 - 1637574216) ^ 0x6CD7646F);
  a16 = a11;
  a17 = &STACK[0x634ED76D4AB88295];
  a13 = v21 ^ 0x6BCE5709;
  a14 = (v20 - 2024873671) ^ v21;
  a15 = v21 ^ 0x68D2F2E6;
  uint64_t v22 = (*(uint64_t (**)(int *))(v19 + 8 * (v20 ^ 0xB01)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * (((a18 == v18)
                                              * (((((_WORD)v20 + 8619) & 0x7FF) + 53) ^ (v20 + 1024949403) & 0x81FE)) ^ v20)))(v22);
}

uint64_t sub_100057C78(unsigned int a1)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((209 * (((v1 + 8) ^ (a1 < ((v1 - 1016) ^ 0x207u) - 374)) & 1)) ^ v1)))();
}

void sub_100057CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned char *a21,uint64_t a22,uint64_t a23,unsigned char *a24,uint64_t a25,uint64_t a26,unsigned char *a27,unsigned char *a28,unsigned char *a29,unsigned char *a30,unsigned char *a31,unsigned char *a32,unsigned char *a33)
{
  uint64_t v41 = ((a7 ^ 0x4B6A856884E70362) + v39 - (v37 & (2 * (a7 ^ 0x4B6A856884E70362)))) ^ a3;
  uint64_t v42 = (((v33 - 1554722561 + ((v38 - 1101) ^ 0xEu)) | (unint64_t)(v35 << 32))
       + 0x7D6DA0F4A237C93CLL
       - 2
       * (((v33 - 1554722561 + ((v38 - 1101) ^ 0xEu)) | (unint64_t)(v35 << 32)) & 0x7D6DA0F4A237C93DLL ^ (v33 - 1554722561 + ((v38 - 1101) ^ 0xEu)) & 1)) ^ v36;
  unint64_t v43 = v42 ^ 0xA173397C065C8DEALL;
  uint64_t v44 = v42 ^ 0x5E8CC683F9A37215;
  unint64_t v45 = ((v42 ^ 0x5E8CC683F9A37215)
       + 0x7122F342C09E16D1
       - ((2 * (v42 ^ 0x5E8CC683F9A37215)) & 0xE245E685813C2DA2)) ^ a1;
  uint64_t v46 = v45 ^ 0x629A61E2FE92CDE4;
  unint64_t v47 = v41 ^ 0x8ABB7B075CE8A96ELL;
  unint64_t v48 = (v45 ^ 0x629A61E2FE92CDE4) & v43 ^ v41 ^ 0x8ABB7B075CE8A96ELL;
  unint64_t v49 = (v45 ^ 0x9D659E1D016D321BLL) & (v34 ^ 0x27241DDFD3EDC661) ^ v44 ^ v48;
  *((void *)&v50 + 1) = v49 ^ 0xABEF87C8808CCB5;
  *(void *)&long long v50 = v49 ^ 0x8000000000000000;
  uint64_t v51 = v49 ^ __ROR8__(v49, 39) ^ (v50 >> 61);
  uint64_t v52 = v44 & (v41 ^ 0x754484F8A3175691);
  uint64_t v53 = v48 ^ 0xF38BFF733C051F6;
  uint64_t v54 = a7 ^ 0x4B6A856884E70362 ^ v34 ^ 0x27241DDFD3EDC661;
  unint64_t v55 = v52 ^ v54;
  uint64_t v56 = (v55 & 0x200000000 ^ 0x7FB6D3EFB7DFEDBFLL) + 2 * (v55 & 0x200000000);
  uint64_t v57 = v56 - 0x7FB6D3EFB7DFEDBFLL;
  uint64_t v58 = v56 - 0x5C040282200E000CLL;
  unint64_t v59 = 0xA369A55D4FB1DB72 - v56;
  if ((v53 & v57) == 0) {
    unint64_t v59 = v58;
  }
  unint64_t v60 = ((v53 + v59 - 0x23B2D16D97D1EDB3) ^ (0x23B2D16D97D1EDB3 - (v53 + v59)) ^ ((v55 & 0xFFFFFFFDFFFFFFFFLL)
                                                                                    - ((v53 + v59 - 0x23B2D16D97D1EDB3) ^ v55 & 0xFFFFFFFDFFFFFFFFLL)))
      + (v55 & 0xFFFFFFFDFFFFFFFFLL);
  unint64_t v61 = v60 - ((2 * v60) & 0x15BF734A61A5B108) + 0xADFB9A530D2D884;
  *((void *)&v62 + 1) = v61 ^ 0x2D884;
  *(void *)&long long v62 = v61 ^ 0xADFB9A530D00000;
  uint64_t v63 = ((v62 >> 19) - ((2 * (v62 >> 19)) & 0x15BF734A61A5B108) + 0xADFB9A530D2D884) ^ v61;
  unint64_t v64 = v63 & 0x88A7E47BC54E7E29 ^ ((v61 >> 28) ^ 0xADFB9A53) & 0xBC54E7E29 | v63 & 0x77581B843AB181D6 ^ ((v61 >> 28) ^ 0xADFB9A53) & 0x43AB181D6;
  uint64_t v65 = (v55 << 23) ^ (v55 >> 7) ^ ((v55 >> 41) | (v55 << 57)) ^ 0x1EC655AF97FB0312;
  uint64_t v66 = v55 ^ 0x2617089132B926A4 ^ (v65 - ((2 * v65) & 0x225C5ECCC5EDCCACLL) - 0x6ED1D0999D0919AALL);
  unint64_t v67 = v66 ^ (v61 << 36) ^ v64;
  unint64_t v68 = v47 & ~v54;
  unint64_t v69 = v46 ^ v54 & (v34 ^ 0xD8DBE2202C12399ELL);
  unint64_t v70 = v68 ^ v34 ^ 0x27241DDFD3EDC661 ^ v69;
  unint64_t v71 = v70 ^ 0xBE3909C673894495 ^ ((((v70 >> 10) ^ (v70 >> 17) | (v70 << 54)) ^ 0xF5EC3F377C10F093)
                                    + 0xFA6EBF2581C2343
                                    + ~(2
                                      * ((((v70 >> 10) ^ (v70 >> 17) | (v70 << 54)) ^ 0xF5EC3F377C10F093) & 0xFA6EBF2581C2366 ^ ((v70 >> 10) ^ (v70 >> 17)) & 0x24)));
  unint64_t v72 = v71 & 0x4C1D4E44A4B3031DLL ^ ((v70 << 47) ^ 0xB3EB800000000000) & 0x4C1D000000000000 | v71 & 0xB3E2B1BB5B4CFCE2 ^ ((v70 << 47) ^ 0xB3EB800000000000) & 0xB3E2800000000000;
  uint64_t v73 = v72
      - 2
      * (v72 & 0x540E055D3A0F109FLL ^ (v70 ^ 0x95 ^ (((v70 >> 10) ^ (v70 >> 17) ^ 0x93)
                                                                                     + 67
                                                                                     + ~(2
                                                                                       * ((((v70 >> 10) ^ (v70 >> 17) | (v70 << 54)) ^ 0xF5EC3F377C10F093) & 0xFA6EBF2581C2366 ^ ((v70 >> 10) ^ (v70 >> 17)) & 0x24)))) & 9)
      + 0x540E055D3A0F1096;
  unint64_t v74 = v73 ^ (v66 - ((2 * v66) & 0xA81C0ABA741E212CLL) + 0x540E055D3A0F1096);
  uint64_t v75 = v67 ^ 0xD2D884000000000;
  *((void *)&v62 + 1) = ~v69;
  *(void *)&long long v62 = v69 ^ 0x92CFC162FD513142;
  unint64_t v76 = v69 ^ 0x9C6BDB2B472C5618 ^ (((v69 << 58) ^ 0xC00000000000000)
                                    - ((2 * ((v69 << 58) ^ 0xC00000000000000)) & 0x1800000000000000)
                                    + 0xEA41A49BA7D675BLL);
  uint64_t v77 = v76 - ((2 * v76) & 0x915593EAD573EC2) - 0x7B755360A954609FLL;
  unint64_t v78 = v51 ^ 0xF724457AB5B62E24;
  uint64_t v79 = ((v69 ^ 0x92CFC162FD513166) >> (v55 & 6 ^ 2) >> (v55 & 6 ^ 4)) ^ (v62 >> 1) ^ v51 ^ 0xF724457AB5B62E24 ^ v77;
  unint64_t v80 = (v73 ^ 0xABF1FAA2C5F0EF69) & v66 ^ v79;
  unint64_t v81 = v80 ^ v73 ^ (((v67 ^ 0xD2D884000000000) & ~v74)
                   - ((2 * ((v67 ^ 0xD2D884000000000) & ~v74)) & 0xA81C0ABA741E212CLL)
                   + 0x540E055D3A0F1096);
  unint64_t v82 = ((v81 >> 10) & 0x2000000000000 ^ 0xB73E9C9FF73BDD77) + 2 * ((v81 >> 10) & 0x2000000000000);
  BOOL v83 = ((v82 + 0x48C1636008C42289) & (v81 ^ 0x28E000000000000)) == 0;
  unint64_t v84 = (v67 ^ 0xF2D277BFFFFFFFFFLL) & (v51 ^ 0x73AEE9E5E31DB145) ^ v74;
  unint64_t v85 = (v84 >> 41) ^ (v84 >> 7);
  unint64_t v86 = (v85 | (v84 << 57)) ^ (v84 << 23) ^ 0xF774B04353CE1CF4;
  uint64_t v87 = v86 - 2 * (v86 & 0x6AE57B8699503DEELL ^ v85 & 0xA) + 0x6AE57B8699503DE4;
  unint64_t v88 = v82 + 0x7FD7EFF67DEDB6E0;
  unint64_t v89 = 0xEE5529366C6571CELL - v82;
  if (!v83) {
    unint64_t v88 = v89;
  }
  unint64_t v90 = (v81 >> 10) & 0xFFFDFFFFFFFFFFFFLL ^ 0xA3E966F75234 ^ ((v81 ^ 0x28FA59BDD48D0B6) - 0x37168C9675299457 + v88);
  uint64_t v91 = ((v90 >> 38) & 0x2A35FE4) + (v90 >> 39) - 2 * ((v90 >> 38) & 0x2A35FE4) + 0x61376A34D751AFF2;
  *((void *)&v92 + 1) = v81 ^ 0xD0B6;
  *(void *)&long long v92 = v81 ^ 0x28FA59BDD480000;
  uint64_t v93 = (((v91 << 39) ^ (v81 << 54)) & 0xFFFFFF8000000000 | ((v91 ^ (v90 << 25)) >> 25)) ^ (v92 >> 17);
  unint64_t v94 = v75 ^ v79 & (v51 ^ 0x8C51161A1CE24EBALL);
  unint64_t v95 = (((v73 ^ 0x540E055D3A0F1096) & ~v79)
       - ((2 * ((v73 ^ 0x540E055D3A0F1096) & ~v79)) & 0x915593EAD573EC2)
       - 0x7B755360A954609FLL) ^ v78 ^ v94;
  unint64_t v96 = (8 * v95) ^ (v95 >> 39) ^ 0xBA3E0AB73A03F932 ^ ((*(unsigned char *)(v40
                                                                                     + (((v95 >> 57) ^ 0x2B) & 0x70 ^ 0xFE)) ^ ((((v95 >> 57) ^ 0x2B) & 0x70 ^ 0xDE) + (((v95 >> 57) ^ 0x2B) & 0x70 ^ 0x4B)) ^ 0xA1)
                                                                         - 122);
  uint64_t v97 = v95 ^ 0x6B5E2D3C204B84DDLL ^ (v96 - ((2 * v96) & 0x7833D8D58E3C5416) + 0x3C19EC6AC71E2A0BLL);
  unint64_t v98 = v97 + ((v95 << 25) ^ 0xADCEAB5DAC000000) - 2 * (v97 & ((v95 << 25) ^ 0xADCEAB5DAC000000));
  unint64_t v99 = v87 ^ v84;
  unint64_t v100 = v84 ^ v94;
  *(void *)&long long v92 = __ROR8__(__ROR8__(v100 ^ 0x787EEEF1A7EE72F1, 16) ^ 0x1712D402E105A6CBLL, 48);
  unint64_t v101 = v100 ^ 0xAC7C0FF4012565E3 ^ ((v100 ^ 0xAC7C0FF4012565E3) >> 19) ^ ((unint64_t)v92 >> 28) ^ ((void)v92 << 36) ^ ((void)v92 << 45) ^ v99;
  *((void *)&v92 + 1) = v101 ^ 0xA1;
  *(void *)&long long v92 = v101 ^ 0xF0DD477E18D04800;
  uint64_t v102 = v98 - 2 * (v98 & 0x4553CBE2F54869ELL ^ v97 & 4) - 0x7BAAC341D0AB7966;
  unint64_t v103 = v93 ^ 0x8557F9309BB51A6BLL;
  unint64_t v104 = v93 ^ 0x8557F9309BB51A6BLL ^ v99;
  unint64_t v105 = v104 ^ 0xF0DD477E18D048A1 ^ (v102 ^ 0x84553CBE2F54869ALL) & ((((unint64_t)(v92 >> 9) ^ 0x284B28057C49B8D1) >> (v69 & 0x37 ^ 3) >> (v69 & 0x37 ^ 0x34)) ^ (((unint64_t)(v92 >> 9) ^ 0x284B28057C49B8D1) << 9) ^ 0x69AFF5076C8E5DAFLL);
  *((void *)&v92 + 1) = v105 ^ 0x118501E2B14;
  *(void *)&long long v92 = v105 ^ 0x26974A0000000000;
  uint64_t v106 = v105 ^ 0x70BC85B9872844AALL ^ (((v92 >> 41) ^ (v105 << 57) ^ 0x2800000000000000)
                                      - 2 * (((v92 >> 41) ^ (v105 << 57)) & 0x562BCEA1D7366FBFLL ^ (v92 >> 41) & 1)
                                      + 0x562BCEA1D7366FBELL);
  uint64_t v107 = v106 + ((v105 >> 7) ^ 0x4D2E9630A03C56) - 2 * (v106 & ((v105 >> 7) ^ 0x4D2E9630A03C56));
  unint64_t v108 = (v80 >> 1) ^ (v80 >> 6) ^ (v80 << 58) ^ 0xDE1FAE11AA0A9F1DLL;
  unint64_t v109 = v80 ^ 0x223451A42FB6E60ALL ^ (v108 - ((2 * v108) & 0x9AE24C770DD24C60) + 0x4D71263B86E92630);
  unint64_t v110 = v109 & 0xF47FF077890F9720 ^ (v80 << 63) | v109 & 0xB800F8876F068DFLL;
  unint64_t v111 = (v104 ^ 0xF0DD477E18D048A1) & (v93 ^ 0x7AA806CF644AE594);
  uint64_t v112 = v102 ^ (v110 - ((2 * v110) & 0x8AA797C5EA90D34) - 0x7BAAC341D0AB7966);
  unint64_t v113 = v111 ^ v112;
  unint64_t v114 = v111 ^ v112 ^ v103 ^ (((v104 ^ 0xF22B881E72FB75ELL) & (v101 ^ 0xF0DD477E18D048A1))
                             - ((2 * ((v104 ^ 0xF22B881E72FB75ELL) & (v101 ^ 0xF0DD477E18D048A1))) & 0x9C9F7263E3F788ALL)
                             - 0x7B1B046CE0E043BBLL);
  *((void *)&v92 + 1) = v111 ^ v102 ^ (v110
                                                                   - ((2 * v110) & 0x5EA90D34)
                                                                   + 794068634) ^ v103 ^ (((v104 ^ 0xE72FB75E) & (v101 ^ 0x18D048A1)) - ((2 * ((v104 ^ 0xE72FB75E) & (v101 ^ 0x18D048A1))) & 0x3E3F788A) + 522173509) ^ 0x373;
  *(void *)&long long v92 = v114 ^ 0xF79457FB4F2F7400;
  uint64_t v115 = v114 ^ 0x84E4FB931F1FBC45 ^ ((v114 ^ 0x84E4FB931F1FBC45) >> 17) ^ (v92 >> 10) ^ ((v114 ^ 0x84E4FB931F1FBC45) << 47);
  uint64_t v116 = v107 + (v115 ^ 0x16EB95D00604E32ELL) - 2 * (v107 & (v115 ^ 0x16EB95D00604E32ELL));
  unint64_t v117 = v103 & ~v112;
  unint64_t v118 = v101 ^ 0xA60648108DB2C645 ^ (((v102 ^ 0x7BAAC341D0AB7965) & v110)
                                      - ((2 * ((v102 ^ 0x7BAAC341D0AB7965) & v110)) & 0xADB61EDD2AC51DC8)
                                      + 0x56DB0F6E95628EE4);
  unint64_t v119 = ((v118 ^ v117) - ((2 * (v118 ^ v117)) & 0x8AA797C5EA90D34) - 0x7BAAC341D0AB7966) ^ v102;
  *((void *)&v92 + 1) = v119 ^ 0x38FE43D2BCLL;
  *(void *)&long long v92 = v119 ^ 0x3278F80000000000;
  uint64_t v120 = (v92 >> 38) ^ (v119 >> 39 << 26) ^ 0xC258A8B62E885BC3;
  *((void *)&v92 + 1) = v113 ^ 0x548B80C;
  *(void *)&long long v92 = v113 ^ 0x7955EAEC48000000;
  unint64_t v121 = __ROR8__(v119, 61) ^ (v119 << 25) ^ __ROR8__(v120, 26);
  unint64_t v122 = (v113 >> 6) ^ (v113 >> 1) ^ ((((((v113 & 0x3F) << 31) ^ 0xE04699B10F1F629ALL ^ (unint64_t)(v92 >> 27)) << 27) ^ (v113 << 63)) & 0xFFFFFFFFF8000000 | ((((v113 & 0x3F) << 31) ^ 0xE04699B10F1F629ALL ^ (unint64_t)(v92 >> 27)) >> 37));
  unint64_t v123 = v121 ^ v122;
  unint64_t v124 = v121 ^ v122 ^ 0xC51AEF5B5CC303B1;
  unint64_t v125 = v116 & (v115 ^ 0xE9146A2FF9FB1CD1) ^ v124;
  unint64_t v126 = ((v125 >> 1) ^ (v125 >> 6) | (v125 << 63)) ^ (v125 << 58) ^ 0x82A267617DDD3C0DLL;
  unint64_t v127 = v125 ^ 0xB0552A2A69733C66 ^ (v126 - ((2 * v126) & 0xC71E6832139970B8) + 0x638F341909CCB85CLL);
  unint64_t v128 = (v122 ^ 0x853759C940934A2BLL) + (v124 | v121 ^ 0xBFD2496DE3AFB665) + 1;
  unint64_t v129 = v118 ^ v105;
  uint64_t v130 = ((v118 ^ v105) >> 19) ^ ((v118 ^ v105) << 36) ^ ((v118 ^ v105) << 45) ^ 0x2A792D60982B22B5;
  uint64_t v131 = (v129 >> 28) ^ 0x6E04C1591;
  unint64_t v132 = v129 ^ 0xB2C06B572581059ELL ^ (v130 - ((2 * v130) & 0xB989541C60550728) - 0x233B55F1CFD57C6CLL);
  unint64_t v133 = (v132 & 0x26452CB7C950B7B6 ^ v131 & 0x7C950B7B6 | v132 & 0xD9BAD34836AF4849 ^ v131 & 0x836AF4849) ^ v107;
  if ((v128 & 1 & v133) != 0) {
    uint64_t v134 = v133 - (v128 & 1) - ((2 * (v133 - (v128 & 1))) & 0xA18C413F9F426728) + 0x50C6209FCFA13394;
  }
  else {
    uint64_t v134 = v133 ^ 0x50C6209FCFA13394 ^ v128 & 1;
  }
  unint64_t v135 = v134 ^ ((v128 & 0xFFFFFFFFFFFFFFFELL) - ((2 * v128) & 0xA18C413F9F426728) + 0x50C6209FCFA13394);
  uint64_t v136 = v121 ^ 0x402DB6921C50499ALL;
  unint64_t v137 = (v123 ^ 0x3AE510A4A33CFC4ELL) & (v115 ^ 0x16EB95D00604E32ELL) ^ v121 ^ 0x402DB6921C50499ALL ^ v135;
  unint64_t v138 = ((8 * v137) ^ 0x12BB25DAC3BED128) & (v137 ^ 0x425764BB5877DA20) ^ __ROR8__(v137, 39) ^ (v137 ^ 0xFE0EB913CCD9C6B5 ^ (((v137 >> 61) ^ 0xBC59DDA894AE1CAALL) - 24) | (8 * v137) ^ 0x12BB25DAC3BED128);
  uint64_t v139 = 2 * v127;
  unint64_t v140 = v127 - 0x30523926A8FA70E4;
  unint64_t v141 = (v138 ^ 0xB91D296D1D8121D5 ^ (v140 - (v139 & 0x9F5B8DB2AE0B1E38))) & 0xA9AD36174A77719DLL;
  unint64_t v142 = (v141 | (v138 ^ 0xB91D296D1D8121D5 ^ (v140 - (v139 & 0x1F5B8DB2AE0B1E38))) & 0x5652C9E8B5888E62)
       - 2
       * ((v141 & 0x290DE923D2521D6ELL | (v138 ^ 0xB91D296D1D8121D5 ^ (v140 - (v139 & 0x1F5B8DB2AE0B1E38))) & 0xC92090000C62) ^ (v138 ^ 0xB91D296D1D8121D5 ^ (v140 - (v139 & 0x1F5B8DB2AE0B1E38))) & 2);
  unint64_t v143 = v136 & ~v133 ^ v116;
  unint64_t v144 = ((v143 + (v143 ^ 0x8F38572C0C9BC202) + 1) ^ 0xFFFFFFFFFFFFFFFELL) + v143;
  unint64_t v145 = v144 - ((2 * v144) & 0x881776EED3E06304) - 0x3BF44488960FCE7ELL;
  uint64_t v146 = v145 & 0x10000000000000 | 0xAE0DD74823A78F7;
  if (((v145 >> 7) & v145 & 0x10000000000000) != 0) {
    uint64_t v146 = 0x15C1BAE90474F1EELL - v146;
  }
  unint64_t v147 = v145 & 0xFFEFFFFFFFFFFFFFLL ^ (v145 >> 41) ^ (v145 << 23) ^ (v145 << 57) ^ (((v145 >> 7) ^ 0x1881776EED3E063)
                                                                                   - 0xAE0DD74823A78F7
                                                                                   + v146) ^ 0x7BBF436FA892345FLL;
  unint64_t v148 = v125 ^ v115 ^ ((v133 & ~v116) - ((2 * (v133 & ~v116)) & 0x9C5D714FB88D1BC2) + 0x4E2EB8A7DC468DE1);
  unint64_t v149 = (v148 & 0x1000000000 | (v148 << 47)) ^ v148 & 0xFFFFFFEFFFFFFFFFLL ^ ((v148 >> 10) ^ (v148 >> 17) | (v148 << 54));
  *((void *)&v150 + 1) = v149 ^ 0x3E021A15A2;
  *(void *)&long long v150 = v149 ^ 0x8D22750000000000;
  unint64_t v151 = v142 + 0x290DE923D2521D6CLL;
  unint64_t v152 = v149 ^ 0xC8D72A6A4950710BLL;
  unint64_t v153 = (v147 - ((2 * v147) & 0x8BEABEA89694C952) + 0x45F55F544B4A64A9) ^ v149 ^ 0xC8D72A6A4950710BLL;
  uint64_t v154 = v151 ^ v153 & (__ROR8__((v150 >> 38) ^ 0xE2AAF8192B2B27F8, 26) ^ 0x353601C75541F9B5);
  unint64_t v155 = ((v154 ^ 0xBB36EDD7F9521DD7) + 0x6DC4FB0BD4FFFF45) ^ ((v154 ^ 0xD6F216DC2DADE293) + 1);
  v154 ^= 0xE8ABF50FA29F4C3FLL;
  unint64_t v156 = (v155 - ((2 * v155) & 0x834C3858E19AA2A6) - 0x3E59E3D38F32AEADLL) ^ v154;
  unint64_t v157 = v156 - ((2 * v156 - 0x247609E856000178) & 0x9A929559C0AD09B4) - 0x44F1BA474AA97BE2;
  *((void *)&v150 + 1) = v157 ^ 0x1A;
  *(void *)&long long v150 = v157 ^ 0x4D494AACE05684C0;
  uint64_t v158 = ((v156 << 63) | 0x26A4A556702B426DLL) ^ (v157 >> 1) ^ (v150 >> 6);
  unint64_t v159 = (v158 + 0x4D494AACE05684C0 - ((2 * v158) & 0x9A929559C0AD09B4) + 26) ^ v157;
  unint64_t v160 = (((2 * v151) ^ 0xADE42DB85B5BC527) + (v151 ^ 0x290DE923D2521D6CLL)) & (v149 ^ 0x8D22753E021A15A2);
  unint64_t v161 = (v135 - ((2 * v135) & 0x4861DF04FCC0353ALL) - 0x5BCF107D819FE563) ^ v143;
  unint64_t v162 = ((v161 ^ 0xA430EF827E601A9DLL) << 45) ^ ((v161 ^ 0xA430EF827E601A9DLL) << 36) ^ v147 ^ __ROR8__(((v161 << 34) & 0xC000000000000000 | ((v161 ^ 0xA430EF827E601A9DLL) >> 30)) ^ __ROR8__(v161 ^ 0x4EBB2176E9BC7F05 ^ (((v161 >> 19) ^ 0x678C90CF111) - ((2 * ((v161 >> 19) ^ 0x678C90CF111)) & 0x1222C2692024) + 0x7D7D691161349012), 2) ^ 0xA6115EFD9A53B36ELL, 62);
  unint64_t v163 = (v151 ^ 0x290DE923D2521D6CLL) & (v138 ^ 0x894F104BB57B5136) ^ v162 ^ 0xE87B635F1624B3E6;
  unint64_t v164 = v163 ^ v138 ^ 0xB91D296D1D8121D5 ^ (v160 - ((2 * v160) & 0x9F5B8DB2AE0B1E38) - 0x30523926A8FA70E4);
  *((void *)&v150 + 1) = v164 ^ 0x5BE354A5BB0B2;
  *(void *)&long long v150 = v164 ^ 0x6000000000000000;
  uint64_t v165 = v164 ^ __ROR8__(v164, 39) ^ (v150 >> 61);
  unint64_t v166 = ((v162 ^ 0x3D9656FDEA6A2FLL ^ -(uint64_t)(v162 ^ 0x3D9656FDEA6A2FLL) ^ ((v162 ^ 0xE87B635F1624B3E6)
                                                                              + 0x17B90AF614312637))
        + 0x17B90AF614312636) & (v138 ^ 0x76B0EFB44A84AEC9) ^ v153;
  unint64_t v167 = v166 ^ 0x2DB5B6AF87F64351 ^ ((v166 ^ 0x2DB5B6AF87F64351) >> 7) ^ ((v166 ^ 0x2DB5B6AF87F64351) << 23) ^ (((v166 ^ 0x2DB5B6AF87F64351) >> 41) | ((v166 ^ 0x2DB5B6AF87F64351) << 57));
  unint64_t v168 = (((v162 ^ 0xE87B635F1624B3E6) & ~v153)
        - ((2 * ((v162 ^ 0xE87B635F1624B3E6) & ~v153)) & 0x8BEABEA89694C952)
        + 0x45F55F544B4A64A9) ^ v152;
  unint64_t v169 = (v168 - ((2 * v168) & 0x834C3858E19AA2A6) - 0x3E59E3D38F32AEADLL) ^ v154;
  unint64_t v170 = v169 ^ (v169 << 54) ^ (v169 << 47) ^ (v169 >> 10) ^ (v169 >> 17);
  *(void *)&long long v150 = __ROR8__(__ROR8__(v163, 61) ^ 0x500CB82D79BEE91BLL, 3);
  unint64_t v171 = (((v166 ^ (unint64_t)v150) >> 19) ^ ((v166 ^ (unint64_t)v150) >> 28) | ((v166 ^ (unint64_t)v150) << 45)) ^ 0x21278C61855392E3;
  unint64_t v172 = v166 ^ v150 ^ ((v166 ^ (unint64_t)v150) << 36) ^ v167 ^ (v171
                                                                       - ((2 * v171) & 0x8AF98475612DA7D0)
                                                                       + 0x457CC23AB096D3E8);
  uint64_t v173 = v172 ^ 0x6251E5BC04D7DAD4;
  uint64_t v174 = v170 ^ 0x45F27F17E3D2B5A3 ^ (v167 - ((2 * v167) & 0x31B6F708C04C031CLL) - 0x6724847B9FD9FE72);
  unint64_t v175 = (v172 ^ 0x9DAE1A43FB28252BLL) & (v165 ^ 0xA9109542E9BBBCELL) ^ v174;
  unint64_t v176 = v159 & (v165 ^ 0xF56EF6ABD1644431) ^ v172 ^ 0x6251E5BC04D7DAD4;
  *((void *)&v150 + 1) = v176 ^ v175 ^ 0x62F93;
  *(void *)&long long v150 = v176 ^ v175 ^ 0x69309AC4CA80000;
  uint64_t v177 = v176 ^ v175 ^ 0x1206A3952446591BLL ^ (((v150 >> 19) ^ ((v176 ^ v175) << 36) ^ 0xCAE2F93000000000)
                                             - 2
                                             * (((v150 >> 19) ^ ((v176 ^ v175) << 36) ^ 0xCAE2F93000000000) & 0x1495AA3968E876BELL ^ (v150 >> 19) & 0x36)
                                             + 0x1495AA3968E87688);
  uint64_t v178 = (v177 ^ -v177 ^ ((((v176 ^ v175) >> 28) ^ 0x69309AC4) - (v177 ^ ((v176 ^ v175) >> 28) ^ 0x69309AC4)))
       + (((v176 ^ v175) >> 28) ^ 0x69309AC4);
  unint64_t v179 = v178 + v39 - ((2 * v178) & 0x2526C4C79D02092ELL);
  LOBYTE(v178) = *(unsigned char *)(a19 + (v179 ^ 0xD1));
  *a27 = BYTE1(v179) ^ 4;
  a5[5] = ((v178 ^ 0x94) >> 6) | (4 * (v178 ^ 0x94));
  uint64_t v180 = (v179 >> 12) & 0xF0 | (v179 >> 20) & 0xF;
  *a28 = (*(unsigned char *)(v40 + (v180 ^ 0xE6)) ^ 0xA1)
       + (v180 ^ 0x53)
       + (v180 ^ 0xC6)
       - 2 * (((v180 ^ 0x53) + (v180 ^ 0xC6)) & (*(unsigned char *)(v40 + (v180 ^ 0xE6)) ^ 0xA1))
       - 122;
  LOBYTE(v180) = *(unsigned char *)(a19 + (BYTE3(v179) ^ 0x88)) ^ 0x94;
  *a29 = (v180 >> 6) | (4 * v180);
  unint64_t v181 = (v159 - ((2 * v159) & 0xA97E211E0A589B2ALL) - 0x2B40EF70FAD3B26BLL) ^ v165 ^ 0xDE2E19DB2BB7F65BLL;
  unint64_t v182 = (((v170 ^ 0xDD29049383F4B42DLL) & ~v181 ^ v176)
        - ((2 * ((v170 ^ 0xDD29049383F4B42DLL) & ~v181 ^ v176)) & 0xA97E211E0A589B2ALL)
        - 0x2B40EF70FAD3B26BLL) ^ v165 ^ 0xDE2E19DB2BB7F65BLL;
  *(void *)&long long v150 = __ROR8__((v182 >> 13) & 0x7000000000000 ^ __ROR8__(v182 ^ 0x3BC357325A03A2A9 ^ (((8 * v182) ^ (v182 << 25) ^ 0xBF0681A6CFCC6AD0)- 2* (((8 * v182) ^ (v182 << 25) ^ 0xBF0681A6CFCC6AD0) & 0x59C05965D57A2FF8 ^ (8 * v182) & 8)+ 0x59C05965D57A2FF3), 16) ^ 0x59AF12027FFB7224, 48);
  uint64_t v183 = (v150 ^ -(uint64_t)v150 ^ (((v182 >> 39) ^ 0xC4061C) - (v150 ^ (v182 >> 39) ^ 0xC4061C)))
       + ((v182 >> 39) ^ 0xC4061C);
  LODWORD(v182) = *(unsigned __int8 *)(a16
                                     + ((((v179 >> 31) & 0xB8 ^ 0x80) + (BYTE4(v179) ^ 0xBF)) ^ 0x77));
  DWORD1(v150) = (v182 >> 6) ^ 0x7F ^ -((v182 >> 6) ^ 0x7F) ^ (((v182 >> 6) | (8 * v182))
                                                                                         - 127);
  LODWORD(v150) = (DWORD1(v150) + 4 * v182) << 24;
  a5[1] = v183 ^ 0xAC;
  a24[6] = (BYTE6(v179) ^ 0x93) + (~(2 * (BYTE6(v179) ^ 0x93)) | 0xA1) + 48;
  a5[4] = BYTE2(v183) ^ 0x24;
  *a30 = (unint64_t)v150 >> 26;
  unint64_t v184 = v181 ^ (v170 ^ 0x22D6FB6C7C0B4BD2) & v167;
  unint64_t v185 = (v184 >> 1) ^ (v184 >> 6) ^ ((v184 << 58) ^ 0xB800000000000000) & 0xE7FFFFFFFFFFFFFFLL ^ (((v184 << 58) ^ 0xB800000000000000) & 0x1800000000000000 ^ v184 & 0x183B3BDBC4516A26 | v184 & 0xE7C4C4243BAE95D9 ^ (v184 << 63));
  a24[12] = (BYTE3(v183) ^ 0x72) - ((2 * (BYTE3(v183) ^ 0x72)) & 0x5E) + 47;
  *(unsigned char *)(a26 + 29) = HIBYTE(v179) ^ 0x92;
  a24[13] = (BYTE5(v179) ^ 0x62) - ((2 * (BYTE5(v179) ^ 0x62)) & 0x5E) + 47;
  a6[6] = (v183 ^ 0x12027FFB722459ACuLL) >> ((v179 >> 20) & 8) >> (~(v179 >> 20) & 8);
  LODWORD(v163) = *(unsigned __int8 *)(a16 + (((BYTE4(v183) ^ 0xFB) - 36) ^ 0x77));
  a6[4] = BYTE6(v183) ^ 2;
  *a5 = HIBYTE(v183) ^ 0x12;
  a6[2] = ((unsigned __int16)((v184 >> 1) ^ (v184 >> 6) ^ v184) >> 8) ^ 5;
  *a31 = BYTE5(v183) ^ 0x7F;
  uint64_t v186 = ((v184 ^ v173 & ~v174) - ((2 * (v184 ^ v173 & ~v174)) & 0x31B6F708C04C031CLL) - 0x6724847B9FD9FE72) ^ v170 ^ 0x45F27F17E3D2B5A3;
  unint64_t v187 = v186
       - ((2 * v186) & 0x9E2B77E5823BC0A6)
       + 0x4F15BBF2C11DE053
       - ((2 * (v186 - ((2 * v186) & 0x9E2B77E5823BC0A6) + 0x4F15BBF2C11DE053)) & 0xE34878B89ECAA2F2)
       - 0xE5BC3A3B09AAE87;
  unint64_t v188 = v175 ^ (v175 << 23) ^ ((v175 >> 7) ^ (v175 >> 41) | (v175 << 57));
  a5[2] = v185 ^ 0xDB;
  *a6 = ((((v163 >> 6) | (4 * v163)) ^ 0x7F) >> 2) | ((((v163 >> 6) | (4 * v163)) ^ 0x7F) << 6);
  unint64_t v189 = v187 ^ (v187 << 47) ^ (v187 >> 10) ^ (v187 << 54);
  unint64_t v190 = v189 ^ (v187 >> 17);
  LOBYTE(v163) = *(unsigned char *)(a15
                          + (((BYTE2(v185) ^ 0x76) + (BYTE2(v185) ^ 0xFFFFFFAA) + 1) ^ 0xFFFFFFFE)
                          + (BYTE2(v185) ^ 0x76));
  *a32 = BYTE3(v185) ^ 0x87;
  a5[3] = BYTE6(v185) ^ 0x5D;
  LOBYTE(v182) = (v163 ^ 0xF2 ^ (16 * v163) & 0x40) & 7 ^ 0x35 ^ ((unint64_t)((v163 ^ 0xF2 ^ (16 * v163) & 0x40) >> 3) << ((v183 ^ 0xAC) & (v183 ^ 0x50)) << ((v183 ^ 0xAC) & (v183 ^ 0x50) ^ 3));
  a5[11] = v190 ^ 0x9F;
  *(unsigned char *)(a26 + 28) = BYTE5(v185) ^ 0x22;
  a5[13] = ((v182 >> 3) | (32 * v182)) ^ 0xA6;
  *a21 = BYTE2(v190) ^ 0x58;
  a24[8] = (HIBYTE(v185) ^ 0xA1) - ((2 * (HIBYTE(v185) ^ 0xA1)) & 0x5E) + 47;
  uint64_t v191 = (v190 >> 20) & 0xF0 | (v190 >> 28);
  a24[17] = (BYTE4(v185) ^ 0x3C) - ((2 * (BYTE4(v185) ^ 0x3C)) & 0x5E) + 47;
  a24[11] = (BYTE1(v190) ^ 0xAF) - ((2 * (BYTE1(v190) ^ 0xAF)) & 0x5E) + 47;
  LOBYTE(v163) = (v191 ^ 0xBA) + (v191 ^ 0x2F);
  LOBYTE(v191) = *(unsigned char *)(v40 + (v191 ^ 0x9A));
  *(unsigned char *)a26 = BYTE6(v189) ^ 0x64;
  *a33 = BYTE5(v190) ^ 0xAD;
  *(unsigned char *)(a26 + 15) = ((v175 ^ (v175 << 23) ^ (v175 >> 7) ^ (v175 >> 41)) >> 24) ^ 0x79;
  a24[19] = v175 ^ (v175 >> 7) ^ (v175 >> 41) ^ 0xBD;
  a6[5] = ((unsigned __int16)(v175 ^ (v175 >> 7) ^ (v175 >> 41)) >> 8) ^ 0x3D;
  a5[8] = ((v175 ^ (v175 << 23) ^ (v175 >> 7) ^ (v175 >> 41)) >> 16) ^ 3;
  a24[18] = (v191 ^ v163 ^ 0xA1) - ((2 * (v191 ^ v163 ^ 0xA1) + 12) & 0x5E) - 75;
  a5[6] = BYTE4(v190) ^ 0x81;
  a6[7] = HIBYTE(v189) ^ 7;
  LOBYTE(v189) = *(unsigned char *)(a19 + (BYTE4(v188) ^ 0x19)) ^ 0x94;
  *(unsigned char *)(a26 + 14) = BYTE5(v188) ^ 0x49;
  a6[3] = HIBYTE(v188) ^ 0xBE;
  a6[1] = BYTE6(v188) ^ 0x75;
  *(unsigned char *)(a26 + 16) = (v189 >> 6) | (4 * v189);
  *(_DWORD *)(a26 + 4) = a17 - 2011036400;
  JUMPOUT(0x100059E88);
}

uint64_t sub_100059F0C@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, int a4@<W7>, uint64_t a5@<X8>)
{
  *(_DWORD *)(*a3 + 4 * (v6 + v5)) = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t))(a5
                                                     + 8
                                                     * (((v10 == ((v9 - 591) ^ v8) + v7) * (((v9 - 591) ^ a4) - 15)) ^ (v9 - 591))))(a1, 3840062113);
}

uint64_t sub_100059F5C@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, int a4@<W8>)
{
  return sub_100073D50(a1, 0, a3 + 900, *(_DWORD *)(*v5 + 4 * (a2 - 21856197)), v4, a4);
}

uint64_t sub_100059F8C()
{
  return sub_100059FA4();
}

uint64_t sub_100059FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,unsigned int a27)
{
  return (*(uint64_t (**)(void))(v29 + 8 * v27))((v28 ^ 0x200005DC) & a27);
}

uint64_t sub_10005A02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x55D5CC6D86BC0F27];
  a14 = (831981571 * ((2 * (&a13 & 0x65541590) - &a13 + 447474284) ^ 0x830A3A48)) ^ 0x8F;
  uint64_t v17 = (*(uint64_t (**)(unint64_t **))(v16 + 18816))(&a13);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((639 * (a15 == v15)) ^ 0x5CE)))(v17);
}

void sub_10005A0F0()
{
}

uint64_t sub_10005A10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((2255 * (a4 + 1 == v5 + 20)) ^ v4)))();
}

uint64_t sub_10005A1E8()
{
  int v2 = *(_DWORD *)(STACK[0x210] + 56);
  *(_DWORD *)(STACK[0x210] + 56) = v2 + 1;
  return (*(uint64_t (**)(void))(v0 + 8
                                   * ((2459 * (v2 - 1837280498 < (((v1 - 813) | 0x90) ^ 0xFFFFFF6B))) ^ (v1 - 669))))();
}

void sub_10005A23C(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(a1 + 8) - 0x5F548590D8AA63B5) = a2;
  _DWORD *v3 = v2;
  JUMPOUT(0x100038F4CLL);
}

uint64_t sub_10005A260(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(*(void *)(v8 - 0x5E8E72AB319E4281) + 4 * (((375 * (v5 ^ 0x544)) ^ (v4 + 934)) + v6)) = a4;
  return (*(uint64_t (**)(void))(v7 + 8 * (int)((19 * ((v6 + v4) >> 31)) ^ v5)))();
}

void sub_10005A2B8()
{
  STACK[0x2C8] = v0;
  *(_DWORD *)(STACK[0x5A8] + ((LODWORD(STACK[0x304]) + v1) & 0xFFFFFFFC)) = v2;
  JUMPOUT(0x10003C040);
}

void sub_10005A2F8()
{
  STACK[0x328] = *(void *)(v0 + 8 * (v1 - 814));
  JUMPOUT(0x100073674);
}

uint64_t sub_10005A318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(v18 - 120) = v16 + 69008221 * ((v18 - 144) ^ 0xD3A2520A) + 575;
  *(void *)(v18 - 136) = v13;
  *(void *)(v18 - 128) = v13;
  *(void *)(v18 - 112) = v15;
  *(void *)(v18 - 144) = v14;
  (*(void (**)(uint64_t))(v17 + 8 * (v16 + 1588)))(v18 - 144);
  int v19 = 2078219279 * ((((v18 - 144) | 0xFA4A981B) - (v18 - 144) + ((v18 - 144) & 0x5B567E0)) ^ 0x20B00E6F);
  *(_DWORD *)(v18 - 140) = -1131453695 - v19 + v12;
  *(void *)(v18 - 136) = a12;
  *(_DWORD *)(v18 - 128) = (v16 + 961) ^ v19;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v16 + 1604)))(v18 - 144);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * (((*(_DWORD *)(v18 - 144) == -56550210) * ((168 * (v16 ^ 0x329)) ^ 0x32C)) ^ v16)))(v20);
}

uint64_t sub_10005A41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  HIDWORD(v46) = HIDWORD(a13) - 849014077;
  v44.i64[0] = 0x7777777777777777;
  v44.i64[1] = 0x7777777777777777;
  LODWORD(v46) = 24021544;
  return sub_100072BB0(1476395008, v44, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, v46,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44);
}

uint64_t sub_10005A484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((*(_DWORD *)(v7 + 48 * (v10 + a6) + 36) == v10)
                                * (v9 + v6 + 616 + ((v6 - 2102607) & 0x397EDFEE) - 1552)) | v6)))();
}

void sub_10005A4E0()
{
}

uint64_t sub_10005A4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, uint64_t a15)
{
  *int v16 = a10 ^ v17;
  a14 = (v20 + v19) ^ (69008221 * (((&a14 | 0xE7563FA8) - (&a14 & 0xE7563FA8)) ^ 0x34F46DA2));
  a15 = a12;
  (*(void (**)(unsigned int *))(v18 + 8 * (v20 ^ (v15 - 1197))))(&a14);
  return sub_100056A88();
}

void sub_10005A570(_DWORD *a1@<X8>)
{
  unsigned int v4 = *v1 + v2 - ((2 * (*v1 + v2) + 805229328) & 0x24306250) - 1441293648;
  unsigned char *v5 = (HIBYTE(v4) ^ 0x12) - (((HIBYTE(v4) ^ 0x12) << ((v3 - 19) ^ 0xB6)) & 0xEE) + 119;
  v5[1] = (BYTE2(v4) ^ 0x18) - ((2 * (BYTE2(v4) ^ 0x18)) & 0xEF) + 119;
  v5[2] = (BYTE1(v4) ^ 0x31) - ((2 * (BYTE1(v4) ^ 0x31)) & 0xEF) + 119;
  v5[3] = v4 ^ 0x5F;
  v1[1] = *a1;
}

uint64_t sub_10005A64C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A6CC(a4 - 0x5E8E72AB319E4281, a1 - 0x5E8E72AB319E4281, 3139, 0xD6C163B36E702EDBLL, 0x6BFEDFCDB9AFDD35, 0x1735FBA6ALL, 0xBD3FBC7ED7DFF3F0, 58);
}

uint64_t sub_10005A6CC(void *a1, void *a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v19 = 4 * (v17 + v14);
  int v20 = v8 + a4 + (*(_DWORD *)(*a1 + v19) ^ v11);
  *(_DWORD *)(*a2 + v19) = v20 + v15 - ((v20 << ((v13 ^ a3) - 71)) & v18);
  int v21 = v17 + 1 + v9;
  BOOL v23 = v21 > v10 || v21 < v12;
  return (*(uint64_t (**)(void))(v16 + 8 * ((v23 * a8) ^ v13)))();
}

uint64_t sub_10005A740@<X0>(int a1@<W8>)
{
  uint64_t v2 = 4 * (v1 - 1332704780);
  char v3 = (int *)(STACK[0x2C0] + v2);
  int v4 = *v3;
  LODWORD(v3) = -1805087677
              * ((*(_DWORD *)(*(void *)STACK[0x2A8] + (*(int *)STACK[0x2A0] & 0xFFFFFFFFC4F4DE60)) ^ v3) & 0x7FFFFFFF);
  LODWORD(v3) = v3 ^ (v3 >> 16);
  *(_DWORD *)(STACK[0x2C8] + v2) ^= v4 ^ *((_DWORD *)*(&off_10018D100 + a1 - 1225)
                                         + ((-1805087677 * v3) >> 24)) ^ *((_DWORD *)*(&off_10018D100 + a1 - 1301)
                                                                                               + ((-1805087677 * v3) >> 24)
                                                                                               + 4) ^ *((_DWORD *)*(&off_10018D100 + (a1 ^ 0x55E)) + ((-1805087677 * v3) >> 24) - 2) ^ (v3 * ((a1 - 476) ^ 0x8C430386)) ^ (-1805087677 * v3) ^ (-697817803 * ((-1805087677 * v3) >> 24));
  return sub_100067D70();
}

void sub_10005A82C()
{
}

uint64_t sub_10005A834(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  *(int8x8_t *)(v12 + v9) = veor_s8(*(int8x8_t *)(a9 + v9), a1);
  return (*(uint64_t (**)(void))(v11 + 8 * (((v13 == 0) * a8) ^ v10)))();
}

uint64_t sub_10005A868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  int v23 = ((v21 + 883) ^ 0xADC24903) + a21 - *(_DWORD *)(a2 + 4) == 2145959035;
  return (*(uint64_t (**)(void))(v22 + 8 * ((v23 << 6) | (v23 << 9) | v21)))();
}

uint64_t sub_10005A8B0@<X0>(int a1@<W0>, int8x16_t *a2@<X1>, int a3@<W8>, int8x16_t a4@<Q0>, int8x16_t a5@<Q1>)
{
  *(int8x16_t *)(v8 + a3 + 16 + (v9 ^ (v5 + 774))) = vaddq_s8(vsubq_s8(*a2, vandq_s8(vaddq_s8(*a2, *a2), a4)), a5);
  return (*(uint64_t (**)(void))(v10 + 8 * (((v6 == 16) * a1) ^ v7)))();
}

void sub_10005A8BC(uint64_t a1)
{
  int v1 = 3804331 * ((-2 - ((a1 | 0xD3EE21B) + (~a1 | 0xF2C11DE4))) ^ 0x8C143812);
  __asm { BRAA            X14, X17 }
}

uint64_t sub_10005A990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((462 * (a7 + ((a6 - 795) ^ 0x7B4 ^ (a5 + 100)) < 0xFFFFFFF0)) ^ (a6 - 582))))();
}

uint64_t sub_10005A9D0(__n128 a1)
{
  a1.n128_u16[0] = 30583;
  a1.n128_u8[2] = 119;
  a1.n128_u8[3] = 119;
  a1.n128_u8[4] = 119;
  a1.n128_u8[5] = 119;
  a1.n128_u8[6] = 119;
  a1.n128_u8[7] = 119;
  return sub_10005AA08(229, a1);
}

uint64_t sub_10005AA08@<X0>(int a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)(v7 + a3 + a2 + v4) = a4;
  return (*(uint64_t (**)(void))(v9 + 8 * (((v8 + v4 == v6) * a1) ^ v5)))();
}

uint64_t sub_10005AA34(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (((8 * ((a6 + 1 + v6) < 0x10)) | (16 * ((a6 + 1 + v6) < 0x10))) ^ (a1 - 608))))();
}

uint64_t sub_10005AB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,int a60,int a61)
{
  *(_DWORD *)(v61 - 128) = a58 ^ 0xC292B33;
  *(_DWORD *)(v61 - 140) = a60 ^ 0x44A39314;
  *(_DWORD *)(v61 - 132) = a61 ^ 0xCFCAAEF5;
  *(_DWORD *)(v61 - 136) = a59 ^ 0x9501F8FF;
  return sub_100076DA8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

uint64_t sub_10005ABA4@<X0>(uint64_t a1@<X4>, char a2@<W8>)
{
  *(void *)(a1 + v3 + v4) = v6;
  return (*(uint64_t (**)(void))(v5 + 8 * ((2985 * (((v2 + 782) ^ 0x5BCLL) == (a2 & 0x38))) ^ v2)))();
}

void sub_10005ABEC()
{
}

uint64_t sub_10005ABF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void, void))(v9
                                                   + 8
                                                   * (int)(((((a5 + 1615496118) | 0x8A110090) ^ (v8 + 1519))
                                                          * ((v5 & 0x18) == 0)) ^ a5)))((v6 - v7), (a5 + 1497));
}

uint64_t sub_10005AC3C(int *a1)
{
  unsigned int v2 = a1[1] - 1178560073 * (((a1 | 0xB64875FC) - (a1 & 0xB64875FC)) ^ 0x517D5794);
  uint64_t result = (*(uint64_t (**)(char *, void (*)()))((char *)*(&off_10018D100 + (int)(v2 ^ 0xE1F26977))
                                                         + 8 * (int)(v2 + 504209426)
                                                         - 4))((char *)*(&off_10018D100 + (int)(v2 ^ 0xE1F26974)) - 12, sub_10003CD34);
  int v4 = *(_DWORD *)*(&off_10018D100 + (int)(v2 ^ 0xE1F269F4));
  if (result) {
    int v4 = 563395160;
  }
  *a1 = v4;
  return result;
}

void sub_10005AD14()
{
}

void sub_10005AD4C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a1 + a2) = 1758911813;
  sub_100070D44();
}

uint64_t sub_10005AD5C()
{
  uint64_t v3 = (*(uint64_t (**)(void))(v0 + 8 * (v2 ^ 0xA5B)))();
  return (*(uint64_t (**)(uint64_t))(v0 + 8 * ((1684 * (v1 == ((4 * v2) ^ 0xFC4) - 563356310)) ^ (v2 + 78))))(v3);
}

uint64_t sub_10005ADAC@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((1438 * (*(_DWORD *)STACK[0x2B8] - 1892305836 < (a1 ^ 0x34Cu) - 798)) ^ a1)))();
}

void sub_10005ADF4()
{
  uint64_t v1 = (const float *)(v0 + 908);
  vld1q_dup_f32(v1);
  JUMPOUT(0x10005AE48);
}

void sub_10005AEF0(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X10, X17 }
}

uint64_t sub_10005AF38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((991
                                * (((((v3 - 1843605) & 0xF2BEF7DB) + 189473806) & (2
                                                                                 * (*(unsigned __int8 *)(a2 + 2) - 38)))
                                 + ((*(unsigned __int8 *)(a2 + 2) - 38) ^ v4) == v4)) ^ v3)))();
}

uint64_t sub_10005AF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = v5 == ((((v6 - 1948) | 0x18) + 768) ^ 0x322);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                         + 8
                                                                                         * ((2 * v8) | (4 * v8) | v6)))(a1, a2, a3, a4, a5, 3037000498);
}

void sub_10005AFCC()
{
}

uint64_t sub_10005AFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13
                                                                       + 8
                                                                       * ((110
                                                                         * (a13
                                                                          - 1296018759
                                                                          + ((v14 - 1708995121) & 0x65DD31FEu)
                                                                          + 816
                                                                          + 372 < 0xFFFFFFFB)) ^ (v14 + 1765))))(a1, a2, a3, a4);
}

uint64_t sub_10005B03C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((v1 - 1 >= 0) * ((v0 - 1895117942) & 0x70F535DE ^ 0x537)) ^ v0)))();
}

uint64_t sub_10005B084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (int)((((v6 & 0x18) == (((a6 - 518) | 0x14C) ^ 0x14E))
                                     * ((a6 + 1498028271) & 0xA6B5E59F ^ 0xA70)) ^ a6)))();
}

uint64_t sub_10005B0DC@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v10 = a2 + 1;
  unsigned char *v5 = ((v4 + v10 + (v6 ^ (a1 + 70))) ^ v7) * (v3 + v10);
  return (*(uint64_t (**)(void))(v9 + 8 * (((v10 == 91) * v8) ^ v2)))();
}

uint64_t sub_10005B0E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9 = *(void *)(v8 - 0x6BA7059072F2C1D3);
  int v10 = *(unsigned __int8 *)(v9 + (v7 - 218024906)) ^ 0x77;
  int v11 = ((*(unsigned __int8 *)(v9 + (v7 - 218024909)) ^ 0x77777777) << 24) | ((*(unsigned __int8 *)(v9 + ((a5 + 2029) ^ 0xF3013CC5) + v7) ^ 0x77) << 16) | ((*(unsigned __int8 *)(v9 + (v7 - 218024907)) ^ 0x77) << 8) | v10;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((30
                                * (((v6 + v11 - 2 * (v11 & 0x5E6BE0EF ^ v10 & 9) + 0x1000000) & 0xFFFFFF ^ 0x6BE0E6)
                                 - (a2
                                  + *(_DWORD *)(a1 + 20)) == -1166213644)) ^ a5)))();
}

uint64_t sub_10005B1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  return (*(uint64_t (**)(void))(v20
                              + 8
                              * ((3425 * ((a19 & 0xFFFFFFF0) == ((v19 - 1442389339) & 0x1C9A565E ^ 0x33A16256))) ^ (v21 + v19 + 316))))();
}

uint64_t sub_10005B21C()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((v2 + ((v2 - 306) | 0x50A) + 504) * (v0 == v1)) ^ v2)))();
}

uint64_t sub_10005B24C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((*(_DWORD *)(*a1 + v4) != v2) * (((v3 - 1237) | 0x4E0) - 1748)) ^ v3)))();
}

uint64_t sub_10005B280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(uint64_t (**)(void, uint64_t, uint64_t))(v5 + 8
                                                               * (((((v4 ^ 0x388) + 562) ^ 0x78C) * (v3 > 0)) ^ v4));
  return v6(v6, a2, a3);
}

uint64_t sub_10005B2E8()
{
  return sub_10005B338();
}

uint64_t sub_10005B338@<X0>(int a1@<W8>, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = *(void *)(v6 - 0x6BA7059072F2C1D3);
  unsigned int v9 = *v5 + a1;
  *(unsigned char *)(v8 + v9) = (HIBYTE(v4) ^ 0x14) - ((2 * (HIBYTE(v4) ^ 0x14)) & 0xEF) + 119;
  *(unsigned char *)(v8 + v9 + 1) = (BYTE2(v4) ^ 0xB2) - ((2 * (BYTE2(v4) ^ 0xB2)) & 0xEF) + 119;
  *(unsigned char *)(v8 + v9 + 2) = (BYTE1(v4) ^ 0x67) - ((2 * (BYTE1(v4) ^ 0x67)) & 0xEF) + 119;
  *(unsigned char *)(v8 + v9 + 3) = v4 ^ 0xE1;
  uint64_t v10 = *(void *)(v6 - 0x6BA7059072F2C1D3);
  LODWORD(v8) = v7 - ((2 * v7 + 912538440) & 0x24306250) + 222973644;
  unsigned int v11 = ((2 * (a1 + *v5 + 4)) & 0x77EB79FE) + ((a1 + *v5 + 4) ^ 0x3BF5BCFF) - 1005960447;
  *(unsigned char *)(v10 + v11) = (BYTE3(v8) ^ 0x12) - ((2 * (BYTE3(v8) ^ 0x12)) & 0xEF) + 119;
  *(unsigned char *)(v10 + v11 + 1) = (BYTE2(v8) ^ 0x18) - ((2 * (BYTE2(v8) ^ 0x18)) & 0xEF) + 119;
  *(unsigned char *)(v10 + v11 + 2) = (BYTE1(v8) ^ 0x31) - ((2 * (BYTE1(v8) ^ 0x31)) & 0xEF) + 119;
  *(unsigned char *)(v10 + v11 + 3) = (v7 - ((2 * v7 + 72) & 0x50) - 52) ^ 0x5F;
  _DWORD *v5 = a4;
  return sub_10005B490();
}

uint64_t sub_10005B4D0()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((63 * (v2 + v0 + ((v1 - 1314091996) & 0x4E537257u) + 269027255 > 7)) ^ v1)))();
}

uint64_t sub_10005B534@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((((5 * v3) + 4 == v1 - 1704253533) ^ (a1 + 28)) & 1)
                                * (74 * (a1 ^ 0xDA) - 754)) ^ a1)))();
}

uint64_t sub_10005B58C()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((((LODWORD(STACK[0x2D4]) - 814) | 0x300) - 673) * (v1 > 0x7AF60F81)) ^ (LODWORD(STACK[0x2D4]) - 46))))();
}

uint64_t sub_10005B5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned int a8@<W8>)
{
  int v12 = v9 + 3;
  if ((a8 & 0x20) != 0) {
    int v12 = v9;
  }
  LODWORD(STACK[0x548]) = v12;
  if (v8 > -1015098471)
  {
    if (v8 == -1015098470 || v8 == 1970840504) {
      goto LABEL_15;
    }
    int v13 = -323529449;
  }
  else
  {
    if (v8 == -2013225045 || v8 == -1404339823) {
      goto LABEL_15;
    }
    int v13 = -1284903763;
  }
  if (v8 != v13)
  {
    if ((a8 & 2) != 0) {
      int v14 = 56245772;
    }
    else {
      int v14 = 56245773;
    }
    LODWORD(STACK[0x47C]) = v14;
    LODWORD(STACK[0x298]) = 1295906331;
    LODWORD(STACK[0x2A0]) = 2041129940;
    JUMPOUT(0x100036AE0);
  }
LABEL_15:
  *(_OWORD *)&STACK[0x1840] = xmmword_10016DF00;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8 * (int)(((v11 - 687) * ((a8 >> 5) & 1)) ^ (v11 + 1276))))(a1, a2, a3, a4, a5, a6, a7, 563395391);
}

uint64_t sub_10005B718@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,unsigned int *a57)
{
  uint64_t v65 = (*(uint64_t (**)(void, void, void, void, unint64_t *, uint64_t, uint64_t, unint64_t *))(v60 + 8 * (v61 + 1217)))(*(unsigned int *)STACK[0x210], (v57 + a1), a40 ^ 0x9A43286E, (*(_DWORD *)(STACK[0x210] + 52) - 1691477460), &STACK[0x5B0], v58, v59, &STACK[0x1860]);
  int v67 = (v65 ^ 0x7FFB3FF4) - 106042400 + (((v61 - 416) ^ 0xFFF67CC6) & (2 * v65));
  if (v67 == -1985401897) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v60
  }
                                                       + 8
                                                       * ((55
                                                         * (LODWORD(STACK[0x298]) - 1295906331 < (((v63 ^ 0x286) + 1901) ^ 0x916u))) ^ (v63 + 1442))))(v65, v66);
  if (v67 != 2041129940)
  {
    LODWORD(STACK[0x2A0]) = v67;
    int v68 = 268847287 * ((((v64 - 192) | 0xB5A806F) - (v64 - 192) + ((v64 - 192) & 0xF4A57F90)) ^ 0xF4F09147);
    *(_DWORD *)(v64 - 176) = v68 + v63 + 227;
    *(void *)(v64 - 184) = a22;
    *(_DWORD *)(v64 - 192) = (v67 - ((2 * v67 + 212707416) & 0xBCD7C1CC) + 1690481938) ^ v68;
    (*(void (**)(uint64_t))(v60 + 8 * (v63 ^ 0xA3C)))(v64 - 192);
    JUMPOUT(0x100036AE0);
  }
  (*(void (**)(void, uint64_t, uint64_t))(v60 + 8 * (v63 ^ 0xA73)))(*a57, v58, v59);
  STACK[0x380] = 0;
  LODWORD(STACK[0x500]) = 0;
  unint64_t v70 = STACK[0x4E8];
  unsigned int v71 = STACK[0x2C8] & 0xDB97BE62 ^ 0x10861040;
  int v72 = 3 * (v63 ^ 0x153) + *(_DWORD *)(STACK[0x210] + 52) + 11610085;
  int v73 = 3804331 * ((((2 * (v64 - 192)) | 0x4D2722E6) - (v64 - 192) + 1500278413) ^ 0xD846B485);
  int v74 = v73 + (LODWORD(STACK[0x39C]) ^ 0xEDF61F7E) + ((2 * LODWORD(STACK[0x39C])) & 0xDBEC3EFC) + 2146299790;
  *(_DWORD *)(v64 - 168) = v63 - v73 - 757;
  *(_DWORD *)(v64 - 164) = v74;
  *(_DWORD *)(v64 - 152) = (a40 & 0x7FFFFFFF ^ 0x7788F75F) - v73 + v71 + 2008495615;
  *(_DWORD *)(v64 - 192) = v72 ^ v73;
  *(void *)(v64 - 160) = &STACK[0x1860];
  *(void *)(v64 - 184) = v62;
  *(void *)(v64 - 176) = v70;
  uint64_t v75 = (*(uint64_t (**)(uint64_t))(v60 + 8 * (v63 + 1664)))(v64 - 192);
  int v76 = *(_DWORD *)(v64 - 188);
  LODWORD(STACK[0x4AC]) = v76;
  return (*(uint64_t (**)(uint64_t))(v60 + 8 * ((3757 * (v76 == -563355418)) ^ (v63 + 846))))(v75);
}

uint64_t sub_10005BA50()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((2 * (*v0 - 42)) & 0xEDB53FFE) + ((*v0 - 42) ^ (v1 + 1994039084)) == 1994039295)
                                * ((v1 + 138) ^ 0x16C)) ^ (v1 + 2))))();
}

uint64_t sub_10005BAB8()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (((STACK[0x240] & 0x3268A65B ^ 0x41D) * (v1 == v3)) ^ (v2 - 743))))();
}

void sub_10005BAF0(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X4>, int a4@<W6>, char a5@<W7>, uint64_t a6@<X8>)
{
  uint64_t v11 = ((((v9 | a4) + 259) | 0x200) ^ a2) + v8;
  *(unsigned char *)(a1 + v11 + v10) = *(unsigned char *)(a3 + v11) ^ *(unsigned char *)(v6 + (v11 & 0xF)) ^ *(unsigned char *)((v11 & 0xF) + v7 + 1) ^ *(unsigned char *)(a6 + (v11 & 0xF)) ^ ((v11 & 0xF) * a5) ^ 0x77;
  JUMPOUT(0x10004A4A0);
}

uint64_t sub_10005BB44@<X0>(int a1@<W6>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  *(&a17 + a2 - 301084339) = 119;
  return (*(uint64_t (**)(void))(v18 + 8 * ((591 * ((unint64_t)(a2 - 301084338) < 0x38)) ^ (a1 + v17 + 444))))();
}

uint64_t sub_10005BB8C(int a1)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((((v1 & 0x18) == 0) ^ (a1 + 1)) & 1) * (37 * (a1 ^ 0x336) - 804)) ^ a1)))();
}

void sub_10005BBD4()
{
}

uint64_t sub_10005BBE4()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (((((v2 ^ 0x6FC) + 336) ^ 0xC56) * (v1 == 671088640)) ^ v2)))();
}

uint64_t sub_10005BC18@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((54 * (v1 != ((v2 + 868) ^ 0x6A5))) ^ v2)))();
}

void sub_10005BC44(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (268847287 * (((a1 | 0xE34F1B4D) - (a1 & 0xE34F1B4D)) ^ 0x1CE50A65));
  __asm { BRAA            X10, X17 }
}

uint64_t sub_10005BD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return (*(uint64_t (**)(void))(v11
                              + 8
                              * (((((a9 == v10) ^ v9 ^ 0xE5) & 1) * ((6 * (v9 ^ 0x84)) ^ 0x3A8)) ^ v9)))();
}

uint64_t sub_10005BD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, uint64_t a17, int a18)
{
  int v21 = v20 + 470;
  uint64_t v22 = v18[4];
  uint64_t v27 = v18[5];
  uint64_t v23 = v18[1];
  int v24 = v20 - 508;
  a18 = v24
      - 1543737703 * ((-377324932 - (&a15 | 0xE9827A7C) + (&a15 | 0x167D8583)) ^ 0x6889D5FF);
  a17 = a12;
  a15 = v23;
  (*(void (**)(uint64_t *))(v19 + 8 * (v21 + 921)))(&a15);
  a18 = v24 - 1543737703 * (&a15 ^ 0x7EF4507C);
  a15 = v22;
  a17 = a12;
  (*(void (**)(uint64_t *))(v19 + 8 * (v21 ^ 0xF9B)))(&a15);
  a16 = v21 + 268847287 * ((&a15 & 0xEDF895C2 | ~(&a15 | 0xEDF895C2)) ^ 0xEDAD7B15) + 77;
  a17 = v27;
  a15 = a12;
  uint64_t v25 = (*(uint64_t (**)(uint64_t *))(v19 + 8 * (v21 ^ 0xF53)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * (((a18 == -563355418) * ((v21 ^ 0x22A) - 702)) ^ v21)))(v25);
}

uint64_t sub_10005BEA4()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 5) - 13)))
                                 + ((*(unsigned __int8 *)(v2 + 5) - 13) ^ v0) == v0)
                                * (((v3 - 538) | 5) ^ 0xA92)) ^ v3)))();
}

uint64_t sub_10005BEE8()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((2714 * (v1 + 1 == v2 + 48)) ^ v0)))();
}

uint64_t sub_10005BFD8()
{
  int v3 = 235795823 * ((~((v2 - 152) | 0xAF2008FE) + ((v2 - 152) & 0xAF2008FE)) ^ 0xC472BE58);
  int v4 = (v0 - 2125639302) ^ v3;
  *(_DWORD *)(v2 - 152) = -235795823 * ((~((v2 - 152) | 0xAF2008FE) + ((v2 - 152) & 0xAF2008FE)) ^ 0xC472BE58);
  *(_DWORD *)(v2 - 120) = v0 - 2125639302 - v3 + 60;
  *(_DWORD *)(v2 - 116) = v4 ^ 0x33;
  *(_DWORD *)(v2 - 136) = v4;
  *(_DWORD *)(v2 - 132) = (v0 + 2021362464) ^ v3;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 + 1104)))(v2 - 152);
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * *(int *)(v2 - 148)))(v5);
}

uint64_t sub_10005C0E4@<X0>(int a1@<W8>)
{
  BOOL v4 = (*(uint64_t (**)(void, uint64_t))(v3 + 8 * (v1 ^ 0xA95u)))(a1 ^ v2, 2089196818) == 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v4 * (v1 ^ 0x718 ^ (v1 - 183) ^ 0x6D4)) ^ v1)))();
}

void sub_10005C140()
{
  LODWORD(STACK[0x3B8]) = 1704253533;
  JUMPOUT(0x100057A24);
}

uint64_t sub_10005C158(uint64_t a1, unsigned int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v32 = v28 + 1;
  *(_DWORD *)(a26 + 4 * v32) = v26;
  int v33 = v32 + a4 + a3;
  BOOL v34 = v33 < a5;
  BOOL v35 = v33 > v29;
  if (v30 > a2 != v34) {
    BOOL v36 = v34;
  }
  else {
    BOOL v36 = v35;
  }
  return (*(uint64_t (**)(void))(v31 + 8 * ((60 * v36) ^ v27)))();
}

uint64_t sub_10005C160(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((2299
                                * (((v5 + v3 - 201) & (2 * (*(unsigned __int8 *)(a2 + 5) - 242)))
                                 + ((*(unsigned __int8 *)(a2 + 5) - 242) ^ v4) == v4)) ^ v3)))();
}

uint64_t sub_10005C1A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  if (a13 < 0xCA171EDB != (a12 + 1940726764) < 0xCA171EDB) {
    BOOL v14 = (a12 + 1940726764) < 0xCA171EDB;
  }
  else {
    BOOL v14 = a12 + 1940726764 > a13;
  }
  return (*(uint64_t (**)(void))(v13 + 8 * ((!v14 * (((a3 + 767) | 2) - 762)) ^ (a3 + 2153))))();
}

void sub_10005C218()
{
}

uint64_t sub_10005C224()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((((*(void *)(v1 - 0x6BA7059072F2C1D3) == 0) ^ (29 * (v2 ^ 0x76))) & 1)
                                * ((214 * (v2 ^ 0x35F)) ^ 0x199)) ^ v2)))();
}

uint64_t sub_10005C298(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(void))(v11
                              + 8
                              * (((a11 - 1751760277 < (((a4 + 244) | 0x128) ^ 0x7FFFFA94u)) * ((2 * a4) ^ 0x11A)) ^ a4)))();
}

uint64_t sub_10005C2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  HIDWORD(a14) = v46 - 714728586;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v47 + 8 * (((4 * (((8 * (v46 ^ 0x46A) + 168) | 0x101) == 1313)) | (8 * (((8 * (v46 ^ 0x46A) + 168) | 0x101) == 1313))) ^ ((8 * (v46 ^ 0x46A) + 168) | 0x101))))(a1, v44 - 0x3BD3A467C7BE8E49, (unsigned __int16)(v45 - 11686 + ((8 * (v46 ^ 0x46A) + 168) | 0x101)), 1456, 1353, 1285, 1057, 215886268, a9, a10, &a44, (unint64_t)&a27 % 0x25 + 16, a13, a14, (v48 - 152) | 0xBD519F4144350A9FLL, v44 - 0x3BD3A467C7BE8E49, a17);
}

void sub_10005C4A0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) + 1178560073 * ((2 * (a1 & 0xDA2E353F) - a1 + 634505920) ^ 0xC2E4E8A8);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10005C54C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(unsigned char *)(v6 + (a4 - 941042785)) = *(unsigned char *)(v7 + (a4 - 941042785)) ^ 0x77;
  return (*(uint64_t (**)(void))(v8 + 8 * ((2188 * ((a5 ^ 0x308) + a4 - 928 == v5)) ^ a5)))();
}

uint64_t sub_10005C594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((503 * (((v6 == a5) ^ (v5 + 59)) & 1)) ^ v5)))();
}

void sub_10005C5C4()
{
}

uint64_t sub_10005C644(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5 + 8 * (((((v4 == a4) ^ (a2 + 32)) & 1) * (a2 - 2099)) ^ a2)))();
}

void sub_10005C674()
{
  *(_DWORD *)(v1 - 120) = v0 + 14;
  JUMPOUT(0x10005C774);
}

void sub_10005C7FC()
{
}

uint64_t sub_10005C808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37)
{
  if (a18 == 2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8 * ((1148 * (a37 != 1491164578)) ^ 0x307)))(a10, 560893864);
  }
  if (a18 != 1) {
    JUMPOUT(0x10005C984);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37
                                                                                + 8
                                                                                * ((497 * (a37 == 1491164578)) ^ 0x2F6)))(a1, 560893864, 3734074650, 560893865, a10);
}

void sub_10005C9C0()
{
}

uint64_t sub_10005C9C8(unsigned int a1, int a2, int a3)
{
  BOOL v12 = v9 > 0xD8A4DCDB;
  *(unsigned char *)(v11 + (a3 - 1515195389)) = *(unsigned char *)(v4 + (((_BYTE)a3 + 3) & 0xF)) ^ *(unsigned char *)(v3 + (a3 - 1515195389)) ^ *(unsigned char *)(v6 + (((_BYTE)a3 + 3) & 0xF)) ^ *(unsigned char *)(((a3 - 1515195389) & 0xFLL) + v5 + 1) ^ (((a3 + 3) & 0xF) * (115 * (v7 ^ 0xD8) + 75));
  if (v12 == a3 - 854911192 < v8) {
    BOOL v12 = a3 - 854911192 < a1;
  }
  return (*(uint64_t (**)(void))(v10 + 8 * ((v12 * a2) ^ v7)))();
}

uint64_t sub_10005CA68()
{
  BOOL v4 = v1 + 1417278704 > (int)(((v0 + 2024072073) & 0x875B1FDF) + ((v0 + 716) ^ 0xA57291))
    || v1 + 1417278704 < SLODWORD(STACK[0x2C8]);
  return (*(uint64_t (**)(void))(v2 + 8 * ((1324 * v4) ^ v0)))();
}

uint64_t sub_10005CAC8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  *(unsigned char *)(*v12 + (v11 + a6)) = *(unsigned char *)(*v12 + (v7 + 944 + a4 + v8));
  return (*(uint64_t (**)(void))(v10 + 8 * (((v6 == 989468002) * v9) ^ v7)))();
}

uint64_t sub_10005CB1C(uint64_t result)
{
  uint64_t v1 = 235795823 * (result ^ 0x8B0BAFE94AD4959);
  uint64_t v2 = *(void *)(result + 24);
  unint64_t v3 = v2 + v1;
  uint64_t v4 = *(void *)(result + 8);
  BOOL v5 = v2 == v4;
  BOOL v6 = v3 > v4 + v1;
  if ((*(_DWORD *)result + v1)) {
    BOOL v7 = v6;
  }
  else {
    BOOL v7 = v5;
  }
  BOOL v8 = !v7;
  uint64_t v9 = 36;
  if (!v8) {
    uint64_t v9 = 16;
  }
  *(_DWORD *)(result + 4) = *(_DWORD *)(result + v9) ^ v1 ^ (*(_DWORD *)(result + 32) + v1);
  return result;
}

uint64_t sub_10005CB98@<X0>(unsigned int a1@<W3>, int a2@<W5>, int a3@<W8>)
{
  BOOL v12 = a1 > v8;
  *(unsigned char *)(*v11 + (v3 + 1 + a2)) = 119;
  unsigned int v13 = v5 + v3 + 455;
  int v14 = v12 ^ (v13 < (v4 ^ (a3 - 66)));
  BOOL v15 = v13 < v7;
  if (!v14) {
    BOOL v12 = v15;
  }
  return (*(uint64_t (**)(void))(v10 + 8 * ((v12 * v9) ^ v6)))();
}

void sub_10005CBF4()
{
  uint64_t v0 = __chkstk_darwin();
  int v1 = *(_DWORD *)v0 + 1178560073 * (((v0 | 0x375468D4) - v0 + (v0 & 0xC8AB972B)) ^ 0xD0614ABC);
  __asm { BRAA            X13, X17 }
}

void sub_10005CD60()
{
}

uint64_t sub_10005CD70(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((472
                                * ((v7 & (2 * (*(unsigned __int8 *)(a2 + 1) - 146)))
                                 + ((*(unsigned __int8 *)(a2 + 1) - 146) ^ ((v5 ^ a4) + 206841471)) == v6)) ^ v5)))();
}

uint64_t sub_10005CDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  return (*(uint64_t (**)(void))(v30 + 8 * ((1858 * (v29 < (a29 ^ 0x605C7112u))) ^ (v31 + 1340331902))))();
}

void sub_10005CE0C()
{
}

uint64_t sub_10005CE3C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a1 + (v4 - 1887178671)) = *(unsigned char *)(a2 + (v4 - 1887178671))
                                                   - ((((v3 + 76) | 0xA3) + 55) & (2
                                                                                 * *(unsigned char *)(a2
                                                                                            + (v4 - 1887178671))))
                                                   + 119;
  return (*(uint64_t (**)(void))(v5 + 8 * ((2 * (v4 - 1 != v2)) | (32 * (v4 - 1 != v2)) | v3)))();
}

uint64_t sub_10005CE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,int a21)
{
  unsigned int v29 = &a21 + 6 * ((a9 + 890402424) & 0x4AED85E7 ^ 0xCC5E9956) + 6 * v21;
  v29[2] = v27;
  v29[3] = v23;
  *((void *)v29 + 2) = v28;
  v29[6] = a18;
  a21 = v21 + 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8 * ((3172 * (*(_DWORD *)(v24 + 48 * v22 + 32) + ((v26 + a9 - 1094) ^ 0x13416A9E) < 0x80000004)) ^ a9)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11);
}

uint64_t sub_10005CF2C@<X0>(int a1@<W1>, int a2@<W8>)
{
  *(unsigned char *)(v4 + v3) = *(unsigned char *)(v5 + (v2 + a1))
                      - ((2 * *(unsigned char *)(v5 + (v2 + a1))) & 0xEF)
                      + 119;
  return (*(uint64_t (**)(void))(v6 + 8 * ((v3 == 63) ^ (v7 + a2 + 231))))();
}

uint64_t sub_10005CF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9 + 8 * ((4094 * ((v8 | a7) == ((((v7 - 2002) | 0x112) + 1729) ^ v7 ^ 7))) ^ v7)))();
}

void sub_10005CFB0()
{
}

uint64_t sub_10005CFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  BOOL v31 = *(_DWORD *)(a28 + 48 * (int)(((3 * (v30 ^ 0x742) - 36967795) & 0xFF3FBEBB ^ 0x41D9E79E) + v28)) != 2100541156;
  return (*(uint64_t (**)(void))(v29 + 8 * ((v31 | (8 * v31)) ^ v30)))();
}

uint64_t sub_10005D044(uint64_t a1, int a2)
{
  int v8 = (a2 - 241097575) & 0xE5EDB56;
  *(void *)(a1 - 7 + (v3 + v4 - v6 + 958)) = *(void *)(v2 - 7 + (v3 + v4 - v6 + 958));
  BOOL v9 = ((2 * (v8 ^ 0x8FF)) ^ 0x15A) + v6 != ((v8 ^ 0xFFFFF7AE) & v5);
  return (*(uint64_t (**)(void))(v7 + 8 * (((16 * v9) | (32 * v9)) ^ v8)))();
}

uint64_t sub_10005D0C0()
{
  unsigned int v5 = *(unsigned __int8 *)(v3 + 1) + ((v2 + 16) ^ 0xFFFFFE17);
  return (*(uint64_t (**)(void))(v4 + 8 * ((873 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v2)))();
}

uint64_t sub_10005D100()
{
  return (*(uint64_t (**)(void))(v4
                                           + 8
                                           * (((((v3 - 589) | 0x816) ^ ((v3 ^ 0xB73) - 241)) * ((v1 & 0x18) == 0)) ^ v3)))((v0 - v2));
}

uint64_t sub_10005D13C(uint64_t a1)
{
  int v6 = *(unsigned __int8 *)(v2 + ((v1 + 1764017003) & 0x96DB3BEF ^ 0xA2C6920EB55CA094) + a1)
     - (*(unsigned __int8 *)(v3 + ((v1 + 1764017003) & 0x96DB3BEF ^ 0xA2C6920EB55CA094) + a1) ^ 0x77);
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((154 * (((2 * v6) & 0xEDB53FFE) + ((v1 - v5) ^ 0x4F8454BD ^ v6) == 1994039295)) ^ v1)))();
}

uint64_t sub_10005D1D4()
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 + 938)))(16);
  uint64_t v3 = (uint64_t *)*(&off_10018D100 + v0 - 1428);
  uint64_t *v3 = v2;
  (*(void (**)(void))(v1 + 8 * (v0 ^ 0xC58)))();
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 ^ 0xC56)))(8);
  uint64_t v5 = (uint64_t)*(&off_10018D100 + (v0 & 0x8E1DAB5));
  *(void *)(v5 - 4) = v4;
  void *v4 = 0xBDBDBDBDBDBDBDBDLL;
  uint64_t v6 = (uint64_t)*(&off_10018D100 + v0 - 1463);
  *(_DWORD *)(v6 + 4) = 0;
  *(_DWORD *)*(&off_10018D100 + (v0 & 0x23739231)) = 0;
  uint64_t v7 = (unsigned char *)*v3;
  int v8 = *(unsigned char **)(v5 - 4);
  v8[6] = 26;
  unsigned char *v7 = -77;
  v8[4] = -34;
  BOOL v9 = (unsigned __int8 *)*(&off_10018D100 + v0 - 1416);
  *(v9 - 2) = 96;
  void v9[5] = 79;
  *(unsigned char *)(v6 + 29) = 68;
  v9[10] = -105;
  void v7[4] = 73;
  *BOOL v9 = 62;
  *(unsigned char *)(v6 + 28) = 83;
  *(unsigned char *)*(&off_10018D100 + (int)(v0 & 0xC97AA05C)) = -113;
  v7[1] = 80;
  *(unsigned char *)*(&off_10018D100 + v0 - 1446) = 88;
  v9[9] = 0;
  *(unsigned char *)*(&off_10018D100 + (v0 & 0x745E8011)) = 1;
  _DWORD v7[2] = -44;
  *(unsigned char *)*(&off_10018D100 + (v0 & 0x61232861)) = 51;
  _DWORD v8[2] = 80;
  v7[6] = -11;
  *(unsigned char *)*(&off_10018D100 + v0 - 1509) = 25;
  *(unsigned char *)*(&off_10018D100 + (int)(v0 & 0xA97C9014)) = 39;
  v7[5] = -22;
  _DWORD v7[3] = -15;
  v9[4] = 73;
  *(unsigned char *)(v6 + 14) = -52;
  v9[11] = -22;
  *(unsigned char *)*(&off_10018D100 + (v0 ^ 0x5AE)) = -109;
  v7[13] = 99;
  uint64_t v16 = *(&off_10018D100 + (v0 ^ 0x59D));
  *uint64_t v16 = 119;
  v8[7] = -80;
  *int v8 = -122;
  v7[8] = 34;
  v9[3] = -88;
  v7[11] = 54;
  *(unsigned char *)(v6 + 15) = 3;
  v8[5] = -5;
  v8[1] = 73;
  *(unsigned char *)(v6 + 16) = -36;
  *(unsigned char *)uint64_t v6 = 23;
  void v8[3] = 59;
  uint64_t v10 = (unsigned char *)*v3;
  v10[10] = 45;
  v10[15] = -87;
  *(v9 - 4) = 11;
  v9[7] = -93;
  *(unsigned char *)(v6 + 25) = -92;
  v9[1] = -10;
  v9[6] = 15;
  *(unsigned char *)(v6 + 27) = 52;
  *(v9 - 8) = -34;
  *(_WORD *)(v6 + 10) = -3774;
  *(unsigned char *)(v6 + 22) = -121;
  *(unsigned char *)(v6 + 20) = 77;
  *(unsigned char *)(v6 + 26) = 113;
  v10[9] = 31;
  v9[12] = 32;
  v9[2] = -33;
  *(unsigned char *)(v6 + 8) = -85;
  *(v9 - 3) = -10;
  *(v9 - 6) = 70;
  *(unsigned char *)(v6 + 2) = 34;
  v9[8] = 34;
  v10[12] = -86;
  *(v9 - 5) = -35;
  v10[7] = -90;
  v10[14] = -33;
  *(unsigned char *)(v6 + 21) = -105;
  *(unsigned char *)(v6 + 3) = -98;
  *(v9 - 1) = 15;
  *(unsigned char *)(v6 + 24) = -119;
  *(unsigned char *)(v6 + 30) = 58;
  *(unsigned char *)(v6 + 12) = 73;
  *(unsigned char *)(v6 + 1) = -15;
  *(v9 - 7) = 103;
  *(unsigned char *)(v6 + 19) = 120;
  *(unsigned char *)(v6 + 13) = 69;
  *(_WORD *)(v6 + 17) = -4168;
  *(unsigned char *)(v6 + 9) = -105;
  *(unsigned char *)(v6 + 23) = 79;
  int v11 = (unsigned char *)*v3;
  unint64_t v12 = *(unsigned __int8 *)(*v3 + 2) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 4) + 2) << 8);
  unsigned int v13 = *((unsigned __int8 *)*(&off_10018D100 + (v0 ^ 0x574)) + (((v9[9] ^ 0x2F) - 36) ^ 0x77) + 805);
  HIDWORD(v14) = ~(v13 >> 6);
  LODWORD(v14) = v13 << 26;
  return (*(uint64_t (**)(unint64_t))(v1 + 8 * (int)((v0 + 1239948772) & 0xB617DE67)))((((unint64_t)(*v9 ^ 0x2Fu) << 56) | ((unint64_t)v11[3] << 48) | ((unint64_t)*(unsigned __int8 *)(v6 + 28) << 40) | ((unint64_t)*v16 << 24)) ^ ((((unint64_t)v11[13] << 16) ^ (-65536 * v11[13]) ^ (v12 - (v12 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v11[13] << 16)))) + v12) ^ ((unint64_t)((v14 >> 26) ^ 0x1Fu) << 32) ^ 0x7122F342C09E16D1);
}

void sub_10005DAB4(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10005DB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((1504 * (v6 + 1 == v7 + 60)) ^ a5)))();
}

uint64_t sub_10005DC58(int a1, uint64_t a2, int a3)
{
  int v6 = v4 + v3;
  unsigned int v7 = v6 + (((a1 - 814) | 0x4A4) ^ 0xC0A91686);
  if (v7 <= 0x40) {
    unsigned int v7 = 64;
  }
  BOOL v8 = !__CFADD__(v6 + ((a1 + 1813690372) & 0x93E547EF ^ 0xC0A91101), a3 + v7);
  return (*(uint64_t (**)(void))(v5 + 8 * ((175 * v8) ^ a1)))();
}

uint64_t sub_10005DCD8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((237 * (v0 != ((v1 - 1155939851) & 0x44E63FF3) - 2082)) ^ v1)))();
}

uint64_t sub_10005DD30(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6
                                           + 8 * (int)((((v5 + 1330660693) & 0xB0AFBD57 ^ 0x815) * (v4 == a4)) ^ v5)))((v5 - 1083));
}

void sub_10005DD70(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  *(unsigned char *)(a5 + ((301 * (a4 ^ 0x4B6)) ^ (a6 + 939)) + v7) = v6;
  JUMPOUT(0x1000504DCLL);
}

void sub_10005DDB0()
{
}

uint64_t sub_10005DDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,int a29)
{
  LODWORD(STACK[0x580]) = a29;
  return (*(uint64_t (**)(void))(v30 + 8 * ((46 * (STACK[0x390] != 0)) ^ (v29 + 480))))();
}

void sub_10005DDE8()
{
}

void sub_10005DEAC()
{
}

void sub_10005DEB4()
{
}

uint64_t sub_10005DEBC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + a1 + v2 + (v3 ^ v4) - 815) = v5;
  return (*(uint64_t (**)(void))(v6 + 8 * ((62 * ((unint64_t)(a2 + a1) > 0x37)) ^ v3)))();
}

uint64_t sub_10005DEF8@<X0>(int a1@<W8>)
{
  int v3 = *(uint64_t (**)(uint64_t))(v2 + 8 * (a1 + 2081));
  return v3(v1);
}

uint64_t sub_10005DF44(int a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v9 = v7 + v6 + a4;
  uint64_t v10 = a2 + v9;
  long long v11 = *(_OWORD *)(v10 - 31);
  uint64_t v12 = v4 + v9;
  *(_OWORD *)(v12 - 15) = *(_OWORD *)(v10 - 15);
  *(_OWORD *)(v12 - 31) = v11;
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (int)((((v5 & 0xFFFFFFE0) != 32) * (((a1 + 1499508449) & 0xA69F4F9A) - 1932)) ^ (a1 - 1310))))();
}

uint64_t sub_10005DFAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((206 * (a2 + 1 == v4 + 60)) ^ a4)))();
}

uint64_t sub_10005E074(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  return sub_10004D57C(a4, (uint64_t *)va);
}

uint64_t sub_10005E090()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((56 * (v0 > (STACK[0x298] & 0xD24CB9DD ^ (LODWORD(STACK[0x2D4]) - 1187355574)))) ^ (LODWORD(STACK[0x2D4]) - 345))))();
}

uint64_t sub_10005E0E0@<X0>(int a1@<W0>, int a2@<W3>, int a3@<W4>, int a4@<W5>, uint64_t a5@<X8>)
{
  HIDWORD(v16) = a1 ^ v15;
  LODWORD(v16) = a1 ^ v10;
  int v17 = (a3 ^ v11)
      + (v16 >> 27)
      + (*(_DWORD *)(v14 + 4 * (a5 + v12)) ^ v9)
      + (((v6 ^ v5) + v11 - (((v6 ^ v5) << ((a2 ^ 0xCB) + 78)) & v7)) ^ a4);
  return (*(uint64_t (**)(void))(v8 + 8 * ((197 * (a5 + 1 == v13 + 64)) ^ a2)))(v17
                                                                                            - ((2 * v17 - 1798995028) & v7) + 581329819);
}

uint64_t sub_10005E19C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((2250 * ((v2 ^ (v3 - 175) ^ (v0 - 28)) < (((v0 + 61) | 0x204) ^ 0x12Fu))) ^ v0)))();
}

uint64_t sub_10005E1EC@<X0>(int a1@<W8>)
{
  int v7 = STACK[0x324];
  uint64_t v8 = (_DWORD *)STACK[0x2B8];
  unint64_t v9 = STACK[0x2B8] + 24 * v2;
  *(_DWORD *)(v9 + 8) = v4;
  *(_DWORD *)(v9 + 12) = v5;
  *(void *)(v9 + 16) = STACK[0x2B0];
  *(_DWORD *)(v9 + 24) = v7;
  *uint64_t v8 = ((((a1 - 1946217780) & 0x7400EFFF) - 259) ^ 0x22A) + v1;
  BOOL v11 = v3 - 664149735 > -2070584909 && v3 - 664149735 < SLODWORD(STACK[0x290]);
  return (*(uint64_t (**)(void))(v6 + 8 * (a1 ^ (1930 * v11))))();
}

void sub_10005E274()
{
}

void sub_10005E2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  unsigned int v12 = v10 + 13076357 + (~(2 * v10 + 492743864) | 0xDBCF9DAF);
  int v13 = (v12 >> ((v11 + 93) & 0xBD ^ 0x1D)) ^ 0x12;
  *a9 = v13 - ((2 * v13) & 0xEF) + 119;
  a9[1] = (BYTE2(v12) ^ 0x18) - ((2 * (BYTE2(v12) ^ 0x18)) & 0xEF) + 119;
  a9[2] = (BYTE1(v12) ^ 0x31) - ((2 * (BYTE1(v12) ^ 0x31)) & 0xEF) + 119;
  a9[3] = (v10 - 123 + (~(2 * v10 - 72) | 0xAF)) ^ 0x5F;
  uint64_t v14 = v9 - ((2 * v9) & 0x3C1B6C83571295ECLL) + 0x1E0DB641AB894AF6;
  a9[4] = (HIBYTE(v14) ^ 0x1E) + (~(2 * (HIBYTE(v14) ^ 0x1E)) | 0x11) + 120;
  a9[5] = (BYTE6(v14) ^ 0xD) + (~(2 * (BYTE6(v14) ^ 0xD)) | 0x11) + 120;
  a9[6] = (BYTE5(v14) ^ 0xB6) - ((2 * (BYTE5(v14) ^ 0xB6)) & 0xEF) + 119;
  a9[7] = (BYTE4(v14) ^ 0x41) - ((2 * (BYTE4(v14) ^ 0x41)) & 0xEF) + 119;
  a9[8] = (((v9 - ((2 * v9) & 0x571295EC) - 1417065738) >> 24) ^ 0xAB)
        - ((2 * (((v9 - ((2 * v9) & 0x571295EC) - 1417065738) >> 24) ^ 0xAB)) & 0xEF)
        + 119;
  a9[9] = (BYTE2(v14) ^ 0x89) - ((2 * (BYTE2(v14) ^ 0x89)) & 0xEF) + 119;
  a9[10] = (BYTE1(v14) ^ 0x4A) - ((2 * (BYTE1(v14) ^ 0x4A)) & 0xEF) + 119;
  a9[11] = (v9 - ((2 * v9) & 0xEC) - 10) ^ 0x81;
  sub_100055840();
}

void sub_10005E474()
{
  *(_DWORD *)(v0 + 24) = *(_DWORD *)(v1 - 0x6BA7059072F2C1BBLL);
}

uint64_t sub_10005E48C()
{
  BOOL v7 = *v0 == 119 && LODWORD(STACK[0x578]) == ((v3 - 795) ^ 0xB80F9096) && v2 == v4 + 1;
  return (*(uint64_t (**)(void))(v1 + 8 * ((404 * v7) ^ (v3 - 152))))();
}

uint64_t sub_10005E4DC()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((v2 + 1340332720) ^ (25 * (v0 >= v3)))))();
}

uint64_t sub_10005E50C@<X0>(int a1@<W0>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((15
                                * (((a2 == (((a1 ^ 0x38D) + 1006) ^ 0x41C)) ^ (13 * (a1 ^ 0x8D) + 1)) & 1)) ^ a1)))();
}

uint64_t sub_10005E558()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v3 - 469) | 0x652) - 1534) * (v1 != v0)) ^ v3)))();
}

uint64_t sub_10005E5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10, uint64_t a11, uint64_t a12, unint64_t *a13, unint64_t *a14, unint64_t *a15, unint64_t *a16)
{
  a15 = &STACK[0x5F548590D8AA63B5];
  a16 = a10;
  LODWORD(a13) = v16
               - 2078219279
               * ((((&a13 | 0xEC8CA36A) ^ 0xFFFFFFFE) - (~&a13 | 0x13735C95)) ^ 0xC989CAE1)
               - 231789020;
  a14 = &STACK[0x4B3FB627E137F342];
  (*(void (**)(unint64_t **))(v17 + 8 * (v16 ^ 0x96B)))(&a13);
  a13 = &STACK[0x5F548590D8AA63B9];
  a14 = a10;
  LODWORD(a15) = v16
               - 944348131 * (((&a13 | 0xDB8EA39F) - (&a13 & 0xDB8EA39F)) ^ 0x789707D1)
               + 257;
  (*(void (**)(unint64_t **))(v17 + 8 * (v16 + 2192)))(&a13);
  a13 = a10;
  LODWORD(a14) = v16
               - 241568881 * ((&a13 & 0xF6FDF46A | ~(&a13 | 0xF6FDF46A)) ^ 0xDF130FD7)
               + 423;
  uint64_t v18 = (*(uint64_t (**)(unint64_t **))(v17 + 8 * (v16 ^ 0x967)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v17 + 8
                                                  * (((HIDWORD(a14) == -563355418) * ((v16 ^ 0x2AA) + 1183)) ^ v16)))(v18);
}

uint64_t sub_10005E730(int a1)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((736
                                * ((*(_DWORD *)(v3 + v4 * (uint64_t)a1 + 40) & 8) == (((v1 ^ 0x40E) + 1184) ^ 0x7CE))) ^ ((v1 ^ 0x40E) - 716))))();
}

uint64_t sub_10005E73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8 * ((((v7 ^ 0x68B) + 225 + 9 * (v7 ^ 0x68B) - 2179) * (LODWORD(STACK[0x54C]) != v9)) ^ v7)))(a1, a2, a3, a4, a5, a6, a7, 563395391);
}

uint64_t sub_10005E77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,unsigned int a21,uint64_t a22,unint64_t *a23,int a24)
{
  unsigned int v27 = ((419254032 - (&a19 | 0x18FD4F10) + (&a19 | 0xE702B0EF)) ^ 0x15B14D38) * v24;
  a19 = v27 ^ 0x6BCE5709;
  a20 = (v26 - 2024873699) ^ v27;
  a22 = a14;
  a23 = &STACK[0x634ED76D4AB882BD];
  a21 = v27 ^ 0x9063F851;
  uint64_t v28 = (*(uint64_t (**)(int *))(v25 + 8 * (v26 + 1765)))(&a19);
  return (*(uint64_t (**)(uint64_t))(v25 + 8 * ((259 * (a24 == (v26 ^ 0x122) - 563356260)) ^ v26)))(v28);
}

uint64_t sub_10005E85C@<X0>(int a1@<W8>)
{
  uint64_t v7 = v2 - 1;
  *(unsigned char *)(v4 + v7) = ((v1 - 13) ^ v3) * (v1 + 4);
  return (*(uint64_t (**)(void))(v6 + 8 * (((v7 == 0) * v5) ^ a1)))();
}

uint64_t sub_10005E864()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((1684 * (v1 == ((4 * v2) ^ 0xFC4) - 563356310)) ^ (v2 + 78))))();
}

uint64_t sub_10005E8A0()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v2 ^ 0x20E) - 847) * (v0 != v1)) ^ v2)))();
}

void sub_10005E8C8()
{
}

uint64_t sub_10005E944@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(unsigned char *)(a1 + v5 + v3 + ((v4 + 1600819626) & 0xA0956FBF)) = *(unsigned char *)(v2
                                                                         + v5
                                                                         + v3
                                                                         + ((v4 + 1600819626) & 0xA0956FBF));
  return (*(uint64_t (**)(void))(v6 + 8 * ((1764 * (v5 - 1 == a2)) ^ v4)))();
}

uint64_t sub_10005E990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v31 = v30 - 144;
  *(_DWORD *)(v30 - 120) = v25
                         - 98
                         + 69008221
                         * ((-789700510 - ((v30 - 144) | 0xD0EE2062) + ((v30 - 144) | 0x2F11DF9D)) ^ 0xFCB38D97);
  *(void *)(v30 - 112) = v28;
  *(void *)(v30 - 136) = a23;
  *(void *)(v30 - 128) = a23;
  *(void *)(v30 - 144) = a25;
  (*(void (**)(uint64_t))(v27 + 8 * (v25 + 915)))(v30 - 144);
  *(void *)(v30 - 112) = v28;
  *(_DWORD *)(v30 - 120) = v25
                         - 98
                         + 69008221 * ((~((v30 - 144) | 0xAA40A461) + ((v30 - 144) & 0xAA40A461)) ^ 0x861D0994);
  *(void *)(v30 - 144) = a25;
  *(void *)(v30 - 136) = a23;
  *(void *)(v30 - 128) = a23;
  (*(void (**)(uint64_t))(v27 + 8 * (v25 + 915)))(v30 - 144);
  *(_DWORD *)(v30 - 120) = v25
                         - 98
                         + 69008221
                         * (((((v30 - 144) | 0xC24BCBF8) ^ 0xFFFFFFFE) - (~(v30 - 144) | 0x3DB43407)) ^ 0xEE16660D);
  *(void *)(v30 - 144) = a25;
  *(void *)(v30 - 136) = a23;
  *(void *)(v30 - 112) = v28;
  *(void *)(v30 - 128) = a23;
  (*(void (**)(uint64_t))(v27 + 8 * (v25 ^ 0xCAD)))(v30 - 144);
  int v32 = 2078219279 * ((~(v31 | 0x7758E8BF) + (v31 & 0x7758E8BF)) ^ 0x525D8134);
  *(_DWORD *)(v30 - 128) = (v25 + 288) ^ v32;
  *(_DWORD *)(v30 - 140) = -1131453697 - v32 + v29 + 1;
  *(void *)(v30 - 136) = v26;
  (*(void (**)(uint64_t))(v27 + 8 * (v25 + 931)))(v30 - 144);
  BOOL v33 = *(_DWORD *)(v30 - 144) == (((3 * (v25 ^ 0x7C1) - 1292) | 0x286) ^ 0xFCA11F20);
  unsigned int v34 = 2078219279 * (((v31 | 0x996094FF) - v31 + (v31 & 0x669F6B00)) ^ 0x439A028B);
  *(_DWORD *)(v30 - 128) = (v25 + 288) ^ v34;
  *(void *)(v30 - 136) = v26;
  *(_DWORD *)(v30 - 140) = -1131453697 - v34 + v29;
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(v27 + 8 * (v25 + 931)))(v30 - 144);
  return (*(uint64_t (**)(uint64_t))(v27 + 8 * ((1017 * v33) ^ v25)))(v35);
}

uint64_t sub_10005EC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  int v15 = (v13 ^ 0x8D90026E) + v12;
  BOOL v17 = v15 > 456112503 || v15 < a12 - 1691371144;
  return (*(uint64_t (**)(void))(v14 + 8 * ((79 * v17) ^ v13)))();
}

void sub_10005EC84()
{
}

void sub_10005ED50()
{
}

uint64_t sub_10005ED5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  unsigned int v34 = (v25 + 1051736902) & 0xC14FC7F1;
  int v35 = ((2 * ((v33 - 144) & 0x46CC6E78) - (v33 - 144) - 1187802749) ^ 0x209241A7) * v27;
  *(void *)(v33 - 136) = v30;
  *(void *)(v33 - 128) = v24;
  *(_DWORD *)(v33 - 144) = (v26 + 955413014 + v34) ^ v35;
  *(_DWORD *)(v33 - 140) = v35 + v25 + 602;
  (*(void (**)(uint64_t))(v29 + 8 * (v25 ^ 0xBE2u)))(v33 - 144);
  *(_DWORD *)(v33 - 144) = v34
                         - 1021
                         - 1224239923
                         * ((((v33 - 144) | 0x72DB4EC0) - (v33 - 144) + ((v33 - 144) & 0x8D24B138)) ^ 0x8068B317);
  *(void *)(v33 - 136) = a24;
  *(void *)(v33 - 128) = a23;
  uint64_t v38 = 8 * (int)(v34 ^ 0xC6D);
  (*(void (**)(uint64_t))(v29 + v38))(v33 - 144);
  *(void *)(v33 - 144) = v30;
  *(void *)(v33 - 136) = a24;
  *(_DWORD *)(v33 - 112) = v34
                         - 29
                         - 1543737703
                         * ((((v33 - 144) | 0x4EA87986) - (v33 - 144) + ((v33 - 144) & 0xB1578678)) ^ 0x305C29FA);
  *(void *)(v33 - 128) = v32;
  *(void *)(v33 - 120) = a23;
  (*(void (**)(uint64_t))(v29 + 8 * (int)(v34 ^ 0xCC3)))(v33 - 144);
  *(void *)(v33 - 128) = v28;
  *(void *)(v33 - 120) = a24;
  *(void *)(v33 - 104) = v32;
  *(void *)(v33 - 144) = a23;
  *(void *)(v33 - 136) = v32;
  *(_DWORD *)(v33 - 112) = v34 - 1047 - 1224239923 * ((v33 - 144) ^ 0xF2B3FDD7);
  (*(void (**)(uint64_t))(v29 + 8 * (int)(v34 ^ 0xD0C)))(v33 - 144);
  *(_DWORD *)(v33 - 144) = v34
                         - 1087
                         - 1178560073
                         * ((((v33 - 144) ^ 0xE0146109 | 0xF4B9EC4) + ((v33 - 144) ^ 0xF488E44 | 0xF0B4613B)) ^ 0x869CD24);
  *(void *)(v33 - 128) = a24;
  *(void *)(v33 - 120) = v32;
  *(void *)(v33 - 112) = a15;
  *(void *)(v33 - 104) = v32;
  *(void *)(v33 - 136) = a23;
  (*(void (**)(uint64_t))(v29 + 8 * (int)(v34 + 919)))(v33 - 144);
  *(_DWORD *)(v33 - 144) = v34 - 1021 - 1224239923 * ((v33 - 411936759 - 2 * ((v33 - 144) & 0xE7725899)) ^ 0x15C1A54E);
  *(void *)(v33 - 136) = a24;
  *(void *)(v33 - 128) = a19;
  (*(void (**)(uint64_t))(v29 + v38))(v33 - 144);
  *(_DWORD *)(v33 - 112) = v34
                         - 29
                         - 1543737703 * (((v33 - 144) & 0xED32F927 | ~((v33 - 144) | 0xED32F927)) ^ 0x6C3956A4);
  *(void *)(v33 - 144) = v30;
  *(void *)(v33 - 136) = a24;
  *(void *)(v33 - 128) = v31;
  *(void *)(v33 - 120) = a19;
  (*(void (**)(uint64_t))(v29 + 8 * (int)(v34 ^ 0xCC3)))(v33 - 144);
  *(_DWORD *)(v33 - 112) = v34
                         - 1047
                         - 1224239923
                         * (((((v33 - 144) | 0x2E18EB56) ^ 0xFFFFFFFE) - (~(v33 - 144) | 0xD1E714A9)) ^ 0x2354E97E);
  *(void *)(v33 - 144) = a19;
  *(void *)(v33 - 136) = v31;
  *(void *)(v33 - 128) = v28;
  *(void *)(v33 - 120) = a24;
  *(void *)(v33 - 104) = v31;
  (*(void (**)(uint64_t))(v29 + 8 * (int)(v34 + 780)))(v33 - 144);
  *(void *)(v33 - 136) = a19;
  *(void *)(v33 - 128) = a24;
  *(_DWORD *)(v33 - 144) = v34 - 1087 - 1178560073 * ((v33 - 435891113 - 2 * ((v33 - 144) & 0xE604D4E7)) ^ 0x131F68F);
  *(void *)(v33 - 112) = a17;
  *(void *)(v33 - 104) = v31;
  *(void *)(v33 - 120) = v31;
  (*(void (**)(uint64_t))(v29 + 8 * (int)(v34 ^ 0xC79)))(v33 - 144);
  *(_DWORD *)(v33 - 144) = (v34 - 426) ^ (268847287
                                        * ((((v33 - 144) | 0x44694F9C) - (v33 - 144) + ((v33 - 144) & 0xBB96B060)) ^ 0xBBC35EB4));
  *(void *)(v33 - 136) = v31;
  *(void *)(v33 - 128) = v32;
  (*(void (**)(uint64_t))(v29 + 8 * (int)(v34 + 873)))(v33 - 144);
  *(void *)(v33 - 136) = v31;
  *(_DWORD *)(v33 - 140) = v34
                         - 1224239923 * ((((2 * (v33 - 144)) | 0xFB28F40) - (v33 - 144) + 2015803488) ^ 0x756ABA77)
                         - 788;
  uint64_t v36 = (*(uint64_t (**)(uint64_t))(v29 + 8 * (int)(v34 + 834)))(v33 - 144);
  return (*(uint64_t (**)(uint64_t))(v29
                                            + 8
                                            * (int)(((*(_DWORD *)(v33 - 144) < 0x64FB564Eu)
                                                   * ((v34 ^ 0x5F7) + 1536 + 257 * (v34 ^ 0x5F7) + 488)) ^ v34)))(v36);
}

uint64_t sub_10005F20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unint64_t *a20,unint64_t *a21,unint64_t *a22)
{
  a21 = &STACK[0x5F548590D8AA63F1];
  a22 = a15;
  a20 = &STACK[0x4B3FB627E137F36A];
  LODWORD(a19) = v22
               - 231789632
               - 2078219279 * (((&a19 | 0x4113E74D) + (~&a19 | 0xBEEC18B2)) ^ 0x9BE97138);
  (*(void (**)(unint64_t **))(v23 + 8 * (v22 + 1603)))(&a19);
  LODWORD(a19) = v22 - 231789632 - 2078219279 * (&a19 ^ 0xDAFA9674);
  a20 = &STACK[0x4B3FB627E137F34A];
  a21 = &STACK[0x5F548590D8AA6401];
  a22 = a15;
  (*(void (**)(unint64_t **))(v23 + 8 * (v22 + 1603)))(&a19);
  LODWORD(a21) = v22
               - 944348131 * ((((2 * &a19) | 0xA35E252C) - &a19 - 1370428054) ^ 0xF2B6B6D8)
               - 355;
  a19 = &STACK[0x5F548590D8AA63D1];
  a20 = a15;
  (*(void (**)(unint64_t **))(v23 + 8 * (v22 + 1580)))(&a19);
  LODWORD(a20) = v22
               - 241568881
               * (((&a19 | 0xF5D823CD) - &a19 + (&a19 & 0xA27DC30)) ^ 0x23C9278F)
               - 189;
  a19 = a15;
  uint64_t v24 = (*(uint64_t (**)(unint64_t **))(v23 + 8 * (v22 + 1591)))(&a19);
  return (*(uint64_t (**)(uint64_t))(v23 + 8 * ((3066 * (HIDWORD(a20) == v22 - 563356260)) ^ v22)))(v24);
}

uint64_t sub_10005F3FC@<X0>(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45)
{
  return (*(uint64_t (**)(void))(v45 + 8 * ((((a45 | 0xE9) ^ 0xF5) * ((a1 & 1) == 0)) ^ (v46 - 479))))();
}

uint64_t sub_10005F430(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int8x16_t *a14)
{
  int8x16_t *v14 = veorq_s8(*a14, (int8x16_t)xmmword_10016DF10);
  STACK[0x560] += 32;
  STACK[0x570] = a1;
  STACK[0x568] = a1;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16
                                                                                         + 8
                                                                                         * ((((v15 - 876309971) & 0x343B6FFF ^ 0x118)
                                                                                           * (v14 == (int8x16_t *)a1)) ^ v15)))(a1, a2, a3, a4, a5);
}

uint64_t sub_10005F49C@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W8>)
{
  unsigned int v6 = v5[396] ^ ((*v5 & 0x7FFFFFFE | v5[623] & 0x80000000) >> 1);
  v5[623] = (v6 + ((a3 + 14) ^ (a1 + 1390) ^ (a3 - 1914887615) & 0x7222DB3E) - (a2 & (2 * v6))) ^ *(_DWORD *)(v3 + 4 * (*v5 & 1));
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((2 * (LODWORD(STACK[0x504]) < 0x270)) | (16 * (LODWORD(STACK[0x504]) < 0x270))) ^ a3)))();
}

uint64_t sub_10005F520(uint64_t a1)
{
  unint64_t v3 = STACK[0x4E8];
  unint64_t v4 = LODWORD(STACK[0x39C]);
  STACK[0x308] = v4;
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2
                                                              + 8
                                                              * ((55
                                                                * (((v1 + 38) ^ (v4 == ((2 * v1) ^ 0xCE6) - 1096)) & 1)) ^ v1)))(a1, v3);
}

uint64_t sub_10005F564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v40 = *(void *)(v37 + 24);
  *(int8x16_t *)(v39 - 112) = veorq_s8(*(int8x16_t *)*(void *)(v37 + 40), (int8x16_t)xmmword_10016DEC0);
  if (a9) {
    BOOL v41 = v40 == 0x5EC77446536A4B76;
  }
  else {
    BOOL v41 = 1;
  }
  int v42 = !v41;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 8 * (int)((995 * v42) ^ a6)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37);
}

void sub_10005F5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char *a60,int a61,unint64_t a62,uint64_t a63)
{
  a62 = (unint64_t)&STACK[0x504] % ((unint64_t)(v71 + 667) - 732) + 16;
  int v74 = (char *)&a9
      + a65
      + ((16 * ((&a9 - 0x2C2F364FA24C4B49) + (_BYTE)a65) + 16) & 0x20)
      - 0x2C2F364FA24C4B49;
  STACK[0x238] = (v73 - 192) | 0x9DE0EE514AE67703;
  a61 = v72 ^ 0xAB8;
  STACK[0x2B8] = 2062945554 - 69008221 * ((v73 - 192) ^ 0x529C46E3D3A2520ALL);
  STACK[0x2B0] = 1211735820
               - 69008221
               * ((((v73 - 192) | 0xB282A286CCFC2F34) - (v73 - 192) + ((v73 - 192) & 0x4D7D5D793303D0C8)) ^ 0xE01EE4651F5E7D3ELL);
  LODWORD(STACK[0x298]) = v72 + 766723273;
  LODWORD(STACK[0x290]) = v72 + 1407834828;
  a69 = 241568881
      * ((2 * ((v73 - 192) & 0x19A5DB9D008F16D8) - (v73 - 192) + 0x665A2462FF70E926) ^ 0x690FF0EB2961ED64)
      + 5119;
  a70 = 241568881
      * ((2 * ((v73 - 192) & 0x19A5DB9D008F16D8) - (v73 - 192) + 0x665A2462FF70E926) ^ 0x690FF0EB2961ED64);
  STACK[0x2C0] = STACK[0x490];
  STACK[0x2C8] = (unint64_t)v74;
  a60 = v74 + 16;
  *(int32x4_t *)&STACK[0x220] = vdupq_n_s32(0x7FFFFFFEu);
  a71 = vdupq_n_s32(0xC889F9DE);
  *(int32x4_t *)&STACK[0x200] = vdupq_n_s32(0x9113F3BC);
  JUMPOUT(0x10005F7A4);
}

uint64_t sub_10005F7FC(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((483 * (v3 < a3 + 2147481751)) ^ (a3 - 1680))))();
}

uint64_t sub_10005F840@<X0>(int a1@<W6>, int a2@<W7>, uint64_t a3@<X8>)
{
  uint64_t v9 = (a1 - 1141662586);
  *(unsigned char *)(a3 + v9) = *(unsigned char *)(v3 + v9) ^ (a2 - 57) ^ *(unsigned char *)(v7 + (v9 & 0xF)) ^ *(unsigned char *)((v9 & 0xF) + v5 + 1) ^ *(unsigned char *)((v9 & 0xF) + v6 + 2) ^ (-73 * (v9 & 0xF)) ^ 0x89;
  return (*(uint64_t (**)(void))(v8 + 8 * ((1631 * (a1 - 1 == v4)) ^ (a2 - 1828))))();
}

uint64_t sub_10005F8D0(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((1613 * (a2 + 8 == (a4 ^ 0x584) - 1190)) ^ a4)))();
}

uint64_t sub_10005F904()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((53 * (*v0 != 0)) ^ 0x452u)))();
}

uint64_t sub_10005F95C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (v1 | (32 * (v0 + 1 != v3 + 48)))))();
}

uint64_t sub_10005FA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unint64_t *a15, unint64_t *a16, unint64_t *a17, unint64_t *a18)
{
  int v21 = v20 ^ 0x6D8;
  int v22 = 18 * (v20 ^ 0x46A);
  a17 = &STACK[0x5F548590D8AA63C5];
  a18 = a13;
  a16 = &STACK[0x4B3FB627E137F352];
  LODWORD(a15) = (v20 ^ 0x6D8)
               - 2078219279
               * (((&a15 | 0x90938D6A) - &a15 + (&a15 & 0x6F6C7290)) ^ 0x4A691B1E)
               - 231789493;
  (*(void (**)(unint64_t **))(v19 + 8 * (v20 ^ 0xDEA)))(&a15);
  int v23 = (v20 ^ 0x6D8) - 216;
  LODWORD(a17) = v23
               - 944348131
               * ((((&a15 | 0xA7B65146) ^ 0xFFFFFFFE) - (~&a15 | 0x5849AEB9)) ^ 0xFB500AF7);
  a15 = &STACK[0x5F548590D8AA63C5];
  a16 = a13;
  (*(void (**)(unint64_t **))(v19 + 8 * (v21 ^ 0xBC9)))(&a15);
  a15 = &STACK[0x5F548590D8AA63C9];
  a16 = a13;
  LODWORD(a17) = v23 - 944348131 * (&a15 ^ 0xA319A44E);
  (*(void (**)(unint64_t **))(v19 + 8 * (v21 + 1719)))(&a15);
  a15 = a13;
  LODWORD(a16) = v21
               - 241568881 * ((&a15 & 0x63445CEA | ~(&a15 | 0x63445CEA)) ^ 0x4AAAA757)
               - 50;
  uint64_t v24 = (*(uint64_t (**)(unint64_t **))(v19 + 8 * (v21 + 1730)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * ((1244 * (HIDWORD(a16) == (v22 ^ (v18 - 218)))) ^ v21)))(v24);
}

uint64_t sub_10005FC04(uint64_t a1)
{
  int v1 = 831981571 * ((((2 * a1) | 0xFDCFEF62) - a1 - 2129131441) ^ 0xE7462795);
  int v2 = *(_DWORD *)(a1 + 8) + v1;
  int v3 = *(_DWORD *)(a1 + 12) - v1;
  unsigned int v5 = v3 - 517764792;
  BOOL v4 = v3 - 517764792 < 0;
  LODWORD(v6) = 517764792 - v3;
  if (v4) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v5;
  }
  return (*(uint64_t (**)(void))((char *)*(&off_10018D100 + v2 - 1457)
                              + 8 * ((908 * (v6 != ((2 * v6) & 0x45FC479E))) ^ v2)
                              - 4))();
}

void sub_10005FCB0()
{
  v2[31] = 0x68D6DD4519E0F96ALL;
  v2[32] = v2 + 33;
  v2[65] = 0x68D6DD4519E0F96ALL;
  v2[66] = v2 + 67;
  STACK[0x260] = (unint64_t)v2 + 0x5E8E72AB319E4491;
  v2[99] = 0x68D6DD4519E0F96ALL;
  v2[100] = v2 + 101;
  STACK[0x288] = (unint64_t)v2 + 0x5E8E72AB319E45A1;
  v2[133] = 0x68D6DD4519E0F96ALL;
  v2[134] = v2 + 135;
  STACK[0x298] = (unint64_t)v2 + 0x5E8E72AB319E46B1;
  v2[167] = 0x68D6DD4519E0F96ALL;
  v2[168] = v2 + 169;
  STACK[0x2A0] = (unint64_t)v2 + 0x5E8E72AB319E47C1;
  unint64_t v7 = STACK[0x2F8] + 4;
  int v8 = v0;
  int v9 = v5 << ((v0 + 65) ^ 0x2F);
  LODWORD(STACK[0x2C0]) = v9;
  LODWORD(STACK[0x240]) = v1;
  LODWORD(STACK[0x250]) = v8;
  LODWORD(STACK[0x2C8]) = v8 + 1337;
  int v10 = 460628867 * ((v6 - 956244809 - 2 * ((v6 - 192) & 0xC700DD77)) ^ 0x8B965F0A);
  *(_DWORD *)(v6 - 192) = v8 + 1337 + v10;
  *(_DWORD *)(v6 - 184) = ((v5 ^ 0xE59C9F7C) - 446774552 + (v9 & 0x77EEFF34 ^ 0x34C6C104)) ^ v10;
  *(void *)(v6 - 176) = v7;
  *(void *)(v6 - 168) = (char *)v2 + 0x5E8E72AB319E4381;
  uint64_t v11 = 8 * (v8 + 2170);
  STACK[0x2A8] = v11;
  (*(void (**)(uint64_t))(v3 + v11))(v6 - 192);
  uint64_t v12 = v7 + v4;
  int v13 = 460628867 * ((2 * ((v6 - 192) & 0x5BD9D9B8) - (v6 - 192) + 606479941) ^ 0x68B0A438);
  unsigned int v14 = ((v5 ^ 0xFBB53E78) - 76061724 + (STACK[0x2C0] & 0x4BBDBD3C ^ 0x895810C)) ^ v13;
  *(_DWORD *)(v6 - 192) = LODWORD(STACK[0x2C8]) + v13;
  *(_DWORD *)(v6 - 184) = v14;
  unint64_t v15 = STACK[0x260];
  *(void *)(v6 - 176) = v12;
  *(void *)(v6 - 168) = v15;
  uint64_t v16 = 8 * (LODWORD(STACK[0x250]) ^ 0x98A);
  STACK[0x260] = v16;
  (*(void (**)(uint64_t))(v3 + v16))(v6 - 192);
  uint64_t v17 = v12 + v4;
  LODWORD(v12) = STACK[0x2C0];
  int v18 = 460628867 * ((-931669370 - ((v6 - 192) | 0xC877DA86) + ((v6 - 192) | 0x37882579)) ^ 0x7B1EA704);
  unsigned int v19 = ((v5 ^ 0xA93C2A20) - 1442940996 + (STACK[0x2C0] & 0xEEAF958C ^ 0xAC87818C)) ^ v18;
  int v20 = LODWORD(STACK[0x2C8]) + v18;
  *(_DWORD *)(v6 - 184) = v19;
  *(_DWORD *)(v6 - 192) = v20;
  unint64_t v21 = STACK[0x288];
  *(void *)(v6 - 176) = v17;
  *(void *)(v6 - 168) = v21;
  (*(void (**)(uint64_t))(v3 + STACK[0x260]))(v6 - 192);
  uint64_t v22 = v17 + v4;
  int v23 = (v5 ^ 0x6F341F44) + 1878409952 + (v12 & 0x62BFFF44 ^ 0x2097C144);
  int v24 = 460628867 * ((v6 + 1630206759 - 2 * ((v6 - 192) & 0x612AFBE7)) ^ 0x2DBC799A);
  LODWORD(v12) = STACK[0x2C8];
  *(_DWORD *)(v6 - 192) = LODWORD(STACK[0x2C8]) + v24;
  *(_DWORD *)(v6 - 184) = v23 ^ v24;
  unint64_t v25 = STACK[0x298];
  *(void *)(v6 - 176) = v22;
  *(void *)(v6 - 168) = v25;
  (*(void (**)(uint64_t))(v3 + STACK[0x2A8]))(v6 - 192);
  int v26 = 460628867 * ((((v6 - 192) | 0x37D75E9E) - (v6 - 192) + ((v6 - 192) & 0xC828A160)) ^ 0x7B41DCE3);
  unsigned int v27 = ((v5 ^ 0xB19C2F40) - 1319210276 + (STACK[0x2C0] & 0xDFEF9F4C ^ 0x9CC7814C)) ^ v26;
  *(_DWORD *)(v6 - 192) = v12 + v26;
  *(_DWORD *)(v6 - 184) = v27;
  unint64_t v28 = STACK[0x2A0];
  *(void *)(v6 - 176) = v22 + v4;
  *(void *)(v6 - 168) = v28;
  (*(void (**)(uint64_t))(v3 + STACK[0x2A8]))(v6 - 192);
  JUMPOUT(0x100044E80);
}

uint64_t sub_1000600F8@<X0>(unsigned int a1@<W8>)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 + (unint64_t)((v1 - 12582913) & 0xFDCBAAAB) + ((v1 - 172511882) & 0xA4853F9) - 0x10C3EAAA1;
  if (v4 <= 0x38) {
    unint64_t v4 = 56;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((v1 + 288) | (2 * (v4 - v3 + 255000199 < 8)))))();
}

uint64_t sub_10006017C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unint64_t *a15, unint64_t *a16, unsigned int a17)
{
  a17 = v19 + 303 - 944348131 * ((&a15 & 0xD828319E | ~(&a15 | 0xD828319E)) ^ 0x84CE6A2F);
  a15 = &STACK[0x5F548590D8AA63E1];
  a16 = a13;
  (*(void (**)(unint64_t **))(v17 + 8 * (v19 + 2238)))(&a15);
  a17 = v19 + 303 - 944348131 * ((&a15 & 0x7C2082A7 | ~(&a15 | 0x7C2082A7)) ^ 0x20C6D916);
  a15 = &STACK[0x5F548590D8AA63C9];
  a16 = a13;
  (*(void (**)(unint64_t **))(v17 + 8 * (v19 + 2238)))(&a15);
  LODWORD(a16) = v19
               - (((&a15 | 0x247E0372) - &a15 + (&a15 & 0xDB81FC88)) ^ 0xF26F0730)
               * v18
               + 469;
  a15 = a13;
  uint64_t v20 = (*(uint64_t (**)(unint64_t **))(v17 + 8 * (v19 ^ 0x939)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * (((HIDWORD(a16) == ((v19 + 2012) ^ 0x838) - 563355590) * (v19 + 1395)) ^ v19)))(v20);
}

void sub_1000602EC()
{
}

uint64_t sub_1000602F4(_DWORD *a1)
{
  unsigned int v1 = 268847287
     * ((2 * ((a1 ^ 0x2D90AAAC) & 0xA0689A7) - (a1 ^ 0x2D90AAAC) + 1979283032) ^ 0xA7C3CDDC);
  unsigned int v2 = a1[4] - v1;
  return (*(uint64_t (**)(void))((char *)*(&off_10018D100 + (int)(v2 ^ 0x42C))
                              + 8
                              * (int)((((*a1 ^ v1 ^ 0xDE6BE0E6) - 1 < 0x63)
                                     * ((v2 ^ 0x40E) + 530 + 19 * (v2 ^ 0x40E) - 1030)) ^ v2)
                              - 4))();
}

void sub_1000603A8()
{
}

uint64_t sub_1000603B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v17 - 112) = ((v16 ^ 0x3B3) - 329) ^ (69008221
                                                  * ((((v17 - 136) | 0x33020D3F) - ((v17 - 136) & 0x33020D3F)) ^ 0xE0A05F35));
  *(void *)(v17 - 120) = a14;
  *(void *)(v17 - 136) = a12;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v15 + 8 * ((v16 ^ 0x3B3) + 952)))(v17 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (((v14 + *(_DWORD *)(v17 - 128) + 1643 < (v16 ^ 0x3B3u) - 153216983)
                                              * (((v16 ^ 0x3B3) + 204) ^ 0xAC1)) ^ v16 ^ 0x3B3)))(v18);
}

void sub_1000603BC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10006049C(void *a1, int a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, unsigned int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  unint64_t v35 = (*(_DWORD *)(a24 + 4 * (v27 + 1 + v29)) ^ v24)
      + HIDWORD(v28)
      + a5 * (unint64_t)((a4 + a8) & v30 ^ (v24 + 1321) ^ *(_DWORD *)(*a1 + 4 * (v27 + 1 + v29)));
  *(_DWORD *)(a24 + 4 * (v27 + v29)) = v35 + v24 - (v26 & (2 * v35));
  if (v25 > a7 != v27 + v31 < v32) {
    BOOL v36 = v25 > a7;
  }
  else {
    BOOL v36 = v27 + v31 < a2;
  }
  return (*(uint64_t (**)(void))(v33 + 8 * ((!v36 * v34) ^ a4)))();
}

uint64_t sub_10006052C()
{
  return sub_100060568(3615489095);
}

uint64_t sub_100060568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t))(v27 + 8 * ((1980 * (((2 * LODWORD(STACK[0x2D0])) & 0x76 ^ 0x54) + (STACK[0x2D0] & 0x3F ^ (a1 + 782)) + 679477321 < 0xFFFFFFC0)) ^ ((int)a2 + 965))))(a1, 4294965367, a2, a3, a4, 679477382, a5, a6, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           *(void *)(v27 + 8 * a7),
           *(void *)(v28 + 16),
           a27);
}

void sub_100060668()
{
  uint64_t v0 = (uint64_t)*(&off_10018D100
                + (byte_1001680BC[(byte_100163E10[(-113
                                                                                                 * ((qword_1001B6D98 + dword_1001B6EA0) ^ 0xEA))] ^ 0x62)
                                                               - 12] ^ (-113
                                                                      * ((qword_1001B6D98 + dword_1001B6EA0) ^ 0xEA)))
                + 35);
  uint64_t v1 = *(void *)(v0 - 4);
  unsigned int v2 = *(&off_10018D100
       + (byte_100167EB0[byte_100163C10[(-113 * (v1 ^ qword_1001B6D98 ^ 0xEA))] ^ 0x83] ^ (-113 * (v1 ^ qword_1001B6D98 ^ 0xEA)))
       - 173);
  unint64_t v3 = (unint64_t)&v5[*v2 ^ v1];
  *(void *)(v0 - 4) = 1932141199 * v3 - 0x5BC8EB821F80EA16;
  void *v2 = 1932141199 * (v3 ^ 0xA437147DE07F15EALL);
  v6[1] = 1178560073
        * (((v6 | 0xE965F012) - v6 + (v6 & 0x169A0FE8)) ^ 0xE50D27A)
        - 504207030;
  LOBYTE(v2) = -113 * (*(_DWORD *)(v0 - 4) ^ 0xEA ^ *(_DWORD *)v2);
  unint64_t v4 = (char *)*(&off_10018D100
               + ((-113 * (dword_1001B6EA0 ^ 0xEA ^ qword_1001B6D98)) ^ byte_100167EB0[byte_100163C10[(-113 * (dword_1001B6EA0 ^ 0xEA ^ qword_1001B6D98))] ^ 0x83])
               - 175)
     - 4;
  (*(void (**)(_DWORD *))&v4[8
                                      * (v2 ^ byte_100167EB0[byte_100163C10[v2] ^ 0x20])
                                      + 17448])(v6);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10006088C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((*(void *)(*(void *)(v3 + 8 * (v2 ^ 0x455)) - 4) == 0) * (a1 - 967)) ^ v2)))();
}

uint64_t sub_1000608BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a7 ^ v7;
  unint64_t v14 = a1 ^ v8 ^ 0xFD5430A5C0BF2832;
  unint64_t v15 = (a7 ^ v7 ^ v11) & (v7 ^ 0x82F80E5FE1DFD4F4);
  *((void *)&v16 + 1) = v8 ^ 0x2824614DCALL;
  *(void *)&long long v16 = v8 ^ 0xB64F2FC000000000;
  unint64_t v12 = a3 ^ ((a7 ^ 0xC0B55FEBDEB43286) + v10 - (v9 & (2 * (a7 ^ 0xC0B55FEBDEB43286))));
  unint64_t v17 = v12 ^ (__ROR8__((v16 >> 38) ^ 0x6AE47E7A0BD06A70, 26) ^ 0xBE563E546E0617DLL) & v14 ^ v11 ^ (v12 ^ 0xC1A33A862C00719DLL) & (v8 ^ 0xB64F2FE824614DCALL) ^ v13;
  *((void *)&v16 + 1) = ~(v15 ^ v14);
  *(void *)&long long v16 = v15 ^ v14 ^ 0xC02B2878112B07C2;
  return sub_100060CCC(v15 ^ v14 ^ __ROR8__(v15 ^ v14, 6) ^ 0xBE09779B31F1BD0DLL ^ (v16 >> 1), a2, v17 ^ (v17 >> 19) ^ (v17 >> 28) ^ (v17 << 36) ^ (v17 << 45) ^ 0x38BCB963FC4EDD68);
}

uint64_t sub_100060CCC(uint64_t a1, int a2)
{
  BOOL v6 = v2 < v5;
  unsigned int v7 = v5 + a2 + 1;
  int v8 = v6 ^ (v7 < v5);
  BOOL v9 = v7 < v2;
  if (!v8) {
    BOOL v6 = v9;
  }
  return (*(uint64_t (**)(void))(v4 + 8 * ((((193 * (v3 ^ 0x5BC)) ^ (v3 - 948)) * v6) ^ v3)))();
}

uint64_t sub_100060D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19
                                                                                         + 8
                                                                                         * ((1116
                                                                                           * (*(_DWORD *)(a19 - 0x6BA7059072F2C1BBLL) == (((v20 - 982) | 0x2D8) ^ 0xDE6BE1E0 ^ (v20 + 1210365984) & 0xB7DB47DF))) ^ (v20 - 1557))))(a1, a2, a3, a4, a5, a6);
}

void sub_100060DA0()
{
  int v5 = 3804331 * ((v4 - 1608240163 - 2 * ((v4 - 136) & 0xA0243465)) ^ 0xDEF11193);
  *(void *)(v4 - 136) = v1;
  *(_DWORD *)(v4 - 128) = v5 + v2 + 573;
  *(_DWORD *)(v4 - 124) = v3 - v5 + ((v2 - 1563) | 0x58E) - 1725660165;
  (*(void (**)(uint64_t))(v0 + 8 * (v2 ^ 0xFA0)))(v4 - 136);
  JUMPOUT(0x100060E24);
}

uint64_t sub_100060ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (int)(((*(_DWORD *)(v6 + 48 * (v9 + a6)) == 431333036)
                                     * (((v7 - 976) | 0x200) + (v7 ^ 0xFFFFFA60))) ^ v7)))();
}

uint64_t sub_100060F20@<X0>(uint64_t a1@<X1>, int a2@<W7>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28)
{
  *(&a28 + a3 + a1) = 119;
  return (*(uint64_t (**)(void))(v29 + 8 * ((1458 * ((unint64_t)(a3 + 1 + a1) < 0x38)) ^ (a2 + v28 + 482))))();
}

uint64_t sub_100060F60@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((a1 - 1036858269) & 0x3DCD3325) + 1689) * (v1 == v2)) ^ a1)))();
}

void sub_100060FA0()
{
}

uint64_t sub_100060FC0()
{
  return sub_10004D558();
}

uint64_t sub_10006103C()
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((595
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
                                 + ((*(unsigned __int8 *)(v3 + 3) - 134) ^ v2) == v0)) ^ v4)))();
}

void sub_100061070()
{
}

uint64_t sub_100061178(uint64_t a1)
{
  int v1 = 831981571 * ((a1 & 0x847A176C | ~(a1 | 0x847A176C)) ^ 0xE22438B7);
  int v2 = *(_DWORD *)(a1 + 4) - v1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = (*(_DWORD *)a1 ^ v1) - 899246191;
  unsigned int v5 = v4
     + (*(_DWORD *)(v3 - 0xB999BAB1C51203FLL) ^ 0x6CAA79AE)
     - ((2 * (v4 + (*(_DWORD *)(v3 - 0xB999BAB1C51203FLL) ^ 0x6CAA79AE))) & 0xD954F35C)
     + 1823111598;
  *(_DWORD *)(v3 - 0xB999BAB1C51203FLL) = v5;
  return (*(uint64_t (**)(void))((char *)*(&off_10018D100 + (v2 ^ 0x4EA))
                              + 8 * ((830 * ((v5 ^ 0x6CAA79AE) < v4)) ^ v2)
                              - 4))();
}

uint64_t sub_100061240(uint64_t a1)
{
  int v2 = 831981571 * ((a1 + 752367241 - 2 * (a1 & 0x2CD83689)) ^ 0xB579E6AD);
  int v3 = *(_DWORD *)a1 + v2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 44) - v2;
  unsigned int v9 = 1224239923
     * (((&v11 | 0xF2B632B2) - &v11 + (&v11 & 0xD49CD48)) ^ 0x5CF65);
  int v17 = v3 + v9 - 1695026406;
  uint64_t v11 = v7;
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  uint64_t v13 = v6;
  unsigned int v12 = (v8 ^ 0xFC72F6E9) - v9 + 1331093351 + ((2 * v8) & 0xF1FFF9FE ^ 0x11A102C);
  uint64_t result = (*(uint64_t (**)(uint64_t *))((char *)*(&off_10018D100 + (v3 ^ 0x650810C1))
                                                + 8 * (v3 ^ 0x6508197F)
                                                - 4))(&v11);
  *(_DWORD *)(a1 + 4) = v16;
  return result;
}

uint64_t sub_1000613B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  BOOL v22 = v19 - 1978913763 < (a19 + 754530569);
  if ((a19 + 754530569) < 0x928E1167 != v19 - 1978913763 < (v20 ^ 0x58Bu) - 1836183244) {
    BOOL v22 = (a19 + 754530569) < 0x928E1167;
  }
  return (*(uint64_t (**)(void))(v21 + 8 * ((112 * v22) ^ v20)))();
}

uint64_t sub_100061428@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + (v8 + v4)) = *(unsigned char *)(v3 + (v8 + v4));
  return (*(uint64_t (**)(void))(v1 + 8 * ((((v6 ^ (v8 - 1 == v2)) & 1) * v7) ^ v5)))(0);
}

void sub_100061460(uint64_t a1)
{
  int v1 = 268847287 * ((a1 - 2 * (a1 & 0x4542390B) + 1161967883) ^ 0xBAE82823);
  if (*(void *)(a1 + 24)) {
    BOOL v2 = (*(_DWORD *)(a1 + 4) ^ v1) == 1313839093;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10006151C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((107
                                * (((LODWORD(STACK[0x3B8]) == 1704253533) ^ (-105 * ((v0 - 113) ^ 0x35)
                                                                                            + 53)) & 1)) ^ (v0 + 911))))();
}

uint64_t sub_100061584@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 - 7 + (v7 + v5 - a2)) = *(void *)(v4 - 7 + (v7 + v5 - a2));
  return (*(uint64_t (**)(void))(v3 + 8 * ((327 * ((a1 ^ 0x31) + a2 - 1132 == (v6 & 0xFFFFFFF8))) ^ a1)))();
}

void sub_1000615D4(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(void *)(v19 - 104) = a5;
  *(void *)(v19 - 128) = a16;
  *(void *)(v19 - 120) = a15;
  *(_DWORD *)(v19 - 112) = a1 - ((((2 * (v19 - 144)) | 0x8BCC4A8C) - (v19 - 144) - 1172710726) ^ 0xB755D891) * v18 + 243;
  *(void *)(v19 - 144) = a18;
  *(void *)(v19 - 136) = a16;
  JUMPOUT(0x100037024);
}

uint64_t sub_100061638(double a1)
{
  *(double *)(v6 + (v2 ^ v3)) = a1;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v5 == 0) * v4) ^ v1)))();
}

void sub_100061664(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X10, X17 }
}

uint64_t sub_1000616B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, char a12, int a13, unint64_t *a14, uint64_t a15)
{
  char v22 = *(unsigned char *)(v15 + 56) - v20;
  unsigned int v23 = 268847287 * ((((2 * &a10) | 0x96A7D3F6) - &a10 + 883693061) ^ 0x34F9F8D3);
  a14 = &STACK[0x73801E9372C50DB3];
  a15 = v19;
  a12 = (v22 ^ 0x4E)
      - -73 * ((((2 * &a10) | 0xF6) - &a10 + 5) ^ 0xD3)
      + ((2 * v22) & 0xE7 ^ 0x62)
      + 95;
  a10 = v23 + v18 + 1059;
  a11 = (v21 - 121524570) ^ v23;
  uint64_t v24 = (*(uint64_t (**)(int *))(v17 + 8 * (v18 ^ 0xBA7)))(&a10);
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * (((a13 == v16) * (v18 + 1203)) ^ v18)))(v24);
}

uint64_t sub_10006178C(uint64_t a1, uint64_t a2)
{
  int v8 = *(unsigned __int8 *)(v2 + (v5 + v4 + 2));
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3
                                                             + 8
                                                             * ((28 * (((v7 + 1394) ^ 0xE8FBFB17) + v6 != 683407057)) ^ v7)))(a1, a2, (v8 ^ 0x75BFF97F) - 271261986 + ((v8 << (v7 - 77)) & 0xFEu));
}

uint64_t sub_100061810@<X0>(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v1 + 48) - 0x634ED76D4AB8828DLL) = a1;
  return sub_100061830();
}

void sub_100061830()
{
  *(_DWORD *)(v0 + 24) = v1;
}

uint64_t sub_100061870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((455 * (v7 + 1 == v8 + 20)) ^ a6)))();
}

uint64_t sub_100061948@<X0>(uint64_t a1@<X1>, unsigned int a2@<W8>)
{
  uint64_t v4 = a2;
  unint64_t v5 = ((2 * v2) ^ 0x4EEu ^ (unint64_t)(a1 - 371)) + a2;
  if (v5 <= 0x38) {
    unint64_t v5 = 56;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((107 * (v5 - v4 + 970169018 < 8)) ^ v2)))();
}

uint64_t sub_1000619A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  return sub_100061A1C(49, a14, 1505721939, 88, a5, &STACK[0x290], 45, 1689, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35);
}

uint64_t sub_100061A1C(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  BOOL v7 = v4 + ((2 * LODWORD(STACK[0x2D4])) & 0x7A ^ a4) + (STACK[0x2D4] & 0x3F ^ a3) + 776 < 0xFFFFFFC0;
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * ((v7 | (2 * v7)) ^ (v6 + 1143))))(1094675968);
}

uint64_t sub_100061B20()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((16 * (v1 - 555991477 < (v2 ^ 0xFFFFFD2A))) | (32
                                                                               * (v1 - 555991477 < (v2 ^ 0xFFFFFD2A)))) ^ (v2 + 767))))();
}

void sub_100061B60()
{
}

uint64_t sub_100061B70@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + (v5 + v4)) = *(unsigned char *)(v2 + (v5 + v4));
  return (*(uint64_t (**)(void))(v6 + 8 * ((3432 * (v5 - 1 == ((a1 + 1421) ^ (v3 + 163)))) ^ (a1 + 876))))();
}

uint64_t sub_100061BB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((52 * (a3 + v8 + (a7 ^ 0x5FAu) - 1073733649 > 7)) ^ a7)))();
}

uint64_t sub_100061C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11)
{
  *(unsigned char *)(v11 + (v15 + v12)) = *(unsigned char *)(a9 + (v15 + v12)) ^ 0x77;
  return (*(uint64_t (**)(void))(v16 + 8 * (((v15 + 1 + v12 >= (v13 ^ a11)) * v14) ^ v17)))();
}

void sub_100061C4C()
{
}

uint64_t sub_100061CE4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33)
{
  return (*(uint64_t (**)(void))(v35
                              + 8
                              * ((((unint64_t)(&a33
                                                    + ~a19
                                                    + v33
                                                    + (((a1 + 244) | 0x241) ^ (v34 + 974))) > 0xF)
                                * (((a1 + 183) | 0x20) ^ 0x142)) ^ a1)))();
}

uint64_t sub_100061D3C()
{
  int v3 = v1 - ((2 * v1 + 886460230) & 0x797EA294) - 685082387;
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (v2 ^ (49
                                     * (((v3 << ((-10 * (v2 ^ 0xD8)) ^ 0xD9)) & 0xDFEDEBEA ^ ((v2 ^ 0x462) + 1500290754))
                                      + (v3 ^ 0xD349A4BF)
                                      + 362806208 == 93778357)))))();
}

uint64_t sub_100061DE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  BOOL v41 = &a36 + v36;
  uint64_t v62 = &a34 + v36;
  int v61 = &a20 + v36;
  uint64_t v60 = &a26 + v36;
  uint64_t v58 = &a30 + v36;
  int v57 = &a24 + v36;
  uint64_t v56 = &a32 + v36;
  int v42 = &a28 + v36;
  int v43 = v37 ^ 0x692;
  uint64_t v66 = a1[4];
  uint64_t v44 = a1[1];
  uint64_t v45 = *(void *)(a1[2] - 0x5693A2FF918C2418);
  uint64_t v46 = a1[2];
  *(void *)(v40 - 104) = a2;
  *(_DWORD *)(v40 - 112) = (v37 ^ 0x692)
                         - 799
                         - 1224239923 * ((((v40 - 144) | 0x4AC3EA30) - ((v40 - 144) & 0x4AC3EA30)) ^ 0xB87017E7);
  *(void *)(v40 - 128) = v45;
  *(void *)(v40 - 120) = v46;
  uint64_t v47 = v46;
  uint64_t v64 = v46;
  int v48 = ((v37 ^ 0x692) - 1995132186) & 0x76EB4DFD;
  *(void *)(v40 - 144) = v44;
  *(void *)(v40 - 136) = &a36 + v36;
  int v49 = ((v37 ^ 0x692) - 2102394254) & 0x7D4FFAFF;
  uint64_t v63 = 8 * ((v37 ^ 0x692) + 1028);
  (*(void (**)(uint64_t))(v39 + v63))(v40 - 144);
  *(_DWORD *)(v40 - 120) = v43
                         + 69008221
                         * ((((v40 - 144) | 0xADA53259) - (v40 - 144) + ((v40 - 144) & 0x525ACDA0)) ^ 0x7E076053)
                         + 114;
  *(void *)(v40 - 112) = v47;
  *(void *)(v40 - 144) = v44;
  *(void *)(v40 - 136) = v41;
  *(void *)(v40 - 128) = v42;
  int v50 = v43;
  int v65 = v43;
  (*(void (**)(uint64_t))(v39 + 8 * (v43 ^ 0xD99)))(v40 - 144);
  *(void *)(v40 - 128) = v41;
  *(void *)(v40 - 120) = v47;
  *(void *)(v40 - 104) = v42;
  *(void *)(v40 - 144) = v44;
  *(void *)(v40 - 136) = v62;
  LODWORD(v41) = v43 - 799;
  int v51 = v43 - 799 - 1224239923 * ((v40 - 144) ^ 0xF2B3FDD7);
  *(_DWORD *)(v40 - 112) = v51;
  uint64_t v52 = 8 * (v50 ^ 0xC04);
  (*(void (**)(uint64_t))(v39 + v52))(v40 - 144);
  *(_DWORD *)(v40 - 112) = v51;
  *(void *)(v40 - 104) = v42;
  *(void *)(v40 - 128) = v62;
  *(void *)(v40 - 120) = v64;
  *(void *)(v40 - 144) = v44;
  *(void *)(v40 - 136) = v61;
  (*(void (**)(uint64_t))(v39 + v52))(v40 - 144);
  *(void *)(v40 - 104) = v42;
  *(_DWORD *)(v40 - 112) = v41
                         - 1224239923
                         * (((((v40 - 144) | 0xBB10DC) ^ 0xFFFFFFFE) - (~(v40 - 144) | 0xFF44EF23)) ^ 0xDF712F4);
  *(void *)(v40 - 144) = v44;
  *(void *)(v40 - 136) = v60;
  *(void *)(v40 - 128) = v61;
  *(void *)(v40 - 120) = v64;
  (*(void (**)(uint64_t))(v39 + v63))(v40 - 144);
  *(void *)(v40 - 144) = v44;
  *(void *)(v40 - 136) = v58;
  *(_DWORD *)(v40 - 112) = v41
                         - 1224239923 * ((((v40 - 144) | 0xF29ABA3C) - ((v40 - 144) & 0xF29ABA3C)) ^ 0x2947EB);
  *(void *)(v40 - 128) = v60;
  *(void *)(v40 - 120) = v64;
  *(void *)(v40 - 104) = v42;
  (*(void (**)(uint64_t))(v39 + v63))(v40 - 144);
  *(_DWORD *)(v40 - 112) = v41
                         - 1224239923 * (((v40 - 144) & 0xF279EF04 | ~((v40 - 144) | 0xF279EF04)) ^ 0xFF35ED2C);
  *(void *)(v40 - 128) = v58;
  *(void *)(v40 - 120) = v64;
  *(void *)(v40 - 144) = v44;
  *(void *)(v40 - 136) = v57;
  *(void *)(v40 - 104) = v42;
  (*(void (**)(uint64_t))(v39 + v63))(v40 - 144);
  *(_DWORD *)(v40 - 112) = v41
                         - 1224239923 * (((v40 - 144) & 0x3B67870F | ~((v40 - 144) | 0x3B67870F)) ^ 0x362B8527);
  *(void *)(v40 - 128) = v57;
  *(void *)(v40 - 120) = v64;
  *(void *)(v40 - 144) = v44;
  *(void *)(v40 - 136) = v56;
  *(void *)(v40 - 104) = v42;
  (*(void (**)(uint64_t))(v39 + v63))(v40 - 144);
  int v59 = 2 * (v40 - 144);
  *(_DWORD *)(v40 - 112) = v41 - 1224239923 * (((v59 | 0x9B7A3224) - (v40 - 144) + 843245294) ^ 0x3F0EE4C5);
  *(void *)(v40 - 104) = v42;
  *(void *)(v40 - 144) = v44;
  *(void *)(v40 - 136) = v42;
  *(void *)(v40 - 128) = v56;
  *(void *)(v40 - 120) = v64;
  (*(void (**)(uint64_t))(v39 + v63))(v40 - 144);
  uint64_t v53 = *(void *)(v64 - 0x5693A2FF918C2420);
  *(void *)(v40 - 128) = v38;
  *(void *)(v40 - 144) = v53;
  *(_DWORD *)(v40 - 136) = v65 + 831981571 * ((v40 + 1572311972 - 2 * ((v40 - 144) & 0x5DB79434)) ^ 0xC4164410) + 400;
  (*(void (**)(uint64_t))(v39 + 8 * (v65 + 1133)))(v40 - 144);
  *(_DWORD *)(v40 - 128) = (v65 - 1076) ^ (944348131 * (((v59 | 0x7083DFB6) - (v40 - 144) - 943845339) ^ 0x9B584B95));
  *(void *)(v40 - 136) = v66;
  uint64_t v54 = (*(uint64_t (**)(uint64_t))(v39 + 8 * (v65 ^ 0xD5B)))(v40 - 144);
  return (*(uint64_t (**)(uint64_t))(v39
                                            + 8
                                            * ((((*(_DWORD *)(v40 - 144) - 1131453695) < 0x7FFFFFFF)
                                              * ((v48 - 885) ^ v49)) ^ v65)))(v54);
}

void sub_10006231C()
{
}

uint64_t sub_100062328(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)((((3 * (v5 ^ 0x96A)) ^ (v5 + 1269071721) & 0xB45B7BEF ^ 0x1A5) * (v4 == a4)) ^ v5)))();
}

uint64_t sub_100062374@<X0>(int a1@<W8>)
{
  int v4 = v1 + a1;
  if (v4 >= 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = -v4;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((53 * (((v5 > 0x82) ^ (v2 + 79)) & 1)) ^ v2)))();
}

void sub_1000623A8()
{
  *int v1 = v0;
  sub_100049F54();
}

uint64_t sub_1000623B0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((16 * (*(_DWORD *)(a1 + 1424) != 278074005)) | (32
                                                                                * (*(_DWORD *)(a1 + 1424) != 278074005))) ^ v1)))();
}

uint64_t sub_1000623DC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 32) = *(void *)(a2 + 8);
  return 0;
}

uint64_t sub_1000623F4@<X0>(uint64_t a1@<X2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  unsigned int v34 = *(_DWORD *)(&a17 + ((v32 + a2) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + (v32 + a2 + 1)) = ((v34 >> (v30 + 20)) ^ 0x43)
                                                - ((2 * ((v34 >> (v30 + 20)) ^ 0x43)) & 0xEF)
                                                + 119;
  *(unsigned char *)(a1 + (v32 + a2)) = (HIBYTE(v34) ^ 0x58) - ((2 * (HIBYTE(v34) ^ 0x58)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v32 + a2 + 2)) = (BYTE1(v34) ^ 0xA1) - ((2 * (BYTE1(v34) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v32 + a2 + 3)) = v34 ^ 0xB2;
  BOOL v35 = v32 - 2132022152 < (a29 + 1448629391);
  if (v32 - 2132022152 < v29 != a29 + 1448629391 < v29) {
    BOOL v35 = a29 + 1448629391 < v29;
  }
  return (*(uint64_t (**)(void))(v33 + 8 * ((v35 * v31) ^ v30)))();
}

uint64_t sub_1000624DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,int a47)
{
  if (a23 == 2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47
  }
                                                                                  + 8
                                                                                  * ((30
                                                                                    * (a47 == ((a6 + 1187462368) & 0xBC2D1F7F)
                                                                                            + 1491162775)) ^ (a8 + a6 + 1757))))(a1, a2, a3, 1704253533, a15);
  if (a23 == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47
  }
                                                                         + 8
                                                                         * (((a47 == 1491164578) * (a8 + a6 + 71)) ^ (a8 + a6 + 241))))(a15, a2, a3, 1704253533);
  uint64_t v49 = 13 * ((a6 + 61) ^ 0xFD0BAAAB);
  uint64_t v50 = ((unint64_t)&a29 ^ 0x337FF55CFFADEDFFLL)
      + ((2 * (void)&a29) & 0x66FFEAB9FF5BDBF0)
      - 0x1185000C4A4E6FELL
      + v49;
  a46 = ((13 * ((a6 + 61) ^ 0xAB) + 49 + v50) ^ 0xBA) * (v50 - 87);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8 * (int)v49))(a15, a2, a3, 1704253533);
}

uint64_t sub_100062684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v33 - 144) = v32;
  *(void *)(v33 - 136) = v29;
  *(_DWORD *)(v33 - 128) = (v31 + 500) ^ (3804331
                                        * ((2 * ((v33 - 144) & 0x24362F0) - (v33 - 144) + 2109512971) ^ 0x369B8FD));
  (*(void (**)(uint64_t))(v30 + 8 * (v31 + 929)))(v33 - 144);
  *(void *)(v33 - 104) = v32;
  *(void *)(v33 - 128) = a29;
  *(void *)(v33 - 120) = a24;
  *(_DWORD *)(v33 - 112) = v31
                         - 1068
                         - 1224239923
                         * ((((v33 - 144) ^ 0xCA7DE41E) & 0xF0BA43E2 | ~((v33 - 144) ^ 0xCA7DE41E | 0xF0BA43E2)) ^ 0x378BA5D4);
  *(void *)(v33 - 144) = v29;
  *(void *)(v33 - 136) = v32;
  (*(void (**)(uint64_t))(v30 + 8 * (v31 + 759)))(v33 - 144);
  *(_DWORD *)(v33 - 112) = v31
                         - 1068
                         - 1224239923 * ((((v33 - 144) | 0x4AD5FD1B) - ((v33 - 144) & 0x4AD5FD1B)) ^ 0xB86600CC);
  *(void *)(v33 - 104) = a18;
  *(void *)(v33 - 144) = v29;
  *(void *)(v33 - 136) = v32;
  *(void *)(v33 - 128) = v32;
  *(void *)(v33 - 120) = a24;
  (*(void (**)(uint64_t))(v30 + 8 * (v31 + 759)))(v33 - 144);
  *(_DWORD *)(v33 - 144) = v31
                         - 235795823 * (((v33 - 144) & 0x46F1697D | ~((v33 - 144) | 0x46F1697D)) ^ 0x2DA3DFDB)
                         + 426521475;
  *(void *)(v33 - 136) = a23;
  *(void *)(v33 - 128) = v32;
  (*(void (**)(uint64_t))(v30 + 8 * (v31 + 919)))(v33 - 144);
  *(_DWORD *)(v33 - 128) = (v31 + 500) ^ (3804331
                                        * ((1507516239 - ((v33 - 144) | 0x59DADF4F) + ((v33 - 144) | 0xA62520B0)) ^ 0xD8F00546));
  *(void *)(v33 - 144) = v32;
  *(void *)(v33 - 136) = a25;
  (*(void (**)(uint64_t))(v30 + 8 * (v31 ^ 0xFA1)))(v33 - 144);
  *(void *)(v33 - 144) = v32;
  *(_DWORD *)(v33 - 136) = v31
                         + 831981571 * (((v33 - 144) & 0xA0A8D7DE | ~((v33 - 144) | 0xA0A8D7DE)) ^ 0xC6F6F805)
                         + 131;
  *(void *)(v33 - 128) = a25;
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(v30 + 8 * (v31 ^ 0xF60)))(v33 - 144);
  return (*(uint64_t (**)(uint64_t))(v30 + 8 * (((2 * (v31 - 1061) - 957) * (a22 == 0)) | (v31 - 310))))(v34);
}

void sub_1000626E8(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(_DWORD *)(v19 - 112) = a1
                         - ((516638053 - ((v19 - 144) | 0x1ECB4565) + ((v19 - 144) | 0xE134BA9A)) ^ 0x1387474D) * v18
                         + 243;
  *(void *)(v19 - 144) = a18;
  *(void *)(v19 - 136) = a16;
  *(void *)(v19 - 128) = a16;
  *(void *)(v19 - 120) = a15;
  *(void *)(v19 - 104) = a4;
  JUMPOUT(0x100061630);
}

void sub_100062760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_1000627DC(int a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((472
                                * ((*(unsigned char *)(v7 + (a4 + v5 + ((22 * (v4 ^ 0x47)) ^ 0x663) - 1357) * (uint64_t)a1 + 40) & 8) == 0)) ^ v4)))();
}

uint64_t sub_10006282C()
{
  BOOL v4 = *(void *)(v1 + 32) != 0x209B06B4820BA795 && *(_OWORD *)v1 != 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((v4 * (((v0 ^ 0x27A) + 762) ^ 0x23C)) ^ v0)))();
}

uint64_t sub_100062884@<X0>(int a1@<W8>, uint64_t a2, ...)
{
  va_start(va, a2);
  BOOL v5 = (*(uint64_t (**)(void, char *, void, uint64_t))(v3 + 8 * (v4 ^ 0xF69)))(**(unsigned int **)(v2 + 8 * (v4 ^ 0x6DE)), va, (((a1 - 384874119) << ((v4 - 115) ^ 0xA1 ^ ((v4 - 95) | 0x8C))) & 0xDCFF6000)+ ((a1 - 384874119) & 0xFFFFF000 ^ 0xEE7FBFF5)+ 293617675, 1) != 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((58 * v5) ^ v4)))();
}

uint64_t sub_100062928@<X0>(unsigned int a1@<W4>, uint64_t a2@<X8>, uint8x8_t a3@<D0>)
{
  a3.i32[0] = *(_DWORD *)(a2 + a1 + 1);
  return sub_100062954(39 * (v3 ^ 0x449u), 0, a2 - 3, 289, COERCE_DOUBLE(vmovn_s16((int16x8_t)vmovl_u8(a3))));
}

uint64_t sub_100062954(int a1, int a2, uint64_t a3, int a4, float a5)
{
  *(float *)(a3 + (v7 + v5 - a2)) = a5;
  return (*(uint64_t (**)(void))(v9 + 8 * (((a2 + a1 - 659 == v8) * a4) | v6)))();
}

uint64_t sub_100062984@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + v2 - 280387059) = *(unsigned char *)(v4 + v2 - 280387059)
                                  - ((2 * *(unsigned char *)(v4 + v2 - 280387059)) & 0xEF)
                                  + 119;
  return (*(uint64_t (**)(void))(v5 + 8 * ((1587 * (v2 - 1 == ((v1 - 320) ^ v3))) ^ v1)))();
}

uint64_t sub_1000629D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  *(unsigned char *)(a6 + (v6 + a3)) = ((v7 + a5) & v9)
                                           + *(unsigned char *)(v8 + v10 + a1)
                                           - ((2 * *(unsigned char *)(v8 + v10 + a1)) & 0xEF)
                                           + 91;
  return (*(uint64_t (**)(void))(v11 + 8 * ((252 * ((a3 + v6 + 1) > 0x3F)) ^ v7)))();
}

uint64_t sub_100062A34@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * ((((a2 - 970169018) < 0x38)
                                                       * (((v3 - 560893824) | 0x114) - 300)) ^ (v3 - 560892646))))(a1, -970169018);
}

uint64_t sub_100062A88@<X0>(int a1@<W8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 8 * (a1 + 1791)))(*v4);
  _DWORD *v3 = 0;
  *(_DWORD *)uint64_t v1 = 0;
  *(void *)(v1 + 344) = 0;
  *(void *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 360) = 56245771;
  *(_DWORD *)(v1 + 56) = 1837280493;
  return result;
}

uint64_t sub_100062AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x55D5CC6D86BC0F27];
  a14 = (831981571 * ((2 * (&a13 & 0x49672DD0) - &a13 - 1231498705) ^ 0x2F39020B)) ^ 0x8F;
  uint64_t v18 = (*(uint64_t (**)(unint64_t **))(v16 + 18816))(&a13);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((a15 == v15) | ((a15 == v15) << 6) | v17)))(v18);
}

void sub_100062B68(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) + 1224239923 * (a1 ^ 0xF2B3FDD7);
  __asm { BRAA            X15, X17 }
}

uint64_t sub_100062C64(uint64_t a1, unsigned int a2)
{
  int v3 = (*(uint64_t (**)(void, uint64_t))(v2 + 19632))(a2, 1252601147) == 0;
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((4 * v3) | (v3 << 6) | 0x98u)))(4294925268);
}

uint64_t sub_100062CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24)
{
  return (*(uint64_t (**)(void))(v25
                              + 8
                              * (((((a24 == -405001186) ^ (((v24 - 42) ^ 3) + 45)) & 1)
                                * (149 * ((v24 - 42) ^ 0x103) - 1130)) ^ (v24 - 42))))();
}

uint64_t sub_100062D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22
                                                              + 8
                                                              * ((217 * (v21 == (((a21 - 2111) | 0x29A) ^ 0x284))) ^ a21)))(a1, a2, -970169018);
}

uint64_t sub_100062D5C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v4 = a2 & 0x21BC951F;
  int v5 = 37 * (a2 & 0x21BC951F ^ 0x40B);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (a2 & 0x21BC951F ^ 0xD8Bu));
  LODWORD(STACK[0x2C8]) = v3;
  int v7 = *(uint64_t (**)(void))(v2 + 8 * (((v6(a1, 4182676990) != 0) * (v5 - 755)) ^ v4));
  return v7();
}

uint64_t sub_100062DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  (*(void (**)(uint64_t, uint64_t))(v26 + 8 * (v25 ^ (v25 + 2186))))(a24, 2965982036);
  uint64_t v28 = (*(uint64_t (**)(void))(v26 + 8 * (v25 - 1340329273)))();
  *uint64_t v27 = v28;
  v27[1] = 1812433253 * (v28 ^ (v28 >> 30)) + 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8 * ((v25 - 1340330092) ^ 0x5B)))(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_100062E50(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v12 = v11 - 0x7419917862B0D7EBLL + (v10 ^ 0xE4E2B2A1);
  *(_DWORD *)(v7 + 4 * v9) = v12 + v10 - ((v12 << (((a3 ^ 0x93) - 76) ^ 0xC6)) & 0xC9C56542);
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((54
                                * ((HIDWORD(v12) ^ 0xFC799BFF67B3D7FBLL)
                                 + ((v12 >> 31) & 0xCF67AFF6)
                                 + 0x779FF578FAFCFFF0 != a7)) ^ a3)))();
}

uint64_t sub_100062E5C@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v3 + 4 * (v1 - 1503900612)) = 1503900612
                                                          - v1
                                                          + ((1566083941
                                                            * (*(_DWORD *)(v3 + 4 * (v1 - 1503900613)) ^ (*(_DWORD *)(v3 + 4 * (v1 - 1503900613)) >> 30))) ^ *(_DWORD *)(v3 + 4 * (v1 - 1503900612)));
  uint64_t v5 = 69008221 * ((v4 - 192) ^ 0x529C46E3D3A2520ALL);
  *(_DWORD *)(v4 - 176) = ((a1 + 1437244142) ^ 7) - v5;
  *(void *)(v4 - 168) = 3107611710 - v5;
  *(void *)(v4 - 184) = (v1 + 1603711099) + v5;
  *(_DWORD *)(v4 - 160) = ((a1 + 1437244142) ^ 0x72) + v5;
  *(_DWORD *)(v4 - 156) = a1 + 1437244142 - v5;
  *(_DWORD *)(v4 - 152) = v5 + a1 + 2104631576;
  *(_DWORD *)(v4 - 188) = v5 | 1;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 + 1573)))(v4 - 192);
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * *(int *)(v4 - 192)))(v6);
}

uint64_t sub_100062F5C@<X0>(int a1@<W4>, int a2@<W6>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * ((((a3 - 301084339) < 0x38) * (v4 - a1 + 107)) ^ (a2 + v4 + 372))))();
}

void sub_100062F94()
{
  STACK[0x260] = (unint64_t)&STACK[0x1870];
  JUMPOUT(0x100050AC4);
}

uint64_t sub_100062FB0()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((407 * (v1 ^ 0x722)) ^ 0x320) * (v0 == v2 - 1353457354)) ^ v1)))();
}

uint64_t sub_100062FF0()
{
  int v6 = (v0 - 538454643) & 0x6FFBFEBF;
  _DWORD *v4 = v4[623];
  unint64_t v7 = 241568881 * ((~((v5 - 144) | 0xE1C96A0F1E85860) + ((v5 - 144) & 0xE1C96A0F1E85860)) ^ 0xFEB6BDD6D806A3DDLL);
  *(_DWORD *)(v5 - 104) = v7;
  *(_DWORD *)(v5 - 100) = (v6 + 1202852222) ^ v7;
  *(_DWORD *)(v5 - 136) = v7 + v6 + 1452949797;
  *(_DWORD *)(v5 - 144) = (v6 + 1202852327) ^ v7;
  *(_DWORD *)(v5 - 140) = (v6 + 1202852357) ^ v7;
  *(void *)(v5 - 128) = v7 + 3268185100u;
  *(void *)(v5 - 112) = (v3 + 1412258150) + v7;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v6 ^ (v1 + 2419))))(v5 - 144);
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * *(int *)(v5 - 120)))(v8);
}

void sub_100063104()
{
}

uint64_t sub_10006310C(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5 + 8 * (((((v3 - 231) | a3) + 323) * (v4 == 2)) ^ v3)))();
}

uint64_t sub_100063134(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  BOOL v37 = v32 == a2 || a32 - v35 != (v33 ^ 0xD2266726 ^ (293 * (v33 ^ 0x1F2)));
  return (*(uint64_t (**)(void))(v34 + 8 * ((1013 * v37) ^ v33)))();
}

uint64_t sub_100063188@<X0>(int a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W8>)
{
  BOOL v13 = a3 < a2;
  char v14 = *(unsigned char *)(a6 + (a1 + v8 + 57));
  *(unsigned char *)(a5 + (a7 + v11 + a8)) = v14 - ((2 * v14) & 0xEF) + 119;
  unsigned int v15 = v8 + 1 + v10;
  int v16 = v13 ^ (v15 < a2);
  BOOL v17 = v15 < a3;
  if (!v16) {
    BOOL v13 = v17;
  }
  return (*(uint64_t (**)(void))(v12 + 8 * ((!v13 * a4) ^ v9)))();
}

uint64_t sub_1000631F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8 * ((v23 + 264) ^ (448 * ((a22 & 0x20000000) == 0)))))(((a22 & 0x20000000) == 0) << 9, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_100063228()
{
  return 4294925278;
}

uint64_t sub_100063230(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(unsigned char *)(*(void *)(v6 + 96) + 1568) = 0;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((3905
                                * (*(_DWORD *)(v6 + 72) == (v4 ^ 0x60D ^ (a4 - 211))
                                                         - 1318567943
                                                         + (((v4 ^ 0x60D) - 84482772) & 0x5F1F5FB7))) ^ v4 ^ 0x60D)))();
}

uint64_t sub_100063298@<X0>(int a1@<W1>, int a2@<W6>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + (a1 + v7)) = *(unsigned char *)(v3 + (a1 + v7));
  return (*(uint64_t (**)(void))(v6 + 8 * (((a1 - 1 == a2) * v5) ^ (v4 + 53))))();
}

void sub_1000632CC()
{
}

void sub_1000632D8()
{
}

uint64_t sub_1000632E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47)
{
  int v52 = *(_DWORD *)(STACK[0x210] + 52);
  int v53 = STACK[0x500];
  LODWORD(STACK[0x2C8]) = 2 * a47;
  int v54 = 1224239923 * ((((v51 - 192) | 0xAFEE53DD) - ((v51 - 192) & 0xAFEE53DD)) ^ 0x5D5DAE0A);
  *(void *)(v51 - 184) = v50;
  *(_DWORD *)(v51 - 176) = (v52 - 530131245) ^ v54;
  *(_DWORD *)(v51 - 172) = v54 + v49 - 354;
  *(_DWORD *)(v51 - 148) = (((2 * a47) & 0xDFF37FEE ^ 0x148250CC)
                          + 1430191280
                          + (a47 ^ 0x75BA94B7 ^ ((v49 ^ 0x566) - 416))) ^ v54;
  *(void *)(v51 - 168) = &STACK[0x5B0];
  *(void *)(v51 - 160) = v47;
  *(_DWORD *)(v51 - 192) = v54 + (v53 ^ 0xFBFF3AFB) + ((2 * v53) & 0xF7FE75F6) + 1601161079;
  uint64_t v55 = (*(uint64_t (**)(uint64_t))(v48 + 8 * (v49 ^ 0x8DA)))(v51 - 192);
  int v56 = *(_DWORD *)(v51 - 152);
  LODWORD(STACK[0x4AC]) = v56;
  return (*(uint64_t (**)(uint64_t))(v48 + 8 * ((2545 * (v56 == -563355418)) ^ v49)))(v55);
}

uint64_t sub_100063430(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1310
                                * ((unint64_t)*(&off_10018D100 + v1 - 362) - a1 - 4 < (unint64_t)((2 * v1) ^ 0x1CAu)
                                                                                           - 680)) ^ v1)))();
}

uint64_t sub_10006348C()
{
  int v3 = 235795823 * ((((v2 - 192) | 0x18B47B94) - (v2 - 192) + ((v2 - 192) & 0xE74B8468)) ^ 0x8C1932CD);
  *(void *)(v2 - 192) = STACK[0x430];
  *(_DWORD *)(v2 - 184) = v3 ^ 0x78F2562C;
  *(_DWORD *)(v2 - 180) = v3 + v1 - 1882357529;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(v0 + 8 * ((int)v1 + 2324)))(v2 - 192);
  STACK[0x328] = *(void *)(v0 + 8 * v1);
  return sub_100073680(v4, v5, 1062661589, 44);
}

void sub_100063524()
{
}

uint64_t sub_100063530@<X0>(uint64_t a1@<X8>)
{
  uint64_t v9 = (v3 + v6);
  int v10 = *(unsigned __int8 *)(v1 + v9) ^ v5;
  int v11 = ((*(unsigned __int8 *)(v1 + (v9 + 2)) ^ v5) << 16) | ((*(unsigned __int8 *)(v1
                                                                                                + (v9 + 3)) ^ 0x77777777) << 24) | ((*(unsigned __int8 *)(v1 + (v9 + 1)) ^ v5) << (((v2 + 41) | 0xE) ^ 0x26)) | v10;
  *(_DWORD *)(a1 + v9) = v11 + v8 - 2 * (v11 & 0x5E6BE0F6 ^ v10 & 0x10);
  return (*(uint64_t (**)(void))(v7 + 8 * ((467 * ((v3 & 0xFFFFFFC0) != v4 - 4)) ^ v2)))();
}

uint64_t sub_1000635E0(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11 = a3 - 32 + (v7 ^ (a6 + 2157));
  long long v12 = *(_OWORD *)(v9 + v11 - 15);
  long long v13 = *(_OWORD *)(v9 + v11 - 31);
  uint64_t v14 = a1 + v11;
  *(_OWORD *)(v14 - 15) = v12;
  *(_OWORD *)(v14 - 31) = v13;
  return (*(uint64_t (**)(void))(v10 + 8 * (((v8 == 32) * a2) ^ (v6 + 775))))();
}

uint64_t sub_1000635EC()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((884
                                * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 4) - 247)))
                                 + ((*(unsigned __int8 *)(v2 + 4) - 247) ^ v0) == (((v3 - 1184) | 0x4C) ^ (v0 - 349)))) ^ v3)))();
}

uint64_t sub_100063638@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  return sub_100048808(a1, a2, *(_DWORD *)(*v4 + 4 * (v5 - 1047330087)), v3, a3);
}

uint64_t sub_100063664@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  int v56 = a1 ^ 0xE2;
  unint64_t v57 = STACK[0x3C8];
  int v58 = 831981571 * ((v55 + 1478228203 - 2 * ((v55 - 192) & 0x581BF9AB)) ^ 0xC1BA298F);
  int v59 = v58 + LODWORD(STACK[0x554]) - ((a1 ^ 0x91A1566) & (2 * LODWORD(STACK[0x554]))) + 76352022;
  *(void *)(v55 - 184) = v53;
  *(void *)(v55 - 176) = a52;
  *(_DWORD *)(v55 - 152) = (v52 - ((2 * v52 - 112491542) & 0xBA057A34) + 1504214799) ^ v58;
  *(_DWORD *)(v55 - 148) = v59;
  *(_DWORD *)(v55 - 192) = a1 - v58 + 1695027122;
  *(void *)(v55 - 168) = a51;
  *(void *)(v55 - 160) = v57;
  uint64_t v60 = (*(uint64_t (**)(uint64_t))(v54 + 8 * (a1 + 2109)))(v55 - 192);
  int v61 = *(_DWORD *)(v55 - 188);
  LODWORD(STACK[0x4AC]) = v61;
  LODWORD(STACK[0x2A0]) = -1985401897;
  return (*(uint64_t (**)(uint64_t))(v54
                                            + 8
                                            * ((1209 * (v61 == ((v56 + 633924039) & 0xDA3717BE) - 563356232)) ^ v56)))(v60);
}

uint64_t sub_1000637A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,int a52)
{
  return (*(uint64_t (**)(void))(v54
                              + 8
                              * ((249 * (((v52 + 37 * (v53 ^ 0x56D) - 814) ^ LODWORD(STACK[0x4C8])) != a52 - 243809380)) ^ v53)))();
}

uint64_t sub_1000637F4()
{
  _DWORD *v4 = v4[623];
  *(_DWORD *)(v5 - 152) = v2 + v0 + 2104631622;
  *(void *)(v5 - 184) = (v1 - 120968960) + v2;
  *(_DWORD *)(v5 - 188) = v2 ^ 1;
  *(_DWORD *)(v5 - 160) = v2 + v0 - 1583920785 - 94;
  *(_DWORD *)(v5 - 156) = v0 - 1583920785 - v2;
  *(_DWORD *)(v5 - 176) = ((v0 - 1583920785) ^ 9) - v2;
  *(void *)(v5 - 168) = STACK[0x2B0];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v3 + 8 * ((v0 + 46) ^ 0xA7D)))(v5 - 192);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * *(int *)(v5 - 192)))(v6);
}

uint64_t sub_100063894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v7 = v6 - (((v6 << ((9 * ((a5 + 27) ^ 0x13)) ^ 0xD7)) + 886460228) & 0xE5A47280) + 222126306;
  BOOL v8 = ((2 * v7) & 0x7FFFBFCA ^ (((a5 + 1628095845) & 0xCB9336D9) + 1705258407)) + (v7 ^ 0x4D2DE6A5) - 209869825 == 863863780;
  return (*(uint64_t (**)(void))(v5 + 8 * (((4 * v8) | (8 * v8)) ^ (a5 + 748550427))))();
}

uint64_t sub_100063960(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v9 = v5 - 1062661589;
  if (v9 <= 0x40) {
    unsigned int v9 = 64;
  }
  return (*(uint64_t (**)(void))(v8 + 8 * (((a3 - v6 - v7 + v9 < ((v4 + 601282544) & 0xDC2923FF) - 808) * a4) ^ v4)))();
}

uint64_t sub_100063A24(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(int8x8_t *)(a4 + (v5 - 8)) = veor_s8(*(int8x8_t *)(v6 + (v5 - 8)), a1);
  return (*(uint64_t (**)(void))(v9 + 8 * (((v7 == -8) * v8) ^ a5)))();
}

uint64_t sub_100063A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                       + 8
                                                                       * ((((((v3 - 815) | 0x12) + 785) ^ 0x90D)
                                                                         * (v4 == v5)) ^ v3)))(a1, a2, a3, 27);
}

uint64_t sub_100063A70()
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * ((((v2 + 1308) ^ 0x216E83E9 ^ ((v2 + 560204141) | 0xA8381)) * (v1 == v0)) ^ v2)))();
}

uint64_t sub_100063AC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((*(unsigned __int8 *)(*(void *)(a1 + 16) + (v2 - 935020333))
                                   - 405001057
                                   + (~(*(unsigned __int8 *)(*(void *)(a1 + 16) + (v2 - 935020333)) << ((18 * (v3 ^ 0x63)) ^ 0xAB)) | 0xFFFFFEC3)) & 0x1F) == 1)
                                * (v3 - 1780)) ^ v3)))();
}

uint64_t sub_100063B2C@<X0>(int a1@<W0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  return sub_10006F788(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           0);
}

uint64_t sub_100063B34@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((61
                                * (((a2 - 43) ^ (*(unsigned __int8 *)(v2 + a1) == ((a2 - 566008157) & 0x1F ^ 0xEA))) & 1)) ^ (a2 - 1797))))();
}

uint64_t sub_100063B84(uint64_t a1)
{
  int v2 = 1224239923 * ((-2 - ((a1 | 0xB4CFA43B) + (~a1 | 0x4B305BC4))) ^ 0xB983A613);
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = (*(_DWORD *)(a1 + 8) ^ v2) - ((2 * (*(_DWORD *)(a1 + 8) ^ v2) + 552173082) & 0x348650DC);
  int v5 = (*(_DWORD *)(a1 + 4) ^ v2) + 2024873144;
  int v6 = (*(_DWORD *)(a1 + 4) ^ v2) + 2024873897;
  unsigned int v7 = (((2 * &v10) | 0xD9CF7000) - &v10 + 320358400) ^ 0x1E5445D7;
  unsigned int v8 = ((*(_DWORD *)a1 ^ v2 ^ 0x433297F) - 1635074579 + ((2 * (*(_DWORD *)a1 ^ v2)) & 0xDFFAFCEE ^ 0xD798AC00)) ^ (1224239923 * v7);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v14 = v3;
  int v15 = (1224239923 * v7) ^ v6;
  unsigned int v12 = v8;
  int v13 = v4 - 1224239923 * v7 + 1253566331;
  uint64_t result = (*(uint64_t (**)(int *))((char *)*(&off_10018D100 + v5) + 8 * v5 + 18788))(&v10);
  *(_DWORD *)(a1 + 32) = v10;
  return result;
}

uint64_t sub_100063D10(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v13 = v8 + 1;
  *(_DWORD *)(v11 + 4 * v13 + 908) = *(_DWORD *)(v10 + 4 * (*(_DWORD *)(v11 + 4 * v13 + 912) & 1)) ^ *(_DWORD *)(v11 + 4 * v13) ^ ((*(_DWORD *)(v11 + 4 * v13 + 912) & (6 * (v7 ^ a7) + a3) | v9 & 0x80000000) >> 1);
  return (*(uint64_t (**)(void))(v12 + 8 * (((4 * (v13 == 395)) | (8 * (v13 == 395))) ^ (v7 + 145))))();
}

uint64_t sub_100063D18(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)((((v5 - 1883572762) & 0x70450C4D ^ (v5 + 1174014505) & 0xBA05F7F1 ^ 0x49)
                                     * (v4 == a4)) ^ v5)))();
}

void sub_100063D7C()
{
  LODWORD(STACK[0x57C]) = v0;
  JUMPOUT(0x100063D94);
}

void sub_100063D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(_DWORD *)(v28 - 192) = (v26 + 2138963215) ^ (69008221
                                               * ((((v28 - 192) | 0x54517644) - ((v28 - 192) & 0x54517644)) ^ 0x87F3244E));
  (*(void (**)(uint64_t))(v27 + 8 * (v26 ^ 0x921)))(v28 - 192);
  *(void *)(v28 - 184) = a26;
  *(void *)(v28 - 168) = a25;
  *(_DWORD *)(v28 - 160) = (v26 + 211) ^ (1178560073
                                        * ((v28 - 192 - 2 * ((v28 - 192) & 0x9BD09A5) + 163383717) ^ 0xEE882BCD));
  LOBYTE(STACK[0x18F0]) = 73 * ((v28 + 64 - 2 * ((v28 + 64) & 0xA5) - 91) ^ 0xCD) + 94;
  (*(void (**)(uint64_t))(v27 + 8 * (v26 ^ 0x901)))(v28 - 192);
  JUMPOUT(0x10003FD98);
}

uint64_t sub_100063E80(uint64_t result)
{
  unint64_t v1 = 69008221
     * (((result | 0xD11098B7B4482233) - (result | 0x2EEF67484BB7DDCCLL) + 0x2EEF67484BB7DDCCLL) ^ 0x838CDE5467EA7039);
  unint64_t v2 = *(void *)(result + 24) + v1;
  unint64_t v3 = *(void *)(result + 8) - v1;
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 > v3;
  int v6 = v4;
  if (((*(_DWORD *)(result + 4) ^ v1) & 1) == 0) {
    BOOL v5 = v6;
  }
  BOOL v4 = !v5;
  uint64_t v7 = 16;
  if (!v4) {
    uint64_t v7 = 36;
  }
  *(_DWORD *)uint64_t result = (*(_DWORD *)(result + v7) + v1) ^ (*(_DWORD *)(result + 32) - v1);
  return result;
}

uint64_t sub_100063F28(uint64_t result)
{
  unint64_t v1 = 460628867 * ((2 * (result & 0x6088BD7CEA4303EALL) - result - 0x6088BD7CEA4303EBLL) ^ 0xDDE80FED592A7E68);
  unint64_t v2 = *(void *)(result + 24) + v1;
  unint64_t v3 = *(void *)result ^ v1;
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 >= v3;
  int v6 = !v4;
  if (((*(_DWORD *)(result + 32) - 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68)) & 1) == 0) {
    BOOL v5 = v6;
  }
  if (v5) {
    int v7 = *(_DWORD *)(result + 20) - 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68);
  }
  else {
    int v7 = *(_DWORD *)(result + 36) + 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68);
  }
  *(_DWORD *)(result + 12) = v7 ^ (*(_DWORD *)(result + 16)
                                 + 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68));
  return result;
}

void sub_100063FC8(uint64_t a1)
{
  int v1 = 460628867 * (((a1 | 0xB9F12765) - a1 + (a1 & 0x460ED89A)) ^ 0xF567A518);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_10006406C(int a1, uint64_t a2, uint64_t a3, int a4)
{
  *(unsigned char *)(v7 + (a1 - 124805060)) = *(unsigned char *)(v5 + (a1 - 124805060));
  return (*(uint64_t (**)(void))(v8 + 8 * (((a1 - 1 != v4) * (((v6 + a4 + 2013) | 0x110) - 450)) ^ (v6 + a4 + 2636))))();
}

uint64_t sub_1000640B8(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)a1 - 0x5E8E72AB319E4285) + 1272695153;
  int v3 = *(_DWORD *)(*(void *)(a1 + 16) - 0x5E8E72AB319E4285) + 1272695153;
  int v4 = (v2 < 884123318) ^ (v3 < 884123318);
  BOOL v5 = v2 > v3;
  if (v4) {
    BOOL v6 = v2 < 884123318;
  }
  else {
    BOOL v6 = v5;
  }
  int v1 = *(_DWORD *)(a1 + 24) ^ (69008221 * ((a1 - 1382558880 - 2 * (a1 & 0xAD97D360)) ^ 0x7E35816A));
  return (*(uint64_t (**)(void))((char *)*(&off_10018D100 + (v1 ^ 0x46B))
                              + 8 * ((!v6 * ((v1 - 1696560216) & 0x651F78F3 ^ 0x8D4)) ^ v1)
                              - 4))();
}

void sub_1000641AC()
{
}

void sub_1000641B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if (a8 == 1403727501) {
    int v8 = -563355418;
  }
  else {
    int v8 = 563395390;
  }
  *(_DWORD *)(v9 + 40) = v8;
}

uint64_t sub_10006421C()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((3540
                                * ((((*(unsigned __int8 *)(v2 + 1) - 134) << ((v3 ^ 0xEC) - 92)) & v1)
                                 + ((*(unsigned __int8 *)(v2 + 1) - 134) ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_100064264@<X0>(uint64_t a1@<X4>, uint64_t a2@<X7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(uint64_t))
{
  uint64_t v26 = 19 * (v21 ^ 0x4B7u);
  *(unsigned char *)(a1 + (a3 + 2)) = *(unsigned char *)(a2 + ((v23 + v26 + 1871) & (v22 + 2945112069)));
  int v27 = 831981571
      * ((((v25 - 160) ^ 0xA1FAE2DE | 0x727E95CD)
        - ((v25 - 160) ^ 0xA1FAE2DE)
        + (((v25 - 160) ^ 0xA1FAE2DE) & 0x8D816A32)) ^ 0x4A25A737);
  *(_DWORD *)(v25 - 160) = v27 ^ 0x35996873;
  *(_DWORD *)(v25 - 156) = v27 + v26 + 1182;
  *(void *)(v25 - 152) = a20;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v24 + 8 * ((int)v26 + 2417)))(v25 - 160);
  return a21(v28);
}

uint64_t sub_100064324(uint64_t a1)
{
  int v1 = 2078219279 * (((a1 | 0x62FDDF9E) - (a1 & 0x62FDDF9E)) ^ 0xB80749EA);
  int v2 = *(_DWORD *)(a1 + 16) ^ v1;
  int v3 = *(_DWORD *)(a1 + 4) + v1;
  if (v3 < 0) {
    int v3 = -v3;
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) - 0x5E8E72AB319E4285);
  unsigned int v6 = v4 - 1758911813;
  BOOL v5 = v4 - 1758911813 < 0;
  unsigned int v7 = 1758911813 - v4;
  if (!v5) {
    unsigned int v7 = v6;
  }
  return (*(uint64_t (**)(void))((char *)*(&off_10018D100 + (v2 ^ 0x6D0))
                              + 8 * ((19 * (v3 >> 5 < v7)) ^ v2)
                              - 4))();
}

void sub_1000643E0()
{
  *(_DWORD *)(v0 + 4) = -563355418;
}

uint64_t sub_10006442C(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v11 = v8 + v7 + v9 - a1 + (a4 ^ 0x7ACu);
  int8x8_t v12 = vrev64_s8(*(int8x8_t *)(v5 - 7 + v11));
  *(int8x8_t *)(v4 - 7 + v11) = vrev64_s8(vadd_s8(vsub_s8(v12, vand_s8(vadd_s8(v12, v12), (int8x8_t)0xEEEEEEEEEEEEEEEELL)), (int8x8_t)0x7777777777777777));
  return (*(uint64_t (**)(void))(v10 + 8 * ((1150 * (a1 - (v6 & 0xFFFFFFF8) == -8)) ^ a4)))();
}

uint64_t sub_1000644A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45)
{
  int v50 = *((_DWORD *)&a33 + ((v48 + v45) >> ((v47 - a8 + 35) ^ (a6 - 2))) + 18);
  *(unsigned char *)(a5 + (v48 + v45 + 1)) = (BYTE2(v50) ^ 0x43) - ((2 * (BYTE2(v50) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(a5 + (v48 + v45)) = (HIBYTE(v50) ^ 0x58) - ((2 * (HIBYTE(v50) ^ 0x58)) & 0xEF) + 119;
  *(unsigned char *)(a5 + (v48 + v45 + 2)) = (BYTE1(v50) ^ 0xA1) - ((2 * (BYTE1(v50) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(a5 + (v48 + v45 + 3)) = v50 ^ 0xB2;
  BOOL v51 = v48 + 1899675074 < (a45 + 664913108);
  if (v48 + 1899675074 < v46 != a45 + 664913108 < v46) {
    BOOL v51 = a45 + 664913108 < v46;
  }
  return (*(uint64_t (**)(void))(v49 + 8 * ((30 * !v51) ^ v47)))();
}

uint64_t sub_100064594()
{
  STACK[0x2C8] = (unint64_t)&STACK[0x5C0] + STACK[0x288] + ((11 * (v0 ^ 3u)) ^ 0xD3D0C9B05DB3ADA9);
  int v1 = STACK[0x2D4];
  int v2 = (LODWORD(STACK[0x2D4]) - 1588905792) & 0x5EB4C6FF;
  LODWORD(STACK[0x2A8]) = ((v2 + 759784528) & 0xD2B69BEF) + 2147482833;
  LODWORD(STACK[0x2B0]) = v2;
  LODWORD(STACK[0x2A0]) = ((v2 + 1935610049) & 0x8CA0EF7E) - 812;
  LODWORD(STACK[0x298]) = v1 ^ 0xB44;
  return sub_1000646A0(44, 0x3A737B19B9CD1C16);
}

uint64_t sub_1000646A0@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  int v5 = v2 ^ a1;
  int v6 = v2 + 1376;
  if (a2) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = v7;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v8 * (v5 - 1922)) ^ v6)))();
}

uint64_t sub_1000646D8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((((((v6 - 439) | 0x622) - 91) ^ (v6 - 1829972969) & 0x6D132FEC) * (a1 == a6)) | v6)))();
}

void sub_100064728(uint64_t a1)
{
  int v1 = 944348131 * ((a1 & 0x896AFC50 | ~(a1 | 0x896AFC50)) ^ 0xD58CA7E1);
  int v2 = *(_DWORD *)(a1 + 40) - v1;
  int v3 = *(_DWORD *)(a1 + 56) ^ v1;
  int v4 = *(_DWORD *)a1 - v1;
  uint64_t v5 = *(void *)(a1 + 8);
  unsigned int v6 = 69008221 * (((v8 | 0x904891BE) - v8 + (v8 & 0x6FB76E40)) ^ 0x43EAC3B4);
  int v10 = v6 ^ (v2 + 1654);
  unsigned int v13 = (v4 ^ 0x272B452) + v6 + 2140912988 + ((2 * v4) & 0xC1CEFFEE ^ 0xC10A974A);
  uint64_t v9 = v5;
  v8[1] = ((-228493103 * v3 - 1954179008) ^ 0x7E477DEF)
        + ((2 * (-228493103 * v3 - 1954179008)) & 0xFC8EFBDE)
        - v6
        - 1678180482;
  uint64_t v11 = &STACK[0x5122BBEDD94E3023];
  int8x8_t v12 = &STACK[0x296CA2447D59DC5C];
  uint64_t v7 = (char *)*(&off_10018D100 + v2 - 296) - 4;
  (*(void (**)(_DWORD *))&v7[8 * v2 + 16544])(v8);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_100064910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                       + 8
                                                                       * (int)(((((v5 + 434166903) & 0xE61F23EF) - 650)
                                                                              * (v3 == v4)) ^ v5)))(a1, a2, a3, 3263642160);
}

uint64_t sub_100064968(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 241568881 * ((-720613086 - (a1 | 0xD50C5122) + (a1 | 0x2AF3AEDD)) ^ 0xFCE2AA9F);
  return (*(uint64_t (**)(void))((char *)*(&off_10018D100 + (v1 ^ 0x2B0))
                              + 8 * ((28 * (*(void *)a1 != 0x6BA7059072F2C1D3)) ^ v1)
                              - 4))();
}

uint64_t sub_100064A04()
{
  int v0 = (unint64_t *)*(&off_10018D100
                           + (aQ5g[(byte_1001609A8[(-113
                                                                                                  * ((qword_1001B6D98 + dword_1001B6DF8) ^ 0xEA))
                                                                                - 8] ^ 0x5A)
                                                                - 4] ^ (-113
                                                                      * ((qword_1001B6D98 + dword_1001B6DF8) ^ 0xEA)))
                           + 60);
  unsigned __int8 v1 = -113 * ((qword_1001B6D98 - *v0) ^ 0xEA);
  int v2 = (unint64_t *)*(&off_10018D100
                           + (byte_10016DDC8[(byte_100167FB8[v1 - 8] ^ 0x66) - 8] ^ v1)
                           - 174);
  unint64_t v3 = (*v2 + *v0) ^ (unint64_t)&v7;
  unint64_t v4 = (1932141199 * v3) ^ 0xA437147DE07F15EALL;
  unint64_t v5 = 1932141199 * (v3 ^ 0xA437147DE07F15EALL);
  unint64_t *v0 = v4;
  unint64_t *v2 = v5;
  LOBYTE(v5) = -113 * ((v5 - *(_DWORD *)v0) ^ 0xEA);
  int v10 = (char *)*(&off_10018D100
                + (byte_100167EB4[(byte_100163C18[v5 - 8] ^ 0x20) - 4] ^ v5)
                - 76)
      - 4;
  unsigned int v9 = (3804331 * ((v8 + 117650343 - 2 * (v8 & 0x70333A7)) ^ 0x79D61651)) ^ 0x203;
  LOBYTE(v0) = -113 * ((*(_DWORD *)v2 - *(_DWORD *)v0) ^ 0xEA);
  return (*(uint64_t (**)(unsigned char *))((char *)*(&off_10018D100
                                                      + ((-113
                                                                         * ((qword_1001B6D98 - dword_1001B6DF8) ^ 0xEA)) ^ byte_100167EB0[byte_100163C10[(-113 * ((qword_1001B6D98 - dword_1001B6DF8) ^ 0xEA))] ^ 0x83])
                                                      - 175)
                                            + 8
                                            * (byte_10016DCC0[byte_100167CB0[v0] ^ 0xB9] ^ v0)
                                            + 18548))(v8);
}

uint64_t sub_100064C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  return (*(uint64_t (**)(void))(v11
                              + 8 * ((((v12 ^ 0x79F) - 473) * ((a11 - 2012725073) < 0x7FFFFFFE)) ^ v12)))();
}

void sub_100064C94(uint64_t a1)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100064CDC(_DWORD *a1)
{
  *((unsigned char *)a1 + v1 + ((v2 - 1644309204) & 0x8CDF77F6) + 273913976) = 2;
  *a1 = v1;
  return 0;
}

uint64_t sub_100064D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unsigned int a15, uint64_t a16, unint64_t *a17, int a18)
{
  int v23 = ((&a13 + 487303392 - 2 * ((unint64_t)&a13 & 0x1D0BA8E0)) ^ 0xEFB85537) * v22;
  a14 = (v21 - 2024874863) ^ v23;
  a15 = v23 ^ 0xFD16F859;
  a16 = a11;
  a17 = &STACK[0x634ED76D4AB8828D];
  a13 = v23 ^ 0x6BCE5709;
  uint64_t v24 = (*(uint64_t (**)(int *))(v19 + 8 * (v21 + 601)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * (((a18 == v18) * (v20 - 399)) ^ v21)))(v24);
}

uint64_t sub_100064DD4(uint64_t a1, int a2, int a3)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (int)(((((a3 + 620) ^ 0xFFFFFDCF) + (a3 ^ 0x306)) * (v3 == a2)) ^ a3)))();
}

uint64_t sub_100064E08@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((2036 * (v1 != 1704253533)) ^ 0x3F9u)))();
}

uint64_t sub_100064E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  int v40 = BYTE4(a34) ^ 0x89;
  if (v40 == 1)
  {
    BYTE4(a29) = ((8 * a31) ^ 0x70) - ((2 * ((8 * a31) ^ 0x70)) & 0xE0) + 119;
    BYTE5(a29) = ((a7 + a5 + 103) ^ (a31 >> 5) ^ 0x6C)
               - ((2 * ((a7 + a5 + 103) ^ (a31 >> 5) ^ 0x6C)) & 0xEF)
               + 119;
    BYTE6(a29) = ((a31 >> 13) ^ 0x53) - ((2 * ((a31 >> 13) ^ 0x53)) & 0xEF) + 119;
    HIDWORD(v43) = HIDWORD(a30) ^ 6;
    LODWORD(v43) = a31 ^ 0x60000000;
    HIBYTE(a29) = ((a31 >> 21) ^ 0x65) - ((2 * ((a31 >> 21) ^ 0x65)) & 0xEF) + 119;
    LOBYTE(a30) = (v43 >> 29) - ((2 * (v43 >> 29)) & 0xEF) + 119;
    BYTE1(a30) = ((HIDWORD(a30) >> 5) ^ 0x1B) - ((2 * ((HIDWORD(a30) >> 5) ^ 0x1B)) & 0xEF) + 119;
    BYTE2(a30) = ((HIDWORD(a30) >> 13) ^ 0xA8) - ((2 * ((HIDWORD(a30) >> 13) ^ 0xA8)) & 0xEF) + 119;
    int v42 = ((HIDWORD(a30) >> 20) | 0x11) - (HIDWORD(a30) >> 21);
    goto LABEL_5;
  }
  if (v40 == 2)
  {
    BYTE4(a29) = (((a5 ^ (a5 - 97)) + 112) | (2 * (HIDWORD(a30) >> 21))) - (HIDWORD(a30) >> 21) + 119;
    BYTE5(a29) = ((HIDWORD(a30) >> 13) ^ 0xA8) - ((2 * ((HIDWORD(a30) >> 13) ^ 0xA8)) & 0xEF) + 119;
    BYTE6(a29) = ((HIDWORD(a30) >> 5) ^ 0x1B) - ((2 * ((HIDWORD(a30) >> 5) ^ 0x1B)) & 0xEF) + 119;
    HIDWORD(v41) = HIDWORD(a30) ^ 6;
    LODWORD(v41) = a31 ^ 0x60000000;
    HIBYTE(a29) = (v41 >> 29) - ((2 * (v41 >> 29)) & 0xEF) + 119;
    LOBYTE(a30) = ((a31 >> 21) ^ 0x65) - ((2 * ((a31 >> 21) ^ 0x65)) & 0xEF) + 119;
    BYTE1(a30) = ((a31 >> 13) ^ 0x53) - ((2 * ((a31 >> 13) ^ 0x53)) & 0xEF) + 119;
    BYTE2(a30) = ((a31 >> 5) ^ 0xCD) - ((2 * ((a31 >> 5) ^ 0xCD)) & 0xEF) + 119;
    int v42 = ((8 * a31) ^ 0x70) - 32 * (((8 * a31) ^ 0x70u) >> 4);
LABEL_5:
    BYTE3(a30) = v42 + 119;
  }
  return sub_10004DC58(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40);
}

void sub_10006503C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) ^ (3804331 * (((a1 | 0x72B1B0A3) - a1 + (a1 & 0x8D4E4F5C)) ^ 0xC649555));
  __asm { BRAA            X10, X17 }
}

void sub_1000650FC(uint64_t a1)
{
  int v2 = 1224239923 * (((a1 | 0x1AEAD958) - a1 + (a1 & 0xE51526A7)) ^ 0xE859248F);
  int v3 = *(_DWORD *)(a1 + 20) - v2;
  v5[1] = v3
        - 1178560073 * (((v5 | 0xB082C97F) - (v5 & 0xB082C97F)) ^ 0x57B7EB17)
        + 1064656670;
  uint64_t v4 = (char *)*(&off_10018D100 + v3 + 40) - 4;
  (*(void (**)(_DWORD *))&v4[8 * (v3 ^ 0x969)])(v5);
  __asm { BRAA            X1, X17 }
}

uint64_t sub_100065294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_1000652BC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_1000652BC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X7>, const char *a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8 * v34);
  uint64_t v45 = LODWORD(STACK[0x2D8]);
  uint64_t v46 = LODWORD(STACK[0x2D4]);
  int v47 = v45;
  unsigned int v48 = STACK[0x2DC];
  int v49 = STACK[0x2E0];
  int v50 = STACK[0x2DC];
  int v51 = STACK[0x2E0];
  int v52 = LOBYTE(STACK[0x2EC]) ^ 0x89;
  if (v52 == 2)
  {
    int8x16x4_t v83 = vld4q_s8(a6);
    int v70 = a1 + 836;
    uint8x16_t v71 = (uint8x16_t)veorq_s8(v83.val[1], v43);
    _Q17 = vmovl_u8(*(uint8x8_t *)v71.i8);
    _Q16 = vmovl_high_u8(v71);
    __asm
    {
      SHLL2           V18.4S, V16.8H, #0x10
      SHLL2           V19.4S, V17.8H, #0x10
    }
    int v76 = (_DWORD *)(v42 + 4 * (v39 + 1336294788));
    int v77 = *(v76 - 8) ^ *(v76 - 3);
    int v78 = v77 + v37 - (v40 & (2 * v77));
    int v79 = *(_DWORD *)(v42 + 4 * (v39 + 1336294788 + (v70 + 24)) - 3732) ^ *(v76 - 14);
    HIDWORD(v80) = v79 ^ v78 ^ 0x5E6BE0E6;
    LODWORD(v80) = v79 ^ ~v78;
    *int v76 = (v80 >> 31) + v37 - (v40 & (2 * (v80 >> 31)));
    return (*(uint64_t (**)(uint64_t))(v36 + 8 * ((1065 * (v41 == 1336294725)) ^ v70)))(v46);
  }
  else if (v52 == 1)
  {
    unint64_t v81 = __PAIR64__(v48, v45);
    LODWORD(a30) = STACK[0x2E0];
    int8x16x4_t v82 = vld4q_s8(a6);
    uint64_t v53 = (a1 + 71) | 0x704u;
    uint8x16_t v54 = (uint8x16_t)veorq_s8(v82.val[2], v43);
    _Q21 = vmovl_high_u8(v54);
    _Q20 = vmovl_u8(*(uint8x8_t *)v54.i8);
    __asm
    {
      SHLL2           V20.4S, V20.8H, #0x10
      SHLL2           V21.4S, V21.8H, #0x10
    }
    uint64_t v61 = v41 - 16;
    uint64_t v62 = 643 * (v53 ^ 0x787);
    uint64_t v63 = (char *)*(&off_10018D100 + (int)(v53 ^ 0x7E1)) - 4;
    uint64_t v64 = (char *)*(&off_10018D100 + (int)v53 - 1815) - 12;
    int v65 = (v46 ^ v38)
        - 1241856770
        + ((v47 ^ 0xA7BC5E3A) & (v51 ^ (v38 + v62 - 1929)) | (v47 ^ v38) & (v50 ^ v38))
        + *(_DWORD *)&v64[4 * v61 + 4 * v39]
        + (*(_DWORD *)(v42 + 4 * (v63[v61 + v39] - 116)) ^ v37);
    uint64_t v66 = (char *)*(&off_10018D100 + (int)(v53 ^ 0x712)) - 8;
    unsigned int v67 = (v65 + v38 - (v35 & (2 * v65))) ^ v38;
    int v68 = ((v67 << (v66[v61 + v39] - 6)) | (v67 >> (6 - v66[v61 + v39]))) + (v47 ^ v38);
    HIDWORD(a28) = LOBYTE(STACK[0x2EC]) ^ 0xFFFFFF89;
    return (*(uint64_t (**)(_UNKNOWN **, char *, char *, char *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v36 + 8 * (int)v53))(&off_10018D100, v63, v64, v66, v53, v62, v68 + v38 - (v35 & (2 * v68)), v41 - 15, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17,
             a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             v81,
             a30,
             v44,
             a32,
             a33,
             a34);
  }
  else
  {
    LODWORD(STACK[0x2D4]) = 2 * (LODWORD(STACK[0x2D4]) ^ v38) + v38 - (v35 & (4 * (LODWORD(STACK[0x2D4]) ^ v38)));
    LODWORD(STACK[0x2D8]) = 2 * (v45 ^ v38) + v38 - (v35 & (4 * (v45 ^ v38)));
    LODWORD(STACK[0x2DC]) = (v50 ^ v38) + (v48 ^ v38) + v38 - (v35 & (2 * ((v50 ^ v38) + (v48 ^ v38))));
    LODWORD(STACK[0x2E0]) = (v51 ^ v38) + (v49 ^ v38) + v38 - (v35 & (2 * ((v51 ^ v38) + (v49 ^ v38))));
    return v44(v46, v45, a1, a2, a3, a4, v45, a5, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
}

void sub_100065718(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(STACK[0x2E4]) = v7 + (a5 ^ v7) + (a2 ^ v7) - (v6 & (2 * ((a5 ^ v7) + (a2 ^ v7)))) + v5 - 1459;
  JUMPOUT(0x100065760);
}

uint64_t sub_1000657EC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v9 = ((a1 ^ 0xE5F4EDA7) - v8) & 0x852C45F2;
  unsigned int v10 = 944348131 * (((&a3 | 0x9355BA87) - (&a3 & 0x9355BA87)) ^ 0x304C1EC9);
  a3 = v7;
  a4 = a1 - v10 - 11;
  a5 = v10 - v5 - v9 + 898668427;
  uint64_t v11 = (*(uint64_t (**)(uint64_t *))(v6 + 8 * (a1 + 1303)))(&a3);
  return sub_100065878(v11);
}

uint64_t sub_1000658A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29
                                                              + 8
                                                              * ((19
                                                                * (((v28 == 63) ^ ((a28 - 73) ^ (a6 + 96))) & 1)) ^ a28)))(a1, a2, -255000199);
}

uint64_t sub_1000658E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,uint64_t a62)
{
  STACK[0x2C0] = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8 * a61))(a62, 2965982036);
  unsigned int v65 = (*(uint64_t (**)(void))(v62 + 8 * (v64 + 1568)))();
  *uint64_t v63 = v65;
  v63[1] = 1812433253 * (v65 ^ (v65 >> 30)) + 1;
  return (*(uint64_t (**)(void))(v62 + 8 * ((v64 - 213) ^ 0xDE)))();
}

void sub_10006596C()
{
}

uint64_t sub_100065974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(void))(v70 + 8 * ((241 * (v71 == (a70 ^ (v73 + 1314)))) ^ (v72 + 78))))();
}

uint64_t sub_1000659A8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  *(void *)(a2 + (v6 + a4)) = *(void *)(v8 + (v6 + a4));
  return (*(uint64_t (**)(void))(v9 + 8 * (((a3 == a4) * a6) ^ v7)))();
}

uint64_t sub_1000659D4()
{
  return sub_100060FC0();
}

uint64_t sub_100065A00@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  unsigned int v56 = (((v48 | 0xD09C481E) - (v48 & 0xD09C481E)) ^ 0xAE681862) * v51;
  *(void *)(v55 - 176) = v52;
  *(void *)(v55 - 168) = a47;
  *(_DWORD *)(v55 - 184) = a1 ^ v56;
  *(_DWORD *)(v55 - 192) = v50 - v56 + 401;
  *(void *)(v55 - 160) = a48;
  uint64_t v57 = (*(uint64_t (**)(uint64_t))(v53 + 8 * (v50 ^ 0x9A6)))(v55 - 192);
  int v58 = *(_DWORD *)(v55 - 188);
  STACK[0x518] = v49;
  return (*(uint64_t (**)(uint64_t, __n128))(v53
                                                    + 8
                                                    * (((v58 == v54) * (407 * (((v50 - 57) | 0x328) ^ 0x32C) - 106)) ^ v50)))(v57, (__n128)0);
}

void sub_100065AE4()
{
}

uint64_t sub_100065AEC()
{
  LODWORD(STACK[0x4AC]) = v0;
  return sub_100065AF8();
}

uint64_t sub_100065AF8()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((LODWORD(STACK[0x4AC]) == v2)
                                     * ((((v0 - 776) | 0x881) - 1846) ^ (v0 + 1488300131) & 0xA74A54FF)) ^ (v0 + 454))))();
}

void sub_100065B4C(_DWORD *a1)
{
  unsigned int v1 = *a1 + 241568881 * ((a1 - 348976960 - 2 * (a1 & 0xEB3308C0)) ^ 0x3D220C82);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100065C1C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((651
                                * (((((v0 - 2097234906) & 0x7D01473E) - 1049) & *(_DWORD *)(v2 - 0x6BA7059072F2C1BFLL)) == 0)) ^ (v0 + 1234))))();
}

void sub_100065C70()
{
}

uint64_t sub_100065C7C@<X0>(unsigned int a1@<W1>, unsigned int a2@<W3>, int a3@<W4>, int a4@<W6>, int a5@<W8>)
{
  unsigned int v14 = ((v8 - 875) ^ 0x9D4F29A2)
      + v9
      + (v7 ^ 0xE4E2B2A1)
      + v11 * (*(_DWORD *)(*v10 + 4 * a3) ^ (v7 + v8 - 541 - 773));
  *(_DWORD *)(v12 + 4 * v13) = v14 + v7 - ((2 * v14) & 0xC9C56542);
  BOOL v15 = a2 > a1;
  if (v15 == a3 + 1429502903 < a5) {
    BOOL v15 = a3 + 1429502903 < a4;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * (v8 ^ (v15 * v6))))();
}

uint64_t sub_100065D38@<X0>(unsigned int a1@<W8>, uint64_t a2)
{
  BOOL v8 = v2 < a1;
  *(unsigned char *)(a2 + (v4 - 1815540714)) = *(unsigned char *)(v6 + (v4 - 1815540714))
                                                   - ((*(unsigned __int8 *)(v6 + (v4 - 1815540714)) << (61 * (v7 ^ 4) + 110)) & 0xEE)
                                                   + 119;
  if (v8 == v4 - 1868697886 < a1) {
    BOOL v8 = v4 - 1868697886 < v2;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * ((v8 * v3) ^ v7)))();
}

uint64_t sub_100065E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, unsigned int a15, uint64_t a16, unsigned int a17)
{
  unsigned int v21 = 69008221 * ((&a13 & 0x3E414D53 | ~(&a13 | 0x3E414D53)) ^ 0x121CE0A6);
  a16 = a12;
  a17 = (((2 * v18) & 0xBEE37348) + (v18 ^ 0xDF71B9A4) + 836694016) ^ v21;
  a13 = v17;
  a15 = v21 + 2309;
  uint64_t v22 = (*(uint64_t (**)(uint64_t *))(v20 + 19312))(&a13);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * (((4 * (a14 == v19)) | (32 * (a14 == v19))) ^ 0x65Fu)))(v22);
}

uint64_t sub_100065ED8(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 24) - 0x5E8E72AB319E4285);
  if (v2 - 1758911813 < 0) {
    unsigned int v3 = 1758911813 - v2;
  }
  else {
    unsigned int v3 = v2 - 1758911813;
  }
  unsigned int v1 = 3804331 * ((676526031 - (a1 | 0x2852F7CF) + (a1 | 0xD7AD0830)) ^ 0xA9782DC6);
  return (*(uint64_t (**)(void))((char *)*(&off_10018D100 + (int)((*(_DWORD *)(a1 + 16) ^ v1) - 1809))
                              + 8
                              * (int)((((*(_DWORD *)(a1 + 20) ^ v1) - 736754318 >= 4 * (unint64_t)v3)
                                     * (((*(_DWORD *)(a1 + 16) ^ v1) - 1091) ^ 0x3DC)) ^ *(_DWORD *)(a1 + 16) ^ v1)
                              - 4))();
}

uint64_t sub_100065FAC()
{
  return sub_100065FD4(v0 - (v1 & 0xFFFFFFF8));
}

uint64_t sub_100065FD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  *(void *)(v9 + (v6 + v5 - v7)) = *(void *)(v8 + (v6 + v5 - v7));
  return (*(uint64_t (**)(void))(v11 + 8 * ((14 * (a5 + v7 == v10)) ^ a3)))();
}

uint64_t sub_100066008(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)(((a4 + ((a5 + 1254701248) & 0xB536CEB7) + a6 - 2119 < 0xFFFFFFF0)
                                     * ((a5 + 748090518) & 0xD3690BBE ^ 0x175)) ^ a5)))();
}

uint64_t sub_10006606C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, unint64_t *a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16)
{
  unsigned int v20 = 1178560073 * ((2 * (&a11 & 0x493717C8) - &a11 - 1228347340) ^ 0x51FDCA5C);
  a13 = v19 - v20 - 523;
  a14 = 1172488852 - v20;
  a16 = v18;
  a11 = &STACK[0x4B3FB627E137F32A];
  a12 = &STACK[0x5F548590D8AA63C1];
  uint64_t v21 = (*(uint64_t (**)(unint64_t **))(v17 + 8 * (v19 ^ 0xAA8)))(&a11);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * (((*(_DWORD *)(v18 - 0x6BA7059072F2C1BBLL) == ((29 * (v19 ^ 0x3F9)) ^ (v16 + 1009)))
                                              * (v19 ^ 0x7BB)) ^ v19)))(v21);
}

void sub_100066164()
{
}

void sub_100066170(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X9, X17 }
}

uint64_t sub_1000661D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return a21(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

void sub_100066268(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = (v4 + 1109) | 0x1C0;
  *(void *)(v9 - 0x296CA2447D59DC54) = *v5;
  *(_DWORD *)(v10 - 0x5122BBEDD94E300FLL) = a4;
  *(void *)(v13 - 0x6BA7059072F2C1CBLL) = 0x4E4F97F54E4F97F5;
  void *v5 = 0;
  *uint64_t v8 = 218024909;
  unsigned int v7 = ((*(_DWORD *)(v13 - 0x6BA7059072F2C1BFLL) & 0x2299C74A ^ 0x2900543)
      + (*(_DWORD *)(v13 - 0x6BA7059072F2C1BFLL) & 0xDD6638B4 ^ 0x41462895)
      - 2) ^ 0x6286C7CB;
  *(_DWORD *)(v13 - 0x6BA7059072F2C1BFLL) = ((v7 | (v6 - 13439189)) - (v7 | 0xCD08F9) + 13437177) ^ 0xDE621D1A;
  *uint64_t v12 = *v11;
}

void sub_1000663B8()
{
}

void sub_1000663C4()
{
}

void sub_1000663D0(uint64_t a1)
{
  int v1 = 235795823 * (a1 ^ 0x94AD4959);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 16) - 0x6BA7059072F2C1C7) - 299155572;
  unsigned int v3 = *(_DWORD *)(a1 + 8) + v1 + 629805307;
  int v4 = (v3 < 0x3C7AD781) ^ (v2 < 0x3C7AD781);
  BOOL v5 = v2 < v3;
  if (v4) {
    BOOL v6 = v3 < 0x3C7AD781;
  }
  else {
    BOOL v6 = v5;
  }
  __asm { BRAA            X12, X17 }
}

uint64_t sub_1000664D4()
{
  *(_DWORD *)(*v2 + 4 * (v4 + v0)) = v1;
  return (*(uint64_t (**)(void))(v6 + 8 * (((((v3 + 30) ^ (v4 - 1 + v0 >= 0)) & 1) * v5) ^ v3)))();
}

uint64_t sub_100066730@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)((((((27 * (v3 ^ 0x6E4)) ^ 0xFFFFF924) + v2 + v1) >> 31)
                                     * ((81 * ((27 * (v3 ^ 0x6E4)) ^ 0x6DD)) ^ 0x1DE)) ^ (27 * (v3 ^ 0x6E4)))))();
}

uint64_t sub_100066788@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  int v28 = (v22 - 1280877036) & 0x4C589FCF;
  int v29 = v22 - 245;
  unint64_t v30 = ((v19 + 4 * (v28 ^ 0x3EBu) - 656) ^ *(_DWORD *)(a2 + v26)) + HIDWORD(v23);
  *(_DWORD *)(a2 + 4 * a1) = v30 + v19 - (v21 & (2 * v30));
  *(_DWORD *)(a19 + v26) = HIDWORD(v30) + v19 - 2 * HIDWORD(v30);
  BOOL v31 = v25 + 1846619736 < a3;
  if (v20 > 0xE509994 != v25 + 1846619736 < -240163221) {
    BOOL v31 = v20 > 0xE509994;
  }
  return (*(uint64_t (**)(void))(v24 + 8 * (v29 ^ (v31 * v27))))();
}

uint64_t sub_100066840(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * ((((v3 + v4 + 848) ^ 0x499) * (v1 > 0xC2CC8C0F)) ^ (v3 + v4 + 643))))(a1, 1340331655);
}

uint64_t sub_100066884()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((((v3 - 1758911813) * (v1 - 1758911813) > ((v2 - 1676185588) ^ 0x63E8891C))
                                * (((v2 - 1676185588) & 0x63E88FFE) - 1743)) ^ (v2 + 17))))();
}

uint64_t sub_1000668E4@<X0>(unsigned int a1@<W0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X7>, unint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v40 = v39 ^ v27;
  uint64_t v41 = 4 * (v36 + 1 + a5);
  unint64_t v42 = ((v40 * v28) ^ (v25 + 887) ^ *(_DWORD *)(a25 + v41))
      + (a4 ^ HIDWORD(v33))
      + a1 * (unint64_t)(*(_DWORD *)(*a6 + v41) ^ v25);
  unint64_t v43 = HIDWORD(a7)
      + v29 * (unint64_t)(*(_DWORD *)(*v37 + v41) ^ v25)
      + ((v42 + a2 - (v35 & (2 * v42))) ^ a3);
  *(_DWORD *)(a25 + 4 * (v36 + a5)) = v43 + v25 - (v26 & (2 * v43));
  BOOL v45 = v36 + v31 > v32 || v36 + v31 < v38;
  return (*(uint64_t (**)(void))(v34 + 8 * ((v45 * v30) ^ v39)))();
}

void sub_10006698C()
{
}

uint64_t sub_1000669D8()
{
  _DWORD *v4 = v4[623];
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((205 * (((v1 == 1431907797) ^ (v3 + v0 + 40)) & 1)) ^ (v3 + v0 + 1283))))();
}

uint64_t sub_100066A30@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(uint64_t), uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  *(unsigned char *)(a2 + (a3 + v24 + v22)) = *(unsigned char *)(a1 + (v23 - 1296017607));
  int v27 = 831981571 * (((((v26 - 168) | 0xEC6C17E8) ^ 0xFFFFFFFE) - (~(v26 - 168) | 0x1393E817)) ^ 0x8A323833);
  *(void *)(v26 - 160) = a22;
  *(_DWORD *)(v26 - 168) = v27 ^ 0x35996873;
  *(_DWORD *)(v26 - 164) = v27 + v22 + 1169;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v25 + 8 * (v22 + 2404)))(v26 - 168);
  return a15(v28);
}

void sub_100066ACC()
{
}

void sub_100066AD4()
{
  int v3 = 235795823
     * ((((2 * ((v2 - 192) ^ 0xE5053A66)) | 0x39AB4DA6) - ((v2 - 192) ^ 0xE5053A66) - 483763923) ^ 0x6D7DD5EC);
  *(void *)(v2 - 192) = STACK[0x430];
  *(_DWORD *)(v2 - 184) = v3 ^ 0x78F2562C;
  *(_DWORD *)(v2 - 180) = v1 - 1882357529 + v3 + 43;
  (*(void (**)(uint64_t))(v0 + 8 * (v1 + 2367)))(v2 - 192);
  JUMPOUT(0x100066B60);
}

uint64_t sub_100066B7C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (((v4 + 1 == v3 + 32) | (2 * (v4 + 1 == v3 + 32))) ^ a1)))(v1);
}

uint64_t sub_100066C48()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((1858 * (v0 > 0x605C7597)) ^ (v2 + 1340331902))))();
}

uint64_t sub_100066CAC()
{
  *(void *)(v5 - 128) = v4;
  *(void *)(v5 - 120) = v1;
  *(_DWORD *)(v5 - 136) = (v2 + 618) ^ (268847287
                                      * ((2 * ((v5 - 136) & 0x6EEF3EC0) - (v5 - 136) + 286310717) ^ 0xEEBAD015));
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v0 + 8 * (v2 + 1917)))(v5 - 136);
  return (*(uint64_t (**)(uint64_t))(v0
                                            + 8 * ((((v2 - 87571377) & 0x5383FFF ^ 0x608) * (v3 != 1909022040)) ^ v2)))(v6);
}

uint64_t sub_100066D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, unint64_t *a13, int a14)
{
  unsigned int v17 = 3804331
      * (((&a10 | 0x4F6F6A9A) - &a10 + (&a10 & 0xB0909560)) ^ 0x31BA4F6C);
  a13 = &STACK[0x5267DA57ABB8ED88];
  a14 = (v14 - 213) ^ v17;
  a10 = v15;
  a11 = v17 ^ 0x14497ECE;
  a12 = v17 ^ 0x4CDE264;
  uint64_t v18 = (*(uint64_t (**)(uint64_t *))(v16 + 8 * (v14 + 1955)))(&a10);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * ((((v14 ^ (*(_DWORD *)(v15 - 0x6BA7059072F2C1BBLL) == -563355418)) & 1)
                                              * ((v14 + 602) ^ 0x41D)) ^ v14)))(v18);
}

uint64_t sub_100066E48(_DWORD *a1, uint64_t a2)
{
  return ((uint64_t (*)(void))*(&off_1001882B0
                             + ((116 * ((*a1 + *(_DWORD *)(a2 + 4) + 932975722) < 0xC9)) ^ 0x72Fu)))();
}

uint64_t sub_100066E90(uint64_t a1)
{
  unsigned int v5 = *(unsigned __int8 *)(v1 + (v3 + 1));
  uint64_t v6 = (((((v4 ^ 0x58B) + 580) ^ 0xFFD7F503) + 73 * (v4 ^ 0x58B)) ^ v5) + 2 * v5;
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 + 8 * (int)((46 * ((v5 >> 7) ^ 1)) ^ v4)))(a1, v6, (v6 + 1706876766));
}

void sub_100066EFC()
{
}

void sub_100067118(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40) + 235795823 * (((a1 | 0xBFD03985) - a1 + (a1 & 0x402FC67A)) ^ 0x2B7D70DC);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_100067258@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = v13 ^ 0x6C;
  uint64_t v18 = (v13 ^ 0x1FFFFFC21) & (v14 + 1);
  unint64_t v19 = (v17 - 801) ^ v10;
  v20.i64[0] = 0xEEEEEEEEEEEEEEEELL;
  v20.i64[1] = 0xEEEEEEEEEEEEEEEELL;
  v21.i64[0] = 0x7878787878787878;
  v21.i64[1] = 0x7878787878787878;
  *(int8x16_t *)(v12 + (v19 & (a4 + v11))) = vaddq_s8(vaddq_s8(*v16, v21), vmvnq_s8(vandq_s8(vaddq_s8(*v16, *v16), v20)));
  int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8 * (int)((108 * (v18 != 16)) ^ v17));
  return v22(v17, a4 + v11, v18 - 16, v19, v22, a1, a2, a3, a5, a6, a7, a8, a9, a10);
}

void sub_1000672E4()
{
}

uint64_t sub_1000672F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x2B0]) = v68;
  STACK[0x2B8] = v69;
  STACK[0x2D8] = 0;
  int v73 = 1543737703 * ((((2 * (v72 - 192)) | 0xC0B38ABC) - (v72 - 192) + 530987682) ^ 0x9EAD9522);
  *(_DWORD *)(v72 - 184) = v73 ^ LODWORD(STACK[0x2C0]);
  *(_DWORD *)(v72 - 192) = v70 - v73 + 294;
  *(void *)(v72 - 168) = a67;
  *(void *)(v72 - 160) = a68;
  *(void *)(v72 - 176) = 0x4455824F020409ECLL;
  uint64_t v74 = (*(uint64_t (**)(uint64_t))(v71 + 8 * (v70 ^ 0x933)))(v72 - 192);
  BOOL v75 = *(_DWORD *)(v72 - 188) != ((v70 + 631) ^ 0x549) - 563357058;
  return (*(uint64_t (**)(uint64_t))(v71 + 8 * (((8 * v75) | (16 * v75)) ^ v70)))(v74);
}

void sub_1000673CC()
{
}

void sub_1000673D4()
{
}

uint64_t sub_1000673E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  a16 = (v19 - 928) ^ (831981571 * ((&a15 & 0x6D2950CC | ~(&a15 | 0x6D2950CC)) ^ 0xB777F17));
  a15 = &STACK[0x55D5CC6D86BC0F37];
  uint64_t v20 = (*(uint64_t (**)(unint64_t **))(v17 + 8 * (v19 ^ 0xD1Fu)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * (((a17 == v18) * (((v19 + 1121) | 4) + 1032)) ^ v19)))(v20);
}

uint64_t sub_100067484@<X0>(void *a1@<X1>, int a2@<W2>, int a3@<W5>, unsigned int a4@<W6>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  unint64_t v34 = (*(_DWORD *)(a23 + 4 * (a5 + 1 + v26)) ^ v23)
      + HIDWORD(v25)
      + a4 * (unint64_t)(*(_DWORD *)(*a1 + 4 * (a5 + 1 + v26)) ^ v23);
  BOOL v35 = v33 > v27;
  *(_DWORD *)(a23 + 4 * (a5 + v26)) = v34 + v23 - ((v34 << (a3 ^ v29)) & v24);
  if (v35 != a5 + v30 < v31) {
    BOOL v36 = v35;
  }
  else {
    BOOL v36 = a5 + v30 < a2;
  }
  return (*(uint64_t (**)(void))(v28 + 8 * ((v36 * v32) ^ a3)))();
}

uint64_t sub_10006750C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24)
{
  return (*(uint64_t (**)(void))(v26 + 8 * (((a24 == -405001042) * (v24 ^ 0xD6B)) ^ v25)))();
}

void sub_100067548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v30 = 831981571 * ((-609318725 - ((v29 - 144) | 0xDBAE88BB) + ((v29 - 144) | 0x24517744)) ^ 0xBDF0A760);
  *(void *)(v29 - 144) = a21;
  *(_DWORD *)(v29 - 136) = v27 - v30 + 899;
  *(_DWORD *)(v29 - 132) = v30 + 517764793;
  (*(void (**)(uint64_t))(v26 + 8 * (v27 + 1812)))(v29 - 144);
  *(void *)(v29 - 144) = a25;
  *(void *)(v29 - 136) = v25;
  *(_DWORD *)(v29 - 112) = v27
                         - 1224239923 * (((v29 - 144) & 0x229A5DFF | ~((v29 - 144) | 0x229A5DFF)) ^ 0x2FD65FD7)
                         - 145;
  *(void *)(v29 - 128) = v25;
  *(void *)(v29 - 120) = v28;
  *(void *)(v29 - 104) = a21;
  (*(void (**)(uint64_t))(v26 + 8 * (v27 ^ 0xA96)))(v29 - 144);
  JUMPOUT(0x100042D2CLL);
}

uint64_t sub_100067634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  return (*(uint64_t (**)(void))(v12
                              + 8
                              * (int)(((((a6 - 570433928) & 0xAEECBAFD) + (a6 ^ 0x5B9 ^ (v11 + 2259))) * (a5 == a11)) ^ a6)))();
}

uint64_t sub_100067688()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)((((v1 & (2 * (*(unsigned __int8 *)(v2 + 6) - 1)))
                                      + ((*(unsigned __int8 *)(v2 + 6) - 1) ^ v0) == v0)
                                     * (v3 + 136 + ((v3 + 2056543976) & 0x856BA5F3) + 299)) ^ v3)))();
}

void sub_1000676E0(int a1@<W8>)
{
  **(_DWORD **)(v1 - 0x5E8E72AB319E4281) = (v2 + 587080655) ^ 0xC61C916E;
  sub_10004E9FC(a1 + 1);
}

void sub_100067720()
{
}

uint64_t sub_100067744(uint64_t a1, int a2)
{
  v8.i64[0] = 0xEEEEEEEEEEEEEEEELL;
  v8.i64[1] = 0xEEEEEEEEEEEEEEEELL;
  v9.i64[0] = 0x7777777777777777;
  v9.i64[1] = 0x7777777777777777;
  uint64_t v10 = v6 + ((a2 - 375) ^ (v4 + 156));
  int8x16_t v11 = vrev64q_s8(*(int8x16_t *)(v3 + v10 - 15));
  int8x16_t v12 = vextq_s8(v11, v11, 8uLL);
  int8x16_t v13 = vrev64q_s8(*(int8x16_t *)(v3 + v10 - 31));
  int8x16_t v14 = vextq_s8(v13, v13, 8uLL);
  uint64_t v15 = v2 + v10;
  int8x16_t v16 = vrev64q_s8(vaddq_s8(vsubq_s8(v12, vandq_s8(vaddq_s8(v12, v12), v8)), v9));
  *(int8x16_t *)(v15 - 15) = vextq_s8(v16, v16, 8uLL);
  int8x16_t v17 = vrev64q_s8(vaddq_s8(vsubq_s8(v14, vandq_s8(vaddq_s8(v14, v14), v8)), v9));
  *(int8x16_t *)(v15 - 31) = vextq_s8(v17, v17, 8uLL);
  return (*(uint64_t (**)(void))(v7 + 8 * ((22 * ((v5 & 0xFFFFFFE0) != 32)) ^ (a2 + 275))))();
}

void sub_1000677E4(uint64_t a1)
{
  int v1 = 2078219279 * ((2 * (a1 & 0x636844EC) - a1 - 1667777773) ^ 0x466D2D67);
  int v2 = *(_DWORD *)(a1 + 64) - v1;
  int v3 = *(_DWORD *)(a1 + 40) ^ v1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 60) - v1;
  unsigned int v7 = 831981571 * (((v9 | 0x3F000E94) - (v9 & 0x3F000E94)) ^ 0xA6A1DEB0);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v4;
  v9[0] = v2 - v7 + 1695026728;
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  unsigned int v14 = (v3 - ((2 * v3 - 1111982950) & 0xBA057A34) + 1004469095) ^ v7;
  int v15 = v6 + v7 - ((2 * v6 + 82062690) & 0x91A142C) - 1359011641;
  int8x16_t v8 = (char *)*(&off_10018D100 + (v2 ^ 0x2E9)) - 4;
  (*(void (**)(_DWORD *))&v8[8 * v2 + 13720])(v9);
  __asm { BRAA            X8, X17 }
}

void sub_100067990()
{
}

uint64_t sub_100067998@<X0>(uint64_t a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(a3
                                                    + 8 * (((*(_DWORD *)(*v5 + 4 * a2) == v3) * (v4 - 473)) ^ v4)))(a1, (v4 + 64));
}

uint64_t sub_1000679C4(int a1)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((a1 + 1) ^ (v1 < ((2 * a1) ^ 0x8C4u))) & 1 | (4
                                                                                               * (((a1 + 1) ^ (v1 < ((2 * a1) ^ 0x8C4u))) & 1)) | a1)))();
}

uint64_t sub_100067A04()
{
  STACK[0x508] = STACK[0x288];
  return ((uint64_t (*)(void))STACK[0x2A8])();
}

uint64_t sub_100067A1C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  return (*(uint64_t (**)(void))(v27
                              + 8
                              * (((((a1 == 0) ^ *(_DWORD *)(v29 - 140)) & 1) * a27) ^ (v28 - 1300))))();
}

uint64_t sub_100067A4C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = 1178560073 * (v8 ^ 0xE7352268);
  int v6 = *(_DWORD *)a1 + 2078219279 * ((-2 - ((a1 | 0xC3B1469C) + (~a1 | 0x3C4EB963))) ^ 0xE6B42F17) + 231788851;
  int v9 = v6 - v5 + 404;
  unsigned int v10 = 1172488852 - v5;
  uint64_t v12 = v2;
  v8[0] = v4;
  v8[1] = v3;
  uint64_t result = (*(uint64_t (**)(void *))((char *)*(&off_10018D100 + v6) + 8 * v6 + 18868))(v8);
  *(_DWORD *)(a1 + 4) = v11;
  return result;
}

void sub_100067B5C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 69008221 * ((a1 - 1655620505 - 2 * (a1 & 0x9D513C67)) ^ 0x4EF36E6D);
  __asm { BRAA            X15, X17 }
}

uint64_t sub_100067C64@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 - 0xD1C4B9DDB1E97A5) = 1;
  return sub_100067C7C();
}

uint64_t sub_100067C7C(uint64_t result)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(*(void *)(v1 + 8) - 0x14281A3685FADE74) = result;
  *(_DWORD *)(v3 - 0x4EABE2FA14688F5ELL) = v2;
  *(_DWORD *)(v1 + 24) = -563355418;
  return result;
}

uint64_t sub_100067CF4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, unsigned int a20)
{
  v21[623] = *(_DWORD *)(v20 + 4 * (*v21 & (a1 ^ 0x54D))) ^ v21[396] ^ ((*v21 & 0x7FFFFFFE | v21[623] & 0x80000000) >> 1);
  return (*(uint64_t (**)(void))(v22 + 8 * (int)((779 * (a20 > 0x26F)) ^ a1)))();
}

uint64_t sub_100067D4C()
{
  *(_DWORD *)STACK[0x2C8] ^= STACK[0x2C0];
  return sub_100067D70();
}

uint64_t sub_100067D70()
{
  BOOL v3 = (((v0 - 898) | 0x32A) ^ 0xFFFFFCD1) + v1 == 820911360;
  return (*(uint64_t (**)(void))(v2 + 8 * ((16 * v3) | (32 * v3) | v0)))();
}

void sub_100067DC0()
{
}

uint64_t sub_100067E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int a26)
{
  return (*(uint64_t (**)(void))(v28 + 8 * (((v27 ^ 0x430) * (v26 == 989468001)) ^ v27)))(a26);
}

void sub_100067E74()
{
}

uint64_t sub_100067E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26,int a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  int v33 = *(_DWORD *)(a2 + 4);
  unsigned int v34 = 460628867 * ((((2 * &a24) | 0xDCB423AC) - &a24 + 296087082) ^ 0xA2CC93AB);
  a26 = *(void *)(a2 + 8);
  a31 = a13;
  a24 = a15;
  a25 = v31 - 1573480507 + v33 + v34 - 1192;
  a29 = a16;
  a30 = a14;
  a28 = v31 - v34 + 277;
  uint64_t v37 = (*(uint64_t (**)(uint64_t *))(v32 + 8 * (v31 ^ 0x8B0)))(&a24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v32
                                                                                                  + 8 * ((1705 * (a27 == -563355418)) ^ v31)))(v37, a17, 173609183, 1511410743, 1704253536, a6, a7);
}

uint64_t sub_100067FA0()
{
  unsigned int v3 = *(_DWORD *)(v1 - 0x6BA7059072F2C1C3) - 965683193;
  unsigned int v4 = *(_DWORD *)(v1 - 0x6BA7059072F2C1C7) - 2061497385;
  BOOL v5 = v3 < ((v2 - 1800) | 0x11u) - 747658757;
  BOOL v6 = v3 > v4;
  if (v5 == v4 < 0xD36FA3CC) {
    BOOL v5 = v6;
  }
  return (*(uint64_t (**)(void))(v0 + 8 * ((v5 * ((v2 ^ 0x9CC) - 256)) ^ v2)))();
}

uint64_t sub_100068044(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = a4 + a3 + a5 + 523 * (a6 ^ 0x3A0u) + v11;
  uint64_t v13 = ((_BYTE)a4 + (_BYTE)a3 + (_BYTE)a5 + 11 * (a6 ^ 0xA0)) & 0xF;
  unint64_t v14 = v13 + v7 - v12;
  unint64_t v15 = (v13 | v9) - v12;
  uint64_t v16 = (v13 | v8) - v12;
  BOOL v18 = (unint64_t)(v6 - v11) > 0xF && v14 > 0xF && v15 > 0xF;
  unint64_t v19 = v16 + 1;
  int v21 = v18 && v19 >= (unint64_t)((a6 ^ 0x3A0u) + 1911) - 1897;
  return (*(uint64_t (**)(void))(v10 + 8 * (a6 | (16 * v21))))();
}

uint64_t sub_1000680BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return (*(uint64_t (**)(void))(v14 + 8 * (((a13 == (v16 ^ 0x42D9EA40)) * (v15 ^ (v13 + 128) ^ (v13 - 2017))) ^ v15)))();
}

uint64_t sub_1000680F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,int a24,int a25)
{
  *(_DWORD *)(v27 - 120) = a23 + 69008221 * ((v27 - 119519730 - 2 * ((v27 - 152) & 0xF8E046A6)) ^ 0x2B4214AC);
  *(_DWORD *)(v27 - 116) = a25 - 69008221 * ((v27 - 119519730 - 2 * ((v27 - 152) & 0xF8E046A6)) ^ 0x2B4214AC);
  *(_DWORD *)(v27 - 112) = 69008221 * ((v27 - 119519730 - 2 * ((v27 - 152) & 0xF8E046A6)) ^ 0x2B4214AC)
                         + 2104631361
                         + v25;
  *(_DWORD *)(v27 - 148) = (69008221 * ((v27 - 119519730 - 2 * ((v27 - 152) & 0xF8E046A6)) ^ 0x2B4214AC)) ^ 1;
  *(_DWORD *)(v27 - 136) = a24 - 69008221 * ((v27 - 119519730 - 2 * ((v27 - 152) & 0xF8E046A6)) ^ 0x2B4214AC);
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v26 + 8 * a22))(v27 - 152);
  return (*(uint64_t (**)(uint64_t))(v26 + 8 * *(int *)(v27 - 152)))(v28);
}

uint64_t sub_1000681B0@<X0>(int a1@<W4>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  return (*(uint64_t (**)(void))(v16 + 8
                                    * (((a16 == (((a2 - 645) | 0x68) ^ (a1 - 71))) * (((a2 - 97) | 2) - 209)) ^ a2)))();
}

void sub_1000681F0()
{
}

uint64_t sub_10006824C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  STACK[0x360] = a9 + 1;
  int v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))STACK[0x420];
  STACK[0x508] = v58 - 112;
  return v59(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

uint64_t sub_10006826C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  int v40 = (a2 - 53) | 0x420;
  int v35 = 831981571 * ((((2 * (v34 - 120)) | 0xA7832B06) - (v34 - 120) - 1405195651) ^ 0xCA6045A7);
  *(void *)(v34 - 112) = a10;
  *(_DWORD *)(v34 - 120) = (a13 + 875357039) ^ v35;
  *(_DWORD *)(v34 - 116) = v35 + a2 + 1181;
  uint64_t v36 = (*(uint64_t (**)(uint64_t))(v33 + 8 * (a2 ^ 0x990)))(v34 - 120);
  uint64_t v37 = a33 & 0x3F;
  *(&a24 + (v37 ^ 0x2E)) = -9;
  return (*(uint64_t (**)(uint64_t))(v33 + 8 * ((((v37 ^ 0x2E) > 0x37) * (v40 - 146)) ^ a2)))(v36);
}

uint64_t sub_10006837C()
{
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * ((((v2 ^ 0x7AB) + 3880) * (v0 == v1)) ^ v2)))(3095667141);
}

uint64_t sub_1000683B4(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1009
                                * ((((*(unsigned __int8 *)(a2 + 3) - 137) << ((v5 - a3) ^ (v3 + 1))) & v7)
                                 + ((*(unsigned __int8 *)(a2 + 3) - 137) ^ v6) == v6)) ^ v5)))();
}

uint64_t sub_1000683FC(uint64_t a1, int a2, int a3)
{
  return (*(uint64_t (**)(void))(v4
                              + 8 * (((((v3 - 1175) | 0x1B) - 186) * ((a3 + a2 + 422776967) < 8)) ^ v3)))();
}

uint64_t sub_100068470()
{
  return sub_100068478();
}

uint64_t sub_100068478(double a1, double a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v50 = *(void *)(v46 + 8 * v45);
  int v51 = BYTE4(a37) ^ 0x89;
  if (v51 != 2)
  {
    if (v51 == 1)
    {
      int8x16x4_t v71 = vld4q_s8(v44);
      uint8x16_t v52 = (uint8x16_t)veorq_s8(v71.val[2], a3);
      _Q27 = vmovl_high_u8(v52);
      _Q26 = vmovl_u8(*(uint8x8_t *)v52.i8);
      __asm
      {
        SHLL2           V26.4S, V26.8H, #0x10
        SHLL2           V27.4S, V27.8H, #0x10
      }
      JUMPOUT(0x1000685E8);
    }
    JUMPOUT(0x10006890CLL);
  }
  int8x16x4_t v72 = vld4q_s8(v44);
  HIDWORD(a18) = HIDWORD(a36);
  uint8x16_t v59 = (uint8x16_t)veorq_s8(v72.val[1], a3);
  _Q23 = vmovl_u8(*(uint8x8_t *)v59.i8);
  _Q22 = vmovl_high_u8(v59);
  __asm
  {
    SHLL2           V24.4S, V22.8H, #0x10
    SHLL2           V25.4S, V23.8H, #0x10
  }
  int v64 = (_DWORD *)(v43 + 4 * (v47 + 1902818082));
  int v65 = *(v64 - 8) ^ *(v64 - 3);
  unsigned int v66 = v65 + v49 - ((2 * v65) & 0xBCD7C1CC);
  int v67 = *(v64 - 16) ^ *(v64 - 14);
  HIDWORD(v68) = v67 ^ 0x5E6BE0E6 ^ v66;
  LODWORD(v68) = v67 ^ ~v66;
  _DWORD *v64 = (v68 >> 31) + v49 - ((2 * (v68 >> 31)) & 0xBCD7C1CC);
  unint64_t v69 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 8 * ((21 * (v48 == 1902818019)) ^ 0x4E9u));
  LODWORD(a19) = BYTE4(a37) ^ 0xFFFFFF89;
  return v69(3168256460, a5, v69, a7, 1257, a35, a10, HIDWORD(a36), a12, a13, a14, a15, a16, a17, a18, a19, __PAIR64__(a36, HIDWORD(a35)), v50, __PAIR64__(a35, HIDWORD(a34)),
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43);
}

void sub_1000688B8()
{
}

uint64_t sub_100068994(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23)
{
  return (*(uint64_t (**)(void))(v25
                              + 8
                              * (a3 | (32
                                     * ((unint64_t)(&a23 + a13 + (v24 + v23 + 1012)) < ((a3 - a7 - 1808) ^ (a5 + 1507) ^ 0x5F5uLL))))))();
}

uint64_t sub_1000689DC(int a1, uint64_t a2, int a3)
{
  int v8 = v5 + v4;
  if ((v8 + v6 + 1147) > 0x40) {
    int v3 = v8 + v6 + 1147;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((59 * (a3 - v8 < (a1 + v3))) ^ 0x8DDu)))();
}

uint64_t sub_100068A40@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1641 * (v1 + 1 == v3 + 44)) ^ a1)))();
}

uint64_t sub_100068B0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((343 * ((a7 + 1 + v7) < 0x20)) ^ a2)))();
}

uint64_t sub_100068BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = *(unsigned __int8 *)(v9 + a3 - 0xAD445910E4CF20) - *(unsigned __int8 *)(v7 + a3 - 0xAD445910E4CF20);
  return (*(uint64_t (**)(uint64_t))(v10
                                            + 8
                                            * ((683 * ((((a6 + v8 - 248) ^ 0xB6DA1D27) & (2 * v11)) + (v11 ^ v6) == v6)) ^ v8)))(4294925278);
}

uint64_t sub_100068C40(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4
                                                     + 8
                                                     * ((v3 + 814) | (2
                                                                    * (v1
                                                                     + v2
                                                                     + (((v3 - 114) | 0x90) ^ (v5 + 978)) < ((v3 - 114) ^ 0x449u))))))(a1, a1);
}

void sub_100068C90()
{
}

uint64_t sub_100068D20(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * ((((65 * (v3 ^ (v3 + 7))) ^ (2 * (v3 ^ (v3 + 7) ^ 0x16E)) ^ 0x9F)
                                                       * (v1 < 0xD798F02C)) ^ (v3 - 1340330937))))(a1, 1340331655);
}

uint64_t sub_100068D80()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((((v2 + 46) ^ 0x53 ^ ((v1 & (2 * (*(unsigned __int8 *)(v3 + 8) - 5)))
                                                                       + ((*(unsigned __int8 *)(v3 + 8) - 5) ^ v0) == v0)) & 1)
                                * (((v2 - 266925522) & 0xFE8F7FD) - 751)) | v2)))();
}

void sub_100068DDC(uint64_t a1)
{
  int v1 = 1178560073 * ((a1 - 2 * (a1 & 0xA5CBBCEE) - 1513374482) ^ 0x42FE9E86);
  int v2 = *(_DWORD *)(a1 + 32) ^ v1;
  uint64_t v3 = (char *)*(&off_10018D100 + v2 - 295) - 4;
  int v4 = (*(unsigned char *)(a1 + 16) - v1);
  (*(void (**)(char *, uint64_t (*)()))&v3[8 * v2 + 16320])((char *)*(&off_10018D100 + (v2 ^ 0x14D)) - 12, sub_10003E6F4);
  uint64_t v6 = *(void *)*(&off_10018D100 + v2 - 269);
  unsigned int v5 = (235795823 * (((&v5 | 0xAD911F22) - (&v5 & 0xAD911F22)) ^ 0x393C567B)) ^ (v2 + 727);
  (*(void (**)(unsigned int *))&v3[8 * v2 + 16040])(&v5);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100068F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v17 - 128) = v12;
  *(void *)(v17 - 120) = v14;
  *(void *)(v17 - 104) = a11;
  *(void *)(v17 - 144) = v13;
  *(void *)(v17 - 136) = v12;
  *(_DWORD *)(v17 - 112) = v15 - 1224239923 * ((v17 - 144) ^ 0xF2B3FDD7) - 366;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v16 + 8 * (v15 ^ 0xBB5)))(v17 - 144);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * ((15
                                              * (v11 - 1131453695 + ((296 * (v15 ^ 0x34C)) ^ 0x78Cu) - 813 > 0x7FFFFFFE)) | (296 * (v15 ^ 0x34C)))))(v18);
}

uint64_t sub_100068FD0@<X0>(uint64_t a1@<X0>, int a2@<W3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, int a16)
{
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * (int)((((a16 + 209) ^ a14 & 0x812B04F9) * (a3 == v18)) ^ (v17 + a2 + 459))))(a1);
}

uint64_t sub_10006901C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  a20 = a9 - 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 8 * ((1472 * ((((((v20 + 553912508) | 0x185AC142u) + v22) ^ 0xFFFFFFFFFFFFCF4) & (*(&a20 + 6 * (a9 - 866215441) + 2) + (int)a6)) == 2)) ^ v20)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11);
}

uint64_t sub_1000690DC()
{
  BOOL v3 = v1 == 829 * ((v0 - 668) ^ 0xC0u) - 1594;
  return (*(uint64_t (**)(void))(v2 + 8 * (((16 * v3) | (32 * v3)) ^ (v0 - 668))))();
}

uint64_t sub_10006911C(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unsigned int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  unsigned int v59 = ((*v58 & 0x7FFFFFFE | (((v55 + 222) ^ (a1 - 392)) + 807151993) & v58[623]) >> (((v55 + 106) | 0x83) ^ a25)) ^ v58[396];
  v58[623] = (v59 + v56 - (a4 & (2 * v59))) ^ *((_DWORD *)&a55 + (*v58 & 1));
  return (*(uint64_t (**)(void))(v57 + 8 * ((1512 * (a38 > 0x26F)) ^ (v55 + 222))))();
}

void sub_1000691B8()
{
}

uint64_t sub_100069268@<X0>(int a1@<W5>, int a2@<W6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  *(&a18 + (v20 + a3)) = *(unsigned char *)(v18 + v22 - 180871394)
                                     - ((2 * *(unsigned char *)(v18 + v22 - 180871394)) & 0xEF)
                                     + 119;
  return (*(uint64_t (**)(void))(v21
                              + 8
                              * (((8 * ((a1 + v20 + 1) < 0x40)) | (16
                                                                               * ((a1 + v20 + 1) < 0x40))) ^ (a2 + v19 + 650))))();
}

uint64_t sub_1000692DC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = (v6 - 365) | 0x124;
  *(unsigned char *)(v8 + v5 + a5 + ((v10 - 1412) | v7) - 57) = a1;
  return (*(uint64_t (**)(void))(v9 + 8 * ((73 * ((unint64_t)(v5 + 1 + v8) < 0x40)) ^ v10)))();
}

uint64_t sub_100069328()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((31
                                * (((3 * (v3 ^ 0x93)) ^ (v1 + v0 + 92508242 < 6 * (v3 ^ 0x330u) - 400)) & 1)) ^ v3 ^ 0x514)))();
}

void sub_1000693A0()
{
}

void sub_1000693CC()
{
}

void sub_1000693D4(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (235795823 * (a1 ^ 0x94AD4959));
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (char *)*(&off_10018D100 + v1 - 1022) - 4;
  (*(void (**)(char *, uint64_t (*)()))&v3[8 * (v1 ^ 0xD67)])((char *)*(&off_10018D100 + v1 - 1051) - 12, sub_100064A04);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_100069478(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v4 + 8
                                                * (((v5 + ((a4 + 285214254) | 0x48488111) + 26) * (v6 != a2)) ^ a4)))(0);
}

uint64_t sub_1000694BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_10006951C(a11 - 0x5E8E72AB319E4281, a7 - 0x5E8E72AB319E4281, 0x3DFEDDED6F8DEFE1, 3743145922, 0xFF1BBFDABFFBFB00, 691);
}

uint64_t sub_10006951C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v19 = 4 * (v14 + v12);
  int v20 = v6 + v15 + (*(_DWORD *)(*a1 + v19) ^ (v16 + v8 + 501 - 1886));
  *(_DWORD *)(*a2 + v19) = v20 + v16 - (v13 & (2 * v20));
  int v21 = v14 + 1 + v9;
  int v22 = (v17 > v11) ^ (v21 < v7);
  BOOL v23 = v21 < v10;
  if (v22) {
    BOOL v23 = v17 > v11;
  }
  return (*(uint64_t (**)(void))(v18 + 8 * ((v23 * a6) ^ v8)))();
}

uint64_t sub_1000695A8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 - 7 + (v4 + 1477247020 + v3 - v5)) = *(void *)(v1
                                                                              - 7
                                                                              + (v4 + 1477247020 + v3 - v5));
  return (*(uint64_t (**)(void))(v7 + 8 * ((3622 * (v6 - (v2 & 0xFFFFFFF8) - 1728 == -v5)) ^ v6)))();
}

uint64_t sub_10006960C()
{
  *(void *)(v5 - 128) = v2;
  *(void *)(v5 - 120) = v0;
  *(_DWORD *)(v5 - 136) = (v4 - 508) ^ (268847287
                                      * ((2 * ((v5 - 136) & 0x67744AF8) - (v5 - 136) - 1735674621) ^ 0x6721A42B));
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v4 + 791)))(v5 - 136);
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * (((((v4 - 1557369926) & 0x5CD38F3B ^ 0xC77) + (v4 ^ 0x7B7))
                                              * (v1 == 924273944)) ^ v4)))(v6);
}

uint64_t sub_1000696C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100069760(a1 - 0x5E8E72AB319E4281, 909065907, 0xAF7FBD4CDDEFD5EDLL, 0x1BBDFABDALL, 0x79BEDEFFB39FFB38, 311225851, 3385901388, 433);
}

uint64_t sub_100069760(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v20 = 4 * (v17 + v14);
  int v21 = v8 + v19 + (*(_DWORD *)(*v12 + v20) ^ v15) - (*(_DWORD *)(*v13 + v20) ^ v15);
  *(_DWORD *)(*a1 + v20) = v21 + v15 - (((v11 - 211) ^ (v18 + 345)) & (2 * v21));
  BOOL v22 = v9 > a2;
  if (v22 == v17 + a6 < a7) {
    BOOL v22 = v17 + a6 < v10;
  }
  return (*(uint64_t (**)(void))(v16 + 8 * ((v22 * a8) ^ v11)))();
}

void sub_1000697FC()
{
}

uint64_t sub_100069808(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (69008221 * ((((2 * a1) | 0xE6169F4E) - a1 + 217362521) ^ 0x20A91DAD));
  uint64_t v2 = *(void *)*(&off_10018D100 + (int)(v1 ^ 0x7F7DFDF7));
  unsigned int v5 = (235795823 * (((&v4 | 0x234F2E8E) - (&v4 & 0x234F2E8E)) ^ 0xB7E267D7)) ^ (v1 - 2138963059);
  uint64_t v4 = v2;
  return (*(uint64_t (**)(uint64_t *))((char *)*(&off_10018D100 + (int)(v1 ^ 0x7F7DFD9D))
                                              + 8 * (int)(v1 - 2138960909)
                                              - 4))(&v4);
}

void sub_10006991C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  uint64_t v14 = *(void *)(v12 + 48);
  *(void *)(*(void *)(v12 + 64) - 0x24EBBF705D8874E0) = v13;
  *(_DWORD *)(v14 - 0x7D0C57D6EC0D5B6ALL) = a12;
  JUMPOUT(0x10004499CLL);
}

uint64_t sub_100069954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  a16 = v17
      + 1178560073 * (((~&a15 & 0xD8E99ADE) - (~&a15 | 0xD8E99ADF)) ^ 0x3FDCB8B7)
      - 504208101;
  uint64_t v18 = (*(uint64_t (**)(int *))(v16 + 8 * (v17 ^ 0xD10u)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * (((a15 == -563355418) * ((v17 + 1125) ^ 0x42D)) ^ v17)))(v18);
}

uint64_t sub_1000699E8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))*(&off_1001882B0 + ((56 * (*(_DWORD *)(a2 + 4) != 1704253546)) ^ 0x192u)))(4294925278);
}

void sub_100069A2C()
{
}

uint64_t sub_100069A34(uint64_t a1, __n128 a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, int a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33)
{
  v34.n128_u64[0] = 0x7878787878787878;
  v34.n128_u64[1] = 0x7878787878787878;
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128))(v33
                                                                             + 8
                                                                             * ((424
                                                                               * (((a21 + 1) ^ (a18 + ((2 * (STACK[0x2D0] & 0x1F)) ^ 0x1C) + (STACK[0x2D0] & 0x3F ^ 0x7FFDEDB1u) < (a33 ^ 0x303u) - 890)) & 1)) ^ (a33 + 1710))))(a1, 3263642209, a2, a3, v34);
}

uint64_t sub_100069AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((2036 * ((v7 & 0x18) == ((a6 + 67) | 0x11C) + v6 + ((a6 + 172556291) | 0xE0128090))) ^ a6)))();
}

void sub_100069B40(uint64_t a1)
{
  __asm { BRAA            X8, X17 }
}

void sub_100069B84()
{
}

uint64_t sub_100069BA4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  a4 = v7;
  a5 = a1;
  a3 = v7;
  a6 = v8 + 1224239923 * ((&a3 + 396803106 - 2 * ((unint64_t)&a3 & 0x17A6BC22)) ^ 0xE51541F5) - 421;
  uint64_t v9 = (*(uint64_t (**)(uint64_t *))(v6 + 8 * (v8 ^ 0xAB5)))(&a3);
  return sub_100069C04(v9);
}

uint64_t sub_100069C30@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  BOOL v12 = a10 < 0x9F39C153;
  unsigned int v13 = v10 + ((a1 + 310169490) & 0xED8329FF ^ 0x2ADE71E7);
  int v14 = v12 ^ (v13 < 0x9F39C153);
  BOOL v15 = v13 < a10;
  if (!v14) {
    BOOL v12 = v15;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((23 * v12) ^ a1)))();
}

uint64_t sub_100069CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unsigned int a28,uint64_t a29,unsigned int a30,uint64_t a31,uint64_t a32,int a33)
{
  uint64_t v39 = ((v34 ^ 0x7F73C4F205F91AD5)
       - 0x4211752C10F41757
       - ((2 * (v34 ^ 0x7F73C4F205F91AD5)) & 0x7BDD15A7DE17D152)
       + (v36 + 10)
       - 380) ^ a7;
  uint64_t v40 = __ROR8__(__ROR8__(v33 ^ a29, 12) ^ 0xA9F5355D327AAF0FLL, 52);
  uint64_t v41 = v40 ^ 0x322397601515A6F7;
  uint64_t v42 = ((v40 ^ 0x322397601515A6F7)
       - 0x15B087F26EF738EFLL
       - (((v36 ^ 0xD0u) - 0x2B610FE4DDEE7380) & (2 * (v40 ^ 0x322397601515A6F7)))) ^ v38;
  uint64_t v43 = v37 ^ v34 ^ 0x7F73C4F205F91AD5;
  unint64_t v44 = (v39 ^ 0x97FBFBAE09CFCCD0) & (v40 ^ 0x322397601515A6F7);
  v39 ^= 0x68040451F630332FuLL;
  unint64_t v45 = (v42 ^ 0xE4C1C31231B4037DLL) & (v40 ^ 0xCDDC689FEAEA5908) ^ v39;
  unint64_t v46 = v42 ^ 0xE4C1C31231B4037DLL ^ (v43 ^ 0x101580FBE5F339FCLL) & (v37 ^ 0xEFEA7F041A0CC603);
  uint64_t v47 = (v42 ^ 0x1B3E3CEDCE4BFC82) & (v37 ^ 0x101580FBE5F339FCLL);
  *((void *)&v48 + 1) = v37 ^ 0x39FC;
  *(void *)&long long v48 = v37 ^ 0x101580FBE5F30000;
  unint64_t v49 = ((v44 - ((2 * v44) & 0x9AE726132CF457FCLL) - 0x328C6CF66985D402) ^ v43 ^ 0xDD6613F273891202) & 0x90DEF08A367683D6 | ((v44 - ((2 * v44) & 0x1AE726132CF457FCLL) + 0x4D739309967A2BFELL) ^ v43 ^ 0xDD6613F273891202) & 0x6F210F75C9897C29;
  unint64_t v50 = v47 ^ v41 ^ v45;
  unint64_t v51 = v39 & (v43 ^ 0xEFEA7F041A0CC603);
  unint64_t v52 = __ROR8__(__ROR8__(v45, 38) ^ __ROR8__(v49, 38) ^ 0xB8AB4977971512F1, 26);
  LOBYTE(v47) = *(unsigned char *)(a31 + ((((v50 >> 61) ^ 4) + 241) ^ 0x78));
  char v53 = 4 * (v47 ^ 0xDD) - ((8 * (v47 ^ 0xDD)) & 0x58) + 44;
  char v54 = v47 ^ 0xE5;
  char v55 = (v47 ^ 0xE5) + (v53 ^ ((v47 ^ 0xDD) + ~(2 * ((v47 ^ 0xDD) & 0x2E ^ v47 & 2)) + 45) ^ 0xC7) + 1;
  unint64_t v56 = v51 ^ __ROR8__((v48 >> 16) ^ 0x4D81525DA35B383ALL, 48) ^ v46;
  char v57 = (v53 ^ 0xD3) + 24;
  char v58 = (~(2 * (v53 ^ 0xD3) + 2) | 0xD1) + v57 + (v55 & 0x40);
  if ((v55 & 0x40 & ((v53 ^ 0xD3) + 1)) != 0) {
    char v58 = ~(v55 & 0x40 | (2 * ((v53 ^ 0xD3) + 1)) & 0x28) + v57;
  }
  char v59 = v58 ^ ((v55 & 0xBF) - ((2 * v55) & 0x2C) + 22);
  unsigned __int8 v60 = ((v59 - ((2 * v59) & 0x58) + 44) ^ v53) + v54;
  *((void *)&v61 + 1) = ~v46;
  *(void *)&long long v61 = v46 ^ 0x92CFC162FD513142;
  uint64_t v62 = v46 ^ 0x3F46C6A670CB9C82 ^ ((v61 >> 1) - ((2 * (v61 >> 1)) & 0x5B120F891B355B82) - 0x5276F83B7265523FLL);
  unint64_t v63 = v62 ^ (v46 << 58);
  unint64_t v64 = __ROR8__(v46, 57) & 0xFFFFFFFFFFFFE07FLL;
  *((void *)&v61 + 1) = v62;
  *(void *)&long long v61 = v63 ^ 0xC00000000000000;
  uint64_t v65 = v61 >> 51;
  uint64_t v66 = v50 ^ (v50 >> 39) ^ (8 * v50) ^ (((v60 >> 1) | (v60 << 7)) | (v50 << 25));
  uint64_t v67 = v66 ^ 0x39AF9918B32AE22FLL;
  uint64_t v68 = v65 + (v64 ^ 0x8F8AC7F1FBA51795);
  unint64_t v69 = v49 << 23;
  unint64_t v70 = (v49 << 23) ^ 0xFBA827E079000000;
  unint64_t v71 = (((v52 << 45) ^ (v52 << 36)) & 0xFFFFFFF000000000 | (v52 >> 28)) ^ (v52 >> 19) ^ 0xD0A2B87327B31AB3;
  uint64_t v72 = v71 - ((2 * v71) & 0x79AF49E4EBC10BBCLL) + 0x3CD7A4F275E085DELL;
  unint64_t v73 = v49 ^ (v49 >> 41) ^ (v49 >> 7) ^ (((v49 << 57) ^ 0xE400000000000000)
                                        - ((2 * ((v49 << 57) ^ 0xE400000000000000)) & 0x4444444444444444)
                                        + 0x23DE67E612E394A5);
  uint64_t v74 = v73 & 0x10000000000000;
  uint64_t v75 = v73 & 0x10000000000000 | 0x86D8BBB6287F489;
  unint64_t v76 = v73 & 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v77 = __ROR8__(v68 - 2 * (v65 & (v64 ^ 0x8F8AC7F1FBA51795)), 13);
  unint64_t v78 = v56 ^ (v56 >> 10) ^ (v56 << 47) ^ ((v56 >> 17) | (v56 << 54));
  if ((v74 & v69) != 0) {
    uint64_t v79 = 0x10DB1776C50FE912 - v75;
  }
  else {
    uint64_t v79 = v75;
  }
  uint64_t v80 = (v70 - 0x86D8BBB6287F489 + v79) ^ v76;
  unint64_t v81 = ((v80 ^ 0x9589325EAC575745)
       - ((2 * (v80 ^ 0x9589325EAC575745)) & 0xE24B1691CEDBA44CLL)
       + 0x71258B48E76DD226) ^ v78;
  uint64_t v82 = __ROR8__(__ROR8__(v81 ^ 0x464DB9765407BD9FLL, 23) ^ 0x6C4FE5A873E441B7, 41);
  uint64_t v83 = v67 ^ (v77 + 0x1FF6B319107136C2 - ((2 * v77) & 0x3FED663220E26D84));
  uint64_t v84 = v72 ^ v52 ^ v80;
  unint64_t v85 = v82 & (v78 ^ 0x1CAE3FE19723B7B4) ^ v83;
  unint64_t v86 = (v84 ^ 0x63229535C0A5DE88 | ~v82)
      + ((v82 + 0x40482C2FF6FA087ELL - ((2 * v82) & 0x8090585FEDF410FCLL)) ^ v84 ^ 0x236AB91A365FD6F6)
      + 1;
  unint64_t v87 = (((v83 ^ 0xBEE74353B47A99EDLL) & (v66 ^ 0xD9A6D5FE5CA42B12))
       + 0x40482C2FF6FA087ELL
       - ((2 * ((v83 ^ 0xBEE74353B47A99EDLL) & (v66 ^ 0xD9A6D5FE5CA42B12))) & 0x8090585FEDF410FCLL)) ^ v84 ^ 0x236AB91A365FD6F6;
  unint64_t v88 = v81 ^ (v84 ^ 0x9CDD6ACA3F5A2177) & (v66 ^ 0x26592A01A35BD4EDLL);
  unint64_t v89 = ((v87 ^ (v83 ^ 0x4118BCAC4B856612) & (v78 ^ 0xE351C01E68DC484BLL))
       + 0x1FF6B319107136C2
       - ((2 * (v87 ^ (v83 ^ 0x4118BCAC4B856612) & (v78 ^ 0xE351C01E68DC484BLL))) & 0x3FED663220E26D84)) ^ v67;
  unint64_t v90 = ((v85 ^ 0xBEE74353B47A99EDLL) >> 27) ^ __ROR8__(v78 ^ 0xE1DE6585B59498FDLL, 27);
  *((void *)&v92 + 1) = v88 ^ v87 ^ 0xE94FF8E;
  *(void *)&long long v92 = v88 ^ v87 ^ 0x3E0844A280000000;
  uint64_t v91 = v92 >> 28;
  unint64_t v93 = v86 ^ __ROR8__(v90 ^ (((v85 ^ 0xBEE74353B47A99EDLL) << 37)- (((v85 ^ 0xBEE74353B47A99EDLL) << 38) & 0x1379170000000000)- 0x7643747485F20715), 37);
  *(void *)&long long v92 = __ROR8__(v88 ^ v87, 19);
  unint64_t v94 = (v91 ^ v92 ^ 0x9FF1C7C1089451D2)
      - 2 * ((v91 ^ v92 ^ 0x9FF1C7C1089451D2) & 0x5561C4A700F5ED3FLL ^ (v91 ^ v92) & 4)
      - 0x2A9E3B58FF0A12C5;
  *((void *)&v92 + 1) = v89 ^ 0x1747C156E755AED6;
  *(void *)&long long v92 = v89 ^ 0x4000000000000000;
  uint64_t v95 = v89 ^ __ROR8__(v89, 39) ^ (v92 >> 61);
  unint64_t v96 = v95 ^ 0xE968B9F952FD813FLL;
  uint64_t v97 = v95 & 0x7C09B5691D153F3ALL;
  unint64_t v98 = ((v88 >> 7) ^ (v88 >> 41) | (v88 << 57)) ^ (v88 << 23) ^ 0x87178018C81845E5;
  unint64_t v99 = v98 - ((2 * v98) & 0xBD0703CD90A8D7E8) + 0x5E8381E6C8546BF4;
  unint64_t v100 = v99 ^ v88;
  unint64_t v101 = v99 ^ v87 ^ v94;
  unint64_t v102 = v93 ^ (v93 << 47) ^ (v93 >> 10) ^ (v93 >> 17) ^ (v93 << 54);
  unint64_t v103 = (v100 & (unint64_t)&_mh_execute_header & 0xFFFFFFFDFFFFFFFFLL | ((((v100 & (unint64_t)&_mh_execute_header) >> 32) & 1) << 33)) ^ 0x14FF2FB9FC5AFBEFLL;
  unint64_t v104 = v103 - 0x140208806442AA00;
  unint64_t v105 = v100 & 0xFFFFFFFEFFFFFFFFLL;
  unint64_t v106 = ((v85 ^ 0xD1A234CC1D2559D7) >> 6) ^ (v85 >> 1) ^ (((v85 ^ 0xD1A234CC1D2559D7) << 58) | v85 ^ 0xD1A234CC1D2559D7) ^ ((((v85 ^ 0xD1A234CC1D2559D7) << 58) & (v85 ^ 0xD000000000000000) ^ ((v85 ^ 0xD1A234CC1D2559D7) << 63)) + 0x13E1D3F21906A06BLL - ((2 * (((v85 ^ 0xD1A234CC1D2559D7) << 58) & (v85 ^ 0xD000000000000000))) & 0x2000000000000000)) ^ v95 ^ 0xE968B9F952FD813FLL;
  uint64_t v107 = v106 ^ 0x68D11A660E92ACEBLL;
  unint64_t v108 = v103 - 0x14FF2FB9FC5AFBEFLL;
  unint64_t v109 = 0x15FC56F394734DDELL - v103;
  if (((v102 ^ 0xBEE8B63400000000) & v108) == 0) {
    unint64_t v109 = v104;
  }
  unint64_t v110 = ((v102 ^ 0xBEE8B6349A795903) - 0xFD2739981851EFLL + v109) ^ v105;
  *((void *)&v111 + 1) = v101 ^ 0x148049669;
  *(void *)&long long v111 = v101 ^ 0xBDA6764C00000000;
  unint64_t v112 = (v110 ^ 0xA93009B7399A7B23) & (v101 ^ 0xBDA6764D48049669);
  char v113 = v110 & 1;
  *(void *)&long long v111 = __ROR8__((v111 >> 33) ^ __ROR8__((v106 ^ 0x68D11A660E92ACEBLL) & (v95 ^ 0x57695F4B404DEABLL), 33) ^ 0xCF4F457632C10184, 31);
  unint64_t v114 = (v101 ^ 0x425989B2B7FB6996) & (v95 ^ 0xFA896A0B4BFB2154);
  uint64_t v115 = (v110 ^ 0x56CFF648C66584DCLL) & (v102 ^ 0x411749CB6586A6FCLL);
  unint64_t v116 = v110 ^ (v114 - ((2 * v114) & 0x91B033CD1CB437D4) - 0x3727E61971A5E416);
  unint64_t v117 = v106 ^ 0x972EE599F16D5314;
  unint64_t v118 = v115 ^ v107;
  unint64_t v119 = (v102 ^ 0xBEE8B6349A795903) & v117;
  unint64_t v120 = v115 ^ v107 ^ v102 ^ (v112 - ((2 * v112) & 0x21E21BD94BDA7906) + 0x10F10DECA5ED3C83);
  unint64_t v121 = v116 ^ v111;
  unint64_t v122 = v111 ^ v96 ^ (v119 + 0x13E1D3F21906A06BLL - ((2 * v119) & 0x27C3A7E4320D40D6));
  unint64_t v123 = (v116 ^ (unint64_t)v111) << 36;
  unint64_t v124 = (v118 ^ 0x7955EAEC4D48B80CLL) >> v113 >> (v113 ^ 1u);
  uint64_t v125 = v122 ^ 0x5ECC204877AA9C78 ^ (((v122 >> 61) ^ (v122 >> 39) ^ 0xAFF5F4)
                                      - ((2 * ((v122 >> 61) ^ (v122 >> 39) ^ 0xAFF5F4)) & 0x2EF8850)
                                      + 0x936DB791777C428);
  uint64_t v126 = (((v122 << 25) ^ 0x62C1BAB0A0000000 ^ -(uint64_t)((v122 << 25) ^ 0x62C1BAB0A0000000) ^ (v125
                                                                                                  - (v125 ^ (v122 << 25) ^ 0x62C1BAB0A0000000)))
        + v125) ^ (8 * v122);
  uint64_t v127 = ((v116 >> 41) | (v116 << 57)) ^ (v116 >> 7) ^ (((v116 << 23) ^ 0x5B0C10DA11000000)
                                                      - ((2 * ((v116 << 23) ^ 0x5B0C10DA11000000)) & 0x7209D6B795000000)
                                                      - 0x46FB14A43502C6A2);
  unint64_t v128 = v127 ^ v116;
  unint64_t v129 = (v120 >> 10) ^ (v120 << 47) ^ (v120 >> 17) ^ (v120 << 54) ^ 0x9F7734F167C3DEF9;
  uint64_t v130 = (v129 - ((2 * v129) & 0xAF67954E5CB161CLL) + 0x57B3CAA72E58B0ELL) ^ v120;
  unint64_t v131 = v130 ^ 0xBD892B1A1D4125B8;
  uint64_t v132 = v123 ^ (v121 << 45) ^ (v121 >> 19) ^ (v121 >> 28) ^ 0x62D32FBB7CAD078DLL;
  uint64_t v133 = v128 ^ v130;
  uint64_t v134 = v127 ^ v111 ^ (v132 - ((2 * v132) & 0x6767BCBB0E0402EELL) + 0x33B3DE5D87020177);
  unint64_t v135 = (((v118 << 58) ^ (v118 << 63)) & 0xFC00000000000000 | (v118 >> 6)) ^ v124;
  uint64_t v136 = ((v135 ^ 0x31E557ABB13522E0)
        + 0x38B2BC1D34E7A15DLL
        - 2 * ((v135 ^ 0x31E557ABB13522E0) & 0x38B2BC1D34E7A15FLL ^ v135 & 2)) ^ v118;
  uint64_t v137 = v136 ^ 0x41E756F179AF1951;
  unint64_t v138 = ((v136 ^ 0x41E756F179AF1951)
        + 0x4AFE057ACA1B3713
        - 2 * ((v136 ^ 0x41E756F179AF1951) & 0x4AFE057ACA1B373BLL ^ v136 & 0x28)) ^ v126 ^ 0xF529DCF1CCF1F593;
  uint64_t v139 = (v126 ^ 0x40282674F9153D7FLL) & v137;
  unint64_t v140 = ((v131 & ~v138) + 0x4AFE057ACA1B3713 - ((2 * (v131 & ~v138)) & 0x95FC0AF594366E26)) ^ v126 ^ 0xF529DCF1CCF1F593;
  unint64_t v141 = v138 ^ (v128 ^ v130 ^ 0xF97C65BEA3F1ABFELL) & (v130 ^ 0x4276D4E5E2BEDA47);
  uint64_t v142 = (v139 - ((v139 - 0x674D9E2138A8378ALL - ((2 * v139) & 0x3164C3BD8EAF90ECLL)) ^ v134 ^ 0x7A65DCD93DEFD497)) ^ ((v134 ^ 0x1D2842F80547E31ELL) + 1);
  uint64_t v143 = ((v142 - 0x674D9E2138A8378ALL - ((2 * v142) & 0x3164C3BD8EAF90ECLL)) ^ v134 ^ 0x7A65DCD93DEFD497) + v139;
  unint64_t v144 = v140 ^ v143;
  unint64_t v145 = (((2 * v133) ^ 0xD073482B81CA803) + (v133 ^ 0xF97C65BEA3F1ABFELL)) & (v134 ^ 0xE2D7BD07FAB81CE1);
  unint64_t v146 = (((v126 ^ 0xBFD7D98B06EAC280) & (v134 ^ 0x1D2842F80547E31ELL))
        - ((2 * ((v126 ^ 0xBFD7D98B06EAC280) & (v134 ^ 0x1D2842F80547E31ELL))) & 0xDFB99E0B92C09BD4)
        + 0x6FDCCF05C9604DEALL) ^ v133;
  unint64_t v147 = v143 ^ v146;
  *((void *)&v111 + 1) = v144 ^ 0x1877DA25;
  *(void *)&long long v111 = v144 ^ 0x425764BB40000000;
  uint64_t v148 = v111 >> 30;
  unint64_t v149 = v141 ^ v131 ^ v145;
  *((void *)&v111 + 1) = v147 ^ 0x1139E;
  *(void *)&long long v111 = v147 ^ 0x1560D5E9C780000;
  uint64_t v150 = (v144 << 25) ^ 0x76B0EFB44A000000;
  unint64_t v151 = v141 & 0xFDFEEACE34F5F11BLL ^ 0x3BDA1E3360BF843ALL ^ (v141 & 0x2011531CB0A0EE4 | (v141 << 58));
  unint64_t v152 = v148 ^ (v144 >> 61 << 34) ^ 0x84F57132E3442245;
  uint64_t v153 = (v146 >> 41) ^ 0x733381;
  uint64_t v154 = (v111 >> 19) ^ ((v147 ^ 0x96A0AABB6A91E614) << 36) ^ ((v147 ^ 0x96A0AABB6A91E614) >> 28) ^ 0x6E8F58A97F6A7E5FLL;
  uint64_t v155 = v147 ^ 0x16ECF169B3ABE2D9 ^ (v154 - ((2 * v154) & 0x2F75F86E5FA5E28ELL) + 0x17BAFC372FD2F147);
  unint64_t v156 = (-2
        - ((~(((v141 >> 1) ^ 0x858B8A3588FE4611) & 0xD8B3A347B12BA6E5) | 0xB02D7D7325CEE830)
         + (((v141 >> 1) ^ 0x858B8A3588FE4611) & 0x90212143210AA020 | 0x4FD2828CDA3117CFLL))) ^ ((v141 >> 1) ^ 0x858B8A3588FE4611) & 0xD8B3AB47B12BA6E5;
  uint64_t v157 = __ROR8__(v152, 34);
  *((void *)&v111 + 1) = v146 ^ 0x69;
  *(void *)&long long v111 = v146 ^ 0xE667026899F5DB80;
  uint64_t v158 = v146 ^ 0xDF1CB01A15D39B8FLL ^ ((v111 >> 7) - ((2 * (v111 >> 7)) & 0x72F764E5184C80CCLL) + 0x397BB2728C264066);
  uint64_t v159 = (v157 ^ (v144 >> 39) ^ 0x84AEC9) + v150;
  uint64_t v160 = v157 & v150;
  uint64_t v161 = v158 & v153;
  uint64_t v162 = v158 + v153;
  unint64_t v163 = v151 ^ (v141 << 63);
  uint64_t v164 = v159 - 2 * v160;
  uint64_t v165 = v156 ^ 0x1DC478FD4583D433 ^ (v163 - ((2 * v151) & 0x5BD20B1CC09A7806) - 0x5216FA719FB2C3FDLL);
  BOOL v166 = v97 == 0x7809200909112110;
  uint64_t v167 = v165 ^ 0x5216FA719FB2C3FCLL;
  if (v166) {
    uint64_t v167 = v156 ^ 0x1DC478FD4583D433;
  }
  uint64_t v168 = v164 ^ (8 * v144);
  uint64_t v169 = v165 + 2 * ((v167 ^ 0x2DE9058E604D3C03) & v151) + 0x58013DC2B89A8F86;
  if (((v156 ^ 0xB02D7D7325CEE830) & v163) != 0) {
    uint64_t v169 = ((v163 + (v156 ^ 0x4FD2828CDA3117CFLL) + 1) ^ 0x7B6DBFD2B8BADFFELL)
  }
         - 0x236C821000205078
         + ((2 * (v163 + (v156 ^ 0x4FD2828CDA3117CFLL) + 1)) & 0xF6DB7FA57175BFFCLL);
  uint64_t v170 = (v162 - 2 * v161) ^ (v146 << 23);
  unint64_t v171 = v149 ^ (v149 >> 10) ^ (v149 >> 17) ^ (v149 << 47) ^ (v149 << 54);
  uint64_t v172 = v170 ^ v171;
  *((void *)&v173 + 1) = v169 + 0x7FEC23D4765707ALL;
  *(void *)&long long v173 = v169 - 0x58013DC2B89A8F86;
  unint64_t v174 = v168 ^ 0xAA6A2D4BA2838D66;
  uint64_t v175 = __ROR8__(__ROR8__(v170, 57) ^ __ROR8__(v155, 57) ^ 0x588402B327C86711, 7);
  unint64_t v176 = v168 ^ 0xAA6A2D4BA2838D66 ^ (v141 >> 6) ^ __ROR8__(__ROR8__(v141, 62) & 0xFFFFBFFFFFFFFFFBLL ^ 0x4F1EC6363424B53DLL ^ (v173 >> 61), 3);
  unint64_t v177 = (v170 ^ 0x344CFAEDF4800000) & (v171 ^ 0xAEA93A9FECEAF928);
  uint64_t v178 = (v176 ^ 0x3CBE485844A65555) & (v171 ^ 0x5156C560131506D7);
  v176 ^= 0xC341B7A7BB59AAAALL;
  unint64_t v179 = v176 ^ v177;
  unint64_t v180 = v178 ^ v168 ^ 0xAA6A2D4BA2838D66;
  *((void *)&v173 + 1) = v175 ^ 0x16FDF2E892CF90CELL;
  *(void *)&long long v173 = v175;
  uint64_t v181 = v176 & (v168 ^ 0x5595D2B45D7C7299) ^ v175 ^ 0x16FDF2E892CF90CELL;
  unint64_t v182 = (v175 ^ 0x16FDF2E892CF90CELL) & (v172 ^ 0x9AE5C072186AF928);
  unint64_t v183 = (__ROR8__((v173 >> 38) ^ 0x2F851D43D911B5B3, 26) ^ 0xAD6F61F41EB8AF09) & v174 ^ v172;
  unint64_t v184 = v180 ^ v181;
  unint64_t v185 = ((v179 ^ v182) - ((2 * (v179 ^ v182)) & 0xF1F3FAD9BBFDD7A0) - 0x706029322011430) ^ v171;
  *((void *)&v173 + 1) = v183 ^ v181 ^ 0x3D2C8;
  *(void *)&long long v173 = v183 ^ v181 ^ 0x6C261CCEFCE00000;
  uint64_t v186 = v184 ^ (v184 >> 39) ^ (8 * v184) ^ (v184 << 25) ^ (v184 >> 61);
  uint64_t v187 = (v173 >> 19) ^ ((v183 ^ v181 ^ 0x651A3F8DE79506D7) << 36) ^ ((v183 ^ v181 ^ 0x651A3F8DE79506D7) >> 28);
  unint64_t v188 = v179 ^ 0x6DC4FB0BD4FFFF44;
  unint64_t v189 = __ROR8__(__ROR8__(v179 ^ 0x616B258C5FF13C26, 27) ^ 0x61D86C4195FBD0F1, 37);
  unint64_t v190 = ((v187 ^ 0xB76D41F000000000)
        + 0x56AF173809489612
        - 2 * ((v187 ^ 0xB76D41F000000000) & 0x56AF173809489617 ^ v187 & 5)) ^ v183 ^ v181;
  *((void *)&v173 + 1) = v183 ^ 0x12260634586;
  *(void *)&long long v173 = v183 ^ 0xE3EE980000000000 ^ (((v183 << 57) ^ 0xC00000000000000)
                                                  - ((2 * ((v183 << 57) ^ 0xC00000000000000)) & 0x5555555555555555)
                                                  - 0x54BEEFB68E9C6219);
  uint64_t v191 = ((v186 ^ 0xABCF8FE7C463E5DLL)
        + (v188 ^ (v188 >> 1) ^ (v189 << 58))
        - 2 * ((v186 ^ 0xABCF8FE7C463E5DLL) & (v188 ^ (v188 >> 1) ^ (v189 << 58)))) ^ ((v189 >> 6) | (v189 << 63));
  unint64_t v192 = v185 ^ (v185 >> 10) ^ (((v185 << 54) ^ (v185 << 47)) & 0xFFFF800000000000 | (v185 >> 17));
  unint64_t v193 = (v183 << 23) ^ 0x913031A2C3000000;
  uint64_t v194 = __ROR8__(__ROR8__(v183, 49) & 0xFFFFFFFFFFC07FFFLL ^ 0x1E5FD5EF68E2BB65 ^ (v173 >> 42), 22);
  uint64_t v195 = v193 & 0x228B35C087800000 | (v183 >> 41);
  unint64_t v196 = v194 ^ 0xDD74CA3F78583B7ELL;
  if (!v68) {
    unint64_t v196 = 0x228B35C087A7C481;
  }
  unint64_t v197 = v196 & v194 ^ v195;
  uint64_t v198 = v192 ^ 0x3011F09219995ED8;
  unint64_t v199 = v193 & 0xDD74CA3F78000000 ^ v194 & 0xDD74CA3F78583B7ELL ^ 0x8A7CCB6B3BB32CECLL ^ v197;
  unint64_t v200 = v190 ^ v199;
  unint64_t v201 = (v200 ^ 0xC576F40999968F14) & (v186 ^ 0xABCF8FE7C463E5DLL);
  uint64_t v202 = (v199 - 0xC018CEB344C2584 - 2 * (v199 & 0x73FE7314CBB3DA7DLL ^ v197 & 1)) ^ v198;
  unint64_t v203 = v200 ^ 0x3A890BF6666970EBLL ^ v191 & (v186 ^ 0xF543070183B9C1A2);
  unint64_t v204 = v202 ^ v201 ^ v203;
  *((void *)&v205 + 1) = v202 ^ v201 ^ v203 ^ 0x862;
  *(void *)&long long v205 = v204 ^ 0x6E829E585CD8000;
  *(void *)&long long v205 = __ROR8__((v205 >> 14) ^ __ROR8__(v204, 33) & 0xFFFC00007FFFFFFFLL ^ 0x7A565A2AF4F5B45ELL, 50);
  unint64_t v206 = (v205 ^ 0x968ABDE0682B2E2CLL) & 0x6181A3FA608E1D1DLL ^ ((v204 << 45) ^ 0xB10C400000000000) & 0x6181A00000000000 | (v205 ^ 0x968ABDE0682B2E2CLL) & 0x9E7E5C059F71E2E2 ^ ((v204 << 45) ^ 0xB10C400000000000) & 0x9E7E400000000000;
  if (a30 > 0xD5D7AA1E != (a33 - 101300644) < 0x2A2855E1) {
    BOOL v207 = a30 > 0xD5D7AA1E;
  }
  else {
    BOOL v207 = a33 - 101300644 < a28;
  }
  return (*(uint64_t (**)(unint64_t))(v35 + 8 * (v36 ^ (226 * !v207))))(v206 ^ (v204 >> 28) ^ (v204 << 36));
}

uint64_t sub_10006B5B0(double a1)
{
  double *v2 = a1;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v4 == 0) * v3) ^ v1)))();
}

uint64_t sub_10006B5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v32 = v19;
  int v28 = 196 * (v18 ^ 0x50F);
  int v29 = ((((2 * (v27 - 144)) | 0x4F0C6938) - (v27 - 144) + 1484376932) ^ 0x3E27E4B8) * v20;
  *(void *)(v27 - 136) = v25;
  *(void *)(v27 - 128) = v26;
  *(_DWORD *)(v27 - 144) = (v21 + 1234792412 + v28) ^ v29;
  *(_DWORD *)(v27 - 140) = v29 + v18 + 12;
  (*(void (**)(uint64_t))(v22 + 8 * (v18 + 1108)))(v27 - 144);
  *(_DWORD *)(v27 - 144) = v28
                         - 1224239923
                         * ((((v27 - 144) | 0x608DC9E7) - (v27 - 144) + ((v27 - 144) & 0x9F723618)) ^ 0x923E3430)
                         - 1068;
  *(void *)(v27 - 136) = a17;
  *(void *)(v27 - 128) = v23;
  (*(void (**)(uint64_t))(v22 + 8 * (v28 ^ 0xFBC)))(v27 - 144);
  *(_DWORD *)(v27 - 136) = v28 - ((((2 * (v27 - 144)) | 0x495F6FA2) - (v27 - 144) - 615495633) ^ 0x683935AC) * v32 - 384;
  *(void *)(v27 - 128) = a16;
  *(void *)(v27 - 120) = v23;
  *(void *)(v27 - 144) = v25;
  *(void *)(v27 - 112) = a18;
  *(void *)(v27 - 104) = a17;
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(v22 + 8 * (v28 ^ 0xF84)))(v27 - 144);
  return (*(uint64_t (**)(uint64_t))(v22
                                            + 8
                                            * ((((v28 - 668) ^ (v28 - 382833308) & 0x16D18FFF ^ 0xE) * (v24 == 0)) ^ v28)))(v30);
}

uint64_t sub_10006B77C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v19 = ((3 * (a4 ^ 0x4DE)) ^ 0x16229571) + (a17 ^ v17) - ((2 * (a17 ^ v17)) & 0x2C452384);
  return (*(uint64_t (**)(void))(v18
                              + 8
                              * ((50
                                * (((2 * v19) & 0x7A6F5CF8 ^ 0x28450080) + (v19 ^ 0x2B153FBE) - 86016540 != 941042784)) ^ a4)))();
}

uint64_t sub_10006B828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                         + 8
                                                                                         * ((920
                                                                                           * (a6 - 653949008 < (v6 ^ 0x316u))) ^ (v6 + 372))))(a1, a2, a3, a4, a5, 3037000498);
}

uint64_t sub_10006B86C(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 + 235795823 * (a1 ^ 0x94AD4959);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v6 = v1
     - 460628867 * ((1948750583 - (v5 | 0x742792F7) + (v5 | 0x8BD86D08)) ^ 0xC74EEF75)
     - 426521943;
  v5[0] = v3;
  v5[1] = v2;
  return (*(uint64_t (**)(void *))((char *)*(&off_10018D100 + (v1 ^ 0x196C39B4)) + 8 * (v1 ^ 0x196C3003) - 4))(v5);
}

uint64_t sub_10006B960@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((((((v3 - 894) | 0xC7) ^ 0xFFFFFFBF) + ((v3 - 892) | 0xC5)) * (a1 == v1)) ^ v3)))();
}

uint64_t sub_10006B9A4(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))*(&off_1001882B0 + ((3672 * (*(_DWORD *)(a2 + 4) == 1704253546)) ^ 0x6C4u)))(4294925278);
}

uint64_t sub_10006B9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  if ((a14 + 1963483873) < 0x7674E7E1 != v14 + 625914225 < ((v15 - 1345024191) & 0xA7F) + 1987372948) {
    BOOL v17 = (a14 + 1963483873) < 0x7674E7E1;
  }
  else {
    BOOL v17 = v14 + 625914225 < (a14 + 1963483873);
  }
  return (*(uint64_t (**)(void))(v16 + 8 * ((90 * v17) ^ v15)))();
}

uint64_t sub_10006BA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  int v35 = 235795823 * ((((v34 - 192) | 0x56014207) + (~(v34 - 192) | 0xA9FEBDF8)) ^ 0xC2AC0B5F);
  *(_DWORD *)(v34 - 152) = v33 - v35 + 313;
  *(_DWORD *)(v34 - 148) = v35 ^ 0x130979DA;
  *(void *)(v34 - 144) = 0;
  *(void *)(v34 - 136) = a15;
  *(void *)(v34 - 192) = v31;
  *(void *)(v34 - 184) = 0;
  *(void *)(v34 - 160) = a31;
  *(void *)(v34 - 176) = a16;
  (*(void (**)(uint64_t))(v32 + 8 * (v33 ^ 0xDB6)))(v34 - 192);
  int v36 = *(_DWORD *)(v34 - 168);
  LODWORD(STACK[0x584]) = v36;
  return (*(uint64_t (**)(uint64_t))(v32
                                            + 8
                                            * ((((v33 - 30) ^ (v36 == ((v33 - 1318160655) & 0x4E91876F ^ 0xDE6BE3C8))) & 1 | (16 * (((v33 - 30) ^ (v36 == ((v33 - 1318160655) & 0x4E91876F ^ 0xDE6BE3C8))) & 1))) ^ v33)))(1584128230);
}

uint64_t sub_10006BB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v22 = (((&a13 | 0x37E51031) + (~&a13 | 0xC81AEFCE)) ^ 0xC556EDE7) * v21;
  a13 = v22 ^ 0x6BCE5709;
  a14 = (v20 - 2024873818) ^ v22;
  a16 = a11;
  a17 = &STACK[0x634ED76D4AB882A5];
  a15 = v22 ^ 0x8F16D73;
  uint64_t v23 = (*(uint64_t (**)(int *))(v18 + 8 * (v20 ^ 0xB92)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v18 + 8 * (((a18 == v19) * (v20 + 904)) ^ v20)))(v23);
}

uint64_t sub_10006BC3C(uint64_t a1, int a2, unsigned int a3)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((62 * (*(_DWORD *)(*v3 + 4 * v4) != a3 + a2)) ^ a3)))();
}

void sub_10006BC74(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)*(&off_10018D100
                  + ((-113 * ((qword_1001B6D98 + dword_1001B6E68) ^ 0xEA)) ^ byte_100167DB0[byte_100163B10[(-113 * ((qword_1001B6D98 + dword_1001B6E68) ^ 0xEA))] ^ 0xAF])
                  + 79);
  int v3 = (unint64_t *)*(&off_10018D100
                           + (byte_100167DB0[byte_100163B10[(-113
                                                                                             * (*v2 ^ qword_1001B6D98 ^ 0xEA))] ^ 0xAF] ^ (-113 * (*v2 ^ qword_1001B6D98 ^ 0xEA)))
                           - 18);
  unint64_t v4 = *v2 ^ (unint64_t)&v8 ^ *v3;
  uint64_t v5 = 1932141199 * v4 - 0x5BC8EB821F80EA16;
  unint64_t v6 = 1932141199 * (v4 ^ 0xA437147DE07F15EALL);
  uint64_t *v2 = v5;
  unint64_t *v3 = v6;
  LODWORD(v2) = *(_DWORD *)v2;
  uint64_t v7 = (char *)*(&off_10018D100
               + ((-113 * ((qword_1001B6D98 - dword_1001B6E68) ^ 0xEA)) ^ byte_10016DDC0[byte_100167FB0[(-113 * ((qword_1001B6D98 - dword_1001B6E68) ^ 0xEA))] ^ 0x9D])
               - 73)
     - 4;
  (*(void (**)(char *, uint64_t (*)()))&v7[8
                                                   * (byte_10016DCC0[byte_100167CB0[(-113 * (v2 ^ 0xEA ^ v6))] ^ 0x55] ^ (-113 * (v2 ^ 0xEA ^ v6)))
                                                   + 18928])((char *)*(&off_10018D100+ ((-113 * ((v6 - (_BYTE)v2) ^ 0xEA)) ^ byte_100167DB0[byte_100163B10[(-113 * ((v6 - (_BYTE)v2) ^ 0xEA))] ^ 3])- 103)- 12, sub_100064A04);
  __asm { BRAA            X9, X17 }
}

void sub_10006BE50(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BRAA            X0, X17 }
}

uint64_t sub_10006BFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(uint64_t, void))(v9
                                                    + 8
                                                    * ((1794 * ((((a7 ^ 0x2DA) + ((a7 - 381) | 0x1A9) - 1336) & v7) == 0)) ^ a7)))(a1, (v8 - a1));
}

uint64_t sub_10006C010@<X0>(int a1@<W8>)
{
  int v10 = v5 + 1;
  BOOL v11 = v1 < v2;
  *(_DWORD *)(*v4 + 4 * (v10 + v6)) = *(_DWORD *)(*v4 + 4 * (a1 + v10));
  if (v11 == v10 + v7 < v2) {
    BOOL v11 = v10 + v7 < v1;
  }
  return (*(uint64_t (**)(void))(v9 + 8 * ((v11 * v8) ^ v3)))();
}

uint64_t sub_10006C018(int a1)
{
  return (*(uint64_t (**)(void, void))(v1
                                                   + 8
                                                   * ((37 * (v3 < (((a1 ^ 0x102) + 138410691) | 0x51088852u) + v2)) | a1 ^ 0x102u)))((a1 ^ 0x102u) - 509, 0);
}

void sub_10006C064()
{
}

uint64_t sub_10006C078@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  *(unsigned char *)(v4 + (v5 + a2)) = *(unsigned char *)(a1 + (v5 + a2)) ^ 0x77;
  return (*(uint64_t (**)(void))(v6
                              + 8 * (int)(((v5 - 1 != v2) * (((v7 + 2033175927) & 0xF9E39CBB) - 1192)) ^ (v7 + v3))))();
}

uint64_t sub_10006C0C8()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((v0 - 1995 + ((v0 - 2261) | 0x10A) - 604) * ((v1 & 0xFFFFFFFE) != 56245772)) ^ v0)))();
}

void sub_10006C10C()
{
}

uint64_t sub_10006C21C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v5 + 96) + 1428) = 136246116;
  return (*(uint64_t (**)(void))(v4 + 8 * (((*(_DWORD *)(a2 + 4) == v2) * ((v3 ^ 0x5E5) + (v3 ^ 0x188))) ^ v3 ^ 0x3E9)))();
}

uint64_t sub_10006C27C()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((41 * (v1 + 1 != v2 + 64)) ^ v0)))();
}

void sub_10006C340()
{
}

void sub_10006C58C()
{
}

uint64_t sub_10006C598(uint64_t a1, int a2)
{
  *(void *)(v3 + v6) = v8;
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (int)(((2 * (a2 & ~(v5 ^ (v4 == v6)))) & 0xFFFFFFF7 | (8
                                                                                     * ((v5 ^ ~(v4 == v6)) & 1))) ^ v2)))();
}

uint64_t sub_10006C608(int a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  *(void *)(a5 + (v5 + a1)) = *(void *)(v6 + (v5 + a1));
  return (*(uint64_t (**)(void))(v8 + 8 * (((a4 + a1 != 8) * v7) ^ a3)))((a1 - 8));
}

uint64_t sub_10006C638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  *(void *)(*(void *)(v9 + 96) + 1544) = *(void *)(a2 + 8);
  *(_DWORD *)(*(void *)(v9 + 96) + 1536) = *(_DWORD *)(a2 + 4);
  return v8 ^ a8;
}

uint64_t sub_10006C690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  if (a16 == 2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34
  }
                                                                + 8
                                                                * ((441 * (a34 != (a5 ^ (a5 - 260)) + 1491163814)) ^ (a7 + a5 + 706))))(a1, a2, a9);
  if (a16 != 1) {
    JUMPOUT(0x10006C810);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34
                                                              + 8
                                                              * ((309
                                                                * (a34 == ((a5 - 977598281) & 0xEEDD05FF ^ 0x58E15D18))) ^ (a7 + a5 + 128))))(a1, a2, a9);
}

uint64_t sub_10006C840@<X0>(unsigned int a1@<W8>)
{
  *(_DWORD *)(v6 + 4 * v1) = v1 + (a1 ^ (a1 >> 30)) * v2;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v1 < 0x26F) * v3) ^ v4)))();
}

void sub_10006C870()
{
}

void sub_10006C87C()
{
}

uint64_t sub_10006C8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v64 == 56245779 || v64 == 56245776)
  {
    LOBYTE(STACK[0x5BF]) = LOBYTE(STACK[0x187F]) ^ 0x77;
    LOBYTE(STACK[0x5BE]) = LOBYTE(STACK[0x187E]) ^ 0x77;
    LOBYTE(STACK[0x5BD]) = LOBYTE(STACK[0x187D]) ^ 0x77;
    LOBYTE(STACK[0x5BC]) = LOBYTE(STACK[0x187C]) ^ 0x77;
    LOBYTE(STACK[0x5BB]) = LOBYTE(STACK[0x187B]) ^ 0x77;
    LOBYTE(STACK[0x5BA]) = LOBYTE(STACK[0x187A]) ^ 0x77;
    LOBYTE(STACK[0x5B9]) = LOBYTE(STACK[0x1879]) ^ 0x77;
    LOBYTE(STACK[0x5B8]) = LOBYTE(STACK[0x1878]) ^ 0x77;
    LOBYTE(STACK[0x5B7]) = LOBYTE(STACK[0x1877]) ^ 0x77;
    LOBYTE(STACK[0x5B6]) = LOBYTE(STACK[0x1876]) ^ 0x77;
    LOBYTE(STACK[0x5B5]) = LOBYTE(STACK[0x1875]) ^ 0x77;
    LOBYTE(STACK[0x5B4]) = LOBYTE(STACK[0x1874]) ^ 0x77;
    LOBYTE(STACK[0x5B3]) = LOBYTE(STACK[0x1873]) ^ 0x77;
    LOBYTE(STACK[0x5B2]) = LOBYTE(STACK[0x1872]) ^ 0x77;
    LOBYTE(STACK[0x5B1]) = LOBYTE(STACK[0x1871]) ^ 0x77;
    LOBYTE(STACK[0x5B0]) = LOBYTE(STACK[0x1870]) ^ 0x77;
  }
  int v67 = (*(uint64_t (**)(void, void, void, void, unint64_t *, unint64_t, void, unint64_t *))(v65 + 8 * (v66 + 1633)))(LODWORD(STACK[0x550]), (v64 - 56245771), a47 ^ 0x9A43286E, LODWORD(STACK[0x2F0]) ^ 0x7440D53Au, &STACK[0x5B0], STACK[0x380], LODWORD(STACK[0x500]), &STACK[0x1860]);
  unsigned int v68 = ((2 * v67) & 0xFB7BDFEC) + (v67 ^ 0xFDBDEFF6);
  uint64_t v69 = (*(uint64_t (**)(void, unint64_t, void))(v65 + 8 * (v66 + 1583)))(*a64, STACK[0x380], LODWORD(STACK[0x500]));
  return (*(uint64_t (**)(uint64_t))(v65 + 8 * (((v68 == -37883914) * (v66 - 753)) ^ (v66 + 1264))))(v69);
}

void sub_10006CAFC()
{
}

uint64_t sub_10006CB68(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  int v37 = 831981571 * ((~((v36 - 128) | 0x33845586) + ((v36 - 128) & 0x33845586)) ^ 0x55DA7A5D);
  *(void *)(v36 - 120) = a11;
  *(_DWORD *)(v36 - 128) = (a14 + 875354895 + 67 * (((a4 + 543557307) | 0x10888A1) ^ 0x216E8F89)) ^ v37;
  *(_DWORD *)(v36 - 124) = v37 + a4 + 1162;
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(v35 + 8 * (a4 + 2397)))(v36 - 128);
  uint64_t v39 = a35 & 0x3F;
  *(&a26 + (v39 ^ 0x2E)) = -9;
  return (*(uint64_t (**)(uint64_t))(v35 + 8 * ((2290 * ((v39 ^ 0x2E) > 0x37)) ^ a4)))(v38);
}

uint64_t sub_10006CC80@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (int)(((((v1 + 1803023820) & 0xDFEFFB63) - 1265103320) * (a1 != 1704253542)) ^ v1)))(4294925278);
}

void sub_10006CCD0()
{
  uint64_t v0 = __chkstk_darwin();
  if (*(void *)(v0 + 24)) {
    BOOL v2 = *(void *)(v0 + 8) == 0x634ED76D4AB8828DLL;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  int v1 = *(_DWORD *)(v0 + 32) ^ (1224239923 * (((v0 | 0xB7698061) - v0 + (v0 & 0x48967F9E)) ^ 0x45DA7DB6));
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10006CE18()
{
  return sub_10006CE3C();
}

uint64_t sub_10006CE3C()
{
  return v0 ^ v1;
}

void sub_10006CE7C(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0xB999BAB1C512043) = (*(_DWORD *)(a1 - 0xB999BAB1C512043) ^ 0xDFF50366)
                                        - 537590938
                                        - ((2 * (*(_DWORD *)(a1 - 0xB999BAB1C512043) ^ 0xDFF50366) + 2) & 0xBFEA06CC)
                                        + 1;
}

void sub_10006CEC4()
{
  (*(void (**)(void))(v1 + 8 * (v0 + 2240)))();
  JUMPOUT(0x10006CEE0);
}

uint64_t sub_10006CEF8()
{
  return 4294925278;
}

uint64_t sub_10006CF00(uint64_t a1, uint64_t a2, int a3)
{
  if (v3 == a3 + v5 - 927) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  *(void *)(v4 - 0x3B842D404CB6A8ACLL) = v7;
  return sub_10006CF24();
}

void sub_10006CF24(_DWORD *a1@<X8>)
{
  *(_DWORD *)(v1 + 16) = *a1;
}

uint64_t sub_10006CF68()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (v0 | (16 * ((((v0 - 1036) ^ (v1 + v3 < (v0 - 540 + v2))) & 1) == 0)))))();
}

uint64_t sub_10006CFA0()
{
  return 4294925273;
}

_DWORD *sub_10006CFAC(_DWORD *result)
{
  *uint64_t result = -56550210;
  return result;
}

void sub_10006CFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9)
{
  int v11 = a9[3] ^ 0x77;
  int v12 = ((*a9 ^ 0x77777777) << 24) | ((a9[1] ^ 0x77) << 16) | ((a9[2] ^ 0x77) << 8) | v11;
  *(_DWORD *)(*v9 - 0x5F548590D8AA63B5) = v12 + v10 - 2 * (v12 & 0x5E6BE0EF ^ v11 & 9);
  JUMPOUT(0x100055054);
}

uint64_t sub_10006D034@<X0>(int a1@<W8>)
{
  int v3 = *(uint64_t (**)(uint64_t))(v2 + 8 * (a1 + 1908));
  return v3(v1);
}

uint64_t sub_10006D064@<X0>(int a1@<W2>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (int)(((a2 == 24) * ((v2 ^ 0xB01C2B8C) + a1 + v2 - 516)) ^ v2)))();
}

uint64_t sub_10006D0AC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return (*(uint64_t (**)(uint64_t, void))(v5
                                                    + 8
                                                    * ((4005
                                                      * (((v4 == a3) ^ ((a4 + 28) ^ (a4 + 109))) & 1)) ^ a4)))(a1, (a4 + 58865773) | 0x644007A0u);
}

uint64_t sub_10006D0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100073FFC(a1, a2, a3, a4);
}

uint64_t sub_10006D108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x55D5CC6D86BC0F2F];
  a14 = (v17 - 1381) ^ (831981571
                      * (((&a13 | 0xEDA12E04) - (&a13 & 0xEDA12E04)) ^ 0x7400FE20));
  uint64_t v18 = (*(uint64_t (**)(unint64_t **))(v15 + 8 * (v17 + 828)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v15 + 8 * ((3481 * (a15 == v16 + (v17 ^ 0x737) - 707)) ^ v17)))(v18);
}

void sub_10006D1B0()
{
}

void sub_10006D1E4()
{
}

uint64_t sub_10006D1F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = *(void *)(v15 + 32);
  *(_DWORD *)(a9 - 0x354295EB77E74961) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8 * (int)((29 * (v12 & ~((337 * (v13 & 0xBB870FFF ^ 0x6A8)) ^ (v17 == 0x5E8E72AB319E4289)))) ^ v13 & 0xBB870FFF)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, v14, a12);
}

uint64_t sub_10006D2C8()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v0 - 764) ^ 0x542)
                                * ((((767 * ((v0 - 396) ^ 0x6A9)) ^ 0xCD99DB0C) & (2 * v1) ^ 0x41904860)
                                 + (v1 ^ 0xCF34DB4B)
                                 + 1564439291 == 1141662324)) ^ (v0 - 396))))();
}

uint64_t sub_10006D348@<X0>(char a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  *(_DWORD *)(v50 - 144) = v49;
  *(void *)(v50 - 120) = v43 - 7;
  *(void *)(v50 - 128) = a6 - 7;
  *(_DWORD *)(v50 - 152) = v49 & 0xFFFFFFF8;
  *(_DWORD *)(v50 - 136) = -(v49 & 0xFFFFFFF8);
  int v51 = -8 - a5;
  int v52 = a3 + a2;
  char v53 = a3 + a2 + a1;
  uint64_t v54 = (v52 + a4 + v51 + 8);
  v56.val[0].i64[0] = v54 & 0xF;
  v56.val[0].i64[1] = (v53 + 10 + (_BYTE)v51 + 8) & 0xF;
  v56.val[1].i64[0] = (v53 + 9 + (_BYTE)v51 + 8) & 0xF;
  v56.val[1].i64[1] = (v53 + 8 + (_BYTE)v51 + 8) & 0xF;
  v56.val[2].i64[0] = (v53 + 7 + (_BYTE)v51 + 8) & 0xF;
  v56.val[2].i64[1] = (v53 + 6 + (_BYTE)v51 + 8) & 0xF;
  v56.val[3].i64[0] = (v47 + (_BYTE)v51 + 8) & 0xF;
  v56.val[3].i64[1] = (v53 + (_BYTE)v51 + (v48 ^ 0xDB) + 8) & 0xF;
  *(int8x8_t *)(*(void *)(v50 - 128) + v54) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(*(void *)(v50 - 120) + v54), *(int8x8_t *)(v46 + v56.val[0].i64[0] - 7)), veor_s8(*(int8x8_t *)(v56.val[0].i64[0] + v44 - 6), *(int8x8_t *)(v56.val[0].i64[0] + v45 - 5)))), (int8x8_t)0x7777777777777777), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v56, (int8x16_t)xmmword_10016DEE0), (int8x8_t)0xB7B7B7B7B7B7B7B7)));
  return (*(uint64_t (**)(__n128))(a43 + 8 * (v48 ^ (16 * (*(_DWORD *)(v50 - 136) == v51)))))((__n128)xmmword_10016DEE0);
}

uint64_t sub_10006D4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return sub_10005CF74(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10006D4D4@<X0>(unsigned int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((a1 > 0x82) * ((v1 ^ 0x7D1) - 1347)) ^ (v1 + 1139))))();
}

uint64_t sub_10006D518(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                              + 8 * ((((100 * (((a4 - 1084) | 0x448) ^ 0x44A)) ^ 0x15D) * ((v4 & 0x18) == 0)) ^ a4)))();
}

uint64_t sub_10006D55C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + v7 + a1) = v5;
  return (*(uint64_t (**)(void))(v8 + 8 * (((v7 + 1 + a1 < (unint64_t)(v4 + v6)) * v2) ^ v3)))();
}

uint64_t sub_10006D58C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  BOOL v15 = a1 != 866215440 && a10 - v11 == -769233200;
  return (*(uint64_t (**)(void))(v12 + 8 * ((v15 * (v13 + ((v10 + 675822586) | 0x11168B02) - 564)) ^ v10)))();
}

uint64_t sub_10006D600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  return sub_100031828(a1, 4432325, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_10006D60C@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  unsigned int v7 = v5 + a2 + ((v3 + 1921359949) & 0x8D7A5AC6);
  int v8 = *(_DWORD *)((char *)&STACK[0x290] + (v7 & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + v7) = v8 ^ 0xB2;
  *(unsigned char *)(a1 + (v5 + a2 + 71)) = (BYTE1(v8) ^ 0xA1) - ((2 * (BYTE1(v8) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v5 + a2 + 72)) = (BYTE2(v8) ^ 0x43) - ((2 * (BYTE2(v8) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v5 + a2 + 73)) = (HIBYTE(v8) ^ 0x58) - ((2 * (HIBYTE(v8) ^ 0x58)) & 0xEF) + 119;
  unsigned int v9 = LODWORD(STACK[0x2EC]) - 397873702;
  BOOL v10 = v9 < v2;
  BOOL v11 = v5 - 123467318 < v9;
  if (v5 - 123467318 < v2 != v10) {
    BOOL v11 = v10;
  }
  return (*(uint64_t (**)(void))(v6 + 8 * ((!v11 * v4) ^ v3)))();
}

uint64_t sub_10006D704()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v0 - 1473955524) & 0x57DABFFD) + ((v0 - 2122) | 0x182) - 653)
                                * ((v3 + v1) > 0x7FFFFFFD)) ^ v0)))();
}

uint64_t sub_10006D758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((((v5 == v6) ^ (a5 + v7)) & 1)
                                * ((v7 - 880807663) & 0x7FE7FEFB ^ (a5 - 124))) ^ v7)))();
}

uint64_t sub_10006D7A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(uint64_t, void))(v6
                                                    + 8
                                                    * ((1260 * (((((v4 - 88270563) & 0x542E6F5) - 696) & v5) == 0)) ^ v4)))(a1, (a1 - a4));
}

uint64_t sub_10006D7E8()
{
  int v5 = 3804331 * ((2 * ((v4 - 128) & 0x7DAFB138) - (v4 - 128) + 38817477) ^ 0x7C856B33);
  *(void *)(v4 - 128) = v3;
  *(_DWORD *)(v4 - 120) = v5 + v0 + 1106;
  *(_DWORD *)(v4 - 116) = v1 - v5 + ((v0 + 769) ^ 0xD84831EE);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 + 1397)))(v4 - 128);
  return sub_10006D864(v6);
}

uint64_t sub_10006D864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  *(void *)(v26 - 112) = a22;
  *(void *)(v26 - 128) = a20;
  *(_DWORD *)(v26 - 104) = (v23 - 706) ^ (69008221 * (((v25 | (v26 - 128)) - ((v26 - 128) & v25)) ^ 0x9EEF0D10));
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v22 + 8 * (v23 + 575)))(v26 - 128);
  return (*(uint64_t (**)(uint64_t))(v22
                                            + 8
                                            * (int)(((*(_DWORD *)(v26 - 120) > (v24 + 679))
                                                   * (((v23 - 1809) | 0x208) + ((v23 - 1137) ^ 0xFFFFFCBC))) ^ v23)))(v27);
}

uint64_t sub_10006D90C()
{
  unsigned int v3 = *(_DWORD *)(v2 - 0x6BA7059072F2C1C3) - 1207789969;
  unsigned int v4 = *(_DWORD *)(v2 - 0x6BA7059072F2C1C7) + 1991363143;
  BOOL v5 = v4 < 0xC501623C;
  BOOL v6 = v3 < v4;
  if (v3 < 0xC501623C != v5) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((2693 * v6) ^ v0)))();
}

uint64_t sub_10006D998()
{
  return sub_10006D9B4();
}

uint64_t sub_10006D9B4()
{
  return sub_100059F8C();
}

uint64_t sub_10006DA94@<X0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * ((70 * (*(_DWORD *)(*v3 + 4 * a1) != ((v4 - 1215) ^ (v2 + 166)))) ^ v4)))();
}

uint64_t sub_10006DAC8()
{
  BOOL v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * ((v0 - 316) ^ 0xC2D)))(32, 0x101004023FF3BD5) == 0;
  return (*(uint64_t (**)(void))(v1 + 8 * (int)((v2 * (v0 ^ 0x728 ^ (v0 + 681463684) & 0xD761ABFE)) ^ (v0 - 316))))();
}

void sub_10006DB4C()
{
}

uint64_t sub_10006DB70(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((a6 + v7 + 1477247021 < 8 * (a3 ^ 0x707) - 1848) * ((7 * (a3 ^ 0x766)) ^ 0xC2E)) ^ a3)))();
}

uint64_t sub_10006DBE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((954 * (a5 + 1 == v6 + 16)) ^ a3)))();
}

void sub_10006DCC8()
{
}

uint64_t sub_10006DCE4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((1107 * (*(unsigned char *)(a1 + v2) == 94)) ^ v1)))();
}

void sub_10006DD28()
{
}

uint64_t sub_10006DD34(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((a2 + 746 + 155 * ((a2 + 717) ^ 0x414) - 2094) * (v2 == v3)) ^ (a2 + 717))))();
}

uint64_t sub_10006DD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(void))(v22
                              + 8
                              * (((~a19
                                 + v20
                                 - (unint64_t)((((v21 - 1794595853) | 0x68030082) ^ 0xA75B01Du) + v19) < 0x10)
                                * (a8 + ((v21 - 603743638) | 0x21080A0B) + 52)) ^ v21)))();
}

uint64_t sub_10006DDF4()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((*(_DWORD *)(v2 - 0x6BA7059072F2C1BBLL) == -563355418)
                                * ((v1 - 2074003460) & 0x7B9ECEFA ^ 0xCDC)) ^ v1)))();
}

uint64_t sub_10006DE50(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * (((((v3 ^ (v3 - 441)) + 133) ^ 0x2D6) * (v1 > 0xD798F29B)) ^ (v3 - 1340330937))))(a1, 1340331655);
}

void sub_10006DEA4()
{
}

uint64_t sub_10006DF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3
                                                                       + 8
                                                                       * (((((v5 - 703) | 0x702)
                                                                          + 27 * (v5 ^ 0x306)
                                                                          - 2193)
                                                                         * (v4 == 736754318)) ^ v5)))(a1, a2, a3, 1251020603);
}

uint64_t sub_10006DF74()
{
  uint64_t v5 = (*(uint64_t (**)(void, void, void))(v1 + 8 * (int)(((v0 + 1674119806) & 0x9C36F3FF) + 1536)))(*v3, *v4, *(_DWORD *)(v2 - 0x6BA7059072F2C1CBLL) + ((v0 + 1674119806) & 0x9C36F3FF ^ 0xB1B06B56));
  return sub_10006DFC8(v5);
}

uint64_t sub_10006DFC8()
{
  void *v4 = v3;
  *(_DWORD *)(v0 - 0x6BA7059072F2C1CBLL) = v2;
  *uint64_t v1 = v2;
  return sub_10006DFE4();
}

uint64_t sub_10006E004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, int a6@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                                  + 8 * ((839 * (v6 < (a6 ^ 0x417u) - 1164)) ^ a6)))(a1, a2, a3, a4, 2814139962, a5, 3053110526);
}

uint64_t sub_10006E048@<X0>(int a1@<W5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,int a25,int a26,int a27)
{
  int v34 = v32 ^ (a1 - 512);
  LODWORD(STACK[0x2D8]) = a2;
  LODWORD(STACK[0x2DC]) = a25;
  STACK[0x2E0] = a24;
  LODWORD(STACK[0x2E8]) = v32 - 158 - v27 + a27 + 23888798;
  STACK[0x2F0] = v28 + (v27 - 935020333);
  int v35 = (*(uint64_t (**)(uint64_t, uint64_t))(a22 + 48 * v29 + 8))(a11, a20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v31
                                                     + 8
                                                     * ((2746 * (v34 + v35 - (v33 & (2 * v35)) - 513788357 == v30)) ^ v32)))(1127068362, 1074653292);
}

uint64_t sub_10006E128()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((15 * (v0 - 1131453695 + (v1 ^ 0x78Cu) - 813 > 0x7FFFFFFE)) | v1)))();
}

uint64_t sub_10006E16C()
{
  unsigned int v3 = v1 - ((2 * v1 - 580997960) & 0xEA7622BC) + 1676306362;
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (v2 ^ (111
                                     * (((v3 << ((v2 - 41) ^ 4)) & 0x297FFBEE ^ 0x287622AC)
                                      + (v3 ^ 0x6184ECA9)
                                      - 67739653 == 280387058)))))();
}

uint64_t sub_10006E208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v21 = 1224239923
      * (((&a13 | 0x2599EE82) - &a13 + (&a13 & 0xDA661178)) ^ 0xD72A1355);
  a16 = a12;
  a17 = &STACK[0x634ED76D4AB88295];
  a15 = v21 ^ 0x7F5F299F;
  a13 = v21 ^ 0x6BCE5709;
  a14 = (v20 - 2024874714) ^ v21;
  uint64_t v22 = (*(uint64_t (**)(int *))(v19 + 8 * (v20 + 750)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * ((3643
                                              * (a18 == v18
                                                      + ((v20 - 1623) | 0x2C2)
                                                      + ((v20 + 1524650330) & 0xE7E)
                                                      - 2306)) ^ v20)))(v22);
}

uint64_t sub_10006E2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((((v7 ^ 0x11u) < ((v8 + 1059654013) & 0xC0D6F7AF ^ 0x2AB)) * (a7 + a5 + v8 - 374 + 186)) ^ v8)))();
}

uint64_t sub_10006E354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (int)(((((v6 + a5 + 1282067022) & 0xC939BBFC) - 2139)
                                     * ((unint64_t)(v5 - a1) < 0x20)) ^ a5)))();
}

uint64_t sub_10006E39C()
{
  int v3 = (v1 == (((v0 - 58) | 1) ^ 0x12)) * ((v0 - 804) | 0x441);
  if (v1 == (((v0 - 58) | 1) ^ 0x12)) {
    ++v3;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (v3 ^ v0)))(4294925278);
}

uint64_t sub_10006E3E8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((v5 + 30 * (v5 ^ 0x683) - 2733) * (a3 < a4)) ^ v5)))();
}

uint64_t sub_10006E41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, unsigned int a20)
{
  *a5 = 0;
  *a6 = 0;
  a20 = 1178560073 * (((&a19 | 0xD492092) - (&a19 & 0xD492092)) ^ 0xEA7C02FA) - 504207030;
  uint64_t v22 = (*(uint64_t (**)(int *))(v21 + 18936))(&a19);
  return (*(uint64_t (**)(uint64_t))(v21 + 8 * ((38 * (a19 != v20)) ^ 0x153u)))(v22);
}

uint64_t sub_10006E4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unsigned int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v22 = ((((2 * &a13) | 0x1A80A97C) - &a13 + 1925163842) ^ 0x7FF3A969) * v21;
  a16 = a9;
  a17 = &STACK[0x634ED76D4AB8829D];
  a15 = v22 ^ 0x859392F2;
  a13 = v22 ^ 0x6BCE5709;
  a14 = (v20 - 2024874358) ^ v22;
  uint64_t v23 = (*(uint64_t (**)(int *))(v19 + 8 * (v20 ^ 0xDB6)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * (((a18 == v18) * (v20 + 2031)) ^ v20)))(v23);
}

uint64_t sub_10006E578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11, int a12, int a13, uint64_t a14)
{
  unsigned int v20 = 235795823 * ((&a11 & 0x844DC5BB | ~(&a11 | 0x844DC5BB)) ^ 0xEF1F731D);
  a13 = (*(_DWORD *)(a1 + 12) ^ v18) + *(_DWORD *)(v14 - 0x6BA7059072F2C1C3) - 80601684 - v20 + 166853305;
  a14 = v14;
  a12 = (v19 + 2090) ^ v20;
  a11 = 1176923396 - v20;
  uint64_t v21 = (*(uint64_t (**)(unsigned int *))(v17 + 8 * (v19 + 2171)))(&a11);
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * ((1346 * (*v16 == ((v19 + 1077) ^ (v15 + 1257)))) ^ v19)))(v21);
}

void sub_10006E65C()
{
}

uint64_t sub_10006E670(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,int a35)
{
  return (*(uint64_t (**)(void))(v35
                              + 8
                              * ((((a6 + a35 + 1319) > 0xFFFFFFFA) * ((((a3 - 57) | 0x34) + 1152) ^ 0x484)) | (a3 + 2126))))();
}

uint64_t sub_10006E6C0@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (a1 | (8 * (v1 - 1704253598 < ((2 * a1) ^ 0xCB6 ^ (2 * a1) ^ 0xEB6 ^ 0xFFFFFDBF))))))();
}

void sub_10006E710()
{
}

uint64_t sub_10006E71C(__n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, unsigned int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unsigned int a31)
{
  v32.n128_u64[0] = 0xEEEEEEEEEEEEEEEELL;
  v32.n128_u64[1] = 0xEEEEEEEEEEEEEEEELL;
  v33.n128_u64[0] = 0x7777777777777777;
  v33.n128_u64[1] = 0x7777777777777777;
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128))(v31 + 8 * (((a22 + 1498) * (a17 < 0xFFFFFFFE)) | a22)))(a31, a26, 303575336, 3564556096, a9, 3727773272, 2870467056, a1, a2, a3, a4, v32, v33);
}

uint64_t sub_10006E794@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((475
                                * (v2 == ((26 * (((v1 - 1490) | 0x482) ^ 0x4CF) + 559300073) ^ (3
                                                                                              * (((v1 - 1490) | 0x482) ^ 0x42D))))) ^ ((v1 - 1490) | 0x482))))();
}

void sub_10006E80C()
{
}

uint64_t sub_10006E840@<X0>(int a1@<W0>, int a2@<W3>, uint64_t a3@<X8>)
{
  *(void *)(v3 - 7 + (v6 + v5 + v8 - a1)) = *(void *)(a3 - 7 + (v6 + v5 + v8 - a1));
  return (*(uint64_t (**)(void, void))(v9
                                                   + 8
                                                   * ((61 * ((((a2 - 21) ^ 0xFFFFFE6E) & v4) - a1 != 8)) ^ (a2 - 21))))((-a1 - 8), v7 - (((a2 - 21) ^ 0xFFFFFE6E) & v4));
}

uint64_t sub_10006E8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100054E4C(a1, a2, a3, a4, a5, 2945110806);
}

uint64_t sub_10006E8B8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1019 * (((((65 * (v0 ^ 0x1C2) - 922) | 0x802) - 2095) & v1) != 0)) ^ v0)))();
}

uint64_t sub_10006E8FC@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W8>)
{
  *(unsigned char *)(v3 + (a1 + v5)) = *(unsigned char *)(v4 + (a1 + v5))
                                           - ((2 * *(unsigned char *)(v4 + (a1 + v5))) & 0xEF)
                                           + 119;
  return (*(uint64_t (**)(void))(v6 + 8 * (int)(((a1 - 1 == a3 + 563) * ((a2 + 1108344351) & 0xBDF0027B ^ 0x4B1)) ^ a2)))();
}

void sub_10006E95C()
{
}

uint64_t sub_10006E964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, unint64_t *a13, int a14)
{
  unsigned int v17 = 3804331 * ((101839932 - (&a10 | 0x611F43C) + (&a10 | 0xF9EE0BC3)) ^ 0x873B2E35);
  a14 = (v14 - 726) ^ v17;
  a10 = v15;
  a11 = v17 ^ 0x14497ECE;
  a12 = v17 ^ 0x4CDE260;
  a13 = &STACK[0x5267DA57ABB8ED88];
  uint64_t v18 = (*(uint64_t (**)(uint64_t *))(v16 + 8 * (v14 + 1442)))(&a10);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * (((*(_DWORD *)(v15 - 0x6BA7059072F2C1BBLL) == -563355418)
                                              * (((v14 - 151) | 0x84) ^ 0x95F)) ^ v14)))(v18);
}

void sub_10006EA54()
{
}

uint64_t sub_10006EACC@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((740 * (*(_DWORD *)(v1 + 4 * (v3 - 205 + a1 + v3 + 586 + v4)) == v2)) ^ (v3 - 205))))();
}

void sub_10006EB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22)
{
  int v27 = ((((v26 - 144) | 0x7F683405) + (~(v26 - 144) | 0x8097CBFA)) ^ 0xEBC57D5D) * v24;
  *(void *)(v26 - 120) = a10;
  *(_DWORD *)(v26 - 128) = v22 - v27 + 1156;
  *(void *)(v26 - 136) = v25;
  *(_DWORD *)(v26 - 140) = a22 + v27 + ((3 * (v22 ^ 0x132)) ^ 0x4C22081);
  (*(void (**)(uint64_t))(v23 + 8 * (v22 + 1978)))(v26 - 144);
  JUMPOUT(0x10004C4FCLL);
}

uint64_t sub_10006EB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  return sub_10004DC58(a1, a2, a3, 1669055439, a5, a6, a7, a8, a9, a10, a11, a12, a13, v40, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40);
}

uint64_t sub_10006EBA0()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((117 * ((((v0 ^ 0x630) + 134) ^ 0xFFFFFB49) + v2 + v1 >= 0x7FFFFF7D)) ^ v0)))();
}

uint64_t sub_10006EBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  int v50 = BYTE4(a44) ^ 0x89;
  if (v50 == 1)
  {
    int v52 = (a6 - 513377384) & 0x218DDDFC;
    BYTE4(a39) = ((((a6 - 104) & 0xFC) + 48) ^ (8 * a41))
               - ((2 * ((((a6 - 104) & 0xFC) + 48) ^ (8 * a41))) & 0xE0)
               + 119;
    BYTE5(a39) = ((a41 >> 5) ^ 0xCD) - ((2 * ((a41 >> 5) ^ 0xCD)) & 0xEF) + 119;
    BYTE6(a39) = ((a41 >> 13) ^ 0x53) - ((2 * ((a41 >> 13) ^ 0x53)) & 0xEF) + 119;
    HIBYTE(a39) = ((a41 >> 21) ^ 0x65) - ((2 * ((a41 >> 21) ^ 0x65)) & 0xEF) + 119;
    HIDWORD(v55) = HIDWORD(a40) ^ 6;
    LODWORD(v55) = a41 ^ 0x60000000;
    LOBYTE(a40) = (v55 >> 29) - ((2 * (v55 >> 29)) & 0xEF) + 119;
    BYTE1(a40) = ((HIDWORD(a40) >> 5) ^ 0x1B) + (~(2 * ((HIDWORD(a40) >> 5) ^ 0x1B)) | 0x11) + 120;
    BYTE2(a40) = ((HIDWORD(a40) >> 13) ^ 0xA8) - ((2 * ((HIDWORD(a40) >> 13) ^ 0xA8)) & 0xEF) + 119;
    int v54 = ((HIDWORD(a40) >> 20) | 0x11) - (HIDWORD(a40) >> 21) + 119;
    goto LABEL_5;
  }
  int v51 = -49567061;
  if (v50 == 2)
  {
    int v52 = a8 + a6 + 1042;
    BYTE4(a39) = ((a8 + a6 + 18) ^ 0x51 | (2 * (HIDWORD(a40) >> 21))) - (HIDWORD(a40) >> 21) + 119;
    BYTE5(a39) = ((HIDWORD(a40) >> 13) ^ 0xA8) - ((2 * ((HIDWORD(a40) >> 13) ^ 0xA8)) & 0xEF) + 119;
    BYTE6(a39) = ((HIDWORD(a40) >> 5) ^ 0x1B) - ((2 * ((HIDWORD(a40) >> 5) ^ 0x1B)) & 0xEF) + 119;
    HIDWORD(v53) = HIDWORD(a40) ^ 6;
    LODWORD(v53) = a41 ^ 0x60000000;
    HIBYTE(a39) = (v53 >> 29) - ((2 * (v53 >> 29)) & 0xEF) + 119;
    LOBYTE(a40) = ((a41 >> 21) ^ 0x65) - ((2 * ((a41 >> 21) ^ 0x65)) & 0xEF) + 119;
    BYTE1(a40) = ((a41 >> 13) ^ 0x53) + (~(2 * ((a41 >> 13) ^ 0x53)) | 0x11) + 120;
    BYTE2(a40) = ((a41 >> 5) ^ 0xCD) - ((2 * ((a41 >> 5) ^ 0xCD)) & 0xEF) + 119;
    LOBYTE(v54) = ((8 * a41) ^ 0x70) - 2 * ((8 * a41) ^ 0x70 ^ (8 * a41) & 8) + 119;
LABEL_5:
    int v51 = v52 - a8 - 1042;
    BYTE3(a40) = v54;
  }
  return sub_100031828(a1, 4432325, a3, a4, (int)a8 + v51 - 37, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_10006EE28@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v4 + 4 * (v5 - 1362986814)) = 1362986814
                                                          - v5
                                                          + ((1566083941
                                                            * (*(_DWORD *)(v4 + 4 * (v5 - 1362986815)) ^ (*(_DWORD *)(v4 + 4 * (v5 - 1362986815)) >> 30))) ^ *(_DWORD *)(v4 + 4 * (v5 - 1362986814)));
  *(void *)(v6 - 120) = v3 - v2;
  *(_DWORD *)(v6 - 140) = v2 ^ 1;
  *(_DWORD *)(v6 - 112) = v2 + a1 + 239666101 + 35;
  *(_DWORD *)(v6 - 108) = a1 + 239666101 - v2;
  *(void *)(v6 - 136) = (v5 + 1577768503) + v2;
  *(_DWORD *)(v6 - 128) = ((a1 + 239666101) ^ 0x58) - v2;
  *(_DWORD *)(v6 - 104) = v2 + a1 + 764300735;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (a1 - 1340329268)))(v6 - 144);
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * *(int *)(v6 - 144)))(v7);
}

uint64_t sub_10006EF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((2949 * (((((a7 + 1955872062) & 0x8B6BC7B5) - 1949) & v7) == 0)) ^ a7)))();
}

uint64_t sub_10006EF50(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,char a31)
{
  if (a31 == 2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v31
  }
                                                       + 8
                                                       * ((77
                                                         * (LODWORD(STACK[0x2E8]) == (((a3 - 53) | 0x481) ^ 0x58E15927))) ^ (a3 + 1100))))(a1, 235795823);
  if (a31 != 1) {
    JUMPOUT(0x10006F0ACLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v31
                                                     + 8
                                                     * ((1004
                                                       * (LODWORD(STACK[0x2E8]) != ((12 * (a3 ^ 0x5F)) ^ 0x58E1596A))) ^ (a3 + 1167))))(a13, 235795823);
}

uint64_t sub_10006F0E4(uint64_t a1, int a2, int a3)
{
  *(void *)(v9 - 7 + (v6 + v5 + a3 - v8)) = *(void *)(v3 - 7 + (v6 + v5 + a3 - v8));
  return (*(uint64_t (**)(void))(v10 + 8 * (((v8 - (v4 & 0xFFFFFFF8) == -8) * ((a2 ^ 0x64F) + 101)) ^ a2)))(v7 - (v4 & 0xFFFFFFF8));
}

uint64_t sub_10006F13C()
{
  unsigned int v5 = (((v4 + v3) >> 4) & 0xFCBAFF6 ^ 0xB0B0670)
     + (((v4 + v3) >> 5) ^ 0x72627CC3)
     - 1521951340;
  BOOL v7 = v5 <= 0x1D2EB58E || v5 >= v1 + 489600399;
  return (*(uint64_t (**)(void))(v0 + 8 * (int)((((((v2 + 1186185376) & 0xB94C3F5F) - 1171) ^ 0xA6) * v7) ^ (v2 - 314))))();
}

uint64_t sub_10006F1CC()
{
  *(void *)(v1 + v4) = v6;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v2 != v4) * v3) ^ v0)))();
}

uint64_t sub_10006F1F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((((unint64_t)(v2 - a1) < 0x20) ^ (v3 + 26)) & 1)
                                * (((v3 + 606376664) | 0xDA0184) ^ (v1 + 2169))) ^ (v3 - 230))))();
}

uint64_t sub_10006F240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (132 * (v6 ^ 0x6BF)
                               + 2
                               * ((a5 & 0x18) == ((132 * (v6 ^ 0x6BF) - 1930651272) ^ 0x8CEC9B0C ^ ((132 * (v6 ^ 0x6BF) - 256) | 0x184))))))();
}

uint64_t sub_10006F29C(uint64_t a1, int a2)
{
  *int v6 = v6[623];
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((4 * (((((v2 - 206) | 0x49) + 1136873017) | 0xC208605) ^ (a2 + 19))) ^ 0x1B8)
                                * (v3 - 1 == v5)) ^ ((v2 - 206) | 0x49))))();
}

uint64_t sub_10006F304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12 = v10 + 1126498;
  if (v12 <= 0x40) {
    unsigned int v12 = 64;
  }
  uint64_t v13 = (a3 - v8 - v9);
  int v14 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8 * ((61 * (v13 + v12 < 0xF)) ^ 0x892u));
  return v14(v13, v14, a3, 2754850916, a5, a6, a7, a8);
}

uint64_t sub_10006F378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v18 - 112) = (v17 + 797) ^ (69008221
                                        * ((((2 * (v18 - 136)) | 0x3CAD119A) - (v18 - 136) + 1638496051) ^ 0x4DF4DAC7));
  *(void *)(v18 - 120) = a14;
  *(void *)(v18 - 136) = v14;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v17 ^ 0x86E)))(v18 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (int)(((*(_DWORD *)(v18 - 128) == v16 + ((v17 + 75) | 0x70) - 498)
                                                   * ((v17 + 238781635) & 0xF1C47BF7 ^ 0x825)) ^ v17)))(v19);
}

uint64_t sub_10006F434@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_DWORD *)(a11 + 4 * (a3 + v11 + 409)) = a2;
  int v17 = v14 + v11 + 781;
  BOOL v19 = v17 > 398 * (v12 ^ 0x19B) + v15 || v17 < a1;
  return (*(uint64_t (**)(void))(v16 + 8 * ((v19 * v13) ^ v12)))();
}

uint64_t sub_10006F484@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, int a4@<W8>)
{
  *(unsigned char *)(a1 + (a3 + v5)) = *(unsigned char *)(v4 + (a3 + v5)) ^ 0x77;
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((((a2 - v7 - 64) ^ (a3 - 1 == a4)) & 1 | (4
                                                                                          * (((a2 - v7 - 64) ^ (a3 - 1 == a4)) & 1))) ^ (v6 + a2 + 2367))))();
}

uint64_t sub_10006F4CC@<X0>(int a1@<W1>, unint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, int a5@<W6>, unint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v36 = 4 * ((v32 ^ v26 ^ (a4 + 179)) + v33);
  unint64_t v37 = (*(_DWORD *)(a24 + v36) ^ v24) + (a3 ^ HIDWORD(v29));
  unint64_t v38 = HIDWORD(a6)
      + v27 * (unint64_t)(*(_DWORD *)(*v34 + v36) ^ v24)
      + ((v37 + a1 - (v28 & (2 * v37))) ^ a2);
  *(_DWORD *)(a24 + 4 * (v33 + a4)) = v38 + v24 - (v25 & (2 * v38));
  int v39 = v33 + 1 + a5;
  BOOL v41 = v39 > v31 || v39 < v35;
  return (*(uint64_t (**)(void))(v30 + 8 * ((v41 | (2 * v41)) ^ v32)))();
}

uint64_t sub_10006F55C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  *(unsigned char *)(a6 + v8) = *(unsigned char *)(a1 + (v7 + a4))
                      - ((*(unsigned char *)(a1 + (v7 + a4)) << (v9 + 63)) & 0xEE)
                      + 119;
  return (*(uint64_t (**)(void))(v10 + 8 * (((v8 != 63) * a7) ^ v9)))();
}

void sub_10006F5A8()
{
}

uint64_t sub_10006F5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8 + 8 * (int)(((((9 * (v7 ^ 0x141)) ^ 0xFFFFFCE6) + v7 - 143) * (v6 == a6)) | v7)))();
}

uint64_t sub_10006F5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  return sub_10004DC58(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40);
}

uint64_t sub_10006F5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unsigned int a20,int a21)
{
  a19 = &STACK[0x55D5CC6D86BC0F5F];
  a20 = (831981571 * (&a19 ^ 0x99A1D024)) ^ 0x8F;
  uint64_t v22 = (*(uint64_t (**)(unint64_t **))(v21 + 18816))(&a19);
  return (*(uint64_t (**)(uint64_t))(v21 + 8 * ((1472 * (a21 == -563355418)) ^ 0x175u)))(v22);
}

uint64_t sub_10006F6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, unint64_t *a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16)
{
  unsigned int v20 = 1178560073
      * (((&a11 | 0x93C5D81) - &a11 + (&a11 & 0xF6C3A278)) ^ 0xEE097FE9);
  a11 = &STACK[0x4B3FB627E137F32A];
  a12 = &STACK[0x5F548590D8AA63C1];
  a16 = v19;
  a13 = v18 - v20 - 22;
  a14 = 1182669668 - v20;
  uint64_t v21 = (*(uint64_t (**)(unint64_t **))(v17 + 8 * (v18 + 1933)))(&a11);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * ((532 * (*(_DWORD *)(v19 - 0x6BA7059072F2C1BBLL) == v16 + v18 + 115 - 602)) ^ v18)))(v21);
}

uint64_t sub_10006F788@<X0>(int a1@<W0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32)
{
  *a21 = a32 + 1;
  *(void *)(v34 - 128) = *v32 + a10;
  *(void *)(v34 - 112) = a9;
  int v35 = (a2 - 1485070320) ^ a10;
  *(_DWORD *)(v34 - 104) = a10;
  *(_DWORD *)(v34 - 100) = v35 ^ 0x51;
  *(_DWORD *)(v34 - 144) = v35;
  *(_DWORD *)(v34 - 140) = ((a2 - 1485070320) | 0x28) ^ a10;
  *(_DWORD *)(v34 - 136) = a10 + a2 + 1452949797;
  uint64_t v36 = (*(uint64_t (**)(uint64_t))(v33 + 8 * (a2 ^ (a1 + 2419))))(v34 - 144);
  return (*(uint64_t (**)(uint64_t))(v33 + 8 * *(int *)(v34 - 120)))(v36);
}

uint64_t sub_10006F820(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = 454 * (v13 ^ 0x55Bu);
  *(void *)(a11 + v12) = v15;
  return (*(uint64_t (**)(void))(v14
                              + 8
                              * (int)(((2 * (a2 & ~((v16 - 970) ^ (((v16 ^ 0xFFFFFFFFFFFFFAAALL) & v11) == 8)))) & 0xFFFFFFF7 | (8 * (((v16 + 54) ^ ~(((v16 ^ 0xFFFFFFFFFFFFFAAALL) & v11) == 8)) & 1))) ^ v16)))();
}

uint64_t sub_10006F88C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6 + 8 * (((a4 + 617 + a4 + 1704 - 880) * (v4 == v5)) ^ a4)))();
}

uint64_t sub_10006F8B8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1742 * (v1 != 0x34EDE1EE)) ^ v0)))((v1 ^ 0x34EDE1EEu) + 660284196);
}

uint64_t sub_10006F910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)(v25 - 128) = a23;
  *(_DWORD *)(v25 - 120) = v24
                         + 831981571 * ((((v25 - 128) | 0x7351214A) - ((v25 - 128) & 0x7351214A)) ^ 0xEAF0F16E)
                         + 613;
  *(void *)(v25 - 112) = a20;
  (*(void (**)(uint64_t))(v23 + 8 * (v24 ^ 0xD42)))(v25 - 128);
  *(_DWORD *)(v25 - 104) = (v24 + 50) ^ (69008221
                                       * (((v25 - 128) & 0x67520804 | ~((v25 - 128) | 0x67520804)) ^ 0x4B0FA5F1));
  *(void *)(v25 - 128) = a21;
  *(void *)(v25 - 112) = a23;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(v23 + 8 * (v24 + 1331)))(v25 - 128);
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8
                                            * (((4 * (*(_DWORD *)(v25 - 120) <= 0x74F05479u)) | (8
                                                                                               * (*(_DWORD *)(v25 - 120) <= 0x74F05479u))) ^ v24)))(v26);
}

uint64_t sub_10006FA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  *(int8x8_t *)(v7 - 7 + (a7 + a6 + v11 - v8)) = veor_s8(*(int8x8_t *)(a4- 7+ (a7 + a6 + v11 - v8)), (int8x8_t)0x7777777777777777);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10
                                                     + 8
                                                     * (((v8 - (a5 & 0xFFFFFFF8) == -8) * ((v9 - 130) ^ 0x141)) ^ v9)))(a1, a2);
}

uint64_t sub_10006FAB0(uint64_t a1)
{
  v2.n128_u64[0] = 0x7777777777777777;
  v2.n128_u64[1] = 0x7777777777777777;
  return sub_10006FAE0(a1, v1 & 0xFFFFFFE0, v2);
}

uint64_t sub_10006FAE0(uint64_t a1, int a2, int a3, int8x16_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v13 = (v11 + v9 - a6);
  int8x16_t v14 = *(int8x16_t *)(v8 + v13 - 15);
  int8x16_t v15 = *(int8x16_t *)(v8 + v13 - 31);
  uint64_t v16 = a1 + v13;
  *(int8x16_t *)(v16 - 15) = veorq_s8(v14, a4);
  *(int8x16_t *)(v16 - 31) = veorq_s8(v15, a4);
  return (*(uint64_t (**)(void))(v12 + 8 * (((a7 + a6 == a2) * a8) ^ (v10 + a3 + 1756))))();
}

void sub_10006FB30(uint64_t a1@<X8>)
{
  *(void *)(a1 - 0x61DFFFBC86B80B30) = v2;
  *(_DWORD *)(v1 + 4) = -563355418;
}

uint64_t sub_10006FB88(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  *int v24 = a3;
  unsigned int v27 = ((v25 - 53419369) & 0x32F1BFF) + a2 + (a19 ^ 0xDE6BE0E6) - (a1 & (2 * (a19 ^ 0xDE6BE0E6)));
  return (*(uint64_t (**)(void))(v26 + 8
                                    * ((15 * (((v27 << (v25 + 78)) & v21 ^ v22) + (v27 ^ v23) + v20 != v19)) ^ v25)))();
}

uint64_t sub_10006FC00@<X0>(int a1@<W1>, int a2@<W4>, int a3@<W8>)
{
  *(unsigned char *)(v5 + (a1 + a3)) = *(unsigned char *)(v4 + (a1 + a3)) ^ 0x77;
  return (*(uint64_t (**)(void))(v6 + 8 * (((a1 - 1 == v3) * (((a2 - 655) | 0x14A) ^ 0x2A0)) ^ a2)))();
}

uint64_t sub_10006FC44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  *(&a19 + a2 + a1) = 119;
  return (*(uint64_t (**)(void))(v20
                              + 8
                              * ((493 * (a2 + 1 + a1 < (unint64_t)((v19 ^ 0x1EDu) - v21) - 560893809)) ^ v19 ^ 0x1ED)))();
}

uint64_t sub_10006FC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, int a18)
{
  int v24 = (49 * (v23 ^ 0x30E) - 683984489) & (2 * v21);
  unsigned int v25 = 1224239923 * ((((2 * &a15) | 0xE12D7366) - &a15 - 1888926131) ^ 0x82254464);
  unsigned int v26 = (v21 ^ 0x6B9D9EFF) - v25;
  int v27 = v23 + 158;
  a17 = a12;
  a18 = (v23 + 158) ^ v25;
  a15 = v26 + v24 - 60622983;
  (*(void (**)(int *))(v22 + 8 * (v23 ^ 0xA8C)))(&a15);
  unsigned int v28 = 1224239923 * ((&a15 & 0x244F7FC | ~(&a15 | 0x244F7FC)) ^ 0xF08F5D4);
  a18 = (v23 + 158) ^ v28;
  a15 = (v20 ^ 0x7E66BE78) - v28 + (((v23 - 5) ^ 0xFCCD7FE4) & (2 * v20)) - 375793664;
  a17 = a12;
  (*(void (**)(int *))(v22 + 8 * (v23 ^ 0xA8C)))(&a15);
  if (v19) {
    int v29 = -281231619;
  }
  else {
    int v29 = -281231617;
  }
  int v30 = ((v19 == 0) ^ 0x78C3D77B) + v29;
  unsigned int v31 = 1224239923 * ((&a15 - 107021952 - 2 * (&a15 & 0xF99EF980)) ^ 0xB2D0457);
  a15 = v30 - v31;
  a17 = a12;
  a18 = v27 ^ v31;
  (*(void (**)(int *))(v22 + 8 * (v23 + 1660)))(&a15);
  int v32 = *v18 ^ 0x7919B7F9;
  unsigned int v33 = (2 * *v18) & 0xF2336FF2;
  unsigned int v34 = 1224239923 * ((2 * (&a15 & 0x71B1DCE0) - &a15 + 240001818) ^ 0xFCFDDECD);
  a17 = a12;
  a18 = v27 ^ v34;
  a15 = v32 - v34 + v33 - 286859649;
  uint64_t v35 = (*(uint64_t (**)(int *))(v22 + 8 * (v23 + 1660)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v22 + 8 * ((1661 * (a16 == -563355418)) ^ v23)))(v35);
}

uint64_t sub_10006FF10@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return (*(uint64_t (**)(void))(v22
                              + 8
                              * ((492
                                * (*(_DWORD *)(a21
                                             + 48
                                             * (int)(((((a1 + 1167920851) & 0xBA62E8FF) - 1127068836) ^ (a1 - 1990))
                                                   + v21)
                                             + 36) != v21)) ^ (a1 - 1081))))();
}

uint64_t sub_10006FF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((882 * (v7 + 1 != v8 + 32)) ^ a6)))();
}

void sub_10007004C()
{
}

void sub_100070200()
{
}

uint64_t sub_100070208(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6
                                                     + 8
                                                     * (((v4 - v5 < (((a4 - 668) | 0x80u) ^ 0x295uLL))
                                                       * ((a4 - 66) ^ 0x4B4)) ^ a4)))(a1, a1);
}

uint64_t sub_100070248()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v1 + 1174) | 6) - 1761) * ((v0 ^ 0x11u) > 7)) ^ v1)))();
}

uint64_t sub_10007027C(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  HIDWORD(v19) = a1 ^ v18;
  LODWORD(v19) = a1 ^ v13;
  int v20 = (a4 ^ v14)
      + (v19 >> 27)
      + ((v9 ^ 0xA7BC5E3A) & (v8 ^ v14) | (((a6 - 911) | 0x391) ^ (v14 + 141) ^ v9) & (v7 ^ v14))
      + (*(_DWORD *)(v17 + 4 * (v6 + v15)) ^ v12);
  return (*(uint64_t (**)(void))(v11 + 8 * (a6 ^ (2 * (v6 + 1 == v16 + 4)))))(v20
                                                                                          - ((2 * v20 - 1257966798) & v10) - 1295639714);
}

uint64_t sub_100070350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v27 = 831981571 * ((((v26 - 160) | 0x9561A3CC) - ((v26 - 160) & 0x9561A3CC)) ^ 0xCC073E8);
  *(void *)(v26 - 152) = a25;
  *(_DWORD *)(v26 - 160) = v27 ^ a11;
  *(_DWORD *)(v26 - 156) = v27 + a7 + 1190;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v25 + 8 * (a7 + 2425)))(v26 - 160);
  uint64_t v29 = STACK[0x2D0] & 0x3F;
  *((unsigned char *)&STACK[0x28C] + (v29 ^ 0x2E)) = -9;
  return (*(uint64_t (**)(uint64_t))(v25 + 8 * ((638 * ((v29 ^ 0x2E) > 0x37)) ^ a7)))(v28);
}

uint64_t sub_100070448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((((v6 - 1784) ^ v6 ^ 0xD3B ^ 0x42F) * (v5 == a5)) ^ v6)))();
}

uint64_t sub_100070480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v20 = 3804331 * ((((2 * (v19 - 136)) | 0x38F3BF76) - (v19 - 136) - 477749179) ^ 0x62ACFA4D);
  *(void *)(v19 - 136) = v18;
  *(_DWORD *)(v19 - 128) = v20 + a12 + 884;
  *(_DWORD *)(v19 - 124) = 183363314 - v20;
  (*(void (**)(uint64_t))(v16 + 8 * (a12 + 1175)))(v19 - 136);
  *(void *)(v19 - 120) = a14;
  *(void *)(v19 - 136) = a15;
  *(_DWORD *)(v19 - 128) = a12
                         + 831981571
                         * ((-856587052 - ((v19 - 136) | 0xCCF184D4) + ((v19 - 136) | 0x330E7B2B)) ^ 0xAAAFAB0F)
                         + 404;
  (*(void (**)(uint64_t))(v16 + 8 * (a12 ^ 0xD93)))(v19 - 136);
  *(void *)(v19 - 120) = a15;
  *(void *)(v19 - 136) = v18;
  *(_DWORD *)(v19 - 112) = (a12 - 159) ^ (((((v19 - 136) | 0x2BB75D3D) + (~(v19 - 136) | 0xD448A2C2)) ^ 0xF8150F36) * v17);
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v16 + 8 * (a12 + 1122)))(v19 - 136);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * (((53 * (a12 ^ 0x4EAu) + v15 + *(_DWORD *)(v19 - 128) < 0xF6DE1DC8)
                                              * (5 * (a12 ^ 0x490) - 28)) ^ a12)))(v21);
}

void sub_100070608()
{
}

void sub_100070628()
{
}

uint64_t sub_100070634()
{
  unsigned int v5 = *(_DWORD *)(v2 + 4 * (v0 - 1));
  *(_DWORD *)(v2 + 4 * v0) = ((1566083941 * (v5 ^ (v5 >> 30))) ^ *(_DWORD *)(v2 + 4 * v0)) - v0;
  int v6 = 241568881 * ((~((v4 - 152) | 0x88B80944) + ((v4 - 152) & 0x88B80944)) ^ 0xA156F2F9);
  *(_DWORD *)(v4 - 148) = (v1 + 1240661931) ^ v6;
  *(_DWORD *)(v4 - 144) = v6 + v1 - 1501686873;
  int v7 = (v1 + 1240661977) ^ v6;
  *(_DWORD *)(v4 - 112) = v6;
  *(_DWORD *)(v4 - 108) = v7 ^ 0x18;
  *(_DWORD *)(v4 - 152) = v7;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v1 + 1400)))(v4 - 152);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * *(int *)(v4 - 128)))(v8);
}

void sub_100070724()
{
}

void sub_100070794(uint64_t a1@<X8>)
{
  int v6 = 460628867 * ((2 * ((v5 - 144) & 0xE505430) - (v5 - 144) - 240145459) ^ 0xBD3929B0);
  *(_DWORD *)(v5 - 144) = v6 + v1 - 68 + 877;
  *(_DWORD *)(v5 - 136) = (((v1 - 68) ^ 0xE4CCB91) + v2) ^ v6;
  *(void *)(v5 - 128) = a1;
  *(void *)(v5 - 120) = v4;
  (*(void (**)(uint64_t))(v3 + 8 * ((v1 - 68) ^ 0xBDE)))(v5 - 144);
  JUMPOUT(0x10005EDE4);
}

uint64_t sub_100070820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(uint64_t, void))(v8
                                                    + 8
                                                    * (int)(((((a6 + 2122743188) & 0x81797F5F ^ (v6 + 806))
                                                            + ((a6 - 268437963) & 0xFA5B85F2))
                                                           * (v7 < 0x20)) ^ a6)))(a1, 0);
}

uint64_t sub_10007087C@<X0>(int a1@<W8>)
{
  *(void *)(v1 - 0x5267DA57ABB8ED88) = (*v3 + a1) + *(void *)(v4 - 0x6BA7059072F2C1D3) + 8;
  return (*(uint64_t (**)(void))(v7 + 8 * ((1910 * (*v6 == v5)) ^ (122 * v2))))();
}

uint64_t sub_1000708E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(_DWORD *)(v17 - 128) = (v15 + 323) ^ (268847287
                                        * ((((v17 - 128) | 0xD959A92C) - ((v17 - 128) & 0xD959A92C)) ^ 0x26F3B804));
  *(void *)(v17 - 120) = a13;
  *(void *)(v17 - 112) = v16;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v15 + 1622)))(v17 - 128);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * ((((v15 + 1601417331) & 0x208C4EFB ^ 0x51C ^ (3 * (v15 ^ 0x3D5)))
                                              * (v13 == 670169886)) ^ v15)))(v18);
}

uint64_t sub_1000709A0@<X0>(uint64_t a1@<X8>)
{
  int v6 = v1 + v2;
  int v7 = v2 + 1;
  *(_DWORD *)(*(void *)(v3 - 0x5E8E72AB319E4281) + 4 * (v6 + ((v5 + 192) | 0x2A4) - 1700)) = v4;
  *(_DWORD *)(v3 - 0x5E8E72AB319E4285) = v7;
  if (v1 + v7 + 1 >= 0) {
    int v8 = v1 + v7 + 1;
  }
  else {
    int v8 = ~(v1 + v7);
  }
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)(((((v8 ^ 0x7FFFDDC7)
                                       - 388563074
                                       + ((v8 << ((((v5 - 64) | 0xA4) + 54) ^ 0xDA)) & 0xFFFFBB8E)
                                       + v1) >> 31)
                                     * ((81 * ((((v5 + 192) | 0x2A4) + 54) ^ 0x6DD)) ^ 0x1DE)) ^ (((v5 + 192) | 0x2A4)
                                                                                                + 54))))();
}

uint64_t sub_100070A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v5
                                                                      + 8
                                                                      * (((v4 < ((v3 - 841) ^ 0x23Eu))
                                                                        * ((v3 ^ 0x157) - 802)) ^ v3)))(a1, a2, a3, 0);
}

uint64_t sub_100070AB8()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((((v1 ^ (v5 - 762)) - 1367514788) ^ v0) == v2 - 448110252) * ((v1 - v4) ^ (v5 + 269))) ^ v1)))();
}

void sub_100070B0C(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x5F548590D8AA63B5) = v1 + 1;
  JUMPOUT(0x100061828);
}

uint64_t sub_100070B28@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v6 + (a1 ^ v3)) = a2;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v5 == 0) * v4) ^ v2)))();
}

uint64_t sub_100070B54(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  unsigned int v9 = ((((a5 - 578921499) & 0x2281A7D7) + 93 * (a5 ^ 0x39C) + 972920467) & (2 * (a3 + v8 + (a2 ^ v6) + 8)))
     + ((a3 + v8 + (a2 ^ v6) + 8) ^ 0x9CFECFDD)
     + 1338508772;
  unsigned int v10 = v7 - 1636352564;
  int v11 = (v10 < 0xECC6D5C1) ^ (v9 < 0xECC6D5C1);
  BOOL v12 = v9 > v10;
  if (v11) {
    BOOL v12 = v9 < 0xECC6D5C1;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * ((113 * v12) ^ a5)))();
}

uint64_t sub_100070C08@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * (((v4 == (v5 ^ v3) + v2) * ((v5 ^ a1) - 15)) ^ v5)))();
}

void sub_100070C34()
{
  *(_DWORD *)(v1 + 16) = v0;
}

uint64_t sub_100070C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  return (*(uint64_t (**)(void))(v18
                              + 8
                              * ((229
                                * ((((((v17 - 1704253530) & 0xFFFFFFFC) - a16 == -1704253533) ^ (v16 - 57)) ^ (35 * (v16 ^ 0x7D) + 1)) & 1)) ^ v16)))();
}

uint64_t sub_100070CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v15 - 128) = v14;
  *(_DWORD *)(v15 - 120) = v13
                         + 831981571
                         * ((-855703707 - ((v15 - 128) | 0xCCFEFF65) + ((v15 - 128) | 0x3301009A)) ^ 0xAAA0D0BE)
                         + 1292;
  *(void *)(v15 - 112) = a12;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(v12 + 8 * (v13 + 2025)))(v15 - 128);
  return sub_100070D44(v16);
}

uint64_t sub_100070D80(int a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((a1 - 1192003318) & 0x470C8B55 ^ (a1 - 1419146662) & 0x5496779F ^ 0xF96) * (v1 == v2)) ^ a1)))();
}

uint64_t sub_100070DD8(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((((122 * (((a2 - 503284277) | 0x85B0080) ^ (v4 + 1488))) ^ 0x35B)
                                * ((v3 + v2 - 1027059324) > 7)) ^ a2)))();
}

void sub_100070E58()
{
}

void sub_100070F38()
{
}

void sub_100070F48(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + v3) = v2;
  JUMPOUT(0x10004657CLL);
}

uint64_t sub_100070F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  int v12 = 13 * (v9 ^ 0x494) + (a9 ^ v10) - ((2 * (a9 ^ v10)) & 0x2C452384) + 371362431;
  return (*(uint64_t (**)(void))(v11
                              + 8
                              * ((86
                                * (((2 * v12) & 0x7A6F5CF8 ^ 0x28450080) + (v12 ^ 0x2B153FBE) - 86016540 == 941042784)) ^ v9)))();
}

void sub_100070FE4()
{
}

uint64_t sub_100070FF4@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + (a1 + v6)) = *(unsigned char *)(v5 + (a1 + v6));
  return (*(uint64_t (**)(void))(v3
                                           + 8
                                           * ((217 * (((a2 - 89 - v7) ^ (a1 - 1 == v4)) & 1)) ^ (a2 - 89))))(0);
}

uint64_t sub_100071038@<X0>(int a1@<W8>)
{
  unint64_t v4 = v1 + v2;
  if (v4 <= 0x38) {
    unint64_t v4 = 56;
  }
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((246
                                * (v4 - v1 + ((a1 - 817441824) ^ 0xCF46D028) + 1574143520 < (unint64_t)((a1 - 817441824) & 0x30B92FFF)
                                                                                          - 1360)) ^ a1)))();
}

uint64_t sub_1000710AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return (*(uint64_t (**)(void))(v29
                              + 8
                              * ((((*(_DWORD *)(a28 + 48 * v28 + 36) + 1020415285) < 0x80000003)
                                * (v30 + 1820)) ^ v30)))();
}

uint64_t sub_1000710FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (int)(((((v6 - 75778741) & 0xEEDFCED8 ^ (v7 + 2202)) + 11 * (v6 ^ 0x3F)) * (v5 == a5)) | v6)))();
}

uint64_t sub_100071148(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  (*(void (**)(uint64_t, uint64_t))(v22 + 8 * (a1 ^ (a1 + 2186))))(a13, 2965982036);
  uint64_t v25 = (*(uint64_t (**)(void))(v22 + 8 * (v23 + 1340333714)))();
  *int v24 = v25;
  return sub_1000711BC(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_1000711BC@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(v8 + 4 * a2) = a2 + (a1 ^ (a1 >> 30)) * v2;
  return (*(uint64_t (**)(void))(v7 + 8 * (((a2 < 0x26F) * ((v6 + v3) & v4 ^ v5)) ^ v6)))();
}

uint64_t sub_1000711F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v28 = v24 - 2147347870;
  if ((v24 - 2147347870) <= 0x40) {
    int v28 = 64;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * ((480 * (2147346993 - v25 - v26 + (HIDWORD(a17) ^ 0x18Bu) + v28 < ((HIDWORD(a17) + 748) ^ 0x5DDu))) ^ HIDWORD(a17))))(-v26, a2, a3, 3263642160, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t sub_100071290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v23 - 112) = a19;
  *(void *)(v23 - 128) = v22;
  *(_DWORD *)(v23 - 104) = (v19 + 583) ^ (((((v23 - 128) ^ 0x49DE5C78)
                                          + 368649495
                                          - 2 * (((v23 - 128) ^ 0x49DE5C78) & 0x15F92517)) ^ 0x8F852B65)
                                        * v21);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(v20 + 8 * (v19 ^ 0xB58)))(v23 - 128);
  return (*(uint64_t (**)(uint64_t))(v20
                                            + 8
                                            * ((((*(_DWORD *)(v23 - 120) - 1961907322) < 0xCDFB732B)
                                              * (((v19 + 520) ^ 0x5EA) + 2343)) ^ v19)))(v24);
}

uint64_t sub_100071358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_DWORD *)(*(void *)(a7 - 0x5E8E72AB319E4281) + 4 * (v11 + v9)) = v7
                                                                         - ((2 * v7 - 1595135426) & v10)
                                                                         + ((98 * (v8 ^ 0x16A)) ^ 0xB558C648);
  return sub_1000713AC();
}

void sub_1000713AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_DWORD *)(a7 - 0x5E8E72AB319E4285) = (((v8 + v7) * (v9 - 1694193230)) ^ 0x6CFEFFDD)
                                         - 69739160
                                         + ((2 * (v8 + v7) * (v9 - 1694193230)) & 0xD9FDFFBA);
}

uint64_t sub_10007143C@<X0>(_DWORD *a1@<X4>, int a2@<W8>)
{
  int v4 = (((a2 - 1683) | 0x441) ^ 0x2521B281) + *a1;
  BOOL v5 = v2 + 622966336 < ((a2 - 1541060690) & 0x5BDAB5FF ^ 0xDF89744);
  int v6 = v5 ^ (v4 < 234394501);
  BOOL v7 = v2 + 622966336 > v4;
  if (!v6) {
    BOOL v5 = v7;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((4032 * v5) ^ a2)))();
}

void sub_1000714C8()
{
}

uint64_t sub_1000714D4(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a10 + v11 + ((v12 - 613) | a2)) = v14;
  return (*(uint64_t (**)(void))(v13 + 8 * ((((v10 & 0x38) == 8) * a3) ^ v12)))();
}

uint64_t sub_100071518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v37 = (*(uint64_t (**)(uint64_t, void))(v36 + 8 * (v35 ^ 0xB07)))(a23, 0);
  uint64_t v38 = *(void *)(a35 + 16);
  *(_DWORD *)(a35 + 4) = *(_DWORD *)(a35 + 24);
  *(_DWORD *)(a35 + 8) = v38;
  uint64_t v39 = 8 * (v35 ^ 0xB06);
  *(_DWORD *)(a35 + 12) = (*(uint64_t (**)(uint64_t))(v36 + v39))(v37);
  uint64_t v40 = (*(uint64_t (**)(void))(v36 + v39))();
  *(_DWORD *)a35 = v40;
  LODWORD(a29) = 570;
  return sub_100071628(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29);
}

uint64_t sub_100071628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  *(_DWORD *)(v40 + 4 * (v36 + 1 + v39)) = *(_DWORD *)(a35 + 4 * (v38 - 1855926951))
                                                         + v38
                                                         - 1855926951
                                                         + ((1664525
                                                           * (*(_DWORD *)(v40 + 4 * (v36 + v39)) ^ (*(_DWORD *)(v40 + 4 * (v36 + v39)) >> 30))) ^ *(_DWORD *)(v40 + 4 * (v36 + 1 + v39)));
  *(void *)(v42 - 120) = a32;
  *(_DWORD *)(v42 - 128) = ((v41 + 2034911559) ^ 0x22) - v35;
  *(_DWORD *)(v42 - 108) = v41 + 2034911559 - v35;
  *(_DWORD *)(v42 - 104) = v35 + v41 + 764300735;
  *(_DWORD *)(v42 - 112) = ((v41 + 2034911559) ^ 0x4F) + v35;
  *(void *)(v42 - 136) = (v36 - 12661208) + v35;
  *(_DWORD *)(v42 - 140) = v35 ^ 1;
  uint64_t v43 = (*(uint64_t (**)(uint64_t))(v37 + 8 * (v41 - 1340329268)))(v42 - 144);
  return (*(uint64_t (**)(uint64_t))(v37 + 8 * *(int *)(v42 - 144)))(v43);
}

uint64_t sub_10007170C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((1018 * (a5 + 1 != v7 + 48)) ^ a6)))();
}

uint64_t sub_1000717DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(void))(v12
                              + 8 * (((a11 == ((v13 - 1345326691) & 0x50300DEF ^ (v11 + 31))) * (v13 ^ 0x27B)) ^ v13)))();
}

void sub_100071824()
{
}

uint64_t sub_10007182C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  return (*(uint64_t (**)(void))(v10
                              + 8 * ((216 * (a1 - v11 - 435081137 != (((a10 ^ 0x858) + 1061) ^ 0xEFCBA3BC))) ^ a10)))();
}

uint64_t sub_1000718B8@<X0>(int a1@<W6>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((a1 + ((a2 + 1224834686) | 0x2667203) + 576) * (v3 == v2)) ^ a2)))();
}

uint64_t sub_1000718F4(uint64_t a1, int a2)
{
  *(_DWORD *)(v5 + 4 * (v2 + 1 + v4)) = 1629332737
                                                      - v2
                                                      + ((1566083941
                                                        * (*(_DWORD *)(v5 + 4 * (v2 + v4)) ^ (*(_DWORD *)(v5 + 4 * (v2 + v4)) >> 30))) ^ *(_DWORD *)(v5 + 4 * (v2 + 1 + v4)));
  unint64_t v8 = 69008221
     * ((((v7 - 144) | 0x97377B8E1D0D2CA1) - (v7 - 144) + ((v7 - 144) & 0x68C88471E2F2D358)) ^ 0xC5AB3D6DCEAF7EABLL);
  *(void *)(v7 - 120) = 3617124396u - v8;
  *(void *)(v7 - 136) = (v2 + 1987791660) + v8;
  int v9 = v6 - 53885601 - v8;
  *(_DWORD *)(v7 - 128) = v9 - 2;
  *(_DWORD *)(v7 - 140) = v8 | 1;
  *(_DWORD *)(v7 - 112) = ((v6 - 53885601) ^ 0x5D) + v8;
  *(_DWORD *)(v7 - 108) = v9;
  *(_DWORD *)(v7 - 104) = v8 + v6 + 764300735;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v6 ^ (a2 + 2381))))(v7 - 144);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * *(int *)(v7 - 144)))(v10);
}

uint64_t sub_100071A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, uint64_t a16)
{
  a15 = ((v17 ^ 0x1A6) - 612) ^ (69008221
                               * ((((2 * &a15) | 0x865F37CA) - &a15 + 1020290075) ^ 0x108DC9EF));
  a16 = a13;
  uint64_t v18 = (*(uint64_t (**)(unsigned int *))(v16 + 8 * (v17 ^ 0xBA0)))(&a15);
  return sub_100078F2C(v18);
}

uint64_t sub_100071A30@<X0>(uint64_t a1@<X2>, unsigned int a2@<W8>)
{
  LOBYTE(STACK[0x290]) = *(unsigned char *)(a1 + a2);
  return (*(uint64_t (**)(void))(v5 + 8 * ((1298 * (v4 + v3 + 1150 < 14 * (v2 ^ 0x341) - 66)) ^ v2)))();
}

uint64_t sub_100071A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v14 = (unsigned __int8 *)(a5 + a1 + v12);
  int v15 = *v14 ^ v13;
  LODWORD(v14) = ((v14[2] ^ v13) << 16) | ((v14[3] ^ 0x77777777) << 24) | v15 | ((*(unsigned __int8 *)(a5 + ((v8 - 1241) ^ (unint64_t)(v12 + 337)) + a1) ^ v13) << 8);
  *(_DWORD *)(v9 + ((a1 + v12) & 0xFFFFFFFFFFFFFFFCLL)) = v14
                                                        + v10
                                                        - 2 * (v14 & (a8 + 16) ^ v15 & 0x10);
  return (*(uint64_t (**)(void))(v11 + 8 * ((7 * ((unint64_t)(a1 + 4 + v12) < 0x40)) ^ v8)))();
}

uint64_t sub_100071B04@<X0>(int a1@<W5>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((((v3 - 1234009425) & 0x498D7FBF ^ (a2 + 2537)) + ((v3 + 1728052844) | 0xC24400))
                                * (v2 == a1)) ^ v3)))();
}

uint64_t sub_100071B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_100046650(a1, a2, a3, a4, a5, a6, a7, a26, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_100071B6C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(int8x8_t *)(v9 - 7 + (v7 + v8 + v11 - a4)) = veor_s8(*(int8x8_t *)(v5- 7+ (v7 + v8 + v11 - a4)), (int8x8_t)0x7777777777777777);
  return (*(uint64_t (**)(void))(v10 + 8 * (((a4 - (v6 & 0xFFFFFFF8) == -8) * (((v4 + 385) | 0x200) - 1612)) | v4)))();
}

uint64_t sub_100071BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a10 + v11) = v14;
  return (*(uint64_t (**)(void))(v13
                              + 8
                              * ((((((v12 - 130) - 139) & v10) != 8) * ((v12 + 361) ^ 0x3E8)) ^ (v12 - 130))))();
}

uint64_t sub_100071C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  unsigned int v19 = 1224239923
      * ((-1424351604 - (&a13 | 0xAB1A1E8C) + (&a13 | 0x54E5E173)) ^ 0xA6561CA4);
  a15 = a9;
  a16 = v19 ^ 0x3B7;
  a13 = ((2 * v16) & 0xD1DB6FF2) - v19 + (v16 ^ 0xE8EDB7F9) + 2131943039;
  uint64_t v20 = (*(uint64_t (**)(unsigned int *))(v18 + 19624))(&a13);
  return (*(uint64_t (**)(uint64_t))(v18 + 8 * ((3677 * (a14 == v17)) ^ 0x6CAu)))(v20);
}

uint64_t sub_100071D00()
{
  return (*(uint64_t (**)(void))(v0
                              + 8 * ((786 * (((v1 - 1185727500) & 0x46ACC393 ^ 0xA8576421) + v2 != -53157173)) ^ v1)))();
}

void sub_100071D58()
{
}

uint64_t sub_100071DD0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((((2 * v0) ^ 0x4B4) - 967) | 0x98) ^ 0xEF)
                                * (*(void *)(v1 + 40) == 0xD1C4B9DDB1E97A5)) ^ v0)))();
}

uint64_t sub_100071E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5
                                                              + 8
                                                              * (((((v4 - 506) & v3) == 0) * (3 * (v4 ^ 0xBF) - 2082)) ^ v4)))(a1, a2, a3);
}

uint64_t sub_100071FA4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(unsigned char *)(a6 + (v9 + 69)) = *(unsigned char *)(a3
                                                      + (((v6 - 766) + 4294967225) & (v8 + 2998949688)));
  return (*(uint64_t (**)(void))(v10 + 8 * (v6 ^ (3029 * ((a1 + v7 + 1152) < 4)))))();
}

uint64_t sub_100071FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((113 * (a3 + 1 == v4 + 40)) ^ v3)))();
}

void sub_1000720B8(int a1@<W8>)
{
  if (*v2 + 388571835 >= v1) {
    int v3 = a1 - 88;
  }
  else {
    int v3 = -271863906 - a1;
  }
  _DWORD *v2 = *v2 - 2011551651 + v3;
  JUMPOUT(0x100072148);
}

void sub_100072198()
{
}

uint64_t sub_10007220C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v11 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v12 = *a1;
  *a5 = v7 - 1043703471;
  *(_DWORD *)(v12 - 0x6F85854725FFE88ELL) = v6;
  *(_DWORD *)(v11 - 0x24E69FC94968431CLL) = a3;
  *(void *)(v10 - 0x5E9044A69B37973) = v5 + (((v8 - 447) | 0x24A) ^ 0xEFA3E8CB) + v9;
  return sub_1000324C0((uint64_t)a1, a2, a3, a4, -563355418);
}

uint64_t sub_10007228C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 48) = *(void *)(a2 + 8);
  return 0;
}

uint64_t sub_1000722A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v7 + 8
                                   * ((((v6 ^ 0x5E9) + ((v6 - 1007294770) & 0x3C0A16F3) + 2285) * (v5 == a5)) ^ v6)))();
}

uint64_t sub_1000722E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4
                                                     + 8 * (((v3 - 618 + 22 * (v3 ^ 0x723) - 1932) * (v1 == v2)) ^ v3)))(a1, -653949007);
}

uint64_t sub_100072328(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((14 * ((((unint64_t)(v6 - v4 + 4) < 0x20) ^ (a4 - 36)) & 1)) ^ a4)))();
}

uint64_t sub_10007236C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 8);
  memset((void *)(v5 - 204), 119, 16);
  int v8 = ((v5 - 168) ^ 0x94AD4959) * a3;
  int v9 = (void *)(v5 - 168);
  void v9[5] = v5 - 204;
  *int v9 = v6;
  _DWORD v9[2] = v5 - 188;
  v9[3] = v7;
  *(_DWORD *)(v5 - 132) = (v3 + 2033) ^ v8;
  *(_DWORD *)(v5 - 160) = v8 + 396484252;
  uint64_t result = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v3 ^ 0x9D4)))(v5 - 168);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(v5 - 136);
  return result;
}

uint64_t sub_100072430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  return sub_100059FA4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           v26);
}

void sub_100072444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v9 = v6 || a5 == 0 || a6 == 0;
  __asm { BRAA            X8, X17 }
}

void sub_1000724C4()
{
}

uint64_t sub_1000724CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((3926 * (v6 + 1 == v8 + 16)) ^ a6)))();
}

uint64_t sub_1000725AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21)
{
  unsigned int v28 = v21 + 537;
  int v29 = 1224239923 * ((v26 & 0x2790CF84 | ~(v26 | 0x2790CF84)) ^ 0x2ADCCDAC);
  LODWORD(a21) = (v28 + 41) ^ v29;
  LODWORD(a19) = (v25 ^ 0x69BEB7FD) + ((2 * v25) & 0xD37D6FFA) - v29 - 29237637;
  a20 = a17;
  (*(void (**)(unint64_t *))(v27 + 8 * (v28 ^ 0xA1B)))(&a19);
  int v30 = 1224239923 * ((((2 * v26) | 0x97CE40C2) - v26 + 874045343) ^ 0x3954DDB6);
  a20 = a17;
  LODWORD(a19) = (v24 ^ 0xEDD8B7FF) - v30 + ((((v28 - 910) | 0x175) - 609128823) & (2 * v24)) + 2049433209;
  LODWORD(a21) = (v28 + 41) ^ v30;
  (*(void (**)(unint64_t *))(v27 + 8 * (v28 ^ 0xA1B)))(&a19);
  unint64_t v31 = 831981571 * ((v26 - 2 * (v26 & 0x26717E1E77E9F691) + 0x26717E1E77E9F691) ^ 0xF7813F5EEE4826B5);
  LODWORD(a20) = (v28 + 149) ^ v31;
  a21 = a17;
  a19 = v31 ^ (v23 - ((2 * v23) & 0xD8C7C8F144A3A274) + 0x6C63E478A251D13ALL);
  (*(void (**)(unint64_t *))(v27 + 8 * (v28 ^ 0xA27)))(&a19);
  unint64_t v32 = 831981571 * ((-2 - ((~v26 | 0x54A2F2BB4CFCE4EBLL) + (v26 | 0xAB5D0D44B3031B14))) ^ 0x8552B3FBD55D34CFLL);
  a21 = a17;
  a19 = v32 ^ (v22 - ((2 * v22) & 0xD8C7C8F144A3A274) + 0x6C63E478A251D13ALL);
  LODWORD(a20) = (v28 + 149) ^ v32;
  uint64_t v33 = (*(uint64_t (**)(unint64_t *))(v27 + 8 * (v28 ^ 0xA27)))(&a19);
  return (*(uint64_t (**)(uint64_t))(v27 + 8 * ((1584 * (HIDWORD(a20) == -563355418)) ^ v28)))(v33);
}

uint64_t sub_100072834(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(v6 + (v4 ^ v7) + a1) = v9;
  BOOL v10 = v5 == a1;
  uint64_t v11 = a1 + 8;
  int v12 = !v10;
  return (*(uint64_t (**)(uint64_t))(v8 + 8 * ((v12 * a3) ^ v3)))(v11);
}

uint64_t sub_100072860@<X0>(uint64_t a1@<X3>, unsigned int a2@<W8>)
{
  unsigned int v7 = *(_DWORD *)((char *)&STACK[0x28C] + ((v5 + v2) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + (v5 + v2 + 1)) = (BYTE2(v7) ^ 0x43) - ((2 * (BYTE2(v7) ^ 0x43)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v5 + v2)) = (HIBYTE(v7) ^ 0x58)
                                           - (((HIBYTE(v7) ^ 0x58) << (((v3 + 118) & 0x3D) - 56)) & 0xEE)
                                           + 119;
  *(unsigned char *)(a1 + (v5 + v2 + 2)) = (BYTE1(v7) ^ 0xA1) - ((2 * (BYTE1(v7) ^ 0xA1)) & 0xEF) + 119;
  *(unsigned char *)(a1 + (v5 + v2 + 3)) = v7 ^ 0xB2;
  unsigned int v8 = LODWORD(STACK[0x2E8]) - 2094768670;
  BOOL v9 = v8 < a2;
  BOOL v10 = v5 + 1796450391 < v8;
  if (v5 + 1796450391 < a2 != v9) {
    BOOL v10 = v9;
  }
  return (*(uint64_t (**)(void))(v6 + 8 * ((!v10 * v4) ^ v3)))();
}

uint64_t sub_10007295C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v20 = 460628867 * ((v18 - 644137939 - 2 * ((v18 - 152) & 0xD99B3CC5)) ^ 0x950DBEB8);
  *(_DWORD *)(v18 - 124) = v14 - v20 + 232;
  *(void *)(v18 - 120) = a14;
  *(void *)(v18 - 112) = a12;
  *(void *)(v18 - 136) = v19;
  *(void *)(v18 - 104) = a11;
  *(_DWORD *)(v18 - 144) = v20 + v17 - 1573481390;
  *(void *)(v18 - 152) = a13;
  (*(void (**)(uint64_t))(v16 + 8 * (v14 ^ 0x8E7u)))(v18 - 152);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16
                                                     + 8
                                                     * (int)(((*(_DWORD *)(v18 - 128) == v15)
                                                            * (((v14 + 702) | 0x314) ^ 0xFD0BA4AA ^ (v14 - 15733427) & 0xFDFBBBFB)) ^ v14)))(1127068362, 1074653292);
}

uint64_t sub_100072A7C(double a1)
{
  *(double *)(v2 + v4) = a1;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v3 != v4) * v5) ^ v1)))();
}

void sub_100072AA0()
{
}

uint64_t sub_100072AF8(int a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  BOOL v37 = v25 > v28;
  int v38 = a1 + a4;
  int v39 = a1 + 1;
  uint64_t v40 = 4 * (v39 + a4);
  unint64_t v41 = (*(_DWORD *)(a24 + v40) ^ v24) + (a2 ^ HIDWORD(a6));
  unint64_t v42 = (v36 >> ((v32 + 68) ^ v34))
      + v31 * (unint64_t)(*(_DWORD *)(*v33 + v40) ^ v24)
      + ((v41 + v27 - (v30 & (2 * v41))) ^ a3);
  *(_DWORD *)(a24 + 4 * v38) = v42 + v24 - (v26 & (2 * v42));
  if (v37 == v39 + 319880890 < a8 + 1116) {
    BOOL v37 = v39 + 319880890 < v35;
  }
  return (*(uint64_t (**)(void))(v29 + 8 * (v37 ^ v32 ^ 1)))();
}

uint64_t sub_100072BA8()
{
  return sub_100072BB0();
}

uint64_t sub_100072BB0(uint64_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int v53 = BYTE4(a37) ^ 0x89;
  unint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 8 * v46);
  HIDWORD(a18) = BYTE4(a37) ^ 0xFFFFFF89;
  HIDWORD(v72) = a36;
  LODWORD(v72) = HIDWORD(a34);
  *(void *)((char *)&v72 + 4) = a35;
  if (v53 == 2)
  {
    int8x16x4_t v75 = vld4q_s8(v47);
    HIDWORD(a16) = HIDWORD(a36);
    uint8x16_t v61 = (uint8x16_t)veorq_s8(v75.val[1], a2);
    _Q22 = vmovl_u8(*(uint8x8_t *)v61.i8);
    _Q21 = vmovl_high_u8(v61);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    int v66 = (_DWORD *)(v45 + 4 * (v48 + 16 + v51));
    int v67 = *(v66 - 8) ^ *(v66 - 3);
    unsigned int v68 = v67 + v49 - ((v67 << (v52 - 25)) & 0xBCD7C1CC);
    int v69 = *(v66 - 16) ^ *(v66 - 14);
    HIDWORD(v70) = v69 ^ 0x5E6BE0E6 ^ v68;
    LODWORD(v70) = v69 ^ ~v68;
    *int v66 = (v70 >> 31) + v49 - ((2 * (v70 >> 31)) & 0xBCD7C1CC);
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 8 * ((84 * (v48 + 17 == v48 + 80)) ^ (v52 + 560892780))))(a1, HIDWORD(a36), HIDWORD(v70), 732163552, a6, a35, a8, HIDWORD(a34), a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, v72,
             *((void *)&v72 + 1),
             v73,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45);
  }
  else
  {
    if (v53 == 1)
    {
      int8x16x4_t v74 = vld4q_s8(v47);
      uint8x16_t v54 = (uint8x16_t)veorq_s8(v74.val[2], a2);
      _Q26 = vmovl_high_u8(v54);
      _Q25 = vmovl_u8(*(uint8x8_t *)v54.i8);
      __asm
      {
        SHLL2           V25.4S, V25.8H, #0x10
        SHLL2           V26.4S, V26.8H, #0x10
      }
      JUMPOUT(0x100072D34);
    }
    return sub_1000661D4(a1, HIDWORD(a34), a36, a5, a6, a35, a8, HIDWORD(a34), a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, v72,
             *((uint64_t *)&v72 + 1),
             v73,
             a23,
             a24,
             a25,
             a26,
             a27);
  }
}

uint64_t sub_100073024(uint64_t result)
{
  if ((v2 + v1) >= 0x7FFFFFFF) {
    int v6 = v5 - v4 - 777144156;
  }
  else {
    int v6 = v4;
  }
  int *v3 = v6;
  *(_DWORD *)(result + 24) = 1569142212;
  return result;
}

uint64_t sub_10007306C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  *(unsigned char *)(v16 + (a8 + v13)) = *(unsigned char *)(v9 + ((a8 + v13) & 0xFLL)) ^ *(unsigned char *)(v8
                                                                                                + (a8 + v13)) ^ *(unsigned char *)(v11 + (((_BYTE)a8 + (_BYTE)v13) & 0xF)) ^ *(unsigned char *)((((_BYTE)a8 + (_BYTE)v13) & 0xF) + v10 + 1) ^ (((a8 + v13) & 0xF) * ((v14 - 74) ^ 0xDB));
  return (*(uint64_t (**)(void))(v15 + 8 * ((38 * (a8 - 1 == v12)) ^ (v14 + 688))))();
}

uint64_t sub_1000730D4@<X0>(int a1@<W8>)
{
  BOOL v5 = (*(_DWORD *)(v2 + 44) ^ a1) == ((v1 + 302291833) & 0xEDFB5E7B ^ 0x13097B23) || *(_OWORD *)(v2 + 48) == 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((90 * (((v1 + 1) ^ v5) & 1)) ^ v1)))();
}

uint64_t sub_100073140()
{
  *int v1 = v1[623];
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v0 - 1021) | 0x77) ^ 0x22A) * (v3 == 1)) | (v0 + 29))))();
}

void sub_100073184()
{
}

void sub_100073190()
{
}

void sub_100073198()
{
}

uint64_t sub_1000731A4()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((2324
                                * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
                                 + ((*(unsigned __int8 *)(v2 + 2) - 72) ^ (v0 + (v3 ^ 0x2A1) - 828)) == v0)) ^ v3)))();
}

uint64_t sub_1000731E8(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(v6 + (v3 | a2)) = v8;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v5 == 0) * a3) ^ v4)))();
}

void sub_100073218(_DWORD *a1@<X8>)
{
  uint64_t v4 = *v2;
  *(void *)(v2[3] - 0x7073A7D8AAAECA15) = v1;
  *(_DWORD *)(v4 - 0x2325945160E62A17) = v3;
  *((_DWORD *)v2 + 3) = *a1;
}

void sub_100073284()
{
}

uint64_t sub_10007328C()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((95
                                * ((((((v2 + 98730128) & 0xFA1D7F6F ^ (((v2 + 913) ^ 0x2F9) - 1758913201)) + v3)
                                   * (v1 - 1758911813)) & 0x80000000) == 0)) ^ (v2 + 913))))();
}

uint64_t sub_1000732F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12)
{
  BOOL v15 = a12 < 0x501C34EE;
  if (v15 == (v12 - 105760321) < 0x501C34EE) {
    BOOL v15 = v12 - 105760321 < a12;
  }
  return (*(uint64_t (**)(uint64_t))(v14 + 8 * ((!v15 * (v13 - 727)) ^ v13)))(2845181080);
}

uint64_t sub_100073364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, int a14, uint64_t a15, int a16, uint64_t a17, int a18, uint64_t a19, unsigned int a20)
{
  uint64_t v26 = *(void *)(v20 + 32);
  unsigned int v27 = 268847287 * ((270127462 - (&a13 | 0x1019D166) + (&a13 | 0xEFE62E99)) ^ 0x104C3FB1);
  a19 = *(void *)(v20 + 24);
  a17 = a10;
  a20 = (v23 ^ 0xB8FFE3E7) + (v24 & 0x71FFC7CE) - v27 + 1875877311;
  a18 = v25 - v27 + 368398211;
  a13 = v26;
  a15 = a10;
  a16 = v25 - v27 + a12 - ((((v25 - 1673) | 0x40) + 1620908975) & (2 * a12)) + 810452700;
  uint64_t v28 = (*(uint64_t (**)(uint64_t *))(v22 + 8 * (v25 + 447)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v22 + 8 * ((30 * (a14 == v21)) ^ v25)))(v28);
}

void sub_100073474()
{
}

void sub_100073480(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 3804331 * ((2 * (a1 & 0x5C5A643E) - a1 - 1549427775) ^ 0xDD70BE37);
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v6 = v1
     - 460628867 * ((-4722230 - (&v4 | 0xFFB7F1CA) + (&v4 | 0x480E35)) ^ 0x4CDE8C48)
     - 700;
  uint64_t v4 = v2;
  int v3 = (char *)*(&off_10018D100 + (v1 ^ 0x566)) - 4;
  (*(void (**)(uint64_t *))&v3[8 * v1 + 8424])(&v4);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_1000735D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = 0;
  *int v1 = a1;
  return result;
}

uint64_t sub_1000735E4()
{
  return (*(uint64_t (**)(void))(v2 + 8
                                   * ((481 * (v0 - STACK[0x4B0] < (((v1 ^ 0x1AFu) + 95) ^ 0x312uLL))) ^ v1 ^ 0x1AF)))();
}

uint64_t sub_100073630(__n128 a1)
{
  *(__n128 *)(v4 + v3) = a1;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v3 != 1500) * v2) | v1)))();
}

void sub_100073654()
{
  STACK[0x328] = *(void *)(v0 + 8 * (v1 - 759));
  JUMPOUT(0x10007366CLL);
}

uint64_t sub_100073680@<X0>(int a1@<W2>, int a2@<W3>, unint64_t a3@<X8>)
{
  STACK[0x588] = v4;
  LODWORD(STACK[0x594]) = v3;
  STACK[0x4C0] = a3;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1416
                                * (v3
                                 + 1957708257
                                 + (a2 & (2 * *(_DWORD *)(v4 - 0xB999BAB1C51203FLL)) ^ 0xC)
                                 + (*(_DWORD *)(v4 - 0xB999BAB1C51203FLL) & 0x3F ^ (a1 + 35)) < (((v6 ^ 0x7A5) - 687) ^ 0xFFFFFB58))) ^ v6)))();
}

uint64_t sub_100073708@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  return (*(uint64_t (**)(uint64_t, void))(v3 + 8 * ((3350 * (v4 - 1758911814 >= 0)) ^ a2)))(a1, (a3 + 1));
}

uint64_t sub_100073750()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((2424
                                * (((v1 + 69 * (v2 ^ 0x191) - 828) & (2 * (*(unsigned __int8 *)(v3 + 8) - 11)))
                                 + ((*(unsigned __int8 *)(v3 + 8) - 11) ^ v0) == v0)) ^ v2)))();
}

void sub_10007379C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (235795823 * (((a1 | 0x87E968F1) - (a1 & 0x87E968F1)) ^ 0x134421A8));
  unsigned int v2 = (char *)*(&off_10018D100 + (v1 ^ 0x110)) - 4;
  uint64_t v3 = *(void *)a1;
  (*(void (**)(char *, uint64_t (*)()))&v2[8 * (v1 ^ 0x871)])((char *)*(&off_10018D100 + (v1 ^ 0x10D)) - 12, sub_100064A04);
  __asm { BRAA            X9, X17 }
}

void sub_100073878(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(&off_10018D100
       + ((-113 * (dword_1001B6DA8 ^ 0xEA ^ qword_1001B6D98)) ^ byte_100163D10[byte_1001609A0[(-113 * (dword_1001B6DA8 ^ 0xEA ^ qword_1001B6D98))] ^ 0xBB])
       - 144);
  uint64_t v4 = *(&off_10018D100
       + ((-113 * ((qword_1001B6D98 - *v3) ^ 0xEA)) ^ byte_10016DCC0[byte_100167CB0[(-113 * ((qword_1001B6D98 - *v3) ^ 0xEA))] ^ 0x69])
       + 32);
  uint64_t v5 = (*v4 ^ *v3) - (void)&v7;
  void *v3 = 1932141199 * v5 - 0x5BC8EB821F80EA16;
  void *v4 = 1932141199 * (v5 ^ 0xA437147DE07F15EALL);
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  LODWORD(v5) = 235795823
              * (((&v9 | 0xD878EB21) - &v9 + (&v9 & 0x278714D8)) ^ 0x4CD5A278);
  uint64_t v9 = &STACK[0xB999BAB1C5120FF];
  int v10 = v5 ^ 0x78F2562C;
  int v11 = v5 - 1882357464;
  LODWORD(v3) = 1932141199 * ((*(_DWORD *)v4 + *(_DWORD *)v3) ^ 0xE07F15EA);
  int v6 = (char *)*(&off_10018D100
               + ((-113 * ((qword_1001B6D98 + dword_1001B6DA8) ^ 0xEA)) ^ byte_10016DCC0[byte_100167CB0[(-113 * ((qword_1001B6D98 + dword_1001B6DA8) ^ 0xEA))] ^ 0x55])
               + 31)
     - 4;
  (*(void (**)(unint64_t **))&v6[8
                                                 * (byte_10016DCC0[byte_100167CB0[v3] ^ 0x48] ^ v3)
                                                 + 18456])(&v9);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_100073B78()
{
  return sub_100073B88();
}

uint64_t sub_100073B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  return v5 ^ a5;
}

uint64_t sub_100073BC8()
{
  uint64_t v6 = *(void *)(v9 + 32);
  int v7 = 831981571 * ((((v5 - 144) | 0x90F04090) - ((v5 - 144) & 0x90F04090)) ^ 0x95190B4);
  *(void *)(v5 - 144) = v10;
  *(_DWORD *)(v5 - 136) = v0 - v7 + 334;
  *(_DWORD *)(v5 - 132) = v7 + 517764793;
  (*(void (**)(uint64_t))(v4 + 8 * (v0 ^ 0xDDF)))(v5 - 144);
  *(void *)(v5 - 128) = v1;
  *(void *)(v5 - 120) = v3;
  *(_DWORD *)(v5 - 112) = v0 - 1224239923 * ((v5 - 144) ^ 0xF2B3FDD7) - 710;
  *(void *)(v5 - 144) = v2;
  *(void *)(v5 - 136) = v1;
  *(void *)(v5 - 104) = v10;
  (*(void (**)(uint64_t))(v4 + 8 * (v0 + 1117)))(v5 - 144);
  *(_DWORD *)(v5 - 136) = v0 + 831981571 * (((v5 - 144) & 0x591B3C7C | ~((v5 - 144) | 0x591B3C7C)) ^ 0x3F4513A7) + 489;
  *(void *)(v5 - 144) = v1;
  *(void *)(v5 - 128) = v6;
  return (*(uint64_t (**)(uint64_t))(v4 + 8 * (v0 + 1222)))(v5 - 144);
}

uint64_t sub_100073D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((((3 * ((v7 - 1207960126) & 0x6CFE9B9F ^ (v5 + 2088))) ^ 0x436) * (v6 == a5)) ^ v7)))();
}

uint64_t sub_100073D50@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W4>, int a4@<W5>, int a5@<W6>, int a6@<W8>)
{
  *(unsigned char *)(*(void *)(a1 + 24) + (a5 + a6)) = (a4 ^ v8) >> a2;
  return (*(uint64_t (**)(void))(v6 + 8 * ((294 * (a5 + a3 - 900 - 323 == (a3 ^ 0x2A3) + v7)) ^ a3)))();
}

uint64_t sub_100073DA4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v9 = (a2 - 875809647);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(v4 + (v9 & 0xF)) ^ *(unsigned char *)(a3 + v9) ^ (v7 - 7) ^ *(unsigned char *)(a4 + (v9 & 0xF)) ^ *(unsigned char *)((v9 & 0xF) + v5 + 2) ^ (-73 * (v9 & 0xF));
  return (*(uint64_t (**)(void))(v8 + 8 * ((1472 * (a2 - 1 == v6)) ^ v7)))();
}

uint64_t sub_100073E14@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W8>)
{
  int v6 = STACK[0x2D4];
  if ((a3 + 405001088) <= 0x12 && (int v6 = STACK[0x2D4], ((a2 << (a3 + 0x80)) & 0x42405) != 0)) {
    return sub_100073E88();
  }
  else {
    return (*(uint64_t (**)(void))(v3
  }
                                + 8
                                * ((736 * ((*(_DWORD *)(v4 + v5 * (uint64_t)a1 + 40) & 8) == ((v6 + 1184) ^ 0x7CE))) ^ (v6 - 716))))();
}

uint64_t sub_100073E88(int a1)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v1 - 813) & *(_DWORD *)(v3 + v4 * (uint64_t)a1 + 40)) != 0) * ((v1 + 371) ^ 0x775)) ^ (v1 + 715))))();
}

uint64_t sub_100073EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, int a8)
{
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * (((v9 == ((v8 ^ v11) * a7 - 44)) * (((v8 + a6) & a8) - 812)) | v8)))();
}

uint64_t sub_100073EF4(uint64_t a1, int a2)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  int v4 = !v3;
  return (*(uint64_t (**)(void))(v2 + 8 * ((37 * v4) ^ 0x2CAu)))();
}

void sub_100073F38(int a1@<W8>)
{
  int v7 = ((v6 - 144) ^ 0x4C96827D) * v1;
  *(_DWORD *)(v6 - 136) = ((a1 ^ 0x1EF3C21A) + v2) ^ v7;
  *(_DWORD *)(v6 - 144) = v7 + a1 + 287;
  *(void *)(v6 - 128) = v4;
  *(void *)(v6 - 120) = v5;
  (*(void (**)(uint64_t))(v3 + 8 * (a1 + 1120)))(v6 - 144);
  JUMPOUT(0x10006B650);
}

void sub_100073FEC()
{
}

void sub_100074000()
{
}

uint64_t sub_100074008()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((127 * (STACK[0x498] == 0)) ^ (v1 + 1423))))();
}

void sub_100074034()
{
}

uint64_t sub_10007403C(int a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  int v11 = a1 + a5;
  uint64_t v12 = (a2 + v11);
  long long v13 = *(_OWORD *)(v8 + v12 - 15);
  long long v14 = *(_OWORD *)(v8 + v12 - 31);
  uint64_t v15 = v9 + v12;
  *(_OWORD *)(v15 - 15) = v13;
  *(_OWORD *)(v15 - 31) = v14;
  return (*(uint64_t (**)(void))(v10 + 8 * (((a7 == v11) * a8) ^ (a6 + 1739))))();
}

uint64_t sub_1000741B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v45 = (_DWORD *)(a27 + 24 * (v42 - 1074653293));
  LODWORD(a32) = v45[4];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 8 * ((23 * (((((v43 + 1432032743) ^ 0x555B14C2) + *v45 - 1127070707) & 0xFFFFFFFFFFFFFFDLL) == 0)) ^ v43)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42);
}

uint64_t sub_100074280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = (a5 - 223268212);
  *(unsigned char *)(v11 + v12) ^= *(unsigned char *)(v9 + (v12 & 0xF)) ^ *(unsigned char *)(v8 + (v12 & 0xF)) ^ *(unsigned char *)(v7 + (v12 & 0xF)) ^ (5 * (v12 & 0xF)) ^ 0x77;
  return (*(uint64_t (**)(void))(v10 + 8 * ((2032 * (a5 - 1 == v6)) ^ (a6 - 492))))();
}

uint64_t sub_1000742E4@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v21 = (char *)*(&off_10018D100 + (a1 ^ 0x60)) - 4;
  int v22 = (v21[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B74) ^ 0xD7] ^ 0x4D) << 8;
  uint64_t v23 = (uint64_t)*(&off_10018D100 + (int)(a1 & 0xBAC3DB05));
  int v24 = *(unsigned __int8 *)(v23 + (*v17 ^ (a1 - 28)));
  *(_DWORD *)(v20 - 208) = v18;
  int v25 = (char *)*(&off_10018D100 + (a1 ^ 0x52)) - 4;
  int v26 = v25[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B69) ^ 0x49];
  int v27 = v22 | ((v24 ^ 0x98) << 24);
  HIDWORD(v28) = v26 ^ 1;
  LODWORD(v28) = (v26 ^ 0x3C) << 24;
  LOBYTE(v24) = v28 >> 26;
  uint64_t v29 = (char *)*(&off_10018D100 + (a1 ^ 0x6E)) - 12;
  int v30 = *(unsigned __int8 *)(v23 + (*(unsigned __int8 *)(v19 - 0x5EC77446536A4B6ALL) ^ 0xB8));
  int v31 = v25[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B6DLL) ^ 0x6BLL];
  HIDWORD(v28) = v31 ^ 1;
  LODWORD(v28) = (v31 ^ 0x3C) << 24;
  int v32 = ((v28 >> 26) ^ 0x53) << 16;
  LOBYTE(v26) = v21[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B68) ^ 0x2ELL];
  int v33 = v25[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B75) ^ 0x47];
  HIDWORD(v28) = v33 ^ 1;
  LODWORD(v28) = (v33 ^ 0x3C) << 24;
  unsigned int v34 = v27 & 0xFF00FF00 | (v29[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B73) ^ 0xECLL] - 106) ^ 9 | (((v28 >> 26) ^ 0x1E) << 16);
  int v35 = v21[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B70) ^ 0x30];
  LODWORD(v21) = v32 | ((v21[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B6CLL) ^ 0x77] ^ 0x82) << 8);
  int v36 = (v29[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B6FLL) ^ 0xA9] - 106) | ((v35 ^ 0x78) << 8);
  LOBYTE(v32) = v29[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B67) ^ 0x36] - 106;
  LODWORD(v25) = v25[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B71) ^ 0xCBLL];
  HIDWORD(v28) = v25 ^ 1;
  LODWORD(v28) = (v25 ^ 0x3C) << 24;
  LOBYTE(v29) = v29[*(unsigned __int8 *)(v19 - 0x5EC77446536A4B6BLL) ^ 0xB5];
  int v37 = v32 ^ 0x2A | ((v26 ^ 0x88) << 8) | ((v24 ^ 0xFB) << 16) | ((v30 ^ 0x20) << 24);
  unsigned int v38 = v36 & 0xFF00FFFF | (((v28 >> 26) ^ 0xBA) << 16) | ((*(unsigned __int8 *)(v23
                                                                                                + (*(unsigned __int8 *)(v19 - 0x5EC77446536A4B72) ^ 0x35)) ^ 0x57) << 24);
  unsigned int v39 = v21 | ((*(unsigned __int8 *)(v23 + (*(unsigned __int8 *)(v19 - 0x5EC77446536A4B6ELL) ^ 0xBFLL)) ^ 0x4E) << 24);
  uint64_t v40 = (char *)*(&off_10018D100 + (a1 ^ 0x9B)) - 8;
  unint64_t v41 = (char *)*(&off_10018D100 + a1 - 154) - 8;
  int v42 = *(_DWORD *)&v40[4 * (v32 ^ 0xFD)] ^ 0x3964B61D ^ *(_DWORD *)&v41[4
                                                                                        * (v24 ^ 0x61)];
  *(_DWORD *)(v20 - 152) = a1;
  int v43 = (char *)*(&off_10018D100 + (a1 ^ 0x53)) - 8;
  int v44 = (v42 - ((2 * v42) & 0x50AA1872) - 1470821319) ^ *(_DWORD *)&v43[4 * (v30 ^ 0xB5)];
  unsigned int v45 = v44 - ((2 * v44) & 0xD8D8B456);
  int v46 = (char *)*(&off_10018D100 + a1 - 48) - 8;
  LODWORD(v23) = *(_DWORD *)&v46[4 * (v26 ^ 0xB0)] ^ v34 ^ (v45 - 328443349);
  unint64_t v309 = __PAIR64__(v34, v37);
  int v47 = v37 + 1100936508 + (~(2 * v37) | 0x7CC21589);
  LOBYTE(v29) = ((_BYTE)v29 - 106) ^ 0xA8;
  unsigned int v48 = v39 & 0xFFFFFF00 | v29;
  int v219 = v23;
  *(_DWORD *)(v20 - 168) = v23 ^ v38;
  int v49 = v23 ^ v38 ^ 0x4D ^ v48;
  *(_DWORD *)(v20 - 176) = v49;
  int v50 = v23 ^ v38 ^ 0x4D;
  unsigned __int8 v187 = v23 ^ v38 ^ 0x4D;
  int v51 = v49 ^ v47;
  int v242 = BYTE1(v51);
  int v221 = BYTE2(v51);
  unsigned int v52 = *(_DWORD *)&v46[4 * (BYTE1(v51) ^ 0xF)] ^ *(_DWORD *)&v41[4 * (BYTE2(v51) ^ 0x20)] ^ 0x92ED6499;
  *(_DWORD *)(v20 - 192) = 1882517153;
  unsigned int v53 = v51 ^ 0xFB69D892;
  int v236 = v51;
  int v54 = (v52 + 1206225072 + (~(2 * v52) | 0x7034EEA1)) ^ *(_DWORD *)&v40[4 * (v51 ^ 0x12)];
  unsigned int v230 = HIBYTE(v53);
  int v55 = v23 ^ *(_DWORD *)&v43[4 * (HIBYTE(v53) ^ 0x65)] ^ (v54 - ((2 * v54) & 0x50AA1872) - 1470821319);
  int v56 = (v23 ^ v38 ^ 0xBAF72DE4) - ((2 * (v23 ^ v38 ^ 0xBAF72DE4)) & 0x9DC48B94);
  unint64_t v308 = __PAIR64__(v38, v48);
  *(_DWORD *)(v20 - 160) = v55;
  LODWORD(v23) = v55 ^ 0x4EE245CA ^ (v48 - 2 * (v48 & 0x4EE245DA ^ v29 & 0x10) + 1323451850);
  LODWORD(v29) = v23 ^ v53;
  *(_DWORD *)(v20 - 120) = v23;
  int v249 = ((v23 ^ v53) >> 16);
  int v252 = ((unsigned __int16)(v23 ^ v53) >> 8);
  unsigned int v57 = *(_DWORD *)&v41[4 * (v249 ^ 0x2E)] ^ *(_DWORD *)&v46[4 * (v252 ^ 0x9B)] ^ 0x92ED6499;
  int v323 = v29;
  unsigned int v58 = (v57 - ((2 * v57) & 0x8FCB115E) + 1206225071) ^ *(_DWORD *)&v40[4 * (v29 ^ 0xD2)];
  unsigned int v59 = v29 ^ 0xA77003BD;
  *(_DWORD *)(v20 - 216) = v29 >> 24;
  int v60 = (v58 - ((2 * v58) & 0x50AA1872) - 1470821319) ^ *(_DWORD *)&v43[4 * ((v29 >> 24) ^ 0x69)];
  unsigned int v61 = v60 ^ v50 ^ 0x8B343C7E;
  int v274 = v60 ^ v50;
  LODWORD(v23) = v61 ^ v23;
  *(_DWORD *)(v20 - 140) = v23;
  LODWORD(v29) = ((v23 ^ 0x11B23194) - ((2 * (v23 ^ 0x11B23194)) & 0xA7AF45E8) - 740842764) ^ v29 ^ 0xA77003BD;
  unsigned int v62 = v29 ^ 0x9547167F;
  int v290 = ((v29 ^ 0x9547167F) >> 16);
  int v300 = ((unsigned __int16)((unsigned __int16)v29 ^ 0x167F) >> 8);
  unsigned int v63 = *(_DWORD *)&v41[4 * (v290 ^ 0x89)] ^ *(_DWORD *)&v46[4 * (v300 ^ 0x3A)] ^ 0x92ED6499;
  int v298 = v29;
  LODWORD(v29) = (v63 - ((2 * v63) & 0x8FCB115E) + 1206225071) ^ *(_DWORD *)&v40[4 * (v29 ^ 0xE4)];
  unsigned int v310 = HIBYTE(v62);
  int v64 = (v29 - ((2 * v29) & 0x50AA1872) - 1470821319) ^ *(_DWORD *)&v43[4 * (HIBYTE(v62) ^ 0x1D)];
  unsigned int v258 = v60 ^ v55;
  unsigned int v319 = (v64 - ((2 * v64) & 0xB422C6FE) - 636394625) ^ v60 ^ v55;
  *(_DWORD *)(v20 - 248) = v319 ^ 0xDA11637F;
  unsigned int v327 = v319 ^ 0xDA11637F ^ v60 ^ v50;
  unsigned int v65 = ((v327 ^ 0xFE25CD6D) - ((2 * (v327 ^ 0xFE25CD6D)) & 0xA7AF45E8) - 740842764) ^ v59;
  *(_DWORD *)(v20 - 220) = BYTE1(v65);
  int v66 = *(_DWORD *)&v46[4 * (BYTE1(v65) ^ 0x6F)];
  *(_DWORD *)(v20 - 232) = BYTE2(v65);
  int v67 = v56 + 1323451850;
  unsigned int v68 = v66 ^ *(_DWORD *)&v41[4 * (BYTE2(v65) ^ 0xA8)] ^ 0x92ED6499;
  unsigned int v315 = HIBYTE(v65);
  int v69 = (v68 - ((2 * v68) & 0x50AA1872) - 1470821319) ^ *(_DWORD *)&v43[4 * (HIBYTE(v65) ^ 0x85)];
  int v313 = (((v327 ^ 0x6D) - ((2 * (v327 ^ 0x6D)) & 0xE8) - 12) ^ v59);
  unsigned int v70 = (v69 - ((2 * v69) & 0x8FCB115E) + 1206225071) ^ *(_DWORD *)&v40[4 * (v313 ^ 0x25)];
  unsigned int v325 = v327 ^ v23;
  LODWORD(v23) = (v70 - ((2 * v70) & 0x638623AE) + 834867671) ^ v61 ^ v327 ^ v23;
  int v71 = (v70 - ((2 * v70) & 0x638623AE) + 834867671) ^ v61;
  unsigned int v183 = v71;
  *(_DWORD *)(v20 - 128) = v23;
  int v72 = v65 ^ v23 ^ 0x94C7C819;
  int v73 = v23 ^ 0x94C7C819;
  __int16 v176 = v23 ^ 0xC819;
  *(_DWORD *)(v20 - 256) = v65;
  unsigned int v216 = (v72 ^ 0x92014E8E) >> 24;
  int v204 = ((v72 ^ 0x92014E8E) >> 16);
  int v74 = *(_DWORD *)&v41[4 * (v204 ^ 0x89)] ^ *(_DWORD *)&v43[4 * (v216 ^ 0x1D)];
  int v208 = ((unsigned __int16)(v72 ^ 0x4E8E) >> 8);
  unsigned int v75 = ((v74 ^ 0xD6D4328B) - 2 * ((v74 ^ 0xD6D4328B) & 0x6C6C5A3F ^ v74 & 0x14) - 328443349) ^ *(_DWORD *)&v46[4 * (v208 ^ 0x3A)];
  *(_DWORD *)(v20 - 184) = v319 ^ 0xDA11637F ^ v70;
  int v201 = (v65 ^ v23 ^ 0x19);
  LODWORD(v23) = v319 ^ 0xDA11637F ^ v70 ^ *(_DWORD *)&v40[4 * (v201 ^ 0x15)] ^ (v75
                                                                               - ((2 * v75) & 0x8FCB115E)
                                                                               + 1206225071);
  unsigned __int8 v213 = BYTE2(v71) ^ 0x16;
  int v76 = v23 ^ v71 ^ 0x7C166C11;
  int v283 = v23;
  int v77 = v76 ^ v65;
  *(_DWORD *)(v20 - 240) = (v76 ^ v65) >> 24;
  int v293 = (v76 ^ ((v327 ^ 0x6D) - ((2 * (v327 ^ 0x6D)) & 0xE8) - 12) ^ v59);
  unsigned int v78 = *(_DWORD *)&v43[4 * (((v76 ^ v65) >> 24) ^ 0x9B)] ^ *(_DWORD *)&v40[4 * (v293 ^ 0x31)] ^ 0xEFB08496;
  unsigned int v269 = ((v76 ^ v65) >> 8) ^ 0x86839A;
  int v272 = ((unsigned __int16)(v76 ^ v65) >> 8) ^ 0x9A;
  unsigned int v79 = (v78 - ((2 * v78) & 0xD8D8B456) - 328443349) ^ *(_DWORD *)&v46[4
                                                                     * (((unsigned __int16)(v76 ^ v65) >> 8) ^ 0xA0)];
  int v264 = ((v76 ^ v65) >> 16);
  int v80 = *(_DWORD *)&v41[4 * (v264 ^ 0xA)];
  unsigned int v239 = (((v79 - ((2 * v79) & 0xFD027D64) + 2122399410) ^ v80)
        - ((2 * ((v79 - ((2 * v79) & 0xFD027D64) + 2122399410) ^ v80)) & 0xBEBE92CC)
        + 1600080230) ^ v23;
  unsigned int v227 = v239 ^ 0xA2DCD3CC ^ v76;
  unsigned __int8 v214 = (((v79 - ((2 * v79) & 0x64) - 78) ^ v80) - ((2 * ((v79 - ((2 * v79) & 0x64) - 78) ^ v80)) & 0xCC) + 102) ^ v23 ^ 0xCC;
  unsigned int v278 = v76 ^ v73;
  int v255 = v76;
  unsigned int v81 = v76 ^ v73 ^ 0x851527F9;
  *(_DWORD *)(v20 - 136) = v81;
  unsigned int v82 = ((v227 ^ 0x5A137D54) - ((2 * (v227 ^ 0x5A137D54)) & 0xDE0BA696) - 284830901) ^ v81;
  *(_DWORD *)(v20 - 132) = v82;
  int v83 = v82 ^ 0x3C40B926;
  LODWORD(v23) = ((v82 ^ 0xBBDF6126) - 2 * ((v82 ^ 0x3C40B926) & 2 ^ (v82 ^ 0xBBDF6126) & 0x6B445CC7) - 347841339) ^ v76 ^ v65 ^ 0x6DC7C66F ^ 0x479AB031;
  int v305 = (((v82 ^ 0x26) - 2 * ((v82 ^ 0x26) & 2 ^ (v82 ^ 0x26) & 0xC7) - 59) ^ v76 ^ v65 ^ 0x6F);
  int v321 = ((unsigned __int16)(((v82 ^ 0x6126)
                                             - 2 * ((v82 ^ 0xB926) & 2 ^ (v82 ^ 0x6126) & 0x5CC7)
                                             + 23749) ^ v76 ^ v65 ^ 0xC66F ^ 0xB031) >> 8);
  unsigned int v84 = *(_DWORD *)&v46[4 * (v321 ^ 0x3A)] ^ *(_DWORD *)&v40[4 * (v305 ^ 0xAA)] ^ 0xAB89D284;
  int v85 = BYTE2(v23);
  unsigned int v86 = (v84 - ((2 * v84) & 0xFD027D64) + 2122399410) ^ *(_DWORD *)&v41[4 * (BYTE2(v23) ^ 0x89)];
  unsigned int v233 = BYTE3(v23);
  LODWORD(v23) = (v86 - ((2 * v86) & 0x50AA1872) - 1470821319) ^ *(_DWORD *)&v43[4 * (BYTE3(v23) ^ 0x1D)];
  unsigned int v87 = v23 ^ v76;
  LODWORD(v29) = ((v87 ^ 0xA6C48CD5) - ((2 * (v87 ^ 0xA6C48CD5)) & 0xD688B98A) - 347841339) ^ v77 ^ 0x6DC7C66F;
  int v88 = ((unsigned __int16)(((v87 ^ 0x8CD5) - ((2 * (v87 ^ 0x8CD5)) & 0xB98A) + 23749) ^ v77 ^ 0xC66F) >> 8);
  int v89 = v55 ^ 0x4EE245CA ^ v67;
  LODWORD(v25) = *(_DWORD *)&v43[4 * ((v29 >> 24) ^ 5)] ^ *(_DWORD *)&v46[4 * (BYTE1(v29) ^ 0x6F)] ^ 0x44395612;
  int v280 = (((v87 ^ 0xD5) - ((2 * (v87 ^ 0xD5)) & 0x8A) - 59) ^ v77 ^ 0x6F);
  LODWORD(v25) = (v25 + 1206225072 + (*(_DWORD *)(v20 - 192) | ~(2 * v25))) ^ *(_DWORD *)&v40[4 * (v280 ^ 0x25)];
  int v90 = v239 ^ 0xA2DCD3CC ^ v23;
  unsigned int v91 = v90 ^ *(_DWORD *)&v41[4 * (BYTE2(v29) ^ 0xA8)] ^ (v25 - ((2 * v25) & 0xFD027D64) + 2122399410);
  int v92 = v82 ^ 0x3C40B926 ^ v91;
  *(_DWORD *)(v20 - 200) = v92;
  int v317 = ((unsigned __int16)(v92 ^ ((v87 ^ 0x8CD5) - ((2 * (v87 ^ 0x8CD5)) & 0xB98A) + 23749) ^ v77 ^ 0xC66F) >> 8);
  unsigned int v191 = (v92 ^ v29) >> 24;
  int v93 = *(_DWORD *)&v46[4 * (v317 ^ 0x44)] ^ *(_DWORD *)&v43[4 * (v191 ^ 0x47)] ^ 0x44395612;
  int v189 = (v92 ^ v29);
  unsigned int v94 = (v93 - ((2 * v93) & 0x8FCB115E) + 1206225071) ^ *(_DWORD *)&v40[4 * (v189 ^ 0xD5)];
  int v174 = ((v92 ^ v29) >> 16);
  LODWORD(v21) = (v94 - ((2 * v94) & 0xFD027D64) + 2122399410) ^ *(_DWORD *)&v41[4 * (v174 ^ 0xCB)];
  *(_DWORD *)(v20 - 192) = v91;
  HIDWORD(v307) = v91 ^ 0x5ED6BD52 ^ (v21 - ((2 * v21) & 0xBC4321F6) - 568225541);
  int v179 = v91 ^ v87;
  LODWORD(v307) = v91 ^ v87 ^ 0xEC262BAF ^ (HIDWORD(v307) - ((2 * HIDWORD(v307)) & 0x9109C976) - 930814789);
  HIDWORD(v306) = v92 ^ 0x4018996 ^ v307;
  LODWORD(v306) = (HIDWORD(v306) - ((2 * HIDWORD(v306)) & 0x2DF290BE) + 385435743) ^ v92 ^ v29;
  LODWORD(v41) = *(_DWORD *)(v20 - 152);
  uint64_t v95 = (char *)*(&off_10018D100 + (int)v41 - 68) - 8;
  LODWORD(v23) = (((v90 ^ 0x1B9155BDu) >> 16)
                + 201545842
                + ((2 * ((((v90 ^ 0x1B9155BDu) >> 16) + 44) & 0x47 ^ (((v90 ^ 0x1B9155BDu) >> 16) | 0xFFFFFFFD))) ^ 0x8081405)) ^ *(_DWORD *)&v95[4 * (((v90 ^ 0x1B9155BDu) >> 16) ^ 0x2D)];
  LODWORD(v46) = ((BYTE2(v29) ^ 0x89) + 201545842 + ((2 * (BYTE2(v29) ^ 0x89) + 88) & 0x8A ^ 0xF7F7EBFF)) ^ *(_DWORD *)&v95[4 * (BYTE2(v29) ^ 0xA4)];
  unint64_t v96 = (char *)*(&off_10018D100 + (int)(v41 ^ 0x7A)) - 8;
  int v97 = (v23 - ((2 * v23) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4 * (BYTE1(v90) ^ 0x47)];
  unint64_t v98 = (char *)*(&off_10018D100 + (int)v41 - 152) - 4;
  int v99 = (v46 - ((2 * v46) & 0x36A73A36) - 1689019109) ^ *(_DWORD *)&v98[4
                                                                                      * ((v29 >> 24) ^ 0xCC)];
  unsigned __int8 v303 = BYTE1(v83) ^ BYTE1(v87);
  unint64_t v100 = (char *)*(&off_10018D100 + (int)(v41 ^ 0x6B)) - 8;
  int v101 = *(_DWORD *)&v100[4 * ((v83 ^ v87) ^ 0x53)];
  LODWORD(v23) = *(_DWORD *)&v95[4 * (((v83 ^ v87) >> 16) ^ 0xAA)] ^ *(_DWORD *)&v98[4 * (((v83 ^ v87) >> 24) ^ 0x3E)] ^ ((((v83 ^ v87) >> 16) ^ 0x87) + 201545842 + ((2 * (((v83 ^ v87) >> 16) ^ 0x87) + 88) & 0x8A ^ 0xF7F7EBFF)) ^ (181304767 * v101 - ((362609534 * v101 + 101572548) & 0x36A73A36) + 1582992637);
  LODWORD(v21) = *(_DWORD *)&v100[4 * (v87 ^ 0x74)];
  unsigned int v295 = v87;
  LODWORD(v21) = (181304767 * v21 - ((362609534 * v21 - 2045911100) & 0xCC120192) - 1458573141) ^ *(_DWORD *)&v96[4 * (BYTE1(v87) ^ 0x5A)];
  int v304 = v21 - ((2 * v21) & 0x36A73A36);
  int v262 = BYTE2(v87);
  unsigned int v312 = (BYTE2(v87) ^ 0x4C) + 201545842 + ((2 * (BYTE2(v87) ^ 0x4C) + 88) & 0x8A ^ 0xF7F7EBFF);
  unsigned int v267 = v88 ^ 0xB0;
  unsigned int v288 = v99 - ((2 * v99) & 0xCC120192);
  int v285 = v23 - ((2 * v23) & 0xCC120192);
  HIDWORD(v311) = (v97 - ((2 * v97) & 0x36A73A36) - 1689019109) ^ *(_DWORD *)&v98[4 * ((v90 ^ 0x1B9155BDu) >> 24)] ^ (181304767 * *(_DWORD *)&v100[4 * (v90 ^ 0x7D)] - 1022955550);
  unsigned int v102 = *(_DWORD *)&v95[4 * (((v89 ^ 0xE9B45E6C) >> 16) ^ 0xF5)] ^ ((((v89 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                    + 201545842
                                                                                    + ((2
                                                                                      * (((((v89 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                        + 44) & 0x47 ^ (((v89 ^ 0xE9B45E6C) >> 16) | 0xFFFFFFFD))) ^ 0x8081405));
  LODWORD(v21) = *(_DWORD *)(v20 - 120) ^ 0x31676F78;
  LODWORD(v29) = *(_DWORD *)&v95[4 * (BYTE2(v21) ^ 0x7B)] ^ ((BYTE2(v21) ^ 0x56)
                                                           + 201545842
                                                           + ((2 * (BYTE2(v21) ^ 0x56) + 88) & 0x8A ^ 0xF7F7EBFF));
  LODWORD(v21) = (v29 - ((2 * v29) & 0x36A73A36) - 1689019109) ^ *(_DWORD *)&v98[4
                                                                                               * (v21 >> 24)];
  LODWORD(v29) = *(_DWORD *)&v95[4 * (v249 ^ 0x34)] ^ ((v249 ^ 0x19)
                                                     + 201545842
                                                     + ((2 * (v249 ^ 0x19) + 88) & 0x8A ^ 0xF7F7EBFF));
  LODWORD(v29) = (v29 - ((2 * v29) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4 * (v252 ^ 5)];
  unsigned int v250 = v21 - ((2 * v21) & 0xCC120192);
  int v253 = v29 - ((2 * v29) & 0x36A73A36);
  LODWORD(v21) = *(_DWORD *)&v100[4 * (*(_DWORD *)(v20 - 160) ^ 0xDF)];
  LODWORD(v29) = *(_DWORD *)(v20 - 160) ^ 0x5A18571F;
  LODWORD(v21) = *(_DWORD *)&v98[4 * (v29 >> 24)] ^ ((BYTE2(v29) ^ 0xC1)
                                                                 + 201545841
                                                                 - ((2 * (BYTE2(v29) ^ 0xC1) + 160207960) & 0x808148A)) ^ *(_DWORD *)&v95[4 * (BYTE2(v29) ^ 0xEC)] ^ (181304767 * v21 - ((362609534 * v21 + 101572548) & 0x36A73A36) + 1582992637);
  unsigned int v246 = v21 - ((2 * v21) & 0xCC120192);
  LODWORD(v23) = *(_DWORD *)&v98[4 * ((v89 ^ 0xE9B45E6C) >> 24)] ^ (v102 - ((2 * v102) & 0x36A73A36) - 1689019109);
  int v225 = v23 - 435617590 + (~(2 * v23) | 0x33EDFE6D);
  LOWORD(v99) = v227 ^ 0x8EA4;
  unsigned int v103 = v227 ^ 0x35C48CD5;
  LODWORD(v21) = *(_DWORD *)&v95[4 * (v85 ^ 0xDE)] ^ ((v85 ^ 0xF3)
                                                    + 201545842
                                                    + ((2 * (v85 ^ 0xF3) + 88) & 0x8A ^ 0xF7F7EBFF));
  LODWORD(v29) = *(_DWORD *)&v95[4 * (((v227 ^ 0x35C48CD5) >> 16) ^ 0xFE)] ^ ((((v227 ^ 0x35C48CD5) >> 16) ^ 0xD3)
                                                                                             + 201545842
                                                                                             + ((2
                                                                                               * (((v227 ^ 0x35C48CD5) >> 16) ^ 0xD3)
                                                                                               + 88) & 0x8A ^ 0xF7F7EBFF));
  int v104 = *(_DWORD *)&v100[4 * (v83 ^ 0xC5)];
  int v105 = v29 - ((2 * v29) & 0x36A73A36);
  LODWORD(v29) = 181304767 * v104 - ((362609534 * v104 - 2045911100) & 0xCC120192);
  LODWORD(v21) = (v21 - 1689019109 + (~(2 * v21) | 0xC958C5C9) + 1) ^ *(_DWORD *)&v98[4 * (v233 ^ 0x36)];
  unsigned int v106 = *(_DWORD *)&v95[4 * (BYTE2(v239) ^ 0xF0)] ^ ((BYTE2(v239) ^ 0xDD)
                                                    + 201545842
                                                    + ((2 * (BYTE2(v239) ^ 0xDD) + 88) & 0x8A ^ 0xF7F7EBFF));
  unsigned int v107 = (v106 - ((2 * v106) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4
                                                                        * (((unsigned __int16)(v239 ^ 0xD3CC) >> 8) ^ 0x8B)];
  unsigned int v234 = HIBYTE(v239) ^ 0x4E;
  unsigned int v228 = v21 - ((2 * v21) & 0xCC120192);
  unsigned int v240 = v107 - ((2 * v107) & 0x36A73A36);
  LODWORD(v21) = *(_DWORD *)(v20 - 132) ^ 0x5EDF6126;
  LODWORD(v21) = *(_DWORD *)&v96[4 * (BYTE1(v21) ^ 0x20)] ^ ((BYTE2(v21) ^ 0xD7)
                                                           + 201545842
                                                           + ((2 * (BYTE2(v21) ^ 0xD7) + 88) & 0x8A ^ 0xF7F7EBFF)) ^ *(_DWORD *)&v95[4 * (BYTE2(v21) ^ 0xFA)] ^ (v29 - 1458573141);
  LODWORD(v29) = (v105 - 1689019109) ^ *(_DWORD *)&v98[4 * HIBYTE(v103)] ^ (181304767
                                                                          * *(_DWORD *)&v100[4
                                                                                           * (v99 ^ 0x99)]
                                                                          - 1022955550);
  unsigned int v193 = BYTE1(v99) ^ 0x14;
  unsigned int v181 = v214 ^ 0xA3;
  unsigned int v198 = v29 - ((2 * v29) & 0xCC120192);
  int v215 = v21 - ((2 * v21) & 0x36A73A36);
  int v108 = *(_DWORD *)(v20 - 176);
  unsigned int v185 = BYTE1(v108) ^ 0xF5;
  unsigned int v196 = v219 ^ 0x2BEAE26B;
  LODWORD(v21) = *(_DWORD *)&v95[4 * (((v219 ^ 0x2BEAE26Bu) >> 16) ^ 0xEC)] ^ ((((v219 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                              + 201545842
                                                                                              + ((2
                                                                                                * (((v219 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                                + 88) & 0x8A ^ 0xF7F7EBFF)) ^ (181304767 * *(_DWORD *)&v100[4 * (v219 ^ 0x1E)] - 1022955550);
  LODWORD(v21) = (v21 - ((2 * v21) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4 * (BYTE1(v219) ^ 8)];
  LODWORD(v29) = *(_DWORD *)&v95[4 * (v221 ^ 0xBE)] ^ ((v221 ^ 0x93)
                                                     + 201545842
                                                     + ((2 * (v221 ^ 0x93) + 88) & 0x8A ^ 0xF7F7EBFF));
  int v109 = *(_DWORD *)&v100[4 * (v187 ^ 0x55)];
  int v222 = v21 - ((2 * v21) & 0x36A73A36);
  int v172 = BYTE2(v108) ^ 0xF7;
  unsigned int v220 = (BYTE2(v108) ^ 0xA7)
       + 201545842
       + ((2 * (((BYTE2(v108) ^ 0xA7) + 44) & 0x47 ^ (v172 | 0xFFFFFFFD))) ^ 0x8081405);
  LODWORD(v21) = (v29 - ((2 * v29) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4 * (v242 ^ 0x65)] ^ (181304767 * *(_DWORD *)&v100[4 * (v236 ^ 0x61)] - 1022955550);
  int v243 = v21 - ((2 * v21) & 0x36A73A36);
  unsigned int v110 = *(_DWORD *)(v20 - 168);
  LODWORD(v29) = (181304767 * v109 - ((362609534 * v109 + 101572548) & 0x36A73A36) + 1582992637) ^ ((BYTE2(v110) ^ 0xBA)
                                                                                                  + 201545842
                                                                                                  + ((2 * (BYTE2(v110) ^ 0xBA) + 88) & 0x8A ^ 0xF7F7EBFF)) ^ *(_DWORD *)&v98[4 * (HIBYTE(v110) ^ 0x2F)] ^ *(_DWORD *)&v95[4 * (BYTE2(v110) ^ 0x97)];
  unsigned int v188 = v29 - ((2 * v29) & 0xCC120192);
  LODWORD(v29) = BYTE2(*(_DWORD *)(v20 - 128));
  LODWORD(v29) = *(_DWORD *)&v95[4 * (v29 ^ 0x31)] ^ ((v29 ^ 0x1C)
                                                                  + 201545842
                                                                  + ((2 * (v29 ^ 0x1C) + 88) & 0x8A ^ 0xF7F7EBFF));
  unsigned int v111 = *(_DWORD *)&v95[4 * (BYTE2(*(_DWORD *)(v20 - 184)) ^ 0x56)] ^ ((BYTE2(*(_DWORD *)(v20 - 184)) ^ 0x7B)
                                                                                       + 201545842
                                                                                       + ((2
                                                                                         * (BYTE2(*(_DWORD *)(v20 - 184)) ^ 0x7B)
                                                                                         + 88) & 0x8A ^ 0xF7F7EBFF));
  unsigned int v112 = v111 - ((2 * v111) & 0x36A73A36);
  LODWORD(v29) = (v29 - ((2 * v29) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4 * (HIBYTE(v176) ^ 0xE)] ^ (181304767 * *(_DWORD *)&v100[4 * (v176 ^ 0xFD)] - 1022955550);
  int v113 = *(_DWORD *)&v100[4 * (v183 ^ 0xFB)];
  unsigned int v114 = (181304767 * v113 - ((362609534 * v113 - 2045911100) & 0xCC120192) - 1458573141) ^ *(_DWORD *)&v96[4 * (BYTE1(v183) ^ 0xEF)];
  LODWORD(v177) = v29 - ((2 * v29) & 0x36A73A36);
  HIDWORD(v169) = v114 - ((2 * v114) & 0x36A73A36);
  LODWORD(v29) = (v112 - 1689019109) ^ *(_DWORD *)&v98[4 * (HIBYTE(*(_DWORD *)(v20 - 184)) ^ 0xD9)] ^ (181304767 * *(_DWORD *)&v100[4 * (*(_DWORD *)(v20 - 184) ^ 0x79)] - 1022955550);
  unsigned int v115 = *(_DWORD *)&v95[4 * (v204 ^ 0x86)] ^ ((v204 ^ 0xAB) + 201545842 + ((2 * (v204 ^ 0xAB) + 88) & 0x8A ^ 0xF7F7EBFF));
  int v116 = (v115 - ((2 * v115) & 0x36A73A36) - 1689019109) ^ *(_DWORD *)&v98[4 * v216];
  unsigned int v168 = v201 ^ 0xB3;
  unsigned int v205 = v29 - ((2 * v29) & 0xCC120192);
  int v210 = v213;
  unsigned int v237 = (v210 ^ 0x65) + 201545842 + ((2 * (v210 ^ 0x65) + 88) & 0x8A ^ 0xF7F7EBFF);
  LODWORD(v29) = *(_DWORD *)&v95[4 * (v174 ^ 0x8B)] ^ ((v174 ^ 0xA6)
                                                     + 201545842
                                                     + ((2 * (v174 ^ 0xA6) + 88) & 0x8A ^ 0xF7F7EBFF));
  int v175 = BYTE2(*(_DWORD *)(v20 - 200));
  unsigned int v217 = (v175 ^ 0x8F) + 201545842 + ((2 * (v175 ^ 0x8F) + 88) & 0x8A ^ 0xF7F7EBFF);
  unsigned int v202 = HIBYTE(v183) ^ 0xE8;
  unsigned int v117 = *(_DWORD *)(v20 - 192);
  LODWORD(v23) = *(_DWORD *)&v95[4 * (BYTE2(v117) ^ 0xE8)] ^ ((BYTE2(v117) ^ 0xC5)
                                                            + 201545842
                                                            + ((2 * (BYTE2(v117) ^ 0xC5) + 88) & 0x8A ^ 0xF7F7EBFF));
  LODWORD(v23) = (181304767 * *(_DWORD *)&v100[4 * (v117 ^ 0xCA)] - 1022955550) ^ *(_DWORD *)&v98[4 * (HIBYTE(v117) ^ 0x8E)] ^ (v23 - ((2 * v23) & 0x36A73A36) - 1689019109);
  unsigned int v184 = v179 ^ 0x44039AAA;
  unsigned int v118 = (181304767 * *(_DWORD *)&v100[4 * (v179 ^ 0xDB)] - 1022955550) ^ (((v179 ^ 0x44039AAAu) >> 16)
                                                                                          + 201545842
                                                                                          + ((2
                                                                                            * ((v179 ^ 0x44039AAAu) >> 16)
                                                                                            + 88) & 0x8A ^ 0xF7F7EBFF)) ^ *(_DWORD *)&v95[4 * (((v179 ^ 0x44039AAAu) >> 16) ^ 0x2D)];
  int v166 = v23 - ((2 * v23) & 0xCC120192);
  LODWORD(v23) = (v118 - ((2 * v118) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4 * (BYTE1(v179) ^ 0xC0)];
  LODWORD(v29) = *(_DWORD *)&v98[4 * (v191 ^ 0x22)] ^ (181304767 * *(_DWORD *)&v100[4 * (v189 ^ 0xFE)] - 1022955550) ^ (v29 - ((2 * v29) & 0x36A73A36) - 1689019109);
  int v192 = v23 - ((2 * v23) & 0x36A73A36);
  unsigned int v190 = v29 - ((2 * v29) & 0xCC120192);
  LODWORD(v23) = *(_DWORD *)&v100[4 * (v258 ^ 0xEC)];
  LODWORD(v29) = *(_DWORD *)&v95[4 * (v290 ^ 0x32)] ^ ((v290 ^ 0x1F)
                                                     + 201545842
                                                     + ((2 * (v290 ^ 0x1F) + 88) & 0x8A ^ 0xF7F7EBFF));
  int v119 = *(_DWORD *)&v100[4 * (v274 ^ 0xE6)];
  LODWORD(v23) = *(_DWORD *)&v98[4 * (HIBYTE(v258) ^ 0xCA)] ^ ((BYTE2(v258) ^ 0x2F)
                                                             + 201545842
                                                             + ((2 * (BYTE2(v258) ^ 0x2F) + 88) & 0x8A ^ 0xF7F7EBFF)) ^ *(_DWORD *)&v95[4 * (BYTE2(v258) ^ 2)] ^ (181304767 * v23 - ((362609534 * v23 + 101572548) & 0x36A73A36) + 1582992637);
  LODWORD(v21) = (v29 - ((2 * v29) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4 * (v300 ^ 0x8C)] ^ (181304767 * *(_DWORD *)&v100[4 * (v298 ^ 0xD9)] - 1022955550);
  LODWORD(v29) = *(_DWORD *)&v98[4 * ((v274 ^ 0x49A657C7u) >> 24)] ^ ((((v274 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                                    + 201545842
                                                                    + ((2
                                                                      * (((v274 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                                      + 88) & 0x8A ^ 0xF7F7EBFF)) ^ *(_DWORD *)&v95[4 * (((v274 ^ 0x49A657C7u) >> 16) ^ 0x18)] ^ (181304767 * v119 - ((362609534 * v119 + 101572548) & 0x36A73A36) + 1582992637);
  unsigned int v120 = *(_DWORD *)&v95[4 * (((*(_DWORD *)(v20 - 140) ^ 0x2F4F27EBu) >> 16) ^ 0x2D)] ^ (((*(_DWORD *)(v20 - 140) ^ 0x2F4F27EBu) >> 16) + 201545842 + ((2 * ((*(_DWORD *)(v20 - 140) ^ 0x2F4F27EBu) >> 16) + 88) & 0x8A ^ 0xF7F7EBFF));
  unsigned int v301 = v310 ^ 0xAA;
  LODWORD(v311) = (v23 - ((2 * v23) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4 * (BYTE1(v258) ^ 0x2E)];
  int v299 = v21 - ((2 * v21) & 0x36A73A36);
  unsigned int v259 = BYTE1(v274) ^ 0xB9;
  LODWORD(v23) = (v120 - ((2 * v120) & 0x36A73A36) - 1689019109) ^ *(_DWORD *)&v98[4
                                                                                 * ((*(_DWORD *)(v20 - 140) ^ 0x2F4F27EBu) >> 24)] ^ (181304767 * *(_DWORD *)&v100[4 * (*(_DWORD *)(v20 - 140) ^ 0x7B)] - 1022955550);
  unsigned int v291 = v29 - ((2 * v29) & 0xCC120192);
  int v275 = v23 - ((2 * v23) & 0xCC120192);
  LODWORD(v21) = *(_DWORD *)&v95[4 * (v264 ^ 0xC1)] ^ ((v264 ^ 0xEC)
                                                     + 201545842
                                                     + ((2 * (v264 ^ 0xEC) + 88) & 0x8A ^ 0xF7F7EBFF));
  LODWORD(v23) = (v21 - ((2 * v21) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4
                                                                                              * ((v272
                                                                                                - ((2 * v269) & 0x166)
                                                                                                + 179) ^ 0x54)] ^ (181304767 * *(_DWORD *)&v100[4 * (v293 ^ 0xE2)] - 1022955550);
  unsigned int v165 = BYTE1(v283) ^ 0x77;
  LODWORD(v29) = *(_DWORD *)&v100[4 * (*(_DWORD *)(v20 - 136) ^ 0x39)];
  LODWORD(v29) = (181304767 * v29 - ((362609534 * v29 + 101572548) & 0x36A73A36) + 1582992637) ^ *(_DWORD *)&v98[4 * (HIBYTE(v278) ^ 0xC1)];
  int v294 = v23 - ((2 * v23) & 0x36A73A36);
  int v270 = v29 - 435617590 + (~(2 * v29) | 0x33EDFE6D);
  unsigned int v180 = v255 ^ 0xEEA2BFA8;
  LODWORD(v29) = *(_DWORD *)&v95[4 * (((v255 ^ 0xEEA2BFA8) >> 16) ^ 0x86)] ^ ((((v255 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                             + 201545841
                                                                                             - ((2
                                                                                               * (((v255 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                               + 160207960) & 0x808148A));
  LODWORD(v23) = (181304767 * *(_DWORD *)&v100[4 * (v255 ^ 0x68)] - 1022955550) ^ *(_DWORD *)&v96[4 * (BYTE1(v255) ^ 0x55)] ^ (v29 - ((2 * v29) & 0xCC120192) - 435617591);
  unsigned int v256 = v283 ^ 0x231B9DB5;
  int v170 = ((v283 ^ 0x231B9DB5u) >> 16);
  unsigned int v273 = (v170 ^ 0xC1) + 201545842 + ((2 * (v170 ^ 0xC1) + 88) & 0x8A ^ 0xF7F7EBFF);
  LODWORD(v178) = v23 - ((2 * v23) & 0x36A73A36);
  int v121 = BYTE2(v278);
  unsigned int v265 = (BYTE2(v278) ^ 0x45) + 201545842 + ((2 * (BYTE2(v278) ^ 0x45) + 88) & 0x8A ^ 0xF7F7EBFF);
  unsigned int v122 = v319 ^ 0x4BB3AC6B;
  unsigned int v163 = v315 ^ 0x7B;
  int v123 = *(_DWORD *)&v100[4 * (v313 ^ 0x74)];
  unsigned int v124 = *(_DWORD *)(v20 - 176);
  LODWORD(v43) = *(_DWORD *)(v20 - 200);
  LODWORD(v23) = *(_DWORD *)&v100[4 * (v283 ^ 0x75)];
  BYTE1(v112) = BYTE1(v327);
  int v125 = *(_DWORD *)&v100[4 * (v327 ^ 0x2A)];
  LODWORD(v21) = *(_DWORD *)&v100[4 * (v319 ^ 0x52)];
  int v284 = 181304767 * *(_DWORD *)&v100[4 * (v280 ^ 0x60)] - 1022955550;
  int v320 = 181304767 * *(_DWORD *)&v100[4 * (v323 ^ 0xFB)] - 1022955550;
  int v314 = 181304767 * *(_DWORD *)&v100[4 * (*(_DWORD *)(v20 - 120) ^ 0xB8)] - 1022955550;
  int v316 = 181304767 * *(_DWORD *)&v100[4 * (v89 ^ 0xAC)] - 1022955550;
  int v279 = 181304767 * *(_DWORD *)&v100[4 * v181] - 1022955550;
  int v281 = 181304767 * *(_DWORD *)&v100[4 * (v305 ^ 0xF0)] - 1022955550;
  int v324 = 181304767 * *(_DWORD *)&v100[4 * (v124 ^ 0x57)] - 1022955550;
  int v224 = 181304767 * *(_DWORD *)&v100[4 * v168] - 1022955550;
  HIDWORD(v171) = 181304767 * *(_DWORD *)&v100[4 * (v43 ^ 0x78)] - 1022955550;
  HIDWORD(v177) = 181304767 * v23 - 1022955550;
  LODWORD(v182) = 181304767 * v21 - 1022955550;
  LODWORD(v21) = (181304767 * v123 - ((362609534 * v123 + 101572548) & 0x36A73A36) + 1582992637) ^ *(_DWORD *)&v98[4 * v163];
  LODWORD(v23) = *(_DWORD *)&v95[4 * (BYTE2(v325) ^ 0x6F)] ^ ((BYTE2(v325) ^ 0x42)
                                                            + 201545842
                                                            + ((2 * (BYTE2(v325) ^ 0x42) + 88) & 0x8A ^ 0xF7F7EBFF)) ^ (181304767 * *(_DWORD *)&v100[4 * (v325 ^ 0xD6)] - 1022955550);
  LODWORD(v23) = (v23 - ((2 * v23) & 0xCC120192) - 435617591) ^ *(_DWORD *)&v96[4 * (BYTE1(v325) ^ 0x95)];
  LODWORD(v100) = *(_DWORD *)&v95[4 * (BYTE2(v122) ^ 0x3C)] ^ ((BYTE2(v122) ^ 0x11)
                                                             + 201545842
                                                             + ((2 * (BYTE2(v122) ^ 0x11) + 88) & 0x8A ^ 0xF7F7EBFF));
  unsigned int v126 = (181304767 * v125 - 1022955550) ^ ((BYTE2(v327) ^ 0x37)
                                          + 201545842
                                          + ((2
                                            * (((BYTE2(v327) ^ 0x37) + 44) & 0x47 ^ (BYTE2(v327) ^ 0x37 | 0xFFFFFFFD))) ^ 0x8081405)) ^ *(_DWORD *)&v95[4 * (BYTE2(v327) ^ 0x1A)];
  int v127 = (v126 - ((2 * v126) & 0x36A73A36) - 1689019109) ^ *(_DWORD *)&v98[4 * (HIBYTE(v327) ^ 0xF9)];
  unsigned int v128 = v321 ^ 0x1A;
  int v129 = *(_DWORD *)(v20 - 232);
  HIDWORD(v167) = *(_DWORD *)&v95[4 * (v262 ^ 0x61)];
  *(_DWORD *)(v20 - 232) = *(_DWORD *)&v95[4 * (v172 ^ 0x7D)];
  int v211 = *(_DWORD *)&v95[4 * (v210 ^ 0x48)];
  LODWORD(v164) = *(_DWORD *)&v95[4 * (v175 ^ 0xA2)];
  LODWORD(v173) = *(_DWORD *)&v95[4 * (v170 ^ 0xEC)];
  int v263 = *(_DWORD *)&v95[4 * (v121 ^ 0x68)];
  int v322 = *(_DWORD *)&v95[4 * (v129 ^ 0x1A)];
  LODWORD(v95) = ((*(_DWORD *)(v20 - 256) >> 15) & 0x58 ^ 0x48) + (v129 ^ 0x4C64A1B);
  int v268 = *(_DWORD *)&v96[4 * v267];
  LODWORD(v171) = *(_DWORD *)&v96[4 * (v303 ^ 0x8E)];
  *(_DWORD *)(v20 - 256) = v95 + 121441862 + ((2 * v95) & 0x8A ^ 0xF7F7EBFF);
  *(_DWORD *)(v20 - 120) = *(_DWORD *)&v96[4 * (BYTE1(*(_DWORD *)(v20 - 120)) ^ 0x85)];
  *(_DWORD *)(v20 - 160) = *(_DWORD *)&v96[4 * (BYTE1(*(_DWORD *)(v20 - 160)) ^ 0xBD)];
  HIDWORD(v173) = *(_DWORD *)&v96[4 * (BYTE1(v89) ^ 0xB4)];
  int v130 = v23 - ((2 * v23) & 0x36A73A36);
  LODWORD(v162) = *(_DWORD *)&v96[4 * v193];
  HIDWORD(v162) = *(_DWORD *)&v96[4 * v128];
  int v194 = *(_DWORD *)&v96[4 * v185];
  *(_DWORD *)(v20 - 168) = *(_DWORD *)&v96[4 * (BYTE1(*(_DWORD *)(v20 - 168)) ^ 0xD6)];
  int v245 = *(_DWORD *)&v96[4 * (v208 ^ 0xEE)];
  int v328 = *(_DWORD *)&v96[4 * (BYTE1(*(_DWORD *)(v20 - 184)) ^ 0xD7)];
  HIDWORD(v161) = *(_DWORD *)&v96[4 * (BYTE1(v43) ^ 0x76)];
  int v131 = *(_DWORD *)&v96[4 * (BYTE1(*(_DWORD *)(v20 - 192)) ^ 0x16)];
  LODWORD(v161) = *(_DWORD *)&v96[4 * (v317 ^ 0xBE)];
  *(_DWORD *)(v20 - 184) = *(_DWORD *)&v96[4 * v259];
  *(_DWORD *)(v20 - 192) = *(_DWORD *)&v96[4 * (BYTE1(*(_DWORD *)(v20 - 140)) ^ 0xA7)];
  LODWORD(v169) = *(_DWORD *)&v96[4 * v165];
  int v260 = *(_DWORD *)&v96[4 * (BYTE1(*(_DWORD *)(v20 - 136)) ^ 0xBE)];
  *(_DWORD *)(v20 - 200) = *(_DWORD *)&v96[4 * (*(_DWORD *)(v20 - 220) ^ 0x84)];
  *(_DWORD *)(v20 - 220) = *(_DWORD *)&v96[4 * (BYTE1(v112) ^ 0x2E)];
  int v132 = *(_DWORD *)&v96[4 * (BYTE1(*(_DWORD *)(v20 - 248)) ^ 0xC8)];
  HIDWORD(v164) = *(_DWORD *)&v98[4 * (HIBYTE(v295) ^ 0xB2)];
  unsigned int v289 = v288 - 435617591;
  int v286 = v285 - 435617591;
  unsigned int v318 = v250 - 435617591;
  LODWORD(v186) = v246 - 435617591;
  HIDWORD(v160) = v228 - 435617591;
  LODWORD(v160) = v198 - 435617591;
  *(_DWORD *)(v20 - 248) = v188 - 435617591;
  unsigned int v251 = v116 - ((2 * v116) & 0xCC120192) - 435617591;
  HIDWORD(v186) = v205 - 435617591;
  LODWORD(v23) = v166 - 435617591;
  unsigned int v296 = v190 - 435617591;
  unsigned int v229 = v291 - 435617591;
  int v206 = v275 - 435617591;
  LODWORD(a15) = v21 - ((2 * v21) & 0xCC120192) - 435617591;
  unsigned int v247 = v127 - ((2 * v127) & 0xCC120192) - 435617591;
  *(_DWORD *)(v20 - 216) = *(_DWORD *)&v98[4 * (*(_DWORD *)(v20 - 216) ^ 7)];
  HIDWORD(v159) = *(_DWORD *)&v98[4 * v234];
  int v276 = *(_DWORD *)&v98[4 * (HIBYTE(*(_DWORD *)(v20 - 132)) ^ 0x29)];
  unsigned int v133 = HIBYTE(v196);
  int v197 = *(_DWORD *)&v98[4 * (HIBYTE(v124) ^ 0xB8)];
  int v209 = *(_DWORD *)&v98[4 * v133];
  int v199 = *(_DWORD *)&v98[4 * (v230 ^ 0x4B)];
  int v231 = *(_DWORD *)&v98[4 * (HIBYTE(*(_DWORD *)(v20 - 128)) ^ 0x49)];
  LODWORD(v167) = *(_DWORD *)&v98[4 * v202];
  int v134 = *(_DWORD *)&v98[4 * ((v43 >> 24) ^ 0xA6)];
  uint64_t v135 = *(unsigned int *)&v98[4 * HIBYTE(v184)];
  int v235 = *(_DWORD *)&v98[4 * v301];
  unsigned int v136 = v132 ^ (v100 - ((2 * v100) & 0xCC120192) - 435617591);
  *(_DWORD *)(v20 - 176) = *(_DWORD *)&v98[4 * HIBYTE(v256)];
  int v257 = *(_DWORD *)&v98[4 * (*(_DWORD *)(v20 - 240) ^ 0x38)];
  LODWORD(v159) = *(_DWORD *)&v98[4 * HIBYTE(v180)];
  HIDWORD(v182) = *(_DWORD *)&v98[4 * (HIBYTE(v325) ^ 0xBB)];
  HIDWORD(v178) = *(_DWORD *)&v98[4 * HIBYTE(v122)];
  uint64_t v137 = (v304 - 1689019109);
  int v203 = v253 - 1689019109;
  uint64_t v138 = v240 - 1689019109;
  uint64_t v139 = (v215 - 1689019109);
  *(_DWORD *)(v20 - 240) = v222 - 1689019109;
  int v326 = v243 - 1689019109;
  uint64_t v140 = (v192 - 1689019109);
  int v241 = v299 - 1689019109;
  uint64_t v141 = (v294 - 1689019109);
  uint64_t v142 = (v178 - 1689019109);
  int v143 = v130 - 1689019109;
  int v144 = v136 - ((2 * v136) & 0x36A73A36) - 1689019109;
  int v145 = HIDWORD(v311) ^ v311 ^ 0x6285F181;
  int v146 = v23 ^ v131 ^ v145;
  int v147 = *(_DWORD *)(v20 - 152);
  uint64_t v148 = (uint64_t)*(&off_10018D100 + (v147 ^ 0x8E));
  unint64_t v149 = (char *)*(&off_10018D100 + v147 - 202) - 8;
  uint64_t v150 = (char *)*(&off_10018D100 + (v147 ^ 0x49)) - 12;
  int v151 = v147;
  unint64_t v152 = (char *)*(&off_10018D100 + v147 - 194) - 8;
  unsigned int v153 = (v152[*(unsigned __int8 *)(v20 - 109) ^ 0x41] ^ 0x51) & 0xFF00FFFF | (((v149[*(unsigned __int8 *)(v20 - 111) ^ 0x40] - 112) ^ 0x5A) << 16) | ((v150[*(unsigned __int8 *)(v20 - 110) ^ 0xBBLL] ^ 0x97) << 8) | ((*(unsigned __int8 *)(v148 + (*(unsigned __int8 *)(v20 - 112) ^ 0x1ELL)) ^ (*(unsigned __int8 *)(v20 - 112) + (~(2 * *(unsigned __int8 *)(v20 - 112)) | 0xA5) + 46) ^ 0x84) << 24);
  int v154 = v152[*(unsigned __int8 *)(v20 - 97) ^ 0x74] ^ 0xF6 | (((v149[*(unsigned __int8 *)(v20 - 99) ^ 0xF3] ^ 2)
                                                                                                  - 112) << 16) | ((v150[*(unsigned __int8 *)(v20 - 98) ^ 0x20] ^ 0x7D) << 8) | ((*(unsigned __int8 *)(v148 + (*(unsigned __int8 *)(v20 - 100) ^ 0xF3)) ^ (*(unsigned __int8 *)(v20 - 100) - ((2 * *(unsigned __int8 *)(v20 - 100)) & 0x5A) + 45) ^ 0x85) << 24);
  uint64_t v302 = v150;
  unsigned int v155 = (v152[*(unsigned __int8 *)(v20 - 105) ^ 0xE4] ^ 0x67) & 0xFF00FFFF | ((*(unsigned __int8 *)(v148 + (*(unsigned __int8 *)(v20 - 108) ^ 0x3ELL)) ^ (*(unsigned __int8 *)(v20 - 108) - ((2 * *(unsigned __int8 *)(v20 - 108)) & 0x5A) + 45) ^ 0xFFFFFFE1) << 24) | (((v149[*(unsigned __int8 *)(v20 - 107) ^ 0x27] - 112) ^ 0x96) << 16) | ((v150[*(unsigned __int8 *)(v20 - 106) ^ 9] ^ 0x92) << 8);
  unsigned int v156 = (v152[*(unsigned __int8 *)(v20 - 101) ^ 0xF2] ^ 0xDE) & 0xFF00FFFF | ((*(unsigned __int8 *)(v148 + (*(unsigned __int8 *)(v20 - 104) ^ 0xD3)) ^ (*(unsigned __int8 *)(v20 - 104) - ((2 * *(unsigned __int8 *)(v20 - 104)) & 0x5A) + 45) ^ 0xE0) << 24) | ((v150[*(unsigned __int8 *)(v20 - 102) ^ 0xBELL] ^ 0x35) << 8) & 0xFF00FFFF | (((v149[*(unsigned __int8 *)(v20 - 103) ^ 0xE9] - 112) ^ 0x8A) << 16);
  if ((v146 & 0x80) != 0) {
    int v157 = -128;
  }
  else {
    int v157 = 128;
  }
  *(_DWORD *)(v20 - 128) = v154 ^ 0x5599F23E;
  *(_DWORD *)(v20 - 132) = v153 ^ 0x395EE58F;
  *(_DWORD *)(v20 - 136) = v155 ^ 0xEEDFE561;
  *(_DWORD *)(v20 - 140) = v156 ^ 0x7D787039;
  HIDWORD(v297) = v296 ^ v161;
  LODWORD(v297) = v134 ^ v217 ^ HIDWORD(v161) ^ v164 ^ HIDWORD(v171);
  HIDWORD(v292) = v140 ^ v135;
  LODWORD(v292) = v284 ^ v268 ^ v289;
  HIDWORD(v287) = v286 ^ v171;
  LODWORD(v287) = HIDWORD(v164) ^ v312 ^ HIDWORD(v167) ^ v137;
  HIDWORD(v282) = v160 ^ v162;
  LODWORD(v282) = HIDWORD(v160) ^ HIDWORD(v162) ^ v281;
  HIDWORD(v277) = v138 ^ HIDWORD(v159) ^ v279;
  LODWORD(v277) = v139 ^ v276;
  HIDWORD(v271) = v169 ^ *(_DWORD *)(v20 - 176) ^ v273 ^ v173 ^ HIDWORD(v177);
  LODWORD(v271) = v260 ^ v265 ^ v263 ^ v270;
  HIDWORD(v266) = v142 ^ v159;
  LODWORD(v266) = v141 ^ v257;
  HIDWORD(v261) = HIDWORD(v186) ^ v328;
  LODWORD(v261) = v167 ^ v237 ^ v211 ^ (HIDWORD(v169) - 1689019109);
  HIDWORD(v254) = (v177 - 1689019109) ^ v231;
  LODWORD(v254) = v224 ^ v245 ^ v251;
  HIDWORD(v248) = v182 ^ HIDWORD(v178) ^ v144;
  LODWORD(v248) = v247 ^ *(_DWORD *)(v20 - 220);
  HIDWORD(v244) = v143 ^ HIDWORD(v182);
  LODWORD(v244) = *(_DWORD *)(v20 - 200) ^ *(_DWORD *)(v20 - 256) ^ v322 ^ a15;
  HIDWORD(v238) = v241 ^ v235;
  LODWORD(v238) = *(_DWORD *)(v20 - 184) ^ v229;
  HIDWORD(v232) = v206 ^ *(_DWORD *)(v20 - 192);
  LODWORD(v232) = v186 ^ *(_DWORD *)(v20 - 160);
  HIDWORD(v226) = v318 ^ *(_DWORD *)(v20 - 120) ^ v314;
  LODWORD(v226) = v316 ^ HIDWORD(v173) ^ v225;
  HIDWORD(v223) = v320 ^ *(_DWORD *)(v20 - 216) ^ v203;
  LODWORD(v223) = *(_DWORD *)(v20 - 248) ^ *(_DWORD *)(v20 - 168);
  HIDWORD(v218) = v194 ^ v197 ^ *(_DWORD *)(v20 - 232) ^ v220 ^ v324;
  LODWORD(v218) = v326 ^ v199;
  HIDWORD(v212) = *(_DWORD *)(v20 - 240) ^ v209;
  LODWORD(v212) = *(_DWORD *)(v20 - 208) - 356513342;
  HIDWORD(v207) = (v157 + (v146 ^ 0x2497E332)) ^ v145;
  LODWORD(v207) = v151 + 994873107;
  HIDWORD(v200) = (v151 + 841) ^ 0x426;
  LODWORD(v200) = (v151 + 841) & 0x9F9A4A03;
  HIDWORD(v195) = (v151 + 841) ^ 0x48D;
  LODWORD(v195) = (v151 + 841) ^ 0x467;
  *(_DWORD *)(v20 - 120) = v151 + 841;
  HIDWORD(a17) = (v151 + 841) ^ 0x47A;
  return sub_100076DA8(243, v140, v137, v139, v142, v138, v141, v135, v159, v160, v161, v162, v164, v167, v169, v171, v173, v177, v178,
           v182,
           v186,
           a15,
           a16,
           a17,
           v195,
           v200,
           v207,
           v212,
           v218,
           v223,
           v226,
           v232,
           v238,
           v244,
           v248,
           v254,
           v261,
           v266,
           v271,
           v277,
           v282,
           v287,
           v292,
           v297,
           v152,
           v302,
           v149,
           v148,
           v306,
           v307,
           v308,
           v309,
           v311);
}

uint64_t sub_100076DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v59 = v56 & 0xFFFFFFF2 ^ ((a27 & 0xC4B3761F) + 2003155293);
  *(void *)(v58 - 176) = v59;
  char v60 = *(unsigned char *)(a47 + (*(unsigned __int8 *)(v57 + v59) ^ 0xF3));
  uint64_t v61 = v56 & 0xFFFFFFFE ^ 0x7765BF5D;
  *(void *)(v58 - 152) = v61;
  int v62 = ((v60 ^ 2) - 112) << 16;
  uint64_t v63 = *(unsigned __int8 *)(v57 + v61) ^ 0x57;
  uint64_t v64 = v56 & 0xFFFFFFF5 ^ 0x7765BF5F;
  *(void *)(v58 - 160) = v64;
  uint64_t v65 = *(unsigned __int8 *)(v57 + v64) ^ 0xB6;
  int v66 = ((*(unsigned char *)(a47 + v63) - 112) ^ 0xF6) << 16;
  uint64_t v67 = v56 & 0xFFFFFFFB ^ 0x7765BF5D;
  *(void *)(v58 - 192) = v67;
  LODWORD(v65) = (*(unsigned __int8 *)(a46 + v65) ^ 0x18) << 8;
  uint64_t v68 = *(unsigned __int8 *)(v57 + v67);
  int v69 = *(unsigned __int8 *)(a48 + (v68 ^ 0x9A));
  uint64_t v70 = v56 & 0xFFFFFFF8 ^ 0x7765BF5F;
  *(void *)(v58 - 232) = v70;
  LODWORD(v68) = v69 ^ (v68 - ((2 * v68) & 0x5A) + 45) ^ 0xFFFFFFCF;
  uint64_t v71 = *(unsigned __int8 *)(v57 + v70) ^ 0xD6;
  uint64_t v72 = v56 & 0xFFFFFFFD ^ 0x7765BF5F;
  *(void *)(v58 - 216) = v72;
  LODWORD(v68) = *(unsigned __int8 *)(a45 + v71) ^ 0x34 | (v68 << 24);
  LODWORD(v71) = *(unsigned __int8 *)(a46 + *(unsigned __int8 *)(v57 + v72));
  uint64_t v73 = v56 & 0xFFFFFFFC ^ 0x7765BF5F;
  *(void *)(v58 - 184) = v73;
  unsigned int v74 = v66 | ((v71 ^ 0xA) << 8);
  LODWORD(v71) = *(unsigned __int8 *)(a45 + (*(unsigned __int8 *)(v57 + v73) ^ 0x74));
  uint64_t v75 = v56 & 0xFFFFFFF3 ^ 0x7765BF5D;
  *(void *)(v58 - 168) = v75;
  int v76 = v74 | v71 ^ 0xF6;
  LODWORD(v71) = *(unsigned __int8 *)(a48 + (*(unsigned __int8 *)(v57 + v75) ^ 0x6ELL)) ^ (*(unsigned __int8 *)(v57 + v75)
                                                                                         - ((2
                                                                                           * *(unsigned __int8 *)(v57 + v75)) & 0x5A)
                                                                                         + 45) ^ 0x51;
  uint64_t v77 = v56 ^ 0x7765BF5Du;
  *(void *)(v58 - 208) = v77;
  int v78 = v62 | (v71 << 24);
  uint64_t v218 = v56 & 0xFFFFFFF7 ^ 0x7765BF5D;
  int v79 = v76 | ((*(unsigned __int8 *)(a48 + (*(unsigned __int8 *)(v57 + v77) ^ 0x15)) ^ (*(unsigned __int8 *)(v57 + v77)
                                                                                        - ((2
                                                                                          * *(unsigned __int8 *)(v57 + v77)) & 0x5A)
                                                                                        + 45) ^ 0xAE) << 24);
  unsigned int v80 = *(unsigned __int8 *)(a48 + (*(unsigned __int8 *)(v57 + v218) ^ 0x46)) ^ (*(unsigned __int8 *)(v57 + v218)
                                                                                 - ((2 * *(unsigned __int8 *)(v57 + v218)) & 0x5A)
                                                                                 + 45) ^ 0xFFFFFFE7;
  uint64_t v81 = v56 & 0xFFFFFFF1 ^ 0x7765BF5F;
  *(void *)(v58 - 200) = v81;
  LODWORD(v65) = v65 | (v80 << 24);
  int v82 = *(unsigned __int8 *)(a46 + (*(unsigned __int8 *)(v57 + v81) ^ 0xD5)) ^ 0x82;
  uint64_t v83 = v56 & 0xFFFFFFFA ^ 0x7765BF5D;
  *(void *)(v58 - 240) = v83;
  int v84 = v78 | (v82 << 8);
  uint64_t v85 = v56 & 0xFFFFFFF4 ^ 0x7765BF5F;
  *(void *)(v58 - 256) = v85;
  LODWORD(v68) = v68 & 0xFF00FFFF | (((*(unsigned char *)(a47 + (*(unsigned __int8 *)(v57 + v83) ^ 0x9DLL))
                                                      - 112) ^ 0xF7) << 16);
  int v86 = *(unsigned __int8 *)(a45 + (*(unsigned __int8 *)(v57 + v85) ^ 0xC2)) ^ 0xD3 | v65;
  uint64_t v217 = v56 & 0xFFFFFFF6 ^ 0x7765BF5D;
  uint64_t v87 = *(unsigned __int8 *)(v57 + v217) ^ 0x3ELL;
  *(_DWORD *)(v58 - 220) = 2003156831;
  uint64_t v216 = v56 & 0xFFFFFFF9 ^ 0x7765BF5F;
  uint64_t v88 = *(unsigned __int8 *)(v57 + v216) ^ 0xA4;
  unsigned int v89 = v86 & 0xFF00FFFF | (((*(unsigned char *)(a47 + v87) - 112) ^ 0xDF) << 16);
  uint64_t v90 = v56 & 0xFFFFFFF0 ^ 0x7765BF5F;
  *(void *)(v58 - 248) = v90;
  int v215 = v68 | ((*(unsigned __int8 *)(a46 + v88) ^ 0xD2) << 8);
  uint64_t v91 = (uint64_t)*(&off_10018D100 + SHIDWORD(a26));
  LODWORD(v87) = *(_DWORD *)(v91 + 4 * (((unsigned __int16)(v215 ^ a50) >> 8) ^ 0x21u)) ^ ((((unsigned __int16)(v215 ^ a50) >> 8) ^ 0x4C) - 1395247466 - ((2 * (((v215 ^ a50) >> 8) ^ 0xB71C4C)) & 0x12C));
  LODWORD(v88) = v87 + 463208426 - ((2 * v87) & 0x3737FFD4);
  uint64_t v92 = (uint64_t)*(&off_10018D100 + *(_DWORD *)(v58 - 120) - 849);
  LODWORD(v87) = v79 ^ HIDWORD(a50) ^ 0x730032AA;
  int v93 = v88 ^ *(_DWORD *)(v92 + 4 * ((v79 ^ BYTE4(a50)) ^ 0xAAu));
  int v214 = *(unsigned __int8 *)(a45 + (*(unsigned __int8 *)(v57 + v90) ^ 0x47)) ^ 0xF6 | v84;
  unsigned int v94 = *(_DWORD *)(v91 + 4 * (((unsigned __int16)(a49 ^ v214) >> 8) ^ 0x44u)) ^ ((((unsigned __int16)(a49 ^ v214) >> 8) ^ 0x29) - 1395247466 - (((a49 ^ v214) >> 7) & 0x12C));
  uint64_t v95 = (char *)*(&off_10018D100 + *(_DWORD *)(v58 - 120) - 1000) - 8;
  int v96 = *(_DWORD *)&v95[4 * (((v89 ^ HIDWORD(a49)) >> 16) ^ 0x68)];
  HIDWORD(v98) = v96 ^ 0x38E;
  LODWORD(v98) = v96 ^ 0x63082000;
  int v97 = v98 >> 12;
  unsigned int v99 = v94 - 904581027 - ((2 * v94) & 0x942A60BA);
  int v100 = *(_DWORD *)&v95[4 * (BYTE2(v79) ^ BYTE6(a50))];
  HIDWORD(v98) = v100 ^ 0x38E;
  LODWORD(v98) = v100 ^ 0x63082000;
  uint64_t v101 = (uint64_t)*(&off_10018D100 + (int)a26);
  LODWORD(v68) = v99 ^ *(_DWORD *)(v101 + 4 * (((v215 ^ a50) >> 24) ^ 0xB7)) ^ (v98 >> 12);
  int v102 = *(_DWORD *)&v95[4 * (((a49 ^ v214) >> 16) ^ 9)];
  HIDWORD(v98) = v102 ^ 0x38E;
  LODWORD(v98) = v102 ^ 0x63082000;
  int v103 = ((unsigned __int16)(v89 ^ WORD2(a49)) >> 8) ^ *(_DWORD *)(v92
                                                                                  + 4
                                                                                  * ((v215 ^ a50) ^ 0xFBu)) ^ *(_DWORD *)(v91 + 4 * (((unsigned __int16)(v89 ^ WORD2(a49)) >> 8) ^ 0x23u)) ^ (v98 >> 12);
  unsigned int v104 = (v103 ^ 0xB74DC932) - 904581026 + ((2 * ((v103 ^ 0xB74DC932) & 0x4A15305F ^ v103 & 2)) ^ 0xFFFFFFFB);
  int v105 = *(_DWORD *)&v95[4 * (((v215 ^ a50) >> 16) ^ 0x1C)];
  HIDWORD(v98) = v105 ^ 0x38E;
  LODWORD(v98) = v105 ^ 0x63082000;
  int v106 = *(_DWORD *)(v101 + 4 * (((v89 ^ HIDWORD(a49)) >> 24) ^ 0xF6)) ^ (BYTE1(v87)
                                                                          - 1395247466
                                                                          - ((v87 >> 7) & 0x12C)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v87) ^ 0x6Du)) ^ ((v98 >> 12) - 904581027 - ((2 * (v98 >> 12)) & 0x942A60BA));
  unsigned int v107 = HIDWORD(a44) ^ v97 ^ *(_DWORD *)(v101 + 4 * (((a49 ^ v214) >> 24) ^ 0x40)) ^ (v93 - 904581027 - ((2 * v93) & 0x942A60BA));
  LODWORD(v88) = a44 ^ *(_DWORD *)(v92 + 4 * ((a49 ^ v214) ^ 0x10u)) ^ (v106
                                                                                         + 463208426
                                                                                         - ((2 * v106) & 0x3737FFD4));
  unsigned int v108 = HIDWORD(a43) ^ *(_DWORD *)(v92 + 4 * ((v89 ^ BYTE4(a49)) ^ 0x5Fu)) ^ (v68
                                                                                                + 463208426
                                                                                                - ((2 * v68) & 0x3737FFD4));
  unsigned int v109 = HIDWORD(a27) ^ *(_DWORD *)(v101 + 4 * BYTE3(v87)) ^ v104;
  LODWORD(v87) = v107 ^ 0xF9388C2F;
  LODWORD(v68) = *(_DWORD *)&v95[4 * ((v107 ^ 0xF9388C2F) >> 16)];
  HIDWORD(v98) = v68 ^ 0x38E;
  LODWORD(v98) = v68 ^ 0x63082000;
  LODWORD(v68) = v98 >> 12;
  int v110 = *(_DWORD *)&v95[4 * (BYTE2(v88) ^ 0x22)];
  HIDWORD(v98) = v110 ^ 0x38E;
  LODWORD(v98) = v110 ^ 0x63082000;
  int v111 = v98 >> 12;
  int v112 = *(_DWORD *)&v95[4 * (BYTE2(v108) ^ 0x66)];
  HIDWORD(v98) = v112 ^ 0x38E;
  LODWORD(v98) = v112 ^ 0x63082000;
  int v113 = (v98 >> 12) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v109) ^ 5u)) ^ ((BYTE1(v109) ^ 0x68)
                                                                    - 1395247466
                                                                    - ((v109 >> 7) & 0x12C));
  LODWORD(v68) = (v68 + 463208426 - ((2 * v68) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v108 ^ 0xB6u));
  int v114 = (v113 + 463208426 - ((2 * v113) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v107 ^ 0x61u));
  unsigned int v115 = (((unsigned __int16)(v107 ^ 0x8C2F) >> 8) - 1395247466 - (((v107 ^ 0xF9388C2F) >> 7) & 0x12C)) ^ 0xD678EAEF ^ *(_DWORD *)(v91 + 4 * (((unsigned __int16)(v107 ^ 0x8C2F) >> 8) ^ 0x6Du));
  int v116 = *(_DWORD *)(v101 + 4 * (HIBYTE(v108) ^ 0x43)) ^ 0x680F6BE3;
  unsigned int v117 = v115 + v116;
  int v118 = v115 & v116;
  int v119 = *(_DWORD *)&v95[4 * (BYTE2(v109) ^ 0xBD)];
  unsigned int v120 = v117 - 2 * v118;
  HIDWORD(v98) = v119 ^ 0x38E;
  LODWORD(v98) = v119 ^ 0x63082000;
  LODWORD(v87) = *(_DWORD *)(v101 + 4 * BYTE3(v87)) ^ (v111 - 904581027 - ((2 * v111) & 0x942A60BA));
  LODWORD(v87) = (v87 + 463208426 - ((2 * v87) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v109 ^ 0xABu));
  unsigned int v121 = *(_DWORD *)(v101 + 4 * (HIBYTE(v109) ^ 0x42)) ^ HIDWORD(a53) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v88) ^ 0x6Bu)) ^ ((BYTE1(v88) ^ 6) - 1395247466 - 2 * (((v88 >> 8) ^ 0xA82206) & 0x97 ^ (v88 >> 8) & 1)) ^ (v68 - 904581027 - ((2 * v68) & 0x942A60BA));
  LOBYTE(v117) = BYTE1(v108) ^ 0x54;
  unsigned int v122 = a43 ^ *(_DWORD *)(v91 + 4 * (BYTE1(v108) ^ 0x39u)) ^ (v87 - 1395247466 - ((2 * v87) & 0x59AC6D2C));
  unsigned int v123 = HIDWORD(a42) ^ *(_DWORD *)(v101 + 4 * (BYTE3(v88) ^ 0xA8)) ^ (v114 - 904581027 - ((2 * v114) & 0x942A60BA));
  LODWORD(v87) = a42 ^ *(_DWORD *)(v92 + 4 * (v88 ^ 0xBAu)) ^ ((v120 ^ (v98 >> 12))
                                                                                + 463208426
                                                                                - ((2 * (v120 ^ (v98 >> 12))) & 0x3737FFD4));
  LODWORD(v68) = *(_DWORD *)&v95[4 * (BYTE2(v87) ^ 0x79)];
  HIDWORD(v98) = v68 ^ 0x38E;
  LODWORD(v98) = v68 ^ 0x63082000;
  BYTE1(v88) = ((unsigned __int16)(WORD2(a42) ^ *(_WORD *)(v101 + 4 * (BYTE3(v88) ^ 0xA8)) ^ (v114
                                                                                              + 12381
                                                                                              - ((2 * v114) & 0x60BA))) >> 8) ^ 0x68;
  int v124 = ((v98 >> 12) - 904581027 - ((2 * (v98 >> 12)) & 0x942A60BA)) ^ *(_DWORD *)(v101
                                                                                  + 4 * ((v123 ^ 0x2261685E) >> 24));
  LODWORD(v68) = ((BYTE1(v87) ^ 0xD0)
                - 1395247466
                - 2 * (((v87 >> 8) ^ 0x679D0) & 0x9E ^ (v87 >> 8) & 8)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v87) ^ 0xBDu));
  LODWORD(v68) = (v68 + 463208426 - ((2 * v68) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v121 ^ 0x76u));
  int v125 = ((BYTE1(v122) ^ 0xEC) - 1395247466 - 2 * (((v122 >> 8) ^ 0xE5FEC) & 0x97 ^ (v122 >> 8) & 1)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v122) ^ 0x81u));
  int v126 = *(_DWORD *)&v95[4 * (BYTE2(v122) ^ 0x5F)];
  HIDWORD(v98) = v126 ^ 0x38E;
  LODWORD(v98) = v126 ^ 0x63082000;
  int v127 = v98 >> 12;
  HIDWORD(v98) = *(_DWORD *)(v92 + 4 * (v123 ^ 0x5Eu)) ^ 0xF28CD862;
  LODWORD(v98) = HIDWORD(v98);
  int v128 = (v98 >> 28) ^ __ROR4__(*(_DWORD *)(v101 + 4 * (BYTE3(v87) ^ 6)) ^ 0x7462B151 ^ (v125- 904581027- ((2 * v125) & 0x942A60BA)), 28);
  unsigned int v129 = (v127 - 904581027 - ((2 * v127) & 0x942A60BA)) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v121) ^ 0xD2));
  int v130 = *(_DWORD *)&v95[4 * (BYTE2(v123) ^ 0x1B)];
  HIDWORD(v98) = v130 ^ 0x38E;
  LODWORD(v98) = v130 ^ 0x63082000;
  int v131 = v98 >> 12;
  LODWORD(v87) = (v129 + 463208426 - ((2 * v129) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v87 ^ 0x4Cu));
  int v132 = v124 + 463208426 - ((2 * v124) & 0x3737FFD4);
  int v133 = ((v121 >> 8) ^ 0xD2CCC0) & 0x9E ^ (v121 >> 8) & 8;
  int v134 = BYTE1(v121) ^ 0xC0;
  int v135 = *(_DWORD *)&v95[4 * (BYTE2(v121) ^ 0xCC)];
  HIDWORD(v98) = v135 ^ 0x38E;
  LODWORD(v98) = v135 ^ 0x63082000;
  int v136 = HIDWORD(a41) ^ (v98 >> 12) ^ __ROR4__(v128 ^ 0x78071371, 4);
  unsigned int v137 = a41 ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v122) ^ 0xE)) ^ v131 ^ (v68 - 904581026 + ~((2 * v68) & 0x942A60BA));
  LODWORD(v68) = BYTE1(v88);
  LODWORD(v88) = HIDWORD(a40) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v88) ^ 0x6Du)) ^ (v87
                                                                               - 1395247466
                                                                               - ((2 * v87) & 0x59AC6D2C));
  LODWORD(v87) = a40 ^ (v134 - 1395247466 - 2 * v133) ^ *(_DWORD *)(v92 + 4 * ((v122 ^ v117) ^ 0xCAu)) ^ *(_DWORD *)(v91 + 4 * (v134 ^ 0x6Du)) ^ v132;
  unsigned int v138 = v68 ^ 0x4552953C ^ v88;
  LODWORD(v68) = *(_DWORD *)&v95[4 * BYTE2(v138)];
  HIDWORD(v98) = v68 ^ 0x38E;
  LODWORD(v98) = v68 ^ 0x63082000;
  int v139 = v98 >> 12;
  BYTE1(v122) = BYTE1(v136) ^ 0xE7;
  LODWORD(v68) = *(_DWORD *)&v95[4 * ((v136 ^ 0x99FEE750) >> 16)];
  HIDWORD(v98) = v68 ^ 0x38E;
  LODWORD(v98) = v68 ^ 0x63082000;
  LODWORD(v68) = (v98 >> 12) + 463208426 - ((2 * (v98 >> 12)) & 0x3737FFD4);
  int v140 = BYTE1(v137);
  int v141 = (BYTE1(v137) ^ 0x29) - 1395247466 - ((v137 >> 7) & 0x12C);
  int v142 = *(_DWORD *)&v95[4 * (BYTE2(v87) ^ 2)];
  HIDWORD(v98) = v142 ^ 0x38E;
  LODWORD(v98) = v142 ^ 0x63082000;
  LODWORD(v90) = (BYTE1(v138) - 1395247466 - ((v138 >> 7) & 0x12C)) ^ *(_DWORD *)(v92
                                                                                + 4 * (v137 ^ 0x72u)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v138) ^ 0x6Du)) ^ v68;
  LODWORD(v68) = *(_DWORD *)(v92 + 4 * v138) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v137) ^ 0xA7)) ^ (v98 >> 12) ^ 0xD18ECFB7;
  int v143 = *(_DWORD *)&v95[4 * (BYTE2(v137) ^ 0x3B)];
  HIDWORD(v98) = v143 ^ 0x38E;
  LODWORD(v98) = v143 ^ 0x63082000;
  LODWORD(v88) = HIDWORD(a39) ^ ((BYTE1(v87) ^ 0xD9) - 1395247466 - ((2 * ((v87 >> 8) ^ 0x9802D9)) & 0x12C)) ^ *(_DWORD *)(v92 + 4 * (v136 ^ 0x1Eu)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v87) ^ 0xB4u)) ^ (v98 >> 12) ^ *(_DWORD *)(v101 + 4 * (BYTE3(v88) ^ 0x61));
  unsigned int v144 = a39 ^ *(_DWORD *)(v101 + 4 * (BYTE3(v87) ^ 0x98)) ^ (v90 - 904581027 - ((2 * v90) & 0x942A60BA));
  LODWORD(v90) = v68 - 1395247466 - ((2 * v68) & 0x59AC6D2C);
  LODWORD(v68) = HIDWORD(a38) ^ *(_DWORD *)(v92 + 4 * (v87 ^ 0x3Du)) ^ v141 ^ *(_DWORD *)(v101 + 4 * ((v136 ^ 0x99FEE750) >> 24)) ^ *(_DWORD *)(v91 + 4 * (v140 ^ 0x44u));
  LODWORD(v87) = *(_DWORD *)&v95[4 * (BYTE2(v88) ^ 0x32)];
  HIDWORD(v98) = v87 ^ 0x38E;
  LODWORD(v98) = v87 ^ 0x63082000;
  int v145 = v98 >> 12;
  LODWORD(v87) = v68 ^ v139;
  unsigned int v146 = a38 ^ *(_DWORD *)(v91 + 4 * (((unsigned __int16)(v136 ^ 0xE750) >> 8) ^ 0x6Du)) ^ v90;
  LODWORD(v90) = *(_DWORD *)&v95[4 * (((v68 ^ v139) >> 16) ^ 0x66)];
  HIDWORD(v98) = v90 ^ 0x38E;
  LODWORD(v98) = v90 ^ 0x63082000;
  int v147 = ((unsigned __int16)(v68 ^ v139) >> 8) ^ 0x30;
  unsigned int v148 = v147 - 1395247466 - 2 * (((v87 >> 8) ^ 0x46630) & 0x9F ^ (v87 >> 8) & 9);
  LOBYTE(v143) = v88 ^ 0xC5;
  LODWORD(v90) = *(_DWORD *)(v92 + 4 * ((v146 ^ BYTE1(v122)) ^ 0x41u)) ^ (((unsigned __int16)(v88 ^ 0xCAC5) >> 8)
                                                                                           - 1395247466
                                                                                           - (((v88 ^ 0x3A48CAC5) >> 7) & 0x12C)) ^ *(_DWORD *)(v91 + 4 * (((unsigned __int16)(v88 ^ 0xCAC5) >> 8) ^ 0x6Du)) ^ ((v98 >> 12) + 463208426 - ((2 * (v98 >> 12)) & 0x3737FFD4));
  LODWORD(v68) = *(_DWORD *)&v95[4 * (BYTE2(v146) ^ 0x81)];
  HIDWORD(v98) = v68 ^ 0x38E;
  LODWORD(v98) = v68 ^ 0x63082000;
  LODWORD(v68) = ((v98 >> 12) - 904581027 - ((2 * (v98 >> 12)) & 0x942A60BA)) ^ *(_DWORD *)(v101
                                                                                          + 4
                                                                                          * ((v88 ^ 0x3A48CAC5) >> 24));
  LODWORD(v68) = (v68 + 463208426 - ((2 * v68) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v87 ^ 0xB2u));
  int v149 = ((BYTE1(v146) ^ 0xA0) - 1395247466 - 2 * (((v146 >> 8) ^ 0x6881A0) & 0x9F ^ (v146 >> 8) & 9)) ^ (v145 + 463208426 - ((2 * v145) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v144 ^ 0xFCu)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v146) ^ 0xCDu));
  LODWORD(v88) = *(_DWORD *)&v95[4 * (BYTE2(v144) ^ 0xC6)];
  LODWORD(v98) = __ROR4__((v88 >> 12) ^ 0x26BEDA0, 17) ^ 0xEE910136;
  HIDWORD(v98) = v98;
  int v150 = (v98 >> 15) + (v88 << 20);
  LODWORD(v88) = v149 - 904581027 - ((2 * v149) & 0x942A60BA);
  unsigned int v151 = HIDWORD(a37) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v144) ^ 0x75u)) ^ (v68 - 1395247466 - ((2 * v68) & 0x59AC6D2C));
  LODWORD(v88) = a37 ^ *(_DWORD *)(v101 + 4 * (BYTE3(v87) ^ 4)) ^ v88;
  LODWORD(v87) = HIDWORD(a36) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v144) ^ 0x5A)) ^ (v90
                                                                                 - 904581027
                                                                                 - ((2 * v90) & 0x942A60BA));
  unsigned int v152 = a36 ^ v148 ^ *(_DWORD *)(v92 + 4 * v143) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v146) ^ 0x68)) ^ *(_DWORD *)(v91 + 4 * (v147 ^ 0x6Du)) ^ v150;
  LODWORD(v68) = ((unsigned __int16)(WORD2(a37) ^ *(_WORD *)(v91 + 4 * (BYTE1(v144) ^ 0x75u)) ^ (v68 + 13974 - ((2 * v68) & 0x6D2C))) >> 8) ^ 0x9D;
  LODWORD(v90) = (v68 - 1395247466 + (~(2 * ((v151 >> 8) ^ 0xC2489D)) | 0xFFFFFED3) + 1) ^ *(_DWORD *)(v91 + 4 * (v68 ^ 0x6D));
  unsigned int v153 = *(_DWORD *)&v95[4 * (BYTE2(v88) ^ 0x8F)];
  unsigned int v154 = v87 ^ 0xCFB8D782;
  int v155 = *(_DWORD *)&v95[4 * ((v87 ^ 0xCFB8D782) >> 16)];
  HIDWORD(v98) = v155 ^ 0x38E;
  LODWORD(v98) = v155 ^ 0x63082000;
  LODWORD(v90) = *(_DWORD *)(v92 + 4 * (v152 ^ 0x3Du)) ^ (v153 << 20) ^ (v153 >> 12) ^ 0x38E63082 ^ (v90 + 463208426 - ((2 * v90) & 0x3737FFD4));
  LODWORD(v68) = ((v98 >> 12) + 463208426 - ((2 * (v98 >> 12)) & 0x3737FFD4)) ^ *(_DWORD *)(v92
                                                                                          + 4
                                                                                          * ((v151 ^ BYTE1(v144)) ^ 0x3Fu));
  int v156 = v90 - 904581027 - ((2 * v90) & 0x942A60BA);
  LODWORD(v90) = v68 - 904581027 - ((2 * v68) & 0x942A60BA);
  int v157 = BYTE1(v88) ^ 0xD9;
  LODWORD(v68) = v157 - 1395247466 - ((2 * ((v88 >> 8) ^ 0xC78FD9)) & 0x12C);
  int v158 = *(_DWORD *)&v95[4 * (BYTE2(v151) ^ 0x48)];
  HIDWORD(v98) = v158 ^ 0x38E;
  LODWORD(v98) = v158 ^ 0x63082000;
  LODWORD(v87) = ((BYTE1(v152) ^ 0xAF) - 1395247466 - ((2 * ((v152 >> 8) ^ 0xCFE5AF)) & 0x12C)) ^ *(_DWORD *)(v92 + 4 * (v87 ^ 0xCCu)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v152) ^ 0xC2u)) ^ ((v98 >> 12) + 463208426 - ((2 * (v98 >> 12)) & 0x3737FFD4));
  int v159 = *(_DWORD *)&v95[4 * (BYTE2(v152) ^ 0xE5)];
  HIDWORD(v98) = v159 ^ 0x38E;
  LODWORD(v98) = v159 ^ 0x63082000;
  unsigned int v160 = HIDWORD(a35) ^ (BYTE1(v154) - 1395247466 - ((v154 >> 7) & 0x12C)) ^ *(_DWORD *)(v92
                                                                                       + 4
                                                                                       * (v88 ^ 0x50u)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v154) ^ 0x6Du)) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v151) ^ 0xC2)) ^ (v98 >> 12);
  LODWORD(v88) = a35 ^ *(_DWORD *)(v101 + 4 * (BYTE3(v88) ^ 0xC7)) ^ (v87 - 904581027 - ((2 * v87) & 0x942A60BA));
  unsigned int v161 = HIDWORD(a34) ^ *(_DWORD *)(v101 + 4 * HIBYTE(v154)) ^ v156;
  unsigned int v162 = a34 ^ v68 ^ *(_DWORD *)(v91 + 4 * (v157 ^ 0x6Du)) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v152) ^ 0xCF)) ^ v90;
  int v163 = *(_DWORD *)&v95[4 * (BYTE2(v88) ^ 0xE6)];
  HIDWORD(v98) = v163 ^ 0x38E;
  LODWORD(v98) = v163 ^ 0x63082000;
  int v164 = v98 >> 12;
  int v165 = *(_DWORD *)&v95[4 * (BYTE2(v161) ^ 0x1C)];
  unsigned int v166 = (((unsigned __int16)(v162 ^ 0xCCA2) >> 8) - 1395247466 - (((v162 ^ 0x33C8CCA2) >> 7) & 0x12C)) ^ *(_DWORD *)(v91 + 4 * (((unsigned __int16)(v162 ^ 0xCCA2) >> 8) ^ 0x6Du));
  HIDWORD(v98) = v165 ^ 0x38E;
  LODWORD(v98) = v165 ^ 0x63082000;
  LODWORD(v90) = (v98 >> 12) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v88) ^ 0xD9u)) ^ ((BYTE1(v88) ^ 0xB4)
                                                                              - 1395247466
                                                                              - 2
                                                                              * (((v88 >> 8) ^ 0x4FE6B4) & 0x9F ^ (v88 >> 8) & 9));
  LODWORD(v90) = (v90 + 463208426 - ((2 * v90) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v160 ^ 0x5Du));
  int v167 = (v166 + 463208426 - ((2 * v166) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v161 ^ 0x3Au));
  HIDWORD(v98) = *(_DWORD *)(v92 + 4 * (v88 ^ 0x96u)) ^ 0x1B9BFFEA;
  LODWORD(v98) = *(_DWORD *)(v92 + 4 * (v88 ^ 0x96u));
  unsigned int v168 = *(_DWORD *)(v92 + 4 * (v162 ^ 0xA2u)) ^ (((unsigned __int16)(v160 ^ 0xDB5D) >> 8)
                                                                   - 1395247466
                                                                   - (((v160 ^ 0xC8BDDB5D) >> 7) & 0x12C)) ^ *(_DWORD *)(v91 + 4 * (((unsigned __int16)(v160 ^ 0xDB5D) >> 8) ^ 0x6Du)) ^ (v164 + 463208426 - ((2 * v164) & 0x3737FFD4));
  HIDWORD(v98) = (v98 >> 29) ^ 0x6615DA09;
  LODWORD(v98) = HIDWORD(v98);
  int v169 = (v98 >> 3) - 1395247466 - ((2 * (v98 >> 3)) & 0x59AC6D2C);
  LODWORD(v68) = *(_DWORD *)&v95[4 * ((v160 ^ 0xC8BDDB5D) >> 16)];
  HIDWORD(v98) = v68 ^ 0x38E;
  LODWORD(v98) = v68 ^ 0x63082000;
  LODWORD(v68) = v98 >> 12;
  LODWORD(v87) = *(_DWORD *)&v95[4 * ((v162 ^ 0x33C8CCA2) >> 16)];
  HIDWORD(v98) = v87 ^ 0x38E;
  LODWORD(v98) = v87 ^ 0x63082000;
  unsigned int v170 = HIDWORD(a33) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v162) ^ 0x17)) ^ (v90 - 904581027 - ((2 * v90) & 0x942A60BA));
  LODWORD(v90) = v169 ^ *(_DWORD *)(v91 + 4 * (BYTE1(v161) ^ 0xD1u)) ^ (v98 >> 12);
  unsigned int v171 = *(_DWORD *)(v101 + 4 * (HIBYTE(v160) ^ 0xEC)) ^ a53 ^ (v90 - 904581027 - ((2 * v90) & 0x942A60BA));
  LODWORD(v87) = a33 ^ *(_DWORD *)(v101 + 4 * (BYTE3(v88) ^ 0x4F)) ^ v68 ^ (v167
                                                                            - 904581027
                                                                            - ((2 * v167) & 0x942A60BA));
  unsigned int v172 = HIDWORD(a32) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v161) ^ 0x1B)) ^ (v168 - 904581027 - ((2 * v168) & 0x942A60BA));
  LODWORD(v90) = *(_DWORD *)&v95[4 * (BYTE2(v172) ^ 0x7E)];
  HIDWORD(v98) = v90 ^ 0x38E;
  LODWORD(v98) = v90 ^ 0x63082000;
  LODWORD(v90) = v98 >> 12;
  LODWORD(v68) = *(_DWORD *)&v95[4 * (BYTE2(v87) ^ 1)];
  HIDWORD(v98) = v68 ^ 0x38E;
  LODWORD(v98) = v68 ^ 0x63082000;
  LODWORD(v68) = ((v98 >> 12) + 463208426 - ((2 * (v98 >> 12)) & 0x3737FFD4)) ^ *(_DWORD *)(v92
                                                                                          + 4
                                                                                          * (v170 ^ 0xC6u));
  LODWORD(v88) = ((BYTE1(v170) ^ 0x71) - 1395247466 - ((2 * ((v170 >> 8) ^ 0xF25B71)) & 0x12C)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v170) ^ 0x1Cu));
  int v173 = *(_DWORD *)&v95[4 * (BYTE2(v170) ^ 0x5B)];
  HIDWORD(v98) = v173 ^ 0x38E;
  LODWORD(v98) = v173 ^ 0x63082000;
  int v174 = v98 >> 12;
  LODWORD(v88) = (v88 - 904581027 - ((2 * v88) & 0x942A60BA)) ^ *(_DWORD *)(v101 + 4 * (BYTE3(v87) ^ 0x1F));
  unsigned int v175 = BYTE1(v161) ^ 0x73F4E0AF ^ v171;
  int v176 = *(_DWORD *)&v95[4 * BYTE2(v175)];
  HIDWORD(v98) = v176 ^ 0x38E;
  LODWORD(v98) = v176 ^ 0x63082000;
  int v177 = v98 >> 12;
  int v178 = v88 + 463208426 - ((2 * v88) & 0x3737FFD4);
  HIDWORD(v98) = v90 ^ ((BYTE1(v87) ^ 0x81) - 1395247466 - ((2 * ((v87 >> 8) ^ 0x1F0181)) & 0x12C)) ^ 0xD678EAEF ^ *(_DWORD *)(v91 + 4 * (BYTE1(v87) ^ 0xECu));
  LODWORD(v98) = HIDWORD(v98);
  LODWORD(v98) = (v98 >> 11) ^ __ROR4__(*(_DWORD *)(v101 + 4 * (HIBYTE(v170) ^ 0xF2)) ^ 0x680F6BE3, 11) ^ 0xD490839A;
  HIDWORD(v98) = v98;
  LODWORD(v87) = a32 ^ *(_DWORD *)(v92 + 4 * (v87 ^ 0xB8u)) ^ ((BYTE1(v172) ^ 0xAA)
                                                                                - 1395247466
                                                                                - ((2 * ((v172 >> 8) ^ 0x967EAA)) & 0x12C)) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v171) ^ 0x57)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v172) ^ 0xC7u)) ^ v174;
  LODWORD(v88) = HIDWORD(a31) ^ (BYTE1(v175) - 1395247466 - ((v175 >> 7) & 0x12C)) ^ *(_DWORD *)(v101
                                                                                               + 4
                                                                                               * (HIBYTE(v172) ^ 0x96)) ^ *(_DWORD *)(v91 + 4 * (BYTE1(v175) ^ 0x6Du)) ^ (v68 - 904581027 - ((2 * v68) & 0x942A60BA));
  LODWORD(v68) = a31 ^ *(_DWORD *)(v92 + 4 * (v172 ^ 0x88u)) ^ v177 ^ v178;
  unsigned int v179 = HIDWORD(a30) ^ *(_DWORD *)(v92 + 4 * (BYTE1(v161) ^ 0xAFu ^ v171)) ^ ((v98 >> 21)
                                                                                                + 463208426
                                                                                                - ((2 * (v98 >> 21)) & 0x3737FFD4));
  BYTE2(v172) = BYTE2(v68) ^ 0x4A;
  int v180 = *(_DWORD *)&v95[4 * (BYTE2(v87) ^ 0x65)];
  HIDWORD(v98) = v180 ^ 0x38E;
  LODWORD(v98) = v180 ^ 0x63082000;
  int v181 = v98 >> 12;
  unsigned int v182 = *(_DWORD *)(v91 + 4 * (BYTE1(v88) ^ 0x96u)) ^ ((BYTE1(v88) ^ 0xFB)
                                                        - 1395247466
                                                        - ((2 * ((v88 >> 8) ^ 0x3EA2FB)) & 0x12C));
  int v183 = (v182 + 463208426 - ((2 * v182) & 0x3737FFD4)) ^ *(_DWORD *)(v92 + 4 * (v68 ^ 0x75u));
  int v184 = *(_DWORD *)&v95[4 * (BYTE2(v88) ^ 0xA2)];
  HIDWORD(v98) = v184 ^ 0x38E;
  LODWORD(v98) = v184 ^ 0x63082000;
  LODWORD(v90) = (((unsigned __int16)(v68 ^ 0xF075) >> 8)
                - 1395247466
                - (((v68 ^ 0xB54AF075) >> 7) & 0x12C)) ^ (v98 >> 12) ^ *(_DWORD *)(v91
                                                                                               + 4
                                                                                               * (((unsigned __int16)(v68 ^ 0xF075) >> 8) ^ 0x6Du));
  LODWORD(v68) = *(_DWORD *)(v101 + 4 * (BYTE3(v68) ^ 0x91));
  int v185 = *(_DWORD *)(v101 + 4 * (BYTE3(v88) ^ 0x3E));
  int v186 = *(_DWORD *)(v101 + 4 * (BYTE3(v87) ^ 0x16));
  LODWORD(v90) = (v90 - 904581027 - ((2 * v90) & 0x942A60BA)) ^ *(_DWORD *)(v101 + 4 * (HIBYTE(v179) ^ 0xED));
  v179 ^= 0xC9AF1D8F;
  int v187 = BYTE1(v179);
  int v188 = BYTE1(v179) - 1395247466 - ((v179 >> 7) & 0x12C);
  LODWORD(v101) = *(_DWORD *)(v92 + 4 * v179);
  unsigned int v189 = *(_DWORD *)&v95[4 * BYTE2(v179)];
  int v190 = *(_DWORD *)&v95[4 * BYTE2(v172)];
  HIDWORD(v98) = v190 ^ 0x38E;
  LODWORD(v98) = v190 ^ 0x63082000;
  unsigned int v191 = a30 ^ *(_DWORD *)(v92 + 4 * (v88 ^ 0x9Au)) ^ v181 ^ v68 ^ v188 ^ *(_DWORD *)(v91 + 4 * (v187 ^ 0x6Du));
  LODWORD(v88) = HIDWORD(a29) ^ ((BYTE1(v87) ^ 0xF) - 1395247466 - ((2 * ((v87 >> 8) ^ 0x16650F)) & 0x12C)) ^ v185 ^ *(_DWORD *)(v91 + 4 * (BYTE1(v87) ^ 0x62u)) ^ v101 ^ (v98 >> 12);
  LODWORD(v95) = a29 ^ *(_DWORD *)(v92 + 4 * (v87 ^ 0xD8u)) ^ (v90
                                                                                + 463208426
                                                                                - ((2 * v90) & 0x3737FFD4));
  unsigned int v192 = HIDWORD(a28) ^ v186 ^ (v189 >> 12) ^ (v189 << 20) ^ (v183 - 904581027 - ((2 * v183) & 0x942A60BA));
  int v193 = *(_DWORD *)(v58 - 120);
  int v194 = (char *)*(&off_10018D100 + v193 - 961) - 12;
  uint64_t v195 = (char *)*(&off_10018D100 + SHIDWORD(a25)) - 12;
  unsigned int v196 = *(_DWORD *)&v194[4 * (v95 ^ 7)] ^ *(_DWORD *)&v195[4
                                                                           * (((unsigned __int16)(WORD2(a28) ^ v186 ^ (v189 >> 12) ^ (v183 + 12381 - ((2 * v183) & 0x60BA))) >> 8) ^ 0x13)] ^ 0x8FBBF48E;
  LODWORD(v92) = *(_DWORD *)&v195[4 * (BYTE1(v191) ^ 0xBE)];
  int v197 = *(_DWORD *)&v195[4 * ((unsigned __int16)((unsigned __int16)v95 ^ 0x6F07) >> 8)];
  LODWORD(v87) = *(_DWORD *)&v195[4 * (BYTE1(v88) ^ 0x17)];
  LODWORD(v195) = v196 - 324413455 - ((2 * v196) & 0xD953AFE2);
  unsigned int v198 = (char *)*(&off_10018D100 + v193 - 967) - 8;
  uint64_t v199 = *(unsigned int *)&v198[4 * ((v95 >> 24) ^ 0xEF)];
  int v200 = *(_DWORD *)&v198[4 * (BYTE3(v88) ^ 0x52)];
  LODWORD(v101) = *(_DWORD *)&v198[4 * (HIBYTE(v192) ^ 0xA5)];
  LODWORD(v198) = *(_DWORD *)&v198[4 * (HIBYTE(v191) ^ 0xE0)];
  LODWORD(v195) = v200 ^ v195;
  int v201 = (char *)*(&off_10018D100 + (int)a25) - 8;
  int v202 = *(_DWORD *)&v201[4 * (BYTE2(v192) ^ 0x5A)];
  uint64_t v203 = *(unsigned int *)&v201[4 * (BYTE2(v95) ^ 0x2A)];
  LODWORD(v95) = *(_DWORD *)&v201[4 * (BYTE2(v88) ^ 0x5E)];
  LODWORD(v195) = *(_DWORD *)&v201[4 * (BYTE2(v191) ^ 5)] ^ (v195
                                                           + 1642847319
                                                           - ((2 * v195) & 0xC3D7B8AE));
  LODWORD(v201) = *(_DWORD *)&v194[4 * (v191 ^ 0x6B)];
  LODWORD(v88) = *(_DWORD *)&v194[4 * (v88 ^ 0x42)];
  int v204 = *(_DWORD *)&v194[4 * (v192 ^ 0x59)];
  unsigned int v205 = *(_DWORD *)(v58 - 140) ^ a51 ^ (v195 - ((2 * v195) & 0xFFF5E576) - 331077);
  uint64_t v206 = (uint64_t)*(&off_10018D100 + v193 - 904);
  *(unsigned char *)(a54 + v218) = *(unsigned char *)(v206 + (HIBYTE(v205) ^ 0xD7)) ^ 0x36;
  LODWORD(v195) = ((v202 ^ 0xF6F42E9D ^ v197) - 324413455 - ((2 * (v202 ^ 0xF6F42E9D ^ v197)) & 0xD953AFE2)) ^ v198;
  LODWORD(v195) = (v195 + 413402692 - ((2 * v195) & 0x31480C88)) ^ v88;
  LODWORD(v195) = *(_DWORD *)(v58 - 136) ^ HIDWORD(a51) ^ (v195 - ((2 * v195) & 0xD8BACFC6) + 1818060771);
  uint64_t v207 = (uint64_t)*(&off_10018D100 + v193 - 1004);
  *(unsigned char *)(a54 + *(void *)(v58 - 232)) = (*(unsigned char *)(v207 + (v195 ^ 0xC7)) - 125) ^ 0x5F;
  uint64_t v208 = (uint64_t)*(&off_10018D100 + v193 - 943);
  LODWORD(v198) = *(unsigned __int8 *)(v208 + (BYTE1(v195) ^ 0x13));
  HIDWORD(v98) = v198 ^ 0x1F;
  LODWORD(v98) = v198 << 24;
  *(unsigned char *)(a54 + v216) = (v98 >> 30) ^ 0x40;
  int v209 = v203 ^ v201 ^ 0x794FDA13;
  LODWORD(v198) = (v203 ^ v201) & 4;
  uint64_t v210 = v209 & 0x6CA9D7F5;
  LODWORD(v198) = (v209 - 324413455 - 2 * (v210 ^ v198)) ^ v101;
  LODWORD(v198) = (v198 - ((2 * v198) & 0x2E3FE594) - 1759513910) ^ v87;
  LODWORD(v87) = *(_DWORD *)(v58 - 132) ^ HIDWORD(a52) ^ (v198 - ((2 * v198) & 0x77B8CE1A) - 1143183603);
  LODWORD(v198) = *(unsigned __int8 *)(v208
                                     + ((unsigned __int16)(*(_WORD *)(v58 - 132) ^ WORD2(a52) ^ ((_WORD)v198 - ((2 * (_WORD)v198) & 0xCE1A) + 26381)) >> 8));
  HIDWORD(v98) = v198 ^ 0x1F;
  LODWORD(v98) = v198 << 24;
  *(unsigned char *)(a54 + *(void *)(v58 - 216)) = (v98 >> 30) ^ 0x7E;
  uint64_t v211 = (uint64_t)*(&off_10018D100 + SHIDWORD(a24));
  *(unsigned char *)(a54 + v217) = *(unsigned char *)(v211 + (BYTE2(v205) ^ 0xFBLL)) ^ 0xCB;
  LODWORD(v198) = ((v92 ^ 0x7BB6253B ^ v199) + 1642847319 - ((2 * (v92 ^ 0x7BB6253B ^ v199)) & 0xC3D7B8AE)) ^ v95;
  LODWORD(v198) = v204 ^ (v198 + 413402692 - ((2 * v198) & 0x31480C88));
  LODWORD(v198) = *(_DWORD *)(v58 - 128) ^ a52 ^ (v198 - ((2 * v198) & 0xAE36E03E) - 686067681);
  *(unsigned char *)(a54 + *(void *)(v58 - 176)) = *(unsigned char *)(v211 + (BYTE2(v198) ^ 0xB8)) ^ 0x18;
  *(unsigned char *)(a54 + *(void *)(v58 - 256)) = (*(unsigned char *)(v207 + (v205 ^ 0x1BLL)) - 125) ^ 0x7D;
  *(unsigned char *)(a54 + *(void *)(v58 - 240)) = *(unsigned char *)(v211 + (BYTE2(v195) ^ 3)) ^ 0x66;
  *(unsigned char *)(a54 + *(void *)(v58 - 192)) = *(unsigned char *)(v206 + ((v195 >> 24) ^ 0x6DLL)) ^ 0xCE;
  LODWORD(v195) = *(unsigned __int8 *)(v208 + (BYTE1(v205) ^ 0x92));
  HIDWORD(v98) = v195 ^ 0x1F;
  LODWORD(v98) = v195 << 24;
  *(unsigned char *)(a54 + *(void *)(v58 - 160)) = (v98 >> 30) ^ 0xD2;
  uint64_t v212 = *(void *)(v58 - 208);
  *(unsigned char *)(a54 + v212) = *(unsigned char *)(v206 + (BYTE3(v87) ^ 0x53)) ^ 0x22;
  *(unsigned char *)(a54 + *(void *)(v58 - 184)) = (*(unsigned char *)(v207 + (v87 ^ 0x95)) - 125) ^ 0xAF;
  *(unsigned char *)(a54 + *(void *)(v58 - 248)) = (*(unsigned char *)(v207 + (v198 ^ 0x64)) - 125) ^ 0x27;
  *(unsigned char *)(a54 + *(void *)(v58 - 168)) = *(unsigned char *)(v206 + ((v198 >> 24) ^ 0x6ELL)) ^ 0xB4;
  LODWORD(v195) = *(unsigned __int8 *)(v208 + (BYTE1(v198) ^ 0x1FLL));
  HIDWORD(v98) = v195 ^ 0x1F;
  LODWORD(v98) = v195 << 24;
  *(unsigned char *)(a54 + *(void *)(v58 - 200)) = (v98 >> 30) ^ 0x58;
  *(unsigned char *)(a54 + *(void *)(v58 - 152)) = *(unsigned char *)(v211 + (BYTE2(v87) ^ 0xC8)) ^ 0x49;
  return (*(uint64_t (**)(_UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a56 + 8 * ((2769 * (((v212 + 2003156845 - 2 * ((v212 + 16) & *(_DWORD *)(v58 - 220) ^ v56 & 2)) ^ 0x7765BF5Du) < a28)) ^ (v193 - 504))))(&off_10018D100, 109, v210, 1642847319, v199, v203, 826805384, 2485805242, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54);
}

uint64_t sub_100078A6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((240
                                * (((v3 + v4 + 463 - 828) & (2 * (**(unsigned __int8 **)(a2 + 8) - 42)))
                                 + ((**(unsigned __int8 **)(a2 + 8) - 42) ^ v2) != ((7 * (v4 ^ 0x156)) ^ (v2 - 413)))) ^ v4)))();
}

uint64_t sub_100078AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = LOBYTE(STACK[0x2F0]) ^ 0x89;
  if (v5 == 1)
  {
    unsigned int v11 = STACK[0x2D4];
    unsigned int v12 = STACK[0x2D0];
    LOBYTE(STACK[0x2C8]) = ((8 * LOBYTE(STACK[0x2D4])) ^ 0x70)
                         - (((v4 ^ 0xA2) - 4) & (2 * ((8 * LOBYTE(STACK[0x2D4])) ^ 0x70)))
                         + 119;
    LOBYTE(STACK[0x2C9]) = ((v11 >> 5) ^ 0xCD) - ((2 * ((v11 >> 5) ^ 0xCD)) & 0xEF) + 119;
    LOBYTE(STACK[0x2CA]) = ((v11 >> 13) ^ 0x53) - ((2 * ((v11 >> 13) ^ 0x53)) & 0xEF) + 119;
    LOBYTE(STACK[0x2CB]) = ((v11 >> 21) ^ 0x65) - ((2 * ((v11 >> 21) ^ 0x65)) & 0xEF) + 119;
    HIDWORD(v13) = v12 ^ 6;
    LODWORD(v13) = v11 ^ 0x60000000;
    LOBYTE(STACK[0x2CC]) = (v13 >> 29) - ((2 * (v13 >> 29)) & 0xEF) + 119;
    LOBYTE(STACK[0x2CD]) = ((v12 >> 5) ^ 0x1B) - ((2 * ((v12 >> 5) ^ 0x1B)) & 0xEF) + 119;
    LOBYTE(STACK[0x2CE]) = ((v12 >> 13) ^ 0xA8) - ((2 * ((v12 >> 13) ^ 0xA8)) & 0xEF) + 119;
    int v10 = ((v12 >> 20) | 0x11) - (v12 >> 21) + 119;
    goto LABEL_5;
  }
  if (v5 == 2)
  {
    unsigned int v6 = STACK[0x2D0];
    unsigned int v7 = STACK[0x2D4];
    LOBYTE(STACK[0x2C8]) = ((LODWORD(STACK[0x2D0]) >> 20) | 0x11) - (LODWORD(STACK[0x2D0]) >> 21) + 119;
    unsigned int v8 = (v6 >> (-71 * (v4 ^ 0x42) + 41)) ^ 0xFFFFFFA8;
    LOBYTE(STACK[0x2C9]) = v8 - ((2 * v8) & 0xEF) + 119;
    LOBYTE(STACK[0x2CA]) = ((v6 >> 5) ^ 0x1B) - ((2 * ((v6 >> 5) ^ 0x1B)) & 0xEF) + 119;
    HIDWORD(v9) = v6 ^ 6;
    LODWORD(v9) = v7 ^ 0x60000000;
    LOBYTE(STACK[0x2CB]) = (v9 >> 29) - ((2 * (v9 >> 29)) & 0xEF) + 119;
    LOBYTE(STACK[0x2CC]) = ((v7 >> 21) ^ 0x65) - ((2 * ((v7 >> 21) ^ 0x65)) & 0xEF) + 119;
    LOBYTE(STACK[0x2CD]) = ((v7 >> 13) ^ 0x53) + (~(2 * ((v7 >> 13) ^ 0x53)) | 0x11) + 120;
    LOBYTE(STACK[0x2CE]) = ((v7 >> 5) ^ 0xCD) - ((2 * ((v7 >> 5) ^ 0xCD)) & 0xEF) + 119;
    int v10 = ((8 * v7) ^ 0x70) - 32 * (((8 * v7) ^ 0x70) >> 4) + 119;
LABEL_5:
    LOBYTE(STACK[0x2CF]) = v10;
  }
  return sub_100073FFC(a1, a2, a3, a4);
}

uint64_t sub_100078CE4(uint64_t a1, int a2, int a3, int a4)
{
  int v9 = v5 + v4;
  int v10 = v9 + v6;
  if ((v9 + v6) <= 0x40) {
    int v10 = a2;
  }
  return (*(uint64_t (**)(void))(v8 + 8 * ((13 * (a4 - v9 + ((v7 - 1726) ^ 0x1EF) - 156 >= a3 + v10)) ^ v7)))();
}

uint64_t sub_100078D30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((*(_DWORD *)(*(void *)(a1 + 8) + v4) == v2)
                                     * (((v3 + 1994589504) & 0x891CF72D) - 701)) ^ v3)))();
}

uint64_t sub_100078D74(uint64_t a1, uint64_t a2, char a3)
{
  BOOL v10 = (((*(unsigned __int8 *)(a2 + 9) - 1) << (a3 + v6 + 71 + 56)) & v8) + ((*(unsigned __int8 *)(a2 + 9) - 1) ^ v7) == v7
     && (v3 + v4 + 4) < 0xC9;
  return (*(uint64_t (**)(void))(v5 + 8 * ((1448 * v10) ^ v6)))();
}

uint64_t sub_100078DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(v6 + 8 * (v7 ^ (117 * ((unint64_t)(a6 - v8 - 1167) < 0x20)))))();
}

uint64_t sub_100078E64()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((56 * (v0 < ((LODWORD(STACK[0x2D4]) - 557) | 0xD4u) - 1187356055)) ^ (LODWORD(STACK[0x2D4]) - 345))))();
}

void sub_100078EA8(int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, int a5)
{
  int *v5 = (a2 + a1 + 792) ^ (v6 + 793) ^ a5;
  JUMPOUT(0x100078EC4);
}

uint64_t sub_100078F2C()
{
  uint64_t v8 = v6;
  unsigned int v7 = (v4 - 946) ^ ((((&v7 | 0xB5CD1467) - (&v7 & 0xB5CD1467)) ^ 0x666F466D) * v0);
  (*(void (**)(unsigned int *))(v2 + 8 * (v4 ^ 0xD78)))(&v7);
  return v3 ^ v1;
}

uint64_t sub_100078FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  int8x16x4_t v38 = vld4q_s8(a5);
  uint8x16_t v30 = (uint8x16_t)veorq_s8(v38.val[2], v29);
  _Q21 = vmovl_high_u8(v30);
  _Q20 = vmovl_u8(*(uint8x8_t *)v30.i8);
  __asm
  {
    SHLL2           V20.4S, V20.8H, #0x10
    SHLL2           V21.4S, V21.8H, #0x10
  }
  return sub_1000790EC(a1, (a29 - 1241));
}

void sub_1000790EC()
{
}

unsigned char *sub_1000791F8(unsigned char *result, unsigned int a2, unint64_t a3)
{
  unint64_t v3 = -(int)result & 7;
  if (v3 > a3) {
    LODWORD(v3) = a3;
  }
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }
  unint64_t v4 = a3 - v3;
  if (v4 >= 8)
  {
    uint64_t v5 = 0x101010101010101 * a2;
    unint64_t v6 = ((v4 >> 3) + 7) >> 3;
    switch((v4 >> 3) & 7)
    {
      case 1uLL:
        goto LABEL_20;
      case 2uLL:
        goto LABEL_19;
      case 3uLL:
        goto LABEL_18;
      case 4uLL:
        goto LABEL_17;
      case 5uLL:
        goto LABEL_16;
      case 6uLL:
        goto LABEL_15;
      case 7uLL:
        goto LABEL_14;
      default:
        do
        {
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_14:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_15:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_16:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_17:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_18:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_19:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_20:
          *(void *)uint64_t result = v5;
          result += 8;
          --v6;
        }
        while (v6);
        break;
    }
  }
  switch(v4 & 7)
  {
    case 1uLL:
      goto LABEL_28;
    case 2uLL:
      goto LABEL_27;
    case 3uLL:
      goto LABEL_26;
    case 4uLL:
      goto LABEL_25;
    case 5uLL:
      goto LABEL_24;
    case 6uLL:
      goto LABEL_23;
    case 7uLL:
      *result++ = a2;
LABEL_23:
      *result++ = a2;
LABEL_24:
      *result++ = a2;
LABEL_25:
      *result++ = a2;
LABEL_26:
      *result++ = a2;
LABEL_27:
      *result++ = a2;
LABEL_28:
      *uint64_t result = a2;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000792E4()
{
  LODWORD(STACK[0x4AC]) = v0 - 135;
  JUMPOUT(0x1000395E8);
}

void *sub_100079354(char **a1, int a2, int a3, int a4, void *a5, char a6, char a7)
{
  unint64_t v13 = a1;
  int v21 = 0;
  *a5 = 0;
  if (!a1 && (!sub_1000925AC(&v21) || (unint64_t v13 = v21) == 0 || !*((_DWORD *)v21 + 4)))
  {
    fwrite("Err: Finding internal NAND exporter failed for fetch tunnel buffer.\n", 0x44uLL, 1uLL, __stderrp);
LABEL_11:
    uint64_t v19 = 0;
    goto LABEL_14;
  }
  int v14 = a3;
  unsigned int v15 = sub_1000794FC((uint64_t)v13, a2, a3, a4, a7);
  if (!v15)
  {
    fprintf(__stderrp, "failed to get data size for cmd option %d\n", a2);
    goto LABEL_11;
  }
  uint64_t v16 = v15;
  size_t v17 = (vm_page_size + v15 - 1) / vm_page_size * vm_page_size;
  int v18 = malloc_type_valloc(v17, 0x7C7CDE6BuLL);
  uint64_t v19 = v18;
  if (v18)
  {
    bzero(v18, v17);
    if (sub_1000795C4((uint64_t)v13, a2, v14, a4, v19, v17, a6, a7))
    {
      *a5 = v16;
    }
    else
    {
      free(v19);
      uint64_t v19 = 0;
      *a5 = 0;
    }
  }
  else
  {
    fwrite("can't allocate buffer!\n", 0x17uLL, 1uLL, __stderrp);
  }
LABEL_14:
  if (v21) {
    sub_1000926F8((uint64_t)v21);
  }
  return v19;
}

uint64_t sub_1000794FC(uint64_t a1, int a2, int a3, int a4, char a5)
{
  kern_return_t v7;
  uint64_t result;
  size_t outputStructCnt;
  unsigned int outputStruct;
  _DWORD inputStruct[3];
  uint64_t v12;
  int v13;

  unint64_t v13 = 0;
  unsigned int v12 = 0;
  outputStruct = 0;
  inputStruct[0] = a2;
  outputStructCnt = 4;
  inputStruct[2] = a4;
  inputStruct[1] = a3 | 1;
  unsigned int v7 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28), inputStruct, 0x18uLL, &outputStruct, &outputStructCnt);
  if (v7)
  {
    if ((a5 & 1) == 0) {
      fprintf(__stderrp, "Error calling CoreDebugTunnel method! - 0x%X\n", v7);
    }
    return 0;
  }
  else
  {
    uint64_t result = outputStruct;
    if (!outputStruct && (a5 & 1) == 0)
    {
      fprintf(__stderrp, "SizeOnly for tunnel command 0x%x returned 0\n", a2);
      return outputStruct;
    }
  }
  return result;
}

uint64_t sub_1000795C4(uint64_t a1, int a2, int a3, int a4, void *outputStruct, size_t a6, char a7, char a8)
{
  kern_return_t v15;
  size_t v16;
  _DWORD inputStruct[3];
  uint64_t v19;
  int v20;
  size_t outputStructCnt;

  LOBYTE(v9) = a7;
  outputStructCnt = a6;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  while (1)
  {
    inputStruct[0] = a2;
    inputStruct[1] = a3;
    inputStruct[2] = a4;
    unsigned int v15 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28), inputStruct, 0x18uLL, outputStruct, &outputStructCnt);
    if (v15 != -536870211) {
      break;
    }
    if ((v9 & 1) == 0) {
      goto LABEL_10;
    }
    if ((a8 & 1) == 0) {
      fprintf(__stderrp, "CoreDebugTunnel 0x%x returned kIOReturnNoMemory\n", a2);
    }
    uint64_t v16 = outputStructCnt;
    outputStructCnt = vm_page_size;
    uint64_t v9 = 1;
    if (vm_page_size == v16) {
      return v9;
    }
  }
  if (!v15) {
    return 1;
  }
LABEL_10:
  if ((a8 & 1) == 0) {
    fprintf(__stderrp, "Error calling CoreDebugTunnel method! - 0x%X\n", v15);
  }
  return 0;
}

void *sub_1000796E8(int a1, void *a2)
{
  return sub_100079354(0, a1, 0, 0, a2, 0, 0);
}

void sub_100079708(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  bzero(__str, 0x400uLL);
  if (!qword_1001B99F8)
  {
    qword_1001B99F8 = (uint64_t)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
    vsnprintf(__str, 0x400uLL, a1, &a9);
    snprintf((char *)qword_1001B99F8, 0x400uLL, "%s", __str);
  }
}

uint64_t sub_1000797D8(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 36) = -1;
  if (a3 < 8) {
    return 0;
  }
  unsigned int v6 = a3 >> 3;
  while (2)
  {
    unint64_t v9 = *a2;
    uint64_t v8 = a2 + 1;
    int v7 = v9;
    unint64_t v10 = HIDWORD(v9);
    unsigned int v11 = v6 - 1;
    if (v9 <= 0x30000000 && v11 >= v10)
    {
      switch(v7)
      {
        case 1:
          uint64_t v13 = *v8;
          int v14 = "version";
          goto LABEL_77;
        case 2:
          uint64_t v13 = *v8;
          int v14 = "hostWriteXacts";
          goto LABEL_77;
        case 3:
          uint64_t v13 = *v8;
          int v14 = "hostReadXacts";
          goto LABEL_77;
        case 4:
          uint64_t v13 = *v8;
          *(void *)(a1 + 72) = *v8;
          int v14 = "hostWrites";
          goto LABEL_77;
        case 5:
          uint64_t v13 = *v8;
          int v14 = "hostWritesDyn";
          goto LABEL_77;
        case 6:
          uint64_t v13 = *v8;
          int v14 = "hostWritesStatic";
          goto LABEL_77;
        case 7:
          uint64_t v13 = *v8;
          *(void *)(a1 + 64) = *v8;
          int v14 = "hostReads";
          goto LABEL_77;
        case 8:
          uint64_t v13 = *v8;
          int v14 = "validLbas";
          goto LABEL_77;
        case 9:
          uint64_t v13 = *v8;
          int v14 = "shutdowns";
          goto LABEL_77;
        case 10:
          uint64_t v13 = *v8;
          int v14 = "boots";
          goto LABEL_77;
        case 11:
          uint64_t v13 = *v8;
          int v14 = "uncleanBoots";
          goto LABEL_77;
        case 12:
          uint64_t v13 = *v8;
          *(void *)(a1 + 144) = *v8;
          int v14 = "IND_pool_free";
          goto LABEL_77;
        case 13:
          uint64_t v13 = *v8;
          *(void *)(a1 + 152) = *v8;
          int v14 = "IND_pool_count";
          goto LABEL_77;
        case 14:
          unsigned int v15 = "hostWriteLogHisto";
          uint64_t v16 = a1;
          int v17 = 14;
          goto LABEL_44;
        case 15:
          unsigned int v15 = "hostReadLogHisto";
          uint64_t v16 = a1;
          int v17 = 15;
LABEL_44:
          int v18 = v8;
          unsigned int v19 = 10;
          goto LABEL_51;
        case 16:
          uint64_t v13 = *v8;
          int v14 = "gcWrites";
          goto LABEL_77;
        case 17:
          uint64_t v13 = *v8;
          *(void *)(a1 + 88) = *v8;
          int v14 = "wearLevMoves";
          goto LABEL_77;
        case 18:
          uint64_t v13 = *v8;
          *(void *)(a1 + 104) = *v8;
          int v14 = "nandWrites";
          goto LABEL_77;
        case 19:
          uint64_t v13 = *v8;
          *(void *)(a1 + 96) = *v8;
          int v14 = "nandReads";
          goto LABEL_77;
        case 20:
          uint64_t v13 = *v8;
          *(void *)(a1 + 112) = *v8;
          int v14 = "bandErases";
          goto LABEL_77;
        case 22:
          uint64_t v13 = *v8;
          int v14 = "numPfail";
          goto LABEL_77;
        case 23:
          uint64_t v13 = *v8;
          int v14 = "numEfail";
          goto LABEL_77;
        case 24:
          uint64_t v13 = *v8;
          int v14 = "numPerformanceRefreshes";
          goto LABEL_77;
        case 27:
          uint64_t v13 = *v8;
          int v14 = "hostWritesMeta";
          goto LABEL_77;
        case 28:
          uint64_t v13 = *v8;
          *(void *)(a1 + 168) = *v8;
          int v14 = "numSleepOps";
          goto LABEL_77;
        case 30:
          uint64_t v13 = *v8;
          int v14 = "cntTimeWentBackWardOnBoot";
          goto LABEL_77;
        case 31:
          uint64_t v13 = *v8;
          int v14 = "cntTimeWentBackWard";
          goto LABEL_77;
        case 34:
          uint64_t v13 = *v8;
          int v14 = "powerOnHours";
          goto LABEL_77;
        case 36:
          uint64_t v13 = *v8;
          int v14 = "smartCritWarnings";
          goto LABEL_77;
        case 37:
          uint64_t v13 = *v8;
          int v14 = "numFlushes";
          goto LABEL_77;
        case 38:
          uint64_t v13 = *v8;
          int v14 = "numUnmap";
          goto LABEL_77;
        case 39:
          uint64_t v13 = *v8;
          int v14 = "numUnmapSec";
          goto LABEL_77;
        case 41:
          uint64_t v13 = *v8;
          int v14 = "clogProgram";
          goto LABEL_77;
        case 42:
          uint64_t v13 = *v8;
          int v14 = "clogPFail";
          goto LABEL_77;
        case 43:
          uint64_t v13 = *v8;
          int v14 = "clogRead";
          goto LABEL_77;
        case 44:
          uint64_t v13 = *v8;
          int v14 = "clogRFail";
          goto LABEL_77;
        case 45:
          uint64_t v13 = *v8;
          *(void *)(a1 + 176) = *v8;
          int v14 = "maxHighEnduranceBlockErases";
          goto LABEL_77;
        case 46:
          uint64_t v13 = *v8;
          int v14 = "numFactoryBad";
          goto LABEL_77;
        case 47:
          uint64_t v13 = *v8;
          int v14 = "numGrownBad";
          goto LABEL_77;
        case 48:
          uint64_t v13 = *v8;
          *(void *)(a1 + 80) = *v8;
          int v14 = "numFreeVirtualBlocks";
          goto LABEL_77;
        case 49:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 56) = *v8;
          int v14 = "bytesPerPage";
          goto LABEL_77;
        case 50:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 52) = *v8;
          int v14 = "pagesPerVirtualBlock";
          goto LABEL_77;
        case 51:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 48) = *v8;
          int v14 = "blocksPerVirtualBlock";
          goto LABEL_77;
        case 52:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 44) = *v8;
          int v14 = "numVirtualBlocks";
          goto LABEL_77;
        case 53:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 32) = *v8;
          int v14 = "exportVersion";
          goto LABEL_77;
        case 54:
          unsigned int v15 = "ECBins";
          uint64_t v16 = a1;
          int v17 = 54;
          goto LABEL_50;
        case 55:
          unsigned int v15 = "RCBins";
          uint64_t v16 = a1;
          int v17 = 55;
LABEL_50:
          int v18 = v8;
          unsigned int v19 = 100;
          goto LABEL_51;
        case 56:
          uint64_t v13 = *v8;
          *(void *)(a1 + 160) = *v8;
          int v14 = "utilFormatTime";
          goto LABEL_77;
        case 57:
          uint64_t v13 = *v8;
          int v14 = "calendarTime";
          goto LABEL_77;
        case 58:
          uint64_t v13 = *v8;
          int v14 = "wallTime";
          goto LABEL_77;
        case 59:
          uint64_t v13 = *v8;
          int v14 = "cmdq_flush_us";
          goto LABEL_77;
        case 60:
          uint64_t v13 = *v8;
          int v14 = "cmdq_unmap_us";
          goto LABEL_77;
        case 61:
          uint64_t v13 = *v8;
          int v14 = "cmdq_pri0_r_us";
          goto LABEL_77;
        case 62:
          uint64_t v13 = *v8;
          int v14 = "cmdq_pri0_w_us";
          goto LABEL_77;
        case 63:
          uint64_t v13 = *v8;
          int v14 = "cmdq_pri1_r_us";
          goto LABEL_77;
        case 64:
          uint64_t v13 = *v8;
          int v14 = "cmdq_pri1_w_us";
          goto LABEL_77;
        case 65:
          uint64_t v13 = *v8;
          int v14 = "cmdq_pri2_r_us";
          goto LABEL_77;
        case 66:
          uint64_t v13 = *v8;
          int v14 = "cmdq_pri2_w_us";
          goto LABEL_77;
        case 67:
          uint64_t v13 = *v8;
          int v14 = "cmdq_pri3_r_us";
          goto LABEL_77;
        case 68:
          uint64_t v13 = *v8;
          int v14 = "cmdq_pri3_w_us";
          goto LABEL_77;
        case 69:
          uint64_t v13 = *v8;
          int v14 = "host_idle_ms";
          goto LABEL_77;
        case 70:
          uint64_t v13 = *v8;
          int v14 = "cmd_hysteresis_window_us";
          goto LABEL_77;
        case 71:
          uint64_t v13 = *v8;
          int v14 = "cmd_lowPriHoldoffDelay_us";
          goto LABEL_77;
        case 72:
          uint64_t v13 = *v8;
          int v14 = "cmd_lowPriHoldoffEnabled";
LABEL_77:
          uint64_t v20 = (void *)a1;
          goto LABEL_78;
        default:
          switch(v7)
          {
            case 73:
              uint64_t v13 = *v8;
              int v14 = "cmd_expedite_num_success";
              goto LABEL_77;
            case 75:
              uint64_t v13 = *v8;
              int v14 = "cmd_expedite_num_failures";
              goto LABEL_77;
            case 76:
              uint64_t v13 = *v8;
              int v14 = "num_trimerase";
              goto LABEL_77;
            case 77:
              uint64_t v13 = *v8;
              int v14 = "staticSizeInMB";
              goto LABEL_77;
            case 80:
              uint64_t v13 = *v8;
              int v14 = "slcInvalidations";
              goto LABEL_77;
            case 81:
              uint64_t v13 = *v8;
              int v14 = "slcGCInvalidations";
              goto LABEL_77;
            case 82:
              uint64_t v13 = *v8;
              int v14 = "hostSectorsDuringGCon";
              goto LABEL_77;
            case 83:
              uint64_t v13 = *v8;
              int v14 = "highWaterMarkSLCUsed";
              goto LABEL_77;
            case 84:
              uint64_t v13 = *v8;
              int v14 = "intermediateBandErases";
              goto LABEL_77;
            case 85:
              uint64_t v13 = *v8;
              int v14 = "intermediatePartitionStart";
              goto LABEL_77;
            case 86:
              uint64_t v13 = *v8;
              int v14 = "userPartitionStart";
              goto LABEL_77;
            case 87:
              uint64_t v13 = *v8;
              int v14 = "iolog_lbas";
              goto LABEL_77;
            case 88:
              unsigned int v15 = "bandsAgeBins";
              uint64_t v16 = a1;
              int v17 = 88;
              goto LABEL_44;
            case 89:
              unsigned int v15 = "intermediateBandsAgeBins";
              uint64_t v16 = a1;
              int v17 = 89;
              goto LABEL_44;
            case 90:
              unsigned int v15 = "qosPerCmdQ";
              uint64_t v16 = a1;
              int v17 = 90;
              int v18 = v8;
              unsigned int v19 = 160;
              goto LABEL_51;
            case 91:
              unsigned int v15 = "maxQosPerCmdQ";
              uint64_t v16 = a1;
              int v17 = 91;
              goto LABEL_44;
            case 92:
              uint64_t v13 = *v8;
              int v14 = "shutdownDuringGC";
              goto LABEL_77;
            case 93:
              unsigned int v15 = "numBandsRefreshedForAgePerTier";
              uint64_t v16 = a1;
              int v17 = 93;
LABEL_130:
              int v18 = v8;
              unsigned int v19 = 3;
              goto LABEL_51;
            case 94:
              unsigned int v15 = "bdrDeltaHot";
              uint64_t v16 = a1;
              int v17 = 94;
LABEL_93:
              int v18 = v8;
              unsigned int v19 = 20;
              goto LABEL_51;
            case 95:
              uint64_t v13 = *v8;
              int v14 = "numRefreshOnClockLoss";
              goto LABEL_77;
            case 96:
              uint64_t v13 = *v8;
              int v14 = "numRefreshOnErrNandRefreshRel";
              goto LABEL_77;
            case 97:
              uint64_t v13 = *v8;
              int v14 = "numBGRefreshMoves";
              goto LABEL_77;
            case 98:
              uint64_t v13 = *v8;
              int v14 = "numBGPaddingMoves";
              goto LABEL_77;
            case 99:
              uint64_t v13 = *v8;
              int v14 = "hostWritesPhoto";
              goto LABEL_77;
            case 100:
              uint64_t v13 = *v8;
              int v14 = "INDPooldFree";
              goto LABEL_77;
            case 101:
              uint64_t v13 = *v8;
              int v14 = "INDContigCount";
              goto LABEL_77;
            case 102:
              uint64_t v13 = *v8;
              int v14 = "INDValidContigCount";
              goto LABEL_77;
            case 103:
              uint64_t v13 = *v8;
              int v14 = "INDMinContigSize";
              goto LABEL_77;
            case 104:
              uint64_t v13 = *v8;
              int v14 = "INDMaxContigSize";
              goto LABEL_77;
            case 105:
              uint64_t v13 = *v8;
              int v14 = "INDAveContigSize";
              goto LABEL_77;
            case 106:
              uint64_t v13 = *v8;
              int v14 = "INDpoolSize";
              goto LABEL_77;
            case 107:
              uint64_t v13 = *v8;
              int v14 = "pushSyncWrites";
              goto LABEL_77;
            case 109:
              uint64_t v13 = *v8;
              int v14 = "cmd_rw_hysteresis_us";
              goto LABEL_77;
            case 110:
              uint64_t v13 = *v8;
              int v14 = "photoFlowMode";
              goto LABEL_77;
            case 112:
              uint64_t v13 = *v8;
              int v14 = "numBandsPaddedForAge";
              goto LABEL_77;
            case 113:
              unsigned int v15 = "bandsPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 113;
              goto LABEL_144;
            case 114:
              unsigned int v15 = "bandsPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 114;
              goto LABEL_102;
            case 115:
              unsigned int v15 = "secsPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 115;
              goto LABEL_144;
            case 116:
              unsigned int v15 = "secsPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 116;
              goto LABEL_102;
            case 118:
              unsigned int v15 = "overWritesPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 118;
              goto LABEL_144;
            case 119:
              unsigned int v15 = "overWritesPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 119;
              goto LABEL_102;
            case 120:
              unsigned int v15 = "padSectorsPerFlow";
              uint64_t v16 = a1;
              int v17 = 120;
              goto LABEL_44;
            case 121:
              unsigned int v15 = "padSizes";
              uint64_t v16 = a1;
              int v17 = 121;
              goto LABEL_144;
            case 122:
              unsigned int v15 = "unmapsPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 122;
LABEL_144:
              int v18 = v8;
              unsigned int v19 = 4;
              goto LABEL_51;
            case 123:
              unsigned int v15 = "unmapsPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 123;
LABEL_102:
              int v18 = v8;
              unsigned int v19 = 5;
              goto LABEL_51;
            case 124:
              unsigned int v15 = "coldestCycle";
              uint64_t v16 = a1;
              int v17 = 124;
              goto LABEL_123;
            case 125:
              unsigned int v15 = "hottestCycle";
              uint64_t v16 = a1;
              int v17 = 125;
LABEL_123:
              int v18 = v8;
              unsigned int v19 = 2;
              goto LABEL_51;
            case 126:
              uint64_t v13 = *v8;
              int v14 = "gcLonlyWrites";
              goto LABEL_77;
            case 127:
              uint64_t v13 = *v8;
              int v14 = "gcPLWrites";
              goto LABEL_77;
            case 129:
              uint64_t v13 = *v8;
              int v14 = "pagesPerVirtualBlockSlc";
              goto LABEL_77;
            case 130:
              uint64_t v13 = *v8;
              int v14 = "bdrPadding";
              goto LABEL_77;
            case 131:
              unsigned int v15 = "errInjCounters";
              uint64_t v16 = a1;
              int v17 = 131;
LABEL_149:
              int v18 = v8;
              unsigned int v19 = 8;
              goto LABEL_51;
            case 132:
              uint64_t v13 = *v8;
              int v14 = "raidSuccessfulReconstructionInternal";
              goto LABEL_77;
            case 133:
              uint64_t v13 = *v8;
              int v14 = "raidSuccessfulReconstructionHost";
              goto LABEL_77;
            case 134:
              uint64_t v13 = *v8;
              int v14 = "raidFailedReconstructionInternal";
              goto LABEL_77;
            case 135:
              uint64_t v13 = *v8;
              int v14 = "raidFailedReconstructionHost";
              goto LABEL_77;
            case 136:
              uint64_t v13 = *v8;
              int v14 = "raidBandsPerHostFlow";
              goto LABEL_77;
            case 137:
              uint64_t v13 = *v8;
              int v14 = "raidSecsPerHostFlow";
              goto LABEL_77;
            case 138:
              uint64_t v13 = *v8;
              int v14 = "gcFreeL";
              goto LABEL_77;
            case 139:
              uint64_t v13 = *v8;
              int v14 = "gcDestinations";
              goto LABEL_77;
            case 140:
              uint64_t v13 = *v8;
              int v14 = "gcFragments";
              goto LABEL_77;
            case 141:
              uint64_t v13 = *v8;
              int v14 = "numMemChoke";
              goto LABEL_77;
            case 142:
              uint64_t v13 = *v8;
              int v14 = "maxMemChokeDuration";
              goto LABEL_77;
            case 143:
              uint64_t v13 = *v8;
              int v14 = "memChokeDuration";
              goto LABEL_77;
            default:
              switch(v7)
              {
                case 144:
                  uint64_t v13 = *v8;
                  int v14 = "numMemExtreme";
                  goto LABEL_77;
                case 145:
                  uint64_t v13 = *v8;
                  int v14 = "maxMemExtremeDuration";
                  goto LABEL_77;
                case 146:
                  uint64_t v13 = *v8;
                  int v14 = "memExtremeDuration";
                  goto LABEL_77;
                case 147:
                  uint64_t v13 = *v8;
                  int v14 = "bandGetsExtreme";
                  goto LABEL_77;
                case 148:
                  uint64_t v13 = *v8;
                  int v14 = "bandGetsLow";
                  goto LABEL_77;
                case 149:
                  uint64_t v13 = *v8;
                  int v14 = "numHostChoke";
                  goto LABEL_77;
                case 152:
                  uint64_t v13 = *v8;
                  int v14 = "AbortSkip_ProgramError";
                  goto LABEL_77;
                case 153:
                  uint64_t v13 = *v8;
                  int v14 = "AbortSkip_ReadErrorOpenBand";
                  goto LABEL_77;
                case 154:
                  uint64_t v13 = *v8;
                  int v14 = "AbortSkip_FailedRebuildingParity";
                  goto LABEL_77;
                case 155:
                  uint64_t v13 = *v8;
                  int v14 = "AbortPad_OpenRefreshBand";
                  goto LABEL_77;
                case 156:
                  uint64_t v13 = *v8;
                  int v14 = "AbortPad_CloseBands";
                  goto LABEL_77;
                case 157:
                  uint64_t v13 = *v8;
                  int v14 = "AbortPad_SetPhoto";
                  goto LABEL_77;
                case 158:
                  uint64_t v13 = *v8;
                  int v14 = "AbortPad_GcNoSource";
                  goto LABEL_77;
                case 159:
                  uint64_t v13 = *v8;
                  int v14 = "AbortPad_Format";
                  goto LABEL_77;
                case 160:
                  uint64_t v13 = *v8;
                  int v14 = "nandDiscoveryDuration";
                  goto LABEL_77;
                case 161:
                  uint64_t v13 = *v8;
                  int v14 = "coreCCEnableDuration";
                  goto LABEL_77;
                case 163:
                  uint64_t v13 = *v8;
                  int v14 = "coreOpenDuration";
                  goto LABEL_77;
                case 164:
                  uint64_t v13 = *v8;
                  int v14 = "coreWritableDuration";
                  goto LABEL_77;
                case 165:
                  uint64_t v13 = *v8;
                  int v14 = "coreClogLoadDuration";
                  goto LABEL_77;
                case 167:
                  uint64_t v13 = *v8;
                  int v14 = "bulkPFail";
                  goto LABEL_77;
                case 169:
                  uint64_t v13 = *v8;
                  int v14 = "bulkRFail";
                  goto LABEL_77;
                case 172:
                  uint64_t v13 = *v8;
                  int v14 = "raidSmartErrors";
                  goto LABEL_77;
                case 182:
                  uint64_t v13 = *v8;
                  int v14 = "internalUeccs";
                  goto LABEL_77;
                case 183:
                  uint64_t v13 = *v8;
                  int v14 = "e2eFail";
                  goto LABEL_77;
                case 184:
                  uint64_t v13 = *v8;
                  int v14 = "TempSensorMax";
                  goto LABEL_77;
                case 185:
                  uint64_t v13 = *v8;
                  int v14 = "TempSensorMin";
                  goto LABEL_77;
                case 186:
                  uint64_t v13 = *v8;
                  int v14 = "powerUpFromDDR";
                  goto LABEL_77;
                case 187:
                  uint64_t v13 = *v8;
                  int v14 = "numMemLow";
                  goto LABEL_77;
                case 188:
                  uint64_t v13 = *v8;
                  int v14 = "maxMemLowDuration";
                  goto LABEL_77;
                case 189:
                  uint64_t v13 = *v8;
                  int v14 = "memLowDuration";
                  goto LABEL_77;
                case 190:
                  uint64_t v13 = *v8;
                  int v14 = "numFences";
                  goto LABEL_77;
                case 191:
                  uint64_t v13 = *v8;
                  int v14 = "hostPassiveIO";
                  goto LABEL_77;
                case 192:
                  uint64_t v13 = *v8;
                  int v14 = "odtsMax";
                  goto LABEL_77;
                case 193:
                  uint64_t v13 = *v8;
                  int v14 = "defragMFromOrphans";
                  goto LABEL_77;
                case 194:
                  uint64_t v13 = *v8;
                  int v14 = "defragMFromFragments";
                  goto LABEL_77;
                case 195:
                  uint64_t v13 = *v8;
                  int v14 = "defragMTime";
                  goto LABEL_77;
                case 196:
                  uint64_t v13 = *v8;
                  int v14 = "defragMMaxTime";
                  goto LABEL_77;
                case 197:
                  uint64_t v13 = *v8;
                  int v14 = "raidFailedLbaMismatch";
                  goto LABEL_77;
                case 198:
                  uint64_t v13 = *v8;
                  int v14 = "numSyscfgWrites";
                  goto LABEL_77;
                case 199:
                  uint64_t v13 = *v8;
                  int v14 = "indmbUnitsXfer";
                  goto LABEL_77;
                case 200:
                  uint64_t v13 = *v8;
                  int v14 = "indmbUnitsCache";
                  goto LABEL_77;
                case 201:
                  uint64_t v13 = *v8;
                  int v14 = "indmbUnitsInd";
                  goto LABEL_77;
                case 202:
                  uint64_t v13 = *v8;
                  int v14 = "wcacheFS_Mbytes";
                  goto LABEL_77;
                case 203:
                  uint64_t v13 = *v8;
                  int v14 = "wcacheDS_Mbytes";
                  goto LABEL_77;
                case 204:
                  uint64_t v13 = *v8;
                  int v14 = "powerOnSeconds";
                  goto LABEL_77;
                case 205:
                  uint64_t v13 = *v8;
                  int v14 = "numUnknownTokenHostRead";
                  goto LABEL_77;
                case 206:
                  uint64_t v13 = *v8;
                  int v14 = "numUnmmapedTokenHostRead";
                  goto LABEL_77;
                case 207:
                  unsigned int v15 = "numOfThrottlingEntriesPerLevel";
                  uint64_t v16 = a1;
                  int v17 = 207;
LABEL_213:
                  int v18 = v8;
                  unsigned int v19 = 16;
                  goto LABEL_51;
                case 208:
                  uint64_t v13 = *v8;
                  int v14 = "wcacheFS_MbytesMin";
                  goto LABEL_77;
                case 209:
                  uint64_t v13 = *v8;
                  int v14 = "wcacheFS_MbytesMax";
                  goto LABEL_77;
                case 210:
                  uint64_t v13 = *v8;
                  int v14 = "prepareForShutdownFailCounter";
                  goto LABEL_77;
                case 211:
                  uint64_t v13 = *v8;
                  int v14 = "lpsrEntry";
                  goto LABEL_77;
                case 212:
                  uint64_t v13 = *v8;
                  int v14 = "lpsrExit";
                  goto LABEL_77;
                case 213:
                  unsigned int v15 = "crcInternalReadFail";
                  uint64_t v16 = a1;
                  int v17 = 213;
                  goto LABEL_149;
                case 214:
                  uint64_t v13 = *v8;
                  int v14 = "wcacheFSEvictCnt";
                  goto LABEL_77;
                case 215:
                  uint64_t v13 = *v8;
                  int v14 = "wcacheFSEvictSize";
                  goto LABEL_77;
                case 216:
                  uint64_t v13 = *v8;
                  int v14 = "wcacheFSWr";
                  goto LABEL_77;
                case 217:
                  uint64_t v13 = *v8;
                  int v14 = "wcacheDSWr";
                  goto LABEL_77;
                case 218:
                  unsigned int v15 = "wcacheFSEvictSizeLogDist";
                  uint64_t v16 = a1;
                  int v17 = 218;
                  goto LABEL_44;
                case 219:
                  uint64_t v13 = *v8;
                  int v14 = "prepareForShutdownTimeoutCounter";
                  goto LABEL_77;
                case 220:
                  uint64_t v13 = *v8;
                  int v14 = "prepareForShutdownCancelCounter";
                  goto LABEL_77;
                case 221:
                  uint64_t v13 = *v8;
                  int v14 = "RD_openBandCount";
                  goto LABEL_77;
                case 222:
                  uint64_t v13 = *v8;
                  int v14 = "RD_openBandNops";
                  goto LABEL_77;
                case 223:
                  uint64_t v13 = *v8;
                  int v14 = "RD_closedBandEvictCount";
                  goto LABEL_77;
                default:
                  switch(v7)
                  {
                    case 224:
                      uint64_t v13 = *v8;
                      int v14 = "RD_closedBandEvictSectors";
                      goto LABEL_77;
                    case 225:
                      uint64_t v13 = *v8;
                      int v14 = "RD_closedBandFragmentCount";
                      goto LABEL_77;
                    case 226:
                      uint64_t v13 = *v8;
                      int v14 = "RD_closedBandFragmentSectors";
                      goto LABEL_77;
                    case 227:
                      unsigned int v15 = "wcacheFSOverWrLogSizeCnts";
                      uint64_t v16 = a1;
                      int v17 = 227;
                      goto LABEL_44;
                    case 228:
                      unsigned int v15 = "wcacheFSOverWrSizeByFlow";
                      uint64_t v16 = a1;
                      int v17 = 228;
                      goto LABEL_144;
                    case 229:
                      unsigned int v15 = "indmbXferCountTo";
                      uint64_t v16 = a1;
                      int v17 = 229;
                      goto LABEL_123;
                    case 230:
                      unsigned int v15 = "indmbAccumulatedTimeBetweenXfers";
                      uint64_t v16 = a1;
                      int v17 = 230;
                      goto LABEL_123;
                    case 231:
                      uint64_t v13 = *v8;
                      int v14 = "maxGracefulBootTimeMs";
                      goto LABEL_77;
                    case 232:
                      uint64_t v13 = *v8;
                      int v14 = "maxUngracefulBootTimeMs";
                      goto LABEL_77;
                    case 233:
                      uint64_t v13 = *v8;
                      int v14 = "averageGracefulBootTimeMs";
                      goto LABEL_77;
                    case 234:
                      uint64_t v13 = *v8;
                      int v14 = "averageUngracefulBootTimeMs";
                      goto LABEL_77;
                    case 235:
                      unsigned int v15 = "gracefulBootTimeLogMs";
                      uint64_t v16 = a1;
                      int v17 = 235;
                      goto LABEL_149;
                    case 236:
                      unsigned int v15 = "ungracefulBootTimeLogMs";
                      uint64_t v16 = a1;
                      int v17 = 236;
                      goto LABEL_149;
                    case 237:
                      unsigned int v15 = "CalibrationCount";
                      uint64_t v16 = a1;
                      int v17 = 237;
                      goto LABEL_144;
                    case 238:
                      uint64_t v13 = *v8;
                      int v14 = "CalibrationLastTmp";
                      goto LABEL_77;
                    case 239:
                      uint64_t v13 = *v8;
                      int v14 = "CalibrationMaxTmp";
                      goto LABEL_77;
                    case 240:
                      uint64_t v13 = *v8;
                      int v14 = "CalibrationMinTmp";
                      goto LABEL_77;
                    case 241:
                      uint64_t v13 = *v8;
                      int v14 = "ungracefulBootWorstIndicator";
                      goto LABEL_77;
                    case 242:
                      uint64_t v13 = *v8;
                      int v14 = "metaMismatchReread";
                      goto LABEL_77;
                    case 243:
                      uint64_t v13 = *v8;
                      int v14 = "numS3SleepOps";
                      goto LABEL_77;
                    case 244:
                      uint64_t v13 = *v8;
                      int v14 = "odtsCurrent";
                      goto LABEL_77;
                    case 245:
                      uint64_t v13 = *v8;
                      int v14 = "prefetchReads";
                      goto LABEL_77;
                    case 246:
                      uint64_t v13 = *v8;
                      int v14 = "prefetchHits";
                      goto LABEL_77;
                    case 247:
                      uint64_t v13 = *v8;
                      int v14 = "prefetchWritesInvalidation";
                      goto LABEL_77;
                    case 248:
                      uint64_t v13 = *v8;
                      int v14 = "indmbUnitsTotal";
                      goto LABEL_77;
                    case 249:
                      uint64_t v13 = *v8;
                      int v14 = "selfThrottlingEngage";
                      goto LABEL_77;
                    case 250:
                      uint64_t v13 = *v8;
                      int v14 = "selfThrottlingDisengage";
                      goto LABEL_77;
                    case 252:
                      uint64_t v13 = *v8;
                      int v14 = "AbortSkip_WlpMode";
                      goto LABEL_77;
                    case 253:
                      uint64_t v13 = *v8;
                      int v14 = "hostWritesWlpMode";
                      goto LABEL_77;
                    case 254:
                      uint64_t v13 = *v8;
                      int v14 = "numClogDoubleUnc";
                      goto LABEL_77;
                    case 256:
                      uint64_t v13 = *v8;
                      int v14 = "AbortPad_WlpMode";
                      goto LABEL_77;
                    case 257:
                      uint64_t v13 = *v8;
                      int v14 = "bonfireIntermediateBandErases";
                      goto LABEL_77;
                    case 258:
                      uint64_t v13 = *v8;
                      int v14 = "bonfireUserBandErases";
                      goto LABEL_77;
                    case 259:
                      uint64_t v13 = *v8;
                      int v14 = "bonfireIntermediateBandProgs";
                      goto LABEL_77;
                    case 260:
                      uint64_t v13 = *v8;
                      int v14 = "bonfireUserBandProgs";
                      goto LABEL_77;
                    case 261:
                      uint64_t v13 = *v8;
                      int v14 = "bonfireIntermediatePageReads";
                      goto LABEL_77;
                    case 262:
                      uint64_t v13 = *v8;
                      int v14 = "bonfireUserPageReads";
                      goto LABEL_77;
                    case 263:
                      uint64_t v13 = *v8;
                      int v14 = "refreshUtil00";
                      goto LABEL_77;
                    case 264:
                      uint64_t v13 = *v8;
                      int v14 = "failToReadUtil00";
                      goto LABEL_77;
                    case 265:
                      unsigned int v15 = "readCountHisto";
                      uint64_t v16 = a1;
                      int v17 = 265;
                      goto LABEL_102;
                    case 266:
                      unsigned int v15 = "readAmpHisto";
                      uint64_t v16 = a1;
                      int v17 = 266;
                      goto LABEL_213;
                    case 267:
                      uint64_t v13 = *v8;
                      int v14 = "totalReadAmp";
                      goto LABEL_77;
                    case 268:
                      unsigned int v15 = "nvmeModeSelect";
                      uint64_t v16 = a1;
                      int v17 = 268;
                      goto LABEL_144;
                    case 269:
                      unsigned int v15 = "numBootBlockRefreshSuccess";
                      uint64_t v16 = a1;
                      int v17 = 269;
                      goto LABEL_149;
                    case 270:
                      unsigned int v15 = "numBootBlockRefreshFail";
                      uint64_t v16 = a1;
                      int v17 = 270;
                      goto LABEL_149;
                    case 271:
                      uint64_t v13 = *v8;
                      int v14 = "numUnsupportedAsi";
                      goto LABEL_77;
                    case 272:
                      uint64_t v13 = *v8;
                      int v14 = "NumTerminatedProgramSegs";
                      goto LABEL_77;
                    case 273:
                      uint64_t v13 = *v8;
                      int v14 = "indParityPagesDrops";
                      goto LABEL_77;
                    case 274:
                      uint64_t v13 = *v8;
                      int v14 = "indFlowPrograms";
                      goto LABEL_77;
                    case 277:
                      unsigned int v15 = "powerBudgetSelect";
                      uint64_t v16 = a1;
                      int v17 = 277;
                      goto LABEL_144;
                    case 279:
                      uint64_t v13 = *v8;
                      int v14 = "RxBurnNandWrites";
                      goto LABEL_77;
                    case 280:
                      unsigned int v15 = "E2EDPErrorCounters";
                      uint64_t v16 = a1;
                      int v17 = 280;
LABEL_281:
                      int v18 = v8;
                      unsigned int v19 = 12;
                      goto LABEL_51;
                    case 281:
                      uint64_t v13 = *v8;
                      int v14 = "wcacheSectorsMax";
                      goto LABEL_77;
                    case 282:
                      uint64_t v13 = *v8;
                      int v14 = "wcacheSectorsMin";
                      goto LABEL_77;
                    case 283:
                      uint64_t v13 = *v8;
                      int v14 = "wcacheSectorsCur";
                      goto LABEL_77;
                    case 284:
                      uint64_t v13 = *v8;
                      int v14 = "wcacheDS_SectorsMax";
                      goto LABEL_77;
                    case 285:
                      uint64_t v13 = *v8;
                      int v14 = "wcacheDS_SectorsMin";
                      goto LABEL_77;
                    case 286:
                      uint64_t v13 = *v8;
                      int v14 = "wcacheDS_SectorsCur";
                      goto LABEL_77;
                    case 287:
                      uint64_t v13 = *v8;
                      int v14 = "wcacheFS_Reads";
                      goto LABEL_77;
                    case 288:
                      uint64_t v13 = *v8;
                      int v14 = "wcacheDS_Reads";
                      goto LABEL_77;
                    case 289:
                      unsigned int v15 = "mspBootBlockReadFail";
                      uint64_t v16 = a1;
                      int v17 = 289;
                      goto LABEL_283;
                    case 290:
                      unsigned int v15 = "mspBootBlockProgFail";
                      uint64_t v16 = a1;
                      int v17 = 290;
                      goto LABEL_283;
                    case 291:
                      unsigned int v15 = "mspBootBlockEraseFail";
                      uint64_t v16 = a1;
                      int v17 = 291;
                      goto LABEL_283;
                    case 292:
                      uint64_t v13 = *v8;
                      int v14 = "bandsRefreshedOnError";
                      goto LABEL_77;
                    default:
                      switch(v7)
                      {
                        case 298:
                          unsigned int v15 = "perHostReads";
                          uint64_t v16 = a1;
                          int v17 = 298;
                          goto LABEL_123;
                        case 299:
                          unsigned int v15 = "perHostReadXacts";
                          uint64_t v16 = a1;
                          int v17 = 299;
                          goto LABEL_123;
                        case 300:
                          unsigned int v15 = "perHostWrites";
                          uint64_t v16 = a1;
                          int v17 = 300;
                          goto LABEL_123;
                        case 301:
                          unsigned int v15 = "perHostWriteXacts";
                          uint64_t v16 = a1;
                          int v17 = 301;
                          goto LABEL_123;
                        case 302:
                          unsigned int v15 = "perHostNumFlushes";
                          uint64_t v16 = a1;
                          int v17 = 302;
                          goto LABEL_123;
                        case 303:
                          unsigned int v15 = "perHostNumFences";
                          uint64_t v16 = a1;
                          int v17 = 303;
                          goto LABEL_123;
                        case 304:
                          unsigned int v15 = "commitPadSectorsPerFlow";
                          uint64_t v16 = a1;
                          int v17 = 304;
                          goto LABEL_44;
                        case 305:
                          unsigned int v15 = "wcacheDSOverWrLogSizeCnts";
                          uint64_t v16 = a1;
                          int v17 = 305;
                          goto LABEL_44;
                        case 306:
                          unsigned int v15 = "wcacheDSOverWrSizeByFlow";
                          uint64_t v16 = a1;
                          int v17 = 306;
                          goto LABEL_144;
                        case 307:
                          unsigned int v15 = "CmdRaisePrioiryEvents";
                          uint64_t v16 = a1;
                          int v17 = 307;
                          goto LABEL_44;
                        case 308:
                          uint64_t v13 = *v8;
                          int v14 = "utilNumVerification";
                          goto LABEL_77;
                        case 309:
                          uint64_t v13 = *v8;
                          int v14 = "utilRefreshes";
                          goto LABEL_77;
                        case 310:
                          uint64_t v13 = *v8;
                          int v14 = "utilBDRErrors";
                          goto LABEL_77;
                        case 311:
                          uint64_t v13 = *v8;
                          int v14 = "indBandsPerFlow";
                          goto LABEL_77;
                        case 312:
                          uint64_t v13 = *v8;
                          int v14 = "secsPerIndFlow";
                          goto LABEL_77;
                        case 313:
                          uint64_t v13 = *v8;
                          int v14 = "indDecodedECC";
                          goto LABEL_77;
                        case 314:
                          unsigned int v15 = "numBootBlockValidateSuccess";
                          uint64_t v16 = a1;
                          int v17 = 314;
                          goto LABEL_149;
                        case 315:
                          unsigned int v15 = "numBootBlockValidateFail";
                          uint64_t v16 = a1;
                          int v17 = 315;
                          goto LABEL_149;
                        case 316:
                          unsigned int v15 = "clogPagesFillingPercentage";
                          uint64_t v16 = a1;
                          int v17 = 316;
                          goto LABEL_144;
                        case 317:
                          uint64_t v13 = *v8;
                          int v14 = "bdrCalTimeAccFactor";
                          goto LABEL_77;
                        case 318:
                          uint64_t v13 = *v8;
                          int v14 = "bootChainRdError";
                          goto LABEL_77;
                        case 319:
                          uint64_t v13 = *v8;
                          int v14 = "bootChainBlankError";
                          goto LABEL_77;
                        case 320:
                          uint64_t v13 = *v8;
                          int v14 = "bootChainRefreshError";
                          goto LABEL_77;
                        case 321:
                          uint64_t v13 = *v8;
                          int v14 = "bootChainVersionError";
                          goto LABEL_77;
                        case 322:
                          uint64_t v13 = *v8;
                          int v14 = "mspBootBlockMismatch";
                          goto LABEL_77;
                        case 323:
                          uint64_t v13 = *v8;
                          int v14 = "mspBootBlockMismatchErr";
                          goto LABEL_77;
                        case 324:
                          unsigned int v15 = "bitflipAddr";
                          uint64_t v16 = a1;
                          int v17 = 324;
                          goto LABEL_102;
                        case 325:
                          unsigned int v15 = "bitflipCount";
                          uint64_t v16 = a1;
                          int v17 = 325;
                          goto LABEL_102;
                        case 326:
                          unsigned int v15 = "bitflipDupes";
                          uint64_t v16 = a1;
                          int v17 = 326;
                          goto LABEL_102;
                        case 327:
                          unsigned int v15 = "bandsMaxTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 327;
                          goto LABEL_324;
                        case 328:
                          unsigned int v15 = "bandsMinTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 328;
                          goto LABEL_324;
                        case 329:
                          unsigned int v15 = "bandsLifeTimeTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 329;
LABEL_324:
                          int v18 = v8;
                          unsigned int v19 = 30;
                          goto LABEL_51;
                        case 330:
                          unsigned int v15 = "bandsDeltaTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 330;
                          int v18 = v8;
                          unsigned int v19 = 22;
                          goto LABEL_51;
                        case 331:
                          unsigned int v15 = "bandsCrossTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 331;
                          int v18 = v8;
                          unsigned int v19 = 45;
                          goto LABEL_51;
                        case 332:
                          unsigned int v15 = "wcacheWaitLogMs";
                          uint64_t v16 = a1;
                          int v17 = 332;
                          goto LABEL_44;
                        case 333:
                          unsigned int v15 = "wcacheDS_segsSortedLogSize";
                          uint64_t v16 = a1;
                          int v17 = 333;
                          goto LABEL_44;
                        case 334:
                          uint64_t v13 = *v8;
                          int v14 = "numFirmwareWrites";
                          goto LABEL_77;
                        case 335:
                          uint64_t v13 = *v8;
                          int v14 = "numBisWrites";
                          goto LABEL_77;
                        case 336:
                          uint64_t v13 = *v8;
                          int v14 = "numBootChainUpdates";
                          goto LABEL_77;
                        case 337:
                          uint64_t v13 = *v8;
                          int v14 = "cntCalTimeWentBackWard";
                          goto LABEL_77;
                        case 338:
                          uint64_t v13 = *v8;
                          int v14 = "indBoRecoveries";
                          goto LABEL_77;
                        case 340:
                          uint64_t v13 = *v8;
                          int v14 = "numCrossTempUecc";
                          goto LABEL_77;
                        case 341:
                          uint64_t v13 = *v8;
                          int v14 = "latencyMonitorError";
                          goto LABEL_77;
                        case 343:
                          uint64_t v13 = *v8;
                          int v14 = "utilUeccReads";
                          goto LABEL_77;
                        case 344:
                          uint64_t v13 = *v8;
                          int v14 = "numOfAvoidedGCDueToTemp";
                          goto LABEL_77;
                        case 345:
                          uint64_t v13 = *v8;
                          int v14 = "forceShutdowns";
                          goto LABEL_77;
                        case 346:
                          uint64_t v13 = *v8;
                          int v14 = "gcSlcDestinations";
                          goto LABEL_77;
                        case 347:
                          uint64_t v13 = *v8;
                          int v14 = "indReplayExtUsed";
                          goto LABEL_77;
                        case 348:
                          uint64_t v13 = *v8;
                          int v14 = "defectsPerPackageOverflow";
                          goto LABEL_77;
                        case 349:
                          uint64_t v13 = *v8;
                          int v14 = "RxBurnIntBandsProgrammed";
                          goto LABEL_77;
                        case 350:
                          uint64_t v13 = *v8;
                          int v14 = "RxBurnUsrBandsProgrammed";
                          goto LABEL_77;
                        case 351:
                          uint64_t v13 = *v8;
                          int v14 = "RxBurnIntNandWrites";
                          goto LABEL_77;
                        case 352:
                          uint64_t v13 = *v8;
                          int v14 = "RxBurnUsrNandWrites";
                          goto LABEL_77;
                        case 353:
                          uint64_t v13 = *v8;
                          int v14 = "clogLastStripeUeccs";
                          goto LABEL_77;
                        case 354:
                          uint64_t v13 = *v8;
                          int v14 = "GC_MidDestSrcSwitchSLC2TLC";
                          goto LABEL_77;
                        case 355:
                          uint64_t v13 = *v8;
                          int v14 = "GC_MidDestSrcSwitchTLC2SLC";
                          goto LABEL_77;
                        case 356:
                          uint64_t v13 = *v8;
                          int v14 = "nvme_stats_shutdown_count_host0_normal";
                          goto LABEL_77;
                        case 357:
                          uint64_t v13 = *v8;
                          int v14 = "nvme_stats_shutdown_count_host1_normal";
                          goto LABEL_77;
                        case 358:
                          uint64_t v13 = *v8;
                          int v14 = "nvme_stats_shutdown_count_host0_s2r";
                          goto LABEL_77;
                        case 359:
                          uint64_t v13 = *v8;
                          int v14 = "nvme_stats_shutdown_count_host1_s2r";
                          goto LABEL_77;
                        case 360:
                          unsigned int v15 = "gcPDusterIntrSrcValidityHisto";
                          uint64_t v16 = a1;
                          int v17 = 360;
                          goto LABEL_213;
                        case 361:
                          unsigned int v15 = "gcPDusterUserSrcValidityHisto";
                          uint64_t v16 = a1;
                          int v17 = 361;
                          goto LABEL_213;
                        case 362:
                          uint64_t v13 = *v8;
                          int v14 = "raidFailedReadParity";
                          goto LABEL_77;
                        case 364:
                          uint64_t v13 = *v8;
                          int v14 = "lhotNumSkipes";
                          goto LABEL_77;
                        default:
                          switch(v7)
                          {
                            case 365:
                              uint64_t v13 = *v8;
                              int v14 = "lhotNumIsHotCalls";
                              goto LABEL_77;
                            case 366:
                              uint64_t v13 = *v8;
                              int v14 = "lhotFullLap";
                              goto LABEL_77;
                            case 367:
                              uint64_t v13 = *v8;
                              int v14 = "lhotSkipPrecent";
                              goto LABEL_77;
                            case 368:
                              uint64_t v13 = *v8;
                              int v14 = "eraseSuspendEvents";
                              goto LABEL_77;
                            case 369:
                              uint64_t v13 = *v8;
                              int v14 = "eraseSuspendedStatuses";
                              goto LABEL_77;
                            case 370:
                              uint64_t v13 = *v8;
                              int v14 = "eraseSuspendedBands";
                              goto LABEL_77;
                            case 371:
                              uint64_t v13 = *v8;
                              int v14 = "eraseSuspendSituationsBelowThreshold";
                              goto LABEL_77;
                            case 372:
                              uint64_t v13 = *v8;
                              int v14 = "eraseSuspendSituationsAboveThreshold";
                              goto LABEL_77;
                            case 373:
                              uint64_t v13 = *v8;
                              int v14 = "eraseSuspendReadChainsProcessed";
                              goto LABEL_77;
                            case 374:
                              uint64_t v13 = *v8;
                              int v14 = "bdrLastDoneHr";
                              goto LABEL_77;
                            case 375:
                              uint64_t v13 = *v8;
                              int v14 = "bdrBackupThreshHrs";
                              goto LABEL_77;
                            case 376:
                              uint64_t v13 = *v8;
                              int v14 = "clogPortableProgBufs";
                              goto LABEL_77;
                            case 377:
                              uint64_t v13 = *v8;
                              int v14 = "clogPortableDropBufs";
                              goto LABEL_77;
                            case 378:
                              uint64_t v13 = *v8;
                              int v14 = "clogPortablePadSectors";
                              goto LABEL_77;
                            case 379:
                              uint64_t v13 = *v8;
                              int v14 = "numRetiredBlocks";
                              goto LABEL_77;
                            case 381:
                              uint64_t v13 = *v8;
                              int v14 = "numRefreshOnErrNandRefreshPerf";
                              goto LABEL_77;
                            case 382:
                              uint64_t v13 = *v8;
                              int v14 = "raidReconstructReads";
                              goto LABEL_77;
                            case 383:
                              uint64_t v13 = *v8;
                              int v14 = "gcReadsNoBlog";
                              goto LABEL_77;
                            case 384:
                              uint64_t v13 = *v8;
                              int v14 = "AbortSkip_MPBXReadVerifyClosedBand";
                              goto LABEL_77;
                            case 385:
                              uint64_t v13 = *v8;
                              int v14 = "openBandReadFail";
                              goto LABEL_77;
                            case 386:
                              uint64_t v13 = *v8;
                              int v14 = "AbortSkip_MPBXReadVerifyOpenBand";
                              goto LABEL_77;
                            case 387:
                              uint64_t v13 = *v8;
                              int v14 = "AbortSkip_MBPXFailedRebuildingParity";
                              goto LABEL_77;
                            case 388:
                              uint64_t v13 = *v8;
                              int v14 = "raidSuccessfulPMXReconstructionInternal";
                              goto LABEL_77;
                            case 389:
                              uint64_t v13 = *v8;
                              int v14 = "raidSuccessfulPMXReconstructionHost";
                              goto LABEL_77;
                            case 390:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedPMXReconstructionInternal";
                              goto LABEL_77;
                            case 391:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedPMXReconstructionHost";
                              goto LABEL_77;
                            case 392:
                              uint64_t v13 = *v8;
                              int v14 = "raidSuccessfulRMXReconstructionInternal";
                              goto LABEL_77;
                            case 393:
                              uint64_t v13 = *v8;
                              int v14 = "raidSuccessfulRMXReconstructionHost";
                              goto LABEL_77;
                            case 394:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedRMXReconstructionInternal";
                              goto LABEL_77;
                            case 395:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedRMXReconstructionHost";
                              goto LABEL_77;
                            case 396:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedReadParityInternal";
                              goto LABEL_77;
                            case 397:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedReadQParityInternal";
                              goto LABEL_77;
                            case 398:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedReadQParity";
                              goto LABEL_77;
                            case 399:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedReadQCopy";
                              goto LABEL_77;
                            case 400:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedReconstructionQParity";
                              goto LABEL_77;
                            case 401:
                              uint64_t v13 = *v8;
                              int v14 = "offlineBlocksCnt";
                              goto LABEL_77;
                            case 402:
                              uint64_t v13 = *v8;
                              int v14 = "bork0Revectors";
                              goto LABEL_77;
                            case 403:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedReadBlog";
                              goto LABEL_77;
                            case 404:
                              uint64_t v13 = *v8;
                              int v14 = "numReliabilityRefreshes";
                              goto LABEL_77;
                            case 405:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedReadQCopyInternal";
                              goto LABEL_77;
                            case 406:
                              unsigned int v15 = "raidReconstructSuccessFlow";
                              uint64_t v16 = a1;
                              int v17 = 406;
                              goto LABEL_102;
                            case 407:
                              unsigned int v15 = "raidReconstructFailFlow";
                              uint64_t v16 = a1;
                              int v17 = 407;
                              goto LABEL_102;
                            case 408:
                              uint64_t v13 = *v8;
                              int v14 = "raidReconstructFailP";
                              goto LABEL_77;
                            case 409:
                              uint64_t v13 = *v8;
                              int v14 = "raidReconstructFailQ";
                              goto LABEL_77;
                            case 410:
                              uint64_t v13 = *v8;
                              int v14 = "raidReconstructFailUECC";
                              goto LABEL_77;
                            case 411:
                              uint64_t v13 = *v8;
                              int v14 = "raidReconstructFailUnsupp";
                              goto LABEL_77;
                            case 412:
                              uint64_t v13 = *v8;
                              int v14 = "raidUECCOpenBand";
                              goto LABEL_77;
                            case 414:
                              uint64_t v13 = *v8;
                              int v14 = "ueccReads";
                              goto LABEL_77;
                            case 416:
                              uint64_t v13 = *v8;
                              int v14 = "raidSuccessfulVerify";
                              goto LABEL_77;
                            case 417:
                              uint64_t v13 = *v8;
                              int v14 = "raidFailedVerify";
                              goto LABEL_77;
                            case 418:
                              uint64_t v13 = *v8;
                              int v14 = "numBandsVerified";
                              goto LABEL_77;
                            case 419:
                              uint64_t v13 = *v8;
                              int v14 = "cache_heads";
                              goto LABEL_77;
                            case 420:
                              uint64_t v13 = *v8;
                              int v14 = "AbortSkip_RMXtoMPBX";
                              goto LABEL_77;
                            case 421:
                              uint64_t v13 = *v8;
                              int v14 = "s3eFwVer";
                              goto LABEL_77;
                            case 422:
                              uint64_t v13 = *v8;
                              int v14 = "readVerifyNative";
                              goto LABEL_77;
                            case 423:
                              uint64_t v13 = *v8;
                              int v14 = "reducedReadVerifyNative";
                              goto LABEL_77;
                            case 424:
                              uint64_t v13 = *v8;
                              int v14 = "readVerifySlc";
                              goto LABEL_77;
                            case 425:
                              uint64_t v13 = *v8;
                              int v14 = "reducedReadVerifySlc";
                              goto LABEL_77;
                            case 426:
                              uint64_t v13 = *v8;
                              int v14 = "RxBurnEvictions";
                              goto LABEL_77;
                            case 427:
                              uint64_t v13 = *v8;
                              int v14 = "directToTLCBands";
                              goto LABEL_77;
                            case 428:
                              uint64_t v13 = *v8;
                              int v14 = "nandDesc";
                              goto LABEL_77;
                            case 429:
                              uint64_t v13 = *v8;
                              int v14 = "fwUpdatesPercentUsed";
                              goto LABEL_77;
                            case 430:
                              uint64_t v13 = *v8;
                              int v14 = "slcPercentUsed";
                              goto LABEL_77;
                            case 431:
                              uint64_t v13 = *v8;
                              int v14 = "percentUsed";
                              goto LABEL_77;
                            default:
                              switch(v7)
                              {
                                case 432:
                                  uint64_t v13 = *v8;
                                  int v14 = "hostAutoWrites";
                                  goto LABEL_77;
                                case 433:
                                  uint64_t v13 = *v8;
                                  int v14 = "hostAutoWriteXacts";
                                  goto LABEL_77;
                                case 434:
                                  uint64_t v13 = *v8;
                                  int v14 = "gcDestDynamic";
                                  goto LABEL_77;
                                case 435:
                                  uint64_t v13 = *v8;
                                  int v14 = "gcDestStatic";
                                  goto LABEL_77;
                                case 436:
                                  uint64_t v13 = *v8;
                                  int v14 = "gcDestWearlevel";
                                  goto LABEL_77;
                                case 437:
                                  uint64_t v13 = *v8;
                                  int v14 = "gcDestParity";
                                  goto LABEL_77;
                                case 438:
                                  uint64_t v13 = *v8;
                                  int v14 = "AbortSkip_Format";
                                  goto LABEL_77;
                                case 440:
                                  uint64_t v13 = *v8;
                                  int v14 = "raidSLCPadding";
                                  goto LABEL_77;
                                case 441:
                                  uint64_t v13 = *v8;
                                  int v14 = "raidGCBands";
                                  goto LABEL_77;
                                case 442:
                                  uint64_t v13 = *v8;
                                  int v14 = "raidGCSectors";
                                  goto LABEL_77;
                                case 443:
                                  uint64_t v13 = *v8;
                                  int v14 = "raidGCPadding";
                                  goto LABEL_77;
                                case 444:
                                  uint64_t v13 = *v8;
                                  int v14 = "raidSLCBandsPerHostFlow";
                                  goto LABEL_77;
                                case 445:
                                  uint64_t v13 = *v8;
                                  int v14 = "raidSLCSecsPerHostFlow";
                                  goto LABEL_77;
                                case 446:
                                  uint64_t v13 = *v8;
                                  int v14 = "rxBurnMinCycleRuns";
                                  goto LABEL_77;
                                case 447:
                                  uint64_t v13 = *v8;
                                  int v14 = "clogNumFastCxt";
                                  goto LABEL_77;
                                case 448:
                                  uint64_t v13 = *v8;
                                  int v14 = "clogNumRapidReboots";
                                  goto LABEL_77;
                                case 449:
                                  uint64_t v13 = *v8;
                                  int v14 = "clogFastCxtAbvThr";
                                  goto LABEL_77;
                                case 450:
                                  uint64_t v13 = *v8;
                                  int v14 = "rxBurnDiffModeRuns";
                                  goto LABEL_77;
                                case 452:
                                  uint64_t v13 = *v8;
                                  int v14 = "indReadVerifyFail";
                                  goto LABEL_77;
                                case 453:
                                  unsigned int v15 = "numOfThrottlingEntriesPerReadLevel";
                                  uint64_t v16 = a1;
                                  int v17 = 453;
                                  goto LABEL_213;
                                case 454:
                                  unsigned int v15 = "numOfThrottlingEntriesPerWriteLevel";
                                  uint64_t v16 = a1;
                                  int v17 = 454;
                                  goto LABEL_213;
                                case 456:
                                  unsigned int v15 = "slcFifoDepth";
                                  uint64_t v16 = a1;
                                  int v17 = 456;
                                  goto LABEL_44;
                                case 457:
                                  uint64_t v13 = *v8;
                                  int v14 = "wcacheSectorsDirtyIdle";
                                  goto LABEL_77;
                                case 458:
                                  uint64_t v13 = *v8;
                                  int v14 = "wcacheDS_SectorsDirtyIdle";
                                  goto LABEL_77;
                                case 459:
                                  uint64_t v13 = *v8;
                                  int v14 = "wcacheFS_MbytesDirtyIdle";
                                  goto LABEL_77;
                                case 460:
                                  unsigned int v15 = "CacheDepthVsThroughput";
                                  uint64_t v16 = a1;
                                  int v17 = 460;
                                  int v18 = v8;
                                  unsigned int v19 = 256;
                                  goto LABEL_51;
                                case 461:
                                  uint64_t v13 = *v8;
                                  int v14 = "directToTLCSectors";
                                  goto LABEL_77;
                                case 462:
                                  uint64_t v13 = *v8;
                                  int v14 = "fallbackToWaterfall";
                                  goto LABEL_77;
                                case 463:
                                  unsigned int v15 = "balanceProportionBucketsHistogram";
                                  uint64_t v16 = a1;
                                  int v17 = 463;
LABEL_448:
                                  int v18 = v8;
                                  unsigned int v19 = 11;
                                  goto LABEL_51;
                                case 464:
                                  uint64_t v13 = *v8;
                                  int v14 = "lockToTlc";
                                  goto LABEL_77;
                                case 465:
                                  unsigned int v15 = "burstSizeHistogram";
                                  uint64_t v16 = a1;
                                  int v17 = 465;
                                  goto LABEL_44;
                                case 466:
                                  unsigned int v15 = "qosDirectToTLC";
                                  uint64_t v16 = a1;
                                  int v17 = 466;
                                  goto LABEL_470;
                                case 467:
                                  unsigned int v15 = "maxQosDirectToTLC";
                                  uint64_t v16 = a1;
                                  int v17 = 467;
                                  goto LABEL_144;
                                case 468:
                                  unsigned int v15 = "wcacheDirtyAtFlush";
                                  uint64_t v16 = a1;
                                  int v17 = 468;
                                  goto LABEL_213;
                                case 469:
                                  unsigned int v15 = "raidReconstructSuccessPartition";
                                  uint64_t v16 = a1;
                                  int v17 = 469;
                                  goto LABEL_123;
                                case 470:
                                  unsigned int v15 = "raidReconstructFailPartition";
                                  uint64_t v16 = a1;
                                  int v17 = 470;
                                  goto LABEL_123;
                                case 471:
                                  uint64_t v13 = *v8;
                                  int v14 = "raidUncleanBootBandFail";
                                  goto LABEL_77;
                                case 472:
                                  uint64_t v13 = *v8;
                                  int v14 = "raidReconstructFailBandFlowHost";
                                  goto LABEL_77;
                                case 473:
                                  uint64_t v13 = *v8;
                                  int v14 = "raidReconstructFailBandFlowGC";
                                  goto LABEL_77;
                                case 476:
                                  unsigned int v15 = "raidSuccessfulRecoLbaRange";
                                  uint64_t v16 = a1;
                                  int v17 = 476;
                                  goto LABEL_123;
                                case 477:
                                  unsigned int v15 = "raidFailedRecoLbaRange";
                                  uint64_t v16 = a1;
                                  int v17 = 477;
                                  goto LABEL_123;
                                case 481:
                                  unsigned int v15 = "skinnyBandErases_481";
                                  uint64_t v16 = a1;
                                  int v17 = 481;
                                  goto LABEL_283;
                                case 483:
                                  uint64_t v13 = *v8;
                                  int v14 = "tlcOverHeatWaterfall";
                                  goto LABEL_77;
                                case 484:
                                  uint64_t v13 = *v8;
                                  int v14 = "skinnyCyclesConvert";
                                  goto LABEL_77;
                                case 485:
                                  uint64_t v13 = *v8;
                                  int v14 = "non_proportional_directToTLCSectors";
                                  goto LABEL_77;
                                case 486:
                                  uint64_t v13 = *v8;
                                  int v14 = "maxFailedFastCxtSync";
                                  goto LABEL_77;
                                case 487:
                                  uint64_t v13 = *v8;
                                  int v14 = "numFormatUserArea";
                                  goto LABEL_77;
                                case 488:
                                  uint64_t v13 = *v8;
                                  int v14 = "clogFastCxtSyncAborted";
                                  goto LABEL_77;
                                case 489:
                                  unsigned int v15 = "clogOccupationSectors";
                                  uint64_t v16 = a1;
                                  int v17 = 489;
                                  goto LABEL_102;
                                case 490:
                                  unsigned int v15 = "bdrTmpHist";
                                  uint64_t v16 = a1;
                                  int v17 = 490;
LABEL_470:
                                  int v18 = v8;
                                  unsigned int v19 = 64;
                                  goto LABEL_51;
                                case 491:
                                  uint64_t v13 = *v8;
                                  int v14 = "numFWUpdates";
                                  goto LABEL_77;
                                case 492:
                                  uint64_t v13 = *v8;
                                  int v14 = "numClogLoadFails";
                                  goto LABEL_77;
                                case 493:
                                  uint64_t v13 = *v8;
                                  int v14 = "rxBurnNumForcedDiffMode";
                                  goto LABEL_77;
                                case 494:
                                  uint64_t v13 = *v8;
                                  int v14 = "RD_numSaves";
                                  goto LABEL_77;
                                case 495:
                                  uint64_t v13 = *v8;
                                  int v14 = "eanCompressWrites";
                                  goto LABEL_77;
                                case 496:
                                  uint64_t v13 = *v8;
                                  int v14 = "eanHostWrites";
                                  goto LABEL_77;
                                case 497:
                                  uint64_t v13 = *v8;
                                  int v14 = "bandPreErases";
                                  goto LABEL_77;
                                case 498:
                                  uint64_t v13 = *v8;
                                  int v14 = "eanHostUnmaps";
                                  goto LABEL_77;
                                case 499:
                                  uint64_t v13 = *v8;
                                  int v14 = "eanHostFlushes";
                                  goto LABEL_77;
                                case 500:
                                  uint64_t v13 = *v8;
                                  int v14 = "eanFastWrites";
                                  goto LABEL_77;
                                case 501:
                                  uint64_t v13 = *v8;
                                  int v14 = "autowriteDS2FSCollisions";
                                  goto LABEL_77;
                                case 502:
                                  uint64_t v13 = *v8;
                                  int v14 = "autowriteWaitTransferTaskBlocks";
                                  goto LABEL_77;
                                case 503:
                                  unsigned int v15 = "avgCycle";
                                  uint64_t v16 = a1;
                                  int v17 = 503;
                                  goto LABEL_123;
                                case 504:
                                  uint64_t v13 = *v8;
                                  int v14 = "RD_DeferredClearsOverflowCnt";
                                  goto LABEL_77;
                                default:
                                  switch(v7)
                                  {
                                    case 505:
                                      uint64_t v13 = *v8;
                                      int v14 = "maxVerticsInBand";
                                      goto LABEL_77;
                                    case 506:
                                      uint64_t v13 = *v8;
                                      int v14 = "numVertics";
                                      goto LABEL_77;
                                    case 507:
                                      uint64_t v13 = *v8;
                                      int v14 = "exceededCVertics";
                                      goto LABEL_77;
                                    case 510:
                                      uint64_t v13 = *v8;
                                      int v14 = "raidReconstructFailMismatch";
                                      goto LABEL_77;
                                    case 511:
                                      unsigned int v15 = "mspbootBlockRefreshCnt";
                                      uint64_t v16 = a1;
                                      int v17 = 511;
                                      goto LABEL_283;
                                    case 516:
                                      unsigned int v15 = "mspBootBlockRefreshTime";
                                      uint64_t v16 = a1;
                                      int v17 = 516;
                                      goto LABEL_283;
                                    case 517:
                                      uint64_t v13 = *v8;
                                      int v14 = "mspBootBlockCountPerMsp";
                                      goto LABEL_77;
                                    case 518:
                                      uint64_t v13 = *v8;
                                      int v14 = "skinnyRevectorSLC";
                                      goto LABEL_77;
                                    case 519:
                                      uint64_t v13 = *v8;
                                      int v14 = "skinnyRevectorTLC";
                                      goto LABEL_77;
                                    case 520:
                                      uint64_t v13 = *v8;
                                      int v14 = "perfSetupAttempts";
                                      goto LABEL_77;
                                    case 521:
                                      uint64_t v13 = *v8;
                                      int v14 = "perfSetupSuccesses";
                                      goto LABEL_77;
                                    case 522:
                                      uint64_t v13 = *v8;
                                      int v14 = "perfWriteAttempts";
                                      goto LABEL_77;
                                    case 523:
                                      uint64_t v13 = *v8;
                                      int v14 = "perfWriteSuccesses";
                                      goto LABEL_77;
                                    case 524:
                                      uint64_t v13 = *v8;
                                      int v14 = "perfReadAttempts";
                                      goto LABEL_77;
                                    case 525:
                                      uint64_t v13 = *v8;
                                      int v14 = "perfReadSuccesses";
                                      goto LABEL_77;
                                    case 526:
                                      uint64_t v13 = *v8;
                                      int v14 = "perfCleanupAttempts";
                                      goto LABEL_77;
                                    case 527:
                                      uint64_t v13 = *v8;
                                      int v14 = "perfCleanupSuccesses";
                                      goto LABEL_77;
                                    case 530:
                                      uint64_t v13 = *v8;
                                      int v14 = "firstFailedDieId";
                                      goto LABEL_77;
                                    case 531:
                                      uint64_t v13 = *v8;
                                      int v14 = "numDieFailures";
                                      goto LABEL_77;
                                    case 532:
                                      uint64_t v13 = *v8;
                                      int v14 = "spareAvailablePercent";
                                      goto LABEL_77;
                                    case 533:
                                      uint64_t v13 = *v8;
                                      int v14 = "dataFabricErr";
                                      goto LABEL_77;
                                    case 534:
                                      uint64_t v13 = *v8;
                                      int v14 = "downlinkFabricErr";
                                      goto LABEL_77;
                                    case 535:
                                      uint64_t v13 = *v8;
                                      int v14 = "prpAccTimeoutErr";
                                      goto LABEL_77;
                                    case 537:
                                      uint64_t v13 = *v8;
                                      int v14 = "uplinkFabricErr";
                                      goto LABEL_77;
                                    case 538:
                                      uint64_t v13 = *v8;
                                      int v14 = "skinnyBandsGBB";
                                      goto LABEL_77;
                                    case 539:
                                      uint64_t v13 = *v8;
                                      int v14 = "AbortPad_GcMustPadBand";
                                      goto LABEL_77;
                                    case 540:
                                      uint64_t v13 = *v8;
                                      int v14 = "AbortPad_GcMustPadSkinny";
                                      goto LABEL_77;
                                    case 541:
                                      uint64_t v13 = *v8;
                                      int v14 = "bdrHostPingInitial";
                                      goto LABEL_77;
                                    case 542:
                                      uint64_t v13 = *v8;
                                      int v14 = "bdrHostPingMoreNeeded";
                                      goto LABEL_77;
                                    case 543:
                                      uint64_t v13 = *v8;
                                      int v14 = "bandParityAllocationFailed";
                                      goto LABEL_77;
                                    case 544:
                                      uint64_t v13 = *v8;
                                      int v14 = "fastHwBurstToSlc";
                                      goto LABEL_77;
                                    case 545:
                                      uint64_t v13 = *v8;
                                      int v14 = "slowHwToTlc";
                                      goto LABEL_77;
                                    case 546:
                                      unsigned int v15 = "slcDemandBurstSizeDetected";
                                      uint64_t v16 = a1;
                                      int v17 = 546;
                                      goto LABEL_44;
                                    case 547:
                                      unsigned int v15 = "slcDemandBurstDur";
                                      uint64_t v16 = a1;
                                      int v17 = 547;
                                      goto LABEL_44;
                                    case 548:
                                      uint64_t v13 = *v8;
                                      int v14 = "fastHwToTlcBurst";
                                      goto LABEL_77;
                                    case 549:
                                      unsigned int v15 = "slcDemandBurstSizeSlc";
                                      uint64_t v16 = a1;
                                      int v17 = 549;
                                      goto LABEL_44;
                                    case 551:
                                      unsigned int v15 = "balanceProportionBucketsHistogramTlc";
                                      uint64_t v16 = a1;
                                      int v17 = 551;
                                      goto LABEL_448;
                                    case 553:
                                      uint64_t v13 = *v8;
                                      int v14 = "slowHwFlushToSlc";
                                      goto LABEL_77;
                                    case 557:
                                      uint64_t v13 = *v8;
                                      int v14 = "slowHwToSlc";
                                      goto LABEL_77;
                                    case 558:
                                      uint64_t v13 = *v8;
                                      int v14 = "flushNwToSlc";
                                      goto LABEL_77;
                                    case 559:
                                      uint64_t v13 = *v8;
                                      int v14 = "flushNwToTlc";
                                      goto LABEL_77;
                                    case 560:
                                      uint64_t v13 = *v8;
                                      int v14 = "oslcHw";
                                      goto LABEL_77;
                                    case 561:
                                      uint64_t v13 = *v8;
                                      int v14 = "oslcTransitions";
                                      goto LABEL_77;
                                    case 563:
                                      uint64_t v13 = *v8;
                                      int v14 = "slcDemandFlushCount";
                                      goto LABEL_77;
                                    case 564:
                                      uint64_t v13 = *v8;
                                      int v14 = "slcDemandBurstCount";
                                      goto LABEL_77;
                                    case 565:
                                      uint64_t v13 = *v8;
                                      int v14 = "oslcBaseAvgPE";
                                      goto LABEL_77;
                                    case 566:
                                      uint64_t v13 = *v8;
                                      int v14 = "raidReconstructFailNoSPBX";
                                      goto LABEL_77;
                                    case 567:
                                      uint64_t v13 = *v8;
                                      int v14 = "raidReconstructFailDouble";
                                      goto LABEL_77;
                                    case 568:
                                      uint64_t v13 = *v8;
                                      int v14 = "oslcFastWAmpUOnOff";
                                      goto LABEL_77;
                                    case 569:
                                      uint64_t v13 = *v8;
                                      int v14 = "oslcSlowWAmpUOnOff";
                                      goto LABEL_77;
                                    case 570:
                                      uint64_t v13 = *v8;
                                      int v14 = "raidReconstructFailInvalid";
                                      goto LABEL_77;
                                    case 572:
                                      uint64_t v13 = *v8;
                                      int v14 = "oslcLastWAmpUx10";
                                      goto LABEL_77;
                                    case 573:
                                      uint64_t v13 = *v8;
                                      int v14 = "raidFailedReadNoBlog";
                                      goto LABEL_77;
                                    case 574:
                                      uint64_t v13 = *v8;
                                      int v14 = "raidReconstructFailBlank";
                                      goto LABEL_77;
                                    case 575:
                                      uint64_t v13 = *v8;
                                      int v14 = "oslcHotTLCOnOff";
                                      goto LABEL_77;
                                    case 576:
                                      uint64_t v13 = *v8;
                                      int v14 = "gcVPackDestinations";
                                      goto LABEL_77;
                                    case 581:
                                      uint64_t v13 = *v8;
                                      int v14 = "averageTLCPECycles";
                                      goto LABEL_77;
                                    case 582:
                                      uint64_t v13 = *v8;
                                      int v14 = "averageSLCPECycles";
                                      goto LABEL_77;
                                    case 583:
                                      uint64_t v13 = *v8;
                                      int v14 = "numAtomicBoots";
                                      goto LABEL_77;
                                    case 584:
                                      uint64_t v13 = *v8;
                                      int v14 = "clogMinorMismatch";
                                      goto LABEL_77;
                                    case 586:
                                      uint64_t v13 = *v8;
                                      int v14 = "raidExpectedFailRMXReconstructionInternal";
                                      goto LABEL_77;
                                    case 587:
                                      uint64_t v13 = *v8;
                                      int v14 = "raidExpectedFailRMXReconstructionHost";
                                      goto LABEL_77;
                                    case 588:
                                      uint64_t v13 = *v8;
                                      int v14 = "oslcGCinvalidations";
                                      goto LABEL_77;
                                    case 589:
                                      uint64_t v13 = *v8;
                                      int v14 = "oslcGCActivateReason";
                                      goto LABEL_77;
                                    default:
                                      switch(v7)
                                      {
                                        case 590:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcLowCleanBandsUOnOff";
                                          goto LABEL_77;
                                        case 591:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcTooManyGCMustOnOff";
                                          goto LABEL_77;
                                        case 592:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcBaseHostWrites";
                                          goto LABEL_77;
                                        case 593:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcBaseBandErases";
                                          goto LABEL_77;
                                        case 594:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcBdrBands";
                                          goto LABEL_77;
                                        case 595:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcBdrValid";
                                          goto LABEL_77;
                                        case 596:
                                          uint64_t v13 = *v8;
                                          int v14 = "unexpectedBlanksInternal";
                                          goto LABEL_77;
                                        case 597:
                                          uint64_t v13 = *v8;
                                          int v14 = "unexpectedBlanksOnRV";
                                          goto LABEL_77;
                                        case 601:
                                          uint64_t v13 = *v8;
                                          int v14 = "waterfallLockSectors";
                                          goto LABEL_77;
                                        case 602:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcGCActiveWrites";
                                          goto LABEL_77;
                                        case 603:
                                          uint64_t v13 = *v8;
                                          int v14 = "chipIdTemperatureSample";
                                          goto LABEL_77;
                                        case 604:
                                          uint64_t v13 = *v8;
                                          int v14 = "gcVPackWrites";
                                          goto LABEL_77;
                                        case 605:
                                          unsigned int v15 = "gcActiveReasons";
                                          uint64_t v16 = a1;
                                          int v17 = 605;
                                          goto LABEL_44;
                                        case 606:
                                          uint64_t v13 = *v8;
                                          int v14 = "eanMaxInitTimeMs";
                                          goto LABEL_77;
                                        case 607:
                                          uint64_t v13 = *v8;
                                          int v14 = "eanMinToFirstReadTimeMs";
                                          goto LABEL_77;
                                        case 608:
                                          uint64_t v13 = *v8;
                                          int v14 = "skinnyAPGMRetire";
                                          goto LABEL_77;
                                        case 609:
                                          uint64_t v13 = *v8;
                                          int v14 = "unexpectedBlanksHost";
                                          goto LABEL_77;
                                        case 610:
                                          unsigned int v15 = "pcieAerCounters";
                                          uint64_t v16 = a1;
                                          int v17 = 610;
                                          goto LABEL_470;
                                        case 611:
                                          uint64_t v13 = *v8;
                                          int v14 = "fastHwToTlcBalance";
                                          goto LABEL_77;
                                        case 612:
                                          uint64_t v13 = *v8;
                                          int v14 = "perfOSLCRuns";
                                          goto LABEL_77;
                                        case 613:
                                          uint64_t v13 = *v8;
                                          int v14 = "slcDemandBurstWritesInGC";
                                          goto LABEL_77;
                                        case 614:
                                          uint64_t v13 = *v8;
                                          int v14 = "slcDemandBurstWritesInTT";
                                          goto LABEL_77;
                                        case 615:
                                          uint64_t v13 = *v8;
                                          int v14 = "slcDemandBurstWritesInNRP";
                                          goto LABEL_77;
                                        case 616:
                                          uint64_t v13 = *v8;
                                          int v14 = "perfTotalDmaMb";
                                          goto LABEL_77;
                                        case 617:
                                          uint64_t v13 = *v8;
                                          int v14 = "eanAvgInitTimeMs";
                                          goto LABEL_77;
                                        case 618:
                                          uint64_t v13 = *v8;
                                          int v14 = "eanAvgToFirstReadTimeMs";
                                          goto LABEL_77;
                                        case 619:
                                          uint64_t v13 = *v8;
                                          int v14 = "eanMaxBootReadTimeMs";
                                          goto LABEL_77;
                                        case 620:
                                          uint64_t v13 = *v8;
                                          int v14 = "eanAvgBootReadTimeMs";
                                          goto LABEL_77;
                                        case 621:
                                          unsigned int v15 = "eanBootReadsHist";
                                          uint64_t v16 = a1;
                                          int v17 = 621;
                                          goto LABEL_44;
                                        case 622:
                                          uint64_t v13 = *v8;
                                          int v14 = "maxBgInitTimeMs";
                                          goto LABEL_77;
                                        case 623:
                                          uint64_t v13 = *v8;
                                          int v14 = "avgBgInitTimeMs";
                                          goto LABEL_77;
                                        case 624:
                                          unsigned int v15 = "clogFailReason";
                                          uint64_t v16 = a1;
                                          int v17 = 624;
                                          goto LABEL_213;
                                        case 625:
                                          uint64_t v13 = *v8;
                                          int v14 = "eanMinBootReadMBPerSec";
                                          goto LABEL_77;
                                        case 626:
                                          uint64_t v13 = *v8;
                                          int v14 = "eanAvgBootReadMBPerSec";
                                          goto LABEL_77;
                                        case 627:
                                          uint64_t v13 = *v8;
                                          int v14 = "minSkinnyPECycles";
                                          goto LABEL_77;
                                        case 628:
                                          uint64_t v13 = *v8;
                                          int v14 = "maxSkinnyPECycles";
                                          goto LABEL_77;
                                        case 629:
                                          uint64_t v13 = *v8;
                                          int v14 = "averageSkinnyPECycles";
                                          goto LABEL_77;
                                        case 630:
                                          unsigned int v15 = "raidSuccessfulRecoEAN";
                                          uint64_t v16 = a1;
                                          int v17 = 630;
                                          goto LABEL_591;
                                        case 631:
                                          unsigned int v15 = "raidFailedRecoEAN";
                                          uint64_t v16 = a1;
                                          int v17 = 631;
                                          goto LABEL_591;
                                        case 632:
                                          unsigned int v15 = "eanFirstReadMode";
                                          uint64_t v16 = a1;
                                          int v17 = 632;
LABEL_591:
                                          int v18 = v8;
                                          unsigned int v19 = 6;
                                          goto LABEL_51;
                                        case 635:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcHwGC";
                                          goto LABEL_77;
                                        case 636:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcHwTT";
                                          goto LABEL_77;
                                        case 637:
                                          uint64_t v13 = *v8;
                                          int v14 = "oslcHwNRP";
                                          goto LABEL_77;
                                        case 638:
                                          unsigned int v15 = "oslcDemandBurstSize";
                                          uint64_t v16 = a1;
                                          int v17 = 638;
                                          goto LABEL_44;
                                        case 639:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidReconstructSuccessBandFlowOslc";
                                          goto LABEL_77;
                                        case 640:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidReconstructFailBandFlowOslc";
                                          goto LABEL_77;
                                        case 641:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidFailSectors";
                                          goto LABEL_77;
                                        case 642:
                                          uint64_t v13 = *v8;
                                          int v14 = "eanFailSectors";
                                          goto LABEL_77;
                                        case 643:
                                          uint64_t v13 = *v8;
                                          int v14 = "bdrTimeMode";
                                          goto LABEL_77;
                                        case 644:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidParityNotSavedP";
                                          goto LABEL_77;
                                        case 645:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidParityNotSavedQ";
                                          goto LABEL_77;
                                        case 646:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidParityInvalid";
                                          goto LABEL_77;
                                        case 647:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidParityUnknown";
                                          goto LABEL_77;
                                        case 648:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidParityUnmapped";
                                          goto LABEL_77;
                                        case 649:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidParityGCUnc";
                                          goto LABEL_77;
                                        case 657:
                                          uint64_t v13 = *v8;
                                          int v14 = "AbortSkip_MPBXProbational";
                                          goto LABEL_77;
                                        case 659:
                                          uint64_t v13 = *v8;
                                          int v14 = "raidVerificationReads";
                                          goto LABEL_77;
                                        case 666:
                                          uint64_t v13 = *v8;
                                          int v14 = "nofDies";
                                          goto LABEL_77;
                                        case 671:
                                          uint64_t v13 = *v8;
                                          int v14 = "skinnyBandsNum";
                                          goto LABEL_77;
                                        case 672:
                                          uint64_t v13 = *v8;
                                          int v14 = "skinnyBandsNumDips";
                                          goto LABEL_77;
                                        case 674:
                                          unsigned int v15 = "oslcNoVotesHw";
                                          uint64_t v16 = a1;
                                          int v17 = 674;
                                          goto LABEL_149;
                                        case 675:
                                          uint64_t v13 = *v8;
                                          int v14 = "totalLbas";
                                          goto LABEL_77;
                                        case 676:
                                          uint64_t v13 = *v8;
                                          int v14 = "bdrHostPingExtra";
                                          goto LABEL_77;
                                        case 677:
                                          uint64_t v13 = *v8;
                                          int v14 = "magazineInstanceMeta";
                                          goto LABEL_77;
                                        default:
                                          switch(v7)
                                          {
                                            case 680:
                                              unsigned int v15 = "magazineFWVersion";
                                              uint64_t v16 = a1;
                                              int v17 = 680;
                                              goto LABEL_130;
                                            case 681:
                                              uint64_t v13 = *v8;
                                              int v14 = "raidReconstructFailPMXUnsup";
                                              goto LABEL_77;
                                            case 682:
                                              uint64_t v13 = *v8;
                                              int v14 = "raidReconstructFailBMXUnsup";
                                              goto LABEL_77;
                                            case 683:
                                              uint64_t v13 = *v8;
                                              int v14 = "iBootNANDResets";
                                              goto LABEL_77;
                                            case 684:
                                              uint64_t v13 = *v8;
                                              int v14 = "pcieClkreqHighTimeout";
                                              goto LABEL_77;
                                            case 687:
                                              unsigned int v15 = "cbdrInitSent";
                                              uint64_t v16 = a1;
                                              int v17 = 687;
                                              goto LABEL_130;
                                            case 688:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrPauseSent";
                                              goto LABEL_77;
                                            case 689:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrResumeSent";
                                              goto LABEL_77;
                                            case 690:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrGetResultSent";
                                              goto LABEL_77;
                                            case 691:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrEarlyExits";
                                              goto LABEL_77;
                                            case 694:
                                              unsigned int v15 = "cbdrRefreshGrades";
                                              uint64_t v16 = a1;
                                              int v17 = 694;
                                              goto LABEL_44;
                                            case 695:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrNotEnoughReads";
                                              goto LABEL_77;
                                            case 696:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrAborts";
                                              goto LABEL_77;
                                            case 697:
                                              uint64_t v13 = *v8;
                                              int v14 = "TurboRaidHostClassifications";
                                              goto LABEL_77;
                                            case 698:
                                              uint64_t v13 = *v8;
                                              int v14 = "TurboRaidInternalClassifications";
                                              goto LABEL_77;
                                            case 699:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrFullyDone";
                                              goto LABEL_77;
                                            case 702:
                                              unsigned int v15 = "vcurve";
                                              uint64_t v16 = a1;
                                              int v17 = 702;
                                              goto LABEL_283;
                                            case 703:
                                              unsigned int v15 = "injDepth";
                                              uint64_t v16 = a1;
                                              int v17 = 703;
                                              goto LABEL_281;
                                            case 704:
                                              uint64_t v13 = *v8;
                                              int v14 = "logical_disk_occupied_promiles";
                                              goto LABEL_77;
                                            case 711:
                                              uint64_t v13 = *v8;
                                              int v14 = "raidPrevFailedReconstructSkip";
                                              goto LABEL_77;
                                            case 712:
                                              uint64_t v13 = *v8;
                                              int v14 = "TurboRaidSuccessfulHostAuxReads";
                                              goto LABEL_77;
                                            case 713:
                                              uint64_t v13 = *v8;
                                              int v14 = "TurboRaidSuccessfulInternalAuxReads";
                                              goto LABEL_77;
                                            case 714:
                                              uint64_t v13 = *v8;
                                              int v14 = "turboRaidClassificationReliabilityHost";
                                              goto LABEL_77;
                                            case 715:
                                              uint64_t v13 = *v8;
                                              int v14 = "turboRaidClassificationReliabilityInternal";
                                              goto LABEL_77;
                                            case 716:
                                              uint64_t v13 = *v8;
                                              int v14 = "turboRaidClassificationQualityHost";
                                              goto LABEL_77;
                                            case 717:
                                              uint64_t v13 = *v8;
                                              int v14 = "turboRaidClassificationQualityInternal";
                                              goto LABEL_77;
                                            case 719:
                                              uint64_t v13 = *v8;
                                              int v14 = "skinnyBandErases";
                                              goto LABEL_77;
                                            case 721:
                                              uint64_t v13 = *v8;
                                              int v14 = "gcPDusterDestinations";
                                              goto LABEL_77;
                                            case 722:
                                              uint64_t v13 = *v8;
                                              int v14 = "gcPDusterWrites";
                                              goto LABEL_77;
                                            case 730:
                                              uint64_t v13 = *v8;
                                              int v14 = "rvFails";
                                              goto LABEL_77;
                                            case 737:
                                              uint64_t v13 = *v8;
                                              int v14 = "TurboRaidFailedHostAuxReads";
                                              goto LABEL_77;
                                            case 738:
                                              uint64_t v13 = *v8;
                                              int v14 = "TurboRaidFailedInternalAuxReads";
                                              goto LABEL_77;
                                            case 741:
                                              uint64_t v13 = *v8;
                                              int v14 = "autoSkipTriggers";
                                              goto LABEL_77;
                                            case 742:
                                              uint64_t v13 = *v8;
                                              int v14 = "autoSkipPlanes";
                                              goto LABEL_77;
                                            case 744:
                                              unsigned int v15 = "raidReconstructDurationHisto";
                                              uint64_t v16 = a1;
                                              int v17 = 744;
                                              goto LABEL_149;
                                            case 745:
                                              unsigned int v15 = "failsOnReconstructHisto";
                                              uint64_t v16 = a1;
                                              int v17 = 745;
                                              goto LABEL_149;
                                            case 746:
                                              uint64_t v13 = *v8;
                                              int v14 = "bandKill_userFlattenExcessive";
                                              goto LABEL_77;
                                            case 747:
                                              uint64_t v13 = *v8;
                                              int v14 = "bandKill_IntFlattenExcessive";
                                              goto LABEL_77;
                                            case 748:
                                              uint64_t v13 = *v8;
                                              int v14 = "bandKill_userFlattenBalance";
                                              goto LABEL_77;
                                            case 749:
                                              uint64_t v13 = *v8;
                                              int v14 = "bandKill_intFlattenBalance";
                                              goto LABEL_77;
                                            case 750:
                                              uint64_t v13 = *v8;
                                              int v14 = "bandKill_formatVertExcessive";
                                              goto LABEL_77;
                                            case 751:
                                              uint64_t v13 = *v8;
                                              int v14 = "bandKill_formatVertBalance";
                                              goto LABEL_77;
                                            case 753:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrNumSlowRefreshes";
                                              goto LABEL_77;
                                            case 754:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrNumFastRefreshes";
                                              goto LABEL_77;
                                            case 755:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrTotalRefreshValidity";
                                              goto LABEL_77;
                                            case 756:
                                              unsigned int v15 = "cbdrRefreshedAges";
                                              uint64_t v16 = a1;
                                              int v17 = 756;
                                              goto LABEL_673;
                                            case 758:
                                              uint64_t v13 = *v8;
                                              int v14 = "cbdrSkippedBlocks";
                                              goto LABEL_77;
                                            case 759:
                                              unsigned int v15 = "cbdrScanPct";
                                              uint64_t v16 = a1;
                                              int v17 = 759;
                                              goto LABEL_102;
                                            case 760:
                                              uint64_t v13 = *v8;
                                              int v14 = "raidSuccessfulBMXReconstructionInternal";
                                              goto LABEL_77;
                                            case 761:
                                              uint64_t v13 = *v8;
                                              int v14 = "raidSuccessfulBMXReconstructionHost";
                                              goto LABEL_77;
                                            case 762:
                                              uint64_t v13 = *v8;
                                              int v14 = "raidFailedBMXReconstructionInternal";
                                              goto LABEL_77;
                                            case 763:
                                              uint64_t v13 = *v8;
                                              int v14 = "raidFailedBMXReconstructionHost";
                                              goto LABEL_77;
                                            case 764:
                                              uint64_t v13 = *v8;
                                              int v14 = "ricSPRVFail";
                                              goto LABEL_77;
                                            case 765:
                                              uint64_t v13 = *v8;
                                              int v14 = "ricMPRVFail";
                                              goto LABEL_77;
                                            case 767:
                                              unsigned int v15 = "cbdrRefreshGradesSLC";
                                              uint64_t v16 = a1;
                                              int v17 = 767;
                                              goto LABEL_44;
                                            case 768:
                                              unsigned int v15 = "cbdrRefreshedAgesSLC";
                                              uint64_t v16 = a1;
                                              int v17 = 768;
LABEL_673:
                                              int v18 = v8;
                                              unsigned int v19 = 9;
                                              goto LABEL_51;
                                            case 769:
                                              unsigned int v15 = "cbdrScanPctSLC";
                                              uint64_t v16 = a1;
                                              int v17 = 769;
                                              goto LABEL_102;
                                            case 770:
                                              unsigned int v15 = "cpuBurstLength";
                                              uint64_t v16 = a1;
                                              int v17 = 770;
                                              goto LABEL_149;
                                            case 771:
                                              uint64_t v13 = *v8;
                                              int v14 = "autoSkipRaidRecoFail";
                                              goto LABEL_77;
                                            case 772:
                                              unsigned int v15 = "dmReasonsSlc";
                                              uint64_t v16 = a1;
                                              int v17 = 772;
                                              goto LABEL_283;
                                            case 773:
                                              unsigned int v15 = "dmReasonsTlc";
                                              uint64_t v16 = a1;
                                              int v17 = 773;
                                              goto LABEL_283;
                                            case 774:
                                              uint64_t v13 = *v8;
                                              int v14 = "raidReconstructFailBMXAbort";
                                              goto LABEL_77;
                                            case 775:
                                              uint64_t v13 = *v8;
                                              int v14 = "bandKill_fatBindingNoBlocks";
                                              goto LABEL_77;
                                            case 776:
                                              uint64_t v13 = *v8;
                                              int v14 = "bandKill_fatBindingFewBlocks";
                                              goto LABEL_77;
                                            default:
                                              switch(v7)
                                              {
                                                case 777:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "numBadBootBlocks";
                                                  goto LABEL_77;
                                                case 778:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "snapshotCPUHigh";
                                                  goto LABEL_77;
                                                case 779:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "snapshotCPULow";
                                                  goto LABEL_77;
                                                case 780:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "gcWithoutBMs";
                                                  goto LABEL_77;
                                                case 781:
                                                  unsigned int v15 = "gcSearchTimeHistory";
                                                  uint64_t v16 = a1;
                                                  int v17 = 781;
                                                  goto LABEL_44;
                                                case 785:
                                                  unsigned int v15 = "gcSearchPortion";
                                                  uint64_t v16 = a1;
                                                  int v17 = 785;
                                                  goto LABEL_213;
                                                case 786:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "raidReconstructFailBmxMp";
                                                  goto LABEL_77;
                                                case 787:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "raidReconstructFailBmx";
                                                  goto LABEL_77;
                                                case 788:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "raidReconstructFailBMXUECC";
                                                  goto LABEL_77;
                                                case 789:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "raidReconstructFailBMXBlank";
                                                  goto LABEL_77;
                                                case 790:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "raidPrevFailedReconstructBmxMpSkip";
                                                  goto LABEL_77;
                                                case 792:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "numTLCFatBands";
                                                  goto LABEL_77;
                                                case 793:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "fatValidity";
                                                  goto LABEL_77;
                                                case 794:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "fatTotal";
                                                  goto LABEL_77;
                                                case 798:
                                                  unsigned int v15 = "raidBMXFailP";
                                                  uint64_t v16 = a1;
                                                  int v17 = 798;
                                                  goto LABEL_144;
                                                case 799:
                                                  unsigned int v15 = "raidBMXFailUECC";
                                                  uint64_t v16 = a1;
                                                  int v17 = 799;
                                                  goto LABEL_144;
                                                case 804:
                                                  unsigned int v15 = "raidBMXFailNoSPBX";
                                                  uint64_t v16 = a1;
                                                  int v17 = 804;
                                                  goto LABEL_144;
                                                case 806:
                                                  unsigned int v15 = "raidBMXFailBlank";
                                                  uint64_t v16 = a1;
                                                  int v17 = 806;
                                                  goto LABEL_144;
                                                case 809:
                                                  unsigned int v15 = "raidBMXFailUnsup";
                                                  uint64_t v16 = a1;
                                                  int v17 = 809;
                                                  goto LABEL_144;
                                                case 811:
                                                  unsigned int v15 = "raidBMXFailMpSkip";
                                                  uint64_t v16 = a1;
                                                  int v17 = 811;
                                                  goto LABEL_144;
                                                case 812:
                                                  unsigned int v15 = "raidBMXFailAbort";
                                                  uint64_t v16 = a1;
                                                  int v17 = 812;
                                                  goto LABEL_144;
                                                case 813:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "TurboRaidIsEnabled";
                                                  goto LABEL_77;
                                                case 814:
                                                  unsigned int v15 = "raidBMXFailOther";
                                                  uint64_t v16 = a1;
                                                  int v17 = 814;
                                                  goto LABEL_144;
                                                case 815:
                                                  unsigned int v15 = "raidBMXSuccess";
                                                  uint64_t v16 = a1;
                                                  int v17 = 815;
                                                  goto LABEL_144;
                                                case 816:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "skinnyBandsExtraDip";
                                                  goto LABEL_77;
                                                case 821:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "writeAmp";
                                                  goto LABEL_77;
                                                case 822:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "ricMaxClogOnlyPages";
                                                  goto LABEL_77;
                                                case 823:
                                                  unsigned int v15 = "readClassifyStatusesHisto";
                                                  uint64_t v16 = a1;
                                                  int v17 = 823;
                                                  goto LABEL_130;
                                                case 824:
                                                  unsigned int v15 = "readWithAuxStatusesHisto";
                                                  uint64_t v16 = a1;
                                                  int v17 = 824;
                                                  goto LABEL_44;
                                                case 825:
                                                  unsigned int v15 = "readReconstructStatusesHisto";
                                                  uint64_t v16 = a1;
                                                  int v17 = 825;
                                                  goto LABEL_44;
                                                case 826:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "bdrBackupChecks";
                                                  goto LABEL_77;
                                                case 827:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "ricExceedClogOnlyPagesTH";
                                                  goto LABEL_77;
                                                case 828:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "numDipFailures";
                                                  goto LABEL_77;
                                                case 831:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "prefetchNextRange";
                                                  goto LABEL_77;
                                                case 862:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "raidSuccessfulSkip";
                                                  goto LABEL_77;
                                                case 863:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "raidFailedSkip";
                                                  goto LABEL_77;
                                                case 864:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "raidSkipAttempts";
                                                  goto LABEL_77;
                                                case 865:
                                                  unsigned int v15 = "timeOfThrottlingPerLevel";
                                                  uint64_t v16 = a1;
                                                  int v17 = 865;
                                                  goto LABEL_213;
                                                case 866:
                                                  unsigned int v15 = "timeOfThrottlingPerReadLevel";
                                                  uint64_t v16 = a1;
                                                  int v17 = 866;
                                                  goto LABEL_213;
                                                case 867:
                                                  unsigned int v15 = "timeOfThrottlingPerWriteLevel";
                                                  uint64_t v16 = a1;
                                                  int v17 = 867;
                                                  goto LABEL_213;
                                                case 868:
                                                  unsigned int v15 = "dmReasonsSlc_1bc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 868;
                                                  goto LABEL_283;
                                                case 869:
                                                  unsigned int v15 = "dmReasonsTlc_1bc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 869;
                                                  goto LABEL_283;
                                                case 870:
                                                  unsigned int v15 = "dmReasonsSlc_1bc_he";
                                                  uint64_t v16 = a1;
                                                  int v17 = 870;
                                                  goto LABEL_283;
                                                case 871:
                                                  unsigned int v15 = "dmReasonsTlc_1bc_he";
                                                  uint64_t v16 = a1;
                                                  int v17 = 871;
                                                  goto LABEL_283;
                                                case 876:
                                                  unsigned int v15 = "dmReasonsSlc_mbc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 876;
                                                  goto LABEL_283;
                                                case 877:
                                                  unsigned int v15 = "dmReasonsTlc_mbc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 877;
                                                  goto LABEL_283;
                                                case 883:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "clogEmptyProgramms";
                                                  goto LABEL_77;
                                                case 884:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "oslcHwCloseBand";
                                                  goto LABEL_77;
                                                case 891:
                                                  unsigned int v15 = "turboRaidSuccessAuxPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 891;
                                                  goto LABEL_123;
                                                case 892:
                                                  unsigned int v15 = "turboRaidFailAuxPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 892;
                                                  goto LABEL_123;
                                                case 893:
                                                  unsigned int v15 = "turboRaidClassifyQualPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 893;
                                                  goto LABEL_123;
                                                case 894:
                                                  unsigned int v15 = "turboRaidClassifyRelPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 894;
                                                  goto LABEL_123;
                                                case 895:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "IND_pool_freeMinSilo";
                                                  goto LABEL_77;
                                                case 896:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "autoSweepBlocks";
                                                  goto LABEL_77;
                                                case 897:
                                                  unsigned int v15 = "wcWrFragSizes";
                                                  uint64_t v16 = a1;
                                                  int v17 = 897;
                                                  goto LABEL_213;
                                                case 898:
                                                  unsigned int v15 = "indStateAcrossGcDidNoL";
                                                  uint64_t v16 = a1;
                                                  int v17 = 898;
                                                  goto LABEL_213;
                                                case 899:
                                                  unsigned int v15 = "indStateAcrossGcDidL";
                                                  uint64_t v16 = a1;
                                                  int v17 = 899;
                                                  goto LABEL_213;
                                                case 900:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "turboRaidNoClassifyDueToWasRetire";
                                                  goto LABEL_77;
                                                case 901:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "turboRaidNoClassifyDueToOpenBand";
                                                  goto LABEL_77;
                                                case 902:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "turboRaidNoClassifyDueToQualityBlock";
                                                  goto LABEL_77;
                                                case 903:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "turboRaidGbbOpenBand";
                                                  goto LABEL_77;
                                                case 904:
                                                  uint64_t v13 = *v8;
                                                  int v14 = "turboRaidGbbShouldRetireOnRefresh";
                                                  goto LABEL_77;
                                                case 905:
                                                  unsigned int v15 = "turboRaidRelPerBlock";
                                                  uint64_t v16 = a1;
                                                  int v17 = 905;
                                                  goto LABEL_213;
                                                case 906:
                                                  unsigned int v15 = "turboRaidRelBetweenRefreshesPerBlock";
                                                  uint64_t v16 = a1;
                                                  int v17 = 906;
                                                  goto LABEL_213;
                                                default:
                                                  if (v7 <= 1039)
                                                  {
                                                    switch(v7)
                                                    {
                                                      case 907:
                                                        unsigned int v15 = "turboRaidMaxRelBetweenRefreshesPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 907;
                                                        goto LABEL_213;
                                                      case 908:
                                                        unsigned int v15 = "turboRaidMinRelBetweenRefreshesPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 908;
                                                        goto LABEL_213;
                                                      case 909:
                                                      case 910:
                                                      case 911:
                                                      case 912:
                                                      case 913:
                                                      case 914:
                                                      case 915:
                                                      case 916:
                                                      case 917:
                                                      case 924:
                                                      case 925:
                                                      case 926:
                                                      case 927:
                                                      case 928:
                                                      case 929:
                                                      case 936:
                                                      case 941:
                                                      case 945:
                                                      case 946:
                                                      case 947:
                                                      case 949:
                                                      case 950:
                                                      case 952:
                                                      case 954:
                                                      case 955:
                                                      case 956:
                                                      case 957:
                                                      case 958:
                                                      case 959:
                                                      case 960:
                                                      case 963:
                                                      case 964:
                                                      case 965:
                                                      case 966:
                                                      case 968:
                                                      case 969:
                                                      case 970:
                                                        goto LABEL_824;
                                                      case 918:
                                                        unsigned int v15 = "turboRaidMaxCyclesBetweenRel";
                                                        uint64_t v16 = a1;
                                                        int v17 = 918;
                                                        goto LABEL_213;
                                                      case 919:
                                                        unsigned int v15 = "turboRaidMinCyclesBetweenRel";
                                                        uint64_t v16 = a1;
                                                        int v17 = 919;
                                                        goto LABEL_213;
                                                      case 920:
                                                        unsigned int v15 = "turboRaidAuxPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 920;
                                                        goto LABEL_213;
                                                      case 921:
                                                        unsigned int v15 = "turboRaidAuxBetweenRefreshesPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 921;
                                                        goto LABEL_213;
                                                      case 922:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "turboRaidRelLockMark";
                                                        goto LABEL_77;
                                                      case 923:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "turboRaidAuxLockMark";
                                                        goto LABEL_77;
                                                      case 930:
                                                        unsigned int v15 = "turboRaidMaxCyclesBetweenAux";
                                                        uint64_t v16 = a1;
                                                        int v17 = 930;
                                                        goto LABEL_213;
                                                      case 931:
                                                        unsigned int v15 = "turboRaidMinCyclesBetweenAux";
                                                        uint64_t v16 = a1;
                                                        int v17 = 931;
                                                        goto LABEL_213;
                                                      case 932:
                                                        unsigned int v15 = "turboRaidLastRelPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 932;
                                                        goto LABEL_213;
                                                      case 933:
                                                        unsigned int v15 = "turboRaidRelQualPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 933;
                                                        goto LABEL_213;
                                                      case 934:
                                                        unsigned int v15 = "turboRaidLastAuxPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 934;
                                                        goto LABEL_213;
                                                      case 935:
                                                        unsigned int v15 = "turboRaidAuxQualPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 935;
                                                        goto LABEL_213;
                                                      case 937:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "turboRaidPEFailAfterRel";
                                                        goto LABEL_77;
                                                      case 938:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "turboRaidPEFailAfterAux";
                                                        goto LABEL_77;
                                                      case 939:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "dvfmVotesCPU";
                                                        goto LABEL_77;
                                                      case 940:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "dvfmVotesBandwidth";
                                                        goto LABEL_77;
                                                      case 942:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "maxSLCEndurance";
                                                        goto LABEL_77;
                                                      case 943:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "maxMixedEndurance";
                                                        goto LABEL_77;
                                                      case 944:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "maxNativeEndurance";
                                                        goto LABEL_77;
                                                      case 948:
                                                        unsigned int v15 = "assertHistory";
                                                        uint64_t v16 = a1;
                                                        int v17 = 948;
                                                        int v18 = v8;
                                                        unsigned int v19 = 40;
                                                        goto LABEL_51;
                                                      case 951:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "asp3Support";
                                                        goto LABEL_77;
                                                      case 953:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "numCrossTempRaidUecc";
                                                        goto LABEL_77;
                                                      case 961:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "osBuildStr";
                                                        goto LABEL_77;
                                                      case 962:
                                                        uint64_t v13 = *v8;
                                                        int v14 = "raidConfig";
                                                        goto LABEL_77;
                                                      case 967:
                                                        unsigned int v15 = "indTrimFrags";
                                                        uint64_t v16 = a1;
                                                        int v17 = 967;
                                                        goto LABEL_281;
                                                      case 971:
                                                        unsigned int v15 = "indUsedFrags";
                                                        uint64_t v16 = a1;
                                                        int v17 = 971;
                                                        goto LABEL_281;
                                                      default:
                                                        switch(v7)
                                                        {
                                                          case 996:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "clogFindFail";
                                                            goto LABEL_78;
                                                          case 997:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "clogFindBlank";
                                                            goto LABEL_78;
                                                          case 998:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "clogFindUnc";
                                                            goto LABEL_78;
                                                          case 999:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "clogFindUnexpected";
                                                            goto LABEL_78;
                                                          case 1001:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1001;
                                                            unsigned int v15 = "clogReplayFailReason";
                                                            goto LABEL_149;
                                                          case 1002:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "clogReplayTransientError";
                                                            goto LABEL_78;
                                                          case 1003:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "clogReplaySpfError";
                                                            goto LABEL_78;
                                                          case 1015:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1015;
                                                            unsigned int v15 = "eanEarlyBootUeccPage";
                                                            goto LABEL_144;
                                                          case 1016:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "eanEarlyBootNumUeccPages";
                                                            goto LABEL_78;
                                                          case 1017:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "eanEarlyBootUeccMultiplane";
                                                            goto LABEL_78;
                                                          default:
                                                            goto LABEL_824;
                                                        }
                                                    }
                                                  }
                                                  if (v7 <= 1137)
                                                  {
                                                    if (v7 > 1104)
                                                    {
                                                      if (v7 > 1115)
                                                      {
                                                        if (v7 == 1116)
                                                        {
                                                          uint64_t v16 = a1;
                                                          int v17 = 1116;
                                                          unsigned int v15 = "gcwamp";
LABEL_283:
                                                          int v18 = v8;
                                                          unsigned int v19 = 32;
                                                          goto LABEL_51;
                                                        }
                                                        if (v7 == 1137)
                                                        {
                                                          uint64_t v13 = *v8;
                                                          uint64_t v20 = (void *)a1;
                                                          int v14 = "numOfToUnhappySwitches";
                                                          goto LABEL_78;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if (v7 == 1105)
                                                        {
                                                          uint64_t v16 = a1;
                                                          int v17 = 1105;
                                                          unsigned int v15 = "hostReadSequential";
                                                          goto LABEL_831;
                                                        }
                                                        if (v7 == 1106)
                                                        {
                                                          uint64_t v16 = a1;
                                                          int v17 = 1106;
                                                          unsigned int v15 = "GCReadSequential";
LABEL_831:
                                                          int v18 = v8;
                                                          unsigned int v19 = 14;
                                                          goto LABEL_51;
                                                        }
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if (v7 <= 1041)
                                                      {
                                                        uint64_t v16 = a1;
                                                        if (v7 == 1040)
                                                        {
                                                          int v17 = 1040;
                                                          unsigned int v15 = "bandsAgeBinsV2";
                                                        }
                                                        else
                                                        {
                                                          int v17 = 1041;
                                                          unsigned int v15 = "bandsAgeBinsSnapshot";
                                                        }
                                                        int v18 = v8;
                                                        unsigned int v19 = 31;
                                                        goto LABEL_51;
                                                      }
                                                      if (v7 == 1042)
                                                      {
                                                        uint64_t v16 = a1;
                                                        int v17 = 1042;
                                                        unsigned int v15 = "bandsAgeBinsReadSectors";
                                                        int v18 = v8;
                                                        unsigned int v19 = 15;
LABEL_51:
                                                        sub_10007F494(v16, v17, v15, v18, v19);
                                                        goto LABEL_79;
                                                      }
                                                      if (v7 == 1080)
                                                      {
                                                        uint64_t v13 = *v8;
                                                        uint64_t v20 = (void *)a1;
                                                        int v14 = "raidForceClogLoad";
                                                        goto LABEL_78;
                                                      }
                                                    }
LABEL_824:
                                                    switch(v7)
                                                    {
                                                      case 1196:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1196;
                                                        unsigned int v15 = "poDetectGBBedTotalCost";
                                                        goto LABEL_102;
                                                      case 1197:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1197;
                                                        unsigned int v15 = "poDetectGBBedAge";
                                                        goto LABEL_44;
                                                      case 1198:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1198;
                                                        unsigned int v15 = "poDetectPERemovalMostSevereCost";
                                                        goto LABEL_130;
                                                      case 1199:
                                                        uint64_t v13 = *v8;
                                                        uint64_t v20 = (void *)a1;
                                                        int v14 = "poDetectCurrentSize";
                                                        goto LABEL_78;
                                                      case 1200:
                                                      case 1203:
                                                      case 1204:
                                                      case 1205:
                                                      case 1206:
                                                      case 1207:
                                                      case 1208:
                                                      case 1209:
                                                      case 1210:
                                                      case 1212:
                                                      case 1213:
                                                      case 1214:
                                                      case 1219:
                                                      case 1220:
                                                      case 1221:
                                                      case 1222:
                                                      case 1223:
                                                        break;
                                                      case 1201:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1201;
                                                        unsigned int v15 = "gcVerticalSuccssfulAlignments";
                                                        goto LABEL_144;
                                                      case 1202:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1202;
                                                        unsigned int v15 = "gcVerticalNoAlignmentDueToMissingSegs";
                                                        goto LABEL_144;
                                                      case 1211:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1211;
                                                        unsigned int v15 = "forcedAllocationSmallEraseQ";
                                                        goto LABEL_844;
                                                      case 1215:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1215;
                                                        unsigned int v15 = "hostWritesPerThrottleZone";
                                                        goto LABEL_102;
                                                      case 1216:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1216;
                                                        unsigned int v15 = "tlcWLPerDipAvgPEC";
                                                        goto LABEL_844;
                                                      case 1217:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1217;
                                                        unsigned int v15 = "tlcWLPerDipMaxPEC";
                                                        goto LABEL_844;
                                                      case 1218:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1218;
                                                        unsigned int v15 = "tlcWLPerDipMinPEC";
                                                        goto LABEL_844;
                                                      case 1224:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1224;
                                                        unsigned int v15 = "apfsValidLbaOvershoot";
                                                        goto LABEL_93;
                                                      default:
                                                        switch(v7)
                                                        {
                                                          case 1232:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "eanFastSize";
                                                            goto LABEL_78;
                                                          case 1233:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "eanNumSlcEvictions";
                                                            goto LABEL_78;
                                                          case 1234:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "eanNumForcedCompress";
                                                            goto LABEL_78;
                                                          case 1235:
                                                          case 1236:
                                                          case 1237:
                                                          case 1238:
                                                          case 1239:
                                                          case 1240:
                                                          case 1242:
                                                          case 1243:
                                                          case 1245:
                                                            goto LABEL_79;
                                                          case 1241:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1241;
                                                            unsigned int v15 = "s2rTimeHisto";
                                                            goto LABEL_44;
                                                          case 1244:
                                                            uint64_t v13 = *v8;
                                                            uint64_t v20 = (void *)a1;
                                                            int v14 = "calendarTimeWentBackward";
                                                            goto LABEL_78;
                                                          case 1246:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1246;
                                                            unsigned int v15 = "bandsUeccCrossTempHisto";
                                                            goto LABEL_149;
                                                          default:
                                                            if (v7 != 1190) {
                                                              goto LABEL_79;
                                                            }
                                                            uint64_t v16 = a1;
                                                            int v17 = 1190;
                                                            unsigned int v15 = "powerDownTime";
                                                            break;
                                                        }
                                                        goto LABEL_281;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    switch(v7)
                                                    {
                                                      case 1147:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1147;
                                                        unsigned int v15 = "gc_concurrent_dw_gc12";
                                                        goto LABEL_844;
                                                      case 1148:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1148;
                                                        unsigned int v15 = "gc_concurrent_dw_gc1";
                                                        goto LABEL_844;
                                                      case 1149:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1149;
                                                        unsigned int v15 = "gc_concurrent_dw_gc2";
LABEL_844:
                                                        int v18 = v8;
                                                        unsigned int v19 = 24;
                                                        goto LABEL_51;
                                                      case 1150:
                                                      case 1151:
                                                      case 1152:
                                                      case 1153:
                                                      case 1154:
                                                      case 1155:
                                                      case 1156:
                                                      case 1159:
                                                      case 1160:
                                                      case 1161:
                                                      case 1162:
                                                      case 1163:
                                                      case 1164:
                                                      case 1165:
                                                      case 1166:
                                                      case 1167:
                                                      case 1170:
                                                      case 1173:
                                                      case 1174:
                                                      case 1175:
                                                      case 1176:
                                                      case 1177:
                                                      case 1178:
                                                        goto LABEL_824;
                                                      case 1157:
                                                        uint64_t v13 = *v8;
                                                        uint64_t v20 = (void *)a1;
                                                        int v14 = "eanMaxForceROTimeMs";
                                                        break;
                                                      case 1158:
                                                        uint64_t v13 = *v8;
                                                        uint64_t v20 = (void *)a1;
                                                        int v14 = "eanMaxForceRORecoTimeMs";
                                                        break;
                                                      case 1168:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1168;
                                                        unsigned int v15 = "poDetectPERemovalTotalCost";
                                                        goto LABEL_123;
                                                      case 1169:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1169;
                                                        unsigned int v15 = "poDetectEmptySpotRemovalTotalCost";
                                                        goto LABEL_123;
                                                      case 1171:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1171;
                                                        unsigned int v15 = "poDetectEmptySpotRemovalAge";
                                                        goto LABEL_44;
                                                      case 1172:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1172;
                                                        unsigned int v15 = "poDetectGBBedMostSevereCost";
                                                        goto LABEL_130;
                                                      case 1179:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1179;
                                                        unsigned int v15 = "gc_cur_dw_gc1";
                                                        goto LABEL_144;
                                                      case 1180:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1180;
                                                        unsigned int v15 = "gc_cur_dw_gc2";
                                                        goto LABEL_144;
                                                      case 1181:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1181;
                                                        unsigned int v15 = "gc_cur_dw_gc3";
                                                        goto LABEL_144;
                                                      case 1182:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1182;
                                                        unsigned int v15 = "gc_tot_dw_gc1";
                                                        goto LABEL_144;
                                                      case 1183:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1183;
                                                        unsigned int v15 = "gc_tot_dw_gc2";
                                                        goto LABEL_144;
                                                      case 1184:
                                                        uint64_t v13 = *v8;
                                                        uint64_t v20 = (void *)a1;
                                                        int v14 = "unhappy_state";
                                                        break;
                                                      case 1185:
                                                        uint64_t v13 = *v8;
                                                        uint64_t v20 = (void *)a1;
                                                        int v14 = "unhappy_level";
                                                        break;
                                                      default:
                                                        if (v7 == 1138)
                                                        {
                                                          uint64_t v13 = *v8;
                                                          uint64_t v20 = (void *)a1;
                                                          int v14 = "numOfToHappySwitches";
                                                        }
                                                        else
                                                        {
                                                          if (v7 != 1189) {
                                                            goto LABEL_824;
                                                          }
                                                          uint64_t v13 = *v8;
                                                          uint64_t v20 = (void *)a1;
                                                          int v14 = "lastLbaFormatTime";
                                                        }
                                                        break;
                                                    }
LABEL_78:
                                                    sub_100092444(v20, "", v14, v13);
                                                  }
LABEL_79:
                                                  a2 = &v8[v10];
                                                  unsigned int v6 = v11 - v10;
                                                  if (v11 != v10) {
                                                    continue;
                                                  }
                                                  uint64_t result = 1;
                                                  break;
                                              }
                                              break;
                                          }
                                          break;
                                      }
                                      break;
                                  }
                                  break;
                              }
                              break;
                          }
                          break;
                      }
                      break;
                  }
                  break;
              }
              break;
          }
          break;
      }
    }
    else
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 32) = 0;
    }
    return result;
  }
}

uint64_t sub_10007F494(uint64_t result, int a2, const char *a3, uint64_t *a4, unsigned int a5)
{
  int v7 = (void *)result;
  uint64_t v8 = *a4;
  if (a2 <= 44)
  {
    switch(a2)
    {
      case 4:
        *(void *)(result + 72) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 5:
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 14:
      case 15:
      case 16:
        goto LABEL_41;
      case 7:
        *(void *)(result + 64) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 12:
        *(void *)(result + 144) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 13:
        *(void *)(result + 152) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 17:
        *(void *)(result + 88) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 18:
        *(void *)(result + 104) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 19:
        *(void *)(result + 96) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 20:
        *(void *)(result + 112) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      default:
        if (a2 != 28) {
          goto LABEL_41;
        }
        *(void *)(result + 168) = v8;
        if (!a5) {
          return result;
        }
        goto LABEL_42;
    }
  }
  switch(a2)
  {
    case '-':
      *(void *)(result + 176) = v8;
      if (a5) {
        goto LABEL_42;
      }
      return result;
    case '.':
    case '/':
    case '6':
    case '7':
      goto LABEL_41;
    case '0':
      *(void *)(result + 80) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '1':
      *(_DWORD *)(result + 56) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '2':
      *(_DWORD *)(result + 52) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '3':
      *(_DWORD *)(result + 48) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '4':
      *(_DWORD *)(result + 44) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '5':
      *(_DWORD *)(result + 32) = v8;
      goto LABEL_41;
    case '8':
      *(void *)(result + 160) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    default:
      if (a2 != 265) {
        goto LABEL_41;
      }
      if (a5)
      {
        uint64_t v9 = a5;
        unint64_t v10 = (void *)(result + 184);
        unsigned int v11 = a4;
        do
        {
          uint64_t v12 = *v11++;
          *v10++ = v12;
          --v9;
        }
        while (v9);
LABEL_41:
        if (a5)
        {
LABEL_42:
          if (a5 == 1)
          {
            return sub_100092444((void *)result, "", a3, v8);
          }
          else
          {
            uint64_t v13 = 0;
            uint64_t v14 = a5;
            do
            {
              snprintf(__str, 0x64uLL, "%d", v13);
              __str[100] = 0;
              uint64_t result = sub_100092444(v7, a3, __str, a4[v13++]);
            }
            while (v14 != v13);
          }
        }
      }
      return result;
  }
}

double sub_10007F774(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)v2[14];
      free(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)v4[14];
      free(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_10007F7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t *)a2;
  uint64_t v10 = 0;
  unsigned int v11 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  long long v23 = 0u;
  do
  {
LABEL_2:
    if (!v11) {
      return v10;
    }
    unint64_t v13 = *v8++;
    int v12 = v13;
    unint64_t v14 = HIDWORD(v13);
    --v11;
  }
  while (!HIDWORD(v13));
  if (v12 == 0xFFFF || v12 > 0x30000000 || v11 < v14) {
    return v10;
  }
  switch(v12)
  {
    case 1:
      if (sub_1000922B8(a1, "", "version", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: version(1) cannot add 1 element to context";
      goto LABEL_161;
    case 2:
      if (sub_1000922B8(a1, "", "hostWriteXacts", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWriteXacts(2) cannot add 1 element to context";
      goto LABEL_161;
    case 3:
      if (sub_1000922B8(a1, "", "hostReadXacts", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostReadXacts(3) cannot add 1 element to context";
      goto LABEL_161;
    case 4:
      if (sub_1000922B8(a1, "", "hostWrites", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWrites(4) cannot add 1 element to context";
      goto LABEL_161;
    case 5:
      if (sub_1000922B8(a1, "", "hostWritesDyn", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWritesDyn(5) cannot add 1 element to context";
      goto LABEL_161;
    case 6:
      if (sub_1000922B8(a1, "", "hostWritesStatic", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWritesStatic(6) cannot add 1 element to context";
      goto LABEL_161;
    case 7:
      if (sub_1000922B8(a1, "", "hostReads", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostReads(7) cannot add 1 element to context";
      goto LABEL_161;
    case 8:
      if (sub_1000922B8(a1, "", "validLbas", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: validLbas(8) cannot add 1 element to context";
      goto LABEL_161;
    case 9:
      if (sub_1000922B8(a1, "", "shutdowns", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: shutdowns(9) cannot add 1 element to context";
      goto LABEL_161;
    case 10:
      if (sub_1000922B8(a1, "", "boots", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: boots(10) cannot add 1 element to context";
      goto LABEL_161;
    case 11:
      if (sub_1000922B8(a1, "", "uncleanBoots", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: uncleanBoots(11) cannot add 1 element to context";
      goto LABEL_161;
    case 12:
      if (sub_1000922B8(a1, "", "IND_pool_free", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: IND_pool_free(12) cannot add 1 element to context";
      goto LABEL_161;
    case 13:
      if (sub_1000922B8(a1, "", "IND_pool_count", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: IND_pool_count(13) cannot add 1 element to context";
      goto LABEL_161;
    case 14:
      if (v14 != 10) {
        sub_100079708("ASPFTLParseBufferToCxt: hostWriteLogHisto(14): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0xA) {
        unsigned int v18 = 10;
      }
      else {
        unsigned int v18 = v14;
      }
      if (sub_10008B714(a1, "hostWriteLogHisto_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: hostWriteLogHisto(14): Cannot add 10 elements to context";
      goto LABEL_2616;
    case 15:
      if (v14 != 10) {
        sub_100079708("ASPFTLParseBufferToCxt: hostReadLogHisto(15): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0xA) {
        unsigned int v18 = 10;
      }
      else {
        unsigned int v18 = v14;
      }
      if (sub_10008B714(a1, "hostReadLogHisto_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: hostReadLogHisto(15): Cannot add 10 elements to context";
      goto LABEL_2616;
    case 16:
      if (sub_1000922B8(a1, "", "gcWrites", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: gcWrites(16) cannot add 1 element to context";
      goto LABEL_161;
    case 17:
      if (sub_1000922B8(a1, "", "wearLevMoves", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: wearLevMoves(17) cannot add 1 element to context";
      goto LABEL_161;
    case 18:
      if (sub_1000922B8(a1, "", "nandWrites", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: nandWrites(18) cannot add 1 element to context";
      goto LABEL_161;
    case 19:
      if (sub_1000922B8(a1, "", "nandReads", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: nandReads(19) cannot add 1 element to context";
      goto LABEL_161;
    case 20:
      if (sub_1000922B8(a1, "", "bandErases", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: bandErases(20) cannot add 1 element to context";
      goto LABEL_161;
    case 22:
      if (sub_1000922B8(a1, "", "numPfail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numPfail(22) cannot add 1 element to context";
      goto LABEL_161;
    case 23:
      if (sub_1000922B8(a1, "", "numEfail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numEfail(23) cannot add 1 element to context";
      goto LABEL_161;
    case 24:
      if (sub_1000922B8(a1, "", "numPerformanceRefreshes", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numPerformanceRefreshes(24) cannot add 1 element to context";
      goto LABEL_161;
    case 27:
      if (sub_1000922B8(a1, "", "hostWritesMeta", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWritesMeta(27) cannot add 1 element to context";
      goto LABEL_161;
    case 28:
      if (sub_1000922B8(a1, "", "numSleepOps", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numSleepOps(28) cannot add 1 element to context";
      goto LABEL_161;
    case 30:
      if (sub_1000922B8(a1, "", "cntTimeWentBackWardOnBoot", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cntTimeWentBackWardOnBoot(30) cannot add 1 element to context";
      goto LABEL_161;
    case 31:
      if (sub_1000922B8(a1, "", "cntTimeWentBackWard", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cntTimeWentBackWard(31) cannot add 1 element to context";
      goto LABEL_161;
    case 34:
      if (sub_1000922B8(a1, "", "powerOnHours", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: powerOnHours(34) cannot add 1 element to context";
      goto LABEL_161;
    case 36:
      if (sub_1000922B8(a1, "", "smartCritWarnings", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: smartCritWarnings(36) cannot add 1 element to context";
      goto LABEL_161;
    case 37:
      if (sub_1000922B8(a1, "", "numFlushes", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numFlushes(37) cannot add 1 element to context";
      goto LABEL_161;
    case 38:
      if (sub_1000922B8(a1, "", "numUnmap", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numUnmap(38) cannot add 1 element to context";
      goto LABEL_161;
    case 39:
      if (sub_1000922B8(a1, "", "numUnmapSec", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numUnmapSec(39) cannot add 1 element to context";
      goto LABEL_161;
    case 41:
      if (sub_1000922B8(a1, "", "clogProgram", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogProgram(41) cannot add 1 element to context";
      goto LABEL_161;
    case 42:
      if (sub_1000922B8(a1, "", "clogPFail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogPFail(42) cannot add 1 element to context";
      goto LABEL_161;
    case 43:
      if (sub_1000922B8(a1, "", "clogRead", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogRead(43) cannot add 1 element to context";
      goto LABEL_161;
    case 44:
      if (sub_1000922B8(a1, "", "clogRFail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogRFail(44) cannot add 1 element to context";
      goto LABEL_161;
    case 45:
      if (sub_1000922B8(a1, "", "maxHighEnduranceBlockErases", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: maxHighEnduranceBlockErases(45) cannot add 1 element to context";
      goto LABEL_161;
    case 46:
      if (sub_1000922B8(a1, "", "numFactoryBad", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numFactoryBad(46) cannot add 1 element to context";
      goto LABEL_161;
    case 47:
      if (sub_1000922B8(a1, "", "numGrownBad", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numGrownBad(47) cannot add 1 element to context";
      goto LABEL_161;
    case 48:
      if (sub_1000922B8(a1, "", "numFreeVirtualBlocks", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numFreeVirtualBlocks(48) cannot add 1 element to context";
      goto LABEL_161;
    case 49:
      if (sub_1000922B8(a1, "", "bytesPerPage", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: bytesPerPage(49) cannot add 1 element to context";
      goto LABEL_161;
    case 50:
      if (sub_1000922B8(a1, "", "pagesPerVirtualBlock", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: pagesPerVirtualBlock(50) cannot add 1 element to context";
      goto LABEL_161;
    case 51:
      if (sub_1000922B8(a1, "", "blocksPerVirtualBlock", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: blocksPerVirtualBlock(51) cannot add 1 element to context";
      goto LABEL_161;
    case 52:
      if (sub_1000922B8(a1, "", "numVirtualBlocks", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numVirtualBlocks(52) cannot add 1 element to context";
      goto LABEL_161;
    case 53:
      if (sub_1000922B8(a1, "", "exportVersion", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: exportVersion(53) cannot add 1 element to context";
      goto LABEL_161;
    case 54:
      if (v14 != 100) {
        sub_100079708("ASPFTLParseBufferToCxt: ECBins(54): (#100) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0x64) {
        unsigned int v18 = 100;
      }
      else {
        unsigned int v18 = v14;
      }
      if (sub_10008B714(a1, "ECBins_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: ECBins(54): Cannot add 100 elements to context";
      goto LABEL_2616;
    case 55:
      if (v14 != 100) {
        sub_100079708("ASPFTLParseBufferToCxt: RCBins(55): (#100) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0x64) {
        unsigned int v18 = 100;
      }
      else {
        unsigned int v18 = v14;
      }
      if (sub_10008B714(a1, "RCBins_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: RCBins(55): Cannot add 100 elements to context";
      goto LABEL_2616;
    case 56:
      if (sub_1000922B8(a1, "", "utilFormatTime", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: utilFormatTime(56) cannot add 1 element to context";
      goto LABEL_161;
    case 57:
      if (sub_1000922B8(a1, "", "calendarTime", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: calendarTime(57) cannot add 1 element to context";
      goto LABEL_161;
    case 58:
      if (sub_1000922B8(a1, "", "wallTime", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: wallTime(58) cannot add 1 element to context";
      goto LABEL_161;
    case 59:
      if (sub_1000922B8(a1, "", "cmdq_flush_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_flush_us(59) cannot add 1 element to context";
      goto LABEL_161;
    case 60:
      if (sub_1000922B8(a1, "", "cmdq_unmap_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_unmap_us(60) cannot add 1 element to context";
      goto LABEL_161;
    case 61:
      if (sub_1000922B8(a1, "", "cmdq_pri0_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri0_r_us(61) cannot add 1 element to context";
      goto LABEL_161;
    case 62:
      if (sub_1000922B8(a1, "", "cmdq_pri0_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri0_w_us(62) cannot add 1 element to context";
      goto LABEL_161;
    case 63:
      if (sub_1000922B8(a1, "", "cmdq_pri1_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri1_r_us(63) cannot add 1 element to context";
      goto LABEL_161;
    case 64:
      if (sub_1000922B8(a1, "", "cmdq_pri1_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri1_w_us(64) cannot add 1 element to context";
      goto LABEL_161;
    case 65:
      if (sub_1000922B8(a1, "", "cmdq_pri2_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri2_r_us(65) cannot add 1 element to context";
      goto LABEL_161;
    case 66:
      if (sub_1000922B8(a1, "", "cmdq_pri2_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri2_w_us(66) cannot add 1 element to context";
      goto LABEL_161;
    case 67:
      if (sub_1000922B8(a1, "", "cmdq_pri3_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri3_r_us(67) cannot add 1 element to context";
      goto LABEL_161;
    case 68:
      if (sub_1000922B8(a1, "", "cmdq_pri3_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri3_w_us(68) cannot add 1 element to context";
      goto LABEL_161;
    case 69:
      if (sub_1000922B8(a1, "", "host_idle_ms", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: host_idle_ms(69) cannot add 1 element to context";
      goto LABEL_161;
    case 70:
      if (sub_1000922B8(a1, "", "cmd_hysteresis_window_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmd_hysteresis_window_us(70) cannot add 1 element to context";
      goto LABEL_161;
    case 71:
      if (sub_1000922B8(a1, "", "cmd_lowPriHoldoffDelay_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmd_lowPriHoldoffDelay_us(71) cannot add 1 element to context";
      goto LABEL_161;
    case 72:
      if (sub_1000922B8(a1, "", "cmd_lowPriHoldoffEnabled", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmd_lowPriHoldoffEnabled(72) cannot add 1 element to context";
      goto LABEL_161;
    default:
      switch(v12)
      {
        case 73:
          if (sub_10008B714(a1, "cmd_expedite_num_success", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: cmd_expedite_num_success(73) cannot add 1 element to context";
          goto LABEL_161;
        case 75:
          if (sub_10008B714(a1, "cmd_expedite_num_failures", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: cmd_expedite_num_failures(75) cannot add 1 element to context";
          goto LABEL_161;
        case 76:
          if (sub_10008B714(a1, "num_trimerase", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: num_trimerase(76) cannot add 1 element to context";
          goto LABEL_161;
        case 77:
          if (sub_10008B714(a1, "staticSizeInMB", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: staticSizeInMB(77) cannot add 1 element to context";
          goto LABEL_161;
        case 80:
          if (sub_10008B714(a1, "slcInvalidations", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: slcInvalidations(80) cannot add 1 element to context";
          goto LABEL_161;
        case 81:
          if (sub_10008B714(a1, "slcGCInvalidations", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: slcGCInvalidations(81) cannot add 1 element to context";
          goto LABEL_161;
        case 82:
          if (sub_10008B714(a1, "hostSectorsDuringGCon", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: hostSectorsDuringGCon(82) cannot add 1 element to context";
          goto LABEL_161;
        case 83:
          if (sub_10008B714(a1, "highWaterMarkSLCUsed", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: highWaterMarkSLCUsed(83) cannot add 1 element to context";
          goto LABEL_161;
        case 84:
          if (sub_10008B714(a1, "intermediateBandErases", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: intermediateBandErases(84) cannot add 1 element to context";
          goto LABEL_161;
        case 85:
          if (sub_10008B714(a1, "intermediatePartitionStart", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: intermediatePartitionStart(85) cannot add 1 element to context";
          goto LABEL_161;
        case 86:
          if (sub_10008B714(a1, "userPartitionStart", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: userPartitionStart(86) cannot add 1 element to context";
          goto LABEL_161;
        case 87:
          if (sub_10008B714(a1, "iolog_lbas", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: iolog_lbas(87) cannot add 1 element to context";
          goto LABEL_161;
        case 88:
          if (v14 != 10) {
            sub_100079708("ASPFTLParseBufferToCxt: bandsAgeBins(88): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "bandsAgeBins_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBins(88): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 89:
          if (v14 != 10) {
            sub_100079708("ASPFTLParseBufferToCxt: intermediateBandsAgeBins(89): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "intermediateBandsAgeBins_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: intermediateBandsAgeBins(89): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 90:
          if (v14 != 160) {
            sub_100079708("ASPFTLParseBufferToCxt: qosPerCmdQ(90): (#160) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA0) {
            unsigned int v18 = 160;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "qosPerCmdQ_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: qosPerCmdQ(90): Cannot add 160 elements to context";
          goto LABEL_2616;
        case 91:
          if (v14 != 10) {
            sub_100079708("ASPFTLParseBufferToCxt: maxQosPerCmdQ(91): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "maxQosPerCmdQ_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: maxQosPerCmdQ(91): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 92:
          if (sub_10008B714(a1, "shutdownDuringGC", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: shutdownDuringGC(92) cannot add 1 element to context";
          goto LABEL_161;
        case 93:
          if (v14 != 3) {
            sub_100079708("ASPFTLParseBufferToCxt: numBandsRefreshedForAgePerTier(93): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 3) {
            unsigned int v18 = 3;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "numBandsRefreshedForAgePerTier_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: numBandsRefreshedForAgePerTier(93): Cannot add 3 elements to context";
          goto LABEL_2616;
        case 94:
          if (v14 != 20) {
            sub_100079708("ASPFTLParseBufferToCxt: bdrDeltaHot(94): (#20) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0x14) {
            unsigned int v18 = 20;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "bdrDeltaHot_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bdrDeltaHot(94): Cannot add 20 elements to context";
          goto LABEL_2616;
        case 95:
          if (sub_10008B714(a1, "numRefreshOnClockLoss", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numRefreshOnClockLoss(95) cannot add 1 element to context";
          goto LABEL_161;
        case 96:
          if (sub_10008B714(a1, "numRefreshOnErrNandRefreshRel", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numRefreshOnErrNandRefreshRel(96) cannot add 1 element to context";
          goto LABEL_161;
        case 97:
          if (sub_10008B714(a1, "numBGRefreshMoves", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numBGRefreshMoves(97) cannot add 1 element to context";
          goto LABEL_161;
        case 98:
          if (sub_10008B714(a1, "numBGPaddingMoves", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numBGPaddingMoves(98) cannot add 1 element to context";
          goto LABEL_161;
        case 99:
          if (sub_10008B714(a1, "hostWritesPhoto", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: hostWritesPhoto(99) cannot add 1 element to context";
          goto LABEL_161;
        case 100:
          if (sub_10008B714(a1, "INDPooldFree", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDPooldFree(100) cannot add 1 element to context";
          goto LABEL_161;
        case 101:
          if (sub_10008B714(a1, "INDContigCount", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDContigCount(101) cannot add 1 element to context";
          goto LABEL_161;
        case 102:
          if (sub_10008B714(a1, "INDValidContigCount", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDValidContigCount(102) cannot add 1 element to context";
          goto LABEL_161;
        case 103:
          if (sub_10008B714(a1, "INDMinContigSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDMinContigSize(103) cannot add 1 element to context";
          goto LABEL_161;
        case 104:
          if (sub_10008B714(a1, "INDMaxContigSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDMaxContigSize(104) cannot add 1 element to context";
          goto LABEL_161;
        case 105:
          if (sub_10008B714(a1, "INDAveContigSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDAveContigSize(105) cannot add 1 element to context";
          goto LABEL_161;
        case 106:
          if (sub_10008B714(a1, "INDpoolSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDpoolSize(106) cannot add 1 element to context";
          goto LABEL_161;
        case 107:
          if (sub_10008B714(a1, "pushSyncWrites", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: pushSyncWrites(107) cannot add 1 element to context";
          goto LABEL_161;
        case 109:
          if (sub_10008B714(a1, "cmd_rw_hysteresis_us", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: cmd_rw_hysteresis_us(109) cannot add 1 element to context";
          goto LABEL_161;
        case 110:
          if (sub_10008B714(a1, "photoFlowMode", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: photoFlowMode(110) cannot add 1 element to context";
          goto LABEL_161;
        case 112:
          if (sub_10008B714(a1, "numBandsPaddedForAge", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numBandsPaddedForAge(112) cannot add 1 element to context";
          goto LABEL_161;
        case 113:
          if (v14 != 4) {
            sub_100079708("ASPFTLParseBufferToCxt: bandsPerHostFlow(113): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "bandsPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bandsPerHostFlow(113): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 114:
          if (v14 != 5) {
            sub_100079708("ASPFTLParseBufferToCxt: bandsPerSpecialFlow(114): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "bandsPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bandsPerSpecialFlow(114): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 115:
          if (v14 != 4) {
            sub_100079708("ASPFTLParseBufferToCxt: secsPerHostFlow(115): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "secsPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: secsPerHostFlow(115): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 116:
          if (v14 != 5) {
            sub_100079708("ASPFTLParseBufferToCxt: secsPerSpecialFlow(116): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "secsPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: secsPerSpecialFlow(116): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 118:
          if (v14 != 4) {
            sub_100079708("ASPFTLParseBufferToCxt: overWritesPerHostFlow(118): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "overWritesPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: overWritesPerHostFlow(118): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 119:
          if (v14 != 5) {
            sub_100079708("ASPFTLParseBufferToCxt: overWritesPerSpecialFlow(119): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "overWritesPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: overWritesPerSpecialFlow(119): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 120:
          if (v14 != 10) {
            sub_100079708("ASPFTLParseBufferToCxt: padSectorsPerFlow(120): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "padSectorsPerFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: padSectorsPerFlow(120): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 121:
          if (v14 != 4) {
            sub_100079708("ASPFTLParseBufferToCxt: padSizes(121): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "padSizes_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: padSizes(121): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 122:
          if (v14 != 4) {
            sub_100079708("ASPFTLParseBufferToCxt: unmapsPerHostFlow(122): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "unmapsPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: unmapsPerHostFlow(122): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 123:
          if (v14 != 5) {
            sub_100079708("ASPFTLParseBufferToCxt: unmapsPerSpecialFlow(123): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "unmapsPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: unmapsPerSpecialFlow(123): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 124:
          if (v14 != 2) {
            sub_100079708("ASPFTLParseBufferToCxt: coldestCycle(124): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 2) {
            unsigned int v18 = 2;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "coldestCycle_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: coldestCycle(124): Cannot add 2 elements to context";
          goto LABEL_2616;
        case 125:
          if (v14 != 2) {
            sub_100079708("ASPFTLParseBufferToCxt: hottestCycle(125): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 2) {
            unsigned int v18 = 2;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "hottestCycle_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: hottestCycle(125): Cannot add 2 elements to context";
          goto LABEL_2616;
        case 126:
          if (sub_10008B714(a1, "gcLonlyWrites", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcLonlyWrites(126) cannot add 1 element to context";
          goto LABEL_161;
        case 127:
          if (sub_10008B714(a1, "gcPLWrites", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcPLWrites(127) cannot add 1 element to context";
          goto LABEL_161;
        case 129:
          if (sub_10008B714(a1, "pagesPerVirtualBlockSlc", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: pagesPerVirtualBlockSlc(129) cannot add 1 element to context";
          goto LABEL_161;
        case 130:
          if (sub_10008B714(a1, "bdrPadding", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: bdrPadding(130) cannot add 1 element to context";
          goto LABEL_161;
        case 131:
          if (v14 != 8) {
            sub_100079708("ASPFTLParseBufferToCxt: errInjCounters(131): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 8) {
            unsigned int v18 = 8;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_10008B714(a1, "errInjCounters_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: errInjCounters(131): Cannot add 8 elements to context";
          goto LABEL_2616;
        case 132:
          if (sub_10008B714(a1, "raidSuccessfulReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulReconstructionInternal(132) cannot add 1 element to context";
          goto LABEL_161;
        case 133:
          if (sub_10008B714(a1, "raidSuccessfulReconstructionHost", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulReconstructionHost(133) cannot add 1 element to context";
          goto LABEL_161;
        case 134:
          if (sub_10008B714(a1, "raidFailedReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidFailedReconstructionInternal(134) cannot add 1 element to context";
          goto LABEL_161;
        case 135:
          if (sub_10008B714(a1, "raidFailedReconstructionHost", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidFailedReconstructionHost(135) cannot add 1 element to context";
          goto LABEL_161;
        case 136:
          if (sub_10008B714(a1, "raidBandsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidBandsPerHostFlow(136) cannot add 1 element to context";
          goto LABEL_161;
        case 137:
          if (sub_10008B714(a1, "raidSecsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidSecsPerHostFlow(137) cannot add 1 element to context";
          goto LABEL_161;
        case 138:
          if (sub_10008B714(a1, "gcFreeL", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcFreeL(138) cannot add 1 element to context";
          goto LABEL_161;
        case 139:
          if (sub_10008B714(a1, "gcDestinations", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcDestinations(139) cannot add 1 element to context";
          goto LABEL_161;
        case 140:
          if (sub_10008B714(a1, "gcFragments", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcFragments(140) cannot add 1 element to context";
          goto LABEL_161;
        case 141:
          if (sub_10008B714(a1, "numMemChoke", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numMemChoke(141) cannot add 1 element to context";
          goto LABEL_161;
        case 142:
          if (sub_10008B714(a1, "maxMemChokeDuration", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: maxMemChokeDuration(142) cannot add 1 element to context";
          goto LABEL_161;
        case 143:
          if (sub_10008B714(a1, "memChokeDuration", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: memChokeDuration(143) cannot add 1 element to context";
          goto LABEL_161;
        default:
          switch(v12)
          {
            case 144:
              if (sub_10008B714(a1, "numMemExtreme", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numMemExtreme(144) cannot add 1 element to context";
              goto LABEL_161;
            case 145:
              if (sub_10008B714(a1, "maxMemExtremeDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: maxMemExtremeDuration(145) cannot add 1 element to context";
              goto LABEL_161;
            case 146:
              if (sub_10008B714(a1, "memExtremeDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: memExtremeDuration(146) cannot add 1 element to context";
              goto LABEL_161;
            case 147:
              if (sub_10008B714(a1, "bandGetsExtreme", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bandGetsExtreme(147) cannot add 1 element to context";
              goto LABEL_161;
            case 148:
              if (sub_10008B714(a1, "bandGetsLow", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bandGetsLow(148) cannot add 1 element to context";
              goto LABEL_161;
            case 149:
              if (sub_10008B714(a1, "numHostChoke", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numHostChoke(149) cannot add 1 element to context";
              goto LABEL_161;
            case 152:
              if (sub_10008B714(a1, "AbortSkip_ProgramError", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_ProgramError(152) cannot add 1 element to context";
              goto LABEL_161;
            case 153:
              if (sub_10008B714(a1, "AbortSkip_ReadErrorOpenBand", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_ReadErrorOpenBand(153) cannot add 1 element to context";
              goto LABEL_161;
            case 154:
              if (sub_10008B714(a1, "AbortSkip_FailedRebuildingParity", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_FailedRebuildingParity(154) cannot add 1 element to context";
              goto LABEL_161;
            case 155:
              if (sub_10008B714(a1, "AbortPad_OpenRefreshBand", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_OpenRefreshBand(155) cannot add 1 element to context";
              goto LABEL_161;
            case 156:
              if (sub_10008B714(a1, "AbortPad_CloseBands", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_CloseBands(156) cannot add 1 element to context";
              goto LABEL_161;
            case 157:
              if (sub_10008B714(a1, "AbortPad_SetPhoto", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_SetPhoto(157) cannot add 1 element to context";
              goto LABEL_161;
            case 158:
              if (sub_10008B714(a1, "AbortPad_GcNoSource", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_GcNoSource(158) cannot add 1 element to context";
              goto LABEL_161;
            case 159:
              if (sub_10008B714(a1, "AbortPad_Format", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_Format(159) cannot add 1 element to context";
              goto LABEL_161;
            case 160:
              if (sub_10008B714(a1, "nandDiscoveryDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: nandDiscoveryDuration(160) cannot add 1 element to context";
              goto LABEL_161;
            case 161:
              if (sub_10008B714(a1, "coreCCEnableDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreCCEnableDuration(161) cannot add 1 element to context";
              goto LABEL_161;
            case 163:
              if (sub_10008B714(a1, "coreOpenDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreOpenDuration(163) cannot add 1 element to context";
              goto LABEL_161;
            case 164:
              if (sub_10008B714(a1, "coreWritableDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreWritableDuration(164) cannot add 1 element to context";
              goto LABEL_161;
            case 165:
              if (sub_10008B714(a1, "coreClogLoadDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreClogLoadDuration(165) cannot add 1 element to context";
              goto LABEL_161;
            case 167:
              if (sub_10008B714(a1, "bulkPFail", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bulkPFail(167) cannot add 1 element to context";
              goto LABEL_161;
            case 169:
              if (sub_10008B714(a1, "bulkRFail", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bulkRFail(169) cannot add 1 element to context";
              goto LABEL_161;
            case 172:
              if (sub_10008B714(a1, "raidSmartErrors", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: raidSmartErrors(172) cannot add 1 element to context";
              goto LABEL_161;
            case 182:
              if (sub_10008B714(a1, "internalUeccs", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: internalUeccs(182) cannot add 1 element to context";
              goto LABEL_161;
            case 183:
              if (sub_10008B714(a1, "e2eFail", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: e2eFail(183) cannot add 1 element to context";
              goto LABEL_161;
            case 184:
              if (sub_10008B714(a1, "TempSensorMax", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: TempSensorMax(184) cannot add 1 element to context";
              goto LABEL_161;
            case 185:
              if (sub_10008B714(a1, "TempSensorMin", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: TempSensorMin(185) cannot add 1 element to context";
              goto LABEL_161;
            case 186:
              if (sub_10008B714(a1, "powerUpFromDDR", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: powerUpFromDDR(186) cannot add 1 element to context";
              goto LABEL_161;
            case 187:
              if (sub_10008B714(a1, "numMemLow", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numMemLow(187) cannot add 1 element to context";
              goto LABEL_161;
            case 188:
              if (sub_10008B714(a1, "maxMemLowDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: maxMemLowDuration(188) cannot add 1 element to context";
              goto LABEL_161;
            case 189:
              if (sub_10008B714(a1, "memLowDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: memLowDuration(189) cannot add 1 element to context";
              goto LABEL_161;
            case 190:
              if (sub_10008B714(a1, "numFences", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numFences(190) cannot add 1 element to context";
              goto LABEL_161;
            case 191:
              if (sub_10008B714(a1, "hostPassiveIO", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: hostPassiveIO(191) cannot add 1 element to context";
              goto LABEL_161;
            case 192:
              if (sub_10008B714(a1, "odtsMax", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: odtsMax(192) cannot add 1 element to context";
              goto LABEL_161;
            case 193:
              if (sub_10008B714(a1, "defragMFromOrphans", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMFromOrphans(193) cannot add 1 element to context";
              goto LABEL_161;
            case 194:
              if (sub_10008B714(a1, "defragMFromFragments", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMFromFragments(194) cannot add 1 element to context";
              goto LABEL_161;
            case 195:
              if (sub_10008B714(a1, "defragMTime", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMTime(195) cannot add 1 element to context";
              goto LABEL_161;
            case 196:
              if (sub_10008B714(a1, "defragMMaxTime", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMMaxTime(196) cannot add 1 element to context";
              goto LABEL_161;
            case 197:
              if (sub_10008B714(a1, "raidFailedLbaMismatch", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: raidFailedLbaMismatch(197) cannot add 1 element to context";
              goto LABEL_161;
            case 198:
              if (sub_10008B714(a1, "numSyscfgWrites", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numSyscfgWrites(198) cannot add 1 element to context";
              goto LABEL_161;
            case 199:
              if (sub_10008B714(a1, "indmbUnitsXfer", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: indmbUnitsXfer(199) cannot add 1 element to context";
              goto LABEL_161;
            case 200:
              if (sub_10008B714(a1, "indmbUnitsCache", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: indmbUnitsCache(200) cannot add 1 element to context";
              goto LABEL_161;
            case 201:
              if (sub_10008B714(a1, "indmbUnitsInd", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: indmbUnitsInd(201) cannot add 1 element to context";
              goto LABEL_161;
            case 202:
              if (sub_10008B714(a1, "wcacheFS_Mbytes", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_Mbytes(202) cannot add 1 element to context";
              goto LABEL_161;
            case 203:
              if (sub_10008B714(a1, "wcacheDS_Mbytes", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheDS_Mbytes(203) cannot add 1 element to context";
              goto LABEL_161;
            case 204:
              if (sub_10008B714(a1, "powerOnSeconds", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: powerOnSeconds(204) cannot add 1 element to context";
              goto LABEL_161;
            case 205:
              if (sub_10008B714(a1, "numUnknownTokenHostRead", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numUnknownTokenHostRead(205) cannot add 1 element to context";
              goto LABEL_161;
            case 206:
              if (sub_10008B714(a1, "numUnmmapedTokenHostRead", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numUnmmapedTokenHostRead(206) cannot add 1 element to context";
              goto LABEL_161;
            case 207:
              if (v14 != 16) {
                sub_100079708("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              }
              if (v14 >= 0x10) {
                unsigned int v18 = 16;
              }
              else {
                unsigned int v18 = v14;
              }
              if (sub_10008B714(a1, "numOfThrottlingEntriesPerLevel_", (uint64_t)v8, 8u, v18)) {
                goto LABEL_110;
              }
              unsigned int v19 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): Cannot add 16 elements to context";
              goto LABEL_2616;
            case 208:
              if (sub_10008B714(a1, "wcacheFS_MbytesMin", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMin(208) cannot add 1 element to context";
              goto LABEL_161;
            case 209:
              if (sub_10008B714(a1, "wcacheFS_MbytesMax", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMax(209) cannot add 1 element to context";
              goto LABEL_161;
            case 210:
              if (sub_10008B714(a1, "prepareForShutdownFailCounter", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: prepareForShutdownFailCounter(210) cannot add 1 element to context";
              goto LABEL_161;
            case 211:
              if (sub_10008B714(a1, "lpsrEntry", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: lpsrEntry(211) cannot add 1 element to context";
              goto LABEL_161;
            case 212:
              if (sub_10008B714(a1, "lpsrExit", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: lpsrExit(212) cannot add 1 element to context";
              goto LABEL_161;
            case 213:
              if (v14 != 8) {
                sub_100079708("ASPFTLParseBufferToCxt: crcInternalReadFail(213): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              }
              if (v14 >= 8) {
                unsigned int v18 = 8;
              }
              else {
                unsigned int v18 = v14;
              }
              if (sub_10008B714(a1, "crcInternalReadFail_", (uint64_t)v8, 8u, v18)) {
                goto LABEL_110;
              }
              unsigned int v19 = "ASPFTLParseBufferToCxt: crcInternalReadFail(213): Cannot add 8 elements to context";
              goto LABEL_2616;
            case 214:
              if (sub_10008B714(a1, "wcacheFSEvictCnt", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFSEvictCnt(214) cannot add 1 element to context";
              goto LABEL_161;
            case 215:
              if (sub_10008B714(a1, "wcacheFSEvictSize", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFSEvictSize(215) cannot add 1 element to context";
              goto LABEL_161;
            case 216:
              if (sub_10008B714(a1, "wcacheFSWr", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFSWr(216) cannot add 1 element to context";
              goto LABEL_161;
            case 217:
              if (sub_10008B714(a1, "wcacheDSWr", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheDSWr(217) cannot add 1 element to context";
              goto LABEL_161;
            case 218:
              if (v14 != 10) {
                sub_100079708("ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              }
              if (v14 >= 0xA) {
                unsigned int v18 = 10;
              }
              else {
                unsigned int v18 = v14;
              }
              if (sub_10008B714(a1, "wcacheFSEvictSizeLogDist_", (uint64_t)v8, 8u, v18)) {
                goto LABEL_110;
              }
              unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): Cannot add 10 elements to context";
              goto LABEL_2616;
            case 219:
              if (sub_10008B714(a1, "prepareForShutdownTimeoutCounter", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: prepareForShutdownTimeoutCounter(219) cannot add 1 element to context";
              goto LABEL_161;
            case 220:
              if (sub_10008B714(a1, "prepareForShutdownCancelCounter", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: prepareForShutdownCancelCounter(220) cannot add 1 element to context";
              goto LABEL_161;
            case 221:
              if (sub_10008B714(a1, "RD_openBandCount", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: RD_openBandCount(221) cannot add 1 element to context";
              goto LABEL_161;
            case 222:
              if (sub_10008B714(a1, "RD_openBandNops", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: RD_openBandNops(222) cannot add 1 element to context";
              goto LABEL_161;
            case 223:
              if (sub_10008B714(a1, "RD_closedBandEvictCount", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: RD_closedBandEvictCount(223) cannot add 1 element to context";
              goto LABEL_161;
            default:
              switch(v12)
              {
                case 224:
                  if (sub_10008B714(a1, "RD_closedBandEvictSectors", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RD_closedBandEvictSectors(224) cannot add 1 element to context";
                  goto LABEL_161;
                case 225:
                  if (sub_10008B714(a1, "RD_closedBandFragmentCount", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentCount(225) cannot add 1 element to context";
                  goto LABEL_161;
                case 226:
                  if (sub_10008B714(a1, "RD_closedBandFragmentSectors", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentSectors(226) cannot add 1 element to context";
                  goto LABEL_161;
                case 227:
                  if (v14 != 10) {
                    sub_100079708("ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0xA) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "wcacheFSOverWrLogSizeCnts_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): Cannot add 10 elements to context";
                  goto LABEL_2616;
                case 228:
                  if (v14 != 4) {
                    sub_100079708("ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "wcacheFSOverWrSizeByFlow_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 229:
                  if (v14 != 2) {
                    sub_100079708("ASPFTLParseBufferToCxt: indmbXferCountTo(229): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 2) {
                    unsigned int v18 = 2;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "indmbXferCountTo_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: indmbXferCountTo(229): Cannot add 2 elements to context";
                  goto LABEL_2616;
                case 230:
                  if (v14 != 2) {
                    sub_100079708("ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 2) {
                    unsigned int v18 = 2;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "indmbAccumulatedTimeBetweenXfers_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): Cannot add 2 elements to context";
                  goto LABEL_2616;
                case 231:
                  if (sub_10008B714(a1, "maxGracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: maxGracefulBootTimeMs(231) cannot add 1 element to context";
                  goto LABEL_161;
                case 232:
                  if (sub_10008B714(a1, "maxUngracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: maxUngracefulBootTimeMs(232) cannot add 1 element to context";
                  goto LABEL_161;
                case 233:
                  if (sub_10008B714(a1, "averageGracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: averageGracefulBootTimeMs(233) cannot add 1 element to context";
                  goto LABEL_161;
                case 234:
                  if (sub_10008B714(a1, "averageUngracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: averageUngracefulBootTimeMs(234) cannot add 1 element to context";
                  goto LABEL_161;
                case 235:
                  if (v14 != 8) {
                    sub_100079708("ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "gracefulBootTimeLogMs_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 236:
                  if (v14 != 8) {
                    sub_100079708("ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "ungracefulBootTimeLogMs_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 237:
                  if (v14 != 4) {
                    sub_100079708("ASPFTLParseBufferToCxt: CalibrationCount(237): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "CalibrationCount_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: CalibrationCount(237): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 238:
                  if (sub_10008B714(a1, "CalibrationLastTmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: CalibrationLastTmp(238) cannot add 1 element to context";
                  goto LABEL_161;
                case 239:
                  if (sub_10008B714(a1, "CalibrationMaxTmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: CalibrationMaxTmp(239) cannot add 1 element to context";
                  goto LABEL_161;
                case 240:
                  if (sub_10008B714(a1, "CalibrationMinTmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: CalibrationMinTmp(240) cannot add 1 element to context";
                  goto LABEL_161;
                case 241:
                  if (sub_10008B714(a1, "ungracefulBootWorstIndicator", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: ungracefulBootWorstIndicator(241) cannot add 1 element to context";
                  goto LABEL_161;
                case 242:
                  if (sub_10008B714(a1, "metaMismatchReread", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: metaMismatchReread(242) cannot add 1 element to context";
                  goto LABEL_161;
                case 243:
                  if (sub_10008B714(a1, "numS3SleepOps", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: numS3SleepOps(243) cannot add 1 element to context";
                  goto LABEL_161;
                case 244:
                  if (sub_10008B714(a1, "odtsCurrent", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: odtsCurrent(244) cannot add 1 element to context";
                  goto LABEL_161;
                case 245:
                  if (sub_10008B714(a1, "prefetchReads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: prefetchReads(245) cannot add 1 element to context";
                  goto LABEL_161;
                case 246:
                  if (sub_10008B714(a1, "prefetchHits", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: prefetchHits(246) cannot add 1 element to context";
                  goto LABEL_161;
                case 247:
                  if (sub_10008B714(a1, "prefetchWritesInvalidation", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: prefetchWritesInvalidation(247) cannot add 1 element to context";
                  goto LABEL_161;
                case 248:
                  if (sub_10008B714(a1, "indmbUnitsTotal", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: indmbUnitsTotal(248) cannot add 1 element to context";
                  goto LABEL_161;
                case 249:
                  if (sub_10008B714(a1, "selfThrottlingEngage", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: selfThrottlingEngage(249) cannot add 1 element to context";
                  goto LABEL_161;
                case 250:
                  if (sub_10008B714(a1, "selfThrottlingDisengage", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: selfThrottlingDisengage(250) cannot add 1 element to context";
                  goto LABEL_161;
                case 252:
                  if (sub_10008B714(a1, "AbortSkip_WlpMode", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: AbortSkip_WlpMode(252) cannot add 1 element to context";
                  goto LABEL_161;
                case 253:
                  if (sub_10008B714(a1, "hostWritesWlpMode", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: hostWritesWlpMode(253) cannot add 1 element to context";
                  goto LABEL_161;
                case 254:
                  if (sub_10008B714(a1, "numClogDoubleUnc", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: numClogDoubleUnc(254) cannot add 1 element to context";
                  goto LABEL_161;
                case 256:
                  if (sub_10008B714(a1, "AbortPad_WlpMode", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: AbortPad_WlpMode(256) cannot add 1 element to context";
                  goto LABEL_161;
                case 257:
                  if (sub_10008B714(a1, "bonfireIntermediateBandErases", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandErases(257) cannot add 1 element to context";
                  goto LABEL_161;
                case 258:
                  if (sub_10008B714(a1, "bonfireUserBandErases", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireUserBandErases(258) cannot add 1 element to context";
                  goto LABEL_161;
                case 259:
                  if (sub_10008B714(a1, "bonfireIntermediateBandProgs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandProgs(259) cannot add 1 element to context";
                  goto LABEL_161;
                case 260:
                  if (sub_10008B714(a1, "bonfireUserBandProgs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireUserBandProgs(260) cannot add 1 element to context";
                  goto LABEL_161;
                case 261:
                  if (sub_10008B714(a1, "bonfireIntermediatePageReads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireIntermediatePageReads(261) cannot add 1 element to context";
                  goto LABEL_161;
                case 262:
                  if (sub_10008B714(a1, "bonfireUserPageReads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireUserPageReads(262) cannot add 1 element to context";
                  goto LABEL_161;
                case 263:
                  if (sub_10008B714(a1, "refreshUtil00", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: refreshUtil00(263) cannot add 1 element to context";
                  goto LABEL_161;
                case 264:
                  if (sub_10008B714(a1, "failToReadUtil00", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: failToReadUtil00(264) cannot add 1 element to context";
                  goto LABEL_161;
                case 265:
                  if (v14 != 5) {
                    sub_100079708("ASPFTLParseBufferToCxt: readCountHisto(265): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 5) {
                    unsigned int v18 = 5;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "readCountHisto_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: readCountHisto(265): Cannot add 5 elements to context";
                  goto LABEL_2616;
                case 266:
                  if (v14 != 16) {
                    sub_100079708("ASPFTLParseBufferToCxt: readAmpHisto(266): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x10) {
                    unsigned int v18 = 16;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "readAmpHisto_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: readAmpHisto(266): Cannot add 16 elements to context";
                  goto LABEL_2616;
                case 267:
                  if (sub_10008B714(a1, "totalReadAmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: totalReadAmp(267) cannot add 1 element to context";
                  goto LABEL_161;
                case 268:
                  if (v14 != 4) {
                    sub_100079708("ASPFTLParseBufferToCxt: nvmeModeSelect(268): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "nvmeModeSelect_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: nvmeModeSelect(268): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 269:
                  if (v14 != 8) {
                    sub_100079708("ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "numBootBlockRefreshSuccess_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 270:
                  if (v14 != 8) {
                    sub_100079708("ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "numBootBlockRefreshFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 271:
                  if (sub_10008B714(a1, "numUnsupportedAsi", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: numUnsupportedAsi(271) cannot add 1 element to context";
                  goto LABEL_161;
                case 272:
                  if (sub_10008B714(a1, "NumTerminatedProgramSegs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: NumTerminatedProgramSegs(272) cannot add 1 element to context";
                  goto LABEL_161;
                case 273:
                  if (sub_10008B714(a1, "indParityPagesDrops", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: indParityPagesDrops(273) cannot add 1 element to context";
                  goto LABEL_161;
                case 274:
                  if (sub_10008B714(a1, "indFlowPrograms", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: indFlowPrograms(274) cannot add 1 element to context";
                  goto LABEL_161;
                case 277:
                  if (v14 != 4) {
                    sub_100079708("ASPFTLParseBufferToCxt: powerBudgetSelect(277): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "powerBudgetSelect_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: powerBudgetSelect(277): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 279:
                  if (sub_10008B714(a1, "RxBurnNandWrites", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RxBurnNandWrites(279) cannot add 1 element to context";
                  goto LABEL_161;
                case 280:
                  if (v14 != 12) {
                    sub_100079708("ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0xC) {
                    unsigned int v18 = 12;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "E2EDPErrorCounters_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): Cannot add 12 elements to context";
                  goto LABEL_2616;
                case 281:
                  if (sub_10008B714(a1, "wcacheSectorsMax", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsMax(281) cannot add 1 element to context";
                  goto LABEL_161;
                case 282:
                  if (sub_10008B714(a1, "wcacheSectorsMin", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsMin(282) cannot add 1 element to context";
                  goto LABEL_161;
                case 283:
                  if (sub_10008B714(a1, "wcacheSectorsCur", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsCur(283) cannot add 1 element to context";
                  goto LABEL_161;
                case 284:
                  if (sub_10008B714(a1, "wcacheDS_SectorsMax", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMax(284) cannot add 1 element to context";
                  goto LABEL_161;
                case 285:
                  if (sub_10008B714(a1, "wcacheDS_SectorsMin", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMin(285) cannot add 1 element to context";
                  goto LABEL_161;
                case 286:
                  if (sub_10008B714(a1, "wcacheDS_SectorsCur", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsCur(286) cannot add 1 element to context";
                  goto LABEL_161;
                case 287:
                  if (sub_10008B714(a1, "wcacheFS_Reads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheFS_Reads(287) cannot add 1 element to context";
                  goto LABEL_161;
                case 288:
                  if (sub_10008B714(a1, "wcacheDS_Reads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_Reads(288) cannot add 1 element to context";
                  goto LABEL_161;
                case 289:
                  if (v14 != 32) {
                    sub_100079708("ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x20) {
                    unsigned int v18 = 32;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "mspBootBlockReadFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): Cannot add 32 elements to context";
                  goto LABEL_2616;
                case 290:
                  if (v14 != 32) {
                    sub_100079708("ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x20) {
                    unsigned int v18 = 32;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "mspBootBlockProgFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): Cannot add 32 elements to context";
                  goto LABEL_2616;
                case 291:
                  if (v14 != 32) {
                    sub_100079708("ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x20) {
                    unsigned int v18 = 32;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_10008B714(a1, "mspBootBlockEraseFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): Cannot add 32 elements to context";
                  goto LABEL_2616;
                case 292:
                  if (sub_10008B714(a1, "bandsRefreshedOnError", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bandsRefreshedOnError(292) cannot add 1 element to context";
                  goto LABEL_161;
                default:
                  switch(v12)
                  {
                    case 298:
                      if (v14 != 2) {
                        sub_100079708("ASPFTLParseBufferToCxt: perHostReads(298): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "perHostReads_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostReads(298): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 299:
                      if (v14 != 2) {
                        sub_100079708("ASPFTLParseBufferToCxt: perHostReadXacts(299): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "perHostReadXacts_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostReadXacts(299): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 300:
                      if (v14 != 2) {
                        sub_100079708("ASPFTLParseBufferToCxt: perHostWrites(300): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "perHostWrites_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostWrites(300): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 301:
                      if (v14 != 2) {
                        sub_100079708("ASPFTLParseBufferToCxt: perHostWriteXacts(301): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "perHostWriteXacts_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostWriteXacts(301): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 302:
                      if (v14 != 2) {
                        sub_100079708("ASPFTLParseBufferToCxt: perHostNumFlushes(302): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "perHostNumFlushes_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostNumFlushes(302): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 303:
                      if (v14 != 2) {
                        sub_100079708("ASPFTLParseBufferToCxt: perHostNumFences(303): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "perHostNumFences_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostNumFences(303): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 304:
                      if (v14 != 10) {
                        sub_100079708("ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "commitPadSectorsPerFlow_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 305:
                      if (v14 != 10) {
                        sub_100079708("ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "wcacheDSOverWrLogSizeCnts_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 306:
                      if (v14 != 4) {
                        sub_100079708("ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 4) {
                        unsigned int v18 = 4;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "wcacheDSOverWrSizeByFlow_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): Cannot add 4 elements to context";
                      goto LABEL_2616;
                    case 307:
                      if (v14 != 10) {
                        sub_100079708("ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "CmdRaisePrioiryEvents_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 308:
                      if (sub_10008B714(a1, "utilNumVerification", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilNumVerification(308) cannot add 1 element to context";
                      goto LABEL_161;
                    case 309:
                      if (sub_10008B714(a1, "utilRefreshes", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilRefreshes(309) cannot add 1 element to context";
                      goto LABEL_161;
                    case 310:
                      if (sub_10008B714(a1, "utilBDRErrors", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilBDRErrors(310) cannot add 1 element to context";
                      goto LABEL_161;
                    case 311:
                      if (sub_10008B714(a1, "indBandsPerFlow", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indBandsPerFlow(311) cannot add 1 element to context";
                      goto LABEL_161;
                    case 312:
                      if (sub_10008B714(a1, "secsPerIndFlow", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: secsPerIndFlow(312) cannot add 1 element to context";
                      goto LABEL_161;
                    case 313:
                      if (sub_10008B714(a1, "indDecodedECC", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indDecodedECC(313) cannot add 1 element to context";
                      goto LABEL_161;
                    case 314:
                      if (v14 != 8) {
                        sub_100079708("ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 8) {
                        unsigned int v18 = 8;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "numBootBlockValidateSuccess_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): Cannot add 8 elements to context";
                      goto LABEL_2616;
                    case 315:
                      if (v14 != 8) {
                        sub_100079708("ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 8) {
                        unsigned int v18 = 8;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "numBootBlockValidateFail_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): Cannot add 8 elements to context";
                      goto LABEL_2616;
                    case 316:
                      if (v14 != 4) {
                        sub_100079708("ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 4) {
                        unsigned int v18 = 4;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "clogPagesFillingPercentage_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): Cannot add 4 elements to context";
                      goto LABEL_2616;
                    case 317:
                      if (sub_10008B714(a1, "bdrCalTimeAccFactor", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bdrCalTimeAccFactor(317) cannot add 1 element to context";
                      goto LABEL_161;
                    case 318:
                      if (sub_10008B714(a1, "bootChainRdError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainRdError(318) cannot add 1 element to context";
                      goto LABEL_161;
                    case 319:
                      if (sub_10008B714(a1, "bootChainBlankError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainBlankError(319) cannot add 1 element to context";
                      goto LABEL_161;
                    case 320:
                      if (sub_10008B714(a1, "bootChainRefreshError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainRefreshError(320) cannot add 1 element to context";
                      goto LABEL_161;
                    case 321:
                      if (sub_10008B714(a1, "bootChainVersionError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainVersionError(321) cannot add 1 element to context";
                      goto LABEL_161;
                    case 322:
                      if (sub_10008B714(a1, "mspBootBlockMismatch", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: mspBootBlockMismatch(322) cannot add 1 element to context";
                      goto LABEL_161;
                    case 323:
                      if (sub_10008B714(a1, "mspBootBlockMismatchErr", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: mspBootBlockMismatchErr(323) cannot add 1 element to context";
                      goto LABEL_161;
                    case 324:
                      if (v14 != 5) {
                        sub_100079708("ASPFTLParseBufferToCxt: bitflipAddr(324): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 5) {
                        unsigned int v18 = 5;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "bitflipAddr_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bitflipAddr(324): Cannot add 5 elements to context";
                      goto LABEL_2616;
                    case 325:
                      if (v14 != 5) {
                        sub_100079708("ASPFTLParseBufferToCxt: bitflipCount(325): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 5) {
                        unsigned int v18 = 5;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "bitflipCount_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bitflipCount(325): Cannot add 5 elements to context";
                      goto LABEL_2616;
                    case 326:
                      if (v14 != 5) {
                        sub_100079708("ASPFTLParseBufferToCxt: bitflipDupes(326): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 5) {
                        unsigned int v18 = 5;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "bitflipDupes_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bitflipDupes(326): Cannot add 5 elements to context";
                      goto LABEL_2616;
                    case 327:
                      if (v14 != 30) {
                        sub_100079708("ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x1E) {
                        unsigned int v18 = 30;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "bandsMaxTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): Cannot add 30 elements to context";
                      goto LABEL_2616;
                    case 328:
                      if (v14 != 30) {
                        sub_100079708("ASPFTLParseBufferToCxt: bandsMinTempHisto(328): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x1E) {
                        unsigned int v18 = 30;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "bandsMinTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsMinTempHisto(328): Cannot add 30 elements to context";
                      goto LABEL_2616;
                    case 329:
                      if (v14 != 30) {
                        sub_100079708("ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x1E) {
                        unsigned int v18 = 30;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "bandsLifeTimeTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): Cannot add 30 elements to context";
                      goto LABEL_2616;
                    case 330:
                      if (v14 != 22) {
                        sub_100079708("ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): (#22) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x16) {
                        unsigned int v18 = 22;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "bandsDeltaTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): Cannot add 22 elements to context";
                      goto LABEL_2616;
                    case 331:
                      if (v14 != 45) {
                        sub_100079708("ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): (#45) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x2D) {
                        unsigned int v18 = 45;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "bandsCrossTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): Cannot add 45 elements to context";
                      goto LABEL_2616;
                    case 332:
                      if (v14 != 10) {
                        sub_100079708("ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "wcacheWaitLogMs_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 333:
                      if (v14 != 10) {
                        sub_100079708("ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "wcacheDS_segsSortedLogSize_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 334:
                      if (sub_10008B714(a1, "numFirmwareWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numFirmwareWrites(334) cannot add 1 element to context";
                      goto LABEL_161;
                    case 335:
                      if (sub_10008B714(a1, "numBisWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numBisWrites(335) cannot add 1 element to context";
                      goto LABEL_161;
                    case 336:
                      if (sub_10008B714(a1, "numBootChainUpdates", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numBootChainUpdates(336) cannot add 1 element to context";
                      goto LABEL_161;
                    case 337:
                      if (sub_10008B714(a1, "cntCalTimeWentBackWard", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: cntCalTimeWentBackWard(337) cannot add 1 element to context";
                      goto LABEL_161;
                    case 338:
                      if (sub_10008B714(a1, "indBoRecoveries", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indBoRecoveries(338) cannot add 1 element to context";
                      goto LABEL_161;
                    case 340:
                      if (sub_10008B714(a1, "numCrossTempUecc", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numCrossTempUecc(340) cannot add 1 element to context";
                      goto LABEL_161;
                    case 341:
                      if (sub_10008B714(a1, "latencyMonitorError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: latencyMonitorError(341) cannot add 1 element to context";
                      goto LABEL_161;
                    case 343:
                      if (sub_10008B714(a1, "utilUeccReads", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilUeccReads(343) cannot add 1 element to context";
                      goto LABEL_161;
                    case 344:
                      if (sub_10008B714(a1, "numOfAvoidedGCDueToTemp", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numOfAvoidedGCDueToTemp(344) cannot add 1 element to context";
                      goto LABEL_161;
                    case 345:
                      if (sub_10008B714(a1, "forceShutdowns", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: forceShutdowns(345) cannot add 1 element to context";
                      goto LABEL_161;
                    case 346:
                      if (sub_10008B714(a1, "gcSlcDestinations", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: gcSlcDestinations(346) cannot add 1 element to context";
                      goto LABEL_161;
                    case 347:
                      if (sub_10008B714(a1, "indReplayExtUsed", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indReplayExtUsed(347) cannot add 1 element to context";
                      goto LABEL_161;
                    case 348:
                      if (sub_10008B714(a1, "defectsPerPackageOverflow", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: defectsPerPackageOverflow(348) cannot add 1 element to context";
                      goto LABEL_161;
                    case 349:
                      if (sub_10008B714(a1, "RxBurnIntBandsProgrammed", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnIntBandsProgrammed(349) cannot add 1 element to context";
                      goto LABEL_161;
                    case 350:
                      if (sub_10008B714(a1, "RxBurnUsrBandsProgrammed", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnUsrBandsProgrammed(350) cannot add 1 element to context";
                      goto LABEL_161;
                    case 351:
                      if (sub_10008B714(a1, "RxBurnIntNandWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnIntNandWrites(351) cannot add 1 element to context";
                      goto LABEL_161;
                    case 352:
                      if (sub_10008B714(a1, "RxBurnUsrNandWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnUsrNandWrites(352) cannot add 1 element to context";
                      goto LABEL_161;
                    case 353:
                      if (sub_10008B714(a1, "clogLastStripeUeccs", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: clogLastStripeUeccs(353) cannot add 1 element to context";
                      goto LABEL_161;
                    case 354:
                      if (sub_10008B714(a1, "GC_MidDestSrcSwitchSLC2TLC", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchSLC2TLC(354) cannot add 1 element to context";
                      goto LABEL_161;
                    case 355:
                      if (sub_10008B714(a1, "GC_MidDestSrcSwitchTLC2SLC", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchTLC2SLC(355) cannot add 1 element to context";
                      goto LABEL_161;
                    case 356:
                      if (sub_10008B714(a1, "nvme_stats_shutdown_count_host0_normal", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_normal(356) cannot add 1 element to context";
                      goto LABEL_161;
                    case 357:
                      if (sub_10008B714(a1, "nvme_stats_shutdown_count_host1_normal", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_normal(357) cannot add 1 element to context";
                      goto LABEL_161;
                    case 358:
                      if (sub_10008B714(a1, "nvme_stats_shutdown_count_host0_s2r", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_s2r(358) cannot add 1 element to context";
                      goto LABEL_161;
                    case 359:
                      if (sub_10008B714(a1, "nvme_stats_shutdown_count_host1_s2r", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_s2r(359) cannot add 1 element to context";
                      goto LABEL_161;
                    case 360:
                      if (v14 != 16) {
                        sub_100079708("ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x10) {
                        unsigned int v18 = 16;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "gcPDusterIntrSrcValidityHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): Cannot add 16 elements to context";
                      goto LABEL_2616;
                    case 361:
                      if (v14 != 16) {
                        sub_100079708("ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x10) {
                        unsigned int v18 = 16;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_10008B714(a1, "gcPDusterUserSrcValidityHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): Cannot add 16 elements to context";
                      goto LABEL_2616;
                    case 362:
                      if (sub_10008B714(a1, "raidFailedReadParity", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: raidFailedReadParity(362) cannot add 1 element to context";
                      goto LABEL_161;
                    case 364:
                      if (sub_10008B714(a1, "lhotNumSkipes", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: lhotNumSkipes(364) cannot add 1 element to context";
                      goto LABEL_161;
                    default:
                      switch(v12)
                      {
                        case 365:
                          if (sub_10008B714(a1, "lhotNumIsHotCalls", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: lhotNumIsHotCalls(365) cannot add 1 element to context";
                          goto LABEL_161;
                        case 366:
                          if (sub_10008B714(a1, "lhotFullLap", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: lhotFullLap(366) cannot add 1 element to context";
                          goto LABEL_161;
                        case 367:
                          if (sub_10008B714(a1, "lhotSkipPrecent", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: lhotSkipPrecent(367) cannot add 1 element to context";
                          goto LABEL_161;
                        case 368:
                          if (sub_10008B714(a1, "eraseSuspendEvents", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendEvents(368) cannot add 1 element to context";
                          goto LABEL_161;
                        case 369:
                          if (sub_10008B714(a1, "eraseSuspendedStatuses", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendedStatuses(369) cannot add 1 element to context";
                          goto LABEL_161;
                        case 370:
                          if (sub_10008B714(a1, "eraseSuspendedBands", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendedBands(370) cannot add 1 element to context";
                          goto LABEL_161;
                        case 371:
                          if (sub_10008B714(a1, "eraseSuspendSituationsBelowThreshold", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsBelowThreshold(371) cannot add 1 element to context";
                          goto LABEL_161;
                        case 372:
                          if (sub_10008B714(a1, "eraseSuspendSituationsAboveThreshold", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsAboveThreshold(372) cannot add 1 element to context";
                          goto LABEL_161;
                        case 373:
                          if (sub_10008B714(a1, "eraseSuspendReadChainsProcessed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendReadChainsProcessed(373) cannot add 1 element to context";
                          goto LABEL_161;
                        case 374:
                          if (sub_10008B714(a1, "bdrLastDoneHr", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: bdrLastDoneHr(374) cannot add 1 element to context";
                          goto LABEL_161;
                        case 375:
                          if (sub_10008B714(a1, "bdrBackupThreshHrs", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: bdrBackupThreshHrs(375) cannot add 1 element to context";
                          goto LABEL_161;
                        case 376:
                          if (sub_10008B714(a1, "clogPortableProgBufs", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: clogPortableProgBufs(376) cannot add 1 element to context";
                          goto LABEL_161;
                        case 377:
                          if (sub_10008B714(a1, "clogPortableDropBufs", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: clogPortableDropBufs(377) cannot add 1 element to context";
                          goto LABEL_161;
                        case 378:
                          if (sub_10008B714(a1, "clogPortablePadSectors", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: clogPortablePadSectors(378) cannot add 1 element to context";
                          goto LABEL_161;
                        case 379:
                          if (sub_10008B714(a1, "numRetiredBlocks", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numRetiredBlocks(379) cannot add 1 element to context";
                          goto LABEL_161;
                        case 381:
                          if (sub_10008B714(a1, "numRefreshOnErrNandRefreshPerf", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numRefreshOnErrNandRefreshPerf(381) cannot add 1 element to context";
                          goto LABEL_161;
                        case 382:
                          if (sub_10008B714(a1, "raidReconstructReads", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructReads(382) cannot add 1 element to context";
                          goto LABEL_161;
                        case 383:
                          if (sub_10008B714(a1, "gcReadsNoBlog", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: gcReadsNoBlog(383) cannot add 1 element to context";
                          goto LABEL_161;
                        case 384:
                          if (sub_10008B714(a1, "AbortSkip_MPBXReadVerifyClosedBand", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyClosedBand(384) cannot add 1 element to context";
                          goto LABEL_161;
                        case 385:
                          if (sub_10008B714(a1, "openBandReadFail", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: openBandReadFail(385) cannot add 1 element to context";
                          goto LABEL_161;
                        case 386:
                          if (sub_10008B714(a1, "AbortSkip_MPBXReadVerifyOpenBand", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyOpenBand(386) cannot add 1 element to context";
                          goto LABEL_161;
                        case 387:
                          if (sub_10008B714(a1, "AbortSkip_MBPXFailedRebuildingParity", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MBPXFailedRebuildingParity(387) cannot add 1 element to context";
                          goto LABEL_161;
                        case 388:
                          if (sub_10008B714(a1, "raidSuccessfulPMXReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionInternal(388) cannot add 1 element to context";
                          goto LABEL_161;
                        case 389:
                          if (sub_10008B714(a1, "raidSuccessfulPMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionHost(389) cannot add 1 element to context";
                          goto LABEL_161;
                        case 390:
                          if (sub_10008B714(a1, "raidFailedPMXReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionInternal(390) cannot add 1 element to context";
                          goto LABEL_161;
                        case 391:
                          if (sub_10008B714(a1, "raidFailedPMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionHost(391) cannot add 1 element to context";
                          goto LABEL_161;
                        case 392:
                          if (sub_10008B714(a1, "raidSuccessfulRMXReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionInternal(392) cannot add 1 element to context";
                          goto LABEL_161;
                        case 393:
                          if (sub_10008B714(a1, "raidSuccessfulRMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionHost(393) cannot add 1 element to context";
                          goto LABEL_161;
                        case 394:
                          if (sub_10008B714(a1, "raidFailedRMXReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionInternal(394) cannot add 1 element to context";
                          goto LABEL_161;
                        case 395:
                          if (sub_10008B714(a1, "raidFailedRMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionHost(395) cannot add 1 element to context";
                          goto LABEL_161;
                        case 396:
                          if (sub_10008B714(a1, "raidFailedReadParityInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadParityInternal(396) cannot add 1 element to context";
                          goto LABEL_161;
                        case 397:
                          if (sub_10008B714(a1, "raidFailedReadQParityInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQParityInternal(397) cannot add 1 element to context";
                          goto LABEL_161;
                        case 398:
                          if (sub_10008B714(a1, "raidFailedReadQParity", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQParity(398) cannot add 1 element to context";
                          goto LABEL_161;
                        case 399:
                          if (sub_10008B714(a1, "raidFailedReadQCopy", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQCopy(399) cannot add 1 element to context";
                          goto LABEL_161;
                        case 400:
                          if (sub_10008B714(a1, "raidFailedReconstructionQParity", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReconstructionQParity(400) cannot add 1 element to context";
                          goto LABEL_161;
                        case 401:
                          if (sub_10008B714(a1, "offlineBlocksCnt", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: offlineBlocksCnt(401) cannot add 1 element to context";
                          goto LABEL_161;
                        case 402:
                          if (sub_10008B714(a1, "bork0Revectors", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: bork0Revectors(402) cannot add 1 element to context";
                          goto LABEL_161;
                        case 403:
                          if (sub_10008B714(a1, "raidFailedReadBlog", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadBlog(403) cannot add 1 element to context";
                          goto LABEL_161;
                        case 404:
                          if (sub_10008B714(a1, "numReliabilityRefreshes", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numReliabilityRefreshes(404) cannot add 1 element to context";
                          goto LABEL_161;
                        case 405:
                          if (sub_10008B714(a1, "raidFailedReadQCopyInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQCopyInternal(405) cannot add 1 element to context";
                          goto LABEL_161;
                        case 406:
                          if (v14 != 5) {
                            sub_100079708("ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          }
                          if (v14 >= 5) {
                            unsigned int v18 = 5;
                          }
                          else {
                            unsigned int v18 = v14;
                          }
                          if (sub_10008B714(a1, "raidReconstructSuccessFlow_", (uint64_t)v8, 8u, v18)) {
                            goto LABEL_110;
                          }
                          unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): Cannot add 5 elements to context";
                          goto LABEL_2616;
                        case 407:
                          if (v14 != 5) {
                            sub_100079708("ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          }
                          if (v14 >= 5) {
                            unsigned int v18 = 5;
                          }
                          else {
                            unsigned int v18 = v14;
                          }
                          if (sub_10008B714(a1, "raidReconstructFailFlow_", (uint64_t)v8, 8u, v18)) {
                            goto LABEL_110;
                          }
                          unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): Cannot add 5 elements to context";
                          goto LABEL_2616;
                        case 408:
                          if (sub_10008B714(a1, "raidReconstructFailP", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailP(408) cannot add 1 element to context";
                          goto LABEL_161;
                        case 409:
                          if (sub_10008B714(a1, "raidReconstructFailQ", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailQ(409) cannot add 1 element to context";
                          goto LABEL_161;
                        case 410:
                          if (sub_10008B714(a1, "raidReconstructFailUECC", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailUECC(410) cannot add 1 element to context";
                          goto LABEL_161;
                        case 411:
                          if (sub_10008B714(a1, "raidReconstructFailUnsupp", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailUnsupp(411) cannot add 1 element to context";
                          goto LABEL_161;
                        case 412:
                          if (sub_10008B714(a1, "raidUECCOpenBand", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidUECCOpenBand(412) cannot add 1 element to context";
                          goto LABEL_161;
                        case 414:
                          if (sub_10008B714(a1, "ueccReads", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: ueccReads(414) cannot add 1 element to context";
                          goto LABEL_161;
                        case 416:
                          if (sub_10008B714(a1, "raidSuccessfulVerify", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulVerify(416) cannot add 1 element to context";
                          goto LABEL_161;
                        case 417:
                          if (sub_10008B714(a1, "raidFailedVerify", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedVerify(417) cannot add 1 element to context";
                          goto LABEL_161;
                        case 418:
                          if (sub_10008B714(a1, "numBandsVerified", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numBandsVerified(418) cannot add 1 element to context";
                          goto LABEL_161;
                        case 419:
                          if (sub_10008B714(a1, "cache_heads", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: cache_heads(419) cannot add 1 element to context";
                          goto LABEL_161;
                        case 420:
                          if (sub_10008B714(a1, "AbortSkip_RMXtoMPBX", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_RMXtoMPBX(420) cannot add 1 element to context";
                          goto LABEL_161;
                        case 421:
                          if (sub_10008B714(a1, "s3eFwVer", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: s3eFwVer(421) cannot add 1 element to context";
                          goto LABEL_161;
                        case 422:
                          if (sub_10008B714(a1, "readVerifyNative", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: readVerifyNative(422) cannot add 1 element to context";
                          goto LABEL_161;
                        case 423:
                          if (sub_10008B714(a1, "reducedReadVerifyNative", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: reducedReadVerifyNative(423) cannot add 1 element to context";
                          goto LABEL_161;
                        case 424:
                          if (sub_10008B714(a1, "readVerifySlc", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: readVerifySlc(424) cannot add 1 element to context";
                          goto LABEL_161;
                        case 425:
                          if (sub_10008B714(a1, "reducedReadVerifySlc", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: reducedReadVerifySlc(425) cannot add 1 element to context";
                          goto LABEL_161;
                        case 426:
                          if (sub_10008B714(a1, "RxBurnEvictions", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: RxBurnEvictions(426) cannot add 1 element to context";
                          goto LABEL_161;
                        case 427:
                          if (sub_10008B714(a1, "directToTLCBands", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: directToTLCBands(427) cannot add 1 element to context";
                          goto LABEL_161;
                        case 428:
                          if (sub_10008B714(a1, "nandDesc", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: nandDesc(428) cannot add 1 element to context";
                          goto LABEL_161;
                        case 429:
                          if (sub_10008B714(a1, "fwUpdatesPercentUsed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: fwUpdatesPercentUsed(429) cannot add 1 element to context";
                          goto LABEL_161;
                        case 430:
                          if (sub_10008B714(a1, "slcPercentUsed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: slcPercentUsed(430) cannot add 1 element to context";
                          goto LABEL_161;
                        case 431:
                          if (sub_10008B714(a1, "percentUsed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: percentUsed(431) cannot add 1 element to context";
                          goto LABEL_161;
                        default:
                          switch(v12)
                          {
                            case 432:
                              if (sub_10008B714(a1, "hostAutoWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: hostAutoWrites(432) cannot add 1 element to context";
                              goto LABEL_161;
                            case 433:
                              if (sub_10008B714(a1, "hostAutoWriteXacts", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: hostAutoWriteXacts(433) cannot add 1 element to context";
                              goto LABEL_161;
                            case 434:
                              if (sub_10008B714(a1, "gcDestDynamic", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestDynamic(434) cannot add 1 element to context";
                              goto LABEL_161;
                            case 435:
                              if (sub_10008B714(a1, "gcDestStatic", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestStatic(435) cannot add 1 element to context";
                              goto LABEL_161;
                            case 436:
                              if (sub_10008B714(a1, "gcDestWearlevel", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestWearlevel(436) cannot add 1 element to context";
                              goto LABEL_161;
                            case 437:
                              if (sub_10008B714(a1, "gcDestParity", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestParity(437) cannot add 1 element to context";
                              goto LABEL_161;
                            case 438:
                              if (sub_10008B714(a1, "AbortSkip_Format", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_Format(438) cannot add 1 element to context";
                              goto LABEL_161;
                            case 440:
                              if (sub_10008B714(a1, "raidSLCPadding", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidSLCPadding(440) cannot add 1 element to context";
                              goto LABEL_161;
                            case 441:
                              if (sub_10008B714(a1, "raidGCBands", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidGCBands(441) cannot add 1 element to context";
                              goto LABEL_161;
                            case 442:
                              if (sub_10008B714(a1, "raidGCSectors", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidGCSectors(442) cannot add 1 element to context";
                              goto LABEL_161;
                            case 443:
                              if (sub_10008B714(a1, "raidGCPadding", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidGCPadding(443) cannot add 1 element to context";
                              goto LABEL_161;
                            case 444:
                              if (sub_10008B714(a1, "raidSLCBandsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidSLCBandsPerHostFlow(444) cannot add 1 element to context";
                              goto LABEL_161;
                            case 445:
                              if (sub_10008B714(a1, "raidSLCSecsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidSLCSecsPerHostFlow(445) cannot add 1 element to context";
                              goto LABEL_161;
                            case 446:
                              if (sub_10008B714(a1, "rxBurnMinCycleRuns", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: rxBurnMinCycleRuns(446) cannot add 1 element to context";
                              goto LABEL_161;
                            case 447:
                              if (sub_10008B714(a1, "clogNumFastCxt", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogNumFastCxt(447) cannot add 1 element to context";
                              goto LABEL_161;
                            case 448:
                              if (sub_10008B714(a1, "clogNumRapidReboots", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogNumRapidReboots(448) cannot add 1 element to context";
                              goto LABEL_161;
                            case 449:
                              if (sub_10008B714(a1, "clogFastCxtAbvThr", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogFastCxtAbvThr(449) cannot add 1 element to context";
                              goto LABEL_161;
                            case 450:
                              if (sub_10008B714(a1, "rxBurnDiffModeRuns", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: rxBurnDiffModeRuns(450) cannot add 1 element to context";
                              goto LABEL_161;
                            case 452:
                              if (sub_10008B714(a1, "indReadVerifyFail", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: indReadVerifyFail(452) cannot add 1 element to context";
                              goto LABEL_161;
                            case 453:
                              if (v14 != 16) {
                                sub_100079708("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x10) {
                                unsigned int v18 = 16;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "numOfThrottlingEntriesPerReadLevel_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): Cannot add 16 elements to context";
                              goto LABEL_2616;
                            case 454:
                              if (v14 != 16) {
                                sub_100079708("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x10) {
                                unsigned int v18 = 16;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "numOfThrottlingEntriesPerWriteLevel_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): Cannot add 16 elements to context";
                              goto LABEL_2616;
                            case 456:
                              if (v14 != 10) {
                                sub_100079708("ASPFTLParseBufferToCxt: slcFifoDepth(456): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0xA) {
                                unsigned int v18 = 10;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "slcFifoDepth_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: slcFifoDepth(456): Cannot add 10 elements to context";
                              goto LABEL_2616;
                            case 457:
                              if (sub_10008B714(a1, "wcacheSectorsDirtyIdle", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsDirtyIdle(457) cannot add 1 element to context";
                              goto LABEL_161;
                            case 458:
                              if (sub_10008B714(a1, "wcacheDS_SectorsDirtyIdle", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsDirtyIdle(458) cannot add 1 element to context";
                              goto LABEL_161;
                            case 459:
                              if (sub_10008B714(a1, "wcacheFS_MbytesDirtyIdle", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesDirtyIdle(459) cannot add 1 element to context";
                              goto LABEL_161;
                            case 460:
                              if (v14 != 256) {
                                sub_100079708("ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): (#256) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x100) {
                                unsigned int v18 = 256;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "CacheDepthVsThroughput_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): Cannot add 256 elements to context";
                              goto LABEL_2616;
                            case 461:
                              if (sub_10008B714(a1, "directToTLCSectors", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: directToTLCSectors(461) cannot add 1 element to context";
                              goto LABEL_161;
                            case 462:
                              if (sub_10008B714(a1, "fallbackToWaterfall", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: fallbackToWaterfall(462) cannot add 1 element to context";
                              goto LABEL_161;
                            case 463:
                              if (v14 != 11) {
                                sub_100079708("ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): (#11) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0xB) {
                                unsigned int v18 = 11;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "balanceProportionBucketsHistogram_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): Cannot add 11 elements to context";
                              goto LABEL_2616;
                            case 464:
                              if (sub_10008B714(a1, "lockToTlc", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: lockToTlc(464) cannot add 1 element to context";
                              goto LABEL_161;
                            case 465:
                              if (v14 != 10) {
                                sub_100079708("ASPFTLParseBufferToCxt: burstSizeHistogram(465): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0xA) {
                                unsigned int v18 = 10;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "burstSizeHistogram_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: burstSizeHistogram(465): Cannot add 10 elements to context";
                              goto LABEL_2616;
                            case 466:
                              if (v14 != 64) {
                                sub_100079708("ASPFTLParseBufferToCxt: qosDirectToTLC(466): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x40) {
                                unsigned int v18 = 64;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "qosDirectToTLC_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: qosDirectToTLC(466): Cannot add 64 elements to context";
                              goto LABEL_2616;
                            case 467:
                              if (v14 != 4) {
                                sub_100079708("ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 4) {
                                unsigned int v18 = 4;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "maxQosDirectToTLC_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): Cannot add 4 elements to context";
                              goto LABEL_2616;
                            case 468:
                              if (v14 != 16) {
                                sub_100079708("ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x10) {
                                unsigned int v18 = 16;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "wcacheDirtyAtFlush_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): Cannot add 16 elements to context";
                              goto LABEL_2616;
                            case 469:
                              if (v14 != 2) {
                                sub_100079708("ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "raidReconstructSuccessPartition_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 470:
                              if (v14 != 2) {
                                sub_100079708("ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "raidReconstructFailPartition_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 471:
                              if (sub_10008B714(a1, "raidUncleanBootBandFail", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidUncleanBootBandFail(471) cannot add 1 element to context";
                              goto LABEL_161;
                            case 472:
                              if (sub_10008B714(a1, "raidReconstructFailBandFlowHost", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowHost(472) cannot add 1 element to context";
                              goto LABEL_161;
                            case 473:
                              if (sub_10008B714(a1, "raidReconstructFailBandFlowGC", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowGC(473) cannot add 1 element to context";
                              goto LABEL_161;
                            case 476:
                              if (v14 != 2) {
                                sub_100079708("ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "raidSuccessfulRecoLbaRange_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 477:
                              if (v14 != 2) {
                                sub_100079708("ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "raidFailedRecoLbaRange_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 481:
                              if (v14 != 32) {
                                sub_100079708("ASPFTLParseBufferToCxt: skinnyBandErases_481(481): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x20) {
                                unsigned int v18 = 32;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "skinnyBandErases_481_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: skinnyBandErases_481(481): Cannot add 32 elements to context";
                              goto LABEL_2616;
                            case 483:
                              if (sub_10008B714(a1, "tlcOverHeatWaterfall", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: tlcOverHeatWaterfall(483) cannot add 1 element to context";
                              goto LABEL_161;
                            case 484:
                              if (sub_10008B714(a1, "skinnyCyclesConvert", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: skinnyCyclesConvert(484) cannot add 1 element to context";
                              goto LABEL_161;
                            case 485:
                              if (sub_10008B714(a1, "non_proportional_directToTLCSectors", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: non_proportional_directToTLCSectors(485) cannot add 1 element to context";
                              goto LABEL_161;
                            case 486:
                              if (sub_10008B714(a1, "maxFailedFastCxtSync", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: maxFailedFastCxtSync(486) cannot add 1 element to context";
                              goto LABEL_161;
                            case 487:
                              if (sub_10008B714(a1, "numFormatUserArea", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: numFormatUserArea(487) cannot add 1 element to context";
                              goto LABEL_161;
                            case 488:
                              if (sub_10008B714(a1, "clogFastCxtSyncAborted", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogFastCxtSyncAborted(488) cannot add 1 element to context";
                              goto LABEL_161;
                            case 489:
                              if (v14 != 5) {
                                sub_100079708("ASPFTLParseBufferToCxt: clogOccupationSectors(489): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 5) {
                                unsigned int v18 = 5;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "clogOccupationSectors_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: clogOccupationSectors(489): Cannot add 5 elements to context";
                              goto LABEL_2616;
                            case 490:
                              if (v14 != 64) {
                                sub_100079708("ASPFTLParseBufferToCxt: bdrTmpHist(490): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x40) {
                                unsigned int v18 = 64;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "bdrTmpHist_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: bdrTmpHist(490): Cannot add 64 elements to context";
                              goto LABEL_2616;
                            case 491:
                              if (sub_10008B714(a1, "numFWUpdates", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: numFWUpdates(491) cannot add 1 element to context";
                              goto LABEL_161;
                            case 492:
                              if (sub_10008B714(a1, "numClogLoadFails", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: numClogLoadFails(492) cannot add 1 element to context";
                              goto LABEL_161;
                            case 493:
                              if (sub_10008B714(a1, "rxBurnNumForcedDiffMode", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: rxBurnNumForcedDiffMode(493) cannot add 1 element to context";
                              goto LABEL_161;
                            case 494:
                              if (sub_10008B714(a1, "RD_numSaves", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: RD_numSaves(494) cannot add 1 element to context";
                              goto LABEL_161;
                            case 495:
                              if (sub_10008B714(a1, "eanCompressWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanCompressWrites(495) cannot add 1 element to context";
                              goto LABEL_161;
                            case 496:
                              if (sub_10008B714(a1, "eanHostWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanHostWrites(496) cannot add 1 element to context";
                              goto LABEL_161;
                            case 497:
                              if (sub_10008B714(a1, "bandPreErases", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: bandPreErases(497) cannot add 1 element to context";
                              goto LABEL_161;
                            case 498:
                              if (sub_10008B714(a1, "eanHostUnmaps", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanHostUnmaps(498) cannot add 1 element to context";
                              goto LABEL_161;
                            case 499:
                              if (sub_10008B714(a1, "eanHostFlushes", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanHostFlushes(499) cannot add 1 element to context";
                              goto LABEL_161;
                            case 500:
                              if (sub_10008B714(a1, "eanFastWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanFastWrites(500) cannot add 1 element to context";
                              goto LABEL_161;
                            case 501:
                              if (sub_10008B714(a1, "autowriteDS2FSCollisions", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: autowriteDS2FSCollisions(501) cannot add 1 element to context";
                              goto LABEL_161;
                            case 502:
                              if (sub_10008B714(a1, "autowriteWaitTransferTaskBlocks", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: autowriteWaitTransferTaskBlocks(502) cannot add 1 element to context";
                              goto LABEL_161;
                            case 503:
                              if (v14 != 2) {
                                sub_100079708("ASPFTLParseBufferToCxt: avgCycle(503): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_10008B714(a1, "avgCycle_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: avgCycle(503): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 504:
                              if (sub_10008B714(a1, "RD_DeferredClearsOverflowCnt", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: RD_DeferredClearsOverflowCnt(504) cannot add 1 element to context";
                              goto LABEL_161;
                            default:
                              switch(v12)
                              {
                                case 505:
                                  if (sub_10008B714(a1, "maxVerticsInBand", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: maxVerticsInBand(505) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 506:
                                  if (sub_10008B714(a1, "numVertics", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: numVertics(506) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 507:
                                  if (sub_10008B714(a1, "exceededCVertics", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: exceededCVertics(507) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 510:
                                  if (sub_10008B714(a1, "raidReconstructFailMismatch", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailMismatch(510) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 511:
                                  if (v14 != 32) {
                                    sub_100079708("ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0x20) {
                                    unsigned int v18 = 32;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_10008B714(a1, "mspbootBlockRefreshCnt_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): Cannot add 32 elements to context";
                                  goto LABEL_2616;
                                case 516:
                                  if (v14 != 32) {
                                    sub_100079708("ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0x20) {
                                    unsigned int v18 = 32;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_10008B714(a1, "mspBootBlockRefreshTime_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): Cannot add 32 elements to context";
                                  goto LABEL_2616;
                                case 517:
                                  if (sub_10008B714(a1, "mspBootBlockCountPerMsp", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: mspBootBlockCountPerMsp(517) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 518:
                                  if (sub_10008B714(a1, "skinnyRevectorSLC", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: skinnyRevectorSLC(518) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 519:
                                  if (sub_10008B714(a1, "skinnyRevectorTLC", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: skinnyRevectorTLC(519) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 520:
                                  if (sub_10008B714(a1, "perfSetupAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfSetupAttempts(520) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 521:
                                  if (sub_10008B714(a1, "perfSetupSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfSetupSuccesses(521) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 522:
                                  if (sub_10008B714(a1, "perfWriteAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfWriteAttempts(522) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 523:
                                  if (sub_10008B714(a1, "perfWriteSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfWriteSuccesses(523) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 524:
                                  if (sub_10008B714(a1, "perfReadAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfReadAttempts(524) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 525:
                                  if (sub_10008B714(a1, "perfReadSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfReadSuccesses(525) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 526:
                                  if (sub_10008B714(a1, "perfCleanupAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfCleanupAttempts(526) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 527:
                                  if (sub_10008B714(a1, "perfCleanupSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfCleanupSuccesses(527) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 530:
                                  if (sub_10008B714(a1, "firstFailedDieId", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: firstFailedDieId(530) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 531:
                                  if (sub_10008B714(a1, "numDieFailures", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: numDieFailures(531) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 532:
                                  if (sub_10008B714(a1, "spareAvailablePercent", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: spareAvailablePercent(532) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 533:
                                  if (sub_10008B714(a1, "dataFabricErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: dataFabricErr(533) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 534:
                                  if (sub_10008B714(a1, "downlinkFabricErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: downlinkFabricErr(534) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 535:
                                  if (sub_10008B714(a1, "prpAccTimeoutErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: prpAccTimeoutErr(535) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 537:
                                  if (sub_10008B714(a1, "uplinkFabricErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: uplinkFabricErr(537) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 538:
                                  if (sub_10008B714(a1, "skinnyBandsGBB", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: skinnyBandsGBB(538) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 539:
                                  if (sub_10008B714(a1, "AbortPad_GcMustPadBand", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadBand(539) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 540:
                                  if (sub_10008B714(a1, "AbortPad_GcMustPadSkinny", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadSkinny(540) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 541:
                                  if (sub_10008B714(a1, "bdrHostPingInitial", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: bdrHostPingInitial(541) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 542:
                                  if (sub_10008B714(a1, "bdrHostPingMoreNeeded", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: bdrHostPingMoreNeeded(542) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 543:
                                  if (sub_10008B714(a1, "bandParityAllocationFailed", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: bandParityAllocationFailed(543) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 544:
                                  if (sub_10008B714(a1, "fastHwBurstToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: fastHwBurstToSlc(544) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 545:
                                  if (sub_10008B714(a1, "slowHwToTlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slowHwToTlc(545) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 546:
                                  if (v14 != 10) {
                                    sub_100079708("ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xA) {
                                    unsigned int v18 = 10;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_10008B714(a1, "slcDemandBurstSizeDetected_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): Cannot add 10 elements to context";
                                  goto LABEL_2616;
                                case 547:
                                  if (v14 != 10) {
                                    sub_100079708("ASPFTLParseBufferToCxt: slcDemandBurstDur(547): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xA) {
                                    unsigned int v18 = 10;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_10008B714(a1, "slcDemandBurstDur_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: slcDemandBurstDur(547): Cannot add 10 elements to context";
                                  goto LABEL_2616;
                                case 548:
                                  if (sub_10008B714(a1, "fastHwToTlcBurst", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: fastHwToTlcBurst(548) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 549:
                                  if (v14 != 10) {
                                    sub_100079708("ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xA) {
                                    unsigned int v18 = 10;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_10008B714(a1, "slcDemandBurstSizeSlc_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): Cannot add 10 elements to context";
                                  goto LABEL_2616;
                                case 551:
                                  if (v14 != 11) {
                                    sub_100079708("ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): (#11) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xB) {
                                    unsigned int v18 = 11;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_10008B714(a1, "balanceProportionBucketsHistogramTlc_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): Cannot add 11"
                                        " elements to context";
                                  goto LABEL_2616;
                                case 553:
                                  if (sub_10008B714(a1, "slowHwFlushToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slowHwFlushToSlc(553) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 557:
                                  if (sub_10008B714(a1, "slowHwToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slowHwToSlc(557) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 558:
                                  if (sub_10008B714(a1, "flushNwToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: flushNwToSlc(558) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 559:
                                  if (sub_10008B714(a1, "flushNwToTlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: flushNwToTlc(559) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 560:
                                  if (sub_10008B714(a1, "oslcHw", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcHw(560) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 561:
                                  if (sub_10008B714(a1, "oslcTransitions", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcTransitions(561) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 563:
                                  if (sub_10008B714(a1, "slcDemandFlushCount", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slcDemandFlushCount(563) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 564:
                                  if (sub_10008B714(a1, "slcDemandBurstCount", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstCount(564) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 565:
                                  if (sub_10008B714(a1, "oslcBaseAvgPE", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcBaseAvgPE(565) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 566:
                                  if (sub_10008B714(a1, "raidReconstructFailNoSPBX", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailNoSPBX(566) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 567:
                                  if (sub_10008B714(a1, "raidReconstructFailDouble", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailDouble(567) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 568:
                                  if (sub_10008B714(a1, "oslcFastWAmpUOnOff", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcFastWAmpUOnOff(568) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 569:
                                  if (sub_10008B714(a1, "oslcSlowWAmpUOnOff", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcSlowWAmpUOnOff(569) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 570:
                                  if (sub_10008B714(a1, "raidReconstructFailInvalid", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailInvalid(570) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 572:
                                  if (sub_10008B714(a1, "oslcLastWAmpUx10", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcLastWAmpUx10(572) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 573:
                                  if (sub_10008B714(a1, "raidFailedReadNoBlog", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidFailedReadNoBlog(573) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 574:
                                  if (sub_10008B714(a1, "raidReconstructFailBlank", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBlank(574) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 575:
                                  if (sub_10008B714(a1, "oslcHotTLCOnOff", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcHotTLCOnOff(575) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 576:
                                  if (sub_10008B714(a1, "gcVPackDestinations", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: gcVPackDestinations(576) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 581:
                                  if (sub_10008B714(a1, "averageTLCPECycles", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: averageTLCPECycles(581) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 582:
                                  if (sub_10008B714(a1, "averageSLCPECycles", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: averageSLCPECycles(582) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 583:
                                  if (sub_10008B714(a1, "numAtomicBoots", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: numAtomicBoots(583) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 584:
                                  if (sub_10008B714(a1, "clogMinorMismatch", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: clogMinorMismatch(584) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 586:
                                  if (sub_10008B714(a1, "raidExpectedFailRMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionInternal(586) cannot ad"
                                  }
                                        "d 1 element to context";
                                  goto LABEL_161;
                                case 587:
                                  if (sub_10008B714(a1, "raidExpectedFailRMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionHost(587) cannot add 1 "
                                        "element to context";
                                  goto LABEL_161;
                                case 588:
                                  if (sub_10008B714(a1, "oslcGCinvalidations", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcGCinvalidations(588) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 589:
                                  if (sub_10008B714(a1, "oslcGCActivateReason", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcGCActivateReason(589) cannot add 1 element to context";
                                  goto LABEL_161;
                                default:
                                  switch(v12)
                                  {
                                    case 590:
                                      if (sub_10008B714(a1, "oslcLowCleanBandsUOnOff", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcLowCleanBandsUOnOff(590) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 591:
                                      if (sub_10008B714(a1, "oslcTooManyGCMustOnOff", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcTooManyGCMustOnOff(591) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 592:
                                      if (sub_10008B714(a1, "oslcBaseHostWrites", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBaseHostWrites(592) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 593:
                                      if (sub_10008B714(a1, "oslcBaseBandErases", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBaseBandErases(593) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 594:
                                      if (sub_10008B714(a1, "oslcBdrBands", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBdrBands(594) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 595:
                                      if (sub_10008B714(a1, "oslcBdrValid", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBdrValid(595) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 596:
                                      if (sub_10008B714(a1, "unexpectedBlanksInternal", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: unexpectedBlanksInternal(596) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 597:
                                      if (sub_10008B714(a1, "unexpectedBlanksOnRV", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: unexpectedBlanksOnRV(597) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 601:
                                      if (sub_10008B714(a1, "waterfallLockSectors", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: waterfallLockSectors(601) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 602:
                                      if (sub_10008B714(a1, "oslcGCActiveWrites", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcGCActiveWrites(602) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 603:
                                      if (sub_10008B714(a1, "chipIdTemperatureSample", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: chipIdTemperatureSample(603) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 604:
                                      if (sub_10008B714(a1, "gcVPackWrites", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: gcVPackWrites(604) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 605:
                                      if (v14 != 10) {
                                        sub_100079708("ASPFTLParseBufferToCxt: gcActiveReasons(605): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0xA) {
                                        unsigned int v18 = 10;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_10008B714(a1, "gcActiveReasons_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: gcActiveReasons(605): Cannot add 10 elements to context";
                                      goto LABEL_2616;
                                    case 606:
                                      if (sub_10008B714(a1, "eanMaxInitTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanMaxInitTimeMs(606) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 607:
                                      if (sub_10008B714(a1, "eanMinToFirstReadTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanMinToFirstReadTimeMs(607) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 608:
                                      if (sub_10008B714(a1, "skinnyAPGMRetire", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: skinnyAPGMRetire(608) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 609:
                                      if (sub_10008B714(a1, "unexpectedBlanksHost", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: unexpectedBlanksHost(609) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 610:
                                      if (v14 != 64) {
                                        sub_100079708("ASPFTLParseBufferToCxt: pcieAerCounters(610): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0x40) {
                                        unsigned int v18 = 64;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_10008B714(a1, "pcieAerCounters_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: pcieAerCounters(610): Cannot add 64 elements to context";
                                      goto LABEL_2616;
                                    case 611:
                                      if (sub_10008B714(a1, "fastHwToTlcBalance", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: fastHwToTlcBalance(611) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 612:
                                      if (sub_10008B714(a1, "perfOSLCRuns", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: perfOSLCRuns(612) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 613:
                                      if (sub_10008B714(a1, "slcDemandBurstWritesInGC", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInGC(613) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 614:
                                      if (sub_10008B714(a1, "slcDemandBurstWritesInTT", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInTT(614) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 615:
                                      if (sub_10008B714(a1, "slcDemandBurstWritesInNRP", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInNRP(615) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 616:
                                      if (sub_10008B714(a1, "perfTotalDmaMb", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: perfTotalDmaMb(616) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 617:
                                      if (sub_10008B714(a1, "eanAvgInitTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgInitTimeMs(617) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 618:
                                      if (sub_10008B714(a1, "eanAvgToFirstReadTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgToFirstReadTimeMs(618) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 619:
                                      if (sub_10008B714(a1, "eanMaxBootReadTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanMaxBootReadTimeMs(619) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 620:
                                      if (sub_10008B714(a1, "eanAvgBootReadTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgBootReadTimeMs(620) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 621:
                                      if (v14 != 10) {
                                        sub_100079708("ASPFTLParseBufferToCxt: eanBootReadsHist(621): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0xA) {
                                        unsigned int v18 = 10;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_10008B714(a1, "eanBootReadsHist_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: eanBootReadsHist(621): Cannot add 10 elements to context";
                                      goto LABEL_2616;
                                    case 622:
                                      if (sub_10008B714(a1, "maxBgInitTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: maxBgInitTimeMs(622) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 623:
                                      if (sub_10008B714(a1, "avgBgInitTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: avgBgInitTimeMs(623) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 624:
                                      if (v14 != 16) {
                                        sub_100079708("ASPFTLParseBufferToCxt: clogFailReason(624): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0x10) {
                                        unsigned int v18 = 16;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_10008B714(a1, "clogFailReason_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: clogFailReason(624): Cannot add 16 elements to context";
                                      goto LABEL_2616;
                                    case 625:
                                      if (sub_10008B714(a1, "eanMinBootReadMBPerSec", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanMinBootReadMBPerSec(625) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 626:
                                      if (sub_10008B714(a1, "eanAvgBootReadMBPerSec", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgBootReadMBPerSec(626) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 627:
                                      if (sub_10008B714(a1, "minSkinnyPECycles", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: minSkinnyPECycles(627) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 628:
                                      if (sub_10008B714(a1, "maxSkinnyPECycles", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: maxSkinnyPECycles(628) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 629:
                                      if (sub_10008B714(a1, "averageSkinnyPECycles", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: averageSkinnyPECycles(629) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 630:
                                      if (v14 != 6) {
                                        sub_100079708("ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 6) {
                                        unsigned int v18 = 6;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_10008B714(a1, "raidSuccessfulRecoEAN_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): Cannot add 6 elements to context";
                                      goto LABEL_2616;
                                    case 631:
                                      if (v14 != 6) {
                                        sub_100079708("ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 6) {
                                        unsigned int v18 = 6;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_10008B714(a1, "raidFailedRecoEAN_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): Cannot add 6 elements to context";
                                      goto LABEL_2616;
                                    case 632:
                                      if (v14 != 6) {
                                        sub_100079708("ASPFTLParseBufferToCxt: eanFirstReadMode(632): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 6) {
                                        unsigned int v18 = 6;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_10008B714(a1, "eanFirstReadMode_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: eanFirstReadMode(632): Cannot add 6 elements to context";
                                      goto LABEL_2616;
                                    case 635:
                                      if (sub_10008B714(a1, "oslcHwGC", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcHwGC(635) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 636:
                                      if (sub_10008B714(a1, "oslcHwTT", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcHwTT(636) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 637:
                                      if (sub_10008B714(a1, "oslcHwNRP", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcHwNRP(637) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 638:
                                      if (v14 != 10) {
                                        sub_100079708("ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0xA) {
                                        unsigned int v18 = 10;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_10008B714(a1, "oslcDemandBurstSize_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): Cannot add 10 elements to context";
                                      goto LABEL_2616;
                                    case 639:
                                      if (sub_10008B714(a1, "raidReconstructSuccessBandFlowOslc", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidReconstructSuccessBandFlowOslc(639) cannot add 1"
                                            " element to context";
                                      goto LABEL_161;
                                    case 640:
                                      if (sub_10008B714(a1, "raidReconstructFailBandFlowOslc", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowOslc(640) cannot add 1 el"
                                            "ement to context";
                                      goto LABEL_161;
                                    case 641:
                                      if (sub_10008B714(a1, "raidFailSectors", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidFailSectors(641) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 642:
                                      if (sub_10008B714(a1, "eanFailSectors", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanFailSectors(642) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 643:
                                      if (sub_10008B714(a1, "bdrTimeMode", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: bdrTimeMode(643) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 644:
                                      if (sub_10008B714(a1, "raidParityNotSavedP", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityNotSavedP(644) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 645:
                                      if (sub_10008B714(a1, "raidParityNotSavedQ", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityNotSavedQ(645) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 646:
                                      if (sub_10008B714(a1, "raidParityInvalid", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityInvalid(646) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 647:
                                      if (sub_10008B714(a1, "raidParityUnknown", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityUnknown(647) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 648:
                                      if (sub_10008B714(a1, "raidParityUnmapped", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityUnmapped(648) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 649:
                                      if (sub_10008B714(a1, "raidParityGCUnc", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityGCUnc(649) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 657:
                                      if (sub_10008B714(a1, "AbortSkip_MPBXProbational", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXProbational(657) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 659:
                                      if (sub_10008B714(a1, "raidVerificationReads", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidVerificationReads(659) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 666:
                                      if (sub_10008B714(a1, "nofDies", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: nofDies(666) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 671:
                                      if (sub_10008B714(a1, "skinnyBandsNum", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: skinnyBandsNum(671) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 672:
                                      if (sub_10008B714(a1, "skinnyBandsNumDips", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: skinnyBandsNumDips(672) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 674:
                                      if (v14 != 8) {
                                        sub_100079708("ASPFTLParseBufferToCxt: oslcNoVotesHw(674): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 8) {
                                        unsigned int v18 = 8;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_10008B714(a1, "oslcNoVotesHw_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: oslcNoVotesHw(674): Cannot add 8 elements to context";
                                      goto LABEL_2616;
                                    case 675:
                                      if (sub_10008B714(a1, "totalLbas", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: totalLbas(675) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 676:
                                      if (sub_10008B714(a1, "bdrHostPingExtra", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: bdrHostPingExtra(676) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 677:
                                      if (sub_10008B714(a1, "magazineInstanceMeta", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: magazineInstanceMeta(677) cannot add 1 element to context";
                                      goto LABEL_161;
                                    default:
                                      switch(v12)
                                      {
                                        case 680:
                                          if (v14 != 3) {
                                            sub_100079708("ASPFTLParseBufferToCxt: magazineFWVersion(680): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 3) {
                                            unsigned int v18 = 3;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "magazineFWVersion_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: magazineFWVersion(680): Cannot add 3 elements to context";
                                          goto LABEL_2616;
                                        case 681:
                                          if (sub_10008B714(a1, "raidReconstructFailPMXUnsup", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailPMXUnsup(681) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 682:
                                          if (sub_10008B714(a1, "raidReconstructFailBMXUnsup", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUnsup(682) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 683:
                                          if (sub_10008B714(a1, "iBootNANDResets", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: iBootNANDResets(683) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 684:
                                          if (sub_10008B714(a1, "pcieClkreqHighTimeout", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: pcieClkreqHighTimeout(684) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 687:
                                          if (v14 != 3) {
                                            sub_100079708("ASPFTLParseBufferToCxt: cbdrInitSent(687): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 3) {
                                            unsigned int v18 = 3;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "cbdrInitSent_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrInitSent(687): Cannot add 3 elements to context";
                                          goto LABEL_2616;
                                        case 688:
                                          if (sub_10008B714(a1, "cbdrPauseSent", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrPauseSent(688) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 689:
                                          if (sub_10008B714(a1, "cbdrResumeSent", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrResumeSent(689) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 690:
                                          if (sub_10008B714(a1, "cbdrGetResultSent", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrGetResultSent(690) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 691:
                                          if (sub_10008B714(a1, "cbdrEarlyExits", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrEarlyExits(691) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 694:
                                          if (v14 != 10) {
                                            sub_100079708("ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0xA) {
                                            unsigned int v18 = 10;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "cbdrRefreshGrades_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): Cannot add 10 elements to context";
                                          goto LABEL_2616;
                                        case 695:
                                          if (sub_10008B714(a1, "cbdrNotEnoughReads", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrNotEnoughReads(695) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 696:
                                          if (sub_10008B714(a1, "cbdrAborts", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrAborts(696) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 697:
                                          if (sub_10008B714(a1, "TurboRaidHostClassifications", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidHostClassifications(697) cannot add 1 e"
                                                "lement to context";
                                          goto LABEL_161;
                                        case 698:
                                          if (sub_10008B714(a1, "TurboRaidInternalClassifications", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidInternalClassifications(698) cannot add"
                                          }
                                                " 1 element to context";
                                          goto LABEL_161;
                                        case 699:
                                          if (sub_10008B714(a1, "cbdrFullyDone", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrFullyDone(699) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 702:
                                          if (v14 != 32) {
                                            sub_100079708("ASPFTLParseBufferToCxt: vcurve(702): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0x20) {
                                            unsigned int v18 = 32;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "vcurve_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: vcurve(702): Cannot add 32 elements to context";
                                          goto LABEL_2616;
                                        case 703:
                                          if (v14 != 12) {
                                            sub_100079708("ASPFTLParseBufferToCxt: injDepth(703): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0xC) {
                                            unsigned int v18 = 12;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "injDepth_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: injDepth(703): Cannot add 12 elements to context";
                                          goto LABEL_2616;
                                        case 704:
                                          if (sub_10008B714(a1, "logical_disk_occupied_promiles", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: logical_disk_occupied_promiles(704) cannot add 1"
                                                " element to context";
                                          goto LABEL_161;
                                        case 711:
                                          if (sub_10008B714(a1, "raidPrevFailedReconstructSkip", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructSkip(711) cannot add 1 "
                                                "element to context";
                                          goto LABEL_161;
                                        case 712:
                                          if (sub_10008B714(a1, "TurboRaidSuccessfulHostAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulHostAuxReads(712) cannot add "
                                          }
                                                "1 element to context";
                                          goto LABEL_161;
                                        case 713:
                                          if (sub_10008B714(a1, "TurboRaidSuccessfulInternalAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulInternalAuxReads(713) cannot "
                                          }
                                                "add 1 element to context";
                                          goto LABEL_161;
                                        case 714:
                                          if (sub_10008B714(a1, "turboRaidClassificationReliabilityHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityHost(714) cann"
                                          }
                                                "ot add 1 element to context";
                                          goto LABEL_161;
                                        case 715:
                                          if (sub_10008B714(a1, "turboRaidClassificationReliabilityInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityInternal(715) "
                                          }
                                                "cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 716:
                                          if (sub_10008B714(a1, "turboRaidClassificationQualityHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityHost(716) cannot a"
                                          }
                                                "dd 1 element to context";
                                          goto LABEL_161;
                                        case 717:
                                          if (sub_10008B714(a1, "turboRaidClassificationQualityInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityInternal(717) cann"
                                          }
                                                "ot add 1 element to context";
                                          goto LABEL_161;
                                        case 719:
                                          if (sub_10008B714(a1, "skinnyBandErases", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: skinnyBandErases(719) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 721:
                                          if (sub_10008B714(a1, "gcPDusterDestinations", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: gcPDusterDestinations(721) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 722:
                                          if (sub_10008B714(a1, "gcPDusterWrites", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: gcPDusterWrites(722) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 730:
                                          if (sub_10008B714(a1, "rvFails", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: rvFails(730) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 737:
                                          if (sub_10008B714(a1, "TurboRaidFailedHostAuxReads", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidFailedHostAuxReads(737) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 738:
                                          if (sub_10008B714(a1, "TurboRaidFailedInternalAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidFailedInternalAuxReads(738) cannot add "
                                          }
                                                "1 element to context";
                                          goto LABEL_161;
                                        case 741:
                                          if (sub_10008B714(a1, "autoSkipTriggers", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: autoSkipTriggers(741) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 742:
                                          if (sub_10008B714(a1, "autoSkipPlanes", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: autoSkipPlanes(742) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 744:
                                          if (v14 != 8) {
                                            sub_100079708("ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 8) {
                                            unsigned int v18 = 8;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "raidReconstructDurationHisto_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): Cannot add 8 "
                                                "elements to context";
                                          goto LABEL_2616;
                                        case 745:
                                          if (v14 != 8) {
                                            sub_100079708("ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 8) {
                                            unsigned int v18 = 8;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "failsOnReconstructHisto_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): Cannot add 8 elements to context";
                                          goto LABEL_2616;
                                        case 746:
                                          if (sub_10008B714(a1, "bandKill_userFlattenExcessive", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_userFlattenExcessive(746) cannot add 1 "
                                                "element to context";
                                          goto LABEL_161;
                                        case 747:
                                          if (sub_10008B714(a1, "bandKill_IntFlattenExcessive", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_IntFlattenExcessive(747) cannot add 1 e"
                                                "lement to context";
                                          goto LABEL_161;
                                        case 748:
                                          if (sub_10008B714(a1, "bandKill_userFlattenBalance", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_userFlattenBalance(748) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 749:
                                          if (sub_10008B714(a1, "bandKill_intFlattenBalance", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_intFlattenBalance(749) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 750:
                                          if (sub_10008B714(a1, "bandKill_formatVertExcessive", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_formatVertExcessive(750) cannot add 1 e"
                                                "lement to context";
                                          goto LABEL_161;
                                        case 751:
                                          if (sub_10008B714(a1, "bandKill_formatVertBalance", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_formatVertBalance(751) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 753:
                                          if (sub_10008B714(a1, "cbdrNumSlowRefreshes", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrNumSlowRefreshes(753) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 754:
                                          if (sub_10008B714(a1, "cbdrNumFastRefreshes", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrNumFastRefreshes(754) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 755:
                                          if (sub_10008B714(a1, "cbdrTotalRefreshValidity", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrTotalRefreshValidity(755) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 756:
                                          if (v14 != 9) {
                                            sub_100079708("ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): (#9) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 9) {
                                            unsigned int v18 = 9;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "cbdrRefreshedAges_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): Cannot add 9 elements to context";
                                          goto LABEL_2616;
                                        case 758:
                                          if (sub_10008B714(a1, "cbdrSkippedBlocks", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrSkippedBlocks(758) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 759:
                                          if (v14 != 5) {
                                            sub_100079708("ASPFTLParseBufferToCxt: cbdrScanPct(759): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 5) {
                                            unsigned int v18 = 5;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "cbdrScanPct_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrScanPct(759): Cannot add 5 elements to context";
                                          goto LABEL_2616;
                                        case 760:
                                          if (sub_10008B714(a1, "raidSuccessfulBMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionInternal(760) can"
                                          }
                                                "not add 1 element to context";
                                          goto LABEL_161;
                                        case 761:
                                          if (sub_10008B714(a1, "raidSuccessfulBMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionHost(761) cannot "
                                          }
                                                "add 1 element to context";
                                          goto LABEL_161;
                                        case 762:
                                          if (sub_10008B714(a1, "raidFailedBMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionInternal(762) cannot "
                                          }
                                                "add 1 element to context";
                                          goto LABEL_161;
                                        case 763:
                                          if (sub_10008B714(a1, "raidFailedBMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionHost(763) cannot add "
                                          }
                                                "1 element to context";
                                          goto LABEL_161;
                                        case 764:
                                          if (sub_10008B714(a1, "ricSPRVFail", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: ricSPRVFail(764) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 765:
                                          if (sub_10008B714(a1, "ricMPRVFail", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: ricMPRVFail(765) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 767:
                                          if (v14 != 10) {
                                            sub_100079708("ASPFTLParseBufferToCxt: cbdrRefreshGradesSLC(767): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0xA) {
                                            unsigned int v18 = 10;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "cbdrRefreshGradesSLC_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshGradesSLC(767): Cannot add 10 elements to context";
                                          goto LABEL_2616;
                                        case 768:
                                          if (v14 != 9) {
                                            sub_100079708("ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): (#9) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 9) {
                                            unsigned int v18 = 9;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "cbdrRefreshedAgesSLC_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): Cannot add 9 elements to context";
                                          goto LABEL_2616;
                                        case 769:
                                          if (v14 != 5) {
                                            sub_100079708("ASPFTLParseBufferToCxt: cbdrScanPctSLC(769): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 5) {
                                            unsigned int v18 = 5;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "cbdrScanPctSLC_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrScanPctSLC(769): Cannot add 5 elements to context";
                                          goto LABEL_2616;
                                        case 770:
                                          if (v14 != 8) {
                                            sub_100079708("ASPFTLParseBufferToCxt: cpuBurstLength(770): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 8) {
                                            unsigned int v18 = 8;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "cpuBurstLength_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cpuBurstLength(770): Cannot add 8 elements to context";
                                          goto LABEL_2616;
                                        case 771:
                                          if (sub_10008B714(a1, "autoSkipRaidRecoFail", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: autoSkipRaidRecoFail(771) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 772:
                                          if (v14 != 32) {
                                            sub_100079708("ASPFTLParseBufferToCxt: dmReasonsSlc(772): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0x20) {
                                            unsigned int v18 = 32;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "dmReasonsSlc_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc(772): Cannot add 32 elements to context";
                                          goto LABEL_2616;
                                        case 773:
                                          if (v14 != 32) {
                                            sub_100079708("ASPFTLParseBufferToCxt: dmReasonsTlc(773): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0x20) {
                                            unsigned int v18 = 32;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_10008B714(a1, "dmReasonsTlc_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc(773): Cannot add 32 elements to context";
                                          goto LABEL_2616;
                                        case 774:
                                          if (sub_10008B714(a1, "raidReconstructFailBMXAbort", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXAbort(774) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 775:
                                          if (sub_10008B714(a1, "bandKill_fatBindingNoBlocks", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_fatBindingNoBlocks(775) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 776:
                                          if (sub_10008B714(a1, "bandKill_fatBindingFewBlocks", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_fatBindingFewBlocks(776) cannot add 1 e"
                                                "lement to context";
                                          goto LABEL_161;
                                        default:
                                          switch(v12)
                                          {
                                            case 777:
                                              if (sub_10008B714(a1, "numBadBootBlocks", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: numBadBootBlocks(777) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 778:
                                              if (sub_10008B714(a1, "snapshotCPUHigh", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: snapshotCPUHigh(778) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 779:
                                              if (sub_10008B714(a1, "snapshotCPULow", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: snapshotCPULow(779) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 780:
                                              if (sub_10008B714(a1, "gcWithoutBMs", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: gcWithoutBMs(780) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 781:
                                              if (v14 != 10) {
                                                sub_100079708("ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xA) {
                                                unsigned int v18 = 10;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "gcSearchTimeHistory_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): Cannot add 10 elements to context";
                                              goto LABEL_2616;
                                            case 785:
                                              if (v14 != 16) {
                                                sub_100079708("ASPFTLParseBufferToCxt: gcSearchPortion(785): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "gcSearchPortion_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: gcSearchPortion(785): Cannot add 16 elements to context";
                                              goto LABEL_2616;
                                            case 786:
                                              if (sub_10008B714(a1, "raidReconstructFailBmxMp", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBmxMp(786) cannot add 1 e"
                                                    "lement to context";
                                              goto LABEL_161;
                                            case 787:
                                              if (sub_10008B714(a1, "raidReconstructFailBmx", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBmx(787) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 788:
                                              if (sub_10008B714(a1, "raidReconstructFailBMXUECC", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUECC(788) cannot add 1"
                                                    " element to context";
                                              goto LABEL_161;
                                            case 789:
                                              if (sub_10008B714(a1, "raidReconstructFailBMXBlank", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXBlank(789) cannot add "
                                              }
                                                    "1 element to context";
                                              goto LABEL_161;
                                            case 790:
                                              if (sub_10008B714(a1, "raidPrevFailedReconstructBmxMpSkip", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructBmxMpSkip(790) cann"
                                              }
                                                    "ot add 1 element to context";
                                              goto LABEL_161;
                                            case 792:
                                              if (sub_10008B714(a1, "numTLCFatBands", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: numTLCFatBands(792) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 793:
                                              if (sub_10008B714(a1, "fatValidity", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: fatValidity(793) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 794:
                                              if (sub_10008B714(a1, "fatTotal", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: fatTotal(794) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 798:
                                              if (v14 != 4) {
                                                sub_100079708("ASPFTLParseBufferToCxt: raidBMXFailP(798): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "raidBMXFailP_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailP(798): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 799:
                                              if (v14 != 4) {
                                                sub_100079708("ASPFTLParseBufferToCxt: raidBMXFailUECC(799): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "raidBMXFailUECC_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailUECC(799): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 804:
                                              if (v14 != 4) {
                                                sub_100079708("ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "raidBMXFailNoSPBX_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 806:
                                              if (v14 != 4) {
                                                sub_100079708("ASPFTLParseBufferToCxt: raidBMXFailBlank(806): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "raidBMXFailBlank_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailBlank(806): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 809:
                                              if (v14 != 4) {
                                                sub_100079708("ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "raidBMXFailUnsup_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 811:
                                              if (v14 != 4) {
                                                sub_100079708("ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "raidBMXFailMpSkip_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 812:
                                              if (v14 != 4) {
                                                sub_100079708("ASPFTLParseBufferToCxt: raidBMXFailAbort(812): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "raidBMXFailAbort_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailAbort(812): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 813:
                                              if (sub_10008B714(a1, "TurboRaidIsEnabled", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: TurboRaidIsEnabled(813) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 814:
                                              if (v14 != 4) {
                                                sub_100079708("ASPFTLParseBufferToCxt: raidBMXFailOther(814): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "raidBMXFailOther_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailOther(814): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 815:
                                              if (v14 != 4) {
                                                sub_100079708("ASPFTLParseBufferToCxt: raidBMXSuccess(815): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "raidBMXSuccess_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXSuccess(815): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 816:
                                              if (sub_10008B714(a1, "skinnyBandsExtraDip", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: skinnyBandsExtraDip(816) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 821:
                                              if (sub_10008B714(a1, "writeAmp", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: writeAmp(821) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 822:
                                              if (sub_10008B714(a1, "ricMaxClogOnlyPages", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: ricMaxClogOnlyPages(822) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 823:
                                              if (v14 != 3) {
                                                sub_100079708("ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 3) {
                                                unsigned int v18 = 3;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "readClassifyStatusesHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): Cannot add 3"
                                              }
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 824:
                                              if (v14 != 10) {
                                                sub_100079708("ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xA) {
                                                unsigned int v18 = 10;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "readWithAuxStatusesHisto_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): Cannot add 10"
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 825:
                                              if (v14 != 10) {
                                                sub_100079708("ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xA) {
                                                unsigned int v18 = 10;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "readReconstructStatusesHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): Cannot ad"
                                              }
                                                    "d 10 elements to context";
                                              goto LABEL_2616;
                                            case 826:
                                              if (sub_10008B714(a1, "bdrBackupChecks", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: bdrBackupChecks(826) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 827:
                                              if (sub_10008B714(a1, "ricExceedClogOnlyPagesTH", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: ricExceedClogOnlyPagesTH(827) cannot add 1 e"
                                                    "lement to context";
                                              goto LABEL_161;
                                            case 828:
                                              if (sub_10008B714(a1, "numDipFailures", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: numDipFailures(828) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 831:
                                              if (sub_10008B714(a1, "prefetchNextRange", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: prefetchNextRange(831) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 862:
                                              if (sub_10008B714(a1, "raidSuccessfulSkip", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulSkip(862) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 863:
                                              if (sub_10008B714(a1, "raidFailedSkip", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidFailedSkip(863) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 864:
                                              if (sub_10008B714(a1, "raidSkipAttempts", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidSkipAttempts(864) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 865:
                                              if (v14 != 16) {
                                                sub_100079708("ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "timeOfThrottlingPerLevel_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): Cannot add 16"
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 866:
                                              if (v14 != 16) {
                                                sub_100079708("ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "timeOfThrottlingPerReadLevel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): Cannot ad"
                                              }
                                                    "d 16 elements to context";
                                              goto LABEL_2616;
                                            case 867:
                                              if (v14 != 16) {
                                                sub_100079708("ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "timeOfThrottlingPerWriteLevel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): Cannot a"
                                              }
                                                    "dd 16 elements to context";
                                              goto LABEL_2616;
                                            case 868:
                                              if (v14 != 32) {
                                                sub_100079708("ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "dmReasonsSlc_1bc_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 869:
                                              if (v14 != 32) {
                                                sub_100079708("ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "dmReasonsTlc_1bc_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 870:
                                              if (v14 != 32) {
                                                sub_100079708("ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "dmReasonsSlc_1bc_he_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 871:
                                              if (v14 != 32) {
                                                sub_100079708("ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "dmReasonsTlc_1bc_he_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 876:
                                              if (v14 != 32) {
                                                sub_100079708("ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "dmReasonsSlc_mbc_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 877:
                                              if (v14 != 32) {
                                                sub_100079708("ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "dmReasonsTlc_mbc_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 883:
                                              if (sub_10008B714(a1, "clogEmptyProgramms", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: clogEmptyProgramms(883) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 884:
                                              if (sub_10008B714(a1, "oslcHwCloseBand", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: oslcHwCloseBand(884) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 891:
                                              if (v14 != 2) {
                                                sub_100079708("ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "turboRaidSuccessAuxPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): Cannot ad"
                                              }
                                                    "d 2 elements to context";
                                              goto LABEL_2616;
                                            case 892:
                                              if (v14 != 2) {
                                                sub_100079708("ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "turboRaidFailAuxPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): Cannot add 2"
                                              }
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 893:
                                              if (v14 != 2) {
                                                sub_100079708("ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "turboRaidClassifyQualPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): Cannot "
                                              }
                                                    "add 2 elements to context";
                                              goto LABEL_2616;
                                            case 894:
                                              if (v14 != 2) {
                                                sub_100079708("ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "turboRaidClassifyRelPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): Cannot a"
                                              }
                                                    "dd 2 elements to context";
                                              goto LABEL_2616;
                                            case 895:
                                              if (sub_10008B714(a1, "IND_pool_freeMinSilo", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: IND_pool_freeMinSilo(895) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 896:
                                              if (sub_10008B714(a1, "autoSweepBlocks", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: autoSweepBlocks(896) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 897:
                                              if (v14 != 16) {
                                                sub_100079708("ASPFTLParseBufferToCxt: wcWrFragSizes(897): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "wcWrFragSizes_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: wcWrFragSizes(897): Cannot add 16 elements to context";
                                              goto LABEL_2616;
                                            case 898:
                                              if (v14 != 16) {
                                                sub_100079708("ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "indStateAcrossGcDidNoL_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): Cannot add 16 e"
                                                    "lements to context";
                                              goto LABEL_2616;
                                            case 899:
                                              if (v14 != 16) {
                                                sub_100079708("ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "indStateAcrossGcDidL_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): Cannot add 16 ele"
                                                    "ments to context";
                                              goto LABEL_2616;
                                            case 900:
                                              if (sub_10008B714(a1, "turboRaidNoClassifyDueToWasRetire", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToWasRetire(900) canno"
                                              }
                                                    "t add 1 element to context";
                                              goto LABEL_161;
                                            case 901:
                                              if (sub_10008B714(a1, "turboRaidNoClassifyDueToOpenBand", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToOpenBand(901) cannot"
                                              }
                                                    " add 1 element to context";
                                              goto LABEL_161;
                                            case 902:
                                              if (sub_10008B714(a1, "turboRaidNoClassifyDueToQualityBlock", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToQualityBlock(902) ca"
                                              }
                                                    "nnot add 1 element to context";
                                              goto LABEL_161;
                                            case 903:
                                              if (sub_10008B714(a1, "turboRaidGbbOpenBand", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidGbbOpenBand(903) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 904:
                                              if (sub_10008B714(a1, "turboRaidGbbShouldRetireOnRefresh", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidGbbShouldRetireOnRefresh(904) canno"
                                              }
                                                    "t add 1 element to context";
                                              goto LABEL_161;
                                            case 905:
                                              if (v14 != 16) {
                                                sub_100079708("ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "turboRaidRelPerBlock_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): Cannot add 16 ele"
                                                    "ments to context";
                                              goto LABEL_2616;
                                            case 906:
                                              if (v14 != 16) {
                                                sub_100079708("ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "turboRaidRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): C"
                                              }
                                                    "annot add 16 elements to context";
                                              goto LABEL_2616;
                                            default:
                                              if (v12 <= 1039)
                                              {
                                                switch(v12)
                                                {
                                                  case 907:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBlock(907): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidMaxRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBloc"
                                                    }
                                                          "k(907): Cannot add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 908:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBlock(908): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidMinRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBloc"
                                                    }
                                                          "k(908): Cannot add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 909:
                                                  case 910:
                                                  case 911:
                                                  case 912:
                                                  case 913:
                                                  case 914:
                                                  case 915:
                                                  case 916:
                                                  case 917:
                                                  case 924:
                                                  case 925:
                                                  case 926:
                                                  case 927:
                                                  case 928:
                                                  case 929:
                                                  case 936:
                                                  case 941:
                                                  case 945:
                                                  case 946:
                                                  case 947:
                                                  case 949:
                                                  case 950:
                                                  case 952:
                                                  case 954:
                                                  case 955:
                                                  case 956:
                                                  case 957:
                                                  case 958:
                                                  case 959:
                                                  case 960:
                                                  case 963:
                                                  case 964:
                                                  case 965:
                                                  case 966:
                                                  case 968:
                                                  case 969:
                                                  case 970:
                                                    goto LABEL_2478;
                                                  case 918:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidMaxCyclesBetweenRel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 919:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidMinCyclesBetweenRel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 920:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidAuxPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): Cannot add "
                                                    }
                                                          "16 elements to context";
                                                    goto LABEL_2616;
                                                  case 921:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(921): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidAuxBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(9"
                                                    }
                                                          "21): Cannot add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 922:
                                                    if (sub_10008B714(a1, "turboRaidRelLockMark", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidRelLockMark(922) cannot add 1"
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 923:
                                                    if (sub_10008B714(a1, "turboRaidAuxLockMark", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidAuxLockMark(923) cannot add 1"
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 930:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidMaxCyclesBetweenAux_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 931:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidMinCyclesBetweenAux_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 932:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidLastRelPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 933:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidRelQualPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 934:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidLastAuxPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 935:
                                                    if (v14 != 16) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "turboRaidAuxQualPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 937:
                                                    if (sub_10008B714(a1, "turboRaidPEFailAfterRel", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterRel(937) cannot ad"
                                                    }
                                                          "d 1 element to context";
                                                    goto LABEL_161;
                                                  case 938:
                                                    if (sub_10008B714(a1, "turboRaidPEFailAfterAux", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterAux(938) cannot ad"
                                                    }
                                                          "d 1 element to context";
                                                    goto LABEL_161;
                                                  case 939:
                                                    if (sub_10008B714(a1, "dvfmVotesCPU", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: dvfmVotesCPU(939) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 940:
                                                    if (sub_10008B714(a1, "dvfmVotesBandwidth", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: dvfmVotesBandwidth(940) cannot add 1 e"
                                                          "lement to context";
                                                    goto LABEL_161;
                                                  case 942:
                                                    if (sub_10008B714(a1, "maxSLCEndurance", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: maxSLCEndurance(942) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 943:
                                                    if (sub_10008B714(a1, "maxMixedEndurance", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: maxMixedEndurance(943) cannot add 1 el"
                                                          "ement to context";
                                                    goto LABEL_161;
                                                  case 944:
                                                    if (sub_10008B714(a1, "maxNativeEndurance", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: maxNativeEndurance(944) cannot add 1 e"
                                                          "lement to context";
                                                    goto LABEL_161;
                                                  case 948:
                                                    if (v14 != 40) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: assertHistory(948): (#40) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x28) {
                                                      unsigned int v18 = 40;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "assertHistory_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: assertHistory(948): Cannot add 40 elements to context";
                                                    goto LABEL_2616;
                                                  case 951:
                                                    if (sub_10008B714(a1, "asp3Support", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: asp3Support(951) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 953:
                                                    if (sub_10008B714(a1, "numCrossTempRaidUecc", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: numCrossTempRaidUecc(953) cannot add 1"
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 961:
                                                    if (sub_10008B714(a1, "osBuildStr", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: osBuildStr(961) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 962:
                                                    if (sub_10008B714(a1, "raidConfig", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: raidConfig(962) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 967:
                                                    if (v14 != 12) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: indTrimFrags(967): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xC) {
                                                      unsigned int v18 = 12;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "indTrimFrags_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: indTrimFrags(967): Cannot add 12 elements to context";
                                                    goto LABEL_2616;
                                                  case 971:
                                                    if (v14 != 12) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: indUsedFrags(971): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xC) {
                                                      unsigned int v18 = 12;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "indUsedFrags_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: indUsedFrags(971): Cannot add 12 elements to context";
                                                    goto LABEL_2616;
                                                  default:
                                                    switch(v12)
                                                    {
                                                      case 996:
                                                        if (sub_10008B714(a1, "clogFindFail", (uint64_t)v8, 8u, 1u)) {
                                                          goto LABEL_162;
                                                        }
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindFail(996) cannot add 1 element to context";
                                                        goto LABEL_161;
                                                      case 997:
                                                        if (sub_10008B714(a1, "clogFindBlank", (uint64_t)v8, 8u, 1u)) {
                                                          goto LABEL_162;
                                                        }
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindBlank(997) cannot add 1 el"
                                                              "ement to context";
                                                        goto LABEL_161;
                                                      case 998:
                                                        if (sub_10008B714(a1, "clogFindUnc", (uint64_t)v8, 8u, 1u)) {
                                                          goto LABEL_162;
                                                        }
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindUnc(998) cannot add 1 element to context";
                                                        goto LABEL_161;
                                                      case 999:
                                                        if (sub_10008B714(a1, "clogFindUnexpected", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindUnexpected(999) cannot add"
                                                        }
                                                              " 1 element to context";
                                                        goto LABEL_161;
                                                      case 1001:
                                                        if (v14 != 8) {
                                                          sub_100079708("ASPFTLParseBufferToCxt: clogReplayFailReason(1001): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 8) {
                                                          unsigned int v18 = 8;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_10008B714(a1, "clogReplayFailReason_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: clogReplayFailReason(1001): Cannot"
                                                        }
                                                              " add 8 elements to context";
                                                        goto LABEL_2616;
                                                      case 1002:
                                                        if (sub_10008B714(a1, "clogReplayTransientError", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogReplayTransientError(1002) can"
                                                        }
                                                              "not add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1003:
                                                        if (sub_10008B714(a1, "clogReplaySpfError", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogReplaySpfError(1003) cannot ad"
                                                        }
                                                              "d 1 element to context";
                                                        goto LABEL_161;
                                                      case 1015:
                                                        if (v14 != 4) {
                                                          sub_100079708("ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 4) {
                                                          unsigned int v18 = 4;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_10008B714(a1, "eanEarlyBootUeccPage_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): Cannot"
                                                        }
                                                              " add 4 elements to context";
                                                        goto LABEL_2616;
                                                      case 1016:
                                                        if (sub_10008B714(a1, "eanEarlyBootNumUeccPages", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanEarlyBootNumUeccPages(1016) can"
                                                        }
                                                              "not add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1017:
                                                        if (sub_10008B714(a1, "eanEarlyBootUeccMultiplane", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccMultiplane(1017) c"
                                                        }
                                                              "annot add 1 element to context";
                                                        goto LABEL_161;
                                                      default:
                                                        goto LABEL_2478;
                                                    }
                                                }
                                              }
                                              if (v12 > 1137)
                                              {
                                                switch(v12)
                                                {
                                                  case 1147:
                                                    if (v14 != 24) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gc_concurrent_dw_gc12_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): Cannot ad"
                                                    }
                                                          "d 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1148:
                                                    if (v14 != 24) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gc_concurrent_dw_gc1_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): Cannot add"
                                                    }
                                                          " 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1149:
                                                    if (v14 != 24) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gc_concurrent_dw_gc2_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): Cannot add"
                                                    }
                                                          " 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1150:
                                                  case 1151:
                                                  case 1152:
                                                  case 1153:
                                                  case 1154:
                                                  case 1155:
                                                  case 1156:
                                                  case 1159:
                                                  case 1160:
                                                  case 1161:
                                                  case 1162:
                                                  case 1163:
                                                  case 1164:
                                                  case 1165:
                                                  case 1166:
                                                  case 1167:
                                                  case 1170:
                                                  case 1173:
                                                  case 1174:
                                                  case 1175:
                                                  case 1176:
                                                  case 1177:
                                                  case 1178:
                                                    goto LABEL_2478;
                                                  case 1157:
                                                    if (sub_10008B714(a1, "eanMaxForceROTimeMs", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: eanMaxForceROTimeMs(1157) cannot add 1"
                                                          " element to context";
                                                    break;
                                                  case 1158:
                                                    if (sub_10008B714(a1, "eanMaxForceRORecoTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: eanMaxForceRORecoTimeMs(1158) cannot a"
                                                    }
                                                          "dd 1 element to context";
                                                    break;
                                                  case 1168:
                                                    if (v14 != 2) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 2) {
                                                      unsigned int v18 = 2;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "poDetectPERemovalTotalCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): Cann"
                                                    }
                                                          "ot add 2 elements to context";
                                                    goto LABEL_2616;
                                                  case 1169:
                                                    if (v14 != 2) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 2) {
                                                      unsigned int v18 = 2;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "poDetectEmptySpotRemovalTotalCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169"
                                                    }
                                                          "): Cannot add 2 elements to context";
                                                    goto LABEL_2616;
                                                  case 1171:
                                                    if (v14 != 10) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xA) {
                                                      unsigned int v18 = 10;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "poDetectEmptySpotRemovalAge_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): Can"
                                                    }
                                                          "not add 10 elements to context";
                                                    goto LABEL_2616;
                                                  case 1172:
                                                    if (v14 != 3) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 3) {
                                                      unsigned int v18 = 3;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "poDetectGBBedMostSevereCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): Can"
                                                    }
                                                          "not add 3 elements to context";
                                                    goto LABEL_2616;
                                                  case 1179:
                                                    if (v14 != 4) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gc_cur_dw_gc1_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1180:
                                                    if (v14 != 4) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gc_cur_dw_gc2_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1181:
                                                    if (v14 != 4) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gc_cur_dw_gc3_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1182:
                                                    if (v14 != 4) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gc_tot_dw_gc1_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1183:
                                                    if (v14 != 4) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gc_tot_dw_gc2_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1184:
                                                    if (sub_10008B714(a1, "unhappy_state", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: unhappy_state(1184) cannot add 1 element to context";
                                                    break;
                                                  case 1185:
                                                    if (sub_10008B714(a1, "unhappy_level", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: unhappy_level(1185) cannot add 1 element to context";
                                                    break;
                                                  default:
                                                    if (v12 != 1138)
                                                    {
                                                      if (v12 != 1189) {
                                                        goto LABEL_2478;
                                                      }
                                                      if ((sub_10008B714(a1, "lastLbaFormatTime", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                                      {
                                                        int v17 = "ASPFTLParseBufferToCxt: lastLbaFormatTime(1189) cannot add"
                                                              " 1 element to context";
                                                        break;
                                                      }
                                                      goto LABEL_162;
                                                    }
                                                    if (sub_10008B714(a1, "numOfToHappySwitches", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: numOfToHappySwitches(1138) cannot add "
                                                          "1 element to context";
                                                    break;
                                                }
LABEL_161:
                                                sub_100079708(v17, a2, a3, a4, a5, a6, a7, a8, v21);
                                                goto LABEL_162;
                                              }
                                              if (v12 <= 1104)
                                              {
                                                if (v12 <= 1041)
                                                {
                                                  if (v12 == 1040)
                                                  {
                                                    if (v14 != 31) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): (#31) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x1F) {
                                                      unsigned int v18 = 31;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if ((sub_10008B714(a1, "bandsAgeBinsV2_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                    {
                                                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): Cannot add 31 "
                                                            "elements to context";
                                                      goto LABEL_2616;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (v14 != 31) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): (#31) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x1F) {
                                                      unsigned int v18 = 31;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if ((sub_10008B714(a1, "bandsAgeBinsSnapshot_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                    {
                                                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): Cannot a"
                                                            "dd 31 elements to context";
                                                      goto LABEL_2616;
                                                    }
                                                  }
                                                  goto LABEL_110;
                                                }
                                                if (v12 == 1042)
                                                {
                                                  if (v14 != 15) {
                                                    sub_100079708("ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): (#15) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  }
                                                  if (v14 >= 0xF) {
                                                    unsigned int v18 = 15;
                                                  }
                                                  else {
                                                    unsigned int v18 = v14;
                                                  }
                                                  if ((sub_10008B714(a1, "bandsAgeBinsReadSectors_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                  {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): Cannot "
                                                          "add 15 elements to context";
                                                    goto LABEL_2616;
                                                  }
                                                  goto LABEL_110;
                                                }
                                                if (v12 == 1080)
                                                {
                                                  if ((sub_10008B714(a1, "raidForceClogLoad", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                                  {
                                                    int v17 = "ASPFTLParseBufferToCxt: raidForceClogLoad(1080) cannot add 1 e"
                                                          "lement to context";
                                                    goto LABEL_161;
                                                  }
LABEL_162:
                                                  uint64_t v10 = (v10 + 1);
                                                  goto LABEL_163;
                                                }
                                                goto LABEL_2478;
                                              }
                                              if (v12 > 1115)
                                              {
                                                if (v12 == 1116)
                                                {
                                                  if (v14 != 32) {
                                                    sub_100079708("ASPFTLParseBufferToCxt: gcwamp(1116): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  }
                                                  if (v14 >= 0x20) {
                                                    unsigned int v18 = 32;
                                                  }
                                                  else {
                                                    unsigned int v18 = v14;
                                                  }
                                                  if ((sub_10008B714(a1, "gcwamp_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                  {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gcwamp(1116): Cannot add 32 elements to context";
                                                    goto LABEL_2616;
                                                  }
                                                  goto LABEL_110;
                                                }
                                                if (v12 == 1137)
                                                {
                                                  if (sub_10008B714(a1, "numOfToUnhappySwitches", (uint64_t)v8, 8u, 1u)) {
                                                    goto LABEL_162;
                                                  }
                                                  int v17 = "ASPFTLParseBufferToCxt: numOfToUnhappySwitches(1137) cannot add "
                                                        "1 element to context";
                                                  goto LABEL_161;
                                                }
LABEL_2478:
                                                switch(v12)
                                                {
                                                  case 1196:
                                                    if (v14 != 5) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 5) {
                                                      unsigned int v18 = 5;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "poDetectGBBedTotalCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): Cannot a"
                                                    }
                                                          "dd 5 elements to context";
                                                    goto LABEL_2616;
                                                  case 1197:
                                                    if (v14 != 10) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xA) {
                                                      unsigned int v18 = 10;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "poDetectGBBedAge_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): Cannot add 10 "
                                                          "elements to context";
                                                    goto LABEL_2616;
                                                  case 1198:
                                                    if (v14 != 3) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 3) {
                                                      unsigned int v18 = 3;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "poDetectPERemovalMostSevereCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198):"
                                                    }
                                                          " Cannot add 3 elements to context";
                                                    goto LABEL_2616;
                                                  case 1199:
                                                    if (sub_10008B714(a1, "poDetectCurrentSize", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: poDetectCurrentSize(1199) cannot add 1"
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 1200:
                                                  case 1203:
                                                  case 1204:
                                                  case 1205:
                                                  case 1206:
                                                  case 1207:
                                                  case 1208:
                                                  case 1209:
                                                  case 1210:
                                                  case 1212:
                                                  case 1213:
                                                  case 1214:
                                                  case 1219:
                                                  case 1220:
                                                  case 1221:
                                                  case 1222:
                                                  case 1223:
LABEL_2610:
                                                    if (v14 <= 1) {
                                                      snprintf(__str, 0x20uLL, "Stat_%d");
                                                    }
                                                    else {
                                                      snprintf(__str, 0x20uLL, "Stat_%d_");
                                                    }
                                                    if ((sub_10008B714(a1, __str, (uint64_t)v8, 8u, v14) & 1) == 0)
                                                    {
                                                      sub_100079708("ASPFTLParseBufferToCxt %d: Cannot add %d elements to context", a2, a3, a4, a5, a6, a7, a8, v12);
                                                      return v10;
                                                    }
                                                    uint64_t v10 = (v10 + v14);
                                                    break;
                                                  case 1201:
                                                    if (v14 != 4) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gcVerticalSuccssfulAlignments_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): C"
                                                    }
                                                          "annot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1202:
                                                    if (v14 != 4) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs(1202): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "gcVerticalNoAlignmentDueToMissingSegs_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs("
                                                    }
                                                          "1202): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1211:
                                                    if (v14 != 24) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "forcedAllocationSmallEraseQ_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): Can"
                                                    }
                                                          "not add 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1215:
                                                    if (v14 != 5) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: hostWritesPerThrottleZone(1215): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 5) {
                                                      unsigned int v18 = 5;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "hostWritesPerThrottleZone_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: hostWritesPerThrottleZone(1215): Canno"
                                                    }
                                                          "t add 5 elements to context";
                                                    goto LABEL_2616;
                                                  case 1216:
                                                    if (v14 != 24) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "tlcWLPerDipAvgPEC_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): Cannot add 24"
                                                          " elements to context";
                                                    goto LABEL_2616;
                                                  case 1217:
                                                    if (v14 != 24) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "tlcWLPerDipMaxPEC_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): Cannot add 24"
                                                          " elements to context";
                                                    goto LABEL_2616;
                                                  case 1218:
                                                    if (v14 != 24) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "tlcWLPerDipMinPEC_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): Cannot add 24"
                                                          " elements to context";
                                                    goto LABEL_2616;
                                                  case 1224:
                                                    if (v14 != 20) {
                                                      sub_100079708("ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): (#20) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x14) {
                                                      unsigned int v18 = 20;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_10008B714(a1, "apfsValidLbaOvershoot_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): Cannot ad"
                                                    }
                                                          "d 20 elements to context";
                                                    goto LABEL_2616;
                                                  default:
                                                    switch(v12)
                                                    {
                                                      case 1232:
                                                        if (sub_10008B714(a1, "eanFastSize", (uint64_t)v8, 8u, 1u)) {
                                                          goto LABEL_162;
                                                        }
                                                        int v17 = "ASPFTLParseBufferToCxt: eanFastSize(1232) cannot add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1233:
                                                        if (sub_10008B714(a1, "eanNumSlcEvictions", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanNumSlcEvictions(1233) cannot ad"
                                                        }
                                                              "d 1 element to context";
                                                        goto LABEL_161;
                                                      case 1234:
                                                        if (sub_10008B714(a1, "eanNumForcedCompress", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanNumForcedCompress(1234) cannot "
                                                        }
                                                              "add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1235:
                                                      case 1236:
                                                      case 1237:
                                                      case 1238:
                                                      case 1239:
                                                      case 1240:
                                                      case 1242:
                                                      case 1243:
                                                      case 1245:
                                                        goto LABEL_2610;
                                                      case 1241:
                                                        if (v14 != 10) {
                                                          sub_100079708("ASPFTLParseBufferToCxt: s2rTimeHisto(1241): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 0xA) {
                                                          unsigned int v18 = 10;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_10008B714(a1, "s2rTimeHisto_", (uint64_t)v8, 8u, v18)) {
                                                          goto LABEL_110;
                                                        }
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: s2rTimeHisto(1241): Cannot add 10 "
                                                              "elements to context";
                                                        goto LABEL_2616;
                                                      case 1244:
                                                        if (sub_10008B714(a1, "calendarTimeWentBackward", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: calendarTimeWentBackward(1244) can"
                                                        }
                                                              "not add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1246:
                                                        if (v14 != 8) {
                                                          sub_100079708("ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 8) {
                                                          unsigned int v18 = 8;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_10008B714(a1, "bandsUeccCrossTempHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): Can"
                                                        }
                                                              "not add 8 elements to context";
                                                        goto LABEL_2616;
                                                      default:
                                                        if (v12 != 1190) {
                                                          goto LABEL_2610;
                                                        }
                                                        if (v14 != 12) {
                                                          sub_100079708("ASPFTLParseBufferToCxt: powerDownTime(1190): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 0xC) {
                                                          unsigned int v18 = 12;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_10008B714(a1, "powerDownTime_", (uint64_t)v8, 8u, v18)) {
                                                          goto LABEL_110;
                                                        }
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: powerDownTime(1190): Cannot add 12"
                                                              " elements to context";
                                                        break;
                                                    }
                                                    goto LABEL_2616;
                                                }
LABEL_163:
                                                v8 += v14;
                                                v11 -= v14;
                                                goto LABEL_2;
                                              }
                                              if (v12 == 1105)
                                              {
                                                if (v14 != 14) {
                                                  sub_100079708("ASPFTLParseBufferToCxt: hostReadSequential(1105): (#14) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                }
                                                if (v14 >= 0xE) {
                                                  unsigned int v18 = 14;
                                                }
                                                else {
                                                  unsigned int v18 = v14;
                                                }
                                                if ((sub_10008B714(a1, "hostReadSequential_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                {
                                                  unsigned int v19 = "ASPFTLParseBufferToCxt: hostReadSequential(1105): Cannot add 14 "
                                                        "elements to context";
                                                  goto LABEL_2616;
                                                }
                                                goto LABEL_110;
                                              }
                                              if (v12 != 1106) {
                                                goto LABEL_2478;
                                              }
                                              if (v14 != 14) {
                                                sub_100079708("ASPFTLParseBufferToCxt: GCReadSequential(1106): (#14) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xE) {
                                                unsigned int v18 = 14;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_10008B714(a1, "GCReadSequential_", (uint64_t)v8, 8u, v18))
                                              {
LABEL_110:
                                                uint64_t v10 = v18 + v10;
                                                goto LABEL_163;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: GCReadSequential(1106): Cannot add 14 elements to context";
LABEL_2616:
                                              sub_100079708(v19, a2, a3, a4, a5, a6, a7, a8, v21);
                                              return v10;
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
  }
}

uint64_t sub_10008B714(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 1;
  if (a4 && a5)
  {
    if (a5 == 1)
    {
      if (a4 <= 8)
      {
        __memmove_chk();
        return sub_1000922B8(a1, "", a2, 0);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      int v10 = 0;
      int v11 = 0;
      do
      {
        if (a4 <= 8)
        {
          __memmove_chk();
          snprintf(__str, 0x64uLL, "%d", v10);
          __str[100] = 0;
          uint64_t v5 = sub_1000922B8(a1, a2, __str, 0) & v5;
        }
        else
        {
          uint64_t v5 = 0;
        }
        int v10 = (unsigned __int16)++v11;
      }
      while ((unsigned __int16)v11 < a5);
    }
  }
  return v5;
}

uint64_t sub_10008B878(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  uint64_t v5 = 0;
  unsigned int v6 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  long long v22 = 0u;
LABEL_2:
  int v7 = -v6;
  while (v7)
  {
    unint64_t v9 = *a2++;
    unsigned int v8 = v9;
    unint64_t v10 = HIDWORD(v9);
    ++v7;
    if (HIDWORD(v9))
    {
      if (v8 != 0xFFFF && v8 <= 0x30000000 && -v7 >= v10)
      {
        if (v10 <= 1) {
          snprintf(__str, 0x20uLL, "Stat_%d");
        }
        else {
          snprintf(__str, 0x20uLL, "Stat_%d_");
        }
        if (sub_10008B714(a1, __str, (uint64_t)a2, 8u, v10))
        {
          uint64_t v5 = (v5 + v10);
          a2 += v10;
          unsigned int v6 = -v7 - v10;
          goto LABEL_2;
        }
        sub_100079708("ASPFTLParseBufferToCxt %d: Cannot add %d elements to context", v13, v14, v15, v16, v17, v18, v19, v8);
      }
      return v5;
    }
  }
  return v5;
}

uint64_t sub_10008B9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  unint64_t v9 = "ASPMSPParseBufferToCxt: Passed in invalid buffer or empty buffer";
  if (!a2) {
    goto LABEL_1980;
  }
  unsigned int v10 = a3;
  if (!a3) {
    goto LABEL_1980;
  }
  uint64_t v11 = a2;
  uint64_t v8 = 0;
  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_5(4256): Error adding 10 elements to context";
  while (1)
  {
    do
    {
      if (!v10) {
        return v8;
      }
      uint64_t v13 = (unsigned __int16 *)v11;
      uint64_t v14 = *(unsigned __int16 *)(v11 + 2);
      v11 += 4;
      v10 -= 4;
    }
    while (!v14);
    int v15 = *v13;
    if (v15 != 12286) {
      break;
    }
LABEL_461:
    v11 += v14;
    v10 -= v14;
  }
  if (v15 == 12287 || v10 < v14) {
    return v8;
  }
  switch(v15)
  {
    case 4096:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: passWithTmodeHard(4096): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "passWithTmodeHard", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard(4096): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4097:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "passWithTmodeFS1_2b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4098:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "passWithTmodeFS1_4b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4099:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "passWithTmodeHard_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4100:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "passWithTmodeFS1_2b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4101:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "passWithTmodeFS1_4b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4102:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "numOfCwFailedInTmodeFS2_EOL", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4103:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "numOfCwFailedInTmodeFS2_DSP_EOL", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4104:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithHardAfterAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4105:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "firstReadWasHardWithDefaultBDBFastRead", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4106:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readalgoPassWithDS1", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4107:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readalgoPassWithDYCE1", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4108:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readalgoPassWithDS2", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4109:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readalgoPassWithDYCE2", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4110:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "firstReadWasHardWithAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4111:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "bdbDynamicMovedToEOL_LSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4112:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "bdbDynamicMovedToEOL_MSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4113:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "bdbDynamicMovedToEOL_USB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4114:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "bdbDynamicMovedToSOL_LSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4115:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "bdbDynamicMovedToSOL_MSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4116:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "bdbDynamicMovedToSOL_USB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4117:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "firstReadWasHardWithDefaultBDB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4118:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughSyndSumAcquisition", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4119:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4120:
      if (v14 != 44) {
        sub_100079708("ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x30) {
        unsigned int v17 = 11;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "FS2decodedBitFlips", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): Error adding 11 elements to context";
      goto LABEL_1980;
    case 4121:
      if (v14 != 16) {
        sub_100079708("ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): cfg 4 elements; (4*4) cfg by"
      }
          "tes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x14) {
        unsigned int v17 = 4;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "slipTrackingAfterFs1ForceFailChangedVthInTicksHist", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): Error adding 4 elements to context";
      goto LABEL_1980;
    case 4122:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithFS2_4b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4123:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithHardAfterSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4124:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithFS12BitAfterSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4125:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithFS14BitAfterSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4126:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithFS3_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4127:
      if (v14 != 40) {
        sub_100079708("ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x2C) {
        unsigned int v17 = 10;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "deepSoft1Decoded", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): Error adding 10 elements to context";
      goto LABEL_1980;
    case 4128:
      if (v14 != 40) {
        sub_100079708("ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x2C) {
        unsigned int v17 = 10;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "deepSoft2Decoded", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): Error adding 10 elements to context";
      goto LABEL_1980;
    case 4129:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughFS2_2b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4130:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughFS2_4b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4131:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4132:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughFS3_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4133:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readalgoPassWithEXH", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4134:
      if (v14 != 44) {
        sub_100079708("ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x30) {
        unsigned int v17 = 11;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "FS1decodedbitflips", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): Error adding 11 elements to context";
      goto LABEL_1980;
    case 4135:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readZeroPage(4135): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readZeroPage", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readZeroPage(4135): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4136:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readErasedPage(4136): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readErasedPage", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readErasedPage(4136): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4137:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readFail(4137): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readFail", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readFail(4137): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4138:
      if (v14 != 20) {
        sub_100079708("ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x18) {
        unsigned int v17 = 5;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "numOfSensesWereSentDuringSyndSumAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): Error adding 5 elements to context";
      goto LABEL_1980;
    case 4139:
      if (v14 != 12) {
        sub_100079708("ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): cfg 3 elements; (3*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x10) {
        unsigned int v17 = 3;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "numOfSensesWereSentDuringMiniAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): Error adding 3 elements to context";
      goto LABEL_1980;
    case 4140:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "bdbDefaultMoveFastToNormal", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4141:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "bdbDefaultMoveNormalToFast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4142:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readalgoPassWithEXH_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4143:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readalgoPassWithDS1_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4144:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readalgoPassWithDYCE1_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4145:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "firstReadWasFS2EOL_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4146:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "firstReadWasFS2EOL", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4147:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughFS2_4b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4148:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithFS2_4b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4149:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughFS2_2b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4150:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughFS3", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4151:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughDS1", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4152:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughDS2", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4153:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithHardAfterSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4154:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithFS12BitAfterSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4155:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithFS14BitAfterSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4156:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithFS3", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4157:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): cfg 1 elements; (1*4) cfg bytes != "
      }
          "(%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassedThroughSyndSumAcquisition_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4158:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_10008B714(a1, "readAlgoPassWithFS12BitAfterAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4159:
      if (v14 != 4) {
        sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (!sub_10008B714(a1, "readAlgoPassWithFS14BitAfterAcq", v11, 4u, v17))
      {
        unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): Error adding 1 elements to context";
        goto LABEL_1980;
      }
LABEL_460:
      uint64_t v8 = v8 + v17;
      goto LABEL_461;
    default:
      switch(v15)
      {
        case 4160:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readAlgoPassedThroughDS1_DSP", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4161:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: numOfSlipTracking(4161): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "numOfSlipTracking", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSlipTracking(4161): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4162:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "bdbDynamicMovedToEOL_QSB", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4163:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "bdbDynamicMovedToSOL_QSB", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4196:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfFails100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4197:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfFails101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4198:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage100(4198): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage100(4198): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4199:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage101(4199): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage101(4199): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4200:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: initialReadStage100(4200): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "initialReadStage100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage100(4200): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4201:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage102(4201): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage102(4201): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4202:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: initialReadStage101(4202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "initialReadStage101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage101(4202): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4203:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: nandStageOfLife100(4203): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "nandStageOfLife100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife100(4203): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4204:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: nandStageOfLife101(4204): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "nandStageOfLife101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife101(4204): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4205:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfFails102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4206:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: initialReadStage102(4206): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "initialReadStage102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage102(4206): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4207:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage103(4207): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage103(4207): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4208:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage104(4208): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage104(4208): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4209:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage105(4209): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage105", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage105(4209): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4210:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage106(4210): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage106", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage106(4210): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4211:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4212:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4213:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: initialReadStage103(4213): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "initialReadStage103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage103(4213): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4214:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: initialReadStage104(4214): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "initialReadStage104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage104(4214): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4215:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage107(4215): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage107", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage107(4215): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4216:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage108(4216): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage108", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage108(4216): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4217:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: nandStageOfLife102(4217): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "nandStageOfLife102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife102(4217): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4218:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: nandStageOfLife103(4218): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "nandStageOfLife103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife103(4218): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4219:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: nandStageOfLife104(4219): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "nandStageOfLife104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife104(4219): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4220:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4221:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4222:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4223:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter105", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4224:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter106", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4225:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter107", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4226:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter108", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4227:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter109", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4228:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter110", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4229:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter111", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4230:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter112", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4231:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter113", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4232:
          if (v14 != 256) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x104) {
            unsigned int v17 = 64;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfFails108", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): Error adding 64 elements to context";
          goto LABEL_1980;
        case 4233:
          if (v14 != 256) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x104) {
            unsigned int v17 = 64;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfFails103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): Error adding 64 elements to context";
          goto LABEL_1980;
        case 4234:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfFails104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4235:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfFails105", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4236:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfFails106", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4237:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfFails107", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4238:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage109(4238): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage109", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage109(4238): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4239:
          if (v14 != 16) {
            sub_100079708("ASPMSPParseBufferToCxt: readStage110(4239): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStage110", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage110(4239): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4240:
          if (v14 != 80) {
            sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x54) {
            unsigned int v17 = 20;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "readStageNumOfErrorsBin100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): Error adding 20 elements to context";
          goto LABEL_1980;
        case 4241:
          if (v14 != 80) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x54) {
            unsigned int v17 = 20;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter114", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): Error adding 20 elements to context";
          goto LABEL_1980;
        case 4242:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter115", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4243:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter116", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4244:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter117", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4245:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter118", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4246:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter119", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4247:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter120", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4248:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "dspExceptionParameter121", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4249:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: cbdr_ref_1(4249): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "cbdr_ref_1", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_ref_1(4249): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4250:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: cbdr_ref_2(4250): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "cbdr_ref_2", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_ref_2(4250): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4251:
          if (v14 != 4) {
            sub_100079708("ASPMSPParseBufferToCxt: cbdr_outlier(4251): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "cbdr_outlier", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_outlier(4251): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4252:
          if (v14 != 40) {
            sub_100079708("ASPMSPParseBufferToCxt: cbdr_step_1(4252): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "cbdr_step_1", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_1(4252): Error adding 10 elements to context";
          goto LABEL_1980;
        case 4253:
          if (v14 != 40) {
            sub_100079708("ASPMSPParseBufferToCxt: cbdr_step_2(4253): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "cbdr_step_2", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_2(4253): Error adding 10 elements to context";
          goto LABEL_1980;
        case 4254:
          if (v14 != 40) {
            sub_100079708("ASPMSPParseBufferToCxt: cbdr_step_3(4254): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "cbdr_step_3", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_3(4254): Error adding 10 elements to context";
          goto LABEL_1980;
        case 4255:
          if (v14 != 40) {
            sub_100079708("ASPMSPParseBufferToCxt: cbdr_step_4(4255): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_10008B714(a1, "cbdr_step_4", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_4(4255): Error adding 10 elements to context";
          goto LABEL_1980;
        default:
          switch(v15)
          {
            case 12288:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStageNumOfFails200", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12289:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage200(12289): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage200", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage200(12289): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12290:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage201(12290): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage201", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage201(12290): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12291:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStageNumOfFails201", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12292:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage202(12292): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage202", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage202(12292): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12293:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage203(12293): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage203", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage203(12293): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12294:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStageNumOfFails202", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12295:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStageNumOfFails203", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12296:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage204(12296): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage204", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage204(12296): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12297:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage205(12297): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage205", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage205(12297): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12298:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage206(12298): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage206", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage206(12298): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12299:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage207(12299): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage207", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage207(12299): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12300:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage208(12300): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage208", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage208(12300): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12301:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage209(12301): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage209", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage209(12301): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12302:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage200(12302): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage200", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage200(12302): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12303:
              if (v14 != 32) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage201(12303): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage201", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage201(12303): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12304:
              if (v14 != 32) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage202(12304): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage202", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage202(12304): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12305:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage210(12305): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage210", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage210(12305): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12306:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage211(12306): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage211", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage211(12306): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12307:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage203(12307): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage203", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage203(12307): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12308:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage204(12308): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage204", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage204(12308): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12309:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage205(12309): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage205", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage205(12309): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12310:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage206(12310): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage206", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage206(12310): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12311:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage207(12311): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage207", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage207(12311): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12312:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage208(12312): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage208", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage208(12312): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12313:
              if (v14 != 32) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage209(12313): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage209", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage209(12313): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12314:
              if (v14 != 32) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage210(12314): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage210", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage210(12314): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12315:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage212(12315): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage212", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage212(12315): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12316:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: initialReadStage213(12316): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "initialReadStage213", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage213(12316): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12317:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage211(12317): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage211", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage211(12317): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12318:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage212(12318): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage212", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage212(12318): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12319:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage213(12319): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage213", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage213(12319): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12320:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage214(12320): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage214", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage214(12320): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12321:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: readStage215(12321): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "readStage215", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage215(12321): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12322:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "dspExceptionParameter142", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12323:
              if (v14 != 8) {
                sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_10008B714(a1, "dspExceptionParameter143", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): Error adding 1 elements to context";
              goto LABEL_1980;
            default:
              switch(v15)
              {
                case 4256:
                  if (v14 != 40) {
                    sub_100079708("ASPMSPParseBufferToCxt: cbdr_step_5(4256): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (!sub_10008B714(a1, "cbdr_step_5", v11, 4u, v18)) {
                    goto LABEL_1980;
                  }
                  goto LABEL_1372;
                case 4257:
                  if (v14 != 40) {
                    sub_100079708("ASPMSPParseBufferToCxt: cbdr_step_6(4257): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "cbdr_step_6", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_6(4257): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4258:
                  if (v14 != 40) {
                    sub_100079708("ASPMSPParseBufferToCxt: cbdr_step_7(4258): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "cbdr_step_7", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_7(4258): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4259:
                  if (v14 != 80) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x54) {
                    unsigned int v18 = 20;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter122", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): Error adding 20 elements to context";
                  goto LABEL_1980;
                case 4260:
                  if (v14 != 32) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x24) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter123", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): Error adding 8 elements to context";
                  goto LABEL_1980;
                case 4261:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter124", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4262:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter125", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4263:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter126", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4264:
                  if (v14 != 16) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter127", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4265:
                  if (v14 != 16) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter128", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4266:
                  if (v14 != 16) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter129", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4267:
                  if (v14 != 16) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter130", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4268:
                  if (v14 != 16) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter131", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4269:
                  if (v14 != 40) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter132", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4270:
                  if (v14 != 40) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter133", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4271:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter134", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4272:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter135", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4273:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter136", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4274:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter137", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4275:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter138", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4276:
                  if (v14 != 16) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter139", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4277:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter140", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4278:
                  if (v14 != 4) {
                    sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_10008B714(a1, "dspExceptionParameter141", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): Error adding 1 elements to context";
                  goto LABEL_1980;
                default:
                  switch(v15)
                  {
                    case 4164:
                      if (v14 != 4) {
                        sub_100079708("ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): cfg 1 elements; (1*4) cfg byte"
                      }
                          "s != (%d) buffer bytes",
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 8) {
                        unsigned int v18 = 1;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_10008B714(a1, "syndSumAcqConvergedToStaticWalls", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): Error adding 1 elements to context";
                      goto LABEL_1980;
                    case 4165:
                      if (v14 != 60) {
                        sub_100079708("ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x40) {
                        unsigned int v18 = 15;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_10008B714(a1, "DYCE1_Decoded_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): Error adding 15 elements to context";
                      goto LABEL_1980;
                    case 4166:
                      if (v14 != 80) {
                        sub_100079708("ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x54) {
                        unsigned int v18 = 20;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_10008B714(a1, "DYCE1_Target_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): Error adding 20 elements to context";
                      goto LABEL_1980;
                    case 4167:
                      if (v14 != 60) {
                        sub_100079708("ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x40) {
                        unsigned int v18 = 15;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_10008B714(a1, "DYCE2_Decoded_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): Error adding 15 elements to context";
                      goto LABEL_1980;
                    case 4168:
                      if (v14 != 80) {
                        sub_100079708("ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x54) {
                        unsigned int v18 = 20;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_10008B714(a1, "DYCE2_Target_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): Error adding 20 elements to context";
                      goto LABEL_1980;
                    default:
                      if (v15 <= 12323)
                      {
                        switch(v15)
                        {
                          case 8193:
                            if (v14 != 20) {
                              sub_100079708("ASPMSPParseBufferToCxt: avg_rd_window_size(8193): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "avg_rd_window_size", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: avg_rd_window_size(8193): Error adding 5 elements to context";
                            break;
                          case 8194:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: num_zq_failures(8194): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "num_zq_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_zq_failures(8194): Error adding 1 elements to context";
                            break;
                          case 8195:
                            if (v14 != 64) {
                              sub_100079708("ASPMSPParseBufferToCxt: lower_die_temperature(8195): cfg 16 elements; (16*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "lower_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8195): Error adding 16 elements to context";
                            break;
                          case 8196:
                            if (v14 != 64) {
                              sub_100079708("ASPMSPParseBufferToCxt: higher_die_temperature(8196): cfg 16 elements; (16*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "higher_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8196): Error adding 16 elements to context";
                            break;
                          case 8197:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: number_of_sram_flips(8197): cfg 1 elements; (1*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "number_of_sram_flips", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_sram_flips(8197): Error adding 1 elements to context";
                            break;
                          case 8198:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: number_of_reset_failures(8198): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "number_of_reset_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_reset_failures(8198): Error adding 1 elements to context";
                            break;
                          case 8199:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: device_config(8199): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "device_config", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: device_config(8199): Error adding 1 elements to context";
                            break;
                          case 8200:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: number_of_throttling_events(8200): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "number_of_throttling_events", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_throttling_events(8200): Error adding 1 elements to context";
                            break;
                          case 8201:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: link_speed_recoveries(8201): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "link_speed_recoveries", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: link_speed_recoveries(8201): Error adding 1 elements to context";
                            break;
                          case 8202:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: fw_updates(8202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "fw_updates", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: fw_updates(8202): Error adding 1 elements to context";
                            break;
                          case 8203:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "maintenance_backup_to_main", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): Error adding 1 elements to context";
                            break;
                          case 8204:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "maintenance_main_to_backup", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): Error adding 1 elements to context";
                            break;
                          case 8205:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): cfg 1 elements; (1*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "boot_block_erase_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): Error adding 1 elements to context";
                            break;
                          case 8206:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: boot_block_program_failures(8206): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "boot_block_program_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_program_failures(8206): Error adding 1 elements to context";
                            break;
                          case 8207:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): cfg 1 elements; (1*4) cfg"
                            }
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "boot_block_read_verify_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): Error adding 1 elements to context";
                            break;
                          case 8208:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: boot_block_read_failures(8208): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "boot_block_read_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_failures(8208): Error adding 1 elements to context";
                            break;
                          case 8209:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: boot_block_refresh(8209): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "boot_block_refresh", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_refresh(8209): Error adding 1 elements to context";
                            break;
                          case 8210:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "boot_block_convert_to_main", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): Error adding 1 elements to context";
                            break;
                          case 8211:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "boot_block_read_source_changed", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): Error adding 1 elements to context";
                            break;
                          case 8212:
                            if (v14 != 16) {
                              sub_100079708("ASPMSPParseBufferToCxt: open_blocks_hist(8212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x14) {
                              unsigned int v18 = 4;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "open_blocks_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8212): Error adding 4 elements to context";
                            break;
                          case 8213:
                            if (v14 != 24) {
                              sub_100079708("ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): cfg 6 elements; (6*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x1C) {
                              unsigned int v18 = 6;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "random_read_hit_ratio_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): Error adding 6 elements to context";
                            break;
                          case 8214:
                            if (v14 != 20) {
                              sub_100079708("ASPMSPParseBufferToCxt: active_time_hist(8214): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "active_time_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_hist(8214): Error adding 5 elements to context";
                            break;
                          case 8215:
                            if (v14 != 8) {
                              sub_100079708("ASPMSPParseBufferToCxt: rd_retraining_failures(8215): cfg 2 elements; (2*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "rd_retraining_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures(8215): Error adding 2 elements to context";
                            break;
                          case 8216:
                            if (v14 != 8) {
                              sub_100079708("ASPMSPParseBufferToCxt: wr_retraining_failures(8216): cfg 2 elements; (2*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "wr_retraining_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: wr_retraining_failures(8216): Error adding 2 elements to context";
                            break;
                          case 8217:
                            if (v14 != 20) {
                              sub_100079708("ASPMSPParseBufferToCxt: auto_skip(8217): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "auto_skip", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: auto_skip(8217): Error adding 5 elements to context";
                            break;
                          case 8218:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "number_of_dcc_pass_after_retry", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): Error adding 1 elements to context";
                            break;
                          case 8219:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): cfg 1 elements; (1*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "number_of_dcc_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): Error adding 1 elements to context";
                            break;
                          case 8220:
                            if (v14 != 28) {
                              sub_100079708("ASPMSPParseBufferToCxt: open_blocks_hist(8220): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "open_blocks_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8220): Error adding 7 elements to context";
                            break;
                          case 8221:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): cfg 1 elements; (1*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "max_size_open_blocks_list", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): Error adding 1 elements to context";
                            break;
                          case 8222:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): cfg 1 elements; (1*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "gps_max_num_of_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): Error adding 1 elements to context";
                            break;
                          case 8223:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): cfg 1 elements; (1*4) cf"
                            }
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "gps_num_of_failures_max_overflow", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): Error adding 1 elements to context";
                            break;
                          case 8224:
                            if (v14 != 32) {
                              sub_100079708("ASPMSPParseBufferToCxt: active_time_hist(8224): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x24) {
                              unsigned int v18 = 8;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "active_time_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_hist(8224): Error adding 8 elements to context";
                            break;
                          case 8225:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): cfg 1 elements; (1*4)"
                            }
                                " cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "num_auto_program_cache_terminations", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): Error adding 1 elements to context";
                            break;
                          case 8226:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): cfg 1 elements; (1"
                            }
                                "*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "number_of_read_cache_auto_terminations", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): Error adding 1 el"
                                 "ements to context";
                            break;
                          case 8227:
                            if (v14 != 28) {
                              sub_100079708("ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): cfg 7 elements; (7*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "external_etags_usage_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): Error adding 7 elements to context";
                            break;
                          case 8228:
                            if (v14 != 16) {
                              sub_100079708("ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): cfg 4 elements; (4*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x14) {
                              unsigned int v18 = 4;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "internal_etags_usage_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): Error adding 4 elements to context";
                            break;
                          case 8229:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: max_heap_usage(8229): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "max_heap_usage", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_heap_usage(8229): Error adding 1 elements to context";
                            break;
                          case 8230:
                            if (v14 != 24) {
                              sub_100079708("ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): cfg 6 elements; (6*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x1C) {
                              unsigned int v18 = 6;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "rom_num_hard_resets", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): Error adding 6 elements to context";
                            break;
                          case 8231:
                            if (v14 != 64) {
                              sub_100079708("ASPMSPParseBufferToCxt: lower_die_temperature(8231): cfg 16 elements; (16*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "lower_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8231): Error adding 16 elements to context";
                            break;
                          case 8232:
                            if (v14 != 64) {
                              sub_100079708("ASPMSPParseBufferToCxt: higher_die_temperature(8232): cfg 16 elements; (16*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "higher_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8232): Error adding 16 elements to context";
                            break;
                          case 8233:
                            if (v14 != 24) {
                              sub_100079708("ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): cfg 6 elements; (6*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x1C) {
                              unsigned int v18 = 6;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "random_read_hit_ratio_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): Error adding 6 elements to context";
                            break;
                          case 8234:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "msp_number_sram_flips", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): Error adding 1 elements to context";
                            break;
                          case 8235:
                            if (v14 != 28) {
                              sub_100079708("ASPMSPParseBufferToCxt: boot_time_normal_power(8235): cfg 7 elements; (7*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "boot_time_normal_power", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_time_normal_power(8235): Error adding 7 elements to context";
                            break;
                          case 8236:
                            if (v14 != 28) {
                              sub_100079708("ASPMSPParseBufferToCxt: boot_time_low_power(8236): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "boot_time_low_power", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_time_low_power(8236): Error adding 7 elements to context";
                            break;
                          case 8237:
                            if (v14 != 40) {
                              sub_100079708("ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): cfg 10 elements; (10*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x2C) {
                              unsigned int v18 = 10;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "active_time_bw_pg_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): Error adding 10 elements to context";
                            break;
                          case 8238:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "active_time_bw_pg_min", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): Error adding 1 elements to context";
                            break;
                          case 8239:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "active_time_bw_pg_max", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): Error adding 1 elements to context";
                            break;
                          case 8240:
                            if (v14 != 20) {
                              sub_100079708("ASPMSPParseBufferToCxt: mdll_relative_offset(8240): cfg 5 elements; (5*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "mdll_relative_offset", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: mdll_relative_offset(8240): Error adding 5 elements to context";
                            break;
                          case 8241:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: num_pg_regrets(8241): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "num_pg_regrets", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_pg_regrets(8241): Error adding 1 elements to context";
                            break;
                          case 8242:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "spi_image_overall_duration_acc", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): Error adding 1 elements to context";
                            break;
                          case 8243:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): cfg 1 elements; (1*4) cfg"
                            }
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "spi_image_cw_fetch_duration_acc", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): Error adding 1 elements to context";
                            break;
                          case 8244:
                            if (v14 != 20) {
                              sub_100079708("ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): cfg 5 elements; (5*4) cf"
                            }
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "spi_image_cw_fetch_duration_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): Error adding 5 elements to context";
                            break;
                          default:
                            switch(v15)
                            {
                              case 4279:
                                if (v14 != 16) {
                                  sub_100079708("ASPMSPParseBufferToCxt: fs1_4b_fail(4279): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x14) {
                                  unsigned int v18 = 4;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_10008B714(a1, "fs1_4b_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fs1_4b_fail(4279): Error adding 4 elements to context";
                                break;
                              case 4280:
                                if (v14 != 16) {
                                  sub_100079708("ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): cfg 4 elements; (4*4) cfg bytes != ("
                                }
                                    "%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x14) {
                                  unsigned int v18 = 4;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_10008B714(a1, "fs1_4b_fast_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): Error adding 4 elements to context";
                                break;
                              case 4281:
                                if (v14 != 40) {
                                  sub_100079708("ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): cfg 10 elements; (10*4) cfg by"
                                }
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_10008B714(a1, "dyce_decoded_bit_flips_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): Error adding 10 elements to context";
                                break;
                              case 4282:
                                if (v14 != 60) {
                                  sub_100079708("ASPMSPParseBufferToCxt: slip_bch(4282): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x40) {
                                  unsigned int v18 = 15;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_10008B714(a1, "slip_bch_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: slip_bch(4282): Error adding 15 elements to context";
                                break;
                              case 4283:
                                if (v14 != 40) {
                                  sub_100079708("ASPMSPParseBufferToCxt: read_fail(4283): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_10008B714(a1, "read_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: read_fail(4283): Error adding 10 elements to context";
                                break;
                              case 4284:
                                if (v14 != 40) {
                                  sub_100079708("ASPMSPParseBufferToCxt: tr_read_fail(4284): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_10008B714(a1, "tr_read_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_read_fail(4284): Error adding 10 elements to context";
                                break;
                              case 4285:
                                if (v14 != 40) {
                                  sub_100079708("ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): cfg 10 elements; (10*4) cfg bytes "
                                }
                                    "!= (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_10008B714(a1, "tr_aux_bfs_percent_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): Error adding 10 elements to context";
                                break;
                              case 4286:
                                if (v14 != 20) {
                                  sub_100079708("ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): cfg 5 elements; (5*4) cfg by"
                                }
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x18) {
                                  unsigned int v18 = 5;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_10008B714(a1, "tr_reconstruct_pass_step_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): Error adding 5 elements to context";
                                break;
                              case 4287:
                                if (v14 != 4) {
                                  sub_100079708("ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): cfg 1 elements; (1*4) cfg bytes !="
                                }
                                    " (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 8) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_10008B714(a1, "tr_reconstruct_num", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): Error adding 1 elements to context";
                                break;
                              default:
                                goto LABEL_1403;
                            }
                            goto LABEL_1980;
                        }
                        goto LABEL_1980;
                      }
                      if (v15 == 12326)
                      {
                        if (v14 != 8) {
                          sub_100079708("ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): cfg 1 elements; (1*8) cfg bytes !"
                        }
                            "= (%d) buffer bytes",
                            a2,
                            a3,
                            a4,
                            a5,
                            a6,
                            a7,
                            a8,
                            v14);
                        if (v14 >= 0x10) {
                          unsigned int v18 = 1;
                        }
                        else {
                          unsigned int v18 = v14 >> 3;
                        }
                        if (!sub_10008B714(a1, "initialReadStageParameter2", v11, 8u, v18))
                        {
                          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): Error adding 1 elements to context";
                          goto LABEL_1980;
                        }
                        goto LABEL_1372;
                      }
                      if (v15 == 12325)
                      {
                        if (v14 != 8) {
                          sub_100079708("ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): cfg 1 elements; (1*8) cfg bytes !"
                        }
                            "= (%d) buffer bytes",
                            a2,
                            a3,
                            a4,
                            a5,
                            a6,
                            a7,
                            a8,
                            v14);
                        if (v14 >= 0x10) {
                          unsigned int v18 = 1;
                        }
                        else {
                          unsigned int v18 = v14 >> 3;
                        }
                        if (!sub_10008B714(a1, "initialReadStageParameter1", v11, 8u, v18))
                        {
                          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): Error adding 1 elements to context";
                          goto LABEL_1980;
                        }
                        goto LABEL_1372;
                      }
                      if (v15 != 12324)
                      {
LABEL_1403:
                        switch(v15)
                        {
                          case 8245:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: spi_num_uses(8245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "spi_num_uses", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_num_uses(8245): Error adding 1 elements to context";
                            break;
                          case 8246:
                            if (v14 != 20) {
                              sub_100079708("ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): cfg 5 elements; (5*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "e2e_error_count_tmode", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): Error adding 5 elements to context";
                            break;
                          case 8247:
                            if (v14 != 36) {
                              sub_100079708("ASPMSPParseBufferToCxt: rd_window_dist(8247): cfg 9 elements; (9*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x28) {
                              unsigned int v18 = 9;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "rd_window_dist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_window_dist(8247): Error adding 9 elements to context";
                            break;
                          case 8248:
                            if (v14 != 36) {
                              sub_100079708("ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): cfg 9 elements; (9*4) cfg by"
                            }
                                "tes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x28) {
                              unsigned int v18 = 9;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "extended_rd_window_diff_dist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): Error adding 9 elements to context";
                            break;
                          case 8249:
                            if (v14 != 8) {
                              sub_100079708("ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): cfg 2 elements; (2*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "rd_retraining_failures_v2", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): Error adding 2 elements to context";
                            break;
                          case 8250:
                            if (v14 != 120) {
                              sub_100079708("ASPMSPParseBufferToCxt: lower_die_temperature(8250): cfg 30 elements; (30*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x7C) {
                              unsigned int v18 = 30;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "lower_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8250): Error adding 30 elements to context";
                            break;
                          case 8251:
                            if (v14 != 120) {
                              sub_100079708("ASPMSPParseBufferToCxt: higher_die_temperature(8251): cfg 30 elements; (30*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x7C) {
                              unsigned int v18 = 30;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "higher_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8251): Error adding 30 elements to context";
                            break;
                          case 8252:
                            if (v14 != 36) {
                              sub_100079708("ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): cfg 9 elements; (9*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x28) {
                              unsigned int v18 = 9;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "rd_window_dist_single_die", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): Error adding 9 elements to context";
                            break;
                          case 8253:
                            if (v14 != 16) {
                              sub_100079708("ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): cfg 4 elements; (4*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x14) {
                              unsigned int v18 = 4;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "parallel_slip_drops_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): Error adding 4 elements to context";
                            break;
                          case 8254:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): cfg 1 elements; (1*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "sys_halt_max_latency", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): Error adding 1 elements to context";
                            break;
                          case 8255:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "sys_halt_max_latency_opcode", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): Error adding 1 elements to context";
                            break;
                          case 8256:
                            if (v14 != 4) {
                              sub_100079708("ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "channel_halt_max_latency", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): Error adding 1 elements to context";
                            break;
                          case 8257:
                            if (v14 != 8) {
                              sub_100079708("ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): cfg 2 elements; (2*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_10008B714(a1, "max_heap_usage_v2", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): Error adding 2 elements to context";
                            break;
                          default:
                            switch(v15)
                            {
                              case 16384:
                                if (v14 != 8) {
                                  sub_100079708("ASPMSPParseBufferToCxt: fw_version_identifier(16384): cfg 1 elements; (1*8) cfg byte"
                                }
                                    "s != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "fw_version_identifier", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fw_version_identifier(16384): Error adding 1 elements to context";
                                break;
                              case 16385:
                                if (v14 != 40) {
                                  sub_100079708("ASPMSPParseBufferToCxt: random_read_size_ratio(16385): cfg 5 elements; (5*8) cfg byt"
                                }
                                    "es != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x30) {
                                  unsigned int v18 = 5;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "random_read_size_ratio", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_size_ratio(16385): Error adding 5 elements to context";
                                break;
                              case 16386:
                                if (v14 != 8) {
                                  sub_100079708("ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): cfg 1 elements; ("
                                }
                                    "1*8) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "number_gracefull_read_terminations", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): Error adding 1 e"
                                     "lements to context";
                                break;
                              case 16387:
                                if (v14 != 8) {
                                  sub_100079708("ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): cfg 1 elements; (1*8) cfg byte"
                                }
                                    "s != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "active_time_bw_pg_acc", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): Error adding 1 elements to context";
                                break;
                              case 16388:
                                if (v14 != 8) {
                                  sub_100079708("ASPMSPParseBufferToCxt: num_pg_events(16388): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "num_pg_events", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: num_pg_events(16388): Error adding 1 elements to context";
                                break;
                              case 16389:
                                if (v14 != 128) {
                                  sub_100079708("ASPMSPParseBufferToCxt: algo_queue_depth(16389): cfg 16 elements; (16*8) cfg bytes !"
                                }
                                    "= (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x88) {
                                  unsigned int v18 = 16;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "algo_queue_depth", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: algo_queue_depth(16389): Error adding 16 elements to context";
                                break;
                              case 16390:
                                if (v14 != 128) {
                                  sub_100079708("ASPMSPParseBufferToCxt: parallel_slip_hist(16390): cfg 16 elements; (16*8) cfg bytes"
                                }
                                    " != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x88) {
                                  unsigned int v18 = 16;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "parallel_slip_hist", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: parallel_slip_hist(16390): Error adding 16 elements to context";
                                break;
                              case 16391:
                                if (v14 != 48) {
                                  sub_100079708("ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): cfg 6 elements; (6*8) cfg byte"
                                }
                                    "s != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x38) {
                                  unsigned int v18 = 6;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "sys_halt_latency_hist", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): Error adding 6 elements to context";
                                break;
                              case 16392:
                                if (v14 != 48) {
                                  sub_100079708("ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): cfg 6 elements; (6*8) cfg "
                                }
                                    "bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x38) {
                                  unsigned int v18 = 6;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "channel_halt_latency_hist", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): Error adding 6 elements to context";
                                break;
                              case 16393:
                                if (v14 != 8) {
                                  sub_100079708("ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): cfg 1 elements; (1"
                                }
                                    "*8) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_10008B714(a1, "num_idle_die_read_cache_terminate", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): Error adding 1 el"
                                     "ements to context";
                                break;
                              default:
                                goto LABEL_461;
                            }
                            goto LABEL_1980;
                        }
                        goto LABEL_1980;
                      }
                      if (v14 != 8) {
                        sub_100079708("ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x10) {
                        unsigned int v18 = 1;
                      }
                      else {
                        unsigned int v18 = v14 >> 3;
                      }
                      if (sub_10008B714(a1, "dspExceptionParameter144", v11, 8u, v18))
                      {
LABEL_1372:
                        uint64_t v8 = v8 + v18;
                        goto LABEL_461;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): Error adding 1 elements to context";
LABEL_1980:
                      sub_100079708(v9, a2, a3, a4, a5, a6, a7, a8, v20);
                      return v8;
                  }
              }
          }
      }
  }
}

uint64_t sub_1000922B8(uint64_t result, const char *a2, const char *a3, uint64_t a4)
{
  if (result)
  {
    int v7 = (void *)result;
    uint64_t v8 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x102004060B2607BuLL);
    unint64_t v9 = malloc_type_calloc(1uLL, 0x78uLL, 0x102004060B2607BuLL);
    unsigned int v10 = v9;
    if (v8 && v9)
    {
      uint64_t v11 = v7[1];
      if (v11 && (uint64_t v12 = v7[3]) != 0)
      {
        *(void *)(v11 + 112) = v9;
        uint64_t v13 = (char **)(v12 + 112);
      }
      else
      {
        void *v7 = v9;
        uint64_t v13 = (char **)(v7 + 2);
      }
      *uint64_t v13 = v8;
      v7[1] = v9;
      _DWORD v7[3] = v8;
      *((void *)v8 + 14) = 0;
      *((void *)v9 + 14) = 0;
      snprintf(v9, 0x63uLL, "%s%s", a2, a3);
      v10[99] = 0;
      snprintf(v8, 0x63uLL, "%llu", a4);
      v8[99] = 0;
      *((void *)v8 + 13) = a4;
      return 1;
    }
    else
    {
      if (v8) {
        free(v8);
      }
      if (v10) {
        free(v10);
      }
      return 0;
    }
  }
  return result;
}

double sub_1000923E4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)a1;
    if (v2)
    {
      do
      {
        unint64_t v3 = (void *)v2[14];
        free(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    unint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)v4[14];
        free(v4);
        unint64_t v4 = v5;
      }
      while (v5);
    }
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100092444(void *a1, const char *a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = (char *)malloc_type_malloc(0x78uLL, 0x102004060B2607BuLL);
  unint64_t v9 = malloc_type_malloc(0x78uLL, 0x102004060B2607BuLL);
  unsigned int v10 = v9;
  uint64_t v11 = a1[1];
  if (v11 && (uint64_t v12 = a1[3]) != 0)
  {
    *(void *)(v11 + 112) = v9;
    uint64_t v13 = (char **)(v12 + 112);
  }
  else
  {
    *a1 = v9;
    uint64_t v13 = (char **)(a1 + 2);
  }
  *uint64_t v13 = v8;
  a1[1] = v9;
  a1[3] = v8;
  *((void *)v8 + 14) = 0;
  v9[14] = 0;
  snprintf((char *)v9, 0x63uLL, "%s%s", a2, a3);
  *((unsigned char *)v10 + 99) = 0;
  uint64_t result = snprintf(v8, 0x63uLL, "%llu", a4);
  v8[99] = 0;
  *((void *)v8 + 13) = a4;
  return result;
}

void *sub_100092534()
{
  return &unk_1001B6EC0;
}

void *sub_100092540()
{
  return &unk_1001B6EC8;
}

void *sub_10009254C()
{
  return &unk_1001B6ED0;
}

void *sub_100092558()
{
  return &unk_1001B6EE0;
}

void *sub_100092564()
{
  return &unk_1001B6EE8;
}

void *sub_100092570()
{
  return &unk_1001B6EF0;
}

void *sub_10009257C()
{
  return &unk_1001B6EF8;
}

void *sub_100092588()
{
  return &unk_1001B6F00;
}

void *sub_100092594()
{
  return &unk_1001B6ED8;
}

void *sub_1000925A0()
{
  return &unk_1001B6F08;
}

char *sub_1000925AC(char ***a1)
{
  io_connect_t connect = 0;
  *a1 = 0;
  int v2 = pthread_mutex_trylock(&stru_1001B6F10);
  if (v2)
  {
    if (v2 != 16
      || (syslog(4, "Warning: NANDInfo: NANDExporter: serializeAccess already locked. waiting for lock !\n"),
          pthread_mutex_lock(&stru_1001B6F10)))
    {
      unint64_t v3 = __error();
      syslog(3, "Error: NANDInfo: NANDExporter: pthread_mutex_trylock() (%d) failed \n", *v3);
      return 0;
    }
  }
  syslog(5, "NANDInfo: NANDExporter object locked ! \n");
  uint64_t v5 = &off_1001B6F50;
  uint64_t result = off_1001B6F50;
  if (!off_1001B6F50)
  {
LABEL_11:
    io_object_t v8 = 0;
    goto LABEL_12;
  }
  while (1)
  {
    CFDictionaryRef v6 = IOServiceMatching(result);
    if (!v6) {
      goto LABEL_10;
    }
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    if (!MatchingService) {
      goto LABEL_10;
    }
    io_object_t v8 = MatchingService;
    if (!IOServiceOpen(MatchingService, mach_task_self_, 0, &connect)) {
      break;
    }
    IOServiceClose(connect);
    io_connect_t connect = 0;
    IOObjectRelease(v8);
LABEL_10:
    unint64_t v9 = v5[21];
    v5 += 21;
    uint64_t result = (char *)v9;
    if (!v9) {
      goto LABEL_11;
    }
  }
  syslog(5, "NANDInfo: findNandExporter_tunnel: Controller found: %s\n", *v5);
  uint64_t result = (char *)1;
LABEL_12:
  *((_DWORD *)v5 + 4) = connect;
  *((_DWORD *)v5 + 5) = v8;
  *a1 = v5;
  return result;
}

uint64_t sub_1000926F8(uint64_t a1)
{
  io_connect_t v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    IOServiceClose(v2);
    *(_DWORD *)(a1 + 16) = 0;
  }
  io_object_t v3 = *(_DWORD *)(a1 + 20);
  if (v3)
  {
    IOObjectRelease(v3);
    *(_DWORD *)(a1 + 20) = 0;
  }
  syslog(5, "NANDInfo: NANDExporter object unlocked ! \n");

  return pthread_mutex_unlock(&stru_1001B6F10);
}

CFDataRef gather_nand_info()
{
  CFIndex length = 0;
  int v0 = (UInt8 *)sub_1000796E8(13, &length);
  if (v0 && length)
  {
    CFDataRef v1 = CFDataCreate(0, v0, length);
    if (!v1) {
      fwrite("Could not create CFData", 0x17uLL, 1uLL, __stderrp);
    }
  }
  else
  {
    CFDataRef v1 = 0;
    CFDataRef result = 0;
    if (!v0) {
      return result;
    }
  }
  free(v0);
  return v1;
}

void *acm_mem_alloc_data(size_t size)
{
  CFDataRef result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result) {
    qword_1001B8190 += size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1001B8190 - __n;
    if (qword_1001B8190 < __n) {
      uint64_t v4 = 0;
    }
    qword_1001B8190 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    qword_1001B8188 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    CFDictionaryRef v6 = "NULL";
    if (result) {
      int v7 = result;
    }
    else {
      int v7 = "NULL";
    }
    if (a4) {
      io_object_t v8 = a4;
    }
    else {
      io_object_t v8 = "NULL";
    }
    if (a6) {
      CFDictionaryRef v6 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_1001B8188, 0, qword_1001B8190, qword_1001B8198, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = qword_1001B8188 - a3;
    if (qword_1001B8188 < a3) {
      uint64_t v6 = 0;
    }
    qword_1001B8188 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    int v7 = "NULL";
    if (result) {
      io_object_t v8 = result;
    }
    else {
      io_object_t v8 = "NULL";
    }
    if (a4) {
      unint64_t v9 = a4;
    }
    else {
      unint64_t v9 = "NULL";
    }
    if (a6) {
      int v7 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_1001B8188, 0, qword_1001B8190, qword_1001B8198, v9, a5, v7);
  }
  return result;
}

uint64_t LibCall_ACMKernelControl_Block(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  size_t v5 = v4;
  int v7 = v6;
  int v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))v1;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl_Block");
  }
  uint64_t v17 = 0x2000;
  uint64_t v13 = LibCall_ACMKernelControl(v12, v11, v9, v7, v5, (uint64_t)v18, (uint64_t)&v17);
  if (v3)
  {
    if (v17) {
      uint64_t v14 = v18;
    }
    else {
      uint64_t v14 = 0;
    }
    (*(void (**)(uint64_t, unsigned char *))(v3 + 16))(v3, v14);
  }
  if (v13) {
    unsigned int v15 = 70;
  }
  else {
    unsigned int v15 = 10;
  }
  if (v15 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl_Block", (int)v13);
  }
  return v13;
}

uint64_t sub_100092B4C(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1001B7299 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    char v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    uint64_t v14 = sub_100092D2C();
    unsigned int v15 = 70;
    if (v14)
    {
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = sub_100092F10(*a1, a2, a3, a4, a5, a6, a7);
      if (v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }
  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293;
  }
  if (v15 >= byte_1001B7299 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    char v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

uint64_t sub_100092D2C()
{
  if (byte_1001B7299 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    int v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if (byte_1001B81A4)
  {
    uint64_t v0 = 0;
  }
  else
  {
    CFDictionaryRef v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291;
      goto LABEL_10;
    }
    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_1001B81A0);
    if (v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_1001B81A4 = 1;
  }
  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= byte_1001B7299 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    int v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_100092F10(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1001B7299 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v25 = "ACMLib";
    __int16 v26 = 2080;
    int v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t inputStructCnt = 0;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    unsigned int v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293;
    }
    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(dword_1001B81A0, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if (v17)
      {
        if (byte_1001B7299 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          int v25 = "ACMLib";
          __int16 v26 = 2080;
          int v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)int8x16_t v29 = a2;
          *(_WORD *)&void v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_1001B7299 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          int v25 = "ACMLib";
          __int16 v26 = 2080;
          int v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)int8x16_t v29 = a2;
          *(_WORD *)&void v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        uint64_t v18 = 0;
        if (a7) {
          *a7 = v22;
        }
      }
    }
    size_t v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if (v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }
  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291;
  }
  if (v20 >= byte_1001B7299 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v25 = "ACMLib";
    __int16 v26 = 2080;
    int v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)int8x16_t v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMKernelControl(int a1)
{
  if (byte_1001B7299 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    __int16 v8 = "ACMKernelControl";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v2 = LibCall_ACMKernelControl_Block((uint64_t)sub_100092B4C);
  if (v2) {
    unsigned int v3 = 70;
  }
  else {
    unsigned int v3 = 10;
  }
  if (v3 >= byte_1001B7299 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    __int16 v8 = "ACMKernelControl";
    __int16 v9 = 2048;
    uint64_t v10 = (int)v2;
    __int16 v11 = 1024;
    int v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, code=%u.\n", buf, 0x26u);
  }
  return v2;
}

unsigned char *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  }
  int v12 = 0;
  if (a5) {
    BOOL v13 = a4 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)int v12 = 1396920900;
        void v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  }
  return v12;
}

uint64_t LibCall_ACMKernelControl(uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t), uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v13 = a1;
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl");
  }
  if (!v13) {
    goto LABEL_16;
  }
  BOOL v14 = a5 != 0;
  if (a4) {
    BOOL v14 = a5 - 4097 < 0xFFFFFFFFFFFFF000;
  }
  if (v14)
  {
LABEL_16:
    unsigned int v18 = 70;
    uint64_t v17 = 4294967293;
  }
  else
  {
    uint64_t v20 = (uint64_t)&v20;
    __chkstk_darwin(a1);
    unsigned int v15 = (_DWORD *)((char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0));
    *unsigned int v15 = a3;
    size_t v16 = v15 + 1;
    if (a5)
    {
      memcpy(v15 + 1, a4, a5);
      size_t v16 = (_DWORD *)((char *)v16 + a5);
    }
    if (v16 != (_DWORD *)((char *)v15 + a5 + 4)) {
      sub_100093774();
    }
    uint64_t v17 = v13(a2, 26, 0, (char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0), a5 + 4, a6, a7);
    if (v17) {
      unsigned int v18 = 70;
    }
    else {
      unsigned int v18 = 10;
    }
  }
  if (v18 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl", (int)v17);
  }
  return v17;
}

void sub_100093774()
{
  __assert_rtn("LibCall_ACMKernelControl", "LibCall.c", 373, "commandCursor == commandBuffer + sizeof(commandBuffer)");
}

void image3Discard(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      if (*(void *)v2)
      {
        if ((*(unsigned char *)(v2 + 10) & 4) != 0)
        {
          image3Free(*(void **)v2);
          uint64_t v2 = *a1;
        }
      }
      image3Free((void *)v2);
      *a1 = 0;
    }
  }
}

uint64_t image3InstantiateNew(void *a1, size_t a2, unsigned int a3)
{
  int v6 = image3Malloc(0x28uLL);
  if (!v6) {
    return 12;
  }
  __int16 v7 = v6;
  if (a2 <= 0x14) {
    a2 = 20;
  }
  __int16 v8 = image3Malloc(a2);
  void *v7 = v8;
  if (!v8)
  {
    image3Free(v7);
    return 12;
  }
  *__int16 v8 = 0;
  v8[1] = 0;
  *((_DWORD *)v8 + 4) = 0;
  __int16 v9 = (_DWORD *)*v7;
  *__int16 v9 = 1231906611;
  v9[4] = a3;
  _DWORD v7[2] = a2;
  _DWORD v7[3] = 0xFFFFFFFF00000000;
  *((_DWORD *)v7 + 2) = 0x40000;
  void v7[4] = 0;
  if (a3 == 1667592820 || (uint64_t v10 = image3SetTagUnsignedNumber((char **)v7, 1415139397, a3), !v10))
  {
    uint64_t v11 = 0;
    *a1 = v7;
  }
  else
  {
    uint64_t v11 = v10;
    image3Free((void *)*v7);
    image3Free(v7);
  }
  return v11;
}

uint64_t image3SetTagUnsignedNumber(char **a1, int a2, unint64_t a3)
{
  int v7 = 0;
  unint64_t v6 = 0;
  if (HIDWORD(a3))
  {
    unint64_t v6 = a3;
    unsigned int v3 = (uint64_t *)&v6;
    size_t v4 = 8;
  }
  else
  {
    int v7 = a3;
    unsigned int v3 = (uint64_t *)&v7;
    size_t v4 = 4;
  }
  return image3SetTagStructure(a1, a2, v3, v4, 0);
}

uint64_t image3Finalize(uint64_t a1, char **a2, void *a3, int a4, uint64_t a5)
{
  unint64_t v18 = 0;
  int8x16_t v19 = 0uLL;
  int v20 = 0;
  v16[0] = 0;
  v16[1] = 0;
  int v17 = 0;
  if (!a4) {
    goto LABEL_8;
  }
  uint64_t result = image3AdvanceCursorWithZeroPad((char **)a1, (56 - *(_DWORD *)(a1 + 24)) & 0x3F);
  if (!result)
  {
    uint64_t v10 = *(char **)a1;
    unsigned int v11 = *(_DWORD *)(a1 + 24);
    *((_DWORD *)v10 + 3) = v11 + a5;
    int v12 = v10 + 12;
    CC_LONG v13 = v11 + 8;
    if (a5)
    {
      unint64_t v18 = __PAIR64__(v11, a5);
      image3SHA1Partial(v12, v13, &v19);
    }
    else
    {
      image3SHA1Generate(v12, v13, (unsigned __int8 *)v16);
    }
    uint64_t result = image3PKISignHash();
    if (!result)
    {
      *(_DWORD *)(a1 + 8) |= 0x20000u;
LABEL_8:
      uint64_t result = 0;
      BOOL v14 = *(char **)a1;
      *((_DWORD *)v14 + 2) = *(_DWORD *)(a1 + 24);
      uint64_t v15 = (*(_DWORD *)(a1 + 24) + 20);
      *((_DWORD *)v14 + 1) = v15;
      *a2 = v14;
      *a3 = v15;
    }
  }
  return result;
}

uint64_t image3AdvanceCursorWithZeroPad(char **a1, int a2)
{
  if ((*((unsigned char *)a1 + 10) & 2) != 0) {
    return 30;
  }
  uint64_t v4 = *((int *)a1 + 6);
  uint64_t v3 = *((int *)a1 + 7);
  LODWORD(v5) = v4 + a2;
  *((_DWORD *)a1 + 6) = v4 + a2;
  unint64_t v6 = *a1;
  if (v3 != -1)
  {
    *(_DWORD *)&v6[v3 + 24] = v5 - v3;
    LODWORD(v5) = *((_DWORD *)a1 + 6);
  }
  uint64_t v5 = (int)v5;
  unint64_t v7 = (int)v5 + 20;
  if (v7 <= (unint64_t)a1[2]) {
    goto LABEL_7;
  }
  unint64_t v6 = (char *)realloc(v6, (int)v5 + 20);
  if (v6)
  {
    *a1 = v6;
    a1[2] = (char *)v7;
    uint64_t v5 = *((int *)a1 + 6);
LABEL_7:
    bzero(&v6[v4 + 20], v5 - v4);
    uint64_t result = 0;
    *((_DWORD *)*a1 + 2) = *((_DWORD *)a1 + 6);
    return result;
  }
  return 12;
}

uint64_t image3SetTagStructure(char **a1, int a2, void *__src, size_t __n, int a5)
{
  if ((*((unsigned char *)a1 + 10) & 2) != 0) {
    return 30;
  }
  if (a5)
  {
    uint64_t v9 = *((int *)a1 + 7);
    int v10 = (a5 + *((_DWORD *)a1 + 6) / a5 * a5 - *((_DWORD *)a1 + 6)) % a5 + *((_DWORD *)a1 + 6);
    *((_DWORD *)a1 + 6) = v10;
    unsigned int v11 = *a1;
    if (v9 != -1) {
      *(_DWORD *)&v11[v9 + 24] = v10 - v9;
    }
  }
  else
  {
    unsigned int v11 = *a1;
  }
  if ((__n & 0xF) != 0) {
    size_t v13 = 16 - (__n & 0xF);
  }
  else {
    size_t v13 = 0;
  }
  uint64_t v14 = *((int *)a1 + 6);
  size_t v15 = __n + v13 + v14 + 32;
  if (v15 > (unint64_t)a1[2])
  {
    unsigned int v11 = (char *)realloc(v11, __n + v13 + v14 + 32);
    if (!v11) {
      return 12;
    }
    *a1 = v11;
    a1[2] = (char *)v15;
    uint64_t v14 = *((int *)a1 + 6);
  }
  size_t v16 = &v11[v14];
  if (((v13 + __n) & 3) != 0) {
    int v17 = ((v13 + __n) & 0xFFFFFFFC) + 16;
  }
  else {
    int v17 = v13 + __n + 12;
  }
  *((_DWORD *)v16 + 5) = a2;
  *((_DWORD *)v16 + 6) = v17;
  *((_DWORD *)v16 + 7) = __n;
  memcpy(v16 + 32, __src, __n);
  bzero(&v16[__n + 32], v13);
  uint64_t result = 0;
  int v18 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 7) = v18;
  int v19 = *((_DWORD *)v16 + 6) + v18;
  *((_DWORD *)a1 + 6) = v19;
  *((_DWORD *)*a1 + 2) = v19;
  return result;
}

uint64_t image3InstantiateFromBuffer(void *a1, _DWORD *a2, unint64_t a3, char a4)
{
  if (a3 < 0x14) {
    return 22;
  }
  if (*a2 != 1231906611) {
    return 22;
  }
  unint64_t v6 = a2[2];
  if (a3 - 20 < v6 || a2[3] > v6 || v6 + 20 > a2[1]) {
    return 22;
  }
  int v10 = image3Malloc(0x28uLL);
  if (!v10) {
    return 12;
  }
  unsigned int v11 = v10;
  *((_DWORD *)v10 + 2) = 1;
  void v10[4] = 0;
  if (a2[3])
  {
    *((_DWORD *)v10 + 2) = 131073;
    if ((a4 & 1) == 0)
    {
      void *v10 = a2;
      v10[2] = a3;
LABEL_21:
      uint64_t result = 0;
      *a1 = v11;
      return result;
    }
    goto LABEL_19;
  }
  *((_DWORD *)v10 + 6) = a2[2];
  *((_DWORD *)v10 + 7) = -1;
  unsigned int v12 = a2[2];
  if (!v12)
  {
LABEL_19:
    size_t v16 = a2[2] + 20;
    v11[2] = v16;
    int v17 = image3Malloc(v16);
    *unsigned int v11 = v17;
    if (v17)
    {
      memcpy(v17, a2, v11[2]);
      *((_DWORD *)v11 + 2) |= 0x40000u;
      goto LABEL_21;
    }
    image3Free(v11);
    return 12;
  }
  unsigned int v13 = 0;
  while (1)
  {
    unsigned int v14 = v13;
    unsigned int v15 = *(_DWORD *)((char *)a2 + v13 + 24);
    v13 += v15;
    if (v13 > v12 || v15 <= 0xB) {
      break;
    }
    if (v13 == v12)
    {
      *((_DWORD *)v10 + 7) = v14;
      goto LABEL_19;
    }
  }
  image3Free(v10);
  return 22;
}

uint64_t image3GetTagStruct(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 8);
  if (!v5) {
    return 2;
  }
  unint64_t v6 = (_DWORD *)(*(void *)a1 + 20);
  unint64_t v7 = (unint64_t)v6 + v5;
  while (1)
  {
    __int16 v8 = v6 + 3;
    if ((unint64_t)(v6 + 3) > v7) {
      return 22;
    }
    uint64_t v9 = v6[2];
    if ((unint64_t)v8 + v9 > v7) {
      return 22;
    }
    if (a2 == -1 || *v6 == a2) {
      break;
    }
LABEL_9:
    unint64_t v10 = v6[1];
    if (v9 + 12 > v10) {
      return 22;
    }
    unint64_t v6 = (_DWORD *)((char *)v6 + v10);
    if ((unint64_t)v6 >= v7) {
      return 2;
    }
  }
  if (a5)
  {
    --a5;
    goto LABEL_9;
  }
  if (a4)
  {
    if (*a4 && *a4 != v9) {
      return 22;
    }
    *a4 = v9;
  }
  uint64_t result = 0;
  *a3 = v8;
  return result;
}

uint64_t image3GetTagUnsignedNumber(uint64_t a1, int a2, void *a3, int a4)
{
  uint64_t v7 = 0;
  __int16 v8 = 0;
  uint64_t result = image3GetTagStruct(a1, a2, &v8, &v7, a4);
  if (!result)
  {
    if (v7 == 8)
    {
      uint64_t v6 = *(void *)v8;
      goto LABEL_6;
    }
    if (v7 == 4)
    {
      uint64_t v6 = *v8;
LABEL_6:
      uint64_t result = 0;
      *a3 = v6;
      return result;
    }
    return 22;
  }
  return result;
}

void sub_100094054(uint64_t a1)
{
  uint64_t step_desc = checkpoint_closure_context_get_step_desc((uint64_t)[*(id *)(a1 + 32) checkpoint_closure_context]);
  ramrod_log_msg("[AsyncCP][Start] Checkpoint %s start running.\n", v3, v4, v5, v6, v7, v8, v9, *(void *)(step_desc + 8));
  unint64_t v10 = [*(id *)(a1 + 32) workQueue];
  dispatch_queue_set_specific(v10, kCheckpointAsyncStepContextKey, [*(id *)(a1 + 32) checkpoint_closure_context], 0);
  char v11 = 0;
  char v12 = 1;
  do
  {
    while (1)
    {
      unsigned int v44 = 0;
      id v43 = 0;
      if (v11)
      {
        unsigned int v13 = (uint64_t *)[*(id *)(a1 + 32) checkpoint_closure_context];
        if (checkpoint_closure_context_handle_simulator_actions(v13, 1, (int *)&v44, (const void **)&v43, v14, v15, v16, v17))goto LABEL_4; {
      }
        }
      else if (v12)
      {
LABEL_4:
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        unsigned int v44 = [*(id *)(a1 + 32) result];
        id v43 = [*(id *)(a1 + 32) error];
        char v12 = 1;
        goto LABEL_7;
      }
      char v12 = 0;
LABEL_7:
      int v18 = (uint64_t *)[*(id *)(a1 + 32) checkpoint_closure_context];
      if (checkpoint_closure_context_handle_simulator_actions(v18, 0, (int *)&v44, (const void **)&v43, v19, v20, v21, v22))
      {
        uint64_t v23 = (uint64_t *)[*(id *)(a1 + 32) checkpoint_closure_context];
        BOOL v31 = checkpoint_closure_context_handle_simulator_match_name(v23, v24, v25, v26, v27, v28, v29, v30) != 0;
      }
      else
      {
        BOOL v31 = 0;
      }
      [*(id *)(a1 + 32) setResult:v44];
      [*(id *)(a1 + 32) setError:v43];
      if (!v44 || v31) {
        break;
      }
      int should_retry = checkpoint_closure_context_should_retry((uint64_t)[*(id *)(a1 + 32) checkpoint_closure_context]);
      char v11 = 1;
      if (!should_retry) {
        goto LABEL_18;
      }
    }
    if (v44) {
      char v33 = 1;
    }
    else {
      char v33 = v31;
    }
    char v11 = 1;
  }
  while ((v33 & 1) != 0);
LABEL_18:
  unsigned int v34 = [*(id *)(a1 + 32) workQueue];
  dispatch_queue_set_specific(v34, kCheckpointAsyncStepContextKey, 0, 0);
  uint64_t v35 = *(void *)(step_desc + 8);
  [*(id *)(a1 + 32) result];
  ramrod_log_msg("[AsyncCP][End] Checkpoint %s finished with result: %d.\n", v36, v37, v38, v39, v40, v41, v42, v35);
}

void sub_100094204(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 3);
  uint64_t v4 = *(const void **)(a2 + 40);

  _Block_object_assign((void *)(a1 + 40), v4, 7);
}

void sub_100094254(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 7);
  uint64_t v2 = *(const void **)(a1 + 32);

  _Block_object_dispose(v2, 3);
}

uint64_t wait_for_io_service_matching_dict(CFTypeRef cf, unsigned int a2)
{
  unsigned int v4 = 0;
  do
  {
    CFRetain(cf);
    uint64_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, (CFDictionaryRef)cf);
    if (MatchingService) {
      break;
    }
    unsigned int v6 = a2 - v4 >= 3 ? 3 : a2 - v4;
    CFStringRef v7 = CFCopyDescription(cf);
    char CStringPtr = CFStringGetCStringPtr(v7, 0);
    ramrod_log_msg("waiting for matching IOKit service: %s\n", v9, v10, v11, v12, v13, v14, v15, CStringPtr);
    sleep(v6);
    v4 += v6;
    CFRelease(v7);
  }
  while (v4 < a2);
  CFRelease(cf);
  return MatchingService;
}

uint64_t wait_for_io_service_matching_resource_with_timeout(const char *a1, unsigned int a2)
{
  CFMutableDictionaryRef v4 = IOServiceMatching("IOResources");
  if (!v4)
  {
    ramrod_log_msg("unable to create matching dictionary for resource '%s'\n", v5, v6, v7, v8, v9, v10, v11, (char)a1);
    return 0;
  }
  uint64_t v12 = v4;
  CFStringRef v13 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x8000100u);
  if (!v13)
  {
    ramrod_log_msg("unable to convert resource name to CFString\n", v14, v15, v16, v17, v18, v19, v20, v23);
    return 0;
  }
  CFStringRef v21 = v13;
  CFDictionarySetValue(v12, @"IOResourceMatch", v13);
  CFRelease(v21);

  return wait_for_io_service_matching_dict(v12, a2);
}

BOOL ramrod_check_NVRAM_access()
{
  io_object_t v0 = wait_for_io_service_matching_resource_with_timeout("IONVRAM", 0);
  io_object_t v1 = v0;
  if (v0) {
    IOObjectRelease(v0);
  }
  return v1 != 0;
}

uint64_t ramrod_delete_NVRAM_variable()
{
  return 1;
}

uint64_t ramrod_copy_NVRAM_variable()
{
  return 0;
}

CFTypeRef ramrod_copy_NVRAM_variable_from_devicetree(CFStringRef theString)
{
  CFStringRef Copy = CFStringCreateCopy(0, theString);
  io_registry_entry_t v2 = atomic_load((unsigned int *)dword_1001B81A8);
  if (!v2)
  {
    io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMasterPortDefault, "IODeviceTree:/options");
    if (v2)
    {
      io_registry_entry_t v5 = 0;
      atomic_compare_exchange_strong(dword_1001B81A8, &v5, v2);
      if (v5)
      {
        IOObjectRelease(v2);
        io_registry_entry_t v2 = v5;
      }
    }
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, Copy, 0, 0);
  CFRelease(Copy);
  return CFProperty;
}

uint64_t image3SHA1Generate(const void *a1, CC_LONG a2, unsigned __int8 *a3)
{
  memset(&v7, 0, sizeof(v7));
  CC_SHA1_Init(&v7);
  CC_SHA1_Update(&v7, a1, a2);
  return CC_SHA1_Final(a3, &v7);
}

uint64_t image3PKISignHash()
{
  return 0xFFFFFFFFLL;
}

int8x16_t image3SHA1Partial(const void *a1, CC_LONG a2, int8x16_t *a3)
{
  memset(&v7, 0, sizeof(v7));
  CC_SHA1_Init(&v7);
  CC_SHA1_Update(&v7, a1, a2);
  int8x16_t result = vrev32q_s8(*(int8x16_t *)&v7.h0);
  *a3 = result;
  a3[1].i32[0] = bswap32(v7.h4);
  return result;
}

uint64_t ramrod_ticket_create_img3(CFDataRef *a1, CFErrorRef *a2)
{
  uint64_t v28 = 0;
  if (!qword_1001B81B0 || byte_1001B81B8 != 1) {
    return 1;
  }
  CFIndex v29 = 0;
  uint64_t v30 = 0;
  if (image3InstantiateNew(&v28, 0, 0x53434142u))
  {
    ramrod_create_error_cf(a2, @"RamrodErrorDomain", 6, 0, @"%s: unable to create img3 ticket", v4, v5, v6, (char)"ramrod_ticket_create_img3");
    uint64_t v14 = "failed to create img3\n";
LABEL_10:
    ramrod_log_msg(v14, v7, v8, v9, v10, v11, v12, v13, v27);
LABEL_11:
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  uint64_t v16 = v28;
  BytePtr = (UInt8 *)CFDataGetBytePtr((CFDataRef)qword_1001B81B0);
  size_t Length = CFDataGetLength((CFDataRef)qword_1001B81B0);
  if (image3SetTagStructure(v16, 1145132097, BytePtr, Length, 32))
  {
    uint64_t v14 = "failed to create data tag for ticket";
    goto LABEL_10;
  }
  if (image3Finalize((uint64_t)v28, (char **)&v30, &v29, 0, 0))
  {
    ramrod_create_error_cf(a2, @"RamrodErrorDomain", 6, 0, @"%s: unable to create CFData for img3 ticket", v19, v20, v21, (char)"ramrod_ticket_create_img3");
    uint64_t v14 = "could not finalize ticket img3";
    goto LABEL_10;
  }
  CFDataRef v23 = CFDataCreate(kCFAllocatorDefault, v30, v29);
  if (!v23)
  {
    ramrod_create_error_cf(a2, @"RamrodErrorDomain", 6, 0, @"%s: unable to create CFData for img3 ticket", v24, v25, v26, (char)"ramrod_ticket_create_img3");
    goto LABEL_11;
  }
  *a1 = v23;
  uint64_t v15 = 1;
LABEL_12:
  if (v28) {
    image3Discard((uint64_t *)&v28);
  }
  return v15;
}

uint64_t get_BOOLean_option(const __CFDictionary *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned __int8 valuePtr = a3;
  if (!a1) {
    return v3;
  }
  CFDataRef Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return v3;
  }
  uint64_t v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFBooleanGetTypeID())
  {
    CFTypeID v9 = CFGetTypeID(v6);
    if (v9 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    else
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      *(_OWORD *)buffer = 0u;
      long long v19 = 0u;
      CFStringGetCString(a2, buffer, 255, 0x8000100u);
      ramrod_log_msg("%s: option '%s' has non-BOOLean value, using default\n", v10, v11, v12, v13, v14, v15, v16, (char)"get_BOOLean_option");
    }
    return v3;
  }

  return CFBooleanGetValue((CFBooleanRef)v6);
}

uint64_t ramrod_log_msg_to_fd(uint64_t a1, uint64_t a2, int __fd)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v7 = 0;
    while (1)
    {
      ssize_t v8 = write(__fd, (const void *)(a1 + v7), a2 - v7);
      if (v8 == -1) {
        break;
      }
      v7 += v8;
      if (v7 == a2) {
        return 0;
      }
    }
    return *__error();
  }
  return result;
}

uint64_t sub_100094C58(int a1)
{
  int valuePtr = a1;
  memset(&v16, 0, sizeof(v16));
  int v1 = fstat(a1, &v16);
  BOOL v2 = (__int16)v16.st_mode <= -1 && v1 == 0;
  uint64_t v3 = &qword_1001B81E0;
  if (v2) {
    uint64_t v3 = &qword_1001B81D8;
  }
  uint64_t v4 = (__CFSet *)*v3;
  if (!*v3)
  {
    uint64_t v12 = __stderrp;
    uint64_t v13 = "can't remove logging fd since none were added";
    size_t v14 = 45;
LABEL_13:
    fwrite(v13, v14, 1uLL, v12);
    return 0xFFFFFFFFLL;
  }
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (!v5)
  {
    uint64_t v12 = __stderrp;
    uint64_t v13 = "failed to convert fd to number";
    size_t v14 = 30;
    goto LABEL_13;
  }
  CFNumberRef v6 = v5;
  CFSetRemoveValue(v4, v5);
  if (close(valuePtr))
  {
    uint64_t v7 = __error();
    uint64_t v8 = *v7;
    CFTypeID v9 = __stderrp;
    int v10 = valuePtr;
    uint64_t v11 = strerror(*v7);
    fprintf(v9, "failed to close file descriptor '%d', error:%s", v10, v11);
  }
  else
  {
    uint64_t v8 = 0;
  }
  CFRelease(v6);
  return v8;
}

uint64_t ramrod_log_msg_to_all_fds(uint64_t a1, uint64_t a2)
{
  long long context = 0u;
  *(_OWORD *)theArray = 0u;
  int valuePtr = -1;
  pthread_mutex_lock(&stru_1001B72E0);
  if (a1 && xmmword_1001B81D8 != 0)
  {
    *(void *)&long long context = a1;
    *((void *)&context + 1) = a2;
    theArray[0] = 0;
    LOBYTE(theArray[1]) = 0;
    if (*((void *)&xmmword_1001B81D8 + 1)) {
      CFSetApplyFunction(*((CFSetRef *)&xmmword_1001B81D8 + 1), (CFSetApplierFunction)sub_100094EF4, &context);
    }
    qword_1001B81E8 += a2;
    if (qword_1001B81E8)
    {
      LOBYTE(theArray[1]) = 1;
      qword_1001B81E8 = 0;
    }
    if ((void)xmmword_1001B81D8) {
      CFSetApplyFunction((CFSetRef)xmmword_1001B81D8, (CFSetApplierFunction)sub_100094EF4, &context);
    }
    if (theArray[0])
    {
      CFIndex Count = CFArrayGetCount(theArray[0]);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        for (CFIndex i = 0; i != v5; ++i)
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray[0], i);
          if (CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr)) {
            sub_100094C58(valuePtr);
          }
          else {
            fwrite("Failed to convert CFNumberRef into int value\n", 0x2DuLL, 1uLL, __stderrp);
          }
        }
      }
      CFRelease(theArray[0]);
    }
  }
  pthread_mutex_unlock(&stru_1001B72E0);
  return 0;
}

void sub_100094EF4(const void *a1, uint64_t a2)
{
  int valuePtr = -1;
  if (a1)
  {
    if (a2)
    {
      if (*(void *)a2)
      {
        if (CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr))
        {
          if (ramrod_log_msg_to_fd(*(void *)a2, *(void *)(a2 + 8), valuePtr))
          {
            fprintf(__stderrp, "Removing file descriptor %d since it failed to be written to.\n", valuePtr);
            CFMutableSetRef Mutable = *(__CFArray **)(a2 + 16);
            if (!Mutable)
            {
              CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
              *(void *)(a2 + 16) = Mutable;
            }
            CFArrayAppendValue(Mutable, a1);
          }
          else if (*(unsigned char *)(a2 + 24))
          {
            fsync(valuePtr);
          }
        }
        else
        {
          fwrite("Failed to convert num to int\n", 0x1DuLL, 1uLL, __stderrp);
        }
      }
      return;
    }
    CFIndex v5 = __stderrp;
    CFNumberRef v6 = "Missing logging context.\n";
    size_t v7 = 25;
  }
  else
  {
    CFIndex v5 = __stderrp;
    CFNumberRef v6 = "NULL fd num in fd set, weird.\n";
    size_t v7 = 30;
  }

  fwrite(v6, v7, 1uLL, v5);
}

void ramrod_log_msg(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void ramrod_log_msg_cf(CFStringRef format, ...)
{
  va_start(va, format);
  CFStringRef v1 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0, format, va);
  if (!v1)
  {
    ramrod_log_msg("(Failed to format log message)\n", v2, v3, v4, v5, v6, v7, v8, v30);
    return;
  }
  CFStringRef v9 = v1;
  char CStringPtr = CFStringGetCStringPtr(v1, 0x8000100u);
  if (CStringPtr)
  {
    char v30 = (char)CStringPtr;
    uint64_t v18 = "%s";
  }
  else
  {
    CFIndex Length = CFStringGetLength(v9);
    CFIndex v20 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    long long v21 = (char *)malloc(v20);
    if (v21)
    {
      long long v22 = v21;
      if (CFStringGetCString(v9, v21, v20, 0x8000100u)) {
        ramrod_log_msg("%s", v23, v24, v25, v26, v27, v28, v29, (char)v22);
      }
      else {
        ramrod_log_msg("(Failed to alloc and convert log message)\n", v23, v24, v25, v26, v27, v28, v29, v30);
      }
      free(v22);
      goto LABEL_12;
    }
    uint64_t v18 = "(Failed to alloc and convert log message)\n";
  }
  ramrod_log_msg(v18, v11, v12, v13, v14, v15, v16, v17, v30);
LABEL_12:
  CFRelease(v9);
}

void sub_100095174(int a1, const char *a2, va_list a3)
{
  __s = 0;
  if (vasprintf(&__s, a2, a3) != -1)
  {
    pthread_mutex_lock(&stru_1001B72A0);
    if (a1 == 1)
    {
      fputs(__s, __stdoutp);
      if (off_1001B81F0) {
        off_1001B81F0(__s);
      }
    }
    size_t v4 = strlen(__s);
    ramrod_log_msg_to_all_fds((uint64_t)__s, v4);
    if (!byte_1001B7320) {
      goto LABEL_23;
    }
    uint64_t v5 = (char *)qword_1001B81D0;
    if (!qword_1001B81D0)
    {
      uint64_t v5 = (char *)malloc(0x100000uLL);
      qword_1001B81D0 = (uint64_t)v5;
      if (!v5)
      {
        fprintf(__stderrp, "unable to allocate %lu bytes for log buffer\n", 0x100000);
LABEL_23:
        pthread_mutex_unlock(&stru_1001B72A0);
        goto LABEL_24;
      }
      qword_1001B81C0 = (uint64_t)v5;
      qword_1001B81C8 = (uint64_t)v5;
    }
    char v6 = *__s;
    if (*__s)
    {
      uint64_t v7 = v5 + 0x100000;
      uint64_t v8 = (char *)qword_1001B81C8;
      uint64_t v9 = qword_1001B81C0;
      int v10 = __s + 1;
      do
      {
        *uint64_t v8 = v6;
        if (v8 + 1 == v7) {
          uint64_t v8 = v5;
        }
        else {
          ++v8;
        }
        qword_1001B81C8 = (uint64_t)v8;
        if ((char *)v9 == v8)
        {
          if (v8 + 1 == v7) {
            uint64_t v9 = (uint64_t)v5;
          }
          else {
            uint64_t v9 = (uint64_t)(v8 + 1);
          }
          qword_1001B81C0 = v9;
        }
        int v11 = *v10++;
        char v6 = v11;
      }
      while (v11);
    }
    goto LABEL_23;
  }
  fwrite("unable to allocate storage for log message\n", 0x2BuLL, 1uLL, __stderrp);
LABEL_24:
  free(__s);
}

CFStringRef sub_1000952F0()
{
  return CFStringCreateWithFormat(0, 0, @"UNKNOWN");
}

CFStringRef sub_100095304(uint64_t a1, const char **a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  size_t v3 = strlen(*a2);
  if (v3 > 0x100) {
    return CFStringCreateWithFormat(0, 0, @"~%s", &v2[v3 - 255]);
  }
  else {
    return CFStringCreateWithFormat(0, 0, @"%s", v2);
  }
}

CFStringRef sub_10009537C(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *((void *)a2 + 1);
  if (!v3) {
    return 0;
  }
  size_t v4 = strlen(*((const char **)a2 + 1));
  if (v4 > 0xF2) {
    return CFStringCreateWithFormat(0, 0, @"{0x%08X:\"~%s\"}", *a2, v4 + v3 - 241);
  }
  else {
    return CFStringCreateWithFormat(0, 0, @"{0x%08X:\"%s\"}", *a2, v3);
  }
}

CFStringRef sub_100095400(uint64_t a1, void *a2)
{
  if (a2) {
    return CFStringCreateWithFormat(0, 0, @"%ld", *a2);
  }
  else {
    return 0;
  }
}

CFStringRef sub_100095444(uint64_t a1, const __CFString *a2)
{
  CFStringRef v2 = a2;
  if (a2)
  {
    uint64_t v16 = 0;
    asprintf(&v16, "{");
    uint64_t v8 = v16;
    if (v16)
    {
      uint64_t v9 = 0;
      int v15 = 0;
      char v10 = 1;
      do
      {
        char v11 = v10;
        uint64_t v12 = (const char *)*((void *)&v2->isa + v9);
        if (v12)
        {
          uint64_t v8 = sub_100097E18(v8, off_10018D770[v9], v12, &v15);
          uint64_t v16 = v8;
        }
        char v10 = 0;
        uint64_t v9 = 1;
      }
      while ((v11 & 1) != 0);
      uint64_t v16 = sub_100097F08(v8, "}", (uint64_t)v12, v3, v4, v5, v6, v7, v14);
      CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"%s", v16);
      if (v16) {
        free(v16);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFStringRef sub_100095514(uint64_t a1, const __CFString *a2)
{
  CFStringRef v2 = a2;
  if (a2)
  {
    char v14 = 0;
    asprintf(&v14, "{");
    uint64_t v8 = v14;
    if (v14)
    {
      uint64_t v9 = 0;
      int v13 = 0;
      do
      {
        char v10 = *(const char **)((char *)&v2->info + v9);
        if (v10)
        {
          uint64_t v8 = sub_100097FA8(v8, *(_DWORD *)((char *)&v2->isa + v9), v10, &v13);
          char v14 = v8;
        }
        v9 += 16;
      }
      while (v9 != 128);
      char v14 = sub_100097F08(v8, "}", (uint64_t)v10, v3, v4, v5, v6, v7, v12);
      CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"%s", v14);
      if (v14) {
        free(v14);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFStringRef sub_1000955D0(uint64_t a1, const __CFString *a2)
{
  CFStringRef v2 = a2;
  if (a2)
  {
    char v14 = 0;
    asprintf(&v14, "{");
    if (v14)
    {
      uint64_t v9 = 0;
      int v13 = 0;
      do
      {
        if (*(_DWORD *)((char *)&v2->isa + v9))
        {
          char v12 = 0;
          asprintf(&v12, "%d", *(_DWORD *)((char *)&v2->isa + v9 + 4));
          uint64_t v3 = v12;
          if (v12)
          {
            char v14 = sub_100097FA8(v14, *(_DWORD *)((char *)&v2->isa + v9), v12, &v13);
            if (v12) {
              free(v12);
            }
          }
        }
        v9 += 8;
      }
      while (v9 != 64);
      char v14 = sub_100097F08(v14, "}", (uint64_t)v3, v4, v5, v6, v7, v8, v11);
      CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"%s", v14);
      if (v14) {
        free(v14);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFStringRef sub_1000956D0(uint64_t a1, const __CFString *a2)
{
  CFStringRef v2 = a2;
  if (a2)
  {
    long long v19 = 0;
    asprintf(&v19, "{");
    if (v19)
    {
      uint64_t v9 = 0;
      int v18 = 0;
      p_info = &v2->info;
      do
      {
        char v11 = (int *)v2 + 18 * v9;
        if (*v11)
        {
          long long v22 = 0;
          asprintf(&v22, "{");
          if (v22)
          {
            uint64_t v12 = 0;
            int v21 = 0;
            do
            {
              int v13 = (const char *)p_info[v12];
              if (v13)
              {
                CFIndex v20 = 0;
                asprintf(&v20, "\"%s\"", v13);
                uint64_t v3 = v20;
                if (v20)
                {
                  long long v22 = sub_100098020(v22, v12, v20, &v21);
                  if (v20) {
                    free(v20);
                  }
                }
              }
              ++v12;
            }
            while (v12 != 8);
            char v14 = sub_100097F08(v22, "}", (uint64_t)v3, v4, v5, v6, v7, v8, v17);
            if (v14)
            {
              int v15 = v14;
              long long v19 = sub_100097FA8(v19, *v11, v14, &v18);
              free(v15);
            }
          }
        }
        ++v9;
        p_info += 9;
      }
      while (v9 != 8);
      long long v19 = sub_100097F08(v19, "}", (uint64_t)v3, v4, v5, v6, v7, v8, v17);
      CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"%s", v19);
      if (v19) {
        free(v19);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFStringRef sub_100095868(uint64_t a1, const __CFString *a2)
{
  CFStringRef v2 = a2;
  if (a2)
  {
    int v18 = 0;
    asprintf(&v18, "{");
    if (v18)
    {
      uint64_t v9 = 0;
      int v17 = 0;
      CFStringRef v10 = v2;
      do
      {
        char v11 = (int *)v2 + 11 * v9;
        if (*v11)
        {
          int v21 = 0;
          asprintf(&v21, "{");
          if (v21)
          {
            uint64_t v12 = 0;
            int v20 = 0;
            do
            {
              if (*((unsigned char *)&v10[1].isa + v12 + 4))
              {
                long long v19 = 0;
                asprintf(&v19, "%d", *((_DWORD *)&v10->isa + v12 + 1));
                uint64_t v3 = v19;
                if (v19)
                {
                  int v21 = sub_100098020(v21, v12, v19, &v20);
                  if (v19) {
                    free(v19);
                  }
                }
              }
              ++v12;
            }
            while (v12 != 8);
            int v13 = sub_100097F08(v21, "}", (uint64_t)v3, v4, v5, v6, v7, v8, v16);
            if (v13)
            {
              char v14 = v13;
              int v18 = sub_100097FA8(v18, *v11, v13, &v17);
              free(v14);
            }
          }
        }
        ++v9;
        CFStringRef v10 = (CFStringRef)((char *)v10 + 44);
      }
      while (v9 != 8);
      int v18 = sub_100097F08(v18, "}", (uint64_t)v3, v4, v5, v6, v7, v8, v16);
      CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"%s", v18);
      if (v18) {
        free(v18);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_100095A0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  int v10 = *(_DWORD *)(a1 + 664);
  if (!v10) {
    goto LABEL_160;
  }
  if (v10 == 1)
  {
    uint64_t v11 = 1;
    goto LABEL_20;
  }
  uint64_t v11 = 0;
  if (a2)
  {
    if (v10 == 2)
    {
LABEL_160:
      if (ramrod_check_NVRAM_access())
      {
        if (*(unsigned char *)(a1 + 2272))
        {
          if (!*(unsigned char *)(a1 + 2273))
          {
LABEL_24:
            int v17 = *(_DWORD *)(a1 + 664);
            if (*(unsigned char *)(a1 + 669))
            {
LABEL_149:
              uint64_t v11 = 1;
              *(_DWORD *)(a1 + 664) = 1;
              if (!v8)
              {
                if (v17) {
                  sub_100096304(a1, 2, 1, 0, 256, "NVRAM access has become available", 0, 0, 0);
                }
                else {
                  sub_100096304(a1, 2, 1, 0, 256, "NVRAM access available on initial check", 0, 0, 0);
                }
              }
              goto LABEL_20;
            }
            BOOL v18 = *(_DWORD *)a1 == 1 && v17 == 2;
            uint64_t v19 = 8;
            if (v18) {
              uint64_t v19 = 400;
            }
            uint64_t v20 = a1 + v19;
            int v21 = (void *)(v20 + 664);
            if (*(unsigned char *)(v20 + 668)) {
              ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): first available indication when already collected\n", v12, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_handle_first_available");
            }
            else {
              sub_100096DF4((int *)a1, (uint64_t)v21, a3, a4, a5, a6, a7, a8);
            }
            if (*(_DWORD *)a1 == 1)
            {
              int v29 = *(_DWORD *)(a1 + 88);
              if (*(_DWORD *)(a1 + 96))
              {
                if (v29 == 2) {
                  uint64_t v39 = (unsigned int *)&unk_10016E1D0;
                }
                else {
                  uint64_t v39 = (unsigned int *)&unk_10016E318;
                }
              }
              else
              {
                if (v29 == 2)
                {
                  int v31 = sub_100098448(a1, (uint64_t)v21, dword_10016DF40, v24, v25, v26, v27, v28);
                  sub_100098680(a1, (uint64_t)v21);
                  goto LABEL_53;
                }
                uint64_t v39 = (unsigned int *)&unk_10016E0C0;
              }
              int v31 = sub_100098448(a1, (uint64_t)v21, v39, v24, v25, v26, v27, v28);
LABEL_53:
              uint64_t v43 = v21[6];
              if (!v43)
              {
LABEL_110:
                if (!v43 && v31 && !*(unsigned char *)(a1 + 106) && !*(unsigned char *)(a1 + 100) && !*(unsigned char *)(a1 + 104)) {
                  sub_100096FB8(a1, v32, "[monitor_aware]pre-existing NVRAM implied reboot-retry but values were inconsistent");
                }
LABEL_116:
                if (*(unsigned char *)(a1 + 104))
                {
                  if (v17 == 2)
                  {
                    uint64_t v73 = 0;
                    unsigned int v74 = (void *)(a1 + 1496);
                    uint64_t v75 = &dword_10018D790;
LABEL_119:
                    uint64_t v76 = *v75;
                    if (v73 != v76)
                    {
                      uint64_t v77 = a1 + 16 * (int)v76;
                      *(unsigned char *)(v77 + 1492) = *((unsigned char *)v74 - 4);
                      *((unsigned char *)v74 - 4) = 0;
                      uint64_t v78 = *v74;
                      *unsigned int v74 = *(void *)(v77 + 1496);
                      *(void *)(v77 + 1496) = v78;
                    }
                    while (v73 != 47)
                    {
                      v74 += 2;
                      v75 += 8;
                      ++v73;
                      if (*(unsigned char *)(a1 + 104)) {
                        goto LABEL_119;
                      }
                    }
                  }
                }
                else if (*(_DWORD *)a1 != 1 && *(_DWORD *)(a1 + 88) == 2)
                {
                  ramrod_log_msg("%s\n", v32, v33, v34, v35, v36, v37, v38, (char)"void clear_stale_ota_nvram(void)");
                  sub_10009885C(@"boot-breadcrumbs");
                  sub_10009885C(@"OTA-pre-conversion");
                  sub_10009885C(@"OTA-post-conversion");
                  sub_10009885C(@"ota-conv-panic-indicator");
                  sub_10009885C(@"OTA-fsck-metrics");
                  sub_10009885C(@"OTA-sealvolume-metrics");
                  sub_10009885C(@"OTA-migrator-metrics");
                  for (uint64_t i = 0; i != 28; ++i)
                  {
                    unsigned int v80 = (const __CFString **)&off_10018D780[4 * dword_10016E850[i]];
                    sub_10009885C(v80[1]);
                    sub_10009885C(*v80);
                  }
                }
                if (*(_DWORD *)(a1 + 96))
                {
                  if (*(unsigned char *)(a1 + 101))
                  {
                    if (*(unsigned char *)(a1 + 104))
                    {
                      if (*(unsigned char *)(a1 + 106))
                      {
                        unsigned int v81 = 9;
                      }
                      else if (*(unsigned char *)(a1 + 105))
                      {
                        unsigned int v81 = 12;
                      }
                      else if (*(unsigned char *)(a1 + 100))
                      {
                        unsigned int v81 = 10;
                      }
                      else
                      {
                        unsigned int v81 = 11;
                      }
                    }
                    else if (*(unsigned char *)(a1 + 103))
                    {
                      unsigned int v81 = 10;
                    }
                    else
                    {
                      unsigned int v81 = 3;
                    }
                  }
                  else if (*(unsigned char *)(a1 + 102))
                  {
                    if (*(unsigned char *)(a1 + 104)) {
                      unsigned int v81 = 7;
                    }
                    else {
                      unsigned int v81 = 6;
                    }
                  }
                  else
                  {
                    unsigned int v81 = 2;
                  }
                  sub_100097058(a1, v81, v33, v34, v35, v36, v37, v38);
                }
                else
                {
                  sub_100098098(a1, 1, v33, v34, v35, v36, v37, v38);
                }
                *(unsigned char *)(a1 + 669) = 1;
                goto LABEL_149;
              }
              unsigned int v44 = sub_100096F3C(a1, (uint64_t)v21, v33, v34, v35, v36, v37, v38);
              if (v44 < 0x22)
              {
                unsigned int v52 = &dword_10016E8C0[3 * v44];
              }
              else
              {
                ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid outcome=%d\n", v45, v46, v47, v48, v49, v50, v51, (char)"checkpoint_get_outcome_attributes");
                unsigned int v52 = dword_10016E8C0;
              }
              CFStringRef v53 = (const __CFString *)v21[6];
              bzero(v83, 0x400uLL);
              if (*v52 == 2)
              {
                int v54 = *((unsigned __int8 *)v52 + 8);
                if (*((unsigned char *)v52 + 8)) {
                  *(unsigned char *)(a1 + 106) = 1;
                }
                if (*((unsigned char *)v52 + 7))
                {
                  int v31 = 0;
                  *(unsigned char *)(a1 + 102) = 1;
                }
                if (!*((unsigned char *)v52 + 5))
                {
                  if (!*((unsigned char *)v52 + 4) || !*((unsigned char *)v52 + 6))
                  {
                    LODWORD(v43) = 0;
                    goto LABEL_110;
                  }
                  if (v54)
                  {
                    LODWORD(v43) = 0;
                    *(unsigned char *)(a1 + 101) = 1;
                    goto LABEL_110;
                  }
                  uint64_t v43 = v21[8];
                  if (!v43) {
                    goto LABEL_110;
                  }
LABEL_98:
                  CFStringRef v69 = (const __CFString *)v21[7];
                  *(unsigned char *)(a1 + 101) = 1;
                  if (v69 && CFEqual(v69, @"true"))
                  {
                    *(unsigned char *)(a1 + 100) = 1;
                    LODWORD(v43) = *((unsigned __int8 *)v52 + 5);
                    if (!*((unsigned char *)v52 + 5))
                    {
                      *(unsigned char *)(a1 + 103) = 1;
                      goto LABEL_110;
                    }
                    LODWORD(v43) = 0;
                    goto LABEL_65;
                  }
                  goto LABEL_100;
                }
                if (v54)
                {
                  LODWORD(v43) = 0;
                  *(unsigned char *)(a1 + 101) = 1;
LABEL_65:
                  *(_WORD *)(a1 + 104) = 257;
                  goto LABEL_110;
                }
                uint64_t v43 = v21[8];
                if (v43) {
                  goto LABEL_98;
                }
              }
              else
              {
                LODWORD(v43) = *((unsigned __int8 *)v52 + 5);
                if (!*((unsigned char *)v52 + 5)) {
                  goto LABEL_110;
                }
                if (!v21[8])
                {
                  sub_1000971F8(v53, v83);
                  sub_100096FB8(a1, v71, "[monitor_aware]outcome=%s(reboot_retry_not_in_zone)");
                  goto LABEL_102;
                }
                CFStringRef v55 = (const __CFString *)v21[7];
                if (!v55 || CFStringCompare(v55, @"true", 0))
                {
LABEL_100:
                  sub_1000971F8(v53, v83);
                  sub_100096FB8(a1, v70, "[monitor_aware]outcome=%s(reboot_retry_disabled)");
LABEL_102:
                  LODWORD(v43) = 1;
                  goto LABEL_110;
                }
                LODWORD(v43) = 0;
              }
              *(unsigned char *)(a1 + 104) = 1;
              goto LABEL_110;
            }
            CFStringRef v30 = (const __CFString *)v21[7];
            if (v30 && CFEqual(v30, @"true")) {
              *(unsigned char *)(a1 + 100) = 1;
            }
            else {
              ramrod_log_msg("AP nonce will not be touched\n", v22, v23, v24, v25, v26, v27, v28, v82);
            }
            int v40 = *(_DWORD *)(a1 + 88);
            if (*(_DWORD *)(a1 + 96))
            {
              if (v40 == 2)
              {
                int v41 = sub_100098448(a1, (uint64_t)v21, dword_10016E5B8, v24, v25, v26, v27, v28);
                sub_100098680(a1, (uint64_t)v21);
                goto LABEL_72;
              }
              uint64_t v42 = (unsigned int *)&unk_10016E740;
            }
            else if (v40 == 2)
            {
              uint64_t v42 = (unsigned int *)&unk_10016E3F8;
            }
            else
            {
              uint64_t v42 = (unsigned int *)&unk_10016E510;
            }
            int v41 = sub_100098448(a1, (uint64_t)v21, v42, v24, v25, v26, v27, v28);
LABEL_72:
            if (!v21[6])
            {
              *(unsigned char *)(a1 + 1456) = 1;
              *(void *)(a1 + 1464) = "access now enabled";
              if (*(_DWORD *)(a1 + 88) == 2)
              {
                if (v21[8]) {
                  sub_1000970F4(a1, 7, 0, 0, v35, v36, v37, v38);
                }
                CFStringRef v65 = (const __CFString *)v21[3];
                if (v65 && CFStringCompare(v65, @"recover", 0)) {
                  sub_1000970F4(a1, 2, 1, 0, v35, v36, v37, v38);
                }
                if (v21[4]) {
                  sub_1000970F4(a1, 3, 1, 0, v35, v36, v37, v38);
                }
              }
              goto LABEL_105;
            }
            unsigned int v56 = sub_100096F3C(a1, (uint64_t)v21, v33, v34, v35, v36, v37, v38);
            if (v56 < 0x22)
            {
              uint64_t v64 = &dword_10016E8C0[3 * v56];
            }
            else
            {
              ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid outcome=%d\n", v57, v58, v59, v60, v61, v62, v63, (char)"checkpoint_get_outcome_attributes");
              uint64_t v64 = dword_10016E8C0;
            }
            CFStringRef v66 = (const __CFString *)v21[6];
            bzero(v83, 0x400uLL);
            if (*v64 != 1)
            {
              if (*((unsigned char *)v64 + 6))
              {
                if (v21[8])
                {
                  sub_100098774((unsigned char *)a1, v66, v33, v34, v35, v36, v37, v38, v82);
                }
                else
                {
                  sub_1000971F8(v66, v83);
                  sub_100096FB8(a1, v72, "[chassis_aware]outcome=%s(pre_existing_reboot_retry_not_in_zone)", v83);
                }
              }
              *(unsigned char *)(a1 + 1456) = 1;
              *(void *)(a1 + 1464) = "access now enabled";
              goto LABEL_105;
            }
            uint64_t v67 = v21[8];
            if (*((unsigned char *)v64 + 5))
            {
              if (!v67)
              {
                sub_1000971F8(v66, v83);
                sub_100096FB8(a1, v68, "[chassis_aware]outcome=%s(pre_existing_reboot_retry_not_in_zone)", v83);
LABEL_105:
                if (v41 && !*(unsigned char *)(a1 + 104)) {
                  sub_100096FB8(a1, v32, "[chassis_aware]pre-existing NVRAM implied reboot-retry but values were inconsistent");
                }
                goto LABEL_116;
              }
            }
            else if (!v67)
            {
              goto LABEL_105;
            }
            sub_100098774((unsigned char *)a1, v66, v33, v34, v35, v36, v37, v38, v82);
            goto LABEL_105;
          }
        }
        else
        {
          sub_100098160(a1, 1u, 0x2Fu, (const __CFString **)(a1 + 1056));
          if (!*(void *)(a1 + 1056))
          {
            *(unsigned char *)(a1 + 2272) = 1;
            goto LABEL_24;
          }
          if (*(_DWORD *)a1 == 2) {
            sub_1000970F4(a1, 47, 0, 0, a5, a6, a7, a8);
          }
          *(unsigned char *)(a1 + 2273) = 1;
          *(unsigned char *)(a1 + 668) = 0;
          int v13 = (const __CFString **)(a1 + 992);
          uint64_t v14 = -4;
          do
            sub_100098160(a1, 1u, v14 + 43, v13++);
          while (!__CFADD__(v14++, 1));
          *(unsigned char *)(a1 + 2272) = 1;
        }
      }
      *(_DWORD *)(a1 + 664) = 2;
      if (!v8) {
        sub_100096304(a1, 2, 1, 0, 256, "NVRAM access is not currently available", 0, 0, 0);
      }
      uint64_t v11 = 0;
    }
  }
LABEL_20:
  if (!*(_DWORD *)(a1 + 96)) {
    sub_100098098(a1, v11, a3, a4, a5, a6, a7, a8);
  }
  return v11;
}

void *sub_100096304(uint64_t a1, int a2, int a3, int a4, int a5, const char *a6, int a7, int a8, const void *a9)
{
  int v17 = calloc(1uLL, 0x78uLL);
  if (!v17) {
    return v17;
  }
  int v130 = 0;
  asprintf(&v130, "%s", a6);
  if (!v130)
  {
    free(v17);
    return 0;
  }
  *((_DWORD *)v17 + 2) = a2;
  v17[2] = time(0);
  gettimeofday((timeval *)(v17 + 3), 0);
  *((_DWORD *)v17 + 10) = getpid();
  *((_DWORD *)v17 + 11) = getppid();
  *((_DWORD *)v17 + 12) = a3;
  *((_DWORD *)v17 + 13) = a4;
  *((_DWORD *)v17 + 14) = a5;
  v17[8] = v130;
  *((_DWORD *)v17 + 18) = a7;
  *((_DWORD *)v17 + 19) = a8;
  if (a9)
  {
    v17[10] = a9;
    CFRetain(a9);
    a5 = *((_DWORD *)v17 + 14);
  }
  *((_DWORD *)v17 + 22) = a5 | (*((_DWORD *)v17 + 2) << 16) | 0x11000000;
  *(void *)int v134 = 0x1500000001;
  v131[0] = 0;
  v131[1] = 0;
  size_t v132 = 16;
  if (sysctl(v134, 2u, v131, &v132, 0, 0)) {
    uint64_t v25 = -1;
  }
  else {
    uint64_t v25 = v17[2] - (unint64_t)v131[0];
  }
  int v26 = *((_DWORD *)v17 + 2);
  switch(v26)
  {
    case 1:
      sub_100098AA0(a1, 10, *((unsigned int *)v17 + 22), (const char *)v17[8], v21, v22, v23, v24);
      goto LABEL_69;
    case 2:
      goto LABEL_69;
    case 3:
      if (!*((_DWORD *)v17 + 18))
      {
        uint64_t v38 = 23;
        if (!*(unsigned char *)(a1 + 104)) {
          uint64_t v38 = 11;
        }
        int v39 = *(_DWORD *)(a1 + 1472) + 1;
        *(_DWORD *)(a1 + 1472) = v39;
        uint64_t v40 = *((unsigned int *)v17 + 22);
        int v41 = *(int **)(a1 + 16 * v38 + 1496);
        if (!v41) {
          goto LABEL_28;
        }
        unint64_t v42 = 0;
        do
        {
          int v44 = *v41;
          v41 += 2;
          int v43 = v44;
          if (v42 > 6) {
            break;
          }
          ++v42;
        }
        while (v43);
        if (!v43)
        {
          *(v41 - 2) = v40;
          *(v41 - 1) = v39;
          *(unsigned char *)(a1 + 16 * v38 + 1492) = 1;
        }
        else
        {
LABEL_28:
          int v45 = *(_DWORD *)(a1 + 1476);
          if (!v45)
          {
            ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): {%s} tracking information lost on store [%s]\n", v18, v40, v20, v21, v22, v23, v24, (char)"checkpoint_nvram_store_lost");
            int v45 = *(_DWORD *)(a1 + 1476);
            uint64_t v40 = *((unsigned int *)v17 + 22);
          }
          *(_DWORD *)(a1 + 1476) = v45 + 1;
        }
        sub_100098AA0(a1, 12, v40, (const char *)v17[8], v21, v22, v23, v24);
      }
      goto LABEL_68;
    case 4:
    case 7:
      goto LABEL_15;
    case 5:
      goto LABEL_13;
    case 6:
      sub_100098E1C(a1, 14, *((unsigned int *)v17 + 22), *((unsigned int *)v17 + 18), (const char *)v17[8], v22, v23, v24);
      goto LABEL_69;
    default:
      if (v26 == 32)
      {
LABEL_15:
        sub_100098CC8(a1, 13, *((_DWORD *)v17 + 14) | 0x11070000u, *((unsigned int *)v17 + 18), *((unsigned int *)v17 + 19), v22, v23, v24);
        uint64_t v28 = (__CFError *)v17[10];
        if (v28)
        {
          CFIndex Code = CFErrorGetCode(v28);
          CFStringRef Domain = CFErrorGetDomain((CFErrorRef)v17[10]);
          int v31 = sub_100097428((CFErrorRef)v17[10]);
          sub_100098CC8(a1, 15, *((unsigned int *)v17 + 22), *((unsigned int *)v17 + 18), Code, v32, v33, v34);
          if (Domain)
          {
            bzero(buffer, 0x400uLL);
            CFStringGetCString(Domain, (char *)buffer, 1024, 0x8000100u);
            sub_100098E1C(a1, 16, *((unsigned int *)v17 + 22), *((unsigned int *)v17 + 18), (const char *)buffer, v35, v36, v37);
          }
          if (v31)
          {
            sub_100098AA0(a1, 17, *((unsigned int *)v17 + 22), v31, v21, v22, v23, v24);
            free(v31);
          }
        }
        goto LABEL_68;
      }
      if (v26 != 33) {
        goto LABEL_69;
      }
LABEL_13:
      uint64_t v20 = *((unsigned int *)v17 + 18);
      int v27 = *((_DWORD *)v17 + 14);
      if (v20)
      {
        sub_100098CC8(a1, 13, v27 | 0x11070000u, v20, 0, v22, v23, v24);
        goto LABEL_68;
      }
      uint64_t v46 = 23;
      if (!*(unsigned char *)(a1 + 104)) {
        uint64_t v46 = 11;
      }
      uint64_t v47 = a1 + 16 * v46;
      uint64_t v48 = *(void **)(v47 + 1496);
      if (!v48) {
        goto LABEL_45;
      }
      int v49 = v27 | 0x11030000;
      if (*(_DWORD *)v48 == v49)
      {
        uint64_t v50 = 0;
        *uint64_t v48 = 0;
LABEL_37:
        uint64_t v51 = v50;
        do
        {
          v48[v51] = v48[v51 + 1];
          ++v51;
        }
        while (v51 != 7);
        goto LABEL_39;
      }
      unsigned int v52 = v48 + 1;
      unint64_t v53 = -1;
      while (v53 != 6)
      {
        int v54 = *v52;
        v52 += 2;
        ++v53;
        if (v54 == v49)
        {
          *((void *)v52 - 1) = 0;
          if (v53 <= 5)
          {
            uint64_t v50 = v53 + 1;
            goto LABEL_37;
          }
LABEL_39:
          v48[7] = 0;
          *(unsigned char *)(v47 + 1492) = 1;
          goto LABEL_48;
        }
      }
LABEL_45:
      int v55 = *(_DWORD *)(a1 + 1480);
      if (!v55)
      {
        ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): {%s} tracking information lost on remove [%s]\n", v18, v19, v20, v21, v22, v23, v24, (char)"checkpoint_nvram_remove_lost");
        int v55 = *(_DWORD *)(a1 + 1480);
      }
      *(_DWORD *)(a1 + 1480) = v55 + 1;
LABEL_48:
      uint64_t v56 = 24;
      if (!*(unsigned char *)(a1 + 104)) {
        uint64_t v56 = 12;
      }
      if (((0x1001100uLL >> v56) & 1) == 0) {
        goto LABEL_63;
      }
      uint64_t v57 = a1 + 16 * v56;
      uint64_t v58 = *(void *)(v57 + 1496);
      if (!v58) {
        goto LABEL_63;
      }
      int v59 = *((_DWORD *)v17 + 14) | 0x11030000;
      if (*(_DWORD *)v58 == v59)
      {
        unint64_t v60 = 0;
LABEL_57:
        uint64_t v63 = (void *)(v58 + 16 * v60);
        uint64_t v64 = (void *)v63[1];
        if (v64) {
          free(v64);
        }
        *uint64_t v63 = 0;
        v63[1] = 0;
        if (v60 <= 6)
        {
          uint64_t v65 = 16 * v60;
          do
          {
            *(_OWORD *)(v58 + v65) = *(_OWORD *)(v58 + v65 + 16);
            v65 += 16;
          }
          while (v65 != 112);
        }
        *(void *)(v58 + 112) = 0;
        *(void *)(v58 + 120) = 0;
        *(unsigned char *)(v57 + 1492) = 1;
      }
      else
      {
        unint64_t v60 = 0;
        uint64_t v61 = (int *)(v58 + 16);
        while (v60 != 7)
        {
          ++v60;
          int v62 = *v61;
          v61 += 4;
          if (v62 == v59) {
            goto LABEL_57;
          }
        }
LABEL_63:
        int v66 = *(_DWORD *)(a1 + 1480);
        if (!v66)
        {
          ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): {%s} tracking information lost on remove [%s]\n", v18, v19, v20, v21, v22, v23, v24, (char)"checkpoint_nvram_remove_lost");
          int v66 = *(_DWORD *)(a1 + 1480);
        }
        *(_DWORD *)(a1 + 1480) = v66 + 1;
      }
LABEL_68:
      sub_100098BE0(a1, 18, v25, v20, v21, v22, v23, v24);
      sub_100098BE0(a1, 21, (uint64_t)*((double *)v17 + 14), v67, v68, v69, v70, v71);
LABEL_69:
      *int v17 = 0;
      **(void **)(a1 + 192) = v17;
      *(void *)(a1 + 192) = v17;
      unsigned int v72 = *(_DWORD *)(a1 + 200) + 1;
      *(_DWORD *)(a1 + 200) = v72;
      if (v72 >= 0x201)
      {
        uint64_t v73 = (void **)(a1 + 184);
        do
        {
          unsigned int v74 = *v73;
          uint64_t v75 = (void *)**v73;
          *uint64_t v73 = v75;
          if (!v75) {
            *(void *)(a1 + 192) = v73;
          }
          *(_DWORD *)(a1 + 200) = v72 - 1;
          uint64_t v76 = (void *)v74[8];
          if (v76)
          {
            free(v76);
            v74[8] = 0;
          }
          uint64_t v77 = (const void *)v74[10];
          if (v77) {
            CFRelease(v77);
          }
          free(v74);
          unsigned int v72 = *(_DWORD *)(a1 + 200);
        }
        while (v72 > 0x200);
      }
      memset(buffer, 0, 56);
      v131[0] = 0;
      gmtime_r(v17 + 2, buffer);
      uint64_t v78 = *((unsigned int *)v17 + 2);
      if (v78 > 0x21) {
        int v79 = "GENERAL";
      }
      else {
        int v79 = off_10018DE08[v78];
      }
      asprintf(v131, "[%02u:%02u:%02u.%04u-GMT]{%u>%u} CHECKPOINT %s", buffer[0].tm_hour, buffer[0].tm_min, buffer[0].tm_sec, *((_DWORD *)v17 + 8) / 1000, *((_DWORD *)v17 + 11), *((_DWORD *)v17 + 10), v79);
      unsigned int v80 = v131[0];
      *(void *)&buffer[0].tm_sec = 0;
      if (*((_DWORD *)v17 + 19))
      {
        asprintf((char **)buffer, "(FAILURE:%d) ");
      }
      else
      {
        unsigned int v87 = *((_DWORD *)v17 + 2);
        if (v87 <= 0x1C && ((1 << v87) & 0x18000080) != 0) {
          asprintf((char **)buffer, "(SUCCESS) ", v127);
        }
        else {
          asprintf((char **)buffer, " ", v127);
        }
      }
      uint64_t v88 = *(char **)&buffer[0].tm_sec;
      if (!v80 || !*(void *)&buffer[0].tm_sec) {
        goto LABEL_149;
      }
      *(void *)&buffer[0].tm_sec = 0;
      if (*((_DWORD *)v17 + 14))
      {
        int v89 = *((_DWORD *)v17 + 2);
        if (v89 == 28 || v89 == 1)
        {
          asprintf((char **)buffer, "[0x%04X] %s");
        }
        else if (*((_DWORD *)v17 + 12) == 1)
        {
          asprintf((char **)buffer, "%s");
        }
        else
        {
          asprintf((char **)buffer, "%s:[0x%04X] %s");
        }
        uint64_t v90 = *(char **)&buffer[0].tm_sec;
      }
      else
      {
        uint64_t v90 = 0;
      }
      v131[0] = 0;
      int v91 = *((_DWORD *)v17 + 2);
      if (v91 == 28)
      {
        *(void *)&buffer[0].tm_sec = 0;
        if (!*((_DWORD *)v17 + 19))
        {
          asprintf((char **)buffer, "... %s");
          goto LABEL_122;
        }
        unsigned int v94 = sub_100099024(a1, 9, v81, v82, v83, v84, v85, v86);
        int v100 = sub_1000990D4(a1, a1 + 1064, 12, v95, v96, v97, v98, v99);
        uint64_t v101 = v100;
        uint64_t v102 = *(unsigned int *)(a1 + 108);
        if (v102 > 6) {
          int v103 = "GENERAL";
        }
        else {
          int v103 = off_10018E000[v102];
        }
        if (v94)
        {
          if (!v100)
          {
            asprintf((char **)buffer, "[%s] %s", v103, v94);
            int v112 = v94;
            goto LABEL_121;
          }
          asprintf((char **)buffer, "[%s] %s %s", v103, v100, v94);
          free(v94);
        }
        else
        {
          if (!v100)
          {
            asprintf((char **)buffer, "[%s]");
LABEL_122:
            uint64_t v92 = *(char **)&buffer[0].tm_sec;
            if (v90) {
              goto LABEL_106;
            }
            goto LABEL_123;
          }
          asprintf((char **)buffer, "[%s] %s", v103, v100);
        }
        int v112 = v101;
LABEL_121:
        free(v112);
        goto LABEL_122;
      }
      if (v91 == 27)
      {
        uint64_t v92 = sub_100099024(a1, 13, v81, v82, v83, v84, v85, v86);
        int v93 = strcmp(v92, "{}");
        if (v92 && !v93)
        {
          free(v92);
          if (!v90) {
            goto LABEL_125;
          }
LABEL_108:
          asprintf(v131, "%s:%s%s", v80, v88, v90);
          char v111 = 0;
          uint64_t v92 = 0;
          goto LABEL_127;
        }
      }
      else
      {
        uint64_t v92 = sub_100097428((CFErrorRef)v17[10]);
      }
      if (v90)
      {
LABEL_106:
        if (v92)
        {
          asprintf(v131, "%s:%s%s %s", v80, v88, v90, v92);
          char v111 = 0;
          goto LABEL_127;
        }
        goto LABEL_108;
      }
LABEL_123:
      if (v92)
      {
        asprintf(v131, "%s:%s %s", v80, v88, v92);
        goto LABEL_126;
      }
LABEL_125:
      asprintf(v131, "%s:%s", v80, v88);
      uint64_t v92 = 0;
LABEL_126:
      char v111 = 1;
LABEL_127:
      char v113 = (char)v131[0];
      if (v131[0])
      {
        char v129 = v111;
        if (*((_DWORD *)v17 + 2) == 28)
        {
          if (*(_DWORD *)(a1 + 88) == 2) {
            int v114 = 1;
          }
          else {
            int v114 = 3;
          }
        }
        else
        {
          int v114 = 1;
        }
        while (1)
        {
          ramrod_log_msg("%s\n", v104, v105, v106, v107, v108, v109, v110, v113);
          if (*((_DWORD *)v17 + 2) == 28) {
            ramrod_log_msg("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", v115, v116, v117, v118, v119, v120, v121, v128);
          }
          if (v114 < 2) {
            break;
          }
          --v114;
          sleep(1u);
        }
        unsigned int v122 = v131[0];
        unsigned int v123 = calloc(1uLL, 0x10uLL);
        if (v123)
        {
          int v124 = v123;
          v123[1] = v122;
          if (*(_DWORD *)a1 == 1)
          {
            *unsigned int v123 = 0;
            **(void **)(a1 + 480) = v123;
            *(void *)(a1 + 480) = v123;
          }
          else
          {
            pthread_mutex_lock((pthread_mutex_t *)(a1 + 232));
            int v125 = *(_DWORD *)a1;
            *int v124 = 0;
            **(void **)(a1 + 480) = v124;
            *(void *)(a1 + 480) = v124;
            if (v125 != 1) {
              pthread_mutex_unlock((pthread_mutex_t *)(a1 + 232));
            }
          }
          *(unsigned char *)(a1 + 208) = 1;
          char v111 = v129;
        }
        else if (v122)
        {
          free(v122);
        }
      }
      if ((v111 & 1) == 0) {
        free(v90);
      }
      if (v92) {
        free(v92);
      }
LABEL_149:
      if (v80) {
        free(v80);
      }
      if (v88) {
        free(v88);
      }
      return v17;
  }
}

void sub_100096DF4(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a2 + 4))
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): first available indication when already collected\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_collect");
    return;
  }
  int v10 = (const __CFString **)(a2 + 8);
  for (uint64_t i = 1; i != 49; ++i)
  {
    sub_100098160((uint64_t)a1, *(_DWORD *)a2, i - 1, v10);
    int v16 = *a1;
    if ((i - 40) <= 3 && v16 == 2)
    {
      if (*(void *)(a2 + 8 * i)) {
        goto LABEL_12;
      }
    }
    else if ((i - 44) <= 3 && v16 == 2)
    {
      CFStringRef v17 = *(const __CFString **)(a2 + 8 * i);
      if (v17)
      {
        bzero(v23, 0x400uLL);
        sub_1000971F8(v17, v23);
        sub_100097244((uint64_t)a1, (i - 5), v23, v18, v19, v20, v21, v22);
LABEL_12:
        sub_1000970F4((uint64_t)a1, i - 1, 0, 0, v12, v13, v14, v15);
      }
    }
    ++v10;
  }
  *(unsigned char *)(a2 + 4) = 1;
}

uint64_t sub_100096F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_1000990D4(a1, a2, 5, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  unint64_t v10 = 0;
  do
  {
    if (!strcmp(v9, off_10018E038[v10])) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11) {
      break;
    }
  }
  while (v10++ < 0x21);
  free(v9);
  return v11;
}

void sub_100096FB8(uint64_t a1, uint64_t a2, char *a3, ...)
{
  va_start(va, a3);
  v8[0] = 0;
  va_copy((va_list)&v8[1], va);
  vasprintf(v8, a3, va);
  if (v8[0])
  {
    sub_100096304(a1, 30, 1, 0, 260, v8[0], 0, 0, 0);
    sub_100098AA0(a1, 8, *(unsigned int *)(a1 + 120), v8[0], v4, v5, v6, v7);
    if (v8[0])
    {
      free(v8[0]);
      v8[0] = 0;
    }
  }
  ++*(_DWORD *)(a1 + 120);
}

void sub_100097058(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  uint64_t v9 = (uint64_t)*(&off_10018E148 + v8);
  if (*(_DWORD *)(v9 + 4 * a2))
  {
    *(_DWORD *)(a1 + 92) = v8;
    uint64_t v12 = *(unsigned int *)(v9 + 4 * a2);
    *(_DWORD *)(a1 + 96) = v12;
    if (v12 > 0x21) {
      uint64_t v13 = "unknown";
    }
    else {
      uint64_t v13 = off_10018E038[v12];
    }
    sub_100097244(a1, 5, v13, a4, a5, a6, a7, a8);
    sub_100098920(a1, a2);
  }
}

void sub_1000970F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 < 0x30)
  {
    uint64_t v9 = &off_10018D780[4 * a2];
    if (a3 || (*((_DWORD *)v9 + 6) - 5) < 0xFFFFFFFD)
    {
      bzero(buffer, 0x400uLL);
      if (*(_DWORD *)(a1 + 88) == 1) {
        unint64_t v10 = (CFStringRef *)v9;
      }
      else {
        unint64_t v10 = (CFStringRef *)(v9 + 1);
      }
      CFStringRef v11 = *v10;
      CFStringGetCString(*v10, buffer, 1024, 0x8000100u);
      sub_10009885C(v11);
    }
    else
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid delete of BOOT-CONTROL NVRAM ID %u\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_delete_var");
    }
  }
  else
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid delete of NVRAM ID %u\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_delete_var");
  }
}

char *sub_1000971F8(const __CFString *a1, char *a2)
{
  if (a1) {
    CFStringGetCString(a1, a2, 1024, 0x8000100u);
  }
  else {
    bzero(a2, 0x400uLL);
  }
  return a2;
}

void sub_100097244(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (a2 > 0x2F)
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid variable ID=%d\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_adjust_id");
      uint64_t v10 = 0;
      goto LABEL_7;
    }
    a2 = LODWORD(off_10018D780[4 * a2 + 2]);
  }
  if (a2 > 0x2F) {
    goto LABEL_12;
  }
  uint64_t v10 = a2;
LABEL_7:
  if ((0xFFFC000000FEuLL >> v10))
  {
    CFStringRef v11 = *(void ***)(a1 + 16 * v10 + 1496);
    if (v11)
    {
      if (*v11)
      {
        free(*v11);
        *CFStringRef v11 = 0;
      }
      sub_100098F7C(a1 + 1456, (char **)v11, a3, a4, a5, a6, a7, a8);
      *(unsigned char *)(a1 + 16 * v10 + 1492) = 1;
      return;
    }
  }
LABEL_12:
  int v12 = *(_DWORD *)(a1 + 1476);
  if (!v12)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): {%s} tracking information lost on store [%s]\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_store_lost");
    int v12 = *(_DWORD *)(a1 + 1476);
  }
  *(_DWORD *)(a1 + 1476) = v12 + 1;
}

void sub_100097360(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*a1 != 1)
    {
      uint64_t v8 = (pthread_mutex_t *)(a1 + 2);
      pthread_mutex_lock(v8);
    }
  }
  else
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): checkpoint context not initialized\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_access_obtain");
  }
}

void sub_1000973C4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*a1 != 1)
    {
      uint64_t v8 = (pthread_mutex_t *)(a1 + 2);
      pthread_mutex_unlock(v8);
    }
  }
  else
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): checkpoint context not initialized\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_access_yield");
  }
}

char *sub_100097428(CFErrorRef err)
{
  if (!err) {
    return 0;
  }
  CFStringRef v1 = err;
  CFStringRef v2 = 0;
  unsigned int v3 = 0;
  do
  {
    CFDictionaryRef v4 = CFErrorCopyUserInfo(v1);
    CFStringRef v2 = sub_100097F08(v2, "[%d]", v5, v6, v7, v8, v9, v10, v3);
    if (!v4) {
      break;
    }
    char v22 = 0;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, kCFErrorLocalizedRecoverySuggestionKey);
    int v12 = sub_1000991CC(v2, (char)"RS", Value, &v22);
    CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(v4, kCFErrorLocalizedDescriptionKey);
    uint64_t v14 = sub_1000991CC(v12, (char)"LD", v13, &v22);
    CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(v4, kCFErrorDescriptionKey);
    int v16 = sub_1000991CC(v14, (char)"D", v15, &v22);
    CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(v4, kCFErrorLocalizedFailureReasonKey);
    CFStringRef v2 = sub_1000991CC(v16, (char)"FR", v17, &v22);
    CFStringRef v1 = (__CFError *)CFDictionaryGetValue(v4, kCFErrorUnderlyingErrorKey);
    CFRelease(v4);
    if (!v1) {
      break;
    }
  }
  while (v3++ < 0xF);
  size_t v19 = strlen(v2);
  if (v19 >= 0xF3)
  {
    uint64_t v21 = 0;
    asprintf(&v21, "%s", &v2[v19 - 242]);
    if (v2) {
      free(v2);
    }
    return v21;
  }
  return v2;
}

uint64_t checkpoint_closure_context_get_step_desc(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t checkpoint_closure_context_should_retry(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 40);
    *(_DWORD *)(result + 40) = v1 + 1;
    return !*(unsigned char *)(result + 11) && v1 < *(_DWORD *)(*(void *)result + 28);
  }
  return result;
}

uint64_t checkpoint_closure_context_handle_simulator_actions(uint64_t *a1, uint64_t a2, int *a3, const void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): closure context is NULL\n", a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)"checkpoint_closure_context_handle_simulator_actions");
    return a2;
  }
  if (!qword_1001B81F8)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): %s called too early, checkpoint_chassis_context == NULL\n", a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)"checkpoint_closure_context_handle_simulator_actions");
    return a2;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = qword_1001B81F8;

  return sub_1000976E8(v10, v9, a2, a3, a4, a6, a7, a8);
}

uint64_t sub_1000976E8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, const void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = a3;
  unsigned int v13 = a3;
  sub_100097360((_DWORD *)a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  sub_1000992A0(a1, v14, v15, v16, v17, v18, v19, v20);
  if (!*(_DWORD *)(a1 + 2276) || !*(void *)(a1 + 2288)) {
    goto LABEL_14;
  }
  CFStringRef v28 = CFStringCreateWithCString(kCFAllocatorDefault, *(const char **)(a2 + 8), 0x8000100u);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 2288));
  if (Count < 1)
  {
    BOOL v36 = 0;
    if (!v28) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  CFIndex v30 = Count;
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 2288), 0);
  if (CFEqual(v28, ValueAtIndex))
  {
    BOOL v36 = 1;
    if (!v28) {
      goto LABEL_10;
    }
LABEL_9:
    CFRelease(v28);
    goto LABEL_10;
  }
  CFIndex v32 = 1;
  do
  {
    CFIndex v33 = v32;
    if (v30 == v32) {
      break;
    }
    CFStringRef v34 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 2288), v32);
    CFComparisonResult v35 = CFStringCompare(v28, v34, 0);
    CFIndex v32 = v33 + 1;
  }
  while (v35);
  BOOL v36 = v33 < v30;
  if (v28) {
    goto LABEL_9;
  }
LABEL_10:
  if (!v36)
  {
LABEL_14:
    sub_1000973C4((_DWORD *)a1, v21, v22, v23, v24, v25, v26, v27);
    BOOL v38 = 0;
    goto LABEL_15;
  }
  int v37 = *(_DWORD *)(a1 + 2284);
  if (v37)
  {
    if (!v13) {
      *(_DWORD *)(a1 + 2284) = v37 - 1;
    }
    goto LABEL_14;
  }
  if (v13) {
    sub_100096304(a1, *(_DWORD *)(a1 + 2276), 1, 0, *(_DWORD *)a2, *(const char **)(a2 + 8), *(_DWORD *)(a1 + 2280), *a4, *a5);
  }
  sub_1000973C4((_DWORD *)a1, v21, v22, v23, v24, v25, v26, v27);
  BOOL v38 = 0;
  int v47 = 0;
  switch(*(_DWORD *)(a1 + 2276))
  {
    case 9:
      goto LABEL_80;
    case 0xA:
      if (*(unsigned __int8 *)(a1 + 2275) == v10)
      {
        *a4 = 181;
        ramrod_create_error_cf((CFErrorRef *)a5, @"CheckpointErrorDomain", 181, 0, @"checkpoint simulator error", v44, v45, v46, v92);
      }
      goto LABEL_76;
    case 0xB:
      if (*(unsigned __int8 *)(a1 + 2275) == v10) {
        abort();
      }
      goto LABEL_76;
    case 0xC:
      if (*(unsigned __int8 *)(a1 + 2275) == v10) {
        exit(182);
      }
      goto LABEL_76;
    case 0xD:
      if (*(unsigned __int8 *)(a1 + 2275) == v10) {
        _exit(183);
      }
      goto LABEL_76;
    case 0xE:
      if (*(unsigned __int8 *)(a1 + 2275) == v10)
      {
        for (uint64_t i = 0; ; i += 4)
          ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): simulator signal executing after dereference of %p [%d]\n", v40, v41, v42, v43, v44, v45, v46, (char)"checkpoint_simulator_action");
      }
      goto LABEL_76;
    case 0xF:
      if (*(unsigned __int8 *)(a1 + 2275) == v10)
      {
        while (1)
          ;
      }
      goto LABEL_76;
    case 0x10:
      if (*(unsigned __int8 *)(a1 + 2275) == v10)
      {
        memset(&v94, 0, sizeof(v94));
        v93.__sig = 0;
        *(void *)v93.__opaque = 0;
        pthread_mutexattr_init(&v93);
        pthread_mutex_init(&v94, &v93);
        pthread_mutex_lock(&v94);
        pthread_mutex_lock(&v94);
      }
      goto LABEL_76;
    case 0x11:
      if (*(unsigned __int8 *)(a1 + 2275) != v10) {
        goto LABEL_76;
      }
      mach_port_t v49 = mach_host_self();
      int v50 = 0;
      goto LABEL_45;
    case 0x12:
      if (*(unsigned __int8 *)(a1 + 2275) != v10) {
        goto LABEL_76;
      }
      mach_port_t v49 = mach_host_self();
      int v50 = 4096;
LABEL_45:
      host_reboot(v49, v50);
LABEL_76:
      BOOL v38 = 0;
      goto LABEL_77;
    case 0x13:
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): simulator PAUSE not supported\n", v40, v41, v42, v43, v44, v45, v46, (char)"checkpoint_simulator_action");
      goto LABEL_76;
    case 0x14:
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): simulator RESUME not supported\n", v40, v41, v42, v43, v44, v45, v46, (char)"checkpoint_simulator_action");
      goto LABEL_76;
    case 0x15:
      if (*(unsigned __int8 *)(a1 + 2275) != v10) {
        goto LABEL_76;
      }
      __break(1u);
LABEL_50:
      BOOL v38 = v10 == 0;
LABEL_77:
      int v47 = v13;
LABEL_78:
      if (!v13) {
        goto LABEL_80;
      }
      unsigned int v13 = v47;
      if (!v47) {
        goto LABEL_80;
      }
      goto LABEL_15;
    case 0x16:
      goto LABEL_50;
    case 0x17:
      BOOL v38 = 0;
      int v51 = *(unsigned __int8 *)(a1 + 2275);
      if (v51 == v10) {
        int v47 = 0;
      }
      else {
        int v47 = v10;
      }
      if (v13 || v51 != v10) {
        goto LABEL_78;
      }
      if (!*a4)
      {
        ramrod_log_msg("CHECKPOINT_SIMULATOR_NOTICE(%s): checkpoint simulator to ignore error on step %s, but step was successful\n", v40, v41, v42, v43, v44, v45, v46, (char)"checkpoint_simulator_action");
        goto LABEL_70;
      }
      ramrod_log_msg("CHECKPOINT_SIMULATOR_NOTICE(%s): checkpoint simulator ignoring error on step %s result: %d\n", v40, v41, v42, v43, v44, v45, v46, (char)"checkpoint_simulator_action");
      *a4 = 0;
      if (!*a5)
      {
LABEL_70:
        BOOL v38 = 0;
        int v47 = 0;
        goto LABEL_80;
      }
      unsigned int v52 = sub_100097428((CFErrorRef)*a5);
      if (v52)
      {
        unint64_t v60 = v52;
        ramrod_log_msg("CHECKPOINT_SIMULATOR_NOTICE(%s): checkpoint simulator ignoring error on step %s error: %s\n", v53, v54, v55, v56, v57, v58, v59, (char)"checkpoint_simulator_action");
        free(v60);
      }
      CFRelease(*a5);
      BOOL v38 = 0;
      int v47 = 0;
      *a5 = 0;
LABEL_80:
      int v90 = *(_DWORD *)(a1 + 2280);
      if (v90)
      {
        int v91 = v90 - 1;
        *(_DWORD *)(a1 + 2280) = v91;
        if (!v91) {
          *(_DWORD *)(a1 + 2276) = 0;
        }
      }
      unsigned int v13 = v47;
LABEL_15:
      if (v10) {
        return v13;
      }
      else {
        return v38;
      }
    case 0x18:
      if (*(unsigned __int8 *)(a1 + 2275) == v10)
      {
        sub_1000994BC();
        ramrod_log_msg("CHECKPOINT_SIMULATOR_NOTICE(%s): returned from checkpoint jetsam attempt; continuing engine\n",
          v61,
          v62,
          v63,
          v64,
          v65,
          v66,
          v67,
          (char)"checkpoint_simulator_action");
      }
      goto LABEL_76;
    case 0x19:
      if (*(unsigned __int8 *)(a1 + 2275) == v10)
      {
        int v68 = fork();
        if (v68 < 1)
        {
          if (!v68)
          {
            sub_1000994BC();
            exit(0);
          }
          __error();
          ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): error %d attempting to fork jetsam child\n", v76, v77, v78, v79, v80, v81, v82, (char)"checkpoint_simulator_action");
        }
        else
        {
          LODWORD(v94.__sig) = 0;
          if (waitpid(v68, (int *)&v94, 0) < 0)
          {
            __error();
            ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): error %d waiting for jetsam child\n", v83, v84, v85, v86, v87, v88, v89, (char)"checkpoint_simulator_action");
          }
          else if ((v94.__sig & 0x7F) == 0x7F)
          {
            ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): unexpected status of jetsam child: %d\n", v69, v70, v71, v72, v73, v74, v75, (char)"checkpoint_simulator_action");
          }
          else if ((v94.__sig & 0x7F) != 0)
          {
            ramrod_log_msg("CHECKPOINT_SIMULATOR_NOTICE(%s): jetsam child signalled: %d\n", v69, v70, v71, v72, v73, v74, v75, (char)"checkpoint_simulator_action");
          }
          else
          {
            ramrod_log_msg("CHECKPOINT_SIMULATOR_NOTICE(%s): jetsam child exited: %d\n", v69, v70, v71, v72, v73, v74, v75, (char)"checkpoint_simulator_action");
          }
        }
      }
      goto LABEL_76;
    default:
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): unknown simulator command ignored\n", v40, v41, v42, v43, v44, v45, v46, (char)"checkpoint_simulator_action");
      BOOL v38 = 0;
      int v47 = 1;
      goto LABEL_78;
  }
}

uint64_t checkpoint_closure_context_handle_simulator_match_name(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): closure context is NULL\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_closure_context_handle_simulator_match_name");
    return 0;
  }
  if (!qword_1001B81F8)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): %s called too early, checkpoint_chassis_context == NULL\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_closure_context_handle_simulator_match_name");
    return 0;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = qword_1001B81F8;

  return sub_100097D40(v9, v8, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100097D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100097360((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000992A0(a1, v10, v11, v12, v13, v14, v15, v16);
  if (*(_DWORD *)(a1 + 2276))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 2288));
    CFStringRef v32 = CFStringCreateWithCString(kCFAllocatorDefault, *(const char **)(a2 + 8), 0x8000100u);
    if (Count < 1)
    {
LABEL_6:
      uint64_t v35 = 0;
    }
    else
    {
      CFIndex v33 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 2288), v33);
        if (CFEqual(v32, ValueAtIndex)) {
          break;
        }
        if (Count == ++v33) {
          goto LABEL_6;
        }
      }
      uint64_t v35 = 1;
    }
    sub_1000973C4((_DWORD *)a1, v25, v26, v27, v28, v29, v30, v31);
    if (v32) {
      CFRelease(v32);
    }
  }
  else
  {
    sub_1000973C4((_DWORD *)a1, v17, v18, v19, v20, v21, v22, v23);
    return 0;
  }
  return v35;
}

char *sub_100097E18(char *a1, const char *a2, const char *a3, int *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  asprintf(&v12, "%s:%s", a2, a3);
  uint64_t v6 = v12;
  if (!v12) {
    return a1;
  }
  if (!a1) {
    return v12;
  }
  size_t v7 = strlen(a1);
  size_t v8 = strlen(v12);
  uint64_t v9 = 1;
  if (*a4 > 0) {
    uint64_t v9 = 2;
  }
  if (v8 + v7 + v9 >= 0x81)
  {
    uint64_t v11 = a1;
LABEL_13:
    free(v6);
    return v11;
  }
  if (*a4 <= 0) {
    asprintf(&v11, "%s%s");
  }
  else {
    asprintf(&v11, "%s;%s");
  }
  ++*a4;
  free(a1);
  uint64_t v6 = v12;
  if (v12) {
    goto LABEL_13;
  }
  return v11;
}

char *sub_100097F08(char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = 0;
  v12[0] = 0;
  v12[1] = &a9;
  vasprintf(v12, a2, &a9);
  if (!v12[0]) {
    return a1;
  }
  if (!a1) {
    return v12[0];
  }
  asprintf(&v11, "%s%s", a1, v12[0]);
  if (v11) {
    free(a1);
  }
  else {
    uint64_t v11 = a1;
  }
  if (v12[0])
  {
    free(v12[0]);
    v12[0] = 0;
  }
  return v11;
}

char *sub_100097FA8(char *a1, int a2, const char *a3, int *a4)
{
  size_t v8 = 0;
  asprintf(&v8, "0x%08X", a2);
  if (v8)
  {
    a1 = sub_100097E18(a1, v8, a3, a4);
    if (v8) {
      free(v8);
    }
  }
  return a1;
}

char *sub_100098020(char *a1, int a2, const char *a3, int *a4)
{
  size_t v8 = 0;
  asprintf(&v8, "%d", a2);
  if (v8)
  {
    a1 = sub_100097E18(a1, v8, a3, a4);
    if (v8) {
      free(v8);
    }
  }
  return a1;
}

void sub_100098098(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)a1 == 1)
  {
    if (a2)
    {
      if (*(unsigned char *)(a1 + 104))
      {
        int v9 = 17;
        goto LABEL_14;
      }
      BOOL v10 = *(unsigned char *)(a1 + 101) == 0;
      int v9 = 5;
    }
    else
    {
      BOOL v10 = *(_DWORD *)(a1 + 88) == 2;
      int v9 = 1;
    }
  }
  else if (a2)
  {
    if (*(unsigned char *)(a1 + 104))
    {
      int v9 = 19;
      goto LABEL_14;
    }
    BOOL v10 = *(unsigned char *)(a1 + 101) == 0;
    int v9 = 7;
  }
  else
  {
    BOOL v10 = *(_DWORD *)(a1 + 88) == 2;
    int v9 = 3;
  }
  if (!v10) {
    ++v9;
  }
LABEL_14:
  *(_DWORD *)(a1 + 96) = v9;
  sub_100097244(a1, 5, off_10018E038[v9], a4, a5, a6, a7, a8);

  sub_100098920(a1, 1);
}

void sub_100098160(uint64_t a1, unsigned int a2, unsigned int a3, const __CFString **a4)
{
  CFTypeRef cf = 0;
  bzero(buffer, 0x400uLL);
  bzero(v46, 0x400uLL);
  if (a3 < 0x30)
  {
    if (*(_DWORD *)(a1 + 88) == 1) {
      uint64_t v16 = &off_10018D780[4 * a3];
    }
    else {
      uint64_t v16 = &off_10018D780[4 * a3 + 1];
    }
    CFStringGetCString(*v16, buffer, 1024, 0x8000100u);
    CFStringRef v17 = (const __CFString *)ramrod_copy_NVRAM_variable();
    if (!v17) {
      return;
    }
    CFStringRef v15 = v17;
    CFTypeID v18 = CFGetTypeID(v17);
    if (v18 == CFStringGetTypeID())
    {
      CFStringGetCString(v15, v46, 1024, 0x8000100u);
      *a4 = v15;
      CFStringRef v15 = 0;
      goto LABEL_22;
    }
    if (v18 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      if (!CFNumberGetValue((CFNumberRef)v15, kCFNumberIntType, &valuePtr))
      {
        uint64_t v27 = "CHECKPOINT_INTERNAL_ERROR(%s): number that is not an int %s\n";
        goto LABEL_29;
      }
      CFStringRef v26 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d", valuePtr);
      if (!v26)
      {
        uint64_t v27 = "CHECKPOINT_INTERNAL_ERROR(%s): failed to get valid number for %s\n";
LABEL_29:
        ramrod_log_msg(v27, v19, v20, v21, v22, v23, v24, v25, (char)"checkpoint_nvram_collect_var");
        goto LABEL_3;
      }
    }
    else
    {
      if (v18 != CFDataGetTypeID())
      {
        ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): unsupported nvram variable type for %s\n", v28, v29, v30, v31, v32, v33, v34, (char)"checkpoint_nvram_collect_var");
        goto LABEL_3;
      }
      CFStringRef v26 = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, (CFDataRef)v15, 0x8000100u);
      if (!v26)
      {
        ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): failed to get string from data %s\n", v35, v36, v37, v38, v39, v40, v41, (char)"checkpoint_nvram_collect_var");
        goto LABEL_3;
      }
    }
    CFStringRef v42 = v26;
    CFStringGetCString(v26, v46, 1024, 0x8000100u);
    *a4 = v42;
LABEL_22:
    int valuePtr = 0;
    if (a2 > 2) {
      uint64_t v43 = "Unknown";
    }
    else {
      uint64_t v43 = off_10018DD80[a2];
    }
    asprintf(&valuePtr, "%s NVRAM variable: %s=%s", v43, buffer, v46);
    if (valuePtr)
    {
      sub_100096304(a1, 2, 1, 0, 257, valuePtr, 0, 0, 0);
      free(valuePtr);
    }
    goto LABEL_3;
  }
  ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid variable id=%u\n", v8, v9, v10, v11, v12, v13, v14, (char)"checkpoint_nvram_collect_var");
  CFStringRef v15 = 0;
LABEL_3:
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
}

uint64_t sub_100098448(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v38, 0, sizeof(v38));
  unsigned int v10 = *a3;
  if (*a3)
  {
    unsigned __int8 v11 = 0;
    char v12 = 0;
    uint64_t v13 = a3 + 2;
    do
    {
      uint64_t v14 = v10;
      *((unsigned char *)v38 + v10) = 1;
      if (*(void *)(a2 + 8 * v10 + 8))
      {
        if (*((unsigned char *)v13 - 3)) {
          unsigned __int8 v11 = 1;
        }
        if (*((unsigned char *)v13 - 2)) {
          char v12 = 1;
        }
        if (*((unsigned char *)v13 - 1))
        {
          uint64_t v15 = v10 <= 0x2F && (LODWORD(off_10018D780[4 * v10 + 3]) - 2) < 3;
          sub_1000970F4(a1, v10, v15, 1, a5, a6, a7, a8);
        }
      }
      else if (*((unsigned char *)v13 - 4))
      {
        bzero(buffer, 0x400uLL);
        sub_1000986E8(a1, v14, buffer, v16, v17, v18, v19, v20);
        sub_100096FB8(a1, v21, "[check_collection]%s(does_not_exist)", buffer);
      }
      unsigned int v22 = *v13;
      v13 += 2;
      unsigned int v10 = v22;
    }
    while (v22);
  }
  else
  {
    char v12 = 0;
    unsigned __int8 v11 = 0;
  }
  uint64_t v23 = 0;
  uint64_t v24 = a2 + 16;
  do
  {
    if (!*((unsigned char *)v38 + v23 + 1) && *(void *)(v24 + 8 * v23))
    {
      bzero(buffer, 0x400uLL);
      bzero(v36, 0x400uLL);
      sub_1000986E8(a1, (v23 + 1), buffer, v25, v26, v27, v28, v29);
      sub_1000971F8(*(const __CFString **)(v24 + 8 * v23), v36);
      sub_100096FB8(a1, v30, "[check_collection]%s=%s(exists_when_not_expected)", buffer, v36);
      sub_1000970F4(a1, (v23 + 1), 0, 1, v31, v32, v33, v34);
    }
    ++v23;
  }
  while (v23 != 47);
  if (v12) {
    sub_100096304(a1, 2, 1, 0, 262, "Old restore failure indication(s)", 0, 0, 0);
  }
  return v11;
}

void sub_100098680(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = *(const __CFString **)(a2 + 24);
  if (v3 && CFEqual(v3, @"upgrade"))
  {
    sub_1000970F4(a1, 2, 1, 0, v4, v5, v6, v7);
  }
}

char *sub_1000986E8(uint64_t a1, uint64_t a2, char *buffer, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 >= 0x30)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid variable ID=%d\n", a2, (uint64_t)buffer, a4, a5, a6, a7, a8, (char)"checkpoint_get_nvram_name");
    LODWORD(a2) = 0;
  }
  if (*(_DWORD *)(a1 + 88) == 1) {
    unsigned int v10 = &off_10018D780[4 * a2];
  }
  else {
    unsigned int v10 = &off_10018D780[4 * a2 + 1];
  }
  CFStringGetCString(*v10, buffer, 1024, 0x8000100u);
  return buffer;
}

void sub_100098774(unsigned char *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1[100])
  {
    a1[104] = 1;
    a1[101] = 1;
    ramrod_log_msg("AP nonce will not be touched\n", (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    bzero(v12, 0x400uLL);
    sub_1000971F8(a2, v12);
    sub_100096FB8((uint64_t)a1, v11, "[reboot_retry_chassis]outcome=%s(pre_existing_reboot_retry_disabled)", v12);
  }
}

void sub_10009885C(const __CFString *a1)
{
  bzero(buffer, 0x400uLL);
  CFStringGetCString(a1, buffer, 1024, 0x8000100u);
  ramrod_delete_NVRAM_variable();
}

void sub_100098920(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 92);
  if (v3 > 0x21) {
    uint64_t v4 = "unknown";
  }
  else {
    uint64_t v4 = off_10018E038[v3];
  }
  uint64_t v5 = *(unsigned int *)(a1 + 96);
  if (v5 > 0x21) {
    uint64_t v6 = "unknown";
  }
  else {
    uint64_t v6 = off_10018E038[v5];
  }
  asprintf(&v7, "%s (%s) -> (%s)", off_10018DD98[a2], v4, v6);
  if (v7)
  {
    sub_100096304(a1, 29, 1, 0, 260, v7, 0, 0, 0);
    if (v7) {
      free(v7);
    }
  }
}

uint64_t sub_1000989E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (a2 > 0x2F)
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid variable ID=%d\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_adjust_id");
      LODWORD(a2) = 0;
      goto LABEL_7;
    }
    LODWORD(a2) = off_10018D780[4 * a2 + 2];
  }
  if (a2 >= 0x30)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a2;
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v10 = a2;
  uint64_t v9 = HIDWORD(off_10018D780[4 * a2 + 2]);
LABEL_8:
  uint64_t v11 = checkpoint_nvram_encoder[v9];
  uint64_t v12 = *(void *)(a1 + 16 * v10 + 1496);

  return ((uint64_t (*)(uint64_t, uint64_t))v11)(a1, v12);
}

void sub_100098AA0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a3;
  if (*(unsigned char *)(a1 + 104))
  {
    if (a2 > 0x2F)
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid variable ID=%d\n", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"checkpoint_nvram_adjust_id");
      uint64_t v11 = 0;
      goto LABEL_7;
    }
    a2 = LODWORD(off_10018D780[4 * a2 + 2]);
  }
  if (a2 > 0x2F) {
    goto LABEL_18;
  }
  uint64_t v11 = a2;
LABEL_7:
  if ((0x20420400uLL >> v11))
  {
    a2 = *(void *)(a1 + 16 * v11 + 1496);
    if (a2) {
      goto LABEL_21;
    }
  }
  if ((0x1001100uLL >> v11))
  {
    uint64_t v12 = *(void *)(a1 + 16 * v11 + 1496);
    if (v12)
    {
      unint64_t v13 = 0;
      a2 = v12 - 16;
      do
      {
        int v15 = *(_DWORD *)(a2 + 16);
        a2 += 16;
        int v14 = v15;
        if (v15) {
          BOOL v16 = v13 >= 7;
        }
        else {
          BOOL v16 = 1;
        }
        ++v13;
      }
      while (!v16);
      if (!v14)
      {
LABEL_21:
        *(_DWORD *)a2 = v9;
        sub_100098F7C(a1 + 1456, (char **)(a2 + 8), a4, (uint64_t)a4, a5, a6, a7, a8);
        *(unsigned char *)(a1 + 16 * v11 + 1492) = 1;
        return;
      }
    }
  }
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 1476);
  if (!v17)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): {%s} tracking information lost on store [%s]\n", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"checkpoint_nvram_store_lost");
    int v17 = *(_DWORD *)(a1 + 1476);
  }
  *(_DWORD *)(a1 + 1476) = v17 + 1;
}

void sub_100098BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (a2 > 0x2F)
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid variable ID=%d\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_adjust_id");
      uint64_t v10 = 0;
      goto LABEL_7;
    }
    a2 = LODWORD(off_10018D780[4 * a2 + 2]);
  }
  if (a2 > 0x2F) {
    goto LABEL_10;
  }
  uint64_t v10 = a2;
LABEL_7:
  if ((0x3C03C0000uLL >> v10))
  {
    uint64_t v11 = a1 + 16 * v10;
    uint64_t v12 = *(uint64_t **)(v11 + 1496);
    if (v12)
    {
      *uint64_t v12 = a3;
      *(unsigned char *)(v11 + 1492) = 1;
      return;
    }
  }
LABEL_10:
  int v13 = *(_DWORD *)(a1 + 1476);
  if (!v13)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): {%s} tracking information lost on store [%s]\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_store_lost");
    int v13 = *(_DWORD *)(a1 + 1476);
  }
  *(_DWORD *)(a1 + 1476) = v13 + 1;
}

void sub_100098CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  int v10 = a3;
  if (*(unsigned char *)(a1 + 104))
  {
    if (a2 > 0x2F)
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid variable ID=%d\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_adjust_id");
      uint64_t v12 = 0;
      goto LABEL_7;
    }
    a2 = LODWORD(off_10018D780[4 * a2 + 2]);
  }
  if (a2 > 0x2F) {
    goto LABEL_8;
  }
  uint64_t v12 = a2;
LABEL_7:
  if (((0xA00A000uLL >> v12) & 1) != 0 && v9 <= 7)
  {
    int v14 = *(_DWORD **)(a1 + 16 * v12 + 1496);
    if (v14)
    {
      unint64_t v15 = 0;
      BOOL v16 = 0;
      int v17 = *(_DWORD **)(a1 + 16 * v12 + 1496);
      do
      {
        int v19 = *v17;
        v17 += 11;
        int v18 = v19;
        if (v19) {
          BOOL v20 = 1;
        }
        else {
          BOOL v20 = v10 == 0;
        }
        if (!v20) {
          BOOL v16 = v14;
        }
        BOOL v21 = v18 == v10 || v15++ >= 7;
        int v14 = v17;
      }
      while (!v21);
      if (v18 == v10) {
        BOOL v16 = v17 - 11;
      }
      if (v16)
      {
        *BOOL v16 = v10;
        v16[v9 + 1] = v8;
        *((unsigned char *)v16 + v9 + 36) = 1;
        *(unsigned char *)(a1 + 16 * v12 + 1492) = 1;
        return;
      }
    }
  }
LABEL_8:
  int v13 = *(_DWORD *)(a1 + 1476);
  if (!v13)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): {%s} tracking information lost on store [%s]\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_store_lost");
    int v13 = *(_DWORD *)(a1 + 1476);
  }
  *(_DWORD *)(a1 + 1476) = v13 + 1;
}

void sub_100098E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a4;
  int v10 = a3;
  if (*(unsigned char *)(a1 + 104))
  {
    if (a2 > 0x2F)
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid variable ID=%d\n", a2, a3, a4, (uint64_t)a5, a6, a7, a8, (char)"checkpoint_nvram_adjust_id");
      uint64_t v12 = 0;
      goto LABEL_7;
    }
    a2 = LODWORD(off_10018D780[4 * a2 + 2]);
  }
  if (a2 > 0x2F) {
    goto LABEL_8;
  }
  uint64_t v12 = a2;
LABEL_7:
  if (((0x14014000uLL >> v12) & 1) != 0 && v9 <= 7)
  {
    int v14 = *(_DWORD **)(a1 + 16 * v12 + 1496);
    if (v14)
    {
      unint64_t v15 = 0;
      BOOL v16 = 0;
      int v17 = *(_DWORD **)(a1 + 16 * v12 + 1496);
      do
      {
        int v19 = *v17;
        v17 += 18;
        int v18 = v19;
        if (v19) {
          BOOL v20 = 1;
        }
        else {
          BOOL v20 = v10 == 0;
        }
        if (!v20) {
          BOOL v16 = v14;
        }
        BOOL v21 = v18 == v10 || v15++ >= 7;
        int v14 = v17;
      }
      while (!v21);
      if (v18 == v10) {
        BOOL v16 = v17 - 18;
      }
      if (v16)
      {
        *BOOL v16 = v10;
        sub_100098F7C(a1 + 1456, (char **)&v16[2 * v9 + 2], a5, a4, (uint64_t)a5, a6, a7, a8);
        *(unsigned char *)(a1 + 16 * v12 + 1492) = 1;
        return;
      }
    }
  }
LABEL_8:
  int v13 = *(_DWORD *)(a1 + 1476);
  if (!v13)
  {
    ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): {%s} tracking information lost on store [%s]\n", a2, a3, a4, (uint64_t)a5, a6, a7, a8, (char)"checkpoint_nvram_store_lost");
    int v13 = *(_DWORD *)(a1 + 1476);
  }
  *(_DWORD *)(a1 + 1476) = v13 + 1;
}

void sub_100098F7C(uint64_t a1, char **a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    if (*a2)
    {
      free(*a2);
      *a2 = 0;
    }
    if (a3) {
      asprintf(a2, "%s", a3);
    }
  }
  else
  {
    int v11 = *(_DWORD *)(a1 + 20);
    if (!v11)
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): {%s} tracking information lost on store [%s]\n", 0, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_store_lost");
      int v11 = *(_DWORD *)(a1 + 20);
    }
    *(_DWORD *)(a1 + 20) = v11 + 1;
  }
}

char *sub_100099024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = (char *)sub_1000989E8(a1, a2, a3, a4, a5, a6, a7, a8);
  int v10 = 0;
  if (result)
  {
    CFStringRef v9 = (const __CFString *)result;
    bzero(buffer, 0x400uLL);
    CFStringGetCString(v9, buffer, 1024, 0x8000100u);
    asprintf(&v10, "%s", buffer);
    CFRelease(v9);
    return v10;
  }
  return result;
}

char *sub_1000990D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = 0;
  if (*(unsigned char *)(a1 + 104))
  {
    if (a3 > 0x2F)
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): invalid variable ID=%d\n", a2, a3, a4, a5, a6, a7, a8, (char)"checkpoint_nvram_adjust_id");
      LODWORD(a3) = 0;
    }
    else
    {
      LODWORD(a3) = off_10018D780[4 * a3 + 2];
    }
  }
  CFStringRef v9 = *(const __CFString **)(a2 + 8 * a3 + 8);
  if (!v9) {
    return 0;
  }
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v9, buffer, 1024, 0x8000100u);
  asprintf(&v11, "%s", buffer);
  return v11;
}

char *sub_1000991CC(char *a1, char a2, const __CFString *a3, unsigned char *a4)
{
  if (a3)
  {
    bzero(buffer, 0x400uLL);
    CFStringGetCString(a3, buffer, 1024, 0x8000100u);
    if (*a4) {
      int v14 = "|%s(%s)";
    }
    else {
      int v14 = "%s(%s)";
    }
    a1 = sub_100097F08(a1, v14, v8, v9, v10, v11, v12, v13, a2);
    *a4 = 1;
  }
  return a1;
}

void sub_1000992A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 2274) && sub_100095A0C(a1, 0, 0, a4, a5, a6, a7, a8))
  {
    CFStringRef v9 = *(const __CFString **)(a1 + 992);
    if (!v9) {
      goto LABEL_23;
    }
    bzero(&v28[4], 0x3FCuLL);
    *(_DWORD *)(a1 + 2276) = 0;
    *(void *)(a1 + 2288) = 0;
    bzero(v30, 0x3FBuLL);
    strcpy(__s, "SIM_");
    size_t v10 = strlen(__s);
    CFStringGetCString(v9, &__s[v10], 1024 - v10, 0x8000100u);
    strcpy(v28, "SIM");
    size_t v11 = strlen(v28);
    CFStringGetCString(*(CFStringRef *)(a1 + 992), &v28[v11], 1024 - v11, 0x8000100u);
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = off_10018DE08[v12];
      if (!strncasecmp(__s, v13, 0x400uLL))
      {
        *(_DWORD *)(a1 + 2276) = v12;
        goto LABEL_11;
      }
      if (!strncasecmp(v28, v13, 0x400uLL)) {
        break;
      }
      if (++v12 == 34)
      {
        LODWORD(v12) = *(_DWORD *)(a1 + 2276);
        goto LABEL_11;
      }
    }
    *(_DWORD *)(a1 + 2276) = v12;
    *(unsigned char *)(a1 + 2275) = 1;
LABEL_11:
    if (!v12) {
      goto LABEL_23;
    }
    CFStringRef v20 = *(const __CFString **)(a1 + 1016);
    if (v20)
    {
      CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, v20, @",");
      *(void *)(a1 + 2288) = ArrayBySeparatingStrings;
      if (ArrayBySeparatingStrings)
      {
        CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
        if (Count >= 1)
        {
          CFIndex v23 = Count;
          for (CFIndex i = 0; i != v23; ++i)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 2288), i);
            CFStringGetCStringPtr(ValueAtIndex, 0x8000100u);
          }
        }
        CFStringRef v26 = *(const __CFString **)(a1 + 1000);
        if (v26) {
          *(_DWORD *)(a1 + 2280) = CFStringGetIntValue(v26);
        }
        CFStringRef v27 = *(const __CFString **)(a1 + 1008);
        if (v27) {
          *(_DWORD *)(a1 + 2284) = CFStringGetIntValue(v27);
        }
        goto LABEL_23;
      }
    }
    else
    {
      ramrod_log_msg("CHECKPOINT_INTERNAL_ERROR(%s): simulator command without stepName\n", 0, v14, v15, v16, v17, v18, v19, (char)"checkpoint_simulator_configure");
    }
    *(_DWORD *)(a1 + 2276) = 0;
LABEL_23:
    *(unsigned char *)(a1 + 2274) = 1;
  }
}

void *sub_1000994BC()
{
  uint64_t v5 = 0;
  io_object_t v0 = &v5;
  size_t v1 = 0x100000;
  do
  {
    CFStringRef v2 = malloc(v1);
    UInt8 *v0 = v2;
    if (v2)
    {
      bzero(v2, v1);
      io_object_t v0 = (void **)*v0;
    }
    else
    {
      v1 >>= 1;
    }
  }
  while ((int)v1 > 4095);
  uint64_t result = v5;
  if (v5)
  {
    do
    {
      uint64_t v4 = (void *)*result;
      free(result);
      uint64_t result = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t ramrod_hardware_partition_supports_bics()
{
  return sub_10009953C();
}

uint64_t sub_10009953C()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  CFBooleanRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 == CFBooleanGetTypeID()) {
    uint64_t Value = CFBooleanGetValue(v1);
  }
  else {
    uint64_t Value = 0;
  }
  CFRelease(v1);
  return Value;
}

uint64_t ramrod_device_has_baseband()
{
  return 0;
}

CFDictionaryRef ramrod_device_has_stockholm()
{
  CFDictionaryRef result = IOServiceMatching("AppleStockholmControl");
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)IOServiceGetMatchingService(kIOMasterPortDefault, result);
    if (result)
    {
      IOObjectRelease((io_object_t)result);
      return (const __CFDictionary *)1;
    }
  }
  return result;
}

void sub_1000995F0(uint64_t a1, uint64_t a2)
{
}

void sub_100099600(uint64_t a1)
{
}

uint64_t _ramrod_device_has_sandcat()
{
  if (qword_1001B8240 != -1) {
    dispatch_once(&qword_1001B8240, &stru_10018E258);
  }
  return byte_1001B8238;
}

void sub_100099650(id a1)
{
  io_registry_entry_t v1 = IORegistryEntryFromPath(kIOMasterPortDefault, "IODeviceTree:/arm-io/sep/iop-sep-nub/Sandcat");
  if (v1)
  {
    byte_1001B8238 = 1;
    IOObjectRelease(v1);
  }
}

uint64_t ramrod_connect_to_ioservice(const char *a1, io_service_t *a2, io_connect_t *a3)
{
  char v5 = (char)a1;
  CFDictionaryRef v6 = IOServiceMatching(a1);
  if (v6)
  {
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
    if (MatchingService)
    {
      io_service_t v22 = MatchingService;
      io_connect_t connect = 0;
      if (!IOServiceOpen(MatchingService, mach_task_self_, 0, &connect))
      {
        *a2 = v22;
        *a3 = connect;
        return 1;
      }
      ramrod_log_msg("IOServiceOpen failed for class '%s'\n", v23, v24, v25, v26, v27, v28, v29, v5);
    }
    else
    {
      ramrod_log_msg("IOServiceGetMatchingService failed\n", v15, v16, v17, v18, v19, v20, v21, v31);
    }
  }
  else
  {
    ramrod_log_msg("IOServiceMatching failed for %s\n", v7, v8, v9, v10, v11, v12, v13, v5);
  }
  return 0;
}

uint64_t ramrod_generate_apslot_copy_nonce(_DWORD *a1, CFDataRef *a2)
{
  size_t v35 = 4;
  *(void *)connection = 0;
  size_t v34 = 32;
  *(_OWORD *)bytes = 0u;
  long long v38 = 0u;
  if (!ramrod_connect_to_ioservice("AppleMobileApNonce", &connection[1], connection))
  {
    ramrod_log_msg("Failed to connect to AppleMobileApNonce to generate AP nonce slot.\n", v4, v5, v6, v7, v8, v9, v10, outputStruct);
    goto LABEL_5;
  }
  mach_port_t v11 = connection[0];
  mach_error_t v12 = IOConnectCallMethod(connection[0], 0xC8u, 0, 0, 0, 0, 0, 0, bytes, &v34);
  if (v12)
  {
    mach_error_string(v12);
    ramrod_log_msg("IOConnectCallMethod(%s,%u) failed: %s\n", v13, v14, v15, v16, v17, v18, v19, (char)"AppleMobileApNonce");
LABEL_5:
    uint64_t v20 = 0;
    goto LABEL_6;
  }
  uint64_t v20 = (int *)calloc(1uLL, 4uLL);
  mach_error_t v25 = IOConnectCallMethod(v11, 0xCBu, 0, 0, 0, 0, 0, 0, v20, &v35);
  if (v25)
  {
    mach_error_string(v25);
    ramrod_log_msg("IOConnectCallMethod(%s,%u) failed: %s\n", v26, v27, v28, v29, v30, v31, v32, (char)"AppleMobileApNonce");
LABEL_6:
    int v21 = 0;
    CFDataRef v22 = 0;
    uint64_t v23 = 0;
    if (!a1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v21 = *v20;
  CFDataRef v22 = CFDataCreate(kCFAllocatorDefault, bytes, 32);
  uint64_t v23 = 1;
  if (a1) {
LABEL_7:
  }
    *a1 = v21;
LABEL_8:
  if (a2)
  {
    *a2 = v22;
  }
  else if (v22)
  {
    CFRelease(v22);
  }
  if (v20) {
    free(v20);
  }
  if (connection[1]) {
    IOObjectRelease(connection[1]);
  }
  if (connection[0]) {
    IOObjectRelease(connection[0]);
  }
  return v23;
}

uint64_t ramrod_generate_sepslot_copy_nonce(_DWORD *a1, CFDataRef *a2)
{
  *(void *)bytes = 0;
  uint64_t v30 = 0;
  int v31 = 0;
  CFIndex length = 20;
  *(void *)connection = 0;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  if (ramrod_connect_to_ioservice("AppleSEPManager", &connection[1], connection))
  {
    io_object_t v11 = connection[0];
    mach_error_t v12 = IOConnectCallMethod(connection[0], 0x53u, 0, 0, 0, 0, &output, &outputCnt, bytes, (size_t *)&length);
    if (v12)
    {
      mach_error_string(v12);
      ramrod_log_msg("IOConnectCallMethod(%s,%u) failed: %s\n", v13, v14, v15, v16, v17, v18, v19, (char)"AppleSEPManager");
      uint64_t v20 = 0;
      int v21 = 0;
      CFDataRef v22 = 0;
    }
    else
    {
      int v21 = output;
      CFDataRef v22 = CFDataCreate(kCFAllocatorDefault, bytes, length);
      uint64_t v20 = 1;
    }
    if (connection[1]) {
      IOObjectRelease(connection[1]);
    }
    if (v11) {
      IOObjectRelease(v11);
    }
    if (a1) {
      *a1 = v21;
    }
    if (a2)
    {
      *a2 = v22;
    }
    else if (v22)
    {
      CFRelease(v22);
    }
  }
  else
  {
    ramrod_log_msg("Failed to connect to AppleSEPManager to generate sep nonce.\n", v4, v5, v6, v7, v8, v9, v10, outputStruct);
    return 0;
  }
  return v20;
}

uint64_t ramrod_should_do_legacy_restored_behaviors()
{
  return 0;
}

uint64_t ramrod_should_do_legacy_restored_internal_behaviors()
{
  return 0;
}

void ramrod_create_error_cf(CFErrorRef *a1, const __CFString *a2, CFIndex a3, const void *a4, const __CFString *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_100099AF0(CFErrorRef *a1, const __CFString *a2, CFIndex a3, const void *a4, const __CFString *a5, va_list a6)
{
  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      uint64_t v13 = Mutable;
      CFStringRef v14 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0, a5, a6);
      if (v14)
      {
        CFStringRef v15 = v14;
        CFDictionaryAddValue(v13, kCFErrorDescriptionKey, v14);
        CFRelease(v15);
      }
      if (a4) {
        CFDictionaryAddValue(v13, kCFErrorUnderlyingErrorKey, a4);
      }
      *a1 = CFErrorCreate(kCFAllocatorDefault, a2, a3, v13);
      CFRelease(v13);
    }
  }
}

CFDictionaryRef ramrod_should_update_stockholm(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    ramrod_log_msg("Skipping checking stockholm for booted update\n", a2, a3, a4, a5, a6, a7, a8, vars0);
    return 0;
  }
  else
  {
    return ramrod_device_has_stockholm();
  }
}

uint64_t ramrod_copy_updater_functions(void *a1, const char *a2, __CFDictionary *(***a3)(const __CFDictionary *a1, uint64_t a2, uint64_t a3, CFErrorRef *a4), CFErrorRef *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2 || !a3)
  {
    ramrod_create_error_cf(a4, @"RamrodErrorDomain", 3, 0, @"%s: invalid parameters", a6, a7, a8, (char)"ramrod_copy_updater_functions");
    return 0;
  }
  *a3 = 0;
  mach_error_t v12 = (__CFDictionary *(**)(const __CFDictionary *, uint64_t, uint64_t, CFErrorRef *))malloc(0x18uLL);
  if (!v12)
  {
    ramrod_create_error_cf(a4, @"RamrodErrorDomain", 6, 0, @"%s: failed to allocate tmp update_functions struct", v13, v14, v15, (char)"ramrod_copy_updater_functions");
    return 0;
  }
  uint64_t v16 = v12;
  *mach_error_t v12 = 0;
  v12[1] = 0;
  v12[2] = 0;
  if (!strcmp(a2, "Canary"))
  {
    *uint64_t v16 = sub_100099EEC;
    v16[1] = (__CFDictionary *(*)(const __CFDictionary *, uint64_t, uint64_t, CFErrorRef *))sub_10009A000;
    void v16[2] = (__CFDictionary *(*)(const __CFDictionary *, uint64_t, uint64_t, CFErrorRef *))sub_10009A038;
  }
  else
  {
    int v21 = (__CFDictionary *(*)(const __CFDictionary *, uint64_t, uint64_t, CFErrorRef *))sub_100099DC8(a1, (uint64_t)a2, (uint64_t)"UpdaterCreate", a4, v17, v18, v19, v20);
    *uint64_t v16 = v21;
    if (!v21
      || (uint64_t v26 = (__CFDictionary *(*)(const __CFDictionary *, uint64_t, uint64_t, CFErrorRef *))sub_100099DC8(a1, (uint64_t)a2, (uint64_t)"UpdaterIsDone", a4, v22, v23, v24, v25),
          (v16[1] = v26) == 0)
      || (int v31 = (__CFDictionary *(*)(const __CFDictionary *, uint64_t, uint64_t, CFErrorRef *))sub_100099DC8(a1, (uint64_t)a2, (uint64_t)"UpdaterExecCommand", a4, v27, v28, v29, v30),
          (void v16[2] = v31) == 0))
    {
      free(v16);
      return 0;
    }
  }
  *a3 = v16;
  return 1;
}

void *sub_100099DC8(void *a1, uint64_t a2, uint64_t a3, CFErrorRef *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && a3)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)__symbol = 0u;
    long long v15 = 0u;
    __strlcpy_chk();
    __strlcat_chk();
    CFDictionaryRef result = dlsym(a1, __symbol);
    if (result) {
      return result;
    }
    dlerror();
    ramrod_create_error_cf(a4, @"RamrodErrorDomain", 1012, 0, @"%s: unable to find %s: %s", v11, v12, v13, (char)"load_function");
  }
  else
  {
    ramrod_create_error_cf(a4, @"RamrodErrorDomain", 3, 0, @"%s: invalid parameters", a6, a7, a8, (char)"load_function");
  }
  return 0;
}

__CFDictionary *sub_100099EEC(const __CFDictionary *a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    if (a1)
    {
      uint64_t Value = CFDictionaryGetValue(a1, @"Options");
      if (Value) {
        CFDictionarySetValue(Mutable, @"Options", Value);
      }
    }
    CFDictionarySetValue(Mutable, @"IsDone", kCFBooleanFalse);
    CFDictionarySetValue(Mutable, @"Loop0", kCFBooleanTrue);
    CFDictionarySetValue(Mutable, @"QueryLoop0", kCFBooleanTrue);
  }
  else
  {
    ramrod_create_error_cf(a4, @"RamrodErrorDomain", 6, 0, @"%s: state allocation failed", v6, v7, v8, (char)"_CanaryUpdaterCreate");
  }
  return Mutable;
}

CFDictionaryRef sub_10009A000(const __CFDictionary *result)
{
  if (result)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(result, @"IsDone");
    return (const __CFDictionary *)CFBooleanGetValue(Value);
  }
  return result;
}

uint64_t sub_10009A038(const __CFDictionary *a1, CFStringRef theString1, uint64_t a3, CFMutableDictionaryRef *a4, CFErrorRef *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    CFStringRef v12 = @"%s: state is NULL";
    goto LABEL_7;
  }
  if (!theString1)
  {
    CFStringRef v12 = @"%s: command is NULL";
    goto LABEL_7;
  }
  if (!a4)
  {
    CFStringRef v12 = @"%s: output is NULL";
    goto LABEL_7;
  }
  if (CFStringCompare(theString1, @"queryInfo", 0))
  {
    if (CFStringCompare(theString1, @"performNextStage", 0))
    {
      CFStringRef v12 = @"%s: %@ invalid command";
LABEL_7:
      ramrod_create_error_cf(a5, @"RamrodErrorDomain", 3, 0, v12, a6, a7, a8, (char)"_CanaryUpdaterExecCmd");
      return 0;
    }
    CFDictionaryGetValue(a1, @"Loop0");
    AMSupportLogInternal();
    if (CFDictionaryGetValue(a1, @"Loop0") == kCFBooleanFalse) {
      CFDictionarySetValue(a1, @"IsDone", kCFBooleanTrue);
    }
    CFStringRef v20 = @"Loop0";
    long long v21 = a1;
    CFBooleanRef v22 = kCFBooleanFalse;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *a4 = Mutable;
    if (!Mutable)
    {
      ramrod_create_error_cf(a5, @"RamrodErrorDomain", 6, 0, @"%s: *output allocation failed", v15, v16, v17, (char)"_CanaryUpdaterExecCmd");
      return 0;
    }
    CFDictionaryGetValue(a1, @"QueryLoop0");
    AMSupportLogInternal();
    CFDictionarySetValue(*a4, @"ECID", @"1234567890");
    long long v18 = *a4;
    CFBooleanRef Value = CFDictionaryGetValue(a1, @"QueryLoop0");
    CFDictionarySetValue(v18, @"QueryLoop0", Value);
    CFDictionarySetValue(*a4, @"LocalSigningID", kCFBooleanTrue);
    if (CFDictionaryGetValue(a1, @"QueryLoop0") == kCFBooleanFalse) {
      CFDictionarySetValue(a1, @"IsDone", kCFBooleanTrue);
    }
    CFStringRef v20 = @"QueryLoop0";
    long long v21 = a1;
    CFBooleanRef v22 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v21, v20, v22);
  return 1;
}