void sub_100005288(id a1)
{
  uint64_t vars8;

  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000052CC(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005310(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005658(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000569C(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005970(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000059B4(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005C88(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005CCC(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005FAC(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005FF0(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000064A8(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100006790(id a1)
{
  qword_10015B198 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100006A10(id a1)
{
  qword_10015B1A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100006A54(id a1)
{
  qword_10015B1A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100007284(id a1)
{
  qword_10015B1A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

unint64_t ProtocolVersion_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10015B1B0))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"ProtocolVersion" valueNames:"UnknownVersion" values:&unk_100109F48 count:5 enumVerifier:ProtocolVersion_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10015B1B0, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10015B1B0);
}

BOOL ProtocolVersion_IsValidValue(unsigned int a1)
{
  return a1 < 4 || a1 == 999999999;
}

unint64_t Application_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10015B1B8))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"Application" valueNames:"UnknownApplication" values:&unk_100109FD8 count:7 enumVerifier:Application_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10015B1B8, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10015B1B8);
}

BOOL Application_IsValidValue(unsigned int a1)
{
  return a1 < 7;
}

unint64_t Status_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10015B1C0))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"Status" valueNames:"UnknownStatus" values:&unk_10010A03C count:6 enumVerifier:Status_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10015B1C0, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10015B1C0);
}

uint64_t Status_IsValidValue(unsigned int a1)
{
  return (a1 < 8) & (0xEBu >> a1);
}

unint64_t VRFType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10015B1C8))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"VRFType" valueNames:"UnknownVrf" values:&unk_10010A080 count:2 enumVerifier:VRFType_IsValidValue flags:0 extraTextFormatInfo:&unk_10010A088];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10015B1C8, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10015B1C8);
}

BOOL VRFType_IsValidValue(int a1)
{
  return !a1 || a1 == 3;
}

unint64_t LogType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10015B1D0))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"LogType" valueNames:"UnknownLog" values:&unk_10010A0EC count:7 enumVerifier:LogType_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10015B1D0, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10015B1D0);
}

BOOL LogType_IsValidValue(unsigned int a1)
{
  return a1 < 7;
}

unint64_t MapType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10015B1D8))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"MapType" valueNames:"UnknownMap" values:&unk_10010A138 count:3 enumVerifier:MapType_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10015B1D8, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10015B1D8);
}

BOOL MapType_IsValidValue(unsigned int a1)
{
  return a1 < 3;
}

unint64_t NodeType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10015B1E0))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"NodeType" valueNames:"PaclNode" values:&unk_10010A1A0 count:9 enumVerifier:NodeType_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10015B1E0, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10015B1E0);
}

BOOL NodeType_IsValidValue(unsigned int a1)
{
  return a1 < 9;
}

unint64_t Signature_SignatureAlgorithm_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10015B1E8))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"Signature_SignatureAlgorithm" valueNames:"Unknown" values:&unk_10010A1DC count:2 enumVerifier:Signature_SignatureAlgorithm_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10015B1E8, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10015B1E8);
}

BOOL Signature_SignatureAlgorithm_IsValidValue(unsigned int a1)
{
  return a1 < 2;
}

uint64_t VRFWitness_Type_RawValue(uint64_t a1)
{
  id v2 = [[+[VRFWitness descriptor](VRFWitness, "descriptor") fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetVRFWitness_Type_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[VRFWitness descriptor](VRFWitness, "descriptor") fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t VRFPublicKey_Type_RawValue(uint64_t a1)
{
  id v2 = [[+[VRFPublicKey descriptor](VRFPublicKey, "descriptor") fieldWithNumber:2];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetVRFPublicKey_Type_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[VRFPublicKey descriptor](VRFPublicKey, "descriptor") fieldWithNumber:2];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t Signature_Algorithm_RawValue(uint64_t a1)
{
  id v2 = [[+[Signature descriptor](Signature, "descriptor") fieldWithNumber:3];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetSignature_Algorithm_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[Signature descriptor](Signature, "descriptor") fieldWithNumber:3];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t LogHead_LogType_RawValue(uint64_t a1)
{
  id v2 = [[+[LogHead descriptor](LogHead) fieldWithNumber:5];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetLogHead_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[LogHead descriptor](LogHead, "descriptor") fieldWithNumber:5];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t LogHead_Application_RawValue(uint64_t a1)
{
  id v2 = [[+[LogHead descriptor](LogHead, "descriptor") fieldWithNumber:6];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetLogHead_Application_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[LogHead descriptor](LogHead, "descriptor") fieldWithNumber:6];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t LogEntry_LogType_RawValue(uint64_t a1)
{
  id v2 = [[+[LogEntry descriptor](LogEntry) fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetLogEntry_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[LogEntry descriptor](LogEntry) fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t LogEntry_NodeType_RawValue(uint64_t a1)
{
  id v2 = [[+[LogEntry descriptor](LogEntry) fieldWithNumber:6];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetLogEntry_NodeType_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[LogEntry descriptor](LogEntry) fieldWithNumber:6];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t MapHead_Application_RawValue(uint64_t a1)
{
  id v2 = [[+[MapHead descriptor](MapHead) fieldWithNumber:3];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetMapHead_Application_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[MapHead descriptor](MapHead) fieldWithNumber:3];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t MapHead_MapType_RawValue(uint64_t a1)
{
  id v2 = [[+[MapHead descriptor](MapHead) fieldWithNumber:6];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetMapHead_MapType_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[MapHead descriptor](MapHead) fieldWithNumber:6];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t PerApplicationTreeConfigNode_EarliestVersion_RawValue(uint64_t a1)
{
  id v2 = [[+[PerApplicationTreeConfigNode descriptor](PerApplicationTreeConfigNode) fieldWithNumber:3];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetPerApplicationTreeConfigNode_EarliestVersion_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[PerApplicationTreeConfigNode descriptor](PerApplicationTreeConfigNode) fieldWithNumber:3];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t TopLevelTreeConfigNode_EarliestVersion_RawValue(uint64_t a1)
{
  id v2 = [[+[TopLevelTreeConfigNode descriptor](TopLevelTreeConfigNode) fieldWithNumber:3];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetTopLevelTreeConfigNode_EarliestVersion_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[TopLevelTreeConfigNode descriptor](TopLevelTreeConfigNode) fieldWithNumber:3];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t LogClosedNode_EarliestVersionForNextTree_RawValue(uint64_t a1)
{
  id v2 = [[+[LogClosedNode descriptor](LogClosedNode, "descriptor") fieldWithNumber:3];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetLogClosedNode_EarliestVersionForNextTree_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[LogClosedNode descriptor](LogClosedNode, "descriptor") fieldWithNumber:3];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ConsistencyProofRequest_Version_RawValue(uint64_t a1)
{
  id v2 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetConsistencyProofRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ConsistencyProofRequest_LogType_RawValue(uint64_t a1)
{
  id v2 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:3];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetConsistencyProofRequest_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:3];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ConsistencyProofRequest_Application_RawValue(uint64_t a1)
{
  id v2 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor") fieldWithNumber:4];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetConsistencyProofRequest_Application_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:4];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ConsistencyProofResponse_Status_RawValue(uint64_t a1)
{
  id v2 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse) fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetConsistencyProofResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse) fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ConsistencyProofResponse_LogType_RawValue(uint64_t a1)
{
  id v2 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor") fieldWithNumber:4];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetConsistencyProofResponse_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor") fieldWithNumber:4];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ConsistencyProofResponse_Application_RawValue(uint64_t a1)
{
  id v2 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor") fieldWithNumber:5];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetConsistencyProofResponse_Application_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor") fieldWithNumber:5];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t RevisionLogInclusionProofRequest_Version_RawValue(uint64_t a1)
{
  id v2 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest, "descriptor") fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetRevisionLogInclusionProofRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest) fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t RevisionLogInclusionProofRequest_Application_RawValue(uint64_t a1)
{
  id v2 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest) fieldWithNumber:2];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetRevisionLogInclusionProofRequest_Application_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest) fieldWithNumber:2];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t RevisionLogInclusionProofRequest_LogType_RawValue(uint64_t a1)
{
  id v2 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest) fieldWithNumber:3];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetRevisionLogInclusionProofRequest_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest, "descriptor") fieldWithNumber:3];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t RevisionLogInclusionProofResponse_Status_RawValue(uint64_t a1)
{
  id v2 = [[+[RevisionLogInclusionProofResponse descriptor](RevisionLogInclusionProofResponse, "descriptor") fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetRevisionLogInclusionProofResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[RevisionLogInclusionProofResponse descriptor](RevisionLogInclusionProofResponse, "descriptor") fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t PublicKeysRequest_Version_RawValue(uint64_t a1)
{
  id v2 = [[+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor") fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetPublicKeysRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor") fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t PublicKeysRequest_Application_RawValue(uint64_t a1)
{
  id v2 = [[+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor") fieldWithNumber:2];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetPublicKeysRequest_Application_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor") fieldWithNumber:2];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t PublicKeysResponse_Status_RawValue(uint64_t a1)
{
  id v2 = [[+[PublicKeysResponse descriptor](PublicKeysResponse, "descriptor") fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetPublicKeysResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[PublicKeysResponse descriptor](PublicKeysResponse, "descriptor") fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

void sub_100009428(id a1)
{
  qword_10015B2B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009560(id a1)
{
  qword_10015B2B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000099E0(id a1)
{
  qword_10015B2B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009A24(id a1)
{
  qword_10015B2B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009F9C(id a1)
{
  qword_10015B2C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009FE0(id a1)
{
  qword_10015B2C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000A1CC(id a1)
{
  qword_10015B2C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

BOOL sub_10000A2A4(uint64_t a1)
{
  return a1 && (a1 & (a1 - 1)) == 0;
}

void sub_10000A830(id a1)
{
  qword_10015B2D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000A874(id a1)
{
  qword_10015B2D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000AAB4(id a1)
{
  qword_10015B2D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

unint64_t ATLogDataType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10015B2E0))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"ATLogDataType" valueNames:"Unknown" values:&unk_10010A398 count:6 enumVerifier:ATLogDataType_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10015B2E0, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10015B2E0);
}

BOOL ATLogDataType_IsValidValue(unsigned int a1)
{
  return a1 < 6;
}

uint64_t ATLogInsertRequest_Version_RawValue(uint64_t a1)
{
  id v2 = [[+[ATLogInsertRequest descriptor](ATLogInsertRequest, "descriptor") fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetATLogInsertRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ATLogInsertRequest descriptor](ATLogInsertRequest) fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ATLogInsertRequest_Type_RawValue(uint64_t a1)
{
  id v2 = [[+[ATLogInsertRequest descriptor](ATLogInsertRequest, "descriptor") fieldWithNumber:3];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetATLogInsertRequest_Type_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ATLogInsertRequest descriptor](ATLogInsertRequest, "descriptor") fieldWithNumber:3];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ATLogInsertResponse_Status_RawValue(uint64_t a1)
{
  id v2 = [[+[ATLogInsertResponse descriptor](ATLogInsertResponse, "descriptor") fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetATLogInsertResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ATLogInsertResponse descriptor](ATLogInsertResponse, "descriptor") fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ATLogProofRequest_Version_RawValue(uint64_t a1)
{
  id v2 = [[+[ATLogProofRequest descriptor](ATLogProofRequest) fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetATLogProofRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ATLogProofRequest descriptor](ATLogProofRequest) fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t ATLogProofResponse_Status_RawValue(uint64_t a1)
{
  id v2 = [[+[ATLogProofResponse descriptor](ATLogProofResponse, "descriptor") fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetATLogProofResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[ATLogProofResponse descriptor](ATLogProofResponse, "descriptor") fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

void sub_10000B310(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyManagedObject:0];
  if (v2)
  {
    v3 = [*(id *)(a1 + 32) dataStore];
    [v3 onMocSetMapHead:v2 inclusionResult:*(void *)(a1 + 48) inclusionError:*(void *)(a1 + 40)];

    id v4 = [*(id *)(a1 + 32) dataStore];
    id v16 = 0;
    unsigned __int8 v5 = [v4 persistWithError:&v16];
    id v6 = v16;

    if ((v5 & 1) == 0)
    {
      if (qword_10015B318 != -1) {
        dispatch_once(&qword_10015B318, &stru_100136210);
      }
      v7 = qword_10015B320;
      if (os_log_type_enabled((os_log_t)qword_10015B320, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to save inclusion state for map head: %@", buf, 0xCu);
      }
      v8 = [*(id *)(a1 + 32) dataStore];
      [v8 reportCoreDataPersistEventForLocation:@"mapHeadIncusionState" underlyingError:v6];
    }
    double Current = CFAbsoluteTimeGetCurrent();
    [v2 receiptTime];
    double v11 = Current - v10;
    v12 = [v2 application];
    v13 = +[TransparencyAnalytics formatEventName:@"PatInclusionProofTime" application:v12];

    v14 = +[TransparencyAnalytics logger];
    v15 = +[NSNumber numberWithDouble:v11];
    [v14 logMetric:v15 withName:v13];
  }
}

void sub_10000B514(id a1)
{
  qword_10015B320 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000B7F4(id a1)
{
  qword_10015B320 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10000B838(id *a1, void *a2, void *a3)
{
  if (+[TransparencyAnalytics hasInternalDiagnostics])
  {
    id v6 = +[NSMutableDictionary dictionary];
    v7 = [a1[4] metadata];
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    v9 = [v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    if (v9)
    {
      double v10 = [a1[4] metadata];
      double v11 = [v10 objectForKeyedSubscript:v8];
      [v6 setObject:v11 forKeyedSubscript:v8];
    }
    if ([v6 count]) {
      *a3 = v6;
    }
  }
  id v12 = a1[4];
  id v28 = 0;
  uint64_t v13 = (uint64_t)[v12 verifyWithError:&v28];
  id v14 = v28;
  if (v13 == 1)
  {
    v15 = [a1[4] nodeBytes];
    id v27 = v14;
    id v16 = +[TransparencyGPBMessage parseFromData:v15 error:&v27];
    id v17 = v27;

    if (v16)
    {
      if (![v16 hasObjectMapHead]) {
        goto LABEL_19;
      }
      id v18 = [v16 objectMapHead];
      v19 = [v18 object];
      v20 = [a1[5] mapHead];
      unsigned __int8 v21 = [v19 isEqualToData:v20];

      if (v21)
      {
        uint64_t v13 = 1;
        [a1[6] setInclusionResult:1 mapHead:a1[5] failure:0];
        id v22 = v17;
      }
      else
      {
LABEL_19:
        id v22 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-62 description:@"per-app tree entry does not contain the SMH in the map entry"];

        if (a2 && v22) {
          *a2 = v22;
        }
        if (qword_10015B318 != -1) {
          dispatch_once(&qword_10015B318, &stru_1001362B8);
        }
        v24 = qword_10015B320;
        if (os_log_type_enabled((os_log_t)qword_10015B320, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "per-app tree entry does not contain the SMH in the map entry", buf, 2u);
        }
        [a1[6] setInclusionResult:0 mapHead:a1[5] failure:v22];
        uint64_t v13 = 0;
      }
    }
    else
    {
      id v22 = +[TransparencyError errorWithDomain:kTransparencyErrorDecode, -140, v17, @"failed to decode per-app tree node: %@", v17 code underlyingError description];

      if (qword_10015B318 != -1) {
        dispatch_once(&qword_10015B318, &stru_100136298);
      }
      v25 = qword_10015B320;
      if (os_log_type_enabled((os_log_t)qword_10015B320, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v30 = v22;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "failed to decode per-app tree node: %@", buf, 0xCu);
      }
      uint64_t v13 = 0;
      if (a2 && v22)
      {
        id v22 = v22;
        uint64_t v13 = 0;
        *a2 = v22;
      }
    }
  }
  else
  {
    id v22 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-13 underlyingError:v14 description:@"per-app tree verification failed"];

    if (a2 && v22) {
      *a2 = v22;
    }
    if (qword_10015B318 != -1) {
      dispatch_once(&qword_10015B318, &stru_100136278);
    }
    v23 = qword_10015B320;
    if (os_log_type_enabled((os_log_t)qword_10015B320, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "per-app tree verification failed", buf, 2u);
    }
  }

  return v13;
}

void sub_10000BC94(id a1)
{
  qword_10015B320 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000BCD8(id a1)
{
  qword_10015B320 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000BD1C(id a1)
{
  qword_10015B320 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000BD60(id a1)
{
  qword_10015B320 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10000C064(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = [*(id *)(a1 + 32) verifyWithError:a2];
  if (!v5
    && +[TransparencyAnalytics hasInternalDiagnostics])
  {
    id v6 = +[NSMutableDictionary dictionary];
    v7 = [*(id *)(a1 + 32) metadata];
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    v9 = [v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    if (v9)
    {
      double v10 = [*(id *)(a1 + 32) metadata];
      double v11 = [v10 objectForKeyedSubscript:v8];
      [v6 setObject:v11 forKeyedSubscript:v8];
    }
    if ([v6 count]) {
      *a3 = v6;
    }
  }
  return v5;
}

void sub_10000C168(id a1)
{
  qword_10015B320 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10000C41C(uint64_t a1, void *a2, void *a3)
{
  if (+[TransparencyAnalytics hasInternalDiagnostics])
  {
    id v6 = +[NSMutableDictionary dictionary];
    v7 = [*(id *)(a1 + 32) metadata];
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    v9 = [v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    if (v9)
    {
      double v10 = [*(id *)(a1 + 32) metadata];
      double v11 = [v10 objectForKeyedSubscript:v8];
      [v6 setObject:v11 forKeyedSubscript:v8];
    }
    if ([v6 count]) {
      *a3 = v6;
    }
  }
  id v12 = [*(id *)(a1 + 32) verifyWithError:a2];
  if (v12 != (id)1)
  {
    if (a2)
    {
      *a2 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-13 underlyingError:*a2 description:@"per-app tree verification failed"];
    }
    if (qword_10015B328 != -1) {
      dispatch_once(&qword_10015B328, &stru_100136368);
    }
    uint64_t v13 = qword_10015B330;
    if (os_log_type_enabled((os_log_t)qword_10015B330, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "per-app tree verification failed", v15, 2u);
    }
  }
  return v12;
}

void sub_10000C5D0(id a1)
{
  qword_10015B330 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000CD7C(id a1)
{
  qword_10015B340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000CF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000CF74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000CF84(uint64_t a1)
{
}

void sub_10000CF8C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v42 = 0;
  id v3 = [v2 copyManagedObject:&v42];
  id v4 = v42;
  if (!v3)
  {
    if (qword_10015B338 != -1) {
      dispatch_once(&qword_10015B338, &stru_1001363A8);
    }
    v9 = qword_10015B340;
    if (os_log_type_enabled((os_log_t)qword_10015B340, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v44 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to find tree head after inclusion verification: %@", buf, 0xCu);
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    uint64_t v10 = +[SecXPCHelper cleanseErrorForXPC:v4];
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
    id v13 = v4;
    goto LABEL_31;
  }
  [v3 setUnsigned:"inclusionVerified" value:*(void *)(a1 + 64)];
  if (*(void *)(a1 + 64) != 1)
  {
    id v5 = [*(id *)(a1 + 40) dataStore];
    id v6 = [v5 createSignedTreeHeadFailure];

    v7 = *(id **)(a1 + 72);
    if (v7 && *v7) {
      uint64_t v8 = (uint64_t)[*v7 code];
    }
    else {
      uint64_t v8 = -120;
    }
    [v6 setErrorCode:v8];
    id v14 = *(id **)(a1 + 72);
    if (v14 && *v14)
    {
      v15 = [*v14 domain];
      [v6 setErrorDomain:v15];
    }
    else
    {
      [v6 setErrorDomain:kTransparencyErrorUnknown];
    }
    [v6 setSth:v3];
    [v6 setVerificationType:1];
    if (!*(void *)(a1 + 64))
    {
      id v16 = [*(id *)(a1 + 40) dataStore];
      id v17 = [v3 application];
      id v18 = [*(id *)(a1 + 40) optInServer];
      v19 = [v16 createFailureEvent:v4 application:v17 optInServer:v18];

      [v3 setFailureEvent:v19];
      v20 = [*(id *)(a1 + 40) optInServer];
      unsigned __int8 v21 = [v20 getAggregateOptInState:0];

      if (qword_10015B338 != -1) {
        dispatch_once(&qword_10015B338, &stru_1001363C8);
      }
      id v22 = (void *)qword_10015B340;
      if (os_log_type_enabled((os_log_t)qword_10015B340, OS_LOG_TYPE_DEFAULT))
      {
        v23 = v22;
        v24 = [v19 eventId];
        *(_DWORD *)buf = 138543362;
        id v44 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Created failure eventId %{public}@ for STH inclusion validation", buf, 0xCu);
      }
      v25 = [*(id *)(a1 + 40) followUp];
      v26 = [v3 application];
      id v27 = [v19 eventId];
      [v25 postFollowup:v26 type:2 eventId:v27 errorCode:[v4 code] optInState:v21 infoLink:0 additionalInfo:0 error:0];
    }
  }
  id v28 = [*(id *)(a1 + 40) dataStore];
  id v41 = v4;
  unsigned __int8 v29 = [v28 persistWithError:&v41];
  id v13 = v41;

  if ((v29 & 1) == 0)
  {
    if (qword_10015B338 != -1) {
      dispatch_once(&qword_10015B338, &stru_1001363E8);
    }
    id v30 = qword_10015B340;
    if (os_log_type_enabled((os_log_t)qword_10015B340, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v44 = v13;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "failed to save inclusion verification state to PAT head after TLT entry verification: %@", buf, 0xCu);
    }
    v31 = [*(id *)(a1 + 40) dataStore];
    [v31 reportCoreDataPersistEventForLocation:@"verifyPatHeadInclusion" underlyingError:v13];

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    uint64_t v32 = +[SecXPCHelper cleanseErrorForXPC:v13];
    uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 8);
    v34 = *(void **)(v33 + 40);
    *(void *)(v33 + 40) = v32;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  [v3 receiptTime];
  if (Current - v36 > 1.0)
  {
    double v37 = CFAbsoluteTimeGetCurrent();
    [v3 receiptTime];
    double v39 = v37 - v38;
    id v12 = +[TransparencyAnalytics logger];
    v40 = +[NSNumber numberWithDouble:v39];
    [v12 logMetric:v40 withName:@"ktTLTInclusionProofTime"];

LABEL_31:
  }
}

void sub_10000D4BC(id a1)
{
  qword_10015B340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000D500(id a1)
{
  qword_10015B340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000D544(id a1)
{
  qword_10015B340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10000D654(uint64_t a1, void *a2, void *a3)
{
  if (+[TransparencyAnalytics hasInternalDiagnostics])
  {
    id v6 = +[NSMutableDictionary dictionary];
    v7 = [*(id *)(a1 + 32) metadata];
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    v9 = [v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    if (v9)
    {
      uint64_t v10 = [*(id *)(a1 + 32) metadata];
      uint64_t v11 = [v10 objectForKeyedSubscript:v8];
      [v6 setObject:v11 forKeyedSubscript:v8];
    }
    if ([v6 count]) {
      *a3 = v6;
    }
  }
  id v12 = [*(id *)(a1 + 32) verifyWithError:a2];
  if (v12 == (id)1)
  {
    id v13 = [*(id *)(a1 + 32) nodeBytes];
    id v14 = +[TransparencyGPBMessage parseFromData:v13 error:a2];

    if (v14)
    {
      if ([v14 hasPatHead])
      {
        v15 = [v14 patHead];
        id v16 = [v15 object];
        id v17 = [*(id *)(a1 + 40) logHead];
        unsigned __int8 v18 = [v16 isEqualToData:v17];

        if (v18)
        {
          uint64_t v19 = 1;
LABEL_36:
          id v22 = [*(id *)(a1 + 32) setInclusionResult:v19 signedLogHead:*(void *)(a1 + 40) error:a2];

          return v22;
        }
      }
      if (a2)
      {
        *a2 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-63 description:@"top-level tree entry does not contain the SLH in the per-app tree entry"];
      }
      if (qword_10015B338 != -1) {
        dispatch_once(&qword_10015B338, &stru_100136470);
      }
      uint64_t v23 = qword_10015B340;
      if (!os_log_type_enabled((os_log_t)qword_10015B340, OS_LOG_TYPE_ERROR))
      {
LABEL_35:
        uint64_t v19 = 0;
        goto LABEL_36;
      }
      *(_WORD *)buf = 0;
      v24 = "top-level tree entry does not contain the SLH in the per-app tree entry";
      v25 = v23;
      uint32_t v26 = 2;
    }
    else
    {
      if (a2)
      {
        +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", kTransparencyErrorDecode, -141, *a2);
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      if (qword_10015B338 != -1) {
        dispatch_once(&qword_10015B338, &stru_100136450);
      }
      uint64_t v27 = qword_10015B340;
      if (!os_log_type_enabled((os_log_t)qword_10015B340, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      if (a2) {
        uint64_t v28 = *a2;
      }
      else {
        uint64_t v28 = 0;
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v31 = v28;
      v24 = "failed to decode top-level tree node: %@";
      v25 = v27;
      uint32_t v26 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
    goto LABEL_35;
  }
  id v20 = v12;
  if (a2)
  {
    *a2 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-14 underlyingError:*a2 description:@"top-level tree verification failed"];
  }
  if (qword_10015B338 != -1) {
    dispatch_once(&qword_10015B338, &stru_100136430);
  }
  unsigned __int8 v21 = qword_10015B340;
  if (os_log_type_enabled((os_log_t)qword_10015B340, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "top level tree verification failed", buf, 2u);
  }
  return [*(id *)(a1 + 32) setInclusionResult:v20 signedLogHead:*(void *)(a1 + 40) error:a2];
}

void sub_10000DA58(id a1)
{
  qword_10015B340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000DA9C(id a1)
{
  qword_10015B340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000DAE0(id a1)
{
  qword_10015B340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000E3B4(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000E3F8(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000E43C(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000E480(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000E4C4(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000E508(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000EC1C(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000EC60(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000ECA4(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000ECE8(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F488(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F4CC(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F510(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F554(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F72C(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000FDC4(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000FE08(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000FE4C(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001048C(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000104D0(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100010514(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100010558(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001059C(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100010AEC(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100010B30(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100010B74(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100010BB8(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100011018(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001105C(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001156C(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000115B0(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000115F4(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100011638(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001188C(id a1)
{
  qword_10015B350 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100012284(id a1)
{
  qword_10015B360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000128B0(id a1)
{
  qword_10015B360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_100012A5C(uint64_t a1, void *a2, void *a3)
{
  if (![*(id *)(a1 + 32) hasStartSlh]
    || ([*(id *)(a1 + 32) startSlh],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        !v6))
  {
    uint64_t v35 = -181;
    if (!a2) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (![*(id *)(a1 + 32) hasEndSlh]
    || ([*(id *)(a1 + 32) endSlh], v7 = objc_claimAutoreleasedReturnValue(),
                                                  v7,
                                                  !v7))
  {
    uint64_t v35 = -182;
    if (!a2) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v8 = [*(id *)(a1 + 32) proofHashesArray];
  if (v8)
  {
    id v9 = [*(id *)(a1 + 32) proofHashesArray_Count];

    if (v9)
    {
      uint64_t v10 = [*(id *)(a1 + 32) startSlh];
      uint64_t v11 = [*(id *)(a1 + 32) verifier];
      id v12 = [v11 trustedKeyStore];
      id v13 = [v12 signatureVerifier];
      id v14 = [*(id *)(a1 + 32) dataStore];
      double v38 = +[SignedLogHead signedTypeWithObject:v10 verifier:v13 dataStore:v14];

      v15 = [*(id *)(a1 + 32) endSlh];
      id v16 = [*(id *)(a1 + 32) verifier];
      id v17 = [v16 trustedKeyStore];
      unsigned __int8 v18 = [v17 signatureVerifier];
      uint64_t v19 = [*(id *)(a1 + 32) dataStore];
      id v20 = +[SignedLogHead signedTypeWithObject:v15 verifier:v18 dataStore:v19];

      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v50 = 0x3032000000;
      v51 = sub_100012FD8;
      v52 = sub_100012FE8;
      id v53 = 0;
      uint64_t v45 = 0;
      v46 = &v45;
      uint64_t v47 = 0x2020000000;
      id v48 = 0;
      unsigned __int8 v21 = [*(id *)(a1 + 32) verifier];
      id v22 = [*(id *)(a1 + 32) proofHashesArray];
      uint64_t v23 = (id *)(*((void *)&buf + 1) + 40);
      id obj = *(id *)(*((void *)&buf + 1) + 40);
      id v24 = [v21 verifyConsistencyProof:v22 startLogHead:v38 endLogHead:v20 error:&obj];
      objc_storeStrong(v23, obj);

      id v48 = v24;
      v25 = [*(id *)(a1 + 32) dataStore];
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_100012FF0;
      v39[3] = &unk_1001369A0;
      v39[4] = *(void *)(a1 + 32);
      id v26 = v38;
      id v40 = v26;
      p_long long buf = &buf;
      id v27 = v20;
      id v41 = v27;
      v43 = &v45;
      [v25 performBlockAndWait:v39];

      uint64_t v28 = +[NSMutableDictionary dictionary];
      unsigned __int8 v29 = [*(id *)(a1 + 32) metadata];
      uint64_t v30 = kTransparencyResponseMetadataKeyServerHint;
      uint64_t v31 = [v29 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

      if (v31)
      {
        uint64_t v32 = [*(id *)(a1 + 32) metadata];
        uint64_t v33 = [v32 objectForKeyedSubscript:v30];
        [v28 setObject:v33 forKeyedSubscript:v30];
      }
      if ([v28 count]) {
        *a3 = v28;
      }
      if (a2) {
        *a2 = *(id *)(*((void *)&buf + 1) + 40);
      }
      uint64_t v34 = v46[3];

      _Block_object_dispose(&v45, 8);
      _Block_object_dispose(&buf, 8);

      return v34;
    }
  }
  uint64_t v35 = -183;
  if (a2)
  {
LABEL_19:
    *a2 = +[TransparencyError errorWithDomain:kTransparencyErrorDecode code:v35 description:@"log consistency response missing data required for verification"];
  }
LABEL_20:
  if (qword_10015B358 != -1) {
    dispatch_once(&qword_10015B358, &stru_100136938);
  }
  double v36 = qword_10015B360;
  if (os_log_type_enabled((os_log_t)qword_10015B360, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v35;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "log consistency response missing data required for verification: %ld", (uint8_t *)&buf, 0xCu);
  }
  return 0;
}

void sub_100012F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100012F94(id a1)
{
  qword_10015B360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_100012FD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100012FE8(uint64_t a1)
{
}

void sub_100012FF0(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) forwards];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v6 = *(void **)(v3 + 40);
  id v5 = (id *)(v3 + 40);
  id v4 = v6;
  if (v2)
  {
    v7 = *(void **)(a1 + 40);
    id obj = v4;
    id v8 = [v7 copyManagedObject:&obj];
    objc_storeStrong(v5, obj);
    id v9 = *(void **)(a1 + 48);
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    id v12 = *(void **)(v10 + 40);
    uint64_t v11 = (void **)(v10 + 40);
    uint64_t v35 = v12;
    id v13 = [v9 copyManagedObject:&v35];
    uint64_t v14 = v35;
  }
  else
  {
    v15 = *(void **)(a1 + 48);
    id v34 = v4;
    id v8 = [v15 copyManagedObject:&v34];
    objc_storeStrong(v5, v34);
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v18 = *(void **)(v17 + 40);
    uint64_t v11 = (void **)(v17 + 40);
    uint64_t v33 = v18;
    id v13 = [v16 copyManagedObject:&v33];
    uint64_t v14 = v33;
  }
  id v19 = v14;
  id v20 = *v11;
  *uint64_t v11 = v19;

  if (!v8 || !v13)
  {
    if (qword_10015B358 != -1) {
      dispatch_once(&qword_10015B358, &stru_100136958);
    }
    unsigned __int8 v21 = qword_10015B360;
    if (os_log_type_enabled((os_log_t)qword_10015B360, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v38 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to get SLHs from data store: %@", buf, 0xCu);
    }
  }
  if ([*(id *)(a1 + 32) forwards])
  {
    if ([v8 consistencyVerified] == (id)2)
    {
      id v23 = [v8 revision];
      id v24 = [*(id *)(a1 + 32) startRevision];
      id v25 = [v24 longLongValue];

      if (v23 == v25) {
        [*(id *)(a1 + 32) setResult:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) treeHead:v8 error:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      }
    }
  }
  if ([v8 consistencyVerified] == (id)1) {
    [*(id *)(a1 + 32) setResult:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) treeHead:v13 error:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) == 1) {
    [*(id *)(a1 + 32) checkSplitsFor:v13];
  }
  id v26 = [*(id *)(a1 + 32) dataStore];
  uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8);
  id v32 = *(id *)(v27 + 40);
  unsigned __int8 v28 = [v26 persistWithError:&v32];
  objc_storeStrong((id *)(v27 + 40), v32);

  if ((v28 & 1) == 0)
  {
    if (qword_10015B358 != -1) {
      dispatch_once(&qword_10015B358, &stru_100136978);
    }
    unsigned __int8 v29 = qword_10015B360;
    if (os_log_type_enabled((os_log_t)qword_10015B360, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v38 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "failed to save consistency results: %@", buf, 0xCu);
    }
    uint64_t v31 = [*(id *)(a1 + 32) dataStore];
    [v31 reportCoreDataPersistEventForLocation:@"verifyConsistency" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
}

void sub_10001333C(id a1)
{
  qword_10015B360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013380(id a1)
{
  qword_10015B360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013A00(id a1)
{
  qword_10015B370 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013A44(id a1)
{
  qword_10015B370 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013E04(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v17 = 0;
  uint64_t v3 = [v2 createManagedObjectWithError:&v17];
  id v4 = v17;
  [v3 getUnsigned:"signatureVerified"];
  [v3 setUnsigned:"signatureVerified" value:*(void *)(a1 + 40)];
  [v3 setGossip:[*(id *)(a1 + 32) gossip]];
  if (!*(void *)(a1 + 40))
  {
    id v5 = [*(id *)(a1 + 32) dataStore];
    id v6 = [v5 createSignedTreeHeadFailure];

    v7 = *(id **)(a1 + 48);
    if (v7 && *v7) {
      uint64_t v8 = (uint64_t)[*v7 code];
    }
    else {
      uint64_t v8 = -120;
    }
    [v6 setErrorCode:v8];
    id v9 = *(id **)(a1 + 48);
    if (v9 && *v9)
    {
      uint64_t v10 = [*v9 domain];
      [v6 setErrorDomain:v10];
    }
    else
    {
      [v6 setErrorDomain:kTransparencyErrorUnknown];
    }
    [v6 setSth:v3];
    [v6 setVerificationType:0];
  }
  uint64_t v11 = [*(id *)(a1 + 32) dataStore];
  id v16 = v4;
  unsigned __int8 v12 = [v11 persistWithError:&v16];
  id v13 = v16;

  if ((v12 & 1) == 0)
  {
    if (qword_10015B368 != -1) {
      dispatch_once(&qword_10015B368, &stru_100136A00);
    }
    uint64_t v14 = qword_10015B370;
    if (os_log_type_enabled((os_log_t)qword_10015B370, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "failed to save signature result for STH: %@", buf, 0xCu);
    }
    v15 = [*(id *)(a1 + 32) dataStore];
    [v15 reportCoreDataPersistEventForLocation:@"verifySTHSignature" underlyingError:v13];
  }
}

void sub_10001404C(id a1)
{
  qword_10015B370 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1000141C4(uint64_t a1, uint64_t *a2)
{
  id v4 = [*(id *)(a1 + 32) logHead];
  id v5 = +[TransparencyGPBMessage parseFromData:v4 error:a2];

  if (![*(id *)(a1 + 32) hasSignature]
    || ([*(id *)(a1 + 32) signature],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        !v6))
  {
    uint64_t v36 = -27;
    goto LABEL_24;
  }
  uint64_t v7 = [*(id *)(a1 + 32) logHead];
  if (!v7
    || (uint64_t v8 = (void *)v7,
        [*(id *)(a1 + 32) logHead],
        id v9 = objc_claimAutoreleasedReturnValue(),
        id v10 = [v9 length],
        v9,
        v8,
        !v10))
  {
    uint64_t v36 = -26;
    goto LABEL_24;
  }
  if (!v5)
  {
    uint64_t v36 = -208;
    goto LABEL_24;
  }
  uint64_t v11 = [*(id *)(a1 + 32) signature];
  uint64_t v12 = [v11 signature];
  if (!v12)
  {
    uint64_t v36 = -46;
LABEL_36:

    goto LABEL_24;
  }
  id v13 = (void *)v12;
  uint64_t v14 = [*(id *)(a1 + 32) signature];
  v15 = [v14 signature];
  id v16 = [v15 length];

  if (!v16)
  {
    uint64_t v36 = -46;
    goto LABEL_24;
  }
  uint64_t v11 = [*(id *)(a1 + 32) signature];
  uint64_t v17 = [v11 signingKeySpkihash];
  if (!v17)
  {
    uint64_t v36 = -47;
    goto LABEL_36;
  }
  uint64_t v18 = (void *)v17;
  id v19 = [*(id *)(a1 + 32) signature];
  id v20 = [v19 signingKeySpkihash];
  id v21 = [v20 length];

  if (v21)
  {
    id v41 = [*(id *)(a1 + 32) verifier];
    uint64_t v22 = [*(id *)(a1 + 32) logHead];
    id v42 = [*(id *)(a1 + 32) signature];
    id v23 = [v42 signature];
    id v24 = [*(id *)(a1 + 32) signature];
    id v25 = [v24 signingKeySpkihash];
    id v26 = [*(id *)(a1 + 32) signature];
    id v43 = 0;
    unsigned int v27 = [v41 verifyMessage:v22 signature:v23 spkiHash:v25 algorithm:[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:](TransparencySignatureVerifier, "secKeyAlgorithmForProtoAlgorithm:", objc_msgSend(v26, "algorithm")) error:&v43];
    id v28 = v43;

    uint64_t v29 = v27;
    unsigned int v30 = +[TransparencyError hasUnknownSPKIHashError:v28];
    if (v30) {
      uint64_t v29 = 2;
    }
    if (a2 && v28) {
      *a2 = (uint64_t)v28;
    }
    if (![*(id *)(a1 + 32) gossip] || v29)
    {
      [*(id *)(a1 + 32) storeSignatureResult:v29 signatureError:a2];
      if ((v27 & ~v30 & 1) == 0)
      {
        if (a2)
        {
          +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", @"TransparencyErrorVerify", -139, *a2);
          *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue();
        }
        if (qword_10015B368 != -1) {
          dispatch_once(&qword_10015B368, &stru_100136A88);
        }
        double v39 = qword_10015B370;
        if (os_log_type_enabled((os_log_t)qword_10015B370, OS_LOG_TYPE_ERROR))
        {
          if (a2) {
            uint64_t v40 = *a2;
          }
          else {
            uint64_t v40 = 0;
          }
          *(_DWORD *)long long buf = 138412290;
          uint64_t v45 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Signed log head signature verification failed: %@", buf, 0xCu);
        }
      }
    }
    else
    {
      if (qword_10015B368 != -1) {
        dispatch_once(&qword_10015B368, &stru_100136A68);
      }
      uint64_t v31 = qword_10015B370;
      if (os_log_type_enabled((os_log_t)qword_10015B370, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "gossiped signed log head failed signature validation, will not store result", buf, 2u);
      }
      id v32 = +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", @"TransparencyErrorVerify", -139, *a2);
      uint64_t v33 = +[TransparencyAnalytics formatEventName:@"GossipSignatureVerificationFailed" application:kKTApplicationIdentifierTLT];
      id v34 = +[TransparencyAnalytics logger];
      [v34 logResultForEvent:v33 hardFailure:1 result:v32];

      id v35 = v32;
      *a2 = (uint64_t)v35;
    }
    goto LABEL_31;
  }
  uint64_t v36 = -47;
LABEL_24:
  if (a2)
  {
    *a2 = +[TransparencyError errorWithDomain:kTransparencyErrorDecode code:v36 underlyingError:*a2 description:@"SLH missing data required for verification"];
  }
  if (qword_10015B368 != -1) {
    dispatch_once(&qword_10015B368, &stru_100136A48);
  }
  double v37 = qword_10015B370;
  if (os_log_type_enabled((os_log_t)qword_10015B370, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v45 = v36;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "SLH missing data required for verification: %ld", buf, 0xCu);
  }
  uint64_t v29 = 0;
LABEL_31:

  return v29;
}

void sub_10001476C(id a1)
{
  qword_10015B370 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000147B0(id a1)
{
  qword_10015B370 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000147F4(id a1)
{
  qword_10015B370 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t MilestoneRootsRequest_Version_RawValue(uint64_t a1)
{
  id v2 = [[+[MilestoneRootsRequest descriptor](MilestoneRootsRequest) fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetMilestoneRootsRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[MilestoneRootsRequest descriptor](MilestoneRootsRequest) fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

uint64_t MilestoneRootsResponse_Status_RawValue(uint64_t a1)
{
  id v2 = [[+[MilestoneRootsResponse descriptor](MilestoneRootsResponse) fieldWithNumber:1];

  return sub_1000F7C28(a1, v2);
}

uint64_t SetMilestoneRootsResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  id v4 = [[+[MilestoneRootsResponse descriptor](MilestoneRootsResponse) fieldWithNumber:1];

  return sub_1000F7C2C(a1, v4, a2);
}

id sub_10001559C(uint64_t a1, void *a2)
{
  return _[a2 writeData:*(void *)(a1 + 32)];
}

void sub_100015FE0(id a1)
{
  qword_10015B398 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100016024(id a1)
{
  qword_10015B398 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10001619C(uint64_t a1, uint64_t *a2)
{
  id v4 = [*(id *)(a1 + 32) mapHead];
  id v5 = +[TransparencyGPBMessage parseFromData:v4 error:a2];

  if (![*(id *)(a1 + 32) hasSignature]
    || ([*(id *)(a1 + 32) signature],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        !v6))
  {
    uint64_t v39 = -22;
    goto LABEL_36;
  }
  uint64_t v7 = [*(id *)(a1 + 32) mapHead];
  if (!v7
    || (uint64_t v8 = (void *)v7,
        [*(id *)(a1 + 32) mapHead],
        id v9 = objc_claimAutoreleasedReturnValue(),
        id v10 = [v9 length],
        v9,
        v8,
        !v10))
  {
    uint64_t v39 = -21;
    goto LABEL_36;
  }
  uint64_t v11 = [*(id *)(a1 + 32) signature];
  uint64_t v12 = [v11 signature];
  if (!v12)
  {
    uint64_t v39 = -51;
LABEL_35:

    goto LABEL_36;
  }
  id v13 = (void *)v12;
  uint64_t v14 = [*(id *)(a1 + 32) signature];
  v15 = [v14 signature];
  id v16 = [v15 length];

  if (!v16)
  {
    uint64_t v39 = -51;
    goto LABEL_36;
  }
  uint64_t v11 = [*(id *)(a1 + 32) signature];
  uint64_t v17 = [v11 signingKeySpkihash];
  if (!v17)
  {
    uint64_t v39 = -52;
    goto LABEL_35;
  }
  uint64_t v18 = (void *)v17;
  id v19 = [*(id *)(a1 + 32) signature];
  id v20 = [v19 signingKeySpkihash];
  id v21 = [v20 length];

  if (v21)
  {
    if (v5)
    {
      uint64_t v22 = [v5 mapHeadHash];
      if (v22
        && (id v23 = (void *)v22,
            [v5 mapHeadHash],
            id v24 = objc_claimAutoreleasedReturnValue(),
            id v25 = [v24 length],
            v24,
            v23,
            v25))
      {
        if ([v5 application] && objc_msgSend(v5, "application"))
        {
          if ([v5 hasChangeLogHead]
            && ([v5 changeLogHead],
                id v26 = objc_claimAutoreleasedReturnValue(),
                v26,
                v26))
          {
            if ([v5 timestampMs])
            {
              unsigned int v27 = [*(id *)(a1 + 32) verifier];
              id v28 = [*(id *)(a1 + 32) mapHead];
              id v42 = [*(id *)(a1 + 32) signature];
              uint64_t v29 = [v42 signature];
              unsigned int v30 = [*(id *)(a1 + 32) signature];
              uint64_t v31 = [v30 signingKeySpkihash];
              id v32 = [*(id *)(a1 + 32) signature];
              id v43 = 0;
              unsigned int v33 = [v27 verifyMessage:v28 signature:v29 spkiHash:v31 algorithm:[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:](TransparencySignatureVerifier, "secKeyAlgorithmForProtoAlgorithm:", objc_msgSend(v32, "algorithm")) error:&v43];
              id v34 = v43;

              uint64_t v35 = v33;
              unsigned int v36 = +[TransparencyError hasUnknownSPKIHashError:v34];
              if (v36) {
                uint64_t v35 = 2;
              }
              if (a2 && v34) {
                *a2 = (uint64_t)v34;
              }
              if ((v33 & ~v36 & 1) == 0)
              {
                if (a2)
                {
                  +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", @"TransparencyErrorVerify", -138, *a2);
                  *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue();
                }
                if (qword_10015B390 != -1) {
                  dispatch_once(&qword_10015B390, &stru_100136B30);
                }
                double v37 = qword_10015B398;
                if (os_log_type_enabled((os_log_t)qword_10015B398, OS_LOG_TYPE_ERROR))
                {
                  if (a2) {
                    uint64_t v38 = *a2;
                  }
                  else {
                    uint64_t v38 = 0;
                  }
                  *(_DWORD *)long long buf = 138412290;
                  uint64_t v45 = v38;
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "SMH signature verification failed: %@", buf, 0xCu);
                }
              }

              goto LABEL_43;
            }
            uint64_t v39 = -227;
          }
          else
          {
            uint64_t v39 = -25;
          }
        }
        else
        {
          uint64_t v39 = -24;
        }
      }
      else
      {
        uint64_t v39 = -23;
      }
    }
    else
    {
      uint64_t v39 = -207;
    }
  }
  else
  {
    uint64_t v39 = -52;
  }
LABEL_36:
  if (a2)
  {
    *a2 = +[TransparencyError errorWithDomain:kTransparencyErrorDecode code:v39 underlyingError:*a2 description:@"SMH missing data required for verification"];
  }
  if (qword_10015B390 != -1) {
    dispatch_once(&qword_10015B390, &stru_100136B10);
  }
  uint64_t v40 = qword_10015B398;
  if (os_log_type_enabled((os_log_t)qword_10015B398, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v45 = v39;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "SMH missing data required for verification: %ld", buf, 0xCu);
  }
  uint64_t v35 = 0;
LABEL_43:

  return v35;
}

void sub_1000166BC(id a1)
{
  qword_10015B398 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100016700(id a1)
{
  qword_10015B398 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100016800(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyManagedObject:0];
  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) dataStore];
    [v3 onMocSetMapHead:v2 mmdResult:*(void *)(a1 + 48) mmdError:*(void *)(a1 + 40)];

    id v4 = [*(id *)(a1 + 32) dataStore];
    id v9 = 0;
    unsigned __int8 v5 = [v4 persistWithError:&v9];
    id v6 = v9;

    if ((v5 & 1) == 0)
    {
      if (qword_10015B390 != -1) {
        dispatch_once(&qword_10015B390, &stru_100136B50);
      }
      uint64_t v7 = qword_10015B398;
      if (os_log_type_enabled((os_log_t)qword_10015B398, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v11 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to save inclusion state for map head: %@", buf, 0xCu);
      }
      uint64_t v8 = [*(id *)(a1 + 32) dataStore];
      [v8 reportCoreDataPersistEventForLocation:@"mapHeadMMDState" underlyingError:v6];
    }
  }
}

void sub_10001696C(id a1)
{
  qword_10015B398 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_100016B44(uint64_t a1, void *a2)
{
  id v4 = [*(id *)(a1 + 32) mapHead];
  unsigned __int8 v5 = +[TransparencyGPBMessage parseFromData:v4 error:a2];

  id v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 40)];
  [v6 timeIntervalSince1970];
  unint64_t v8 = (unint64_t)(v7 * 1000.0);

  id v9 = [v5 timestampMs];
  if ((unint64_t)v9 + kKTMaximumMergeDelayMs >= v8)
  {
    if (qword_10015B390 != -1) {
      dispatch_once(&qword_10015B390, &stru_100136B90);
    }
    uint64_t v14 = qword_10015B398;
    if (os_log_type_enabled((os_log_t)qword_10015B398, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "SMH MMD verified", buf, 2u);
    }
    v15 = *(void **)(a1 + 32);
    uint64_t v13 = 1;
    [v15 setMMDVerifiedForMapHead:1 mmdError:0];
  }
  else
  {
    if (qword_10015B390 != -1) {
      dispatch_once(&qword_10015B390, &stru_100136B70);
    }
    id v10 = (void *)qword_10015B398;
    if (os_log_type_enabled((os_log_t)qword_10015B398, OS_LOG_TYPE_ERROR))
    {
      id v11 = v10;
      *(_DWORD *)long long buf = 134217984;
      id v18 = [v5 timestampMs];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "SMH timestamp exceeds MMD: %lld", buf, 0xCu);
    }
    uint64_t v12 = +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", @"TransparencyErrorVerify", -228, *a2, @"SMH timestamp exceeds MMD: %lld", [v5 timestampMs]);
    [*(id *)(a1 + 32) setMMDVerifiedForMapHead:0 mmdError:v12];
    if (v12) {
      *a2 = v12;
    }

    uint64_t v13 = 0;
  }

  return v13;
}

void sub_100016DA8(id a1)
{
  qword_10015B398 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100016DEC(id a1)
{
  qword_10015B398 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100017184(id a1)
{
  qword_10015B3A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000171C8(id a1)
{
  qword_10015B3A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100017460(id a1)
{
  qword_10015B3A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100017764(id a1)
{
  qword_10015B3A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000177A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_10015B3A0 != -1) {
      dispatch_once(&qword_10015B3A0, &stru_100136C58);
    }
    double v7 = qword_10015B3A8;
    if (os_log_type_enabled((os_log_t)qword_10015B3A8, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      id v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to get PCC environment, defaulting to Carry: %@", (uint8_t *)&v8, 0xCu);
    }
  }
  [*(id *)(a1 + 32) determineATEnvironmentFromPCCEnvironment:v5 completion:*(void *)(a1 + 40)];
}

void sub_1000178A4(id a1)
{
  qword_10015B3A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001834C(id a1)
{
  qword_10015B3B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100018390(id a1)
{
  qword_10015B3B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000185E4(id a1)
{
  qword_10015B3B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100018ECC(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100018F10(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001907C(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000190C0(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000193C8(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001940C(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100019450(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100019658(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100019FCC(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A010(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A404(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A448(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A8A0(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A8E4(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A928(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A96C(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001AEFC(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001AF40(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001AF84(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001AFC8(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001B1C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001B1E8(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001B348(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001B63C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (!v5)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = 0;
    [v6 configureFromNetworkBagData:a2 error:&v7];
    id v5 = v7;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10001B998(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001B9AC(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001B9F0(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001BA34(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001BA78(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001BC98(_Unwind_Exception *exception_object)
{
}

void sub_10001BCB4(id a1)
{
  qword_10015B3C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C320(id a1)
{
  qword_10015B3D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C468(id a1)
{
  qword_10015B3E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C71C(id a1)
{
  qword_10015B3E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C760(id a1)
{
  qword_10015B3E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C7A4(id a1)
{
  qword_10015B3E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001CB04(id a1)
{
  qword_10015B3E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001CD60(id a1)
{
  qword_10015B3E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001CDA4(id a1)
{
  qword_10015B3E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001E728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 40) objectAtColumn:a2];
  id v6 = (id)v4;
  if (v4)
  {
    [*(id *)(a1 + 32) setObject:v4 atIndexedSubscript:a2];
  }
  else
  {
    id v5 = +[NSNull null];
    [*(id *)(a1 + 32) setObject:v5 atIndexedSubscript:a2];
  }
}

void sub_10001E88C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v5 = [*(id *)(a1 + 32) objectAtColumn:a2];
  if (v5) {
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_10001F2FC(id a1)
{
  qword_10015B3F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001F340(id a1)
{
  qword_10015B3F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001F45C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v13 = 0;
  uint64_t v3 = [v2 createManagedObjectWithError:&v13];
  id v4 = v13;
  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) dataStore];
    [v5 onMocSetMapHead:v3 signatureResult:*(void *)(a1 + 48) signatureError:*(void *)(a1 + 40)];

    id v6 = [*(id *)(a1 + 32) dataStore];
    id v12 = v4;
    unsigned __int8 v7 = [v6 persistWithError:&v12];
    id v8 = v12;

    if ((v7 & 1) == 0)
    {
      if (qword_10015B3F0 != -1) {
        dispatch_once(&qword_10015B3F0, &stru_100137250);
      }
      id v9 = qword_10015B3F8;
      if (os_log_type_enabled((os_log_t)qword_10015B3F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed persist SMH signature failure: %@", buf, 0xCu);
      }
      id v10 = [*(id *)(a1 + 32) dataStore];
      [v10 reportCoreDataPersistEventForLocation:@"mapHeadSignature" underlyingError:v8];
    }
  }
  else
  {
    if (qword_10015B3F0 != -1) {
      dispatch_once(&qword_10015B3F0, &stru_100137230);
    }
    id v11 = qword_10015B3F8;
    if (os_log_type_enabled((os_log_t)qword_10015B3F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "failed to create SMH object: %@", buf, 0xCu);
    }
    id v8 = v4;
  }
}

void sub_10001F65C(id a1)
{
  qword_10015B3F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001F6A0(id a1)
{
  qword_10015B3F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001F8C8(id a1)
{
  qword_10015B3F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10001F978()
{
  return *(id *)(v0 + 112);
}

uint64_t sub_10001F980()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10001F988()
{
  return 0;
}

uint64_t sub_10001F994()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 128);
  sub_10001F9E4(v1);
  return v1;
}

uint64_t sub_10001F9E4(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10001F9F4(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 128);
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return sub_10001FA48(v5);
}

uint64_t sub_10001FA48(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t (*sub_10001FA58())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_10001FAAC()
{
  return sub_10001FAB8((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t sub_10001FAB8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100020378(&qword_100157518);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  sub_100020378((uint64_t *)&unk_100157550);
  uint64_t v3 = __chkstk_darwin();
  id v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = *(int *)(v3 + 48);
    unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v20[1] = a1;
    uint64_t v10 = a1 + v9;
    uint64_t v11 = *(void *)(v4 + 72);
    swift_retain();
    while (1)
    {
      sub_100029208(v10, (uint64_t)v6, (uint64_t *)&unk_100157550);
      unint64_t result = sub_100026904((uint64_t)v6);
      if (v13) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v15 = v2[6];
      uint64_t v16 = type metadata accessor for URL();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v6, v16);
      *(void *)(v2[7] + 8 * v14) = *(void *)&v6[v8];
      uint64_t v17 = v2[2];
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_12;
      }
      v2[2] = v19;
      v10 += v11;
      if (!--v7)
      {
        swift_release();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  return result;
}

unint64_t sub_10001FCAC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100020378(&qword_100157460);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v3 = sub_100020378(&qword_100157498);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = *(int *)(v4 + 48);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v21[1] = a1;
    uint64_t v11 = a1 + v10;
    uint64_t v12 = *(void *)(v5 + 72);
    swift_retain();
    while (1)
    {
      sub_100029208(v11, (uint64_t)v7, &qword_100157498);
      unint64_t result = sub_1000269A8((uint64_t)v7);
      if (v14) {
        break;
      }
      unint64_t v15 = result;
      *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v16 = v2[6];
      uint64_t v17 = type metadata accessor for UUID();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v15, v7, v17);
      *(void *)(v2[7] + 8 * v15) = *(void *)&v7[v9];
      uint64_t v18 = v2[2];
      BOOL v19 = __OFADD__(v18, 1);
      uint64_t v20 = v18 + 1;
      if (v19) {
        goto LABEL_12;
      }
      v2[2] = v20;
      v11 += v12;
      if (!--v8)
      {
        swift_release();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  return result;
}

uint64_t sub_10001FEA0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001FED8(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 144) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10001FF20())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10001FF74@<X0>(uint64_t a1@<X8>)
{
  return sub_100022D68(&OBJC_IVAR____TtC15swtransparencyd26NetworkReachabilityMonitor_logger, a1);
}

uint64_t sub_10001FF80()
{
  uint64_t v0 = swift_allocObject();
  sub_10001FFB8();
  return v0;
}

void *sub_10001FFB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v0[16] = 0;
  v0[17] = 0;
  v0[18] = sub_10001FAB8((uint64_t)&_swiftEmptyArrayStorage);
  sub_100020338();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100028FFC((unint64_t *)&qword_100156FD8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100020378(&qword_100156FE0);
  sub_1000203BC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin();
  (*(void (**)(char *, void))(v7 + 104))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  v0[14] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  Logger.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))((uint64_t)v0 + OBJC_IVAR____TtC15swtransparencyd26NetworkReachabilityMonitor_logger, v5, v2);
  uint64_t v8 = nw_path_monitor_create();
  v1[15] = v8;
  aBlock[4] = sub_10002056C;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000209E0;
  aBlock[3] = &unk_100137290;
  uint64_t v9 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_path_monitor_set_update_handler(v8, v9);
  _Block_release(v9);
  swift_unknownObjectRelease();
  return v1;
}

unint64_t sub_100020338()
{
  unint64_t result = qword_100156FD0;
  if (!qword_100156FD0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100156FD0);
  }
  return result;
}

uint64_t sub_100020378(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000203BC()
{
  unint64_t result = qword_100156FE8;
  if (!qword_100156FE8)
  {
    sub_100020418(&qword_100156FE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156FE8);
  }
  return result;
}

uint64_t sub_100020418(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100020460(uint64_t a1, uint64_t a2)
{
  sub_100020378(&qword_100157030);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = a2;
  v7[5] = a1;
  swift_retain();
  swift_unknownObjectRetain();
  sub_100020834((uint64_t)v5, (uint64_t)&unk_100157548, (uint64_t)v7);
  return swift_release();
}

uint64_t sub_10002056C(uint64_t a1)
{
  return sub_100020460(a1, v1);
}

uint64_t sub_100020574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100020594, 0, 0);
}

uint64_t sub_100020594()
{
  uint64_t v1 = v0[2];
  sub_100020378(&qword_100157A70);
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  uint64_t v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v1 + 184) + **(int **)(*(void *)v1 + 184));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100020714;
  uint64_t v5 = v0[3];
  return v7(v5, v2);
}

uint64_t sub_100020714()
{
  uint64_t v1 = *(void *)(*v0 + 32);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  sub_100028C8C(v1, &qword_100157A70);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_100020834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100028C8C(a1, &qword_100157030);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000209E0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100020A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100020A50()
{
  return swift_release();
}

uint64_t sub_100020A58(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return _swift_task_switch(sub_100020A7C, v2, 0);
}

uint64_t sub_100020A7C()
{
  sub_100020378(&qword_100156FF8);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(NSObject **)(v0 + 32);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = swift_allocObject();
    *(void *)(v0 + 56) = v4;
    *(void *)(v4 + 16) = v1;
    *(void *)(v4 + 24) = v3;
    BOOL v5 = nw_path_get_status(v2) == nw_path_status_satisfied;
    unint64_t v10 = (uint64_t (*)(char, uint64_t))((char *)&dword_100157008 + dword_100157008);
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100020C10;
    uint64_t v7 = *(void *)(v0 + 40);
    return v10(v5, v7);
  }
  else
  {
    nw_path_get_status(*(nw_path_t *)(v0 + 32));
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_100020C10()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  sub_10001FA48((uint64_t)&dword_100157008);
  return _swift_task_switch(sub_100020D50, v1, 0);
}

uint64_t sub_100020D50()
{
  sub_10001FA48((uint64_t)&dword_100157008);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100020DC4@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 128))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = &unk_100157538;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a1 = v7;
  a1[1] = result;
  return result;
}

uint64_t sub_100020E58(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int *a4)
{
  uint64_t v6 = *a2;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  void *v7 = v4;
  v7[1] = sub_100029274;
  return v9(v6, a3);
}

uint64_t sub_100020F3C(char a1, uint64_t a2, int *a3)
{
  *(unsigned char *)(v3 + 24) = a1;
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100021024;
  return v6();
}

uint64_t sub_100021024()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100021118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(NSObject **)(v3 + 112);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_100025DC8;
  *(void *)(v8 + 24) = v7;
  v11[4] = sub_100025E44;
  v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100021288;
  v11[3] = &unk_100137330;
  uint64_t v9 = _Block_copy(v11);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100021288(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000212B0(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = v1;
  return _swift_task_switch(sub_1000212D0, v1, 0);
}

uint64_t sub_1000212D0()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = *(NSObject **)(v1 + 112);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v6, v4);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100025E70;
  *(void *)(v9 + 24) = v8;
  v0[6] = sub_10002926C;
  v0[7] = v9;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100021288;
  v0[5] = &unk_1001373A8;
  uint64_t v10 = _Block_copy(v0 + 2);
  swift_retain();
  swift_retain();
  swift_release();
  swift_task_dealloc();
  dispatch_sync(v3, v10);
  _Block_release(v10);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  return result;
}

uint64_t sub_100021514(uint64_t *a1, uint64_t a2)
{
  if (*(void *)((*(uint64_t (**)(void))(*a1 + 152))() + 16))
  {
    sub_100026904(a2);
    char v5 = v4;
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  URL.absoluteString.getter();
  uint64_t v7 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  nw_endpoint_t url = nw_endpoint_create_url((const char *)(v7 + 32));
  swift_release();
  nw_parameters_t v9 = nw_parameters_create();
  uint64_t evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
  if (evaluator_for_endpoint)
  {
    uint64_t v11 = evaluator_for_endpoint;
    uint64_t v12 = type metadata accessor for URL();
    unsigned int v30 = &v27;
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(void *)(v13 + 64);
    ((void (*)(void))__chkstk_darwin)();
    unint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    unint64_t v29 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    v28(v15, a2, v12);
    uint64_t v16 = *a1;
    nw_parameters_t v33 = v9;
    uint64_t v17 = *(uint64_t (**)(void *))(v16 + 168);
    uint64_t v27 = a2;
    uint64_t v31 = v11;
    swift_unknownObjectRetain();
    nw_endpoint_t v32 = url;
    uint64_t v18 = (uint64_t (*)(void *, void))v17(aBlock);
    uint64_t v20 = v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v35 = *v20;
    uint64_t *v20 = 0x8000000000000000;
    sub_1000276CC(v11, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
    uint64_t *v20 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v22 = v18(aBlock, 0);
    __chkstk_darwin(v22);
    id v23 = (char *)&v27 - v29;
    v28((char *)&v27 - v29, v27, v12);
    unint64_t v24 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = a1;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v25 + v24, v23, v12);
    aBlock[4] = sub_100028DB8;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000209E0;
    aBlock[3] = &unk_1001375A0;
    id v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    nw_path_evaluator_set_update_handler();
    _Block_release(v26);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_1000218E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100020378(&qword_100157030);
  uint64_t result = __chkstk_darwin();
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void *)(v11 + 64);
    __chkstk_darwin();
    uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
    uint64_t v14 = sub_1000284AC(&qword_1001570E8, (void (*)(uint64_t))type metadata accessor for NetworkReachabilityMonitor);
    unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v16 = (char *)swift_allocObject();
    *((void *)v16 + 2) = a2;
    *((void *)v16 + 3) = v14;
    *((void *)v16 + 4) = a1;
    *((void *)v16 + 5) = a2;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v13, v10);
    swift_retain_n();
    swift_unknownObjectRetain();
    sub_100020834((uint64_t)v8, (uint64_t)&unk_100157510, (uint64_t)v16);
    return swift_release();
  }
  return result;
}

uint64_t sub_100021B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return _swift_task_switch(sub_100021B34, a5, 0);
}

uint64_t sub_100021B34()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void *)(v0 + 40);
  nw_path_status_t status = nw_path_get_status(*(nw_path_t *)(v0 + 24));
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = swift_task_alloc();
  char v5 = *(void (**)(void))(v3 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v5)(v4, v1, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v16 = v5;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = URL.absoluteString.getter();
    *(void *)(v0 + 16) = sub_1000262AC(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
    *(_WORD *)(v8 + 12) = 1024;
    *(_DWORD *)(v0 + 64) = status;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "network url changed %s to %u", (uint8_t *)v8, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    char v5 = v16;
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
  }
  uint64_t v11 = *(void *)(v0 + 32);
  swift_task_dealloc();
  sub_100020378(&qword_100157A70);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v0 + 48) = v12;
  v5();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v12, 0, 1, v2);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v11 + 184)
                                                 + **(int **)(*(void *)v11 + 184));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v13;
  void *v13 = v0;
  v13[1] = sub_100021EC4;
  uint64_t v14 = *(void *)(v0 + 24);
  return v17(v14, v12);
}

uint64_t sub_100021EC4()
{
  uint64_t v1 = *(void *)(*v0 + 48);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  sub_100028C8C(v1, &qword_100157A70);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_100021FE4()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100022004, v0, 0);
}

uint64_t sub_100022004()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(NSObject **)(v1 + 120);
  nw_path_monitor_set_queue(v2, *(dispatch_queue_t *)(v1 + 112));
  nw_path_monitor_start(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100022074()
{
  *(void *)(v1 + 64) = v0;
  return _swift_task_switch(sub_100022094, v0, 0);
}

uint64_t sub_100022094()
{
  uint64_t v1 = v0[8];
  nw_path_monitor_cancel(*(nw_path_monitor_t *)(v1 + 120));
  uint64_t v2 = *(NSObject **)(v1 + 112);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100025EE4;
  *(void *)(v3 + 24) = v1;
  v0[6] = sub_10002926C;
  v0[7] = v3;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100021288;
  v0[5] = &unk_1001373F8;
  uint64_t v4 = _Block_copy(v0 + 2);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v4);
  _Block_release(v4);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  return result;
}

uint64_t sub_100022208(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  uint64_t v6 = sub_100020378(&qword_1001574A0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v12 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v9) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v2 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v9) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v2 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v9) {
          return swift_release();
        }
        unint64_t v17 = *(void *)(v2 + 8 * v11);
        if (!v17)
        {
          int64_t v11 = v16 + 3;
          if (v16 + 3 >= v9) {
            return swift_release();
          }
          unint64_t v17 = *(void *)(v2 + 8 * v11);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_5:
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v14 + *(void *)(*(void *)(v15 - 8) + 72) * v13, v15);
    *(void *)&v8[*(int *)(v6 + 48)] = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    swift_unknownObjectRetain();
    nw_path_evaluator_cancel();
    uint64_t result = sub_100028C8C((uint64_t)v8, &qword_1001574A0);
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v9) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v2 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v2 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100022420(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  uint64_t v6 = sub_100020378(&qword_100157050);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v12 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v9) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v2 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v9) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v2 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v9) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v2 + 8 * v11);
        if (!v19)
        {
          int64_t v11 = v18 + 3;
          if (v18 + 3 >= v9) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v2 + 8 * v11);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v19 - 1) & v19;
    unint64_t v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v14 + *(void *)(*(void *)(v15 - 8) + 72) * v13, v15);
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    *(void *)&v8[*(int *)(v6 + 48)] = v16;
    unint64_t v17 = *(void (**)(void))(*(void *)v16 + 168);
    swift_retain();
    v17();
    uint64_t result = sub_100028C8C((uint64_t)v8, &qword_100157050);
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v9) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v2 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v2 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10002265C()
{
  swift_unknownObjectRelease();
  sub_10001FA48(*(void *)(v0 + 128));
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd26NetworkReachabilityMonitor_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000226E8()
{
  swift_unknownObjectRelease();
  sub_10001FA48(*(void *)(v0 + 128));
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd26NetworkReachabilityMonitor_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100022784(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_1000227A8, v2, 0);
}

uint64_t sub_1000227A8()
{
  (*(void (**)(void, void))(**(void **)(v0 + 32) + 192))(*(void *)(v0 + 16), *(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002282C(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 200) + **(int **)(*(void *)v1 + 200));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100029274;
  return v6(a1);
}

uint64_t sub_100022930()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 208) + **(int **)(*(void *)v0 + 208));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100029274;
  return v4();
}

uint64_t sub_100022A24()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 216) + **(int **)(*(void *)v0 + 216));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100029274;
  return v4();
}

uint64_t sub_100022B18()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t sub_100022B4C(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 112) = a1;
  return result;
}

uint64_t (*sub_100022B8C())()
{
  return j__swift_endAccess;
}

unint64_t sub_100022BE4()
{
  return sub_10001FCAC((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_100022BF0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100022C28(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 120) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100022C70())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100022CC4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_100022D08(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return swift_unknownObjectRelease();
}

uint64_t sub_100022D5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100022D68(&OBJC_IVAR____TtC15swtransparencyd19ReachabilityTracker_log, a1);
}

uint64_t sub_100022D68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100022DD8()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15swtransparencyd19ReachabilityTracker_handler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  sub_10001F9E4(*v1);
  return v2;
}

uint64_t sub_100022E34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC15swtransparencyd19ReachabilityTracker_handler);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return sub_10001FA48(v6);
}

uint64_t (*sub_100022E94())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100022EF0()
{
  type metadata accessor for NetworkReachabilityMonitor(0);
  uint64_t v0 = swift_allocObject();
  sub_10001FFB8();
  sub_1000284AC(&qword_100157028, (void (*)(uint64_t))type metadata accessor for NetworkReachabilityMonitor);
  return v0;
}

uint64_t sub_100022F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  sub_100022FB4(a1, a2);
  return v4;
}

uint64_t sub_100022FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(void *)(v2 + 120) = sub_10001FCAC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v12 = (void *)(v2 + OBJC_IVAR____TtC15swtransparencyd19ReachabilityTracker_handler);
  void *v12 = 0;
  v12[1] = 0;
  *(unsigned char *)(v2 + 112) = 0;
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  swift_unknownObjectRetain();
  Logger.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v2 + OBJC_IVAR____TtC15swtransparencyd19ReachabilityTracker_log, v11, v8);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v2;
  swift_retain();
  sub_100020834((uint64_t)v7, (uint64_t)&unk_100157040, (uint64_t)v14);
  swift_unknownObjectRelease();
  swift_release();
  return v2;
}

uint64_t sub_1000231B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  unint64_t v5 = (*(void *)a4 + 176) & 0xFFFFFFFFFFFFLL | 0xE7FB000000000000;
  v4[3] = *(void *)(*(void *)a4 + 176);
  v4[4] = v5;
  return _swift_task_switch(sub_1000231F4, a4, 0);
}

uint64_t sub_1000231F4()
{
  *(void *)(v0 + 40) = (*(uint64_t (**)(void))(v0 + 24))();
  *(void *)(v0 + 48) = v1;
  return _swift_task_switch(sub_100023264, 0, 0);
}

uint64_t sub_100023264()
{
  uint64_t v7 = v0[6];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10002338C;
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[2];
  return v6(&unk_100157490, v4, ObjectType, v3);
}

uint64_t sub_10002338C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_release();
  return _swift_task_switch(sub_1000234C0, v1, 0);
}

uint64_t sub_1000234C0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 24))();
  uint64_t v3 = v2;
  *(void *)(v0 + 64) = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  *unint64_t v5 = v0;
  v5[1] = sub_1000235CC;
  return v7(ObjectType, v3);
}

uint64_t sub_1000235CC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000236DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)a3 + 264) + **(int **)(*(void *)a3 + 264));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100029274;
  return v8(a1, a2);
}

uint64_t sub_1000237F4()
{
  *(void *)(v1 + 64) = v0;
  return _swift_task_switch(sub_100023814, v0, 0);
}

uint64_t sub_100023814()
{
  uint64_t v44 = v0 + 16;
  id v41 = (void *)(v0 + 48);
  uint64_t v1 = (void *)(v0 + 56);
  id v42 = *(uint64_t (**)(void))(**(void **)(v0 + 64) + 152);
  while (1)
  {
    uint64_t v4 = sub_100020378(&qword_100157050);
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v47 = swift_task_alloc();
    sub_100020378(&qword_100157058);
    uint64_t v6 = swift_task_alloc();
    uint64_t v7 = v42();
    unint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      *id v41 = 0;
      swift_stdlib_random();
      unint64_t v9 = *v41 * v8;
      uint64_t v10 = ((unint64_t)*v41 * (unsigned __int128)v8) >> 64;
      uint64_t v43 = v5;
      if (v8 > v9)
      {
        unint64_t v11 = -(uint64_t)v8 % v8;
        if (v11 > v9)
        {
          do
          {
            *uint64_t v1 = 0;
            swift_stdlib_random();
          }
          while (v11 > *v1 * v8);
          uint64_t v10 = ((unint64_t)*v1 * (unsigned __int128)v8) >> 64;
        }
      }
      uint64_t v12 = sub_100028124(v7);
      uint64_t v14 = v13;
      char v16 = v15 & 1;
      uint64_t v17 = sub_1000281AC(v12, v13, v15 & 1, v10, v7);
      uint64_t v19 = v18;
      uint64_t v21 = v20 & 1;
      sub_100028300(v12, v14, v16);
      uint64_t v22 = swift_task_alloc();
      uint64_t v23 = *(int *)(v4 + 48);
      uint64_t v24 = sub_10002830C(v22, v17, v19, v21, v7);
      *(void *)(v22 + v23) = v24;
      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v6, v22, v25);
      *(void *)(v6 + *(int *)(v4 + 48)) = v24;
      swift_retain();
      sub_100028C8C(v22, &qword_100157050);
      sub_100028300(v17, v19, v21);
      swift_task_dealloc();
      uint64_t v5 = v43;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v6, 0, 1, v4);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, 1, 1, v4);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1) {
      break;
    }
    uint64_t v26 = *(void *)(v45 + 64);
    uint64_t v27 = *(int *)(v4 + 48);
    uint64_t v28 = type metadata accessor for UUID();
    uint64_t v29 = *(void *)(v28 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v47, v6, v28);
    uint64_t v30 = *(void *)(v6 + v27);
    *(void *)(v47 + v27) = v30;
    swift_task_dealloc();
    uint64_t v31 = swift_task_alloc();
    uint64_t v32 = *(int *)(v4 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v31, v47, v28);
    *(void *)(v31 + v32) = v30;
    nw_parameters_t v33 = *(uint64_t (**)(uint64_t))(*(void *)v26 + 168);
    swift_retain();
    v46 = (void (*)(void))v33(v44);
    uint64_t v35 = v34;
    swift_bridgeObjectRetain();
    unint64_t v36 = sub_1000269A8(v31);
    LOBYTE(v33) = v37;
    swift_bridgeObjectRelease();
    if (v33)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v48 = *v35;
      *uint64_t v35 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native) {
        sub_100027E58();
      }
      uint64_t v2 = *(void (**)(unint64_t, uint64_t))(v29 + 8);
      v2(*(void *)(v48 + 48) + *(void *)(v29 + 72) * v36, v28);
      sub_1000273EC(v36, v48);
      *uint64_t v35 = v48;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v2 = *(void (**)(unint64_t, uint64_t))(v29 + 8);
    }
    v2(v31, v28);
    swift_release();
    v46();
    uint64_t v3 = swift_task_dealloc();
    (*(void (**)(uint64_t))(*(void *)v30 + 176))(v3);
    swift_release();
    sub_100028C8C(v47, &qword_100157050);
    swift_task_dealloc();
  }
  sub_100028C8C(v6, &qword_100157058);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = *(uint64_t (**)(void))(v45 + 8);
  return v39();
}

uint64_t sub_100023D68(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_100023D8C, v2, 0);
}

uint64_t sub_100023D8C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(**(void **)(v0 + 32) + 208);
  swift_retain();
  v3(v2, v1);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100023E30(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_100023E50, v1, 0);
}

uint64_t sub_100023E50()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 176))();
  uint64_t v3 = v2;
  *(void *)(v0 + 32) = v1;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100023F80;
  uint64_t v6 = *(void *)(v0 + 16);
  return v8(v6, ObjectType, v3);
}

uint64_t sub_100023F80()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100024090()
{
  *(void *)(v1 + 48) = v0;
  return _swift_task_switch(sub_1000240B0, v0, 0);
}

uint64_t sub_1000240B0()
{
  if ((*(uint64_t (**)(void))(*(void *)v0[6] + 128))())
  {
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    uint64_t v3 = v0[6];
    uint64_t v4 = type metadata accessor for UUID();
    v0[7] = v4;
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = swift_task_alloc();
    v0[8] = v6;
    UUID.init()();
    type metadata accessor for ContinuationStore(0);
    uint64_t v7 = sub_1000931E8();
    v0[9] = v7;
    uint64_t v8 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v6, v4);
    uint64_t v9 = *(uint64_t (**)(void *))(*(void *)v3 + 168);
    swift_retain();
    uint64_t v10 = (void (*)(void *, void))v9(v0 + 2);
    uint64_t v12 = v11;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v12;
    uint64_t *v12 = 0x8000000000000000;
    sub_100027874(v7, v8, isUniquelyReferenced_nonNull_native);
    uint64_t *v12 = v16;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v0[10] = v14;
    v0[11] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v14(v8, v4);
    v10(v0 + 2, 0);
    swift_task_dealloc();
    sub_1000284AC(&qword_100157088, (void (*)(uint64_t))type metadata accessor for ReachabilityTracker);
    char v15 = (void *)swift_task_alloc();
    v0[12] = v15;
    void *v15 = v0;
    v15[1] = sub_1000243C0;
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }
}

uint64_t sub_1000243C0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_100024574;
  }
  else {
    uint64_t v4 = sub_1000244EC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000244EC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[7];
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100024574()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[7];
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000245FC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10002461C, 0, 0);
}

uint64_t sub_10002461C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000246F4;
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000010, 0x8000000100110410, sub_100028AFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1000246F4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100024828, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100024828()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024840(char a1, uint64_t a2)
{
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = v2;
  *(unsigned char *)(v3 + 64) = a1;
  sub_100020378(&qword_100157030);
  *(void *)(v3 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1000248D8, v2, 0);
}

uint64_t sub_1000248D8()
{
  uint64_t v51 = v0;
  uint64_t v1 = *(void *)(v0 + 40);
  int v2 = *(unsigned __int8 *)(v0 + 64);
  int v3 = (*(uint64_t (**)(void))(**(void **)(v0 + 48) + 128))() & 1;
  uint64_t v4 = *(void *)(sub_100020378(&qword_100157A70) - 8);
  uint64_t v5 = swift_task_alloc();
  sub_100029208(v1, v5, &qword_100157A70);
  if (v2 != v3)
  {
    uint64_t v49 = v4;
    sub_100028C8C(v5, &qword_100157A70);
LABEL_15:
    uint64_t v16 = *(void *)(v0 + 40);
    (*(void (**)(void))(**(void **)(v0 + 48) + 136))(*(unsigned __int8 *)(v0 + 64));
    uint64_t v17 = swift_task_alloc();
    sub_100029208(v16, v17, &qword_100157A70);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v48 = v19;
      uint64_t v20 = swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v21 = swift_task_alloc();
      sub_100029208(v17, v21, &qword_100157A70);
      uint64_t v22 = type metadata accessor for URL();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
      {
        sub_100028C8C(v21, &qword_100157A70);
        uint64_t v24 = 0;
        unint64_t v25 = 0xE000000000000000;
      }
      else
      {
        uint64_t v24 = URL.description.getter();
        unint64_t v25 = v26;
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
      }
      int v27 = *(unsigned __int8 *)(v0 + 64);
      swift_task_dealloc();
      *(void *)(v0 + 16) = sub_1000262AC(v24, v25, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100028C8C(v17, &qword_100157A70);
      *(_WORD *)(v20 + 12) = 2082;
      if (v27) {
        uint64_t v28 = 7562617;
      }
      else {
        uint64_t v28 = 28526;
      }
      if (v27) {
        unint64_t v29 = 0xE300000000000000;
      }
      else {
        unint64_t v29 = 0xE200000000000000;
      }
      *(void *)(v0 + 24) = sub_1000262AC(v28, v29, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v48, "network change: %s available %{public}s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100028C8C(v17, &qword_100157A70);
    }
    int v30 = *(unsigned __int8 *)(v0 + 64);
    uint64_t v31 = swift_task_dealloc();
    if (v30 == 1)
    {
      uint64_t v32 = *(void *)(v0 + 48);
      uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 152))(v31);
      sub_100022420(v33);
      swift_bridgeObjectRelease();
      unint64_t v34 = sub_10001FCAC((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v31 = (*(uint64_t (**)(unint64_t))(*(void *)v32 + 160))(v34);
    }
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 48) + 200))(v31);
    if (v35)
    {
      uint64_t v37 = v35;
      uint64_t v38 = v36;
      uint64_t v39 = *(void *)(v0 + 56);
      uint64_t v40 = *(void *)(v0 + 40);
      char v41 = *(unsigned char *)(v0 + 64);
      uint64_t v42 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v39, 1, 1, v42);
      uint64_t v43 = swift_task_alloc();
      sub_100029208(v40, v43, &qword_100157A70);
      unint64_t v44 = (*(unsigned __int8 *)(v49 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = 0;
      *(void *)(v45 + 24) = 0;
      *(void *)(v45 + 32) = v37;
      *(void *)(v45 + 40) = v38;
      *(unsigned char *)(v45 + 48) = v41;
      sub_10002867C(v43, v45 + v44);
      swift_task_dealloc();
      sub_100020834(v39, (uint64_t)&unk_1001570A8, v45);
      swift_release();
    }
    goto LABEL_31;
  }
  int v6 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v7 = swift_task_alloc();
  sub_10002867C(v5, v7);
  if (v6 == 1)
  {
    uint64_t v8 = type metadata accessor for URL();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) != 1)
    {
      uint64_t v49 = v4;
      sub_100028C8C(v7, &qword_100157A70);
      swift_task_dealloc();
      goto LABEL_15;
    }
  }
  sub_100028C8C(v7, &qword_100157A70);
  swift_task_dealloc();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    int v11 = *(unsigned __int8 *)(v0 + 64);
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    v50[0] = v13;
    if (v11) {
      uint64_t v14 = 7562617;
    }
    else {
      uint64_t v14 = 28526;
    }
    if (v11) {
      unint64_t v15 = 0xE300000000000000;
    }
    else {
      unint64_t v15 = 0xE200000000000000;
    }
    *(void *)(v0 + 32) = sub_1000262AC(v14, v15, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "network notification, but no actual change %{public}s)", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

LABEL_31:
  swift_task_dealloc();
  swift_task_dealloc();
  v46 = *(uint64_t (**)(void))(v0 + 8);
  return v46();
}

uint64_t sub_10002502C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  os_log_type_t v10 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v10;
  *os_log_type_t v10 = v7;
  v10[1] = sub_100029274;
  return v12(a6, a7);
}

uint64_t sub_100025114()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100025134, v0, 0);
}

uint64_t sub_100025134()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (*(uint64_t (**)(void, void))(*(void *)v1 + 208))(0, 0);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 176))(v2);
  uint64_t v5 = v4;
  v0[3] = v3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 40) + **(int **)(v5 + 40));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[4] = v7;
  void *v7 = v0;
  v7[1] = sub_100025288;
  return v9(ObjectType, v5);
}

uint64_t sub_100025288()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100025398(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1000253B8, v1, 0);
}

uint64_t sub_1000253B8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  (*(void (**)(void))(**(void **)(v0 + 24) + 128))();
  TransparencySWSysdiagnose.Reachability.init(network:)();
  uint64_t v2 = type metadata accessor for TransparencySWSysdiagnose.Reachability();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_100025484(void *a1)
{
  id v2 = [a1 domain];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_14:
    [a1 code];
    return;
  }
  id v9 = [a1 underlyingErrors];
  sub_100020378(&qword_1001570C0);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    swift_errorRetain();
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
    char v13 = sub_100025484();
    swift_errorRelease();

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v11 - 1;
      while (v15 != v14)
      {
        if ((unint64_t)(v14 + 1) >= *(void *)(v10 + 16))
        {
          __break(1u);
          return;
        }
        swift_errorRetain();
        uint64_t v16 = (void *)_convertErrorToNSError(_:)();
        char v17 = sub_100025484();
        swift_errorRelease();

        ++v14;
        if (v17) {
          break;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_10002564C()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd19ReachabilityTracker_log;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10001FA48(*(void *)(v0 + OBJC_IVAR____TtC15swtransparencyd19ReachabilityTracker_handler));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000256DC()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd19ReachabilityTracker_log;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10001FA48(*(void *)(v0 + OBJC_IVAR____TtC15swtransparencyd19ReachabilityTracker_handler));
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t SWTURLSession.URLSessionMaker.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_100025788(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 280) + **(int **)(**(void **)v1 + 280));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100029274;
  return v6(a1);
}

uint64_t sub_10002589C()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 256) + **(int **)(**(void **)v0 + 256));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100021024;
  return v4();
}

uint64_t sub_10002599C(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 248) + **(int **)(**(void **)v1 + 248));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100029274;
  return v6(a1);
}

uint64_t sub_100025AA4(uint64_t a1, uint64_t a2)
{
  char v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 240)
                                                + **(int **)(**(void **)v2 + 240));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100029274;
  return v8(a1, a2);
}

uint64_t sub_100025BB4()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 272) + **(int **)(**(void **)v0 + 272));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100029274;
  return v4();
}

uint64_t sub_100025CB4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100025CEC(char a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100029274;
  char v8 = (uint64_t (*)(char, uint64_t, int *))((char *)&dword_100157000 + dword_100157000);
  return v8(a1, a2, v6);
}

uint64_t sub_100025DB0()
{
  return sub_100025FCC((void (*)(void))&_swift_release);
}

uint64_t sub_100025DC8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 136);
  swift_retain();
  return v4(v2, v3);
}

uint64_t sub_100025E34()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100025E44()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100025E70()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v2 = *(uint64_t **)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100021514(v2, v3);
}

uint64_t sub_100025ED4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100025EE4()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 152))();
  sub_100022208(v1);
  swift_bridgeObjectRelease();
  unint64_t v2 = sub_10001FAB8((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v3 = *(uint64_t (**)(unint64_t))(*(void *)v0 + 160);

  return v3(v2);
}

uint64_t sub_100025F84()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for NetworkReachabilityMonitor(uint64_t a1)
{
  return sub_100028514(a1, (uint64_t *)&unk_10015B580);
}

uint64_t sub_100025FB4()
{
  return sub_100025FCC((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_100025FCC(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_100026014()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100029274;
  v3[2] = v2;
  unint64_t v4 = (*(void *)v2 + 176) & 0xFFFFFFFFFFFFLL | 0xE7FB000000000000;
  v3[3] = *(void *)(*(void *)v2 + 176);
  v3[4] = v4;
  return _swift_task_switch(sub_1000231F4, v2, 0);
}

uint64_t sub_1000260D8(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *unint64_t v4 = v2;
  v4[1] = sub_1000261B4;
  return v6(a1);
}

uint64_t sub_1000261B4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000262AC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100026380(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100028A9C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100028A9C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100028A4C((uint64_t)v12);
  return v7;
}

uint64_t sub_100026380(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10002653C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10002653C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000265D4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000267B4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000267B4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000265D4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10002674C(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10002674C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100020378((uint64_t *)&unk_1001589F0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000267B4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100020378((uint64_t *)&unk_1001589F0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100026904(uint64_t a1)
{
  type metadata accessor for URL();
  sub_100028FFC(&qword_100157520, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100026A4C(a1, v2, (uint64_t (*)(void))&type metadata accessor for URL, &qword_100157528, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_1000269A8(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_100028FFC(&qword_100157468, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100026A4C(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&unk_100157470, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_100026A4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v22 = a4;
  uint64_t v7 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v8 = a2 & ~v7;
  uint64_t v19 = v6 + 64;
  uint64_t v20 = a1;
  if ((*(void *)(v6 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v18 = ~v7;
    uint64_t v9 = a3(0);
    uint64_t v10 = *(void **)(v9 - 8);
    size_t v11 = (void (*)(char *, unint64_t, uint64_t))v10[2];
    uint64_t v13 = v10[8];
    uint64_t v12 = v10[9];
    uint64_t v14 = (void (**)(char *, uint64_t))(v10 + 1);
    do
    {
      __chkstk_darwin();
      v11((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *(void *)(v21 + 48) + v12 * v8, v9);
      sub_100028FFC(v22, v23);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      if (v15) {
        break;
      }
      unint64_t v8 = (v8 + 1) & v18;
    }
    while (((*(void *)(v19 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

uint64_t sub_100026BC4(uint64_t a1, int a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100020378(&qword_100157518);
  int v43 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 64);
  char v41 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v40) {
      break;
    }
    uint64_t v19 = v41;
    unint64_t v20 = v41[v18];
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v20 = v41[v14];
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v40)
        {
LABEL_34:
          swift_release();
          unint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = v41[v21];
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v40) {
              goto LABEL_34;
            }
            unint64_t v20 = v41[v14];
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    __chkstk_darwin();
    unint64_t v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v27 = *(void *)(v26 + 72);
    unint64_t v28 = *(void *)(v5 + 48) + v27 * v17;
    uint64_t v44 = v29;
    if (v43)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v23 + 32))((char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v22);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))((char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v22);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      swift_unknownObjectRetain();
    }
    sub_100028FFC(&qword_100157520, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v12 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v32) & ~*(void *)(v12 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v12 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v15 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v23 + 32))(*(void *)(v7 + 48) + v27 * v15, v25, v22);
    *(void *)(*(void *)(v7 + 56) + 8 * v15) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v39;
  uint64_t v19 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v19, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_100026FD8(uint64_t a1, int a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100020378(&qword_100157460);
  int v43 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 64);
  char v41 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v40) {
      break;
    }
    uint64_t v19 = v41;
    unint64_t v20 = v41[v18];
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v20 = v41[v14];
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v40)
        {
LABEL_34:
          swift_release();
          unint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = v41[v21];
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v40) {
              goto LABEL_34;
            }
            unint64_t v20 = v41[v14];
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    uint64_t v22 = type metadata accessor for UUID();
    uint64_t v23 = *(void *)(v22 - 8);
    __chkstk_darwin(v22);
    unint64_t v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v27 = *(void *)(v26 + 72);
    unint64_t v28 = *(void *)(v5 + 48) + v27 * v17;
    uint64_t v44 = v29;
    if (v43)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v23 + 32))((char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v22);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))((char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v22);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      swift_retain();
    }
    sub_100028FFC(&qword_100157468, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v12 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v32) & ~*(void *)(v12 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v12 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v15 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v23 + 32))(*(void *)(v7 + 48) + v27 * v15, v25, v22);
    *(void *)(*(void *)(v7 + 56) + 8 * v15) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v39;
  uint64_t v19 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v19, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_1000273EC(unint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v8 = (result + 1) & v7;
      uint64_t result = type metadata accessor for UUID();
      unint64_t v43 = result;
      uint64_t v9 = *(void **)(result - 8);
      uint64_t v10 = (void (*)(char *, unint64_t, unint64_t))v9[2];
      int64_t v40 = v9 + 2;
      char v41 = v10;
      uint64_t v11 = v9[8];
      uint64_t v12 = v9[9];
      uint64_t v38 = v12;
      uint64_t v39 = v11;
      uint64_t v37 = (uint64_t (**)(char *, unint64_t))(v9 + 1);
      uint64_t v42 = v4;
      unint64_t v13 = result;
      do
      {
        __chkstk_darwin(result);
        unint64_t v15 = v8;
        unint64_t v16 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
        int64_t v17 = v12 * v6;
        v41(v16, *(void *)(v2 + 48) + v12 * v6, v13);
        uint64_t v18 = v2;
        uint64_t v19 = v7;
        uint64_t v20 = v18;
        sub_100028FFC(&qword_100157468, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v22 = v16;
        uint64_t v8 = v15;
        uint64_t result = (*v37)(v22, v13);
        uint64_t v23 = v21 & v19;
        uint64_t v7 = v19;
        if (v3 >= (uint64_t)v15)
        {
          if (v23 >= v15 && v3 >= v23)
          {
LABEL_16:
            uint64_t v2 = v20;
            uint64_t v26 = *(void *)(v20 + 48);
            uint64_t v12 = v38;
            uint64_t result = v26 + v38 * v3;
            if (v38 * v3 < v17 || result >= v26 + v17 + v38)
            {
              uint64_t result = swift_arrayInitWithTakeFrontToBack();
              uint64_t v4 = v42;
            }
            else
            {
              uint64_t v4 = v42;
              if (v38 * v3 != v17) {
                uint64_t result = swift_arrayInitWithTakeBackToFront();
              }
            }
            uint64_t v27 = *(void *)(v2 + 56);
            unint64_t v28 = (void *)(v27 + 8 * v3);
            uint64_t v29 = (void *)(v27 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v28 >= v29 + 1))
            {
              *unint64_t v28 = *v29;
              int64_t v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v15 || v3 >= v23)
        {
          goto LABEL_16;
        }
        uint64_t v4 = v42;
        uint64_t v2 = v20;
        uint64_t v12 = v38;
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << result) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(v2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v35;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

uint64_t sub_1000276CC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100026904(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100027B8C();
    goto LABEL_7;
  }
  sub_100026BC4(v13, a3 & 1);
  unint64_t v19 = sub_100026904(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    type metadata accessor for URL();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  type metadata accessor for URL();
  __chkstk_darwin();
  uint64_t v22 = (char *)&v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v23 + 16))(v22, a2);
  return sub_100027A1C(v10, (uint64_t)v22, a1, v16);
}

uint64_t sub_100027874(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000269A8(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100027E58();
    goto LABEL_7;
  }
  sub_100026FD8(v13, a3 & 1);
  unint64_t v19 = sub_1000269A8(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    type metadata accessor for UUID();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v21 = type metadata accessor for UUID();
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v24 + 16))(v23, a2);
  return sub_100027AD4(v10, (uint64_t)v23, a1, v16);
}

uint64_t sub_100027A1C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100027AD4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_100027B8C()
{
  sub_100020378(&qword_100157518);
  uint64_t v31 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v35 = v2;
  if (!v3)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v29 = v35;
    unint64_t v28 = v31;
LABEL_28:
    *unint64_t v28 = v29;
    return result;
  }
  uint64_t v4 = v2;
  uint64_t result = (void *)(v2 + 64);
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
  {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
    uint64_t v4 = v35;
  }
  int64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v34 = v1;
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  uint64_t v32 = v1 + 64;
  int64_t v33 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v35;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      uint64_t v15 = v34;
      goto LABEL_12;
    }
    int64_t v25 = v8 + 1;
    uint64_t v15 = v34;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v25);
    ++v8;
    if (!v26)
    {
      int64_t v8 = v25 + 1;
      if (v25 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v32 + 8 * v8);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v26 - 1) & v26;
    unint64_t v14 = __clz(__rbit64(v26)) + (v8 << 6);
LABEL_12:
    uint64_t v16 = type metadata accessor for URL();
    uint64_t v17 = *(void *)(v16 - 8);
    __chkstk_darwin();
    unint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v21 = *(void *)(v20 + 72) * v14;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v19, *(void *)(v15 + 48) + v21, v16);
    uint64_t v22 = *(void *)(v15 + 56);
    uint64_t v23 = 8 * v14;
    uint64_t v24 = *(void *)(v22 + 8 * v14);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v12 + 48) + v21, v19, v16);
    *(void *)(*(void *)(v12 + 56) + v23) = v24;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    unint64_t v28 = v31;
    uint64_t v29 = v35;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v32 + 8 * v27);
  if (v26)
  {
    int64_t v8 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v8 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v8);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100027E58()
{
  sub_100020378(&qword_100157460);
  uint64_t v31 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v35 = v2;
  if (!v3)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v29 = v35;
    unint64_t v28 = v31;
LABEL_28:
    *unint64_t v28 = v29;
    return result;
  }
  uint64_t v4 = v2;
  uint64_t result = (void *)(v2 + 64);
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
  {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
    uint64_t v4 = v35;
  }
  int64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v34 = v1;
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  uint64_t v32 = v1 + 64;
  int64_t v33 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v35;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      uint64_t v15 = v34;
      goto LABEL_12;
    }
    int64_t v25 = v8 + 1;
    uint64_t v15 = v34;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v25);
    ++v8;
    if (!v26)
    {
      int64_t v8 = v25 + 1;
      if (v25 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v32 + 8 * v8);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v26 - 1) & v26;
    unint64_t v14 = __clz(__rbit64(v26)) + (v8 << 6);
LABEL_12:
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    __chkstk_darwin(v16);
    unint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v21 = *(void *)(v20 + 72) * v14;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v19, *(void *)(v15 + 48) + v21, v16);
    uint64_t v22 = *(void *)(v15 + 56);
    uint64_t v23 = 8 * v14;
    uint64_t v24 = *(void *)(v22 + 8 * v14);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v12 + 48) + v21, v19, v16);
    *(void *)(*(void *)(v12 + 56) + v23) = v24;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    unint64_t v28 = v31;
    uint64_t v29 = v35;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v32 + 8 * v27);
  if (v26)
  {
    int64_t v8 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v8 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v8);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100028124(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000281AC(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4 < 0) {
    goto LABEL_25;
  }
  if (!a4)
  {
    unint64_t v11 = result;
LABEL_22:
    sub_100028B20(result, a2, a3 & 1);
    return v11;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a5 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a5 + 32);
  int v8 = *(_DWORD *)(a5 + 36);
  unint64_t v9 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = a5 + 88;
  unint64_t v11 = result;
  int v12 = a2;
  while ((v11 & 0x8000000000000000) == 0 && (uint64_t)v11 < v7)
  {
    if (v12 != v8) {
      goto LABEL_24;
    }
    unint64_t v13 = v11 >> 6;
    uint64_t v14 = *(void *)(v6 + 8 * (v11 >> 6));
    if ((v14 & (1 << v11)) == 0) {
      goto LABEL_24;
    }
    unint64_t v15 = v14 & (-2 << (v11 & 0x3F));
    if (v15)
    {
      unint64_t v11 = __clz(__rbit64(v15)) | v11 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v16 = v13 + 1;
      unint64_t v11 = v7;
      if (v13 + 1 < v9)
      {
        unint64_t v17 = *(void *)(v6 + 8 * v16);
        if (!v17)
        {
          unint64_t v16 = v13 + 2;
          unint64_t v11 = v7;
          if (v13 + 2 >= v9) {
            goto LABEL_5;
          }
          unint64_t v17 = *(void *)(v6 + 8 * v16);
          if (!v17)
          {
            while (v9 - 3 != v13)
            {
              unint64_t v17 = *(void *)(v10 + 8 * v13++);
              if (v17)
              {
                unint64_t v16 = v13 + 2;
                goto LABEL_13;
              }
            }
            unint64_t v11 = v7;
            goto LABEL_5;
          }
        }
LABEL_13:
        unint64_t v11 = __clz(__rbit64(v17)) + (v16 << 6);
      }
    }
LABEL_5:
    ++v5;
    int v12 = v8;
    if (v5 == a4) {
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100028300(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002830C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(a5 + 48);
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a2, v8);

  return swift_retain();
}

uint64_t sub_1000283DC(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = sub_100021024;
  return _swift_task_switch(sub_10002461C, 0, 0);
}

uint64_t sub_100028488()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t sub_1000284AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ReachabilityTracker(uint64_t a1)
{
  return sub_100028514(a1, (uint64_t *)&unk_10015B590);
}

uint64_t sub_100028514(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002854C()
{
  uint64_t v1 = *(void *)(sub_100020378(&qword_100157A70) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 49) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10002867C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157A70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000286E4()
{
  uint64_t v2 = *(void *)(sub_100020378(&qword_100157A70) - 8);
  uint64_t v3 = *(int **)(v0 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 48);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100021024;
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  uint64_t v7 = (void *)swift_task_alloc();
  v6[2] = v7;
  void *v7 = v6;
  v7[1] = sub_100029274;
  return v9(v4, v5);
}

uint64_t sub_100028854(uint64_t a1)
{
  uint64_t result = sub_1000284AC(&qword_1001570E8, (void (*)(uint64_t))type metadata accessor for NetworkReachabilityMonitor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000288AC()
{
  return type metadata accessor for NetworkReachabilityMonitor(0);
}

uint64_t sub_1000288B4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100028980()
{
  return type metadata accessor for ReachabilityTracker(0);
}

uint64_t sub_100028988()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100028A4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100028A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100028AFC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t sub_100028B20(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100028B2C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100029274;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001580B0 + dword_1001580B0);
  return v6(a1, v4);
}

uint64_t sub_100028BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100029274;
  return sub_1000236DC(a1, a2, v2);
}

uint64_t sub_100028C8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100020378(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100028CEC()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100028DB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000218E0(a1, v4, v5);
}

uint64_t sub_100028E2C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100028F08()
{
  uint64_t v2 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100029274;
  v6[4] = v3;
  v6[5] = v5;
  v6[3] = v4;
  return _swift_task_switch(sub_100021B34, v3, 0);
}

uint64_t sub_100028FFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100029044(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(v3 + 16);
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_100029274;
  uint64_t v10 = (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t, int *))((char *)&dword_100157530 + dword_100157530);
  return v10(a1, a2, a3, v8);
}

uint64_t sub_100029114()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002915C()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100029274;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100020594, 0, 0);
}

uint64_t sub_100029208(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100020378(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000292A4()
{
  return 0;
}

uint64_t sub_1000292AC()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_1000292E0(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_100029320())()
{
  return j__swift_endAccess;
}

uint64_t sub_100029374()
{
  return v0;
}

uint64_t sub_10002937C()
{
  return _swift_deallocClassInstance(v0, 17, 7);
}

uint64_t sub_10002938C()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t sub_1000293B4()
{
  uint64_t result = v0;
  *(unsigned char *)(v0 + 16) = 0;
  return result;
}

uint64_t sub_1000293C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162240);
  sub_1000294A8(v0, (uint64_t)qword_100162240);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100029444()
{
  if (qword_10015B5A0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162240);
}

uint64_t sub_1000294A8(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000294E0@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015B5A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162240);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_10002958C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100029594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1000295A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6F704577656E202CLL;
  v6._object = (void *)0xEC000000203A6863;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0xEC000000203A6E6FLL;
  v8._countAndFlagsBits = 0x697369766572202CLL;
  String.append(_:)(v8);
  if (a4)
  {
    unint64_t v11 = 0xE100000000000000;
    uint64_t v9 = 45;
  }
  else
  {
    sub_100029714();
    uint64_t v9 = BinaryInteger.description.getter();
    unint64_t v11 = v10;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  return 0x68636F7045646C6FLL;
}

unint64_t sub_100029714()
{
  unint64_t result = qword_1001575C0;
  if (!qword_1001575C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001575C0);
  }
  return result;
}

uint64_t sub_100029770()
{
  return sub_1000295A0(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

unint64_t sub_100029780(void *a1, unint64_t a2)
{
  if ([a1 hasSlh])
  {
    id v4 = [a1 slh];
    if (v4)
    {
      Swift::String v5 = v4;
      sub_10002989C();
      id v6 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v5];
      int64_t v7 = sub_100066B58();
      if (v7 >= 1 && v7 > a2)
      {
        sub_100066C14();

        return a2;
      }
    }
  }
  return 0;
}

unint64_t sub_10002989C()
{
  unint64_t result = qword_1001575C8;
  if (!qword_1001575C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001575C8);
  }
  return result;
}

char *sub_1000298DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100020378(&qword_1001575D0);
  __chkstk_darwin(v6 - 8);
  Swift::String v8 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for KTSWDB.SignedLogHead();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = (char *)sub_100066A5C();
  if (v3) {
    return result;
  }
  v162 = result;
  uint64_t v163 = v14;
  uint64_t v161 = a3;
  unint64_t v15 = sub_100066B58();
  int v158 = sub_100066B78();
  unint64_t v153 = sub_100066C14();
  uint64_t v151 = (uint64_t)sub_100066C34();
  unint64_t v146 = v16;
  uint64_t v17 = a1[4];
  unint64_t v160 = a1[3];
  sub_10002BCF8(a1, v160);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v17 + 120);
  unint64_t v148 = v15;
  uint64_t v19 = v18(v162, v163);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 + 16);
  if (v21 == 1)
  {
    unint64_t v22 = v146;
    uint64_t v23 = v19;
    if (sub_10002B104(v151, v146, v19))
    {
      swift_bridgeObjectRelease();
      sub_10002BD3C(v151, v22);
      return (char *)swift_bridgeObjectRelease();
    }
    uint64_t v21 = *(void *)(v23 + 16);
    uint64_t v20 = v23;
  }
  if (!v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (char *)sub_10002BD3C(v151, v146);
  }
  uint64_t v24 = 0;
  int v135 = 0;
  unint64_t v137 = HIDWORD(v151);
  BOOL v25 = __OFSUB__(HIDWORD(v151), v151);
  BOOL v141 = v25;
  size_t v140 = HIDWORD(v151) - (int)v151;
  size_t v152 = BYTE6(v146);
  unint64_t v142 = v146 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v139 = (int)v151;
  uint64_t v138 = v151 >> 32;
  uint64_t v136 = (v151 >> 32) - (int)v151;
  v147 = (void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
  uint64_t v134 = v20;
  unint64_t v26 = (unint64_t *)(v20 + 40);
  unint64_t v143 = v146 >> 62;
  unint64_t v150 = v146 >> 62;
  v154 = a1;
  uint64_t v149 = v21;
  while (2)
  {
    if (__OFADD__(v24, 1))
    {
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
    }
    uint64_t v156 = v24 + 1;
    uint64_t v157 = v24;
    uint64_t v28 = *(v26 - 1);
    unint64_t v27 = *v26;
    v155 = v26 + 2;
    unint64_t v29 = v27 >> 62;
    uint64_t v30 = 0;
    unint64_t v160 = v27;
    uint64_t v159 = v28;
    switch(v27 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v28), v28)) {
          goto LABEL_148;
        }
        uint64_t v30 = HIDWORD(v28) - (int)v28;
LABEL_21:
        sub_10002BD94(v28, v160);
        uint64_t v28 = v159;
        unint64_t v27 = v160;
LABEL_22:
        size_t v33 = v152;
        switch(v150)
        {
          case 1uLL:
            size_t v33 = v140;
            if (v141) {
              goto LABEL_150;
            }
            goto LABEL_26;
          case 2uLL:
            uint64_t v35 = *(void *)(v151 + 16);
            uint64_t v34 = *(void *)(v151 + 24);
            BOOL v36 = __OFSUB__(v34, v35);
            size_t v33 = v34 - v35;
            if (!v36) {
              goto LABEL_26;
            }
            goto LABEL_151;
          case 3uLL:
            if (!v30) {
              goto LABEL_13;
            }
            goto LABEL_125;
          default:
LABEL_26:
            if (v30 != v33) {
              goto LABEL_125;
            }
            if (v30 < 1) {
              goto LABEL_13;
            }
            break;
        }
        break;
      case 2uLL:
        uint64_t v32 = *(void *)(v28 + 16);
        uint64_t v31 = *(void *)(v28 + 24);
        uint64_t v30 = v31 - v32;
        if (!__OFSUB__(v31, v32)) {
          goto LABEL_21;
        }
        goto LABEL_149;
      case 3uLL:
        goto LABEL_22;
      default:
        uint64_t v30 = BYTE6(v27);
        goto LABEL_22;
    }
    switch((int)v29)
    {
      case 1:
        uint64_t v41 = (int)v28;
        if ((int)v28 > v28 >> 32) {
          goto LABEL_152;
        }
        sub_10002BD94(v28, v27);
        uint64_t v42 = __DataStorage._bytes.getter();
        if (v42)
        {
          uint64_t v43 = v42;
          uint64_t v44 = __DataStorage._offset.getter();
          if (__OFSUB__(v41, v44)) {
            goto LABEL_154;
          }
          uint64_t v45 = (const void *)(v43 + v41 - v44);
        }
        else
        {
          uint64_t v45 = 0;
        }
        a1 = v154;
        __DataStorage._length.getter();
        if (v143)
        {
          if (v143 == 1)
          {
            if (v138 < v139) {
              goto LABEL_163;
            }
            swift_retain();
            v61 = (char *)__DataStorage._bytes.getter();
            if (v61)
            {
              uint64_t v62 = __DataStorage._offset.getter();
              if (__OFSUB__(v139, v62)) {
                goto LABEL_170;
              }
              v61 += v139 - v62;
            }
            uint64_t v63 = __DataStorage._length.getter();
            size_t v64 = v136;
            if (v63 < v136) {
              size_t v64 = v63;
            }
            if (!v45) {
              goto LABEL_176;
            }
            if (!v61) {
              goto LABEL_177;
            }
            int v65 = memcmp(v45, v61, v64);
            sub_10002BD3C(v151, v146);
          }
          else
          {
            uint64_t v83 = *(void *)(v151 + 16);
            v145 = *(char **)(v151 + 24);
            swift_retain();
            swift_retain();
            v84 = (char *)__DataStorage._bytes.getter();
            if (v84)
            {
              uint64_t v85 = __DataStorage._offset.getter();
              if (__OFSUB__(v83, v85)) {
                goto LABEL_169;
              }
              v84 += v83 - v85;
            }
            BOOL v36 = __OFSUB__(v145, v83);
            v86 = &v145[-v83];
            if (v36) {
              goto LABEL_164;
            }
            uint64_t v87 = __DataStorage._length.getter();
            if (v87 >= (uint64_t)v86) {
              size_t v88 = (size_t)v86;
            }
            else {
              size_t v88 = v87;
            }
            if (!v45) {
              goto LABEL_184;
            }
            a1 = v154;
            if (!v84) {
              goto LABEL_185;
            }
            int v65 = memcmp(v45, v84, v88);
            swift_release();
            swift_release();
          }
        }
        else
        {
          LODWORD(__s1[0]) = v151;
          BYTE4(__s1[0]) = v137;
          *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v151 + 5);
          BYTE7(__s1[0]) = HIBYTE(v151);
          DWORD2(__s1[0]) = v146;
          WORD6(__s1[0]) = WORD2(v146);
          if (!v45) {
            goto LABEL_183;
          }
          int v65 = memcmp(v45, __s1, v152);
        }
        uint64_t v89 = v159;
        unint64_t v90 = v160;
        sub_10002BD3C(v159, v160);
        uint64_t v28 = v89;
        unint64_t v27 = v90;
        if (!v65) {
          goto LABEL_13;
        }
        goto LABEL_125;
      case 2:
        uint64_t v46 = *(void *)(v28 + 16);
        swift_retain();
        swift_retain();
        uint64_t v47 = __DataStorage._bytes.getter();
        if (!v47)
        {
          v145 = 0;
LABEL_57:
          a1 = v154;
          __DataStorage._length.getter();
          if (!v143)
          {
            LODWORD(__s1[0]) = v151;
            BYTE4(__s1[0]) = v137;
            *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v151 + 5);
            BYTE7(__s1[0]) = HIBYTE(v151);
            DWORD2(__s1[0]) = v146;
            WORD6(__s1[0]) = WORD2(v146);
            if (!v145) {
              goto LABEL_180;
            }
            int v60 = memcmp(v145, __s1, v152);
LABEL_99:
            swift_release();
            uint64_t v76 = v159;
            goto LABEL_110;
          }
          if (v143 == 1)
          {
            if (v138 < v139) {
              goto LABEL_159;
            }
            swift_retain();
            v56 = (char *)__DataStorage._bytes.getter();
            if (v56)
            {
              uint64_t v57 = __DataStorage._offset.getter();
              if (__OFSUB__(v139, v57)) {
                goto LABEL_168;
              }
              v56 += v139 - v57;
            }
            uint64_t v58 = __DataStorage._length.getter();
            size_t v59 = v136;
            if (v58 < v136) {
              size_t v59 = v58;
            }
            if (!v145) {
              goto LABEL_174;
            }
            if (!v56) {
              goto LABEL_175;
            }
            int v60 = memcmp(v145, v56, v59);
            sub_10002BD3C(v151, v146);
            goto LABEL_99;
          }
          uint64_t v77 = *(void *)(v151 + 16);
          unint64_t v144 = *(void *)(v151 + 24);
          swift_retain();
          swift_retain();
          v78 = (char *)__DataStorage._bytes.getter();
          if (v78)
          {
            uint64_t v79 = __DataStorage._offset.getter();
            if (__OFSUB__(v77, v79)) {
              goto LABEL_167;
            }
            v78 += v77 - v79;
          }
          BOOL v36 = __OFSUB__(v144, v77);
          int64_t v80 = v144 - v77;
          if (v36) {
            goto LABEL_162;
          }
          uint64_t v81 = __DataStorage._length.getter();
          if (v81 >= v80) {
            size_t v82 = v80;
          }
          else {
            size_t v82 = v81;
          }
          if (!v145) {
            goto LABEL_181;
          }
          a1 = v154;
          if (!v78) {
            goto LABEL_182;
          }
          int v60 = memcmp(v145, v78, v82);
          swift_release();
          uint64_t v76 = v159;
          swift_release();
          swift_release();
LABEL_110:
          swift_release();
          uint64_t v28 = v76;
          unint64_t v27 = v160;
          if (v60)
          {
LABEL_125:
            uint64_t v91 = v27;
            uint64_t v92 = v28;
            sub_10002BD94(v28, v27);
            uint64_t v93 = v163;
            swift_bridgeObjectRetain();
            sub_10005231C((uint64_t)v162, v93, v148, v158, v153, v92, v91, (uint64_t)v169);
            v94 = a1;
            uint64_t v95 = a1[3];
            uint64_t v96 = a1[4];
            sub_10002BCF8(v94, v95);
            (*(void (**)(char *, uint64_t, uint64_t))(v96 + 64))(v169, v95, v96);
            (*v147)(v8, 0, 1, v9);
            sub_10002BF7C((uint64_t)v8, (uint64_t)v12);
            v99 = &v12[*(int *)(v9 + 52)];
            v100 = *(char **)v99;
            unint64_t v101 = *((void *)v99 + 1);
            id v102 = objc_allocWithZone((Class)SignedObject);
            sub_10002BD94((uint64_t)v100, v101);
            v145 = v100;
            unint64_t v144 = v101;
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            *(void *)&__s1[0] = 0;
            id v104 = [v102 initWithData:isa error:__s1];

            v105 = *(void **)&__s1[0];
            if (v104)
            {
              sub_10002989C();
              ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
              id v107 = v105;
              sub_10002BD3C((uint64_t)v145, v144);
              id v108 = [ObjCClassFromMetadata signedTypeWithObject:v104];

              [v108 setVerifier:v161];
              sub_10005D628();
              v112 = (char *)sub_100066A5C();
              uint64_t v114 = v113;
              v145 = v112;
              unint64_t v144 = sub_100066B58();
              int v133 = sub_100066B78();
              unint64_t v132 = sub_100066C14();
              id v131 = sub_100066C34();
              unint64_t v130 = v115;
              if (v162 == v145 && v163 == v114)
              {
                swift_bridgeObjectRelease();
                goto LABEL_133;
              }
              char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v116)
              {
LABEL_133:
                if (v148 == v144
                  && v158 == v133
                  && v153 == v132
                  && (sub_10002C1CC(v151, v146, (uint64_t)v131, v130) & 1) == 0)
                {
                  uint64_t v117 = v154[3];
                  uint64_t v118 = v154[4];
                  sub_10002BCF8(v154, v117);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v118 + 32))(v169, 0, v117, v118);
                  int v135 = 1;
                }
              }
              sub_10002BFE0((uint64_t)v12);
              sub_10002BD3C(v159, v160);

              uint64_t v109 = (uint64_t)v131;
              v110 = (const void **)&v162;
            }
            else
            {
              id v111 = *(id *)&__s1[0];
              _convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10002BD3C((uint64_t)v145, v144);
              swift_errorRelease();
              sub_10002BFE0((uint64_t)v12);
              uint64_t v97 = v154[3];
              uint64_t v98 = v154[4];
              sub_10002BCF8(v154, v97);
              (*(void (**)(char *, uint64_t, uint64_t))(v98 + 72))(v169, v97, v98);
              uint64_t v109 = v159;
              v110 = (const void **)&v172;
            }
            sub_10002BD3C(v109, (unint64_t)*(v110 - 32));
            sub_10002BE4C((uint64_t)v169);
            a1 = v154;
            goto LABEL_14;
          }
LABEL_13:
          sub_10002BD3C(v28, v27);
LABEL_14:
          unint64_t v26 = v155;
          uint64_t v24 = v157 + 1;
          if (v156 == v149)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v135)
            {
              sub_100066CFC((uint64_t)v170);
              if (qword_10015B5A0 != -1) {
                goto LABEL_171;
              }
              goto LABEL_141;
            }
            return (char *)sub_10002BD3C(v151, v146);
          }
          continue;
        }
        uint64_t v48 = v47;
        uint64_t v49 = __DataStorage._offset.getter();
        if (!__OFSUB__(v46, v49))
        {
          v145 = (char *)(v48 + v46 - v49);
          goto LABEL_57;
        }
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        swift_once();
LABEL_141:
        uint64_t v119 = type metadata accessor for Logger();
        sub_1000294A8(v119, (uint64_t)qword_100162240);
        sub_10002BE90((uint64_t)v170);
        sub_10002BE90((uint64_t)v170);
        v120 = Logger.logObject.getter();
        os_log_type_t v121 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v120, v121))
        {
          v122 = (uint8_t *)swift_slowAlloc();
          uint64_t __s2 = swift_slowAlloc();
          *(_DWORD *)v122 = 136315138;
          __s1[0] = v170[0];
          __s1[1] = v170[1];
          __s1[2] = v170[2];
          uint64_t v168 = v171;
          sub_10002BF28();
          uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&__s1[0] = sub_1000262AC(v123, v124, &__s2);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10002BE4C((uint64_t)v170);
          sub_10002BE4C((uint64_t)v170);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "Found split view in DB for %s", v122, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10002BE4C((uint64_t)v170);
          sub_10002BE4C((uint64_t)v170);
        }

        uint64_t v125 = v154[3];
        uint64_t v126 = v154[4];
        sub_10002BCF8(v154, v125);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v126 + 32))(v170, 0, v125, v126);
        unint64_t v127 = v146;
        uint64_t v128 = v151;
        sub_10002BED4();
        swift_allocError();
        unsigned char *v129 = 4;
        swift_willThrow();
        sub_10002BD3C(v128, v127);
        return (char *)sub_10002BE4C((uint64_t)v170);
      case 3:
        *(void *)((char *)__s1 + 6) = 0;
        *(void *)&__s1[0] = 0;
        if (!v143) {
          goto LABEL_54;
        }
        if (v143 == 1)
        {
          if (v138 < v139) {
            goto LABEL_156;
          }
          sub_10002BD94(v151, v146);
          uint64_t v50 = __DataStorage._bytes.getter();
          if (!v50) {
            goto LABEL_173;
          }
          uint64_t v38 = v50;
          uint64_t v51 = __DataStorage._offset.getter();
          uint64_t v40 = v139 - v51;
          if (__OFSUB__(v139, v51)) {
            goto LABEL_158;
          }
LABEL_50:
          uint64_t v52 = __DataStorage._length.getter();
          if (v52 >= v136) {
            size_t v53 = v136;
          }
          else {
            size_t v53 = v52;
          }
          int v54 = memcmp(__s1, (const void *)(v38 + v40), v53);
          sub_10002BD3C(v151, v146);
        }
        else
        {
          uint64_t v73 = *(void *)(v151 + 16);
          uint64_t v72 = *(void *)(v151 + 24);
          swift_retain();
          swift_retain();
          v68 = (char *)__DataStorage._bytes.getter();
          if (v68)
          {
            uint64_t v74 = __DataStorage._offset.getter();
            if (__OFSUB__(v73, v74)) {
              goto LABEL_166;
            }
            v68 += v73 - v74;
          }
          BOOL v36 = __OFSUB__(v72, v73);
          int64_t v70 = v72 - v73;
          if (v36) {
            goto LABEL_161;
          }
          uint64_t v71 = __DataStorage._length.getter();
          if (!v68) {
            goto LABEL_179;
          }
LABEL_91:
          if (v71 >= v70) {
            size_t v75 = v70;
          }
          else {
            size_t v75 = v71;
          }
          int v54 = memcmp(__s1, v68, v75);
          swift_release();
          swift_release();
        }
        a1 = v154;
        unint64_t v27 = v160;
        uint64_t v28 = v159;
        if (!v54) {
          goto LABEL_13;
        }
        goto LABEL_125;
      default:
        *(void *)&__s1[0] = v28;
        WORD4(__s1[0]) = v27;
        BYTE10(__s1[0]) = BYTE2(v27);
        BYTE11(__s1[0]) = BYTE3(v27);
        BYTE12(__s1[0]) = BYTE4(v27);
        BYTE13(__s1[0]) = BYTE5(v27);
        if (!v143)
        {
LABEL_54:
          LODWORD(__s2) = v151;
          BYTE4(__s2) = v137;
          *(_WORD *)((char *)&__s2 + 5) = *(_WORD *)((char *)&v151 + 5);
          HIBYTE(__s2) = HIBYTE(v151);
          int v165 = v146;
          __int16 v166 = WORD2(v146);
          int v55 = memcmp(__s1, &__s2, v152);
          uint64_t v28 = v159;
          unint64_t v27 = v160;
          if (v55) {
            goto LABEL_125;
          }
          goto LABEL_13;
        }
        if (v143 == 1)
        {
          if (v138 < v139) {
            goto LABEL_155;
          }
          sub_10002BD94(v151, v146);
          uint64_t v37 = __DataStorage._bytes.getter();
          if (!v37)
          {
            __DataStorage._length.getter();
            __break(1u);
LABEL_173:
            __DataStorage._length.getter();
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
            JUMPOUT(0x10002B0D4);
          }
          uint64_t v38 = v37;
          uint64_t v39 = __DataStorage._offset.getter();
          uint64_t v40 = v139 - v39;
          if (__OFSUB__(v139, v39)) {
            goto LABEL_157;
          }
          goto LABEL_50;
        }
        uint64_t v67 = *(void *)(v151 + 16);
        uint64_t v66 = *(void *)(v151 + 24);
        swift_retain();
        swift_retain();
        v68 = (char *)__DataStorage._bytes.getter();
        if (v68)
        {
          uint64_t v69 = __DataStorage._offset.getter();
          if (__OFSUB__(v67, v69)) {
            goto LABEL_165;
          }
          v68 += v67 - v69;
        }
        BOOL v36 = __OFSUB__(v66, v67);
        int64_t v70 = v66 - v67;
        if (v36) {
          goto LABEL_160;
        }
        uint64_t v71 = __DataStorage._length.getter();
        if (!v68) {
          goto LABEL_178;
        }
        goto LABEL_91;
    }
  }
}

uint64_t sub_10002B104(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = a2;
  uint64_t v7 = (char *)(a2 >> 62);
  unint64_t v75 = HIDWORD(a1);
  BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v78 = v8;
  size_t __n = BYTE6(a2);
  uint64_t v76 = (int)a1;
  size_t v77 = HIDWORD(a1) - (int)a1;
  uint64_t v74 = a1 >> 32;
  uint64_t v70 = (a1 >> 32) - (int)a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = (unint64_t *)(a3 + 40);
  unint64_t v72 = HIDWORD(v5);
  unint64_t v73 = v5 >> 40;
  uint64_t v80 = v7;
  unint64_t v71 = v5;
  int v79 = (int)v7;
  while (2)
  {
    uint64_t v11 = *(v9 - 1);
    unint64_t v10 = *v9;
    unint64_t v12 = *v9 >> 62;
    v9 += 2;
    uint64_t v13 = 0;
    switch(v12)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
        }
        uint64_t v13 = HIDWORD(v11) - (int)v11;
LABEL_14:
        sub_10002BD94(v11, v10);
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 24);
        uint64_t v13 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_14;
        }
        goto LABEL_121;
      case 3uLL:
        break;
      default:
        uint64_t v13 = BYTE6(v10);
        break;
    }
    size_t v16 = __n;
    switch(v80)
    {
      case 1:
        size_t v16 = v77;
        if (v78) {
          goto LABEL_122;
        }
        goto LABEL_19;
      case 2:
        uint64_t v18 = *(void *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        size_t v16 = v17 - v18;
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_123;
      case 3:
        if (v13) {
          goto LABEL_7;
        }
        goto LABEL_118;
      default:
LABEL_19:
        if (v13 != v16)
        {
LABEL_7:
          sub_10002BD3C(v11, v10);
LABEL_8:
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        if (v13 >= 1)
        {
          switch((int)v12)
          {
            case 1:
              if ((int)v11 > v11 >> 32) {
                goto LABEL_124;
              }
              uint64_t v24 = __DataStorage._bytes.getter();
              if (v24)
              {
                uint64_t v25 = v24;
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v11, v26)) {
                  goto LABEL_126;
                }
                unint64_t v27 = (const void *)(v25 + (int)v11 - v26);
              }
              else
              {
                unint64_t v27 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v27) {
                  goto LABEL_154;
                }
                int v34 = memcmp(v27, __s1, __n);
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_135;
                }
                swift_retain();
                uint64_t v41 = (char *)__DataStorage._bytes.getter();
                if (v41)
                {
                  uint64_t v42 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v42)) {
                    goto LABEL_142;
                  }
                  v41 += v76 - v42;
                }
                uint64_t v43 = __DataStorage._length.getter();
                size_t v44 = v70;
                if (v43 < v70) {
                  size_t v44 = v43;
                }
                if (!v27) {
                  goto LABEL_147;
                }
                if (!v41) {
                  goto LABEL_148;
                }
                int v34 = memcmp(v27, v41, v44);
                sub_10002BD3C(a1, v5);
LABEL_101:
                sub_10002BD3C(v11, v10);
LABEL_102:
                if (!v34) {
                  goto LABEL_119;
                }
                goto LABEL_8;
              }
              uint64_t v61 = *(void *)(a1 + 16);
              uint64_t v62 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v63 = (char *)__DataStorage._bytes.getter();
              if (v63)
              {
                uint64_t v64 = __DataStorage._offset.getter();
                if (__OFSUB__(v61, v64)) {
                  goto LABEL_141;
                }
                v63 += v61 - v64;
              }
              BOOL v19 = __OFSUB__(v62, v61);
              int64_t v65 = v62 - v61;
              if (v19) {
                goto LABEL_136;
              }
              uint64_t v66 = __DataStorage._length.getter();
              if (v66 >= v65) {
                size_t v67 = v65;
              }
              else {
                size_t v67 = v66;
              }
              if (!v27) {
                goto LABEL_155;
              }
              unint64_t v5 = v71;
              LODWORD(v7) = v79;
              if (!v63) {
                goto LABEL_156;
              }
              int v40 = memcmp(v27, v63, v67);
              swift_release();
              swift_release();
LABEL_114:
              sub_10002BD3C(v11, v10);
              if (!v40) {
                goto LABEL_119;
              }
              break;
            case 2:
              uint64_t v28 = *(void *)(v11 + 16);
              swift_retain();
              swift_retain();
              unint64_t v29 = (char *)__DataStorage._bytes.getter();
              if (!v29) {
                goto LABEL_36;
              }
              uint64_t v30 = __DataStorage._offset.getter();
              if (__OFSUB__(v28, v30)) {
                goto LABEL_125;
              }
              v29 += v28 - v30;
LABEL_36:
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v29) {
                  goto LABEL_151;
                }
                int v34 = memcmp(v29, __s1, __n);
                swift_release();
                swift_release();
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_129;
                }
                swift_retain();
                uint64_t v7 = (char *)__DataStorage._bytes.getter();
                if (v7)
                {
                  uint64_t v31 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v31)) {
                    goto LABEL_140;
                  }
                  v7 += v76 - v31;
                }
                uint64_t v32 = __DataStorage._length.getter();
                size_t v33 = v70;
                if (v32 < v70) {
                  size_t v33 = v32;
                }
                if (!v29) {
                  goto LABEL_144;
                }
                if (!v7) {
                  goto LABEL_145;
                }
                int v34 = memcmp(v29, v7, v33);
                sub_10002BD3C(a1, v5);
                swift_release();
                swift_release();
                sub_10002BD3C(v11, v10);
                LODWORD(v7) = v79;
                goto LABEL_102;
              }
              uint64_t v55 = *(void *)(a1 + 16);
              uint64_t v69 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              v56 = (char *)__DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__(v55, v57)) {
                  goto LABEL_139;
                }
                v56 += v55 - v57;
              }
              BOOL v19 = __OFSUB__(v69, v55);
              int64_t v58 = v69 - v55;
              if (v19) {
                goto LABEL_134;
              }
              uint64_t v59 = __DataStorage._length.getter();
              if (v59 >= v58) {
                size_t v60 = v58;
              }
              else {
                size_t v60 = v59;
              }
              if (!v29) {
                goto LABEL_152;
              }
              unint64_t v5 = v71;
              if (!v56) {
                goto LABEL_153;
              }
              int v39 = memcmp(v29, v56, v60);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
LABEL_96:
              sub_10002BD3C(v11, v10);
LABEL_97:
              LODWORD(v7) = v79;
              if (!v39) {
                goto LABEL_119;
              }
              goto LABEL_8;
            case 3:
              memset(__s1, 0, 14);
              if (!v7) {
                goto LABEL_56;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_128;
                }
                sub_10002BD94(a1, v5);
                uint64_t v35 = __DataStorage._bytes.getter();
                if (!v35) {
                  goto LABEL_146;
                }
                uint64_t v21 = v35;
                uint64_t v36 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v36;
                if (__OFSUB__(v76, v36)) {
                  goto LABEL_133;
                }
LABEL_52:
                uint64_t v37 = __DataStorage._length.getter();
                if (v37 >= v70) {
                  size_t v38 = v70;
                }
                else {
                  size_t v38 = v37;
                }
                int v39 = memcmp(__s1, (const void *)(v21 + v23), v38);
                sub_10002BD3C(a1, v5);
                goto LABEL_96;
              }
              uint64_t v51 = *(void *)(a1 + 16);
              uint64_t v52 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v53 = __DataStorage._offset.getter();
                if (__OFSUB__(v51, v53)) {
                  goto LABEL_138;
                }
                v47 += v51 - v53;
              }
              BOOL v19 = __OFSUB__(v52, v51);
              int64_t v49 = v52 - v51;
              if (v19) {
                goto LABEL_131;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_150;
              }
LABEL_80:
              if (v50 >= v49) {
                size_t v54 = v49;
              }
              else {
                size_t v54 = v50;
              }
              int v39 = memcmp(__s1, v47, v54);
              swift_release();
              swift_release();
              sub_10002BD3C(v11, v10);
              unint64_t v5 = v71;
              goto LABEL_97;
            default:
              __s1[0] = v11;
              LOWORD(__s1[1]) = v10;
              BYTE2(__s1[1]) = BYTE2(v10);
              BYTE3(__s1[1]) = BYTE3(v10);
              BYTE4(__s1[1]) = BYTE4(v10);
              BYTE5(__s1[1]) = BYTE5(v10);
              if (!v7)
              {
LABEL_56:
                __int16 __s2 = a1;
                char v83 = BYTE2(a1);
                char v84 = BYTE3(a1);
                char v85 = v75;
                char v86 = BYTE5(a1);
                char v87 = BYTE6(a1);
                char v88 = HIBYTE(a1);
                __int16 v89 = v5;
                char v90 = BYTE2(v5);
                char v91 = BYTE3(v5);
                char v92 = v72;
                char v93 = v73;
                int v40 = memcmp(__s1, &__s2, __n);
                goto LABEL_114;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_127;
                }
                sub_10002BD94(a1, v5);
                uint64_t v20 = __DataStorage._bytes.getter();
                if (!v20)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
                  JUMPOUT(0x10002BA54);
                }
                uint64_t v21 = v20;
                uint64_t v22 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v22;
                if (__OFSUB__(v76, v22)) {
                  goto LABEL_132;
                }
                goto LABEL_52;
              }
              uint64_t v45 = *(void *)(a1 + 16);
              uint64_t v46 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v48 = __DataStorage._offset.getter();
                if (__OFSUB__(v45, v48)) {
                  goto LABEL_137;
                }
                v47 += v45 - v48;
              }
              BOOL v19 = __OFSUB__(v46, v45);
              int64_t v49 = v46 - v45;
              if (v19) {
                goto LABEL_130;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_149;
              }
              goto LABEL_80;
          }
          goto LABEL_8;
        }
LABEL_118:
        sub_10002BD3C(v11, v10);
LABEL_119:
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t sub_10002BA84@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10002BD94(a2, a3);
      unint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x10002BCE8);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10002BD3C(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

void *sub_10002BCF8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10002BD3C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10002BD94(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10002BDEC(uint64_t a1)
{
  uint64_t v2 = sub_100020378(&qword_1001575D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002BE4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRelease();
  sub_10002BD3C(v2, v3);
  return a1;
}

uint64_t sub_10002BE90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRetain();
  sub_10002BD94(v2, v3);
  return a1;
}

unint64_t sub_10002BED4()
{
  unint64_t result = qword_1001575D8;
  if (!qword_1001575D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001575D8);
  }
  return result;
}

unint64_t sub_10002BF28()
{
  unint64_t result = qword_1001575E0;
  if (!qword_1001575E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001575E0);
  }
  return result;
}

uint64_t sub_10002BF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTSWDB.SignedLogHead();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002BFE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KTSWDB.SignedLogHead();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002C03C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10002BA84((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_10002C114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_10002BA84(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_10002C1CC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x10002C434);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_10002BD94(a3, a4);
                  sub_10002BD94(a1, a2);
                  char v17 = sub_10002C114((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10002BD3C(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_10002BD94(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_10002C114(v21, v22, v20, a3, a4);
                  sub_10002BD3C(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_10002BD94(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_10002BD94(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_10002C03C(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10002BD3C(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t type metadata accessor for AssociatedObjectKey()
{
  return self;
}

ValueMetadata *type metadata accessor for VerifiableTypeHelpers()
{
  return &type metadata for VerifiableTypeHelpers;
}

uint64_t initializeBufferWithCopyOfBuffer for VerifiableTypeHelpers.LogEntryEpochStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithCopy for VerifiableTypeHelpers.LogEntryEpochStatus(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VerifiableTypeHelpers.LogEntryEpochStatus(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for VerifiableTypeHelpers.LogEntryEpochStatus(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VerifiableTypeHelpers.LogEntryEpochStatus()
{
  return &type metadata for VerifiableTypeHelpers.LogEntryEpochStatus;
}

uint64_t *sub_10002C544(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10002C5B0(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v2 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_22;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v8) {
      return 1;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        return 1;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          return 1;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_22:
    uint64_t v14 = *(void *)(*(void *)(v2 + 56) + 8 * v10);
    uint64_t v15 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v10);
    swift_bridgeObjectRetain();
    sub_10002EB4C(v15);
    if ((v16 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v17 = swift_bridgeObjectRetain();
    char v18 = sub_10002C5B0(v17, v14);
    swift_bridgeObjectRelease();
    __n128 result = swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      return 0;
    }
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v8) {
    return 1;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      return 1;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10002C75C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_10002EB4C(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10002C7A0(uint64_t *a1, uint64_t *a2)
{
  return sub_10002C5B0(*a1, *a2);
}

uint64_t TransparencyExtensionType.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*TransparencyExtensionType.rawValue.modify())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10002C7D4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10002C7DC(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_10002C808())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10002C828()
{
  return *(unsigned __int8 *)(v0 + 112);
}

unint64_t sub_10002C830()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 128);
  sub_10002EBB8(v1);
  return v1;
}

unint64_t sub_10002C878(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = a1;
  return sub_10002EBC8(v3);
}

uint64_t sub_10002C8C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100020378(&qword_100157688);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_10002C930@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  swift_beginAccess();
  return sub_10002EBD8(v3, a1);
}

uint64_t sub_10002C984(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  swift_beginAccess();
  sub_10002EC40(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_10002C9E0())()
{
  return j__swift_endAccess;
}

uint64_t sub_10002CA3C()
{
  return UUID.init()();
}

uint64_t sub_10002CA54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10002CAC8(char a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157690);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v8 = v7 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  uint64_t v9 = sub_100020378(&qword_100157688);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  UUID.init()();
  *(unsigned char *)(v7 + 112) = a1;
  *(void *)(v7 + 120) = a2;
  *(void *)(v7 + 128) = 0;
  v10((uint64_t)v6, 1, 1, v9);
  uint64_t v11 = v7 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  swift_beginAccess();
  sub_10002EC40((uint64_t)v6, v11);
  swift_endAccess();
  return v7;
}

uint64_t sub_10002CC34(char a1, uint64_t a2)
{
  uint64_t v5 = sub_100020378(&qword_100157690);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  uint64_t v8 = (char *)(v2 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation);
  uint64_t v9 = sub_100020378(&qword_100157688);
  unint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  UUID.init()();
  *(unsigned char *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  *(void *)(v2 + 128) = 0;
  v10(v7, 1, 1, v9);
  uint64_t v11 = v2 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  swift_beginAccess();
  sub_10002EC40((uint64_t)v7, v11);
  swift_endAccess();
  return v2;
}

BOOL sub_10002CD8C()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 152))();
  if (v1 < 3) {
    return (v1 & 7) == 2;
  }
  sub_10002EBC8(v1);
  return 1;
}

uint64_t sub_10002CDE8()
{
  v1[3] = v0;
  uint64_t v2 = sub_100020378(&qword_100157688);
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  sub_100020378(&qword_100157690);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_10002CEEC, v0, 0);
}

uint64_t sub_10002CEEC()
{
  unint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 152))();
  if (v1 >= 2)
  {
    if (v1 != 2) {
      sub_10002EBC8(v1);
    }
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    (*(void (**)(void))(**(void **)(v0 + 24) + 176))();
    int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
    uint64_t v6 = *(void *)(v0 + 64);
    if (v5)
    {
      sub_100028C8C(*(void *)(v0 + 64), &qword_100157690);
    }
    else
    {
      uint64_t v8 = *(void *)(v0 + 40);
      uint64_t v7 = *(void *)(v0 + 48);
      uint64_t v9 = *(void *)(v0 + 32);
      (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v7, *(void *)(v0 + 64), v9);
      sub_100028C8C(v6, &qword_100157690);
      type metadata accessor for SWTStateMachineError(0);
      sub_10002F538(&qword_100157AA0, (void (*)(uint64_t))type metadata accessor for SWTStateMachineError);
      uint64_t v10 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      *(void *)(v0 + 16) = v10;
      CheckedContinuation.resume(throwing:)();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 40) + 56))(v11, 1, 1, *(void *)(v0 + 32));
    (*(void (**)(uint64_t))(*(void *)v12 + 184))(v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_10002D134(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_100020378(&qword_100157030);
  v3[5] = swift_task_alloc();
  return _swift_task_switch(sub_10002D1CC, v2, 0);
}

uint64_t sub_10002D1CC()
{
  unint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 32) + 152))();
  if (v1 >= 2)
  {
    if (v1 != 2) {
      swift_willThrow();
    }
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 24);
    uint64_t v6 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
    uint64_t v7 = sub_10002F538(&qword_1001576B0, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = v2;
    v8[3] = v7;
    v8[4] = v5;
    v8[5] = v4;
    v8[6] = v2;
    swift_retain_n();
    *(void *)(v0 + 48) = sub_100020834(v3, (uint64_t)&unk_1001576B8, (uint64_t)v8);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v9;
    void *v9 = v0;
    v9[1] = sub_10002D428;
    uint64_t v10 = *(void *)(v0 + 32);
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, v2, v7, 0xD000000000000010, 0x80000001001104C0, sub_10002EDDC, v10, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_10002D428()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_10002D5E8;
  }
  else {
    uint64_t v4 = sub_10002D554;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10002D554()
{
  Task.cancel()();
  swift_release();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002D5E8()
{
  swift_release();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002D654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v6[5] = v8;
  v6[6] = *(void *)(v8 - 8);
  v6[7] = swift_task_alloc();
  return _swift_task_switch(sub_10002D71C, a6, 0);
}

uint64_t sub_10002D71C()
{
  ContinuousClock.init()();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100157820 + dword_100157820);
  unint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10002D7DC;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return v5(v3, v2, 0, 0, 1);
}

uint64_t sub_10002D7DC()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v3 = v2[7];
  uint64_t v4 = v2[6];
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[4];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v7 = sub_10002F6F0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v7 = sub_10002D988;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10002D988()
{
  if (static Task<>.isCancelled.getter())
  {
    swift_task_dealloc();
    unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)(v0 + 32) + 216) + **(int **)(**(void **)(v0 + 32) + 216));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10002DAC4;
    unint64_t v1 = v4;
  }
  return v1();
}

uint64_t sub_10002DAC4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10002DBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157690);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100020378(&qword_100157688);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  return (*(uint64_t (**)(char *))(*(void *)a2 + 184))(v6);
}

uint64_t sub_10002DCF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100020378(&qword_100157688);
  v39[0] = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100020378(&qword_100157690);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v39 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v39 - v14;
  uint64_t v16 = type metadata accessor for SWTStateMachineError(0);
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v19 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v17);
  if (!v20)
  {
    char v22 = v1[112];
    char v43 = a1;
    char v42 = v22;
    sub_10002EEA4();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v40 == v39[1] && v41 == v39[2])
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = 0;
      if ((v32 & 1) == 0) {
        return v21;
      }
    }
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 160))(1);
    goto LABEL_16;
  }
  if (v20 == 1)
  {
    uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v1 + 128))();
    if (!*(void *)(v23 + 16) || (unint64_t v24 = sub_10002EB4C(a1), (v25 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      unsigned char *v19 = a1;
      swift_storeEnumTagMultiPayload();
      sub_10002F538(&qword_100157AA0, (void (*)(uint64_t))type metadata accessor for SWTStateMachineError);
      uint64_t v28 = swift_allocError();
      sub_10002EDE4((uint64_t)v19, v29);
      uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v28);
      (*(void (**)(uint64_t))(*(void *)v2 + 176))(v30);
      uint64_t v31 = v39[0];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39[0] + 48))(v15, 1, v4))
      {
        sub_100028C8C((uint64_t)v15, &qword_100157690);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v6, v15, v4);
        sub_100028C8C((uint64_t)v15, &qword_100157690);
        uint64_t v36 = swift_allocError();
        sub_10002EDE4((uint64_t)v19, v37);
        uint64_t v40 = v36;
        CheckedContinuation.resume(throwing:)();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v4);
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v13, 1, 1, v4);
      (*(void (**)(char *))(*(void *)v2 + 184))(v13);
      sub_10002EE48((uint64_t)v19);
      return 0;
    }
    uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v26);
LABEL_16:
    uint64_t v33 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 128))(v27) + 16);
    swift_bridgeObjectRelease();
    uint64_t v34 = v39[0];
    if (!v33)
    {
      uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(2);
      (*(void (**)(uint64_t))(*(void *)v2 + 176))(v35);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v10, 1, v4))
      {
        sub_100028C8C((uint64_t)v10, &qword_100157690);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v6, v10, v4);
        sub_100028C8C((uint64_t)v10, &qword_100157690);
        CheckedContinuation.resume(returning:)();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v4);
      }
      uint64_t v21 = 1;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v13, 1, 1, v4);
      (*(void (**)(char *))(*(void *)v2 + 184))(v13);
      return v21;
    }
    return 0;
  }
  if (v20 != 2) {
    sub_10002EBC8(v20);
  }
  return 1;
}

uint64_t sub_10002E374()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_10002E3A0()
{
  return UUID.hash(into:)();
}

uint64_t sub_10002E3CC()
{
  swift_bridgeObjectRelease();
  sub_10002EBC8(*(void *)(v0 + 128));
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation, &qword_100157690);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10002E460()
{
  swift_bridgeObjectRelease();
  sub_10002EBC8(*(void *)(v0 + 128));
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation, &qword_100157690);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

Swift::Int sub_10002E504()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 240))(v2);
  return Hasher._finalize()();
}

uint64_t sub_10002E564()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t sub_10002E5A8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

Swift::Int sub_10002E5EC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 240))(v3);
  return Hasher._finalize()();
}

uint64_t sub_10002E64C()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_10002E680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_10002E784, 0, 0);
}

uint64_t sub_10002E784()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_10002F538(&qword_100157828, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_10002F538(&qword_100157830, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = sub_10002E924;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_10002E924()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_10002EAE0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_10002EAE0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_10002EB4C(uint64_t a1)
{
  sub_10002F580();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10002F5D4(a1, v2);
}

unint64_t sub_10002EBB8(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_10002EBC8(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10002EBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002EC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TransitionWatcher()
{
  uint64_t result = qword_10015B830;
  if (!qword_10015B830) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002ECF4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002ED34()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100021024;
  return sub_10002D654((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_10002EDDC(uint64_t a1)
{
  return sub_10002DBD4(a1, v1);
}

uint64_t sub_10002EDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SWTStateMachineError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002EE48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SWTStateMachineError(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10002EEA4()
{
  unint64_t result = qword_1001576C0;
  if (!qword_1001576C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001576C0);
  }
  return result;
}

uint64_t sub_10002EEF8()
{
  return sub_10002F538(&qword_1001576C8, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
}

ValueMetadata *type metadata accessor for TransitionPathStep()
{
  return &type metadata for TransitionPathStep;
}

uint64_t initializeBufferWithCopyOfBuffer for TransitionPath(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for TransitionPath()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for TransitionPath(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TransitionPath(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for TransitionPath(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitionPath(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransitionPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransitionPath()
{
  return &type metadata for TransitionPath;
}

uint64_t sub_10002F0B0()
{
  return type metadata accessor for TransitionWatcher();
}

void sub_10002F0B8()
{
  sub_10002F1AC();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10002F1AC()
{
  if (!qword_1001576F8)
  {
    sub_100020418(&qword_100157688);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001576F8);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for TransitionWatcher.WatcherState(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for TransitionWatcher.WatcherState(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *assignWithCopy for TransitionWatcher.WatcherState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF) {
      swift_errorRetain();
    }
    *a1 = v3;
  }
  else if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain();
    *a1 = v3;
    swift_errorRelease();
  }
  return a1;
}

void *initializeWithTake for TransitionWatcher.WatcherState(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for TransitionWatcher.WatcherState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitionWatcher.WatcherState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TransitionWatcher.WatcherState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_10002F400(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10002F418(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TransitionWatcher.WatcherState()
{
  return &type metadata for TransitionWatcher.WatcherState;
}

uint64_t sub_10002F448()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F480(uint64_t a1)
{
  unsigned int v4 = *(int **)(v1 + 16);
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unsigned int v5 = v2;
  v5[1] = sub_100021024;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001580B0 + dword_1001580B0);
  return v6(a1, v4);
}

uint64_t sub_10002F538(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002F580()
{
  unint64_t result = qword_100157838;
  if (!qword_100157838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157838);
  }
  return result;
}

unint64_t sub_10002F5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    sub_10002F69C();
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10002F69C()
{
  unint64_t result = qword_100157840;
  if (!qword_100157840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157840);
  }
  return result;
}

uint64_t sub_10002F6FC(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 0x7972726163;
  switch(v1)
  {
    case 0:
      uint64_t result = 7759204;
      break;
    case 1:
      uint64_t result = 0x6172656D65687065;
      break;
    case 2:
      uint64_t result = 1718773104;
      break;
    case 3:
      uint64_t result = 24945;
      break;
    case 4:
      uint64_t result = 0x676E6967617473;
      break;
    case 5:
      return result;
    case 6:
      uint64_t result = 0x69746375646F7270;
      break;
    case 7:
      uint64_t result = 0x616D697250326171;
      break;
    case 8:
      uint64_t result = 0x7265746E49326171;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

BOOL sub_10002F830(uint64_t a1)
{
  return a1 == 0;
}

void *sub_10002F83C()
{
  return &unk_10010A8A0;
}

uint64_t sub_10002F848()
{
  return 1;
}

_UNKNOWN **static SerializationVersion.allCases.getter()
{
  return &off_100137870;
}

void sub_10002F85C(void *a1@<X8>)
{
  *a1 = &off_100137898;
}

uint64_t SerializationVersion.description.getter(char a1)
{
  if (a1 == 1) {
    return 3233326;
  }
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000001FLL;
}

uint64_t sub_10002F938()
{
  return SerializationVersion.description.getter(*v0);
}

unint64_t sub_10002F944()
{
  unint64_t result = qword_100157848;
  if (!qword_100157848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157848);
  }
  return result;
}

unsigned __int8 *sub_10002F99C@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10002F9AC(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_10002F9B8()
{
  return &unk_10010A8A1;
}

void *sub_10002F9C4()
{
  return &unk_10010A8A2;
}

uint64_t variable initialization expression of KTSWDB.schemaVersion()
{
  return 2;
}

void *sub_10002F9D8()
{
  return &unk_10010A8A3;
}

uint64_t sub_10002F9E4()
{
  return 3;
}

void *sub_10002F9EC()
{
  return &unk_10010A8A4;
}

uint64_t sub_10002F9F8()
{
  return 4;
}

void *sub_10002FA00()
{
  return &unk_10010A8A5;
}

uint64_t sub_10002FA0C()
{
  return 5;
}

_UNKNOWN **static ATLeafType.allCases.getter()
{
  return &off_1001378C0;
}

void sub_10002FA20(void *a1@<X8>)
{
  *a1 = &off_1001378E8;
}

void sub_10002FA30()
{
  Hasher._combine(_:)(*v0);
}

BOOL sub_10002FA5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t ATLeafType.description.getter(unsigned __int8 a1)
{
  int v1 = a1 - 1;
  unint64_t result = 0x455341454C45522ELL;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x4C45444F4D2ELL;
      break;
    case 2:
    case 3:
      unint64_t result = 0x444E554259454B2ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      unint64_t result = 0xD000000000000015;
      break;
  }
  return result;
}

unint64_t sub_10002FBDC()
{
  return ATLeafType.description.getter(*v0);
}

Swift::Int sub_10002FBE4()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10002FC2C()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t TransparencyExtensionType.description.getter()
{
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000024;
}

unint64_t sub_10002FD14()
{
  return TransparencyExtensionType.description.getter();
}

uint64_t sub_10002FD1C(char a1)
{
  char v3 = a1;
  unint64_t v1 = sub_10002F944();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  return sub_1000AA7BC((uint64_t)&v3, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8);
}

uint64_t sub_10002FD7C()
{
  unint64_t v0 = sub_10002F944();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v0);
  sub_1000AB460((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, (uint64_t)&v3);
  int v1 = v3;
  if (v4) {
    int v1 = 0;
  }
  return v1 | (v4 << 8);
}

uint64_t sub_10002FDEC(uint64_t a1, Swift::UInt8 a2)
{
  return dispatch thunk of Hashable.hash(into:)();
}

unint64_t sub_10002FE6C()
{
  unint64_t result = qword_100157850;
  if (!qword_100157850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157850);
  }
  return result;
}

uint64_t sub_10002FEC0(char a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  if (a1 != a5) {
    return 0;
  }
  sub_10002BD94(a2, a3);
  sub_10002BD94(a6, a7);
  LOBYTE(a8) = static TransparencyByteBuffer.== infix(_:_:)(a2, a3, a4, a6, a7, a8);
  sub_10002BD3C(a6, a7);
  sub_10002BD3C(a2, a3);
  return a8 & 1;
}

Swift::Int sub_10002FF6C(Swift::UInt8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100030000()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  sub_10002FE6C();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100030090()
{
  Swift::UInt8 v1 = *v0;
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  sub_10002FE6C();
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10003010C()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  sub_10002FE6C();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100030198(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  unint64_t v3 = a2[2];
  uint64_t v2 = a2[3];
  uint64_t v4 = a2[1];
  unint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v7 = a1[1];
  sub_10002BD94(v7, v6);
  sub_10002BD94(v4, v3);
  LOBYTE(v2) = static TransparencyByteBuffer.== infix(_:_:)(v7, v6, v5, v4, v3, v2);
  sub_10002BD3C(v4, v3);
  sub_10002BD3C(v7, v6);
  return v2 & 1;
}

uint64_t sub_100030240(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v17 = a1;
  unint64_t v8 = sub_10002F944();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v8);
  uint64_t v9 = sub_1000AA7BC((uint64_t)&v17, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8);
  v13[16] = a1;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  sub_10003037C();
  uint64_t v10 = sub_1000AC158((uint64_t)&type metadata for UInt16, (uint64_t (*)(uint64_t *))sub_100030370, (uint64_t)v13, (uint64_t)&type metadata for UInt16);
  BOOL v11 = __OFADD__(v9, v10);
  uint64_t result = v9 + v10;
  if (v11) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003030C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  sub_10002BD94(a2, a3);
  uint64_t v7 = sub_1000AB8FC(a2, a3, a4);
  sub_10002BD3C(a2, a3);
  return v7;
}

uint64_t sub_100030370(uint64_t a1)
{
  return sub_10003030C(a1, *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t sub_10003037C()
{
  unint64_t result = qword_100157858;
  if (!qword_100157858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157858);
  }
  return result;
}

uint64_t sub_1000303D0()
{
  unint64_t v1 = sub_10002F944();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  uint64_t v2 = sub_1000AB460((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, (uint64_t)&v4);
  if ((v4 & 0x100) != 0) {
    return 0;
  }
  __chkstk_darwin(v2);
  sub_10003037C();
  uint64_t result = sub_1000AC620((uint64_t)&type metadata for TransparencyExtension, (uint64_t)&v4);
  if (!v0) {
    return v4;
  }
  return result;
}

uint64_t sub_1000304D4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = sub_1000AA760(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t result = sub_1000ABDB8(v5);
  if (v7 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *(unsigned char *)a3 = a2;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = v7;
    *(void *)(a3 + 24) = v8;
  }
  return result;
}

uint64_t sub_100030530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000304D4(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_10003055C()
{
  return *v0;
}

uint64_t sub_100030564()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t sub_10003056C(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*sub_100030574())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100030594()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_10002BD94(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_1000305C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10002BD3C(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t sub_100030600()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_10002BD94(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t sub_100030634(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10002BD3C(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*sub_10003066C())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10003068C()
{
  return *(void *)(v0 + 40);
}

uint64_t sub_100030694(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*sub_10003069C())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_1000306BC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000306C4(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*sub_1000306F0())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t variable initialization expression of KTSwiftDB.db()
{
  return 0;
}

void *sub_100030718()
{
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  return v1;
}

void sub_100030740(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
}

uint64_t (*sub_10003076C())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10003078C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(unsigned char *)a9 = result;
  *(unsigned char *)(a9 + 1) = a2;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(void *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = a7;
  *(void *)(a9 + 48) = a8;
  *(void *)(a9 + 56) = 0;
  return result;
}

uint64_t sub_1000307A8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = sub_10002F944();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v3);
  sub_1000AB460((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, (uint64_t)&v27);
  if ((v27 & 0x100) != 0) {
    goto LABEL_3;
  }
  char v4 = v27;
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v3);
  sub_1000AB460((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, (uint64_t)&v27);
  if ((v27 & 0x100) != 0) {
    goto LABEL_3;
  }
  char v7 = v27;
  uint64_t result = sub_1000AC620((uint64_t)&type metadata for TransparencyByteBuffer, (uint64_t)&v27);
  if (!v1)
  {
    unint64_t v8 = v28;
    if (v28 >> 60 == 15)
    {
LABEL_3:
      sub_100030AC0();
      swift_allocError();
      *uint64_t v5 = 1;
      return swift_willThrow();
    }
    char v26 = v7;
    uint64_t v9 = v27;
    uint64_t v10 = TransparencyByteBuffer.readableBytesView.getter(v27, v28, v29);
    unint64_t v30 = v11;
    sub_100030D78(v9, v8);
    sub_1000AC620((uint64_t)&type metadata for TransparencyByteBuffer, (uint64_t)&v27);
    uint64_t v25 = v10;
    unint64_t v12 = v28;
    if (v28 >> 60 != 15)
    {
      uint64_t v13 = v27;
      uint64_t v14 = TransparencyByteBuffer.readableBytesView.getter(v27, v28, v29);
      unint64_t v16 = v15;
      sub_100030D78(v13, v12);
      sub_100030D8C();
      sub_1000AB460((uint64_t)&type metadata for UInt64, (uint64_t)&type metadata for UInt64, (uint64_t)&v27);
      if (v28 != 1)
      {
        unint64_t v19 = v16;
        uint64_t v20 = v27;
        uint64_t v21 = sub_100020378(&qword_100157870);
        sub_10003037C();
        uint64_t result = sub_1000AC620(v21, (uint64_t)&v27);
        uint64_t v22 = v20;
        uint64_t v23 = v27;
        unint64_t v24 = v30;
        if (v27)
        {
          *(unsigned char *)a1 = v4;
          *(unsigned char *)(a1 + 1) = v26;
          *(void *)(a1 + 8) = v25;
          *(void *)(a1 + 16) = v24;
          *(void *)(a1 + 24) = v14;
          *(void *)(a1 + 32) = v19;
          *(void *)(a1 + 40) = v22;
          *(void *)(a1 + 48) = v23;
          *(void *)(a1 + 56) = 0;
          return result;
        }
        sub_10002BD3C(v14, v19);
        uint64_t v17 = v25;
        unint64_t v18 = v24;
        goto LABEL_11;
      }
      sub_10002BD3C(v14, v16);
    }
    uint64_t v17 = v25;
    unint64_t v18 = v30;
LABEL_11:
    sub_10002BD3C(v17, v18);
    goto LABEL_3;
  }
  return result;
}

unint64_t sub_100030AC0()
{
  unint64_t result = qword_100157860;
  if (!qword_100157860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157860);
  }
  return result;
}

char *sub_100030B14()
{
  unint64_t v1 = sub_10002F944();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  sub_1000AB460((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, (uint64_t)&v13);
  if ((v13 & 0x100) != 0) {
    return (char *)_swiftEmptyArrayStorage;
  }
  id v2 = (char *)_swiftEmptyArrayStorage;
  unint64_t v3 = sub_10003037C();
  unint64_t v17 = v3;
  unint64_t v12 = v1;
  while (1)
  {
    __chkstk_darwin(v3);
    sub_1000AC620((uint64_t)&type metadata for TransparencyExtension, (uint64_t)&v13);
    if (v0) {
      break;
    }
    unint64_t v4 = v15;
    if (v15 >> 60 != 15)
    {
      uint64_t v6 = v13;
      uint64_t v5 = v14;
      uint64_t v7 = v16;
      sub_10002BD94(v14, v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v2 = sub_100031570(0, *((void *)v2 + 2) + 1, 1, v2);
      }
      unint64_t v9 = *((void *)v2 + 2);
      unint64_t v8 = *((void *)v2 + 3);
      if (v9 >= v8 >> 1) {
        id v2 = sub_100031570((char *)(v8 > 1), v9 + 1, 1, v2);
      }
      *((void *)v2 + 2) = v9 + 1;
      uint64_t v10 = &v2[32 * v9];
      v10[32] = v6;
      *((void *)v10 + 5) = v5;
      *((void *)v10 + 6) = v4;
      *((void *)v10 + 7) = v7;
      sub_100032F30(v6, v5, v4);
      ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v12);
      unint64_t v3 = sub_1000AB460((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, (uint64_t)&v13);
      if ((v13 & 0x100) == 0) {
        continue;
      }
    }
    return v2;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100030D1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1000AA760(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t result = sub_1000ABDB8(v3);
  if (v5 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100030D78(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10002BD3C(a1, a2);
  }
  return a1;
}

unint64_t sub_100030D8C()
{
  unint64_t result = qword_100157868;
  if (!qword_100157868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157868);
  }
  return result;
}

char *sub_100030DE0@<X0>(char **a1@<X8>)
{
  unint64_t result = sub_100030B14();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100030E0C()
{
  char v15 = *v0;
  unint64_t v1 = sub_10002F944();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  uint64_t v2 = sub_1000AA7BC((uint64_t)&v15, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8);
  char v14 = v0[1];
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  uint64_t result = sub_1000AA7BC((uint64_t)&v14, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8);
  uint64_t v4 = v2 + result;
  if (__OFADD__(v2, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  __chkstk_darwin(result);
  unint64_t v12 = v0;
  uint64_t result = sub_1000AC158((uint64_t)&type metadata for UInt8, (uint64_t (*)(uint64_t *))sub_100031024, (uint64_t)v11, (uint64_t)&type metadata for UInt8);
  BOOL v5 = __OFADD__(v4, result);
  uint64_t v6 = v4 + result;
  if (v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  __chkstk_darwin(result);
  unint64_t v12 = v0;
  uint64_t result = sub_1000AC158((uint64_t)&type metadata for UInt8, (uint64_t (*)(uint64_t *))sub_100031090, (uint64_t)v11, (uint64_t)&type metadata for UInt8);
  uint64_t v7 = v6 + result;
  if (__OFADD__(v6, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v13 = *((void *)v0 + 5);
  unint64_t v8 = sub_100030D8C();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt64, v8);
  uint64_t result = sub_1000AA7BC((uint64_t)&v13, (uint64_t)&type metadata for UInt64, (uint64_t)&type metadata for UInt64);
  uint64_t v9 = v7 + result;
  if (__OFADD__(v7, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  __chkstk_darwin(result);
  unint64_t v12 = v0;
  sub_10003037C();
  uint64_t v10 = sub_1000AC158((uint64_t)&type metadata for UInt16, (uint64_t (*)(uint64_t *))sub_10003128C, (uint64_t)v11, (uint64_t)&type metadata for UInt16);
  BOOL v5 = __OFADD__(v9, v10);
  uint64_t result = v9 + v10;
  if (v5) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t sub_100031024()
{
  sub_10002BD94(*(void *)(*(void *)(v0 + 16) + 8), *(void *)(*(void *)(v0 + 16) + 16));
  TransparencyByteBuffer.init(data:)();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v6 = sub_1000AB8FC(v1, v3, v5);
  sub_10002BD3C(v2, v4);
  return v6;
}

uint64_t sub_100031090()
{
  sub_10002BD94(*(void *)(*(void *)(v0 + 16) + 24), *(void *)(*(void *)(v0 + 16) + 32));
  TransparencyByteBuffer.init(data:)();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v6 = sub_1000AB8FC(v1, v3, v5);
  sub_10002BD3C(v2, v4);
  return v6;
}

uint64_t sub_1000310FC(uint64_t a1, uint64_t a2)
{
  unint64_t v19 = *(char **)(a2 + 48);
  uint64_t v20 = v19;
  swift_bridgeObjectRetain_n();
  sub_100031674(&v19);
  sub_100032F04((uint64_t)&v20);
  uint64_t v2 = v19;
  uint64_t v3 = *((void *)v19 + 2);
  if (v3)
  {
    unint64_t v4 = sub_10002F944();
    swift_retain();
    uint64_t v5 = 0;
    unint64_t v17 = v2;
    uint64_t v6 = v2 + 56;
    while (1)
    {
      char v7 = *((unsigned char *)v6 - 24);
      long long v18 = *((_OWORD *)v6 - 1);
      uint64_t v8 = *v6;
      LOBYTE(v19) = v7;
      ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v4);
      uint64_t v9 = sub_1000AA7BC((uint64_t)&v19, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8);
      __chkstk_darwin(v9);
      v14[16] = v7;
      long long v15 = v18;
      uint64_t v16 = v8;
      sub_10003037C();
      uint64_t v10 = sub_1000AC158((uint64_t)&type metadata for UInt16, (uint64_t (*)(uint64_t *))sub_100032F50, (uint64_t)v14, (uint64_t)&type metadata for UInt16);
      uint64_t v11 = v9 + v10;
      if (__OFADD__(v9, v10)) {
        break;
      }
      BOOL v12 = __OFADD__(v5, v11);
      v5 += v11;
      if (v12) {
        goto LABEL_10;
      }
      v6 += 4;
      if (!--v3)
      {
        swift_release();
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    uint64_t v5 = 0;
LABEL_8:
    swift_release();
    return v5;
  }
  return result;
}

uint64_t sub_10003128C(uint64_t a1)
{
  return sub_1000310FC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100031298(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v3 = (uint64_t *)(a1 + 56);
    for (uint64_t i = (uint64_t *)(a2 + 56); *((unsigned __int8 *)v3 - 24) == *((unsigned __int8 *)i - 24); i += 4)
    {
      unint64_t v6 = *(v3 - 1);
      uint64_t v5 = *v3;
      uint64_t v7 = *(v3 - 2);
      unint64_t v9 = *(i - 1);
      uint64_t v8 = *i;
      uint64_t v10 = *(i - 2);
      sub_10002BD94(v7, v6);
      sub_10002BD94(v10, v9);
      LOBYTE(v5) = static TransparencyByteBuffer.== infix(_:_:)(v7, v6, v5, v10, v9, v8);
      sub_10002BD3C(v10, v9);
      sub_10002BD3C(v7, v6);
      if ((v5 & 1) == 0) {
        break;
      }
      v3 += 4;
      if (!--v2) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_100031388(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(unsigned char *)v2);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 1));
  uint64_t v4 = *(void *)(v2 + 8);
  unint64_t v5 = *(void *)(v2 + 16);
  sub_10002BD94(v4, v5);
  Data.hash(into:)();
  sub_10002BD3C(v4, v5);
  uint64_t v6 = *(void *)(v2 + 24);
  unint64_t v7 = *(void *)(v2 + 32);
  sub_10002BD94(v6, v7);
  Data.hash(into:)();
  sub_10002BD3C(v6, v7);
  Hasher._combine(_:)(*(void *)(v2 + 40));
  uint64_t v8 = *(void *)(v2 + 48);
  swift_bridgeObjectRetain();
  sub_1000323F4(a1, v8);
  swift_bridgeObjectRelease();
  unint64_t v9 = *(void **)(v2 + 56);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    id v10 = v9;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1000314A4()
{
  Hasher.init(_seed:)();
  sub_100031388((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000314E8()
{
  Hasher.init(_seed:)();
  sub_100031388((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100031524(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_1000324C0((unsigned __int8 *)v7, (unsigned __int8 *)v8) & 1;
}

char *sub_100031570(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100020378(&qword_1001578C8);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  char v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100031674(char **a1)
{
  long long v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v2 = sub_1000324AC((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_1000316E0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1000316E0(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v88 = 0;
      uint64_t v89 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v91 = *(unsigned __int8 *)(v89 + 32 * i);
        uint64_t v92 = v88;
        do
        {
          uint64_t v93 = v89 + v92;
          if (v91 >= *(unsigned __int8 *)(v89 + v92)) {
            break;
          }
          if (!v89) {
            goto LABEL_141;
          }
          uint64_t v94 = *(void *)(v93 + 56);
          long long v95 = *(_OWORD *)(v93 + 40);
          long long v96 = *(_OWORD *)(v93 + 16);
          *(_OWORD *)(v89 + v92 + 32) = *(_OWORD *)v93;
          *(_OWORD *)(v89 + v92 + 48) = v96;
          *(unsigned char *)uint64_t v93 = v91;
          *(_OWORD *)(v93 + 8) = v95;
          *(void *)(v93 + 24) = v94;
          v92 -= 32;
        }
        while (v92 != -32);
        v88 += 32;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_136;
    }
    uint64_t v6 = result;
    v105 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v7;
      id v107 = (void *)result;
      id v111 = (char *)(result + 32);
LABEL_13:
      Swift::Int v9 = 0;
      uint64_t v10 = *a1;
      uint64_t v106 = *a1 + 64;
      uint64_t v104 = *a1 - 32;
      int64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v108 = v6;
      Swift::Int v109 = v3;
      uint64_t v110 = v10;
      while (1)
      {
        Swift::Int v13 = v9++;
        if (v9 < v3)
        {
          unsigned int v14 = *(unsigned __int8 *)(v10 + 32 * v9);
          uint64_t v15 = 32 * v13;
          unsigned int v16 = *(unsigned __int8 *)(v10 + 32 * v13);
          Swift::Int v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            unint64_t v17 = (unsigned __int8 *)(v106 + 32 * v13);
            unsigned int v18 = v14;
            while (1)
            {
              unsigned int v20 = *v17;
              v17 += 32;
              unsigned int v19 = v20;
              if (v14 < v16 == v20 >= v18) {
                break;
              }
              ++v9;
              unsigned int v18 = v19;
              if (v3 == v9)
              {
                Swift::Int v9 = v3;
                break;
              }
            }
          }
          if (v14 < v16)
          {
            if (v9 < v13) {
              goto LABEL_138;
            }
            if (v13 < v9)
            {
              uint64_t v21 = 32 * v9;
              Swift::Int v22 = v9;
              Swift::Int v23 = v13;
              do
              {
                if (v23 != --v22)
                {
                  if (!v10) {
                    goto LABEL_144;
                  }
                  unint64_t v24 = (_OWORD *)(v10 + v15);
                  uint64_t v25 = v10 + v21;
                  char v26 = *(unsigned char *)(v10 + v15);
                  uint64_t v27 = *(void *)(v10 + v15 + 24);
                  long long v28 = *(_OWORD *)(v10 + v15 + 8);
                  long long v29 = *(_OWORD *)(v10 + v21 - 16);
                  _OWORD *v24 = *(_OWORD *)(v10 + v21 - 32);
                  v24[1] = v29;
                  *(unsigned char *)(v25 - 32) = v26;
                  *(_OWORD *)(v25 - 24) = v28;
                  *(void *)(v25 - 8) = v27;
                }
                ++v23;
                v21 -= 32;
                v15 += 32;
              }
              while (v23 < v22);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_135;
          }
          if (v9 - v13 < v6)
          {
            Swift::Int v30 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_139;
            }
            if (v30 >= v3) {
              Swift::Int v30 = v3;
            }
            if (v30 < v13)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v9 != v30)
            {
              uint64_t v31 = (unsigned __int8 *)(v104 + 32 * v9);
              do
              {
                unsigned int v32 = *(unsigned __int8 *)(v10 + 32 * v9);
                Swift::Int v33 = v13;
                uint64_t v34 = v31;
                do
                {
                  if (v32 >= *v34) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_142;
                  }
                  uint64_t v35 = *((void *)v34 + 7);
                  long long v36 = *(_OWORD *)(v34 + 40);
                  long long v37 = *((_OWORD *)v34 + 1);
                  *((_OWORD *)v34 + 2) = *(_OWORD *)v34;
                  *((_OWORD *)v34 + 3) = v37;
                  unsigned __int8 *v34 = v32;
                  *(_OWORD *)(v34 + 8) = v36;
                  *((void *)v34 + 3) = v35;
                  v34 -= 32;
                  ++v33;
                }
                while (v9 != v33);
                ++v9;
                v31 += 32;
              }
              while (v9 != v30);
              Swift::Int v9 = v30;
            }
          }
        }
        if (v9 < v13) {
          goto LABEL_130;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100031FA0(0, *((void *)v11 + 2) + 1, 1, v11);
          int64_t v11 = (char *)result;
        }
        unint64_t v39 = *((void *)v11 + 2);
        unint64_t v38 = *((void *)v11 + 3);
        unint64_t v12 = v39 + 1;
        uint64_t v10 = v110;
        if (v39 >= v38 >> 1)
        {
          uint64_t result = (uint64_t)sub_100031FA0((char *)(v38 > 1), v39 + 1, 1, v11);
          uint64_t v10 = v110;
          int64_t v11 = (char *)result;
        }
        *((void *)v11 + 2) = v12;
        uint64_t v40 = v11 + 32;
        uint64_t v41 = (Swift::Int *)&v11[16 * v39 + 32];
        *uint64_t v41 = v13;
        v41[1] = v9;
        if (v39)
        {
          while (1)
          {
            unint64_t v42 = v12 - 1;
            if (v12 >= 4)
            {
              uint64_t v47 = &v40[16 * v12];
              uint64_t v48 = *((void *)v47 - 8);
              uint64_t v49 = *((void *)v47 - 7);
              BOOL v53 = __OFSUB__(v49, v48);
              uint64_t v50 = v49 - v48;
              if (v53) {
                goto LABEL_119;
              }
              uint64_t v52 = *((void *)v47 - 6);
              uint64_t v51 = *((void *)v47 - 5);
              BOOL v53 = __OFSUB__(v51, v52);
              uint64_t v45 = v51 - v52;
              char v46 = v53;
              if (v53) {
                goto LABEL_120;
              }
              unint64_t v54 = v12 - 2;
              uint64_t v55 = &v40[16 * v12 - 32];
              uint64_t v57 = *(void *)v55;
              uint64_t v56 = *((void *)v55 + 1);
              BOOL v53 = __OFSUB__(v56, v57);
              uint64_t v58 = v56 - v57;
              if (v53) {
                goto LABEL_121;
              }
              BOOL v53 = __OFADD__(v45, v58);
              uint64_t v59 = v45 + v58;
              if (v53) {
                goto LABEL_123;
              }
              if (v59 >= v50)
              {
                size_t v77 = &v40[16 * v42];
                uint64_t v79 = *(void *)v77;
                uint64_t v78 = *((void *)v77 + 1);
                BOOL v53 = __OFSUB__(v78, v79);
                uint64_t v80 = v78 - v79;
                if (v53) {
                  goto LABEL_129;
                }
                BOOL v70 = v45 < v80;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                uint64_t v71 = *((void *)v11 + 4);
                uint64_t v72 = *((void *)v11 + 5);
                BOOL v53 = __OFSUB__(v72, v71);
                uint64_t v64 = v72 - v71;
                char v65 = v53;
                goto LABEL_77;
              }
              uint64_t v44 = *((void *)v11 + 4);
              uint64_t v43 = *((void *)v11 + 5);
              BOOL v53 = __OFSUB__(v43, v44);
              uint64_t v45 = v43 - v44;
              char v46 = v53;
            }
            if (v46) {
              goto LABEL_122;
            }
            unint64_t v54 = v12 - 2;
            size_t v60 = &v40[16 * v12 - 32];
            uint64_t v62 = *(void *)v60;
            uint64_t v61 = *((void *)v60 + 1);
            BOOL v63 = __OFSUB__(v61, v62);
            uint64_t v64 = v61 - v62;
            char v65 = v63;
            if (v63) {
              goto LABEL_124;
            }
            uint64_t v66 = &v40[16 * v42];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v53 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v53) {
              goto LABEL_126;
            }
            if (__OFADD__(v64, v69)) {
              goto LABEL_128;
            }
            if (v64 + v69 >= v45)
            {
              BOOL v70 = v45 < v69;
LABEL_83:
              if (v70) {
                unint64_t v42 = v54;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v65) {
              goto LABEL_125;
            }
            unint64_t v73 = &v40[16 * v42];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            BOOL v53 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v53) {
              goto LABEL_127;
            }
            if (v76 < v64) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v81 = v42 - 1;
            if (v42 - 1 >= v12)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v10) {
              goto LABEL_143;
            }
            size_t v82 = (unint64_t *)v11;
            char v83 = &v40[16 * v81];
            uint64_t v84 = *(void *)v83;
            char v85 = &v40[16 * v42];
            uint64_t v86 = *((void *)v85 + 1);
            uint64_t result = sub_100031D90((unsigned __int8 *)(v10 + 32 * *(void *)v83), (unsigned __int8 *)(v10 + 32 * *(void *)v85), v10 + 32 * v86, v111);
            if (v1) {
              goto LABEL_93;
            }
            if (v86 < v84) {
              goto LABEL_116;
            }
            if (v42 > v82[2]) {
              goto LABEL_117;
            }
            *(void *)char v83 = v84;
            *(void *)&v40[16 * v81 + 8] = v86;
            unint64_t v87 = v82[2];
            if (v42 >= v87) {
              goto LABEL_118;
            }
            int64_t v11 = (char *)v82;
            unint64_t v12 = v87 - 1;
            uint64_t result = (uint64_t)memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
            v82[2] = v87 - 1;
            uint64_t v10 = v110;
            if (v87 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v12 = 1;
LABEL_15:
        uint64_t v6 = v108;
        Swift::Int v3 = v109;
        if (v9 >= v109)
        {
          uint64_t v8 = v107;
          goto LABEL_102;
        }
      }
    }
    uint64_t v8 = &_swiftEmptyArrayStorage;
    id v111 = (char *)&_swiftEmptyArrayStorage + 32;
    if (v3 == 1)
    {
      id v107 = &_swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v12 = *((void *)&_swiftEmptyArrayStorage + 2);
    int64_t v11 = (char *)&_swiftEmptyArrayStorage;
LABEL_102:
    uint64_t result = (uint64_t)v11;
    id v107 = v8;
    if (v12 >= 2)
    {
      uint64_t v97 = *v105;
      do
      {
        unint64_t v98 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_131;
        }
        if (!v97) {
          goto LABEL_145;
        }
        uint64_t v99 = result;
        uint64_t v100 = *(void *)(result + 32 + 16 * v98);
        uint64_t v101 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = sub_100031D90((unsigned __int8 *)(v97 + 32 * v100), (unsigned __int8 *)(v97 + 32 * *(void *)(result + 32 + 16 * (v12 - 1))), v97 + 32 * v101, v111);
        if (v1) {
          break;
        }
        if (v101 < v100) {
          goto LABEL_132;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_10003209C(v99);
          uint64_t v99 = result;
        }
        if (v98 >= *(void *)(v99 + 16)) {
          goto LABEL_133;
        }
        id v102 = (void *)(v99 + 32 + 16 * v98);
        *id v102 = v100;
        v102[1] = v101;
        unint64_t v103 = *(void *)(v99 + 16);
        if (v12 > v103) {
          goto LABEL_134;
        }
        memmove((void *)(v99 + 32 + 16 * (v12 - 1)), (const void *)(v99 + 32 + 16 * v12), 16 * (v103 - v12));
        uint64_t result = v99;
        *(void *)(v99 + 16) = v103 - 1;
        unint64_t v12 = v103 - 1;
      }
      while (v103 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *((void *)v107 + 2) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100031D90(unsigned __int8 *__dst, unsigned __int8 *__src, unint64_t a3, char *a4)
{
  long long v4 = (unsigned __int8 *)a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 31;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != (char *)__src || &__src[32 * v13] <= (unsigned __int8 *)a4) {
      memmove(a4, __src, 32 * v13);
    }
    unsigned int v14 = &v4[32 * v13];
    if (v7 >= v6 || v11 < 32) {
      goto LABEL_40;
    }
    unsigned int v18 = (unsigned __int8 *)(a3 - 32);
    while (1)
    {
      unsigned int v19 = v18 + 32;
      unsigned int v20 = v6 - 32;
      if (*(v14 - 32) >= *(v6 - 32))
      {
        unsigned int v20 = v14 - 32;
        if (v19 != v14)
        {
          v14 -= 32;
          goto LABEL_37;
        }
        BOOL v21 = v18 >= v14;
        v14 -= 32;
        if (v21) {
          goto LABEL_37;
        }
      }
      else
      {
        if (v19 != v6)
        {
          v6 -= 32;
LABEL_37:
          long long v22 = *((_OWORD *)v20 + 1);
          *(_OWORD *)unsigned int v18 = *(_OWORD *)v20;
          *((_OWORD *)v18 + 1) = v22;
          goto LABEL_38;
        }
        BOOL v21 = v18 >= v6;
        v6 -= 32;
        if (v21) {
          goto LABEL_37;
        }
      }
LABEL_38:
      if (v6 > v7)
      {
        v18 -= 32;
        if (v14 > v4) {
          continue;
        }
      }
      goto LABEL_40;
    }
  }
  if (a4 != (char *)__dst || &__dst[32 * v10] <= (unsigned __int8 *)a4) {
    memmove(a4, __dst, 32 * v10);
  }
  unsigned int v14 = &v4[32 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (*v6 < *v4)
    {
      uint64_t v15 = v6;
      BOOL v16 = v7 == v6;
      v6 += 32;
      if (!v16) {
        goto LABEL_16;
      }
LABEL_17:
      v7 += 32;
      if (v4 >= v14 || (unint64_t)v6 >= a3) {
        goto LABEL_19;
      }
    }
    uint64_t v15 = v4;
    BOOL v16 = v7 == v4;
    v4 += 32;
    if (v16) {
      goto LABEL_17;
    }
LABEL_16:
    long long v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    *((_OWORD *)v7 + 1) = v17;
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v6 = v7;
LABEL_40:
  int64_t v23 = v14 - v4 + (v14 - v4 < 0 ? 0x1FuLL : 0);
  if (v6 != v4 || v6 >= &v4[v23 & 0xFFFFFFFFFFFFFFE0]) {
    memmove(v6, v4, 32 * (v23 >> 5));
  }
  return 1;
}

char *sub_100031FA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100020378(&qword_1001578C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unsigned int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10003209C(uint64_t a1)
{
  return sub_100031FA0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000320C0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_10002BD94(a1, a2);
      char v5 = sub_10002C114((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      sub_10002BD3C(a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v5 = sub_10002C114(v11, v12, v10, a3, a4);
      swift_release();
      swift_release();
LABEL_6:
      sub_10002BD3C(a3, a4);
      return v5 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_8;
    default:
      __s1[0] = a1;
      LOWORD(__s1[1]) = a2;
      BYTE2(__s1[1]) = BYTE2(a2);
      BYTE3(__s1[1]) = BYTE3(a2);
      BYTE4(__s1[1]) = BYTE4(a2);
      BYTE5(__s1[1]) = BYTE5(a2);
LABEL_8:
      sub_10002BA84((uint64_t)__s1, a3, a4, &v14);
      sub_10002BD3C(a3, a4);
      if (!v4) {
        char v5 = v14;
      }
      return v5 & 1;
  }
}

char *sub_1000322F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100020378(&qword_1001578C8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  char v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_1000323F4(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    do
    {
      Swift::UInt8 v5 = *(unsigned char *)(v4 - 24);
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v5);
      sub_10002FE6C();
      dispatch thunk of Hashable.hash(into:)();
      v4 += 32;
      --v3;
    }
    while (v3);
  }
}

char *sub_1000324AC(uint64_t a1)
{
  return sub_1000322F0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000324C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    uint64_t v4 = *((void *)a1 + 1);
    unint64_t v5 = *((void *)a1 + 2);
    uint64_t v6 = 0;
    switch(v5 >> 62)
    {
      case 1uLL:
        LODWORD(v6) = HIDWORD(v4) - v4;
        if (__OFSUB__(HIDWORD(v4), v4))
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          swift_release();
          __break(1u);
          swift_release();
          __break(1u);
          JUMPOUT(0x1000327D0);
        }
        uint64_t v6 = (int)v6;
LABEL_8:
        uint64_t v10 = *((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        switch(v11 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v10), v10)) {
              goto LABEL_44;
            }
            if (v6 == HIDWORD(v10) - v10) {
              goto LABEL_18;
            }
            goto LABEL_39;
          case 2uLL:
            uint64_t v13 = *(void *)(v10 + 16);
            uint64_t v12 = *(void *)(v10 + 24);
            BOOL v9 = __OFSUB__(v12, v13);
            uint64_t v14 = v12 - v13;
            if (v9) {
              goto LABEL_43;
            }
            if (v6 != v14) {
              goto LABEL_39;
            }
LABEL_18:
            if (v6 >= 1)
            {
              sub_10002BD94(*((void *)a2 + 1), *((void *)a2 + 2));
              if ((sub_1000320C0(v4, v5, v10, v11) & 1) == 0) {
                goto LABEL_39;
              }
            }
LABEL_20:
            uint64_t v15 = *((void *)a1 + 3);
            unint64_t v16 = *((void *)a1 + 4);
            uint64_t v17 = 0;
            switch(v16 >> 62)
            {
              case 1uLL:
                LODWORD(v17) = HIDWORD(v15) - v15;
                if (__OFSUB__(HIDWORD(v15), v15)) {
                  goto LABEL_45;
                }
                uint64_t v17 = (int)v17;
LABEL_25:
                uint64_t v20 = *((void *)a2 + 3);
                unint64_t v21 = *((void *)a2 + 4);
                switch(v21 >> 62)
                {
                  case 1uLL:
                    if (__OFSUB__(HIDWORD(v20), v20)) {
                      goto LABEL_48;
                    }
                    if (v17 == HIDWORD(v20) - v20) {
                      goto LABEL_35;
                    }
                    goto LABEL_39;
                  case 2uLL:
                    uint64_t v23 = *(void *)(v20 + 16);
                    uint64_t v22 = *(void *)(v20 + 24);
                    BOOL v9 = __OFSUB__(v22, v23);
                    uint64_t v24 = v22 - v23;
                    if (v9) {
                      goto LABEL_47;
                    }
                    if (v17 != v24) {
                      goto LABEL_39;
                    }
LABEL_35:
                    if (v17 >= 1)
                    {
                      sub_10002BD94(*((void *)a2 + 3), *((void *)a2 + 4));
                      if ((sub_1000320C0(v15, v16, v20, v21) & 1) == 0) {
                        goto LABEL_39;
                      }
                    }
LABEL_37:
                    if (*((void *)a1 + 5) != *((void *)a2 + 5)) {
                      goto LABEL_39;
                    }
                    long long v29 = (char *)*((void *)a1 + 6);
                    Swift::Int v30 = v29;
                    swift_bridgeObjectRetain_n();
                    sub_100031674(&v29);
                    sub_100032F04((uint64_t)&v30);
                    uint64_t v25 = v29;
                    long long v29 = (char *)*((void *)a2 + 6);
                    long long v28 = v29;
                    swift_bridgeObjectRetain_n();
                    sub_100031674(&v28);
                    sub_100032F04((uint64_t)&v29);
                    char v26 = sub_100031298((uint64_t)v25, (uint64_t)v28);
                    swift_release();
                    swift_release();
                    break;
                  case 3uLL:
                    if (!v17) {
                      goto LABEL_37;
                    }
                    goto LABEL_39;
                  default:
                    if (v17 != BYTE6(v21)) {
                      goto LABEL_39;
                    }
                    goto LABEL_35;
                }
                break;
              case 2uLL:
                uint64_t v19 = *(void *)(v15 + 16);
                uint64_t v18 = *(void *)(v15 + 24);
                BOOL v9 = __OFSUB__(v18, v19);
                uint64_t v17 = v18 - v19;
                if (!v9) {
                  goto LABEL_25;
                }
                goto LABEL_46;
              case 3uLL:
                goto LABEL_25;
              default:
                uint64_t v17 = BYTE6(v16);
                goto LABEL_25;
            }
            break;
          case 3uLL:
            if (!v6) {
              goto LABEL_20;
            }
            goto LABEL_39;
          default:
            if (v6 != BYTE6(v11)) {
              goto LABEL_39;
            }
            goto LABEL_18;
        }
        break;
      case 2uLL:
        uint64_t v8 = *(void *)(v4 + 16);
        uint64_t v7 = *(void *)(v4 + 24);
        BOOL v9 = __OFSUB__(v7, v8);
        uint64_t v6 = v7 - v8;
        if (!v9) {
          goto LABEL_8;
        }
        goto LABEL_42;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v6 = BYTE6(v5);
        goto LABEL_8;
    }
  }
  else
  {
LABEL_39:
    char v26 = 0;
  }
  return v26 & 1;
}

uint64_t sub_100032810()
{
  return sub_1000328B8(&qword_100157878, &qword_100157880);
}

unint64_t sub_10003283C()
{
  unint64_t result = qword_100157888;
  if (!qword_100157888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157888);
  }
  return result;
}

uint64_t sub_100032890()
{
  return sub_1000328B8(&qword_100157890, &qword_100157898);
}

uint64_t sub_1000328B8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100020418(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003290C()
{
  unint64_t result = qword_1001578A0;
  if (!qword_1001578A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001578A0);
  }
  return result;
}

unint64_t sub_100032964()
{
  unint64_t result = qword_1001578A8;
  if (!qword_1001578A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001578A8);
  }
  return result;
}

unint64_t sub_1000329BC()
{
  unint64_t result = qword_1001578B0;
  if (!qword_1001578B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001578B0);
  }
  return result;
}

unint64_t sub_100032A14()
{
  unint64_t result = qword_1001578B8;
  if (!qword_1001578B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001578B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SerializationVersion()
{
  return &type metadata for SerializationVersion;
}

ValueMetadata *type metadata accessor for ATLeafType()
{
  return &type metadata for ATLeafType;
}

ValueMetadata *type metadata accessor for TransparencyExtensionType()
{
  return &type metadata for TransparencyExtensionType;
}

uint64_t destroy for TransparencyExtension(uint64_t a1)
{
  return sub_10002BD3C(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t initializeWithCopy for TransparencyExtension(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_10002BD94(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for TransparencyExtension(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_10002BD94(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_10002BD3C(v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for TransparencyExtension(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for TransparencyExtension(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10002BD3C(v4, v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyExtension(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TransparencyExtension(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyExtension()
{
  return &type metadata for TransparencyExtension;
}

void destroy for ATLeafData(void *a1)
{
  sub_10002BD3C(a1[1], a1[2]);
  sub_10002BD3C(a1[3], a1[4]);
  swift_bridgeObjectRelease();
  long long v2 = (void *)a1[7];
}

uint64_t initializeWithCopy for ATLeafData(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_10002BD94(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  sub_10002BD94(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  BOOL v9 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain();
  id v10 = v9;
  return a1;
}

uint64_t assignWithCopy for ATLeafData(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_10002BD94(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_10002BD3C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_10002BD94(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  sub_10002BD3C(v10, v11);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void **)(a1 + 56);
  uint64_t v13 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v13;
  id v14 = v13;

  return a1;
}

__n128 initializeWithTake for ATLeafData(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ATLeafData(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10002BD3C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_10002BD3C(v6, v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  return a1;
}

uint64_t getEnumTagSinglePayload for ATLeafData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ATLeafData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ATLeafData()
{
  return &type metadata for ATLeafData;
}

uint64_t sub_100032F04(uint64_t a1)
{
  return a1;
}

uint64_t sub_100032F30(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_10002BD3C(a2, a3);
  }
  return result;
}

uint64_t sub_100032F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100030530(a1, a2);
}

uint64_t *sub_100032F80()
{
  return &qword_1001578D0;
}

uint64_t sub_100032F8C()
{
  swift_beginAccess();
  uint64_t v0 = qword_1001578D0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100032FE0(uint64_t a1, void *a2)
{
  qword_1001578D0 = a1;
  off_1001578D8 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10003303C())()
{
  return j__swift_endAccess;
}

unint64_t sub_100033094(uint64_t a1, unsigned __int8 a2)
{
  switch(a2 >> 5)
  {
    case 1:
      _StringGuts.grow(_:)(35);
      v3._object = (void *)0x80000001001106C0;
      v3._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v3);
      type metadata accessor for LogType(0);
      goto LABEL_5;
    case 2:
      _StringGuts.grow(_:)(38);
      v4._countAndFlagsBits = 0xD000000000000017;
      v4._object = (void *)0x80000001001106A0;
      String.append(_:)(v4);
      type metadata accessor for Application(0);
LABEL_5:
      _print_unlocked<A, B>(_:_:)();
      v5._countAndFlagsBits = 0x746365707865202CLL;
      v5._object = (void *)0xEB00000000206465;
      String.append(_:)(v5);
      goto LABEL_7;
    case 3:
      _StringGuts.grow(_:)(22);
      v6._object = (void *)0x8000000100110610;
      v6._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v6);
      type metadata accessor for LogType(0);
      goto LABEL_7;
    case 4:
      unint64_t v8 = 0xD00000000000001CLL;
      if (a2 == 128 && a1 == 1) {
        unint64_t v8 = 0xD00000000000001ELL;
      }
      if (a1 | a2 ^ 0x80) {
        return v8;
      }
      else {
        return 0xD000000000000025;
      }
    default:
      _StringGuts.grow(_:)(24);
      v2._countAndFlagsBits = 0xD000000000000016;
      v2._object = (void *)0x80000001001106E0;
      String.append(_:)(v2);
      type metadata accessor for Status(0);
LABEL_7:
      _print_unlocked<A, B>(_:_:)();
      return 0;
  }
}

void type metadata accessor for LogType(uint64_t a1)
{
}

void type metadata accessor for Application(uint64_t a1)
{
}

void type metadata accessor for Status(uint64_t a1)
{
}

void sub_100033384(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000333CC(uint64_t a1, unsigned __int8 a2)
{
  uint64_t result = 1;
  switch(a2 >> 5)
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = 3;
      break;
    case 3:
      uint64_t result = 7;
      break;
    case 4:
      uint64_t result = a1 + 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10003342C()
{
  return Error<>._domain.getter();
}

uint64_t sub_10003345C()
{
  return Error<>._code.getter();
}

unint64_t sub_100033494()
{
  return sub_100033094(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_1000334A0()
{
  return LocalizedError.failureReason.getter();
}

uint64_t sub_1000334B8()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t sub_1000334D0()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t sub_1000334E8()
{
  uint64_t result = 1;
  switch(*(unsigned __int8 *)(v0 + 8) >> 5)
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = 3;
      break;
    case 3:
      uint64_t result = 7;
      break;
    case 4:
      uint64_t result = *(void *)v0 + 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10003354C()
{
  return CustomNSError.errorUserInfo.getter();
}

uint64_t sub_100033564()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C148 = result;
  return result;
}

uint64_t sub_100033598()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C158 = result;
  return result;
}

uint64_t sub_1000335CC()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C168 = result;
  return result;
}

uint64_t sub_100033600()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C178 = result;
  return result;
}

uint64_t sub_100033634()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C188 = result;
  return result;
}

uint64_t sub_100033668()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C198 = result;
  return result;
}

uint64_t sub_10003369C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162268);
  sub_1000294A8(v0, (uint64_t)qword_100162268);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10003371C()
{
  if (qword_10015C1A0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162268);
}

uint64_t sub_100033780@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015C1A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162268);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

unint64_t ConsistencyProofResponse.expectedApplication.getter()
{
  return sub_1000339D8(&qword_10015C140, &qword_10015C148, type metadata accessor for Application);
}

uint64_t sub_100033860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_1001578E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ConsistencyProofResponse.expectedApplication.setter(uint64_t a1)
{
  return sub_100033B34(a1, &qword_10015C140, &qword_10015C148, type metadata accessor for Application);
}

void (*ConsistencyProofResponse.expectedApplication.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  unint64_t v4 = ConsistencyProofResponse.expectedApplication.getter();
  *((_DWORD *)v3 + 8) = v4;
  *((unsigned char *)v3 + 36) = BYTE4(v4) & 1;
  return sub_100033968;
}

void sub_100033968(uint64_t a1, uint64_t a2)
{
}

unint64_t ConsistencyProofResponse.expectedLogType.getter()
{
  return sub_1000339D8(&qword_10015C150, &qword_10015C158, type metadata accessor for LogType);
}

unint64_t sub_1000339D8(void *a1, void *a2, void (*a3)(void))
{
  if (*a1 != -1) {
    swift_once();
  }
  Swift::String v6 = (const void *)(*a2 + 16);
  swift_beginAccess();
  id v7 = objc_getAssociatedObject(v3, v6);
  swift_endAccess();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_100033860((uint64_t)v13, (uint64_t)v14);
  if (v15)
  {
    a3(0);
    int v8 = swift_dynamicCast();
    uint64_t v9 = v12;
    unsigned __int8 v10 = v8 ^ 1;
    if (!v8) {
      uint64_t v9 = 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v14, &qword_1001578E0);
    uint64_t v9 = 0;
    unsigned __int8 v10 = 1;
  }
  return v9 | ((unint64_t)v10 << 32);
}

uint64_t ConsistencyProofResponse.expectedLogType.setter(uint64_t a1)
{
  return sub_100033B34(a1, &qword_10015C150, &qword_10015C158, type metadata accessor for LogType);
}

uint64_t sub_100033B34(uint64_t a1, void *a2, uint64_t *a3, void (*a4)(void))
{
  if (*a2 != -1)
  {
    swift_once();
    uint64_t v8 = *a3;
    if ((a1 & 0x100000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = *a3;
  if ((a1 & 0x100000000) != 0) {
    goto LABEL_5;
  }
LABEL_3:
  a4(0);
  uint64_t v9 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
LABEL_6:
  swift_beginAccess();
  objc_setAssociatedObject(v4, (const void *)(v8 + 16), v9, (void *)0x303);
  swift_endAccess();
  return swift_unknownObjectRelease();
}

void (*ConsistencyProofResponse.expectedLogType.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  unint64_t v4 = ConsistencyProofResponse.expectedLogType.getter();
  *((_DWORD *)v3 + 8) = v4;
  *((unsigned char *)v3 + 36) = BYTE4(v4) & 1;
  return sub_100033C60;
}

void sub_100033C60(uint64_t a1, uint64_t a2)
{
}

void sub_100033C98(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void (*a5)(void))
{
  id v7 = *(void **)a1;
  int v8 = *(_DWORD *)(*(void *)a1 + 32);
  char v9 = *(unsigned char *)(*(void *)a1 + 36);
  if (*a3 == -1)
  {
    uint64_t v10 = *a4;
    if (*(unsigned char *)(*(void *)a1 + 36))
    {
LABEL_3:
      unint64_t v11 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    swift_once();
    uint64_t v10 = *a4;
    if (v9) {
      goto LABEL_3;
    }
  }
  *(_DWORD *)id v7 = v8;
  a5(0);
  unint64_t v11 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
LABEL_6:
  unsigned int v12 = (void *)v7[3];
  swift_beginAccess();
  objc_setAssociatedObject(v12, (const void *)(v10 + 16), v11, (void *)0x303);
  swift_endAccess();
  swift_unknownObjectRelease();

  free(v7);
}

uint64_t ConsistencyProofResponse.startRevision.getter()
{
  if (qword_10015C160 != -1) {
    swift_once();
  }
  uint64_t v1 = (const void *)(qword_10015C168 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

uint64_t ConsistencyProofResponse.startRevision.setter(uint64_t a1, char a2)
{
  if (qword_10015C160 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10015C168;
  if (a2) {
    v5.super.super.Class isa = 0;
  }
  else {
    v5.super.super.Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
  }
  swift_beginAccess();
  objc_setAssociatedObject(v2, (const void *)(v4 + 16), v5.super.super.isa, (void *)0x303);
  swift_endAccess();
  return swift_unknownObjectRelease();
}

void (*ConsistencyProofResponse.startRevision.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v3[3] = ConsistencyProofResponse.startRevision.getter();
  *((unsigned char *)v3 + 32) = v4 & 1;
  return sub_100033FC8;
}

void sub_100033FC8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 32);
  if (qword_10015C160 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_10015C168;
  if (v2) {
    Class isa = 0;
  }
  else {
    Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
  }
  NSNumber v5 = (void *)v1[5];
  swift_beginAccess();
  objc_setAssociatedObject(v5, (const void *)(v3 + 16), isa, (void *)0x303);
  swift_endAccess();
  swift_unknownObjectRelease();

  free(v1);
}

uint64_t ConsistencyProofResponse.keyBag.getter()
{
  if (qword_10015C170 != -1) {
    swift_once();
  }
  uint64_t v1 = (const void *)(qword_10015C178 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100038600(0, (unint64_t *)&qword_1001578E8);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

void ConsistencyProofResponse.keyBag.setter(void *a1)
{
  if (qword_10015C170 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015C178 + 16);
  swift_beginAccess();
  id v4 = a1;
  objc_setAssociatedObject(v1, v3, v4, (void *)1);
  swift_endAccess();
}

void (*ConsistencyProofResponse.keyBag.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = ConsistencyProofResponse.keyBag.getter();
  return sub_1000342D4;
}

void sub_1000342D4(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v4 = qword_10015C170;
    id v5 = v3;
    if (v4 != -1) {
      swift_once();
    }
    Swift::String v6 = (void *)v2[4];
    uint64_t v7 = (const void *)(qword_10015C178 + 16);
    swift_beginAccess();
    id v8 = v5;
    objc_setAssociatedObject(v6, v7, v8, (void *)1);
    swift_endAccess();

    id v9 = (id)v2[3];
  }
  else
  {
    if (qword_10015C170 != -1) {
      swift_once();
    }
    uint64_t v10 = (void *)v2[4];
    unint64_t v11 = (const void *)(qword_10015C178 + 16);
    swift_beginAccess();
    id v9 = v3;
    objc_setAssociatedObject(v10, v11, v9, (void *)1);
    swift_endAccess();
  }

  free(v2);
}

double sub_100034428@<D0>(uint64_t a1@<X8>)
{
  if (qword_10015C180 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015C188 + 16);
  swift_beginAccess();
  id v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100033860((uint64_t)v6, (uint64_t)v7);
  if (!v8)
  {
    sub_100028C8C((uint64_t)v7, &qword_1001578E0);
    goto LABEL_10;
  }
  sub_100020378(&qword_1001578F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100034550(uint64_t a1)
{
  if (qword_10015C180 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_10015C188;
  sub_100029208(a1, (uint64_t)v12, &qword_1001578F8);
  uint64_t v4 = v13;
  if (v13)
  {
    id v5 = sub_10002BCF8(v12, v13);
    uint64_t v6 = *(void *)(v4 - 8);
    __chkstk_darwin(v5);
    uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    id v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_100028A4C((uint64_t)v12);
  }
  else
  {
    id v9 = 0;
  }
  swift_beginAccess();
  objc_setAssociatedObject(v1, (const void *)(v3 + 16), v9, (void *)1);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, &qword_1001578F8);
}

void (*sub_100034708(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_100034428((uint64_t)v3);
  return sub_100034768;
}

void sub_100034768(uint64_t *a1, char a2)
{
  id v2 = (void *)*a1;
  if (a2)
  {
    sub_100029208(*a1, (uint64_t)v2 + 40, &qword_1001578F8);
    sub_100034550((uint64_t)v2 + 40);
    sub_100028C8C((uint64_t)v2, &qword_1001578F8);
  }
  else
  {
    sub_100034550(*a1);
  }

  free(v2);
}

uint64_t ConsistencyProofResponse.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015C190 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015C198 + 16);
  swift_beginAccess();
  id v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100033860((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100028C8C((uint64_t)v10, &qword_1001578E0);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t ConsistencyProofResponse.receiptTime.setter(uint64_t a1)
{
  id v2 = v1;
  if (qword_10015C190 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10015C198;
  uint64_t v5 = sub_100020378((uint64_t *)&unk_1001580E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a1, (uint64_t)v7, (uint64_t *)&unk_1001580E0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_beginAccess();
  objc_setAssociatedObject(v2, (const void *)(v4 + 16), isa, (void *)0x303);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, (uint64_t *)&unk_1001580E0);
}

void (*ConsistencyProofResponse.receiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(sub_100020378((uint64_t *)&unk_1001580E0) - 8) + 64);
  a1[1] = v3;
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  ConsistencyProofResponse.receiptTime.getter((uint64_t)v4);
  return sub_100034BA0;
}

void sub_100034BA0(uint64_t a1, char a2)
{
  id v2 = *(void **)(a1 + 16);
  if (a2)
  {
    __chkstk_darwin(a1);
    uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100029208((uint64_t)v2, (uint64_t)v4, (uint64_t *)&unk_1001580E0);
    ConsistencyProofResponse.receiptTime.setter((uint64_t)v4);
    sub_100028C8C((uint64_t)v2, (uint64_t *)&unk_1001580E0);
    free(v2);
  }
  else
  {
    ConsistencyProofResponse.receiptTime.setter(*(void *)(a1 + 16));
    free(v2);
  }
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ConsistencyProofResponse.isNewEpoch()()
{
  id v2 = [v0 responsesArray];
  if (!v2)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t)[v2 count];

  if (v4 >= 1)
  {
    uint64_t v5 = ConsistencyProofResponse.keyBag.getter();
    if (!v5)
    {
      sub_100034F60();
      swift_allocError();
      v16[1] = 0;
      v16[2] = 0;
      *unint64_t v16 = 0x8000000000000000;
      swift_willThrow();
      goto LABEL_18;
    }
    uint64_t v6 = (void *)v5;
    if ([v0 logType] != 3 && objc_msgSend(v0, "logType") != 2)
    {
      uint64_t v19 = [v0 logType];
      sub_10003832C();
      swift_allocError();
      *(void *)uint64_t v17 = v19;
      char v18 = 96;
      goto LABEL_17;
    }
    unsigned int v7 = [v0 logType];
    uint64_t v8 = &selRef_tltLogBeginningMs;
    if (v7 != 3) {
      uint64_t v8 = &selRef_patLogBeginningMs;
    }
    id v9 = [v6 *v8];
    id v2 = [v0 responsesArray];
    if (v2)
    {
      uint64_t v10 = v2;
      id v11 = [v2 objectAtIndexedSubscript:0];

      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100038600(0, &qword_100157910);
      if (swift_dynamicCast())
      {
        id v2 = [v22 startSlh];
        if (v2)
        {
          uint64_t v12 = v2;
          sub_100038600(0, (unint64_t *)&qword_1001575C8);
          id v13 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v12];

          unint64_t v14 = sub_100066B58();
          if (v1)
          {
            swift_errorRelease();
          }
          else
          {
            uint64_t v20 = v14;

            if (v20 >= 1 && (unint64_t)v9 < v20)
            {
              char v15 = 1;
              goto LABEL_18;
            }
          }
          goto LABEL_13;
        }
LABEL_24:
        __break(1u);
        return (char)v2;
      }
      sub_10003832C();
      swift_allocError();
      *(void *)uint64_t v17 = 2;
      char v18 = 0x80;
LABEL_17:
      *(unsigned char *)(v17 + 8) = v18;
      swift_willThrow();

      goto LABEL_18;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_13:
  char v15 = 0;
LABEL_18:
  LOBYTE(v2) = v15 & 1;
  return (char)v2;
}

unint64_t sub_100034F60()
{
  unint64_t result = qword_100157900;
  if (!qword_100157900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157900);
  }
  return result;
}

void sub_100034FB4(void *a1)
{
  uint64_t v3 = v1;
  if (![a1 hasStartSlh] || !objc_msgSend(a1, "hasEndSlh"))
  {
    sub_10003832C();
    swift_allocError();
    *(void *)uint64_t v12 = 0;
    *(unsigned char *)(v12 + 8) = 0x80;
    swift_willThrow();
    return;
  }
  id v5 = [a1 startSlh];
  if (!v5)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v6 = v5;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v8 = [ObjCClassFromMetadata signedTypeWithObject:v6];

  id v9 = [a1 endSlh];
  if (!v9)
  {
LABEL_42:
    __break(1u);
    return;
  }
  uint64_t v10 = v9;
  id v11 = [ObjCClassFromMetadata signedTypeWithObject:v9];

  sub_100066CFC((uint64_t)v85);
  if (v2)
  {
LABEL_7:

    return;
  }
  sub_100066CFC((uint64_t)v87);
  sub_100034428((uint64_t)&v78);
  if (*((void *)&v79 + 1))
  {
    sub_10003863C((uint64_t)&v78, (uint64_t)v82);
    sub_100028C8C((uint64_t)&v78, &qword_1001578F8);
    uint64_t v74 = v84;
    uint64_t v75 = v83;
    unint64_t v73 = sub_10002BCF8(v82, (uint64_t)v83);
    id v13 = (void *)type metadata accessor for Date();
    size_t v77 = &v72;
    uint64_t v14 = *(v13 - 1);
    __chkstk_darwin(v13);
    unint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v17 = sub_100020378((uint64_t *)&unk_1001580E0);
    uint64_t v89 = &v72;
    __chkstk_darwin(v17 - 8);
    uint64_t v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    ConsistencyProofResponse.receiptTime.getter((uint64_t)v19);
    int v20 = (*(uint64_t (**)(char *, uint64_t, void *))(v14 + 48))(v19, 1, v13);
    id v76 = v13;
    if (v20 == 1)
    {
      static Date.now.getter();
      sub_100028C8C((uint64_t)v19, (uint64_t *)&unk_1001580E0);
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v14 + 32))(v16, v19, v13);
    }
    id v29 = [v8 data];
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    unint64_t v33 = sub_100066ED4();
    (*((void (**)(_OWORD *, char *, uint64_t, unint64_t, unint64_t, uint64_t *))v74 + 3))(v85, v16, v30, v32, v33, v75);
    (*(void (**)(char *, id))(v14 + 8))(v16, v76);
    sub_10002BD3C(v30, v32);
    sub_100028A4C((uint64_t)v82);
  }
  else
  {
    sub_100028C8C((uint64_t)&v78, &qword_1001578F8);
  }
  sub_100034428((uint64_t)&v78);
  if (*((void *)&v79 + 1))
  {
    sub_10003863C((uint64_t)&v78, (uint64_t)v82);
    sub_100028C8C((uint64_t)&v78, &qword_1001578F8);
    uint64_t v74 = v84;
    uint64_t v75 = v83;
    unint64_t v73 = sub_10002BCF8(v82, (uint64_t)v83);
    unint64_t v21 = (void *)type metadata accessor for Date();
    size_t v77 = &v72;
    uint64_t v22 = *(v21 - 1);
    __chkstk_darwin(v21);
    uint64_t v24 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v25 = sub_100020378((uint64_t *)&unk_1001580E0);
    uint64_t v89 = &v72;
    __chkstk_darwin(v25 - 8);
    uint64_t v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    ConsistencyProofResponse.receiptTime.getter((uint64_t)v27);
    int v28 = (*(uint64_t (**)(char *, uint64_t, void *))(v22 + 48))(v27, 1, v21);
    id v76 = v21;
    if (v28 == 1)
    {
      static Date.now.getter();
      sub_100028C8C((uint64_t)v27, (uint64_t *)&unk_1001580E0);
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v22 + 32))(v24, v27, v21);
    }
    id v43 = [v11 data];
    uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v46 = v45;

    unint64_t v47 = sub_100066ED4();
    (*((void (**)(_OWORD *, char *, uint64_t, unint64_t, unint64_t, uint64_t *))v74 + 3))(v87, v24, v44, v46, v47, v75);
    (*(void (**)(char *, id))(v22 + 8))(v24, v76);
    sub_10002BD3C(v44, v46);
    sub_100028A4C((uint64_t)v82);
  }
  else
  {
    sub_100028C8C((uint64_t)&v78, &qword_1001578F8);
  }
  uint64_t v34 = ConsistencyProofResponse.keyBag.getter();
  if (!v34)
  {
    sub_10003832C();
    swift_allocError();
    *(void *)uint64_t v48 = 1;
    *(unsigned char *)(v48 + 8) = 0x80;
    swift_willThrow();
    sub_10002BE4C((uint64_t)v87);
    sub_10002BE4C((uint64_t)v85);
    goto LABEL_7;
  }
  uint64_t v35 = (void *)v34;
  unsigned int v36 = [v3 logType];
  long long v37 = &selRef_tltKeyStore;
  if (v36 != 3) {
    long long v37 = &selRef_appSthKeyStore;
  }
  id v38 = [v35 *v37];
  unint64_t v39 = (uint64_t *)v11;
  id v40 = [v38 signatureVerifier];
  [v39 setVerifier:v40];

  id v41 = v8;
  uint64_t v89 = (uint64_t *)v38;
  id v42 = [v38 signatureVerifier];
  [v41 setVerifier:v42];

  id v49 = sub_10005D628();
  sub_100034428((uint64_t)&v78);
  if (*((void *)&v79 + 1))
  {
    id v50 = v41;
    uint64_t v51 = v35;
    sub_10003863C((uint64_t)&v78, (uint64_t)v82);
    sub_100028C8C((uint64_t)&v78, &qword_1001578F8);
    uint64_t v52 = v83;
    BOOL v53 = v84;
    sub_10002BCF8(v82, (uint64_t)v83);
    (*((void (**)(_OWORD *, id, uint64_t *, uint8_t *))v53 + 6))(v85, v49, v52, v53);
    sub_100028A4C((uint64_t)v82);
    uint64_t v35 = v51;
    id v41 = v50;
  }
  else
  {
    sub_100028C8C((uint64_t)&v78, &qword_1001578F8);
  }
  if (qword_10015C1A0 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_1000294A8(v54, (uint64_t)qword_100162268);
  sub_10002BE90((uint64_t)v85);
  sub_10002BE90((uint64_t)v85);
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  BOOL v57 = os_log_type_enabled(v55, v56);
  size_t v77 = v39;
  id v76 = v35;
  uint64_t v75 = (uint64_t *)v41;
  if (v57)
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 136315138;
    uint64_t v74 = v58 + 4;
    long long v78 = v85[0];
    long long v79 = v85[1];
    long long v80 = v85[2];
    uint64_t v81 = v86;
    v82[0] = v59;
    sub_10002BF28();
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v78 = sub_1000262AC(v60, v61, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002BE4C((uint64_t)v85);
    sub_10002BE4C((uint64_t)v85);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Verified signature for %s", v58, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v39 = v77;
    swift_slowDealloc();
  }
  else
  {
    sub_10002BE4C((uint64_t)v85);
    sub_10002BE4C((uint64_t)v85);
  }

  id v62 = sub_10005D628();
  sub_100034428((uint64_t)&v78);
  if (*((void *)&v79 + 1))
  {
    sub_10003863C((uint64_t)&v78, (uint64_t)v82);
    sub_100028C8C((uint64_t)&v78, &qword_1001578F8);
    BOOL v63 = v83;
    uint64_t v64 = v84;
    sub_10002BCF8(v82, (uint64_t)v83);
    (*((void (**)(_OWORD *, id, uint64_t *, uint8_t *))v64 + 6))(v87, v62, v63, v64);
    sub_100028A4C((uint64_t)v82);
  }
  else
  {
    sub_100028C8C((uint64_t)&v78, &qword_1001578F8);
  }
  sub_10002BE90((uint64_t)v87);
  sub_10002BE90((uint64_t)v87);
  char v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    *(_DWORD *)uint64_t v67 = 136315138;
    long long v78 = v87[0];
    long long v79 = v87[1];
    long long v80 = v87[2];
    uint64_t v81 = v88;
    v82[0] = v68;
    sub_10002BF28();
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v78 = sub_1000262AC(v69, v70, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002BE4C((uint64_t)v87);
    sub_10002BE4C((uint64_t)v87);
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Verified signature for %s", v67, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10002BE4C((uint64_t)v87);
    sub_10002BE4C((uint64_t)v85);

    uint64_t v71 = v75;
  }
  else
  {

    sub_10002BE4C((uint64_t)v85);
    sub_10002BE4C((uint64_t)v87);
    sub_10002BE4C((uint64_t)v87);
    sub_10002BE4C((uint64_t)v87);

    uint64_t v71 = v89;
  }
}

uint64_t sub_100036274(void *a1)
{
  id v5 = v1;
  uint64_t v7 = type metadata accessor for KTSWDB.SignedLogHead();
  __chkstk_darwin(v7 - 8);
  id v9 = (uint64_t *)((char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (![a1 hasStartSlh] || !objc_msgSend(a1, "hasEndSlh"))
  {
    sub_10003832C();
    swift_allocError();
    *(void *)uint64_t v19 = 0;
    *(unsigned char *)(v19 + 8) = 0x80;
    swift_willThrow();
    return v18 & 1;
  }
  uint64_t v10 = &selRef_sortedArrayUsingSelector_;
  id v11 = [a1 startSlh];
  if (!v11)
  {
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v12 = v11;
  id v4 = [v11 object];

  if (!v4)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    swift_once();
LABEL_34:
    uint64_t v55 = type metadata accessor for Logger();
    sub_1000294A8(v55, (uint64_t)qword_100162268);
    os_log_type_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unknown startSlh consistency verification state", v58, 2u);
      swift_slowDealloc();

      sub_10002BE4C((uint64_t)v96);
      sub_10002BE4C((uint64_t)&v98);
      uint64_t v59 = &v104;
LABEL_36:

      char v18 = 1;
    }
    else
    {

      sub_10002BE4C((uint64_t)v96);
      sub_10002BE4C((uint64_t)&v98);

      char v18 = 1;
    }
    return v18 & 1;
  }
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  id v16 = objc_allocWithZone((Class)LogHead);
  id v17 = sub_100038540();
  if (v2)
  {
    sub_10002BD3C(v13, v15);
    return v18 & 1;
  }
  id v4 = v17;
  sub_10002BD3C(v13, v15);
  id v21 = [v4 revision];
  uint64_t v22 = ConsistencyProofResponse.startRevision.getter();
  if ((v23 & 1) == 0 && v22 >= 1 && (unint64_t)v21 < v22)
  {

    char v18 = 0;
    return v18 & 1;
  }
  sub_100034FB4(a1);
  uint64_t v24 = ConsistencyProofResponse.keyBag.getter();
  if (!v24)
  {
    sub_10003832C();
    swift_allocError();
    *(void *)uint64_t v39 = 1;
    *(unsigned char *)(v39 + 8) = 0x80;
    swift_willThrow();

    return v18 & 1;
  }
  uint64_t v25 = (void *)v24;
  unsigned int v26 = [v5 logType];
  uint64_t v27 = &selRef_tltKeyStore;
  if (v26 != 3) {
    uint64_t v27 = &selRef_appSthKeyStore;
  }
  int v28 = *v27;
  id v102 = v25;
  id v29 = [v25 v28];
  id v30 = objc_allocWithZone((Class)TransparencyConsistencyProofVerifier);
  id v88 = v29;
  id v31 = [v30 initWithTrustedKeyStore:v29];
  [a1 setVerifier:v31];

  ConsistencyProofResponse.startRevision.getter();
  Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
  [a1 setStartRevision:isa];

  [a1 setForwards:1];
  id v33 = [a1 startSlh];
  if (!v33)
  {
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v34 = v33;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v36 = [ObjCClassFromMetadata signedTypeWithObject:v34];

  id v37 = [a1 endSlh];
  if (!v37)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  id v38 = v37;
  uint64_t v10 = (char **)[ObjCClassFromMetadata signedTypeWithObject:v37];

  sub_100066CFC((uint64_t)v96);
  uint64_t v3 = v36;
  sub_100066CFC((uint64_t)&v98);
  sub_100034428((uint64_t)&v89);
  uint64_t v40 = *((void *)&v90 + 1);
  unint64_t v87 = v10;
  if (*((void *)&v90 + 1))
  {
    uint64_t v85 = *((void *)&v90 + 1);
    id v41 = v3;
    sub_10003863C((uint64_t)&v89, (uint64_t)v93);
    sub_100028C8C((uint64_t)&v89, &qword_1001578F8);
    uint64_t v42 = v94;
    uint64_t v43 = v95;
    sub_10002BCF8(v93, v94);
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(v43 + 64))(v96, v42, v43);
    uint64_t v84 = *v9;
    sub_10002BFE0((uint64_t)v9);
    sub_100028A4C((uint64_t)v93);
    uint64_t v10 = v87;
    uint64_t v3 = v41;
    uint64_t v40 = v85;
  }
  else
  {
    sub_100028C8C((uint64_t)&v89, &qword_1001578F8);
    uint64_t v84 = 0;
  }
  id v44 = [a1 proofHashesArray];
  if (!v44)
  {
LABEL_67:
    __break(1u);
    JUMPOUT(0x10003753CLL);
  }
  unint64_t v45 = v44;
  uint64_t v46 = (uint64_t)[v44 count];

  if (v46 < 1)
  {
    sub_100038600(0, &qword_100157930);
    sub_10003B164(v3, v10);
  }
  else
  {
    sub_10005D628();
  }
  if (!v40)
  {
LABEL_33:
    if (qword_10015C1A0 == -1) {
      goto LABEL_34;
    }
    goto LABEL_64;
  }
  id v86 = v3;
  switch(v84)
  {
    case 0:
    case 3:
      if (qword_10015C1A0 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      sub_1000294A8(v47, (uint64_t)qword_100162268);
      sub_10002BE90((uint64_t)&v98);
      sub_10002BE90((uint64_t)&v98);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v48, v49)) {
        goto LABEL_43;
      }
      id v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v85 = v51;
      *(_DWORD *)id v50 = 136315138;
      long long v89 = v98;
      long long v90 = v99;
      long long v91 = v100;
      uint64_t v92 = v101;
      v93[0] = v51;
      sub_10002BF28();
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v89 = sub_1000262AC(v52, v53, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BE4C((uint64_t)&v98);
      sub_10002BE4C((uint64_t)&v98);
      uint64_t v54 = "Verified consistency for %s following split";
      goto LABEL_42;
    case 1:
      if (qword_10015C1A0 != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      sub_1000294A8(v60, (uint64_t)qword_100162268);
      sub_10002BE90((uint64_t)&v98);
      sub_10002BE90((uint64_t)&v98);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v48, v49))
      {
        id v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        uint64_t v85 = v61;
        *(_DWORD *)id v50 = 136315138;
        long long v89 = v98;
        long long v90 = v99;
        long long v91 = v100;
        uint64_t v92 = v101;
        v93[0] = v61;
        sub_10002BF28();
        uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v89 = sub_1000262AC(v62, v63, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10002BE4C((uint64_t)&v98);
        sub_10002BE4C((uint64_t)&v98);
        uint64_t v54 = "Verified consistency for %s";
LABEL_42:
        _os_log_impl((void *)&_mh_execute_header, v48, v49, v54, v50, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
LABEL_43:
        sub_10002BE4C((uint64_t)&v98);
        sub_10002BE4C((uint64_t)&v98);
      }

      goto LABEL_45;
    case 2:
      ConsistencyProofResponse.startRevision.getter();
      if ((v66 & 1) == 0)
      {

        sub_10002BE4C((uint64_t)v96);
        sub_10002BE4C((uint64_t)&v98);

        uint64_t v59 = &v103;
        goto LABEL_36;
      }
      if (qword_10015C1A0 != -1) {
        swift_once();
      }
      uint64_t v67 = type metadata accessor for Logger();
      uint64_t v68 = sub_1000294A8(v67, (uint64_t)qword_100162268);
      sub_10002BE90((uint64_t)v96);
      sub_10002BE90((uint64_t)v96);
      uint64_t v85 = v68;
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        uint64_t v84 = v72;
        *(_DWORD *)uint64_t v71 = 136315138;
        long long v89 = v96[0];
        long long v90 = v96[1];
        long long v91 = v96[2];
        uint64_t v92 = v97;
        v93[0] = v72;
        sub_10002BF28();
        uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v89 = sub_1000262AC(v73, v74, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10002BE4C((uint64_t)v96);
        sub_10002BE4C((uint64_t)v96);
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Verified TOFU consistency for %s", v71, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10002BE4C((uint64_t)v96);
        sub_10002BE4C((uint64_t)v96);
      }

      sub_10002BE90((uint64_t)&v98);
      sub_10002BE90((uint64_t)&v98);
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v75, v76))
      {
        size_t v77 = (uint8_t *)swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        uint64_t v85 = v78;
        *(_DWORD *)size_t v77 = 136315138;
        long long v89 = v98;
        long long v90 = v99;
        long long v91 = v100;
        uint64_t v92 = v101;
        v93[0] = v78;
        sub_10002BF28();
        uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v89 = sub_1000262AC(v79, v80, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10002BE4C((uint64_t)&v98);
        sub_10002BE4C((uint64_t)&v98);
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "Verified consistency for %s", v77, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10002BE4C((uint64_t)&v98);
        sub_10002BE4C((uint64_t)&v98);
      }

      sub_100034428((uint64_t)&v89);
      if (*((void *)&v90 + 1))
      {
        sub_10003863C((uint64_t)&v89, (uint64_t)v93);
        sub_100028C8C((uint64_t)&v89, &qword_1001578F8);
        uint64_t v81 = v94;
        uint64_t v82 = v95;
        sub_10002BCF8(v93, v94);
        (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v82 + 32))(v96, 1, v81, v82);
        sub_100028A4C((uint64_t)v93);
      }
      else
      {
        sub_100028C8C((uint64_t)&v89, &qword_1001578F8);
      }
LABEL_45:
      sub_100034428((uint64_t)&v89);
      if (*((void *)&v90 + 1))
      {
        sub_10003863C((uint64_t)&v89, (uint64_t)v93);
        sub_100028C8C((uint64_t)&v89, &qword_1001578F8);
        uint64_t v64 = v94;
        uint64_t v65 = v95;
        sub_10002BCF8(v93, v94);
        (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v65 + 32))(&v98, 1, v64, v65);

        sub_10002BE4C((uint64_t)v96);
        sub_10002BE4C((uint64_t)&v98);

        sub_100028A4C((uint64_t)v93);
      }
      else
      {

        sub_10002BE4C((uint64_t)v96);
        sub_10002BE4C((uint64_t)&v98);

        sub_100028C8C((uint64_t)&v89, &qword_1001578F8);
      }
      char v18 = 1;
      break;
    default:
      goto LABEL_33;
  }
  return v18 & 1;
}

void sub_10003754C(void *a1)
{
  uint64_t v4 = type metadata accessor for KTSWDB.SignedLogHead();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (void *)((char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100034FB4(a1);
  if (v2) {
    return;
  }
  uint64_t v7 = ConsistencyProofResponse.keyBag.getter();
  if (!v7)
  {
    sub_10003832C();
    swift_allocError();
    *(void *)uint64_t v19 = 1;
    *(unsigned char *)(v19 + 8) = 0x80;
    swift_willThrow();
    return;
  }
  uint64_t v8 = (void *)v7;
  unsigned int v9 = [v1 logType];
  uint64_t v10 = &selRef_tltKeyStore;
  if (v9 != 3) {
    uint64_t v10 = &selRef_appSthKeyStore;
  }
  id v11 = [v8 *v10];
  id v12 = objc_allocWithZone((Class)TransparencyConsistencyProofVerifier);
  id v45 = v11;
  id v13 = [v12 initWithTrustedKeyStore:v11];
  [a1 setVerifier:v13];

  ConsistencyProofResponse.startRevision.getter();
  Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
  [a1 setStartRevision:isa];

  [a1 setForwards:0];
  id v15 = [a1 startSlh];
  if (!v15)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return;
  }
  id v16 = v15;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v18 = [ObjCClassFromMetadata signedTypeWithObject:v16];

  sub_100066CFC((uint64_t)v42);
  id v20 = [a1 endSlh];
  if (!v20) {
    goto LABEL_23;
  }
  id v21 = v20;
  id v22 = [ObjCClassFromMetadata signedTypeWithObject:v20];

  sub_100066CFC((uint64_t)v44);
  sub_100034428((uint64_t)&v35);
  if (!*((void *)&v36 + 1))
  {
    sub_100028C8C((uint64_t)&v35, &qword_1001578F8);
    sub_10005D628();
LABEL_17:

    sub_10002BE4C((uint64_t)v42);
    sub_10002BE4C((uint64_t)v44);

    return;
  }
  sub_10003863C((uint64_t)&v35, (uint64_t)v39);
  sub_100028C8C((uint64_t)&v35, &qword_1001578F8);
  uint64_t v23 = v40;
  uint64_t v24 = v41;
  sub_10002BCF8(v39, v40);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v24 + 64))(v44, v23, v24);
  uint64_t v25 = *v6;
  sub_10002BFE0((uint64_t)v6);
  sub_100028A4C((uint64_t)v39);
  sub_10005D628();
  if (v25 != 1) {
    goto LABEL_17;
  }
  if (qword_10015C1A0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_1000294A8(v26, (uint64_t)qword_100162268);
  sub_10002BE90((uint64_t)v42);
  sub_10002BE90((uint64_t)v42);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    id v29 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)id v29 = 136315138;
    v34[1] = v29 + 4;
    long long v35 = v42[0];
    long long v36 = v42[1];
    long long v37 = v42[2];
    uint64_t v38 = v43;
    sub_10002BF28();
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v35 = sub_1000262AC(v30, v31, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002BE4C((uint64_t)v42);
    sub_10002BE4C((uint64_t)v42);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Verified consistency for %s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10002BE4C((uint64_t)v42);
    sub_10002BE4C((uint64_t)v42);
  }

  sub_100034428((uint64_t)&v35);
  if (*((void *)&v36 + 1))
  {
    sub_10003863C((uint64_t)&v35, (uint64_t)v39);
    sub_100028C8C((uint64_t)&v35, &qword_1001578F8);
    uint64_t v32 = v40;
    uint64_t v33 = v41;
    sub_10002BCF8(v39, v40);
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v33 + 32))(v42, 1, v32, v33);

    sub_10002BE4C((uint64_t)v42);
    sub_10002BE4C((uint64_t)v44);

    sub_100028A4C((uint64_t)v39);
  }
  else
  {

    sub_10002BE4C((uint64_t)v42);
    sub_10002BE4C((uint64_t)v44);

    sub_100028C8C((uint64_t)&v35, &qword_1001578F8);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ConsistencyProofResponse.verify()()
{
  uint64_t v2 = v0;
  if ([v0 status] != 1)
  {
    uint64_t v12 = [v0 status];
    sub_10003832C();
    swift_allocError();
    *(void *)uint64_t v13 = v12;
    *(unsigned char *)(v13 + 8) = 0;
LABEL_13:
    swift_willThrow();
    return;
  }
  unint64_t v3 = ConsistencyProofResponse.expectedLogType.getter();
  if ((v3 & 0x100000000) != 0 || [v0 logType] != v3)
  {
    unsigned int v14 = [v0 logType];
    unint64_t v15 = ConsistencyProofResponse.expectedLogType.getter();
    unint64_t v16 = v14 | (v15 << 32);
    char v17 = BYTE4(v15) & 1 | 0x20;
LABEL_12:
    sub_10003832C();
    swift_allocError();
    *(void *)uint64_t v18 = v16;
    *(unsigned char *)(v18 + 8) = v17;
    goto LABEL_13;
  }
  if ([v0 logType] != 3)
  {
    unint64_t v4 = ConsistencyProofResponse.expectedApplication.getter();
    unsigned int v5 = [v2 application];
    if ((v4 & 0x100000000) != 0 || v5 != v4)
    {
      unsigned int v27 = [v2 application];
      unint64_t v28 = ConsistencyProofResponse.expectedApplication.getter();
      unint64_t v16 = v27 | (v28 << 32);
      char v17 = BYTE4(v28) & 1 | 0x40;
      goto LABEL_12;
    }
  }
  unint64_t v39 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unsigned int v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [v2 responsesArray];
  if (!v10)
  {
    __break(1u);
    return;
  }
  id v11 = v10;
  uint64_t v31 = v7;
  uint64_t v32 = v6;
  uint64_t v33 = &v30;
  NSArray.makeIterator()();

  NSFastEnumerationIterator.next()();
  if (!v38)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
    unint64_t v22 = v39;
    if (v39 >> 62) {
      goto LABEL_38;
    }
    unint64_t v23 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v23)
    {
LABEL_31:
      swift_bridgeObjectRelease();
      return;
    }
    while (1)
    {
      while (__OFSUB__(v23--, 1))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        swift_bridgeObjectRetain();
        unint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v23) {
          goto LABEL_31;
        }
      }
      if ((v22 & 0xC000000000000001) != 0)
      {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_29;
      }
      if ((v23 & 0x8000000000000000) != 0) {
        goto LABEL_36;
      }
      if (v23 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_37;
      }
      id v25 = *(id *)(v22 + 32 + 8 * v23);
LABEL_29:
      uint64_t v26 = v25;
      sub_10003754C(v25);

      if (v1 || !v23) {
        goto LABEL_31;
      }
    }
  }
  uint64_t v34 = (char *)&type metadata for Any + 8;
  while (1)
  {
    sub_1000383B0(&v37, &v36);
    sub_100038600(0, &qword_100157910);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      sub_10003832C();
      swift_allocError();
      *(void *)uint64_t v29 = 2;
      *(unsigned char *)(v29 + 8) = 0x80;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
      return;
    }
    uint64_t v19 = v35;
    char v20 = sub_100036274(v35);
    if (v1) {
      break;
    }
    if ((v20 & 1) == 0)
    {
      id v21 = v19;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }

    NSFastEnumerationIterator.next()();
    if (!v38) {
      goto LABEL_21;
    }
  }

  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  swift_bridgeObjectRelease();
}

unint64_t sub_10003832C()
{
  unint64_t result = qword_100157908;
  if (!qword_100157908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157908);
  }
  return result;
}

BOOL sub_100038380(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_100038394@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1000383A4(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_OWORD *sub_1000383B0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for ConsistencyProofResponseError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConsistencyProofResponseError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7C && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 8) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 8) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConsistencyProofResponseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 124;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(unsigned char *)(result + 8) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_100038480(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 5;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_1000384A0(uint64_t result)
{
  *(unsigned char *)(result + 8) &= 0x1Fu;
  return result;
}

uint64_t sub_1000384B0(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(unsigned char *)(result + 8) = *(unsigned char *)(result + 8) & 1 | (32 * a2);
  }
  else
  {
    *(void *)unint64_t result = a2 - 4;
    *(unsigned char *)(result + 8) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConsistencyProofResponseError()
{
  return &type metadata for ConsistencyProofResponseError;
}

unint64_t sub_1000384EC()
{
  unint64_t result = qword_100157928;
  if (!qword_100157928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157928);
  }
  return result;
}

id sub_100038540()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 initWithData:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_100038600(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10003863C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_1000386A8()
{
  return &qword_100157938;
}

uint64_t sub_1000386B4()
{
  swift_beginAccess();
  uint64_t v0 = qword_100157938;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100038708(uint64_t a1, char *a2)
{
  qword_100157938 = a1;
  off_100157940 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100038764())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000387BC(unsigned __int8 a1)
{
  return a1 + 1;
}

BOOL sub_1000387C8(char a1, char a2)
{
  return a1 == a2;
}

void sub_1000387D8(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100038800(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100038848()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100038890()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000388BC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100038900()
{
  return Error<>._domain.getter();
}

uint64_t sub_100038930()
{
  return Error<>._code.getter();
}

uint64_t sub_100038960()
{
  return LocalizedError.errorDescription.getter();
}

uint64_t sub_100038978()
{
  return *v0 + 1;
}

uint64_t sub_100038984()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C538 = result;
  return result;
}

uint64_t sub_1000389B8()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C548 = result;
  return result;
}

uint64_t sub_1000389EC()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C558 = result;
  return result;
}

uint64_t sub_100038A20()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015C568 = result;
  return result;
}

uint64_t sub_100038A54()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162280);
  sub_1000294A8(v0, (uint64_t)qword_100162280);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100038AD8()
{
  if (qword_10015C570 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162280);
}

uint64_t sub_100038B3C@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015C570 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162280);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t MilestoneConsistency.startSlh.getter()
{
  if (qword_10015C540 != -1) {
    swift_once();
  }
  Swift::UInt v1 = (const void *)(qword_10015C548 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100038600(0, (unint64_t *)&qword_1001575C8);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

void MilestoneConsistency.startSlh.setter(void *a1)
{
}

void (*MilestoneConsistency.startSlh.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = MilestoneConsistency.startSlh.getter();
  return sub_100038D90;
}

void sub_100038D90(uint64_t a1, char a2)
{
}

uint64_t MilestoneConsistency.verifier.getter()
{
  if (qword_10015C530 != -1) {
    swift_once();
  }
  uint64_t v1 = (const void *)(qword_10015C538 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100038600(0, &qword_100157948);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

void MilestoneConsistency.verifier.setter(void *a1)
{
}

void sub_100038F00(void *a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  id v6 = (const void *)(*a3 + 16);
  swift_beginAccess();
  id v7 = a1;
  objc_setAssociatedObject(v3, v6, v7, (void *)1);
  swift_endAccess();
}

void (*MilestoneConsistency.verifier.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = MilestoneConsistency.verifier.getter();
  return sub_100038FF8;
}

void sub_100038FF8(uint64_t a1, char a2)
{
}

void sub_10003901C(uint64_t a1, char a2, uint64_t *a3, void *a4)
{
  unsigned int v5 = *(void **)a1;
  id v6 = *(void **)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v7 = *a3;
    id v8 = v6;
    if (v7 != -1) {
      swift_once();
    }
    unsigned int v9 = (void *)v5[4];
    id v10 = (const void *)(*a4 + 16);
    swift_beginAccess();
    id v11 = v8;
    objc_setAssociatedObject(v9, v10, v11, (void *)1);
    swift_endAccess();

    id v12 = (id)v5[3];
  }
  else
  {
    if (*a3 != -1) {
      swift_once();
    }
    uint64_t v13 = (void *)v5[4];
    unsigned int v14 = (const void *)(*a4 + 16);
    swift_beginAccess();
    id v12 = v6;
    objc_setAssociatedObject(v13, v14, v12, (void *)1);
    swift_endAccess();
  }

  free(v5);
}

double sub_100039158@<D0>(uint64_t a1@<X8>)
{
  if (qword_10015C550 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015C558 + 16);
  swift_beginAccess();
  id v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100033860((uint64_t)v6, (uint64_t)v7);
  if (!v8)
  {
    sub_100028C8C((uint64_t)v7, &qword_1001578E0);
    goto LABEL_10;
  }
  sub_100020378(&qword_1001578F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100039280(uint64_t a1)
{
  if (qword_10015C550 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_10015C558;
  sub_100029208(a1, (uint64_t)v12, &qword_1001578F8);
  uint64_t v4 = v13;
  if (v13)
  {
    unsigned int v5 = sub_10002BCF8(v12, v13);
    uint64_t v6 = *(void *)(v4 - 8);
    __chkstk_darwin(v5);
    uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    unsigned int v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_100028A4C((uint64_t)v12);
  }
  else
  {
    unsigned int v9 = 0;
  }
  swift_beginAccess();
  objc_setAssociatedObject(v1, (const void *)(v3 + 16), v9, (void *)1);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, &qword_1001578F8);
}

void (*sub_100039438(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_100039158((uint64_t)v3);
  return sub_100039498;
}

void sub_100039498(uint64_t *a1, char a2)
{
  id v2 = (void *)*a1;
  if (a2)
  {
    sub_100029208(*a1, (uint64_t)v2 + 40, &qword_1001578F8);
    sub_100039280((uint64_t)v2 + 40);
    sub_100028C8C((uint64_t)v2, &qword_1001578F8);
  }
  else
  {
    sub_100039280(*a1);
  }

  free(v2);
}

uint64_t MilestoneConsistency.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015C560 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015C568 + 16);
  swift_beginAccess();
  id v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100033860((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100028C8C((uint64_t)v10, &qword_1001578E0);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t MilestoneConsistency.receiptTime.setter(uint64_t a1)
{
  id v2 = v1;
  if (qword_10015C560 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10015C568;
  uint64_t v5 = sub_100020378((uint64_t *)&unk_1001580E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a1, (uint64_t)v7, (uint64_t *)&unk_1001580E0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_beginAccess();
  objc_setAssociatedObject(v2, (const void *)(v4 + 16), isa, (void *)0x303);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, (uint64_t *)&unk_1001580E0);
}

void (*MilestoneConsistency.receiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(sub_100020378((uint64_t *)&unk_1001580E0) - 8) + 64);
  a1[1] = v3;
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  MilestoneConsistency.receiptTime.getter((uint64_t)v4);
  return sub_1000398D0;
}

void sub_1000398D0(uint64_t a1, char a2)
{
  id v2 = *(void **)(a1 + 16);
  if (a2)
  {
    __chkstk_darwin(a1);
    uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100029208((uint64_t)v2, (uint64_t)v4, (uint64_t *)&unk_1001580E0);
    MilestoneConsistency.receiptTime.setter((uint64_t)v4);
    sub_100028C8C((uint64_t)v2, (uint64_t *)&unk_1001580E0);
    free(v2);
  }
  else
  {
    MilestoneConsistency.receiptTime.setter(*(void *)(a1 + 16));
    free(v2);
  }
}

id MilestoneConsistency.endSlh.getter()
{
  uint64_t v1 = MilestoneConsistency.verifier.getter();
  if (!v1) {
    return 0;
  }
  id v2 = (void *)v1;
  id v3 = [v0 milestoneSlh];
  if (!v3)
  {

    return 0;
  }
  uint64_t v4 = v3;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  id v5 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v4];
  id v6 = [v2 trustedKeyStore];
  id v7 = [v6 signatureVerifier];

  [v5 setVerifier:v7];
  return v5;
}

id sub_100039AA8()
{
  uint64_t v3 = MilestoneConsistency.verifier.getter();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = MilestoneConsistency.startSlh.getter();
    if (v5)
    {
      id v6 = (void *)v5;
      if ([v0 hasMilestoneSlh]
        && (id v7 = [v0 milestoneSlh]) != 0)
      {
        id v8 = v7;
        sub_100038600(0, (unint64_t *)&qword_1001575C8);
        id v2 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v8];
        sub_100066CFC((uint64_t)v81);
        if (v1)
        {
        }
        else
        {
          sub_100066CFC((uint64_t)v83);
          sub_100039158((uint64_t)&v74);
          id v85 = v2;
          if (*((void *)&v75 + 1))
          {
            id v72 = v8;
            sub_10003863C((uint64_t)&v74, (uint64_t)v78);
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
            uint64_t v68 = v80;
            uint64_t v69 = v79;
            uint64_t v67 = (uint8_t *)sub_10002BCF8(v78, (uint64_t)v79);
            uint64_t v13 = type metadata accessor for Date();
            uint64_t v71 = v65;
            uint64_t v14 = *(void *)(v13 - 8);
            __chkstk_darwin(v13);
            unint64_t v16 = (char *)v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v17 = sub_100020378((uint64_t *)&unk_1001580E0);
            uint64_t v73 = v65;
            __chkstk_darwin(v17 - 8);
            uint64_t v19 = (char *)v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
            MilestoneConsistency.receiptTime.getter((uint64_t)v19);
            int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v19, 1, v13);
            os_log_type_t v70 = (uint8_t *)v13;
            if (v20 == 1)
            {
              static Date.now.getter();
              sub_100028C8C((uint64_t)v19, (uint64_t *)&unk_1001580E0);
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
            }
            id v8 = v72;
            id v23 = [v6 data];
            uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v73 = v25;

            unint64_t v26 = sub_100066ED4();
            (*((void (**)(_OWORD *, char *, uint64_t, void *, unint64_t, uint8_t *))v68 + 3))(v81, v16, v24, v73, v26, v69);
            (*(void (**)(char *, uint8_t *))(v14 + 8))(v16, v70);
            sub_10002BD3C(v24, (unint64_t)v73);
            sub_100028A4C((uint64_t)v78);
            id v2 = v85;
          }
          else
          {
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
          }
          sub_100039158((uint64_t)&v74);
          if (*((void *)&v75 + 1))
          {
            sub_10003863C((uint64_t)&v74, (uint64_t)v78);
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
            id v21 = v79;
            unint64_t v22 = v80;
            sub_10002BCF8(v78, (uint64_t)v79);
            (*((void (**)(_OWORD *, uint64_t, uint8_t *, uint8_t *))v22 + 7))(v81, 1, v21, v22);
            sub_100028A4C((uint64_t)v78);
          }
          else
          {
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
          }
          sub_100039158((uint64_t)&v74);
          if (*((void *)&v75 + 1))
          {
            sub_10003863C((uint64_t)&v74, (uint64_t)v78);
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
            char v66 = v80;
            uint64_t v67 = v79;
            v65[1] = sub_10002BCF8(v78, (uint64_t)v79);
            uint64_t v27 = type metadata accessor for Date();
            uint64_t v69 = (uint8_t *)v65;
            uint64_t v71 = *(NSObject **)(v27 - 8);
            __chkstk_darwin(v27);
            uint64_t v29 = (char *)v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v30 = sub_100020378((uint64_t *)&unk_1001580E0);
            uint64_t v73 = v65;
            __chkstk_darwin(v30 - 8);
            uint64_t v32 = (char *)v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
            MilestoneConsistency.receiptTime.getter((uint64_t)v32);
            uint64_t v33 = v27;
            uint64_t v34 = v71;
            int v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v71[6].isa)(v32, 1, v33);
            uint64_t v68 = (uint8_t *)v33;
            os_log_type_t v70 = (uint8_t *)v29;
            if (v35 == 1)
            {
              static Date.now.getter();
              sub_100028C8C((uint64_t)v32, (uint64_t *)&unk_1001580E0);
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v34[4].isa)(v29, v32, v33);
            }
            id v38 = [v85 data];
            uint64_t v73 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v40 = v39;

            unint64_t v41 = sub_100066ED4();
            uint64_t v42 = v70;
            (*((void (**)(_OWORD *, uint8_t *, void *, unint64_t, unint64_t, uint8_t *))v66
             + 3))(v83, v70, v73, v40, v41, v67);
            ((void (*)(uint8_t *, uint8_t *))v34[1].isa)(v42, v68);
            sub_10002BD3C((uint64_t)v73, v40);
            sub_100028A4C((uint64_t)v78);
            id v2 = v85;
          }
          else
          {
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
          }
          sub_100039158((uint64_t)&v74);
          if (*((void *)&v75 + 1))
          {
            sub_10003863C((uint64_t)&v74, (uint64_t)v78);
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
            long long v36 = v79;
            long long v37 = v80;
            sub_10002BCF8(v78, (uint64_t)v79);
            (*((void (**)(_OWORD *, uint64_t, uint8_t *, uint8_t *))v37 + 7))(v83, 1, v36, v37);
            sub_100028A4C((uint64_t)v78);
          }
          else
          {
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
          }
          id v43 = [v4 trustedKeyStore];
          id v44 = [v43 signatureVerifier];

          [v2 setVerifier:v44];
          uint64_t v73 = v44;
          [v6 setVerifier:v44];
          id v2 = sub_10005D628();
          sub_100039158((uint64_t)&v74);
          if (*((void *)&v75 + 1))
          {
            sub_10003863C((uint64_t)&v74, (uint64_t)v78);
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
            id v45 = v79;
            uint64_t v46 = v80;
            sub_10002BCF8(v78, (uint64_t)v79);
            (*((void (**)(_OWORD *, id, uint8_t *, uint8_t *))v46 + 6))(v81, v2, v45, v46);
            sub_100028A4C((uint64_t)v78);
          }
          else
          {
            sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
          }
          if (v2 == (id)1)
          {
            if (qword_10015C570 != -1) {
              swift_once();
            }
            uint64_t v47 = type metadata accessor for Logger();
            uint64_t v48 = sub_1000294A8(v47, (uint64_t)qword_100162280);
            sub_10002BE90((uint64_t)v81);
            sub_10002BE90((uint64_t)v81);
            uint64_t v71 = v48;
            os_log_type_t v49 = Logger.logObject.getter();
            os_log_type_t v50 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v49, v50))
            {
              uint64_t v51 = (uint8_t *)swift_slowAlloc();
              uint64_t v52 = swift_slowAlloc();
              os_log_type_t v70 = (uint8_t *)v52;
              uint64_t v69 = v51;
              *(_DWORD *)uint64_t v51 = 136315138;
              uint64_t v68 = v51 + 4;
              long long v74 = v81[0];
              long long v75 = v81[1];
              long long v76 = v81[2];
              uint64_t v77 = v82;
              v78[0] = v52;
              sub_10002BF28();
              uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&long long v74 = sub_1000262AC(v53, v54, v78);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10002BE4C((uint64_t)v81);
              sub_10002BE4C((uint64_t)v81);
              _os_log_impl((void *)&_mh_execute_header, v49, v50, "Verified signature for %s", v69, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_10002BE4C((uint64_t)v81);
              sub_10002BE4C((uint64_t)v81);
            }

            id v55 = sub_10005D628();
            id v72 = v8;
            id v2 = v55;
            sub_100039158((uint64_t)&v74);
            if (*((void *)&v75 + 1))
            {
              sub_10003863C((uint64_t)&v74, (uint64_t)v78);
              sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
              os_log_type_t v56 = v79;
              os_log_type_t v57 = v80;
              sub_10002BCF8(v78, (uint64_t)v79);
              (*((void (**)(_OWORD *, id, uint8_t *, uint8_t *))v57 + 6))(v83, v2, v56, v57);
              sub_100028A4C((uint64_t)v78);
            }
            else
            {
              sub_100028C8C((uint64_t)&v74, &qword_1001578F8);
            }
            sub_10002BE90((uint64_t)v83);
            sub_10002BE90((uint64_t)v83);
            uint64_t v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.debug.getter();
            uint64_t v71 = v58;
            if (os_log_type_enabled(v58, v59))
            {
              uint64_t v60 = (uint8_t *)swift_slowAlloc();
              uint64_t v61 = swift_slowAlloc();
              *(_DWORD *)uint64_t v60 = 136315138;
              os_log_type_t v70 = v60 + 4;
              long long v74 = v83[0];
              long long v75 = v83[1];
              long long v76 = v83[2];
              uint64_t v77 = v84;
              v78[0] = v61;
              sub_10002BF28();
              uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&long long v74 = sub_1000262AC(v62, v63, v78);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10002BE4C((uint64_t)v83);
              sub_10002BE4C((uint64_t)v83);
              uint64_t v64 = v71;
              _os_log_impl((void *)&_mh_execute_header, v71, v59, "Verified signature for %s", v60, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              sub_10002BE4C((uint64_t)v83);
              sub_10002BE4C((uint64_t)v81);
            }
            else
            {

              sub_10002BE4C((uint64_t)v81);
              sub_10002BE4C((uint64_t)v83);
              sub_10002BE4C((uint64_t)v83);
              sub_10002BE4C((uint64_t)v83);
            }
          }
          else
          {

            sub_10002BE4C((uint64_t)v83);
            sub_10002BE4C((uint64_t)v81);
          }
        }
      }
      else
      {
        sub_10002BED4();
        swift_allocError();
        *id v10 = 2;
        swift_willThrow();
      }
    }
    else
    {
      sub_10002BED4();
      swift_allocError();
      *uint64_t v11 = 1;
      swift_willThrow();
    }
  }
  else
  {
    sub_10002BED4();
    swift_allocError();
    unsigned char *v9 = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_10003B164(void *a1, void *a2)
{
  return sub_10003C810(a1, a2);
}

void sub_10003B17C()
{
  uint64_t v2 = type metadata accessor for KTSWDB.SignedLogHead();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = MilestoneConsistency.verifier.getter();
  if (!v5)
  {
    sub_10002BED4();
    swift_allocError();
    unsigned char *v14 = 0;
    swift_willThrow();
    return;
  }
  id v6 = (void *)v5;
  uint64_t v7 = MilestoneConsistency.startSlh.getter();
  if (!v7)
  {
    sub_10002BED4();
    swift_allocError();
    *unint64_t v16 = 1;
    swift_willThrow();

    return;
  }
  id v8 = (void *)v7;
  if (![v0 hasMilestoneSlh]
    || (id v9 = [v0 milestoneSlh]) == 0)
  {
    sub_10002BED4();
    swift_allocError();
    unsigned char *v15 = 2;
    swift_willThrow();

    return;
  }
  id v10 = v9;
  int v135 = v0;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  id v11 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v10];
  id v12 = [v6 trustedKeyStore];
  id v13 = [v12 signatureVerifier];

  [v11 setVerifier:v13];
  [v8 setVerifier:v13];
  sub_100066CFC((uint64_t)&v126);
  if (v1)
  {

    return;
  }
  id v116 = v8;
  sub_100066CFC((uint64_t)&v130);
  id v114 = v13;
  id v115 = v11;
  id v113 = v10;
  if ((void)v128)
  {
    id v17 = v6;
    uint64_t v18 = v135;
  }
  else
  {
    sub_100039158((uint64_t)&v118);
    id v17 = v6;
    if (*((void *)&v119 + 1))
    {
      sub_10003863C((uint64_t)&v118, (uint64_t)&v122);
      sub_100028C8C((uint64_t)&v118, &qword_1001578F8);
      uint64_t v20 = v123;
      uint64_t v19 = v124;
      sub_10002BCF8(&v122, v123);
      (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v19 + 32))(&v126, 1, v20, v19);
      sub_100028A4C((uint64_t)&v122);
    }
    else
    {
      sub_100028C8C((uint64_t)&v118, &qword_1001578F8);
    }
    uint64_t v18 = v135;
    if (qword_10015C570 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_1000294A8(v21, (uint64_t)qword_100162280);
    sub_10002BE90((uint64_t)&v126);
    sub_10002BE90((uint64_t)&v126);
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      LODWORD(v111) = v24;
      id v25 = (uint8_t *)swift_slowAlloc();
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v110 = v26;
      Swift::Int v109 = v25;
      *(_DWORD *)id v25 = 136315138;
      long long v118 = v126;
      long long v119 = v127;
      long long v120 = v128;
      uint64_t v121 = v129;
      *(void *)&long long v122 = v26;
      sub_10002BF28();
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v118 = sub_1000262AC(v27, v28, (uint64_t *)&v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BE4C((uint64_t)&v126);
      sub_10002BE4C((uint64_t)&v126);
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v111, "Verified consistency for %s", v109, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10002BE4C((uint64_t)&v126);
      sub_10002BE4C((uint64_t)&v126);
    }
  }
  sub_100039158((uint64_t)&v118);
  uint64_t v29 = *((void *)&v119 + 1);
  if (*((void *)&v119 + 1))
  {
    sub_10003863C((uint64_t)&v118, (uint64_t)&v122);
    sub_100028C8C((uint64_t)&v118, &qword_1001578F8);
    uint64_t v30 = v123;
    uint64_t v31 = v124;
    sub_10002BCF8(&v122, v123);
    (*(void (**)(long long *, uint64_t, uint64_t))(v31 + 64))(&v126, v30, v31);
    uint64_t v111 = *v4;
    sub_10002BFE0((uint64_t)v4);
    sub_100028A4C((uint64_t)&v122);
  }
  else
  {
    sub_100028C8C((uint64_t)&v118, &qword_1001578F8);
    uint64_t v111 = 0;
  }
  id v32 = v115;
  id v33 = v116;
  id v34 = [v18 proofHashesArray];
  if (v34)
  {
    int v35 = v34;
    *(void *)&long long v118 = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    if ((void)v118)
    {
      if (*(void *)(v118 + 16))
      {
        id v37 = sub_10005D674(v118, (uint64_t)v33, (uint64_t)v32);
        swift_bridgeObjectRelease();
        id v38 = v114;
        goto LABEL_30;
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v36 = sub_10003C810(v33, v32);
  id v38 = v114;
  id v37 = (id)v36;
LABEL_30:
  if (v37 == (id)1)
  {
    unint64_t v39 = v38;
    if (v29)
    {
      switch(v111)
      {
        case 0:
        case 3:
          if (qword_10015C570 != -1) {
            swift_once();
          }
          uint64_t v40 = type metadata accessor for Logger();
          sub_1000294A8(v40, (uint64_t)qword_100162280);
          sub_10002BE90((uint64_t)&v130);
          sub_10002BE90((uint64_t)&v130);
          unint64_t v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v41, v42))
          {
            uint64_t v43 = swift_slowAlloc();
            id v112 = v17;
            id v44 = (uint8_t *)v43;
            uint64_t v45 = swift_slowAlloc();
            uint64_t v111 = v45;
            *(_DWORD *)id v44 = 136315138;
            long long v118 = v130;
            long long v119 = v131;
            long long v120 = v132;
            uint64_t v121 = v133;
            *(void *)&long long v122 = v45;
            sub_10002BF28();
            uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)&long long v118 = sub_1000262AC(v46, v47, (uint64_t *)&v122);
            unint64_t v39 = v114;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10002BE4C((uint64_t)&v130);
            sub_10002BE4C((uint64_t)&v130);
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "Verified consistency for %s following split", v44, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v17 = v112;
            swift_slowDealloc();
          }
          else
          {
            sub_10002BE4C((uint64_t)&v130);
            sub_10002BE4C((uint64_t)&v130);
          }

          id v79 = v113;
          unint64_t v80 = &selRef_sortedArrayUsingSelector_;
          sub_100039158((uint64_t)&v118);
          if (*((void *)&v119 + 1)) {
            goto LABEL_75;
          }
          sub_100028C8C((uint64_t)&v118, &qword_1001578F8);
          break;
        case 1:
          if (qword_10015C570 != -1) {
            swift_once();
          }
          uint64_t v81 = type metadata accessor for Logger();
          sub_1000294A8(v81, (uint64_t)qword_100162280);
          sub_10002BE90((uint64_t)&v130);
          sub_10002BE90((uint64_t)&v130);
          uint64_t v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v82, v83))
          {
            uint64_t v84 = (uint8_t *)swift_slowAlloc();
            uint64_t v85 = swift_slowAlloc();
            uint64_t v111 = v85;
            uint64_t v110 = v84;
            *(_DWORD *)uint64_t v84 = 136315138;
            long long v118 = v130;
            long long v119 = v131;
            long long v120 = v132;
            uint64_t v121 = v133;
            *(void *)&long long v122 = v85;
            sub_10002BF28();
            uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)&long long v118 = sub_1000262AC(v86, v87, (uint64_t *)&v122);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10002BE4C((uint64_t)&v130);
            sub_10002BE4C((uint64_t)&v130);
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "Verified consistency for %s", v110, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_10002BE4C((uint64_t)&v130);
            sub_10002BE4C((uint64_t)&v130);
          }

          sub_100039158((uint64_t)&v118);
          unint64_t v80 = &selRef_sortedArrayUsingSelector_;
          if (*((void *)&v119 + 1))
          {
LABEL_75:
            sub_10003863C((uint64_t)&v118, (uint64_t)&v122);
            sub_100028C8C((uint64_t)&v118, &qword_1001578F8);
            uint64_t v96 = v123;
            uint64_t v97 = v124;
            sub_10002BCF8(&v122, v123);
            (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v97 + 32))(&v130, 1, v96, v97);
            sub_100028A4C((uint64_t)&v122);
          }
          else
          {
            sub_100028C8C((uint64_t)&v118, &qword_1001578F8);
          }
          id v79 = v113;
          unint64_t v39 = v114;
          break;
        case 2:
          if (qword_10015C570 != -1) {
            swift_once();
          }
          uint64_t v88 = type metadata accessor for Logger();
          sub_1000294A8(v88, (uint64_t)qword_100162280);
          sub_10002BE90((uint64_t)&v126);
          sub_10002BE90((uint64_t)&v126);
          long long v89 = Logger.logObject.getter();
          os_log_type_t v90 = static os_log_type_t.info.getter();
          BOOL v91 = os_log_type_enabled(v89, v90);
          id v112 = v17;
          if (v91)
          {
            uint64_t v92 = (uint8_t *)swift_slowAlloc();
            uint64_t v93 = swift_slowAlloc();
            uint64_t v111 = v93;
            *(_DWORD *)uint64_t v92 = 136315138;
            long long v118 = v126;
            long long v119 = v127;
            long long v120 = v128;
            uint64_t v121 = v129;
            *(void *)&long long v122 = v93;
            sub_10002BF28();
            uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)&long long v118 = sub_1000262AC(v94, v95, (uint64_t *)&v122);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10002BE4C((uint64_t)&v126);
            sub_10002BE4C((uint64_t)&v126);
            _os_log_impl((void *)&_mh_execute_header, v89, v90, "Consistency for start %s still pending due to disjoint proof", v92, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_10002BE4C((uint64_t)&v126);
            sub_10002BE4C((uint64_t)&v126);
          }

          sub_10002BE90((uint64_t)&v130);
          sub_10002BE90((uint64_t)&v130);
          long long v98 = Logger.logObject.getter();
          os_log_type_t v99 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v98, v99))
          {
            long long v100 = (uint8_t *)swift_slowAlloc();
            uint64_t v101 = swift_slowAlloc();
            *(_DWORD *)long long v100 = 136315138;
            long long v118 = v130;
            long long v119 = v131;
            long long v120 = v132;
            uint64_t v121 = v133;
            *(void *)&long long v122 = v101;
            sub_10002BF28();
            uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)&long long v118 = sub_1000262AC(v102, v103, (uint64_t *)&v122);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10002BE4C((uint64_t)&v130);
            sub_10002BE4C((uint64_t)&v130);
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "Consistency for end %s still pending due to disjoint proof", v100, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_10002BE4C((uint64_t)&v130);
            sub_10002BE4C((uint64_t)&v130);
          }

          sub_10002BED4();
          uint64_t v48 = swift_allocError();
          *uint64_t v104 = 6;
          swift_willThrow();
          os_log_type_t v50 = v114;
          id v32 = v115;
          goto LABEL_38;
        default:
          goto LABEL_57;
      }
    }
    else
    {
LABEL_57:
      if (qword_10015C570 != -1) {
        swift_once();
      }
      uint64_t v75 = type metadata accessor for Logger();
      sub_1000294A8(v75, (uint64_t)qword_100162280);
      long long v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unknown startSlh consistency verification state", v78, 2u);
        swift_slowDealloc();
      }

      id v79 = v113;
      unint64_t v80 = &selRef_sortedArrayUsingSelector_;
    }
    sub_100039158((uint64_t)&v122);
    if (v123)
    {
      sub_10003CD24(&v122, (uint64_t)&v118);
      id v105 = [v17 v80[44]];
      id v106 = [v105 signatureVerifier];

      id v107 = v115;
      sub_1000298DC(&v118, (uint64_t)v115, (uint64_t)v106);
      sub_100028A4C((uint64_t)&v118);

      sub_10002BE4C((uint64_t)&v130);
LABEL_85:
      sub_10002BE4C((uint64_t)&v126);
      return;
    }

    sub_10002BE4C((uint64_t)&v130);
    sub_10002BE4C((uint64_t)&v126);
    sub_100028C8C((uint64_t)&v122, &qword_1001578F8);
  }
  else
  {
    id v112 = v17;
    sub_10002BED4();
    uint64_t v48 = swift_allocError();
    *os_log_type_t v49 = 7;
    swift_willThrow();
    os_log_type_t v50 = v38;
LABEL_38:
    *(void *)&long long v122 = v48;
    swift_errorRetain();
    sub_100020378(&qword_1001570C0);
    if (!swift_dynamicCast() || v125 != 6)
    {
      uint64_t v111 = 0;
      swift_errorRelease();
      if (qword_10015C570 != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      sub_1000294A8(v60, (uint64_t)qword_100162280);
      sub_10002BE90((uint64_t)&v130);
      sub_10002BE90((uint64_t)&v130);
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        unint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        *(_DWORD *)unint64_t v63 = 136446210;
        long long v118 = v130;
        long long v119 = v131;
        long long v120 = v132;
        uint64_t v121 = v133;
        *(void *)&long long v122 = v64;
        sub_10002BF28();
        uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v118 = sub_1000262AC(v65, v66, (uint64_t *)&v122);
        os_log_type_t v50 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10002BE4C((uint64_t)&v130);
        sub_10002BE4C((uint64_t)&v130);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed to verify consistency for %{public}s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10002BE4C((uint64_t)&v130);
        sub_10002BE4C((uint64_t)&v130);
      }

      id v67 = v113;
      sub_100039158((uint64_t)&v118);
      if (*((void *)&v119 + 1))
      {
        sub_10003863C((uint64_t)&v118, (uint64_t)&v122);
        sub_100028C8C((uint64_t)&v118, &qword_1001578F8);
        uint64_t v69 = v123;
        uint64_t v68 = v124;
        sub_10002BCF8(&v122, v123);
        id v70 = v115;
        uint64_t v71 = v111;
        sub_100066CFC((uint64_t)v134);
        if (v71)
        {

          sub_10002BE4C((uint64_t)&v130);
          swift_errorRelease();
          sub_10002BE4C((uint64_t)&v126);
          sub_100028A4C((uint64_t)&v122);
          return;
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v68 + 32))(v134, 0, v69, v68);
        id v72 = v112;
        sub_10002BE4C((uint64_t)v134);
        sub_100028A4C((uint64_t)&v122);
      }
      else
      {
        sub_100028C8C((uint64_t)&v118, &qword_1001578F8);
        id v72 = v112;
      }
      swift_willThrow();

      sub_10002BE4C((uint64_t)&v130);
      goto LABEL_85;
    }
    id v51 = v32;
    swift_errorRelease();
    if (qword_10015C570 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_1000294A8(v52, (uint64_t)qword_100162280);
    sub_10002BE90((uint64_t)&v130);
    sub_10002BE90((uint64_t)&v130);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    BOOL v55 = os_log_type_enabled(v53, v54);
    id v56 = v112;
    if (v55)
    {
      os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
      uint64_t v117 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v57 = 136315138;
      long long v118 = v130;
      long long v119 = v131;
      long long v120 = v132;
      uint64_t v121 = v133;
      sub_10002BF28();
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v118 = sub_1000262AC(v58, v59, &v117);
      os_log_type_t v50 = v114;
      id v51 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BE4C((uint64_t)&v130);
      sub_10002BE4C((uint64_t)&v130);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Consistency for %s still pending due to disjoint proof", v57, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10002BE4C((uint64_t)&v130);
      sub_10002BE4C((uint64_t)&v130);
    }

    id v73 = v113;
    sub_10002BED4();
    swift_allocError();
    *long long v74 = 6;
    swift_willThrow();

    sub_10002BE4C((uint64_t)&v130);
    sub_10002BE4C((uint64_t)&v126);
    swift_errorRelease();
  }
}

id MilestoneConsistency.verify()()
{
  if ([v0 hasMilestoneSlh])
  {
    id v4 = sub_100039AA8();
    if (!v1)
    {
      id v2 = v4;
      if (v4 == (id)1) {
        sub_10003B17C();
      }
    }
  }
  else
  {
    sub_10002BED4();
    swift_allocError();
    *uint64_t v5 = 2;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_10003C810(void *a1, void *a2)
{
  id v3 = [a1 parsedLogHead];
  if (v3)
  {
    id v4 = v3;
    id v5 = [a2 parsedLogHead];
    if (v5)
    {
      id v6 = v5;
      id v7 = [v4 treeId];
      if (v7 != [v6 treeId]) {
        goto LABEL_21;
      }
      unsigned int v8 = [v4 application];
      if (v8 != [v6 application]) {
        goto LABEL_21;
      }
      unsigned int v9 = [v4 logType];
      if (v9 != [v6 logType]) {
        goto LABEL_21;
      }
      id v10 = [v4 logSize];
      if (v10 != [v6 logSize]) {
        goto LABEL_20;
      }
      id v11 = [v4 logHeadHash];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;
      }
      else
      {
        uint64_t v13 = 0;
        unint64_t v15 = 0xF000000000000000;
      }
      id v17 = [v6 logHeadHash];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v21 = v20;

        if (v15 >> 60 == 15)
        {
          if (v21 >> 60 == 15) {
            goto LABEL_22;
          }
        }
        else if (v21 >> 60 != 15)
        {
          sub_10002BD94(v13, v15);
          char v24 = sub_10002C1CC(v13, v15, v19, v21);
          sub_100030D78(v19, v21);
          sub_100030D78(v13, v15);
          sub_100030D78(v13, v15);
          if (v24) {
            goto LABEL_22;
          }
LABEL_20:
          if ([v4 logSize])
          {
LABEL_21:
            sub_10002BED4();
            swift_allocError();
            *unint64_t v22 = 3;
            swift_willThrow();
          }
LABEL_22:

          return 1;
        }
      }
      else
      {
        if (v15 >> 60 == 15) {
          goto LABEL_22;
        }
        uint64_t v19 = 0;
        unint64_t v21 = 0xF000000000000000;
      }
      sub_100030D78(v13, v15);
      sub_100030D78(v19, v21);
      goto LABEL_20;
    }
  }
  sub_10002BED4();
  swift_allocError();
  *unint64_t v16 = 5;
  swift_willThrow();
  return 1;
}

unint64_t sub_10003CAC8()
{
  unint64_t result = qword_100157950;
  if (!qword_100157950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157950);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for ContinuationStore.ContinuationState(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MilestoneConsistencyError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MilestoneConsistencyError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003CC88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_10003CCB0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10003CCB8(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MilestoneConsistencyError()
{
  return &type metadata for MilestoneConsistencyError;
}

unint64_t sub_10003CCD0()
{
  unint64_t result = qword_100157958;
  if (!qword_100157958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100157958);
  }
  return result;
}

uint64_t sub_10003CD24(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10003CD3C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162298);
  sub_1000294A8(v0, (uint64_t)qword_100162298);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10003CDC0()
{
  if (qword_10015C800 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162298);
}

uint64_t sub_10003CE24@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015C800 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162298);
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_10003CECC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + 16, a1);
}

uint64_t sub_10003CEEC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + 56, a1);
}

uint64_t sub_10003CF0C(long long *a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  sub_10003CD24(a1, v4 + 16);
  sub_10003CD24(a2, v4 + 56);
  return v4;
}

uint64_t sub_10003CF68(long long *a1, long long *a2)
{
  sub_10003CD24(a1, v2 + 16);
  sub_10003CD24(a2, v2 + 56);
  return v2;
}

uint64_t sub_10003CFA0(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_10003CFC0, 0, 0);
}

uint64_t sub_10003CFC0()
{
  uint64_t v1 = type metadata accessor for URL();
  v0[5] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = v2;
  v0[6] = v2;
  v0[7] = *(void *)(v2 + 64);
  uint64_t v4 = swift_task_alloc();
  v0[8] = v4;
  sub_100020378(&qword_100157A70);
  uint64_t v5 = swift_task_alloc();
  URLRequest.url.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v1) == 1)
  {
    sub_100028C8C(v5, &qword_100157A70);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10003DA4C();
    swift_allocError();
    *(void *)uint64_t v6 = 1;
    *(unsigned char *)(v6 + 8) = 1;
    swift_willThrow();
    BOOL v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    unsigned int v9 = (void *)v0[4];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v5, v1);
    swift_task_dealloc();
    uint64_t v10 = v9[10];
    uint64_t v11 = v9[11];
    sub_10002BCF8(v9 + 7, v10);
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 24) + **(int **)(v11 + 24));
    id v12 = (void *)swift_task_alloc();
    v0[9] = v12;
    void *v12 = v0;
    v12[1] = sub_10003D260;
    return v13(v4, v10, v11);
  }
}

uint64_t sub_10003D260()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10003D35C, 0, 0);
}

uint64_t sub_10003D35C()
{
  unint64_t v20 = v0;
  if (qword_10015C800 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000294A8(v4, (uint64_t)qword_100162298);
  uint64_t v5 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[6];
  if (v8)
  {
    uint64_t v18 = v0[5];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v11 = URL.description.getter();
    v0[2] = sub_1000262AC(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v13(v5, v18);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetching config bag from %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v13(v5, v0[5]);
  }

  v0[10] = v13;
  swift_task_dealloc();
  uint64_t v14 = SWTURLSession.shared.unsafeMutableAddressor();
  uint64_t v15 = *v14;
  v0[11] = *v14;
  unint64_t v16 = (*(void *)v15 + 96) & 0xFFFFFFFFFFFFLL | 0xE282000000000000;
  v0[12] = *(void *)(*(void *)v15 + 96);
  v0[13] = v16;
  swift_retain();
  return _swift_task_switch(sub_10003D5C8, v15, 0);
}

uint64_t sub_10003D5C8()
{
  *(void *)(v0 + 112) = (*(uint64_t (**)(void))(v0 + 96))();
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003D684;
  uint64_t v2 = *(void *)(v0 + 24);
  return NSURLSession.data(for:delegate:)(v2, 0);
}

uint64_t sub_10003D684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[16] = a1;
  v6[17] = a2;
  v6[18] = a3;
  v6[19] = v3;
  swift_task_dealloc();

  if (v3) {
    os_log_type_t v7 = sub_10003D9C8;
  }
  else {
    os_log_type_t v7 = sub_10003D7C4;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10003D7C4()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  uint64_t v2 = *(void **)(v0 + 144);
  if (v1)
  {
    uint64_t v3 = (void *)v1;
    id v4 = v2;
    id v5 = [v3 statusCode];
    uint64_t v2 = *(void **)(v0 + 144);
    if (v5 == (id)200)
    {
      (*(void (**)(void, void))(v0 + 80))(*(void *)(v0 + 64), *(void *)(v0 + 40));

      swift_task_dealloc();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      uint64_t v7 = *(void *)(v0 + 128);
      uint64_t v8 = *(void *)(v0 + 136);
      return v6(v7, v8);
    }
    uint64_t v11 = *(void *)(v0 + 128);
    unint64_t v10 = *(void *)(v0 + 136);
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 40);
    id v16 = [v3 statusCode];
    sub_10003DA4C();
    swift_allocError();
    *(void *)uint64_t v17 = v16;
    *(unsigned char *)(v17 + 8) = 0;
    swift_willThrow();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 128);
    unint64_t v10 = *(void *)(v0 + 136);
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 40);
    sub_10003DA4C();
    swift_allocError();
    *(void *)uint64_t v15 = 0;
    *(unsigned char *)(v15 + 8) = 1;
    swift_willThrow();
  }
  sub_10002BD3C(v11, v10);

  v12(v13, v14);
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_10003D9C8()
{
  (*(void (**)(void, void))(v0 + 80))(*(void *)(v0 + 64), *(void *)(v0 + 40));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_10003DA4C()
{
  unint64_t result = qword_100157968;
  if (!qword_100157968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100157968);
  }
  return result;
}

uint64_t sub_10003DC20(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = type metadata accessor for URLRequest();
  v3[4] = v5;
  v3[5] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[6] = v6;
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v3[7] = v7;
  void *v7 = v3;
  v7[1] = sub_10003DD60;
  v7[3] = v6;
  _OWORD v7[4] = a3;
  return _swift_task_switch(sub_10003CFC0, 0, 0);
}

uint64_t sub_10003DD60(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v8 = (void *)*v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v9 = (void *)*v3;
  swift_task_dealloc();
  (*(void (**)(void, void))(v7[5] + 8))(v7[6], v7[4]);
  swift_release();
  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    unint64_t v12 = (void *)v10;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10002BD3C(a1, a2);
    uint64_t v10 = 0;
    unint64_t v12 = isa;
  }
  uint64_t v13 = (void (**)(void, void, void))v8[3];
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v9[1];
  return v14();
}

uint64_t sub_10003DF54(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10015C800 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1000294A8(v7, (uint64_t)qword_100162298);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    *(double *)&v14[1] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "triggerConfigBagFetch(delayInSeconds: %f)", v10, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  unint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  void v12[3] = 0;
  v12[4] = v2;
  swift_retain();
  sub_100020834((uint64_t)v6, (uint64_t)&unk_100157978, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_10003E148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10003E168, 0, 0);
}

uint64_t sub_10003E168()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  sub_10002BCF8(v1 + 2, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10003E26C;
  return v6(v2, v3);
}

uint64_t sub_10003E26C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_10003E3AC(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a1) {
      return 0xD000000000000014;
    }
    else {
      return 0xD000000000000010;
    }
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    return 0xD00000000000001ELL;
  }
}

unint64_t sub_10003E484()
{
  return sub_10003E3AC(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_10003E498()
{
  sub_100028A4C(v0 + 16);
  sub_100028A4C(v0 + 56);
  return v0;
}

uint64_t sub_10003E4C0()
{
  sub_100028A4C(v0 + 16);
  sub_100028A4C(v0 + 56);

  return _swift_deallocClassInstance(v0, 96, 7);
}

uint64_t sub_10003E500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100029274;
  return v6();
}

uint64_t sub_10003E5CC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100029274;
  return v7();
}

uint64_t sub_10003E698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100028C8C(a1, &qword_100157030);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10003E844(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10003EEA4;
  return v6(a1);
}

uint64_t sub_10003E920()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003E960()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100029274;
  v3[2] = v2;
  return _swift_task_switch(sub_10003E168, 0, 0);
}

uint64_t type metadata accessor for SWTConfigBagFetcher()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for SWTConfigBagFetcher.SWTConfigBagFetcher(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SWTConfigBagFetcher.SWTConfigBagFetcher(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SWTConfigBagFetcher.SWTConfigBagFetcher(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_10003EA94(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10003EAB0(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTConfigBagFetcher.SWTConfigBagFetcher()
{
  return &type metadata for SWTConfigBagFetcher.SWTConfigBagFetcher;
}

uint64_t sub_10003EAE0()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003EB28()
{
  uint64_t v2 = v0[2];
  char v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100021024;
  uint64_t v6 = (uint64_t (*)(int, void *, uint64_t))((char *)&dword_100157A28 + dword_100157A28);
  return v6(v2, v3, v4);
}

uint64_t sub_10003EBE0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100029274;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100157A38 + dword_100157A38);
  return v6(v2, v3, v4);
}

uint64_t sub_10003ECA4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003ECE4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100029274;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100157A48 + dword_100157A48);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10003EDB0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003EDE8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100029274;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100157A58 + dword_100157A58);
  return v6(a1, v4);
}

uint64_t sub_10003EEA8()
{
  return *v0;
}

uint64_t sub_10003EEB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SWTDeps(0) + 20);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for SWTDeps(uint64_t a1)
{
  return sub_100028514(a1, (uint64_t *)&unk_10015CB20);
}

uint64_t sub_10003EF48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SWTDeps(0) + 24);

  return sub_10003EF8C(v3, a1);
}

uint64_t sub_10003EF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157A70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003EFF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SWTDeps(0);
  return sub_10003863C(v1 + *(int *)(v3 + 28), a1);
}

uint64_t sub_10003F02C(long long *a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SWTDeps(0) + 28);
  sub_100028A4C(v3);

  return sub_10003CD24(a1, v3);
}

uint64_t (*sub_10003F07C())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10003F0C4()
{
  type metadata accessor for SWTDeps(0);

  return swift_unknownObjectRetain();
}

uint64_t sub_10003F0F8()
{
  type metadata accessor for SWTDeps(0);

  return swift_unknownObjectRetain();
}

uint64_t sub_10003F12C()
{
  type metadata accessor for SWTDeps(0);

  return swift_retain();
}

id sub_10003F160()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for SWTDeps(0) + 44));

  return v1;
}

uint64_t sub_10003F194()
{
  type metadata accessor for SWTDeps(0);

  return swift_retain();
}

uint64_t sub_10003F1C8(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SWTDeps(0) + 48);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*sub_10003F208())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10003F250()
{
  type metadata accessor for SWTDeps(0);

  return swift_retain();
}

uint64_t sub_10003F284(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SWTDeps(0) + 52);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*sub_10003F2C4())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

id sub_10003F30C()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for SWTDeps(0) + 56));

  return v1;
}

void sub_10003F340(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SWTDeps(0) + 56);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*sub_10003F380())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10003F3C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SWTDeps(0);
  return sub_10003863C(v1 + *(int *)(v3 + 60), a1);
}

uint64_t sub_10003F400(long long *a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SWTDeps(0) + 60);
  sub_100028A4C(v3);

  return sub_10003CD24(a1, v3);
}

uint64_t (*sub_10003F450())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10003F498@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SWTDeps(0);
  return sub_10003863C(v1 + *(int *)(v3 + 64), a1);
}

uint64_t sub_10003F4D0(long long *a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SWTDeps(0) + 64);
  sub_100028A4C(v3);

  return sub_10003CD24(a1, v3);
}

uint64_t (*sub_10003F520())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10003F568()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_1001622B0);
  sub_1000294A8(v0, (uint64_t)qword_1001622B0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10003F5E0()
{
  if (qword_10015C910 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_1001622B0);
}

uint64_t sub_10003F644@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015C910 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_1001622B0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

unint64_t sub_10003F6EC()
{
  sub_100020378(&qword_100157A78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010B110;
  *(void *)(inited + 32) = 0xD000000000000018;
  *(void *)(inited + 40) = 0x8000000100110880;
  uint64_t v1 = sub_100038600(0, &qword_100157A80);
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = 0xD000000000000013;
  *(void *)(inited + 64) = 0x80000001001108A0;
  *(void *)(inited + 72) = v1;
  *(void *)(inited + 80) = 0xD000000000000019;
  *(void *)(inited + 88) = 0x80000001001108C0;
  *(void *)(inited + 96) = v1;
  *(void *)(inited + 104) = 0xD000000000000011;
  *(void *)(inited + 112) = 0x80000001001108E0;
  uint64_t v2 = sub_100038600(0, &qword_100157A88);
  *(void *)(inited + 120) = v2;
  *(void *)(inited + 128) = 0xD00000000000001CLL;
  *(void *)(inited + 136) = 0x8000000100110900;
  *(void *)(inited + 144) = v2;
  return sub_10003F7F4(inited);
}

unint64_t sub_10003F7F4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100020378(&qword_100158128);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100049298(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003F908()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t sub_10003F948(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 528) = a3;
  *(void *)(v3 + 416) = a1;
  *(void *)(v3 + 424) = a2;
  return _swift_task_switch(sub_10003F96C, 0, 0);
}

uint64_t sub_10003F96C()
{
  uint64_t v59 = v0;
  BOOL v55 = (long long *)(v0 + 232);
  int v1 = *(unsigned __int8 *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v3 = (int *)type metadata accessor for SWTDeps(0);
  *(void *)(v0 + 432) = v3;
  uint64_t v4 = v3[17];
  sub_100020378(&qword_100157A78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010B110;
  *(void *)(inited + 32) = 0xD000000000000018;
  *(void *)(inited + 40) = 0x8000000100110880;
  uint64_t v6 = sub_100038600(0, &qword_100157A80);
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = 0xD000000000000013;
  *(void *)(inited + 64) = 0x80000001001108A0;
  *(void *)(inited + 72) = v6;
  *(void *)(inited + 80) = 0xD000000000000019;
  *(void *)(inited + 88) = 0x80000001001108C0;
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = 0xD000000000000011;
  *(void *)(inited + 112) = 0x80000001001108E0;
  uint64_t v7 = sub_100038600(0, &qword_100157A88);
  *(void *)(inited + 120) = v7;
  *(void *)(inited + 128) = 0xD00000000000001CLL;
  *(void *)(inited + 136) = 0x8000000100110900;
  *(void *)(inited + 144) = v7;
  unint64_t v8 = sub_10003F7F4(inited);
  *(void *)(v0 + 440) = v8;
  *(void *)(v2 + v4) = v8;
  uint64_t v9 = v3[5];
  *(_DWORD *)(v0 + 520) = v9;
  uint64_t v10 = v2 + v9;
  swift_bridgeObjectRetain();
  URL.init(fileURLWithPath:)();
  sub_100020378(&qword_100157A70);
  uint64_t v11 = swift_task_alloc();
  uint64_t v54 = v10;
  if (v1 == 1)
  {
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  else
  {
    *(void *)(v0 + 392) = 0x696C71732E747773;
    *(void *)(v0 + 400) = 0xEA00000000006574;
    uint64_t v13 = type metadata accessor for URL.DirectoryHint();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = swift_task_alloc();
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v15, enum case for URL.DirectoryHint.inferFromPath(_:), v13);
    sub_100040758();
    URL.appending<A>(path:directoryHint:)();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v13);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 0, 1, v16);
  }
  uint64_t v18 = *(void *)(v0 + 416);
  uint64_t v17 = *(void *)(v0 + 424);
  uint64_t v19 = v18 + v3[6];
  sub_10002867C(v11, v19);
  swift_task_dealloc();
  uint64_t v20 = type metadata accessor for ReachabilityTracker(0);
  *(void *)(v0 + 448) = v20;
  uint64_t v21 = sub_100022EF0();
  uint64_t v23 = sub_100022F64(v21, v22);
  *(void *)(v0 + 456) = v23;
  char v24 = (uint64_t *)(v18 + v3[7]);
  v24[3] = v20;
  v24[4] = (uint64_t)&off_1001374A0;
  uint64_t v53 = (uint64_t)v24;
  uint64_t *v24 = v23;
  type metadata accessor for SWTConfigBagFetcher();
  sub_10003863C(v17, (uint64_t)v55);
  uint64_t v57 = v20;
  uint64_t v58 = &off_1001374A0;
  *(void *)&long long v56 = v23;
  swift_retain_n();
  *(void *)(v18 + v3[8]) = sub_10003CF0C(v55, &v56);
  id v25 = [objc_allocWithZone((Class)TransparencySettings) init];
  id v26 = [objc_allocWithZone((Class)SWTSettings) initWithTransparencySettings:v25];
  *(void *)(v0 + 464) = v26;

  *(void *)(v18 + v3[9]) = v26;
  *(void *)(v0 + 472) = type metadata accessor for SWTFollowUp();
  id v27 = v26;
  uint64_t v28 = sub_100080400();
  *(void *)(v0 + 480) = v28;
  uint64_t v52 = v3;
  *(void *)(v18 + v3[10]) = v28;
  type metadata accessor for KTSwiftDB();
  uint64_t v29 = swift_task_alloc();
  uint64_t v30 = v19;
  sub_10003EF8C(v19, v29);
  swift_retain();
  uint64_t v31 = KTSwiftDB.__allocating_init(url:)(v29);
  *(void *)(v0 + 488) = v31;
  swift_task_dealloc();
  if (v31)
  {
    *(void *)(v0 + 496) = type metadata accessor for KTSWDB();
    uint64_t v32 = swift_retain();
    uint64_t v33 = KTSWDB.__allocating_init(db:)(v32);
    *(void *)(v0 + 504) = v33;
    uint64_t v39 = v0 + 16;
    uint64_t v40 = v0 + 272;
    uint64_t v42 = *(void *)(v0 + 416);
    uint64_t v41 = *(void *)(v0 + 424);
    *(void *)(v42 + v52[13]) = v33;
    uint64_t v43 = self;
    swift_retain();
    id v44 = [v43 logger];
    *(void *)(v0 + 512) = v44;
    *(void *)(v42 + v52[14]) = v44;
    uint64_t v45 = type metadata accessor for SWTCloudTelemetry();
    uint64_t v46 = swift_allocObject();
    unint64_t v47 = (uint64_t *)(v42 + v52[15]);
    v47[3] = v45;
    v47[4] = (uint64_t)&off_100137FA8;
    *unint64_t v47 = v46;
    uint64_t v48 = v52[16];
    *(_DWORD *)(v0 + 524) = v48;
    sub_10003863C(v41, v42 + v48);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 408;
    *(void *)(v0 + 24) = sub_100040154;
    uint64_t v49 = swift_continuation_init();
    *(void *)(v0 + 272) = _NSConcreteStackBlock;
    *(void *)(v0 + 280) = 0x40000000;
    *(void *)(v0 + 288) = sub_1000407E0;
    *(void *)(v0 + 296) = &unk_100137E18;
    *(void *)(v0 + 304) = v49;
    id v50 = v27;
    id v51 = v44;
    [v50 initializeATEnvironmentWithCompletion:v40];
    return _swift_continuation_await(v39);
  }
  else
  {
    uint64_t v34 = *(void *)(v0 + 424);

    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for SWTStateMachineError(0);
    sub_1000471B8(&qword_100157AA0, (void (*)(uint64_t))type metadata accessor for SWTStateMachineError);
    swift_allocError();
    sub_10003EF8C(v30, v35);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    sub_100028A4C(v34);
    uint64_t v36 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v54, v36);
    sub_100028C8C(v30, &qword_100157A70);
    sub_100028A4C(v53);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    id v37 = *(uint64_t (**)(void))(v0 + 8);
    return v37();
  }
}

uint64_t sub_100040154()
{
  return _swift_task_switch(sub_100040234, 0, 0);
}

uint64_t sub_100040234()
{
  uint64_t v47 = v0;
  unint64_t v1 = *(void *)(v0 + 408);

  if (v1 > 9) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  if (((1 << v1) & 0x25E) == 0)
  {
    if (((1 << v1) & 0x1A0) != 0)
    {
      if (qword_10015C910 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_1000294A8(v6, (uint64_t)qword_1001622B0);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      int v38 = 5;
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_13;
      }
      uint64_t v5 = "Using PrivateCloudCompute Primary";
      goto LABEL_12;
    }
    return _assertionFailure(_:_:file:line:flags:)();
  }
  if (qword_10015C910 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000294A8(v2, (uint64_t)qword_1001622B0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  int v38 = 6;
  if (!os_log_type_enabled(v3, v4)) {
    goto LABEL_13;
  }
  uint64_t v5 = "Using PrivateCloudCompute Internal";
LABEL_12:
  uint64_t v7 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v7 = 0;
  _os_log_impl((void *)&_mh_execute_header, v3, v4, v5, v7, 2u);
  swift_slowDealloc();
LABEL_13:
  uint64_t v8 = *(int *)(v0 + 524);
  uint64_t v37 = *(void *)(v0 + 512);
  uint64_t v36 = *(void *)(v0 + 480);
  uint64_t v9 = *(void **)(v0 + 464);
  uint64_t v34 = *(void *)(v0 + 504);
  uint64_t v35 = *(void *)(v0 + 472);
  uint64_t v39 = *(void *)(v0 + 456);
  uint64_t v10 = *(int *)(v0 + 520);
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v11 = *(void *)(v0 + 432);
  uint64_t v32 = *(void *)(v0 + 496);
  uint64_t v31 = *(void *)(v0 + 448);
  uint64_t v13 = *(int **)(v0 + 416);

  uint64_t v33 = (uint64_t)v13 + v8;
  uint64_t v30 = (char *)v13 + v10;
  id v14 = [v9 transparencySettings];
  id v15 = objc_allocWithZone((Class)TransparencyConfigBag);
  id v16 = v9;
  sub_100020378(&qword_100157AA8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v18);
  uint64_t v20 = v19;
  id v21 = [v15 initWithRequiredKeys:isa settings:v14 directory:v19 configApp:2 swtSettings:v16];

  swift_unknownObjectRelease();
  *(void *)((char *)v13 + *(int *)(v11 + 44)) = v21;
  uint64_t v22 = type metadata accessor for SWTKeyBagFetcher();
  sub_10003863C(v12, v0 + 312);
  uint64_t v45 = v31;
  uint64_t v46 = &off_1001374A0;
  *(void *)&long long v44 = v39;
  swift_retain();
  uint64_t v23 = sub_1000B1F90((uint64_t)v21, (long long *)(v0 + 312), &v44);
  int *v13 = v38;
  type metadata accessor for SWTPublicKeyBag();
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = swift_task_alloc();
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v26, v30, v24);
  uint64_t v41 = v32;
  uint64_t v42 = sub_1000471B8(qword_100157AB0, (void (*)(uint64_t))type metadata accessor for KTSWDB);
  *(void *)&long long v40 = v34;
  v43[3] = v22;
  v43[4] = &off_10013A6A8;
  v43[0] = v23;
  sub_10003863C(v33, v0 + 352);
  uint64_t v45 = v35;
  uint64_t v46 = &off_100139658;
  *(void *)&long long v44 = v36;
  uint64_t v27 = sub_1000854A0(v38, (uint64_t)v16, v26, &v40, (uint64_t)v43, v0 + 352, (uint64_t)&v44, v37);
  swift_release();
  swift_release();
  sub_100028A4C(v12);
  swift_task_dealloc();
  *(void *)((char *)v13 + *(int *)(v11 + 48)) = v27;
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

unint64_t sub_100040758()
{
  unint64_t result = qword_100157A98;
  if (!qword_100157A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157A98);
  }
  return result;
}

uint64_t sub_1000407AC()
{
  return swift_allocObject();
}

uint64_t type metadata accessor for SWTCloudTelemetry()
{
  return self;
}

uint64_t sub_1000407E0(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(*(void *)(a1 + 32) + 64) + 40) = a2;
  return _swift_continuation_resume();
}

uint64_t sub_100040804()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100040824, 0, 0);
}

uint64_t sub_100040824()
{
  type metadata accessor for SWTDeps(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v1 = swift_unknownObjectRetain();
  return v3(v1);
}

uint64_t sub_10004089C(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  return _swift_task_switch(sub_1000408C0, 0, 0);
}

uint64_t sub_1000408C0()
{
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(uint64_t **)(v0 + 96);
  uint64_t v4 = type metadata accessor for SWTKeyBagFetcher();
  uint64_t v5 = type metadata accessor for SWTDeps(0);
  sub_10003863C(v1 + *(int *)(v5 + 64), v0 + 16);
  sub_10003863C(v1 + *(int *)(v5 + 28), v0 + 56);
  uint64_t v6 = sub_1000B1F90((uint64_t)v2, (long long *)(v0 + 16), (long long *)(v0 + 56));
  v3[3] = v4;
  v3[4] = (uint64_t)&off_10013A6A8;
  uint64_t *v3 = v6;
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10004099C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000409BC, 0, 0);
}

uint64_t sub_1000409BC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  ATLogProofs.VerificationResult.result.getter();
  *(void *)(v1 + 24) = &type metadata for ActualMilestoneFetcher;
  *(void *)(v1 + 32) = &off_100138C30;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100040A30(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100040A50, 0, 0);
}

uint64_t sub_100040A50()
{
  uint64_t v1 = *(void *)(v0 + 16);
  ATLogProofs.VerificationResult.result.getter();
  *(void *)(v1 + 24) = &type metadata for ActualConsistencyFetcher;
  *(void *)(v1 + 32) = &off_100138250;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100040AC4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for SWTDeps(0) + 40));
  a1[3] = type metadata accessor for SWTFollowUp();
  a1[4] = &off_100139658;
  *a1 = v3;

  return swift_retain();
}

uint64_t sub_100040B20()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100020378(&qword_100157AD8);
  type metadata accessor for JSONEncoder.OutputFormatting();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10010B120;
  uint64_t v0 = static JSONEncoder.OutputFormatting.sortedKeys.getter();
  __chkstk_darwin(v0);
  sub_100049CB0(&qword_100157AE0, (void (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting);
  sub_100020378(&qword_100157AE8);
  sub_100049AA0(&qword_100157AF0, &qword_100157AE8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  type metadata accessor for TransparencySWIssue();
  sub_1000471B8(&qword_100157AF8, (void (*)(uint64_t))&type metadata accessor for TransparencySWIssue);
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v18[1] = 0x70736E6172545753;
  v18[2] = 0xEF2D79636E657261;
  v4._countAndFlagsBits = TransparencySWIssue.issue.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 45;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  id v14 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 writeIssueReport:isa filename:v16];

  sub_10002BD3C(v1, v3);
  return swift_release();
}

uint64_t sub_100040F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100040FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003EF8C(v2 + *(int *)(a1 + 24), a2);
}

uint64_t sub_100041008()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_100041014@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + *(int *)(a1 + 40));
  a2[3] = type metadata accessor for SWTFollowUp();
  a2[4] = &off_100139658;
  *a2 = v4;

  return swift_retain();
}

id sub_100041068(uint64_t a1)
{
  return *(id *)(v1 + *(int *)(a1 + 44));
}

uint64_t sub_100041074()
{
  return swift_retain();
}

uint64_t sub_100041080()
{
  return swift_retain();
}

uint64_t sub_10004108C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003863C(v2 + *(int *)(a1 + 28), a2);
}

id sub_1000410B0(uint64_t a1)
{
  return *(id *)(v1 + *(int *)(a1 + 56));
}

uint64_t sub_1000410BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003863C(v2 + *(int *)(a1 + 60), a2);
}

uint64_t sub_1000410E0(uint64_t a1)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_100041100, 0, 0);
}

uint64_t sub_100041100()
{
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v1 = swift_unknownObjectRetain();
  return v3(v1);
}

uint64_t sub_100041170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = v3;
  v4[15] = a3;
  v4[12] = a1;
  v4[13] = a2;
  return _swift_task_switch(sub_100041194, 0, 0);
}

uint64_t sub_100041194()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v4 = *(uint64_t **)(v0 + 96);
  uint64_t v3 = *(void **)(v0 + 104);
  uint64_t v5 = type metadata accessor for SWTKeyBagFetcher();
  sub_10003863C(v2 + *(int *)(v1 + 64), v0 + 16);
  sub_10003863C(v2 + *(int *)(v1 + 28), v0 + 56);
  uint64_t v6 = sub_1000B1F90((uint64_t)v3, (long long *)(v0 + 16), (long long *)(v0 + 56));
  v4[3] = v5;
  v4[4] = (uint64_t)&off_10013A6A8;
  *uint64_t v4 = v6;
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100041264()
{
  return sub_100040B20();
}

uint64_t sub_10004127C(char *a1, char *a2)
{
  return sub_100041288(*a1, *a2);
}

uint64_t sub_100041288(char a1, char a2)
{
  if (qword_10010B4F8[a1] == qword_10010B4F8[a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

Swift::Int sub_1000412F0()
{
  return Hasher._finalize()();
}

uint64_t sub_10004134C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004138C()
{
  return Hasher._finalize()();
}

unint64_t sub_1000413E4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000493F4(*a1);
  *a2 = result;
  return result;
}

void sub_100041414(void *a1@<X8>)
{
  *a1 = qword_10010B4F8[*v1];
  a1[1] = 0xE100000000000000;
}

uint64_t sub_100041430()
{
  return qword_10010B4F8[*v0];
}

unint64_t sub_100041448@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000493F4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100041470()
{
  return 0;
}

void sub_10004147C(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100041488(uint64_t a1)
{
  unint64_t v2 = sub_100049244();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000414C4(uint64_t a1)
{
  unint64_t v2 = sub_100049244();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100041500(void *a1)
{
  uint64_t v4 = a1;
  uint64_t v49 = _swiftEmptyArrayStorage;
  id v5 = [a1 userInfo];
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v6 + 16) || (unint64_t v9 = sub_100049298(v7, v8), (v10 & 1) == 0))
  {
    long long v47 = 0u;
    long long v48 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_100028A9C(*(void *)(v6 + 56) + 32 * v9, (uint64_t)&v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v48 + 1))
  {
LABEL_10:
    sub_100028C8C((uint64_t)&v47, &qword_1001578E0);
    goto LABEL_11;
  }
  sub_100038600(0, &qword_100158118);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v11 = (void *)v46;
  uint64_t v45 = ((uint64_t (*)())sub_100041500)();
  uint64_t v1 = v12;
  uint64_t v2 = v13;
  uint64_t v15 = v14;
  uint64_t v3 = v49;
  uint64_t v16 = (uint64_t)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_41;
  }
  while (1)
  {
    unint64_t v18 = v3[2];
    unint64_t v17 = v3[3];
    if (v18 >= v17 >> 1) {
      uint64_t v3 = sub_100047520((void *)(v17 > 1), v18 + 1, 1, v3);
    }
    v3[2] = v18 + 1;
    uint64_t v19 = &v3[4 * v18];
    v19[4] = v45;
    v19[5] = v1;
    v19[6] = v2;
    v19[7] = v15;

    uint64_t v49 = v3;
    uint64_t v4 = (void *)v16;
LABEL_11:
    id v20 = [v4 userInfo];
    uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v23;
    if (*(void *)(v21 + 16) && (unint64_t v24 = sub_100049298(v22, v23), (v25 & 1) != 0))
    {
      sub_100028A9C(*(void *)(v21 + 56) + 32 * v24, (uint64_t)&v47);
    }
    else
    {
      long long v47 = 0u;
      long long v48 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((void *)&v48 + 1))
    {
      sub_100028C8C((uint64_t)&v47, &qword_1001578E0);
      goto LABEL_37;
    }
    sub_100020378(&qword_100158110);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_37;
    }
    uint64_t v11 = (void *)v46;
    if ((unint64_t)v46 >> 62)
    {
      if (v46 < 0) {
        uint64_t v16 = v46;
      }
      else {
        uint64_t v16 = v46 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      long long v44 = v4;
      if (!v15)
      {
LABEL_35:
        uint64_t v27 = _swiftEmptyArrayStorage;
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      long long v44 = v4;
      if (!v15) {
        goto LABEL_35;
      }
    }
    if (v15 >= 1) {
      break;
    }
    __break(1u);
LABEL_41:
    uint64_t v3 = sub_100047520(0, v3[2] + 1, 1, v3);
  }
  uint64_t v26 = 0;
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v28 = v15;
  do
  {
    if ((v46 & 0xC000000000000001) != 0) {
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v29 = *((id *)v11 + v26 + 4);
    }
    uint64_t v30 = v29;
    uint64_t v31 = sub_100041500(v29);
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v27 = sub_100047520(0, v27[2] + 1, 1, v27);
    }
    unint64_t v39 = v27[2];
    unint64_t v38 = v27[3];
    if (v39 >= v38 >> 1) {
      uint64_t v27 = sub_100047520((void *)(v38 > 1), v39 + 1, 1, v27);
    }
    ++v26;
    v27[2] = v39 + 1;
    long long v40 = &v27[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    uint64_t v11 = (void *)v46;
  }
  while (v28 != v26);
LABEL_36:
  swift_bridgeObjectRelease_n();
  sub_100041974((uint64_t)v27);
  uint64_t v4 = v44;
LABEL_37:
  id v41 = [v4 domain];
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  [v4 code];
  if (!v49[2]) {
    swift_bridgeObjectRelease();
  }
  return v42;
}

uint64_t sub_100041974(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_100047520(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041ACC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a5;
  uint64_t v15 = a4;
  uint64_t v7 = sub_100020378(&qword_100158058);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BCF8(a1, a1[3]);
  sub_100049244();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    uint64_t v11 = v14;
    char v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v16 = v11;
    char v17 = 2;
    sub_100020378(&qword_100158060);
    sub_1000497B8(&qword_100158068, (void (*)(void))sub_100047200);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100041CB8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100049534(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100041CE8(void *a1)
{
  return sub_100041ACC(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100041D08(void *a1)
{
  sub_100041500(a1);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100020378(&qword_100157AD8);
  type metadata accessor for JSONEncoder.OutputFormatting();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10010B120;
  uint64_t v1 = static JSONEncoder.OutputFormatting.sortedKeys.getter();
  __chkstk_darwin(v1);
  sub_100049CB0(&qword_100157AE0, (void (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting);
  sub_100020378(&qword_100157AE8);
  sub_100049AA0(&qword_100157AF0, &qword_100157AE8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  sub_100047200();
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v5 - 8);
  static String.Encoding.utf8.getter();
  uint64_t v6 = String.init(data:encoding:)();
  sub_10002BD3C(v2, v4);
  swift_release();
  return v6;
}

uint64_t sub_100041FB4()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_100041FC4(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  swift_retain();

  return swift_release();
}

uint64_t sub_100042000()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100042020, v0, 0);
}

uint64_t sub_100042020()
{
  uint64_t v1 = *(void *)(v0[2] + 112);
  if (v1)
  {
    v0[3] = *(void *)(v1 + 152);
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[4] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10004A024;
    return sub_100099658(2);
  }
  else
  {
    unint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100042104()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100042124, v0, 0);
}

uint64_t sub_100042124()
{
  uint64_t v1 = *(void *)(v0[2] + 112);
  if (v1)
  {
    v0[3] = *(void *)(v1 + 152);
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[4] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100042208;
    return sub_100099658(1);
  }
  else
  {
    unint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100042208()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100042318()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100042340()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100042378()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0;
  return v0;
}

uint64_t sub_1000423B4()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0;
  return v0;
}

uint64_t sub_1000423D8()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 128) + **(int **)(**(void **)v0 + 128));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100029274;
  return v4();
}

uint64_t sub_1000424D0()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 136) + **(int **)(**(void **)v0 + 136));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100021024;
  return v4();
}

uint64_t sub_1000425C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10004263C@<X0>(uint64_t a1@<X8>)
{
  return sub_100047254(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps, a1);
}

void *sub_100042650()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_1000426A0(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service);
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = a1;
}

uint64_t (*sub_1000426F4())()
{
  return j__swift_endAccess;
}

uint64_t sub_100042750()
{
  return swift_retain();
}

uint64_t sub_100042760()
{
  return swift_retain();
}

uint64_t sub_1000427AC(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*sub_100042800())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10004285C()
{
  swift_allocObject();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000428FC;
  return sub_1000429FC();
}

uint64_t sub_1000428FC(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_1000429FC()
{
  v1[18] = v0;
  v1[19] = type metadata accessor for SWTDeps(0);
  v1[20] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v1[21] = v2;
  v1[22] = *(void *)(v2 - 8);
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_100042AEC, 0, 0);
}

uint64_t sub_100042AEC()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[18];
  uint64_t v5 = OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service;
  v0[24] = OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service;
  *(void *)(v4 + v5) = 0;
  uint64_t v6 = type metadata accessor for TriggerInterface();
  uint64_t v7 = swift_allocObject();
  v0[25] = v7;
  swift_defaultActor_initialize();
  *(void *)(v7 + 112) = 0;
  Logger.init(subsystem:category:)();
  uint64_t v8 = OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  v0[26] = OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4 + v8, v1, v3);
  v0[5] = v6;
  v0[6] = &off_100137FB8;
  v0[2] = v7;
  swift_retain();
  uint64_t v9 = swift_task_alloc();
  v0[27] = v9;
  *(void *)uint64_t v9 = v0;
  *(void *)(v9 + 8) = sub_100042C70;
  uint64_t v10 = v0[20];
  *(unsigned char *)(v9 + 528) = 0;
  *(void *)(v9 + 416) = v10;
  *(void *)(v9 + 424) = v0 + 2;
  return _swift_task_switch(sub_10003F96C, 0, 0);
}

uint64_t sub_100042C70()
{
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100043000;
  }
  else {
    uint64_t v2 = sub_100042D84;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100042D84()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[18];
  uint64_t v4 = (void **)(v3 + v0[24]);
  uint64_t v5 = v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps;
  sub_1000472FC(v0[20], v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps);
  swift_beginAccess();
  uint64_t v6 = *v4;
  *uint64_t v4 = 0;

  *(void *)(v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger) = v1;
  type metadata accessor for SWT2SM();
  v0[10] = v2;
  v0[11] = (uint64_t)&off_100137F20;
  uint64_t v7 = sub_100047360(v0 + 7);
  sub_100047254(v5, (uint64_t)v7);
  swift_retain();
  uint64_t v8 = sub_1000B46C8(v0 + 7);
  v0[29] = v8;
  *(void *)(v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine) = v8;
  uint64_t v9 = (uint64_t *)(v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger);
  swift_beginAccess();
  uint64_t v10 = *v9;
  v0[30] = *v9;
  unint64_t v11 = (*(void *)v10 + 120) & 0xFFFFFFFFFFFFLL | 0xED95000000000000;
  v0[31] = *(void *)(*(void *)v10 + 120);
  v0[32] = v11;
  swift_retain();
  swift_retain();
  return _swift_task_switch(sub_100042F00, v10, 0);
}

uint64_t sub_100042F00()
{
  (*(void (**)(void))(v0 + 248))(*(void *)(v0 + 232));
  swift_release();
  swift_release();
  return _swift_task_switch(sub_100042F80, 0, 0);
}

uint64_t sub_100042F80()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 144);
  return v1(v2);
}

uint64_t sub_100043000()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[18];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4 + v1, v3);

  type metadata accessor for SWTransparencyDaemon(0);
  swift_deallocPartialClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000430F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_100028C8C((uint64_t)v4, &qword_100157030);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v11 = v10;
      swift_unknownObjectRelease();
      if (v11 | v9)
      {
        v13[0] = 0;
        v13[1] = 0;
        _OWORD v13[2] = v9;
        v13[3] = v11;
      }
    }
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100043320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100043340, 0, 0);
}

uint64_t sub_100043340()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10003E26C;
  return sub_1000435E0(v1);
}

uint64_t sub_1000433E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100028C8C(a1, &qword_100157030);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10004356C()
{
  return 0;
}

uint64_t sub_1000435E0(uint64_t a1)
{
  v2[107] = v1;
  v2[101] = a1;
  sub_100020378(&qword_1001580C8);
  v2[108] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TransparencySWSysdiagnose();
  v2[109] = v3;
  v2[110] = *(void *)(v3 - 8);
  v2[111] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TransparencySWSysdiagnose.StateMachine();
  v2[112] = v4;
  v2[113] = *(void *)(v4 - 8);
  v2[114] = swift_task_alloc();
  return _swift_task_switch(sub_100043730, 0, 0);
}

uint64_t sub_100043730()
{
  swift_retain_n();
  swift_asyncLet_begin();
  uint64_t v1 = *(void *)(v0 + 912);
  return _swift_asyncLet_get_throwing(v0 + 16, v1, sub_1000437F0, v0 + 656);
}

uint64_t sub_1000437F0()
{
  *(void *)(v1 + 920) = v0;
  if (v0) {
    uint64_t v2 = sub_100043FD8;
  }
  else {
    uint64_t v2 = sub_100043824;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100043824()
{
  uint64_t v45 = v0;
  uint64_t v1 = v0[115];
  uint64_t v2 = v0[113];
  uint64_t v3 = v0[112];
  uint64_t v4 = v0[108];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v4, v0[114], v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  sub_100020378((uint64_t *)&unk_1001580E0);
  uint64_t v5 = swift_task_alloc();
  Date.init()();
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  TransparencySWSysdiagnose.init(stateMachine:fallback:)();
  swift_task_dealloc();
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v7 = swift_task_alloc();
  type metadata accessor for SWTDeps(0);
  v0[87] = 0xD000000000000012;
  v0[88] = 0x8000000100110AC0;
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = swift_task_alloc();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v10, enum case for URL.DirectoryHint.inferFromPath(_:), v8);
  sub_100040758();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v11 = TransparencySWSysdiagnose.json()();
  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    uint64_t v41 = v7;
    if (os_log_type_enabled(v15, v16))
    {
      char v17 = (uint8_t *)swift_slowAlloc();
      char v18 = (void *)swift_slowAlloc();
      *(_DWORD *)char v17 = 138412290;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      v0[89] = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v18 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "sysdiagnose write error %@", v17, 0xCu);
      sub_100020378(&qword_1001590C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    id v20 = v0 + 96;
    uint64_t v21 = v0[111];
    uint64_t v22 = v0[110];
    uint64_t v23 = v0[109];
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    swift_task_dealloc();
    unint64_t v24 = sub_1000440A8;
    uint64_t v25 = v0[114];
    uint64_t v26 = v0 + 2;
  }
  else
  {
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    Data.write(to:options:)();
    sub_10002BD3C(v13, v14);
    uint64_t v27 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v27, v7, v42);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = v0[111];
    uint64_t v32 = v0[110];
    uint64_t v40 = v0[109];
    if (v30)
    {
      os_log_type_t type = v29;
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315138;
      sub_100049CB0((unint64_t *)&unk_1001580F0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[95] = sub_1000262AC(v34, v35, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v36(v27, v42);
      _os_log_impl((void *)&_mh_execute_header, v28, type, "wrote fallback sysdiagnose to: %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v36(v7, v42);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v40);
      swift_task_dealloc();
    }
    else
    {

      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v37(v27, v42);
      swift_task_dealloc();
      v37(v7, v42);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v40);
    }
    id v20 = v0 + 102;
    swift_task_dealloc();
    unint64_t v24 = sub_100043F28;
    uint64_t v25 = v0[114];
    uint64_t v26 = v0 + 2;
  }
  return _swift_asyncLet_finish(v26, v25, v24, v20);
}

uint64_t sub_100043F28()
{
  return _swift_task_switch(sub_100043F44, 0, 0);
}

uint64_t sub_100043F44()
{
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100043FD8()
{
  return _swift_asyncLet_finish(v0 + 16, *(void *)(v0 + 912), sub_100043FF8, v0 + 720);
}

uint64_t sub_100043FF8()
{
  return _swift_task_switch(sub_100044014, 0, 0);
}

uint64_t sub_100044014()
{
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000440A8()
{
  return _swift_task_switch(sub_100049FFC, 0, 0);
}

uint64_t sub_1000440C4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)a2 + 200) + **(int **)(*(void *)a2 + 200));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100021024;
  return v6(a1);
}

xpc_activity_state_t sub_1000441D0(_xpc_activity_s *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_activity_state_t result = xpc_activity_get_state(a1);
  if (result == 2)
  {
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 134217984;
      v13[1] = 2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Milestone refresh XPC activity triggered, state: %ld", v10, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v11 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
    unint64_t v12 = (void *)swift_allocObject();
    v12[2] = 0;
    void v12[3] = 0;
    v12[4] = v2;
    swift_retain();
    sub_1000433E4((uint64_t)v6, (uint64_t)&unk_100157B40, (uint64_t)v12);
    swift_release();
    return xpc_activity_set_state(a1, 5);
  }
  return result;
}

uint64_t sub_1000443A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 136) = a4;
  return _swift_task_switch(sub_1000443C8, 0, 0);
}

uint64_t sub_1000443C8()
{
  *(void *)(v0 + 40) = &type metadata for SWTFeatureFlags;
  unint64_t v1 = sub_100049CF8();
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 144) = v1;
  *(void *)(v0 + 48) = v1;
  char v2 = isFeatureEnabled(_:)();
  sub_100028A4C(v0 + 16);
  if (v2)
  {
    unint64_t v12 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 136)
                                                      + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                        + 160)
                            + **(int **)(**(void **)(*(void *)(v0 + 136)
                                                     + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                       + 160));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v3;
    void *v3 = v0;
    v3[1] = sub_100044770;
    uint64_t v4 = v12;
  }
  else
  {
    *(unsigned char *)(v0 + 56) = 1;
    uint64_t v5 = *(void *)(v0 + 144);
    *(void *)(v0 + 80) = &type metadata for SWTFeatureFlags;
    *(void *)(v0 + 88) = v5;
    char v6 = isFeatureEnabled(_:)();
    sub_100028A4C(v0 + 56);
    if (v6)
    {
      uint64_t v13 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 136)
                                                        + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                          + 168)
                              + **(int **)(**(void **)(*(void *)(v0 + 136)
                                                       + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                         + 168));
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 160) = v7;
      void *v7 = v0;
      v7[1] = sub_100044B24;
      uint64_t v4 = v13;
    }
    else
    {
      uint64_t v8 = *(void *)(v0 + 144);
      *(void *)(v0 + 120) = &type metadata for SWTFeatureFlags;
      *(void *)(v0 + 128) = v8;
      *(unsigned char *)(v0 + 96) = 4;
      char v9 = isFeatureEnabled(_:)();
      sub_100028A4C(v0 + 96);
      if (v9)
      {
        unint64_t v14 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 136)
                                                          + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                            + 184)
                                + **(int **)(**(void **)(*(void *)(v0 + 136)
                                                         + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                           + 184));
        uint64_t v10 = (void *)swift_task_alloc();
        *(void *)(v0 + 168) = v10;
        *uint64_t v10 = v0;
        v10[1] = sub_100044DCC;
        uint64_t v4 = v14;
      }
      else
      {
        uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
      }
    }
  }
  return v4();
}

uint64_t sub_100044770()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1000448A0, 0, 0);
  }
}

uint64_t sub_1000448A0()
{
  *(unsigned char *)(v0 + 56) = 1;
  uint64_t v1 = *(void *)(v0 + 144);
  *(void *)(v0 + 80) = &type metadata for SWTFeatureFlags;
  *(void *)(v0 + 88) = v1;
  char v2 = isFeatureEnabled(_:)();
  sub_100028A4C(v0 + 56);
  if (v2)
  {
    char v9 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 136)
                                                     + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                       + 168)
                           + **(int **)(**(void **)(*(void *)(v0 + 136)
                                                    + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                      + 168));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v3;
    void *v3 = v0;
    v3[1] = sub_100044B24;
    uint64_t v4 = v9;
  }
  else
  {
    *(unsigned char *)(v0 + 96) = 4;
    uint64_t v5 = *(void *)(v0 + 144);
    *(void *)(v0 + 120) = &type metadata for SWTFeatureFlags;
    *(void *)(v0 + 128) = v5;
    char v6 = isFeatureEnabled(_:)();
    sub_100028A4C(v0 + 96);
    if (v6)
    {
      uint64_t v10 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 136)
                                                        + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                          + 184)
                              + **(int **)(**(void **)(*(void *)(v0 + 136)
                                                       + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                         + 184));
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 168) = v7;
      void *v7 = v0;
      v7[1] = sub_100044DCC;
      uint64_t v4 = v10;
    }
    else
    {
      uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    }
  }
  return v4();
}

uint64_t sub_100044B24()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100044C54, 0, 0);
  }
}

uint64_t sub_100044C54()
{
  *(unsigned char *)(v0 + 96) = 4;
  uint64_t v1 = *(void *)(v0 + 144);
  *(void *)(v0 + 120) = &type metadata for SWTFeatureFlags;
  *(void *)(v0 + 128) = v1;
  char v2 = isFeatureEnabled(_:)();
  sub_100028A4C(v0 + 96);
  if (v2)
  {
    char v6 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 136)
                                                     + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                       + 184)
                           + **(int **)(**(void **)(*(void *)(v0 + 136)
                                                    + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                                      + 184));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v3;
    void *v3 = v0;
    v3[1] = sub_100044DCC;
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_100044DCC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100044EC0()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100044EE0, 0, 0);
}

uint64_t sub_100044EE0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine);
  char v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *char v2 = v0;
  v2[1] = sub_100044F84;
  return sub_1000435E0(v1);
}

uint64_t sub_100044F84()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
  return v3();
}

xpc_activity_state_t sub_100045088(_xpc_activity_s *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    char v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "24h background work", v9, 2u);
    swift_slowDealloc();
  }

  xpc_activity_state_t result = xpc_activity_get_state(a1);
  if (result == 2)
  {
    uint64_t v11 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
    unint64_t v12 = (void *)swift_allocObject();
    v12[2] = 0;
    void v12[3] = 0;
    v12[4] = v2;
    v12[5] = 2;
    v12[6] = a1;
    swift_retain();
    swift_unknownObjectRetain();
    sub_100020834((uint64_t)v6, (uint64_t)&unk_100157BC0, (uint64_t)v12);
    return swift_release();
  }
  return result;
}

uint64_t sub_10004522C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return _swift_task_switch(sub_100045250, 0, 0);
}

uint64_t sub_100045250()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    *(void *)(v0 + 16) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "24h job triggered triggered, state: %ld", v4, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v7 = (uint64_t (*)(void))(*(void *)(**(void **)(v0 + 24) + 200) + **(int **)(**(void **)(v0 + 24) + 200));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10004540C;
  return v7();
}

uint64_t sub_10004540C()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_10004A000;
  }
  else
  {
    uint64_t v1 = sub_100045524;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100045524()
{
  xpc_activity_set_state(*(xpc_activity_t *)(v0 + 40), 5);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100045588()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "swtransparencyd starting", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  char v9 = (void *)swift_allocObject();
  _OWORD v9[2] = 0;
  v9[3] = 0;
  v9[4] = v1;
  swift_retain();
  sub_100020834((uint64_t)v4, (uint64_t)&unk_100157BD0, (uint64_t)v9);
  swift_release();
  sub_100038600(0, (unint64_t *)&unk_100157BD8);
  sub_100038600(0, (unint64_t *)&qword_100156FD0);
  uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v38 = static OS_dispatch_source.makeSignalSource(signal:queue:)();

  swift_getObjectType();
  aBlock[4] = sub_1000477E0;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100046318;
  aBlock[3] = &unk_100137ED0;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v37 = &v35;
  uint64_t v12 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  unint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = (uint64_t)&v35;
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004631C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v36);
  swift_release();
  OS_dispatch_source.resume()();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Registering XPC service", v21, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for SWTransparencyXPCService();
  uint64_t v22 = sub_10006DFF4(*(void *)(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine));
  uint64_t v23 = (*(uint64_t (**)(char *))(*(void *)v1 + 128))(v22);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v23);
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    uint64_t v26 = v24 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon;
    swift_beginAccess();
    *(void *)(v26 + 8) = &off_100137FD0;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v27 = v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps;
  uint64_t v28 = *(void **)(v27 + *(int *)(type metadata accessor for SWTDeps(0) + 36));
  id v29 = [objc_msgSend(v28, "transparencySettings", v35) getEnvironment];
  swift_unknownObjectRelease();
  id v30 = [v28 atEnvironment];
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 134349312;
    id v41 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 12) = 2050;
    id v41 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "swtransparencyd started at: %{public}lu kt: %{public}lu", (uint8_t *)v33, 0x16u);
    swift_slowDealloc();
  }

  return swift_unknownObjectRelease();
}

uint64_t sub_100045BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100045BE8, 0, 0);
}

uint64_t sub_100045BE8()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine);
  v0[3] = v1;
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 120) + **(int **)(*(void *)v1 + 120));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[4] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100045CF0;
  return v4();
}

uint64_t sub_100045CF0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 24);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(*(void *)v2 + 136) + **(int **)(*(void *)v2 + 136));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 40) = v3;
  void *v3 = v6;
  v3[1] = sub_100045EA0;
  return v5();
}

uint64_t sub_100045EA0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100045F94(uint64_t a1)
{
  uint64_t v2 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = a1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_100028C8C((uint64_t)v4, &qword_100157030);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &unk_1001580A8;
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    void v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000461D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1000461F8, 0, 0);
}

uint64_t sub_1000461F8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  xpc_transaction_exit_clean();
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine);
  char v3 = sub_1000292A4();
  uint64_t v6 = (uint64_t (*)(void, uint64_t))(*(void *)(*(void *)v2 + 192) + **(int **)(*(void *)v2 + 192));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10003E26C;
  return v6(v3 & 1, 1);
}

uint64_t sub_10004631C()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_1000463CC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100047800(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps);

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100046470()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100047800(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps);

  swift_release();
  swift_release();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_100046550()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 200) + **(int **)(*(void *)v0 + 200));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100029274;
  return v4();
}

void sub_100046644()
{
  uint64_t v0 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  sub_1000433E4((uint64_t)v2, (uint64_t)&unk_100157BF0, v4);
  swift_release();
  id v5 = [self mainRunLoop];
  [v5 run];
}

uint64_t sub_100046764()
{
  type metadata accessor for SWTransparencyDaemon(0);
  swift_allocObject();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100046808;
  return sub_1000429FC();
}

uint64_t sub_100046808(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[22] = a1;
  v3[23] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_10004693C, 0, 0);
  }
}

uint64_t sub_10004693C()
{
  uint64_t v1 = v0[22];
  v0[6] = sub_10004987C;
  v0[7] = v1;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1000209E0;
  v0[5] = &unk_1001380B0;
  uint64_t v2 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  xpc_activity_register("com.apple.swtransparencyd.milestone-refresh", XPC_ACTIVITY_CHECK_IN, v2);
  _Block_release(v2);
  v0[12] = sub_10004997C;
  v0[13] = v1;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256;
  v0[10] = sub_1000209E0;
  v0[11] = &unk_1001380D8;
  uint64_t v3 = _Block_copy(v0 + 8);
  uint64_t v4 = v1;
  swift_retain();
  swift_release();
  xpc_activity_register("com.apple.swtransparencyd.24h", XPC_ACTIVITY_CHECK_IN, v3);
  _Block_release(v3);
  sub_100038600(0, (unint64_t *)&qword_100156FD0);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = swift_task_alloc();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v5);
  uint64_t v26 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v5);
  swift_task_dealloc();
  uint64_t v24 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v24 - 8);
  uint64_t v23 = swift_task_alloc();
  uint64_t v9 = swift_task_alloc();
  static DispatchTime.now()();
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = (void *)swift_task_alloc();
  void *v12 = 5;
  (*(void (**)(void))(v11 + 104))();
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v12, v10);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v25(v9, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  v0[18] = sub_100049A7C;
  v0[19] = v4;
  v0[14] = _NSConcreteStackBlock;
  v0[15] = 1107296256;
  v0[16] = sub_100046318;
  v0[17] = &unk_100138100;
  uint64_t v21 = _Block_copy(v0 + 14);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  uint64_t v14 = swift_task_alloc();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = swift_task_alloc();
  v0[20] = _swiftEmptyArrayStorage;
  sub_100049CB0(&qword_100158088, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100020378(&qword_100158090);
  sub_100049AA0(&qword_100158098, &qword_100158090);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v21);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v15);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v22);
  v25(v23, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  uint64_t v18 = swift_task_dealloc();
  (*(void (**)(uint64_t))(*(void *)v4 + 216))(v18);
  swift_release();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100046F9C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_100046FE0()
{
  return static ParsableCommand.main()();
}

uint64_t sub_100047014(uint64_t a1)
{
  return sub_100028A4C(a1);
}

void sub_100047044()
{
  uint64_t v0 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  sub_1000433E4((uint64_t)v2, (uint64_t)&unk_100158080, v4);
  swift_release();
  id v5 = [self mainRunLoop];
  [v5 run];
}

void sub_100047164()
{
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

uint64_t sub_1000471B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100047200()
{
  unint64_t result = qword_10015C918[0];
  if (!qword_10015C918[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015C918);
  }
  return result;
}

uint64_t sub_100047254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SWTDeps(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TriggerInterface()
{
  return self;
}

uint64_t type metadata accessor for SWTransparencyDaemon(uint64_t a1)
{
  return sub_100028514(a1, qword_10015CB30);
}

uint64_t sub_1000472FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SWTDeps(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100047360(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1000473C8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100029274;
  v3[2] = v2;
  return _swift_task_switch(sub_100043340, 0, 0);
}

uint64_t sub_100047474()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100021024;
  v3[17] = v2;
  return _swift_task_switch(sub_1000443C8, 0, 0);
}

void *sub_100047520(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100020378(&qword_100158120);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100049440(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100047630()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100047678()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100029274;
  *(void *)(v3 + 40) = v2;
  *(_OWORD *)(v3 + 24) = v5;
  return _swift_task_switch(sub_100045250, 0, 0);
}

uint64_t sub_100047738()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100029274;
  v3[2] = v2;
  return _swift_task_switch(sub_100045BE8, 0, 0);
}

uint64_t sub_1000477E0()
{
  return sub_100045F94(v0);
}

uint64_t sub_1000477E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000477F8()
{
  return swift_release();
}

uint64_t sub_100047800(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SWTDeps(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004785C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100047894()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100029274;
  return sub_100046764();
}

unint64_t sub_100047920()
{
  unint64_t result = qword_100157BF8;
  if (!qword_100157BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157BF8);
  }
  return result;
}

unint64_t sub_100047978()
{
  unint64_t result = qword_100157C38;
  if (!qword_100157C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157C38);
  }
  return result;
}

unint64_t sub_1000479D0()
{
  unint64_t result = qword_100157C40;
  if (!qword_100157C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157C40);
  }
  return result;
}

void *sub_100047A24(_DWORD *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = &a2[v13];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v13], 1, v10))
    {
      uint64_t v16 = sub_100020378(&qword_100157A70);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
    }
    uint64_t v18 = a3[7];
    long long v19 = *(_OWORD *)&a2[v18 + 24];
    *(_OWORD *)((char *)v4 + v18 + 24) = v19;
    (**(void (***)(void))(v19 - 8))();
    uint64_t v20 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)&a2[a3[8]];
    *(void *)((char *)v4 + v20) = *(void *)&a2[v20];
    uint64_t v21 = a3[11];
    *(void *)((char *)v4 + a3[10]) = *(void *)&a2[a3[10]];
    uint64_t v22 = *(void **)&a2[v21];
    *(void *)((char *)v4 + v21) = v22;
    uint64_t v23 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(void *)&a2[a3[12]];
    *(void *)((char *)v4 + v23) = *(void *)&a2[v23];
    uint64_t v24 = a3[14];
    uint64_t v25 = a3[15];
    uint64_t v26 = *(void **)&a2[v24];
    *(void *)((char *)v4 + v24) = v26;
    uint64_t v35 = (char *)v4 + v25;
    uint64_t v36 = v26;
    uint64_t v37 = &a2[v25];
    long long v27 = *(_OWORD *)&a2[v25 + 24];
    *(_OWORD *)((char *)v4 + v25 + 24) = v27;
    uint64_t v28 = v27;
    uint64_t v34 = **(void (***)(char *, char *, uint64_t))(v27 - 8);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_retain();
    id v29 = v22;
    swift_retain();
    swift_retain();
    id v30 = v36;
    v34(v35, v37, v28);
    uint64_t v31 = a3[16];
    long long v32 = *(_OWORD *)&a2[v31 + 24];
    *(_OWORD *)((char *)v4 + v31 + 24) = v32;
    (**(void (***)(void))(v32 - 8))();
    *(void *)((char *)v4 + a3[17]) = *(void *)&a2[a3[17]];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100047D50(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = a1 + a2[6];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  sub_100028A4C(a1 + a2[7]);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  sub_100028A4C(a1 + a2[15]);
  sub_100028A4C(a1 + a2[16]);

  return swift_bridgeObjectRelease();
}

_DWORD *sub_100047EC8(_DWORD *a1, char *a2, int *a3)
{
  *a1 = *(_DWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
  {
    uint64_t v15 = sub_100020378(&qword_100157A70);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  uint64_t v16 = a3[7];
  long long v17 = *(_OWORD *)&a2[v16 + 24];
  *(_OWORD *)((char *)a1 + v16 + 24) = v17;
  (**(void (***)(void))(v17 - 8))();
  uint64_t v18 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)&a2[a3[8]];
  *(void *)((char *)a1 + v18) = *(void *)&a2[v18];
  uint64_t v19 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)&a2[a3[10]];
  uint64_t v20 = *(void **)&a2[v19];
  *(void *)((char *)a1 + v19) = v20;
  uint64_t v21 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)&a2[a3[12]];
  *(void *)((char *)a1 + v21) = *(void *)&a2[v21];
  uint64_t v22 = a3[14];
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)&a2[v22];
  *(void *)((char *)a1 + v22) = v24;
  uint64_t v33 = (char *)a1 + v23;
  uint64_t v34 = v24;
  uint64_t v35 = &a2[v23];
  long long v25 = *(_OWORD *)&a2[v23 + 24];
  *(_OWORD *)((char *)a1 + v23 + 24) = v25;
  uint64_t v26 = v25;
  long long v32 = **(void (***)(char *, char *, uint64_t))(v25 - 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  id v27 = v20;
  swift_retain();
  swift_retain();
  id v28 = v34;
  v32(v33, v35, v26);
  uint64_t v29 = a3[16];
  long long v30 = *(_OWORD *)&a2[v29 + 24];
  *(_OWORD *)((char *)a1 + v29 + 24) = v30;
  (**(void (***)(void))(v30 - 8))();
  *(void *)((char *)a1 + a3[17]) = *(void *)&a2[a3[17]];
  swift_bridgeObjectRetain();
  return a1;
}

_DWORD *sub_1000481A4(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  id v27 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v27(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a2 + v11;
  uint64_t v13 = *(uint64_t (**)(void))(v10 + 48);
  id v28 = (char *)a1 + v11;
  int v14 = v13();
  int v15 = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v12, 1, v9);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v28, v12, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v28, 0, 1, v9);
      goto LABEL_9;
    }
    size_t v16 = *(void *)(*(void *)(sub_100020378(&qword_100157A70) - 8) + 64);
    long long v17 = v28;
  }
  else
  {
    if (!v15)
    {
      v27(v28, v12, v9);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
    size_t v16 = *(void *)(*(void *)(sub_100020378(&qword_100157A70) - 8) + 64);
    long long v17 = v28;
  }
  memcpy(v17, v12, v16);
LABEL_9:
  sub_100048498((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]));
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_retain();
  swift_release();
  uint64_t v18 = a3[11];
  uint64_t v19 = *(void **)((char *)a2 + v18);
  uint64_t v20 = *(void **)((char *)a1 + v18);
  *(void *)((char *)a1 + v18) = v19;
  id v21 = v19;

  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_retain();
  swift_release();
  uint64_t v22 = a3[14];
  uint64_t v23 = *(void **)((char *)a2 + v22);
  uint64_t v24 = *(void **)((char *)a1 + v22);
  *(void *)((char *)a1 + v22) = v23;
  id v25 = v23;

  sub_100048498((uint64_t *)((char *)a1 + a3[15]), (uint64_t *)((char *)a2 + a3[15]));
  sub_100048498((uint64_t *)((char *)a1 + a3[16]), (uint64_t *)((char *)a2 + a3[16]));
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_100048498(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

_DWORD *sub_1000486C8(_DWORD *a1, char *a2, int *a3)
{
  *a1 = *(_DWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  int v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
  {
    uint64_t v15 = sub_100020378(&qword_100157A70);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = &a2[v16];
  long long v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  *((void *)v18 + 4) = *((void *)v19 + 4);
  *(void *)((char *)a1 + v17) = *(void *)&a2[v17];
  uint64_t v21 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)&a2[a3[9]];
  *(void *)((char *)a1 + v21) = *(void *)&a2[v21];
  uint64_t v22 = a3[12];
  *(void *)((char *)a1 + a3[11]) = *(void *)&a2[a3[11]];
  *(void *)((char *)a1 + v22) = *(void *)&a2[v22];
  uint64_t v23 = a3[14];
  *(void *)((char *)a1 + a3[13]) = *(void *)&a2[a3[13]];
  *(void *)((char *)a1 + v23) = *(void *)&a2[v23];
  uint64_t v24 = a3[15];
  uint64_t v25 = a3[16];
  uint64_t v26 = (char *)a1 + v24;
  id v27 = &a2[v24];
  long long v28 = *(_OWORD *)v27;
  long long v29 = *((_OWORD *)v27 + 1);
  *((void *)v26 + 4) = *((void *)v27 + 4);
  *(_OWORD *)uint64_t v26 = v28;
  *((_OWORD *)v26 + 1) = v29;
  long long v30 = (char *)a1 + v25;
  uint64_t v31 = &a2[v25];
  long long v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)long long v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v32;
  *((void *)v30 + 4) = *((void *)v31 + 4);
  *(void *)((char *)a1 + a3[17]) = *(void *)&a2[a3[17]];
  return a1;
}

_DWORD *sub_1000488B8(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v35(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a2 + v11;
  uint64_t v13 = *(uint64_t (**)(void))(v10 + 48);
  uint64_t v36 = (char *)a1 + v11;
  int v14 = v13();
  int v15 = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v12, 1, v9);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v36, v12, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v36, 0, 1, v9);
      goto LABEL_9;
    }
    size_t v16 = *(void *)(*(void *)(sub_100020378(&qword_100157A70) - 8) + 64);
    uint64_t v17 = v36;
  }
  else
  {
    if (!v15)
    {
      v35(v36, v12, v9);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v36, v9);
    size_t v16 = *(void *)(*(void *)(sub_100020378(&qword_100157A70) - 8) + 64);
    uint64_t v17 = v36;
  }
  memcpy(v17, v12, v16);
LABEL_9:
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  long long v20 = (char *)a2 + v18;
  sub_100028A4C((uint64_t)a1 + v18);
  long long v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  *((void *)v19 + 4) = *((void *)v20 + 4);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_unknownObjectRelease();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_unknownObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_release();
  uint64_t v22 = a3[11];
  uint64_t v23 = *(void **)((char *)a1 + v22);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);

  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_release();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_release();
  uint64_t v24 = a3[14];
  uint64_t v25 = *(void **)((char *)a1 + v24);
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);

  uint64_t v26 = a3[15];
  id v27 = (char *)a1 + v26;
  long long v28 = (char *)a2 + v26;
  sub_100028A4C((uint64_t)a1 + v26);
  long long v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)id v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v29;
  *((void *)v27 + 4) = *((void *)v28 + 4);
  uint64_t v30 = a3[16];
  uint64_t v31 = (char *)a1 + v30;
  long long v32 = (char *)a2 + v30;
  sub_100028A4C((uint64_t)a1 + v30);
  long long v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((void *)v31 + 4) = *((void *)v32 + 4);
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100048BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100048BC4);
}

uint64_t sub_100048BC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_100020378(&qword_100157A70);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[7] + 24);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_100048CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100048CF0);
}

uint64_t sub_100048CF0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for URL();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = sub_100020378(&qword_100157A70);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[7] + 24) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

void sub_100048E04()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100048F24();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100048F24()
{
  if (!qword_100157CA0)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100157CA0);
    }
  }
}

uint64_t sub_100048F7C()
{
  return type metadata accessor for SWTransparencyDaemon(0);
}

uint64_t sub_100048F84()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SWTDeps(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTransparencyDaemonCommand()
{
  return &type metadata for SWTransparencyDaemonCommand;
}

uint64_t destroy for JSONSError()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for JSONSError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JSONSError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for JSONSError(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONSError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONSError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONSError()
{
  return &type metadata for JSONSError;
}

unint64_t sub_100049244()
{
  unint64_t result = qword_10015CC40;
  if (!qword_10015CC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015CC40);
  }
  return result;
}

unint64_t sub_100049298(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100049310(a1, a2, v4);
}

unint64_t sub_100049310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000493F4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100137DB0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100049440(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100049534(void *a1)
{
  uint64_t v3 = sub_100020378(&qword_100158070);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10002BCF8(a1, a1[3]);
  sub_100049244();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100028A4C((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[30] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_100020378(&qword_100158060);
    v9[29] = 2;
    sub_1000497B8(&qword_100158078, (void (*)(void))sub_100049828);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100028A4C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1000497B8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100020418(&qword_100158060);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100049828()
{
  unint64_t result = qword_10015CC48[0];
  if (!qword_10015CC48[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015CC48);
  }
  return result;
}

void sub_10004987C()
{
  os_eligibility_get_domain_answer();
  unint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    Swift::String v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "no eligible for gm, skipping background milestone-refresh job", v2, 2u);
    swift_slowDealloc();
  }
}

void sub_10004997C()
{
  os_eligibility_get_domain_answer();
  unint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    Swift::String v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "no eligible for gm, skipping background 24h job", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100049A7C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t sub_100049AA0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100020418(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100049AF4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100049B34()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100029274;
  v3[2] = v2;
  return _swift_task_switch(sub_1000461F8, 0, 0);
}

uint64_t sub_100049BDC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100049C14(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100029274;
  return sub_1000440C4(a1, v1);
}

uint64_t sub_100049CB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100049CF8()
{
  unint64_t result = qword_100158100;
  if (!qword_100158100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158100);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for JSONSError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for JSONSError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100049EA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONSError.CodingKeys()
{
  return &type metadata for JSONSError.CodingKeys;
}

unint64_t sub_100049EE4()
{
  unint64_t result = qword_10015CDD0[0];
  if (!qword_10015CDD0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015CDD0);
  }
  return result;
}

unint64_t sub_100049F3C()
{
  unint64_t result = qword_10015CEE0;
  if (!qword_10015CEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015CEE0);
  }
  return result;
}

unint64_t sub_100049F94()
{
  unint64_t result = qword_10015CEE8[0];
  if (!qword_10015CEE8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015CEE8);
  }
  return result;
}

void sub_100049FE8()
{
}

id sub_10004A028()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 112);

  return v1;
}

void sub_10004A06C(uint64_t a1)
{
  swift_beginAccess();
  int v3 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = a1;
}

uint64_t sub_10004A0B4()
{
  uint64_t v0 = swift_allocObject();
  sub_10004A0EC();
  return v0;
}

uint64_t sub_10004A0EC()
{
  swift_defaultActor_initialize();
  id v1 = [self defaultSessionConfiguration];
  [v1 setDiscretionary:0];
  [v1 setHTTPCookieStorage:0];
  [v1 setURLCache:0];
  [v1 set_alternativeServicesStorage:];
  id v2 = [self sessionWithConfiguration:v1];

  *(void *)(v0 + 112) = v2;
  return v0;
}

uint64_t SWTURLSession.URLSessionMaker.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t SWTURLSession.URLSessionMaker.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10004A21C()
{
  type metadata accessor for SWTURLSession.URLSessionMaker();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_10004A0EC();
  static SWTURLSession.shared = v0;
  return result;
}

uint64_t *SWTURLSession.shared.unsafeMutableAddressor()
{
  if (qword_10015CF70 != -1) {
    swift_once();
  }
  return &static SWTURLSession.shared;
}

uint64_t static SWTURLSession.shared.getter()
{
  if (qword_10015CF70 != -1) {
    swift_once();
  }

  return swift_retain();
}

unint64_t sub_10004A304()
{
  unint64_t result = qword_100158130;
  if (!qword_100158130)
  {
    type metadata accessor for SWTURLSession.URLSessionMaker();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158130);
  }
  return result;
}

uint64_t type metadata accessor for SWTURLSession.URLSessionMaker()
{
  return self;
}

ValueMetadata *type metadata accessor for SWTURLSession()
{
  return &type metadata for SWTURLSession;
}

uint64_t *sub_10004A390()
{
  return &qword_1001581F8;
}

uint64_t sub_10004A39C()
{
  swift_beginAccess();
  uint64_t v0 = qword_1001581F8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_10004A3F0(uint64_t a1, void *a2)
{
  qword_1001581F8 = a1;
  off_100158200 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10004A44C())()
{
  return j__swift_endAccess;
}

unint64_t sub_10004A4A4(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 1:
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000014;
      goto LABEL_8;
    case 2:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000011;
      goto LABEL_8;
    case 3:
      if (a1) {
        return 0xD000000000000010;
      }
      else {
        return 0xD000000000000011;
      }
    default:
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001ELL;
LABEL_8:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      return v4;
  }
}

uint64_t sub_10004A63C(uint64_t a1, char a2)
{
  uint64_t result = 3;
  switch(a2)
  {
    case 1:
      uint64_t result = 4;
      break;
    case 2:
      uint64_t result = 5;
      break;
    case 3:
      if (a1) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004A698()
{
  return Error<>._domain.getter();
}

uint64_t sub_10004A6C8()
{
  return Error<>._code.getter();
}

unint64_t sub_10004A6F8()
{
  return sub_10004A4A4(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_10004A704()
{
  uint64_t result = 3;
  switch(*(unsigned char *)(v0 + 8))
  {
    case 1:
      uint64_t result = 4;
      break;
    case 2:
      uint64_t result = 5;
      break;
    case 3:
      if (*(void *)v0) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004A760(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10004A780, 0, 0);
}

uint64_t sub_10004A780()
{
  uint64_t v1 = SWTURLSession.shared.unsafeMutableAddressor();
  uint64_t v2 = *v1;
  v0[3] = *v1;
  unint64_t v3 = (*(void *)v2 + 96) & 0xFFFFFFFFFFFFLL | 0xE282000000000000;
  v0[4] = *(void *)(*(void *)v2 + 96);
  v0[5] = v3;
  swift_retain();
  return _swift_task_switch(sub_10004A814, v2, 0);
}

uint64_t sub_10004A814()
{
  *(void *)(v0 + 48) = (*(uint64_t (**)(void))(v0 + 32))();
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004A8D0;
  uint64_t v2 = *(void *)(v0 + 16);
  return NSURLSession.data(for:delegate:)(v2, 0);
}

uint64_t sub_10004A8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  *(void *)(*v4 + 64) = v3;
  swift_task_dealloc();
  if (v3)
  {
    return _swift_task_switch(sub_10004AA44, 0, 0);
  }
  else
  {

    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
    return v10(a1, a2, a3);
  }
}

uint64_t sub_10004AA44()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004AAA8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_1001622F8);
  sub_1000294A8(v0, (uint64_t)qword_1001622F8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10004AB2C()
{
  if (qword_10015D080 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_1001622F8);
}

uint64_t sub_10004AB90@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015D080 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_1001622F8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

id sub_10004AC38()
{
  return *(id *)(v0 + 8);
}

id sub_10004AC40()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_10004AC48@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + 24, a1);
}

uint64_t sub_10004AC68@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + 64, a1);
}

uint64_t sub_10004AC88()
{
  return swift_retain();
}

void *sub_10004AC90()
{
  uint64_t v1 = *(void **)(v0 + 112);
  id v2 = v1;
  return v1;
}

uint64_t sub_10004ACB8@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + 120, a1);
}

uint64_t sub_10004ACD8(unsigned int a1)
{
  strcpy((char *)v3, "SWTFetchCnst-");
  v1._countAndFlagsBits = Application.description.getter(a1);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3[0];
}

uint64_t sub_10004AD3C()
{
  if (*v0) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_10004AD50(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for ActualConsistencyFetcher;
  *(void *)(a1 + 32) = &off_100138250;
}

uint64_t sub_10004AD68@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, long long *a6@<X5>, uint64_t a7@<X6>, long long *a8@<X7>, uint64_t a9@<X8>)
{
  *(_DWORD *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  sub_10003CD24(a4, a9 + 24);
  *(void *)(a9 + 104) = a5;
  sub_10003CD24(a6, a9 + 64);
  *(void *)(a9 + 112) = a7;

  return sub_10003CD24(a8, a9 + 120);
}

void *sub_10004ADE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10004FBA0(a1, a2, a3, a4 & 1);
}

uint64_t sub_10004ADF0(uint64_t a1)
{
  uint64_t v3 = v1;
  unsigned int v4 = a1;
  uint64_t v5 = sub_10005194C(a1);
  if (!v6)
  {
    sub_100050020();
    swift_allocError();
    *(void *)uint64_t v13 = v4;
    *(unsigned char *)(v13 + 8) = 1;
    return swift_willThrow();
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v9 = (void *)v3[2];
  uint64_t v40 = v7;
  if (v4)
  {
    uint64_t result = (uint64_t)[v9 patLogBeginningMs];
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v11 = result;
      uint64_t v12 = 2;
      goto LABEL_8;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t result = (uint64_t)[v9 tltLogBeginningMs];
  if (result < 0) {
    goto LABEL_15;
  }
  uint64_t v11 = result;
  uint64_t v12 = 3;
LABEL_8:
  uint64_t v15 = v3[6];
  uint64_t v14 = v3[7];
  sub_10002BCF8(v3 + 3, v15);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 136))(v40, v8, v11, v12, 1, 1, 1, v15, v14);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = *(void *)(v16 + 16);
  unsigned int v38 = v12;
  uint64_t v39 = v3 + 3;
  if (v17) {
    uint64_t v35 = *(char **)(v16 + 8 * v17 + 24);
  }
  else {
    uint64_t v35 = 0;
  }
  LODWORD(v34) = v17 == 0;
  swift_bridgeObjectRelease();
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v37 = &v32;
  uint64_t v18 = *(void *)(v36 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v36);
  unint64_t v33 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  long long v20 = (char *)&v32 - v33;
  Date.init(timeIntervalSinceNow:)();
  uint64_t v21 = v3[6];
  uint64_t v22 = v3[7];
  sub_10002BCF8(v39, v21);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *, uint64_t, uint64_t, uint64_t, char *, _BYTE, uint64_t, uint64_t))(v22 + 88);
  uint64_t v31 = v22;
  uint64_t v24 = v38;
  uint64_t v25 = v23(v40, v8, v11, v38, v20, 1, 1, 1, v35, (_BYTE)v34, v21, v31);
  uint64_t v34 = &v32;
  uint64_t v35 = v20;
  __chkstk_darwin(v25);
  uint64_t v26 = (char *)&v32 - v33;
  Date.init(timeIntervalSinceNow:)();
  uint64_t v28 = v3[6];
  uint64_t v27 = v3[7];
  sub_10002BCF8(v39, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v27 + 96))(v40, v8, v11, v24, v26, v28, v27);
  swift_bridgeObjectRelease();
  long long v29 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v30 = v36;
  v29(v26, v36);
  return ((uint64_t (*)(char *, uint64_t))v29)(v35, v30);
}

uint64_t sub_10004B17C@<X0>(uint64_t a1@<X8>)
{
  v26[1] = a1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v27 = (char *)v26 - v6;
  uint64_t v7 = *(void **)(v1 + 8);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 urlForKey:v8];

  uint64_t v10 = sub_100020378(&qword_100157A70);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
    goto LABEL_11;
  }
  v26[0] = v2;
  __chkstk_darwin(v11);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v14(v13, (char *)v26 - v6, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1)
  {
LABEL_11:
    sub_100028C8C((uint64_t)v13, &qword_100157A70);
    sub_100050020();
    swift_allocError();
    *(void *)uint64_t v25 = 0;
    *(unsigned char *)(v25 + 8) = 3;
    return swift_willThrow();
  }
  v14(v27, v13, v3);
  id v15 = objc_allocWithZone((Class)NSMutableURLRequest);
  URL._bridgeToObjectiveC()(v16);
  uint64_t v18 = v17;
  id v19 = [v15 initWithURL:v17];

  sub_1000BFD80(1);
  if (sub_10002F830((uint64_t)[v7 currentEnvironment]))
  {
    [v19 _setPrivacyProxyFailClosed:1];
    if (qword_10015D080 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_1000294A8(v20, (uint64_t)qword_1001622F8);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Enforcing privacy proxy", v23, 2u);
      swift_slowDealloc();
    }
  }
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v27, v3);
}

uint64_t sub_10004B560(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10004B574()
{
  uint64_t v3 = *v0;
  uint64_t v4 = sub_10005194C(v3);
  if (!v5)
  {
    sub_100050020();
    swift_allocError();
    *(void *)uint64_t v12 = v3;
    *(unsigned char *)(v12 + 8) = 1;
    swift_willThrow();
    return v2;
  }
  uint64_t v6 = v5;
  uint64_t v70 = v4;
  uint64_t v2 = (void *)*((void *)v0 + 6);
  uint64_t v7 = *((void *)v0 + 7);
  sub_10002BCF8((void *)v0 + 3, (uint64_t)v2);
  uint64_t v68 = v0;
  NSString v8 = (void *)*((void *)v0 + 2);
  unint64_t v9 = (unint64_t)[v8 patLogBeginningMs];
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v3) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 3;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))(v7 + 136))(v70, v6, v9, v10, 2, 1, 1, v2, v7);
  if (v1)
  {
    swift_bridgeObjectRelease();
    return v2;
  }
  uint64_t v72 = v11;
  swift_bridgeObjectRetain();
  sub_10004ECB4(&v72);
  swift_bridgeObjectRelease();
  uint64_t v14 = v72;
  unint64_t v15 = *(void *)(v72 + 16);
  if (!v15)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10015D080 == -1)
    {
LABEL_14:
      uint64_t v20 = type metadata accessor for Logger();
      sub_1000294A8(v20, (uint64_t)qword_1001622F8);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v21, v22))
      {
LABEL_17:

        return 0;
      }
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      uint64_t v24 = "No pending PAT revisions";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v24, v23, 2u);
      swift_slowDealloc();
      goto LABEL_17;
    }
LABEL_64:
    swift_once();
    goto LABEL_14;
  }
  uint64_t v16 = *((void *)v0 + 6);
  uint64_t v17 = *((void *)v0 + 7);
  sub_10002BCF8((void *)v0 + 3, v16);
  unint64_t v18 = (unint64_t)[v8 patLogBeginningMs];
  if ((v18 & 0x8000000000000000) != 0)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 136))(v70, v6, v18, v10, 1, 1, 1, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v19 + 16);
  if (v25)
  {
    uint64_t v26 = *(void *)(v19 + 8 * v25 + 24);
    swift_bridgeObjectRelease();
    uint64_t v27 = v68;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = v68;
  if (v15 <= 1)
  {
    swift_release();
    if (qword_10015D080 != -1) {
LABEL_66:
    }
      swift_once();
    uint64_t v63 = type metadata accessor for Logger();
    sub_1000294A8(v63, (uint64_t)qword_1001622F8);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v21, v22)) {
      goto LABEL_17;
    }
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    uint64_t v24 = "No verified revision and only one pending PAT revision";
    goto LABEL_16;
  }
  uint64_t v26 = 0;
LABEL_22:
  char v28 = v25 == 0;
  long long v29 = (void *)*((void *)v27 + 1);
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v29 uintegerForKey:v30];

  uint64_t v32 = sub_10004FBA0(v14, (uint64_t)v31, v26, v28);
  swift_release();
  if (qword_10015D080 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_1000294A8(v33, (uint64_t)qword_1001622F8);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  uint64_t v64 = v32;
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v72 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315138;
    swift_bridgeObjectRetain();
    sub_100020378(&qword_100158218);
    uint64_t v37 = Array.description.getter();
    unint64_t v39 = v38;
    swift_bridgeObjectRelease();
    sub_1000262AC(v37, v39, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v32 = v64;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Generating requests for %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v71 = v32[2];
  if (!v71)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v40 = 0;
  uint64_t v41 = *v27;
  uint64_t v69 = v32 + 4;
  if (v41) {
    int v42 = 2;
  }
  else {
    int v42 = 3;
  }
  unsigned int v67 = v42;
  uint64_t v2 = _swiftEmptyArrayStorage;
  unsigned int v65 = *v27;
  unsigned int v66 = kTransparencyProtocolVersion;
  while (1)
  {
    if (v40 >= v32[2])
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    uint64_t v44 = v69[v40];
    id v45 = objc_allocWithZone((Class)ConsistencyProofRequest);
    swift_bridgeObjectRetain();
    id v46 = [v45 init];
    [v46 setVersion:v66];
    [v46 setLogType:v67];
    if (v41) {
      [v46 setApplication:v41];
    }
    uint64_t v47 = *(void *)(v44 + 16);
    if (v47 && v47 != 1) {
      break;
    }
LABEL_49:
    swift_bridgeObjectRelease();
    id v56 = [v46 data];
    if (v56)
    {
      uint64_t v57 = v56;
      uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v60 = v59;

      sub_10002BD94(v58, v60);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = sub_10004EBA4(0, v2[2] + 1, 1, v2);
      }
      unint64_t v62 = v2[2];
      unint64_t v61 = v2[3];
      if (v62 >= v61 >> 1) {
        uint64_t v2 = sub_10004EBA4((void *)(v61 > 1), v62 + 1, 1, v2);
      }
      v2[2] = v62 + 1;
      uint64_t v43 = &v2[2 * v62];
      v43[4] = v58;
      void v43[5] = v60;
      sub_10002BD3C(v58, v60);
      uint64_t v41 = v65;
    }
    ++v40;

    if (v40 == v71)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  uint64_t v49 = *(void *)(v44 + 32);
  swift_bridgeObjectRetain();
  uint64_t v50 = 0;
  while (1)
  {
    id v51 = [objc_allocWithZone((Class)ConsistencyProofRequest_LogConsistencyRequest) init];
    if (v49 < 0) {
      break;
    }
    uint64_t v52 = v51;
    [v51 setStartRevision:v49];
    if ((unint64_t)(v50 + 1) >= *(void *)(v44 + 16))
    {
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    uint64_t v53 = v44 + 8 * v50;
    if ((*(void *)(v53 + 40) & 0x8000000000000000) != 0) {
      break;
    }
    [v52 setEndRevision:];
    id v54 = [v46 requestsArray];
    if (!v54)
    {
      __break(1u);
      goto LABEL_66;
    }
    BOOL v55 = v54;
    [v54 addObject:v52];

    if ((unint64_t)(v50 + 1) >= *(void *)(v44 + 16)) {
      goto LABEL_60;
    }
    uint64_t v49 = *(void *)(v53 + 40);
    if (v47 - 1 == ++v50)
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = v64;
      uint64_t v41 = v65;
      goto LABEL_49;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10004BE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 448) = a4;
  *(void *)(v6 + 456) = v5;
  *(unsigned char *)(v6 + 536) = a5;
  *(void *)(v6 + 432) = a2;
  *(void *)(v6 + 440) = a3;
  *(void *)(v6 + 424) = a1;
  return _swift_task_switch(sub_10004BE5C, 0, 0);
}

uint64_t sub_10004BE5C()
{
  uint64_t v19 = v0;
  if (qword_10015D080 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 464) = sub_1000294A8(v2, (uint64_t)qword_1001622F8);
  sub_100050074(v1, v0 + 16);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v16 = *(void *)(v0 + 424);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = Application.description.getter(*(_DWORD *)(v0 + 16));
    *(void *)(v0 + 408) = sub_1000262AC(v6, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100050084((id *)(v0 + 16));
    *(_WORD *)(v5 + 12) = 2048;
    *(void *)(v0 + 416) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Requesting %s consistency chunk %ld", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100050084((id *)(v0 + 16));
  }

  uint64_t v8 = type metadata accessor for URLRequest();
  *(void *)(v0 + 472) = v8;
  *(void *)(v0 + 480) = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 488) = v9;
  sub_10004B17C(v9);
  uint64_t v10 = *(void **)(v0 + 456);
  sub_10002BD94(*(void *)(v0 + 432), *(void *)(v0 + 440));
  URLRequest.httpBody.setter();
  uint64_t v11 = v10 + 8;
  uint64_t v12 = v10[11];
  uint64_t v13 = v10[12];
  sub_10002BCF8(v11, v12);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 8) + **(int **)(v13 + 8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v14;
  void *v14 = v0;
  v14[1] = sub_10004C1F0;
  return v17(v9, v12, v13);
}

uint64_t sub_10004C1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[63] = a1;
  v5[64] = a2;
  v5[65] = a3;
  v5[66] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_10004CA80;
  }
  else {
    uint64_t v6 = sub_10004C30C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10004C30C()
{
  uint64_t v76 = v0;
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = swift_task_alloc();
  static Date.now.getter();
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  uint64_t v5 = *(void **)(v0 + 520);
  if (!v4)
  {
    uint64_t v13 = *(void *)(v0 + 504);
    unint64_t v14 = *(void *)(v0 + 512);
    uint64_t v15 = *(void *)(v0 + 480);
    uint64_t v74 = *(void *)(v0 + 488);
    *(void *)typeb = *(void *)(v0 + 472);
    sub_100050020();
    swift_allocError();
    *(void *)uint64_t v16 = 1;
    *(unsigned char *)(v16 + 8) = 3;
    swift_willThrow();
    sub_10002BD3C(v13, v14);

    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
    (*(void (**)(uint64_t, os_log_type_t *))(v15 + 8))(v74, *(os_log_type_t **)typeb);
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    id v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }
  uint64_t v6 = (void *)v4;
  uint64_t v73 = v1;
  id v7 = v5;
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v6 valueForHTTPHeaderField:v8];

  if (v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE700000000000000;
    uint64_t v10 = 0x3E4853206F6E3CLL;
  }
  uint64_t v17 = *(void **)(v0 + 520);
  sub_100050074(*(void *)(v0 + 456), v0 + 176);
  id v18 = v17;
  swift_bridgeObjectRetain_n();
  id v19 = v18;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v20, type);
  os_log_type_t v22 = *(void **)(v0 + 520);
  uint64_t v23 = &selRef_sortedArrayUsingSelector_;
  uint64_t v72 = v2;
  if (v21)
  {
    uint64_t v61 = *(void *)(v0 + 424);
    uint64_t v65 = v3;
    uint64_t v24 = swift_slowAlloc();
    v75[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 134218754;
    unint64_t v25 = v12;
    id v26 = [v6 statusCode];

    *(void *)(v0 + 376) = v26;
    unint64_t v12 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v27 = Application.description.getter(*(_DWORD *)(v0 + 176));
    *(void *)(v0 + 384) = sub_1000262AC(v27, v28, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100050084((id *)(v0 + 176));
    *(_WORD *)(v24 + 22) = 2048;
    *(void *)(v0 + 392) = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 32) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 400) = sub_1000262AC(v10, v25, v75);
    uint64_t v23 = &selRef_sortedArrayUsingSelector_;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, type, "Received %ld response for %s consistency chunk %ld with %s", (uint8_t *)v24, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v65;
    swift_slowDealloc();
  }
  else
  {

    sub_100050084((id *)(v0 + 176));
    swift_bridgeObjectRelease_n();
  }

  if ([v6 v23[356]] != (id)200)
  {
    unint64_t v39 = *(void **)(v0 + 520);
    uint64_t v41 = *(void *)(v0 + 504);
    unint64_t v40 = *(void *)(v0 + 512);
    uint64_t v42 = *(void *)(v0 + 480);
    *(void *)typec = *(void *)(v0 + 488);
    uint64_t v43 = *(void *)(v0 + 472);
    swift_bridgeObjectRelease();
    id v44 = [v6 v23[356]];
    sub_100050020();
    swift_allocError();
    *(void *)uint64_t v45 = v44;
    *(unsigned char *)(v45 + 8) = 0;
    swift_willThrow();
    sub_10002BD3C(v41, v40);

    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v3, v73);
    (*(void (**)(os_log_type_t *, uint64_t))(v42 + 8))(*(os_log_type_t **)typec, v43);
    goto LABEL_13;
  }
  *(void *)typea = v12;
  uint64_t v29 = *(void *)(v0 + 528);
  uint64_t v30 = *(void *)(v0 + 504);
  unint64_t v31 = *(void *)(v0 + 512);
  objc_allocWithZone((Class)ConsistencyProofResponse);
  sub_10002BD94(v30, v31);
  id v32 = sub_100038540();
  if (v29)
  {
    uint64_t v33 = *(void **)(v0 + 520);
    uint64_t v34 = *(void *)(v0 + 504);
    unint64_t v35 = *(void *)(v0 + 512);
    uint64_t v37 = *(void *)(v0 + 480);
    uint64_t v36 = *(void *)(v0 + 488);
    uint64_t v38 = *(void *)(v0 + 472);
    sub_10002BD3C(v34, v35);
    sub_10002BD3C(v34, v35);

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v3, v73);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    goto LABEL_13;
  }
  id v48 = v32;
  uint64_t v49 = *(void *)(v0 + 504);
  unint64_t v62 = *(void *)(v0 + 512);
  uint64_t v63 = *(void **)(v0 + 520);
  uint64_t v50 = v3;
  uint64_t v51 = *(void *)(v0 + 480);
  uint64_t v64 = *(void *)(v0 + 472);
  uint64_t v66 = *(void *)(v0 + 488);
  uint64_t v67 = v10;
  uint64_t v53 = *(void *)(v0 + 448);
  uint64_t v52 = *(unsigned int **)(v0 + 456);
  char v54 = *(unsigned char *)(v0 + 536) & 1;
  sub_10002BD3C(v49, v62);
  uint64_t v55 = *v52;
  LOBYTE(v75[0]) = 0;
  ConsistencyProofResponse.expectedApplication.setter(v55);
  uint64_t v56 = 2;
  if (!v55) {
    uint64_t v56 = 3;
  }
  LOBYTE(v75[0]) = 0;
  ConsistencyProofResponse.expectedLogType.setter(v56);
  ConsistencyProofResponse.startRevision.setter(v53, v54);
  uint64_t v57 = (void *)*((void *)v52 + 2);
  id v58 = v57;
  ConsistencyProofResponse.keyBag.setter(v57);
  sub_10003863C((uint64_t)(v52 + 6), v0 + 336);
  sub_100034550(v0 + 336);
  sub_100020378((uint64_t *)&unk_1001580E0);
  uint64_t v59 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v59, v50, v73);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v59, 0, 1, v73);
  ConsistencyProofResponse.receiptTime.setter(v59);
  sub_10002BD3C(v49, v62);

  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v50, v73);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v66, v64);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v60 = *(uint64_t (**)(id, uint64_t, void))(v0 + 8);
  return v60(v48, v67, *(void *)typea);
}

uint64_t sub_10004CA80()
{
  (*(void (**)(void, void))(v0[60] + 8))(v0[61], v0[59]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10004CAFC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10004CB1C, 0, 0);
}

uint64_t sub_10004CB1C()
{
  uint64_t v1 = sub_10004B574();
  v0[3] = v1;
  uint64_t v5 = v1;
  if (v1)
  {
    uint64_t v6 = v2;
    char v7 = v3;
    uint64_t v8 = v0[2];
    uint64_t v9 = swift_task_alloc();
    v0[4] = v9;
    *(void *)(v9 + 16) = v5;
    *(void *)(v9 + 24) = v6;
    *(unsigned char *)(v9 + 32) = v7 & 1;
    *(void *)(v9 + 40) = v8;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[5] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10004CC90;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v10);
  }
  else
  {
    unint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_10004CC90()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10004CDCC;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_10004CDB4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004CDB4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004CDCC()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004CE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 401) = a5;
  *(void *)(v6 + 448) = a4;
  *(void *)(v6 + 456) = a6;
  *(void *)(v6 + 432) = a2;
  *(void *)(v6 + 440) = a3;
  uint64_t v7 = sub_100020378(&qword_100158250);
  *(void *)(v6 + 464) = v7;
  *(void *)(v6 + 472) = *(void *)(v7 - 8);
  *(void *)(v6 + 480) = swift_task_alloc();
  sub_100020378(&qword_100157030);
  *(void *)(v6 + 488) = swift_task_alloc();
  *(void *)(v6 + 496) = swift_task_alloc();
  return _swift_task_switch(sub_10004CF44, 0, 0);
}

uint64_t sub_10004CF44()
{
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v28 = *(void *)(v1 + 16);
  if (v28)
  {
    uint64_t v29 = type metadata accessor for TaskPriority();
    uint64_t v2 = *(void *)(v29 - 8);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
    id v26 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    unint64_t v25 = (void (**)(uint64_t, uint64_t))(v2 + 8);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    uint64_t v4 = (unint64_t *)(v1 + 40);
    do
    {
      uint64_t v6 = *(void *)(v0 + 496);
      uint64_t v33 = *(void *)(v0 + 488);
      char v32 = *(unsigned char *)(v0 + 401);
      uint64_t v7 = *(void *)(v0 + 456);
      uint64_t v31 = *(void *)(v0 + 448);
      uint64_t v8 = *(void *)(v0 + 440);
      uint64_t v9 = *(v4 - 1);
      unint64_t v34 = *v4;
      v27(v6, 1, 1, v29);
      sub_100050074(v7, v0 + 16);
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      long long v11 = *(_OWORD *)(v0 + 128);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v0 + 112);
      *(_OWORD *)(v10 + 144) = v11;
      long long v12 = *(_OWORD *)(v0 + 160);
      *(_OWORD *)(v10 + 160) = *(_OWORD *)(v0 + 144);
      *(_OWORD *)(v10 + 176) = v12;
      long long v13 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v10 + 64) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v10 + 80) = v13;
      long long v14 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v10 + 112) = v14;
      long long v15 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v10 + 48) = v15;
      uint64_t v30 = v3;
      *(void *)(v10 + 192) = v3;
      *(void *)(v10 + 200) = v9;
      *(void *)(v10 + 208) = v34;
      *(void *)(v10 + 216) = v8;
      *(void *)(v10 + 224) = v31;
      *(unsigned char *)(v10 + 232) = v32 & 1;
      sub_100029208(v6, v33, &qword_100157030);
      LODWORD(v6) = (*v26)(v33, 1, v29);
      sub_10002BD94(v9, v34);
      swift_bridgeObjectRetain();
      sub_10002BD94(v9, v34);
      uint64_t v16 = *(void *)(v0 + 488);
      if (v6 == 1)
      {
        sub_100028C8C(*(void *)(v0 + 488), &qword_100157030);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v25)(v16, v29);
      }
      if (*(void *)(v10 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v19 = v18;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0;
      }
      uint64_t v20 = **(void **)(v0 + 432);
      uint64_t v21 = v19 | v17;
      if (v19 | v17)
      {
        uint64_t v21 = v0 + 336;
        *(void *)(v0 + 336) = 0;
        *(void *)(v0 + 344) = 0;
        *(void *)(v0 + 352) = v17;
        *(void *)(v0 + 360) = v19;
      }
      ++v3;
      uint64_t v5 = *(void *)(v0 + 496);
      v4 += 2;
      *(void *)(v0 + 368) = 1;
      *(void *)(v0 + 376) = v21;
      *(void *)(v0 + 384) = v20;
      swift_task_create();
      swift_release();
      sub_10002BD3C(v9, v34);
      sub_100028C8C(v5, &qword_100157030);
    }
    while (v28 != v30 + 1);
    swift_bridgeObjectRelease();
  }
  sub_100020378(&qword_1001570C0);
  ThrowingTaskGroup.makeAsyncIterator()();
  os_log_type_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v22;
  *os_log_type_t v22 = v0;
  v22[1] = sub_10004D330;
  uint64_t v23 = *(void *)(v0 + 464);
  return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 392, 0, 0, v23, v0 + 424);
}

uint64_t sub_10004D330()
{
  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004DA1C;
  }
  else {
    uint64_t v2 = sub_10004D444;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004D444()
{
  uint64_t v22 = v0;
  if (*(unsigned char *)(v0 + 400))
  {
    uint64_t v1 = *(void *)(v0 + 512);
    uint64_t v2 = *(unsigned int **)(v0 + 456);
    (*(void (**)(void, void))(*(void *)(v0 + 472) + 8))(*(void *)(v0 + 480), *(void *)(v0 + 464));
    sub_10004ADF0(*v2);
    if (v1)
    {
      if (qword_10015D080 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_1000294A8(v3, (uint64_t)qword_1001622F8);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v7 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 138412290;
        swift_errorRetain();
        uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 416) = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v7 = v8;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "PAT garbage collection failed: %@", v6, 0xCu);
        sub_100020378(&qword_1001590C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    sub_10004ADF0(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 392);
    if (qword_10015D080 != -1) {
      swift_once();
    }
    uint64_t v10 = *(void *)(v0 + 456);
    uint64_t v11 = type metadata accessor for Logger();
    sub_1000294A8(v11, (uint64_t)qword_1001622F8);
    sub_100050074(v10, v0 + 176);
    long long v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v15 = Application.description.getter(*(_DWORD *)(v0 + 176));
      *(void *)(v14 + 4) = sub_1000262AC(v15, v16, &v21);
      swift_bridgeObjectRelease();
      sub_100050084((id *)(v0 + 176));
      *(_WORD *)(v14 + 12) = 2048;
      *(void *)(v14 + 14) = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Verified %{public}s consistency proof chunk %ld", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100050084((id *)(v0 + 176));
    }

    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10004D330;
    uint64_t v18 = *(void *)(v0 + 464);
    return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 392, 0, 0, v18, v0 + 424);
  }
}

uint64_t sub_10004DA1C()
{
  (*(void (**)(void, void))(v0[59] + 8))(v0[60], v0[58]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10004DAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[50] = a4;
  v7[51] = a5;
  v7[49] = a1;
  uint64_t v12 = swift_task_alloc();
  v7[52] = v12;
  *(void *)uint64_t v12 = v7;
  *(void *)(v12 + 8) = sub_10004DBA4;
  *(void *)(v12 + 448) = v15;
  *(void *)(v12 + 456) = a4;
  *(unsigned char *)(v12 + 536) = v16 & 1;
  *(void *)(v12 + 432) = a6;
  *(void *)(v12 + 440) = a7;
  *(void *)(v12 + 424) = a5;
  return _swift_task_switch(sub_10004BE5C, 0, 0);
}

uint64_t sub_10004DBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v5 = (void *)*v4;
  v5[53] = a1;
  v5[54] = a2;
  v5[55] = a3;
  v5[56] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = (uint64_t (*)(void))v5[1];
    return v6();
  }
  else
  {
    return _swift_task_switch(sub_10004DCDC, 0, 0);
  }
}

uint64_t sub_10004DCDC()
{
  uint64_t v56 = v0;
  Swift::Bool v1 = ConsistencyProofResponse.isNewEpoch()();
  if (v2)
  {
    swift_errorRelease();
LABEL_10:
    ConsistencyProofResponse.verify()();
    if (v7)
    {
      uint64_t v8 = v7;
      if (qword_10015D080 != -1) {
        swift_once();
      }
      uint64_t v9 = *(void *)(v0 + 400);
      uint64_t v10 = type metadata accessor for Logger();
      sub_1000294A8(v10, (uint64_t)qword_1001622F8);
      sub_100050074(v9, v0 + 16);
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      BOOL v13 = os_log_type_enabled(v11, v12);
      unint64_t v14 = *(void *)(v0 + 440);
      if (v13)
      {
        uint64_t v51 = *(void *)(v0 + 432);
        uint64_t v50 = *(void *)(v0 + 408);
        uint64_t v15 = swift_slowAlloc();
        uint64_t v53 = (void *)swift_slowAlloc();
        v55[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136315906;
        uint64_t v16 = Application.description.getter(*(_DWORD *)(v0 + 16));
        *(void *)(v0 + 360) = sub_1000262AC(v16, v17, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100050084((id *)(v0 + 16));
        *(_WORD *)(v15 + 12) = 2048;
        *(void *)(v0 + 336) = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v15 + 22) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 344) = sub_1000262AC(v51, v14, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v15 + 32) = 2112;
        swift_errorRetain();
        uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 352) = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v53 = v18;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s consistency chunk %ld with %s failed verification %@", (uint8_t *)v15, 0x2Au);
        sub_100020378(&qword_1001590C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100050084((id *)(v0 + 16));
        swift_bridgeObjectRelease_n();
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v28 = *(void *)(v0 + 400);
      uint64_t v29 = *(void **)(v28 + 112);
      if (v29)
      {
        unsigned int v30 = *(_DWORD *)v28;
        strcpy((char *)v55, "SWTFetchCnst-");
        HIWORD(v55[1]) = -4864;
        v31._countAndFlagsBits = Application.description.getter(v30);
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        NSString v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v33 = (void *)_convertErrorToNSError(_:)();
        [v29 logResultForEvent:v32 hardFailure:1 result:v33];

        uint64_t v28 = *(void *)(v0 + 400);
      }
      unint64_t v34 = *(void **)(v0 + 424);
      uint64_t v35 = *(void *)(v28 + 144);
      uint64_t v36 = *(void *)(v28 + 152);
      sub_10002BCF8((void *)(v28 + 120), v35);
      sub_100020378(&qword_100158268);
      uint64_t v37 = *(void *)(sub_100020378(&qword_100158270) - 8);
      unint64_t v38 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_10010B120;
      unint64_t v40 = (void *)(v39 + v38);
      void *v40 = 7368801;
      v40[1] = 0xE300000000000000;
      swift_errorRetain();
      EventValue.init(integerLiteral:)();
      unint64_t v41 = sub_10004E784(v39);
      (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v36 + 8))(0x6863746566747753, 0xEC00000074736E63, v8, v41, v35, v36);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_willThrow();

      uint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_28;
    }
    if (qword_10015D080 != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 400);
    uint64_t v20 = type metadata accessor for Logger();
    sub_1000294A8(v20, (uint64_t)qword_1001622F8);
    sub_100050074(v19, v0 + 176);
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    unint64_t v24 = *(void *)(v0 + 440);
    if (v23)
    {
      os_log_t log = *(os_log_t *)(v0 + 432);
      uint64_t v52 = *(void *)(v0 + 408);
      uint64_t v25 = swift_slowAlloc();
      v55[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315650;
      uint64_t v26 = Application.description.getter(*(_DWORD *)(v0 + 176));
      *(void *)(v0 + 368) = sub_1000262AC(v26, v27, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100050084((id *)(v0 + 176));
      *(_WORD *)(v25 + 12) = 2048;
      *(void *)(v0 + 376) = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 384) = sub_1000262AC((uint64_t)log, v24, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s consistency chunk %ld with %s verified", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100050084((id *)(v0 + 176));
      swift_bridgeObjectRelease_n();
    }

    uint64_t v43 = *(void *)(v0 + 400);
    id v44 = *(void **)(v43 + 112);
    uint64_t v45 = *(void **)(v0 + 424);
    if (v44)
    {
      unsigned int v46 = *(_DWORD *)v43;
      strcpy((char *)v55, "SWTFetchCnst-");
      HIWORD(v55[1]) = -4864;
      v47._countAndFlagsBits = Application.description.getter(v46);
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      NSString v48 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v44 logResultForEvent:v48 hardFailure:0 result:0];

      uint64_t v45 = v48;
    }
LABEL_27:

    **(void **)(v0 + 392) = *(void *)(v0 + 408);
    uint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
LABEL_28:
    return v42();
  }
  if (!v1) {
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = ConsistencyProofResponse.keyBag.getter();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_100084EC0();
  }
  uint64_t v5 = *(void *)(*(void *)(v0 + 400) + 104);
  *(void *)(v0 + 456) = v5;
  if (!v5)
  {
    uint64_t v45 = *(void **)(v0 + 424);
    goto LABEL_27;
  }
  uint64_t v6 = (*(void *)v5 + 184) & 0xFFFFFFFFFFFFLL | 0x62BB000000000000;
  *(void *)(v0 + 464) = *(void *)(*(void *)v5 + 184);
  *(void *)(v0 + 472) = v6;
  return _swift_task_switch(sub_10004E564, v5, 0);
}

uint64_t sub_10004E564()
{
  (*(void (**)(uint64_t))(v0 + 464))(1);
  return _swift_task_switch(sub_10004E5D4, 0, 0);
}

uint64_t sub_10004E5D4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 400) + 104);
  *(void *)(v0 + 480) = v1;
  if (v1)
  {
    uint64_t v2 = (*(void *)v1 + 184) & 0xFFFFFFFFFFFFLL | 0x62BB000000000000;
    *(void *)(v0 + 488) = *(void *)(*(void *)v1 + 184);
    *(void *)(v0 + 496) = v2;
    return _swift_task_switch(sub_10004E6A4, v1, 0);
  }
  else
  {

    **(void **)(v0 + 392) = *(void *)(v0 + 408);
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
}

uint64_t sub_10004E6A4()
{
  (*(void (**)(uint64_t))(v0 + 488))(3);
  return _swift_task_switch(sub_10004E714, 0, 0);
}

uint64_t sub_10004E714()
{
  **(void **)(v0 + 392) = *(void *)(v0 + 408);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_10004E784(uint64_t a1)
{
  uint64_t v2 = sub_100020378(&qword_100158270);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100020378(&qword_100158278);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100029208(v12, (uint64_t)v5, &qword_100158270);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_100049298(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    uint64_t *v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for EventValue();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10004E984(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100020378(&qword_100158290);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10004FA94(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10004EA94(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100020378(&qword_100158288);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10004F84C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10004EBA4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100020378(&qword_100158280);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000500AC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

Swift::Int sub_10004ECB4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10004F838(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10004ED20(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10004ED20(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      int64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          unint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_10004F3AC((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = sub_10003209C((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          os_log_type_t v90 = &v86[16 * v85 + 32];
          *(void *)os_log_type_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          int64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  int64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        uint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          uint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          uint64_t *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v11 = sub_100031FA0(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = sub_100031FA0((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      int64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    unsigned int v30 = &v11[16 * v28 + 32];
    *(void *)unsigned int v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          id v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        unint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_10004F3AC((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004F3AC(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = v17 + 8;
          Swift::Int v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    sub_10004F61C((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10004F61C(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

uint64_t sub_10004F6D8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100020378(&qword_100158288);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004F838(uint64_t a1)
{
  return sub_10004F6D8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_10004F84C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    int64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10004F938(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)sub_10004EA94(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[8 * a1 + 32];
    uint64_t v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 8 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004FA94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100020378(&qword_100158218);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10004FBA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (uint64_t *)a1;
  if (a2)
  {
    v30[0] = a1;
    swift_bridgeObjectRetain();
    sub_10004ECB4(v30);
    uint64_t v7 = (uint64_t *)v30[0];
    unint64_t v31 = (uint64_t *)v30[0];
    uint64_t v9 = *(void *)(v30[0] + 16);
    if (a4)
    {
      if (!v9)
      {
LABEL_48:
        swift_release();
        return _swiftEmptyArrayStorage;
      }
      a3 = *(void *)(v30[0] + 32);
    }
    else if (!v9)
    {
      goto LABEL_48;
    }
    if (a2 < 0) {
      goto LABEL_53;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    uint64_t v4 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v9 >= a2) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = v9;
      }
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      BOOL v13 = (void *)swift_dynamicCastClass();
      if (!v13)
      {
        swift_bridgeObjectRelease();
        BOOL v13 = _swiftEmptyArrayStorage;
      }
      uint64_t v14 = v13[2];
      swift_release();
      if (v14 == v12)
      {
        uint64_t v15 = (int64_t *)swift_dynamicCastClass();
        if (!v15)
        {
          swift_bridgeObjectRelease();
          uint64_t v15 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_100020378(&qword_100158288);
        uint64_t v24 = v12;
        uint64_t v15 = (int64_t *)swift_allocObject();
        int64_t v25 = j__malloc_size(v15);
        uint64_t v26 = v25 - 32;
        if (v25 < 32) {
          uint64_t v26 = v25 - 25;
        }
        v15[2] = v12;
        v15[3] = 2 * (v26 >> 3);
        unint64_t v27 = (char *)(v7 + 4);
        unint64_t v28 = (char *)(v15 + 4);
        if (v7 + 4 < &v15[v24 + 4] && v28 < &v27[v24 * 8])
        {
          _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          swift_release();
          __break(1u);
          uint64_t result = (void *)swift_release();
          __break(1u);
          return result;
        }
        memcpy(v28, v27, 8 * v12);
      }
      swift_bridgeObjectRelease();
      uint64_t v7 = (uint64_t *)&v31;
      sub_10004F938(0, v15[2]);
      int64_t v16 = v15[2];
      if (!v16) {
        goto LABEL_25;
      }
      if (v15[4] != a3)
      {
        if (v16 == 1) {
          goto LABEL_25;
        }
        if (v15[5] != a3) {
          break;
        }
      }
LABEL_30:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_10004E984(0, v4[2] + 1, 1, v4);
      }
      unint64_t v21 = v4[2];
      unint64_t v20 = v4[3];
      if (v21 >= v20 >> 1) {
        uint64_t v4 = sub_10004E984((void *)(v20 > 1), v21 + 1, 1, v4);
      }
      v4[2] = v21 + 1;
      v4[v21 + 4] = v15;
      uint64_t v7 = v31;
      uint64_t v9 = v31[2];
      if (!v9)
      {
        swift_bridgeObjectRelease();
        return v4;
      }
    }
    if (v16 != 2)
    {
      uint64_t v22 = 6;
      while (1)
      {
        uint64_t v23 = v22 - 3;
        if (__OFADD__(v22 - 4, 1)) {
          break;
        }
        if (v15[v22] == a3) {
          goto LABEL_30;
        }
        ++v22;
        if (v23 == v16) {
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      uint64_t v7 = sub_10004EA94(0, v7[2] + 1, 1, v7);
LABEL_7:
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1) {
        uint64_t v7 = sub_10004EA94((void *)(v10 > 1), v11 + 1, 1, v7);
      }
      v7[2] = v11 + 1;
      v7[v11 + 4] = a3;
      unint64_t v31 = v7;
      swift_bridgeObjectRetain();
      sub_10004ECB4((uint64_t *)&v31);
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
LABEL_25:
    swift_retain();
    uint64_t v17 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v17 = sub_10004EA94(0, v16 + 1, 1, v15);
    }
    unint64_t v19 = v17[2];
    unint64_t v18 = v17[3];
    if (v19 >= v18 >> 1) {
      uint64_t v17 = sub_10004EA94((void *)(v18 > 1), v19 + 1, 1, v17);
    }
    v17[2] = v19 + 1;
    v17[v19 + 4] = a3;
    swift_release();
    v30[0] = (uint64_t)v17;
    swift_bridgeObjectRetain();
    sub_10004ECB4(v30);
    swift_bridgeObjectRelease();
    uint64_t v15 = (int64_t *)v30[0];
    goto LABEL_30;
  }
  sub_100020378(&qword_100158290);
  uint64_t v4 = (void *)swift_allocObject();
  *((_OWORD *)v4 + 1) = xmmword_10010B120;
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_54;
    }
    goto LABEL_7;
  }
  unint64_t v31 = v7;
  swift_bridgeObjectRetain();
  sub_10004ECB4((uint64_t *)&v31);
LABEL_50:
  v4[4] = v31;
  return v4;
}

unint64_t sub_100050020()
{
  unint64_t result = qword_100158210;
  if (!qword_100158210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158210);
  }
  return result;
}

uint64_t sub_100050074(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for ConsistencyDownload(a2, a1);
}

id *sub_100050084(id *a1)
{
  return a1;
}

uint64_t sub_1000500AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000501A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  char v7 = *(unsigned char *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_100029274;
  return sub_10004CE38((uint64_t)v9, a2, v5, v6, v7, v8);
}

uint64_t getEnumTagSinglePayload for ConsistencyDownloadError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConsistencyDownloadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000502F0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_100050308(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConsistencyDownloadError()
{
  return &type metadata for ConsistencyDownloadError;
}

ValueMetadata *type metadata accessor for ActualConsistencyFetcher()
{
  return &type metadata for ActualConsistencyFetcher;
}

uint64_t destroy for ConsistencyDownload(id *a1)
{
  sub_100028A4C((uint64_t)(a1 + 3));
  sub_100028A4C((uint64_t)(a1 + 8));
  swift_release();

  return sub_100028A4C((uint64_t)(a1 + 15));
}

uint64_t initializeWithCopy for ConsistencyDownload(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  int v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = a2 + 24;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v9 = v8;
  unint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  id v11 = v4;
  id v12 = v5;
  v10(v6, v7, v9);
  long long v13 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 64, a2 + 64);
  uint64_t v14 = *(void **)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v14;
  uint64_t v15 = a2 + 120;
  long long v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v16;
  uint64_t v17 = v16;
  unint64_t v18 = **(void (***)(uint64_t, uint64_t, uint64_t))(v16 - 8);
  swift_retain();
  id v19 = v14;
  v18(a1 + 120, v15, v17);
  return a1;
}

uint64_t assignWithCopy for ConsistencyDownload(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  int v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 16);
  long long v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  sub_100048498((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  sub_100048498((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  unint64_t v10 = *(void **)(a1 + 112);
  id v11 = *(void **)(a2 + 112);
  *(void *)(a1 + 112) = v11;
  id v12 = v11;

  sub_100048498((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
  return a1;
}

__n128 initializeWithTake for ConsistencyDownload(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for ConsistencyDownload(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  long long v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  sub_100028A4C(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100028A4C(a1 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_release();
  long long v8 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);

  sub_100028A4C(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConsistencyDownload(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConsistencyDownload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConsistencyDownload()
{
  return &type metadata for ConsistencyDownload;
}

uint64_t initializeBufferWithCopyOfBuffer for ConsistencyDownload.ProofRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ConsistencyDownload.ProofRequest()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for ConsistencyDownload.ProofRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  return a1;
}

__n128 initializeWithTake for ConsistencyDownload.ProofRequest(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ConsistencyDownload.ProofRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConsistencyDownload.ProofRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConsistencyDownload.ProofRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConsistencyDownload.ProofRequest()
{
  return &type metadata for ConsistencyDownload.ProofRequest;
}

unint64_t sub_1000508DC()
{
  unint64_t result = qword_100158248;
  if (!qword_100158248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158248);
  }
  return result;
}

uint64_t sub_100050930()
{
  swift_unknownObjectRelease();

  sub_100028A4C(v0 + 56);
  sub_100028A4C(v0 + 96);
  swift_release();

  sub_100028A4C(v0 + 152);
  sub_10002BD3C(*(void *)(v0 + 200), *(void *)(v0 + 208));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 233, 7);
}

uint64_t sub_1000509B0(uint64_t a1)
{
  uint64_t v4 = v1[24];
  uint64_t v5 = v1[25];
  uint64_t v6 = v1[26];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100021024;
  return sub_10004DAB8(a1, v7, v8, (uint64_t)(v1 + 4), v4, v5, v6);
}

uint64_t *sub_100050A94()
{
  return &qword_100158298;
}

uint64_t sub_100050AA0()
{
  swift_beginAccess();
  uint64_t v0 = qword_100158298;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100050AF4(uint64_t a1, void *a2)
{
  qword_100158298 = a1;
  off_1001582A0 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100050B50())()
{
  return j__swift_endAccess;
}

uint64_t sub_100050BA8(uint64_t a1, uint64_t a2, char a3)
{
  return qword_10010B840[a3];
}

uint64_t sub_100050BBC()
{
  return Error<>._domain.getter();
}

uint64_t sub_100050BEC()
{
  return Error<>._code.getter();
}

uint64_t sub_100050C1C()
{
  return qword_10010B840[*(char *)(v0 + 16)];
}

uint64_t sub_100050C30(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v65 = a2;
  uint64_t v66 = a1;
  uint64_t v6 = type metadata accessor for SHA256();
  uint64_t v62 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SHA256Digest();
  uint64_t v64 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v63 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = static SerializationVersion.allCases.getter();
  uint64_t v12 = *v3;
  long long v13 = v11[2];
  if (!v13)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    sub_100051424();
    swift_allocError();
    *(void *)uint64_t v15 = v12;
    *(void *)(v15 + 8) = 0;
    *(unsigned char *)(v15 + 16) = 0;
    return swift_willThrow();
  }
  uint64_t v60 = v4;
  uint64_t v61 = v9;
  unint64_t v59 = a3;
  sub_10003283C();
  uint64_t v14 = 0;
  while (1)
  {
    LOBYTE(v69[0]) = *((unsigned char *)v11 + v14 + 32);
    LOBYTE(v67) = v12;
    if (dispatch thunk of static Equatable.== infix(_:_:)()) {
      break;
    }
    if (v13 == (void *)++v14) {
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRelease();
  long long v16 = static ATLeafType.allCases.getter();
  uint64_t v17 = v3[1];
  unint64_t v18 = v16[2];
  if (!v18)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    sub_100051424();
    swift_allocError();
    *(void *)uint64_t v20 = v17;
    *(void *)(v20 + 8) = 0;
    *(unsigned char *)(v20 + 16) = 1;
    return swift_willThrow();
  }
  sub_10003290C();
  uint64_t v19 = 0;
  while (1)
  {
    LOBYTE(v69[0]) = *((unsigned char *)v16 + v19 + 32);
    LOBYTE(v67) = v17;
    if (dispatch thunk of static Equatable.== infix(_:_:)()) {
      break;
    }
    if (v18 == (void *)++v19) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v22 = sub_100051478();
  dispatch thunk of HashFunction.init()();
  unint64_t v23 = v65;
  uint64_t v24 = v66;
  uint64_t v58 = v3;
  uint64_t v25 = v61;
  switch(v65 >> 62)
  {
    case 1uLL:
      unint64_t v57 = v22;
      if (v66 >> 32 < (int)v66)
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
      }
      sub_10002BD94(v66, v65);
      sub_100051558((int)v24, v24 >> 32);
      uint64_t v30 = v24;
      unint64_t v31 = v23;
      goto LABEL_20;
    case 2uLL:
      unint64_t v57 = v22;
      unint64_t v26 = v65;
      uint64_t v27 = *(void *)(v66 + 16);
      uint64_t v28 = *(void *)(v66 + 24);
      sub_10002BD94(v66, v65);
      swift_retain();
      swift_retain();
      uint64_t v29 = v60;
      sub_100051558(v27, v28);
      if (v29)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1000513D4);
      }
      swift_release();
      swift_release();
      uint64_t v30 = v24;
      unint64_t v31 = v26;
LABEL_20:
      sub_10002BD3C(v30, v31);
      goto LABEL_21;
    case 3uLL:
      memset(v69, 0, 14);
      goto LABEL_17;
    default:
      v69[0] = v66;
      LODWORD(v69[1]) = v65;
      WORD2(v69[1]) = WORD2(v65);
LABEL_17:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      sub_10002BD3C(v24, v23);
LABEL_21:
      uint64_t v32 = v63;
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v8, v6);
      uint64_t v70 = v25;
      unint64_t v71 = sub_100051608();
      uint64_t v33 = sub_100047360(v69);
      uint64_t v34 = v64;
      (*(void (**)(uint64_t *, char *, uint64_t))(v64 + 16))(v33, v32, v25);
      sub_10002BCF8(v69, v70);
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v25);
      uint64_t v36 = v67;
      unint64_t v35 = v68;
      sub_100028A4C((uint64_t)v69);
      uint64_t v37 = v58;
      uint64_t v38 = *((void *)v58 + 3);
      unint64_t v39 = *((void *)v58 + 4);
      uint64_t v40 = 0;
      switch(v39 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v38), v38)) {
            goto LABEL_53;
          }
          uint64_t v40 = HIDWORD(v38) - (int)v38;
LABEL_26:
          switch(v35 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v36), v36)) {
                goto LABEL_56;
              }
              if (v40 != HIDWORD(v36) - v36) {
                goto LABEL_35;
              }
              goto LABEL_31;
            case 2uLL:
              uint64_t v45 = *(void *)(v36 + 16);
              uint64_t v44 = *(void *)(v36 + 24);
              BOOL v43 = __OFSUB__(v44, v45);
              uint64_t v46 = v44 - v45;
              if (v43) {
                goto LABEL_55;
              }
              if (v40 == v46)
              {
LABEL_31:
                if (sub_10002C1CC(v38, v39, v36, v35))
                {
                  unint64_t v47 = *((void *)v37 + 5);
                  unint64_t v48 = v59;
                  if (v47 > v59) {
                    goto LABEL_51;
                  }
                  sub_100051424();
                  swift_allocError();
                  *(void *)uint64_t v49 = v47;
                  *(void *)(v49 + 8) = v48;
                  char v50 = 3;
                }
                else
                {
                  sub_100051424();
                  swift_allocError();
                  *(void *)uint64_t v49 = 0;
                  *(void *)(v49 + 8) = 0;
                  char v50 = 4;
                }
              }
              else
              {
LABEL_35:
                uint64_t v51 = 0;
                switch(v39 >> 62)
                {
                  case 1uLL:
                    if (__OFSUB__(HIDWORD(v38), v38)) {
                      goto LABEL_57;
                    }
                    uint64_t v51 = HIDWORD(v38) - (int)v38;
LABEL_44:
                    uint64_t v54 = 0;
                    switch(v35 >> 62)
                    {
                      case 1uLL:
                        if (__OFSUB__(HIDWORD(v36), v36)) {
                          goto LABEL_59;
                        }
                        uint64_t v54 = HIDWORD(v36) - (int)v36;
LABEL_49:
                        sub_100051424();
                        swift_allocError();
                        *(void *)uint64_t v49 = v51;
                        *(void *)(v49 + 8) = v54;
                        char v50 = 2;
                        break;
                      case 2uLL:
                        uint64_t v56 = *(void *)(v36 + 16);
                        uint64_t v55 = *(void *)(v36 + 24);
                        uint64_t v54 = v55 - v56;
                        if (!__OFSUB__(v55, v56)) {
                          goto LABEL_49;
                        }
                        goto LABEL_60;
                      case 3uLL:
                        goto LABEL_49;
                      default:
                        uint64_t v54 = BYTE6(v35);
                        goto LABEL_49;
                    }
                    break;
                  case 2uLL:
                    uint64_t v53 = *(void *)(v38 + 16);
                    uint64_t v52 = *(void *)(v38 + 24);
                    uint64_t v51 = v52 - v53;
                    if (!__OFSUB__(v52, v53)) {
                      goto LABEL_44;
                    }
                    goto LABEL_58;
                  case 3uLL:
                    goto LABEL_44;
                  default:
                    uint64_t v51 = BYTE6(v39);
                    goto LABEL_44;
                }
              }
              *(unsigned char *)(v49 + 16) = v50;
              swift_willThrow();
LABEL_51:
              uint64_t result = sub_10002BD3C(v36, v35);
              break;
            case 3uLL:
              if (v40) {
                goto LABEL_35;
              }
              goto LABEL_31;
            default:
              if (v40 != BYTE6(v35)) {
                goto LABEL_35;
              }
              goto LABEL_31;
          }
          break;
        case 2uLL:
          uint64_t v42 = *(void *)(v38 + 16);
          uint64_t v41 = *(void *)(v38 + 24);
          BOOL v43 = __OFSUB__(v41, v42);
          uint64_t v40 = v41 - v42;
          if (!v43) {
            goto LABEL_26;
          }
          goto LABEL_54;
        case 3uLL:
          goto LABEL_26;
        default:
          uint64_t v40 = BYTE6(v39);
          goto LABEL_26;
      }
      break;
  }
  return result;
}

unint64_t sub_100051424()
{
  unint64_t result = qword_1001582A8;
  if (!qword_1001582A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001582A8);
  }
  return result;
}

unint64_t sub_100051478()
{
  unint64_t result = qword_1001582B0;
  if (!qword_1001582B0)
  {
    type metadata accessor for SHA256();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001582B0);
  }
  return result;
}

unsigned char *sub_1000514D0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    unint64_t result = (unsigned char *)sub_100051788(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = (unsigned char *)sub_10005184C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    unint64_t result = (unsigned char *)sub_1000518C8((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100051558(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_100051478();
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_100051608()
{
  unint64_t result = qword_1001582B8;
  if (!qword_1001582B8)
  {
    type metadata accessor for SHA256Digest();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001582B8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ATLeafDataError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ATLeafDataError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000516F4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10005170C(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)unint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ATLeafDataError()
{
  return &type metadata for ATLeafDataError;
}

unint64_t sub_100051734()
{
  unint64_t result = qword_1001582C0;
  if (!qword_1001582C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001582C0);
  }
  return result;
}

uint64_t sub_100051788(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10005184C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1000518C8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10005194C(uint64_t a1)
{
  id v2 = (id)Application_EnumDescriptor();
  id v3 = [v2 textFormatNameForValue:a1];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_1000519D0()
{
  return Error<>._domain.getter();
}

uint64_t sub_100051A00()
{
  return Error<>._code.getter();
}

uint64_t sub_100051A30()
{
  return static CustomNSError.errorDomain.getter();
}

uint64_t sub_100051A48()
{
  return CustomNSError.errorCode.getter();
}

uint64_t sub_100051A60()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100051AF4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100051B78()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100051C0C()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t static KTSWDB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (unint64_t)static KTSwiftDB.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24)) & 1;
}

uint64_t sub_100051CD4()
{
  return swift_retain();
}

id sub_100051CDC()
{
  return *(id *)(v0 + 32);
}

uint64_t sub_100051CE4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100051D14()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100051D1C()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t sub_100051D24()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_100051D2C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10002BD94(v1, *(void *)(v0 + 48));
  return v1;
}

uint64_t KTSWDB.STHKey.description.getter()
{
  uint64_t v1 = *v0;
  id v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 46;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return 776492115;
}

uint64_t KTSWDB.STHKey.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 24));
  Hasher._combine(_:)(*(void *)(v0 + 32));
  uint64_t v2 = *(void *)(v0 + 40);
  unint64_t v1 = *(void *)(v0 + 48);
  sub_10002BD94(v2, v1);
  Data.hash(into:)();

  return sub_10002BD3C(v2, v1);
}

uint64_t sub_100051F40(char a1)
{
  return *(void *)&aApplicatlogbeg[8 * a1];
}

uint64_t sub_100051F68()
{
  return sub_100051F40(*v0);
}

uint64_t sub_100051F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100057DCC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100051F98(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100051FA4(uint64_t a1)
{
  unint64_t v2 = sub_100057D30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100051FE0(uint64_t a1)
{
  unint64_t v2 = sub_100057D30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t KTSWDB.STHKey.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100020378(&qword_1001582C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BCF8(a1, a1[3]);
  sub_100057D30();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LODWORD(v10) = *(_DWORD *)(v3 + 24);
    char v11 = 2;
    type metadata accessor for LogType(0);
    sub_100058514(&qword_1001582D0, 255, type metadata accessor for LogType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 40);
    char v11 = 4;
    sub_100057D84();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int KTSWDB.STHKey.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 24));
  Hasher._combine(_:)(*(void *)(v0 + 32));
  uint64_t v3 = *(void *)(v0 + 40);
  unint64_t v2 = *(void *)(v1 + 48);
  sub_10002BD94(v3, v2);
  Data.hash(into:)();
  sub_10002BD3C(v3, v2);
  return Hasher._finalize()();
}

uint64_t sub_10005231C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(_DWORD *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  *(void *)(a8 + 48) = a7;
  return result;
}

double KTSWDB.STHKey.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100057FF4(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100052384(void *a1)
{
  return KTSWDB.STHKey.encode(to:)(a1);
}

Swift::Int sub_10005239C()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 24);
  Swift::UInt64 v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  unint64_t v5 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  sub_10002BD94(v4, v5);
  Data.hash(into:)();
  sub_10002BD3C(v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_10005246C()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 24);
  Swift::UInt64 v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  unint64_t v5 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  sub_10002BD94(v4, v5);
  Data.hash(into:)();

  return sub_10002BD3C(v4, v5);
}

Swift::Int sub_100052530()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 24);
  Swift::UInt64 v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  unint64_t v5 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  sub_10002BD94(v4, v5);
  Data.hash(into:)();
  sub_10002BD3C(v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_100052600(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  void v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return _s15swtransparencyd6KTSWDBC6STHKeyV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_10005265C()
{
  return *(void *)v0;
}

uint64_t sub_100052664(uint64_t result)
{
  *Swift::UInt64 v1 = result;
  return result;
}

uint64_t sub_10005266C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100052674(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t sub_10005267C(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*sub_100052684())(void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_1000526A4(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t sub_1000526AC(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*sub_1000526B4())(void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_1000526D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 40);
  uint64_t v4 = type metadata accessor for Date();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10005274C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 40);
  uint64_t v4 = type metadata accessor for Date();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_1000527C4())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_10005280C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10005284C(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_100052894())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_1000528DC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 48);
  uint64_t v2 = *(void *)v1;
  sub_10002BD94(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_100052920(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 48);
  uint64_t result = sub_10002BD3C(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*sub_100052968())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_1000529B0()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 52);
  uint64_t v2 = *(void *)v1;
  sub_10002BD94(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_1000529F4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 52);
  uint64_t result = sub_10002BD3C(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*sub_100052A3C())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100052A84()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 56));
}

uint64_t sub_100052AA8(uint64_t a1)
{
  uint64_t result = type metadata accessor for KTSWDB.SignedLogHead();
  *(void *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_100052AD8())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100052B20()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead() + 60));
}

uint64_t sub_100052B44(char a1)
{
  uint64_t result = type metadata accessor for KTSWDB.SignedLogHead();
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*sub_100052B74())(void, void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

unint64_t sub_100052BC0(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x6E69676542676F6CLL;
      break;
    case 3:
      unint64_t result = 0x65707954676F6CLL;
      break;
    case 4:
      unint64_t result = 0x6E6F697369766572;
      break;
    case 6:
      unint64_t result = 0x5474706965636572;
      break;
    case 7:
      unint64_t result = 0x746163696C707061;
      break;
    case 8:
      unint64_t result = 0x4864616548676F6CLL;
      break;
    case 9:
      unint64_t result = 6845555;
      break;
    case 10:
      unint64_t result = 0x644965657274;
      break;
    case 11:
      unint64_t result = 0x7473656C694D7369;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100052D50()
{
  return sub_100052BC0(*v0);
}

uint64_t sub_100052D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100058980(a1, a2);
  *a3 = result;
  return result;
}

void sub_100052D80(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_100052D8C(uint64_t a1)
{
  unint64_t v2 = sub_1000584AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100052DC8(uint64_t a1)
{
  unint64_t v2 = sub_1000584AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100052E04(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100020378(&qword_1001582E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BCF8(a1, a1[3]);
  sub_1000584AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&long long v11 = *(void *)v3;
  char v12 = 0;
  type metadata accessor for KTResult(0);
  sub_100058514(&qword_1001582E8, 255, type metadata accessor for KTResult);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v11 = *(void *)(v3 + 8);
    char v12 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LODWORD(v11) = *(_DWORD *)(v3 + 24);
    char v12 = 3;
    type metadata accessor for LogType(0);
    sub_100058514(&qword_1001582D0, 255, type metadata accessor for LogType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v11 = *(void *)(v3 + 40);
    char v12 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v9 = type metadata accessor for KTSWDB.SignedLogHead();
    LOBYTE(v11) = 6;
    type metadata accessor for Date();
    sub_100058648(&qword_1001582F0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + *(int *)(v9 + 48));
    char v12 = 8;
    sub_100057D84();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + *(int *)(v9 + 52));
    char v12 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005324C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(_DWORD *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  uint64_t v19 = (int *)type metadata accessor for KTSWDB.SignedLogHead();
  uint64_t v20 = a9 + v19[10];
  uint64_t v21 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, a7, v21);
  unint64_t v23 = (void *)(a9 + v19[11]);
  void *v23 = a8;
  v23[1] = a10;
  uint64_t v24 = (void *)(a9 + v19[12]);
  void *v24 = a11;
  v24[1] = a12;
  uint64_t v25 = (void *)(a9 + v19[13]);
  void *v25 = a13;
  v25[1] = a14;
  *(void *)(a9 + v19[14]) = a15;
  *(unsigned char *)(a9 + v19[15]) = a16;
  return result;
}

uint64_t sub_100053354@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = sub_100020378(&qword_1001582F8);
  uint64_t v5 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = (int *)type metadata accessor for KTSWDB.SignedLogHead();
  __chkstk_darwin(v23);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BCF8(a1, a1[3]);
  sub_1000584AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100028A4C((uint64_t)a1);
  }
  uint64_t v20 = a2;
  uint64_t v21 = v5;
  type metadata accessor for KTResult(0);
  char v25 = 0;
  sub_100058514(&qword_100158300, 255, type metadata accessor for KTResult);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)uint64_t v9 = v24;
  char v25 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v10 = v23;
  *((void *)v9 + 1) = v24;
  LOBYTE(v24) = 2;
  *((void *)v9 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  type metadata accessor for LogType(0);
  char v25 = 3;
  sub_100058514(&qword_100158308, 255, type metadata accessor for LogType);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_DWORD *)v9 + 6) = v24;
  LOBYTE(v24) = 4;
  *((void *)v9 + 4) = KeyedDecodingContainer.decode(_:forKey:)();
  char v25 = 5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((void *)v9 + 5) = v24;
  uint64_t v11 = type metadata accessor for Date();
  v19[1] = v19;
  v19[0] = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v24) = 6;
  sub_100058648(&qword_100158310, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v19[0] + 32))(&v9[v10[10]], v13, v11);
  LOBYTE(v24) = 7;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = (uint64_t *)&v9[v10[11]];
  uint64_t *v15 = v14;
  v15[1] = v16;
  char v25 = 8;
  sub_10005855C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v9[v10[12]] = v24;
  char v25 = 9;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v9[v23[13]] = v24;
  LOBYTE(v24) = 10;
  *(void *)&v9[v23[14]] = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v24) = 11;
  char v17 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v22);
  v9[v23[15]] = v17 & 1;
  sub_1000585A4((uint64_t)v9, v20);
  sub_100028A4C((uint64_t)a1);
  return sub_10002BFE0((uint64_t)v9);
}

uint64_t sub_100053AC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100053354(a1, a2);
}

uint64_t sub_100053ADC(void *a1)
{
  return sub_100052E04(a1);
}

uint64_t sub_100053AF4()
{
  uint64_t v2 = *(void *)(v0 + 24);
  sub_10005BC48();
  if (!v1)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v3 + 160))();
    if (v4
      && (uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 112),
          swift_retain(),
          uint64_t v2 = v5(0),
          char v7 = v6,
          swift_release(),
          (v7 & 1) == 0)
      && v2)
    {
      swift_release();
      swift_release();
    }
    else
    {
      sub_10005BC48();
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 160))(v8);
      swift_release();
      swift_release();
      swift_release();
      if (v10)
      {
        swift_release();
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

void sub_100053CB8()
{
  sub_10005BBBC();
  if (!v0) {
    sub_100053D04();
  }
}

void sub_100053D04()
{
  sub_10005BBBC();
  if (!v0)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    sub_10005BBBC();
    swift_bridgeObjectRelease();
  }
}

uint64_t KTSWDB.__allocating_init(db:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  KTSWDB.init(db:)(a1);
  return v2;
}

void *KTSWDB.init(db:)(uint64_t a1)
{
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v37 = *(void *)(v40 - 8);
  uint64_t v3 = __chkstk_darwin(v40);
  unint64_t v39 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v38 = (char *)&v36 - v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - v7;
  v1[2] = 2;
  v1[3] = a1;
  sub_100058608();
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin(v10);
  uint64_t v42 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100058648(&qword_100158328, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
  sub_100020378(&qword_100158330);
  sub_100058690();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v11);
  (*(void (**)(char *, void))(v13 + 104))((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v14 = v1;
  v1[4] = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v15 = v41;
  uint64_t v16 = sub_100053AF4();
  if (v15)
  {
    swift_release();
LABEL_3:
    swift_release();
    return v14;
  }
  unint64_t v18 = v38;
  uint64_t v19 = v39;
  uint64_t v20 = v40;
  uint64_t v41 = a1;
  if (v16 == 1)
  {
    unint64_t v26 = v38;
    Logger.init()();
    swift_retain();
    uint64_t v27 = Logger.logObject.getter();
    uint64_t v28 = v14;
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 134349056;
      uint64_t v42 = 2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Opening existing swt database with schema version 1. Dropping table and replacing with schema version %{public}ld.", v30, 0xCu);
      unint64_t v26 = v18;
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v20);
    sub_10005BBBC();
    uint64_t v14 = v28;
    sub_100053D04();
    goto LABEL_3;
  }
  if (!v16)
  {
    uint64_t v21 = v8;
    Logger.init()();
    swift_retain();
    uint64_t v22 = Logger.logObject.getter();
    unint64_t v23 = v14;
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v24))
    {
      char v25 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v25 = 134349056;
      uint64_t v21 = v8;
      uint64_t v42 = 2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v22, v24, "Creating new swt database with schema version %{public}ld.", v25, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v14 = v23;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v20);
    sub_100053D04();
    goto LABEL_3;
  }
  unint64_t v31 = v39;
  Logger.init()();
  swift_retain();
  uint64_t v32 = Logger.logObject.getter();
  uint64_t v33 = v14;
  os_log_type_t v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v34))
  {
    unint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v35 = 134349056;
    uint64_t v42 = 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v32, v34, "Opening existing swt database with schema version %{public}ld", v35, 0xCu);
    unint64_t v31 = v19;
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  swift_release();
  uint64_t v14 = v33;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v20);
  return v14;
}

uint64_t sub_1000544B4()
{
  Swift::String v1 = *(NSObject **)(v0 + 32);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1000586EC;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_100025E44;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  void v5[2] = sub_100021288;
  _OWORD v5[3] = &unk_100138508;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000545E8()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100054630()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_100054690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_10005BC48();
  if (!v6)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 120);
    v14(0, *(void *)(a2 + 16));
    (*(void (**)(uint64_t, void))(*(void *)v13 + 112))(1, *(unsigned int *)(a2 + 24));
    v14(2, *(void *)(a2 + 32));
    (*(void (**)(uint64_t, void, void))(*(void *)v13 + 104))(3, *(void *)a2, *(void *)(a2 + 8));
    uint64_t v15 = *(void *)(a2 + 40);
    uint64_t v16 = *(void *)(a2 + 48);
    char v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 144);
    v17(4, v15, v16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 128))(5, a3);
    v17(6, a4, a5);
    uint64_t v18 = v14(7, a6);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 160))(v18))
    {
      swift_release();
      sub_10005913C();
      swift_allocError();
      *(_OWORD *)uint64_t v19 = xmmword_10010B870;
      *(_DWORD *)(v19 + 16) = 0;
      swift_willThrow();
    }
    else
    {
      (*(void (**)(void))(*(void *)v13 + 96))();
    }
    swift_release();
  }
}

uint64_t sub_1000548D0()
{
  return sub_100054954();
}

uint64_t sub_1000548FC()
{
  return sub_100054954();
}

uint64_t sub_100054928()
{
  return sub_100054954();
}

uint64_t sub_100054954()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_1000549A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10005BC48();
  if (!v3)
  {
    if (a2 >> 31)
    {
      __break(1u);
    }
    else
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void (**)(uint64_t, unint64_t))(*(void *)v6 + 112);
      v8(0, a2);
      (*(void (**)(uint64_t, void, void))(*(void *)v7 + 104))(1, *(void *)a3, *(void *)(a3 + 8));
      uint64_t v9 = *(void (**)(uint64_t, void))(*(void *)v7 + 120);
      v9(2, *(void *)(a3 + 16));
      v8(3, *(unsigned int *)(a3 + 24));
      v9(4, *(void *)(a3 + 32));
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 144))(5, *(void *)(a3 + 40), *(void *)(a3 + 48));
      if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 160))(v10))
      {
        swift_release();
        sub_10005913C();
        swift_allocError();
        *(_OWORD *)uint64_t v11 = xmmword_10010B870;
        *(_DWORD *)(v11 + 16) = 0;
        swift_willThrow();
      }
      else
      {
        (*(void (**)(void))(*(void *)v7 + 96))();
      }
      swift_release();
    }
  }
}

uint64_t sub_100054B84()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_100054BDC(uint64_t a1, uint64_t a2)
{
  sub_10005BC48();
  if (!v2)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)v4 + 112);
    v6(0, 1);
    (*(void (**)(uint64_t, void, void))(*(void *)v5 + 104))(1, *(void *)a2, *(void *)(a2 + 8));
    uint64_t v7 = *(void (**)(uint64_t, void))(*(void *)v5 + 120);
    v7(2, *(void *)(a2 + 16));
    v6(3, *(unsigned int *)(a2 + 24));
    v7(4, *(void *)(a2 + 32));
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 144))(5, *(void *)(a2 + 40), *(void *)(a2 + 48));
    if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 160))(v8))
    {
      swift_release();
      sub_10005913C();
      swift_allocError();
      *(_OWORD *)uint64_t v9 = xmmword_10010B870;
      *(_DWORD *)(v9 + 16) = 0;
      swift_willThrow();
    }
    else
    {
      (*(void (**)(void))(*(void *)v5 + 96))();
    }
    swift_release();
  }
}

uint64_t sub_100054DBC()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_100054E2C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_10005BC48();
  if (!v2)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void (**)(uint64_t, void))(*(void *)v5 + 120);
    v7(0, *(void *)(a1 + 16));
    (*(void (**)(uint64_t, void))(*(void *)v6 + 112))(1, *(unsigned int *)(a1 + 24));
    v7(2, *(void *)(a1 + 32));
    (*(void (**)(uint64_t, void, void))(*(void *)v6 + 104))(3, *(void *)a1, *(void *)(a1 + 8));
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v6 + 144))(4, *(void *)(a1 + 40), *(void *)(a1 + 48));
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 160))(v8);
    uint64_t v10 = v9;
    if (!v9)
    {
      sub_10005913C();
      swift_allocError();
      *(void *)uint64_t v28 = 0;
      *(void *)(v28 + 8) = 0;
      *(_DWORD *)(v28 + 16) = 0;
      swift_willThrow();
      swift_release();
      return;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 104);
    swift_retain_n();
    uint64_t v12 = v11(0);
    if ((v12 & 0x100000000) != 0) {
      goto LABEL_11;
    }
    unsigned int v13 = v12;
    uint64_t v14 = v11(1);
    if ((v14 & 0x100000000) != 0) {
      goto LABEL_11;
    }
    unsigned int v15 = v14;
    uint64_t v16 = (uint64_t (**)(uint64_t))(*(void *)v10 + 112);
    uint64_t v69 = *v16;
    unint64_t v68 = v16;
    uint64_t v17 = v69(2);
    if ((v18 & 1) != 0
      || (v67 = v17, uint64_t v19 = v11(3), (v19 & 0x100000000) != 0)
      || (v66 = v19, uint64_t v20 = v69(4), (v21 & 1) != 0)
      || (v61 = v20, uint64_t v22 = v11(5), (v22 & 0x100000000) != 0))
    {
LABEL_11:
      swift_release();
      goto LABEL_12;
    }
    uint64_t v58 = v22;
    uint64_t v65 = type metadata accessor for Date();
    uint64_t v60 = &v53;
    uint64_t v63 = *(void *)(v65 - 8);
    __chkstk_darwin(v65);
    uint64_t v62 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v24 = sub_100020378((uint64_t *)&unk_1001580E0);
    unint64_t v59 = &v53;
    __chkstk_darwin(v24 - 8);
    uint64_t v64 = (uint64_t)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t))(*(void *)v10 + 120))(6);
    uint64_t v26 = v63;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v64, 1, v65) == 1)
    {
      swift_release();
      sub_10005B238(v64);
LABEL_12:
      sub_10005913C();
      swift_allocError();
      *(void *)uint64_t v27 = 0;
      *(void *)(v27 + 8) = 0;
      *(_DWORD *)(v27 + 16) = 0;
      swift_willThrow();
      swift_release();
      swift_release_n();
      return;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v62, v64, v65);
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(7);
    if (!v30)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
      swift_release();
      goto LABEL_12;
    }
    uint64_t v55 = v29;
    uint64_t v64 = v30;
    unint64_t v31 = (unint64_t *)(*(void *)v10 + 128);
    unint64_t v59 = (uint64_t *)*v31;
    unint64_t v57 = v31;
    uint64_t v32 = ((uint64_t (*)(uint64_t))v59)(8);
    if (v33 >> 60 == 15)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
LABEL_29:
      swift_release();
LABEL_30:
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    uint64_t v54 = v32;
    unint64_t v56 = v33;
    unint64_t v57 = (unint64_t *)((uint64_t (*)(uint64_t))v59)(9);
    unint64_t v59 = (uint64_t *)v34;
    if (v34 >> 60 == 15)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
      uint64_t v35 = v54;
      unint64_t v36 = v56;
LABEL_28:
      sub_100030D78(v35, v36);
      goto LABEL_29;
    }
    uint64_t v69 = (uint64_t (*)(uint64_t))v69(10);
    if (v37)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
      sub_100030D78(v54, v56);
      uint64_t v35 = (uint64_t)v57;
      unint64_t v36 = (unint64_t)v59;
      goto LABEL_28;
    }
    uint64_t v38 = v11(11);
    swift_release();
    if ((v38 & 0x100000000) != 0)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
      sub_100030D78((uint64_t)v57, (unint64_t)v59);
      sub_100030D78(v54, v56);
      goto LABEL_30;
    }
    if ((v13 & 0x80000000) != 0 || (v15 & 0x80000000) != 0 || (v58 & 0x80000000) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v39 = v13;
      uint64_t v40 = v15;
      uint64_t v41 = v58;
      uint64_t v42 = (int *)type metadata accessor for KTSWDB.SignedLogHead();
      (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(a2 + v42[10], v62, v65);
      *(void *)a2 = v39;
      *(void *)(a2 + 8) = v40;
      *(void *)(a2 + 16) = v67;
      *(_DWORD *)(a2 + 24) = v66;
      *(void *)(a2 + 32) = v61;
      *(void *)(a2 + 40) = v41;
      BOOL v43 = (uint64_t *)(a2 + v42[11]);
      uint64_t v44 = v54;
      uint64_t v45 = v64;
      uint64_t *v43 = v55;
      v43[1] = v45;
      uint64_t v46 = (uint64_t *)(a2 + v42[12]);
      unint64_t v47 = v56;
      uint64_t v48 = (uint64_t)v57;
      uint64_t *v46 = v44;
      v46[1] = v47;
      uint64_t v49 = (uint64_t *)(a2 + v42[13]);
      unint64_t v50 = (unint64_t)v59;
      *uint64_t v49 = v48;
      v49[1] = v50;
      *(void *)(a2 + v42[14]) = v69;
      *(unsigned char *)(a2 + v42[15]) = v38 != 0;
      uint64_t v51 = *(void (**)(uint64_t))(*(void *)v6 + 96);
      sub_10005B298(v44, v47);
      uint64_t v52 = sub_10005B298(v48, v50);
      v51(v52);
      swift_release_n();
      swift_release();
      sub_100030D78(v48, v50);
      sub_100030D78(v44, v56);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
    }
  }
}

uint64_t sub_100055608()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_100055660(uint64_t a1, uint64_t a2)
{
  sub_10005BC48();
  if (!v2)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void (**)(uint64_t, void))(*(void *)v4 + 120);
    v6(0, *(void *)(a2 + 16));
    (*(void (**)(uint64_t, void))(*(void *)v5 + 112))(1, *(unsigned int *)(a2 + 24));
    v6(2, *(void *)(a2 + 32));
    (*(void (**)(uint64_t, void, void))(*(void *)v5 + 104))(3, *(void *)a2, *(void *)(a2 + 8));
    (*(void (**)(uint64_t, void, void))(*(void *)v5 + 144))(4, *(void *)(a2 + 40), *(void *)(a2 + 48));
    (*(void (**)(uint64_t (*)(), void))(*(void *)v5 + 152))(sub_10002F848, 0);
    swift_release();
  }
}

uint64_t sub_1000557D0()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_100055830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10005BC48();
  if (!v5)
  {
    uint64_t v11 = v10;
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v10 + 104))(0, a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 120))(1, a4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 112))(2, a5);
    (*(void (**)(uint64_t (*)(), void))(*(void *)v11 + 152))(sub_10002F848, 0);
    swift_release();
  }
}

uint64_t sub_100055970()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_1000559EC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  if (a2)
  {
    sub_10005BC48();
    if (v10) {
      return;
    }
    uint64_t v18 = v21;
    uint64_t v22 = *(void (**)(void, uint64_t, uint64_t))(*(void *)v21 + 104);
    swift_retain();
    v22(0, a4, a5);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)v18 + 112);
    v23(1, a6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 128))(2, a7);
    if (!(a8 >> 31))
    {
      v23(3, a8);
      if (!(a9 >> 31))
      {
        ((void (*)(uint64_t))v23)(4);
        if (!(a10 >> 31))
        {
          ((void (*)(uint64_t))v23)(5);
          goto LABEL_14;
        }
LABEL_23:
        __break(1u);
        return;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_10005BC48();
  if (v10) {
    return;
  }
  uint64_t v18 = v17;
  uint64_t v19 = *(void (**)(void, uint64_t, uint64_t))(*(void *)v17 + 104);
  swift_retain();
  v19(0, a4, a5);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)v18 + 112);
  v20(1, a6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 128))(2, a7);
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v20(3, a1);
  if (a8 >> 31)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v20(4, a8);
  if (a9 >> 31)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v20(5, a9);
  if (a10 >> 31)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  ((void (*)(uint64_t))v20)(6);
LABEL_14:
  swift_release();
  (*(void (**)(uint64_t (*)(), void))(*(void *)v18 + 152))(sub_10002F848, 0);
  swift_release();
}

uint64_t sub_100055D2C()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_100055D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10005BC48();
  if (!v5)
  {
    uint64_t v11 = v10;
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v10 + 104))(0, a2, a3);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)v11 + 112);
    v12(1, a4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 128))(2, a5);
    v12(3, 1);
    v12(4, 1);
    v12(5, 1);
    (*(void (**)(uint64_t (*)(), void))(*(void *)v11 + 152))(sub_10002F848, 0);
    swift_release();
  }
}

uint64_t sub_100055F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t sub_100055F14()
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "Milestone(t=");
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 1030037548;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 1030889516;
  v3._object = (void *)0xE400000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7[0];
}

uint64_t sub_10005606C(char a1)
{
  return *(void *)&aTreeid_1[8 * a1];
}

uint64_t sub_10005608C()
{
  return sub_10005606C(*v0);
}

uint64_t sub_100056094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100058E1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000560BC(uint64_t a1)
{
  unint64_t v2 = sub_10005892C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000560F8(uint64_t a1)
{
  unint64_t v2 = sub_10005892C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100056134(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  v11[1] = a3;
  uint64_t v6 = sub_100020378(&qword_100158340);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BCF8(a1, a1[3]);
  sub_10005892C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v14 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v13 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000562D8(void *a1)
{
  uint64_t result = sub_100058F64(a1);
  if (v1) {
    return v3 & 1;
  }
  return result;
}

uint64_t sub_100056320@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100058F64(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(void *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_100056358(void *a1)
{
  return sub_100056134(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_100056384()
{
  return sub_100055F14();
}

uint64_t sub_10005639C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a4)
  {
    sub_10005BC48();
    if (v5) {
      return v6;
    }
    uint64_t v11 = v13;
    char v14 = *(void (**)(void, uint64_t, uint64_t))(*(void *)v13 + 104);
    uint64_t v6 = *(void *)v13 + 104;
    swift_retain();
    v14(0, a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 112))(1, a5);
  }
  else
  {
    uint64_t v6 = a3;
    sub_10005BC48();
    if (v5) {
      return v6;
    }
    uint64_t v11 = v10;
    int v12 = *(void (**)(void, uint64_t, uint64_t))(*(void *)v10 + 104);
    swift_retain();
    v12(0, a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 120))(1, v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 112))(2, a5);
  }
  uint64_t v15 = swift_release();
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 160))(v15);
  if (!v16) {
    goto LABEL_8;
  }
  uint64_t v17 = *(void (**)(void))(*(void *)v16 + 112);
  uint64_t v18 = ((uint64_t (*)(void))v17)(0);
  uint64_t v19 = v17;
  uint64_t v6 = v18;
  char v25 = v20;
  v19(1);
  char v22 = v25 | v21;
  swift_release();
  if (v22)
  {
LABEL_8:
    sub_10005913C();
    swift_allocError();
    *(void *)uint64_t v23 = a1;
    *(void *)(v23 + 8) = a2;
    *(_DWORD *)(v23 + 16) = a5;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  swift_release();
  return v6;
}

uint64_t sub_100056638(uint64_t a1, uint64_t a2)
{
  char v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 112);
  uint64_t v4 = v3(0);
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v3(1);
  if (v8) {
    return 0;
  }
  uint64_t v9 = v7;
  uint64_t v10 = v3(2);
  if (v11) {
    return 0;
  }
  uint64_t v12 = v10;
  uint64_t v13 = 1;
  swift_beginAccess();
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v12;
  *(unsigned char *)(a2 + 48) = 0;
  return v13;
}

uint64_t sub_100056704()
{
  return sub_10005675C();
}

uint64_t sub_100056730()
{
  return sub_10005675C();
}

uint64_t sub_10005675C()
{
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

void sub_1000567D0(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a2 & 1) == 0)
  {
    sub_10005BC48();
    if (v10) {
      return;
    }
    uint64_t v17 = v16;
    uint64_t v39 = a7;
    uint64_t v18 = *(void (**)(void, uint64_t, uint64_t))(*(void *)v16 + 104);
    swift_retain();
    uint64_t v37 = a4;
    v18(0, a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 120))(1, a1);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)v17 + 112);
    unsigned int v38 = a5;
    v19(2, a5);
    if (!(a6 >> 31))
    {
      uint64_t v20 = 3;
      goto LABEL_8;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  sub_10005BC48();
  if (v10) {
    return;
  }
  uint64_t v17 = v21;
  uint64_t v39 = a7;
  char v22 = *(void (**)(void, uint64_t, uint64_t))(*(void *)v21 + 104);
  swift_retain();
  uint64_t v37 = a4;
  v22(0, a3, a4);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)v17 + 112);
  unsigned int v38 = a5;
  v19(1, a5);
  if (a6 >> 31) {
    goto LABEL_13;
  }
  uint64_t v20 = 2;
LABEL_8:
  v19(v20, a6);
  swift_release();
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(unsigned char *)(v23 + 48) = 1;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)v17 + 152);
  swift_retain();
  v24(a10, v23);
  swift_release();
  swift_beginAccess();
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = *(void *)(v23 + 24);
  uint64_t v27 = *(void *)(v23 + 32);
  uint64_t v36 = *(void *)(v23 + 40);
  char v28 = *(unsigned char *)(v23 + 48);
  swift_release();
  if (v28)
  {
    uint64_t v29 = sub_10005639C(a3, v37, a1, a2 & 1, v38);
    uint64_t v31 = v30;
    char v33 = v32;
    uint64_t v35 = v34;
    swift_release();
    *(void *)uint64_t v39 = v29;
    *(void *)(v39 + 8) = v31;
    *(unsigned char *)(v39 + 16) = v33 & 1;
    *(void *)(v39 + 24) = v35;
  }
  else
  {
    swift_release();
    *(void *)uint64_t v39 = v25;
    *(void *)(v39 + 8) = v26;
    *(unsigned char *)(v39 + 16) = v27 & 1;
    *(void *)(v39 + 24) = v36;
  }
}

uint64_t sub_100056AFC()
{
  sub_100020378(&qword_100158350);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

void sub_100056B80(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  sub_10005BC48();
  if (!v6)
  {
    uint64_t v14 = v13;
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v13 + 104))(0, a1, a2);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)v14 + 120);
    v15(1, a3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 112))(2, a4);
    v15(3, a5);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = _swiftEmptyArrayStorage;
    uint64_t v17 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v14 + 152);
    swift_retain();
    v17(sub_10005AF5C, v16);
    swift_release();
    swift_release();
    swift_beginAccess();
    *a6 = *(void *)(v16 + 16);
    swift_bridgeObjectRetain();
    swift_release();
  }
}

uint64_t sub_100056D64()
{
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

void sub_100056DD0(uint64_t a1@<X1>, unint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X4>, void *a5@<X8>)
{
  sub_10005BC48();
  if (!v5)
  {
    uint64_t v12 = v11;
    uint64_t v17 = a5;
    (*(void (**)(void, void, void))(*(void *)v11 + 104))(0, *(void *)a1, *(void *)(a1 + 8));
    uint64_t v13 = *(void (**)(uint64_t, void))(*(void *)v12 + 120);
    v13(1, *(void *)(a1 + 16));
    uint64_t v14 = *(void (**)(void))(*(void *)v12 + 112);
    ((void (*)(uint64_t, void))v14)(2, *(unsigned int *)(a1 + 24));
    v13(3, *(void *)(a1 + 32));
    (*(void (**)(uint64_t, void, void))(*(void *)v12 + 144))(4, *(void *)(a1 + 40), *(void *)(a1 + 48));
    if (a2 >> 31)
    {
      __break(1u);
    }
    else
    {
      ((void (*)(uint64_t, unint64_t))v14)(5, a2);
      if (!(a3 >> 31))
      {
        ((void (*)(uint64_t, unint64_t))v14)(6, a3);
        if (!(a4 >> 31))
        {
          v14(7);
          uint64_t v15 = swift_allocObject();
          *(void *)(v15 + 16) = 0;
          uint64_t v16 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(void *)v12 + 152);
          swift_retain();
          v16(sub_10005B078, v15);
          swift_release();
          swift_release();
          swift_beginAccess();
          *uint64_t v17 = *(void *)(v15 + 16);
          swift_release();
          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

uint64_t sub_100057040()
{
  sub_100020378(&qword_100158218);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

void sub_1000570C8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned int a4@<W4>, unint64_t a5@<X5>, unint64_t a6@<X6>, unint64_t a7@<X7>, void *a8@<X8>)
{
  sub_10005BC48();
  if (!v8)
  {
    uint64_t v17 = v16;
    uint64_t v21 = a8;
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v16 + 104))(0, a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 120))(1, a3);
    uint64_t v18 = *(void (**)(uint64_t, unint64_t))(*(void *)v17 + 112);
    v18(2, a4);
    if (a5 >> 31)
    {
      __break(1u);
    }
    else
    {
      v18(3, a5);
      if (!(a6 >> 31))
      {
        v18(4, a6);
        if (!(a7 >> 31))
        {
          v18(5, a7);
          uint64_t v19 = swift_allocObject();
          *(void *)(v19 + 16) = _swiftEmptyArrayStorage;
          uint64_t v20 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(void *)v17 + 152);
          swift_retain();
          v20(sub_10005AF60, v19);
          swift_release();
          swift_release();
          swift_beginAccess();
          *uint64_t v21 = *(void *)(v19 + 16);
          swift_bridgeObjectRetain();
          swift_release();
          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

uint64_t sub_100057310()
{
  sub_100020378(&qword_100158350);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100057394()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t KTSWDB.deinit()
{
  swift_release();

  return v0;
}

uint64_t KTSWDB.__deallocating_deinit()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100057464()
{
  return sub_1000544B4();
}

uint64_t sub_100057488()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000574E8()
{
  return sub_10005756C();
}

uint64_t sub_100057514()
{
  return sub_10005756C();
}

uint64_t sub_100057540()
{
  return sub_10005756C();
}

uint64_t sub_10005756C()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000575B8()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100057610()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100057680()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000576D8()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100057738()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000577B4()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100057818()
{
  return sub_100057880();
}

uint64_t sub_10005784C()
{
  return sub_100057880();
}

uint64_t sub_100057880()
{
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000578F8()
{
  sub_100020378(&qword_100158350);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100057978()
{
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000579E4()
{
  sub_100020378(&qword_100158218);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

unint64_t sub_100057A68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for KTSwiftDB();
  return (unint64_t)static KTSwiftDB.== infix(_:_:)(*(void *)(v2 + 24), *(void *)(v3 + 24)) & 1;
}

void *sub_100057AB0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100057AC0(void *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int sub_100057ACC()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100057B14()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100057B40()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _s15swtransparencyd6KTSWDBC6STHKeyV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (*(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      unint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = 0;
      switch(v8 >> 62)
      {
        case 1uLL:
          LODWORD(v9) = HIDWORD(v7) - v7;
          if (__OFSUB__(HIDWORD(v7), v7))
          {
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
            JUMPOUT(0x100057D10);
          }
          uint64_t v9 = (int)v9;
LABEL_14:
          uint64_t v14 = *(void *)(a2 + 40);
          unint64_t v13 = *(void *)(a2 + 48);
          switch(v13 >> 62)
          {
            case 1uLL:
              LODWORD(v15) = HIDWORD(v14) - v14;
              if (__OFSUB__(HIDWORD(v14), v14)) {
                goto LABEL_28;
              }
              uint64_t v15 = (int)v15;
LABEL_19:
              if (v9 != v15) {
                return 0;
              }
              if (v9 >= 1)
              {
                sub_10002BD94(v14, v13);
                if ((sub_1000320C0(v7, v8, v14, v13) & 1) == 0) {
                  return 0;
                }
              }
LABEL_22:
              uint64_t result = 1;
              break;
            case 2uLL:
              uint64_t v17 = *(void *)(v14 + 16);
              uint64_t v16 = *(void *)(v14 + 24);
              BOOL v12 = __OFSUB__(v16, v17);
              uint64_t v15 = v16 - v17;
              if (!v12) {
                goto LABEL_19;
              }
              goto LABEL_29;
            case 3uLL:
              if (v9) {
                return 0;
              }
              goto LABEL_22;
            default:
              uint64_t v15 = BYTE6(v13);
              goto LABEL_19;
          }
          break;
        case 2uLL:
          uint64_t v11 = *(void *)(v7 + 16);
          uint64_t v10 = *(void *)(v7 + 24);
          BOOL v12 = __OFSUB__(v10, v11);
          uint64_t v9 = v10 - v11;
          if (!v12) {
            goto LABEL_14;
          }
          goto LABEL_27;
        case 3uLL:
          goto LABEL_14;
        default:
          uint64_t v9 = BYTE6(v8);
          goto LABEL_14;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100057D30()
{
  unint64_t result = qword_10015D490;
  if (!qword_10015D490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015D490);
  }
  return result;
}

unint64_t sub_100057D84()
{
  unint64_t result = qword_1001582D8;
  if (!qword_1001582D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001582D8);
  }
  return result;
}

uint64_t sub_100057DCC(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x746163696C707061 && a2 == 0xEB000000006E6F69;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69676542676F6CLL && a2 == 0xEA0000000000734DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65707954676F6CLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4864616548676F6CLL && a2 == 0xEB00000000687361)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100057FF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100020378(&qword_1001584F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BCF8(a1, a1[3]);
  sub_100057D30();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100028A4C((uint64_t)a1);
  }
  LOBYTE(v17) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  LOBYTE(v17) = 1;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  type metadata accessor for LogType(0);
  char v20 = 2;
  sub_100058514(&qword_100158308, 255, type metadata accessor for LogType);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v19 = v17;
  LOBYTE(v17) = 3;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 4;
  sub_10005855C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = v17;
  unint64_t v13 = v18;
  swift_bridgeObjectRetain();
  sub_10002BD94(v12, v13);
  swift_bridgeObjectRelease();
  sub_100028A4C((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = sub_10002BD3C(v12, v13);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v16;
  *(_DWORD *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v13;
  return result;
}

uint64_t type metadata accessor for KTSWDB.SignedLogHead()
{
  uint64_t result = qword_10015DE30;
  if (!qword_10015DE30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005835C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    goto LABEL_17;
  }
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    goto LABEL_17;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
    goto LABEL_17;
  }
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
    goto LABEL_17;
  }
  if (*(void *)(a1 + 40) != *(void *)(a2 + 40)) {
    goto LABEL_17;
  }
  BOOL v4 = (int *)type metadata accessor for KTSWDB.SignedLogHead();
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v5 = v4[11];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  unint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v11 = 0, (v10 & 1) != 0))
  {
    if ((sub_10002C1CC(*(void *)(a1 + v4[12]), *(void *)(a1 + v4[12] + 8), *(void *)(a2 + v4[12]), *(void *)(a2 + v4[12] + 8)) & 1) != 0&& (sub_10002C1CC(*(void *)(a1 + v4[13]), *(void *)(a1 + v4[13] + 8), *(void *)(a2 + v4[13]), *(void *)(a2 + v4[13] + 8)) & 1) != 0&& *(void *)(a1 + v4[14]) == *(void *)(a2 + v4[14]))
    {
      char v11 = *(unsigned char *)(a1 + v4[15]) ^ *(unsigned char *)(a2 + v4[15]) ^ 1;
      return v11 & 1;
    }
LABEL_17:
    char v11 = 0;
  }
  return v11 & 1;
}

unint64_t sub_1000584AC()
{
  unint64_t result = qword_10015D498;
  if (!qword_10015D498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015D498);
  }
  return result;
}

void type metadata accessor for KTResult(uint64_t a1)
{
}

uint64_t sub_100058514(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005855C()
{
  unint64_t result = qword_100158318;
  if (!qword_100158318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158318);
  }
  return result;
}

uint64_t sub_1000585A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTSWDB.SignedLogHead();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100058608()
{
  unint64_t result = qword_100158320;
  if (!qword_100158320)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100158320);
  }
  return result;
}

uint64_t sub_100058648(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100058690()
{
  unint64_t result = qword_100158338;
  if (!qword_100158338)
  {
    sub_100020418(&qword_100158330);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158338);
  }
  return result;
}

void sub_1000586EC()
{
}

uint64_t sub_100058710()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100058720(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100058730()
{
  return swift_release();
}

void sub_100058738()
{
  sub_10005BC48();
  if (!v0)
  {
    (*(void (**)(uint64_t (*)(), void))(*(void *)v1 + 152))(sub_10002F848, 0);
    swift_release();
  }
}

void sub_1000587D0()
{
}

void sub_1000587E8()
{
  sub_1000549A4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_100058820()
{
  sub_1000549A4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_100058858()
{
  sub_1000549A4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_100058890()
{
  sub_100054BDC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000588AC(uint64_t a1@<X8>)
{
  sub_100054E2C(*(void *)(v1 + 24), a1);
}

void sub_1000588C8()
{
  sub_100055660(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000588E4()
{
}

void sub_1000588FC()
{
}

void sub_100058914()
{
}

unint64_t sub_10005892C()
{
  unint64_t result = qword_10015D4A0[0];
  if (!qword_10015D4A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015D4A0);
  }
  return result;
}

uint64_t sub_100058980(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100111100
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100111120 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E69676542676F6CLL && a2 == 0xEA0000000000734DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65707954676F6CLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100111140 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5474706965636572 && a2 == 0xEB00000000656D69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x746163696C707061 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x4864616548676F6CLL && a2 == 0xEB00000000687361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 6845555 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x644965657274 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7473656C694D7369 && a2 == 0xEB00000000656E6FLL)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t sub_100058E1C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x644965657274 && a2 == 0xE600000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E69676542676F6CLL && a2 == 0xEA0000000000734DLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100058F64(void *a1)
{
  uint64_t v2 = sub_100020378(&qword_1001584E8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BCF8(a1, a1[3]);
  sub_10005892C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v11 = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  char v10 = 1;
  KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v9 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100028A4C((uint64_t)a1);
  return v6;
}

unint64_t sub_10005913C()
{
  unint64_t result = qword_100158348;
  if (!qword_100158348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158348);
  }
  return result;
}

void sub_100059190(uint64_t a1@<X8>)
{
}

void sub_1000591E4(uint64_t a1@<X8>)
{
}

void sub_100059238(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1000567D0(*(void *)(v4 + 16), *(unsigned char *)(v4 + 24), *(void *)(v4 + 40), *(void *)(v4 + 48), *(unsigned int *)(v4 + 56), *(void *)(v4 + 64), a4, a1, a2, a3);
}

void sub_100059288(void *a1@<X8>)
{
}

void sub_1000592A0(void *a1@<X8>)
{
}

void sub_1000592B8(void *a1@<X8>)
{
}

void sub_1000592D0(void *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v7 = *(unsigned int *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  sub_10005BC48();
  if (!v2)
  {
    uint64_t v10 = v9;
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v9 + 104))(0, v4, v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 120))(1, v5);
    char v11 = *(void (**)(uint64_t, uint64_t))(*(void *)v10 + 112);
    v11(2, v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 128))(3, v8);
    v11(4, 1);
    v11(5, 1);
    v11(6, 0);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = _swiftEmptyArrayStorage;
    unint64_t v13 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v10 + 152);
    swift_retain();
    v13(sub_10005AF5C, v12);
    swift_release();
    swift_release();
    swift_beginAccess();
    *a1 = *(void *)(v12 + 16);
    swift_bridgeObjectRetain();
    swift_release();
  }
}

void sub_100059500()
{
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(unsigned int *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);
  sub_10005BC48();
  if (!v1)
  {
    if (v2 >> 31)
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)v8 + 112);
      v10(0, v2);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 104))(1, v3, v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 120))(2, v5);
      v10(3, v6);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 128))(4, v7);
      v10(5, 1);
      v10(6, 1);
      uint64_t v11 = ((uint64_t (*)(uint64_t, void))v10)(7, 0);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 160))(v11))
      {
        swift_release();
        sub_10005913C();
        swift_allocError();
        *(_OWORD *)uint64_t v12 = xmmword_10010B870;
        *(_DWORD *)(v12 + 16) = 0;
        swift_willThrow();
      }
      else
      {
        (*(void (**)(void))(*(void *)v9 + 96))();
      }
      swift_release();
    }
  }
}

unint64_t sub_10005973C()
{
  unint64_t result = qword_100158358;
  if (!qword_100158358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158358);
  }
  return result;
}

uint64_t sub_100059790(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100058514(&qword_100158360, a2, (void (*)(uint64_t))type metadata accessor for KTSWDB);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for KTSWDB()
{
  return self;
}

unint64_t destroy for KTSWDBError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s15swtransparencyd11KTSWDBErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for KTSWDBError(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  return a1;
}

__n128 initializeWithTake for KTSWDBError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for KTSWDBError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for KTSWDBError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for KTSWDBError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 20) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100059A74(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_100059A8C(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSWDBError()
{
  return &type metadata for KTSWDBError;
}

uint64_t destroy for KTSWDB.STHKey(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);

  return sub_10002BD3C(v2, v3);
}

uint64_t initializeWithCopy for KTSWDB.STHKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_10002BD94(v4, v5);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  return a1;
}

uint64_t assignWithCopy for KTSWDB.STHKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 48);
  sub_10002BD94(v5, v4);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  sub_10002BD3C(v6, v7);
  return a1;
}

__n128 initializeWithTake for KTSWDB.STHKey(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for KTSWDB.STHKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v5;
  sub_10002BD3C(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for KTSWDB.STHKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KTSWDB.STHKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.STHKey()
{
  return &type metadata for KTSWDB.STHKey;
}

void *sub_100059D04(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    uint64_t v7 = a3[10];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[11];
    uint64_t v12 = a3[12];
    unint64_t v13 = (void *)((char *)v4 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (void *)((char *)v4 + v12);
    uint64_t v17 = *(uint64_t *)((char *)a2 + v12);
    unint64_t v18 = *(uint64_t *)((char *)a2 + v12 + 8);
    swift_bridgeObjectRetain();
    sub_10002BD94(v17, v18);
    *uint64_t v16 = v17;
    v16[1] = v18;
    uint64_t v19 = a3[13];
    char v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    sub_10002BD94(*v21, v23);
    uint64_t *v20 = v22;
    v20[1] = v23;
    uint64_t v24 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *((unsigned char *)v4 + v24) = *((unsigned char *)a2 + v24);
  }
  return v4;
}

uint64_t sub_100059E60(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[10];
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_10002BD3C(*(void *)(a1 + a2[12]), *(void *)(a1 + a2[12] + 8));
  uint64_t v6 = (uint64_t *)(a1 + a2[13]);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_10002BD3C(v7, v8);
}

uint64_t sub_100059F08(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = a3[10];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = a3[12];
  uint64_t v12 = (void *)(a1 + v10);
  unint64_t v13 = (void *)(a2 + v10);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = (uint64_t *)(a1 + v11);
  uint64_t v16 = *(void *)(a2 + v11);
  unint64_t v17 = *(void *)(a2 + v11 + 8);
  swift_bridgeObjectRetain();
  sub_10002BD94(v16, v17);
  uint64_t *v15 = v16;
  v15[1] = v17;
  uint64_t v18 = a3[13];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  char v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_10002BD94(*v20, v22);
  uint64_t *v19 = v21;
  v19[1] = v22;
  uint64_t v23 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  return a1;
}

uint64_t sub_10005A014(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = a3[10];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[12];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  sub_10002BD94(*v15, v17);
  uint64_t v18 = *v14;
  unint64_t v19 = v14[1];
  uint64_t *v14 = v16;
  v14[1] = v17;
  sub_10002BD3C(v18, v19);
  uint64_t v20 = a3[13];
  uint64_t v21 = (uint64_t *)(a1 + v20);
  unint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_10002BD94(*v22, v24);
  uint64_t v25 = *v21;
  unint64_t v26 = v21[1];
  *uint64_t v21 = v23;
  v21[1] = v24;
  sub_10002BD3C(v25, v26);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_10005A15C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = a3[10];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_10005A234(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = a3[10];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[12];
  uint64_t v16 = *(void *)(a1 + v15);
  unint64_t v17 = *(void *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_10002BD3C(v16, v17);
  uint64_t v18 = a3[13];
  uint64_t v19 = *(void *)(a1 + v18);
  unint64_t v20 = *(void *)(a1 + v18 + 8);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  sub_10002BD3C(v19, v20);
  uint64_t v21 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  return a1;
}

uint64_t sub_10005A338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005A34C);
}

uint64_t sub_10005A34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 40);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 44) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_10005A414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005A428);
}

uint64_t sub_10005A428(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 40);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 44) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10005A4EC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KTSWDB.Milestone(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for KTSWDB.Milestone(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.Milestone()
{
  return &type metadata for KTSWDB.Milestone;
}

unsigned char *storeEnumTagSinglePayload for KTSWDB.Milestone.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005A6E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.Milestone.CodingKeys()
{
  return &type metadata for KTSWDB.Milestone.CodingKeys;
}

uint64_t getEnumTagSinglePayload for KTSWDB.SignedLogHead.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KTSWDB.SignedLogHead.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005A878);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.SignedLogHead.CodingKeys()
{
  return &type metadata for KTSWDB.SignedLogHead.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SWTStateMachine.SMRunningState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KTSWDB.STHKey.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005AA0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.STHKey.CodingKeys()
{
  return &type metadata for KTSWDB.STHKey.CodingKeys;
}

unint64_t sub_10005AA48()
{
  unint64_t result = qword_10015DF40[0];
  if (!qword_10015DF40[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015DF40);
  }
  return result;
}

uint64_t sub_10005AA9C()
{
  return sub_100058514(&qword_1001584C8, 255, type metadata accessor for LogType);
}

unint64_t sub_10005AAEC()
{
  unint64_t result = qword_10015E2D0[0];
  if (!qword_10015E2D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015E2D0);
  }
  return result;
}

unint64_t sub_10005AB44()
{
  unint64_t result = qword_10015E560[0];
  if (!qword_10015E560[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015E560);
  }
  return result;
}

unint64_t sub_10005AB9C()
{
  unint64_t result = qword_10015E670;
  if (!qword_10015E670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015E670);
  }
  return result;
}

unint64_t sub_10005ABF4()
{
  unint64_t result = qword_10015E678;
  if (!qword_10015E678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015E678);
  }
  return result;
}

unint64_t sub_10005AC4C()
{
  unint64_t result = qword_10015E700;
  if (!qword_10015E700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015E700);
  }
  return result;
}

unint64_t sub_10005ACA4()
{
  unint64_t result = qword_10015E708[0];
  if (!qword_10015E708[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015E708);
  }
  return result;
}

unint64_t sub_10005ACFC()
{
  unint64_t result = qword_10015E790;
  if (!qword_10015E790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015E790);
  }
  return result;
}

unint64_t sub_10005AD54()
{
  unint64_t result = qword_10015E798[0];
  if (!qword_10015E798[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10015E798);
  }
  return result;
}

void sub_10005ADA8(void *a1@<X8>)
{
  sub_1000570C8(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(_DWORD *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), a1);
}

void sub_10005ADD4(void *a1@<X8>)
{
  sub_100056DD0(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

void sub_10005ADF8(void *a1@<X8>)
{
  sub_100056B80(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned int *)(v1 + 48), *(void *)(v1 + 56), a1);
}

void sub_10005AE20()
{
  sub_100055D90(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned int *)(v0 + 40), *(void *)(v0 + 48));
}

void sub_10005AE48()
{
  sub_1000559EC(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned int *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88));
}

void sub_10005AE88()
{
  sub_100055830(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned int *)(v0 + 48));
}

void sub_10005AEAC()
{
  sub_100054690(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

unint64_t sub_10005AED0()
{
  unint64_t result = qword_1001584E0;
  if (!qword_1001584E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001584E0);
  }
  return result;
}

uint64_t sub_10005AF24()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005AF60(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)a1 + 112))(0);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = v3;
    unsigned int v6 = (void *)(v1 + 16);
    swift_beginAccess();
    BOOL v7 = *(void **)(v2 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unsigned int v6 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      BOOL v7 = sub_10004EA94(0, v7[2] + 1, 1, v7);
      *unsigned int v6 = v7;
    }
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      BOOL v7 = sub_10004EA94((void *)(v9 > 1), v10 + 1, 1, v7);
      *unsigned int v6 = v7;
    }
    void v7[2] = v10 + 1;
    v7[v10 + 4] = v5;
    swift_endAccess();
  }
  return 1;
}

uint64_t sub_10005B068()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005B078(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)a1 + 104))(0);
  if ((v3 & 0x100000000) == 0)
  {
    uint64_t v4 = (int)v3;
    swift_beginAccess();
    *(void *)(v2 + 16) = v4;
  }
  return 1;
}

uint64_t sub_10005B0F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)a1 + 128))(0);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = v3;
    unint64_t v6 = v4;
    BOOL v7 = (void **)(v2 + 16);
    swift_beginAccess();
    int v8 = *v7;
    sub_10002BD94(v5, v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int v8 = sub_10004EBA4(0, v8[2] + 1, 1, v8);
      void *v7 = v8;
    }
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      int v8 = sub_10004EBA4((void *)(v10 > 1), v11 + 1, 1, v8);
      void *v7 = v8;
    }
    v8[2] = v11 + 1;
    unint64_t v12 = &v8[2 * v11];
    v12[4] = v5;
    v12[5] = v6;
    swift_endAccess();
    sub_100030D78(v5, v6);
  }
  return 1;
}

uint64_t sub_10005B220()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10005B230(uint64_t a1)
{
  return sub_100056638(a1, v1);
}

uint64_t sub_10005B238(uint64_t a1)
{
  uint64_t v2 = sub_100020378((uint64_t *)&unk_1001580E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005B298(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10002BD94(a1, a2);
  }
  return a1;
}

void sub_10005B2B4()
{
}

void sub_10005B2CC(uint64_t a1@<X8>)
{
}

void sub_10005B2E4()
{
}

void sub_10005B2FC()
{
}

void sub_10005B314()
{
}

void sub_10005B32C()
{
}

const char *sub_10005B34C()
{
  return "Transparency";
}

const char *sub_10005B360(char a1)
{
  unint64_t result = "ATMilestoneDownload";
  switch(a1)
  {
    case 1:
      unint64_t result = "ATPatConsistency";
      break;
    case 2:
      unint64_t result = "SWTStateMachine";
      break;
    case 3:
      unint64_t result = "SWTFailProofVerification";
      break;
    case 4:
      unint64_t result = "SWTSplitViewCFU";
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10005B3F4()
{
  unint64_t result = qword_1001584F8;
  if (!qword_1001584F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001584F8);
  }
  return result;
}

const char *sub_10005B448()
{
  unint64_t result = "ATMilestoneDownload";
  switch(*v0)
  {
    case 1:
      unint64_t result = "ATPatConsistency";
      break;
    case 2:
      unint64_t result = "SWTStateMachine";
      break;
    case 3:
      unint64_t result = "SWTFailProofVerification";
      break;
    case 4:
      unint64_t result = "SWTSplitViewCFU";
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SWTFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005B5A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTFeatureFlags()
{
  return &type metadata for SWTFeatureFlags;
}

void *sub_10005B5D8()
{
  return &unk_100138A68;
}

unint64_t sub_10005B5E4()
{
  return 0xD000000000000018;
}

unint64_t sub_10005B600()
{
  return 0xD000000000000013;
}

void sub_10005B61C()
{
}

Swift::Int sub_10005B644()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005B688()
{
  return Hasher._finalize()();
}

uint64_t sub_10005B6C8()
{
  return Error<>._domain.getter();
}

uint64_t sub_10005B6F8()
{
  return Error<>._code.getter();
}

id static KTSwiftDB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  unsigned int v4 = *(void **)(a1 + 16);
  if (v4 && (swift_beginAccess(), *(void *)(a2 + 16))) {
    return [v4 isEqual:];
  }
  else {
    return 0;
  }
}

void *sub_10005B7A4()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void sub_10005B7E8(uint64_t a1)
{
  swift_beginAccess();
  int v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t KTSwiftDB.__allocating_init(url:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  uint64_t v3 = sub_100020378(&qword_100157A70);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003EF8C(a1, (uint64_t)v5);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v9 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    URL._bridgeToObjectiveC()(v8);
    unint64_t v9 = v10;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  id v11 = [objc_allocWithZone((Class)KTSDBObjc) initDatabaseWithURL:v9];

  sub_100028C8C(a1, &qword_100157A70);
  if (v11)
  {
    swift_beginAccess();
    unint64_t v12 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = v11;
  }
  else
  {
    swift_release();
    return 0;
  }
  return v2;
}

uint64_t KTSwiftDB.init(url:)(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)(v1 + 16) = 0;
  uint64_t v4 = sub_100020378(&qword_100157A70);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003EF8C(a1, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    unint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  id v12 = [objc_allocWithZone((Class)KTSDBObjc) initDatabaseWithURL:v10];

  sub_100028C8C(a1, &qword_100157A70);
  if (v12)
  {
    swift_beginAccess();
    uint64_t v13 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = v12;
  }
  else
  {
    swift_release();
    return 0;
  }
  return v2;
}

void sub_10005BB60()
{
  uint64_t v1 = (void **)(v0 + 16);
  swift_beginAccess();
  uint64_t v2 = *(void **)(v0 + 16);
  if (v2)
  {
    [v2 close];
    uint64_t v3 = *v1;
    *uint64_t v1 = 0;
  }
}

void sub_10005BBBC()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 executeSQLStmt:v3];
  }
}

void sub_10005BC48()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    id v7 = 0;
    id v4 = [v2 prepareStatement:v3 error:&v7];

    if (v4)
    {
      id v5 = v7;

      type metadata accessor for KTSwiftDB.SQLStatement();
      *(void *)(swift_allocObject() + 16) = v4;
    }
    else
    {
      id v6 = v7;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    sub_10005BD88();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t sub_10005BD88()
{
  unint64_t result = qword_100158508;
  if (!qword_100158508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158508);
  }
  return result;
}

uint64_t sub_10005BDDC(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t type metadata accessor for KTSwiftDB.SQLStatement()
{
  return self;
}

uint64_t sub_10005BE34(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

id sub_10005BE40()
{
  return [*(id *)(v0 + 16) reset];
}

void sub_10005BE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

id sub_10005BE64(uint64_t a1, uint64_t a2)
{
  return [*(id *)(v2 + 16) bindInt:a2 column:a1];
}

id sub_10005BE7C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(v2 + 16) bindInt64:a2 column:a1];
}

void sub_10005BE94(uint64_t a1)
{
  NSString v3 = *(void **)(v1 + 16);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v3 bindDate:isa column:a1];
}

id sub_10005BF00(uint64_t a1)
{
  return [*(id *)(v1 + 16) bindDouble:a1 column:];
}

void sub_10005BF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10005BF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  uint64_t v8 = *(void **)(v5 + 16);
  id v9 = (id)a4(a2, a3);
  [v8 *a5:v9 a1];
}

id sub_10005BF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  id v6 = (void *)swift_allocObject();
  _OWORD v6[2] = a1;
  v6[3] = a2;
  aBlock[4] = sub_10005C11C;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10005C184;
  aBlock[3] = &unk_100138AA0;
  id v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  LODWORD(a2) = [v5 steps:v7 error:aBlock];
  _Block_release(v7);
  id result = aBlock[0];
  if (!a2)
  {
    id v9 = result;
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
  return result;
}

uint64_t sub_10005C0E4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005C11C(uint64_t a1)
{
  NSString v3 = *(uint64_t (**)(uint64_t))(v1 + 16);
  type metadata accessor for KTSwiftDB.SQLRow();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  swift_unknownObjectRetain();
  LOBYTE(a1) = v3(v4);
  swift_release();
  return a1 & 1;
}

uint64_t sub_10005C184(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t sub_10005C1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005C1F0()
{
  return swift_release();
}

uint64_t sub_10005C1F8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v13 = 0;
  id v2 = [v1 stepWithError:&v13];
  id v3 = v13;
  if (v2)
  {
    id v4 = v2;
    type metadata accessor for KTSwiftDB.SQLRow();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    id v6 = v3;
  }
  else
  {
    id v7 = v13;
    uint64_t v8 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v13 = v8;
    swift_errorRetain();
    sub_100020378(&qword_1001570C0);
    type metadata accessor for KTSDBObjcError(0);
    uint64_t v5 = v9;
    if (swift_dynamicCast()
      && (sub_10005D25C(&qword_100158518, type metadata accessor for KTSDBObjcError),
          _BridgedStoredNSError.code.getter(),
          v12,
          v11 == 2))
    {
      swift_errorRelease();
      swift_errorRelease();
      return 0;
    }
    else
    {
      swift_errorRelease();
      swift_willThrow();
    }
  }
  return v5;
}

uint64_t KTSwiftDB.deinit()
{
  return v0;
}

uint64_t KTSwiftDB.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_10005C3F0()
{
  return swift_unknownObjectRetain();
}

void type metadata accessor for KTSDBObjcError(uint64_t a1)
{
}

uint64_t sub_10005C40C(uint64_t a1)
{
  id v2 = [*(id *)(v1 + 16) textAtColumn:a1];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10005C468(uint64_t a1)
{
  return [*(id *)(v1 + 16) intAtColumn:a1];
}

id sub_10005C4A8(uint64_t a1)
{
  return [*(id *)(v1 + 16) int64AtColumn:a1];
}

uint64_t sub_10005C4D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [*(id *)(v2 + 16) dateAtColumn:a1];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = type metadata accessor for Date();
  id v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(a2, 0, 1, v5);
}

uint64_t sub_10005C56C(uint64_t a1)
{
  id v2 = [*(id *)(v1 + 16) blobAtColumn:a1];
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

double sub_10005C5C8(uint64_t a1)
{
  [*(id *)(v1 + 16) doubleAtColumn:a1];
  return result;
}

unint64_t sub_10005C5F8()
{
  id v1 = [*(id *)(v0 + 16) allObjectsByColumnName];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v3 = sub_10005C670(v2);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_10005C670(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100020378(&qword_1001587E0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v9 = (v5 - 1) & v5;
      unint64_t v10 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v11 = v7;
    }
    else
    {
      int64_t v12 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v12 >= v27)
      {
LABEL_33:
        sub_10005D5B8();
        return (unint64_t)v2;
      }
      unint64_t v13 = *(void *)(v28 + 8 * v12);
      int64_t v11 = v7 + 1;
      if (!v13)
      {
        int64_t v11 = v7 + 2;
        if (v7 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v13 = *(void *)(v28 + 8 * v11);
        if (!v13)
        {
          int64_t v11 = v7 + 3;
          if (v7 + 3 >= v27) {
            goto LABEL_33;
          }
          unint64_t v13 = *(void *)(v28 + 8 * v11);
          if (!v13)
          {
            int64_t v11 = v7 + 4;
            if (v7 + 4 >= v27) {
              goto LABEL_33;
            }
            unint64_t v13 = *(void *)(v28 + 8 * v11);
            if (!v13)
            {
              int64_t v14 = v7 + 5;
              if (v7 + 5 >= v27) {
                goto LABEL_33;
              }
              unint64_t v13 = *(void *)(v28 + 8 * v14);
              if (!v13)
              {
                while (1)
                {
                  int64_t v11 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_38;
                  }
                  if (v11 >= v27) {
                    goto LABEL_33;
                  }
                  unint64_t v13 = *(void *)(v28 + 8 * v11);
                  ++v14;
                  if (v13) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v11 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v9 = (v13 - 1) & v13;
      unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
    }
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    sub_100028A9C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v37);
    v36[0] = v17;
    v36[1] = v16;
    sub_100028A9C((uint64_t)v37, (uint64_t)v32);
    swift_bridgeObjectRetain_n();
    sub_100028C8C((uint64_t)v36, &qword_1001587E8);
    if (!swift_dynamicCast())
    {
      uint64_t v31 = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      swift_bridgeObjectRelease();
      sub_100028C8C((uint64_t)&v29, &qword_1001587F0);
      sub_10005D5B8();
      swift_release();
      return 0;
    }
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    unint64_t result = sub_100049298(v17, v16);
    unint64_t v18 = result;
    if (v19)
    {
      uint64_t v8 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v8 = v17;
      v8[1] = v16;
      unint64_t result = sub_10005D5C0((uint64_t)&v29, v2[7] + 40 * v18);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v20 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v20 = v17;
    v20[1] = v16;
    uint64_t v21 = v2[7] + 40 * result;
    long long v22 = v29;
    long long v23 = v30;
    *(void *)(v21 + 32) = v31;
    *(_OWORD *)uint64_t v21 = v22;
    *(_OWORD *)(v21 + 16) = v23;
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_36;
    }
    v2[2] = v26;
LABEL_8:
    int64_t v7 = v11;
    unint64_t v5 = v9;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10005C9FC()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10005CA1C()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 24, 7);
}

id sub_10005CA54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v2 + 16);
  if (v4 && (swift_beginAccess(), *(void *)(v3 + 16))) {
    return [v4 isEqual:];
  }
  else {
    return 0;
  }
}

id sub_10005CAD0()
{
  return *v0;
}

uint64_t sub_10005CAD8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for KTSwiftDB.SQLRow()
{
  return self;
}

unint64_t sub_10005CB08()
{
  unint64_t result = qword_100158520;
  if (!qword_100158520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158520);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StateMachineEvents.WaitType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for KTSwiftDBError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10005CC50);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSwiftDBError()
{
  return &type metadata for KTSwiftDBError;
}

uint64_t type metadata accessor for KTSwiftDB()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for KTSwiftDB.SQLStepResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for KTSwiftDB.SQLStepResult()
{
  return swift_release();
}

void *assignWithCopy for KTSwiftDB.SQLStepResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for KTSwiftDB.SQLStepResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KTSwiftDB.SQLStepResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for KTSwiftDB.SQLStepResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSwiftDB.SQLStepResult()
{
  return &type metadata for KTSwiftDB.SQLStepResult;
}

uint64_t sub_10005CE08()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005CE2C()
{
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_10005CE8C()
{
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t sub_10005CEEC(void *a1)
{
  sub_10005D25C(&qword_100158518, type metadata accessor for KTSDBObjcError);
  id v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t sub_10005CF70()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10005CFA8()
{
  return _BridgedStoredNSError.hash(into:)();
}

Swift::Int sub_10005D018()
{
  return Hasher._finalize()();
}

uint64_t sub_10005D078()
{
  return Error<>._domain.getter();
}

uint64_t sub_10005D0D8()
{
  return Error<>._code.getter();
}

uint64_t sub_10005D138()
{
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

uint64_t sub_10005D198()
{
  return static _BridgedStoredNSError.== infix(_:_:)() & 1;
}

uint64_t sub_10005D214()
{
  return sub_10005D25C(&qword_100158790, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_10005D25C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005D2A4()
{
  return sub_10005D25C(&qword_100158798, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_10005D2EC()
{
  return sub_10005D25C(&qword_1001587A0, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_10005D334()
{
  return sub_10005D25C(&qword_1001587A8, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_10005D37C()
{
  return sub_10005D25C(&qword_1001587B0, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_10005D3C4()
{
  return sub_10005D25C(&qword_1001587B8, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_10005D420()
{
  return sub_10005D25C(&qword_1001587C0, type metadata accessor for Code);
}

unint64_t sub_10005D46C()
{
  unint64_t result = qword_1001587C8;
  if (!qword_1001587C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001587C8);
  }
  return result;
}

uint64_t sub_10005D4C0()
{
  return sub_10005D25C(&qword_1001587D0, type metadata accessor for Code);
}

uint64_t sub_10005D508()
{
  return sub_10005D25C(&qword_100158518, type metadata accessor for KTSDBObjcError);
}

BOOL sub_10005D550(void *a1, void *a2)
{
  return *a1 == *a2;
}

unint64_t sub_10005D564()
{
  unint64_t result = qword_1001587D8;
  if (!qword_1001587D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001587D8);
  }
  return result;
}

uint64_t sub_10005D5B8()
{
  return swift_release();
}

uint64_t sub_10005D5C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_10005D628()
{
  return sub_10005D73C();
}

id sub_10005D674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v9 = 0;
  id v7 = [v3 verifyConsistencyProof:isa startLogHead:a2 endLogHead:a3 error:&v9];

  if (v9)
  {
    v9;
    swift_willThrow();
  }
  return v7;
}

id sub_10005D73C()
{
  id v3 = 0;
  id v1 = [v0 verifyWithError:&v3];
  if (v3)
  {
    v3;
    swift_willThrow();
  }
  return v1;
}

unint64_t sub_10005D7D4(uint64_t a1, char a2)
{
  if (a2)
  {
    unint64_t result = 0xD000000000000011;
    switch(a1)
    {
      case 1:
        unint64_t result = 0xD000000000000010;
        break;
      case 2:
        unint64_t result = 0xD000000000000024;
        break;
      case 3:
        unint64_t result = 0xD000000000000019;
        break;
      case 4:
        unint64_t result = 0xD000000000000017;
        break;
      default:
        return result;
    }
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    return 0xD00000000000001ELL;
  }
  return result;
}

uint64_t sub_10005D918()
{
  return Error<>._domain.getter();
}

uint64_t sub_10005D948()
{
  return Error<>._code.getter();
}

unint64_t sub_10005D978()
{
  return sub_10005D7D4(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_10005D984()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162310);
  sub_1000294A8(v0, (uint64_t)qword_100162310);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10005DA08()
{
  if (qword_10015F120 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162310);
}

uint64_t sub_10005DA6C@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015F120 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162310);
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void *sub_10005DB14()
{
  id v1 = *(void **)(v0 + 120);
  id v2 = v1;
  return v1;
}

uint64_t sub_10005DB3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100029208(v1 + 128, a1, &qword_100158828);
}

uint64_t *sub_10005DB64()
{
  return &qword_100158800;
}

uint64_t sub_10005DB70()
{
  return sub_10005DC04(&qword_100158800);
}

uint64_t sub_10005DB80(uint64_t a1, uint64_t a2)
{
  return sub_10005DC68(a1, a2, &qword_100158800, &off_100158808);
}

uint64_t (*sub_10005DB90())()
{
  return j__swift_endAccess;
}

uint64_t *sub_10005DBE8()
{
  return &qword_100158810;
}

uint64_t sub_10005DBF4()
{
  return sub_10005DC04(&qword_100158810);
}

uint64_t sub_10005DC04(uint64_t *a1)
{
  swift_beginAccess();
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10005DC58(uint64_t a1, uint64_t a2)
{
  return sub_10005DC68(a1, a2, &qword_100158810, &off_100158818);
}

uint64_t sub_10005DC68(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10005DCC8())()
{
  return j_j__swift_endAccess;
}

void sub_10005DD20(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for ActualMilestoneFetcher;
  *(void *)(a1 + 32) = &off_100138C30;
}

uint64_t sub_10005DD38@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, long long *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(_DWORD *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  sub_10003CD24(a4, a9 + 24);
  *(void *)(a9 + 104) = a5;
  sub_10003CD24(a6, a9 + 64);
  *(void *)(a9 + 112) = a7;
  *(void *)(a9 + 120) = a8;

  return sub_10005DDBC(a10, a9 + 128);
}

uint64_t sub_10005DDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100158828);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005DE24@<X0>(char *a1@<X0>, char *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unint64_t v76 = a1;
  unint64_t v13 = *(void **)(v6 + 8);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 stringForKey:v14];

  if (!v15)
  {
    sub_1000617F4();
    swift_allocError();
    *(void *)uint64_t v24 = 0;
    *(unsigned char *)(v24 + 8) = 1;
    return swift_willThrow();
  }
  int v73 = a3;
  int v74 = a4;
  uint64_t v71 = v7;
  uint64_t v72 = a2;
  uint64_t v68 = v6;
  id v69 = v13;
  uint64_t v70 = a5;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = type metadata accessor for URLComponents();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  char v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100020378(&qword_100158858);
  __chkstk_darwin(v20 - 8);
  long long v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v75 = v17;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v22, 1, v16) == 1)
  {
    sub_100028C8C((uint64_t)v22, &qword_100158858);
    sub_1000617F4();
    swift_allocError();
    *(void *)uint64_t v23 = 3;
    *(unsigned char *)(v23 + 8) = 1;
    return swift_willThrow();
  }
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
  uint64_t v66 = v16;
  v26(v19, v22, v16);
  uint64_t v67 = &v65;
  if (v76)
  {
    uint64_t v27 = type metadata accessor for URLQueryItem();
    uint64_t v28 = *(void *)(v27 - 8);
    __chkstk_darwin(v27);
    long long v30 = (char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v77 = v76;
    sub_100029714();
    BinaryInteger.description.getter();
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = (void *)sub_10006158C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v33 = v31[2];
    unint64_t v32 = v31[3];
    if (v33 >= v32 >> 1) {
      uint64_t v31 = (void *)sub_10006158C(v32 > 1, v33 + 1, 1, (unint64_t)v31);
    }
    v31[2] = v33 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))((unint64_t)v31+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v33, v30, v27);
  }
  else
  {
    uint64_t v31 = _swiftEmptyArrayStorage;
  }
  unint64_t v76 = v19;
  if ((v73 & 1) == 0)
  {
    long long v34 = v72;
    if (v72)
    {
      uint64_t v35 = type metadata accessor for URLQueryItem();
      uint64_t v36 = *(void *)(v35 - 8);
      __chkstk_darwin(v35);
      unsigned int v38 = (char *)&v65 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v77 = v34;
      sub_100029714();
      BinaryInteger.description.getter();
      URLQueryItem.init(name:value:)();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v31 = (void *)sub_10006158C(0, v31[2] + 1, 1, (unint64_t)v31);
      }
      unint64_t v40 = v31[2];
      unint64_t v39 = v31[3];
      if (v40 >= v39 >> 1) {
        uint64_t v31 = (void *)sub_10006158C(v39 > 1, v40 + 1, 1, (unint64_t)v31);
      }
      v31[2] = v40 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v36 + 32))((unint64_t)v31+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v40, v38, v35);
    }
  }
  uint64_t v41 = type metadata accessor for URLQueryItem();
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v65 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v31 = (void *)sub_10006158C(0, v31[2] + 1, 1, (unint64_t)v31);
  }
  unint64_t v46 = v31[2];
  unint64_t v45 = v31[3];
  if (v46 >= v45 >> 1) {
    uint64_t v31 = (void *)sub_10006158C(v45 > 1, v46 + 1, 1, (unint64_t)v31);
  }
  v31[2] = v46 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))((unint64_t)v31+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(void *)(v42 + 72) * v46, v44, v41);
  unint64_t v47 = v76;
  URLComponents.queryItems.setter();
  uint64_t v48 = type metadata accessor for URL();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(void *)(v49 + 64);
  __chkstk_darwin(v48);
  unint64_t v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v52 = (char *)&v65 - v51;
  uint64_t v53 = sub_100020378(&qword_100157A70);
  __chkstk_darwin(v53 - 8);
  uint64_t v55 = (char *)&v65 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.url.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v55, 1, v48) == 1)
  {
    sub_100028C8C((uint64_t)v55, &qword_100157A70);
    sub_1000617F4();
    swift_allocError();
    uint64_t v56 = v75;
    *(void *)uint64_t v57 = 3;
    *(unsigned char *)(v57 + 8) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v47, v66);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))((char *)&v65 - v51, v55, v48);
    unint64_t v58 = sub_100061F68();
    __chkstk_darwin(v58);
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))((char *)&v65 - v51, (char *)&v65 - v51, v48);
    id v59 = sub_1000C03B4((uint64_t)&v65 - v51, a6);
    char v60 = sub_1000292A4();
    sub_1000BFD80(v60 & 1);
    if (sub_10002F830((uint64_t)[v69 currentEnvironment]))
    {
      [v59 _setPrivacyProxyFailClosed:1];
      if (qword_10015F120 != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      sub_1000294A8(v61, (uint64_t)qword_100162310);
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Enforcing privacy proxy", v64, 2u);
        swift_slowDealloc();
      }
    }
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v48);
    return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v76, v66);
  }
}

id sub_10005E850()
{
  uint64_t v0 = self;

  return [v0 defaultNetworkTimeout];
}

uint64_t sub_10005E888(double a1)
{
  *(void *)(v2 + 776) = v1;
  *(double *)(v2 + 768) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 784) = v3;
  *(void *)(v2 + 792) = *(void *)(v3 - 8);
  *(void *)(v2 + 800) = swift_task_alloc();
  *(void *)(v2 + 808) = swift_task_alloc();
  *(void *)(v2 + 816) = swift_task_alloc();
  return _swift_task_switch(sub_10005E968, 0, 0);
}

uint64_t sub_10005E968()
{
  uint64_t v71 = v0;
  uint64_t v1 = sub_10005194C(**(unsigned int **)(v0 + 776));
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    uint64_t v5 = *(void **)(*(void *)(v0 + 776) + 112);
    if (!v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = *(void **)(v0 + 776);
LABEL_7:
      uint64_t v10 = v8[6];
      uint64_t v11 = v8[7];
      sub_10002BCF8(v8 + 3, v10);
      int64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 104))(v3, v4, v7, v5 == 0, 5, 1, v10, v11);
      NSString v14 = v13;
      char v16 = v15;
      uint64_t v18 = v17;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 168) = v12;
      *(void *)(v0 + 176) = v14;
      *(unsigned char *)(v0 + 184) = v16 & 1;
      *(void *)(v0 + 192) = v18;
      double v23 = *(double *)(v0 + 768);
      uint64_t v24 = type metadata accessor for URLRequest();
      *(void *)(v0 + 824) = v24;
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = v25;
      *(void *)(v0 + 832) = v25;
      *(void *)(v0 + 840) = *(void *)(v25 + 64);
      uint64_t v27 = swift_task_alloc();
      *(void *)(v0 + 848) = v27;
      int v28 = v16 & 1;
      uint64_t v29 = v27;
      sub_10005DE24(v12, v14, v28, v5 != 0, v27, v23);
      uint64_t v69 = v26;
      if (qword_10015F120 != -1) {
        swift_once();
      }
      uint64_t v32 = *(void *)(v0 + 816);
      uint64_t v33 = *(void *)(v0 + 792);
      uint64_t v34 = *(void *)(v0 + 784);
      uint64_t v35 = sub_1000294A8(v34, (uint64_t)qword_100162310);
      *(void *)(v0 + 856) = v35;
      uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
      *(void *)(v0 + 864) = v36;
      *(void *)(v0 + 872) = (v33 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v36(v32, v35, v34);
      uint64_t v37 = swift_task_alloc();
      unsigned int v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
      *(void *)(v0 + 880) = v38;
      *(void *)(v0 + 888) = (v26 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      uint64_t v39 = v24;
      v38(v37, v29, v24);
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        os_log_type_t v65 = v41;
        uint64_t v66 = v29;
        uint64_t v42 = swift_slowAlloc();
        v70[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 136315394;
        swift_beginAccess();
        char v43 = *(unsigned char *)(v0 + 184);
        uint64_t v44 = *(void *)(v0 + 192);
        *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 168);
        *(unsigned char *)(v0 + 152) = v43;
        *(void *)(v0 + 160) = v44;
        sub_10006185C();
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 752) = sub_1000262AC(v45, v46, v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2080;
        sub_100020378(&qword_100157A70);
        uint64_t v47 = swift_task_alloc();
        URLRequest.url.getter();
        uint64_t v48 = type metadata accessor for URL();
        uint64_t v49 = *(void *)(v48 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) == 1)
        {
          sub_100028C8C(v47, &qword_100157A70);
          unint64_t v50 = 0xEB000000004C5255;
          uint64_t v51 = 0x206E776F6E6B6E75;
        }
        else
        {
          uint64_t v51 = URL.description.getter();
          unint64_t v50 = v57;
          (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
        }
        uint64_t v58 = *(void *)(v0 + 792);
        uint64_t v63 = *(void *)(v0 + 784);
        uint64_t v64 = *(void *)(v0 + 816);
        swift_task_dealloc();
        *(void *)(v0 + 760) = sub_1000262AC(v51, v50, v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
        v55(v37, v39);
        _os_log_impl((void *)&_mh_execute_header, v40, v65, "Fetching %s from %s", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
        v56(v64, v63);
        swift_task_dealloc();
        uint64_t v29 = v66;
      }
      else
      {
        uint64_t v52 = *(void *)(v0 + 816);
        uint64_t v53 = *(void *)(v0 + 792);
        uint64_t v54 = *(void *)(v0 + 784);
        uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
        v55(v37, v39);

        swift_task_dealloc();
        uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
        v56(v52, v54);
      }
      *(void *)(v0 + 904) = v55;
      *(void *)(v0 + 896) = v56;
      id v59 = *(void **)(v0 + 776);
      uint64_t v60 = v59[11];
      uint64_t v61 = v59[12];
      sub_10002BCF8(v59 + 8, v60);
      uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 + 8) + **(int **)(v61 + 8));
      uint64_t v62 = (void *)swift_task_alloc();
      *(void *)(v0 + 912) = v62;
      *uint64_t v62 = v0;
      v62[1] = sub_10005F2EC;
      return v67(v29, v60, v61);
    }
    unint64_t v6 = (unint64_t)[v5 logBeginningMs];
    if ((v6 & 0x8000000000000000) == 0)
    {
      unint64_t v7 = v6;
      uint64_t v8 = *(void **)(v0 + 776);
      goto LABEL_7;
    }
    __break(1u);
    swift_once();
    sub_1000294A8(*(void *)(v0 + 784), (uint64_t)qword_100162310);
    swift_errorRetain();
    swift_errorRetain();
    char v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      swift_errorRetain();
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 736) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v22;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to get last milestone from DB: %@", v21, 0xCu);
      sub_100020378(&qword_1001590C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
  }
  else
  {
    sub_1000617F4();
    swift_allocError();
    *(void *)uint64_t v9 = 4;
    *(unsigned char *)(v9 + 8) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_10005F2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[115] = a1;
  v5[116] = a2;
  v5[117] = a3;
  v5[118] = v3;
  swift_task_dealloc();
  if (v3) {
    unint64_t v6 = sub_100060FE4;
  }
  else {
    unint64_t v6 = sub_10005F40C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10005F40C()
{
  uint64_t v189 = v0;
  uint64_t v1 = *(void **)(v0 + 936);
  unint64_t v2 = *(void *)(v0 + 928);
  uint64_t v3 = *(void *)(v0 + 920);
  uint64_t v4 = type metadata accessor for Date();
  *(void *)(v0 + 952) = v4;
  uint64_t v185 = v4;
  uint64_t v186 = *(void *)(v4 - 8);
  *(void *)(v0 + 960) = v186;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 968) = v5;
  sub_10002BD94(v3, v2);
  id v6 = v1;
  uint64_t v187 = v5;
  static Date.now.getter();
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (!v7)
  {
    unint64_t v14 = *(void *)(v0 + 928);
    uint64_t v15 = *(void *)(v0 + 920);
    v180 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 880);
    char v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 864);
    uint64_t v17 = *(void *)(v0 + 856);
    uint64_t v177 = *(void *)(v0 + 848);
    uint64_t v18 = *(void *)(v0 + 824);
    uint64_t v19 = *(void *)(v0 + 808);
    uint64_t v20 = *(void *)(v0 + 784);

    sub_10002BD3C(v15, v14);
    v16(v19, v17, v20);
    uint64_t v21 = swift_task_alloc();
    v180(v21, v177, v18);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v183 = v23;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      v188[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      sub_100020378(&qword_100157A70);
      uint64_t v25 = swift_task_alloc();
      URLRequest.url.getter();
      uint64_t v26 = type metadata accessor for URL();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
      {
        sub_100028C8C(v25, &qword_100157A70);
        unint64_t v28 = 0xEB000000004C5255;
        uint64_t v29 = 0x206E776F6E6B6E75;
      }
      else
      {
        uint64_t v29 = URL.description.getter();
        unint64_t v28 = v93;
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
      }
      uint64_t v94 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
      uint64_t v95 = *(void *)(v0 + 824);
      uint64_t v175 = *(void *)(v0 + 808);
      v179 = *(void (**)(uint64_t, uint64_t))(v0 + 896);
      uint64_t v174 = *(void *)(v0 + 784);
      swift_task_dealloc();
      *(void *)(v0 + 680) = sub_1000262AC(v29, v28, v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v94(v21, v95);
      _os_log_impl((void *)&_mh_execute_header, v22, v183, "Bad URL response from %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v179(v175, v174);
      swift_task_dealloc();
    }
    else
    {
      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v0 + 896);
      uint64_t v76 = *(void *)(v0 + 808);
      uint64_t v77 = *(void *)(v0 + 784);
      (*(void (**)(uint64_t, void))(v0 + 904))(v21, *(void *)(v0 + 824));

      swift_task_dealloc();
      v75(v76, v77);
    }
    Swift::Int v96 = *(void **)(*(void *)(v0 + 776) + 120);
    unint64_t v97 = *(void *)(v0 + 928);
    uint64_t v98 = *(void *)(v0 + 920);
    os_log_type_t v99 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
    uint64_t v100 = *(void *)(v0 + 848);
    uint64_t v101 = *(void *)(v0 + 824);
    if (v96)
    {
      v184 = *(void **)(v0 + 936);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      NSString v102 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_1000617F4();
      swift_allocError();
      *(void *)uint64_t v103 = 1;
      *(unsigned char *)(v103 + 8) = 1;
      uint64_t v182 = v101;
      uint64_t v104 = (void *)_convertErrorToNSError(_:)();
      id v105 = (void *)_convertErrorToNSError(_:)();

      swift_errorRelease();
      [v96 logResultForEvent:v102 hardFailure:1 result:v105];

      swift_allocError();
      *(void *)uint64_t v106 = 1;
      *(unsigned char *)(v106 + 8) = 1;
      swift_willThrow();

      sub_10002BD3C(v98, v97);
      (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v187, v185);
      v99(v100, v182);
    }
    else
    {
      id v107 = *(void **)(v0 + 936);
      sub_1000617F4();
      swift_allocError();
      *(void *)uint64_t v108 = 1;
      *(unsigned char *)(v108 + 8) = 1;
      swift_willThrow();

      sub_10002BD3C(v98, v97);
      (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v187, v185);
      v99(v100, v101);
    }
    goto LABEL_51;
  }
  uint64_t v8 = (void *)v7;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 valueForHTTPHeaderField:v9];

  if (v10)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE700000000000000;
    uint64_t v11 = 0x3E4853206F6E3CLL;
  }
  id v30 = *(id *)(v0 + 936);
  swift_bridgeObjectRetain_n();
  id v31 = v30;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = *(void **)(v0 + 936);
  uint64_t v36 = &selRef_sortedArrayUsingSelector_;
  if (v34)
  {
    uint64_t v37 = swift_slowAlloc();
    v188[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 134218498;
    unint64_t v38 = v13;
    id v39 = [v8 statusCode];

    *(void *)(v0 + 696) = v39;
    unint64_t v13 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v37 + 12) = 2080;
    swift_beginAccess();
    char v40 = *(unsigned char *)(v0 + 184);
    uint64_t v41 = *(void *)(v0 + 192);
    *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 168);
    *(unsigned char *)(v0 + 280) = v40;
    *(void *)(v0 + 288) = v41;
    sub_10006185C();
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 720) = sub_1000262AC(v42, v43, v188);
    uint64_t v36 = &selRef_sortedArrayUsingSelector_;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 728) = sub_1000262AC(v11, v13, v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Received %ld response for %s with %s", (uint8_t *)v37, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  if ([v8 v36[356]] != (id)200)
  {
    unint64_t v56 = *(void *)(v0 + 928);
    unint64_t v57 = v36;
    uint64_t v58 = *(void *)(v0 + 920);
    uint64_t v59 = *(void *)(v0 + 776);
    swift_bridgeObjectRelease();
    sub_10002BD3C(v58, v56);
    id v60 = [v8 v57[356]];
    uint64_t v61 = *(void **)(v59 + 120);
    if (v61)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      NSString v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_1000617F4();
      swift_allocError();
      *(void *)uint64_t v63 = v60;
      *(unsigned char *)(v63 + 8) = 0;
      uint64_t v64 = (void *)_convertErrorToNSError(_:)();
      os_log_type_t v65 = (void *)_convertErrorToNSError(_:)();

      swift_errorRelease();
      [v61 logResultForEvent:v62 hardFailure:1 result:v65];
    }
    sub_100029208(*(void *)(v0 + 776) + 128, v0 + 16, &qword_100158828);
    uint64_t v66 = *(void *)(v0 + 40);
    if (v66)
    {
      uint64_t v67 = *(void *)(v0 + 48);
      sub_10002BCF8((void *)(v0 + 16), *(void *)(v0 + 40));
      sub_1000617F4();
      uint64_t v68 = swift_allocError();
      *(void *)uint64_t v69 = v60;
      *(unsigned char *)(v69 + 8) = 0;
      sub_100020378(&qword_100158268);
      uint64_t v70 = *(void *)(sub_100020378(&qword_100158270) - 8);
      unint64_t v71 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      uint64_t v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = xmmword_10010B120;
      int v73 = (void *)(v72 + v71);
      *int v73 = 7368801;
      v73[1] = 0xE300000000000000;
      EventValue.init(integerLiteral:)();
      unint64_t v74 = sub_10004E784(v72);
      (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v67 + 8))(0x73656C696D747753, 0xEC000000656E6F74, v68, v74, v66, v67);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      sub_100028A4C(v0 + 16);
    }
    else
    {
      sub_100028C8C(v0 + 16, &qword_100158828);
    }
    uint64_t v86 = *(void **)(v0 + 936);
    unint64_t v87 = *(void *)(v0 + 928);
    uint64_t v88 = *(void *)(v0 + 920);
    uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
    uint64_t v90 = *(void *)(v0 + 848);
    uint64_t v91 = *(void *)(v0 + 824);
    sub_1000617F4();
    swift_allocError();
    *(void *)uint64_t v92 = v60;
    *(unsigned char *)(v92 + 8) = 0;
    swift_willThrow();

    sub_10002BD3C(v88, v87);
    (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v187, v185);
    v89(v90, v91);
    goto LABEL_51;
  }
  unint64_t v178 = v13;
  uint64_t v44 = *(void *)(v0 + 776);
  uint64_t v45 = *(void **)(v44 + 120);
  if (v45)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v45 logResultForEvent:v46 hardFailure:0 result:0];
  }
  uint64_t v47 = *(void *)(v0 + 944);
  id v48 = objc_allocWithZone((Class)MilestoneRootsResponse);
  id v49 = sub_100038540();
  *(void *)(v0 + 976) = v49;
  if (v47)
  {
    unint64_t v50 = *(void **)(v0 + 936);
    unint64_t v51 = *(void *)(v0 + 928);
    uint64_t v52 = *(void *)(v0 + 920);
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
    uint64_t v54 = *(void *)(v0 + 848);
    uint64_t v55 = *(void *)(v0 + 824);
    sub_10002BD3C(v52, v51);

    sub_10002BD3C(v52, v51);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v187, v185);
    v53(v54, v55);
LABEL_51:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v160 = *(uint64_t (**)(void))(v0 + 8);
    return v160();
  }
  id v78 = v49;
  uint64_t v181 = v11;
  uint64_t v79 = *(void *)(v0 + 776);
  sub_10002BD3C(*(void *)(v0 + 920), *(void *)(v0 + 928));
  sub_10003863C(v79 + 24, v0 + 56);
  sub_10006F110(v0 + 56);
  sub_100020378((uint64_t *)&unk_1001580E0);
  uint64_t v80 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 16))(v80, v187, v185);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v186 + 56))(v80, 0, 1, v185);
  MilestoneRootsResponse.receiptTime.setter(v80);
  swift_task_dealloc();
  uint64_t v81 = *(void **)(v79 + 8);
  id v82 = v81;
  MilestoneRootsResponse.configBag.setter(v81);
  uint64_t v83 = *(void **)(v79 + 16);
  v83;
  MilestoneRootsResponse.keyBag.setter(v83);
  Swift::Bool v84 = MilestoneRootsResponse.isNewEpoch()();
  if (v85)
  {
    swift_errorRelease();
    goto LABEL_35;
  }
  if (!v84)
  {
LABEL_35:
    MilestoneRootsResponse.verify()();
    v176 = v78;
    if (v112 == 1)
    {
      if (v45)
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        NSString v113 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v45 logResultForEvent:v113 hardFailure:0 result:0];
      }
      swift_bridgeObjectRetain();
      id v114 = Logger.logObject.getter();
      os_log_type_t v115 = static os_log_type_t.default.getter();
      BOOL v116 = os_log_type_enabled(v114, v115);
      uint64_t v117 = *(void **)(v0 + 936);
      unint64_t v118 = *(void *)(v0 + 928);
      long long v119 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
      uint64_t v120 = *(void *)(v0 + 848);
      uint64_t v121 = *(void *)(v0 + 824);
      if (v116)
      {
        uint64_t v171 = *(void *)(v0 + 920);
        uint64_t v172 = *(void *)(v0 + 824);
        uint64_t v122 = swift_slowAlloc();
        v188[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v122 = 136315394;
        swift_beginAccess();
        char v123 = *(unsigned char *)(v0 + 184);
        uint64_t v124 = *(void *)(v0 + 192);
        *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 168);
        *(unsigned char *)(v0 + 248) = v123;
        *(void *)(v0 + 256) = v124;
        sub_10006185C();
        uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 664) = sub_1000262AC(v125, v126, v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v122 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 672) = sub_1000262AC(v181, v178, v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v114, v115, "Verified response for %s with %s", (uint8_t *)v122, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_10002BD3C(v171, v118);
        (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v187, v185);
        v119(v120, v172);
      }
      else
      {
        uint64_t v169 = *(void *)(v0 + 920);

        sub_10002BD3C(v169, v118);
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v187, v185);
        v119(v120, v121);
      }
    }
    else
    {
      if (v45)
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        NSString v127 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        sub_1000617F4();
        swift_allocError();
        *(void *)uint64_t v128 = 2;
        *(unsigned char *)(v128 + 8) = 1;
        uint64_t v129 = (void *)_convertErrorToNSError(_:)();
        long long v130 = (void *)_convertErrorToNSError(_:)();

        swift_errorRelease();
        [v45 logResultForEvent:v127 hardFailure:1 result:v130];
      }
      sub_1000617F4();
      uint64_t v131 = swift_allocError();
      *(void *)uint64_t v132 = 2;
      *(unsigned char *)(v132 + 8) = 1;
      swift_willThrow();
      uint64_t v133 = (void *)(v0 + 96);
      uint64_t v134 = *(void **)(v44 + 120);
      if (v134)
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        NSString v135 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v136 = (void *)_convertErrorToNSError(_:)();
        unint64_t v137 = (void *)_convertErrorToNSError(_:)();

        [v134 logResultForEvent:v135 hardFailure:1 result:v137];
      }
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      uint64_t v138 = Logger.logObject.getter();
      os_log_type_t v139 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v138, v139))
      {
        uint64_t v140 = swift_slowAlloc();
        v173 = (void *)swift_slowAlloc();
        v188[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v140 = 136315650;
        swift_beginAccess();
        char v141 = *(unsigned char *)(v0 + 184);
        uint64_t v142 = *(void *)(v0 + 192);
        *(_OWORD *)(v0 + 200) = *(_OWORD *)(v0 + 168);
        *(unsigned char *)(v0 + 216) = v141;
        *(void *)(v0 + 224) = v142;
        sub_10006185C();
        uint64_t v143 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 656) = sub_1000262AC(v143, v144, v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v140 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 648) = sub_1000262AC(v181, v178, v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v140 + 22) = 2112;
        swift_errorRetain();
        uint64_t v145 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 640) = v145;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v173 = v145;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v138, v139, "Response for %s with %s failed: %@", (uint8_t *)v140, 0x20u);
        sub_100020378(&qword_1001590C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v133 = (void *)(v0 + 96);
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_errorRelease();
        swift_errorRelease();
      }

      sub_100029208(*(void *)(v0 + 776) + 128, (uint64_t)v133, &qword_100158828);
      uint64_t v146 = *(void *)(v0 + 120);
      if (v146)
      {
        uint64_t v147 = *(void *)(v0 + 128);
        sub_10002BCF8(v133, *(void *)(v0 + 120));
        sub_100020378(&qword_100158268);
        uint64_t v148 = *(void *)(sub_100020378(&qword_100158270) - 8);
        uint64_t v149 = (uint64_t)v133;
        unint64_t v150 = (*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80);
        uint64_t v151 = swift_allocObject();
        *(_OWORD *)(v151 + 16) = xmmword_10010B120;
        size_t v152 = (void *)(v151 + v150);
        *size_t v152 = 7368801;
        v152[1] = 0xE300000000000000;
        swift_errorRetain();
        EventValue.init(integerLiteral:)();
        unint64_t v153 = sub_10004E784(v151);
        (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v147 + 8))(0x73656C696D747753, 0xEC000000656E6F74, v131, v153, v146, v147);
        swift_bridgeObjectRelease();
        swift_errorRelease();
        sub_100028A4C(v149);
      }
      else
      {
        sub_100028C8C((uint64_t)v133, &qword_100158828);
      }
      v154 = *(void **)(v0 + 936);
      unint64_t v155 = *(void *)(v0 + 928);
      uint64_t v156 = *(void *)(v0 + 920);
      uint64_t v157 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
      uint64_t v158 = *(void *)(v0 + 848);
      uint64_t v159 = *(void *)(v0 + 824);
      swift_willThrow();

      sub_10002BD3C(v156, v155);
      (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v187, v185);
      v157(v158, v159);
    }
    goto LABEL_51;
  }
  uint64_t v109 = *(void *)(v0 + 776);
  swift_bridgeObjectRelease();
  sub_100084EC0();
  uint64_t v110 = *(void **)(v109 + 104);
  *(void *)(v0 + 984) = v110;
  if (!v110)
  {

    uint64_t v161 = *(void **)(v0 + 976);
    uint64_t v162 = *(void *)(v0 + 968);
    uint64_t v163 = *(void *)(v0 + 960);
    uint64_t v164 = *(void *)(v0 + 952);
    int v165 = *(void **)(v0 + 936);
    __int16 v166 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
    uint64_t v167 = *(void *)(v0 + 848);
    uint64_t v168 = *(void *)(v0 + 824);
    sub_10002BD3C(*(void *)(v0 + 920), *(void *)(v0 + 928));

    (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v162, v164);
    v166(v167, v168);
    goto LABEL_51;
  }
  uint64_t v111 = *v110 + 184;
  *(void *)(v0 + 992) = *(void *)v111;
  *(void *)(v0 + 1000) = v111 & 0xFFFFFFFFFFFFLL | 0x62BB000000000000;
  return _swift_task_switch(sub_100060C40, v110, 0);
}

uint64_t sub_100060C40()
{
  (*(void (**)(uint64_t))(v0 + 992))(1);
  return _swift_task_switch(sub_100060CB4, 0, 0);
}

uint64_t sub_100060CB4()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 776) + 104);
  *(void *)(v0 + 1008) = v1;
  if (v1)
  {
    uint64_t v2 = *v1 + 184;
    *(void *)(v0 + 1016) = *(void *)v2;
    *(void *)(v0 + 1024) = v2 & 0xFFFFFFFFFFFFLL | 0x62BB000000000000;
    return _swift_task_switch(sub_100060E4C, v1, 0);
  }
  else
  {

    uint64_t v3 = *(void **)(v0 + 976);
    uint64_t v4 = *(void *)(v0 + 968);
    uint64_t v5 = *(void *)(v0 + 960);
    uint64_t v6 = *(void *)(v0 + 952);
    uint64_t v7 = *(void **)(v0 + 936);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
    uint64_t v9 = *(void *)(v0 + 848);
    uint64_t v10 = *(void *)(v0 + 824);
    sub_10002BD3C(*(void *)(v0 + 920), *(void *)(v0 + 928));

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v8(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100060E4C()
{
  (*(void (**)(uint64_t))(v0 + 1016))(4);
  return _swift_task_switch(sub_100060EC0, 0, 0);
}

uint64_t sub_100060EC0()
{
  uint64_t v1 = *(void **)(v0 + 976);
  uint64_t v2 = *(void *)(v0 + 968);
  uint64_t v3 = *(void *)(v0 + 960);
  uint64_t v4 = *(void *)(v0 + 952);
  uint64_t v5 = *(void **)(v0 + 936);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
  uint64_t v7 = *(void *)(v0 + 848);
  uint64_t v8 = *(void *)(v0 + 824);
  sub_10002BD3C(*(void *)(v0 + 920), *(void *)(v0 + 928));

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v6(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100060FE4()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void **)(*(void *)(v0 + 776) + 120);
  if (v1)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v3 = (void *)_convertErrorToNSError(_:)();
    uint64_t v4 = (void *)_convertErrorToNSError(_:)();

    [v1 logResultForEvent:v2 hardFailure:1 result:v4];
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 880);
  uint64_t v6 = *(void *)(v0 + 848);
  uint64_t v7 = *(void *)(v0 + 824);
  (*(void (**)(void, void, void))(v0 + 864))(*(void *)(v0 + 800), *(void *)(v0 + 856), *(void *)(v0 + 784));
  uint64_t v8 = swift_task_alloc();
  v5(v8, v6, v7);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_t log = v9;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    v38[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    swift_beginAccess();
    char v12 = *(unsigned char *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 192);
    *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 168);
    *(unsigned char *)(v0 + 312) = v12;
    *(void *)(v0 + 320) = v13;
    sub_10006185C();
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 712) = sub_1000262AC(v14, v15, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    sub_100020378(&qword_100157A70);
    uint64_t v16 = swift_task_alloc();
    URLRequest.url.getter();
    uint64_t v17 = type metadata accessor for URL();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      sub_100028C8C(v16, &qword_100157A70);
      unint64_t v19 = 0xEB000000004C5255;
      uint64_t v20 = 0x206E776F6E6B6E75;
    }
    else
    {
      uint64_t v20 = URL.description.getter();
      unint64_t v19 = v24;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    }
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
    uint64_t v26 = *(void *)(v0 + 824);
    uint64_t v34 = *(void *)(v0 + 800);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v0 + 896);
    uint64_t v33 = *(void *)(v0 + 784);
    swift_task_dealloc();
    *(void *)(v0 + 704) = sub_1000262AC(v20, v19, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v25(v8, v26);
    *(_WORD *)(v11 + 22) = 2112;
    swift_errorRetain();
    uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 688) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v36 = v27;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v10, "Failed to fetch %s from %s: %@", (uint8_t *)v11, 0x20u);
    sub_100020378(&qword_1001590C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v35(v34, v33);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 896);
    uint64_t v22 = *(void *)(v0 + 800);
    uint64_t v23 = *(void *)(v0 + 784);
    (*(void (**)(uint64_t, void))(v0 + 904))(v8, *(void *)(v0 + 824));
    swift_errorRelease();
    swift_errorRelease();

    swift_task_dealloc();
    v21(v22, v23);
  }
  unint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
  uint64_t v29 = *(void *)(v0 + 848);
  uint64_t v30 = *(void *)(v0 + 824);
  swift_willThrow();
  v28(v29, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_10006158C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100020378(&qword_100158868);
  uint64_t v10 = *(void *)(type metadata accessor for URLQueryItem() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for URLQueryItem() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000618B0(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

unint64_t sub_1000617F4()
{
  unint64_t result = qword_100158838;
  if (!qword_100158838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158838);
  }
  return result;
}

uint64_t sub_100061848(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10006185C()
{
  unint64_t result = qword_100158840;
  if (!qword_100158840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158840);
  }
  return result;
}

uint64_t sub_1000618B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for URLQueryItem() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for MilestoneDownloadError()
{
  return &type metadata for MilestoneDownloadError;
}

ValueMetadata *type metadata accessor for ActualMilestoneFetcher()
{
  return &type metadata for ActualMilestoneFetcher;
}

void destroy for MilestoneDownload(uint64_t a1)
{
  sub_100028A4C(a1 + 24);
  sub_100028A4C(a1 + 64);
  swift_release();

  if (*(void *)(a1 + 152)) {
    sub_100028A4C(a1 + 128);
  }
}

uint64_t initializeWithCopy for MilestoneDownload(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = a2 + 24;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  id v11 = v4;
  id v12 = v5;
  v10(v6, v7, v9);
  long long v13 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 64, a2 + 64);
  size_t v14 = *(void **)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v14;
  BOOL v15 = *(void **)(a2 + 120);
  *(void *)(a1 + 120) = v15;
  uint64_t v16 = *(void *)(a2 + 152);
  swift_retain();
  id v17 = v14;
  id v18 = v15;
  if (v16)
  {
    uint64_t v19 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = v16;
    *(void *)(a1 + 160) = v19;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v16 - 8))(a1 + 128, a2 + 128, v16);
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v20;
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
  }
  return a1;
}

uint64_t assignWithCopy for MilestoneDownload(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 16);
  long long v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  sub_100048498((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  sub_100048498((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void **)(a1 + 112);
  id v11 = *(void **)(a2 + 112);
  *(void *)(a1 + 112) = v11;
  id v12 = v11;

  long long v13 = *(void **)(a1 + 120);
  size_t v14 = *(void **)(a2 + 120);
  *(void *)(a1 + 120) = v14;
  id v15 = v14;

  uint64_t v16 = *(void *)(a2 + 152);
  if (!*(void *)(a1 + 152))
  {
    if (v16)
    {
      *(void *)(a1 + 152) = v16;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 128, a2 + 128);
      return a1;
    }
LABEL_7:
    long long v17 = *(_OWORD *)(a2 + 128);
    long long v18 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v17;
    *(_OWORD *)(a1 + 144) = v18;
    return a1;
  }
  if (!v16)
  {
    sub_100028A4C(a1 + 128);
    goto LABEL_7;
  }
  sub_100048498((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  return a1;
}

__n128 initializeWithTake for MilestoneDownload(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for MilestoneDownload(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  long long v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  sub_100028A4C(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100028A4C(a1 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_release();
  long long v8 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);

  long long v9 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);

  if (*(void *)(a1 + 152)) {
    sub_100028A4C(a1 + 128);
  }
  long long v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for MilestoneDownload(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MilestoneDownload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MilestoneDownload()
{
  return &type metadata for MilestoneDownload;
}

unint64_t sub_100061F14()
{
  unint64_t result = qword_100158850;
  if (!qword_100158850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158850);
  }
  return result;
}

unint64_t sub_100061F68()
{
  unint64_t result = qword_100158860;
  if (!qword_100158860)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100158860);
  }
  return result;
}

uint64_t *sub_100061FA8()
{
  return &qword_100158870;
}

uint64_t sub_100061FB4()
{
  swift_beginAccess();
  uint64_t v0 = qword_100158870;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100062008(uint64_t a1, char *a2)
{
  qword_100158870 = a1;
  off_100158878 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100062064())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000620BC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(a1 >> 62)) {
    return 7;
  }
  if (a1 >> 62 == 1) {
    return 8;
  }
  uint64_t v4 = a3 | a2;
  if (a1 == 0x8000000000000000 && !v4) {
    return 1;
  }
  if (a1 == 0x8000000000000008 && !v4) {
    return 2;
  }
  if (a1 == 0x8000000000000010 && !v4) {
    return 3;
  }
  if (a1 == 0x8000000000000018 && !v4) {
    return 4;
  }
  if (v4) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = a1 == 0x8000000000000020;
  }
  if (v5) {
    return 5;
  }
  else {
    return 6;
  }
}

unint64_t sub_10006215C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      sub_100020378(&qword_100158880);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10010B120;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v4;
      swift_getErrorValue();
      *(void *)(inited + 72) = v13;
      BOOL v5 = sub_100047360((uint64_t *)(inited + 48));
      (*(void (**)(uint64_t *))(*(void *)(v13 - 8) + 16))(v5);
      return sub_10006234C(inited);
    }
    else
    {
      return sub_10006234C((uint64_t)_swiftEmptyArrayStorage);
    }
  }
  else
  {
    sub_100020378(&qword_100158880);
    uint64_t v9 = swift_initStackObject();
    *(_OWORD *)(v9 + 16) = xmmword_10010C770;
    *(void *)(v9 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v9 + 40) = v10;
    swift_getErrorValue();
    *(void *)(v9 + 72) = v12;
    id v11 = sub_100047360((uint64_t *)(v9 + 48));
    (*(void (**)(uint64_t *))(*(void *)(v12 - 8) + 16))(v11);
    *(void *)(v9 + 80) = 0x736D42747773;
    *(void *)(v9 + 88) = 0xE600000000000000;
    *(void *)(v9 + 96) = a2;
    *(void *)(v9 + 120) = &type metadata for UInt64;
    *(void *)(v9 + 128) = 0x736D50747773;
    *(void *)(v9 + 168) = &type metadata for UInt64;
    *(void *)(v9 + 136) = 0xE600000000000000;
    *(void *)(v9 + 144) = a3;
    return sub_10006234C(v9);
  }
}

unint64_t sub_10006234C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    long long v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100020378(&qword_1001588D0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  long long v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100029208(v6, (uint64_t)&v15, &qword_1001588D8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100049298(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    id v11 = (uint64_t *)(v3[6] + 16 * result);
    *id v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000383B0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100062484()
{
  return Error<>._domain.getter();
}

uint64_t sub_1000624B4()
{
  return Error<>._code.getter();
}

uint64_t sub_1000624E4()
{
  unint64_t v1 = *v0;
  unint64_t v2 = (unint64_t)*v0 >> 62;
  if (!v2) {
    return 7;
  }
  if (v2 == 1) {
    return 8;
  }
  if (v1 == 0x8000000000000000 && *(_OWORD *)(v0 + 1) == 0) {
    return 1;
  }
  if (v1 == 0x8000000000000008 && *(_OWORD *)(v0 + 1) == 0) {
    return 2;
  }
  if (v1 == 0x8000000000000010 && *(_OWORD *)(v0 + 1) == 0) {
    return 3;
  }
  if (v1 == 0x8000000000000018 && *(_OWORD *)(v0 + 1) == 0) {
    return 4;
  }
  if (*(_OWORD *)(v0 + 1) == 0 && v1 == 0x8000000000000020) {
    return 5;
  }
  else {
    return 6;
  }
}

unint64_t sub_10006258C()
{
  return sub_10006215C(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_100062598()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F2B8 = result;
  return result;
}

uint64_t sub_1000625CC()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F2C8 = result;
  return result;
}

uint64_t sub_100062600()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F2D8 = result;
  return result;
}

uint64_t sub_100062634()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F2E8 = result;
  return result;
}

uint64_t sub_100062668()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F2F8 = result;
  return result;
}

uint64_t sub_10006269C()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F308 = result;
  return result;
}

uint64_t sub_1000626D0()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F318 = result;
  return result;
}

uint64_t sub_100062704(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SHA256Digest();
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100051478();
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v21 = v5;
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      uint64_t v20 = 0;
      sub_10002BD94(a1, a2);
      sub_100051558((int)a1, a1 >> 32);
      sub_10002BD3C(a1, a2);
      uint64_t v5 = v21;
      goto LABEL_9;
    case 2uLL:
      uint64_t v20 = 0;
      uint64_t v21 = v5;
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      sub_10002BD94(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v13 = v12;
      uint64_t v5 = v21;
      sub_100051558(v13, v11);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      memset(v25, 0, 14);
      goto LABEL_7;
    default:
      v25[0] = a1;
      LOWORD(v25[1]) = a2;
      BYTE2(v25[1]) = BYTE2(a2);
      BYTE3(v25[1]) = BYTE3(a2);
      BYTE4(v25[1]) = BYTE4(a2);
      BYTE5(v25[1]) = BYTE5(a2);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_8:
      sub_10002BD3C(a1, a2);
LABEL_9:
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v26 = v8;
      unint64_t v27 = sub_100051608();
      uint64_t v14 = sub_100047360(v25);
      uint64_t v15 = v22;
      (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 16))(v14, v10, v8);
      sub_10002BCF8(v25, v26);
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v8);
      uint64_t v16 = v23;
      unint64_t v17 = v24;
      sub_100028A4C((uint64_t)v25);
      uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
      sub_10002BD3C(v16, v17);
      return countAndFlagsBits;
  }
}

uint64_t sub_100062B08()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162328);
  sub_1000294A8(v0, (uint64_t)qword_100162328);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100062B88()
{
  if (qword_10015F320 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162328);
}

uint64_t sub_100062BEC@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015F320 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162328);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t ATLogProofs.configBag.getter()
{
  if (qword_10015F2B0 != -1) {
    swift_once();
  }
  unint64_t v1 = (const void *)(qword_10015F2B8 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100038600(0, &qword_100158888);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

void ATLogProofs.configBag.setter(void *a1)
{
}

void (*ATLogProofs.configBag.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = ATLogProofs.configBag.getter();
  return sub_100062E40;
}

void sub_100062E40(uint64_t a1, char a2)
{
}

uint64_t ATLogProofs.keyBag.getter()
{
  if (qword_10015F2C0 != -1) {
    swift_once();
  }
  uint64_t v1 = (const void *)(qword_10015F2C8 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100038600(0, (unint64_t *)&qword_1001578E8);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

void ATLogProofs.keyBag.setter(void *a1)
{
}

void (*ATLogProofs.keyBag.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = ATLogProofs.keyBag.getter();
  return sub_100063010;
}

void sub_100063010(uint64_t a1, char a2)
{
}

double sub_100063034@<D0>(uint64_t a1@<X8>)
{
  return sub_1000635F8(&qword_10015F2D0, &qword_10015F2D8, &qword_1001578F0, a1);
}

uint64_t sub_100063060(uint64_t a1)
{
  return sub_100063734(a1, &qword_10015F2D0, &qword_10015F2D8, &qword_1001578F8);
}

void (*sub_10006308C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_1000635F8(&qword_10015F2D0, &qword_10015F2D8, &qword_1001578F0, (uint64_t)v3);
  return sub_100063114;
}

void sub_100063114(uint64_t *a1, char a2)
{
}

uint64_t ATLogProofs.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015F2E0 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015F2E8 + 16);
  swift_beginAccess();
  id v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100033860((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100028C8C((uint64_t)v10, &qword_1001578E0);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t ATLogProofs.receiptTime.setter(uint64_t a1)
{
  id v2 = v1;
  if (qword_10015F2E0 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10015F2E8;
  uint64_t v5 = sub_100020378((uint64_t *)&unk_1001580E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a1, (uint64_t)v7, (uint64_t *)&unk_1001580E0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_beginAccess();
  objc_setAssociatedObject(v2, (const void *)(v4 + 16), isa, (void *)0x303);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, (uint64_t *)&unk_1001580E0);
}

void (*ATLogProofs.receiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(sub_100020378((uint64_t *)&unk_1001580E0) - 8) + 64);
  a1[1] = v3;
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  ATLogProofs.receiptTime.getter((uint64_t)v4);
  return sub_1000634F4;
}

void sub_1000634F4(uint64_t a1, char a2)
{
  id v2 = *(void **)(a1 + 16);
  if (a2)
  {
    __chkstk_darwin(a1);
    uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100029208((uint64_t)v2, (uint64_t)v4, (uint64_t *)&unk_1001580E0);
    ATLogProofs.receiptTime.setter((uint64_t)v4);
    sub_100028C8C((uint64_t)v2, (uint64_t *)&unk_1001580E0);
    free(v2);
  }
  else
  {
    ATLogProofs.receiptTime.setter(*(void *)(a1 + 16));
    free(v2);
  }
}

double ATLogProofs.fetcher.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_1000635F8(&qword_10015F2F0, &qword_10015F2F8, &qword_100158890, a1);
}

double sub_1000635F8@<D0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v8 = (const void *)(*a2 + 16);
  swift_beginAccess();
  id v9 = objc_getAssociatedObject(v4, v8);
  swift_endAccess();
  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_100033860((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    sub_100028C8C((uint64_t)v12, &qword_1001578E0);
    goto LABEL_10;
  }
  sub_100020378(a3);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t ATLogProofs.fetcher.setter(uint64_t a1)
{
  return sub_100063734(a1, &qword_10015F2F0, &qword_10015F2F8, &qword_100158898);
}

uint64_t sub_100063734(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = v4;
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v9 = *a3;
  sub_100029208(a1, (uint64_t)v18, a4);
  uint64_t v10 = v19;
  if (v19)
  {
    uint64_t v11 = sub_10002BCF8(v18, v19);
    uint64_t v12 = *(void *)(v10 - 8);
    __chkstk_darwin(v11);
    uint64_t v14 = (char *)&v18[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v12 + 16))(v14);
    uint64_t v15 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v10);
    sub_100028A4C((uint64_t)v18);
  }
  else
  {
    uint64_t v15 = 0;
  }
  swift_beginAccess();
  objc_setAssociatedObject(v7, (const void *)(v9 + 16), v15, (void *)1);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, a4);
}

void (*ATLogProofs.fetcher.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  ATLogProofs.fetcher.getter((uint64_t)v3);
  return sub_100063940;
}

void sub_100063940(uint64_t *a1, char a2)
{
  id v2 = (void *)*a1;
  if (a2)
  {
    sub_100029208(*a1, (uint64_t)v2 + 40, &qword_100158898);
    ATLogProofs.fetcher.setter((uint64_t)v2 + 40);
    sub_100028C8C((uint64_t)v2, &qword_100158898);
  }
  else
  {
    ATLogProofs.fetcher.setter(*a1);
  }

  free(v2);
}

uint64_t ATLogProofs.analytics.getter()
{
  if (qword_10015F300 != -1) {
    swift_once();
  }
  uint64_t v1 = (const void *)(qword_10015F308 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100038600(0, &qword_1001588A0);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

void ATLogProofs.analytics.setter(void *a1)
{
}

void (*ATLogProofs.analytics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = ATLogProofs.analytics.getter();
  return sub_100063B70;
}

void sub_100063B70(uint64_t a1, char a2)
{
}

double sub_100063B94@<D0>(uint64_t a1@<X8>)
{
  return sub_1000635F8(&qword_10015F310, &qword_10015F318, &qword_1001588A8, a1);
}

uint64_t sub_100063BC0(uint64_t a1)
{
  return sub_100063734(a1, &qword_10015F310, &qword_10015F318, &qword_100158828);
}

void (*sub_100063BEC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_1000635F8(&qword_10015F310, &qword_10015F318, &qword_1001588A8, (uint64_t)v3);
  return sub_100063C74;
}

void sub_100063C74(uint64_t *a1, char a2)
{
}

void sub_100063CA0(uint64_t *a1, char a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8 = (void *)*a1;
  if (a2)
  {
    sub_100029208(*a1, (uint64_t)v8 + 40, a5);
    sub_100063734((uint64_t)v8 + 40, a3, a4, a5);
    sub_100028C8C((uint64_t)v8, a5);
  }
  else
  {
    sub_100063734(*a1, a3, a4, a5);
  }

  free(v8);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ATLogProofs.isNewEpoch()()
{
  id v2 = v0;
  if ([v0 hasMilestoneConsistency])
  {
    id v3 = [v0 milestoneConsistency];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (void *)ATLogProofs.keyBag.getter();
      if (!v5)
      {
        sub_100034F60();
        swift_allocError();
        v23[1] = 0;
        v23[2] = 0;
        void *v23 = 0x8000000000000000;
        swift_willThrow();

        return v0 & 1;
      }
      uint64_t v6 = v5;
      id v7 = [v5 patLogBeginningMs];
      id v8 = [v6 tltLogBeginningMs];
      if ([v4 hasTltInclusionProof])
      {
        id v9 = [v4 tltInclusionProof];
        if (v9)
        {
          uint64_t v10 = v9;
          unint64_t v11 = sub_100029780(v9, (unint64_t)v8);
          if ((v14 & 0x100) == 0)
          {
            uint64_t v15 = v11;
            char v16 = v14;
            *(void *)os_log_type_t type = v13;
            uint64_t v69 = v12;
            if (qword_10015F320 != -1) {
              swift_once();
            }
            uint64_t v17 = type metadata accessor for Logger();
            sub_1000294A8(v17, (uint64_t)qword_100162328);
            long long v18 = Logger.logObject.getter();
            os_log_type_t v19 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v18, v19))
            {
              uint64_t v0 = v15;
              uint64_t v20 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long v72 = swift_slowAlloc();
              *(_DWORD *)uint64_t v20 = 136446210;
              uint64_t v75 = (uint64_t)v0;
              uint64_t v76 = v69;
              uint64_t v77 = *(void *)type;
              LOBYTE(v78) = v16 & 1;
              sub_1000663F0();
              uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v75 = sub_1000262AC(v21, v22, (uint64_t *)&v72);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v18, v19, "Detected new TLT epoch: %{public}s", v20, 0xCu);
              LOBYTE(v0) = 1;
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              LOBYTE(v0) = 1;
            }
            return v0 & 1;
          }
        }
      }
      if ([v4 hasPatInclusionProof])
      {
        id v24 = [v4 patInclusionProof];
        if (v24)
        {
          uint64_t v25 = v24;
          unint64_t v26 = sub_100029780(v24, (unint64_t)v7);
          if ((v29 & 0x100) == 0)
          {
            uint64_t v30 = v26;
            char v31 = v29;
            *(void *)typea = v28;
            uint64_t v70 = v27;
            if (qword_10015F320 != -1) {
              swift_once();
            }
            uint64_t v32 = type metadata accessor for Logger();
            sub_1000294A8(v32, (uint64_t)qword_100162328);
            uint64_t v33 = Logger.logObject.getter();
            os_log_type_t v34 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v33, v34))
            {
              uint64_t v0 = v30;
              uint64_t v35 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long v72 = swift_slowAlloc();
              *(_DWORD *)uint64_t v35 = 136446210;
              uint64_t v75 = (uint64_t)v0;
              uint64_t v76 = v70;
              uint64_t v77 = *(void *)typea;
              LOBYTE(v78) = v31 & 1;
              sub_1000663F0();
              uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v75 = sub_1000262AC(v36, v37, (uint64_t *)&v72);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v33, v34, "Detected new PAT epoch: %{public}s", v35, 0xCu);
              LOBYTE(v0) = 1;
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              LOBYTE(v0) = 1;
            }
            return v0 & 1;
          }
        }
      }
    }
  }
  LOBYTE(v0) = (_BYTE)v2;
  sub_1000635F8(&qword_10015F2D0, &qword_10015F2D8, &qword_1001578F0, (uint64_t)&v72);
  if (!v74)
  {
    sub_100028C8C((uint64_t)&v72, &qword_1001578F8);
    sub_100034F60();
    swift_allocError();
    v44[1] = 0;
    v44[2] = 0;
    *uint64_t v44 = 0x8000000000000018;
    swift_willThrow();
    return v0 & 1;
  }
  sub_10003CD24(&v72, (uint64_t)&v75);
  id v38 = [v2 inclusionProof];
  if (!v38)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v39 = v38;
  uint64_t v0 = [v38 slh];

  if (!v0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  id v40 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v0];

  LOBYTE(v0) = (_BYTE)v40;
  id v41 = sub_100066A5C();
  if (v1)
  {
    swift_errorRelease();
    sub_100034F60();
    swift_allocError();
    v43[1] = 0;
    v43[2] = 0;
    void *v43 = 0x8000000000000028;
    swift_willThrow();

    sub_100028A4C((uint64_t)&v75);
    return v0 & 1;
  }
  id v46 = v41;
  uint64_t v47 = v42;
  uint64_t v48 = v78;
  uint64_t v49 = v79;
  sub_10002BCF8(&v75, v78);
  (*(void (**)(id, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 112))(v46, v47, 0, 1, 5, 1, v48, v49);
  unint64_t v51 = v50;
  swift_bridgeObjectRelease();
  id v52 = [v2 inclusionProof];
  if (!v52) {
    goto LABEL_42;
  }
  if ((v51 & 0x8000000000000000) == 0)
  {
    uint64_t v53 = v52;
    unint64_t v54 = sub_100029780(v52, v51);
    uint64_t v56 = v55;
    uint64_t v58 = v57;
    __int16 v60 = v59;

    if ((v60 & 0x100) != 0)
    {

      sub_100028A4C((uint64_t)&v75);
      LOBYTE(v0) = 0;
    }
    else
    {
      if (qword_10015F320 != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      sub_1000294A8(v61, (uint64_t)qword_100162328);
      uint64_t v0 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v0, v62))
      {
        os_log_type_t typeb = v62;
        uint64_t v63 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        *(void *)&long long v72 = v54;
        uint64_t v80 = v71;
        *(_DWORD *)uint64_t v63 = 136446466;
        *((void *)&v72 + 1) = v56;
        uint64_t v73 = v58;
        LOBYTE(v74) = v60 & 1;
        sub_1000663F0();
        uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v72 = sub_1000262AC(v64, v65, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v63 + 12) = 2050;
        *(void *)&long long v72 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v0, typeb, "Detected new ATL epoch: %{public}s - %{public}lld", (uint8_t *)v63, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      sub_100028A4C((uint64_t)&v75);
      LOBYTE(v0) = 1;
    }
    return v0 & 1;
  }
LABEL_43:
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100064808()
{
  sub_1000635F8(&qword_10015F2D0, &qword_10015F2D8, &qword_1001578F0, (uint64_t)&v15);
  if (!*((void *)&v16 + 1))
  {
    sub_100028C8C((uint64_t)&v15, &qword_1001578F8);
    sub_100034F60();
    swift_allocError();
    v8[1] = 0;
    v8[2] = 0;
    void *v8 = 0x8000000000000018;
    swift_willThrow();
    return;
  }
  sub_10003CD24(&v15, (uint64_t)v19);
  id v2 = [v0 inclusionProof];
  if (v2)
  {
    id v3 = v2;
    id v4 = [v2 slh];

    if (v4)
    {
      sub_100038600(0, (unint64_t *)&qword_1001575C8);
      id v5 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v4];

      sub_100066CFC((uint64_t)v22);
      if (v1)
      {

        sub_100028A4C((uint64_t)v19);
        return;
      }
      uint64_t v6 = v20;
      uint64_t v7 = v21;
      sub_10002BCF8(v19, v20);
      if ((*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 128))(v22, 1, 1, 1, v6, v7) < 1)
      {
        sub_10002BE4C((uint64_t)v22);
      }
      else
      {
        if (qword_10015F320 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_1000294A8(v9, (uint64_t)qword_100162328);
        sub_10002BE90((uint64_t)v22);
        sub_10002BE90((uint64_t)v22);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v24 = swift_slowAlloc();
          *(_DWORD *)uint64_t v12 = 136315138;
          long long v15 = v22[0];
          long long v16 = v22[1];
          long long v17 = v22[2];
          uint64_t v18 = v23;
          sub_10002BF28();
          uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v15 = sub_1000262AC(v13, v14, &v24);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10002BE4C((uint64_t)v22);
          sub_10002BE4C((uint64_t)v22);
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Verified ATLogProof inclusion to verified head %s", v12, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_10002BE4C((uint64_t)v22);
LABEL_16:
          sub_100028A4C((uint64_t)v19);
          return;
        }
        sub_10002BE4C((uint64_t)v22);
        sub_10002BE4C((uint64_t)v22);
        sub_10002BE4C((uint64_t)v22);
      }
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t ATLogProofs.verify(data:)(uint64_t a1, uint64_t a2)
{
  v3[71] = v2;
  v3[70] = a2;
  v3[69] = a1;
  return _swift_task_switch(sub_100064BEC, 0, 0);
}

id sub_100064BEC()
{
  uint64_t v92 = v0;
  uint64_t v1 = ATLogProofs.keyBag.getter();
  *(void *)(v0 + 576) = v1;
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    if ([*(id *)(v0 + 568) hasInclusionProof]
      && (id v3 = [*(id *)(v0 + 568) inclusionProof],
          (*(void *)(v0 + 584) = v3) != 0))
    {
      id v4 = v3;
      uint64_t v77 = (void *)(v0 + 536);
      id v5 = [v2 appSthKeyStore];
      id v6 = [objc_allocWithZone((Class)TransparencyLogEntryVerifier) initWithTrustedKeyStore:v5];
      *(void *)(v0 + 592) = v6;

      id v7 = [v2 tltKeyStore];
      id v8 = [objc_allocWithZone((Class)TransparencyLogEntryVerifier) initWithTrustedKeyStore:v7];
      *(void *)(v0 + 600) = v8;

      [v4 setVerifier:v6];
      id v11 = sub_10005D628();
      unsigned int v12 = [v4 nodeType];
      if (v12 == 7)
      {
        uint64_t v74 = v11;
        uint64_t v75 = v6;
        uint64_t v78 = v8;
        id result = [v4 nodeBytes];
        if (result)
        {
          unint64_t v14 = result;
          uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v17 = v16;

          objc_allocWithZone((Class)ChangeLogNodeV2);
          id v18 = sub_100038540();
          sub_10002BD3C(v15, v17);
          id result = [v18 mutation];
          if (result)
          {
            uint64_t v20 = result;
            static Data._unconditionallyBridgeFromObjectiveC(_:)();

            TransparencyByteBuffer.init(data:)();
            *(void *)&long long v80 = v21;
            *((void *)&v80 + 1) = v22;
            *(void *)&long long v81 = v23;
            sub_1000307A8(v0 + 184);
            uint64_t v24 = v75;
            *(void *)(v0 + 608) = *(void *)(v0 + 224);
            uint64_t v25 = self;
            sub_100066444((void *)(v0 + 184));
            [v25 kt_currentTimeMs];
            if ((~*(void *)&v26 & 0x7FF0000000000000) != 0)
            {
              if (v26 > -1.0)
              {
                if (v26 < 1.84467441e19)
                {
                  sub_100050C30(*(void *)(v0 + 552), *(void *)(v0 + 560), (unint64_t)v26);
                  sub_10002BD3C(v80, *((unint64_t *)&v80 + 1));
                  sub_1000664A4((void *)(v0 + 184));

                  sub_100064808();
                  uint64_t v77 = (void *)(v0 + 184);
                  if (v28)
                  {
                    __int16 v29 = (void *)(v0 + 184);
LABEL_21:
                    sub_1000664A4(v29);

                    uint64_t v30 = *(uint64_t (**)(void *, uint64_t))(v0 + 8);
                    uint64_t v31 = *(void *)(v0 + 608);
                    return (id)v30(v74, v31);
                  }
                  if ([*(id *)(v0 + 568) hasMilestoneConsistency])
                  {
                    id v32 = [*(id *)(v0 + 568) milestoneConsistency];
                    if (v32)
                    {
                      uint64_t v33 = v32;
                      if (qword_10015F320 != -1) {
                        swift_once();
                      }
                      uint64_t v34 = type metadata accessor for Logger();
                      sub_1000294A8(v34, (uint64_t)qword_100162328);
                      uint64_t v35 = Logger.logObject.getter();
                      os_log_type_t v36 = static os_log_type_t.debug.getter();
                      if (os_log_type_enabled(v35, v36))
                      {
                        unint64_t v37 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)unint64_t v37 = 0;
                        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Verifiying included bridging consistency proof", v37, 2u);
                        swift_slowDealloc();
                      }

                      id v38 = [v2 appSthKeyStore];
                      id v39 = [objc_allocWithZone((Class)TransparencyConsistencyProofVerifier) initWithTrustedKeyStore:v38];

                      LogConsistency.consistencyVerifier.setter(v39);
                      id v40 = v75;
                      LogConsistency.patVerifier.setter(v75);
                      id v41 = v78;
                      LogConsistency.tltVerifier.setter(v78);
                      sub_1000635F8(&qword_10015F2D0, &qword_10015F2D8, &qword_1001578F0, (uint64_t)&v80);
                      sub_100067A40((uint64_t)&v80);
                      sub_100020378((uint64_t *)&unk_1001580E0);
                      uint64_t v42 = swift_task_alloc();
                      ATLogProofs.receiptTime.getter(v42);
                      LogConsistency.receiptTime.setter(v42);
                      swift_task_dealloc();
                      uint64_t v74 = LogConsistency.verify()();
                      sub_100064808();
                      LOBYTE(v38) = v43;

                      uint64_t v24 = v75;
                      __int16 v29 = (void *)(v0 + 184);
                      if (v38) {
                        goto LABEL_21;
                      }
                    }
                  }
                  *(void *)(v0 + 616) = v74;
                  if (qword_10015F320 == -1)
                  {
LABEL_32:
                    uint64_t v44 = type metadata accessor for Logger();
                    *(void *)(v0 + 624) = sub_1000294A8(v44, (uint64_t)qword_100162328);
                    uint64_t v45 = Logger.logObject.getter();
                    os_log_type_t v46 = static os_log_type_t.default.getter();
                    uint64_t v47 = v78;
                    if (os_log_type_enabled(v45, v46))
                    {
                      uint64_t v48 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)uint64_t v48 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Downloading milestone proof to verify ATLogProof", v48, 2u);
                      uint64_t v47 = v78;
                      swift_slowDealloc();
                    }

                    uint64_t v49 = ATLogProofs.configBag.getter();
                    *(void *)(v0 + 632) = v49;
                    if (v49)
                    {
                      unint64_t v50 = (void *)v49;
                      sub_1000635F8(&qword_10015F2D0, &qword_10015F2D8, &qword_1001578F0, v0 + 368);
                      if (*(void *)(v0 + 392))
                      {
                        uint64_t v76 = v0 + 328;
                        sub_10003CD24((long long *)(v0 + 368), v0 + 328);
                        id result = [v4 slh];
                        if (result)
                        {
                          unint64_t v51 = result;
                          sub_100038600(0, (unint64_t *)&qword_1001575C8);
                          id v52 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v51];
                          *(void *)(v0 + 640) = v52;

                          id v53 = [v52 parsedLogHead];
                          *(void *)(v0 + 648) = v53;
                          if (v53)
                          {
                            unint64_t v54 = v53;
                            ATLogProofs.fetcher.getter(v0 + 488);
                            if (*(void *)(v0 + 512))
                            {
                              sub_10003CD24((long long *)(v0 + 488), v0 + 248);
                              int v79 = [v54 application];
                              sub_10003863C(v76, v0 + 288);
                              sub_10003863C(v0 + 248, v0 + 448);
                              id v55 = v50;
                              id v56 = v2;
                              id v57 = v54;
                              uint64_t v58 = ATLogProofs.analytics.getter();
                              sub_1000635F8(&qword_10015F310, &qword_10015F318, &qword_1001588A8, (uint64_t)v91);
                              sub_10005DD38(v79, (uint64_t)v55, (uint64_t)v56, (long long *)(v0 + 288), 0, (long long *)(v0 + 448), (uint64_t)v54, v58, (uint64_t)&v80, (uint64_t)v91);
                              sub_100028A4C(v0 + 248);
                              long long v59 = v89;
                              *(_OWORD *)(v0 + 144) = v88;
                              *(_OWORD *)(v0 + 160) = v59;
                              *(void *)(v0 + 176) = v90;
                              long long v60 = v85;
                              *(_OWORD *)(v0 + 80) = v84;
                              *(_OWORD *)(v0 + 96) = v60;
                              long long v61 = v87;
                              *(_OWORD *)(v0 + 112) = v86;
                              *(_OWORD *)(v0 + 128) = v61;
                              long long v62 = v81;
                              *(_OWORD *)(v0 + 16) = v80;
                              *(_OWORD *)(v0 + 32) = v62;
                              long long v63 = v83;
                              *(_OWORD *)(v0 + 48) = v82;
                              *(_OWORD *)(v0 + 64) = v63;
                            }
                            else
                            {
                              sub_100028C8C(v0 + 488, &qword_100158898);
                              int v66 = [v54 application];
                              sub_10003863C(v76, v0 + 408);
                              id v67 = v50;
                              id v68 = v2;
                              id v69 = v54;
                              uint64_t v70 = ATLogProofs.analytics.getter();
                              sub_1000635F8(&qword_10015F310, &qword_10015F318, &qword_1001588A8, (uint64_t)v91);
                              sub_10005DD20((uint64_t)&v80);
                              sub_10005DD38(v66, (uint64_t)v67, (uint64_t)v68, (long long *)(v0 + 408), 0, &v80, (uint64_t)v54, v70, v0 + 16, (uint64_t)v91);
                            }
                            [self uiBlockingNetworkTimeout];
                            double v72 = v71;
                            uint64_t v73 = (void *)swift_task_alloc();
                            *(void *)(v0 + 656) = v73;
                            *uint64_t v73 = v0;
                            v73[1] = sub_100065DD8;
                            return (id)sub_10005E888(v72);
                          }
                          sub_100066504();
                          swift_allocError();
                          *(_DWORD *)uint64_t v65 = 0;
                          *(unsigned char *)(v65 + 4) = 1;
                          swift_willThrow();

                          sub_100028A4C(v76);
                          goto LABEL_42;
                        }
LABEL_54:
                        __break(1u);
                        return result;
                      }

                      sub_100028C8C(v0 + 368, &qword_1001578F8);
                      uint64_t v24 = v75;
                    }
                    sub_100034F60();
                    swift_allocError();
                    v64[1] = 0;
                    v64[2] = 0;
                    *uint64_t v64 = 0x8000000000000020;
                    swift_willThrow();

LABEL_42:
                    sub_1000664A4(v77);
                    goto LABEL_16;
                  }
LABEL_51:
                  swift_once();
                  goto LABEL_32;
                }
LABEL_50:
                __break(1u);
                goto LABEL_51;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
            goto LABEL_50;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_54;
      }
      sub_100034F60();
      swift_allocError();
      v19[1] = 0;
      void v19[2] = 0;
      void *v19 = 0x8000000000000010;
      swift_willThrow();
    }
    else
    {
      sub_100034F60();
      swift_allocError();
      v9[1] = 0;
      _OWORD v9[2] = 0;
      void *v9 = 0x8000000000000008;
      swift_willThrow();
    }
  }
  else
  {
    sub_100034F60();
    swift_allocError();
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = 0x8000000000000000;
    swift_willThrow();
  }
LABEL_16:
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v27();
}

uint64_t sub_100065DD8()
{
  *(void *)(*(void *)v1 + 664) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100066294;
  }
  else {
    uint64_t v2 = sub_100065EEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100065EEC()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = (void *)(v0 + 184);
  uint64_t v3 = v0 + 328;
  uint64_t v4 = *(void *)(v0 + 664);
  sub_100064808();
  if (v4)
  {
    id v6 = *(void **)(v0 + 648);
    id v40 = *(void **)(v0 + 632);
    id v7 = *(void **)(v0 + 600);
    id v8 = *(void **)(v0 + 592);
    uint64_t v9 = *(void **)(v0 + 584);
    uint64_t v10 = *(void **)(v0 + 576);

    uint64_t v2 = (void *)(v0 + 184);
    uint64_t v3 = v0 + 328;
    uint64_t v1 = v0 + 16;
LABEL_3:

    sub_100066558(v1);
    sub_100028A4C(v3);
    sub_1000664A4(v2);
    id v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  if (v5)
  {
    uint64_t v13 = *(void **)(v0 + 648);
    unint64_t v14 = *(void **)(v0 + 632);
    uint64_t v15 = *(void **)(v0 + 600);
    unint64_t v16 = *(void **)(v0 + 592);
    unint64_t v17 = *(void **)(v0 + 584);
    id v18 = *(void **)(v0 + 576);

    sub_100066558(v0 + 16);
    sub_100028A4C(v0 + 328);
    sub_1000664A4((void *)(v0 + 184));
    os_log_type_t v19 = *(void **)(v0 + 616);
  }
  else
  {
    if (![*(id *)(v0 + 568) hasMilestoneConsistency]) {
      goto LABEL_17;
    }
    id v22 = [*(id *)(v0 + 568) milestoneConsistency];
    if (!v22) {
      goto LABEL_17;
    }
    uint64_t v23 = v22;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      double v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Verifiying included bridging consistency proof after milestone refresh", v26, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v19 = LogConsistency.verify()();
    sub_100064808();
    char v28 = v27;

    if ((v28 & 1) == 0)
    {
LABEL_17:
      uint64_t v34 = *(void **)(v0 + 640);
      id v39 = *(void **)(v0 + 648);
      id v40 = *(void **)(v0 + 632);
      uint64_t v35 = *(void **)(v0 + 600);
      os_log_type_t v36 = *(void **)(v0 + 592);
      uint64_t v10 = *(void **)(v0 + 584);
      id v38 = *(void **)(v0 + 576);
      sub_100034F60();
      swift_allocError();
      v37[1] = 0;
      v37[2] = 0;
      *unint64_t v37 = 0x8000000000000020;
      swift_willThrow();

      goto LABEL_3;
    }
    __int16 v29 = *(void **)(v0 + 648);
    uint64_t v30 = *(void **)(v0 + 632);
    uint64_t v31 = *(void **)(v0 + 600);
    id v32 = *(void **)(v0 + 592);
    uint64_t v33 = *(void **)(v0 + 584);
    id v41 = *(void **)(v0 + 576);

    sub_100066558(v0 + 16);
    sub_100028A4C(v0 + 328);
    sub_1000664A4((void *)(v0 + 184));
  }
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t))(v0 + 8);
  uint64_t v21 = *(void *)(v0 + 608);
  return v20(v19, v21);
}

uint64_t sub_100066294()
{
  uint64_t v1 = v0[83];
  uint64_t v2 = (void *)v0[81];
  uint64_t v3 = (void *)v0[80];
  uint64_t v4 = (void *)v0[79];
  char v5 = (void *)v0[75];
  id v6 = (void *)v0[74];
  id v11 = (void *)v0[73];
  id v7 = (void *)v0[72];
  sub_100034F60();
  swift_allocError();
  v8[1] = 0;
  v8[2] = 0;
  uint64_t *v8 = v1 | 0x4000000000000000;
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  sub_100066558((uint64_t)(v0 + 2));
  sub_100028A4C((uint64_t)(v0 + 41));
  sub_1000664A4(v0 + 23);
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t ATLogProofs.VerificationResult.expiry.getter()
{
  return Date.init(timeIntervalSince1970:)();
}

unint64_t sub_1000663F0()
{
  unint64_t result = qword_1001588B0;
  if (!qword_1001588B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001588B0);
  }
  return result;
}

void *sub_100066444(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[7];
  sub_10002BD94(a1[1], a1[2]);
  sub_10002BD94(v2, v3);
  id v5 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000664A4(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[7];
  sub_10002BD3C(a1[1], a1[2]);
  sub_10002BD3C(v2, v3);
  swift_bridgeObjectRelease();

  return a1;
}

unint64_t sub_100066504()
{
  unint64_t result = qword_1001588C0;
  if (!qword_1001588C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001588C0);
  }
  return result;
}

uint64_t sub_100066558(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000665B4(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t destroy for ATLogProofsError(unint64_t *a1)
{
  return sub_1000665E0(*a1);
}

unint64_t sub_1000665E0(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *_s15swtransparencyd16ATLogProofsErrorOwCP_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  sub_1000665B4(*a2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

unint64_t *assignWithCopy for ATLogProofsError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  sub_1000665B4(*a2);
  unint64_t v6 = *a1;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_1000665E0(v6);
  return a1;
}

__n128 initializeWithTake for TransparencyByteBuffer(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

unint64_t *assignWithTake for ATLogProofsError(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_1000665E0(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ATLogProofsError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ATLogProofsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000667AC(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_1000667C8(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_1000667D8(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    *__n128 result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    result[1] = 0;
    result[2] = 0;
    *__n128 result = (8 * (a2 - 2)) | 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for ATLogProofsError()
{
  return &type metadata for ATLogProofsError;
}

uint64_t _s18VerificationResultVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s18VerificationResultVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ATLogProofs.VerificationResult()
{
  return &type metadata for ATLogProofs.VerificationResult;
}

unint64_t sub_100066870()
{
  unint64_t result = qword_1001588C8;
  if (!qword_1001588C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001588C8);
  }
  return result;
}

uint64_t *sub_1000668C4()
{
  return &qword_1001588E0;
}

uint64_t sub_1000668D0()
{
  swift_beginAccess();
  uint64_t v0 = qword_1001588E0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100066924(uint64_t a1, char *a2)
{
  qword_1001588E0 = a1;
  off_1001588E8 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100066980())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000669D8(uint64_t a1)
{
  if ((a1 & (unint64_t)&_mh_execute_header) != 0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_1000669E8()
{
  return Error<>._domain.getter();
}

uint64_t sub_100066A18()
{
  return Error<>._code.getter();
}

uint64_t sub_100066A48()
{
  if (*(unsigned char *)(v0 + 4)) {
    return 1;
  }
  else {
    return 2;
  }
}

id sub_100066A5C()
{
  id v2 = [v0 parsedLogHead];
  if (v2)
  {
    char v3 = v2;
    uint64_t v4 = sub_10005194C((uint64_t)[v2 application]);
    if (v5)
    {
      id v1 = (id)v4;
    }
    else
    {
      id v1 = [v3 application];
      sub_100066504();
      swift_allocError();
      *(_DWORD *)uint64_t v7 = v1;
      *(unsigned char *)(v7 + 4) = 0;
      swift_willThrow();
    }
  }
  else
  {
    sub_100066504();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 4) = 1;
    swift_willThrow();
  }
  return v1;
}

unint64_t sub_100066B58()
{
  return sub_100066EF4((SEL *)&selRef_logBeginningMs);
}

uint64_t sub_100066B78()
{
  id v1 = [v0 parsedLogHead];
  if (v1)
  {
    id v2 = v1;
    id v3 = [v1 logType];

    return (uint64_t)v3;
  }
  else
  {
    sub_100066504();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 4) = 1;
    return swift_willThrow();
  }
}

unint64_t sub_100066C14()
{
  return sub_100066EF4((SEL *)&selRef_revision);
}

id sub_100066C34()
{
  id v1 = [v0 parsedLogHead];
  if (v1)
  {
    id v2 = v1;
    id result = [v1 logHeadHash];
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

      return (id)v5;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_100066504();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 4) = 1;
    return (id)swift_willThrow();
  }
  return result;
}

void sub_100066CFC(uint64_t a1@<X8>)
{
  id v3 = [v1 parsedLogHead];
  if (!v3)
  {
    sub_100066504();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = 0;
    *(unsigned char *)(v20 + 4) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = sub_10005194C((uint64_t)[v3 application]);
  if (!v6)
  {
    unsigned int v21 = [v4 application];
    sub_100066504();
    swift_allocError();
    *(_DWORD *)uint64_t v22 = v21;
    *(unsigned char *)(v22 + 4) = 0;
    swift_willThrow();

    return;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v9 = (uint64_t)[v4 logBeginningMs];
  if (v9 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v9;
    unsigned int v11 = [v4 logType];
    uint64_t v12 = (uint64_t)[v4 revision];
    if ((v12 & 0x8000000000000000) == 0)
    {
      uint64_t v13 = v12;
      int v23 = v11;
      uint64_t v26 = v7;
      id v14 = [v4 logHeadHash];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        sub_10005231C(v26, v8, v10, v23, v13, v16, v18, (uint64_t)v24);
        long long v19 = v24[1];
        *(_OWORD *)a1 = v24[0];
        *(_OWORD *)(a1 + 16) = v19;
        *(_OWORD *)(a1 + 32) = v24[2];
        *(void *)(a1 + 48) = v25;
        return;
      }
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
}

unint64_t sub_100066ED4()
{
  return sub_100066EF4((SEL *)&selRef_treeId);
}

unint64_t sub_100066EF4(SEL *a1)
{
  id v3 = [(id)v1 parsedLogHead];
  if (!v3) {
    goto LABEL_4;
  }
  uint64_t v4 = v3;
  unint64_t v1 = (unint64_t)[v3 *a1];

  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_4:
    sub_100066504();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 4) = 1;
    swift_willThrow();
  }
  return v1;
}

uint64_t initializeBufferWithCopyOfBuffer for SignedLogHeadError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)id result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SignedLogHeadError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SignedLogHeadError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)id result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_100066FF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100067014(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)id result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedLogHeadError()
{
  return &type metadata for SignedLogHeadError;
}

unint64_t sub_100067044()
{
  unint64_t result = qword_1001588F0;
  if (!qword_1001588F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001588F0);
  }
  return result;
}

uint64_t *sub_100067098()
{
  return &qword_1001588F8;
}

uint64_t sub_1000670A4()
{
  swift_beginAccess();
  uint64_t v0 = qword_1001588F8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000670F8(uint64_t a1, char *a2)
{
  qword_1001588F8 = a1;
  off_100158900 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100067154())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000671AC()
{
  return Error<>._domain.getter();
}

uint64_t sub_1000671DC()
{
  return Error<>._code.getter();
}

uint64_t sub_10006720C()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F638 = result;
  return result;
}

uint64_t sub_100067240()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F648 = result;
  return result;
}

uint64_t sub_100067274()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F658 = result;
  return result;
}

uint64_t sub_1000672A8()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F668 = result;
  return result;
}

uint64_t sub_1000672DC()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F678 = result;
  return result;
}

uint64_t sub_100067310()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162340);
  sub_1000294A8(v0, (uint64_t)qword_100162340);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100067394()
{
  if (qword_10015F680 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162340);
}

uint64_t sub_1000673F8@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015F680 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162340);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t LogConsistency.consistencyVerifier.getter()
{
  if (qword_10015F630 != -1) {
    swift_once();
  }
  unint64_t v1 = (const void *)(qword_10015F638 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100038600(0, &qword_100157948);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

void LogConsistency.consistencyVerifier.setter(void *a1)
{
}

void (*LogConsistency.consistencyVerifier.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = LogConsistency.consistencyVerifier.getter();
  return sub_10006764C;
}

void sub_10006764C(uint64_t a1, char a2)
{
}

uint64_t LogConsistency.patVerifier.getter()
{
  return sub_100067760(&qword_10015F640, &qword_10015F648);
}

void LogConsistency.patVerifier.setter(void *a1)
{
}

void (*LogConsistency.patVerifier.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = LogConsistency.patVerifier.getter();
  return sub_100067718;
}

void sub_100067718(uint64_t a1, char a2)
{
}

uint64_t LogConsistency.tltVerifier.getter()
{
  return sub_100067760(&qword_10015F650, &qword_10015F658);
}

uint64_t sub_100067760(void *a1, void *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v4 = (const void *)(*a2 + 16);
  swift_beginAccess();
  id v5 = objc_getAssociatedObject(v2, v4);
  swift_endAccess();
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_100033860((uint64_t)v8, (uint64_t)v9);
  if (v10)
  {
    sub_100038600(0, &qword_100158908);
    if (swift_dynamicCast()) {
      return v7;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v9, &qword_1001578E0);
    return 0;
  }
}

void LogConsistency.tltVerifier.setter(void *a1)
{
}

void (*LogConsistency.tltVerifier.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = LogConsistency.tltVerifier.getter();
  return sub_1000678F4;
}

void sub_1000678F4(uint64_t a1, char a2)
{
}

double sub_100067918@<D0>(uint64_t a1@<X8>)
{
  if (qword_10015F660 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015F668 + 16);
  swift_beginAccess();
  id v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100033860((uint64_t)v6, (uint64_t)v7);
  if (!v8)
  {
    sub_100028C8C((uint64_t)v7, &qword_1001578E0);
    goto LABEL_10;
  }
  sub_100020378(&qword_1001578F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100067A40(uint64_t a1)
{
  if (qword_10015F660 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_10015F668;
  sub_100029208(a1, (uint64_t)v12, &qword_1001578F8);
  uint64_t v4 = v13;
  if (v13)
  {
    id v5 = sub_10002BCF8(v12, v13);
    uint64_t v6 = *(void *)(v4 - 8);
    __chkstk_darwin(v5);
    uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    uint64_t v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_100028A4C((uint64_t)v12);
  }
  else
  {
    uint64_t v9 = 0;
  }
  swift_beginAccess();
  objc_setAssociatedObject(v1, (const void *)(v3 + 16), v9, (void *)1);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, &qword_1001578F8);
}

void (*sub_100067BF8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_100067918((uint64_t)v3);
  return sub_100067C58;
}

void sub_100067C58(uint64_t *a1, char a2)
{
  id v2 = (void *)*a1;
  if (a2)
  {
    sub_100029208(*a1, (uint64_t)v2 + 40, &qword_1001578F8);
    sub_100067A40((uint64_t)v2 + 40);
    sub_100028C8C((uint64_t)v2, &qword_1001578F8);
  }
  else
  {
    sub_100067A40(*a1);
  }

  free(v2);
}

uint64_t LogConsistency.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015F670 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015F678 + 16);
  swift_beginAccess();
  id v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100033860((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100028C8C((uint64_t)v10, &qword_1001578E0);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t LogConsistency.receiptTime.setter(uint64_t a1)
{
  id v2 = v1;
  if (qword_10015F670 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10015F678;
  uint64_t v5 = sub_100020378((uint64_t *)&unk_1001580E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a1, (uint64_t)v7, (uint64_t *)&unk_1001580E0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_beginAccess();
  objc_setAssociatedObject(v2, (const void *)(v4 + 16), isa, (void *)0x303);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, (uint64_t *)&unk_1001580E0);
}

void (*LogConsistency.receiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(sub_100020378((uint64_t *)&unk_1001580E0) - 8) + 64);
  a1[1] = v3;
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  LogConsistency.receiptTime.getter((uint64_t)v4);
  return sub_100068090;
}

void sub_100068090(uint64_t a1, char a2)
{
  id v2 = *(void **)(a1 + 16);
  if (a2)
  {
    __chkstk_darwin(a1);
    uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100029208((uint64_t)v2, (uint64_t)v4, (uint64_t *)&unk_1001580E0);
    LogConsistency.receiptTime.setter((uint64_t)v4);
    sub_100028C8C((uint64_t)v2, (uint64_t *)&unk_1001580E0);
    free(v2);
  }
  else
  {
    LogConsistency.receiptTime.setter(*(void *)(a1 + 16));
    free(v2);
  }
}

id sub_100068168()
{
  uint64_t v3 = LogConsistency.consistencyVerifier.getter();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    if ([v0 hasStartSlh]
      && (id v5 = [v0 startSlh]) != 0)
    {
      uint64_t v6 = v5;
      if ([v0 hasEndSlh]
        && (id v7 = [v0 endSlh]) != 0)
      {
        id v8 = v7;
        sub_100038600(0, (unint64_t *)&qword_1001575C8);
        ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
        id v10 = [ObjCClassFromMetadata signedTypeWithObject:v6];
        id v11 = [v4 trustedKeyStore];
        id v93 = v6;
        id v12 = [v11 signatureVerifier];

        [v10 setVerifier:v12];
        id v2 = v8;
        id v13 = [ObjCClassFromMetadata signedTypeWithObject:v8];
        id v14 = [v4 trustedKeyStore];
        id v15 = [v14 signatureVerifier];

        [v13 setVerifier:v15];
        sub_100066CFC((uint64_t)v88);
        if (v1)
        {
        }
        else
        {
          id v80 = v2;
          sub_100066CFC((uint64_t)v90);
          sub_100067918((uint64_t)&v81);
          id v79 = v10;
          if (*((void *)&v82 + 1))
          {
            id v77 = v13;
            sub_10003863C((uint64_t)&v81, (uint64_t)v85);
            sub_100028C8C((uint64_t)&v81, &qword_1001578F8);
            uint64_t v73 = (uint64_t)v87;
            uint64_t v74 = v86;
            double v72 = sub_10002BCF8(v85, v86);
            uint64_t v20 = type metadata accessor for Date();
            os_log_t v76 = (os_log_t)&v69;
            uint64_t v21 = *(void *)(v20 - 8);
            __chkstk_darwin(v20);
            int v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v24 = sub_100020378((uint64_t *)&unk_1001580E0);
            uint64_t v78 = &v69;
            __chkstk_darwin(v24 - 8);
            uint64_t v26 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
            LogConsistency.receiptTime.getter((uint64_t)v26);
            int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v26, 1, v20);
            uint64_t v75 = (uint64_t *)v23;
            if (v27 == 1)
            {
              static Date.now.getter();
              sub_100028C8C((uint64_t)v26, (uint64_t *)&unk_1001580E0);
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v26, v20);
            }
            id v10 = v79;
            id v36 = [v79 data];
            uint64_t v78 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v38 = v37;

            sub_100066ED4();
            id v39 = *(void (**)(_OWORD *, uint64_t *, NSObject *))(v73 + 24);
            unint64_t v40 = v38;
            id v41 = v75;
            unint64_t v70 = v40;
            double v71 = (void *)v20;
            v39(v88, v75, v78);
            id v13 = v77;
            (*(void (**)(uint64_t *, void *))(v21 + 8))(v41, v71);
            sub_10002BD3C((uint64_t)v78, v70);
            sub_100028A4C((uint64_t)v85);
          }
          else
          {
            sub_100028C8C((uint64_t)&v81, &qword_1001578F8);
          }
          sub_100067918((uint64_t)&v81);
          if (*((void *)&v82 + 1))
          {
            sub_10003863C((uint64_t)&v81, (uint64_t)v85);
            sub_100028C8C((uint64_t)&v81, &qword_1001578F8);
            double v72 = v87;
            uint64_t v73 = v86;
            double v71 = sub_10002BCF8(v85, v86);
            uint64_t v28 = type metadata accessor for Date();
            uint64_t v75 = &v69;
            uint64_t v78 = *(NSObject **)(v28 - 8);
            __chkstk_darwin(v28);
            uint64_t v30 = (char *)&v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v31 = sub_100020378((uint64_t *)&unk_1001580E0);
            os_log_t v76 = (os_log_t)&v69;
            __chkstk_darwin(v31 - 8);
            uint64_t v33 = (char *)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
            LogConsistency.receiptTime.getter((uint64_t)v33);
            uint64_t v34 = (void (**)(char *, char *, uint64_t))v78;
            int v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v78[6].isa)(v33, 1, v28);
            uint64_t v74 = (uint64_t)v30;
            if (v35 == 1)
            {
              static Date.now.getter();
              sub_100028C8C((uint64_t)v33, (uint64_t *)&unk_1001580E0);
            }
            else
            {
              v34[4](v30, v33, v28);
            }
            uint64_t v42 = v28;
            id v43 = [v13 data];
            uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            os_log_type_t v46 = v45;

            sub_100066ED4();
            uint64_t v47 = (void (*)(_OWORD *, uint64_t))v72[3];
            unint64_t v48 = v44;
            uint64_t v49 = v74;
            unint64_t v70 = v48;
            os_log_t v76 = v46;
            v47(v90, v74);
            id v10 = v79;
            ((void (*)(uint64_t, uint64_t))v78[1].isa)(v49, v42);
            sub_10002BD3C(v70, (unint64_t)v76);
            sub_100028A4C((uint64_t)v85);
          }
          else
          {
            sub_100028C8C((uint64_t)&v81, &qword_1001578F8);
          }
          id v2 = sub_10005D628();
          sub_100067918((uint64_t)&v81);
          if (*((void *)&v82 + 1))
          {
            sub_10003863C((uint64_t)&v81, (uint64_t)v85);
            sub_100028C8C((uint64_t)&v81, &qword_1001578F8);
            uint64_t v51 = v86;
            unint64_t v50 = v87;
            sub_10002BCF8(v85, v86);
            ((void (*)(_OWORD *, id, uint64_t, void *))v50[6])(v88, v2, v51, v50);
            sub_100028A4C((uint64_t)v85);
          }
          else
          {
            sub_100028C8C((uint64_t)&v81, &qword_1001578F8);
          }
          if (v2 == (id)1)
          {
            if (qword_10015F680 != -1) {
              swift_once();
            }
            uint64_t v52 = type metadata accessor for Logger();
            id v53 = sub_1000294A8(v52, (uint64_t)qword_100162340);
            sub_10002BE90((uint64_t)v88);
            sub_10002BE90((uint64_t)v88);
            uint64_t v78 = v53;
            unint64_t v54 = Logger.logObject.getter();
            os_log_type_t v55 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v54, v55))
            {
              os_log_t v76 = v54;
              id v56 = (uint8_t *)swift_slowAlloc();
              uint64_t v57 = swift_slowAlloc();
              uint64_t v75 = (uint64_t *)v57;
              *(_DWORD *)id v56 = 136315138;
              uint64_t v74 = (uint64_t)(v56 + 4);
              long long v81 = v88[0];
              long long v82 = v88[1];
              long long v83 = v88[2];
              uint64_t v84 = v89;
              v85[0] = v57;
              sub_10002BF28();
              uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&long long v81 = sub_1000262AC(v58, v59, v85);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10002BE4C((uint64_t)v88);
              sub_10002BE4C((uint64_t)v88);
              unint64_t v54 = v76;
              _os_log_impl((void *)&_mh_execute_header, v76, v55, "Verified signature for %s", v56, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_10002BE4C((uint64_t)v88);
              sub_10002BE4C((uint64_t)v88);
            }

            id v2 = sub_10005D628();
            sub_100067918((uint64_t)&v81);
            id v77 = v13;
            if (*((void *)&v82 + 1))
            {
              sub_10003863C((uint64_t)&v81, (uint64_t)v85);
              sub_100028C8C((uint64_t)&v81, &qword_1001578F8);
              uint64_t v61 = v86;
              long long v60 = v87;
              os_log_t v76 = (os_log_t)sub_10002BCF8(v85, v86);
              sub_100066CFC((uint64_t)v92);
              ((void (*)(unsigned char *, id, uint64_t, void *))v60[6])(v92, v2, v61, v60);
              sub_10002BE4C((uint64_t)v92);
              sub_100028A4C((uint64_t)v85);
            }
            else
            {
              sub_100028C8C((uint64_t)&v81, &qword_1001578F8);
            }
            sub_10002BE90((uint64_t)v90);
            sub_10002BE90((uint64_t)v90);
            long long v62 = Logger.logObject.getter();
            os_log_type_t v63 = static os_log_type_t.debug.getter();
            uint64_t v78 = v62;
            if (os_log_type_enabled(v62, v63))
            {
              uint64_t v64 = (uint8_t *)swift_slowAlloc();
              uint64_t v65 = swift_slowAlloc();
              os_log_t v76 = v65;
              *(_DWORD *)uint64_t v64 = 136315138;
              uint64_t v75 = (uint64_t *)(v64 + 4);
              long long v81 = v90[0];
              long long v82 = v90[1];
              long long v83 = v90[2];
              uint64_t v84 = v91;
              v85[0] = (uint64_t)v65;
              sub_10002BF28();
              uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&long long v81 = sub_1000262AC(v66, v67, v85);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10002BE4C((uint64_t)v90);
              sub_10002BE4C((uint64_t)v90);
              id v68 = v78;
              _os_log_impl((void *)&_mh_execute_header, v78, v63, "Verified signature for %s", v64, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              sub_10002BE4C((uint64_t)v90);
              sub_10002BE4C((uint64_t)v88);
            }
            else
            {

              sub_10002BE4C((uint64_t)v88);
              sub_10002BE4C((uint64_t)v90);
              sub_10002BE4C((uint64_t)v90);
              sub_10002BE4C((uint64_t)v90);
            }
          }
          else
          {
            sub_10002BE4C((uint64_t)v90);
            sub_10002BE4C((uint64_t)v88);
          }
        }
      }
      else
      {
        sub_10006D5C4();
        swift_allocError();
        *uint64_t v18 = 2;
        swift_willThrow();
      }
    }
    else
    {
      sub_10006D5C4();
      swift_allocError();
      *uint64_t v16 = 1;
      swift_willThrow();
    }
  }
  else
  {
    sub_10006D5C4();
    swift_allocError();
    *uint64_t v17 = 0;
    swift_willThrow();
  }
  return v2;
}

void **sub_100069698()
{
  id v2 = v0;
  uint64_t v3 = type metadata accessor for KTSWDB.SignedLogHead();
  __chkstk_darwin(v3 - 8);
  id v5 = (void **)((char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = LogConsistency.consistencyVerifier.getter();
  if (!v6)
  {
    sub_10006D5C4();
    swift_allocError();
    unsigned char *v23 = 0;
    swift_willThrow();
    return v5;
  }
  id v7 = (void *)v6;
  if (![v0 hasStartSlh]
    || (id v8 = [v0 startSlh]) == 0)
  {
    sub_10006D5C4();
    swift_allocError();
    *uint64_t v22 = 1;
    swift_willThrow();

    return v5;
  }
  uint64_t v9 = v8;
  if (![v0 hasEndSlh]
    || (id v10 = [v0 endSlh]) == 0)
  {
    sub_10006D5C4();
    swift_allocError();
    unsigned char *v24 = 2;
    swift_willThrow();

    return v5;
  }
  id v11 = v10;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v109 = v11;
  id v13 = [ObjCClassFromMetadata signedTypeWithObject:v9];
  id v93 = v9;
  id v14 = v13;
  id v15 = [v7 trustedKeyStore];
  id v16 = [v15 signatureVerifier];

  [v14 setVerifier:v16];
  uint64_t v17 = v109;
  id v18 = [ObjCClassFromMetadata signedTypeWithObject:v109];
  id v19 = [v7 trustedKeyStore];
  id v20 = [v19 signatureVerifier];

  [v18 setVerifier:v20];
  uint64_t v21 = v14;
  sub_100066CFC((uint64_t)&v101);
  if (v1)
  {

    return v5;
  }
  sub_100066CFC((uint64_t)&v105);
  id v91 = v14;
  uint64_t v92 = v18;
  if (!(void)v103)
  {
    sub_100067918((uint64_t)&v94);
    if (*((void *)&v95 + 1))
    {
      sub_10003863C((uint64_t)&v94, (uint64_t)&v98);
      sub_100028C8C((uint64_t)&v94, &qword_1001578F8);
      uint64_t v26 = v99;
      uint64_t v27 = v100;
      sub_10002BCF8(&v98, v99);
      (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v27 + 32))(&v101, 1, v26, v27);
      sub_100028A4C((uint64_t)&v98);
      uint64_t v21 = v91;
    }
    else
    {
      sub_100028C8C((uint64_t)&v94, &qword_1001578F8);
    }
    if (qword_10015F680 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_1000294A8(v28, (uint64_t)qword_100162340);
    sub_10002BE90((uint64_t)&v101);
    sub_10002BE90((uint64_t)&v101);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      LODWORD(v90) = v31;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      os_log_t v89 = v33;
      long long v88 = v32;
      *(_DWORD *)uint64_t v32 = 136315138;
      long long v94 = v101;
      long long v95 = v102;
      long long v96 = v103;
      uint64_t v97 = v104;
      *(void *)&long long v98 = v33;
      sub_10002BF28();
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v94 = sub_1000262AC(v34, v35, (uint64_t *)&v98);
      uint64_t v17 = v109;
      uint64_t v21 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BE4C((uint64_t)&v101);
      sub_10002BE4C((uint64_t)&v101);
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v90, "Verified consistency for %s", v88, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10002BE4C((uint64_t)&v101);
      sub_10002BE4C((uint64_t)&v101);
    }
  }
  sub_100067918((uint64_t)&v94);
  id v36 = *((void *)&v95 + 1);
  if (*((void *)&v95 + 1))
  {
    sub_10003863C((uint64_t)&v94, (uint64_t)&v98);
    sub_100028C8C((uint64_t)&v94, &qword_1001578F8);
    uint64_t v37 = v99;
    uint64_t v38 = v100;
    sub_10002BCF8(&v98, v99);
    (*(void (**)(long long *, uint64_t, uint64_t))(v38 + 64))(&v101, v37, v38);
    uint64_t v90 = v36;
    id v36 = *v5;
    sub_10002BFE0((uint64_t)v5);
    sub_100028A4C((uint64_t)&v98);
    uint64_t v21 = v91;
  }
  else
  {
    uint64_t v90 = 0;
    sub_100028C8C((uint64_t)&v94, &qword_1001578F8);
  }
  id v39 = [v2 proofHashesArray];
  if (!v39) {
    goto LABEL_31;
  }
  unint64_t v40 = v39;
  *(void *)&long long v94 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!(void)v94) {
    goto LABEL_31;
  }
  if (!*(void *)(v94 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_31:
    sub_100038600(0, &qword_100157930);
    id v41 = v92;
    id v5 = (void **)sub_10003B164(v21, v92);
    goto LABEL_32;
  }
  id v5 = (void **)sub_10005D674(v94, (uint64_t)v21, (uint64_t)v92);
  swift_bridgeObjectRelease();
  id v41 = v92;
LABEL_32:
  if (v90)
  {
    switch((unint64_t)v36)
    {
      case 0uLL:
      case 3uLL:
        if (qword_10015F680 != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        sub_1000294A8(v42, (uint64_t)qword_100162340);
        sub_10002BE90((uint64_t)&v105);
        sub_10002BE90((uint64_t)&v105);
        id v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.info.getter();
        int v45 = v44;
        if (os_log_type_enabled(v43, v44))
        {
          LODWORD(v90) = v45;
          os_log_type_t v46 = (uint8_t *)swift_slowAlloc();
          uint64_t v47 = swift_slowAlloc();
          os_log_t v89 = v47;
          long long v88 = v46;
          *(_DWORD *)os_log_type_t v46 = 136315138;
          long long v94 = v105;
          long long v95 = v106;
          long long v96 = v107;
          uint64_t v97 = v108;
          *(void *)&long long v98 = v47;
          sub_10002BF28();
          uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v94 = sub_1000262AC(v48, v49, (uint64_t *)&v98);
          uint64_t v17 = v109;
          id v41 = v92;
          uint64_t v21 = v91;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10002BE4C((uint64_t)&v105);
          sub_10002BE4C((uint64_t)&v105);
          _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v90, "Verified consistency for %s following split", v88, 0xCu);
          uint64_t v90 = v43;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10002BE4C((uint64_t)&v105);
          sub_10002BE4C((uint64_t)&v105);
        }
        id v53 = &selRef_code;
        sub_100067918((uint64_t)&v94);
        if (*((void *)&v95 + 1))
        {
          sub_10003863C((uint64_t)&v94, (uint64_t)&v98);
          sub_100028C8C((uint64_t)&v94, &qword_1001578F8);
          uint64_t v69 = v99;
          uint64_t v70 = v100;
          sub_10002BCF8(&v98, v99);
          (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v70 + 32))(&v105, 1, v69, v70);
          goto LABEL_58;
        }
        sub_100028C8C((uint64_t)&v94, &qword_1001578F8);
        goto LABEL_60;
      case 1uLL:
        if (qword_10015F680 != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        sub_1000294A8(v55, (uint64_t)qword_100162340);
        sub_10002BE90((uint64_t)&v105);
        sub_10002BE90((uint64_t)&v105);
        id v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.info.getter();
        LODWORD(v90) = v57;
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          unint64_t v59 = swift_slowAlloc();
          os_log_t v89 = v59;
          *(_DWORD *)uint64_t v58 = 136315138;
          long long v94 = v105;
          long long v95 = v106;
          long long v96 = v107;
          uint64_t v97 = v108;
          *(void *)&long long v98 = v59;
          sub_10002BF28();
          uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v94 = sub_1000262AC(v60, v61, (uint64_t *)&v98);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10002BE4C((uint64_t)&v105);
          sub_10002BE4C((uint64_t)&v105);
          _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v90, "Verified consistency for %s", v58, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10002BE4C((uint64_t)&v105);
          sub_10002BE4C((uint64_t)&v105);
        }

        sub_100067918((uint64_t)&v94);
        uint64_t v17 = v109;
        if (!*((void *)&v95 + 1))
        {
          sub_100028C8C((uint64_t)&v94, &qword_1001578F8);
LABEL_69:
          uint64_t v21 = v91;
          id v41 = v92;
          id v53 = &selRef_code;
          goto LABEL_60;
        }
        sub_10003863C((uint64_t)&v94, (uint64_t)&v98);
        sub_100028C8C((uint64_t)&v94, &qword_1001578F8);
        uint64_t v71 = v99;
        uint64_t v72 = v100;
        sub_10002BCF8(&v98, v99);
        (*(void (**)(long long *, void **, uint64_t, uint64_t))(v72 + 32))(&v105, v5, v71, v72);
        id v53 = &selRef_code;
LABEL_58:
        sub_100028A4C((uint64_t)&v98);
        uint64_t v21 = v91;
        break;
      case 2uLL:
        if (qword_10015F680 != -1) {
          swift_once();
        }
        uint64_t v62 = type metadata accessor for Logger();
        sub_1000294A8(v62, (uint64_t)qword_100162340);
        sub_10002BE90((uint64_t)&v101);
        sub_10002BE90((uint64_t)&v101);
        os_log_type_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.info.getter();
        LODWORD(v90) = v64;
        if (os_log_type_enabled(v63, v64))
        {
          os_log_t v89 = v63;
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          uint64_t v66 = (uint8_t *)swift_slowAlloc();
          long long v88 = v66;
          *(_DWORD *)uint64_t v65 = 136315138;
          long long v94 = v101;
          long long v95 = v102;
          long long v96 = v103;
          uint64_t v97 = v104;
          *(void *)&long long v98 = v66;
          sub_10002BF28();
          uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v94 = sub_1000262AC(v67, v68, (uint64_t *)&v98);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10002BE4C((uint64_t)&v101);
          sub_10002BE4C((uint64_t)&v101);
          os_log_type_t v63 = v89;
          _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v90, "Consistency for start %s still pending due to disjoint proof", v65, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10002BE4C((uint64_t)&v101);
          sub_10002BE4C((uint64_t)&v101);
        }

        sub_10002BE90((uint64_t)&v105);
        sub_10002BE90((uint64_t)&v105);
        long long v82 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.info.getter();
        LODWORD(v90) = v83;
        if (os_log_type_enabled(v82, v83))
        {
          uint64_t v84 = (uint8_t *)swift_slowAlloc();
          long long v85 = swift_slowAlloc();
          os_log_t v89 = v85;
          *(_DWORD *)uint64_t v84 = 136315138;
          long long v94 = v105;
          long long v95 = v106;
          long long v96 = v107;
          uint64_t v97 = v108;
          *(void *)&long long v98 = v85;
          sub_10002BF28();
          uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v94 = sub_1000262AC(v86, v87, (uint64_t *)&v98);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10002BE4C((uint64_t)&v105);
          sub_10002BE4C((uint64_t)&v105);
          _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v90, "Consistency for end %s still pending due to disjoint proof", v84, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10002BE4C((uint64_t)&v105);
          sub_10002BE4C((uint64_t)&v105);
        }

        uint64_t v17 = v109;
        goto LABEL_69;
      default:
        goto LABEL_38;
    }
  }
  else
  {
LABEL_38:
    if (qword_10015F680 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_1000294A8(v50, (uint64_t)qword_100162340);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    id v53 = &selRef_code;
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unknown startSlh consistency verification state", v54, 2u);
      uint64_t v21 = v91;
      swift_slowDealloc();
    }
  }
  id v41 = v92;
LABEL_60:
  sub_100067918((uint64_t)&v98);
  if (v99)
  {
    sub_10003CD24(&v98, (uint64_t)&v94);
    id v73 = [v7 trustedKeyStore];
    id v74 = [v73 v53[501]];

    sub_1000298DC(&v94, (uint64_t)v41, (uint64_t)v74);
    sub_100020378(&qword_100158938);
    uint64_t v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_10010C9A0;
    id v77 = v91;
    *(void *)(v76 + 32) = v91;
    *(void *)(v76 + 40) = v41;
    *(void *)&long long v98 = v76;
    specialized Array._endMutation()();
    id v78 = v77;
    id v79 = v41;
    id v80 = v17;
    id v81 = v79;

    sub_10002BE4C((uint64_t)&v101);
    sub_10002BE4C((uint64_t)&v105);

    sub_100028A4C((uint64_t)&v94);
  }
  else
  {
    sub_100028C8C((uint64_t)&v98, &qword_1001578F8);
    sub_100020378(&qword_100158938);
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_10010C9A0;
    *(void *)(v75 + 32) = v21;
    *(void *)(v75 + 40) = v41;
    *(void *)&long long v94 = v75;
    specialized Array._endMutation()();
    sub_10002BE4C((uint64_t)&v105);

    sub_10002BE4C((uint64_t)&v101);
  }
  return v5;
}

uint64_t sub_10006AC70(uint64_t a1)
{
  uint64_t v4 = v2;
  uint64_t v5 = (uint64_t)v1;
  uint64_t v7 = LogConsistency.patVerifier.getter();
  if (!v7)
  {
    sub_10006D5C4();
    swift_allocError();
    *uint64_t v17 = 0;
    swift_willThrow();
    return v3;
  }
  id v8 = (uint8_t *)v7;
  if (![v1 hasPatInclusionProof]
    || (id v9 = [v1 patInclusionProof]) == 0)
  {
    sub_10006D5C4();
    swift_allocError();
    *id v16 = 4;
    swift_willThrow();

    return v3;
  }
  uint64_t v3 = (uint64_t)v9;
  id v10 = [v9 slh];
  if (!v10)
  {
    __break(1u);
    goto LABEL_80;
  }
  id v11 = v10;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  id v12 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v11];

  sub_100067918((uint64_t)&v107);
  if (*((void *)&v108 + 1))
  {
    uint64_t v103 = v5;
    long long v106 = v8;
    sub_10003863C((uint64_t)&v107, (uint64_t)v111);
    sub_100028C8C((uint64_t)&v107, &qword_1001578F8);
    uint64_t v13 = v112;
    id v14 = v113;
    id v15 = sub_10002BCF8(v111, v112);
    sub_100066CFC((uint64_t)v114);
    uint64_t v105 = v2;
    if (v2)
    {

      sub_100028A4C((uint64_t)v111);
      return v3;
    }
    unint64_t v96 = (unint64_t)v15;
    uint64_t v97 = v14;
    unint64_t v101 = a1;
    id v102 = (id)v3;
    id v104 = v12;
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v100 = v92;
    uint64_t v22 = *(void *)(v21 - 8);
    __chkstk_darwin(v21);
    uint64_t v24 = &v92[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v25 = sub_100020378((uint64_t *)&unk_1001580E0);
    __chkstk_darwin(v25 - 8);
    uint64_t v27 = &v92[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v5 = v103;
    LogConsistency.receiptTime.getter((uint64_t)v27);
    int v28 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v27, 1, v21);
    id v98 = v24;
    unint64_t v99 = v21;
    uint64_t v95 = v13;
    if (v28 == 1)
    {
      static Date.now.getter();
      sub_100028C8C((uint64_t)v27, (uint64_t *)&unk_1001580E0);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 32))(v24, v27, v21);
    }
    uint64_t v3 = (uint64_t)v104;
    id v30 = [v104 data];
    uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    uint64_t v34 = v105;
    unint64_t v35 = sub_100066ED4();
    id v8 = v106;
    if (v34)
    {
      (*(void (**)(id, unint64_t))(v22 + 8))(v98, v99);
      sub_10002BD3C(v31, v33);
      sub_10002BE4C((uint64_t)v114);

      sub_100028A4C((uint64_t)v111);
      return v3;
    }
    id v36 = v98;
    (*((void (**)(unsigned char *, id, uint64_t, unint64_t, unint64_t, uint64_t))v97 + 3))(v114, v98, v31, v33, v35, v95);
    uint64_t v4 = 0;
    (*(void (**)(id, unint64_t))(v22 + 8))(v36, v99);
    sub_10002BD3C(v31, v33);
    sub_10002BE4C((uint64_t)v114);
    sub_100028A4C((uint64_t)v111);
    id v12 = v104;
    uint64_t v3 = (uint64_t)v102;
  }
  else
  {
    unint64_t v101 = a1;
    sub_100028C8C((uint64_t)&v107, &qword_1001578F8);
  }
  id v19 = [(uint8_t *)v8 trustedKeyStore];
  id v20 = (uint8_t *)[v19 signatureVerifier];

  [v12 setVerifier:v20];
  sub_100066CFC((uint64_t)v115);
  if (v4)
  {

LABEL_14:
    return v3;
  }
  id v102 = (id)v3;
  id v29 = sub_10005D628();
  uint64_t v4 = 0;
  long long v106 = v20;
  id v104 = v12;
  uint64_t v3 = (uint64_t)v29;
  sub_100067918((uint64_t)&v107);
  if (*((void *)&v108 + 1))
  {
    sub_10003863C((uint64_t)&v107, (uint64_t)v111);
    sub_100028C8C((uint64_t)&v107, &qword_1001578F8);
    uint64_t v37 = v112;
    uint64_t v38 = v113;
    sub_10002BCF8(v111, v112);
    (*((void (**)(_OWORD *, uint64_t, uint64_t, char *))v38 + 6))(v115, v3, v37, v38);
    sub_100028A4C((uint64_t)v111);
    id v20 = v106;
  }
  else
  {
    sub_100028C8C((uint64_t)&v107, &qword_1001578F8);
  }
  if (v3 != 1)
  {
    sub_10002BE4C((uint64_t)v115);
    id v47 = v102;
LABEL_31:

    return v3;
  }
  if (qword_10015F680 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = sub_1000294A8(v39, (uint64_t)qword_100162340);
  sub_10002BE90((uint64_t)v115);
  sub_10002BE90((uint64_t)v115);
  uint64_t v105 = v40;
  id v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    id v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v103 = v44;
    uint64_t v100 = v43;
    *(_DWORD *)id v43 = 136315138;
    unint64_t v99 = (unint64_t)(v43 + 4);
    long long v107 = v115[0];
    long long v108 = v115[1];
    long long v109 = v115[2];
    uint64_t v110 = v116;
    v111[0] = v44;
    sub_10002BF28();
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v107 = sub_1000262AC(v45, v46, v111);
    id v20 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002BE4C((uint64_t)v115);
    sub_10002BE4C((uint64_t)v115);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Verified signature for %s", v100, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10002BE4C((uint64_t)v115);
    sub_10002BE4C((uint64_t)v115);
  }

  id v48 = v102;
  [v102 setVerifier:v8];
  id v49 = sub_10005D628();
  id v12 = v104;
  uint64_t v3 = (uint64_t)v49;
  if ([v48 nodeType] != 1)
  {
    sub_10006D5C4();
    swift_allocError();
    *uint64_t v66 = 8;
    swift_willThrow();
    sub_10002BE4C((uint64_t)v115);

    goto LABEL_14;
  }
  id v50 = [v48 nodeBytes];
  if (!v50)
  {
LABEL_84:
    __break(1u);
LABEL_85:
    uint64_t result = sub_100030D78(v95, v96);
    __break(1u);
    return result;
  }
  uint64_t v51 = v50;
  sub_100038600(0, &qword_100158930);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v55 = v54;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10002BD3C(v53, v55);
  *(void *)&long long v107 = 0;
  os_log_type_t v57 = (uint8_t *)[ObjCClassFromMetadata parseFromData:isa error:&v107];

  uint64_t v58 = (void *)v107;
  if (!v57)
  {
    id v67 = (id)v107;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10002BE4C((uint64_t)v115);

    return v3;
  }
  uint64_t v100 = v57;
  a1 = v101;
  if (v101 >> 62) {
    goto LABEL_72;
  }
  uint64_t v1 = *(char **)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v59 = (id)v107;
  swift_bridgeObjectRetain();
  if (!v1)
  {
LABEL_73:
    uint64_t v74 = 0x206E776F6E6B6E75;
    swift_bridgeObjectRelease();
    id v73 = 0;
LABEL_74:
    unint64_t v76 = 0xEB00000000686C73;
    goto LABEL_75;
  }
  while (1)
  {
    uint64_t v60 = v1 - 1;
    if (__OFSUB__(v1, 1))
    {
LABEL_80:
      __break(1u);
LABEL_81:
      id v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_43;
    }
    unint64_t v99 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_81;
    }
    if (((unint64_t)v60 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if ((unint64_t)v60 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_83;
    }
    id v61 = *(id *)(a1 + 8 * (void)v60 + 32);
LABEL_43:
    uint64_t v62 = v61;
    swift_bridgeObjectRelease();
    id v98 = v62;
    if (([(uint8_t *)v100 hasObjectMapHead] & 1) == 0) {
      goto LABEL_58;
    }
    id v63 = [v98 logHead];
    if (v63)
    {
      os_log_type_t v64 = v63;
      uint64_t v95 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v96 = v65;
    }
    else
    {
      uint64_t v95 = 0;
      unint64_t v96 = 0xF000000000000000;
    }
    id v68 = [(uint8_t *)v100 objectMapHead];
    if (!v68) {
      goto LABEL_85;
    }
    uint64_t v69 = v68;
    id v70 = [v68 object];

    uint64_t v97 = v1;
    if (!v70) {
      break;
    }
    uint64_t v103 = v5;
    uint64_t v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v72 = v71;

    if (v96 >> 60 == 15)
    {
      uint64_t v5 = v103;
      if (v72 >> 60 != 15) {
        goto LABEL_57;
      }
    }
    else
    {
      if (v72 >> 60 == 15) {
        goto LABEL_57;
      }
      uint64_t v78 = v95;
      unint64_t v77 = v96;
      sub_10005B298(v95, v96);
      uint64_t v79 = v94;
      int v93 = sub_10002C1CC(v78, v77, v94, v72);
      sub_100030D78(v79, v72);
      sub_100030D78(v78, v77);
      sub_100030D78(v78, v77);
      uint64_t v5 = v103;
      if ((v93 & 1) == 0) {
        goto LABEL_58;
      }
    }
LABEL_62:
    uint64_t v80 = a1;
    swift_bridgeObjectRetain();
    a1 = 4;
    while (1)
    {
      id v81 = v99 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v80 + 8 * a1);
      uint64_t v58 = v81;
      uint64_t v82 = a1 - 3;
      if (__OFADD__(a1 - 4, 1)) {
        break;
      }
      *(void *)&long long v107 = v81;
      sub_10006D800((uint64_t)&v107, v5, v3);
      if (v4)
      {
        swift_bridgeObjectRelease();

        sub_10002BE4C((uint64_t)v115);
        id v83 = v98;

        return v3;
      }

      ++a1;
      if ((char *)v82 == v97)
      {
        swift_bridgeObjectRelease();
        sub_10002BE4C((uint64_t)v115);

        id v47 = v98;
        id v20 = (uint8_t *)v98;
        id v8 = v100;
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_72:
    id v84 = v58;
    swift_bridgeObjectRetain();
    uint64_t v1 = (char *)_CocoaArrayWrapper.endIndex.getter();
    if (!v1) {
      goto LABEL_73;
    }
  }
  if (v96 >> 60 == 15) {
    goto LABEL_62;
  }
  uint64_t v94 = 0;
  unint64_t v72 = 0xF000000000000000;
LABEL_57:
  sub_100030D78(v95, v96);
  sub_100030D78(v94, v72);
LABEL_58:
  id v73 = v98;
  sub_100066CFC((uint64_t)v117);
  if (v4)
  {
    uint64_t v74 = 0x206E776F6E6B6E75;
    swift_errorRelease();

    goto LABEL_74;
  }

  uint64_t v74 = KTSWDB.STHKey.description.getter();
  unint64_t v76 = v75;
  sub_10002BE4C((uint64_t)v117);
LABEL_75:
  swift_bridgeObjectRetain();
  long long v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.error.getter();
  uint64_t v3 = v86;
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v105 = v74;
    unint64_t v87 = (uint8_t *)swift_slowAlloc();
    uint64_t v88 = swift_slowAlloc();
    id v98 = v73;
    *(void *)&long long v107 = v88;
    *(_DWORD *)unint64_t v87 = 136315138;
    swift_bridgeObjectRetain();
    v111[0] = sub_1000262AC(v105, v76, (uint64_t *)&v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v3, "Failed to verify inclusion proof for %s", v87, 0xCu);
    swift_arrayDestroy();
    id v73 = v98;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  os_log_t v89 = v106;
  uint64_t v90 = v100;
  sub_10006D5C4();
  swift_allocError();
  *id v91 = 6;
  swift_willThrow();

  sub_10002BE4C((uint64_t)v115);
  return v3;
}

uint64_t sub_10006BF98(id a1)
{
  uint64_t v3 = (uint64_t)v2;
  uint64_t v5 = LogConsistency.tltVerifier.getter();
  if (!v5)
  {
    sub_10006D5C4();
    swift_allocError();
    *uint64_t v17 = 0;
    swift_willThrow();
    return (uint64_t)a1;
  }
  id v6 = (id)v5;
  if (![(id)v1 hasTltInclusionProof]
    || (id v7 = [(id)v1 tltInclusionProof]) == 0)
  {
    sub_10006D5C4();
    swift_allocError();
    *id v16 = 5;
    swift_willThrow();

    return (uint64_t)a1;
  }
  id v8 = v7;
  id v9 = [v7 slh];
  if (!v9)
  {
    __break(1u);
    goto LABEL_70;
  }
  id v10 = v9;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  id v11 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v10];

  sub_100067918((uint64_t)&v97);
  if (*((void *)&v98 + 1))
  {
    id v95 = v6;
    id v12 = v8;
    sub_10003863C((uint64_t)&v97, (uint64_t)v101);
    sub_100028C8C((uint64_t)&v97, &qword_1001578F8);
    uint64_t v13 = v102;
    uint64_t v14 = v103;
    id v15 = sub_10002BCF8(v101, v102);
    sub_100066CFC((uint64_t)v104);
    ObjCClassFromMetadata = v2;
    if (v2)
    {

      sub_100028A4C((uint64_t)v101);
      return (uint64_t)a1;
    }
    v86[1] = v15;
    uint64_t v87 = v14;
    uint64_t v90 = (uint8_t *)v13;
    id v88 = a1;
    id v93 = v12;
    id v94 = v11;
    uint64_t v21 = (uint8_t *)type metadata accessor for Date();
    uint64_t v92 = v86;
    uint64_t v22 = *((void *)v21 - 1);
    __chkstk_darwin(v21);
    uint64_t v24 = (char *)v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v25 = sub_100020378((uint64_t *)&unk_1001580E0);
    __chkstk_darwin(v25 - 8);
    uint64_t v27 = (char *)v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    LogConsistency.receiptTime.getter((uint64_t)v27);
    int v28 = (*(uint64_t (**)(char *, uint64_t, uint8_t *))(v22 + 48))(v27, 1, v21);
    id v91 = v21;
    os_log_t v89 = v24;
    if (v28 == 1)
    {
      static Date.now.getter();
      sub_100028C8C((uint64_t)v27, (uint64_t *)&unk_1001580E0);
    }
    else
    {
      (*(void (**)(char *, char *, uint8_t *))(v22 + 32))(v24, v27, v21);
    }
    id v6 = v95;
    id v30 = ObjCClassFromMetadata;
    a1 = v94;
    id v31 = [v94 data];
    uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    unint64_t v35 = sub_100066ED4();
    if (v30)
    {
      (*(void (**)(char *, uint8_t *))(v22 + 8))(v89, v91);
      sub_10002BD3C(v32, v34);
      sub_10002BE4C((uint64_t)v104);

LABEL_21:
      sub_100028A4C((uint64_t)v101);
      return (uint64_t)a1;
    }
    id v36 = v89;
    (*(void (**)(unsigned char *, char *, uint64_t, unint64_t, unint64_t, uint8_t *))(v87 + 24))(v104, v89, v32, v34, v35, v90);
    uint64_t v3 = 0;
    (*(void (**)(char *, uint8_t *))(v22 + 8))(v36, v91);
    sub_10002BD3C(v32, v34);
    sub_10002BE4C((uint64_t)v104);
    sub_100028A4C((uint64_t)v101);
    id v8 = v93;
    id v11 = v94;
    a1 = v88;
  }
  else
  {
    sub_100028C8C((uint64_t)&v97, &qword_1001578F8);
  }
  id v19 = [v6 trustedKeyStore];
  id v20 = [v19 signatureVerifier];

  [v11 setVerifier:v20];
  sub_100066CFC((uint64_t)v105);
  if (v3)
  {

    return (uint64_t)a1;
  }
  id v88 = a1;
  id v95 = v20;
  id v29 = sub_10005D628();
  uint64_t v3 = 0;
  id v94 = v11;
  a1 = v29;
  if (qword_10015F680 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = sub_1000294A8(v37, (uint64_t)qword_100162340);
  sub_10002BE90((uint64_t)v105);
  sub_10002BE90((uint64_t)v105);
  uint64_t v92 = (void *)v38;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    ObjCClassFromMetadata = v39;
    id v41 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v42 = (void *)swift_slowAlloc();
    id v93 = v42;
    id v91 = v41;
    *(_DWORD *)id v41 = 136315138;
    uint64_t v90 = v41 + 4;
    long long v97 = v105[0];
    long long v98 = v105[1];
    long long v99 = v105[2];
    uint64_t v100 = v106;
    v101[0] = (uint64_t)v42;
    sub_10002BF28();
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v97 = sub_1000262AC(v43, v44, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002BE4C((uint64_t)v105);
    sub_10002BE4C((uint64_t)v105);
    uint64_t v39 = ObjCClassFromMetadata;
    _os_log_impl((void *)&_mh_execute_header, ObjCClassFromMetadata, v40, "Verified signature for %s", v91, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10002BE4C((uint64_t)v105);
    sub_10002BE4C((uint64_t)v105);
  }

  sub_100067918((uint64_t)&v97);
  if (*((void *)&v98 + 1))
  {
    sub_10003863C((uint64_t)&v97, (uint64_t)v101);
    sub_100028C8C((uint64_t)&v97, &qword_1001578F8);
    uint64_t v45 = v102;
    uint64_t v46 = v103;
    sub_10002BCF8(v101, v102);
    (*(void (**)(_OWORD *, id, uint64_t, uint64_t))(v46 + 48))(v105, a1, v45, v46);
    sub_100028A4C((uint64_t)v101);
  }
  else
  {
    sub_100028C8C((uint64_t)&v97, &qword_1001578F8);
  }
  id v47 = v94;
  sub_100067918((uint64_t)&v97);
  if (*((void *)&v98 + 1))
  {
    sub_10003863C((uint64_t)&v97, (uint64_t)v101);
    sub_100028C8C((uint64_t)&v97, &qword_1001578F8);
    uint64_t v48 = v102;
    uint64_t v49 = v103;
    sub_10002BCF8(v101, v102);
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v49 + 40))(v105, 1, v48, v49);
    sub_100028A4C((uint64_t)v101);
    id v47 = v94;
  }
  else
  {
    sub_100028C8C((uint64_t)&v97, &qword_1001578F8);
  }
  if (a1 != (id)1)
  {
    sub_10002BE4C((uint64_t)v105);

    return (uint64_t)a1;
  }
  [v8 setVerifier:v6];
  unint64_t v1 = (unint64_t)v8;
  a1 = sub_10005D628();
  if ([v8 nodeType] != 3)
  {
    sub_10006D5C4();
    swift_allocError();
    *uint64_t v58 = 9;
    swift_willThrow();
    sub_10002BE4C((uint64_t)v105);

LABEL_59:
    return (uint64_t)a1;
  }
  id v50 = [v8 nodeBytes];
  if (!v50)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  uint64_t v51 = v50;
  sub_100038600(0, &qword_100158928);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v54 = v53;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10002BD3C(v52, v54);
  *(void *)&long long v97 = 0;
  id v56 = (uint8_t *)[ObjCClassFromMetadata parseFromData:isa error:&v97];

  if (!v56)
  {
    id v59 = (id)v97;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10002BE4C((uint64_t)v105);

    goto LABEL_59;
  }
  id v57 = (id)v97;
  sub_100066CFC((uint64_t)&v107);
  ObjCClassFromMetadata = 0;
  id v93 = v8;
  id v91 = v56;
  if (![(uint8_t *)v56 hasPatHead])
  {
LABEL_55:
    sub_10002BE90((uint64_t)&v107);
    sub_10002BE90((uint64_t)&v107);
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      unint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      *(_DWORD *)unint64_t v71 = 136446210;
      a1 = v71 + 4;
      long long v97 = v107;
      long long v98 = v108;
      long long v99 = v109;
      uint64_t v100 = v110;
      v101[0] = v72;
      sub_10002BF28();
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v97 = sub_1000262AC(v73, v74, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BE4C((uint64_t)&v107);
      sub_10002BE4C((uint64_t)&v107);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Failed to verify inclusion proof for %{public}s", v71, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10002BE4C((uint64_t)&v107);
      sub_10002BE4C((uint64_t)&v107);
    }

    sub_10006D5C4();
    swift_allocError();
    *unint64_t v75 = 7;
    swift_willThrow();
    sub_10002BE4C((uint64_t)&v107);

    sub_10002BE4C((uint64_t)v105);
    goto LABEL_59;
  }
  id v60 = [v88 logHead];
  if (v60)
  {
    id v61 = v60;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v1 = v62;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v1 = 0xF000000000000000;
  }
  id v63 = [(uint8_t *)v91 patHead];
  if (v63)
  {
    os_log_type_t v64 = v63;
    id v65 = [v63 object];

    if (v65)
    {
      uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v68 = v67;

      if (v1 >> 60 == 15)
      {
        if (v68 >> 60 == 15) {
          goto LABEL_61;
        }
        goto LABEL_54;
      }
      if (v68 >> 60 == 15)
      {
LABEL_54:
        sub_100030D78(v3, v1);
        sub_100030D78(v66, v68);
        goto LABEL_55;
      }
      sub_10005B298(v3, v1);
      char v76 = sub_10002C1CC(v3, v1, v66, v68);
      sub_100030D78(v66, v68);
      sub_100030D78(v3, v1);
      sub_100030D78(v3, v1);
      if ((v76 & 1) == 0) {
        goto LABEL_55;
      }
    }
    else if (v1 >> 60 != 15)
    {
      uint64_t v66 = 0;
      unint64_t v68 = 0xF000000000000000;
      goto LABEL_54;
    }
LABEL_61:
    sub_10002BE90((uint64_t)&v107);
    sub_10002BE90((uint64_t)&v107);
    unint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      uint64_t v92 = (void *)v80;
      *(_DWORD *)uint64_t v79 = 136315138;
      uint64_t v90 = v79 + 4;
      long long v97 = v107;
      long long v98 = v108;
      long long v99 = v109;
      uint64_t v100 = v110;
      v101[0] = v80;
      sub_10002BF28();
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v97 = sub_1000262AC(v81, v82, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BE4C((uint64_t)&v107);
      sub_10002BE4C((uint64_t)&v107);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Verified inclusion for %s", v79, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10002BE4C((uint64_t)&v107);
      sub_10002BE4C((uint64_t)&v107);
    }

    sub_100067918((uint64_t)&v97);
    if (!*((void *)&v98 + 1))
    {
      sub_10002BE4C((uint64_t)v105);
      sub_10002BE4C((uint64_t)&v107);

      sub_100028C8C((uint64_t)&v97, &qword_1001578F8);
      return (uint64_t)a1;
    }
    sub_10003863C((uint64_t)&v97, (uint64_t)v101);
    sub_100028C8C((uint64_t)&v97, &qword_1001578F8);
    uint64_t v83 = v102;
    uint64_t v84 = v103;
    sub_10002BCF8(v101, v102);
    long long v85 = ObjCClassFromMetadata;
    (*(void (**)(long long *, id, uint64_t, uint64_t))(v84 + 40))(&v107, a1, v83, v84);
    if (!v85)
    {
      sub_10002BE4C((uint64_t)v105);
      sub_10002BE4C((uint64_t)&v107);

      sub_100028A4C((uint64_t)v101);
      return (uint64_t)a1;
    }
    sub_10002BE4C((uint64_t)v105);
    sub_10002BE4C((uint64_t)&v107);

    goto LABEL_21;
  }
LABEL_71:
  uint64_t result = sub_100030D78(v3, v1);
  __break(1u);
  return result;
}

void *LogConsistency.verify()()
{
  if (![v0 hasStartSlh])
  {
    sub_10006D5C4();
    swift_allocError();
    char v6 = 1;
LABEL_13:
    *uint64_t v5 = v6;
    swift_willThrow();
    goto LABEL_14;
  }
  if (![v0 hasEndSlh])
  {
    sub_10006D5C4();
    swift_allocError();
    char v6 = 2;
    goto LABEL_13;
  }
  if (![v0 hasPatInclusionProof])
  {
    sub_10006D5C4();
    swift_allocError();
    char v6 = 4;
    goto LABEL_13;
  }
  if (![v0 hasTltInclusionProof])
  {
    sub_10006D5C4();
    swift_allocError();
    char v6 = 5;
    goto LABEL_13;
  }
  id v3 = sub_100068168();
  if (!v1)
  {
    uint64_t v0 = v3;
    if (v3 == (id)1)
    {
      uint64_t v0 = sub_100069698();
      if (v0 == (void *)1)
      {
        uint64_t v0 = (void *)sub_10006AC70(v4);
        id v9 = v8;
        swift_bridgeObjectRelease();
        if (v0 == (void *)1)
        {
          id v10 = v9;
          uint64_t v0 = (void *)sub_10006BF98(v10);
        }
        else
        {
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
LABEL_14:
  return v0;
}

unint64_t sub_10006D56C()
{
  unint64_t result = qword_100158910;
  if (!qword_100158910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158910);
  }
  return result;
}

unint64_t sub_10006D5C4()
{
  unint64_t result = qword_100158918;
  if (!qword_100158918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158918);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LogConsistencyError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LogConsistencyError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006D774);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LogConsistencyError()
{
  return &type metadata for LogConsistencyError;
}

unint64_t sub_10006D7AC()
{
  unint64_t result = qword_100158920;
  if (!qword_100158920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158920);
  }
  return result;
}

void sub_10006D800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100066CFC((uint64_t)v21);
  if (!v3)
  {
    if (qword_10015F680 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_1000294A8(v5, (uint64_t)qword_100162340);
    sub_10002BE90((uint64_t)v21);
    sub_10002BE90((uint64_t)v21);
    unsigned int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v24 = a3;
      id v9 = (uint8_t *)v8;
      v18[0] = swift_slowAlloc();
      *(_DWORD *)id v9 = 136315138;
      v14[1] = *((void *)&v21[0] + 1);
      long long v15 = v21[1];
      long long v16 = v21[2];
      uint64_t v17 = v22;
      sub_10002BF28();
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      v14[0] = sub_1000262AC(v10, v11, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BE4C((uint64_t)v21);
      sub_10002BE4C((uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Verified inclusion for %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v24;
      swift_slowDealloc();
    }
    else
    {
      sub_10002BE4C((uint64_t)v21);
      sub_10002BE4C((uint64_t)v21);
    }

    sub_100067918((uint64_t)v14);
    if (*((void *)&v15 + 1))
    {
      sub_10003863C((uint64_t)v14, (uint64_t)v18);
      sub_100028C8C((uint64_t)v14, &qword_1001578F8);
      uint64_t v12 = v19;
      uint64_t v13 = v20;
      sub_10002BCF8(v18, v19);
      sub_100066CFC((uint64_t)v23);
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 40))(v23, a3, v12, v13);
      sub_10002BE4C((uint64_t)v21);
      sub_10002BE4C((uint64_t)v23);
      sub_100028A4C((uint64_t)v18);
    }
    else
    {
      sub_10002BE4C((uint64_t)v21);
      sub_100028C8C((uint64_t)v14, &qword_1001578F8);
    }
  }
}

uint64_t sub_10006DADC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162358);
  sub_1000294A8(v0, (uint64_t)qword_100162358);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10006DB60()
{
  if (qword_10015F910 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162358);
}

uint64_t sub_10006DBC4@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015F910 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162358);
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_10006DC6C()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_10006DCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_10006DD28(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_10006DDB0;
}

void sub_10006DDB0(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

char *sub_10006DE38(uint64_t a1, uint64_t (*a2)(unint64_t, unint64_t), uint64_t a3, void *a4)
{
  id v9 = objc_allocWithZone(v4);
  return sub_10006DE94(a1, a2, a3, a4);
}

char *sub_10006DE94(uint64_t a1, uint64_t (*a2)(unint64_t, unint64_t), uint64_t a3, void *a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v9 = &v4[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon];
  *(void *)&v4[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v10 = v4;
  *(void *)&v10[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_listener] = a2(0xD000000000000019, 0x8000000100112360);
  *(void *)&v10[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_xpcInterface] = a4;
  *(void *)&v10[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_stateMachine] = a1;
  swift_beginAccess();
  *((void *)v9 + 1) = 0;
  swift_unknownObjectWeakAssign();
  id v11 = a4;
  swift_retain();

  v17.receiver = v10;
  v17.super_class = ObjectType;
  uint64_t v12 = (char *)[super init];
  uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_listener];
  uint64_t v14 = v12;
  [v13 setDelegate:v14];
  id v15 = v13;
  [v15 resume];

  swift_release();
  return v14;
}

char *sub_10006DFF4(uint64_t a1)
{
  uint64_t v3 = self;
  swift_retain();
  id v4 = [v3 swTransparencyXPCInterface];
  uint64_t v5 = (char *)objc_allocWithZone(v1);
  unsigned int v6 = &v5[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon];
  *(void *)&v5[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon + 8] = 0;
  swift_unknownObjectWeakInit();
  id v7 = objc_allocWithZone((Class)NSXPCListener);
  uint64_t v8 = v5;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v7 initWithMachServiceName:v9];

  *(void *)&v8[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_listener] = v10;
  *(void *)&v8[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_xpcInterface] = v4;
  *(void *)&v8[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_stateMachine] = a1;
  swift_beginAccess();
  *((void *)v6 + 1) = 0;
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v11 = v4;

  v17.receiver = v8;
  v17.super_class = v1;
  uint64_t v12 = (char *)[super init];
  uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_listener];
  uint64_t v14 = v12;
  [v13 setDelegate:v14];
  id v15 = v13;
  [v15 resume];

  swift_release();
  return v14;
}

uint64_t sub_10006E1A4(void *a1)
{
  [a1 auditToken];
  uint64_t v1 = SecTaskCreateWithAuditToken(0, &v7);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  CFStringRef v3 = SecTaskCopySigningIdentifier(v1, 0);
  if (!v3)
  {

    return 0;
  }
  id v4 = (__CFString *)v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t sub_10006E238(uint64_t a1, void *a2)
{
  return sub_10006E3D8(a2);
}

id sub_10006E2A0()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void sub_10006E2D4()
{
}

id sub_10006E334()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_10006E3D8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = 0x6E776F6E6B6E75;
  [a1 auditToken];
  uint64_t v5 = SecTaskCreateWithAuditToken(0, &token);
  if (v5)
  {
    unsigned int v6 = v5;
    CFStringRef v7 = SecTaskCopySigningIdentifier(v5, 0);
    if (v7)
    {
      uint64_t v8 = (__CFString *)v7;
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      goto LABEL_6;
    }
  }
  uint64_t v10 = 0xE700000000000000;
LABEL_6:
  *(void *)token.val = v4;
  *(void *)&token.val[2] = v10;
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 91;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  LODWORD(v33[0]) = [a1 processIdentifier];
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 93;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  uint64_t v15 = *(void *)token.val;
  unint64_t v14 = *(void *)&token.val[2];
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [a1 valueForEntitlement:v16];

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v33, 0, sizeof(v33));
  }
  sub_100033860((uint64_t)v33, (uint64_t)&token);
  if (*(void *)&token.val[6])
  {
    if (swift_dynamicCast() & 1) != 0 && (v32)
    {
      if (qword_10015F910 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_1000294A8(v18, (uint64_t)qword_100162358);
      swift_bridgeObjectRetain();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(void *)token.val = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&v33[0] = sub_1000262AC(v15, v14, (uint64_t *)&token);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Accepting new connection from %{public}s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for SWTransparencyXPCImplementation();
      uint64_t v27 = *(void *)(v2 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_stateMachine);
      uint64_t v28 = v2 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon;
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      uint64_t v30 = *(void *)(v28 + 8);
      swift_retain();
      id v31 = sub_100075008(v27, Strong, v30, v4, v10, (int)[a1 processIdentifier]);
      [a1 setExportedInterface:*(void *)(v2 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_xpcInterface)];
      [a1 setExportedObject:v31];
      [a1 resume];

      return 1;
    }
  }
  else
  {
    sub_10006E9B0((uint64_t)&token);
  }
  swift_bridgeObjectRelease();
  if (qword_10015F910 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_1000294A8(v22, (uint64_t)qword_100162358);
  swift_bridgeObjectRetain();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(void *)token.val = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&v33[0] = sub_1000262AC(v15, v14, (uint64_t *)&token);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Rejecting connection from unauthorized client %{public}s because it's missing the com.apple.transparency.privateCloudCompute entitlement", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  [a1 invalidate];
  return 0;
}

uint64_t sub_10006E964(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for SWTransparencyXPCService()
{
  return self;
}

uint64_t sub_10006E9B0(uint64_t a1)
{
  uint64_t v2 = sub_100020378(&qword_1001578E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10006EA10()
{
  return &qword_100158A00;
}

uint64_t sub_10006EA1C()
{
  swift_beginAccess();
  uint64_t v0 = qword_100158A00;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_10006EA70(uint64_t a1, void *a2)
{
  qword_100158A00 = a1;
  off_100158A08 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10006EACC())()
{
  return j__swift_endAccess;
}

uint64_t sub_10006EB24(uint64_t a1)
{
  if ((a1 & (unint64_t)&_mh_execute_header) != 0) {
    return a1 + 2;
  }
  else {
    return 1;
  }
}

uint64_t sub_10006EB38()
{
  return Error<>._domain.getter();
}

uint64_t sub_10006EB68()
{
  return Error<>._code.getter();
}

uint64_t sub_10006EB98()
{
  if (*((unsigned char *)v0 + 4) == 1) {
    return *v0 + 2;
  }
  else {
    return 1;
  }
}

uint64_t sub_10006EBB8()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F928 = result;
  return result;
}

uint64_t sub_10006EBEC()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F938 = result;
  return result;
}

uint64_t sub_10006EC20()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F948 = result;
  return result;
}

uint64_t sub_10006EC54()
{
  type metadata accessor for AssociatedObjectKey();
  uint64_t result = sub_10002938C();
  qword_10015F958 = result;
  return result;
}

uint64_t sub_10006EC88()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162370);
  sub_1000294A8(v0, (uint64_t)qword_100162370);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10006ED0C()
{
  if (qword_10015F960 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162370);
}

uint64_t sub_10006ED70@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015F960 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162370);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t MilestoneRootsResponse.keyBag.getter()
{
  if (qword_10015F920 != -1) {
    swift_once();
  }
  uint64_t v1 = (const void *)(qword_10015F928 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100038600(0, (unint64_t *)&qword_1001578E8);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

void MilestoneRootsResponse.keyBag.setter(void *a1)
{
}

void (*MilestoneRootsResponse.keyBag.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = MilestoneRootsResponse.keyBag.getter();
  return sub_10006EFC4;
}

void sub_10006EFC4(uint64_t a1, char a2)
{
}

double sub_10006EFE8@<D0>(uint64_t a1@<X8>)
{
  if (qword_10015F930 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015F938 + 16);
  swift_beginAccess();
  id v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100033860((uint64_t)v6, (uint64_t)v7);
  if (!v8)
  {
    sub_100028C8C((uint64_t)v7, &qword_1001578E0);
    goto LABEL_10;
  }
  sub_100020378(&qword_1001578F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10006F110(uint64_t a1)
{
  if (qword_10015F930 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_10015F938;
  sub_100029208(a1, (uint64_t)v12, &qword_1001578F8);
  uint64_t v4 = v13;
  if (v13)
  {
    uint64_t v5 = sub_10002BCF8(v12, v13);
    uint64_t v6 = *(void *)(v4 - 8);
    __chkstk_darwin(v5);
    uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    uint64_t v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_100028A4C((uint64_t)v12);
  }
  else
  {
    uint64_t v9 = 0;
  }
  swift_beginAccess();
  objc_setAssociatedObject(v1, (const void *)(v3 + 16), v9, (void *)1);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, &qword_1001578F8);
}

void (*sub_10006F2C8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_10006EFE8((uint64_t)v3);
  return sub_10006F328;
}

void sub_10006F328(uint64_t *a1, char a2)
{
  id v2 = (void *)*a1;
  if (a2)
  {
    sub_100029208(*a1, (uint64_t)v2 + 40, &qword_1001578F8);
    sub_10006F110((uint64_t)v2 + 40);
    sub_100028C8C((uint64_t)v2, &qword_1001578F8);
  }
  else
  {
    sub_10006F110(*a1);
  }

  free(v2);
}

uint64_t MilestoneRootsResponse.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015F940 != -1) {
    swift_once();
  }
  uint64_t v3 = (const void *)(qword_10015F948 + 16);
  swift_beginAccess();
  id v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100033860((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100028C8C((uint64_t)v10, &qword_1001578E0);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t MilestoneRootsResponse.receiptTime.setter(uint64_t a1)
{
  id v2 = v1;
  if (qword_10015F940 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10015F948;
  uint64_t v5 = sub_100020378((uint64_t *)&unk_1001580E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a1, (uint64_t)v7, (uint64_t *)&unk_1001580E0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_beginAccess();
  objc_setAssociatedObject(v2, (const void *)(v4 + 16), isa, (void *)0x303);
  swift_endAccess();
  swift_unknownObjectRelease();
  return sub_100028C8C(a1, (uint64_t *)&unk_1001580E0);
}

void (*MilestoneRootsResponse.receiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(sub_100020378((uint64_t *)&unk_1001580E0) - 8) + 64);
  a1[1] = v3;
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  MilestoneRootsResponse.receiptTime.getter((uint64_t)v4);
  return sub_10006F760;
}

void sub_10006F760(uint64_t a1, char a2)
{
  id v2 = *(void **)(a1 + 16);
  if (a2)
  {
    __chkstk_darwin(a1);
    uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100029208((uint64_t)v2, (uint64_t)v4, (uint64_t *)&unk_1001580E0);
    MilestoneRootsResponse.receiptTime.setter((uint64_t)v4);
    sub_100028C8C((uint64_t)v2, (uint64_t *)&unk_1001580E0);
    free(v2);
  }
  else
  {
    MilestoneRootsResponse.receiptTime.setter(*(void *)(a1 + 16));
    free(v2);
  }
}

uint64_t MilestoneRootsResponse.configBag.getter()
{
  if (qword_10015F950 != -1) {
    swift_once();
  }
  uint64_t v1 = (const void *)(qword_10015F958 + 16);
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100033860((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100038600(0, &qword_100158888);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100028C8C((uint64_t)v6, &qword_1001578E0);
    return 0;
  }
}

void MilestoneRootsResponse.configBag.setter(void *a1)
{
}

void (*MilestoneRootsResponse.configBag.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = MilestoneRootsResponse.configBag.getter();
  return sub_10006F9E4;
}

void sub_10006F9E4(uint64_t a1, char a2)
{
}

void sub_10006FA08(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v4 = a2;
    id v5 = sub_100066A5C();
    if (v2)
    {
LABEL_3:

      return;
    }
    id v8 = v5;
    uint64_t v9 = v6;
    uint64_t v10 = MilestoneRootsResponse.configBag.getter();
    if (!v10)
    {
      swift_bridgeObjectRelease();
      sub_1000746AC();
      swift_allocError();
      *(_DWORD *)uint64_t v19 = 9;
      *(unsigned char *)(v19 + 4) = 1;
      swift_willThrow();
      goto LABEL_3;
    }
    uint64_t v11 = (void *)v10;
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 doubleForKey:v12];
    double v14 = v13;

    if (v14 <= 0.0)
    {
      swift_bridgeObjectRelease();
      sub_1000746AC();
      swift_allocError();
      *(_DWORD *)uint64_t v20 = 9;
      *(unsigned char *)(v20 + 4) = 1;
      swift_willThrow();
    }
    else
    {
      sub_10006EFE8((uint64_t)v68);
      id v70 = v11;
      if (v69)
      {
        sub_10003863C((uint64_t)v68, (uint64_t)v65);
        sub_100028C8C((uint64_t)v68, &qword_1001578F8);
        uint64_t v16 = v66;
        uint64_t v15 = v67;
        os_log_t v64 = (os_log_t)sub_10002BCF8(v65, v66);
        unint64_t v17 = sub_100066B58();
        uint64_t v18 = (*(uint64_t (**)(id, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 136))(v8, v9, v17, 5, 1, 1, 1, v16, v15);
        uint64_t v48 = *(void *)(v18 + 16);
        LODWORD(v60) = v48 == 0;
        if (v48) {
          id v59 = *(char **)(v18 + 8 * v48 + 24);
        }
        else {
          id v59 = 0;
        }
        swift_bridgeObjectRelease();
        sub_100028A4C((uint64_t)v65);
      }
      else
      {
        sub_100028C8C((uint64_t)v68, &qword_1001578F8);
        id v59 = 0;
        LODWORD(v60) = 1;
      }
      if (qword_10015F960 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_1000294A8(v21, (uint64_t)qword_100162370);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        os_log_t v64 = v22;
        os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        uint64_t v63 = v25;
        unint64_t v62 = v24;
        *(_DWORD *)os_log_type_t v24 = 136315138;
        v68[0] = v25;
        uint64_t v26 = v59;
        if (v60) {
          uint64_t v26 = 0;
        }
        id v61 = v24 + 4;
        v65[0] = v26;
        uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
        v65[0] = sub_1000262AC(v27, v28, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v22 = v64;
        _os_log_impl((void *)&_mh_execute_header, v64, v23, "GC: Keeping verified milestone revision %s", v62, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v29 = type metadata accessor for Date();
      unint64_t v62 = (uint8_t *)v55;
      uint64_t v30 = __chkstk_darwin(v29);
      char v32 = ((char *)v55 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v58 = v31;
      __chkstk_darwin(v30);
      id v61 = (uint8_t *)v33;
      unint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
      uint64_t v63 = v36;
      id v56 = v34;
      uint64_t v57 = v33 + 16;
      ((void (*)(char *, uint64_t))v34)((char *)v55 - v35, a1);
      os_log_t v64 = v32;
      Date.init(timeInterval:since:)();
      sub_10006EFE8((uint64_t)v68);
      if (v69)
      {
        sub_10003863C((uint64_t)v68, (uint64_t)v65);
        sub_100028C8C((uint64_t)v68, &qword_1001578F8);
        uint64_t v37 = v66;
        uint64_t v38 = v67;
        v55[1] = sub_10002BCF8(v65, v66);
        unint64_t v39 = sub_100066B58();
        (*(void (**)(id, uint64_t, unint64_t, uint64_t, os_log_t, uint64_t, uint64_t, uint64_t, char *, _BYTE, uint64_t, uint64_t))(v38 + 88))(v8, v9, v39, 5, v64, 1, 1, 1, v59, (_BYTE)v60, v37, v38);
        uint64_t v54 = sub_100028A4C((uint64_t)v65);
      }
      else
      {
        uint64_t v54 = sub_100028C8C((uint64_t)v68, &qword_1001578F8);
      }
      id v60 = v55;
      uint64_t v40 = __chkstk_darwin(v54);
      os_log_type_t v42 = (char *)v55 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
      __chkstk_darwin(v40);
      uint64_t v44 = a1;
      uint64_t v45 = v63;
      v56((char *)v55 - v43, v44, v63);
      Date.init(timeInterval:since:)();
      sub_10006EFE8((uint64_t)v68);
      if (v69)
      {
        id v59 = v42;
        sub_10003863C((uint64_t)v68, (uint64_t)v65);
        sub_100028C8C((uint64_t)v68, &qword_1001578F8);
        uint64_t v46 = v66;
        uint64_t v47 = v67;
        sub_10002BCF8(v65, v66);
        unint64_t v50 = sub_100066B58();
        id v51 = v8;
        uint64_t v52 = v59;
        (*(void (**)(id, uint64_t, unint64_t, uint64_t, char *, uint64_t, uint64_t))(v47 + 96))(v51, v9, v50, 5, v59, v46, v47);
        swift_bridgeObjectRelease();

        unint64_t v53 = (void (*)(char *, uint64_t))*((void *)v61 + 1);
        v53(v52, v45);
        v53((char *)v64, v45);
        sub_100028A4C((uint64_t)v65);
      }
      else
      {
        swift_bridgeObjectRelease();

        uint64_t v49 = (void (*)(char *, uint64_t))*((void *)v61 + 1);
        v49(v42, v45);
        v49((char *)v64, v45);
        sub_100028C8C((uint64_t)v68, &qword_1001578F8);
      }
    }
  }
  else
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 1;
    *(unsigned char *)(v7 + 4) = 1;
    swift_willThrow();
  }
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MilestoneRootsResponse.isNewEpoch()()
{
  uint64_t v1 = (void *)MilestoneRootsResponse.keyBag.getter();
  if (!v1)
  {
    sub_100034F60();
    swift_allocError();
    v14[1] = 0;
    void v14[2] = 0;
    void *v14 = 0x8000000000000000;
    swift_willThrow();
    return v0 & 1;
  }
  uint64_t v2 = v1;
  id v3 = [v1 patLogBeginningMs];
  id v4 = [v2 tltLogBeginningMs];
  if ([v0 hasTltInclusionProof])
  {
    id v5 = [v0 tltInclusionProof];
    if (v5)
    {
      uint64_t v6 = v5;
      sub_100029780(v5, (unint64_t)v4);
      if ((v7 & 0x100) == 0)
      {
        if (qword_10015F960 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_1000294A8(v8, (uint64_t)qword_100162370);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          uint64_t v25 = swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 136446210;
          sub_1000663F0();
          uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
          sub_1000262AC(v12, v13, &v25);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Detected new TLT epoch: %{public}s", v11, 0xCu);
          LOBYTE(v0) = 1;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          LOBYTE(v0) = 1;
        }
        return v0 & 1;
      }
    }
  }
  if (![v0 hasPatInclusionProof]
    || (id v15 = [v0 patInclusionProof]) == 0)
  {
LABEL_19:

    LOBYTE(v0) = 0;
    return v0 & 1;
  }
  uint64_t v16 = v15;
  sub_100029780(v15, (unint64_t)v3);
  if ((v17 & 0x100) != 0)
  {

    goto LABEL_19;
  }
  if (qword_10015F960 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_1000294A8(v18, (uint64_t)qword_100162370);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446210;
    sub_1000663F0();
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_1000262AC(v22, v23, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Detected new PAT epoch: %{public}s", v21, 0xCu);
    LOBYTE(v0) = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    LOBYTE(v0) = 1;
  }
  return v0 & 1;
}

uint64_t sub_10007070C()
{
  uint64_t v2 = MilestoneRootsResponse.keyBag.getter();
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = [v0 milestonesArray];
    if (v4)
    {
      id v5 = v4;
      sub_100038600(0, &qword_100157930);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = 2;
    *(unsigned char *)(v6 + 4) = 1;
    swift_willThrow();
  }
  else
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 0;
    *(unsigned char *)(v7 + 4) = 1;
    swift_willThrow();
  }
  return v1;
}

uint64_t sub_1000712B8(unint64_t a1)
{
  uint64_t v4 = v2;
  uint64_t v5 = (uint64_t)v1;
  uint64_t v7 = MilestoneRootsResponse.keyBag.getter();
  if (!v7)
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v17 = 0;
    *(unsigned char *)(v17 + 4) = 1;
    swift_willThrow();
    return v3;
  }
  id v8 = (id)v7;
  if (![v1 hasPatInclusionProof]
    || (id v9 = [v1 patInclusionProof]) == 0)
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 3;
    *(unsigned char *)(v16 + 4) = 1;
    swift_willThrow();

    return v3;
  }
  uint64_t v3 = (uint64_t)v9;
  id v10 = [v9 slh];
  if (!v10) {
    goto LABEL_78;
  }
  uint64_t v11 = v10;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  id v12 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v11];

  sub_10006EFE8((uint64_t)&v111);
  if (*((void *)&v112 + 1))
  {
    uint64_t v107 = v5;
    id v110 = v8;
    sub_10003863C((uint64_t)&v111, (uint64_t)v115);
    sub_100028C8C((uint64_t)&v111, &qword_1001578F8);
    uint64_t v13 = v116;
    double v14 = v117;
    id v15 = sub_10002BCF8(v115, v116);
    sub_100066CFC((uint64_t)v118);
    uint64_t v109 = v2;
    if (v2)
    {

      sub_100028A4C((uint64_t)v115);
      return v3;
    }
    unint64_t v100 = (unint64_t)v15;
    unint64_t v101 = v14;
    unint64_t v105 = a1;
    id v106 = (id)v3;
    id v108 = v12;
    uint64_t v21 = type metadata accessor for Date();
    id v104 = v96;
    uint64_t v22 = *(void *)(v21 - 8);
    __chkstk_darwin(v21);
    os_log_type_t v24 = &v96[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v25 = sub_100020378((uint64_t *)&unk_1001580E0);
    __chkstk_darwin(v25 - 8);
    uint64_t v27 = &v96[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v5 = v107;
    MilestoneRootsResponse.receiptTime.getter((uint64_t)v27);
    int v28 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v27, 1, v21);
    id v102 = v24;
    uint64_t v103 = (uint8_t *)v21;
    uint64_t v99 = v13;
    if (v28 == 1)
    {
      static Date.now.getter();
      sub_100028C8C((uint64_t)v27, (uint64_t *)&unk_1001580E0);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 32))(v24, v27, v21);
    }
    uint64_t v3 = (uint64_t)v108;
    id v30 = [v108 data];
    uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    uint64_t v34 = v109;
    unint64_t v35 = sub_100066ED4();
    id v8 = v110;
    if (v34)
    {
      (*(void (**)(id, uint8_t *))(v22 + 8))(v102, v103);
      sub_10002BD3C(v31, v33);
      sub_10002BE4C((uint64_t)v118);

      sub_100028A4C((uint64_t)v115);
      return v3;
    }
    id v36 = v102;
    ((void (**)(unsigned char *, id, uint64_t, unint64_t, unint64_t, uint64_t))v101)[3](v118, v102, v31, v33, v35, v99);
    uint64_t v4 = 0;
    (*(void (**)(id, uint8_t *))(v22 + 8))(v36, v103);
    sub_10002BD3C(v31, v33);
    sub_10002BE4C((uint64_t)v118);
    sub_100028A4C((uint64_t)v115);
    id v12 = v108;
    uint64_t v3 = (uint64_t)v106;
  }
  else
  {
    unint64_t v105 = a1;
    sub_100028C8C((uint64_t)&v111, &qword_1001578F8);
  }
  id v19 = [v8 appSthKeyStore];
  id v20 = [v19 signatureVerifier];

  [v12 setVerifier:v20];
  sub_100066CFC((uint64_t)v119);
  if (v4)
  {

    return v3;
  }
  id v106 = (id)v3;
  id v29 = sub_10005D628();
  id v108 = v12;
  id v110 = v20;
  uint64_t v3 = (uint64_t)v29;
  sub_10006EFE8((uint64_t)&v111);
  if (*((void *)&v112 + 1))
  {
    sub_10003863C((uint64_t)&v111, (uint64_t)v115);
    sub_100028C8C((uint64_t)&v111, &qword_1001578F8);
    uint64_t v37 = v116;
    uint64_t v38 = v117;
    sub_10002BCF8(v115, v116);
    ((void (*)(_OWORD *, uint64_t, uint64_t, void (**)(void, void, void, void, void, void)))v38[6])(v119, v3, v37, v38);
    sub_100028A4C((uint64_t)v115);
    id v20 = v110;
  }
  else
  {
    sub_100028C8C((uint64_t)&v111, &qword_1001578F8);
  }
  if (v3 != 1)
  {
    sub_10002BE4C((uint64_t)v119);
    id v47 = v106;
LABEL_30:

    return v3;
  }
  if (qword_10015F960 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = sub_1000294A8(v39, (uint64_t)qword_100162370);
  sub_10002BE90((uint64_t)v119);
  sub_10002BE90((uint64_t)v119);
  uint64_t v109 = v40;
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v107 = v44;
    id v104 = v43;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v103 = v43 + 4;
    long long v111 = v119[0];
    long long v112 = v119[1];
    long long v113 = v119[2];
    uint64_t v114 = v120;
    v115[0] = v44;
    sub_10002BF28();
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v111 = sub_1000262AC(v45, v46, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002BE4C((uint64_t)v119);
    sub_10002BE4C((uint64_t)v119);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Verified signature for %s", v104, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10002BE4C((uint64_t)v119);
    sub_10002BE4C((uint64_t)v119);
  }

  id v48 = [v8 appSthKeyStore];
  id v49 = [objc_allocWithZone((Class)TransparencyLogEntryVerifier) initWithTrustedKeyStore:v48];

  id v50 = v106;
  [v106 setVerifier:v49];

  uint64_t v3 = (uint64_t)sub_10005D628();
  unsigned int v51 = [v50 nodeType];
  id v52 = v108;
  if (v51 != 1)
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v72 = 7;
    *(unsigned char *)(v72 + 4) = 1;
    swift_willThrow();
    sub_10002BE4C((uint64_t)v119);

LABEL_47:
    return v3;
  }
  id v53 = [v50 nodeBytes];
  if (!v53) {
    goto LABEL_79;
  }
  uint64_t v54 = v53;
  sub_100038600(0, &qword_100158930);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v58 = v57;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10002BD3C(v56, v58);
  *(void *)&long long v111 = 0;
  id v60 = [ObjCClassFromMetadata parseFromData:isa error:&v111];

  id v61 = (void (**)(void, void, void, void, void, void))v60;
  unint64_t v62 = (void *)v111;
  if (!v61)
  {
    id v73 = (id)v111;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10002BE4C((uint64_t)v119);

    goto LABEL_47;
  }
  uint64_t v63 = v105;
  if (v105 >> 62) {
    goto LABEL_68;
  }
  uint64_t v64 = *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v65 = (id)v111;
  swift_bridgeObjectRetain();
  unint64_t v101 = v61;
  if (!v64)
  {
LABEL_69:
    uint64_t v81 = 0x206E776F6E6B6E75;
    swift_bridgeObjectRelease();
    id v80 = 0;
    unint64_t v83 = 0xEB00000000686C73;
LABEL_70:
    swift_bridgeObjectRetain();
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    uint64_t v3 = v91;
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v109 = v81;
      uint64_t v92 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      id v102 = v80;
      *(void *)&long long v111 = v93;
      *(_DWORD *)uint64_t v92 = 136446210;
      swift_bridgeObjectRetain();
      v115[0] = sub_1000262AC(v109, v83, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v3, "Failed to verify inclusion proof for %{public}s", v92, 0xCu);
      swift_arrayDestroy();
      id v80 = v102;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v94 = v110;
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v95 = 5;
    *(unsigned char *)(v95 + 4) = 1;
    swift_willThrow();

    sub_10002BE4C((uint64_t)v119);
    return v3;
  }
  while (1)
  {
    unint64_t v66 = v64 - 1;
    if (__OFSUB__(v64, 1))
    {
      __break(1u);
LABEL_75:
      id v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_42;
    }
    uint64_t v103 = (uint8_t *)v64;
    id v104 = (uint8_t *)(v63 & 0xC000000000000001);
    if ((v63 & 0xC000000000000001) != 0) {
      goto LABEL_75;
    }
    if ((v66 & 0x8000000000000000) != 0) {
      break;
    }
    if (v66 >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_77;
    }
    id v67 = *(id *)(v63 + 8 * v66 + 32);
LABEL_42:
    unint64_t v68 = v67;
    swift_bridgeObjectRelease();
    id v102 = v68;
    if (([v61 hasObjectMapHead] & 1) == 0) {
      goto LABEL_58;
    }
    id v69 = [v102 logHead];
    if (v69)
    {
      id v70 = v69;
      uint64_t v99 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v100 = v71;
    }
    else
    {
      uint64_t v99 = 0;
      unint64_t v100 = 0xF000000000000000;
    }
    id v74 = [v61 objectMapHead];
    if (!v74) {
      goto LABEL_80;
    }
    unint64_t v75 = v74;
    id v76 = [v74 object];

    if (v76)
    {
      uint64_t v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v78 = v77;

      unint64_t v79 = v100;
      if (v100 >> 60 == 15)
      {
        if (v78 >> 60 != 15) {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v107 = v5;
        unint64_t v105 = v63;
        if (v78 >> 60 == 15) {
          goto LABEL_57;
        }
        uint64_t v84 = v99;
        unint64_t v85 = v100;
        sub_10005B298(v99, v100);
        uint64_t v86 = v98;
        int v97 = sub_10002C1CC(v84, v85, v98, v78);
        sub_100030D78(v86, v78);
        sub_100030D78(v84, v85);
        sub_100030D78(v84, v85);
        uint64_t v63 = v105;
        uint64_t v5 = v107;
        if ((v97 & 1) == 0) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      unint64_t v79 = v100;
      if (v100 >> 60 != 15)
      {
        uint64_t v98 = 0;
        unint64_t v78 = 0xF000000000000000;
LABEL_57:
        sub_100030D78(v99, v79);
        sub_100030D78(v98, v78);
LABEL_58:
        id v80 = v102;
        sub_100066CFC((uint64_t)v121);

        uint64_t v81 = KTSWDB.STHKey.description.getter();
        unint64_t v83 = v82;
        sub_10002BE4C((uint64_t)v121);
        goto LABEL_70;
      }
    }
    id v61 = (void (**)(void, void, void, void, void, void))v63;
    swift_bridgeObjectRetain();
    uint64_t v63 = 4;
    while (1)
    {
      id v87 = v104 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : v61[v63];
      unint64_t v62 = v87;
      uint64_t v88 = v63 - 3;
      if (__OFADD__(v63 - 4, 1)) {
        break;
      }
      *(void *)&long long v111 = v87;
      sub_100074764((uint64_t)&v111, v5, v3);

      ++v63;
      if ((uint8_t *)v88 == v103)
      {
        swift_bridgeObjectRelease();
        sub_10002BE4C((uint64_t)v119);

        id v8 = v101;
        id v47 = v102;
        id v20 = v102;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_68:
    id v89 = v62;
    swift_bridgeObjectRetain();
    uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v101 = v61;
    if (!v64) {
      goto LABEL_69;
    }
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  uint64_t result = sub_100030D78(v99, v100);
  __break(1u);
  return result;
}

uint64_t sub_100072658(id a1)
{
  uint64_t v4 = v2;
  unint64_t v5 = v1;
  uint64_t v7 = MilestoneRootsResponse.keyBag.getter();
  if (!v7)
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v19 = 0;
    *(unsigned char *)(v19 + 4) = 1;
    swift_willThrow();
    return (uint64_t)a1;
  }
  id v8 = (id)v7;
  if (![(id)v1 hasTltInclusionProof]
    || (id v9 = [(id)v1 tltInclusionProof]) == 0)
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 3;
    *(unsigned char *)(v18 + 4) = 1;
    swift_willThrow();

    return (uint64_t)a1;
  }
  id v10 = v9;
  id v11 = [v9 slh];
  if (!v11)
  {
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  id v12 = v11;
  sub_100038600(0, (unint64_t *)&qword_1001575C8);
  id v13 = [(id)swift_getObjCClassFromMetadata() signedTypeWithObject:v12];

  sub_10006EFE8((uint64_t)&v106);
  if (*((void *)&v107 + 1))
  {
    unint64_t v102 = v5;
    double v14 = v10;
    id v104 = v8;
    sub_10003863C((uint64_t)&v106, (uint64_t)v110);
    sub_100028C8C((uint64_t)&v106, &qword_1001578F8);
    uint64_t v15 = v111;
    uint64_t v16 = v112;
    uint64_t v17 = sub_10002BCF8(v110, v111);
    sub_100066CFC((uint64_t)v113);
    uint64_t v105 = v2;
    if (v2)
    {

      sub_100028A4C((uint64_t)v110);
      return (uint64_t)a1;
    }
    uint64_t v95 = v17;
    uint64_t v96 = v16;
    id v97 = a1;
    id v103 = v13;
    id v101 = v14;
    uint64_t v23 = (uint8_t *)type metadata accessor for Date();
    unint64_t v100 = &v94;
    uint64_t v24 = *((void *)v23 - 1);
    __chkstk_darwin(v23);
    uint64_t v26 = (uint8_t *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v27 = sub_100020378((uint64_t *)&unk_1001580E0);
    __chkstk_darwin(v27 - 8);
    id v29 = (char *)&v94 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v5 = v102;
    MilestoneRootsResponse.receiptTime.getter((uint64_t)v29);
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint8_t *))(v24 + 48))(v29, 1, v23);
    uint64_t v98 = v26;
    uint64_t v99 = v23;
    uint64_t v94 = v15;
    if (v30 == 1)
    {
      static Date.now.getter();
      sub_100028C8C((uint64_t)v29, (uint64_t *)&unk_1001580E0);
    }
    else
    {
      (*(void (**)(uint8_t *, char *, uint8_t *))(v24 + 32))(v26, v29, v23);
    }
    id v32 = v103;
    id v33 = [v103 data:v94, v95];
    uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    uint64_t v37 = v105;
    unint64_t v38 = sub_100066ED4();
    id v8 = v104;
    if (v37)
    {
      uint64_t v39 = *(void (**)(uint8_t *, uint8_t *))(v24 + 8);
      a1 = (id)(v24 + 8);
      v39(v98, v99);
      sub_10002BD3C(v34, v36);
      sub_10002BE4C((uint64_t)v113);

LABEL_21:
      sub_100028A4C((uint64_t)v110);
      return (uint64_t)a1;
    }
    uint64_t v40 = (uint64_t)v98;
    (*(void (**)(unsigned char *, uint8_t *, uint64_t, unint64_t, unint64_t, uint64_t))(v96 + 24))(v113, v98, v34, v36, v38, v94);
    uint64_t v4 = 0;
    (*(void (**)(uint64_t, uint8_t *))(v24 + 8))(v40, v99);
    sub_10002BD3C(v34, v36);
    sub_10002BE4C((uint64_t)v113);
    sub_100028A4C((uint64_t)v110);
    id v10 = v101;
    id v13 = v103;
    a1 = v97;
  }
  else
  {
    sub_100028C8C((uint64_t)&v106, &qword_1001578F8);
  }
  id v21 = [v8 tltKeyStore];
  id v22 = [v21 signatureVerifier];

  [v13 setVerifier:v22];
  sub_100066CFC((uint64_t)v114);
  if (v4)
  {

    return (uint64_t)a1;
  }
  id v97 = a1;
  id v103 = v13;
  id v104 = v22;
  id v31 = sub_10005D628();
  id v101 = v10;
  a1 = v31;
  if (qword_10015F960 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  uint64_t v42 = sub_1000294A8(v41, (uint64_t)qword_100162370);
  sub_10002BE90((uint64_t)v114);
  sub_10002BE90((uint64_t)v114);
  unint64_t v100 = (void *)v42;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    uint64_t v105 = v46;
    *(_DWORD *)uint64_t v45 = 136315138;
    uint64_t v98 = v45 + 4;
    uint64_t v99 = v45;
    long long v106 = v114[0];
    long long v107 = v114[1];
    long long v108 = v114[2];
    uint64_t v109 = v115;
    v110[0] = v46;
    sub_10002BF28();
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v106 = sub_1000262AC(v47, v48, v110);
    id v10 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002BE4C((uint64_t)v114);
    sub_10002BE4C((uint64_t)v114);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Verified signature for %s", v99, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10002BE4C((uint64_t)v114);
    sub_10002BE4C((uint64_t)v114);
  }

  id v49 = &selRef_code;
  sub_10006EFE8((uint64_t)&v106);
  if (*((void *)&v107 + 1))
  {
    sub_10003863C((uint64_t)&v106, (uint64_t)v110);
    sub_100028C8C((uint64_t)&v106, &qword_1001578F8);
    uint64_t v50 = v111;
    uint64_t v51 = v112;
    sub_10002BCF8(v110, v111);
    (*(void (**)(_OWORD *, id, uint64_t, uint64_t))(v51 + 48))(v114, a1, v50, v51);
    sub_100028A4C((uint64_t)v110);
    id v49 = &selRef_code;
  }
  else
  {
    sub_100028C8C((uint64_t)&v106, &qword_1001578F8);
  }
  sub_10006EFE8((uint64_t)&v106);
  if (*((void *)&v107 + 1))
  {
    sub_10003863C((uint64_t)&v106, (uint64_t)v110);
    sub_100028C8C((uint64_t)&v106, &qword_1001578F8);
    uint64_t v52 = v111;
    uint64_t v53 = v112;
    sub_10002BCF8(v110, v111);
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v53 + 40))(v114, 1, v52, v53);
    sub_100028A4C((uint64_t)v110);
    uint64_t v54 = &selRef_sortedArrayUsingSelector_;
    id v49 = &selRef_code;
  }
  else
  {
    sub_100028C8C((uint64_t)&v106, &qword_1001578F8);
    uint64_t v54 = &selRef_sortedArrayUsingSelector_;
  }
  if (a1 != (id)1)
  {
    sub_10002BE4C((uint64_t)v114);

    return (uint64_t)a1;
  }
  id v55 = [v8 v54[30]];
  id v3 = [objc_allocWithZone((Class)TransparencyLogEntryVerifier) initWithTrustedKeyStore:v55];

  [v10 v49[488] v3];
  unint64_t v1 = (unint64_t)v10;
  a1 = sub_10005D628();
  if ([v10 nodeType] != 3)
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v65 = 8;
    *(unsigned char *)(v65 + 4) = 1;
    swift_willThrow();
    sub_10002BE4C((uint64_t)v114);

LABEL_41:
    id v66 = v103;
LABEL_42:

    return (uint64_t)a1;
  }
  id v56 = [v10 nodeBytes];
  if (!v56) {
    goto LABEL_71;
  }
  unint64_t v57 = v56;
  sub_100038600(0, &qword_100158928);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v61 = v60;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10002BD3C(v59, v61);
  *(void *)&long long v106 = 0;
  uint64_t v63 = (uint8_t *)[ObjCClassFromMetadata parseFromData:isa error:&v106];

  if (!v63)
  {
    id v67 = (id)v106;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10002BE4C((uint64_t)v114);

    id v66 = v101;
    goto LABEL_42;
  }
  id v64 = (id)v106;
  sub_100066CFC((uint64_t)&v116);
  uint64_t v99 = v63;
  if (![(uint8_t *)v63 hasPatHead]) {
    goto LABEL_57;
  }
  id v68 = [v97 logHead];
  if (v68)
  {
    id v69 = v68;
    id v3 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v1 = v70;
  }
  else
  {
    id v3 = 0;
    unint64_t v1 = 0xF000000000000000;
  }
  id v71 = [(uint8_t *)v99 patHead];
  if (v71)
  {
    uint64_t v72 = v71;
    id v73 = [v71 object];

    if (v73)
    {
      uint64_t v98 = (uint8_t *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v75 = v74;

      unint64_t v76 = v1;
      if (v1 >> 60 == 15)
      {
        if (v75 >> 60 == 15) {
          goto LABEL_62;
        }
        goto LABEL_56;
      }
      if (v75 >> 60 == 15)
      {
LABEL_56:
        sub_100030D78((uint64_t)v3, v76);
        sub_100030D78((uint64_t)v98, v75);
LABEL_57:
        sub_10002BE90((uint64_t)&v116);
        sub_10002BE90((uint64_t)&v116);
        unint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          unint64_t v79 = (uint8_t *)swift_slowAlloc();
          uint64_t v80 = swift_slowAlloc();
          *(_DWORD *)unint64_t v79 = 136446210;
          a1 = v79 + 4;
          long long v106 = v116;
          long long v107 = v117;
          long long v108 = v118;
          uint64_t v109 = v119;
          v110[0] = v80;
          sub_10002BF28();
          uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v106 = sub_1000262AC(v81, v82, v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10002BE4C((uint64_t)&v116);
          sub_10002BE4C((uint64_t)&v116);
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "Failed to verify inclusion proof for %{public}s", v79, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10002BE4C((uint64_t)&v116);
          sub_10002BE4C((uint64_t)&v116);
        }

        sub_1000746AC();
        swift_allocError();
        *(_DWORD *)uint64_t v83 = 6;
        *(unsigned char *)(v83 + 4) = 1;
        swift_willThrow();
        sub_10002BE4C((uint64_t)&v116);

        sub_10002BE4C((uint64_t)v114);
        goto LABEL_41;
      }
      sub_10005B298((uint64_t)v3, v1);
      uint64_t v84 = (uint64_t)v98;
      LODWORD(v97) = sub_10002C1CC((uint64_t)v3, v1, (uint64_t)v98, v75);
      sub_100030D78(v84, v75);
      sub_100030D78((uint64_t)v3, v1);
      sub_100030D78((uint64_t)v3, v1);
      if ((v97 & 1) == 0) {
        goto LABEL_57;
      }
    }
    else if (v1 >> 60 != 15)
    {
      unint64_t v76 = v1;
      uint64_t v98 = 0;
      unint64_t v75 = 0xF000000000000000;
      goto LABEL_56;
    }
LABEL_62:
    unint64_t v102 = v5;
    uint64_t v105 = 0;
    sub_10002BE90((uint64_t)&v116);
    sub_10002BE90((uint64_t)&v116);
    unint64_t v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v85, v86))
    {
      id v87 = (uint8_t *)swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      *(_DWORD *)id v87 = 136315138;
      unint64_t v100 = v87 + 4;
      long long v106 = v116;
      long long v107 = v117;
      long long v108 = v118;
      uint64_t v109 = v119;
      v110[0] = v88;
      sub_10002BF28();
      uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v106 = sub_1000262AC(v89, v90, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BE4C((uint64_t)&v116);
      sub_10002BE4C((uint64_t)&v116);
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Verified inclusion for %s", v87, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10002BE4C((uint64_t)&v116);
      sub_10002BE4C((uint64_t)&v116);
    }

    sub_10006EFE8((uint64_t)&v106);
    if (!*((void *)&v107 + 1))
    {
      sub_10002BE4C((uint64_t)v114);
      sub_10002BE4C((uint64_t)&v116);

      sub_100028C8C((uint64_t)&v106, &qword_1001578F8);
      return (uint64_t)a1;
    }
    sub_10003863C((uint64_t)&v106, (uint64_t)v110);
    sub_100028C8C((uint64_t)&v106, &qword_1001578F8);
    uint64_t v91 = v111;
    uint64_t v92 = v112;
    sub_10002BCF8(v110, v111);
    uint64_t v93 = v105;
    (*(void (**)(long long *, id, uint64_t, uint64_t))(v92 + 40))(&v116, a1, v91, v92);
    if (!v93)
    {
      sub_10002BE4C((uint64_t)v114);
      sub_10002BE4C((uint64_t)&v116);

      sub_100028A4C((uint64_t)v110);
      return (uint64_t)a1;
    }
    sub_10002BE4C((uint64_t)v114);
    sub_10002BE4C((uint64_t)&v116);

    goto LABEL_21;
  }
LABEL_72:
  uint64_t result = sub_100030D78((uint64_t)v3, v1);
  __break(1u);
  return result;
}

void MilestoneRootsResponse.verify()()
{
  unint64_t v1 = v0;
  sub_100073AEC(v1, &v3);
}

void sub_100073AEC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if ([a1 status] != 1 && objc_msgSend(a1, "status") != 7)
  {
    unsigned int v16 = [a1 status];
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v17 = v16;
    *(unsigned char *)(v17 + 4) = 0;
LABEL_21:
    swift_willThrow();
    return;
  }
  if ([a1 status] == 7)
  {
    if (qword_10015F960 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_1000294A8(v5, (uint64_t)qword_100162370);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Newer milestone not found", v8, 2u);
      swift_slowDealloc();
    }

    *a2 = 1;
    return;
  }
  if (![a1 hasStartSlh])
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 1;
LABEL_20:
    *(unsigned char *)(v18 + 4) = 1;
    goto LABEL_21;
  }
  if (![a1 hasPatInclusionProof]
    || ![a1 hasTltInclusionProof])
  {
    sub_1000746AC();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 3;
    goto LABEL_20;
  }
  uint64_t v9 = sub_10007070C();
  if (v2)
  {
    if (qword_10015F960 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_1000294A8(v11, (uint64_t)qword_100162370);
    swift_errorRetain();
    swift_errorRetain();
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      double v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)double v14 = 138412290;
      swift_errorRetain();
      uint64_t v52 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v15 = v52;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to verify milestones: %@", v14, 0xCu);
      sub_100020378(&qword_1001590C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    goto LABEL_21;
  }
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  if (v9 == 1)
  {
    unint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v26 = sub_1000712B8(v21);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    if (v26 == 1)
    {
      id v29 = v28;
      uint64_t v50 = sub_100072658(v29);
      id v51 = v29;

      uint64_t v34 = type metadata accessor for Date();
      v49[1] = v49;
      uint64_t v35 = *(void *)(v34 - 8);
      __chkstk_darwin(v34);
      uint64_t v37 = (char *)v49 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v38 = sub_100020378((uint64_t *)&unk_1001580E0);
      __chkstk_darwin(v38 - 8);
      uint64_t v40 = (char *)v49 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
      MilestoneRootsResponse.receiptTime.getter((uint64_t)v40);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v40, 1, v34) == 1)
      {
        static Date.now.getter();
        sub_100028C8C((uint64_t)v40, (uint64_t *)&unk_1001580E0);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v37, v40, v34);
      }
      if ((v20 & 0xC000000000000001) != 0)
      {
        id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          swift_once();
          uint64_t v43 = type metadata accessor for Logger();
          sub_1000294A8(v43, (uint64_t)qword_100162370);
          swift_errorRetain();
          swift_errorRetain();
          os_log_type_t v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v44, v45))
          {
            uint64_t v46 = (uint8_t *)swift_slowAlloc();
            uint64_t v47 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v46 = 138412290;
            swift_errorRetain();
            uint64_t v48 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v52 = v48;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v47 = v48;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "Failed to GC milestones: %@", v46, 0xCu);
            sub_100020378(&qword_1001590C0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          goto LABEL_48;
        }
        id v41 = *(id *)(v20 + 32);
      }
      uint64_t v42 = v41;
      swift_bridgeObjectRelease();
      sub_10006FA08((uint64_t)v37, v42);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);

LABEL_48:
      *a2 = v50;
      return;
    }
    swift_bridgeObjectRelease();
    if (qword_10015F960 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_1000294A8(v30, (uint64_t)qword_100162370);
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to verify TLT inclusion", v33, 2u);
      swift_slowDealloc();
    }

    *a2 = v26;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_10015F960 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000294A8(v22, (uint64_t)qword_100162370);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to verify milestones", v25, 2u);
      swift_slowDealloc();
    }

    *a2 = v19;
  }
}

unint64_t sub_1000746AC()
{
  unint64_t result = qword_100158A10;
  if (!qword_100158A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158A10);
  }
  return result;
}

ValueMetadata *type metadata accessor for MilestoneRootsResponseError()
{
  return &type metadata for MilestoneRootsResponseError;
}

unint64_t sub_100074710()
{
  unint64_t result = qword_100158A18;
  if (!qword_100158A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158A18);
  }
  return result;
}

void sub_100074764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100066CFC((uint64_t)v22);
  if (!v3)
  {
    if (qword_10015F960 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_1000294A8(v5, (uint64_t)qword_100162370);
    sub_10002BE90((uint64_t)v22);
    sub_10002BE90((uint64_t)v22);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v24 = a3;
      uint64_t v9 = (uint8_t *)v8;
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      v15[1] = *((void *)&v22[0] + 1);
      long long v16 = v22[1];
      long long v17 = v22[2];
      uint64_t v18 = v23;
      v19[0] = v10;
      sub_10002BF28();
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      v15[0] = sub_1000262AC(v11, v12, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BE4C((uint64_t)v22);
      sub_10002BE4C((uint64_t)v22);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Verified inclusion for %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v24;
      swift_slowDealloc();
    }
    else
    {
      sub_10002BE4C((uint64_t)v22);
      sub_10002BE4C((uint64_t)v22);
    }

    sub_10006EFE8((uint64_t)v15);
    if (*((void *)&v16 + 1))
    {
      sub_10003863C((uint64_t)v15, (uint64_t)v19);
      sub_100028C8C((uint64_t)v15, &qword_1001578F8);
      uint64_t v13 = v20;
      uint64_t v14 = v21;
      sub_10002BCF8(v19, v20);
      (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v14 + 40))(v22, a3, v13, v14);
      sub_10002BE4C((uint64_t)v22);
      sub_100028A4C((uint64_t)v19);
    }
    else
    {
      sub_10002BE4C((uint64_t)v22);
      sub_100028C8C((uint64_t)v15, &qword_1001578F8);
    }
  }
}

void *sub_100074A00()
{
  return &unk_100158A20;
}

uint64_t sub_100074A0C()
{
  return sub_10005DC04(&qword_100158A20);
}

uint64_t sub_100074A1C(uint64_t a1, uint64_t a2)
{
  return sub_10005DC68(a1, a2, &qword_100158A20, &off_100158A28);
}

uint64_t (*sub_100074A2C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100074A84(uint64_t a1, unint64_t a2)
{
  if (a2 > 2) {
    return 3;
  }
  else {
    return qword_10010CF10[a2];
  }
}

unint64_t sub_100074AA4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    sub_100020378(&qword_100158880);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10010B120;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v7;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = a1;
    *(void *)(inited + 56) = a2;
    swift_bridgeObjectRetain();
    return sub_10006234C(inited);
  }
  else
  {
    return sub_10006234C((uint64_t)_swiftEmptyArrayStorage);
  }
}

unint64_t sub_100074B50(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100020378(&qword_100158D00);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100029208(v6, (uint64_t)v15, &qword_100158D08);
    unint64_t result = sub_10007E68C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000383B0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100074C94()
{
  return Error<>._domain.getter();
}

uint64_t sub_100074CC4()
{
  return Error<>._code.getter();
}

uint64_t sub_100074CF4(uint64_t a1, uint64_t a2)
{
  return sub_10007E5C0(a1, a2, &qword_100158A20);
}

uint64_t sub_100074D04()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 > 2) {
    return 3;
  }
  else {
    return qword_10010CF10[v1];
  }
}

unint64_t sub_100074D28()
{
  unint64_t v1 = v0[1];
  if (v1 >= 3)
  {
    uint64_t v3 = *v0;
    sub_100020378(&qword_100158880);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10010B120;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v5;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v3;
    *(void *)(inited + 56) = v1;
    swift_bridgeObjectRetain();
    return sub_10006234C(inited);
  }
  else
  {
    return sub_10006234C((uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100074DE8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_100162388);
  sub_1000294A8(v0, (uint64_t)qword_100162388);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100074E6C()
{
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_100162388);
}

uint64_t sub_100074ED0@<X0>(uint64_t a1@<X8>)
{
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162388);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_100074F78()
{
  return swift_retain();
}

uint64_t sub_100074F88()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_100074FBC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100074FF8()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid);
}

id sub_100075008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v13 = (char *)objc_allocWithZone(v6);
  *(void *)&v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine] = a1;
  uint64_t v14 = &v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_daemon];
  *(void *)uint64_t v14 = a2;
  *((void *)v14 + 1) = a3;
  uint64_t v15 = &v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
  *(void *)uint64_t v15 = a4;
  *((void *)v15 + 1) = a5;
  *(_DWORD *)&v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid] = a6;
  v17.receiver = v13;
  v17.super_class = v6;
  return [super init];
}

id sub_1000750B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine] = a1;
  uint64_t v14 = &v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_daemon];
  *(void *)uint64_t v14 = a2;
  *((void *)v14 + 1) = a3;
  uint64_t v15 = &v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
  *(void *)uint64_t v15 = a4;
  *((void *)v15 + 1) = a5;
  *(_DWORD *)&v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid] = a6;
  v17.receiver = v6;
  v17.super_class = ObjectType;
  return [super init];
}

uint64_t sub_100075158(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100075234;
  return v6(a1);
}

uint64_t sub_100075234()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100075368, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100075368()
{
  uint64_t v1 = self;
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v1 cleanseErrorForXPC:v2];

  if (!v3)
  {
    v0[4] = v0[6];
    v0[2] = 0;
    v0[3] = 0xE000000000000000;
    sub_100020378(&qword_1001570C0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    sub_100075498();
    swift_allocError();
    *uint64_t v6 = v4;
    v6[1] = v5;
  }
  swift_willThrow();
  swift_errorRelease();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

unint64_t sub_100075498()
{
  unint64_t result = qword_100158A68;
  if (!qword_100158A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100158A68);
  }
  return result;
}

uint64_t sub_1000754EC()
{
  *(void *)(v1 + 48) = v0;
  return _swift_task_switch(sub_10007550C, 0, 0);
}

uint64_t sub_10007550C()
{
  objc_super v17 = v0;
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000294A8(v2, (uint64_t)qword_100162388);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (char *)v0[6];
  if (v6)
  {
    char v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)char v8 = 136446210;
    uint64_t v10 = *(void *)&v7[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
    unint64_t v9 = *(void *)&v7[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName + 8];
    swift_bridgeObjectRetain();
    v0[5] = sub_1000262AC(v10, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Refreshing milestones: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  long long v11 = (char *)v0[6];
  uint64_t v15 = (uint64_t (*)(void))(*(void *)(**(void **)&v11[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine]
                                      + 160)
                          + **(int **)(**(void **)&v11[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine]
                                     + 160));
  uint64_t v12 = v11;
  BOOL v13 = (void *)swift_task_alloc();
  v0[7] = v13;
  void *v13 = v0;
  v13[1] = sub_1000757AC;
  return v15();
}

uint64_t sub_1000757AC()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100075924;
  }
  else {
    uint64_t v2 = sub_1000758C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000758C0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100075924()
{
  uint64_t v1 = self;
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v1 cleanseErrorForXPC:v2];

  if (!v3)
  {
    v0[4] = v0[8];
    v0[2] = 0;
    v0[3] = 0xE000000000000000;
    sub_100020378(&qword_1001570C0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    sub_100075498();
    swift_allocError();
    *BOOL v6 = v4;
    v6[1] = v5;
  }
  uint64_t v7 = (void *)v0[6];
  swift_willThrow();
  swift_errorRelease();

  char v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100075BCC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007FCBC;
  void v5[6] = v4;
  return _swift_task_switch(sub_10007550C, 0, 0);
}

uint64_t sub_100075C90()
{
  *(void *)(v1 + 40) = v0;
  return _swift_task_switch(sub_100075CB0, 0, 0);
}

uint64_t sub_100075CB0()
{
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000294A8(v1, (uint64_t)qword_100162388);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Verifying PAT consistency", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(char **)(v0 + 40);

  unint64_t v9 = (uint64_t (*)(void))(*(void *)(**(void **)&v5[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine]
                                     + 168)
                         + **(int **)(**(void **)&v5[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine]
                                    + 168));
  BOOL v6 = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  void *v7 = v0;
  v7[1] = sub_100075E78;
  return v9();
}

uint64_t sub_100075E78()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10007FCC4;
  }
  else {
    uint64_t v2 = sub_10007FCC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000760F4(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007FCBC;
  v5[5] = v4;
  return _swift_task_switch(sub_100075CB0, 0, 0);
}

uint64_t sub_1000761B8()
{
  *(void *)(v1 + 40) = v0;
  return _swift_task_switch(sub_1000761D8, 0, 0);
}

uint64_t sub_1000761D8()
{
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000294A8(v1, (uint64_t)qword_100162388);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Public keybag refresh", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(char **)(v0 + 40);

  unint64_t v9 = (uint64_t (*)(void))(*(void *)(**(void **)&v5[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine]
                                     + 176)
                         + **(int **)(**(void **)&v5[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine]
                                    + 176));
  BOOL v6 = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  void *v7 = v0;
  v7[1] = sub_1000763A0;
  return v9();
}

uint64_t sub_1000763A0()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100076518;
  }
  else {
    uint64_t v2 = sub_1000764B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000764B4()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100076518()
{
  uint64_t v1 = self;
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v1 cleanseErrorForXPC:v2];

  if (!v3)
  {
    v0[4] = v0[7];
    v0[2] = 0;
    v0[3] = 0xE000000000000000;
    sub_100020378(&qword_1001570C0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    sub_100075498();
    swift_allocError();
    *BOOL v6 = v4;
    v6[1] = v5;
  }
  uint64_t v7 = (void *)v0[5];
  swift_willThrow();
  swift_errorRelease();

  char v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000767C0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007FCBC;
  v5[5] = v4;
  return _swift_task_switch(sub_1000761D8, 0, 0);
}

void sub_100076884()
{
  algn_1001623A8[5] = 0;
  *(_WORD *)&algn_1001623A8[6] = -5120;
}

uint64_t *sub_1000768B0()
{
  if (qword_10015FB78 != -1) {
    swift_once();
  }
  return &qword_1001623A0;
}

uint64_t sub_1000768FC()
{
  return sub_100076A6C(&qword_10015FB78, &qword_1001623A0);
}

void sub_100076924()
{
  *(_WORD *)&algn_1001623B8[6] = -4864;
}

uint64_t *sub_100076954()
{
  if (qword_10015FB80 != -1) {
    swift_once();
  }
  return &qword_1001623B0;
}

uint64_t sub_1000769A0()
{
  return sub_100076A6C(&qword_10015FB80, &qword_1001623B0);
}

void sub_1000769C8()
{
  *(_WORD *)&algn_1001623C8[6] = -4864;
}

uint64_t *sub_1000769F8()
{
  if (qword_10015FB88 != -1) {
    swift_once();
  }
  return &qword_1001623C0;
}

uint64_t sub_100076A44()
{
  return sub_100076A6C(qword_10015FB88, &qword_1001623C0);
}

uint64_t sub_100076A6C(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_100076AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  void v5[6] = a1;
  v5[11] = swift_getObjectType();
  return _swift_task_switch(sub_100076B3C, 0, 0);
}

uint64_t sub_100076B3C()
{
  unint64_t v1 = *(void *)(v0 + 72);
  unint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  id v5 = *(id *)(v0 + 80);
  sub_10002BD94(v4, v3);
  sub_10002BD94(v2, v1);
  BOOL v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v6;
  *BOOL v6 = v0;
  v6[1] = sub_100076C18;
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v11 = *(void *)(v0 + 48);
  return sub_100076F2C(v0 + 32, v7, v11, v9, v10, v8);
}

uint64_t sub_100076C18()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100076DBC;
  }
  else {
    uint64_t v2 = sub_100076D2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100076D2C()
{
  unint64_t v1 = *(void *)(v0 + 72);
  unint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);

  sub_10002BD3C(v4, v3);
  sub_10002BD3C(v2, v1);
  uint64_t v5 = *(void *)(v0 + 32);
  BOOL v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v5);
}

uint64_t sub_100076DBC()
{
  unint64_t v1 = self;
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v1 cleanseErrorForXPC:v2];

  if (!v3)
  {
    v0[5] = v0[13];
    v0[2] = 0;
    v0[3] = 0xE000000000000000;
    sub_100020378(&qword_1001570C0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    sub_100075498();
    swift_allocError();
    *BOOL v6 = v4;
    v6[1] = v5;
  }
  unint64_t v7 = v0[9];
  uint64_t v8 = (void *)v0[10];
  unint64_t v10 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v11 = v0[6];
  swift_willThrow();
  swift_errorRelease();

  sub_10002BD3C(v11, v10);
  sub_10002BD3C(v9, v7);
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100076F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[66] = a6;
  v6[65] = a5;
  v6[63] = a3;
  v6[64] = a4;
  v6[61] = a1;
  v6[62] = a2;
  uint64_t v7 = type metadata accessor for SuspendingClock();
  v6[67] = v7;
  v6[68] = *(void *)(v7 - 8);
  v6[69] = swift_task_alloc();
  sub_100020378(&qword_100157030);
  v6[70] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SuspendingClock.Instant();
  v6[71] = v8;
  v6[72] = *(void *)(v8 - 8);
  v6[73] = swift_task_alloc();
  v6[74] = swift_task_alloc();
  return _swift_task_switch(sub_100077094, 0, 0);
}

uint64_t sub_100077094()
{
  uint64_t v1 = *(void *)(v0 + 496);
  static SuspendingClock.now.getter();
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine);
  *(void *)(v0 + 600) = v2;
  return _swift_task_switch(sub_10007710C, v2, 0);
}

uint64_t sub_10007710C()
{
  sub_10003863C(*(void *)(v0 + 600) + 112, v0 + 264);
  return _swift_task_switch(sub_10007717C, 0, 0);
}

uint64_t sub_10007717C()
{
  uint64_t v86 = v0;
  uint64_t v1 = (void *)(v0 + 264);
  uint64_t v2 = (uint64_t *)(*(void *)(v0 + 496) + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName);
  uint64_t v3 = *v2;
  *(void *)(v0 + 608) = *v2;
  unint64_t v4 = v2[1];
  *(void *)(v0 + 616) = v4;
  if (v3 == 0xD00000000000001DLL && v4 == 0x80000001001126E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for SWTransparencyDaemon(0);
    if ((sub_10004356C() & 1) == 0)
    {
      sub_10007EC54();
      swift_allocError();
      *BOOL v6 = 1;
LABEL_31:
      uint64_t v73 = *(void *)(v0 + 592);
      uint64_t v74 = *(void *)(v0 + 576);
      uint64_t v75 = *(void *)(v0 + 568);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
      sub_100028A4C((uint64_t)v1);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v76 = *(uint64_t (**)(void))(v0 + 8);
      return v76();
    }
    if (qword_10015FB78 != -1) {
      swift_once();
    }
    uint64_t v5 = 0xEF50534E73666F6FLL;
    goto LABEL_15;
  }
  if (v3 == 0xD00000000000001ELL && v4 == 0x8000000100112700
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (qword_10015FB78 != -1) {
      swift_once();
    }
    uint64_t v5 = 0xEF43435073666F6FLL;
LABEL_15:
    uint64_t v7 = 0x7250796656545753;
    goto LABEL_16;
  }
  if (qword_10015FB78 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1001623A0;
  uint64_t v5 = swift_bridgeObjectRetain();
LABEL_16:
  *(void *)(v0 + 632) = v5;
  *(void *)(v0 + 624) = v7;
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void *)(v0 + 504);
  unint64_t v9 = *(void *)(v0 + 512);
  uint64_t v10 = *(void **)(v0 + 496);
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v0 + 640) = sub_1000294A8(v11, (uint64_t)qword_100162388);
  sub_10002BD94(v8, v9);
  id v12 = v10;
  sub_10002BD94(v8, v9);
  id v13 = v12;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v18 = *(void *)(v0 + 504);
  unint64_t v17 = *(void *)(v0 + 512);
  uint64_t v19 = *(void **)(v0 + 496);
  uint64_t v84 = (void *)(v0 + 264);
  if (v16)
  {
    uint64_t v20 = swift_slowAlloc();
    v85[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315394;
    sub_10002BD94(v18, v17);
    os_log_t log = v14;
    uint64_t v21 = Data.description.getter();
    unint64_t v23 = v22;
    sub_10002BD3C(v18, v17);
    *(void *)(v0 + 456) = sub_1000262AC(v21, v23, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002BD3C(v18, v17);
    sub_10002BD3C(v18, v17);
    *(_WORD *)(v20 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 432) = sub_1000262AC(v3, v4, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v15, "Verifying proofs %s for %{public}s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (void *)(v0 + 264);
    swift_slowDealloc();
  }
  else
  {
    sub_10002BD3C(v18, v17);
    sub_10002BD3C(v18, v17);
  }
  *(void *)(v0 + 248) = &type metadata for SWTFeatureFlags;
  *(void *)(v0 + 256) = sub_100049CF8();
  *(unsigned char *)(v0 + 224) = 3;
  char v24 = isFeatureEnabled(_:)();
  sub_100028A4C(v0 + 224);
  if (v24)
  {
    sub_10007EC54();
    uint64_t v25 = swift_allocError();
    unsigned char *v26 = 0;
    swift_willThrow();
    uint64_t v27 = *(void *)(v0 + 504);
    unint64_t v28 = *(void *)(v0 + 512);
    id v29 = *(void **)(v0 + 496);
    sub_10007F994();
    uint64_t v30 = sub_100062704(v27, v28);
    unint64_t v32 = v31;
    id v33 = v29;
    swift_errorRetain();
    id v34 = v33;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    uint64_t v82 = v25;
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v79 = v35;
      unint64_t v37 = *(void *)(v0 + 616);
      uint64_t v78 = *(void *)(v0 + 608);
      uint64_t v38 = *(char **)(v0 + 496);
      uint64_t v39 = swift_slowAlloc();
      unint64_t v77 = (void *)swift_slowAlloc();
      v85[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315906;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 480) = sub_1000262AC(v30, v32, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v39 + 12) = 2112;
      swift_errorRetain();
      uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 424) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v77 = v40;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v39 + 22) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 416) = sub_1000262AC(v78, v37, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 32) = 1026;
      LODWORD(v40) = *(_DWORD *)&v38[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

      *(_DWORD *)(v0 + 768) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v79, v36, "Proof verification %s failed with %@: %{public}s[%{public}d]", (uint8_t *)v39, 0x26u);
      sub_100020378(&qword_1001590C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v51 = *(void **)(v0 + 496);
      swift_bridgeObjectRelease_n();

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v52 = *(void *)(v0 + 584);
    uint64_t v53 = *(void *)(v0 + 576);
    uint64_t v81 = *(void *)(v0 + 568);
    uint64_t v54 = *(void *)(v0 + 552);
    uint64_t v55 = *(void *)(v0 + 544);
    uint64_t v56 = *(void *)(v0 + 536);
    uint64_t v57 = *(void *)(v0 + 288);
    uint64_t v58 = *(void *)(v0 + 296);
    sub_10002BCF8(v84, v57);
    uint64_t v59 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v58 + 80))(v57, v58);
    SuspendingClock.init()();
    SuspendingClock.now.getter();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    SuspendingClock.Instant.duration(to:)();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v81);
    double v60 = (double)Duration.components.getter();
    Duration.components.getter();
    id v62 = [objc_allocWithZone((Class)NSNumber) initWithDouble:(double)v61 / 1.0e18 + v60];
    if (qword_10015FB88[0] != -1) {
      swift_once();
    }
    uint64_t v63 = *(void *)(v0 + 616);
    uint64_t v64 = *(void *)(v0 + 608);
    NSString v65 = String._bridgeToObjectiveC()();
    [v59 logMetric:v62 withName:v65];

    uint64_t v66 = *(void *)(v0 + 288);
    uint64_t v67 = *(void *)(v0 + 296);
    sub_10002BCF8(v84, v66);
    id v68 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v67 + 80))(v66, v67);
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unint64_t v70 = (void *)_convertErrorToNSError(_:)();
    sub_100020378(&qword_100158CD0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10010B120;
    *(void *)(v0 + 392) = 99;
    *(void *)(v0 + 400) = 0xE100000000000000;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = v64;
    *(void *)(inited + 80) = v63;
    swift_bridgeObjectRetain();
    sub_100074B50(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v68 logResultForEvent:v69 hardFailure:1 result:v70 withAttributes:isa];

    swift_errorRetain();
    sub_10007E98C(v84, v64, v63, 0, v82);
    swift_errorRelease();
    uint64_t v1 = (void *)(v0 + 264);
    goto LABEL_31;
  }
  uint64_t v41 = *(void *)(v0 + 600);
  uint64_t v42 = *(void *)(v0 + 288);
  uint64_t v43 = *(void *)(v0 + 296);
  sub_10002BCF8(v1, v42);
  id v44 = [[*(uint64_t (**)(uint64_t, uint64_t))(v43 + 32)(v42, v43) transparencySettings];
  swift_unknownObjectRelease();
  [v44 uiBlockingNetworkTimeout];
  *(void *)(v0 + 648) = v45;
  swift_unknownObjectRelease();
  uint64_t v46 = static Duration.milliseconds(_:)();
  uint64_t v48 = v47;
  uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v41 + 128)
                                                 + **(int **)(*(void *)v41 + 128));
  id v49 = (void *)swift_task_alloc();
  *(void *)(v0 + 656) = v49;
  *id v49 = v0;
  v49[1] = sub_100077E08;
  return v83(v46, v48);
}

uint64_t sub_100077E08(char a1)
{
  *(unsigned char *)(*(void *)v1 + 772) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100077F08, 0, 0);
}

uint64_t sub_100077F08()
{
  uint64_t v22 = v0;
  if ((*(unsigned char *)(v0 + 772) & 1) == 0)
  {
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "State machine timed out getting ready, attemping to verify proofs regardless", v3, 2u);
      swift_slowDealloc();
    }
  }
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Progressing after waiting for state machine", v6, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = *(void *)(v0 + 504);
  unint64_t v7 = *(void *)(v0 + 512);

  id v9 = objc_allocWithZone((Class)ATLogProofs);
  sub_10002BD94(v8, v7);
  *(void *)(v0 + 664) = sub_100038540();
  *(void *)(v0 + 672) = 0;
  sub_10002BD3C(*(void *)(v0 + 504), *(void *)(v0 + 512));
  uint64_t v10 = *(void *)(v0 + 288);
  uint64_t v11 = *(void *)(v0 + 296);
  sub_10002BCF8((void *)(v0 + 264), v10);
  id v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
  ATLogProofs.configBag.setter(v12);
  uint64_t v13 = *(void *)(v0 + 288);
  uint64_t v14 = *(void *)(v0 + 296);
  sub_10002BCF8((void *)(v0 + 264), v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 64))(v13, v14);
  _OWORD v21[3] = type metadata accessor for KTSWDB();
  v21[4] = sub_10007F9D4();
  v21[0] = v15;
  sub_100063060((uint64_t)v21);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v17 = *(void *)(v0 + 296);
  sub_10002BCF8((void *)(v0 + 264), v16);
  uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 56))(v16, v17);
  *(void *)(v0 + 680) = v18;
  uint64_t v19 = *v18 + 160;
  *(void *)(v0 + 688) = *(void *)v19;
  *(void *)(v0 + 696) = v19 & 0xFFFFFFFFFFFFLL | 0x445F000000000000;
  return _swift_task_switch(sub_1000787FC, v18, 0);
}

uint64_t sub_1000787FC()
{
  *(void *)(v0 + 704) = (*(uint64_t (**)(void))(v0 + 688))();
  swift_release();
  return _swift_task_switch(sub_100078878, 0, 0);
}

uint64_t sub_100078878()
{
  uint64_t v24 = v0;
  ATLogProofs.keyBag.setter(*(void **)(v0 + 704));
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  sub_10002BCF8((void *)(v0 + 264), v1);
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(v1, v2);
  ATLogProofs.analytics.setter(v3);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 296);
  sub_10002BCF8((void *)(v0 + 264), v4);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 88))(v23, v4, v5);
  sub_100063BC0((uint64_t)v23);
  BOOL v6 = (void *)ATLogProofs.keyBag.getter();

  if (v6)
  {
    Swift::Bool v7 = ATLogProofs.isNewEpoch()();
    if (v8)
    {
      swift_errorRelease();
LABEL_10:
      uint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 736) = v19;
      void *v19 = v0;
      v19[1] = sub_100078D80;
      uint64_t v20 = *(void *)(v0 + 528);
      uint64_t v21 = *(void *)(v0 + 520);
      return ATLogProofs.verify(data:)(v21, v20);
    }
    if (!v7) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = ATLogProofs.keyBag.getter();
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    sub_100084EC0();
  }
  uint64_t v11 = *(void *)(v0 + 600);
  uint64_t v12 = *(void *)(v0 + 560);
  uint64_t v13 = *(void **)(v0 + 496);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = 0;
  v15[3] = 0;
  v15[4] = v13;
  id v16 = v13;
  sub_10007AA30(v12, (uint64_t)&unk_100158CE0, (uint64_t)v15);
  uint64_t v17 = swift_release();
  ATLogProofs.VerificationResult.result.getter(v17, v18);
  return _swift_task_switch(sub_100078AD4, v11, 0);
}

uint64_t sub_100078AD4()
{
  sub_10003863C(*((void *)v0 + 75) + 112, (uint64_t)(v0 + 38));
  uint64_t v1 = (void *)swift_task_alloc();
  *((void *)v0 + 89) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100078B84;
  double v2 = v0[81];
  return sub_1000B0BB4((uint64_t)(v0 + 38), 1, v2);
}

uint64_t sub_100078B84(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2 + 304;
  *(void *)(*v2 + 720) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_100028A4C(v5);
    BOOL v6 = sub_100079A44;
  }
  else
  {
    *(void *)(v4 + 728) = a1;
    sub_100028A4C(v5);
    BOOL v6 = sub_100078CBC;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100078CBC()
{
  uint64_t v1 = (void *)v0[91];
  id v2 = v1;
  ATLogProofs.keyBag.setter(v1);

  uint64_t v3 = (void *)swift_task_alloc();
  v0[92] = v3;
  void *v3 = v0;
  v3[1] = sub_100078D80;
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[65];
  return ATLogProofs.verify(data:)(v5, v4);
}

uint64_t sub_100078D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[43] = v3;
  v4[44] = a1;
  v4[45] = a2;
  v4[46] = v2;
  v4[93] = a1;
  v4[94] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10007A0DC;
  }
  else {
    uint64_t v5 = sub_100078EA0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100078EA0()
{
  uint64_t v102 = v0;
  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v3 = *(void *)(v0 + 504);
  unint64_t v2 = *(void *)(v0 + 512);
  id v4 = *(id *)(v0 + 496);
  sub_10002BD94(v3, v2);
  id v5 = v4;
  sub_10002BD94(v3, v2);
  id v6 = v5;
  uint64_t v7 = Logger.logObject.getter();
  unint64_t v100 = (void *)(v0 + 264);
  if (v1 == 1)
  {
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = *(void *)(v0 + 616);
      uint64_t v93 = *(void *)(v0 + 608);
      os_log_type_t type = v8;
      uint64_t v10 = *(void *)(v0 + 504);
      unint64_t v11 = *(void *)(v0 + 512);
      uint64_t v12 = *(char **)(v0 + 496);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      sub_10002BD94(v10, v11);
      uint64_t v14 = Data.description.getter();
      unint64_t v16 = v15;
      sub_10002BD3C(v10, v11);
      *(void *)(v0 + 464) = sub_1000262AC(v14, v16, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BD3C(v10, v11);
      sub_10002BD3C(v10, v11);
      *(_WORD *)(v13 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 472) = sub_1000262AC(v93, v9, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v13 + 22) = 1026;
      int v17 = *(_DWORD *)&v12[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

      *(_DWORD *)(v0 + 760) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v7, type, "Proofs %s valid: %{public}s[%{public}d]", (uint8_t *)v13, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 504);
      unint64_t v28 = *(void *)(v0 + 512);
      uint64_t v30 = *(void **)(v0 + 496);

      sub_10002BD3C(v29, v28);
      sub_10002BD3C(v29, v28);
    }
    uint64_t v31 = *(void *)(v0 + 584);
    uint64_t v32 = *(void *)(v0 + 576);
    uint64_t v97 = *(void *)(v0 + 568);
    uint64_t v33 = *(void *)(v0 + 552);
    uint64_t v34 = *(void *)(v0 + 544);
    uint64_t v35 = *(void *)(v0 + 536);
    uint64_t v36 = *(void *)(v0 + 288);
    uint64_t v37 = *(void *)(v0 + 296);
    sub_10002BCF8(v100, v36);
    uint64_t v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v37 + 80))(v36, v37);
    SuspendingClock.init()();
    SuspendingClock.now.getter();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    SuspendingClock.Instant.duration(to:)();
    uint64_t v39 = v97;
    uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v98(v31, v39);
    double v40 = (double)Duration.components.getter();
    Duration.components.getter();
    id v42 = [objc_allocWithZone((Class)NSNumber) initWithDouble:(double)v41 / 1.0e18 + v40];
    if (qword_10015FB80 != -1) {
      swift_once();
    }
    uint64_t v43 = *(void *)(v0 + 616);
    uint64_t v44 = *(void *)(v0 + 608);
    NSString v45 = String._bridgeToObjectiveC()();
    [v38 logMetric:v42 withName:v45];

    uint64_t v46 = *(void *)(v0 + 288);
    uint64_t v47 = *(void *)(v0 + 296);
    sub_10002BCF8(v100, v46);
    uint64_t v48 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v47 + 80))(v46, v47);
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v48 logResultForEvent:v49 hardFailure:0 result:0];

    sub_10007E98C(v100, v44, v43, 1, 0);
    uint64_t v94 = 0;
  }
  else
  {
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v18))
    {
      uint64_t v91 = *(void *)(v0 + 744);
      unint64_t v19 = *(void *)(v0 + 616);
      uint64_t v92 = *(void *)(v0 + 608);
      os_log_type_t typea = v18;
      uint64_t v20 = *(void *)(v0 + 504);
      unint64_t v21 = *(void *)(v0 + 512);
      uint64_t v22 = *(char **)(v0 + 496);
      uint64_t v23 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315906;
      sub_10002BD94(v20, v21);
      uint64_t v24 = Data.description.getter();
      unint64_t v26 = v25;
      sub_10002BD3C(v20, v21);
      *(void *)(v0 + 408) = sub_1000262AC(v24, v26, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002BD3C(v20, v21);
      sub_10002BD3C(v20, v21);
      *(_WORD *)(v23 + 12) = 2050;
      *(void *)(v0 + 440) = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 448) = sub_1000262AC(v92, v19, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v23 + 32) = 1026;
      int v27 = *(_DWORD *)&v22[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

      *(_DWORD *)(v0 + 764) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v7, typea, "Proofs %s invalid with %{public}lu: %{public}s[%{public}d]", (uint8_t *)v23, 0x26u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v51 = *(void *)(v0 + 504);
      unint64_t v50 = *(void *)(v0 + 512);
      uint64_t v52 = *(void **)(v0 + 496);

      sub_10002BD3C(v51, v50);
      sub_10002BD3C(v51, v50);
    }
    uint64_t v53 = *(void *)(v0 + 584);
    uint64_t v54 = *(void *)(v0 + 576);
    uint64_t v99 = *(void *)(v0 + 568);
    uint64_t v55 = *(void *)(v0 + 552);
    uint64_t v56 = *(void *)(v0 + 544);
    uint64_t v57 = *(void *)(v0 + 536);
    uint64_t v58 = *(void *)(v0 + 288);
    uint64_t v59 = *(void *)(v0 + 296);
    sub_10002BCF8(v100, v58);
    double v60 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 80))(v58, v59);
    SuspendingClock.init()();
    SuspendingClock.now.getter();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    SuspendingClock.Instant.duration(to:)();
    uint64_t v61 = v99;
    uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v98(v53, v61);
    double v62 = (double)Duration.components.getter();
    Duration.components.getter();
    id v64 = [objc_allocWithZone((Class)NSNumber) initWithDouble:(double)v63 / 1.0e18 + v62];
    if (qword_10015FB88[0] != -1) {
      swift_once();
    }
    uint64_t v65 = *(void *)(v0 + 616);
    uint64_t v66 = *(void *)(v0 + 608);
    NSString v67 = String._bridgeToObjectiveC()();
    [v60 logMetric:v64 withName:v67];

    uint64_t v68 = *(void *)(v0 + 288);
    uint64_t v69 = *(void *)(v0 + 296);
    sub_10002BCF8(v100, v68);
    unint64_t v70 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v69 + 80))(v68, v69);
    NSString v71 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_100075498();
    swift_allocError();
    *uint64_t v72 = xmmword_10010CC70;
    uint64_t v73 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    sub_100020378(&qword_100158CD0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10010B120;
    *(void *)(v0 + 376) = 99;
    *(void *)(v0 + 384) = 0xE100000000000000;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for String;
    uint64_t v75 = v66;
    *(void *)(inited + 72) = v66;
    *(void *)(inited + 80) = v65;
    swift_bridgeObjectRetain();
    sub_100074B50(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v94 = 1;
    [v70 logResultForEvent:v71 hardFailure:1 result:v73 withAttributes:isa];

    uint64_t v77 = swift_allocError();
    _OWORD *v78 = xmmword_10010CC70;
    sub_10007E98C(v100, v75, v65, 0, v77);
    swift_errorRelease();
  }
  unint64_t v79 = *(void **)(v0 + 664);
  uint64_t v80 = *(void *)(v0 + 592);
  uint64_t v81 = *(void *)(v0 + 568);
  uint64_t v82 = *(void **)(v0 + 488);
  uint64_t v83 = type metadata accessor for Date();
  uint64_t v84 = *(void *)(v83 - 8);
  uint64_t v85 = swift_task_alloc();
  ATLogProofs.VerificationResult.expiry.getter();
  id v86 = objc_allocWithZone((Class)SWTransparencyExpiringVerificationResult);
  Class v87 = Date._bridgeToObjectiveC()().super.isa;
  id v88 = [v86 initWithResult:v94 expiry:v87];

  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v85, v83);
  v98(v80, v81);
  swift_task_dealloc();
  *uint64_t v82 = v88;
  sub_100028A4C((uint64_t)v100);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v89 = *(uint64_t (**)(void))(v0 + 8);
  return v89();
}

uint64_t sub_100079A44()
{
  uint64_t v49 = v0;
  uint64_t v47 = (void *)(v0 + 264);

  uint64_t v1 = *(void *)(v0 + 720);
  uint64_t v3 = *(void *)(v0 + 504);
  unint64_t v2 = *(void *)(v0 + 512);
  id v4 = *(void **)(v0 + 496);
  sub_10007F994();
  uint64_t v5 = sub_100062704(v3, v2);
  unint64_t v7 = v6;
  id v8 = v4;
  swift_errorRetain();
  id v9 = v8;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  uint64_t v46 = v1;
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = *(void *)(v0 + 616);
    uint64_t v44 = *(void *)(v0 + 608);
    uint64_t v13 = *(char **)(v0 + 496);
    uint64_t v14 = swift_slowAlloc();
    uint64_t v43 = (void *)swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315906;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 480) = sub_1000262AC(v5, v7, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2112;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 424) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v43 = v15;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v14 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 416) = sub_1000262AC(v44, v12, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v14 + 32) = 1026;
    LODWORD(v15) = *(_DWORD *)&v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

    *(_DWORD *)(v0 + 768) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Proof verification %s failed with %@: %{public}s[%{public}d]", (uint8_t *)v14, 0x26u);
    sub_100020378(&qword_1001590C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v16 = *(void **)(v0 + 496);

    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v17 = *(void *)(v0 + 584);
  uint64_t v18 = *(void *)(v0 + 576);
  os_log_t log = *(os_log_t *)(v0 + 568);
  uint64_t v19 = *(void *)(v0 + 552);
  uint64_t v20 = *(void *)(v0 + 544);
  uint64_t v21 = *(void *)(v0 + 536);
  uint64_t v22 = *(void *)(v0 + 288);
  uint64_t v23 = *(void *)(v0 + 296);
  sub_10002BCF8(v47, v22);
  uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 80))(v22, v23);
  SuspendingClock.init()();
  SuspendingClock.now.getter();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  SuspendingClock.Instant.duration(to:)();
  (*(void (**)(uint64_t, os_log_t))(v18 + 8))(v17, log);
  double v25 = (double)Duration.components.getter();
  Duration.components.getter();
  id v27 = [objc_allocWithZone((Class)NSNumber) initWithDouble:(double)v26 / 1.0e18 + v25];
  if (qword_10015FB88[0] != -1) {
    swift_once();
  }
  uint64_t v28 = *(void *)(v0 + 616);
  uint64_t v29 = *(void *)(v0 + 608);
  NSString v30 = String._bridgeToObjectiveC()();
  [v24 logMetric:v27 withName:v30];

  uint64_t v31 = *(void *)(v0 + 288);
  uint64_t v32 = *(void *)(v0 + 296);
  sub_10002BCF8(v47, v31);
  uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 80))(v31, v32);
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)_convertErrorToNSError(_:)();
  sub_100020378(&qword_100158CD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010B120;
  *(void *)(v0 + 392) = 99;
  *(void *)(v0 + 400) = 0xE100000000000000;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v29;
  *(void *)(inited + 80) = v28;
  swift_bridgeObjectRetain();
  sub_100074B50(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v33 logResultForEvent:v34 hardFailure:1 result:v35 withAttributes:isa];

  swift_errorRetain();
  sub_10007E98C(v47, v29, v28, 0, v46);
  swift_errorRelease();
  uint64_t v38 = *(void *)(v0 + 592);
  uint64_t v39 = *(void *)(v0 + 576);
  uint64_t v40 = *(void *)(v0 + 568);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
  sub_100028A4C((uint64_t)v47);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

uint64_t sub_10007A0DC()
{
  uint64_t v49 = v0;
  uint64_t v47 = (void *)(v0 + 264);

  uint64_t v1 = *(void *)(v0 + 752);
  uint64_t v3 = *(void *)(v0 + 504);
  unint64_t v2 = *(void *)(v0 + 512);
  id v4 = *(void **)(v0 + 496);
  sub_10007F994();
  uint64_t v5 = sub_100062704(v3, v2);
  unint64_t v7 = v6;
  id v8 = v4;
  swift_errorRetain();
  id v9 = v8;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  uint64_t v46 = v1;
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = *(void *)(v0 + 616);
    uint64_t v44 = *(void *)(v0 + 608);
    uint64_t v13 = *(char **)(v0 + 496);
    uint64_t v14 = swift_slowAlloc();
    uint64_t v43 = (void *)swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315906;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 480) = sub_1000262AC(v5, v7, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2112;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 424) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v43 = v15;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v14 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 416) = sub_1000262AC(v44, v12, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v14 + 32) = 1026;
    LODWORD(v15) = *(_DWORD *)&v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

    *(_DWORD *)(v0 + 768) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Proof verification %s failed with %@: %{public}s[%{public}d]", (uint8_t *)v14, 0x26u);
    sub_100020378(&qword_1001590C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v16 = *(void **)(v0 + 496);

    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v17 = *(void *)(v0 + 584);
  uint64_t v18 = *(void *)(v0 + 576);
  os_log_t log = *(os_log_t *)(v0 + 568);
  uint64_t v19 = *(void *)(v0 + 552);
  uint64_t v20 = *(void *)(v0 + 544);
  uint64_t v21 = *(void *)(v0 + 536);
  uint64_t v22 = *(void *)(v0 + 288);
  uint64_t v23 = *(void *)(v0 + 296);
  sub_10002BCF8(v47, v22);
  uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 80))(v22, v23);
  SuspendingClock.init()();
  SuspendingClock.now.getter();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  SuspendingClock.Instant.duration(to:)();
  (*(void (**)(uint64_t, os_log_t))(v18 + 8))(v17, log);
  double v25 = (double)Duration.components.getter();
  Duration.components.getter();
  id v27 = [objc_allocWithZone((Class)NSNumber) initWithDouble:(double)v26 / 1.0e18 + v25];
  if (qword_10015FB88[0] != -1) {
    swift_once();
  }
  uint64_t v28 = *(void *)(v0 + 616);
  uint64_t v29 = *(void *)(v0 + 608);
  NSString v30 = String._bridgeToObjectiveC()();
  [v24 logMetric:v27 withName:v30];

  uint64_t v31 = *(void *)(v0 + 288);
  uint64_t v32 = *(void *)(v0 + 296);
  sub_10002BCF8(v47, v31);
  uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 80))(v31, v32);
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)_convertErrorToNSError(_:)();
  sub_100020378(&qword_100158CD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010B120;
  *(void *)(v0 + 392) = 99;
  *(void *)(v0 + 400) = 0xE100000000000000;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v29;
  *(void *)(inited + 80) = v28;
  swift_bridgeObjectRetain();
  sub_100074B50(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v33 logResultForEvent:v34 hardFailure:1 result:v35 withAttributes:isa];

  swift_errorRetain();
  sub_10007E98C(v47, v29, v28, 0, v46);
  swift_errorRelease();
  uint64_t v38 = *(void *)(v0 + 592);
  uint64_t v39 = *(void *)(v0 + 576);
  uint64_t v40 = *(void *)(v0 + 568);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
  sub_100028A4C((uint64_t)v47);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

double sub_10007A774()
{
  double v0 = (double)Duration.components.getter();
  Duration.components.getter();
  return (double)v1 / 1.0e18 + v0;
}

uint64_t sub_10007A7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_10007A7E8, 0, 0);
}

uint64_t sub_10007A7E8()
{
  uint64_t v3 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 24)
                                                   + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
                                     + 176)
                         + **(int **)(**(void **)(*(void *)(v0 + 24)
                                                  + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
                                    + 176));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007A8EC;
  return v3();
}

uint64_t sub_10007A8EC()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    unint64_t v2 = sub_10007FCD0;
  }
  else
  {
    unint64_t v2 = sub_10007AA08;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007AA08()
{
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 40) != 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007AA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100028C8C(a1, &qword_100157030);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  sub_100020378(&qword_100158CF8);
  return swift_task_create();
}

uint64_t sub_10007AD68(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  v4[4] = v11;
  v4[5] = v13;
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v4[6] = v14;
  v4[7] = v16;
  uint64_t v17 = (void *)swift_task_alloc();
  v4[8] = v17;
  *uint64_t v17 = v4;
  v17[1] = sub_10007AE9C;
  v17[9] = v16;
  v17[10] = v10;
  v17[7] = v13;
  v17[8] = v14;
  v17[6] = v11;
  v17[11] = swift_getObjectType();
  return _swift_task_switch(sub_100076B3C, 0, 0);
}

uint64_t sub_10007AE9C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)*v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  unint64_t v8 = v5[7];
  uint64_t v9 = v5[6];
  unint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  uint64_t v12 = (void (**)(void, void, void))v5[3];
  sub_10002BD3C(v9, v8);
  sub_10002BD3C(v11, v10);
  if (v3)
  {
    uint64_t v13 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v12)[2](v12, 0, v13);

    _Block_release(v12);
  }
  else
  {
    ((void (**)(void, void *, void))v12)[2](v12, a1, 0);
    _Block_release(v12);
  }
  uint64_t v14 = *(uint64_t (**)(void))(v7 + 8);
  return v14();
}

uint64_t sub_10007B09C()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_10007B0BC, 0, 0);
}

uint64_t sub_10007B0BC()
{
  id v1 = *(id *)(v0 + 56);
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_10007B164;
  uint64_t v3 = *(void *)(v0 + 56);
  return sub_10007B420(v0 + 16, v3);
}

uint64_t sub_10007B164()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_10007B2E0;
  }
  else {
    unint64_t v2 = sub_10007B278;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007B278()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_10007B2E0()
{
  uint64_t v1 = self;
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v1 cleanseErrorForXPC:v2];

  if (!v3)
  {
    v0[6] = v0[9];
    v0[4] = 0;
    v0[5] = 0xE000000000000000;
    sub_100020378(&qword_1001570C0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v4 = v0[4];
    uint64_t v5 = v0[5];
    sub_100075498();
    swift_allocError();
    *uint64_t v6 = v4;
    v6[1] = v5;
  }
  uint64_t v7 = (void *)v0[7];
  swift_willThrow();
  swift_errorRelease();

  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10007B420(uint64_t a1, uint64_t a2)
{
  v2[93] = a2;
  v2[87] = a1;
  sub_100020378(&qword_1001580C8);
  v2[99] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TransparencySWSysdiagnose();
  v2[105] = v3;
  v2[106] = *(void *)(v3 - 8);
  v2[107] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TransparencySWSysdiagnose.StateMachine();
  v2[108] = v4;
  v2[109] = *(void *)(v4 - 8);
  v2[110] = swift_task_alloc();
  return _swift_task_switch(sub_10007B570, 0, 0);
}

uint64_t sub_10007B570()
{
  uint64_t v1 = (void *)v0[93];
  uint64_t v2 = swift_allocObject();
  v0[111] = v2;
  *(void *)(v2 + 16) = v1;
  id v3 = v1;
  swift_asyncLet_begin();
  uint64_t v4 = v0[110];
  return _swift_asyncLet_get_throwing(v0 + 2, v4, sub_10007B648, v0 + 82);
}

uint64_t sub_10007B648()
{
  *(void *)(v1 + 896) = v0;
  if (v0) {
    uint64_t v2 = sub_10007B8F4;
  }
  else {
    uint64_t v2 = sub_10007B67C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007B67C()
{
  uint64_t v1 = v0[112];
  uint64_t v2 = v0[109];
  uint64_t v3 = v0[108];
  uint64_t v4 = v0[99];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v4, v0[110], v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  sub_100020378((uint64_t *)&unk_1001580E0);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  TransparencySWSysdiagnose.init(stateMachine:fallback:)();
  swift_task_dealloc();
  uint64_t v7 = TransparencySWSysdiagnose.json()();
  uint64_t v9 = v8;
  v0[113] = v1;
  uint64_t v10 = v0[107];
  uint64_t v11 = v0[106];
  uint64_t v12 = v0[105];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    uint64_t v13 = sub_10007B9C0;
    uint64_t v14 = v0[110];
    uint64_t v15 = v0 + 2;
    uint64_t v16 = v0 + 94;
  }
  else
  {
    uint64_t v17 = (uint64_t *)v0[87];
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *uint64_t v17 = v7;
    v17[1] = v9;
    uint64_t v13 = sub_10007B848;
    uint64_t v14 = v0[110];
    uint64_t v15 = v0 + 2;
    uint64_t v16 = v0 + 100;
  }
  return _swift_asyncLet_finish(v15, v14, v13, v16);
}

uint64_t sub_10007B848()
{
  return _swift_task_switch(sub_10007B864, 0, 0);
}

uint64_t sub_10007B864()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007B8F4()
{
  return _swift_asyncLet_finish(v0 + 16, *(void *)(v0 + 880), sub_10007B914, v0 + 704);
}

uint64_t sub_10007B914()
{
  return _swift_task_switch(sub_10007B930, 0, 0);
}

uint64_t sub_10007B930()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007B9C0()
{
  return _swift_task_switch(sub_10007B9DC, 0, 0);
}

uint64_t sub_10007B9DC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007BA6C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10007BA8C, 0, 0);
}

uint64_t sub_10007BA8C()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v0[3]
                                                                 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
                                                   + 200)
                                       + **(int **)(**(void **)(v0[3]
                                                                + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
                                                  + 200));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007BB98;
  uint64_t v2 = v0[2];
  return v4(v2);
}

uint64_t sub_10007BB98()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10007BDF4(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007BEB8;
  v5[7] = v4;
  return _swift_task_switch(sub_10007B0BC, 0, 0);
}

uint64_t sub_10007BEB8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10002BD3C(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t sub_10007C050(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v3[8] = swift_getObjectType();
  return _swift_task_switch(sub_10007C0C4, 0, 0);
}

uint64_t sub_10007C0C4()
{
  uint64_t v1 = (void *)v0[7];
  swift_bridgeObjectRetain();
  id v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  void *v3 = v0;
  v3[1] = sub_10007C168;
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  return sub_10007C42C((uint64_t)v3, v6, v4, v5);
}

uint64_t sub_10007C168()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_10007C2E4;
  }
  else {
    id v2 = sub_10007C27C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007C27C()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_bridgeObjectRelease();

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10007C2E4()
{
  uint64_t v1 = self;
  id v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v1 cleanseErrorForXPC:v2];

  if (!v3)
  {
    v0[4] = v0[10];
    v0[2] = 0;
    v0[3] = 0xE000000000000000;
    sub_100020378(&qword_1001570C0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    sub_100075498();
    swift_allocError();
    *uint64_t v6 = v4;
    v6[1] = v5;
  }
  uint64_t v7 = (void *)v0[7];
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10007C42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  sub_100020378(&qword_100158CB0);
  v4[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SWTFollowUpType();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return _swift_task_switch(sub_10007C520, 0, 0);
}

uint64_t sub_10007C520()
{
  uint64_t v21 = v0;
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000294A8(v1, (uint64_t)qword_100162388);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = v0[3];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[2] = sub_1000262AC(v6, v5, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "posting cfu %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[6];
  swift_bridgeObjectRetain();
  SWTFollowUpType.init(rawValue:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
  {
    sub_100028C8C(v0[6], &qword_100158CB0);
    sub_100075498();
    swift_allocError();
    *uint64_t v11 = xmmword_10010B870;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v14 = v0[5];
    (*(void (**)(void, void, void))(v0[8] + 32))(v0[9], v0[6], v0[7]);
    uint64_t v15 = *(void *)(v14 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine);
    uint64_t v16 = sub_1000B5E1C();
    v0[10] = v16;
    uint64_t v19 = (uint64_t (*)(uint64_t, void *))(*(void *)(*(void *)v15 + 144)
                                                  + **(int **)(*(void *)v15 + 144));
    uint64_t v17 = (void *)swift_task_alloc();
    v0[11] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10007C8D4;
    uint64_t v18 = v0[9];
    return v19(v18, v16);
  }
}

uint64_t sub_10007C8D4()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007C9EC, 0, 0);
}

uint64_t sub_10007C9EC()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10007CBF0(int a1, void *aBlock, void *a3)
{
  void v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  v3[5] = v9;
  void *v9 = v3;
  v9[1] = sub_10007CCEC;
  v9[6] = v7;
  v9[7] = v8;
  v9[5] = v5;
  v9[8] = swift_getObjectType();
  return _swift_task_switch(sub_10007C0C4, 0, 0);
}

uint64_t sub_10007CCEC()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    id v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10007CE8C()
{
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 48) = swift_getObjectType();
  return _swift_task_switch(sub_10007CEFC, 0, 0);
}

uint64_t sub_10007CEFC()
{
  id v1 = *(id *)(v0 + 40);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10007CFB4;
  v2[2] = *(void *)(v0 + 40);
  return _swift_task_switch(sub_10007D228, 0, 0);
}

uint64_t sub_10007CFB4()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10007D0C8;
  }
  else {
    uint64_t v2 = sub_1000764B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007D0C8()
{
  uint64_t v1 = self;
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v1 cleanseErrorForXPC:v2];

  if (!v3)
  {
    v0[4] = v0[8];
    v0[2] = 0;
    v0[3] = 0xE000000000000000;
    sub_100020378(&qword_1001570C0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    sub_100075498();
    swift_allocError();
    *uint64_t v6 = v4;
    v6[1] = v5;
  }
  uint64_t v7 = (void *)v0[5];
  swift_willThrow();
  swift_errorRelease();

  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10007D208(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return _swift_task_switch(sub_10007D228, 0, 0);
}

uint64_t sub_10007D228()
{
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000294A8(v1, (uint64_t)qword_100162388);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "clearing all cfus", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  id v8 = (uint64_t (*)(void))(*(void *)(**(void **)(v5
                                                   + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
                                     + 152)
                         + **(int **)(**(void **)(v5
                                                  + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
                                    + 152));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10007D3E8;
  return v8();
}

uint64_t sub_10007D3E8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10007D648(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007D71C;
  v5[5] = v4;
  void v5[6] = swift_getObjectType();
  return _swift_task_switch(sub_10007CEFC, 0, 0);
}

uint64_t sub_10007D71C()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    id v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10007D8A0()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10007D8C0, 0, 0);
}

uint64_t sub_10007D8C0()
{
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000294A8(v1, (uint64_t)qword_100162388);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "wait for ready", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  id v8 = (uint64_t (*)(unint64_t, uint64_t))(*(void *)(**(void **)(v5
                                                                                   + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
                                                                     + 128)
                                                         + **(int **)(**(void **)(v5
                                                                                  + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
                                                                    + 128));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10007D3E8;
  return v8(0xA055690D9DB80000, 1);
}

uint64_t sub_10007DBF8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007FCBC;
  _OWORD v5[2] = v4;
  return _swift_task_switch(sub_10007D8C0, 0, 0);
}

uint64_t sub_10007DCB8()
{
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 48) = swift_getObjectType();
  return _swift_task_switch(sub_10007DD28, 0, 0);
}

uint64_t sub_10007DD28()
{
  id v1 = *(id *)(v0 + 40);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10007DDE0;
  v2[2] = *(void *)(v0 + 40);
  return _swift_task_switch(sub_10007DF14, 0, 0);
}

uint64_t sub_10007DDE0()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10007FCC0;
  }
  else {
    uint64_t v2 = sub_10007FCC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007DEF4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return _swift_task_switch(sub_10007DF14, 0, 0);
}

uint64_t sub_10007DF14()
{
  if (qword_10015FB70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000294A8(v1, (uint64_t)qword_100162388);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "running daily", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[2];

  if (*(void *)(v5 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_daemon))
  {
    uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_daemon + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
    id v8 = (void *)swift_task_alloc();
    v0[3] = v8;
    void *v8 = v0;
    v8[1] = sub_10003E26C;
    return v11(ObjectType, v6);
  }
  else
  {
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_10007E278(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007FCBC;
  v5[5] = v4;
  void v5[6] = swift_getObjectType();
  return _swift_task_switch(sub_10007DD28, 0, 0);
}

void sub_10007E34C()
{
}

void *sub_10007E40C()
{
  return &unk_100158A30;
}

uint64_t sub_10007E418()
{
  return sub_10005DC04(&qword_100158A30);
}

uint64_t sub_10007E428(uint64_t a1, uint64_t a2)
{
  return sub_10005DC68(a1, a2, &qword_100158A30, &off_100158A38);
}

uint64_t (*sub_10007E438())()
{
  return j__swift_endAccess;
}

unint64_t sub_10007E490(char a1)
{
  if (a1) {
    return 0xD000000000000013;
  }
  else {
    return 0xD000000000000038;
  }
}

uint64_t TransparencyTLSError.errorCode.getter(char a1)
{
  return (a1 & 1u) + 1;
}

BOOL static TransparencyTLSError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void TransparencyTLSError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int TransparencyTLSError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_10007E558(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_10007E570()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0xD000000000000038;
  }
}

uint64_t sub_10007E5B0(uint64_t a1, uint64_t a2)
{
  return sub_10007E5C0(a1, a2, &qword_100158A30);
}

uint64_t sub_10007E5C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  swift_beginAccess();
  uint64_t v4 = *a3;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t sub_10007E618()
{
  if (*v0) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t sub_10007E62C()
{
  return Error<>._domain.getter();
}

uint64_t sub_10007E65C()
{
  return Error<>._code.getter();
}

unint64_t sub_10007E68C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10007E6D0(a1, v4);
}

unint64_t sub_10007E6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10007FC0C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10007FC68((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_10007E798(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_10007E878;
  return v5(v2 + 32);
}

uint64_t sub_10007E878()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

void sub_10007E98C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100020378(&qword_100158268);
  uint64_t v7 = *(void *)(sub_100020378(&qword_100158270) - 8);
  uint64_t v8 = *(void *)(v7 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10010C770;
  uint64_t v11 = (void *)(v10 + v9);
  *uint64_t v11 = 0x73736563637573;
  v11[1] = 0xE700000000000000;
  EventValue.init(BOOLeanLiteral:)();
  uint64_t v12 = (void *)((char *)v11 + v8);
  void *v12 = 0x746E65696C63;
  v12[1] = 0xE600000000000000;
  swift_bridgeObjectRetain();
  EventValue.init(stringLiteral:)();
  uint64_t v13 = (void *)((char *)v11 + 2 * v8);
  void *v13 = 7761509;
  v13[1] = 0xE300000000000000;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_10002BCF8(a1, v14);
  uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 48))(v14, v15);
  unint64_t v17 = (unint64_t)[v16 currentEnvironment];

  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    EventValue.init(integerLiteral:)();
    unint64_t v18 = sub_10004E784(v10);
    uint64_t v19 = a1[3];
    uint64_t v20 = a1[4];
    sub_10002BCF8(a1, v19);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 88))(v23, v19, v20);
    uint64_t v21 = v24;
    uint64_t v22 = v25;
    sub_10002BCF8(v23, v24);
    (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v22 + 8))(0x7270796676747753, 0xEC00000073666F6FLL, a5, v18, v21, v22);
    swift_bridgeObjectRelease();
    sub_100028A4C((uint64_t)v23);
  }
}

unint64_t sub_10007EBFC()
{
  unint64_t result = qword_100158AE0;
  if (!qword_100158AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158AE0);
  }
  return result;
}

unint64_t sub_10007EC54()
{
  unint64_t result = qword_100158AE8;
  if (!qword_100158AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158AE8);
  }
  return result;
}

uint64_t sub_10007ECAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for SWTransparencyXPCError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SWTransparencyXPCError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SWTransparencyXPCError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SWTransparencyXPCError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

void *sub_10007EEAC(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTransparencyXPCError()
{
  return &type metadata for SWTransparencyXPCError;
}

uint64_t type metadata accessor for SWTransparencyXPCImplementation()
{
  return self;
}

uint64_t getEnumTagSinglePayload for SWTXPCError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SWTXPCError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007F05CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10007F084(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SWTXPCError()
{
  return &type metadata for SWTXPCError;
}

uint64_t sub_10007F0A4()
{
  int v2 = *(const void **)(v0 + 16);
  int v3 = *(void **)(v0 + 24);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = sub_100029274;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100158B78 + dword_100158B78);
  return v5(v2, v3);
}

uint64_t sub_10007F15C()
{
  int v2 = *(const void **)(v0 + 16);
  int v3 = *(void **)(v0 + 24);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = sub_100029274;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100158BA0 + dword_100158BA0);
  return v5(v2, v3);
}

uint64_t sub_10007F214()
{
  int v2 = *(const void **)(v0 + 16);
  int v3 = *(void **)(v0 + 24);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = sub_100021024;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100158BC0 + dword_100158BC0);
  return v5(v2, v3);
}

uint64_t sub_10007F2C8()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007F310()
{
  uint64_t v2 = v0[2];
  int v3 = (void *)v0[3];
  unsigned int v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100029274;
  unsigned int v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_100158BE0 + dword_100158BE0);
  return v6(v2, v3, v4);
}

uint64_t sub_10007F3D0()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  int v3 = *(void **)(v0 + 24);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = sub_100029274;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100158C00 + dword_100158C00);
  return v5(v2, v3);
}

uint64_t sub_10007F484()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007F4D4()
{
  uint64_t v2 = (void *)v0[2];
  int v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  unsigned int v4 = (void *)v0[5];
  unsigned int v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unsigned int v6 = v1;
  v6[1] = sub_100029274;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_100158C20 + dword_100158C20);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10007F5A0()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  int v3 = *(void **)(v0 + 24);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = sub_100029274;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100158C40 + dword_100158C40);
  return v5(v2, v3);
}

uint64_t sub_10007F658()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  int v3 = *(void **)(v0 + 24);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = sub_100029274;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100158C60 + dword_100158C60);
  return v5(v2, v3);
}

uint64_t sub_10007F710()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007F750()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  int v3 = *(void **)(v0 + 24);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = sub_100029274;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100158C80 + dword_100158C80);
  return v5(v2, v3);
}

unint64_t sub_10007F804()
{
  unint64_t result = qword_100158CA0;
  if (!qword_100158CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158CA0);
  }
  return result;
}

unint64_t sub_10007F858()
{
  unint64_t result = qword_100158CA8;
  if (!qword_100158CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158CA8);
  }
  return result;
}

uint64_t sub_10007F8AC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007F8E4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  _OWORD v5[2] = a1;
  _OWORD v5[3] = v4;
  v5[1] = sub_100021024;
  return _swift_task_switch(sub_10007BA8C, 0, 0);
}

unint64_t sub_10007F994()
{
  unint64_t result = qword_100158CC8;
  if (!qword_100158CC8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100158CC8);
  }
  return result;
}

unint64_t sub_10007F9D4()
{
  unint64_t result = qword_100157AB0[0];
  if (!qword_100157AB0[0])
  {
    type metadata accessor for KTSWDB();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100157AB0);
  }
  return result;
}

uint64_t sub_10007FA2C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007FA6C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  _OWORD v5[2] = a1;
  _OWORD v5[3] = v4;
  v5[1] = sub_100029274;
  return _swift_task_switch(sub_10007A7E8, 0, 0);
}

uint64_t sub_10007FB1C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007FB54(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100029274;
  unsigned int v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100158CE8 + dword_100158CE8);
  return v6(a1, v4);
}

uint64_t sub_10007FC0C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10007FC68(uint64_t a1)
{
  return a1;
}

uint64_t SWTCFUInfo.posted.getter()
{
  return *(void *)v0;
}

uint64_t SWTCFUInfo.expire.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SWTCFUInfo.slh.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10007FCF4()
{
  return Date.init()();
}

uint64_t sub_10007FD0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Date.timeIntervalSince1970.getter();
  uint64_t v9 = v8;
  uint64_t v10 = sub_100020378((uint64_t *)&unk_1001580E0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a2, (uint64_t)v12, (uint64_t *)&unk_1001580E0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v15 == 1)
  {
    sub_100028C8C(a2, (uint64_t *)&unk_1001580E0);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
    uint64_t result = sub_100028C8C((uint64_t)v12, (uint64_t *)&unk_1001580E0);
    uint64_t v17 = 0;
  }
  else
  {
    Date.timeIntervalSince1970.getter();
    uint64_t v17 = v18;
    sub_100028C8C(a2, (uint64_t *)&unk_1001580E0);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(a1, v13);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v12, v13);
  }
  *(void *)a4 = v9;
  *(unsigned char *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = v17;
  *(unsigned char *)(a4 + 24) = v15 == 1;
  *(void *)(a4 + 32) = a3;
  return result;
}

double sub_10007FED0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100083C08(a1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v6;
  return result;
}

unint64_t sub_10007FF14()
{
  uint64_t v1 = v0;
  unint64_t v2 = sub_100074B50((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v23 = v2;
  sub_100083FF0(v1, (uint64_t)v25);
  sub_100083FF0((uint64_t)v25, (uint64_t)&v26);
  if ((v27 & 1) == 0)
  {
    uint64_t v3 = v26;
    *((void *)&v20 + 1) = 0xE100000000000000;
    AnyHashable.init<A>(_:)();
    uint64_t v21 = &type metadata for Double;
    *(void *)&long long v20 = v3;
    sub_1000383B0(&v20, v19);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v28 = v2;
    sub_100082FB0(v19, (uint64_t)v22, isUniquelyReferenced_nonNull_native);
    unint64_t v2 = v28;
    unint64_t v23 = v28;
    swift_bridgeObjectRelease();
    sub_10007FC68((uint64_t)v22);
  }
  sub_100083FF0(v1 + 16, (uint64_t)v24);
  sub_100083FF0((uint64_t)v24, (uint64_t)&v28);
  if ((v29 & 1) == 0)
  {
    unint64_t v5 = v28;
    *(void *)&long long v20 = 101;
    *((void *)&v20 + 1) = 0xE100000000000000;
    AnyHashable.init<A>(_:)();
    uint64_t v21 = &type metadata for Double;
    *(void *)&long long v20 = v5;
    sub_1000383B0(&v20, v19);
    char v6 = swift_isUniquelyReferenced_nonNull_native();
    sub_100082FB0(v19, (uint64_t)v22, v6);
    unint64_t v23 = v2;
    swift_bridgeObjectRelease();
    sub_10007FC68((uint64_t)v22);
  }
  *(void *)&long long v20 = 115;
  *((void *)&v20 + 1) = 0xE100000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v7 = *(void *)(v1 + 32);
  if (v7)
  {
    int64_t v8 = *(void *)(v7 + 16);
    uint64_t v9 = _swiftEmptyArrayStorage;
    if (v8)
    {
      *(void *)&long long v20 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1000838EC(0, v8, 0);
      uint64_t v9 = (void *)v20;
      uint64_t v10 = (unint64_t *)(v7 + 40);
      do
      {
        uint64_t v11 = *(v10 - 1);
        unint64_t v12 = *v10;
        sub_10002BD94(v11, *v10);
        Swift::String v13 = Data.base64EncodedString(options:)(0);
        sub_10002BD3C(v11, v12);
        *(void *)&long long v20 = v9;
        unint64_t v15 = v9[2];
        unint64_t v14 = v9[3];
        if (v15 >= v14 >> 1)
        {
          sub_1000838EC(v14 > 1, v15 + 1, 1);
          uint64_t v9 = (void *)v20;
        }
        v10 += 2;
        _OWORD v9[2] = v15 + 1;
        *(Swift::String *)&v9[2 * v15 + 4] = v13;
        --v8;
      }
      while (v8);
      sub_100084058(v1);
      unint64_t v2 = v23;
    }
    uint64_t v21 = (void *)sub_100020378(&qword_100158D28);
    *(void *)&long long v20 = v9;
    sub_1000383B0(&v20, v19);
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    sub_100082FB0(v19, (uint64_t)v22, v16);
    unint64_t v17 = v2;
    swift_bridgeObjectRelease();
    sub_10007FC68((uint64_t)v22);
  }
  else
  {
    sub_100082380((uint64_t)v22, &v20);
    sub_10007FC68((uint64_t)v22);
    sub_100028C8C((uint64_t)&v20, &qword_1001578E0);
    return v23;
  }
  return v17;
}

unint64_t sub_100080230(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100020378(&qword_100158E18);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v20 = v2 + 64;
  swift_retain();
  unint64_t v5 = (void *)(a1 + 80);
  while (1)
  {
    uint64_t v6 = *(v5 - 6);
    uint64_t v7 = *(v5 - 5);
    uint64_t v8 = *(v5 - 4);
    char v9 = *((unsigned char *)v5 - 24);
    uint64_t v10 = *(v5 - 2);
    char v11 = *((unsigned char *)v5 - 8);
    uint64_t v12 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100049298(v6, v7);
    if (v14) {
      break;
    }
    *(void *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v15 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v15 = v6;
    v15[1] = v7;
    uint64_t v16 = v3[7] + 40 * result;
    *(void *)uint64_t v16 = v8;
    *(unsigned char *)(v16 + 8) = v9;
    *(void *)(v16 + 16) = v10;
    *(unsigned char *)(v16 + 24) = v11;
    *(void *)(v16 + 32) = v12;
    uint64_t v17 = v3[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v5 += 7;
    void v3[2] = v19;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10008038C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15swtransparencyd11SWTFollowUp_log;
  uint64_t v4 = type metadata accessor for Logger();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100080400()
{
  uint64_t v0 = swift_allocObject();
  sub_100080438();
  return v0;
}

uint64_t sub_100080438()
{
  swift_defaultActor_initialize();
  if (FLFollowUpController)
  {
    id v1 = objc_allocWithZone((Class)FLFollowUpController);
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [v1 initWithClientIdentifier:v2];
  }
  else
  {
    id v3 = 0;
  }
  *(void *)(v0 + 112) = v3;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v0 + OBJC_IVAR____TtC15swtransparencyd11SWTFollowUp_log, v7, v4);
  return v0;
}

void *sub_1000805A4()
{
  return &unk_100139648;
}

unint64_t sub_1000805B0()
{
  return 0xD000000000000019;
}

uint64_t sub_1000805D4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100020378(&qword_100158D00);
    NSString v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    NSString v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_100028A9C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000383B0(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1000383B0(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1000383B0(v36, v37);
    sub_1000383B0(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~v6[v21 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~v6[v21 >> 6])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = v6[v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000383B0(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10005D5B8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1000809A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v63 = a2;
  uint64_t v64 = a3;
  uint64_t v7 = type metadata accessor for SWTFollowUpType();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  NSString v67 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v60 - v11;
  uint64_t v68 = v8;
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v65((char *)v60 - v11, a1, v7);
  int64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v66 = v4;
  if (v15)
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v62 = a1;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v61 = v3;
    v70[0] = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    v60[1] = v17 + 4;
    uint64_t v19 = SWTFollowUpType.rawValue.getter();
    uint64_t v69 = sub_1000262AC(v19, v20, (uint64_t *)v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = v68;
    unint64_t v22 = *(void (**)(char *, uint64_t))(v68 + 8);
    v22(v12, v7);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "postCFU: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v23 = v61;
    swift_slowDealloc();
    a1 = v62;
    swift_slowDealloc();

    uint64_t v24 = v21;
    BOOL v25 = *(void **)(v23 + 112);
    if (!v25) {
      return;
    }
  }
  else
  {

    uint64_t v24 = v68;
    unint64_t v22 = *(void (**)(char *, uint64_t))(v68 + 8);
    v22(v12, v7);
    BOOL v25 = *(void **)(v5 + 112);
    if (!v25) {
      return;
    }
  }
  uint64_t v26 = v67;
  v65(v67, a1, v7);
  int v27 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v26, v7);
  if (v27 == enum case for SWTFollowUpType.rollback(_:))
  {
    id v28 = v25;
    uint64_t v68 = sub_100084084(0xD000000000000012, 0x8000000100112850, 0xD000000000000021, 0x8000000100112870);
    uint64_t v29 = 0xD000000000000038;
    uint64_t v30 = 0x80000001001128A0;
    uint64_t v31 = "ENGINEERING UI: Tree was rolled back to an untrusted key";
  }
  else
  {
    if (v27 != enum case for SWTFollowUpType.treeFork(_:))
    {
      v22(v67, v7);
      return;
    }
    id v32 = v25;
    uint64_t v68 = sub_100084084(0xD000000000000012, 0x8000000100112780, 0x742064656B726F46, 0xEB00000000656572);
    uint64_t v29 = 0xD000000000000053;
    uint64_t v30 = 0x80000001001127A0;
    uint64_t v31 = "ENGINEERING UI: Tree was Tree was forked, and have not been repaired in a long time";
  }
  NSString v67 = (char *)sub_100084084(0xD000000000000011, v30, v29, (unint64_t)(v31 - 32) | 0x8000000000000000);
  sub_100020378(&qword_100158938);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_10010CB50;
  uint64_t v34 = v63[3];
  uint64_t v35 = v63[4];
  sub_10002BCF8(v63, v34);
  uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 48))(v34, v35);
  id v37 = [v36 swtCFUDetailsURL];

  if (v37)
  {
    unint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;
  }
  else
  {
    unint64_t v38 = 0;
    unint64_t v40 = 0;
  }
  sub_1000842DC(v38, v40);
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  *(void *)(v33 + 32) = v42;
  v70[0] = (id)v33;
  specialized Array._endMutation()();
  uint64_t v69 = (uint64_t)v70[0];
  uint64_t v43 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v46 = (char *)v60 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v48 = v47;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
  sub_100083FF0(v64, (uint64_t)v71);
  sub_100083FF0((uint64_t)v71, (uint64_t)&v72);
  if ((v73 & 1) == 0 && v72 + 1209600.0 < v48)
  {
    sub_1000845F4();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v49 = [objc_allocWithZone((Class)FLFollowUpItem) init];
  v70[0] = (id)0xD000000000000019;
  v70[1] = (id)0x8000000100112720;
  v50._uint64_t countAndFlagsBits = SWTFollowUpType.rawValue.getter();
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  NSString v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v49 setUniqueIdentifier:v51];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v49 setGroupIdentifier:v52];

  NSString v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v49 setTitle:v53];

  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v49 setInformativeText:v54];

  sub_10007FF14();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v49 setUserInfo:isa];

  sub_100038600(0, &qword_100158D30);
  Class v56 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v49 setActions:v56];

  NSString v57 = String._bridgeToObjectiveC()();
  [v49 setExtensionIdentifier:v57];

  v70[0] = 0;
  if ([v25 postFollowUpItem:v49 error:v70])
  {
    id v58 = v70[0];
  }
  else
  {
    id v59 = v70[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_100081214(uint64_t a1)
{
  NSString v2 = *(void **)(v1 + 112);
  if (v2)
  {
    int64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      uint64_t v19 = _swiftEmptyArrayStorage;
      id v17 = v2;
      sub_1000838EC(0, v4, 0);
      uint64_t v5 = _swiftEmptyArrayStorage;
      uint64_t v6 = (void **)(a1 + 40);
      do
      {
        uint64_t v7 = (uint64_t)*(v6 - 1);
        uint64_t v8 = *v6;
        v18[0] = (id)0xD000000000000019;
        v18[1] = (id)0x8000000100112720;
        swift_bridgeObjectRetain();
        v9._uint64_t countAndFlagsBits = v7;
        v9._object = v8;
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        uint64_t v19 = v5;
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1)
        {
          sub_1000838EC(v10 > 1, v11 + 1, 1);
          uint64_t v5 = v19;
        }
        v6 += 2;
        _OWORD v5[2] = v11 + 1;
        unint64_t v12 = &v5[2 * v11];
        v12[4] = 0xD000000000000019;
        v12[5] = 0x8000000100112720;
        --v4;
      }
      while (v4);
      sub_100081400((uint64_t)v5);
      swift_release();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v18[0] = 0;
      unsigned __int8 v14 = [v17 clearPendingFollowUpItemsWithUniqueIdentifiers:isa error:v18];

      if (v14)
      {
        id v15 = v18[0];
      }
      else
      {
        id v16 = v18[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

void *sub_100081400(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  NSString v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    Swift::String v9 = _swiftEmptyArrayStorage;
    sub_10008390C(0, v1, 0);
    NSString v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10008390C(0, v2[2] + 1, 1);
        NSString v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_10008390C(v5 > 1, v6 + 1, 1);
        NSString v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      sub_1000383B0(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t sub_100081528()
{
  int64_t v1 = *(void **)(v0 + 112);
  if (!v1) {
    return sub_100080230((uint64_t)_swiftEmptyArrayStorage);
  }
  unint64_t v51 = 0;
  id v2 = v1;
  id v3 = [v2 pendingFollowUpItems:&v51];
  id v4 = (id)v51;
  if (v3)
  {
    unint64_t v5 = v3;
    double v47 = v2;
    sub_100038600(0, &qword_100158D38);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = v4;

    unint64_t v51 = (unint64_t)_swiftEmptyArrayStorage;
    if (v6 >> 62) {
      goto LABEL_20;
    }
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v8)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      uint64_t v17 = (uint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      goto LABEL_22;
    }
    while (1)
    {
      uint64_t v9 = 4;
      while (1)
      {
        id v10 = (v6 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v6 + 8 * v9);
        unint64_t v11 = v10;
        uint64_t v12 = v9 - 3;
        if (__OFADD__(v9 - 4, 1)) {
          break;
        }
        id v13 = [v10 uniqueIdentifier];
        if (!v13)
        {
          __break(1u);
LABEL_54:
          __break(1u);
        }
        unsigned __int8 v14 = v13;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        v15._uint64_t countAndFlagsBits = 0xD000000000000019;
        v15._object = (void *)0x8000000100112720;
        LOBYTE(v14) = String.hasPrefix(_:)(v15);
        swift_bridgeObjectRelease();
        if (v14)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v9;
        if (v12 == v8)
        {
          swift_bridgeObjectRelease();
          uint64_t v17 = v51;
          if ((v51 & 0x8000000000000000) != 0) {
            goto LABEL_52;
          }
LABEL_22:
          if ((v17 & 0x4000000000000000) != 0) {
            goto LABEL_52;
          }
          uint64_t v18 = *(void *)(v17 + 16);
          swift_retain();
LABEL_24:
          id v16 = _swiftEmptyDictionarySingleton;
          if (!v18)
          {
LABEL_47:
            swift_release_n();

            return (unint64_t)v16;
          }
          unint64_t v49 = v17 & 0xC000000000000001;
          uint64_t v19 = 4;
          uint64_t v48 = v17;
          while (1)
          {
            if (v49) {
              id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v22 = *(id *)(v17 + 8 * v19);
            }
            uint64_t v23 = v22;
            if (__OFADD__(v19 - 4, 1))
            {
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              swift_retain();
              swift_bridgeObjectRetain();
              uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              goto LABEL_24;
            }
            uint64_t v50 = v19 - 3;
            id v24 = [v22 userInfo];
            if (v24)
            {
              BOOL v25 = v24;
              uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
            }
            else
            {
              uint64_t v26 = 0;
            }
            sub_100083C08(v26, (uint64_t)&v52);
            id v27 = [v23 uniqueIdentifier];
            if (!v27) {
              goto LABEL_54;
            }
            id v28 = v27;
            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v17 = v30;

            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v51 = (unint64_t)v16;
            unint64_t v33 = sub_100049298(v29, v17);
            uint64_t v34 = v16[2];
            BOOL v35 = (v32 & 1) == 0;
            uint64_t v36 = v34 + v35;
            if (__OFADD__(v34, v35)) {
              goto LABEL_50;
            }
            char v37 = v32;
            if (v16[3] >= v36)
            {
              if (isUniquelyReferenced_nonNull_native)
              {
                id v16 = (void *)v51;
                if (v32) {
                  goto LABEL_26;
                }
              }
              else
              {
                sub_100083708();
                id v16 = (void *)v51;
                if (v37) {
                  goto LABEL_26;
                }
              }
            }
            else
            {
              sub_100082A94(v36, isUniquelyReferenced_nonNull_native);
              unint64_t v38 = sub_100049298(v29, v17);
              if ((v37 & 1) != (v39 & 1))
              {
                unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                return result;
              }
              unint64_t v33 = v38;
              id v16 = (void *)v51;
              if (v37)
              {
LABEL_26:
                uint64_t v20 = v16[7] + 40 * v33;
                swift_bridgeObjectRelease();
                long long v21 = v53;
                *(_OWORD *)uint64_t v20 = v52;
                *(_OWORD *)(v20 + 16) = v21;
                *(void *)(v20 + 32) = v54;
                goto LABEL_27;
              }
            }
            v16[(v33 >> 6) + 8] |= 1 << v33;
            unint64_t v40 = (uint64_t *)(v16[6] + 16 * v33);
            uint64_t *v40 = v29;
            v40[1] = v17;
            uint64_t v41 = v16[7] + 40 * v33;
            long long v42 = v53;
            *(_OWORD *)uint64_t v41 = v52;
            *(_OWORD *)(v41 + 16) = v42;
            *(void *)(v41 + 32) = v54;
            uint64_t v43 = v16[2];
            BOOL v44 = __OFADD__(v43, 1);
            uint64_t v45 = v43 + 1;
            if (v44) {
              goto LABEL_51;
            }
            v16[2] = v45;
            swift_bridgeObjectRetain();
LABEL_27:

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v19;
            uint64_t v17 = v48;
            if (v50 == v18) {
              goto LABEL_47;
            }
          }
        }
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_21;
      }
    }
  }
  id v16 = (id)v51;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  return (unint64_t)v16;
}

uint64_t sub_100081A5C()
{
  uint64_t v24 = type metadata accessor for SWTFollowUpType();
  uint64_t v1 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  id v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = static SWTFollowUpType.allCases.getter();
  int64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    v20[1] = v0;
    BOOL v25 = _swiftEmptyArrayStorage;
    sub_1000838EC(0, v5, 0);
    id v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    uint64_t v6 = v1 + 16;
    uint64_t v8 = *(unsigned __int8 *)(v6 + 64);
    v20[0] = v4;
    uint64_t v9 = v4 + ((v8 + 32) & ~v8);
    uint64_t v21 = *(void *)(v6 + 56);
    id v22 = v7;
    id v10 = (void (**)(char *, uint64_t))(v6 - 8);
    uint64_t v23 = v6;
    do
    {
      uint64_t v11 = v24;
      v22(v3, v9, v24);
      uint64_t v12 = SWTFollowUpType.rawValue.getter();
      uint64_t v14 = v13;
      (*v10)(v3, v11);
      Swift::String v15 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000838EC(0, v15[2] + 1, 1);
        Swift::String v15 = v25;
      }
      unint64_t v17 = v15[2];
      unint64_t v16 = v15[3];
      if (v17 >= v16 >> 1)
      {
        sub_1000838EC(v16 > 1, v17 + 1, 1);
        Swift::String v15 = v25;
      }
      _OWORD v15[2] = v17 + 1;
      uint64_t v18 = &v15[2 * v17];
      void v18[4] = v12;
      v18[5] = v14;
      v9 += v21;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::String v15 = _swiftEmptyArrayStorage;
  }
  sub_100081214((uint64_t)v15);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_100081C7C()
{
  return &qword_100158D10;
}

uint64_t sub_100081C88()
{
  swift_beginAccess();
  uint64_t v0 = qword_100158D10;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100081CDC(uint64_t a1, char *a2)
{
  qword_100158D10 = a1;
  off_100158D18 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100081D38())()
{
  return j__swift_endAccess;
}

void sub_100081D90()
{
  qword_1001623D0 = 0x617A696C61636F4CLL;
  qword_1001623D8 = 0xEF5457532D656C62;
}

uint64_t *sub_100081DC0()
{
  if (qword_10015FF90 != -1) {
    swift_once();
  }
  return &qword_1001623D0;
}

uint64_t sub_100081E0C()
{
  if (qword_10015FF90 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = qword_1001623D0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100081E90(uint64_t a1, uint64_t a2)
{
  if (qword_10015FF90 != -1) {
    swift_once();
  }
  swift_beginAccess();
  qword_1001623D0 = a1;
  qword_1001623D8 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100081F1C())()
{
  if (qword_10015FF90 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_100081FA4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd11SWTFollowUp_log;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100082018()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd11SWTFollowUp_log;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10008209C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = *v3;
  v4[4] = a3;
  v4[5] = v5;
  return _swift_task_switch(sub_1000820C0, v5, 0);
}

uint64_t sub_1000820C0()
{
  sub_1000809A0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100082140(uint64_t a1, uint64_t a2)
{
  void v3[2] = a1;
  v3[3] = a2;
  uint64_t v4 = *v2;
  v3[4] = *v2;
  return _swift_task_switch(sub_100082164, v4, 0);
}

uint64_t sub_100082164()
{
  sub_100084930(*(void *)(v0 + 16), *(void **)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000821C8(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_1000821E8, v3, 0);
}

uint64_t sub_1000821E8()
{
  sub_100081214(*(void *)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100082264()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_100082284, v2, 0);
}

uint64_t sub_100082284()
{
  unint64_t v1 = sub_100081528();
  uint64_t v2 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100082300()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_100082320, v2, 0);
}

uint64_t sub_100082320()
{
  sub_100081A5C();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

double sub_100082380@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10007E68C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100083338();
      uint64_t v9 = v11;
    }
    sub_10007FC68(*(void *)(v9 + 48) + 40 * v6);
    sub_1000383B0((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_100082DE4(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10008247C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100020378(&qword_100158D00);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_1000383B0((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_10007FC0C(v25, (uint64_t)&v38);
      sub_100028A9C(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_1000383B0(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_100082794(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100020378(&qword_1001588D0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1000383B0(v24, v35);
      }
      else
      {
        sub_100028A9C((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      void *v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1000383B0(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_100082A94(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100020378(&qword_100158E18);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    long long v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 40 * v21;
      uint64_t v33 = *(void *)v32;
      char v34 = *(unsigned char *)(v32 + 8);
      uint64_t v42 = *(void *)(v32 + 16);
      char v41 = *(unsigned char *)(v32 + 24);
      uint64_t v35 = *(void *)(v32 + 32);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *int64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = *(void *)(v7 + 56) + 40 * v17;
      *(void *)uint64_t v19 = v33;
      *(unsigned char *)(v19 + 8) = v34;
      *(void *)(v19 + 16) = v42;
      *(unsigned char *)(v19 + 24) = v41;
      *(void *)(v19 + 32) = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_100082DE4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_10007FC0C(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        uint64_t result = sub_10007FC68((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            unint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            unint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              _OWORD *v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *int64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_100082FB0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10007E68C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100083338();
      goto LABEL_7;
    }
    sub_10008247C(v13, a3 & 1);
    unint64_t v19 = sub_10007E68C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_10007FC0C(a2, (uint64_t)v21);
      return sub_100083250(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  long long v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_100028A4C((uint64_t)v17);

  return sub_1000383B0(a1, v17);
}

_OWORD *sub_1000830FC(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100049298(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100083520();
      goto LABEL_7;
    }
    sub_100082794(v15, a4 & 1);
    unint64_t v21 = sub_100049298(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      long long v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  long long v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_100028A4C((uint64_t)v19);
    return sub_1000383B0(a1, v19);
  }
LABEL_13:
  sub_1000832CC(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_100083250(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_1000383B0(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

_OWORD *sub_1000832CC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000383B0(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_100083338()
{
  uint64_t v1 = v0;
  sub_100020378(&qword_100158D00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_10007FC0C(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_100028A9C(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_1000383B0(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100083520()
{
  uint64_t v1 = v0;
  sub_100020378(&qword_1001588D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100028A9C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_1000383B0(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100083708()
{
  uint64_t v1 = v0;
  sub_100020378(&qword_100158E18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      int64_t v9 = v29 + 1;
      if (v29 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v6 + 8 * v9);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v30 - 1) & v30;
    unint64_t v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 40 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    char v23 = *(unsigned char *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    char v25 = *(unsigned char *)(v21 + 24);
    uint64_t v26 = *(void *)(v21 + 32);
    uint64_t v27 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v27 = v18;
    v27[1] = v19;
    uint64_t v28 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v28 = v22;
    *(unsigned char *)(v28 + 8) = v23;
    *(void *)(v28 + 16) = v24;
    *(unsigned char *)(v28 + 24) = v25;
    *(void *)(v28 + 32) = v26;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v13) {
    goto LABEL_26;
  }
  unint64_t v30 = *(void *)(v6 + 8 * v31);
  if (v30)
  {
    int64_t v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v9);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000838EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10008392C(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_10008390C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100083A98(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_10008392C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100020378(&qword_100158E28);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100083A98(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100020378(&qword_100158E20);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100083C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    sub_100028C8C((uint64_t)&v30, &qword_1001578E0);
    long long v30 = 0u;
    long long v31 = 0u;
    sub_100028C8C((uint64_t)&v30, &qword_1001578E0);
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    char v10 = 1;
    char v8 = 1;
LABEL_38:
    uint64_t result = sub_100028C8C((uint64_t)&v30, &qword_1001578E0);
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_10007E68C((uint64_t)v29), (v5 & 1) != 0))
  {
    sub_100028A9C(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v30);
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10007FC68((uint64_t)v29);
  if (*((void *)&v31 + 1))
  {
    int v6 = swift_dynamicCast();
    if (v6) {
      uint64_t v7 = v29[0];
    }
    else {
      uint64_t v7 = 0;
    }
    char v8 = v6 ^ 1;
  }
  else
  {
    sub_100028C8C((uint64_t)&v30, &qword_1001578E0);
    uint64_t v7 = 0;
    char v8 = 1;
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v11 = sub_10007E68C((uint64_t)v29), (v12 & 1) != 0))
  {
    sub_100028A9C(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v30);
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10007FC68((uint64_t)v29);
  if (*((void *)&v31 + 1))
  {
    int v13 = swift_dynamicCast();
    if (v13) {
      uint64_t v9 = v29[0];
    }
    else {
      uint64_t v9 = 0;
    }
    char v10 = v13 ^ 1;
  }
  else
  {
    sub_100028C8C((uint64_t)&v30, &qword_1001578E0);
    uint64_t v9 = 0;
    char v10 = 1;
  }
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v14 = sub_10007E68C((uint64_t)v29), (v15 & 1) != 0))
  {
    sub_100028A9C(*(void *)(a1 + 56) + 32 * v14, (uint64_t)&v30);
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10007FC68((uint64_t)v29);
  if (!*((void *)&v31 + 1)) {
    goto LABEL_38;
  }
  sub_100020378(&qword_100158D28);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_39:
    uint64_t v20 = 0;
    goto LABEL_40;
  }
  uint64_t v17 = v29[0];
  uint64_t v18 = *(void *)(v29[0] + 16);
  if (v18)
  {
    char v27 = v8;
    uint64_t v28 = v7;
    swift_bridgeObjectRetain();
    uint64_t v19 = v17 + 40;
    uint64_t v20 = _swiftEmptyArrayStorage;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = Data.init(base64Encoded:options:)();
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      if (v24 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = sub_10004EBA4(0, v20[2] + 1, 1, v20);
        }
        unint64_t v26 = v20[2];
        unint64_t v25 = v20[3];
        if (v26 >= v25 >> 1) {
          uint64_t v20 = sub_10004EBA4((void *)(v25 > 1), v26 + 1, 1, v20);
        }
        void v20[2] = v26 + 1;
        uint64_t v21 = &v20[2 * v26];
        v21[4] = v22;
        v21[5] = v24;
      }
      v19 += 16;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    uint64_t v7 = v28;
    char v8 = v27;
  }
  else
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  uint64_t result = swift_bridgeObjectRelease();
LABEL_40:
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v20;
  return result;
}

uint64_t sub_100083FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100158D20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100084058(uint64_t a1)
{
  return a1;
}

uint64_t sub_100084084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  id v10 = objc_allocWithZone((Class)NSBundle);
  URL._bridgeToObjectiveC()(v11);
  int v13 = v12;
  id v14 = [v10 initWithURL:v12];

  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  if (v14)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    if (a4) {
      NSString v16 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v16 = 0;
    }
    if (qword_10015FF90 != -1) {
      swift_once();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v14 localizedStringForKey:v15 value:v16 table:v17];

    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

void sub_1000842DC(unint64_t a1, unint64_t a2)
{
  sub_100084084(0xD000000000000010, 0x8000000100112950, 0x6F4D206E7261654CLL, 0xEA00000000006572);
  uint64_t v4 = sub_100020378(&qword_100157A70);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    unint64_t v11 = v12;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  id v13 = [self actionWithLabel:v9 url:v11];

  if (v13)
  {
    sub_100020378(&qword_100158880);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10010B120;
    *(void *)(inited + 32) = 0x6E6F69746361;
    *(void *)(inited + 40) = 0xE600000000000000;
    *(void *)(inited + 72) = &type metadata for String;
    strcpy((char *)(inited + 48), "detailsAction");
    *(_WORD *)(inited + 62) = -4864;
    unint64_t v15 = sub_10006234C(inited);
    unint64_t v16 = 0x8000000100112970;
    if (a2) {
      unint64_t v16 = a2;
    }
    unint64_t v17 = 0xD000000000000016;
    unint64_t v25 = &type metadata for String;
    if (a2) {
      unint64_t v17 = a1;
    }
    *(void *)&long long v24 = v17;
    *((void *)&v24 + 1) = v16;
    sub_1000383B0(&v24, v23);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v22 = v15;
    sub_1000830FC(v23, 7107189, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
    uint64_t v19 = v22;
    swift_bridgeObjectRelease();
    sub_1000805D4(v19);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v13 setUserInfo:isa];
  }
  else
  {
    __break(1u);
  }
}

void sub_1000845F4()
{
  uint64_t v0 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v0 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  static Locale.current.getter();
  String.init(localized:defaultValue:table:bundle:locale:comment:)();
  uint64_t v2 = sub_100020378(&qword_100157A70);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v9 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    URL._bridgeToObjectiveC()(v8);
    NSString v9 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  id v11 = [self actionWithLabel:v7 url:v9];

  if (v11)
  {
    sub_100020378(&qword_100158880);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10010B120;
    *(void *)(inited + 32) = 0x6E6F69746361;
    *(void *)(inited + 40) = 0xE600000000000000;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0x7463417261656C63;
    *(void *)(inited + 56) = 0xEB000000006E6F69;
    unint64_t v13 = sub_10006234C(inited);
    sub_1000805D4(v13);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 setUserInfo:isa];
  }
  else
  {
    __break(1u);
  }
}

void sub_100084930(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100020378((uint64_t *)&unk_1001580E0);
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))((char *)&v19 - v6, 1, 1, v7);
  __chkstk_darwin(v9);
  id v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v12 = Date.timeIntervalSince1970.getter();
  uint64_t v14 = v13;
  __chkstk_darwin(v12);
  sub_100029208((uint64_t)&v19 - v6, (uint64_t)&v19 - v6, (uint64_t *)&unk_1001580E0);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))((char *)&v19 - v6, 1, v7);
  if (v15 == 1)
  {
    sub_100028C8C((uint64_t)&v19 - v6, (uint64_t *)&unk_1001580E0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_100028C8C((uint64_t)&v19 - v6, (uint64_t *)&unk_1001580E0);
    uint64_t v16 = 0;
  }
  else
  {
    Date.timeIntervalSince1970.getter();
    uint64_t v16 = v17;
    sub_100028C8C((uint64_t)&v19 - v6, (uint64_t *)&unk_1001580E0);
    id v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v18(v11, v7);
    v18((char *)&v19 - v6, v7);
  }
  uint64_t v20 = v14;
  char v21 = 0;
  uint64_t v22 = v16;
  BOOL v23 = v15 == 1;
  uint64_t v24 = 0;
  sub_1000809A0(a1, a2, (uint64_t)&v20);
}

uint64_t destroy for SWTCFUInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SWTCFUInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SWTCFUInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  uint64_t v4 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SWTCFUInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SWTCFUInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SWTCFUInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SWTCFUInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTCFUInfo()
{
  return &type metadata for SWTCFUInfo;
}

uint64_t sub_100084D88()
{
  return type metadata accessor for SWTFollowUp();
}

uint64_t type metadata accessor for SWTFollowUp()
{
  uint64_t result = qword_100160020;
  if (!qword_100160020) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100084DDC()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Application.description.getter(unsigned int a1)
{
  if (a1 > 6) {
    return 0x4E574F4E4B4E55;
  }
  else {
    return *(void *)&aUnknownIds[8 * a1];
  }
}

void sub_100084EC0()
{
  id v1 = [v0 appSmtKeyStore];
  id v2 = [v1 signatureVerifier];

  [v2 setNeedsRefresh:1];
  id v3 = [v0 appSthKeyStore];
  id v4 = [v3 signatureVerifier];

  [v4 setNeedsRefresh:1];
  id v5 = [v0 tltKeyStore];
  id v6 = [v5 signatureVerifier];

  [v6 setNeedsRefresh:1];
}

void *sub_100084FE4()
{
  return &unk_100139710;
}

unint64_t sub_100084FF0()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10008500C(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return 4;
  }
  if (a3 == 1) {
    return 5;
  }
  return qword_10010D240[a1];
}

unint64_t sub_10008503C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 > 1u)
  {
    return sub_10006234C((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    sub_100020378(&qword_100158880);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10010B120;
    *(void *)(inited + 32) = 107;
    *(void *)(inited + 40) = 0xE100000000000000;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = a1;
    *(void *)(inited + 56) = a2;
    sub_1000850F0(a1, a2, a3);
    return sub_10006234C(inited);
  }
}

uint64_t sub_1000850F0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_100085108(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100020378(&qword_100159090);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_100049298(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100085224()
{
  return Error<>._domain.getter();
}

uint64_t sub_100085254()
{
  return Error<>._code.getter();
}

uint64_t sub_100085284()
{
  if (!*(unsigned char *)(v0 + 16)) {
    return 4;
  }
  if (*(unsigned char *)(v0 + 16) == 1) {
    return 5;
  }
  return qword_10010D240[*(void *)v0];
}

unint64_t sub_1000852B8()
{
  return sub_10008503C(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void *sub_1000852C4()
{
  swift_beginAccess();
  id v1 = *(void **)(v0 + 112);
  id v2 = v1;
  return v1;
}

uint64_t sub_100085308()
{
  return *(unsigned int *)(v0 + 136);
}

uint64_t sub_100085310()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002C544(v0, qword_1001623E8);
  sub_1000294A8(v0, (uint64_t)qword_1001623E8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100085394()
{
  if (qword_100160030 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000294A8(v0, (uint64_t)qword_1001623E8);
}

uint64_t sub_1000853F8@<X0>(uint64_t a1@<X8>)
{
  if (qword_100160030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_1001623E8);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1000854A0(int a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v16 + 112) = 0;
  *(void *)(v16 + 128) = a2;
  *(_DWORD *)(v16 + 136) = a1;
  sub_10008E1B8(a5, v16 + 144, &qword_100158E30);
  uint64_t v17 = v16 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory;
  uint64_t v18 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a3, v18);
  sub_10008E1B8(a6, v16 + 184, &qword_100158E38);
  sub_10003CD24(a4, v16 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
  sub_10008E1B8(a7, v16 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_100158E40);
  *(void *)(v16 + 120) = a8;
  return v16;
}

uint64_t sub_1000855CC(int a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_defaultActor_initialize();
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 128) = a2;
  *(_DWORD *)(v8 + 136) = a1;
  sub_10008E1B8(a5, v8 + 144, &qword_100158E30);
  uint64_t v17 = v8 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory;
  uint64_t v18 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a3, v18);
  sub_10008E1B8(a6, v8 + 184, &qword_100158E38);
  sub_10003CD24(a4, v8 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
  sub_10008E1B8(a7, v8 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_100158E40);
  *(void *)(v8 + 120) = a8;
  return v8;
}

uint64_t sub_1000856E4(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100085724(a1);
  return v2;
}

uint64_t sub_100085724(void *a1)
{
  uint64_t v2 = v1;
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = 0;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_10002BCF8(a1, v4);
  *(_DWORD *)(v1 + 136) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_10002BCF8(a1, v6);
  *(void *)(v1 + 128) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(void *)(v1 + 176) = 0;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10002BCF8(a1, v8);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory, v13, v10);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_10002BCF8(a1, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 64))(v14, v15);
  uint64_t v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
  v17[3] = type metadata accessor for KTSWDB();
  v17[4] = sub_10008D5B0(qword_100157AB0, (void (*)(uint64_t))type metadata accessor for KTSWDB);
  *uint64_t v17 = v16;
  *(void *)(v2 + 216) = 0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_10002BCF8(a1, v18);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 40))(v24, v18, v19);
  sub_10008E1B8((uint64_t)v24, v2 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_100158E40);
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  sub_10002BCF8(a1, v20);
  *(void *)(v2 + 120) = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 80))(v20, v21);
  sub_100028A4C((uint64_t)a1);
  return v2;
}

uint64_t sub_1000859E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 160))(v4);
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 receiptTime];
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    __chkstk_darwin(v10);
    uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Date.timeIntervalSinceNow.getter();
    double v15 = v14;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (kKTPublicKeysResponseRefresh == 0x8000000000000000)
    {
      __break(1u);
    }
    else
    {
      if (v15 >= (double)(uint64_t)-kKTPublicKeysResponseRefresh)
      {

        return 0;
      }
      if (qword_100160030 == -1) {
        goto LABEL_5;
      }
    }
    swift_once();
LABEL_5:
    uint64_t v16 = sub_1000294A8(v2, (uint64_t)qword_1001623E8);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v16, v2);
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v29 = v27;
      *(_DWORD *)uint64_t v19 = 136446210;
      uint64_t v20 = v1[34];
      if (v20 > 6)
      {
        unint64_t v23 = 0xE700000000000000;
        uint64_t v22 = 0x4E574F4E4B4E55;
      }
      else
      {
        uint64_t v21 = 8 * v20;
        uint64_t v22 = *(void *)&aUnknownIds[v21];
        unint64_t v23 = *(void *)&aTlt[v21];
      }
      uint64_t v28 = sub_1000262AC(v22, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Public key response for %{public}s older than refresh period", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    (*(void (**)(uint64_t))(*(void *)v1 + 224))(v25);

    return 1;
  }
  (*(void (**)(void))(*(void *)v0 + 224))();
  return 1;
}

id sub_100085E04()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 160))();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = self;
  id v3 = [v1 receiptTime];
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v9 = [v2 fuzzyDaysSinceDate:isa];

  return v9;
}

uint64_t sub_100085F7C()
{
  return sub_1000862E0((uint64_t)&unk_100139730, (uint64_t)&unk_100158E58);
}

uint64_t sub_100085F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a4;
  return _swift_task_switch(sub_100085FBC, a4, 0);
}

uint64_t sub_100085FBC()
{
  sub_100029208(*(void *)(v0 + 64) + 184, v0 + 16, &qword_100158E38);
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 72) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    sub_10002BCF8((void *)(v0 + 16), v1);
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 8) + **(int **)(v2 + 8));
    id v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v3;
    void *v3 = v0;
    v3[1] = sub_10008613C;
    return v6(v1, v2);
  }
  else
  {
    sub_100028C8C(v0 + 16, &qword_100158E38);
    **(unsigned char **)(v0 + 56) = *(void *)(v0 + 72) == 0;
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_10008613C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_10008624C, v1, 0);
}

uint64_t sub_10008624C()
{
  sub_100028A4C(v0 + 16);
  **(unsigned char **)(v0 + 56) = *(void *)(v0 + 72) == 0;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000862C0()
{
  return sub_1000862E0((uint64_t)&unk_100139758, (uint64_t)&unk_100158E68);
}

uint64_t sub_1000862E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = sub_10008D5B0(&qword_100158E50, (void (*)(uint64_t))type metadata accessor for SWTPublicKeyBag);
  id v9 = (void *)swift_allocObject();
  _OWORD v9[2] = v2;
  v9[3] = v8;
  v9[4] = v2;
  swift_retain_n();
  sub_10007AA30((uint64_t)v6, a2, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_100086414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a4;
  return _swift_task_switch(sub_100086434, a4, 0);
}

uint64_t sub_100086434()
{
  sub_100029208(*(void *)(v0 + 64) + 184, v0 + 16, &qword_100158E38);
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 72) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    sub_10002BCF8((void *)(v0 + 16), v1);
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 16) + **(int **)(v2 + 16));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v3;
    void *v3 = v0;
    v3[1] = sub_1000865B4;
    return v6(v1, v2);
  }
  else
  {
    sub_100028C8C(v0 + 16, &qword_100158E38);
    **(unsigned char **)(v0 + 56) = *(void *)(v0 + 72) == 0;
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1000865B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_10008E630, v1, 0);
}

uint64_t sub_1000866C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  id v9 = (char *)&v46 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 160))(v10);
  if (v13)
  {
    double v14 = v13;
    id v15 = [v13 appSthKeyStore];
    id v16 = [v15 signatureVerifier];

    LODWORD(v15) = [v16 needsRefresh];
    if (v15)
    {
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v17 = sub_1000294A8(v2, (uint64_t)qword_1001623E8);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v17, v2);
      swift_retain_n();
      os_log_type_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136446210;
        uint64_t v21 = v1[34];
        uint64_t v47 = v3;
        if (v21 > 6)
        {
          uint64_t v23 = 0x4E574F4E4B4E55;
          unint64_t v24 = 0xE700000000000000;
        }
        else
        {
          uint64_t v22 = 8 * v21;
          uint64_t v23 = *(void *)&aUnknownIds[v22];
          unint64_t v24 = *(void *)&aTlt[v22];
        }
        uint64_t v48 = sub_1000262AC(v23, v24, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "App STH keys for %{public}s need refresh", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v12, v2);
      }
      else
      {

        swift_release_n();
        uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      }
    }
    else
    {
      id v33 = [v14 tltKeyStore];
      id v34 = [v33 signatureVerifier];

      LODWORD(v33) = [v34 needsRefresh];
      if (!v33)
      {

        return 1;
      }
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v35 = sub_1000294A8(v2, (uint64_t)qword_1001623E8);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v35, v2);
      swift_retain_n();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        long long v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)long long v38 = 136446210;
        uint64_t v39 = v1[34];
        uint64_t v47 = v3;
        if (v39 > 6)
        {
          uint64_t v41 = 0x4E574F4E4B4E55;
          unint64_t v42 = 0xE700000000000000;
        }
        else
        {
          uint64_t v40 = 8 * v39;
          uint64_t v41 = *(void *)&aUnknownIds[v40];
          unint64_t v42 = *(void *)&aTlt[v40];
        }
        uint64_t v48 = sub_1000262AC(v41, v42, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "TLT STH keys for %{public}s need refresh", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v9, v2);
      }
      else
      {

        swift_release_n();
        uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      }
    }
    (*(void (**)(uint64_t))(*(void *)v1 + 224))(v43);
  }
  else
  {
    if (qword_100160030 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_1000294A8(v2, (uint64_t)qword_1001623E8);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v25, v2);
    swift_retain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446210;
      uint64_t v29 = v1[34];
      if (v29 > 6)
      {
        uint64_t v31 = 0x4E574F4E4B4E55;
        unint64_t v32 = 0xE700000000000000;
      }
      else
      {
        uint64_t v30 = 8 * v29;
        uint64_t v31 = *(void *)&aUnknownIds[v30];
        unint64_t v32 = *(void *)&aTlt[v30];
      }
      uint64_t v48 = sub_1000262AC(v31, v32, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No key bag for %{public}s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    (*(void (**)(uint64_t))(*(void *)v1 + 224))(v45);
  }
  return 0;
}

void sub_100086E7C(char a1)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 160))();
  if (v3)
  {
    id v8 = v3;
    id v4 = [v3 appSthKeyStore];
    id v5 = [v4 signatureVerifier];

    [v5 setNeedsRefresh:(a1 & 1) == 0];
    id v6 = [v8 tltKeyStore];
    id v7 = [v6 signatureVerifier];

    [v7 setNeedsRefresh:(a1 & 1) == 0];
    if ((a1 & 1) == 0) {
      sub_1000887E4();
    }
  }
}

void (*sub_100087158(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_1000866C4() & 1;
  return sub_1000871A4;
}

void sub_1000871A4(uint64_t a1)
{
}

void sub_1000871CC()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 112);
  *(void *)(v0 + 112) = 0;
}

unint64_t sub_100087208()
{
  uint64_t v1 = v0;
  unint64_t v2 = 0xD000000000000019;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v60 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v60 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  id v16 = (char *)&v60 - v15;
  __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v60 - v17;
  switch((unint64_t)[*(id *)(v1 + 128) atEnvironment])
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_1000294A8(v3, (uint64_t)qword_1001623E8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v19, v3);
      swift_retain_n();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136315138;
        uint64_t v23 = *(int *)(v1 + 136);
        if (v23 > 6)
        {
          uint64_t v25 = 0x4E574F4E4B4E55;
          unint64_t v26 = 0xE700000000000000;
        }
        else
        {
          uint64_t v24 = 8 * v23;
          uint64_t v25 = *(void *)&aUnknownIds[v24];
          unint64_t v26 = *(void *)&aTlt[v24];
        }
        uint64_t v60 = sub_1000262AC(v25, v26, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Using QA1 Primary key bag for %s", v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
        return 0xD000000000000019;
      }

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
      return v2;
    case 6uLL:
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_1000294A8(v3, (uint64_t)qword_1001623E8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v10, v27, v3);
      swift_retain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446210;
        uint64_t v31 = *(int *)(v1 + 136);
        if (v31 > 6)
        {
          uint64_t v33 = 0x4E574F4E4B4E55;
          unint64_t v34 = 0xE700000000000000;
        }
        else
        {
          uint64_t v32 = 8 * v31;
          uint64_t v33 = *(void *)&aUnknownIds[v32];
          unint64_t v34 = *(void *)&aTlt[v32];
        }
        uint64_t v60 = sub_1000262AC(v33, v34, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Using carry key bag for %{public}s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
      }
      else
      {

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
      }
      return 0xD000000000000015;
    case 8uLL:
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v43 = sub_1000294A8(v3, (uint64_t)qword_1001623E8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v18, v43, v3);
      swift_retain_n();
      BOOL v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v44, v45))
      {

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
        return v2;
      }
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136315138;
      uint64_t v47 = *(int *)(v1 + 136);
      if (v47 > 6)
      {
        uint64_t v49 = 0x4E574F4E4B4E55;
        unint64_t v50 = 0xE700000000000000;
      }
      else
      {
        uint64_t v48 = 8 * v47;
        uint64_t v49 = *(void *)&aUnknownIds[v48];
        unint64_t v50 = *(void *)&aTlt[v48];
      }
      uint64_t v60 = sub_1000262AC(v49, v50, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Using QA2 Primary key bag for %s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
      return 0xD000000000000019;
    case 9uLL:
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v51 = sub_1000294A8(v3, (uint64_t)qword_1001623E8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v16, v51, v3);
      swift_retain_n();
      long long v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136315138;
        uint64_t v55 = *(int *)(v1 + 136);
        if (v55 > 6)
        {
          uint64_t v57 = 0x4E574F4E4B4E55;
          unint64_t v58 = 0xE700000000000000;
        }
        else
        {
          uint64_t v56 = 8 * v55;
          uint64_t v57 = *(void *)&aUnknownIds[v56];
          unint64_t v58 = *(void *)&aTlt[v56];
        }
        uint64_t v60 = sub_1000262AC(v57, v58, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Using QA2 Internal key bag for %s", v54, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v3);
        return 0xD000000000000019;
      }
      else
      {

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v3);
      }
      return v2;
    default:
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v35 = sub_1000294A8(v3, (uint64_t)qword_1001623E8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v35, v3);
      swift_retain_n();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        long long v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        *(_DWORD *)long long v38 = 136446210;
        uint64_t v39 = *(int *)(v1 + 136);
        if (v39 > 6)
        {
          uint64_t v41 = 0x4E574F4E4B4E55;
          unint64_t v42 = 0xE700000000000000;
        }
        else
        {
          uint64_t v40 = 8 * v39;
          uint64_t v41 = *(void *)&aUnknownIds[v40];
          unint64_t v42 = *(void *)&aTlt[v40];
        }
        uint64_t v60 = sub_1000262AC(v41, v42, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Using prod key bag for %{public}s", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      }
      else
      {

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      }
      return 0xD000000000000015;
  }
}

uint64_t sub_100087D40(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_100087D60, v1, 0);
}

uint64_t sub_100087D60()
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(v0 + 32) + 160);
  uint64_t v2 = (void *)v1();
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [v2 trustedAppSigningKeys];

    sub_10008D7AC();
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100088058(v5);
    swift_bridgeObjectRelease();
  }
  sub_10002F6FC((uint64_t)[*(id *)(*(void *)(v0 + 32) + 128) atEnvironment]);
  uint64_t v6 = (void *)v1();
  id v7 = v6;
  if (v6)
  {
    [v6 patLogBeginningMs];
  }
  uint64_t v8 = (void *)v1();
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 tltLogBeginningMs];
  }
  sub_100020378((uint64_t *)&unk_1001580E0);
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)v1();
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = [v11 receiptTime];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 1;
  }
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, v14, 1, v15);
  TransparencySWSysdiagnose.PublicKeybag.init(env:app:patLogBeginMs:tltLogBeginMs:fetchTime:trustedAppSPKI:)();
  swift_task_dealloc();
  id v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

void *sub_100088058(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000838EC(0, v1, 0);
  unint64_t result = (void *)sub_10008DE88(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 64;
  uint64_t v23 = v2 + 80;
  int64_t v24 = v1;
  int v25 = v4;
  uint64_t v26 = v2 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v27 = v6;
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v12 = v2;
    uint64_t v14 = *v11;
    unint64_t v13 = v11[1];
    sub_10002BD94(*v11, v13);
    Swift::String v15 = Data.base64EncodedString(options:)(0);
    unint64_t result = (void *)sub_10002BD3C(v14, v13);
    unint64_t v17 = _swiftEmptyArrayStorage[2];
    unint64_t v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1) {
      unint64_t result = (void *)sub_1000838EC(v16 > 1, v17 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v17 + 1;
    *(Swift::String *)&_swiftEmptyArrayStorage[2 * v17 + 4] = v15;
    int64_t v8 = 1 << *(unsigned char *)(v12 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = v26;
    uint64_t v18 = *(void *)(v26 + 8 * v10);
    if ((v18 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    uint64_t v2 = v12;
    int v4 = v25;
    if (*(_DWORD *)(v12 + 36) != v25) {
      goto LABEL_27;
    }
    unint64_t v19 = v18 & (-2 << (v5 & 0x3F));
    if (v19)
    {
      int64_t v8 = __clz(__rbit64(v19)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v24;
    }
    else
    {
      unint64_t v20 = v10 + 1;
      unint64_t v21 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v24;
      if (v10 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v10)
          {
            unint64_t v22 = *(void *)(v23 + 8 * v10++);
            if (v22)
            {
              unint64_t v20 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v27 + 1;
    uint64_t v5 = v8;
    if (v27 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

id sub_100088294()
{
  int64_t v1 = self;
  (*(void (**)(void))(*(void *)v0 + 264))();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v3);
  uint64_t v5 = v4;
  id v12 = 0;
  id v6 = [v1 readDictionaryFromFile:v2 inDirectory:v4 error:&v12];

  id v7 = v12;
  if (v6)
  {
    uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = v7;

    id v10 = (id)sub_100088404(v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v10;
}

unint64_t sub_100088404(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100020378(&qword_100159090);
    NSString v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    NSString v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (v5) {
    goto LABEL_9;
  }
LABEL_10:
  int64_t v13 = v7 + 1;
  if (__OFADD__(v7, 1)) {
    goto LABEL_40;
  }
  if (v13 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v13);
  int64_t v12 = v7 + 1;
  if (!v14)
  {
    int64_t v12 = v7 + 2;
    if (v7 + 2 >= v22) {
      goto LABEL_36;
    }
    unint64_t v14 = *(void *)(v23 + 8 * v12);
    if (!v14)
    {
      int64_t v12 = v7 + 3;
      if (v7 + 3 >= v22) {
        goto LABEL_36;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = v7 + 4;
        if (v7 + 4 >= v22) {
          goto LABEL_36;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v15 = v7 + 5;
          if (v7 + 5 < v22)
          {
            unint64_t v14 = *(void *)(v23 + 8 * v15);
            if (v14)
            {
              int64_t v12 = v7 + 5;
              goto LABEL_25;
            }
            while (1)
            {
              int64_t v12 = v15 + 1;
              if (__OFADD__(v15, 1)) {
                goto LABEL_41;
              }
              if (v12 >= v22) {
                break;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v12);
              ++v15;
              if (v14) {
                goto LABEL_25;
              }
            }
          }
LABEL_36:
          sub_10005D5B8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_25:
  uint64_t v10 = (v14 - 1) & v14;
  unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
  while (1)
  {
    sub_10007FC0C(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v30);
    sub_100028A9C(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v31 + 8);
    v28[0] = v31[0];
    v28[1] = v31[1];
    uint64_t v29 = v32;
    v27[0] = v30[0];
    v27[1] = v30[1];
    sub_10007FC0C((uint64_t)v27, (uint64_t)v26);
    if (!swift_dynamicCast())
    {
      sub_100028C8C((uint64_t)v27, (uint64_t *)&unk_100159098);
      swift_bridgeObjectRelease();
LABEL_35:
      sub_10005D5B8();
      swift_release();
      return 0;
    }
    sub_100028A9C((uint64_t)v28 + 8, (uint64_t)v26);
    sub_100028C8C((uint64_t)v27, (uint64_t *)&unk_100159098);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_35;
    }
    unint64_t v5 = v10;
    unint64_t result = sub_100049298(v24, v25);
    unint64_t v16 = result;
    if (v17)
    {
      uint64_t v8 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v8 = v24;
      v8[1] = v25;
      uint64_t v9 = v2[7];
      unint64_t result = swift_unknownObjectRelease();
      *(void *)(v9 + 8 * v16) = v24;
      int64_t v7 = v12;
      if (!v10) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v18 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v18 = v24;
    v18[1] = v25;
    *(void *)(v2[7] + 8 * result) = v24;
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_39;
    }
    v2[2] = v21;
    int64_t v7 = v12;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
    int64_t v12 = v7;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_1000887E4()
{
  NSString v2 = v0;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v0 + 160))();
  if (!v3)
  {
    sub_10008D7F4();
    swift_allocError();
    *(_OWORD *)uint64_t v7 = xmmword_10010CFF0;
    *(unsigned char *)(v7 + 16) = 2;
    swift_willThrow();
    return;
  }
  uint64_t v4 = (void *)v3;
  id v5 = sub_100088294();
  if (v1)
  {
    swift_errorRelease();
LABEL_4:
    unint64_t v6 = sub_100085108((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  unint64_t v6 = (unint64_t)v5;
  if (!v5) {
    goto LABEL_4;
  }
LABEL_7:
  uint64_t v8 = v2[34];
  if (v8 > 6)
  {
    uint64_t v11 = 0xE700000000000000;
    uint64_t v10 = 0x4E574F4E4B4E55;
  }
  else
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = *(void *)&aUnknownIds[v9];
    uint64_t v11 = *(void *)&aTlt[v9];
  }
  id v12 = [v4 diskStoreDictionary];
  if (!v12)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!v6)
  {
LABEL_17:
    __break(1u);
    __break(1u);
    __break(1u);
    return;
  }
  uint64_t v13 = (uint64_t)v12;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10008DB60(v13, v10, v11, isUniquelyReferenced_nonNull_native);
  int64_t v15 = (void *)v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v16 = (void *)sub_100085108((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  Class isa = Int32._bridgeToObjectiveC()().super.super.isa;
  char v21 = swift_isUniquelyReferenced_nonNull_native();
  id v41 = v16;
  sub_10008DB60((uint64_t)isa, v17, v19, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  (*(void (**)(void))(*(void *)v2 + 232))();
  Class v25 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  sub_10008DB60((uint64_t)v25, v22, v24, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;
  swift_bridgeObjectRetain();
  Class v30 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  id v41 = v15;
  sub_10008DB60((uint64_t)v30, v27, v29, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100088C84((uint64_t)v15);
  swift_bridgeObjectRelease();
  Class v33 = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v34 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v2 + 264))(v34);
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v36);
  long long v38 = v37;
  id v41 = 0;
  LOBYTE(v22) = [v32 writeDictionaryToFile:v33 fileName:v35 inDirectory:v37 error:&v41];

  if (v22)
  {
    id v39 = v41;
  }
  else
  {
    id v40 = v41;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_100088C84(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100020378(&qword_100158D00);
    NSString v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    NSString v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000383B0(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000383B0(v35, v36);
    sub_1000383B0(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~v6[v20 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~v6[v20 >> 6])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = v6[v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000383B0(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10005D5B8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100089040(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100020378(&qword_100158D00);
    NSString v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    NSString v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v25 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v24) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v24) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v24) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v25 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    sub_10007FC0C(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v38);
    uint64_t v40 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    long long v26 = v38[0];
    long long v28 = v38[1];
    uint64_t v30 = v39;
    *(void *)&v37[0] = v40;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    long long v33 = v26;
    long long v34 = v28;
    uint64_t v35 = v30;
    sub_1000383B0(&v32, v36);
    long long v27 = v33;
    long long v29 = v34;
    uint64_t v31 = v35;
    sub_1000383B0(v36, v37);
    sub_1000383B0(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~v6[v18 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v18) & ~v6[v18 >> 6])) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = v6[v19];
      }
      while (v23 == -1);
      unint64_t v9 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v27;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000383B0(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v24)
  {
LABEL_37:
    swift_release();
    sub_10005D5B8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v25 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000893F4(unint64_t a1)
{
  unint64_t v2 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (result)
    {
LABEL_3:
      if (v3 < 1)
      {
        __break(1u);
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v7 = (void *)(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
        unint64_t v34 = v2 & 0xC000000000000001;
        *(void *)&long long v5 = 136315394;
        long long v26 = v5;
        v25[1] = (char *)&type metadata for Any + 8;
        unint64_t v28 = v2;
        uint64_t v27 = v3;
        long long v29 = (void *)(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
        do
        {
          if (v34) {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v8 = *(id *)(v2 + 8 * v6 + 32);
          }
          unint64_t v9 = v8;
          sub_100066CFC((uint64_t)&v38);
          sub_10003863C((uint64_t)v7, (uint64_t)&v35);
          uint64_t v10 = v36;
          uint64_t v31 = v37;
          uint64_t v30 = sub_10002BCF8(&v35, v36);
          uint64_t v11 = type metadata accessor for Date();
          long long v32 = v25;
          uint64_t v12 = *(void *)(v11 - 8);
          __chkstk_darwin(v11);
          unint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_10002BE90((uint64_t)&v38);
          static Date.now.getter();
          id v15 = [v9 data];
          uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v18 = v17;

          long long v33 = v9;
          unint64_t v19 = sub_100066ED4();
          (*(void (**)(long long *, char *, uint64_t, unint64_t, unint64_t, uint64_t))(v31 + 24))(&v38, v14, v16, v18, v19, v10);
          (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
          sub_10002BD3C(v16, v18);
          sub_100028A4C((uint64_t)&v35);
          uint64_t v7 = v29;
          uint64_t v20 = v29[3];
          uint64_t v21 = v29[4];
          sub_10002BCF8(v29, v20);
          (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v21 + 48))(&v38, 1, v20, v21);
          uint64_t v22 = v7[3];
          uint64_t v23 = v7[4];
          sub_10002BCF8(v7, v22);
          (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v23 + 40))(&v38, 1, v22, v23);
          int64_t v24 = v33;
          sub_10002BE4C((uint64_t)&v38);

          sub_10002BE4C((uint64_t)&v38);
          unint64_t v2 = v28;
          ++v6;
        }
        while (v27 != v6);
        return swift_bridgeObjectRelease();
      }
      return result;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100089AFC(unint64_t a1)
{
  return sub_100089B24(a1, (SEL *)&selRef_tltLogBeginningMs, "Detected a TLT reset from %{public}llu to %{public}llu");
}

uint64_t sub_100089B10(unint64_t a1)
{
  return sub_100089B24(a1, (SEL *)&selRef_patLogBeginningMs, "Detected a PAT reset from %{public}llu to %{public}llu");
}

uint64_t sub_100089B24(unint64_t a1, SEL *a2, const char *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 160))();
  if (result)
  {
    id v8 = (void *)result;
    if ([(id)result *a2] && (unint64_t)objc_msgSend(v8, *a2) < a1)
    {
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_1000294A8(v9, (uint64_t)qword_1001623E8);
      id v10 = v8;
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 134349312;
        [v10 *a2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v13 + 12) = 2050;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, (uint8_t *)v13, 0x16u);
        swift_slowDealloc();
      }
      else
      {
      }
      return 1;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t sub_100089CF8(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return _swift_task_switch(sub_100089D1C, v2, 0);
}

uint64_t sub_100089D1C()
{
  unint64_t v1 = *(void *)(v0 + 64);
  char v2 = sub_100089AFC(*(void *)(v0 + 56));
  *(unsigned char *)(v0 + 88) = v2 & 1;
  char v3 = sub_100089B10(v1);
  *(unsigned char *)(v0 + 89) = v3 & 1;
  if ((v3 & 1) == 0 && (v2 & 1) == 0)
  {
    char v4 = 0;
LABEL_9:
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9(v4 & 1);
  }
  sub_100029208(*(void *)(v0 + 72) + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, v0 + 16, &qword_100158E40);
  uint64_t v5 = *(void *)(v0 + 40);
  if (!v5)
  {
    sub_100028C8C(v0 + 16, &qword_100158E40);
    char v4 = *(unsigned char *)(v0 + 89) | *(unsigned char *)(v0 + 88);
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10002BCF8((void *)(v0 + 16), *(void *)(v0 + 40));
  id v10 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 40) + **(int **)(v6 + 40));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v7;
  void *v7 = v0;
  v7[1] = sub_100089ED4;
  return v10(v5, v6);
}

uint64_t sub_100089ED4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  return _swift_task_switch(sub_100089FE4, v1, 0);
}

uint64_t sub_100089FE4()
{
  sub_100028A4C(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = (*(unsigned char *)(v0 + 89) | *(unsigned char *)(v0 + 88)) & 1;
  return v1(v2);
}

id sub_10008A054()
{
  uint64_t v1 = self;
  sub_100074B50((uint64_t)_swiftEmptyArrayStorage);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v3 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v0 + 264))(v3);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory);
  uint64_t v6 = v5;
  id v9 = 0;
  LODWORD(v1) = [v1 writeDictionaryToFile:isa fileName:v4 inDirectory:v5 error:&v9];

  if (v1) {
    return v9;
  }
  id v8 = v9;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

void sub_10008A1CC()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_100088294();
  if (v1) {
    return;
  }
  NSString v4 = v3;
  if (!v3)
  {
    sub_10008D7F4();
    swift_allocError();
    *(_OWORD *)uint64_t v19 = xmmword_10010D000;
    *(unsigned char *)(v19 + 16) = 2;
    goto LABEL_10;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v4[2] || (unint64_t v7 = sub_100049298(v5, v6), (v8 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 336))(v14);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
    sub_10008D7F4();
    swift_allocError();
    *(void *)uint64_t v18 = v15;
    *(void *)(v18 + 8) = v17;
    *(unsigned char *)(v18 + 16) = 0;
LABEL_10:
    swift_willThrow();
    return;
  }
  id v9 = *(void **)(v4[7] + 8 * v7);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if ([v9 respondsToSelector:"__swift_objectForKeyedSubscript:"])
  {
    *(void *)&long long v57 = v10;
    *((void *)&v57 + 1) = v12;
    swift_bridgeObjectRetain();
    id v13 = [v9 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v13)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v57 = 0u;
      long long v58 = 0u;
    }
    sub_10008E1B8((uint64_t)&v57, (uint64_t)&v59, &qword_1001578E0);
  }
  else
  {
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 1;
  }
  sub_10008E1B8((uint64_t)&v59, (uint64_t)v63, &qword_100158E88);
  if (v64 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_100028C8C((uint64_t)v63, &qword_100158E88);
LABEL_22:
    (*(void (**)(uint64_t))(*(void *)v2 + 336))(v20);
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;
    sub_10008D7F4();
    swift_allocError();
    *(void *)uint64_t v26 = v23;
    *(void *)(v26 + 8) = v25;
    *(unsigned char *)(v26 + 16) = 0;
    swift_willThrow();
    goto LABEL_23;
  }
  sub_10008E1B8((uint64_t)v63, (uint64_t)v65, &qword_1001578E0);
  if (!v66)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_100028C8C((uint64_t)v65, &qword_1001578E0);
    goto LABEL_22;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  id v67 = v9;
  int v21 = v57;
  swift_bridgeObjectRelease();
  if (v21 < kTransparencyProtocolVersion)
  {
    uint64_t v22 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 336))(v22);
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
    sub_10008D7F4();
    swift_allocError();
    *(void *)uint64_t v35 = v32;
    *(void *)(v35 + 8) = v34;
    *(unsigned char *)(v35 + 16) = 1;
    swift_willThrow();
LABEL_23:
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;
  id v30 = v67;
  if ([v67 respondsToSelector:"__swift_objectForKeyedSubscript:"])
  {
    *(void *)&long long v57 = v27;
    *((void *)&v57 + 1) = v29;
    swift_bridgeObjectRetain();
    id v31 = [v30 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v31)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v57 = 0u;
      long long v58 = 0u;
    }
    sub_10008E1B8((uint64_t)&v57, (uint64_t)&v59, &qword_1001578E0);
  }
  else
  {
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 1;
  }
  sub_10008E1B8((uint64_t)&v59, (uint64_t)v63, &qword_100158E88);
  if (v64 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = sub_100028C8C((uint64_t)v63, &qword_100158E88);
LABEL_39:
    (*(void (**)(uint64_t))(*(void *)v2 + 336))(v36);
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;
    sub_10008D7F4();
    swift_allocError();
    *(void *)uint64_t v45 = v42;
    *(void *)(v45 + 8) = v44;
LABEL_51:
    *(unsigned char *)(v45 + 16) = 0;
    swift_willThrow();
    goto LABEL_23;
  }
  sub_10008E1B8((uint64_t)v63, (uint64_t)v65, &qword_1001578E0);
  if (!v66)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = sub_100028C8C((uint64_t)v65, &qword_1001578E0);
    goto LABEL_39;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  uint64_t v37 = 0x4E574F4E4B4E55;
  char v38 = v57;
  swift_bridgeObjectRelease();
  uint64_t v39 = *(int *)(v2 + 136);
  if (v39 > 6)
  {
    uint64_t v41 = 0xE700000000000000;
    uint64_t v40 = 0x4E574F4E4B4E55;
  }
  else
  {
    uint64_t v40 = *(void *)&aUnknownIds[8 * v39];
    uint64_t v41 = *(void *)&aTlt[8 * v39];
  }
  if (!v4[2] || (unint64_t v46 = sub_100049298(v40, v41), (v47 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  uint64_t v48 = *(void *)(v4[7] + 8 * v46);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65[0] = v48;
  sub_100020378(&qword_100158E90);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_47:
    if (v39 > 6)
    {
      unint64_t v51 = 0xE700000000000000;
    }
    else
    {
      uint64_t v37 = *(void *)&aUnknownIds[8 * v39];
      unint64_t v51 = *(void *)&aTlt[8 * v39];
    }
    sub_10008D7F4();
    swift_allocError();
    *(void *)uint64_t v45 = v37;
    *(void *)(v45 + 8) = v51;
    goto LABEL_51;
  }
  uint64_t v49 = sub_100089040(v63[0]);
  swift_bridgeObjectRelease();
  if (v39 > 6)
  {
    uint64_t v50 = 0xE700000000000000;
  }
  else
  {
    uint64_t v37 = *(void *)&aUnknownIds[8 * v39];
    uint64_t v50 = *(void *)&aTlt[8 * v39];
  }
  id v52 = [*(id *)(v2 + 128) transparencySettings:v57, v58, v59, v60, v61, v62];
  id v53 = objc_allocWithZone((Class)TransparencyPublicKeyBag);
  id v54 = sub_10008DF38(v49, v37, v50, (uint64_t)v52, 1);
  swift_unknownObjectRelease();
  swift_beginAccess();
  uint64_t v55 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = v54;
  id v56 = v54;

  if ((v38 & 1) == 0) {
    (*(void (**)(void))(*(void *)v2 + 240))(0);
  }
  swift_unknownObjectRelease();
}

uint64_t sub_10008AA68(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_10008AB38, v1, 0);
}

uint64_t sub_10008AB38()
{
  uint64_t v23 = v0;
  uint64_t v1 = (int *)v0[6];
  uint64_t v2 = v1[34];
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 160))();

  uint64_t v4 = *(void *)v1;
  if (v3)
  {
    if (((*(uint64_t (**)(void))(v4 + 232))() & 1) == 0
      || ((*(uint64_t (**)(void))(*(void *)v0[6] + 200))() & 1) != 0)
    {
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v5 = v0[10];
      uint64_t v7 = v0[7];
      uint64_t v6 = v0[8];
      uint64_t v8 = sub_1000294A8(v7, (uint64_t)qword_1001623E8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
      id v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136446210;
        if (v2 > 6)
        {
          uint64_t v12 = 0x4E574F4E4B4E55;
          unint64_t v13 = 0xE700000000000000;
        }
        else
        {
          uint64_t v12 = *(void *)&aUnknownIds[8 * v2];
          unint64_t v13 = *(void *)&aTlt[8 * v2];
        }
        uint64_t v21 = v0[10];
        uint64_t v18 = v0[7];
        uint64_t v17 = v0[8];
        v0[4] = sub_1000262AC(v12, v13, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "have key bag for %{public}s, but triggering refresh", v11, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v18);
      }
      else
      {
        uint64_t v14 = v0[10];
        uint64_t v15 = v0[7];
        uint64_t v16 = v0[8];

        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
      }
    }
  }
  else
  {
    (*(void (**)(void))(v4 + 344))();
    v0[11] = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_10008B1BC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_10008B35C;
  }
  else {
    uint64_t v4 = sub_10008B2E8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10008B2E8()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008B35C()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10008B3D4()
{
  qword_100162400 = 0x6142666E43545753;
  *(void *)algn_100162408 = 0xE900000000000067;
}

uint64_t *sub_10008B3FC()
{
  if (qword_100160038 != -1) {
    swift_once();
  }
  return &qword_100162400;
}

uint64_t sub_10008B448()
{
  if (qword_100160038 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_100162400;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_10008B4B0(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_10008B570, v1, 0);
}

uint64_t sub_10008B570()
{
  uint64_t v81 = v0;
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = type metadata accessor for URL();
  *(void *)(v0 + 96) = v2;
  uint64_t v3 = *(void **)(v2 - 8);
  *(void *)(v0 + 104) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 112) = v4;
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v78 = v1;
  sub_10002BCF8(v1, v5);
  char v73 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v74 = v6;
  os_log_t log = (os_log_t)v5;
  uint64_t v7 = (void *)v73(v5, v6);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 urlForKey:v8];

  sub_100020378(&qword_100157A70);
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = v10;
  if (v9)
  {
    uint64_t v12 = swift_task_alloc();
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v3[4];
    v13(v11, v12, v2);
    double v72 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3[7];
    v72(v11, 0, 1, v2);
    swift_task_dealloc();
    NSString v71 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v3[6];
    if (v71(v11, 1, v2) != 1)
    {
      v13(v4, v11, v2);
      swift_task_dealloc();
      sub_100038600(0, (unint64_t *)&qword_100158860);
      uint64_t v14 = swift_task_alloc();
      unint64_t v70 = v3;
      uint64_t v69 = (void (*)(uint64_t, uint64_t, uint64_t))v3[2];
      v69(v14, v4, v2);
      uint64_t v15 = self;
      [v15 defaultNetworkTimeout];
      id v17 = sub_1000C03B4(v14, v16);
      *(void *)(v0 + 120) = v17;
      swift_task_dealloc();
      NSString v18 = String._bridgeToObjectiveC()();
      [v17 setHTTPMethod:v18];

      NSString v19 = String._bridgeToObjectiveC()();
      NSString v20 = String._bridgeToObjectiveC()();
      [v17 setValue:v19 forHTTPHeaderField:v20];

      NSString v21 = [v15 deviceUserAgent];
      if (!v21)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v21 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      uint64_t v22 = *(void *)(v0 + 64);
      NSString v23 = String._bridgeToObjectiveC()();
      [v17 setValue:v21 forHTTPHeaderField:v23];

      int v24 = *(_DWORD *)(v22 + 136);
      *(_DWORD *)(v0 + 224) = v24;
      *(_DWORD *)(v0 + 228) = v24;
      sub_10008E068();
      BinaryInteger.description.getter();
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v17 setValue:v25 forHTTPHeaderField:off_100156D90];

      id v26 = (id)ProtocolVersion_EnumDescriptor();
      id v27 = [v26 textFormatNameForValue:kTransparencyProtocolVersion];

      [v17 setValue:v27 forHTTPHeaderField:off_100156D98];
      NSString v28 = [v15 transparencyVersionStr];
      if (!v28)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v28 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v17 setValue:v28 forHTTPHeaderField:off_100156DA8];

      id v29 = [v15 automatedDeviceGroup];
      if (v29)
      {
        id v30 = v29;
        [v17 setValue:v29 forHTTPHeaderField:off_100156DA0];
      }
      id v31 = (void *)v73((uint64_t)log, v74);
      id v32 = [v31 currentEnvironment];

      if (sub_10002F830((uint64_t)v32))
      {
        [v17 _setPrivacyProxyFailClosed:1];
        if (qword_100160030 != -1) {
          swift_once();
        }
        sub_1000294A8(*(void *)(v0 + 72), (uint64_t)qword_1001623E8);
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v35 = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Enforcing privacy proxy", v35, 2u);
          swift_slowDealloc();
        }
      }
      if (qword_100160030 != -1) {
        swift_once();
      }
      uint64_t v36 = *(void *)(v0 + 80);
      uint64_t v37 = *(void *)(v0 + 88);
      uint64_t v38 = *(void *)(v0 + 72);
      uint64_t v39 = sub_1000294A8(v38, (uint64_t)qword_1001623E8);
      *(void *)(v0 + 128) = v39;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v37, v39, v38);
      id v40 = v17;
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        os_log_type_t v75 = v42;
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 136315138;
        uint64_t v44 = swift_task_alloc();
        id v45 = [v40 URL];
        uint64_t v46 = swift_task_alloc();
        if (v45)
        {
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v47 = 0;
        }
        else
        {
          uint64_t v47 = 1;
        }
        loga = v41;
        v72(v46, v47, 1, v2);
        sub_10008E1B8(v46, v44, &qword_100157A70);
        if (v71(v44, 1, v2))
        {
          swift_task_dealloc();
          sub_100028C8C(v44, &qword_100157A70);
          unint64_t v56 = 0xE100000000000000;
          uint64_t v57 = 45;
        }
        else
        {
          long long v58 = v43;
          uint64_t v59 = swift_task_alloc();
          v69(v59, v44, v2);
          sub_100028C8C(v44, &qword_100157A70);
          uint64_t v57 = URL.description.getter();
          unint64_t v56 = v60;
          ((void (*)(uint64_t, uint64_t))v70[1])(v59, v2);
          uint64_t v43 = v58;
          swift_task_dealloc();
          swift_task_dealloc();
        }
        uint64_t v61 = *(void *)(v0 + 80);
        uint64_t v62 = *(void *)(v0 + 88);
        uint64_t v63 = *(void *)(v0 + 72);
        swift_task_dealloc();
        *(void *)(v0 + 48) = sub_1000262AC(v57, v56, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, loga, v75, "configuring from network %s", v43, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v63);
      }
      else
      {
        uint64_t v53 = *(void *)(v0 + 80);
        uint64_t v54 = *(void *)(v0 + 88);
        uint64_t v55 = *(void *)(v0 + 72);

        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
      }
      uint64_t v65 = v78[3];
      uint64_t v64 = v78[4];
      sub_10002BCF8(*(void **)(v0 + 56), v65);
      uint64_t v66 = type metadata accessor for URLRequest();
      *(void *)(v0 + 136) = v66;
      *(void *)(v0 + 144) = *(void *)(v66 - 8);
      uint64_t v67 = swift_task_alloc();
      *(void *)(v0 + 152) = v67;
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 + 16) + **(int **)(v64 + 16));
      uint64_t v68 = (void *)swift_task_alloc();
      *(void *)(v0 + 160) = v68;
      void *v68 = v0;
      v68[1] = sub_10008C0D4;
      return v79(v67, v65, v64);
    }
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3[7])(v10, 1, 1, v2);
  }
  uint64_t v48 = *(void *)(v0 + 64);
  sub_100028C8C(v11, &qword_100157A70);
  swift_task_dealloc();
  uint64_t v49 = swift_task_dealloc();
  (*(void (**)(uint64_t))(*(void *)v48 + 216))(v49);
  sub_10008D7F4();
  swift_allocError();
  *(_OWORD *)uint64_t v50 = xmmword_10010D010;
  *(unsigned char *)(v50 + 16) = 2;
  swift_willThrow();
  swift_task_dealloc();
  unint64_t v51 = *(uint64_t (**)(void))(v0 + 8);
  return v51();
}

uint64_t sub_10008C0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[21] = a1;
  v5[22] = a2;
  v5[23] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[19];
  uint64_t v7 = v4[18];
  uint64_t v8 = v4[17];
  uint64_t v9 = v4[8];
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  if (v2)
  {
    uint64_t v10 = sub_10008C9A8;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v10 = sub_10008C268;
  }
  return _swift_task_switch(v10, v9, 0);
}

uint64_t sub_10008C268()
{
  unint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  id v4 = objc_allocWithZone((Class)PublicKeysResponse);
  sub_10002BD94(v3, v1);
  id v5 = sub_100038540();
  *(void *)(v0 + 192) = v5;
  uint64_t v7 = *(void *)(v0 + 168);
  unint64_t v6 = *(void *)(v0 + 176);
  if (v2)
  {
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v9 = *(void **)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 104);
    sub_10002BD3C(*(void *)(v0 + 168), *(void *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
    sub_10002BD3C(v7, v6);

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    uint64_t v12 = v5;
    uint64_t v13 = *(int *)(v0 + 228);
    sub_10002BD3C(*(void *)(v0 + 168), *(void *)(v0 + 176));
    if (v13 >= 7)
    {
      uint64_t v16 = 0xE700000000000000;
      uint64_t v15 = 0x4E574F4E4B4E55;
    }
    else
    {
      uint64_t v14 = 8 * v13;
      uint64_t v15 = *(void *)&aUnknownIds[8 * v13];
      uint64_t v16 = *(void *)&aTlt[v14];
    }
    id v17 = *(void **)(*(void *)(v0 + 64) + 128);
    id v18 = v12;
    id v19 = [v17 transparencySettings];
    id v20 = objc_allocWithZone((Class)TransparencyPublicKeyBag);
    id v21 = sub_10008E0BC((uint64_t)v18, v15, v16, (uint64_t)v19, 1);
    *(void *)(v0 + 200) = v21;
    *(void *)(v0 + 208) = 0;
    int v24 = v21;
    swift_unknownObjectRelease();

    id v25 = [v24 verifiedLogHeads];
    sub_100038600(0, (unint64_t *)&qword_1001575C8);
    unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000893F4(v26);
    swift_bridgeObjectRelease();
    id v27 = [v24 tltLogBeginningMs];
    id v28 = [v24 patLogBeginningMs];
    id v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v29;
    *id v29 = v0;
    v29[1] = sub_10008C584;
    uint64_t v30 = *(void *)(v0 + 64);
    v29[8] = v28;
    v29[9] = v30;
    v29[7] = v27;
    return _swift_task_switch(sub_100089D1C, v30, 0);
  }
}

uint64_t sub_10008C584()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_10008C694, v1, 0);
}

uint64_t sub_10008C694()
{
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = v0[8];
  swift_beginAccess();
  uint64_t v3 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = v1;
  id v4 = v1;

  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "storing public key to disk", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = v0[26];

  sub_1000887E4();
  if (v8)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      v0[5] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v12 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "failed to write new public key response to disk: %@", v11, 0xCu);
      sub_100020378(&qword_1001590C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    id v20 = v9;
    uint64_t v22 = (void *)v0[24];
    id v21 = (void *)v0[25];
    uint64_t v24 = v0[21];
    unint64_t v23 = v0[22];
    uint64_t v26 = v0[14];
    id v25 = (void *)v0[15];
    uint64_t v27 = v0[13];
    uint64_t v29 = v0[12];

    swift_willThrow();
    sub_10002BD3C(v24, v23);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v29);
    swift_task_dealloc();
    swift_task_dealloc();
    id v19 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v15 = (void *)v0[24];
    uint64_t v14 = (void *)v0[25];
    uint64_t v16 = v0[21];
    unint64_t v17 = v0[22];
    id v18 = (void *)v0[15];
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);

    sub_10002BD3C(v16, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    id v19 = (uint64_t (*)(void))v0[1];
  }
  return v19();
}

uint64_t sub_10008C9A8()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10008CA4C()
{
  *(void *)(v1 + 96) = v0;
  return _swift_task_switch(sub_10008CA6C, v0, 0);
}

uint64_t sub_10008CA6C()
{
  sub_100029208(*(void *)(v0 + 96) + 144, v0 + 56, &qword_100158E30);
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 96);
    sub_10003CD24((long long *)(v0 + 56), v0 + 16);
    uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 352) + **(int **)(*(void *)v1 + 352));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10008CC28;
    return v6(v0 + 16);
  }
  else
  {
    sub_100028C8C(v0 + 56, &qword_100158E30);
    sub_10008D7F4();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 16) = 2;
    swift_willThrow();
    id v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_10008CC28()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v4 = sub_10008CDB8;
  }
  else {
    uint64_t v4 = sub_10008CD54;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10008CD54()
{
  sub_100028A4C(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008CDB8()
{
  sub_100028A4C(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008CE1C()
{
  *(void *)(v1 + 216) = v0;
  return _swift_task_switch(sub_10008CE3C, v0, 0);
}

uint64_t sub_10008CE3C()
{
  sub_100029208(*(void *)(v0 + 216) + 144, v0 + 160, &qword_100158E30);
  if (*(void *)(v0 + 184))
  {
    uint64_t v1 = *(void *)(v0 + 216);
    sub_10003CD24((long long *)(v0 + 160), v0 + 120);
    uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 360) + **(int **)(*(void *)v1 + 360));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10008CFF8;
    return v6(v0 + 120);
  }
  else
  {
    sub_100028C8C(v0 + 160, &qword_100158E30);
    sub_10008D7F4();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 16) = 2;
    swift_willThrow();
    id v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_10008CFF8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 216);
  if (v0) {
    uint64_t v4 = sub_10008D200;
  }
  else {
    uint64_t v4 = sub_10008D124;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10008D124()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 216) + 120);
  if (qword_100160038 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 logResultForEvent:v2 hardFailure:1 result:0];

  sub_100028A4C(v0 + 120);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10008D200()
{
  uint64_t v1 = *(void **)(v0[27] + 120);
  if (qword_100160038 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  sub_100020378(&qword_100158CD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010B120;
  v0[25] = 112;
  v0[26] = 0xE100000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[19];
  sub_10002BCF8(v0 + 15, v5);
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  id v8 = [v7 currentEnvironment];

  BOOL v9 = sub_10002F830((uint64_t)v8);
  *(void *)(inited + 96) = &type metadata for Bool;
  *(unsigned char *)(inited + 72) = v9;
  sub_100074B50(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 logResultForEvent:v2 hardFailure:1 result:v3 withAttributes:isa];

  swift_errorRelease();
  sub_100028A4C((uint64_t)(v0 + 15));
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10008D408()
{
  swift_unknownObjectRelease();
  sub_100028C8C(v0 + 144, &qword_100158E30);
  sub_100028C8C(v0 + 184, &qword_100158E38);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100028A4C(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_100158E40);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10008D4D4()
{
  swift_unknownObjectRelease();
  sub_100028C8C(v0 + 144, &qword_100158E30);
  sub_100028C8C(v0 + 184, &qword_100158E38);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100028A4C(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_100158E40);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10008D5B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SWTPublicKeyBag()
{
  uint64_t result = qword_100160260;
  if (!qword_100160260) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008D648(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100021024;
  v5[7] = a1;
  v5[8] = v4;
  return _swift_task_switch(sub_100085FBC, v4, 0);
}

uint64_t sub_10008D6FC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100029274;
  v5[7] = a1;
  v5[8] = v4;
  return _swift_task_switch(sub_100086434, v4, 0);
}

unint64_t sub_10008D7AC()
{
  unint64_t result = qword_100158E78;
  if (!qword_100158E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158E78);
  }
  return result;
}

unint64_t sub_10008D7F4()
{
  unint64_t result = qword_100158E80;
  if (!qword_100158E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158E80);
  }
  return result;
}

uint64_t sub_10008D848(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100020378(&qword_100159090);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *id v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10008DB60(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100049298(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10008DCD0();
LABEL_7:
    id v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10008D848(v15, a4 & 1);
  unint64_t v21 = sub_100049298(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  id v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void *sub_10008DCD0()
{
  uint64_t v1 = v0;
  sub_100020378(&qword_100159090);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10008DE88(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  int64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

id sub_10008DF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = 0;
  id v10 = [v5 initWithDiskKeyStore:isa application:v9 settings:a4 allowOldKeys:a5 & 1 error:&v14];

  if (v10)
  {
    id v11 = v14;
  }
  else
  {
    id v12 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v10;
}

unint64_t sub_10008E068()
{
  unint64_t result = qword_100158EA8;
  if (!qword_100158EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158EA8);
  }
  return result;
}

id sub_10008E0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = 0;
  id v10 = [v5 initWithPublicKeysResponse:a1 application:v9 settings:a4 allowOldKeys:a5 & 1 error:&v14];

  if (v10)
  {
    id v11 = v14;
  }
  else
  {
    id v12 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v10;
}

uint64_t sub_10008E1B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100020378(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for SWTPublicKeyBagError(uint64_t a1)
{
  return sub_10008E234(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_10008E234(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s15swtransparencyd20SWTPublicKeyBagErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000850F0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SWTPublicKeyBagError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000850F0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10008E234(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SWTPublicKeyBagError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10008E234(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SWTPublicKeyBagError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SWTPublicKeyBagError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10008E3C4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10008E3DC(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SWTPublicKeyBagError()
{
  return &type metadata for SWTPublicKeyBagError;
}

uint64_t sub_10008E404()
{
  return type metadata accessor for SWTPublicKeyBag();
}

uint64_t sub_10008E40C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

unint64_t sub_10008E4EC()
{
  unint64_t result = qword_100159088;
  if (!qword_100159088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159088);
  }
  return result;
}

uint64_t sub_10008E540()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008E578(uint64_t a1)
{
  int v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100021024;
  unsigned __int8 v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100158CE8 + dword_100158CE8);
  return v6(a1, v4);
}

uint64_t sub_10008E634()
{
  return sub_1000916EC((uint64_t)&off_100139828);
}

uint64_t sub_10008E640@<X0>(uint64_t a1@<X8>)
{
  static TaskPriority.userInitiated.getter();
  uint64_t v2 = type metadata accessor for TaskPriority();
  unsigned int v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

uint64_t sub_10008E6B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100091760(v1 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_priority, a1);
}

uint64_t sub_10008E6C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_deps, a1);
}

uint64_t sub_10008E6D8()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_pendingFetch);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10008E720(char a1)
{
  unsigned int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_pendingFetch);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*sub_10008E76C())()
{
  return j__swift_endAccess;
}

uint64_t sub_10008E7C8(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_10008E808(a1);
  return v2;
}

uint64_t sub_10008E808(long long *a1)
{
  swift_defaultActor_initialize();
  *(unsigned char *)(v1 + 112) = 1;
  *(void *)(v1 + 120) = sub_1000916EC((uint64_t)&off_100139850);
  uint64_t v3 = v1 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_priority;
  static TaskPriority.userInitiated.getter();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_pendingFetch) = 0;
  sub_10003CD24(a1, v1 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_deps);
  return v1;
}

uint64_t sub_10008E8C8(unsigned __int8 a1)
{
  v2[2] = v1;
  if (a1 <= 6u && ((1 << a1) & 0x45) != 0)
  {
    unsigned __int8 v6 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 176) + **(int **)(*(void *)v1 + 176));
    uint64_t v3 = (void *)swift_task_alloc();
    v2[3] = v3;
    void *v3 = v2;
    v3[1] = sub_10008EA14;
    return v6();
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(uint64_t))v2[1];
    return v5(10);
  }
}

uint64_t sub_10008EA14(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10008EB2C, v2, 0);
}

uint64_t sub_10008EB2C()
{
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 62)
  {
    if (v1 >> 62 == 1)
    {
      sub_1000665E0(v1);
      uint64_t v2 = 10;
    }
    else if (v1 == 0x8000000000000000)
    {
      uint64_t v2 = 4;
    }
    else
    {
      uint64_t v2 = 10;
    }
  }
  else
  {
    sub_1000665E0(v1);
    uint64_t v2 = 11;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_10008EBC4(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 176) + **(int **)(*(void *)v1 + 176));
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_10008ECBC;
  return v5();
}

uint64_t sub_10008ECBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10008EDD4, v2, 0);
}

uint64_t sub_10008EDD4()
{
  unint64_t v1 = v0[5];
  if (!(v1 >> 62))
  {
    uint64_t v2 = v0[2];
    sub_1000665E0(v1);
    uint64_t v8 = (uint64_t (*)(void))(*(void *)(*(void *)v2 + 216) + **(int **)(*(void *)v2 + 216));
    uint64_t v3 = (void *)swift_task_alloc();
    v0[6] = v3;
    void *v3 = v0;
    uint64_t v4 = sub_10008EFF4;
LABEL_10:
    v3[1] = v4;
    return v8(0);
  }
  if (v1 >> 62 == 1)
  {
    sub_1000665E0(v1);
LABEL_9:
    uint64_t v8 = (uint64_t (*)(void))(*(void *)(*(void *)v0[2] + 216) + **(int **)(*(void *)v0[2] + 216));
    uint64_t v3 = (void *)swift_task_alloc();
    v0[9] = v3;
    void *v3 = v0;
    uint64_t v4 = sub_10008F158;
    goto LABEL_10;
  }
  if (v1 != 0x8000000000000000) {
    goto LABEL_9;
  }
  uint64_t v5 = v0[2];
  unint64_t v6 = (*(void *)v5 + 192) & 0xFFFFFFFFFFFFLL | 0xBE86000000000000;
  v0[7] = *(void *)(*(void *)v5 + 192);
  v0[8] = v6;
  return _swift_task_switch(sub_10008F0EC, v5, 0);
}

uint64_t sub_10008EFF4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(unint64_t))(v3 + 8);
  return v1(0x8000000000000000);
}

uint64_t sub_10008F0EC()
{
  (*(void (**)(uint64_t))(v0 + 56))(1);
  unint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(4);
}

uint64_t sub_10008F158()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(unint64_t))(v3 + 8);
  return v1(0x8000000000000000);
}

uint64_t sub_10008F250()
{
  v1[16] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  return _swift_task_switch(sub_10008F310, v0, 0);
}

uint64_t sub_10008F310()
{
  if ((*(uint64_t (**)(void))(*(void *)v0[16] + 128))())
  {
    swift_task_dealloc();
    unint64_t v1 = (uint64_t (*)(unint64_t))v0[1];
    return v1(0x8000000000000008);
  }
  else
  {
    uint64_t v3 = v0[16];
    uint64_t v4 = *(void (**)(uint64_t))(*(void *)v3 + 136);
    uint64_t v5 = (*(void *)v3 + 136) & 0xFFFFFFFFFFFFLL | 0x3DFD000000000000;
    v0[20] = v4;
    v0[21] = v5;
    v4(1);
    unint64_t v6 = (void *)(v3 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_deps);
    uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_deps + 24);
    uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_deps + 32);
    sub_10002BCF8((void *)(v3 + OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_deps), v7);
    v0[22] = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(v7, v8);
    uint64_t v9 = v6[3];
    uint64_t v10 = v6[4];
    sub_10002BCF8(v6, v9);
    id v12 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v10 + 96) + **(int **)(v10 + 96));
    id v11 = (void *)swift_task_alloc();
    v0[23] = v11;
    *id v11 = v0;
    v11[1] = sub_10008F504;
    return v12(v9, v10);
  }
}

uint64_t sub_10008F504(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10008F61C, v2, 0);
}

uint64_t sub_10008F61C()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = (void *)v0[22];
  v0[2] = v0;
  v0[3] = sub_10008F718;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10008FB04;
  v0[13] = &unk_100139878;
  v0[14] = v3;
  [v2 configureWithFetcher:v1 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10008F718()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 200) = v2;
  uint64_t v3 = *(void *)(v1 + 128);
  if (v2) {
    uint64_t v4 = sub_10008F8C8;
  }
  else {
    uint64_t v4 = sub_10008F838;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10008F838()
{
  uint64_t v1 = *(void (**)(void))(v0 + 160);

  swift_unknownObjectRelease();
  v1(0);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v2(0x8000000000000000);
}

uint64_t sub_10008F8C8()
{
  uint64_t v1 = (void *)v0[22];
  uint64_t v2 = (void (*)(void))v0[20];
  swift_willThrow();

  swift_unknownObjectRelease();
  v2(0);
  Logger.init()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[15] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "load config threw error: %@", v5, 0xCu);
    sub_100020378(&qword_1001590C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[25];
  uint64_t v10 = v0[18];
  uint64_t v9 = v0[19];
  uint64_t v11 = v0[17];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  type metadata accessor for ReachabilityTracker(0);
  id v12 = (void *)_convertErrorToNSError(_:)();
  sub_100025484(v12);
  char v14 = v13;

  if (v14) {
    uint64_t v15 = v8;
  }
  else {
    uint64_t v15 = v8 | 0x4000000000000000;
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
  return v16(v15);
}

uint64_t sub_10008FB04(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_100020378(&qword_1001570C0);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t sub_10008FB9C()
{
  return sub_100090934(&OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_priority, &OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_deps);
}

uint64_t sub_10008FBB0()
{
  return sub_1000909A0(&OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_priority, &OBJC_IVAR____TtC15swtransparencyd22InitialLoadConfigState_deps);
}

uint64_t sub_10008FBC4(uint64_t a1)
{
  id v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 160) + **(int **)(*(void *)v1 + 160));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100091E94;
  return v6(a1);
}

uint64_t sub_10008FCC8(uint64_t a1)
{
  id v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 168) + **(int **)(*(void *)v1 + 168));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100091E94;
  return v6(a1);
}

void *sub_10008FDCC()
{
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10008FDD8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10008FDE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TaskPriority();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_10008FE4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100091760(v1 + OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_priority, a1);
}

uint64_t sub_10008FE60@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_deps, a1);
}

uint64_t sub_10008FE74(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v2 + 112) = 3;
  *(void *)(v2 + 120) = &_swiftEmptySetSingleton;
  uint64_t v3 = v2 + OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_priority;
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  sub_10003CD24(a1, v2 + OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_deps);
  return v2;
}

uint64_t sub_10008FF2C(long long *a1)
{
  swift_defaultActor_initialize();
  *(unsigned char *)(v1 + 112) = 3;
  *(void *)(v1 + 120) = &_swiftEmptySetSingleton;
  uint64_t v3 = v1 + OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_priority;
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  sub_10003CD24(a1, v1 + OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_deps);
  return v1;
}

uint64_t sub_10008FFD4()
{
  return sub_100091828(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 10);
}

uint64_t sub_10009000C()
{
  *(void *)(v1 + 16) = v0;
  sub_100020378(&qword_100157030);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_1000900A0, v0, 0);
}

uint64_t sub_1000900A0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = os_transaction_create();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = sub_1000919A8(&qword_1001590E0, (void (*)(uint64_t))type metadata accessor for LoadConfigState);
  id v6 = (void *)swift_allocObject();
  _OWORD v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  v6[5] = v3;
  swift_retain_n();
  uint64_t v7 = sub_1000907A4(v2, (uint64_t)&unk_100159148, (uint64_t)v6) | 0x4000000000000000;
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

uint64_t sub_1000901F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a1;
  *(void *)(v4 + 128) = a4;
  return _swift_task_switch(sub_100090210, a4, 0);
}

uint64_t sub_100090210()
{
  uint64_t v1 = (void *)(v0[16] + OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_deps);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10002BCF8(v1, v2);
  v0[17] = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  sub_10002BCF8(v1, v4);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 96) + **(int **)(v5 + 96));
  id v6 = (void *)swift_task_alloc();
  v0[18] = v6;
  *id v6 = v0;
  v6[1] = sub_10009035C;
  return v8(v4, v5);
}

uint64_t sub_10009035C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100090474, v2, 0);
}

uint64_t sub_100090474()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = (void *)v0[17];
  v0[2] = v0;
  v0[3] = sub_100090570;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10008FB04;
  v0[13] = &unk_1001399B8;
  v0[14] = v3;
  [v2 configureWithFetcher:v1 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100090570()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 160) = v2;
  uint64_t v3 = *(void *)(v1 + 128);
  if (v2) {
    uint64_t v4 = sub_10009070C;
  }
  else {
    uint64_t v4 = sub_100090690;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100090690()
{
  uint64_t v1 = *(unsigned char **)(v0 + 120);

  swift_unknownObjectRelease();
  *uint64_t v1 = 9;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10009070C()
{
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(unsigned char **)(v0 + 120);

  swift_unknownObjectRelease();
  *uint64_t v1 = 9;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000907A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1000917C8(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_100090920()
{
  return sub_100090934(&OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_priority, &OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_deps);
}

uint64_t sub_100090934(void *a1, void *a2)
{
  swift_bridgeObjectRelease();
  sub_1000917C8(v2 + *a1);
  sub_100028A4C(v2 + *a2);
  swift_defaultActor_destroy();
  return v2;
}

uint64_t sub_10009098C()
{
  return sub_1000909A0(&OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_priority, &OBJC_IVAR____TtC15swtransparencyd15LoadConfigState_deps);
}

uint64_t sub_1000909A0(void *a1, void *a2)
{
  swift_bridgeObjectRelease();
  sub_1000917C8(v2 + *a1);
  sub_100028A4C(v2 + *a2);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v2);
}

uint64_t sub_100090A08(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 128) + **(int **)(*(void *)v1 + 128));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100090B0C;
  return v6(a1);
}

uint64_t sub_100090B0C(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_100090C08(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 136) + **(int **)(*(void *)v1 + 136));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100090B0C;
  return v6(a1);
}

uint64_t sub_100090D0C(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t v4 = *v2;
  sub_100091DE8();
  swift_bridgeObjectRetain();
  uint64_t v5 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v8 = ~v6;
    sub_100091E3C();
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v7 = (v7 + 1) & v8;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    unsigned __int8 v10 = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unsigned __int8 v10 = a2;
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_100091144(a2, v7, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = v10;
  return result;
}

uint64_t sub_100090E6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100020378((uint64_t *)&unk_100159360);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    BOOL v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v27[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v27[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v27 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v27[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
      sub_100091DE8();
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100091144(uint64_t result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100090E6C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000912B8();
      goto LABEL_12;
    }
    sub_10009144C();
  }
  uint64_t v8 = *v3;
  sub_100091DE8();
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_100091E3C();
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v11 + 48) + a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000912B8()
{
  uint64_t v1 = v0;
  sub_100020378((uint64_t *)&unk_100159360);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10009144C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100020378((uint64_t *)&unk_100159360);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    sub_100091DE8();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v9 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000916EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100091DE8();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned __int8 v5 = *v4++;
      sub_100090D0C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_100091760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000917C8(uint64_t a1)
{
  uint64_t v2 = sub_100020378(&qword_100157030);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100091828(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t type metadata accessor for LoadConfigState(uint64_t a1)
{
  return sub_100028514(a1, (uint64_t *)&unk_100160480);
}

uint64_t sub_100091858()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000918A0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  unsigned __int8 v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unsigned __int8 v5 = v2;
  v5[1] = sub_100021024;
  v5[15] = a1;
  v5[16] = v4;
  return _swift_task_switch(sub_100090210, v4, 0);
}

uint64_t sub_100091950(uint64_t a1)
{
  uint64_t result = sub_1000919A8(&qword_100159160, (void (*)(uint64_t))type metadata accessor for InitialLoadConfigState);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000919A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for InitialLoadConfigState(uint64_t a1)
{
  return sub_100028514(a1, (uint64_t *)&unk_100160470);
}

uint64_t sub_100091A10(uint64_t a1)
{
  uint64_t result = sub_1000919A8(&qword_1001590E0, (void (*)(uint64_t))type metadata accessor for LoadConfigState);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100091A68()
{
  return type metadata accessor for InitialLoadConfigState(0);
}

void sub_100091A70()
{
  sub_100091B38();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100091B38()
{
  if (!qword_1001591A0)
  {
    type metadata accessor for TaskPriority();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001591A0);
    }
  }
}

unint64_t *initializeBufferWithCopyOfBuffer for InitialLoadConfigState.FetchStatus(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1000665B4(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for InitialLoadConfigState.FetchStatus(unint64_t *a1)
{
  return sub_1000665E0(*a1);
}

unint64_t *assignWithCopy for InitialLoadConfigState.FetchStatus(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1000665B4(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_1000665E0(v4);
  return a1;
}

unint64_t *assignWithTake for InitialLoadConfigState.FetchStatus(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_1000665E0(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitialLoadConfigState.FetchStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for InitialLoadConfigState.FetchStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

unint64_t *sub_100091CE8(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for InitialLoadConfigState.FetchStatus()
{
  return &type metadata for InitialLoadConfigState.FetchStatus;
}

uint64_t sub_100091D24()
{
  return type metadata accessor for LoadConfigState(0);
}

void sub_100091D2C()
{
  sub_100091B38();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unint64_t sub_100091DE8()
{
  unint64_t result = qword_100159350;
  if (!qword_100159350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159350);
  }
  return result;
}

unint64_t sub_100091E3C()
{
  unint64_t result = qword_100159358;
  if (!qword_100159358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159358);
  }
  return result;
}

uint64_t sub_100091EA0()
{
  sub_100020338();
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  v6[1] = _swiftEmptyArrayStorage;
  sub_1000AA330();
  sub_100020378(&qword_100156FE0);
  sub_1000AA37C((unint64_t *)&qword_100156FE8, &qword_100156FE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v2);
  (*(void (**)(char *, void))(v4 + 104))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100162438 = result;
  return result;
}

uint64_t *sub_1000920B8()
{
  if (qword_100160490 != -1) {
    swift_once();
  }
  return &qword_100162438;
}

id sub_100092104()
{
  if (qword_100160490 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100162438;

  return v0;
}

uint64_t sub_100092160()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_10009218C()
{
  return UUID.hash(into:)();
}

uint64_t sub_1000921B8(uint64_t a1)
{
  uint64_t v3 = sub_100020378(&qword_100157688);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  if (qword_100160490 != -1) {
    swift_once();
  }
  unsigned __int8 v6 = qword_100162438;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100092754;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100025E44;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100021288;
  aBlock[3] = &unk_100139CA8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009240C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157690);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state;
  switch(*(unsigned char *)(a1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state))
  {
    case 1:
      sub_100020378(&qword_100157688);
      uint64_t result = CheckedContinuation.resume(returning:)();
      char v15 = 5;
      goto LABEL_5;
    case 2:
      __break(1u);
      goto LABEL_7;
    case 3:
LABEL_7:
      __break(1u);
      goto LABEL_8;
    case 4:
      type metadata accessor for CancellationError();
      sub_1000A82BC(&qword_1001599C8, 255, (void (*)(uint64_t))&type metadata accessor for CancellationError);
      uint64_t v16 = swift_allocError();
      CancellationError.init()();
      v17[1] = v16;
      sub_100020378(&qword_100157688);
      uint64_t result = CheckedContinuation.resume(throwing:)();
      char v15 = 3;
      goto LABEL_5;
    case 5:
LABEL_8:
      __break(1u);
      JUMPOUT(0x10009266CLL);
    default:
      uint64_t v11 = sub_100020378(&qword_100157688);
      uint64_t v12 = *(void *)(v11 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      sub_1000AA2C8((uint64_t)v9, (uint64_t)v7);
      uint64_t v13 = a1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
      swift_beginAccess();
      sub_10002EC40((uint64_t)v7, v13);
      uint64_t result = swift_endAccess();
      char v15 = 2;
LABEL_5:
      *(unsigned char *)(a1 + v10) = v15;
      return result;
  }
}

uint64_t sub_100092684()
{
  uint64_t v1 = sub_100020378(&qword_100157688);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100092754()
{
  uint64_t v1 = *(void *)(sub_100020378(&qword_100157688) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10009240C(v2, v3);
}

uint64_t sub_1000927BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000927CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000927DC()
{
  return swift_release();
}

uint64_t sub_1000927E4()
{
  if (qword_100160490 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100162438;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_100092BD0;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_10002926C;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_100021288;
  _OWORD v5[3] = &unk_100139CF8;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009294C(uint64_t a1)
{
  uint64_t v2 = sub_100020378(&qword_100157688);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_100020378(&qword_100157690);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v12 = &v16[-v11];
  uint64_t v13 = OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state;
  char v14 = 1;
  switch(*(unsigned char *)(a1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state))
  {
    case 1:
      __break(1u);
      goto LABEL_8;
    case 2:
      uint64_t v15 = a1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
      swift_beginAccess();
      sub_100029208(v15, (uint64_t)v12, &qword_100157690);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2))
      {
        sub_100028C8C((uint64_t)v12, &qword_100157690);
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 16))(v5, v12, v2);
        sub_100028C8C((uint64_t)v12, &qword_100157690);
        CheckedContinuation.resume(returning:)();
        (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, 1, 1, v2);
      swift_beginAccess();
      sub_10002EC40((uint64_t)v9, v15);
      uint64_t result = swift_endAccess();
      char v14 = 5;
      goto LABEL_6;
    case 3:
    case 4:
      return result;
    case 5:
LABEL_8:
      __break(1u);
      JUMPOUT(0x100092BB8);
    default:
LABEL_6:
      *(unsigned char *)(a1 + v13) = v14;
      return result;
  }
}

uint64_t sub_100092BD0()
{
  return sub_10009294C(v0);
}

uint64_t sub_100092BD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100092BE8()
{
  if (qword_100160490 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100162438;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_10009303C;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_10002926C;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_100021288;
  _OWORD v5[3] = &unk_100139D48;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100092D50(uint64_t a1)
{
  uint64_t v2 = sub_100020378(&qword_100157688);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100020378(&qword_100157690);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v17 - v11;
  uint64_t v13 = OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state;
  char v14 = 4;
  switch(*(unsigned char *)(a1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state))
  {
    case 1:
    case 5:
      return result;
    case 2:
      uint64_t v15 = a1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
      swift_beginAccess();
      sub_100029208(v15, (uint64_t)v12, &qword_100157690);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2))
      {
        sub_100028C8C((uint64_t)v12, &qword_100157690);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v12, v2);
        sub_100028C8C((uint64_t)v12, &qword_100157690);
        type metadata accessor for CancellationError();
        sub_1000A82BC(&qword_1001599C8, 255, (void (*)(uint64_t))&type metadata accessor for CancellationError);
        uint64_t v16 = swift_allocError();
        CancellationError.init()();
        v17[0] = v16;
        CheckedContinuation.resume(throwing:)();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, 1, 1, v2);
      swift_beginAccess();
      sub_10002EC40((uint64_t)v9, v15);
      uint64_t result = swift_endAccess();
      char v14 = 3;
      goto LABEL_6;
    case 3:
    case 4:
      __break(1u);
      JUMPOUT(0x100093024);
    default:
LABEL_6:
      *(unsigned char *)(a1 + v13) = v14;
      return result;
  }
}

uint64_t sub_10009303C()
{
  return sub_100092D50(v0);
}

uint64_t sub_100093044()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100093054()
{
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation, &qword_100157690);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000930D0()
{
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation, &qword_100157690);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

Swift::Int sub_100093188()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 152))(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000931E8()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
  uint64_t v2 = sub_100020378(&qword_100157688);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  UUID.init()();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state) = 0;
  return v0;
}

uint64_t sub_100093288()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
  uint64_t v2 = sub_100020378(&qword_100157688);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  UUID.init()();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state) = 0;
  return v0;
}

uint64_t sub_100093314()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t sub_100093358()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

Swift::Int sub_10009339C()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 152))(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000933FC()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_100093430(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return _swift_task_switch(sub_100093454, v2, 0);
}

uint64_t sub_100093454()
{
  uint64_t v13 = v0;
  uint64_t v1 = v0[7];
  if (*(unsigned char *)(v1 + 112))
  {
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    type metadata accessor for ContinuationStore(0);
    uint64_t v4 = swift_allocObject();
    v0[8] = v4;
    uint64_t v5 = v4 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
    uint64_t v6 = sub_100020378(&qword_100157688);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    UUID.init()();
    *(unsigned char *)(v4 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state) = 0;
    swift_beginAccess();
    swift_retain();
    sub_1000A1B60(&v12, v4);
    swift_endAccess();
    swift_release();
    uint64_t v8 = sub_1000A82BC(&qword_100159378, v7, (void (*)(uint64_t))type metadata accessor for SMSemaphore);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[9] = v9;
    void *v9 = v0;
    v9[1] = sub_100093668;
    uint64_t v10 = v0[5];
    uint64_t v11 = v0[6];
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, v1, v8, v10, v11, sub_1000A1E78, v4, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_100093668()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_1000AA3CC;
  }
  else
  {
    uint64_t v4 = sub_1000937A0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000937A0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for ContinuationStore(uint64_t a1)
{
  return sub_100028514(a1, (uint64_t *)&unk_100160E40);
}

uint64_t sub_100093820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  void v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  return _swift_task_switch(sub_100093848, v4, 0);
}

uint64_t sub_100093848()
{
  uint64_t v15 = v0;
  uint64_t v1 = v0[9];
  if (*(unsigned char *)(v1 + 112))
  {
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v5 = v0[7];
    uint64_t v4 = v0[8];
    uint64_t v7 = v0[5];
    uint64_t v6 = v0[6];
    type metadata accessor for ContinuationStore(0);
    uint64_t v8 = swift_allocObject();
    v0[10] = v8;
    uint64_t v9 = v8 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
    uint64_t v10 = sub_100020378(&qword_100157688);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    UUID.init()();
    *(unsigned char *)(v8 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state) = 0;
    swift_beginAccess();
    swift_retain();
    sub_1000A1B60(&v14, v8);
    swift_endAccess();
    swift_release();
    sub_1000A82BC(&qword_100159378, v11, (void (*)(uint64_t))type metadata accessor for SMSemaphore);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[11] = v12;
    v12[2] = v5;
    void v12[3] = v4;
    v12[4] = v8;
    v12[5] = v7;
    v12[6] = v6;
    v12[7] = v1;
    uint64_t v13 = (void *)swift_task_alloc();
    v0[12] = v13;
    void *v13 = v0;
    v13[1] = sub_100093AA8;
    int64_t v17 = (char *)&type metadata for () + 8;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
  }
}

uint64_t sub_100093AA8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = sub_100093C34;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 72);
    swift_task_dealloc();
    uint64_t v4 = sub_100093BD0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100093BD0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100093C34()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100093CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  v8[5] = a2;
  sub_100020378(&qword_100157030);
  v8[12] = swift_task_alloc();
  return _swift_task_switch(sub_100093D44, a8, 0);
}

uint64_t sub_100093D44()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[12];
  uint64_t v18 = v0[11];
  uint64_t v19 = v0 + 15;
  uint64_t v3 = v0[8];
  uint64_t v16 = v0[9];
  uint64_t v17 = v0[10];
  uint64_t v6 = v0 + 6;
  uint64_t v4 = v0[6];
  uint64_t v5 = v6[1];
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  v8(v2, 1, 1, v7);
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = 0;
  v9[3] = 0;
  v9[4] = v4;
  v9[5] = v5;
  v9[6] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100094454(v2, (uint64_t)&unk_1001599A8, (uint64_t)v9);
  sub_100028C8C(v2, &qword_100157030);
  v8(v2, 1, 1, v7);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v16;
  v10[5] = v17;
  v10[6] = v3;
  swift_retain();
  sub_100094454(v2, (uint64_t)&unk_1001599B8, (uint64_t)v10);
  sub_100028C8C(v2, &qword_100157030);
  uint64_t v12 = sub_1000A82BC(&qword_100159378, v11, (void (*)(uint64_t))type metadata accessor for SMSemaphore);
  uint64_t v13 = (void *)swift_task_alloc();
  v1[13] = v13;
  uint64_t v14 = sub_100020378(&qword_1001599C0);
  void *v13 = v1;
  v13[1] = sub_100093F98;
  return ThrowingTaskGroup.next(isolation:)(v19, v18, v12, v14);
}

uint64_t sub_100093F98()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v4 = sub_100094160;
  }
  else {
    uint64_t v4 = sub_1000940C4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000940C4()
{
  sub_100020378(&qword_1001570C0);
  ThrowingTaskGroup.cancelAll()();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100094160()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_beginAccess();
  sub_1000A4254(v1);
  swift_endAccess();
  swift_release();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100094220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  void v6[2] = a1;
  v6[3] = a4;
  return _swift_task_switch(sub_100094244, 0, 0);
}

uint64_t sub_100094244()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100094308;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, v5, v2, sub_1000A1E78, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100094308()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10009443C, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10009443C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a1, (uint64_t)v9, &qword_100157030);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100028C8C((uint64_t)v9, &qword_100157030);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    _OWORD v19[2] = v12;
    uint64_t v19[3] = v14;
  }
  v18[1] = 1;
  id v18[2] = v16;
  uint64_t v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_100094634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  void v6[2] = a4;
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v6[5] = v7;
  v6[6] = *(void *)(v7 - 8);
  v6[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000946F8, 0, 0);
}

uint64_t sub_1000946F8()
{
  ContinuousClock.init()();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100157820 + dword_100157820);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000947B8;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return v5(v3, v2, 0, 0, 1);
}

uint64_t sub_1000947B8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  uint64_t v4 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_100094A24;
  }
  else {
    uint64_t v5 = sub_100094928;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100094928()
{
  (*(void (**)(void))(**(void **)(v0 + 32) + 176))();
  type metadata accessor for CancellationError();
  sub_1000A82BC(&qword_1001599C8, 255, (void (*)(uint64_t))&type metadata accessor for CancellationError);
  swift_allocError();
  CancellationError.init()();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100094A24()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100094A88()
{
  *(void *)(v1 + 40) = v0;
  return _swift_task_switch(sub_100094AA8, v0, 0);
}

uint64_t sub_100094AA8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if ((*(unsigned char *)(v1 + 112) & 1) == 0)
  {
    *(unsigned char *)(v1 + 112) = 1;
    swift_beginAccess();
    uint64_t v2 = swift_bridgeObjectRetain();
    sub_100094B98(v2);
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      uint64_t v3 = (void *)sub_1000A78DC((unint64_t)_swiftEmptyArrayStorage);
    }
    else {
      uint64_t v3 = &_swiftEmptySetSingleton;
    }
    *(void *)(v1 + 120) = v3;
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100094B98(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ContinuationStore(0);
    sub_1000A82BC(&qword_100159998, 255, (void (*)(uint64_t))type metadata accessor for ContinuationStore);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v12 = v4;
      goto LABEL_29;
    }
    int64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v15 >= v9) {
      return sub_10005D5B8();
    }
    unint64_t v16 = *(void *)(v18 + 8 * v15);
    uint64_t v12 = v4 + 1;
    if (!v16)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        return sub_10005D5B8();
      }
      unint64_t v16 = *(void *)(v18 + 8 * v12);
      if (!v16)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          return sub_10005D5B8();
        }
        unint64_t v16 = *(void *)(v18 + 8 * v12);
        if (!v16)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            return sub_10005D5B8();
          }
          unint64_t v16 = *(void *)(v18 + 8 * v12);
          if (!v16)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              return sub_10005D5B8();
            }
            unint64_t v16 = *(void *)(v18 + 8 * v12);
            if (!v16)
            {
              uint64_t v17 = v4 + 6;
              while (v9 != v17)
              {
                unint64_t v16 = *(void *)(v18 + 8 * v17++);
                if (v16)
                {
                  uint64_t v12 = v17 - 1;
                  goto LABEL_28;
                }
              }
              return sub_10005D5B8();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_29:
    uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    uint64_t v14 = swift_retain();
    if (!v13) {
      return sub_10005D5B8();
    }
    while (1)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 168))(v14);
      uint64_t result = swift_release();
      uint64_t v4 = v12;
      unint64_t v5 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ContinuationStore(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v13 = v24;
        uint64_t v14 = swift_unknownObjectRelease();
        uint64_t v12 = v4;
        uint64_t v10 = v5;
        if (v24) {
          continue;
        }
      }
      return sub_10005D5B8();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100094E78()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100094EA0()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100094ED8()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = &_swiftEmptySetSingleton;
  return v0;
}

uint64_t sub_100094F20()
{
  swift_defaultActor_initialize();
  *(unsigned char *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = &_swiftEmptySetSingleton;
  return v0;
}

unint64_t sub_100094F54(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x6F4364616F6C6572;
      break;
    case 3:
      unint64_t result = 0x50737365636F7270;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x7053746365746564;
      break;
    case 6:
      unint64_t result = 0x7571655272657375;
      break;
    case 7:
      unint64_t result = 0x6E776F6474756873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100095074(unsigned __int8 *a1, char *a2)
{
  return sub_100095108(*a1, *a2);
}

uint64_t sub_100095080(char a1, char a2)
{
  if (*(void *)&aStopped_1[8 * a1] == *(void *)&aStopped_1[8 * a2]
    && *(void *)&aShutdown_2[8 * a1 + 8] == *(void *)&aShutdown_2[8 * a2 + 8])
  {
    char v3 = 1;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_100095108(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x8000000100112B70;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000010;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000012;
      uint64_t v6 = "reloadPublicKeyBag";
      goto LABEL_6;
    case 2:
      unint64_t v3 = 0xEC0000006769666ELL;
      unint64_t v5 = 0x6F4364616F6C6572;
      break;
    case 3:
      unint64_t v3 = 0xEA00000000005441;
      unint64_t v5 = 0x50737365636F7270;
      break;
    case 4:
      unint64_t v5 = 0xD000000000000011;
      uint64_t v6 = "downloadMilestone";
LABEL_6:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 5:
      unint64_t v3 = 0xEF7765695674696CLL;
      unint64_t v5 = 0x7053746365746564;
      break;
    case 6:
      unint64_t v3 = 0xEB00000000747365;
      unint64_t v5 = 0x7571655272657375;
      break;
    case 7:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x6E776F6474756873;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x8000000100112B70;
  switch(a2)
  {
    case 1:
      unint64_t v8 = 0xD000000000000012;
      int64_t v9 = "reloadPublicKeyBag";
      goto LABEL_17;
    case 2:
      unint64_t v7 = 0xEC0000006769666ELL;
      if (v5 != 0x6F4364616F6C6572) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 3:
      unint64_t v7 = 0xEA00000000005441;
      if (v5 != 0x50737365636F7270) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 4:
      unint64_t v8 = 0xD000000000000011;
      int64_t v9 = "downloadMilestone";
LABEL_17:
      unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v5 != v8) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 5:
      unint64_t v7 = 0xEF7765695674696CLL;
      if (v5 != 0x7053746365746564) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 6:
      unint64_t v7 = 0xEB00000000747365;
      unint64_t v2 = 0x7571655272657375;
      goto LABEL_22;
    case 7:
      unint64_t v7 = 0xE800000000000000;
      if (v5 != 0x6E776F6474756873) {
        goto LABEL_26;
      }
      goto LABEL_23;
    default:
LABEL_22:
      if (v5 != v2) {
        goto LABEL_26;
      }
LABEL_23:
      if (v3 == v7) {
        char v10 = 1;
      }
      else {
LABEL_26:
      }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

Swift::Int sub_1000953B4()
{
  return sub_1000955E4();
}

Swift::Int sub_1000953C0()
{
  return Hasher._finalize()();
}

uint64_t sub_10009542C()
{
  return sub_100095488();
}

uint64_t sub_100095434()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100095488()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000955DC()
{
  return sub_1000955E4();
}

Swift::Int sub_1000955E4()
{
  return Hasher._finalize()();
}

Swift::Int sub_100095754()
{
  return Hasher._finalize()();
}

unint64_t sub_1000957BC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000A7EB4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000957EC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100094F54(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100095818()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100095850(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100095898())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1000958EC()
{
  return sub_1000958F8((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_1000958F8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100020378(&qword_100159978);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (void *)(a1 + 40);
  while (1)
  {
    unsigned __int8 v5 = *((unsigned char *)v4 - 8);
    uint64_t v6 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000A5520(v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(void *)(v2[7] + 8 * result) = v6;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000959FC()
{
  return sub_1000A7F84(_swiftEmptyArrayStorage);
}

uint64_t sub_100095A10(unsigned __int8 a1)
{
  uint64_t v3 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 128))(v6);
  sub_100090D0C(&v7, a1);
  v3(v6, 0);
  unint64_t v4 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 152))(v6);
  sub_1000A5920(a1);
  swift_bridgeObjectRelease();
  return v4(v6, 0);
}

uint64_t sub_100095AF4(char a1)
{
  uint64_t v3 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 128))(v6);
  sub_1000A4474(a1);
  v3(v6, 0);
  unint64_t v4 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 152))(v6);
  sub_1000A5920(a1);
  swift_bridgeObjectRelease();
  return v4(v6, 0);
}

uint64_t sub_100095BD4(char a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 112))();
  char v4 = sub_100095C38(a1, v3);
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_100095C38(char a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Swift::Int v4 = sub_1000955E4();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      while (1)
      {
        unint64_t v8 = 0x8000000100112B70;
        unint64_t v9 = 0xD000000000000010;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v9 = 0xD000000000000012;
            unint64_t v8 = 0x8000000100112B90;
            break;
          case 2:
            unint64_t v9 = 0x6F4364616F6C6572;
            unint64_t v8 = 0xEC0000006769666ELL;
            break;
          case 3:
            unint64_t v9 = 0x50737365636F7270;
            unint64_t v8 = 0xEA00000000005441;
            break;
          case 4:
            unint64_t v9 = 0xD000000000000011;
            unint64_t v8 = 0x8000000100112BC0;
            break;
          case 5:
            unint64_t v9 = 0x7053746365746564;
            unint64_t v8 = 0xEF7765695674696CLL;
            break;
          case 6:
            unint64_t v9 = 0x7571655272657375;
            unint64_t v8 = 0xEB00000000747365;
            break;
          case 7:
            unint64_t v8 = 0xE800000000000000;
            unint64_t v9 = 0x6E776F6474756873;
            break;
          default:
            break;
        }
        unint64_t v10 = 0x8000000100112B70;
        unint64_t v11 = 0xD000000000000010;
        switch(a1)
        {
          case 1:
            unint64_t v10 = 0x8000000100112B90;
            if (v9 == 0xD000000000000012) {
              goto LABEL_25;
            }
            goto LABEL_26;
          case 2:
            unint64_t v10 = 0xEC0000006769666ELL;
            if (v9 != 0x6F4364616F6C6572) {
              goto LABEL_26;
            }
            goto LABEL_25;
          case 3:
            unint64_t v10 = 0xEA00000000005441;
            if (v9 != 0x50737365636F7270) {
              goto LABEL_26;
            }
            goto LABEL_25;
          case 4:
            unint64_t v10 = 0x8000000100112BC0;
            if (v9 != 0xD000000000000011) {
              goto LABEL_26;
            }
            goto LABEL_25;
          case 5:
            unint64_t v10 = 0xEF7765695674696CLL;
            if (v9 != 0x7053746365746564) {
              goto LABEL_26;
            }
            goto LABEL_25;
          case 6:
            unint64_t v10 = 0xEB00000000747365;
            if (v9 != 0x7571655272657375) {
              goto LABEL_26;
            }
            goto LABEL_25;
          case 7:
            unint64_t v10 = 0xE800000000000000;
            unint64_t v11 = 0x6E776F6474756873;
            goto LABEL_24;
          default:
LABEL_24:
            if (v9 != v11) {
              goto LABEL_26;
            }
LABEL_25:
            if (v8 == v10)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              char v12 = 1;
              return v12 & 1;
            }
LABEL_26:
            char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v12) {
              return v12 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v12 & 1;
            }
            break;
        }
      }
    }
  }
  char v12 = 0;
  return v12 & 1;
}

uint64_t sub_100095FBC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t sub_100095FE0(char a1)
{
  *(void *)(v2 + 48) = v1;
  *(unsigned char *)(v2 + 56) = a1;
  return _swift_task_switch(sub_100096004, v1, 0);
}

uint64_t sub_100096004()
{
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(unsigned char *)(v0 + 56);
  uint64_t v3 = (uint64_t (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(*(void *)v1 + 128))(v0 + 16);
  sub_1000A4474(v2);
  uint64_t v4 = v3(v0 + 16, 0);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 136))(v4);
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_1000A5520(*(unsigned char *)(v0 + 56)), (v7 & 1) != 0))
  {
    unint64_t v8 = *(void **)(*(void *)(v5 + 56) + 8 * v6);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v8 = &_swiftEmptySetSingleton;
  }
  uint64_t v9 = *(void *)(v0 + 48);
  unsigned __int8 v10 = *(unsigned char *)(v0 + 56);
  swift_bridgeObjectRelease();
  sub_1000A1F8C();
  unint64_t v11 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(*(void *)v9 + 152))(v0 + 16);
  uint64_t v13 = v12;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v13;
  uint64_t *v13 = 0x8000000000000000;
  sub_1000A6A20((uint64_t)v8, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v13 = v17;
  swift_bridgeObjectRelease();
  v11(v0 + 16, 0);
  int64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1000961D0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 136))();
  uint64_t v2 = v1;
  uint64_t v19 = &_swiftEmptySetSingleton;
  uint64_t v3 = v1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_25:
    uint64_t v15 = *(void *)(*(void *)(v2 + 56) + 8 * v11);
    if (*(void *)(v15 + 16))
    {
      unsigned __int8 v16 = *(unsigned char *)(*(void *)(v2 + 48) + v11);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      unint64_t v17 = result & ~(-1 << *(unsigned char *)(v15 + 32));
      if ((*(void *)(v15 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v17)) {
        uint64_t result = sub_100090D0C(v18, v16);
      }
    }
  }
  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 >= v7) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v12);
  ++v9;
  if (v13) {
    goto LABEL_24;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v7) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v9 = v12 + 2;
  if (v12 + 2 >= v7) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v9 = v12 + 3;
  if (v12 + 3 >= v7) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v9 = v12 + 4;
  if (v12 + 4 >= v7) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_24:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_25;
  }
  int64_t v14 = v12 + 5;
  if (v14 >= v7)
  {
LABEL_28:
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v19;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_28;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000963E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100096418()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

void *sub_100096460()
{
  uint64_t v0 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v0[14] = &_swiftEmptySetSingleton;
  v0[15] = sub_1000958F8((uint64_t)_swiftEmptyArrayStorage);
  v0[16] = sub_1000A7F84(_swiftEmptyArrayStorage);
  return v0;
}

void *sub_1000964C4()
{
  swift_defaultActor_initialize();
  v0[14] = &_swiftEmptySetSingleton;
  v0[15] = sub_1000958F8((uint64_t)_swiftEmptyArrayStorage);
  v0[16] = sub_1000A7F84(_swiftEmptyArrayStorage);
  return v0;
}

unint64_t sub_10009651C(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
    case 5:
      return result;
    case 2:
      unint64_t result = 0x4E726F4674696177;
      break;
    case 3:
      unint64_t result = 0x666E6F4364616F6CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0x69736E6F43746170;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x7053746365746564;
      break;
    case 9:
      unint64_t result = 0x7964616572;
      break;
    default:
      unint64_t result = 0x696C616974696E69;
      break;
  }
  return result;
}

uint64_t sub_100096674(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10009651C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10009651C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100096700()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10009651C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100096764()
{
  sub_10009651C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000967B8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10009651C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100096818@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000A806C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100096848@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10009651C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void *sub_100096874()
{
  type metadata accessor for StateMachineEvents();
  uint64_t v0 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v0[14] = &_swiftEmptySetSingleton;
  v0[15] = sub_1000958F8((uint64_t)_swiftEmptyArrayStorage);
  v0[16] = sub_1000A7F84(_swiftEmptyArrayStorage);
  return v0;
}

uint64_t sub_1000968D8()
{
  return swift_retain();
}

uint64_t sub_1000968E0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100096918(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 128) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100096960()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t sub_100096994(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 136) = a1;
  return result;
}

uint64_t (*sub_1000969D4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100096A28()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_100096A6C(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 152) = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_100096AC0())()
{
  return j__swift_endAccess;
}

uint64_t sub_100096B14()
{
  return swift_retain();
}

uint64_t sub_100096B4C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 160) = a1;
  return swift_release();
}

uint64_t (*sub_100096B94())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100096BE8()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t sub_100096C1C(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 168) = a1;
  return result;
}

uint64_t (*sub_100096C5C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100096CB0()
{
  return swift_retain();
}

uint64_t sub_100096CE8(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 176) = a1;
  return swift_release();
}

uint64_t (*sub_100096D30())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100096D84()
{
  return swift_retain();
}

uint64_t sub_100096DBC(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 184) = a1;
  return swift_release();
}

uint64_t (*sub_100096E04())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100096E58()
{
  return *(unsigned __int8 *)(v0 + 192);
}

uint64_t sub_100096E60()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100096E8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100096F00@<X0>(uint64_t a1@<X8>)
{
  return sub_100029208(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_networkMonitor, a1, &qword_1001593A8);
}

uint64_t sub_100096F30()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100096F7C(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100096FD0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100097030(char a1)
{
  return *(void *)&aStopped_1[8 * a1];
}

uint64_t sub_100097050(char *a1, char *a2)
{
  return sub_100095080(*a1, *a2);
}

Swift::Int sub_10009705C()
{
  return sub_1000953C0();
}

uint64_t sub_100097064()
{
  return sub_100095434();
}

Swift::Int sub_10009706C()
{
  return sub_100095754();
}

unint64_t sub_100097074@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000A80DC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000970A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100097030(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000970D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  sub_100097138(a1, a2, a3, a4);
  return v8;
}

uint64_t sub_100097138(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_defaultActor_initialize();
  type metadata accessor for StateMachineEvents();
  unint64_t v10 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v10[14] = &_swiftEmptySetSingleton;
  v10[15] = sub_1000958F8((uint64_t)_swiftEmptyArrayStorage);
  v10[16] = sub_1000A7F84(_swiftEmptyArrayStorage);
  *(void *)(v5 + 112) = v10;
  *(void *)(v5 + 160) = 0;
  Logger.init(subsystem:category:)();
  *(void *)(v5 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers) = &_swiftEmptySetSingleton;
  *(unsigned char *)(v5 + 136) = a2;
  sub_100029208(a4, v5 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_networkMonitor, &qword_1001593A8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    unsigned int v53 = a2;
    char v54 = a3;
    uint64_t v55 = a4;
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    uint64_t v56 = a1;
    while (1)
    {
      long long v57 = *(_OWORD *)(a1 + 16 * v12 + 32);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v15 = *(uint64_t (**)(uint64_t, void))(*((void *)&v57 + 1) + 16);
      swift_unknownObjectRetain();
      uint64_t v16 = v15(ObjectType, *((void *)&v57 + 1));
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v19 = sub_10002EB4C(v16);
      uint64_t v20 = _swiftEmptyDictionarySingleton[2];
      BOOL v21 = (v18 & 1) == 0;
      uint64_t v22 = v20 + v21;
      if (__OFADD__(v20, v21)) {
        break;
      }
      char v23 = v18;
      if (_swiftEmptyDictionarySingleton[3] >= v22)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1000A6FD8();
        }
      }
      else
      {
        sub_1000A62A8(v22, isUniquelyReferenced_nonNull_native);
        unint64_t v24 = sub_10002EB4C(v16);
        if ((v23 & 1) != (v25 & 1)) {
          goto LABEL_37;
        }
        unint64_t v19 = v24;
      }
      a1 = v56;
      if (v23)
      {
        uint64_t v13 = _swiftEmptyDictionarySingleton[7];
        swift_unknownObjectRelease();
        *(_OWORD *)(v13 + 16 * v19) = v57;
      }
      else
      {
        _swiftEmptyDictionarySingleton[(v19 >> 6) + 8] |= 1 << v19;
        *(unsigned char *)(_swiftEmptyDictionarySingleton[6] + v19) = v16;
        *(_OWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v19) = v57;
        uint64_t v26 = _swiftEmptyDictionarySingleton[2];
        BOOL v27 = __OFADD__(v26, 1);
        uint64_t v28 = v26 + 1;
        if (v27) {
          goto LABEL_35;
        }
        _swiftEmptyDictionarySingleton[2] = v28;
      }
      ++v12;
      swift_bridgeObjectRelease();
      if (v11 == v12)
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = v5;
        *(void *)(v5 + 120) = _swiftEmptyDictionarySingleton;
        swift_bridgeObjectRetain();
        uint64_t v29 = (uint64_t *)(v56 + 40);
        while (1)
        {
          uint64_t v31 = *v29;
          uint64_t v32 = swift_getObjectType();
          uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 16);
          swift_unknownObjectRetain();
          uint64_t v34 = v33(v32, v31);
          type metadata accessor for SMSemaphore();
          uint64_t v35 = swift_allocObject();
          swift_defaultActor_initialize();
          *(unsigned char *)(v35 + 112) = 0;
          *(void *)(v35 + 120) = &_swiftEmptySetSingleton;
          char v36 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v38 = sub_10002EB4C(v34);
          uint64_t v39 = _swiftEmptyDictionarySingleton[2];
          BOOL v40 = (v37 & 1) == 0;
          uint64_t v41 = v39 + v40;
          if (__OFADD__(v39, v40)) {
            goto LABEL_34;
          }
          char v42 = v37;
          if (_swiftEmptyDictionarySingleton[3] >= v41)
          {
            if (v36)
            {
              if ((v37 & 1) == 0) {
                goto LABEL_24;
              }
            }
            else
            {
              sub_1000A6E34();
              if ((v42 & 1) == 0) {
                goto LABEL_24;
              }
            }
          }
          else
          {
            sub_1000A5E1C(v41, v36);
            unint64_t v43 = sub_10002EB4C(v34);
            if ((v42 & 1) != (v44 & 1)) {
              goto LABEL_37;
            }
            unint64_t v38 = v43;
            if ((v42 & 1) == 0)
            {
LABEL_24:
              _swiftEmptyDictionarySingleton[(v38 >> 6) + 8] |= 1 << v38;
              *(unsigned char *)(_swiftEmptyDictionarySingleton[6] + v38) = v34;
              *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v38) = v35;
              uint64_t v45 = _swiftEmptyDictionarySingleton[2];
              BOOL v27 = __OFADD__(v45, 1);
              uint64_t v46 = v45 + 1;
              if (v27) {
                goto LABEL_36;
              }
              _swiftEmptyDictionarySingleton[2] = v46;
              goto LABEL_16;
            }
          }
          uint64_t v30 = _swiftEmptyDictionarySingleton[7];
          swift_release();
          *(void *)(v30 + 8 * v38) = v35;
LABEL_16:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v29 += 2;
          if (!--v11)
          {
            swift_bridgeObjectRelease();
            uint64_t v5 = v58;
            a4 = v55;
            a2 = v53;
            a3 = v54;
            goto LABEL_30;
          }
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v5 + 120) = _swiftEmptyDictionarySingleton;
LABEL_30:
    swift_bridgeObjectRelease();
    *(void *)(v5 + 128) = _swiftEmptyDictionarySingleton;
    uint64_t v47 = *(void *)(v5 + 120);
    if (*(void *)(v47 + 16))
    {
      unint64_t v48 = sub_10002EB4C(a2);
      if (v49)
      {
        *(_OWORD *)(v5 + 144) = *(_OWORD *)(*(void *)(v47 + 56) + 16 * v48);
        swift_beginAccess();
        *(void *)(v5 + 160) = 0;
        swift_unknownObjectRetain_n();
        swift_release();
        *(unsigned char *)(v5 + 168) = 0;
        *(unsigned char *)(v5 + 192) = a3;
        type metadata accessor for SMSemaphore();
        uint64_t v50 = swift_allocObject();
        swift_defaultActor_initialize();
        *(unsigned char *)(v50 + 112) = 0;
        *(void *)(v50 + 120) = &_swiftEmptySetSingleton;
        *(void *)(v5 + 176) = v50;
        uint64_t v51 = swift_allocObject();
        swift_defaultActor_initialize();
        *(unsigned char *)(v51 + 112) = 0;
        *(void *)(v51 + 120) = &_swiftEmptySetSingleton;
        swift_unknownObjectRelease();
        sub_100028C8C(a4, &qword_1001593A8);
        *(void *)(v5 + 184) = v51;
        return v5;
      }
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000976DC()
{
  *(void *)(v1 + 64) = v0;
  return _swift_task_switch(sub_1000976FC, v0, 0);
}

uint64_t sub_1000976FC()
{
  uint64_t v1 = v0[8];
  swift_beginAccess();
  switch(*(unsigned char *)(v1 + 168))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v2) {
        goto LABEL_4;
      }
      int64_t v7 = (uint64_t (*)(void))v0[1];
      uint64_t result = v7();
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t v3 = v0[8];
      type metadata accessor for SMSemaphore();
      uint64_t v4 = swift_allocObject();
      swift_defaultActor_initialize();
      *(unsigned char *)(v4 + 112) = 0;
      *(void *)(v4 + 120) = &_swiftEmptySetSingleton;
      swift_beginAccess();
      *(void *)(v3 + 176) = v4;
      swift_release();
      uint64_t v5 = (void *)swift_task_alloc();
      v0[9] = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_10009790C;
      uint64_t v6 = v0[8];
      v5[12] = v6;
      uint64_t result = _swift_task_switch(sub_100097A9C, v6, 0);
      break;
  }
  return result;
}

uint64_t sub_10009790C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_100097A1C, v1, 0);
}

uint64_t sub_100097A1C()
{
  sub_100097DC8();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100097A7C()
{
  *(void *)(v1 + 96) = v0;
  return _swift_task_switch(sub_100097A9C, v0, 0);
}

uint64_t sub_100097A9C()
{
  sub_100029208(*(void *)(v0 + 96) + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_networkMonitor, v0 + 56, &qword_1001593A8);
  if (*(void *)(v0 + 80))
  {
    sub_10003CD24((long long *)(v0 + 56), v0 + 16);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    sub_10002BCF8((void *)(v0 + 16), v1);
    int64_t v7 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 32) + **(int **)(v2 + 32));
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v3;
    void *v3 = v0;
    v3[1] = sub_100097C50;
    uint64_t v4 = *(void *)(v0 + 96);
    return v7(&unk_1001593C8, v4, v1, v2);
  }
  else
  {
    sub_100028C8C(v0 + 56, &qword_1001593A8);
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_100097C50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100097D68, v1, 0);
}

uint64_t sub_100097D68()
{
  sub_100028A4C(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100097DC8()
{
  uint64_t v1 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  switch(*(unsigned char *)(v0 + 168))
  {
    case 3:
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    default:
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v4)
      {
LABEL_6:
        *(unsigned char *)(v0 + 168) = 1;
        uint64_t v7 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
        uint64_t v8 = (void *)swift_allocObject();
        _OWORD v8[2] = 0;
        v8[3] = 0;
        _OWORD v8[4] = v0;
        swift_retain();
        sub_1000A05B8((uint64_t)v3, (uint64_t)&unk_1001593D8, (uint64_t)v8);
        swift_release();
        return sub_100028C8C((uint64_t)v3, &qword_100157030);
      }
      else
      {
        switch(*(unsigned char *)(v0 + 168))
        {
          case 1:
          case 2:
          case 3:
          case 4:
            char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t result = swift_bridgeObjectRelease();
            if (v5) {
              goto LABEL_6;
            }
            break;
          default:
            goto LABEL_4;
        }
      }
      return result;
  }
}

uint64_t sub_10009807C(char a1, uint64_t a2)
{
  type metadata accessor for TransitionWatcher();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_10002CAC8(a1, a2);
  swift_beginAccess();
  swift_retain();
  sub_1000A2050(&v6, v4);
  swift_endAccess();
  swift_release();
  return v4;
}

uint64_t sub_100098124(char a1)
{
  *(void *)(v2 + 104) = v1;
  *(unsigned char *)(v2 + 176) = a1;
  return _swift_task_switch(sub_100098148, v1, 0);
}

uint64_t sub_100098148()
{
  v0[10] = &_swiftEmptySetSingleton;
  uint64_t v1 = (uint64_t *)(v0[13] + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TransitionWatcher();
    sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v0[2];
    uint64_t v6 = v0[3];
    uint64_t v8 = v0[4];
    uint64_t v7 = v0[5];
    unint64_t v9 = v0[6];
    v0[15] = v6;
    v0[16] = v8;
    v0[14] = v5;
    if (v5 < 0)
    {
      uint64_t v22 = __CocoaSet.Iterator.next()();
      if (!v22) {
        goto LABEL_30;
      }
      v0[12] = v22;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v13 = v0[11];
      swift_unknownObjectRelease();
      uint64_t v12 = v7;
      uint64_t v10 = v9;
      goto LABEL_6;
    }
    if (v9) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v15 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v8 = ~v15;
    uint64_t v6 = v2 + 56;
    uint64_t v16 = *(void *)(v2 + 56);
    uint64_t v17 = -v15;
    v0[15] = v2 + 56;
    v0[16] = v8;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v9 = v18 & v16;
    v0[14] = v2;
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    if (v9)
    {
LABEL_4:
      uint64_t v10 = (v9 - 1) & v9;
      unint64_t v11 = __clz(__rbit64(v9)) | (v7 << 6);
      uint64_t v12 = v7;
LABEL_5:
      uint64_t v13 = *(void *)(*(void *)(v5 + 48) + 8 * v11);
      swift_retain();
LABEL_6:
      v0[18] = v12;
      v0[19] = v10;
      v0[17] = v13;
      if (v13)
      {
        unint64_t v14 = (*(void *)v13 + 232) & 0xFFFFFFFFFFFFLL | 0xFD04000000000000;
        v0[20] = *(void *)(*(void *)v13 + 232);
        v0[21] = v14;
        uint64_t v5 = (uint64_t)sub_10009849C;
        uint64_t v3 = v13;
        uint64_t v4 = 0;
        return _swift_task_switch(v5, v3, v4);
      }
      goto LABEL_30;
    }
  }
  int64_t v19 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return _swift_task_switch(v5, v3, v4);
  }
  int64_t v20 = (unint64_t)(v8 + 64) >> 6;
  if (v19 < v20)
  {
    unint64_t v21 = *(void *)(v6 + 8 * v19);
    uint64_t v12 = v7 + 1;
    if (!v21)
    {
      uint64_t v12 = v7 + 2;
      if (v7 + 2 >= v20) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v12);
      if (!v21)
      {
        uint64_t v12 = v7 + 3;
        if (v7 + 3 >= v20) {
          goto LABEL_30;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v12);
        if (!v21)
        {
          uint64_t v12 = v7 + 4;
          if (v7 + 4 >= v20) {
            goto LABEL_30;
          }
          unint64_t v21 = *(void *)(v6 + 8 * v12);
          if (!v21)
          {
            uint64_t v23 = v7 + 5;
            while (v20 != v23)
            {
              unint64_t v21 = *(void *)(v6 + 8 * v23++);
              if (v21)
              {
                uint64_t v12 = v23 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_30;
          }
        }
      }
    }
LABEL_17:
    uint64_t v10 = (v21 - 1) & v21;
    unint64_t v11 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_5;
  }
LABEL_30:
  sub_10005D5B8();
  swift_retain();
  uint64_t v24 = swift_bridgeObjectRetain();
  sub_1000A7B98(v24);
  swift_release();
  swift_bridgeObjectRelease_n();
  char v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_10009849C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  *(unsigned char *)(v0 + 177) = (*(uint64_t (**)(void))(v0 + 160))(*(unsigned __int8 *)(v0 + 176)) & 1;
  return _swift_task_switch(sub_100098518, v1, 0);
}

uint64_t sub_100098518()
{
  uint64_t v22 = v0;
  if (*(unsigned char *)(v0 + 177)) {
    sub_1000A2050(&v21, *(void *)(v0 + 136));
  }
  uint64_t v1 = (uint64_t (*)())swift_release();
  uint64_t v4 = *(void *)(v0 + 144);
  unint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 112);
  if (v6 < 0)
  {
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (!v11) {
      goto LABEL_27;
    }
    *(void *)(v0 + 96) = v11;
    type metadata accessor for TransitionWatcher();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v10 = *(void *)(v0 + 88);
    swift_unknownObjectRelease();
    uint64_t v9 = v4;
    uint64_t v7 = v5;
    goto LABEL_9;
  }
  if (v5)
  {
    uint64_t v7 = (v5 - 1) & v5;
    unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v9 = *(void *)(v0 + 144);
LABEL_6:
    uint64_t v10 = *(void *)(*(void *)(v6 + 48) + 8 * v8);
    swift_retain();
LABEL_9:
    *(void *)(v0 + 144) = v9;
    *(void *)(v0 + 152) = v7;
    *(void *)(v0 + 136) = v10;
    if (v10)
    {
      unint64_t v12 = (*(void *)v10 + 232) & 0xFFFFFFFFFFFFLL | 0xFD04000000000000;
      *(void *)(v0 + 160) = *(void *)(*(void *)v10 + 232);
      *(void *)(v0 + 168) = v12;
      uint64_t v1 = sub_10009849C;
      uint64_t v2 = v10;
      uint64_t v3 = 0;
      return _swift_task_switch(v1, v2, v3);
    }
    goto LABEL_27;
  }
  int64_t v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    return _swift_task_switch(v1, v2, v3);
  }
  int64_t v14 = (unint64_t)(*(void *)(v0 + 128) + 64) >> 6;
  if (v13 < v14)
  {
    uint64_t v15 = *(void *)(v0 + 120);
    unint64_t v16 = *(void *)(v15 + 8 * v13);
    uint64_t v9 = v4 + 1;
    if (!v16)
    {
      uint64_t v9 = v4 + 2;
      if (v4 + 2 >= v14) {
        goto LABEL_27;
      }
      unint64_t v16 = *(void *)(v15 + 8 * v9);
      if (!v16)
      {
        uint64_t v9 = v4 + 3;
        if (v4 + 3 >= v14) {
          goto LABEL_27;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v9);
        if (!v16)
        {
          uint64_t v9 = v4 + 4;
          if (v4 + 4 >= v14) {
            goto LABEL_27;
          }
          unint64_t v16 = *(void *)(v15 + 8 * v9);
          if (!v16)
          {
            uint64_t v17 = v4 + 5;
            while (v14 != v17)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v17++);
              if (v16)
              {
                uint64_t v9 = v17 - 1;
                goto LABEL_16;
              }
            }
            goto LABEL_27;
          }
        }
      }
    }
LABEL_16:
    uint64_t v7 = (v16 - 1) & v16;
    unint64_t v8 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_6;
  }
LABEL_27:
  sub_10005D5B8();
  swift_retain();
  uint64_t v18 = swift_bridgeObjectRetain();
  sub_1000A7B98(v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  int64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1000987AC(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 48) = a2;
  *(void *)(v3 + 56) = a3;
  *(unsigned char *)(v3 + 120) = a1;
  return _swift_task_switch(sub_1000987D0, a3, 0);
}

uint64_t sub_1000987D0()
{
  if (*(unsigned char *)(v0 + 120) == 1)
  {
    uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
    *(void *)(v0 + 64) = v1;
    uint64_t v2 = (*(void *)v1 + 224) & 0xFFFFFFFFFFFFLL | 0x45EE000000000000;
    *(void *)(v0 + 72) = *(void *)(*(void *)v1 + 224);
    *(void *)(v0 + 80) = v2;
    return _swift_task_switch(sub_100098914, v1, 0);
  }
  else
  {
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "no network", v5, 2u);
      swift_slowDealloc();
    }

    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_100098914()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 88) = (*(uint64_t (**)(void))(v0 + 72))();
  return _swift_task_switch(sub_100098984, v1, 0);
}

uint64_t sub_100098984()
{
  NSString v71 = v0;
  uint64_t v1 = v0[6];
  uint64_t v2 = v0 + 5;
  uint64_t v3 = v0[11];
  if (*(void *)(v3 + 16))
  {
    sub_100020378(&qword_100157A70);
    uint64_t v4 = swift_task_alloc();
    sub_100029208(v1, v4, &qword_100157A70);
    swift_bridgeObjectRetain_n();
    unint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v63 = v6;
      os_log_t log = v5;
      uint64_t v7 = v0 + 2;
      uint64_t v8 = (_DWORD *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      uint64_t v65 = v8;
      _DWORD *v8 = 136315394;
      uint64_t v9 = swift_task_alloc();
      sub_100029208(v4, v9, &qword_100157A70);
      uint64_t v10 = type metadata accessor for URL();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
      {
        sub_100028C8C(v9, &qword_100157A70);
        unint64_t v12 = 0xE100000000000000;
        uint64_t v13 = 45;
      }
      else
      {
        uint64_t v13 = URL.description.getter();
        unint64_t v12 = v24;
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
      swift_task_dealloc();
      uint64_t *v7 = sub_1000262AC(v13, v12, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100028C8C(v4, &qword_100157A70);
      *((_WORD *)v65 + 6) = 2082;
      int64_t v25 = *(void *)(v3 + 16);
      uint64_t v26 = _swiftEmptyArrayStorage;
      if (v25)
      {
        unint64_t v23 = v66;
        uint64_t v27 = *(void *)(v66 + 88);
        unint64_t v70 = _swiftEmptyArrayStorage;
        sub_1000838EC(0, v25, 0);
        unint64_t v28 = v66;
        uint64_t v26 = v70;
        uint64_t v29 = sub_1000A7548(v27);
        int64_t v30 = v29;
        int v32 = v31;
        char v34 = v33 & 1;
        uint64_t v68 = v27 + 56;
        uint64_t v67 = v27;
        unint64_t v35 = (unint64_t)"ag";
        while ((v30 & 0x8000000000000000) == 0)
        {
          unint64_t v35 = 1 << *(unsigned char *)(v27 + 32);
          if (v30 >= (uint64_t)v35) {
            break;
          }
          unint64_t v35 = *(void *)(v68 + (((unint64_t)v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v30;
          if ((v35 & 1) == 0) {
            goto LABEL_52;
          }
          unint64_t v35 = *(unsigned int *)(v27 + 36);
          if (v35 != v32) {
            goto LABEL_53;
          }
          uint64_t v36 = *(unsigned __int8 *)(*(void *)(v27 + 48) + v30);
          unint64_t v37 = 0x8000000100112B70;
          unint64_t v23 = 0xD000000000000010;
          switch(v36)
          {
            case 1:
              unint64_t v23 = 0xD000000000000012;
              unint64_t v37 = 0x8000000100112B90;
              break;
            case 2:
              unint64_t v37 = 0xEC0000006769666ELL;
              unint64_t v23 = 0x6F4364616F6C6572;
              break;
            case 3:
              unint64_t v37 = 0xEA00000000005441;
              unint64_t v23 = 0x50737365636F7270;
              break;
            case 4:
              unint64_t v23 = 0xD000000000000011;
              unint64_t v37 = 0x8000000100112BC0;
              break;
            case 5:
              unint64_t v37 = 0xEF7765695674696CLL;
              unint64_t v23 = 0x7053746365746564;
              break;
            case 6:
              unint64_t v37 = 0xEB00000000747365;
              unint64_t v23 = 0x7571655272657375;
              break;
            case 7:
              unint64_t v37 = 0xE800000000000000;
              unint64_t v23 = 0x6E776F6474756873;
              break;
            default:
              break;
          }
          unint64_t v70 = v26;
          unint64_t v39 = v26[2];
          unint64_t v38 = v26[3];
          if (v39 >= v38 >> 1)
          {
            sub_1000838EC(v38 > 1, v39 + 1, 1);
            unint64_t v28 = v66;
            uint64_t v26 = v70;
          }
          uint64_t v40 = *(void *)(v28 + 88);
          _OWORD v26[2] = v39 + 1;
          uint64_t v41 = &v26[2 * v39];
          v41[4] = v23;
          v41[5] = v37;
          uint64_t v29 = sub_1000A75E8(v30, v32, v34 & 1, v40);
          int64_t v30 = v29;
          int v32 = v42;
          char v34 = v43 & 1;
          --v25;
          uint64_t v27 = v67;
          if (!v25)
          {
            sub_100028300(v29, v42, v43 & 1);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        if (v35 > 0x13F)
        {
          unint64_t v57 = *(void *)(v29 + 88);
          if (v57)
          {
            uint64_t v51 = 4;
            goto LABEL_41;
          }
          uint64_t v59 = 0;
          uint64_t v60 = v35 >> 6;
          if (v60 <= 5) {
            uint64_t v60 = 5;
          }
          uint64_t v61 = v60 - 5;
          while (v61 != v59)
          {
            unint64_t v57 = *(void *)(v29 + 8 * v59++ + 96);
            if (v57)
            {
              uint64_t v51 = v59 + 4;
              goto LABEL_41;
            }
          }
        }
        goto LABEL_63;
      }
      unint64_t v28 = v66;
LABEL_30:
      *(void *)(v28 + 24) = v26;
      sub_100020378(&qword_100158D28);
      sub_1000AA37C(&qword_100159960, &qword_100158D28);
      uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      unint64_t v23 = v66;
      *(void *)(v66 + 32) = sub_1000262AC(v44, v46, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, log, v63, "have network %s, waking up: %{public}s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v23 = v66;

      sub_100028C8C(v4, &qword_100157A70);
      swift_bridgeObjectRelease_n();
    }
    swift_task_dealloc();
    uint64_t v29 = *(void *)(v23 + 88);
    char v47 = *(unsigned char *)(v29 + 32);
    *(unsigned char *)(v23 + 121) = v47;
    uint64_t v48 = -1;
    uint64_t v49 = -1 << v47;
    if (-v49 < 64) {
      uint64_t v48 = ~(-1 << -(char)v49);
    }
    unint64_t v50 = v48 & *(void *)(v29 + 56);
    if (v50)
    {
      uint64_t v51 = 0;
      unint64_t v52 = __clz(__rbit64(v50));
      uint64_t v53 = (v50 - 1) & v50;
LABEL_35:
      *(void *)(v23 + 96) = v51;
      *(void *)(v23 + 104) = v53;
      char v54 = *(unsigned char *)(*(void *)(v29 + 48) + v52);
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v23 + 112) = v55;
      *uint64_t v55 = v23;
      v55[1] = sub_10009939C;
      return sub_100099658(v54);
    }
    unint64_t v35 = 63 - v49;
    if (v35 > 0x7F)
    {
      unint64_t v57 = *(void *)(v29 + 64);
      if (v57)
      {
        uint64_t v51 = 1;
        goto LABEL_41;
      }
      if (v35 >= 0xC0)
      {
        unint64_t v57 = *(void *)(v29 + 72);
        if (v57)
        {
          uint64_t v51 = 2;
          goto LABEL_41;
        }
        if (v35 >= 0x100)
        {
          unint64_t v57 = *(void *)(v29 + 80);
          if (!v57) {
            goto LABEL_54;
          }
          uint64_t v51 = 3;
LABEL_41:
          uint64_t v53 = (v57 - 1) & v57;
          unint64_t v52 = __clz(__rbit64(v57)) + (v51 << 6);
          goto LABEL_35;
        }
      }
    }
LABEL_63:
    swift_release();
    goto LABEL_64;
  }
  swift_bridgeObjectRelease();
  sub_100020378(&qword_100157A70);
  uint64_t v14 = swift_task_alloc();
  sub_100029208(v1, v14, &qword_100157A70);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    unint64_t v70 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v18 = swift_task_alloc();
    sub_100029208(v14, v18, &qword_100157A70);
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    {
      sub_100028C8C(v18, &qword_100157A70);
      unint64_t v21 = 0xE100000000000000;
      uint64_t v22 = 45;
    }
    else
    {
      uint64_t v22 = URL.description.getter();
      unint64_t v21 = v58;
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    }
    swift_task_dealloc();
    *uint64_t v2 = sub_1000262AC(v22, v21, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100028C8C(v14, &qword_100157A70);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "have network %s, no waiters", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_100028C8C(v14, &qword_100157A70);
  }
  swift_task_dealloc();
  unint64_t v23 = v66;
LABEL_64:
  uint64_t v62 = *(uint64_t (**)(void))(v23 + 8);
  return v62();
}

uint64_t sub_10009939C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000994AC, v1, 0);
}

void sub_1000994AC()
{
  int64_t v1 = *(void *)(v0 + 96);
  unint64_t v2 = *(void *)(v0 + 104);
  if (v2)
  {
    uint64_t v3 = (v2 - 1) & v2;
    unint64_t v4 = __clz(__rbit64(v2)) | (v1 << 6);
    uint64_t v5 = *(void *)(v0 + 88);
LABEL_3:
    *(void *)(v0 + 96) = v1;
    *(void *)(v0 + 104) = v3;
    char v6 = *(unsigned char *)(*(void *)(v5 + 48) + v4);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v7;
    void *v7 = v0;
    v7[1] = sub_10009939C;
    sub_100099658(v6);
    return;
  }
  int64_t v8 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v0 + 121)) + 63) >> 6;
  uint64_t v5 = *(void *)(v0 + 88);
  if (v8 < v9)
  {
    uint64_t v10 = v5 + 56;
    unint64_t v11 = *(void *)(v5 + 56 + 8 * v8);
    ++v1;
    if (v11)
    {
LABEL_9:
      uint64_t v3 = (v11 - 1) & v11;
      unint64_t v4 = __clz(__rbit64(v11)) + (v1 << 6);
      goto LABEL_3;
    }
    int64_t v1 = v8 + 1;
    if (v8 + 1 < v9)
    {
      unint64_t v11 = *(void *)(v10 + 8 * v1);
      if (v11) {
        goto LABEL_9;
      }
      int64_t v1 = v8 + 2;
      if (v8 + 2 < v9)
      {
        unint64_t v11 = *(void *)(v10 + 8 * v1);
        if (v11) {
          goto LABEL_9;
        }
        int64_t v12 = v8 + 3;
        if (v12 < v9)
        {
          unint64_t v11 = *(void *)(v10 + 8 * v12);
          if (v11)
          {
            int64_t v1 = v12;
            goto LABEL_9;
          }
          while (1)
          {
            int64_t v1 = v12 + 1;
            if (__OFADD__(v12, 1)) {
              break;
            }
            if (v1 >= v9) {
              goto LABEL_20;
            }
            unint64_t v11 = *(void *)(v10 + 8 * v1);
            ++v12;
            if (v11) {
              goto LABEL_9;
            }
          }
LABEL_24:
          __break(1u);
          return;
        }
      }
    }
  }
LABEL_20:
  swift_release();
  uint64_t v13 = *(void (**)(void))(v0 + 8);
  v13();
}

uint64_t sub_100099658(char a1)
{
  *(void *)(v2 + 416) = v1;
  *(unsigned char *)(v2 + 330) = a1;
  uint64_t v3 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v2 + 424) = v3;
  *(void *)(v2 + 432) = *(void *)(v3 - 8);
  *(void *)(v2 + 440) = swift_task_alloc();
  *(void *)(v2 + 448) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ContinuousClock();
  *(void *)(v2 + 456) = v4;
  *(void *)(v2 + 464) = *(void *)(v4 - 8);
  *(void *)(v2 + 472) = swift_task_alloc();
  return _swift_task_switch(sub_100099788, v1, 0);
}

uint64_t sub_100099788()
{
  uint64_t v43 = v0;
  uint64_t v1 = (uint64_t *)(v0 + 416);
  *(void *)(v0 + 480) = OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_logger;
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v40 = v3;
    os_log_t log = v2;
    uint64_t v4 = *(void *)(v0 + 416);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446722;
    swift_beginAccess();
    uint64_t v6 = *(void *)(v0 + 416);
    uint64_t v38 = *(unsigned __int8 *)(v0 + 330);
    *(void *)(v0 + 392) = sub_1000262AC(*(void *)&aStopped_1[8 * *(char *)(v4 + 168)], *(void *)&aShutdown_2[8 * *(char *)(v4 + 168) + 8], &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2082;
    swift_beginAccess();
    uint64_t v7 = *(void *)(v6 + 152);
    uint64_t ObjectType = swift_getObjectType();
    int64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
    swift_unknownObjectRetain();
    char v10 = v9(ObjectType, v7);
    swift_unknownObjectRelease();
    unint64_t v11 = sub_10009651C(v10);
    *(void *)(v0 + 400) = sub_1000262AC(v11, v12, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 22) = 2082;
    unint64_t v13 = 0x8000000100112B70;
    uint64_t v1 = (uint64_t *)(v0 + 416);
    uint64_t v14 = 0xD000000000000010;
    switch(v38)
    {
      case 1:
        uint64_t v14 = 0xD000000000000012;
        uint64_t v15 = "reloadPublicKeyBag";
        goto LABEL_8;
      case 2:
        unint64_t v13 = 0xEC0000006769666ELL;
        uint64_t v14 = 0x6F4364616F6C6572;
        break;
      case 3:
        unint64_t v13 = 0xEA00000000005441;
        uint64_t v14 = 0x50737365636F7270;
        break;
      case 4:
        uint64_t v14 = 0xD000000000000011;
        uint64_t v15 = "downloadMilestone";
LABEL_8:
        unint64_t v13 = (unint64_t)(v15 - 32) | 0x8000000000000000;
        break;
      case 5:
        unint64_t v13 = 0xEF7765695674696CLL;
        uint64_t v14 = 0x7053746365746564;
        break;
      case 6:
        unint64_t v13 = 0xEB00000000747365;
        uint64_t v14 = 0x7571655272657375;
        break;
      case 7:
        unint64_t v13 = 0xE800000000000000;
        uint64_t v14 = 0x6E776F6474756873;
        break;
      default:
        break;
    }
    *(void *)(v0 + 408) = sub_1000262AC(v14, v13, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v40, "SM: %{public}s state %{public}s recved %{public}s", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v16 = *v1;
  uint64_t v17 = (unsigned char *)(*v1 + 168);
  swift_beginAccess();
  switch(*(unsigned char *)(v16 + 168))
  {
    case 4:
LABEL_16:
      swift_bridgeObjectRelease();
      goto LABEL_18;
    default:
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v18)
      {
LABEL_18:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
        return v20();
      }
      else
      {
        switch(*v17)
        {
          case 1:
          case 2:
          case 3:
          case 4:
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v19) {
              goto LABEL_18;
            }
            switch(*(unsigned char *)(*v1 + 168))
            {
              case 2:
                swift_bridgeObjectRelease();
                goto LABEL_24;
              default:
                char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v22)
                {
LABEL_24:
                  ContinuousClock.init()();
                  *(_OWORD *)(v0 + 352) = xmmword_10010D430;
                  *(void *)(v0 + 312) = 0;
                  *(void *)(v0 + 320) = 0;
                  *(unsigned char *)(v0 + 328) = 1;
                  unint64_t v23 = sub_10009A0F8;
                  unint64_t v24 = 0;
LABEL_33:
                  uint64_t result = _swift_task_switch(v23, v24, 0);
                }
                else
                {
                  switch(*(unsigned char *)(*v1 + 168))
                  {
                    case 3:
                      swift_bridgeObjectRelease();
                      goto LABEL_28;
                    default:
                      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if ((v25 & 1) == 0) {
                        goto LABEL_32;
                      }
LABEL_28:
                      uint64_t v26 = *(void *)(v0 + 416);
                      char v27 = *(unsigned char *)(v0 + 330);
                      swift_beginAccess();
                      uint64_t v28 = *(void *)(v26 + 152);
                      uint64_t v29 = swift_getObjectType();
                      int64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 24);
                      swift_unknownObjectRetain();
                      uint64_t v31 = v30(v29, v28);
                      swift_unknownObjectRelease();
                      char v32 = sub_100095C38(v27, v31);
                      swift_bridgeObjectRelease();
                      if ((v32 & 1) == 0)
                      {
LABEL_32:
                        unint64_t v24 = *(void **)(*(void *)(v0 + 416) + 112);
                        *(void *)(v0 + 608) = v24;
                        uint64_t v37 = *v24 + 184;
                        *(void *)(v0 + 616) = *(void *)v37;
                        *(void *)(v0 + 624) = v37 & 0xFFFFFFFFFFFFLL | 0x62BB000000000000;
                        unint64_t v23 = sub_10009B880;
                        goto LABEL_33;
                      }
                      *(void *)(v0 + 520) = *(void *)(v26 + 144);
                      uint64_t v33 = *(void *)(v26 + 152);
                      uint64_t v34 = swift_getObjectType();
                      uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 + 40)
                                                                              + **(int **)(v33 + 40));
                      swift_unknownObjectRetain();
                      unint64_t v35 = (void *)swift_task_alloc();
                      *(void *)(v0 + 528) = v35;
                      *unint64_t v35 = v0;
                      v35[1] = sub_10009A8A0;
                      uint64_t v36 = *(unsigned __int8 *)(v0 + 330);
                      uint64_t result = v41(v36, v34, v33);
                      break;
                  }
                }
                break;
            }
            break;
          default:
            goto LABEL_16;
        }
      }
      return result;
  }
}

uint64_t sub_10009A0F8()
{
  uint64_t v2 = v0[54];
  uint64_t v1 = v0[55];
  uint64_t v3 = v0[53];
  uint64_t v4 = sub_1000A82BC(&qword_100157828, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1000A82BC(&qword_100157830, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[61] = v5;
  v0[62] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[63] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10009A294;
  uint64_t v8 = v0[56];
  uint64_t v7 = v0[57];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 39, v7, v4);
}

uint64_t sub_10009A294()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 488);
  uint64_t v4 = *(void *)(*(void *)v1 + 448);
  uint64_t v5 = *(void *)(*(void *)v1 + 424);
  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  v3(v4, v5);
  if (v0)
  {
    uint64_t v6 = sub_10009A80C;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = v2[52];
    (*(void (**)(void, void))(v2[58] + 8))(v2[59], v2[57]);
    uint64_t v6 = sub_10009A438;
    uint64_t v7 = v8;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_10009A438()
{
  switch(*(unsigned char *)(*(void *)(v0 + 416) + 168))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v1)
      {
LABEL_4:
        ContinuousClock.init()();
        *(_OWORD *)(v0 + 352) = xmmword_10010D430;
        *(void *)(v0 + 312) = 0;
        *(void *)(v0 + 320) = 0;
        *(unsigned char *)(v0 + 328) = 1;
        uint64_t v2 = sub_10009A0F8;
        uint64_t v3 = 0;
LABEL_13:
        return _swift_task_switch(v2, v3, 0);
      }
      else
      {
        switch(*(unsigned char *)(*(void *)(v0 + 416) + 168))
        {
          case 3:
            swift_bridgeObjectRelease();
            goto LABEL_8;
          default:
            char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v4 & 1) == 0) {
              goto LABEL_12;
            }
LABEL_8:
            uint64_t v5 = *(void *)(v0 + 416);
            char v6 = *(unsigned char *)(v0 + 330);
            swift_beginAccess();
            uint64_t v7 = *(void *)(v5 + 152);
            uint64_t ObjectType = swift_getObjectType();
            int64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 24);
            swift_unknownObjectRetain();
            uint64_t v10 = v9(ObjectType, v7);
            swift_unknownObjectRelease();
            char v11 = sub_100095C38(v6, v10);
            swift_bridgeObjectRelease();
            if ((v11 & 1) == 0)
            {
LABEL_12:
              uint64_t v3 = *(void **)(*(void *)(v0 + 416) + 112);
              *(void *)(v0 + 608) = v3;
              uint64_t v17 = *v3 + 184;
              *(void *)(v0 + 616) = *(void *)v17;
              *(void *)(v0 + 624) = v17 & 0xFFFFFFFFFFFFLL | 0x62BB000000000000;
              uint64_t v2 = sub_10009B880;
              goto LABEL_13;
            }
            *(void *)(v0 + 520) = *(void *)(v5 + 144);
            uint64_t v12 = *(void *)(v5 + 152);
            uint64_t v13 = swift_getObjectType();
            char v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 40) + **(int **)(v12 + 40));
            swift_unknownObjectRetain();
            uint64_t v14 = (void *)swift_task_alloc();
            *(void *)(v0 + 528) = v14;
            void *v14 = v0;
            v14[1] = sub_10009A8A0;
            uint64_t v15 = *(unsigned __int8 *)(v0 + 330);
            uint64_t result = v18(v15, v13, v12);
            break;
        }
      }
      return result;
  }
}

uint64_t sub_10009A80C()
{
  uint64_t v2 = v0[58];
  uint64_t v1 = v0[59];
  uint64_t v3 = v0[57];
  uint64_t v4 = v0[52];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1000AA3C0, v4, 0);
}

uint64_t sub_10009A8A0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 416);
  *(unsigned char *)(*(void *)v1 + 331) = a1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_10009A9D4, v2, 0);
}

uint64_t sub_10009A9D4()
{
  uint64_t v49 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 331);
  if (v1 == 10)
  {
    uint64_t v4 = *(void **)(*(void *)(v0 + 416) + 112);
    *(void *)(v0 + 584) = v4;
    uint64_t v5 = *v4 + 184;
    *(void *)(v0 + 592) = *(void *)v5;
    *(void *)(v0 + 600) = v5 & 0xFFFFFFFFFFFFLL | 0x62BB000000000000;
    uint64_t v6 = sub_10009B7F8;
  }
  else
  {
    if (v1 == 11)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
      return v2();
    }
    uint64_t v7 = *(void *)(v0 + 416);
    char v8 = *(unsigned char *)(v0 + 330);
    uint64_t v9 = swift_allocObject();
    *(unsigned char *)(v9 + 16) = v8;
    uint64_t v10 = v9;
    uint64_t v11 = swift_allocObject();
    *(unsigned char *)(v11 + 16) = v1;
    uint64_t v12 = v11;
    swift_retain_n();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    uint64_t v45 = swift_allocObject();
    *(unsigned char *)(v45 + 16) = 34;
    uint64_t v44 = swift_allocObject();
    *(unsigned char *)(v44 + 16) = 8;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_1000A8304;
    *(void *)(v13 + 24) = v7;
    uint64_t v14 = v13;
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = sub_1000A8510;
    *(void *)(v46 + 24) = v14;
    uint64_t v47 = swift_allocObject();
    *(unsigned char *)(v47 + 16) = 34;
    uint64_t v15 = swift_allocObject();
    *(unsigned char *)(v15 + 16) = 8;
    uint64_t v16 = v15;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = sub_1000A83A8;
    *(void *)(v17 + 24) = v10;
    uint64_t v18 = v17;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_1000AA3C4;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = swift_allocObject();
    *(unsigned char *)(v20 + 16) = 34;
    uint64_t v21 = swift_allocObject();
    *(unsigned char *)(v21 + 16) = 8;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = sub_1000A84D4;
    *(void *)(v22 + 24) = v12;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = sub_1000AA3C4;
    *(void *)(v23 + 24) = v22;
    sub_100020378((uint64_t *)&unk_1001593F8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10010D440;
    *(void *)(inited + 32) = sub_1000A84EC;
    *(void *)(inited + 40) = v45;
    *(void *)(inited + 48) = sub_1000AA3FC;
    *(void *)(inited + 56) = v44;
    *(void *)(inited + 64) = sub_1000A8538;
    *(void *)(inited + 72) = v46;
    *(void *)(inited + 80) = sub_1000AA3FC;
    *(void *)(inited + 88) = v47;
    *(void *)(inited + 96) = sub_1000AA3FC;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 112) = sub_1000AA3C8;
    *(void *)(inited + 120) = v19;
    *(void *)(inited + 128) = sub_1000AA3FC;
    *(void *)(inited + 136) = v20;
    *(void *)(inited + 144) = sub_1000AA3FC;
    *(void *)(inited + 152) = v21;
    *(void *)(inited + 160) = sub_1000AA3C8;
    *(void *)(inited + 168) = v23;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    BOOL v25 = os_log_type_enabled(v43, v42);
    uint64_t v26 = *(void *)(v0 + 416);
    if (v25)
    {
      uint64_t v41 = *(unsigned __int8 *)(v0 + 330);
      char v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_WORD *)char v27 = 770;
      _OWORD v27[2] = 34;
      swift_release();
      v27[3] = 8;
      swift_release();
      uint64_t v28 = *(void *)(v26 + 152);
      uint64_t ObjectType = swift_getObjectType();
      int64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 16);
      swift_unknownObjectRetain();
      char v31 = v30(ObjectType, v28);
      swift_unknownObjectRelease();
      unint64_t v32 = sub_10009651C(v31);
      *(void *)(v0 + 384) = sub_1000262AC(v32, v33, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release_n();
      v27[12] = 34;
      swift_release();
      v27[13] = 8;
      swift_release();
      unint64_t v34 = 0x8000000100112B70;
      uint64_t v35 = 0xD000000000000010;
      switch(v41)
      {
        case 1:
          uint64_t v35 = 0xD000000000000012;
          uint64_t v36 = "reloadPublicKeyBag";
          goto LABEL_14;
        case 2:
          unint64_t v34 = 0xEC0000006769666ELL;
          uint64_t v35 = 0x6F4364616F6C6572;
          break;
        case 3:
          unint64_t v34 = 0xEA00000000005441;
          uint64_t v35 = 0x50737365636F7270;
          break;
        case 4:
          uint64_t v35 = 0xD000000000000011;
          uint64_t v36 = "downloadMilestone";
LABEL_14:
          unint64_t v34 = (unint64_t)(v36 - 32) | 0x8000000000000000;
          break;
        case 5:
          unint64_t v34 = 0xEF7765695674696CLL;
          uint64_t v35 = 0x7053746365746564;
          break;
        case 6:
          unint64_t v34 = 0xEB00000000747365;
          uint64_t v35 = 0x7571655272657375;
          break;
        case 7:
          unint64_t v34 = 0xE800000000000000;
          uint64_t v35 = 0x6E776F6474756873;
          break;
        default:
          break;
      }
      char v37 = *(unsigned char *)(v0 + 331);
      *(void *)(v0 + 376) = sub_1000262AC(v35, v34, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      v27[22] = 34;
      swift_release();
      v27[23] = 8;
      swift_release();
      unint64_t v38 = sub_10009651C(v37);
      *(void *)(v0 + 368) = sub_1000262AC(v38, v39, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v43, v42, "SM: %{public}s recved %{public}s and transitioned to %{public}s", v27, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v4 = *(void **)(*(void *)(v0 + 416) + 112);
    *(void *)(v0 + 536) = v4;
    uint64_t v40 = *v4 + 192;
    *(void *)(v0 + 544) = *(void *)v40;
    *(void *)(v0 + 552) = v40 & 0xFFFFFFFFFFFFLL | 0xBE86000000000000;
    uint64_t v6 = sub_10009B2F0;
  }
  return _swift_task_switch(v6, v4, 0);
}

uint64_t sub_10009B2F0()
{
  uint64_t v1 = *(void *)(v0 + 416);
  (*(void (**)(void))(v0 + 544))(*(unsigned __int8 *)(v0 + 330));
  return _swift_task_switch(sub_10009B368, v1, 0);
}

uint64_t sub_10009B368()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 416) + 120);
  if (*(void *)(v1 + 16) && (unint64_t v2 = sub_10002EB4C(*(unsigned __int8 *)(v0 + 331)), (v3 & 1) != 0))
  {
    uint64_t v4 = *(void *)(v0 + 416);
    uint64_t v5 = (void *)(*(void *)(v1 + 56) + 16 * v2);
    *(void *)(v0 + 560) = *v5;
    *(void *)(v0 + 568) = v5[1];
    switch(*(unsigned char *)(v4 + 168))
    {
      case 3:
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      default:
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        if (v9)
        {
LABEL_7:
          uint64_t v10 = *(void *)(v0 + 416);
          type metadata accessor for SMSemaphore();
          uint64_t v11 = swift_allocObject();
          swift_defaultActor_initialize();
          *(unsigned char *)(v11 + 112) = 0;
          *(void *)(v11 + 120) = &_swiftEmptySetSingleton;
          swift_beginAccess();
          *(void *)(v10 + 184) = v11;
          swift_release();
        }
        uint64_t v12 = swift_task_alloc();
        *(void *)(v0 + 576) = v12;
        *(void *)uint64_t v12 = v0;
        *(void *)(v12 + 8) = sub_10009B63C;
        char v13 = *(unsigned char *)(v0 + 331);
        uint64_t v14 = *(void *)(v0 + 416);
        *(void *)(v12 + 104) = v14;
        *(unsigned char *)(v12 + 176) = v13;
        uint64_t result = _swift_task_switch(sub_100098148, v14, 0);
        break;
    }
  }
  else
  {
    char v6 = *(unsigned char *)(v0 + 331);
    _StringGuts.grow(_:)(28);
    *(void *)(v0 + 336) = 0;
    *(void *)(v0 + 344) = 0xE000000000000000;
    v7._object = (void *)0x8000000100112D20;
    v7._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v7);
    *(unsigned char *)(v0 + 329) = v6;
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
  return result;
}

uint64_t sub_10009B63C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 416);
  swift_task_dealloc();
  return _swift_task_switch(sub_10009B74C, v1, 0);
}

uint64_t sub_10009B74C()
{
  *(_OWORD *)(*(void *)(v0 + 416) + 144) = *(_OWORD *)(v0 + 560);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  sub_100097DC8();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009B7F8()
{
  (*(void (**)(void))(v0 + 592))(*(unsigned __int8 *)(v0 + 330));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009B880()
{
  (*(void (**)(void))(v0 + 616))(*(unsigned __int8 *)(v0 + 330));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009B908(char a1)
{
  *(void *)(v2 + 80) = v1;
  *(unsigned char *)(v2 + 105) = a1;
  return _swift_task_switch(sub_10009B92C, v1, 0);
}

uint64_t sub_10009B92C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 128);
  if (*(void *)(v2 + 16) && (unint64_t v3 = sub_10002EB4C(*(unsigned __int8 *)(v0 + 105)), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
    *(void *)(v0 + 88) = v5;
    swift_endAccess();
    uint64_t v10 = (uint64_t (*)(uint64_t, unint64_t))(*(void *)(*(void *)v5 + 152)
                                                            + **(int **)(*(void *)v5 + 152));
    swift_retain();
    char v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v6;
    *char v6 = v0;
    v6[1] = sub_10009BB58;
    return v10(0x746E652874696177, 0xEC000000293A7265);
  }
  else
  {
    char v8 = *(unsigned char *)(v0 + 105);
    swift_endAccess();
    _StringGuts.grow(_:)(29);
    *(void *)(v0 + 64) = 0;
    *(void *)(v0 + 72) = 0xE000000000000000;
    v9._object = (void *)0x8000000100112D40;
    v9._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v9);
    *(unsigned char *)(v0 + 104) = v8;
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_10009BB58()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  return _swift_task_switch(sub_10009BC68, v1, 0);
}

uint64_t sub_10009BC68()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 105);
  type metadata accessor for SMSemaphore();
  uint64_t v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = &_swiftEmptySetSingleton;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = 0x8000000000000000;
  sub_1000A6B58(v3, v2, isUniquelyReferenced_nonNull_native);
  *(void *)(v1 + 128) = v7;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10009BD70(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 88) = a3;
  *(void *)(v4 + 96) = v3;
  *(void *)(v4 + 80) = a2;
  *(unsigned char *)(v4 + 129) = a1;
  return _swift_task_switch(sub_10009BD98, v3, 0);
}

uint64_t sub_10009BD98()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 128);
  if (*(void *)(v2 + 16) && (unint64_t v3 = sub_10002EB4C(*(unsigned __int8 *)(v0 + 129)), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
    *(void *)(v0 + 104) = v5;
    swift_endAccess();
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)(*(void *)v5 + 160)
                                                                                       + **(int **)(*(void *)v5 + 160));
    swift_retain();
    char v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v6;
    *char v6 = v0;
    v6[1] = sub_10009BFD8;
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 88);
    return v12(v8, v7, 0xD000000000000014, 0x8000000100112D60);
  }
  else
  {
    char v10 = *(unsigned char *)(v0 + 129);
    swift_endAccess();
    _StringGuts.grow(_:)(29);
    *(void *)(v0 + 64) = 0;
    *(void *)(v0 + 72) = 0xE000000000000000;
    v11._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v11._object = (void *)0x8000000100112D40;
    String.append(_:)(v11);
    *(unsigned char *)(v0 + 128) = v10;
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_10009BFD8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  if (v0) {
    char v4 = sub_10009C210;
  }
  else {
    char v4 = sub_10009C104;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10009C104()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 129);
  type metadata accessor for SMSemaphore();
  uint64_t v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = &_swiftEmptySetSingleton;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = 0x8000000000000000;
  sub_1000A6B58(v3, v2, isUniquelyReferenced_nonNull_native);
  *(void *)(v1 + 128) = v7;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10009C210()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009C274(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 48) = a3;
  *(void *)(v4 + 56) = v3;
  *(void *)(v4 + 40) = a2;
  *(unsigned char *)(v4 + 72) = a1;
  return _swift_task_switch(sub_10009C29C, v3, 0);
}

uint64_t sub_10009C29C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  char v2 = *(unsigned char *)(v0 + 72);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 152);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  swift_unknownObjectRetain();
  LOBYTE(v3) = v5(ObjectType, v3);
  swift_unknownObjectRelease();
  unint64_t v6 = sub_10009651C(v3);
  uint64_t v8 = v7;
  if (v6 == sub_10009651C(v2) && v8 == v9)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = swift_task_alloc();
      *(void *)(v0 + 64) = v12;
      *(void *)uint64_t v12 = v0;
      *(void *)(v12 + 8) = sub_10009C460;
      uint64_t v13 = *(void *)(v0 + 56);
      char v14 = *(unsigned char *)(v0 + 72);
      long long v15 = *(_OWORD *)(v0 + 40);
      *(void *)(v12 + 96) = v13;
      *(_OWORD *)(v12 + 80) = v15;
      *(unsigned char *)(v12 + 129) = v14;
      return _swift_task_switch(sub_10009BD98, v13, 0);
    }
  }
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10009C460()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10009C554(char a1)
{
  *(void *)(v2 + 104) = v1;
  *(unsigned char *)(v2 + 144) = a1;
  return _swift_task_switch(sub_10009C578, v1, 0);
}

uint64_t sub_10009C578()
{
  uint64_t v1 = (unsigned char *)(v0[13] + 168);
  swift_beginAccess();
  switch(*v1)
  {
    case 3:
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    default:
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v2)
      {
LABEL_6:
        uint64_t v4 = v0[13];
        *uint64_t v1 = 4;
        char v5 = *(unsigned char *)(v4 + 192);
        unint64_t v6 = (void *)swift_task_alloc();
        v0[14] = v6;
        *unint64_t v6 = v0;
        v6[1] = sub_10009C7F4;
        return sub_100099658(v5);
      }
      else
      {
        switch(*v1)
        {
          case 1:
            goto LABEL_4;
          default:
            char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v3) {
              goto LABEL_6;
            }
            uint64_t v8 = (uint64_t (*)(void))v0[1];
            uint64_t result = v8();
            break;
        }
      }
      return result;
  }
}

uint64_t sub_10009C7F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  return _swift_task_switch(sub_10009C904, v1, 0);
}

uint64_t sub_10009C904()
{
  sub_100029208(*(void *)(v0 + 104) + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_networkMonitor, v0 + 16, &qword_1001593A8);
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    unint64_t v2 = *(void *)(v0 + 48);
    sub_10002BCF8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v12 = (uint64_t (*)(uint64_t, unint64_t))(*(void *)(v2 + 40) + **(int **)(v2 + 40));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v3;
    void *v3 = v0;
    v3[1] = sub_10009CB94;
    uint64_t v4 = v1;
    unint64_t v5 = v2;
    unint64_t v6 = v12;
    return v6(v4, v5);
  }
  sub_100028C8C(v0 + 16, &qword_1001593A8);
  if (*(unsigned char *)(v0 + 144))
  {
    uint64_t v8 = *(void *)(v0 + 104);
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 176);
    *(void *)(v0 + 128) = v9;
    uint64_t v13 = (uint64_t (*)(uint64_t, unint64_t))(*(void *)(*(void *)v9 + 152)
                                                            + **(int **)(*(void *)v9 + 152));
    swift_retain();
    char v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v10;
    *char v10 = v0;
    v10[1] = sub_10009CE30;
    uint64_t v4 = 0x69617728706F7473;
    unint64_t v5 = 0xEB00000000293A74;
    unint64_t v6 = v13;
    return v6(v4, v5);
  }
  char v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10009CB94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  return _swift_task_switch(sub_10009CCA4, v1, 0);
}

uint64_t sub_10009CCA4()
{
  sub_100028A4C(v0 + 16);
  if (*(unsigned char *)(v0 + 144) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 104);
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 176);
    *(void *)(v0 + 128) = v2;
    unint64_t v6 = (uint64_t (*)(uint64_t, unint64_t))(*(void *)(*(void *)v2 + 152)
                                                           + **(int **)(*(void *)v2 + 152));
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v3;
    void *v3 = v0;
    v3[1] = sub_10009CE30;
    return v6(0x69617728706F7473, 0xEB00000000293A74);
  }
  else
  {
    unint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_10009CE30()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10009CF40()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100021024;
  return sub_10009CFD0();
}

uint64_t sub_10009CFD0()
{
  *(void *)(v1 + 336) = v0;
  sub_100020378(&qword_100157030);
  *(void *)(v1 + 344) = swift_task_alloc();
  return _swift_task_switch(sub_10009D064, v0, 0);
}

uint64_t sub_10009D064()
{
  uint64_t v41 = v0;
  uint64_t v1 = sub_1000A82BC(&qword_100159938, 255, (void (*)(uint64_t))type metadata accessor for SWTStateMachine);
  uint64_t v2 = OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_logger;
  *(void *)(v0 + 352) = v1;
  *(void *)(v0 + 360) = v2;
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 336);
  *(void *)(v0 + 184) = 0;
  *(void *)(v0 + 192) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  *(void *)(v0 + 216) = *(void *)(v0 + 184);
  *(void *)(v0 + 224) = *(void *)(v0 + 192);
  v4._uint64_t countAndFlagsBits = 0x63614D6574617453;
  v4._object = (void *)0xEE00203A656E6968;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v3 + 152);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  swift_unknownObjectRetain();
  LOBYTE(v5) = v7(ObjectType, v5);
  swift_unknownObjectRelease();
  *(unsigned char *)(v0 + 505) = v5;
  _print_unlocked<A, B>(_:_:)();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 368) = os_transaction_create();
  swift_release();
  uint64_t v8 = *(void *)(v3 + 152);
  uint64_t v9 = swift_getObjectType();
  char v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 16);
  swift_unknownObjectRetain();
  uint64_t v11 = v10(v9, v8);
  swift_unknownObjectRelease();
  swift_beginAccess();
  uint64_t v12 = *(void *)(v3 + 128);
  if (*(void *)(v12 + 16) && (unint64_t v13 = sub_10002EB4C(v11), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    *(void *)(v0 + 376) = v15;
    swift_endAccess();
    unint64_t v39 = (uint64_t (*)(void))(*(void *)(*(void *)v15 + 168) + **(int **)(*(void *)v15 + 168));
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10009D668;
    return v39();
  }
  else
  {
    swift_endAccess();
    swift_retain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(void *)(v0 + 336);
    if (v20)
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446210;
      long long buf = v22;
      uint64_t v23 = *(void *)(v21 + 152);
      uint64_t v24 = swift_getObjectType();
      BOOL v25 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 16);
      swift_unknownObjectRetain();
      char v26 = v25(v24, v23);
      swift_unknownObjectRelease();
      unint64_t v27 = sub_10009651C(v26);
      *(void *)(v0 + 304) = sub_1000262AC(v27, v28, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "SM: activating state %{public}s", buf, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v29 = *(void *)(v0 + 344);
    uint64_t v30 = *(void *)(v0 + 352);
    uint64_t v31 = *(void *)(v0 + 336);
    uint64_t v32 = *(void *)(v31 + 152);
    uint64_t v33 = swift_getObjectType();
    unint64_t v34 = *(void (**)(uint64_t, uint64_t))(v32 + 32);
    swift_unknownObjectRetain();
    v34(v33, v32);
    swift_unknownObjectRelease();
    uint64_t v35 = (void *)swift_allocObject();
    _OWORD v35[2] = v31;
    v35[3] = v30;
    v35[4] = v31;
    swift_retain_n();
    uint64_t v36 = sub_1000A12BC(v29, (uint64_t)&unk_100159940, (uint64_t)v35);
    *(void *)(v0 + 392) = v36;
    char v37 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v37;
    *char v37 = v0;
    v37[1] = sub_10009DA70;
    return Task<>.value.getter(v0 + 320, v36, &type metadata for SWTStateMachine.SMTransition);
  }
}

uint64_t sub_10009D668()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10009D794, v1, 0);
}

uint64_t sub_10009D794()
{
  uint64_t v21 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[42];
    Swift::String v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)Swift::String v4 = 136446210;
    uint64_t v5 = *(void *)(v3 + 152);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    LOBYTE(ObjectType) = v7(ObjectType, v5);
    swift_unknownObjectRelease();
    unint64_t v8 = sub_10009651C(ObjectType);
    v0[38] = sub_1000262AC(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SM: activating state %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v10 = v0[43];
  uint64_t v11 = v0[44];
  uint64_t v12 = v0[42];
  uint64_t v13 = *(void *)(v12 + 152);
  uint64_t v14 = swift_getObjectType();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 32);
  swift_unknownObjectRetain();
  v15(v14, v13);
  swift_unknownObjectRelease();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v12;
  v16[3] = v11;
  v16[4] = v12;
  swift_retain_n();
  uint64_t v17 = sub_1000A12BC(v10, (uint64_t)&unk_100159940, (uint64_t)v16);
  v0[49] = v17;
  uint64_t v18 = (void *)swift_task_alloc();
  v0[50] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_10009DA70;
  return Task<>.value.getter(v0 + 40, v17, &type metadata for SWTStateMachine.SMTransition);
}

uint64_t sub_10009DA70()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  swift_task_dealloc();
  return _swift_task_switch(sub_10009DB80, v1, 0);
}

uint64_t sub_10009DB80()
{
  uint64_t v44 = v0;
  unint64_t v1 = v0[40];
  v0[51] = v1;
  if (v1 >> 62)
  {
    if (v1 >> 62 == 1)
    {
      uint64_t v2 = v0[42];
      swift_unknownObjectRelease();
      uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      *(void *)(v2 + 160) = v1 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1000A973C(v1);
      swift_retain();
      swift_release();
      Swift::String v4 = (void *)swift_task_alloc();
      v0[52] = v4;
      uint64_t v5 = sub_100020378(&qword_1001570C0);
      *Swift::String v4 = v0;
      v4[1] = sub_10009E3B8;
      return Task.value.getter((char *)v0 + 506, v3, &type metadata for SMState, v5, &protocol self-conformance witness table for Error);
    }
    else
    {
      switch(*(unsigned char *)(v0[42] + 168))
      {
        case 4:
          swift_bridgeObjectRelease();
          goto LABEL_22;
        default:
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v33 & 1) == 0)
          {
            *(unsigned char *)(v0[42] + 168) = 2;
            unint64_t v34 = (void *)swift_task_alloc();
            v0[56] = v34;
            void *v34 = v0;
            v34[1] = sub_10009ECB8;
            uint64_t v29 = v0[42];
            v34[5] = v29;
            uint64_t v30 = sub_1000A07A8;
            goto LABEL_18;
          }
LABEL_22:
          uint64_t v35 = v0[42];
          *(unsigned char *)(v35 + 168) = 0;
          swift_beginAccess();
          uint64_t v36 = *(void *)(v35 + 176);
          v0[54] = v36;
          uint64_t v42 = (uint64_t (*)(void))(*(void *)(*(void *)v36 + 168) + **(int **)(*(void *)v36 + 168));
          swift_retain();
          char v37 = (void *)swift_task_alloc();
          v0[55] = v37;
          *char v37 = v0;
          v37[1] = sub_10009EB14;
          uint64_t result = v42();
          break;
      }
    }
  }
  else
  {
    uint64_t v41 = v0 + 34;
    v0[59] = v0[46];
    swift_retain_n();
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[42];
    if (v8)
    {
      os_log_t log = v6;
      uint64_t v10 = swift_slowAlloc();
      v0[34] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446722;
      uint64_t v11 = v0[42];
      v0[35] = sub_1000262AC(*(void *)&aStopped_1[8 * *(char *)(v9 + 168)], *(void *)&aShutdown_2[8 * *(char *)(v9 + 168) + 8], v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v10 + 12) = 2082;
      uint64_t v12 = *(void *)(v11 + 152);
      os_log_type_t type = v7;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
      swift_unknownObjectRetain();
      LOBYTE(ObjectType) = v14(ObjectType, v12);
      swift_unknownObjectRelease();
      unint64_t v15 = sub_10009651C(ObjectType);
      v0[36] = sub_1000262AC(v15, v16, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v10 + 22) = 2082;
      unint64_t v17 = sub_10009651C(v1);
      v0[37] = sub_1000262AC(v17, v18, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "SM: %{public}s transition from %{public}s to %{public}s", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v19 = *(void *)(v0[42] + 120);
    if (*(void *)(v19 + 16) && (unint64_t v20 = sub_10002EB4C(v1), (v21 & 1) != 0))
    {
      uint64_t v22 = (void *)(*(void *)(v19 + 56) + 16 * v20);
      v0[60] = *v22;
      v0[61] = v22[1];
      swift_unknownObjectRetain();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        BOOL v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)BOOL v25 = 136446210;
        unint64_t v26 = sub_10009651C(v1);
        v0[33] = sub_1000262AC(v26, v27, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "next state: %{public}s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v28 = swift_task_alloc();
      v0[62] = v28;
      *(void *)uint64_t v28 = v0;
      *(void *)(v28 + 8) = sub_10009F644;
      uint64_t v29 = v0[42];
      *(void *)(v28 + 104) = v29;
      *(unsigned char *)(v28 + 176) = v1;
      uint64_t v30 = sub_100098148;
LABEL_18:
      return _swift_task_switch(v30, v29, 0);
    }
    else
    {
      swift_unknownObjectRelease();
      _StringGuts.grow(_:)(28);
      v0[29] = 0;
      uint64_t v31 = v0 + 29;
      v31[1] = 0xE000000000000000;
      v32._object = (void *)0x8000000100112D20;
      v32._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v32);
      *((unsigned char *)v31 + 275) = v1;
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    }
  }
  return result;
}

uint64_t sub_10009E3B8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 424) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 336);
  if (v0) {
    Swift::String v4 = sub_10009FD04;
  }
  else {
    Swift::String v4 = sub_10009E4E4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10009E4E4()
{
  uint64_t v41 = v0;
  unsigned int v38 = *(unsigned __int8 *)(v0 + 506);
  unint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 336);
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  *(void *)(v0 + 200) = *(void *)(v0 + 248);
  unint64_t v39 = (uint64_t *)(v0 + 272);
  *(void *)(v0 + 208) = *(void *)(v0 + 256);
  v3._object = (void *)0x8000000100112F10;
  v3._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v2 + 152);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  swift_unknownObjectRetain();
  LOBYTE(v4) = v6(ObjectType, v4);
  swift_unknownObjectRelease();
  *(unsigned char *)(v0 + 504) = v4;
  _print_unlocked<A, B>(_:_:)();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = os_transaction_create();
  sub_1000A975C(v1);
  swift_release();
  *(void *)(v2 + 160) = 0;
  swift_release();
  *(void *)(v0 + 472) = v7;
  swift_retain_n();
  BOOL v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 336);
  if (v10)
  {
    uint64_t v12 = swift_slowAlloc();
    *(void *)(v0 + 272) = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446722;
    os_log_t log = v8;
    uint64_t v13 = *(void *)(v0 + 336);
    *(void *)(v0 + 280) = sub_1000262AC(*(void *)&aStopped_1[8 * *(char *)(v11 + 168)], *(void *)&aShutdown_2[8 * *(char *)(v11 + 168) + 8], v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v14 = *(void *)(v13 + 152);
    os_log_type_t type = v9;
    uint64_t v15 = swift_getObjectType();
    unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 16);
    swift_unknownObjectRetain();
    LOBYTE(v15) = v16(v15, v14);
    swift_unknownObjectRelease();
    unint64_t v17 = sub_10009651C(v15);
    *(void *)(v0 + 288) = sub_1000262AC(v17, v18, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v12 + 22) = 2082;
    uint64_t v19 = v38;
    unint64_t v20 = sub_10009651C(v38);
    *(void *)(v0 + 296) = sub_1000262AC(v20, v21, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "SM: %{public}s transition from %{public}s to %{public}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    uint64_t v19 = v38;
  }
  uint64_t v22 = *(void *)(*(void *)(v0 + 336) + 120);
  if (*(void *)(v22 + 16) && (unint64_t v23 = sub_10002EB4C(v19), (v24 & 1) != 0))
  {
    BOOL v25 = (void *)(*(void *)(v22 + 56) + 16 * v23);
    *(void *)(v0 + 480) = *v25;
    *(void *)(v0 + 488) = v25[1];
    swift_unknownObjectRetain();
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446210;
      unint64_t v29 = sub_10009651C(v19);
      *(void *)(v0 + 264) = sub_1000262AC(v29, v30, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "next state: %{public}s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v31 = swift_task_alloc();
    *(void *)(v0 + 496) = v31;
    *(void *)uint64_t v31 = v0;
    *(void *)(v31 + 8) = sub_10009F644;
    uint64_t v32 = *(void *)(v0 + 336);
    *(void *)(v31 + 104) = v32;
    *(unsigned char *)(v31 + 176) = v19;
    return _swift_task_switch(sub_100098148, v32, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    _StringGuts.grow(_:)(28);
    *(void *)(v0 + 232) = 0;
    uint64_t v33 = v0 + 232;
    *(void *)(v33 + 8) = 0xE000000000000000;
    v34._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v34._object = (void *)0x8000000100112D20;
    String.append(_:)(v34);
    *(unsigned char *)(v33 + 275) = v19;
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_10009EB14()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10009EC40, v1, 0);
}

uint64_t sub_10009EC40()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009ECB8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 336);
  *(unsigned char *)(*(void *)v1 + 508) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10009EDD0, v2, 0);
}

uint64_t sub_10009EDD0()
{
  uint64_t v38 = v0;
  if ((*(unsigned char *)(v0 + 508) & 0xFE) == 0xA)
  {
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "SM: enter idle", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void *)(v0 + 336);
    swift_unknownObjectRelease();

    *(unsigned char *)(v4 + 168) = 3;
    swift_beginAccess();
    uint64_t v5 = *(void *)(v4 + 184);
    *(void *)(v0 + 456) = v5;
    uint64_t v36 = (uint64_t (*)(void))(*(void *)(*(void *)v5 + 168) + **(int **)(*(void *)v5 + 168));
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10009F4A0;
    return v36();
  }
  else
  {
    *(unsigned char *)(*(void *)(v0 + 336) + 168) = 1;
    uint64_t v8 = *(unsigned __int8 *)(v0 + 508);
    *(void *)(v0 + 472) = *(void *)(v0 + 368);
    swift_retain_n();
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 336);
    if (v11)
    {
      uint64_t v13 = swift_slowAlloc();
      *(void *)(v0 + 272) = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446722;
      os_log_type_t type = v10;
      uint64_t v14 = *(void *)(v0 + 336);
      *(void *)(v0 + 280) = sub_1000262AC(*(void *)&aStopped_1[8 * *(char *)(v12 + 168)], *(void *)&aShutdown_2[8 * *(char *)(v12 + 168) + 8], (uint64_t *)(v0 + 272));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v13 + 12) = 2082;
      uint64_t v15 = *(void *)(v14 + 152);
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 16);
      swift_unknownObjectRetain();
      uint64_t v8 = v8;
      LOBYTE(ObjectType) = v17(ObjectType, v15);
      swift_unknownObjectRelease();
      unint64_t v18 = sub_10009651C(ObjectType);
      *(void *)(v0 + 288) = sub_1000262AC(v18, v19, (uint64_t *)(v0 + 272));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v13 + 22) = 2082;
      unint64_t v20 = sub_10009651C(v8);
      *(void *)(v0 + 296) = sub_1000262AC(v20, v21, (uint64_t *)(v0 + 272));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, type, "SM: %{public}s transition from %{public}s to %{public}s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v22 = *(void *)(*(void *)(v0 + 336) + 120);
    if (*(void *)(v22 + 16) && (unint64_t v23 = sub_10002EB4C(v8), (v24 & 1) != 0))
    {
      BOOL v25 = (void *)(*(void *)(v22 + 56) + 16 * v23);
      *(void *)(v0 + 480) = *v25;
      *(void *)(v0 + 488) = v25[1];
      swift_unknownObjectRetain();
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136446210;
        unint64_t v29 = sub_10009651C(v8);
        *(void *)(v0 + 264) = sub_1000262AC(v29, v30, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "next state: %{public}s", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v31 = swift_task_alloc();
      *(void *)(v0 + 496) = v31;
      *(void *)uint64_t v31 = v0;
      *(void *)(v31 + 8) = sub_10009F644;
      uint64_t v32 = *(void *)(v0 + 336);
      *(void *)(v31 + 104) = v32;
      *(unsigned char *)(v31 + 176) = v8;
      return _swift_task_switch(sub_100098148, v32, 0);
    }
    else
    {
      swift_unknownObjectRelease();
      _StringGuts.grow(_:)(28);
      *(void *)(v0 + 232) = 0;
      uint64_t v33 = v0 + 232;
      *(void *)(v33 + 8) = 0xE000000000000000;
      v34._object = (void *)0x8000000100112D20;
      v34._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v34);
      *(unsigned char *)(v33 + 275) = v8;
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    }
  }
}

uint64_t sub_10009F4A0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10009F5CC, v1, 0);
}

uint64_t sub_10009F5CC()
{
  unint64_t v1 = *(void *)(v0 + 408);
  swift_release();
  sub_1000A975C(v1);
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10009F644()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  swift_task_dealloc();
  return _swift_task_switch(sub_10009F754, v1, 0);
}

uint64_t sub_10009F754()
{
  uint64_t v40 = v0;
  unint64_t v1 = *(void *)(v0 + 408);
  *(_OWORD *)(*(void *)(v0 + 336) + 144) = *(_OWORD *)(v0 + 480);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_release();
  sub_1000A975C(v1);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v2 = *(void *)(v0 + 336);
  *(void *)(v0 + 184) = 0;
  *(void *)(v0 + 192) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  *(void *)(v0 + 216) = *(void *)(v0 + 184);
  *(void *)(v0 + 224) = *(void *)(v0 + 192);
  v3._uint64_t countAndFlagsBits = 0x63614D6574617453;
  v3._object = (void *)0xEE00203A656E6968;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v2 + 152);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  swift_unknownObjectRetain();
  char v7 = v6(ObjectType, v4);
  swift_unknownObjectRelease();
  *(unsigned char *)(v0 + 505) = v7;
  _print_unlocked<A, B>(_:_:)();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 368) = os_transaction_create();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v8 = *(void *)(v2 + 152);
  uint64_t v9 = swift_getObjectType();
  os_log_type_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 16);
  swift_unknownObjectRetain();
  uint64_t v11 = v10(v9, v8);
  swift_unknownObjectRelease();
  swift_beginAccess();
  uint64_t v12 = *(void *)(v2 + 128);
  if (*(void *)(v12 + 16) && (unint64_t v13 = sub_10002EB4C(v11), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    *(void *)(v0 + 376) = v15;
    swift_endAccess();
    uint64_t v38 = (uint64_t (*)(void))(*(void *)(*(void *)v15 + 168) + **(int **)(*(void *)v15 + 168));
    swift_retain();
    unint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v16;
    *unint64_t v16 = v0;
    v16[1] = sub_10009D668;
    return v38();
  }
  else
  {
    swift_endAccess();
    swift_retain_n();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(void *)(v0 + 336);
    if (v20)
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446210;
      long long buf = v22;
      uint64_t v23 = *(void *)(v21 + 152);
      uint64_t v24 = swift_getObjectType();
      BOOL v25 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 16);
      swift_unknownObjectRetain();
      LOBYTE(v24) = v25(v24, v23);
      swift_unknownObjectRelease();
      unint64_t v26 = sub_10009651C(v24);
      *(void *)(v0 + 304) = sub_1000262AC(v26, v27, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "SM: activating state %{public}s", buf, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v28 = *(void *)(v0 + 344);
    uint64_t v29 = *(void *)(v0 + 352);
    uint64_t v30 = *(void *)(v0 + 336);
    uint64_t v31 = *(void *)(v30 + 152);
    uint64_t v32 = swift_getObjectType();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v31 + 32);
    swift_unknownObjectRetain();
    v33(v32, v31);
    swift_unknownObjectRelease();
    Swift::String v34 = (void *)swift_allocObject();
    void v34[2] = v30;
    v34[3] = v29;
    v34[4] = v30;
    swift_retain_n();
    uint64_t v35 = sub_1000A12BC(v28, (uint64_t)&unk_100159940, (uint64_t)v34);
    *(void *)(v0 + 392) = v35;
    uint64_t v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_10009DA70;
    return Task<>.value.getter(v0 + 320, v35, &type metadata for SWTStateMachine.SMTransition);
  }
}

uint64_t sub_10009FD04()
{
  uint64_t v59 = v0;
  char v54 = (uint64_t *)(v0 + 272);
  uint64_t v1 = v0 + 336;
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 336);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v53 = (void *)swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v6 = *(void *)(v4 + 152);
    uint64_t ObjectType = swift_getObjectType();
    os_log_t log = v2;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
    swift_unknownObjectRetain();
    char v9 = v8(ObjectType, v6);
    uint64_t v1 = v0 + 336;
    char v10 = v9;
    swift_unknownObjectRelease();
    unint64_t v11 = sub_10009651C(v10);
    *(void *)(v0 + 328) = sub_1000262AC(v11, v12, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 312) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v53 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v3, "SM: state %{public}s threw exception: %{public}@", (uint8_t *)v5, 0x16u);
    sub_100020378(&qword_1001590C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v14 = *(void *)(v0 + 336);
  unsigned int v56 = *(unsigned __int8 *)(v14 + 136);
  unint64_t v15 = *(void *)(v0 + 408);
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  uint64_t v16 = *(void *)(v0 + 256);
  *(void *)(v0 + 200) = *(void *)(v0 + 248);
  *(void *)(v0 + 208) = v16;
  v17._object = (void *)0x8000000100112F10;
  v17._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v17);
  uint64_t v18 = *(void *)(v14 + 152);
  uint64_t v19 = swift_getObjectType();
  BOOL v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 16);
  swift_unknownObjectRetain();
  LOBYTE(v18) = v20(v19, v18);
  swift_unknownObjectRelease();
  *(unsigned char *)(v0 + 504) = v18;
  _print_unlocked<A, B>(_:_:)();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v21 = os_transaction_create();
  sub_1000A975C(v15);
  swift_release();
  *(void *)(v14 + 160) = 0;
  swift_release();
  *(void *)(v0 + 472) = v21;
  swift_retain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = *(void *)(v0 + 336);
  if (v24)
  {
    uint64_t v55 = v1;
    uint64_t v26 = swift_slowAlloc();
    *(void *)(v0 + 272) = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136446722;
    uint64_t v27 = *(void *)(v0 + 336);
    *(void *)(v0 + 280) = sub_1000262AC(*(void *)&aStopped_1[8 * *(char *)(v25 + 168)], *(void *)&aShutdown_2[8 * *(char *)(v25 + 168) + 8], v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v26 + 12) = 2082;
    os_log_type_t loga = v23;
    uint64_t v28 = *(void *)(v27 + 152);
    uint64_t v29 = swift_getObjectType();
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 16);
    swift_unknownObjectRetain();
    char v31 = v30(v29, v28);
    swift_unknownObjectRelease();
    unint64_t v32 = sub_10009651C(v31);
    *(void *)(v0 + 288) = sub_1000262AC(v32, v33, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v26 + 22) = 2082;
    unint64_t v34 = sub_10009651C(v56);
    *(void *)(v0 + 296) = sub_1000262AC(v34, v35, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, loga, "SM: %{public}s transition from %{public}s to %{public}s", (uint8_t *)v26, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v55;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v36 = *(void *)(*(void *)v1 + 120);
  if (*(void *)(v36 + 16) && (unint64_t v37 = sub_10002EB4C(v56), (v38 & 1) != 0))
  {
    uint64_t v39 = (void *)(*(void *)(v36 + 56) + 16 * v37);
    *(void *)(v0 + 480) = *v39;
    *(void *)(v0 + 488) = v39[1];
    swift_unknownObjectRetain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446210;
      unint64_t v43 = sub_10009651C(v56);
      *(void *)(v0 + 264) = sub_1000262AC(v43, v44, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "next state: %{public}s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v45 = swift_task_alloc();
    *(void *)(v0 + 496) = v45;
    *(void *)uint64_t v45 = v0;
    *(void *)(v45 + 8) = sub_10009F644;
    uint64_t v46 = *(void *)(v0 + 336);
    *(void *)(v45 + 104) = v46;
    *(unsigned char *)(v45 + 176) = v56;
    return _swift_task_switch(sub_100098148, v46, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v57 = 0;
    unint64_t v58 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    unint64_t v47 = v58;
    *(void *)(v0 + 232) = v57;
    uint64_t v48 = v0 + 232;
    *(void *)(v48 + 8) = v47;
    v49._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v49._object = (void *)0x8000000100112D20;
    String.append(_:)(v49);
    *(unsigned char *)(v48 + 275) = v56;
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_1000A05B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a1, (uint64_t)v7, &qword_100157030);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100028C8C((uint64_t)v7, &qword_100157030);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    void v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t sub_1000A0788()
{
  *(void *)(v1 + 40) = v0;
  return _swift_task_switch(sub_1000A07A8, v0, 0);
}

uint64_t sub_1000A07A8()
{
  uint64_t v1 = *(void *)(v0[5] + 112);
  v0[6] = v1;
  unint64_t v2 = (*(void *)v1 + 208) & 0xFFFFFFFFFFFFLL | 0xD1C2000000000000;
  v0[7] = *(void *)(*(void *)v1 + 208);
  v0[8] = v2;
  return _swift_task_switch(sub_1000A07E8, v1, 0);
}

uint64_t sub_1000A07E8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 72) = (*(uint64_t (**)(void))(v0 + 56))();
  return _swift_task_switch(sub_1000A0858, v1, 0);
}

uint64_t sub_1000A0858()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  uint64_t v6 = v5(ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v7 = sub_1000A9E1C(v6, v1);
  *(void *)(v0 + 80) = v7;
  swift_bridgeObjectRelease();
  char v8 = *(unsigned char *)(v7 + 32);
  *(unsigned char *)(v0 + 136) = v8;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << v8;
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(v7 + 56);
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = __clz(__rbit64(v11));
    uint64_t v14 = (v11 - 1) & v11;
    unint64_t v15 = *(void **)(v0 + 80);
LABEL_5:
    *(void *)(v0 + 88) = v12;
    *(void *)(v0 + 96) = v14;
    uint64_t v16 = *(void *)(v0 + 40);
    uint64_t v17 = *(unsigned __int8 *)(v15[6] + v13);
    *(unsigned char *)(v0 + 137) = v17;
    *(void *)(v0 + 104) = *(void *)(v16 + 144);
    uint64_t v18 = *(void *)(v16 + 152);
    uint64_t v19 = swift_getObjectType();
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 40) + **(int **)(v18 + 40));
    swift_unknownObjectRetain();
    BOOL v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v20;
    void *v20 = v0;
    v20[1] = sub_1000A0B50;
    return v28(v17, v19, v18);
  }
  unint64_t v22 = 63 - v10;
  unint64_t v15 = *(void **)(v0 + 80);
  if (v22 > 0x7F)
  {
    unint64_t v23 = v15[8];
    if (v23)
    {
      uint64_t v12 = 1;
LABEL_11:
      uint64_t v14 = (v23 - 1) & v23;
      unint64_t v13 = __clz(__rbit64(v23)) + (v12 << 6);
      goto LABEL_5;
    }
    if (v22 >= 0xC0)
    {
      unint64_t v23 = v15[9];
      if (v23)
      {
        uint64_t v12 = 2;
        goto LABEL_11;
      }
      if (v22 >= 0x100)
      {
        unint64_t v23 = v15[10];
        if (v23)
        {
          uint64_t v12 = 3;
          goto LABEL_11;
        }
        if (v22 >= 0x140)
        {
          unint64_t v23 = v15[11];
          if (v23)
          {
            uint64_t v12 = 4;
            goto LABEL_11;
          }
          uint64_t v24 = 0;
          uint64_t v25 = v22 >> 6;
          if (v25 <= 5) {
            uint64_t v25 = 5;
          }
          uint64_t v26 = v25 - 5;
          while (v26 != v24)
          {
            unint64_t v23 = v15[v24++ + 12];
            if (v23)
            {
              uint64_t v12 = v24 + 4;
              goto LABEL_11;
            }
          }
        }
      }
    }
  }
  swift_release();
  uint64_t v27 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v27(10);
}

uint64_t sub_1000A0B50(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(unsigned char *)(*(void *)v1 + 138) = a1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1000A0C84, v2, 0);
}

uint64_t sub_1000A0C84(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(v3 + 138) & 0xFE) != 0xA)
  {
    a2 = *(void *)(v3 + 48);
    unint64_t v14 = (*(void *)a2 + 192) & 0xFFFFFFFFFFFFLL | 0xBE86000000000000;
    *(void *)(v3 + 120) = *(void *)(*(void *)a2 + 192);
    *(void *)(v3 + 128) = v14;
    a1 = sub_1000A0F3C;
    a3 = 0;
    return _swift_task_switch(a1, a2, a3);
  }
  int64_t v4 = *(void *)(v3 + 88);
  unint64_t v5 = *(void *)(v3 + 96);
  if (v5)
  {
    uint64_t v6 = (v5 - 1) & v5;
    unint64_t v7 = __clz(__rbit64(v5)) | (v4 << 6);
    a1 = *(uint64_t (**)())(v3 + 80);
LABEL_4:
    *(void *)(v3 + 88) = v4;
    *(void *)(v3 + 96) = v6;
    uint64_t v8 = *(void *)(v3 + 40);
    uint64_t v9 = *(unsigned __int8 *)(*((void *)a1 + 6) + v7);
    *(unsigned char *)(v3 + 137) = v9;
    *(void *)(v3 + 104) = *(void *)(v8 + 144);
    uint64_t v10 = *(void *)(v8 + 152);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 40) + **(int **)(v10 + 40));
    swift_unknownObjectRetain();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v3 + 112) = v12;
    void *v12 = v3;
    v12[1] = sub_1000A0B50;
    return v21(v9, ObjectType, v10);
  }
  int64_t v15 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_28:
    __break(1u);
    return _swift_task_switch(a1, a2, a3);
  }
  int64_t v16 = (unint64_t)((1 << *(unsigned char *)(v3 + 136)) + 63) >> 6;
  a1 = *(uint64_t (**)())(v3 + 80);
  if (v15 < v16)
  {
    uint64_t v17 = (char *)a1 + 56;
    unint64_t v18 = *((void *)a1 + v15 + 7);
    ++v4;
    if (v18)
    {
LABEL_13:
      uint64_t v6 = (v18 - 1) & v18;
      unint64_t v7 = __clz(__rbit64(v18)) + (v4 << 6);
      goto LABEL_4;
    }
    int64_t v4 = v15 + 1;
    if (v15 + 1 < v16)
    {
      unint64_t v18 = *(void *)&v17[8 * v4];
      if (v18) {
        goto LABEL_13;
      }
      int64_t v4 = v15 + 2;
      if (v15 + 2 < v16)
      {
        unint64_t v18 = *(void *)&v17[8 * v4];
        if (v18) {
          goto LABEL_13;
        }
        int64_t v19 = v15 + 3;
        if (v19 < v16)
        {
          unint64_t v18 = *(void *)&v17[8 * v19];
          if (v18)
          {
            int64_t v4 = v19;
            goto LABEL_13;
          }
          while (1)
          {
            int64_t v4 = v19 + 1;
            if (__OFADD__(v19, 1)) {
              goto LABEL_28;
            }
            if (v4 >= v16) {
              break;
            }
            unint64_t v18 = *(void *)&v17[8 * v4];
            ++v19;
            if (v18) {
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  swift_release();
  BOOL v20 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v20(10);
}

uint64_t sub_1000A0F3C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(void))(v0 + 120))(*(unsigned __int8 *)(v0 + 137));
  return _swift_task_switch(sub_1000A0FAC, v1, 0);
}

uint64_t sub_1000A0FAC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 138);
  return v1(v2);
}

uint64_t sub_1000A1010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = a4;
  return _swift_task_switch(sub_1000A1030, a4, 0);
}

uint64_t sub_1000A1030()
{
  uint64_t v1 = (void *)v0[6];
  swift_beginAccess();
  v0[7] = v1[18];
  uint64_t v2 = v1[19];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = v1[14];
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 48) + **(int **)(v2 + 48));
  swift_unknownObjectRetain();
  unint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *unint64_t v5 = v0;
  v5[1] = sub_1000A1168;
  return v7(v4, ObjectType, v2);
}

uint64_t sub_1000A1168(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1000A129C, v2, 0);
}

uint64_t sub_1000A129C()
{
  **(void **)(v0 + 40) = *(void *)(v0 + 72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A12BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100028C8C(a1, &qword_100157030);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000A1464()
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(v0 + 160))
  {
    swift_retain();
    sub_100020378(&qword_1001570C0);
    Task.cancel()();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000A14DC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000A14FC, v0, 0);
}

uint64_t sub_1000A14FC()
{
  uint64_t v1 = *(void *)(v0[2] + 112);
  v0[3] = v1;
  unint64_t v2 = (*(void *)v1 + 208) & 0xFFFFFFFFFFFFLL | 0xD1C2000000000000;
  v0[4] = *(void *)(*(void *)v1 + 208);
  v0[5] = v2;
  return _swift_task_switch(sub_1000A153C, v1, 0);
}

uint64_t sub_1000A153C()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 32))();
  unint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1000A15A0()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000A15C0, v0, 0);
}

uint64_t sub_1000A15C0()
{
  uint64_t v1 = *(void *)(v0[2] + 112);
  v0[3] = v1;
  unint64_t v2 = (*(void *)v1 + 136) & 0xFFFFFFFFFFFFLL | 0xDCF0000000000000;
  v0[4] = *(void *)(*(void *)v1 + 136);
  v0[5] = v2;
  return _swift_task_switch(sub_1000A1600, v1, 0);
}

uint64_t sub_1000A1600()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 48) = (*(uint64_t (**)(void))(v0 + 32))();
  return _swift_task_switch(sub_1000A1670, v1, 0);
}

uint64_t sub_1000A1670()
{
  uint64_t v1 = sub_1000A16D0(*(void *)(v0 + 48));
  unint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1000A16D0(uint64_t a1)
{
  sub_100091DE8();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v15 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = sub_100090D0C(&v14, *(unsigned char *)(*(void *)(a1 + 48) + v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000A1848()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_networkMonitor, &qword_1001593A8);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000A1914()
{
  sub_1000A1848();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000A1940()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_1000A82BC(&qword_100157828, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1000A82BC(&qword_100157830, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  unint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = sub_10002E924;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_1000A1AE8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_1000262AC(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_1000A1B60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v22[9] = v8;
      type metadata accessor for ContinuationStore(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v22[0];
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v17 = sub_1000A2354(v7, result + 1);
    v22[0] = v17;
    if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
    {
      swift_retain();
      sub_1000A27BC();
      uint64_t v18 = v22[0];
    }
    else
    {
      uint64_t v18 = v17;
      swift_retain();
    }
    sub_1000A305C(a2, v18);
    uint64_t *v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)();
    uint64_t v10 = *(void (**)(void *))(*(void *)a2 + 152);
    swift_bridgeObjectRetain();
    v10(v22);
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      swift_retain();
      char v14 = static UUID.== infix(_:_:)();
      swift_release();
      if (v14)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        swift_retain();
        char v16 = static UUID.== infix(_:_:)();
        swift_release();
        if (v16) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22[0] = *v2;
    *uint64_t v2 = 0x8000000000000000;
    Swift::Int v20 = swift_retain();
    sub_1000A320C(v20, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v22[0];
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t type metadata accessor for SMSemaphore()
{
  return self;
}

uint64_t sub_1000A1E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v9 = v2[7];
  Swift::Int v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *Swift::Int v11 = v3;
  v11[1] = sub_100021024;
  return sub_100093CA0((uint64_t)v11, a2, v5, v6, v7, v8, v10, v9);
}

BOOL sub_1000A1F8C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  unint64_t v2 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v1 + 32));
  uint64_t v3 = (1 << v2) & *(void *)(v1 + ((v2 >> 3) & 0xFFFFFFFFFFFFFF8) + 56);
  if (!v3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v0;
    *uint64_t v0 = 0x8000000000000000;
    sub_1000A3438(v2, isUniquelyReferenced_nonNull_native);
    *uint64_t v0 = v6;
    swift_bridgeObjectRelease();
  }
  return v3 == 0;
}

uint64_t sub_1000A2050(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for TransitionWatcher();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_1000A257C(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_1000A2D30();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_1000A3120(a2, v17);
    uint64_t *v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for TransitionWatcher();
  sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_1000A3538(v15, v12, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_1000A82BC(&qword_1001576C8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

Swift::Int sub_1000A2354(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100020378(&qword_100159990);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v17 = v2;
    __CocoaSet.makeIterator()();
    uint64_t v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for ContinuationStore(0);
      do
      {
        v16[0] = v4;
        swift_dynamicCast();
        uint64_t v2 = v17;
        if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
        {
          sub_1000A27BC();
          uint64_t v2 = v17;
        }
        uint64_t v5 = v16[9];
        Hasher.init(_seed:)();
        (*(void (**)(void *))(*(void *)v5 + 152))(v16);
        Swift::Int result = Hasher._finalize()();
        uint64_t v7 = v2 + 56;
        uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v9 = result & ~v8;
        unint64_t v10 = v9 >> 6;
        if (((-1 << v9) & ~*(void *)(v2 + 56 + 8 * (v9 >> 6))) != 0)
        {
          unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*(void *)(v2 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v12 = 0;
          unint64_t v13 = (unint64_t)(63 - v8) >> 6;
          do
          {
            if (++v10 == v13 && (v12 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v14 = v10 == v13;
            if (v10 == v13) {
              unint64_t v10 = 0;
            }
            v12 |= v14;
            uint64_t v15 = *(void *)(v7 + 8 * v10);
          }
          while (v15 == -1);
          unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
        }
        *(void *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        *(void *)(*(void *)(v2 + 48) + 8 * v11) = v5;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_1000A257C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100020378(&qword_100159920);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for TransitionWatcher();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1000A2D30();
          uint64_t v2 = v14;
        }
        sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_1000A27BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100020378(&qword_100159990);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_37;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_38;
    }
    if (v15 >= v9) {
      break;
    }
    unint64_t v16 = v6[v15];
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v9) {
        break;
      }
      unint64_t v16 = v6[v11];
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v9) {
          break;
        }
        unint64_t v16 = v6[v11];
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 >= v9) {
            break;
          }
          unint64_t v16 = v6[v17];
          if (!v16)
          {
            while (1)
            {
              int64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_39;
              }
              if (v11 >= v9) {
                goto LABEL_33;
              }
              unint64_t v16 = v6[v11];
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          int64_t v11 = v17;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    (*(void (**)(char *))(*(void *)v18 + 152))(v29);
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v23 = 0;
    unint64_t v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1000A2A98);
      }
      BOOL v25 = v22 == v24;
      if (v22 == v24) {
        unint64_t v22 = 0;
      }
      v23 |= v25;
      uint64_t v26 = *(void *)(v10 + 8 * v22);
    }
    while (v26 == -1);
    unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
LABEL_33:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000A2AB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100020378(&qword_100159980);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v23 = v2;
    int64_t v5 = 0;
    unint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (!v9)
      {
        int64_t v13 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v13 >= v10) {
          goto LABEL_31;
        }
        uint64_t v9 = v6[v13];
        ++v5;
        if (!v9)
        {
          int64_t v5 = v13 + 1;
          if (v13 + 1 >= v10) {
            goto LABEL_31;
          }
          uint64_t v9 = v6[v5];
          if (!v9)
          {
            int64_t v5 = v13 + 2;
            if (v13 + 2 >= v10) {
              goto LABEL_31;
            }
            uint64_t v9 = v6[v5];
            if (!v9)
            {
              int64_t v14 = v13 + 3;
              if (v14 >= v10)
              {
LABEL_31:
                uint64_t v22 = 1 << *(unsigned char *)(v23 + 32);
                if (v22 > 63) {
                  bzero(v6, ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v22;
                }
                uint64_t v1 = v0;
                *(void *)(v23 + 16) = 0;
                break;
              }
              uint64_t v9 = v6[v14];
              if (!v9)
              {
                while (1)
                {
                  int64_t v5 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_37;
                  }
                  if (v5 >= v10) {
                    goto LABEL_31;
                  }
                  uint64_t v9 = v6[v5];
                  ++v14;
                  if (v9) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v5 = v14;
            }
          }
        }
      }
LABEL_22:
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v18 = 0;
        unint64_t v19 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v19 && (v18 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v20 = v17 == v19;
          if (v17 == v19) {
            unint64_t v17 = 0;
          }
          v18 |= v20;
          uint64_t v21 = *(void *)(v11 + 8 * v17);
        }
        while (v21 == -1);
        unint64_t v12 = __clz(__rbit64(~v21)) + (v17 << 6);
      }
      v9 &= v9 - 1;
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000A2D30()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100020378(&qword_100159920);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          unint64_t v15 = v27[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            unint64_t v15 = v27[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for TransitionWatcher();
      sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_1000A305C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 152))(v5);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000A3120(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TransitionWatcher();
  sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int sub_1000A320C(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 <= v7 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1000A27BC();
    }
    else
    {
      if (v8 > v7)
      {
        unint64_t result = (Swift::Int)sub_1000A388C(&qword_100159990);
        goto LABEL_14;
      }
      sub_1000A3A30();
    }
    uint64_t v9 = *v3;
    Hasher.init(_seed:)();
    (*(void (**)(unsigned char *))(*(void *)v6 + 152))(v18);
    unint64_t result = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
    a2 = result & ~v10;
    if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      type metadata accessor for ContinuationStore(0);
      swift_retain();
      char v11 = static UUID.== infix(_:_:)();
      unint64_t result = swift_release();
      if (v11)
      {
LABEL_13:
        unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      else
      {
        uint64_t v12 = ~v10;
        while (1)
        {
          a2 = (a2 + 1) & v12;
          if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
            break;
          }
          swift_retain();
          char v13 = static UUID.== infix(_:_:)();
          unint64_t result = swift_release();
          if (v13) {
            goto LABEL_13;
          }
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
    JUMPOUT(0x1000A33F8);
  }
  *(void *)(v14 + 16) = v17;
  return result;
}

Swift::Int sub_1000A3438(Swift::Int result, char a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *(void *)(*v2 + 16);
  unint64_t v5 = *(void *)(*v2 + 24);
  if (v5 <= v4 || (a2 & 1) == 0)
  {
    if (a2)
    {
      sub_1000A2AB8();
      goto LABEL_8;
    }
    if (v5 <= v4)
    {
      sub_1000A3D0C();
LABEL_8:
      uint64_t v6 = *v2;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      unint64_t result = Hasher._finalize()();
      unint64_t v3 = result & ~(-1 << *(unsigned char *)(v6 + 32));
      if ((*(void *)(v6 + ((v3 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v3)) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    unint64_t result = (Swift::Int)sub_1000A372C();
  }
LABEL_9:
  uint64_t v7 = *v2;
  *(void *)(*v2 + 8 * (v3 >> 6) + 56) |= 1 << v3;
  uint64_t v8 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (!v9)
  {
    *(void *)(v7 + 16) = v10;
    return result;
  }
  __break(1u);
LABEL_12:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A3538(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000A2D30();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_1000A388C(&qword_100159920);
      goto LABEL_12;
    }
    sub_1000A3F50();
  }
  uint64_t v8 = *v3;
  type metadata accessor for TransitionWatcher();
  sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_1000A82BC(&qword_1001576C8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
    do
    {
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000A372C()
{
  uint64_t v1 = v0;
  sub_100020378(&qword_100159980);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_27:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (!v12)
    {
      int64_t v14 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v14 >= v13) {
        goto LABEL_27;
      }
      uint64_t v12 = *(void *)(v6 + 8 * v14);
      ++v9;
      if (!v12)
      {
        int64_t v9 = v14 + 1;
        if (v14 + 1 >= v13) {
          goto LABEL_27;
        }
        uint64_t v12 = *(void *)(v6 + 8 * v9);
        if (!v12)
        {
          int64_t v9 = v14 + 2;
          if (v14 + 2 >= v13) {
            goto LABEL_27;
          }
          uint64_t v12 = *(void *)(v6 + 8 * v9);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_12:
    v12 &= v12 - 1;
  }
  int64_t v15 = v14 + 3;
  if (v15 >= v13) {
    goto LABEL_27;
  }
  uint64_t v12 = *(void *)(v6 + 8 * v15);
  if (v12)
  {
    int64_t v9 = v15;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_27;
    }
    uint64_t v12 = *(void *)(v6 + 8 * v9);
    ++v15;
    if (v12) {
      goto LABEL_12;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_1000A388C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100020378(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000A3A30()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100020378(&qword_100159990);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v26 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v27) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    Hasher.init(_seed:)();
    unint64_t v18 = *(void (**)(char *))(*(void *)v17 + 152);
    swift_retain();
    v18(v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v8 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v27)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000A3D0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100020378(&qword_100159980);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (!v9)
    {
      int64_t v13 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      if (v13 >= v10) {
        goto LABEL_31;
      }
      uint64_t v9 = *(void *)(v6 + 8 * v13);
      ++v5;
      if (!v9)
      {
        int64_t v5 = v13 + 1;
        if (v13 + 1 >= v10) {
          goto LABEL_31;
        }
        uint64_t v9 = *(void *)(v6 + 8 * v5);
        if (!v9)
        {
          int64_t v5 = v13 + 2;
          if (v13 + 2 >= v10) {
            goto LABEL_31;
          }
          uint64_t v9 = *(void *)(v6 + 8 * v5);
          if (!v9) {
            break;
          }
        }
      }
    }
LABEL_22:
    Hasher.init(_seed:)();
    Hasher._combine(_:)(0);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v18 = 0;
      unint64_t v19 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v19 && (v18 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v20 = v17 == v19;
        if (v17 == v19) {
          unint64_t v17 = 0;
        }
        v18 |= v20;
        uint64_t v21 = *(void *)(v11 + 8 * v17);
      }
      while (v21 == -1);
      unint64_t v12 = __clz(__rbit64(~v21)) + (v17 << 6);
    }
    v9 &= v9 - 1;
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    ++*(void *)(v4 + 16);
  }
  int64_t v14 = v13 + 3;
  if (v14 >= v10)
  {
LABEL_31:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_33;
  }
  uint64_t v9 = *(void *)(v6 + 8 * v14);
  if (v9)
  {
    int64_t v5 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_31;
    }
    uint64_t v9 = *(void *)(v6 + 8 * v5);
    ++v14;
    if (v9) {
      goto LABEL_22;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1000A3F50()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100020378(&qword_100159920);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for TransitionWatcher();
    sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000A4254(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0) {
      uint64_t v4 = *v1;
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    char v5 = __CocoaSet.contains(_:)();
    swift_release();
    if (v5)
    {
      uint64_t v6 = sub_1000A4A90(v4, a1);
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  unint64_t v7 = *(void (**)(uint64_t *))(*(void *)a1 + 152);
  swift_bridgeObjectRetain();
  v7(v17);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v3 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
    goto LABEL_15;
  }
  swift_retain();
  char v11 = static UUID.== infix(_:_:)();
  swift_release();
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v3 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_15;
      }
      swift_retain();
      char v13 = static UUID.== infix(_:_:)();
      swift_release();
    }
    while ((v13 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *v1;
  v17[0] = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000A388C(&qword_100159990);
    uint64_t v15 = v17[0];
  }
  uint64_t v6 = *(void *)(*(void *)(v15 + 48) + 8 * v10);
  sub_1000A4E50(v10);
  *uint64_t v1 = v17[0];
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1000A4474(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain();
  Swift::Int v5 = sub_1000955E4();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    return 8;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0x8000000100112B70;
    unint64_t v10 = 0xD000000000000010;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v10 = 0xD000000000000012;
        unint64_t v9 = 0x8000000100112B90;
        break;
      case 2:
        unint64_t v10 = 0x6F4364616F6C6572;
        unint64_t v9 = 0xEC0000006769666ELL;
        break;
      case 3:
        unint64_t v10 = 0x50737365636F7270;
        unint64_t v9 = 0xEA00000000005441;
        break;
      case 4:
        unint64_t v10 = 0xD000000000000011;
        unint64_t v9 = 0x8000000100112BC0;
        break;
      case 5:
        unint64_t v10 = 0x7053746365746564;
        unint64_t v9 = 0xEF7765695674696CLL;
        break;
      case 6:
        unint64_t v10 = 0x7571655272657375;
        unint64_t v9 = 0xEB00000000747365;
        break;
      case 7:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v10 = 0x6E776F6474756873;
        break;
      default:
        break;
    }
    unint64_t v11 = 0x8000000100112B70;
    unint64_t v12 = 0xD000000000000010;
    switch(a1)
    {
      case 1:
        unint64_t v13 = 0xD000000000000012;
        int64_t v14 = "networkAvailable";
        goto LABEL_18;
      case 2:
        unint64_t v11 = 0xEC0000006769666ELL;
        if (v10 != 0x6F4364616F6C6572) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 3:
        unint64_t v11 = 0xEA00000000005441;
        if (v10 != 0x50737365636F7270) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 4:
        unint64_t v13 = 0xD000000000000011;
        int64_t v14 = "ag";
LABEL_18:
        unint64_t v11 = (unint64_t)v14 | 0x8000000000000000;
        if (v10 != v13) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 5:
        unint64_t v11 = 0xEF7765695674696CLL;
        if (v10 != 0x7053746365746564) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 6:
        unint64_t v12 = 0x7571655272657375;
        unint64_t v11 = 0xEB00000000747365;
        goto LABEL_23;
      case 7:
        unint64_t v11 = 0xE800000000000000;
        if (v10 != 0x6E776F6474756873) {
          goto LABEL_25;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (v10 != v12) {
          goto LABEL_25;
        }
LABEL_24:
        if (v9 != v11)
        {
LABEL_25:
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v15) {
            goto LABEL_32;
          }
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_30;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_32:
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v18 = *v2;
        uint64_t v20 = *v2;
        *uint64_t v2 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000912B8();
          uint64_t v18 = v20;
        }
        uint64_t v16 = *(unsigned __int8 *)(*(void *)(v18 + 48) + v7);
        sub_1000A5038(v7);
        *uint64_t v2 = v20;
        swift_bridgeObjectRelease();
        return v16;
    }
  }
}

uint64_t sub_1000A4860()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_1000A4C64();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  type metadata accessor for TransitionWatcher();
  sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
  swift_bridgeObjectRetain();
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_1000A82BC(&qword_1001576C8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  *uint64_t v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000A388C(&qword_100159920);
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_1000A532C(v6);
  *uint64_t v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000A4A90(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = __CocoaSet.count.getter();
  uint64_t v5 = swift_unknownObjectRetain();
  Swift::Int v6 = sub_1000A2354(v5, v4);
  Swift::Int v17 = v6;
  Hasher.init(_seed:)();
  uint64_t v7 = *(void (**)(uint64_t *))(*(void *)a2 + 152);
  swift_retain();
  v7(&v16);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    swift_retain();
    char v11 = static UUID.== infix(_:_:)();
    swift_release();
    if (v11)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v6 + 48) + 8 * v10);
      sub_1000A4E50(v10);
      if (static UUID.== infix(_:_:)())
      {
        *char v2 = v17;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v12;
        if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          break;
        }
        swift_retain();
        char v13 = static UUID.== infix(_:_:)();
        swift_release();
        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000A4C64()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_1000A257C(v2, v1);
  uint64_t v10 = v3;
  type metadata accessor for TransitionWatcher();
  sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
  swift_retain();
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_1000A82BC(&qword_1001576C8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_1000A532C(v6);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      *uint64_t v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1000A4E50(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        char v11 = *(void (**)(unsigned char *))(*(void *)v10 + 152);
        swift_retain();
        v11(v20);
        Swift::Int v12 = Hasher._finalize()();
        swift_release();
        unint64_t v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 < v9) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(v3 + 48);
          char v15 = (void *)(v14 + 8 * v2);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v17 = *(void *)(v3 + 16);
  BOOL v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000A5038(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t v10 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 < v9) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(v3 + 48);
          Swift::Int v12 = (unsigned char *)(v11 + v2);
          unint64_t v13 = (unsigned char *)(v11 + v6);
          if (v2 != v6 || (int64_t v2 = v6, v12 >= v13 + 1))
          {
            unsigned char *v12 = *v13;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v14 = *(void *)(v3 + 16);
  BOOL v15 = __OFSUB__(v14, 1);
  uint64_t v16 = v14 - 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x1000A530CLL);
  }
  *(void *)(v3 + 16) = v16;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_1000A532C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      type metadata accessor for TransitionWatcher();
      sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
      do
      {
        uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 >= v9 && v2 >= v10)
          {
LABEL_16:
            uint64_t v13 = *(void *)(v3 + 48);
            uint64_t v14 = (void *)(v13 + 8 * v2);
            BOOL v15 = (void *)(v13 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v14 >= v15 + 1))
            {
              void *v14 = *v15;
              int64_t v2 = v6;
            }
          }
        }
        else if (v10 >= v9 || v2 >= v10)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000A5520(unsigned __int8 a1)
{
  Swift::Int v2 = sub_1000955E4();

  return sub_1000A5564(a1, v2);
}

unint64_t sub_1000A5564(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0x8000000100112B70;
      unint64_t v8 = 0xD000000000000010;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0xD000000000000012;
          unint64_t v7 = 0x8000000100112B90;
          break;
        case 2:
          unint64_t v8 = 0x6F4364616F6C6572;
          unint64_t v7 = 0xEC0000006769666ELL;
          break;
        case 3:
          unint64_t v8 = 0x50737365636F7270;
          unint64_t v7 = 0xEA00000000005441;
          break;
        case 4:
          unint64_t v8 = 0xD000000000000011;
          unint64_t v7 = 0x8000000100112BC0;
          break;
        case 5:
          unint64_t v8 = 0x7053746365746564;
          unint64_t v7 = 0xEF7765695674696CLL;
          break;
        case 6:
          unint64_t v8 = 0x7571655272657375;
          unint64_t v7 = 0xEB00000000747365;
          break;
        case 7:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x6E776F6474756873;
          break;
        default:
          break;
      }
      unint64_t v9 = 0x8000000100112B70;
      unint64_t v10 = 0xD000000000000010;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0x8000000100112B90;
          if (v8 == 0xD000000000000012) {
            goto LABEL_24;
          }
          goto LABEL_25;
        case 2:
          unint64_t v9 = 0xEC0000006769666ELL;
          if (v8 != 0x6F4364616F6C6572) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 3:
          unint64_t v9 = 0xEA00000000005441;
          if (v8 != 0x50737365636F7270) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 4:
          unint64_t v9 = 0x8000000100112BC0;
          if (v8 != 0xD000000000000011) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 5:
          unint64_t v9 = 0xEF7765695674696CLL;
          if (v8 != 0x7053746365746564) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 6:
          unint64_t v9 = 0xEB00000000747365;
          if (v8 != 0x7571655272657375) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 7:
          unint64_t v9 = 0xE800000000000000;
          unint64_t v10 = 0x6E776F6474756873;
          goto LABEL_23;
        default:
LABEL_23:
          if (v8 != v10) {
            goto LABEL_25;
          }
LABEL_24:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v4;
          }
LABEL_25:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

uint64_t sub_1000A5920(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000A5520(a1);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v2;
  uint64_t v11 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000A6C90();
    uint64_t v8 = v11;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 8 * v4);
  sub_1000A671C(v4, v8);
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1000A59D8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100020378(&qword_100159978);
  char v34 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v32 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v18 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v19 = v18 | (v12 << 6);
    goto LABEL_31;
  }
  int64_t v20 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_42;
  }
  if (v20 >= v32)
  {
    swift_release();
    char v21 = (void *)(v5 + 64);
    if (v34)
    {
LABEL_37:
      uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
      if (v30 >= 64) {
        bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *char v21 = -1 << v30;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    char v21 = (void *)(v5 + 64);
    unint64_t v22 = *(void *)(v33 + 8 * v20);
    ++v12;
    if (v22) {
      goto LABEL_30;
    }
    int64_t v12 = v20 + 1;
    if (v20 + 1 >= v32) {
      goto LABEL_34;
    }
    unint64_t v22 = *(void *)(v33 + 8 * v12);
    if (v22)
    {
LABEL_30:
      unint64_t v10 = (v22 - 1) & v22;
      unint64_t v19 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_31:
      char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v13 = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v14) >> 6;
      while (++v16 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v16 == v25;
        if (v16 == v25) {
          unint64_t v16 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v16);
        if (v27 != -1)
        {
          unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
LABEL_8:
          *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
          *(void *)(*(void *)(v7 + 56) + 8 * v17) = v29;
          ++*(void *)(v7 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      JUMPOUT(0x1000A5DFCLL);
    }
    int64_t v23 = v20 + 2;
    if (v23 < v32)
    {
      unint64_t v22 = *(void *)(v33 + 8 * v23);
      if (!v22)
      {
        while (1)
        {
          int64_t v12 = v23 + 1;
          if (__OFADD__(v23, 1)) {
            goto LABEL_43;
          }
          if (v12 >= v32) {
            goto LABEL_34;
          }
          unint64_t v22 = *(void *)(v33 + 8 * v12);
          ++v23;
          if (v22) {
            goto LABEL_30;
          }
        }
      }
      int64_t v12 = v23;
      goto LABEL_30;
    }
LABEL_34:
    swift_release();
    if (v34) {
      goto LABEL_37;
    }
  }
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000A5E1C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100020378(&qword_100159970);
  char v34 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v32 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v18 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v19 = v18 | (v12 << 6);
    goto LABEL_31;
  }
  int64_t v20 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_42;
  }
  if (v20 >= v32)
  {
    swift_release();
    char v21 = (void *)(v5 + 64);
    if (v34)
    {
LABEL_37:
      uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
      if (v30 >= 64) {
        bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *char v21 = -1 << v30;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    char v21 = (void *)(v5 + 64);
    unint64_t v22 = *(void *)(v33 + 8 * v20);
    ++v12;
    if (v22) {
      goto LABEL_30;
    }
    int64_t v12 = v20 + 1;
    if (v20 + 1 >= v32) {
      goto LABEL_34;
    }
    unint64_t v22 = *(void *)(v33 + 8 * v12);
    if (v22)
    {
LABEL_30:
      unint64_t v10 = (v22 - 1) & v22;
      unint64_t v19 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_31:
      char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((v34 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v13 = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v14) >> 6;
      while (++v16 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v16 == v25;
        if (v16 == v25) {
          unint64_t v16 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v16);
        if (v27 != -1)
        {
          unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
LABEL_8:
          *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
          *(void *)(*(void *)(v7 + 56) + 8 * v17) = v29;
          ++*(void *)(v7 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      JUMPOUT(0x1000A6280);
    }
    int64_t v23 = v20 + 2;
    if (v23 < v32)
    {
      unint64_t v22 = *(void *)(v33 + 8 * v23);
      if (!v22)
      {
        while (1)
        {
          int64_t v12 = v23 + 1;
          if (__OFADD__(v23, 1)) {
            goto LABEL_43;
          }
          if (v12 >= v32) {
            goto LABEL_34;
          }
          unint64_t v22 = *(void *)(v33 + 8 * v12);
          ++v23;
          if (v22) {
            goto LABEL_30;
          }
        }
      }
      int64_t v12 = v23;
      goto LABEL_30;
    }
LABEL_34:
    swift_release();
    if (v34) {
      goto LABEL_37;
    }
  }
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000A62A8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100020378(&qword_100159968);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v31 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v30 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v19 = v18 | (v12 << 6);
      goto LABEL_31;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_40;
    }
    if (v20 >= v30) {
      break;
    }
    unint64_t v21 = v31[v20];
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v30) {
        break;
      }
      unint64_t v21 = v31[v12];
      if (!v21)
      {
        int64_t v22 = v20 + 2;
        if (v22 >= v30) {
          break;
        }
        unint64_t v21 = v31[v22];
        if (!v21)
        {
          while (1)
          {
            int64_t v12 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_41;
            }
            if (v12 >= v30) {
              goto LABEL_34;
            }
            unint64_t v21 = v31[v12];
            ++v22;
            if (v21) {
              goto LABEL_30;
            }
          }
        }
        int64_t v12 = v22;
      }
    }
LABEL_30:
    unint64_t v10 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_31:
    char v27 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
    long long v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
    if ((a2 & 1) == 0) {
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v23 = 0;
    unint64_t v24 = (unint64_t)(63 - v14) >> 6;
    do
    {
      if (++v16 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        JUMPOUT(0x1000A66F4);
      }
      BOOL v25 = v16 == v24;
      if (v16 == v24) {
        unint64_t v16 = 0;
      }
      v23 |= v25;
      uint64_t v26 = *(void *)(v11 + 8 * v16);
    }
    while (v26 == -1);
    unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
LABEL_8:
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v27;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v3 = v2;
  if (a2)
  {
    uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
    if (v28 >= 64) {
      bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      void *v31 = -1 << v28;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_1000A671C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t result = Hasher._finalize()();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          uint64_t v11 = (unsigned char *)(v10 + v3);
          int64_t v12 = (unsigned char *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *uint64_t v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          unint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            void *v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *unint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
    JUMPOUT(0x1000A6A00);
  }
  *(void *)(a2 + 16) = v21;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

uint64_t sub_1000A6A20(uint64_t a1, unsigned __int8 a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000A5520(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000A6C90();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000A59D8(result, a3 & 1);
  uint64_t result = sub_1000A5520(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A6B58(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10002EB4C(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000A6E34();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000A5E1C(result, a3 & 1);
  uint64_t result = sub_10002EB4C(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000A6C90()
{
  uint64_t v1 = v0;
  sub_100020378(&qword_100159978);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A6E34()
{
  uint64_t v1 = v0;
  sub_100020378(&qword_100159970);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A6FD8()
{
  uint64_t v1 = v0;
  sub_100020378(&qword_100159968);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    long long v16 = *(_OWORD *)(*(void *)(v2 + 56) + 16 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(_OWORD *)(*(void *)(v4 + 56) + 16 * v15) = v16;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unsigned char *sub_1000A7180(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
    goto LABEL_36;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) != a3)
  {
    sub_100020378((uint64_t *)&unk_100159360);
    uint64_t v7 = static _SetStorage.allocate(capacity:)();
    uint64_t v8 = (unsigned char *)v7;
    uint64_t v29 = a2;
    if (a2 < 1) {
      unint64_t v9 = 0;
    }
    else {
      unint64_t v9 = *a1;
    }
    uint64_t v10 = 0;
    uint64_t v11 = v7 + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        uint64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_39;
        }
        if (v14 >= v29) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v14];
        ++v10;
        if (!v15)
        {
          uint64_t v10 = v14 + 1;
          if (v14 + 1 >= v29) {
            goto LABEL_36;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v10 = v14 + 2;
            if (v14 + 2 >= v29) {
              goto LABEL_36;
            }
            unint64_t v15 = a1[v10];
            if (!v15)
            {
              uint64_t v16 = v14 + 3;
              if (v16 >= v29) {
                goto LABEL_36;
              }
              unint64_t v15 = a1[v16];
              if (!v15)
              {
                while (1)
                {
                  uint64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_40;
                  }
                  if (v10 >= v29) {
                    goto LABEL_36;
                  }
                  unint64_t v15 = a1[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      char v17 = *(unsigned char *)(*(void *)(v4 + 48) + v13);
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v18 = Hasher._finalize()();
      uint64_t v19 = -1 << v8[32];
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_34;
      }
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          JUMPOUT(0x1000A7528);
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v11 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
LABEL_34:
      *(void *)(v11 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(unsigned char *)(*((void *)v8 + 6) + v22) = v17;
      ++*((void *)v8 + 2);
      if (__OFSUB__(v5--, 1)) {
        goto LABEL_38;
      }
      if (!v5)
      {
LABEL_36:
        swift_release();
        return v8;
      }
    }
  }
  return (unsigned char *)v4;
}

uint64_t sub_1000A7548(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_1000A75E8(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000A76CC(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  unint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  void *v3 = v2;
  v3[1] = sub_1000A77AC;
  return v5(v2 + 16);
}

uint64_t sub_1000A77AC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

unint64_t sub_1000A78DC(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100020378(&qword_100159990);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      uint64_t v3 = (unsigned char *)result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  unint64_t v8 = v3 + 56;
  uint64_t v21 = v5;
  while ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_27;
    }
LABEL_17:
    Hasher.init(_seed:)();
    (*(void (**)(unsigned char *))(*(void *)v9 + 152))(v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v11 = -1 << v3[32];
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) == 0) {
      goto LABEL_24;
    }
    swift_retain();
    char v16 = static UUID.== infix(_:_:)();
    uint64_t result = swift_release();
    if (v16)
    {
LABEL_10:
      uint64_t result = swift_release();
      uint64_t v5 = v21;
      if (v7 == v21) {
        return (unint64_t)v3;
      }
    }
    else
    {
      uint64_t v17 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v17;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          break;
        }
        swift_retain();
        char v18 = static UUID.== infix(_:_:)();
        uint64_t result = swift_release();
        if (v18) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = v21;
LABEL_24:
      *(void *)&v8[8 * v13] = v15 | v14;
      *(void *)(*((void *)v3 + 6) + 8 * v12) = v9;
      uint64_t v19 = *((void *)v3 + 2);
      BOOL v10 = __OFADD__(v19, 1);
      uint64_t v20 = v19 + 1;
      if (v10) {
        goto LABEL_28;
      }
      *((void *)v3 + 2) = v20;
      if (v7 == v5) {
        return (unint64_t)v3;
      }
    }
  }
  if (v7 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_29;
  }
  unint64_t v9 = *(void *)(v1 + 32 + 8 * v7);
  uint64_t result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_17;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000A7B98(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TransitionWatcher();
    sub_1000A82BC(&qword_1001593E8, 255, (void (*)(uint64_t))type metadata accessor for TransitionWatcher);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v17 = v20;
    uint64_t v4 = v21;
    uint64_t v3 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v4 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v16 = (unint64_t)(v4 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v9 = (v5 - 1) & v5;
      unint64_t v10 = __clz(__rbit64(v5)) | (v3 << 6);
      uint64_t v11 = v3;
      goto LABEL_29;
    }
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v12 >= v16) {
      return sub_10005D5B8();
    }
    unint64_t v13 = *(void *)(v17 + 8 * v12);
    uint64_t v11 = v3 + 1;
    if (!v13)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v16) {
        return sub_10005D5B8();
      }
      unint64_t v13 = *(void *)(v17 + 8 * v11);
      if (!v13)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v16) {
          return sub_10005D5B8();
        }
        unint64_t v13 = *(void *)(v17 + 8 * v11);
        if (!v13)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v16) {
            return sub_10005D5B8();
          }
          unint64_t v13 = *(void *)(v17 + 8 * v11);
          if (!v13)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v16) {
              return sub_10005D5B8();
            }
            unint64_t v13 = *(void *)(v17 + 8 * v11);
            if (!v13)
            {
              uint64_t v14 = v3 + 6;
              while (v16 != v14)
              {
                unint64_t v13 = *(void *)(v17 + 8 * v14++);
                if (v13)
                {
                  uint64_t v11 = v14 - 1;
                  goto LABEL_28;
                }
              }
              return sub_10005D5B8();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
    swift_retain();
    if (!v15) {
      return sub_10005D5B8();
    }
    while (1)
    {
      swift_beginAccess();
      sub_1000A4860();
      swift_endAccess();
      swift_release();
      uint64_t result = swift_release();
      uint64_t v3 = v11;
      unint64_t v5 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TransitionWatcher();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v11 = v3;
        uint64_t v9 = v5;
        if (v18) {
          continue;
        }
      }
      return sub_10005D5B8();
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1000A7EB4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001399D0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000A7F00(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t sub_1000A7F2C()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Swift::Int v0 = Hasher._finalize()();

  return sub_1000A7F00(v0);
}

unint64_t sub_1000A7F84(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100020378(&qword_100159988);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  unint64_t result = sub_1000A7F2C();
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return v3;
  }
  uint64_t v7 = a1 + 5;
  uint64_t v8 = v1 - 1;
  while (1)
  {
    *(void *)(v3 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(*(void *)(v3 + 56) + 8 * result) = v4;
    uint64_t v9 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    *(void *)(v3 + 16) = v11;
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v12 = *v7++;
    swift_retain();
    unint64_t result = sub_1000A7F2C();
    --v8;
    uint64_t v4 = v12;
    if (v13) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1000A806C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100139AB0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for StateMachineEvents()
{
  return self;
}

unint64_t sub_1000A80DC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100139BC0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000A8128(char a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = sub_100021024;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 56) = v2;
  *(unsigned char *)(v6 + 120) = a1;
  return _swift_task_switch(sub_1000987D0, v2, 0);
}

uint64_t sub_1000A81E8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100029274;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100021024;
  return sub_10009CFD0();
}

uint64_t sub_1000A82BC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A8304()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  swift_unknownObjectRetain();
  char v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return sub_10009651C(v4);
}

uint64_t sub_1000A8398()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1000A83A8()
{
  unint64_t result = 0xD000000000000010;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x6F4364616F6C6572;
      break;
    case 3:
      unint64_t result = 0x50737365636F7270;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x7053746365746564;
      break;
    case 6:
      unint64_t result = 0x7571655272657375;
      break;
    case 7:
      unint64_t result = 0x6E776F6474756873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000A84C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1000A84D4()
{
  return sub_10009651C(*(unsigned char *)(v0 + 16));
}

uint64_t sub_1000A84DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char **sub_1000A84EC(unsigned char **result)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *(unsigned char *)(v1 + 16);
  *unint64_t result = v2 + 1;
  return result;
}

uint64_t sub_1000A8500()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000A8510()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000A8538(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000A1AE8(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1000A8540()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000A8550()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000A8560()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000A8570()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1000A8584()
{
  unint64_t result = qword_100159430;
  if (!qword_100159430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159430);
  }
  return result;
}

uint64_t sub_1000A85D8()
{
  return sub_1000A82BC(&qword_100159438, 255, (void (*)(uint64_t))type metadata accessor for ContinuationStore);
}

unint64_t sub_1000A862C()
{
  unint64_t result = qword_100159440;
  if (!qword_100159440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159440);
  }
  return result;
}

unint64_t sub_1000A8688()
{
  unint64_t result = qword_100159448;
  if (!qword_100159448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159448);
  }
  return result;
}

uint64_t *sub_1000A86DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = sub_100020378(&qword_100157A70);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1000A8880(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = type metadata accessor for URL();
    uint64_t v5 = *(void *)(v3 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v3);
    if (!result)
    {
      char v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      return v4(a1, v3);
    }
  }
  return result;
}

void *sub_1000A8958(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = sub_100020378(&qword_100157A70);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1000A8AB8(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002EE48((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = sub_100020378(&qword_100157A70);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata accessor for SWTStateMachineError(uint64_t a1)
{
  return sub_100028514(a1, (uint64_t *)&unk_100160E30);
}

void *sub_1000A8C48(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = sub_100020378(&qword_100157A70);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1000A8DA8(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002EE48((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = sub_100020378(&qword_100157A70);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1000A8F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1000A8F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000A8F6C()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_1000A8F7C()
{
  sub_100048F24();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_1000A900C()
{
  return type metadata accessor for ContinuationStore(0);
}

void sub_1000A9014()
{
  sub_10002F1AC();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t getEnumTagSinglePayload for ContinuationStore.ContinuationState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContinuationStore.ContinuationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A9244);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContinuationStore.ContinuationState()
{
  return &type metadata for ContinuationStore.ContinuationState;
}

unsigned char *storeEnumTagSinglePayload for SWTSMEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A9348);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTSMEvent()
{
  return &type metadata for SWTSMEvent;
}

unsigned char *storeEnumTagSinglePayload for StateMachineEvents.WaitType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000A941CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineEvents.WaitType()
{
  return &type metadata for StateMachineEvents.WaitType;
}

uint64_t getEnumTagSinglePayload for SMState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SMState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A95B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SMState()
{
  return &type metadata for SMState;
}

uint64_t sub_1000A95E8()
{
  return type metadata accessor for SWTStateMachine(0);
}

uint64_t type metadata accessor for SWTStateMachine(uint64_t a1)
{
  return sub_100028514(a1, qword_100160E50);
}

uint64_t sub_1000A9610()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for SWTStateMachine.SMTransition(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1000A973C(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1000A973C(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_retain();
  }
  return result;
}

unint64_t destroy for SWTStateMachine.SMTransition(unint64_t *a1)
{
  return sub_1000A975C(*a1);
}

unint64_t sub_1000A975C(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for SWTStateMachine.SMTransition(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1000A973C(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_1000A975C(v4);
  return a1;
}

unint64_t *assignWithTake for SWTStateMachine.SMTransition(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_1000A975C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SWTStateMachine.SMTransition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xE && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 14);
  }
  unsigned int v3 = (((*(void *)a1 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)a1 >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SWTStateMachine.SMTransition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xD)
  {
    *(void *)uint64_t result = a2 - 14;
    if (a3 >= 0xE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t sub_1000A9884(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return *a1 + 2;
  }
}

void *sub_1000A989C(void *result, uint64_t a2)
{
  if (a2 < 2) {
    *uint64_t result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 62);
  }
  else {
    *uint64_t result = (a2 - 2) | 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTStateMachine.SMTransition()
{
  return &type metadata for SWTStateMachine.SMTransition;
}

uint64_t getEnumTagSinglePayload for SWTStateMachine.SMEventResult(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF5)
  {
    unsigned int v2 = a2 + 11;
    if (a2 + 11 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 11;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 11;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000A9984);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 11;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 0xA) {
    unsigned int v8 = v7 - 9;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for SWTStateMachine.SMEventResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 11;
  if (a3 + 11 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v7 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1000A9A6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

uint64_t sub_1000A9A94(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 0xA) {
    return v1 - 9;
  }
  else {
    return 0;
  }
}

unsigned char *sub_1000A9AA8(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 9;
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTStateMachine.SMEventResult()
{
  return &type metadata for SWTStateMachine.SMEventResult;
}

unsigned char *storeEnumTagSinglePayload for SWTStateMachine.SMRunningState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A9B94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTStateMachine.SMRunningState()
{
  return &type metadata for SWTStateMachine.SMRunningState;
}

uint64_t sub_1000A9BD0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100029274;
  v5[5] = a1;
  void v5[6] = v4;
  return _swift_task_switch(sub_1000A1030, v4, 0);
}

uint64_t sub_1000A9C80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = (unint64_t *)result;
  uint64_t v7 = 0;
  int64_t v8 = 0;
  uint64_t v9 = a3 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v13) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_24;
      }
      unint64_t v17 = *(void *)(v9 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_24;
        }
        unint64_t v17 = *(void *)(v9 + 8 * v8);
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    uint64_t result = sub_100095C38(*(unsigned char *)(*(void *)(a3 + 48) + v15), a4);
    if (result)
    {
      *(unint64_t *)((char *)v6 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return (uint64_t)sub_1000A7180(v6, a2, v7, a3);
      }
    }
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_24;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v18);
  if (v17)
  {
    int64_t v8 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000A9E1C(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1000A9C80((uint64_t)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1000A9C80((uint64_t)v11, v7, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t sub_1000A9FE8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AA020(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *char v5 = v2;
  v5[1] = sub_100029274;
  unsigned int v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100159950 + dword_100159950);
  return v6(a1, v4);
}

uint64_t sub_1000AA0D8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000AA120(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 40);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100029274;
  *(_OWORD *)(v5 + 32) = v6;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = v4;
  return _swift_task_switch(sub_100094244, 0, 0);
}

uint64_t sub_1000AA1E0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000AA220()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100029274;
  return sub_100094634((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_1000AA2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020378(&qword_100157690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AA330()
{
  unint64_t result = qword_100156FD8;
  if (!qword_100156FD8)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156FD8);
  }
  return result;
}

uint64_t sub_1000AA37C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100020418(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *TransparencyTLSError.errorDomain.unsafeMutableAddressor()
{
  return &static TransparencyTLSError.errorDomain;
}

uint64_t static TransparencyTLSError.errorDomain.getter()
{
  swift_beginAccess();
  uint64_t v0 = static TransparencyTLSError.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static TransparencyTLSError.errorDomain.setter(uint64_t a1, char *a2)
{
  static TransparencyTLSError.errorDomain = a1;
  off_1001599D8 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static TransparencyTLSError.errorDomain.modify())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000AA514()
{
  return Error<>._domain.getter();
}

uint64_t sub_1000AA544()
{
  return Error<>._code.getter();
}

uint64_t sub_1000AA574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1000AA57C(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t result = a1 >> 32;
      break;
    case 2uLL:
      uint64_t result = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return result;
    default:
      uint64_t result = BYTE6(a2);
      break;
  }
  return result;
}

uint64_t sub_1000AA61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  uint64_t v6 = Data.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  return v6;
}

uint64_t sub_1000AA760(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v3 = BYTE6(a2);
      break;
  }
  uint64_t result = v3 - a3;
  if (__OFSUB__(v3, a3))
  {
    __break(1u);
    JUMPOUT(0x1000AA7ACLL);
  }
  return result;
}

uint64_t sub_1000AA7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v9 = v8 + 7;
  if (__OFADD__(v8, 7)) {
    __break(1u);
  }
  if (v9 < 0) {
    uint64_t v9 = v8 + 14;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = dispatch thunk of FixedWidthInteger.bigEndian.getter();
  __chkstk_darwin(v11);
  uint64_t v15 = v3;
  uint64_t v14 = 803;
  sub_1000AB808((uint64_t)v7, (uint64_t)sub_1000AA9AC, (uint64_t)(&v16 - 4), a3, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol witness table for Never, v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
  return v10;
}

uint64_t sub_1000AA96C()
{
  uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v1 = result + 7;
  if (__OFADD__(result, 7))
  {
    __break(1u);
  }
  else
  {
    if (v1 < 0) {
      uint64_t v1 = result + 14;
    }
    return v1 >> 3;
  }
  return result;
}

uint64_t sub_1000AA9AC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = a2 - result;
  if (!result) {
    uint64_t v3 = 0;
  }
  if (v3 == *(void *)(v2 + 16))
  {
    v4[3] = &type metadata for UnsafeRawBufferPointer;
    v4[4] = &protocol witness table for UnsafeRawBufferPointer;
    v4[0] = result;
    v4[1] = a2;
    sub_10002BCF8(v4, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    return sub_100028A4C((uint64_t)v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AAA30(uint64_t a1)
{
  sub_100020378(&qword_100159A18);
  sub_100020378(&qword_100159A20);
  if (swift_dynamicCast())
  {
    sub_10003CD24(v26, (uint64_t)v28);
    uint64_t v2 = sub_10002BCF8(v28, v28[3]);
    __chkstk_darwin(v2);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    return sub_100028A4C((uint64_t)v28);
  }
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  sub_1000AED58((uint64_t)v26);
  uint64_t v4 = *v1;
  unint64_t v5 = v1[1];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v4), v4)) {
        goto LABEL_43;
      }
      uint64_t v7 = HIDWORD(v4) - (int)v4;
      uint64_t v6 = v4 >> 32;
LABEL_8:
      if (__OFADD__(v6, a1)) {
        goto LABEL_37;
      }
      if (v6 + a1 < v6) {
        goto LABEL_38;
      }
      if (v6 < 0) {
        goto LABEL_39;
      }
      uint64_t v10 = Data._Representation.resetBytes(in:)();
      __chkstk_darwin(v10);
      uint64_t result = (uint64_t)sub_1000ADD98((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1000AEDB8);
      if (v13 == a1)
      {
        uint64_t v14 = result;
        uint64_t v15 = v12;
        memset(v28, 0, 15);
        if (v12 != result)
        {
          if ((v12 & 0x8000000000000000) == 0 && v12 < result)
          {
            char v16 = v11;
            LOBYTE(v17) = 0;
            uint64_t v18 = result - 1;
            do
            {
              *((unsigned char *)v28 + v17) = v16;
              __int16 v17 = v17 + 1;
              if ((v17 & 0x100) != 0) {
                goto LABEL_36;
              }
              if (v17 == 14)
              {
                *(void *)&v26[0] = v28[0];
                DWORD2(v26[0]) = v28[1];
                WORD6(v26[0]) = WORD2(v28[1]);
                uint64_t result = Data._Representation.append(contentsOf:)();
                if (v18 == v15) {
                  return result;
                }
                LOBYTE(v17) = 0;
              }
              else if (v18 == v15)
              {
                *(void *)&v26[0] = v28[0];
                DWORD2(v26[0]) = v28[1];
                WORD6(v26[0]) = WORD2(v28[1]);
                return Data._Representation.append(contentsOf:)();
              }
              ++v15;
            }
            while (v15 < v14);
          }
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v19 = *v1;
        unint64_t v20 = v1[1];
        uint64_t v21 = 0;
        switch(v20 >> 62)
        {
          case 1uLL:
            uint64_t v21 = (int)v19;
            break;
          case 2uLL:
            uint64_t v21 = *(void *)(v19 + 16);
            break;
          default:
            break;
        }
        BOOL v22 = __OFADD__(v21, v7);
        uint64_t v23 = v21 + v7;
        if (v22)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (__OFADD__(v23, v13))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
        }
        uint64_t v24 = 0;
        switch(v20 >> 62)
        {
          case 1uLL:
            uint64_t v24 = v19 >> 32;
            break;
          case 2uLL:
            uint64_t v24 = *(void *)(v19 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v24 = BYTE6(v20);
            break;
        }
        if (v24 < v23 + v13) {
          goto LABEL_42;
        }
        return Data._Representation.replaceSubrange(_:with:count:)();
      }
      return result;
    case 2uLL:
      uint64_t v9 = v4 + 16;
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v6 = *(void *)(v9 + 8);
      uint64_t v7 = v6 - v8;
      if (!__OFSUB__(v6, v8)) {
        goto LABEL_8;
      }
      goto LABEL_44;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(v5);
      uint64_t v7 = BYTE6(v5);
      goto LABEL_8;
  }
}

uint64_t sub_1000AAE1C(char a1, uint64_t a2)
{
  uint64_t v3 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v2[2] > a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v6 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v6 = v4 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v4 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(v5);
      break;
  }
  if (v6 < v3) {
LABEL_11:
  }
    __break(1u);
  char v8 = a1;
  sub_1000AB22C((uint64_t)&v8, (uint64_t)&v9, 1, (uint64_t)v2, a2, v3);
  return 1;
}

uint64_t sub_1000AAF00(unsigned int a1, uint64_t a2)
{
  uint64_t v3 = a2 + 2;
  if (__OFADD__(a2, 2))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v2[2] > a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v6 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v6 = v4 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v4 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(v5);
      break;
  }
  if (v6 < v3) {
LABEL_11:
  }
    __break(1u);
  __int16 v8 = bswap32(a1) >> 16;
  sub_1000AB22C((uint64_t)&v8, (uint64_t)&v9, 2, (uint64_t)v2, a2, v3);
  return 2;
}

uint64_t sub_1000AAFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v11 = v10 + 7;
  if (__OFADD__(v10, 7))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v11 < 0) {
    uint64_t v11 = v10 + 14;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v13 = a2 + (v11 >> 3);
  if (__OFADD__(a2, v11 >> 3)) {
    goto LABEL_13;
  }
  if (v4[2] > a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = *v4;
  unint64_t v15 = v4[1];
  uint64_t v16 = 0;
  switch(v15 >> 62)
  {
    case 1uLL:
      uint64_t v16 = v14 >> 32;
      break;
    case 2uLL:
      uint64_t v16 = *(void *)(v14 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v16 = BYTE6(v15);
      break;
  }
  if (v16 < v13) {
LABEL_15:
  }
    __break(1u);
  uint64_t v17 = dispatch thunk of FixedWidthInteger.bigEndian.getter();
  __chkstk_darwin(v17);
  *(&v22 - 4) = v12;
  *(&v22 - 3) = (uint64_t)v4;
  uint64_t v21 = v13;
  uint64_t v20 = 803;
  sub_1000AB808((uint64_t)v9, (uint64_t)sub_1000AB2D8, (uint64_t)(&v22 - 6), a4, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol witness table for Never, v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a4);
  return v12;
}

uint64_t sub_1000AB22C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2 - result;
  if (!result) {
    uint64_t v6 = 0;
  }
  if (v6 == a3)
  {
    if (a6 >= a5)
    {
      _OWORD v7[3] = &type metadata for UnsafeRawBufferPointer;
      _OWORD v7[4] = &protocol witness table for UnsafeRawBufferPointer;
      v7[0] = result;
      v7[1] = a2;
      sub_10002BCF8(v7, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      Data._Representation.replaceSubrange(_:with:count:)();
      return sub_100028A4C((uint64_t)v7);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AB2D8(uint64_t a1, uint64_t a2)
{
  return sub_1000AB22C(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1000AB308()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      goto LABEL_6;
    case 3uLL:
      if (v2 >= 1) {
        goto LABEL_10;
      }
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_6:
      if (v5 < v2)
      {
LABEL_10:
        unsigned int v7 = 0;
        int v6 = 1;
        return v7 | (v6 << 16);
      }
LABEL_7:
      if (v2 < v1) {
        goto LABEL_13;
      }
      sub_100020378(&qword_1001599E8);
      sub_1000AE670();
      sub_1000AE6B8();
      DataProtocol.copyBytes<A>(to:from:)();
      int v6 = 0;
      unsigned int v7 = bswap32(0) >> 16;
      v0[2] = v2;
      return v7 | (v6 << 16);
  }
}

uint64_t sub_1000AB460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v23[-v11];
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v13 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v14 = v13 + 7;
  if (__OFADD__(v13, 7))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v14 < 0) {
    uint64_t v14 = v13 + 14;
  }
  uint64_t v15 = v4[2];
  uint64_t v16 = v15 + (v14 >> 3);
  if (__OFADD__(v15, v14 >> 3)) {
LABEL_16:
  }
    __break(1u);
  uint64_t v17 = *v4;
  unint64_t v18 = v4[1];
  switch(v18 >> 62)
  {
    case 1uLL:
      if (v17 >> 32 >= v16) {
        goto LABEL_9;
      }
      goto LABEL_13;
    case 2uLL:
      if (*(void *)(v17 + 24) >= v16) {
        goto LABEL_9;
      }
      goto LABEL_13;
    case 3uLL:
      if (v16 > 0) {
        goto LABEL_13;
      }
      goto LABEL_9;
    default:
      if (BYTE6(v18) >= v16)
      {
LABEL_9:
        __chkstk_darwin(v13);
        uint64_t v22 = v16;
        uint64_t v21 = 4039;
        sub_1000AB808((uint64_t)v12, (uint64_t)sub_1000AB750, (uint64_t)&v23[-32], a2, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Never, v19);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v10, v12, a2);
        dispatch thunk of FixedWidthInteger.init(bigEndian:)();
        (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, a2);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, a2);
        v4[2] = v16;
      }
      else
      {
LABEL_13:
        (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, a2);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      return result;
  }
}

void sub_1000AB750(uint64_t *a1@<X8>)
{
  if (*(void *)(*(void *)(v1 + 16) + 16) > *(void *)(v1 + 24))
  {
    __break(1u);
  }
  else
  {
    sub_100020378(&qword_1001599E8);
    sub_1000AE670();
    sub_1000AE6B8();
    *a1 = DataProtocol.copyBytes<A>(to:from:)();
  }
}

uint64_t sub_1000AB808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_1000AB8FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = BYTE6(a2);
  unint64_t v4 = a2 >> 62;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  switch(v4)
  {
    case 1uLL:
      uint64_t v6 = (int)a1;
      uint64_t v5 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = 0;
      uint64_t v5 = v3;
      break;
  }
  if (v5 < a3 || v5 < v6)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    JUMPOUT(0x1000ABA24);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  Data.append(_:)();
  switch(v9 >> 62)
  {
    case 1uLL:
      sub_10002BD3C(v7, v9);
      if (__OFSUB__(HIDWORD(v7), v7)) {
        goto LABEL_17;
      }
      uint64_t result = HIDWORD(v7) - (int)v7;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(v7 + 24);
      sub_10002BD3C(v7, v9);
      uint64_t result = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        return result;
      }
      __break(1u);
LABEL_14:
      sub_10002BD3C(v7, v9);
      uint64_t result = 0;
      break;
    case 3uLL:
      goto LABEL_14;
    default:
      sub_10002BD3C(v7, v9);
      return BYTE6(v9);
  }
  return result;
}

uint64_t sub_1000ABA44(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      if (*(void *)(v5 + 24) < a4) {
        goto LABEL_44;
      }
      uint64_t v9 = *(void *)(v5 + 16);
      goto LABEL_10;
    case 3uLL:
      if (a4 <= 0) {
        goto LABEL_9;
      }
      goto LABEL_45;
    default:
      if (a4 <= BYTE6(v6))
      {
LABEL_9:
        uint64_t v9 = 0;
      }
      else
      {
        __break(1u);
LABEL_4:
        if (a4 > v5 >> 32)
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          JUMPOUT(0x1000ABCDCLL);
        }
        uint64_t v9 = (int)v5;
      }
LABEL_10:
      if (v9 > a4)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          uint64_t v11 = (int)a1;
          uint64_t v10 = a1 >> 32;
          break;
        case 2uLL:
          uint64_t v11 = *(void *)(a1 + 16);
          uint64_t v10 = *(void *)(a1 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v11 = 0;
          uint64_t v10 = BYTE6(a2);
          break;
      }
      if (v10 < a3 || v10 < v11) {
        goto LABEL_41;
      }
      uint64_t v12 = Data._Representation.subscript.getter();
      unint64_t v14 = v13 >> 62;
      uint64_t v15 = v12;
      unint64_t v16 = v13;
      uint64_t v17 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          LODWORD(v17) = HIDWORD(v12) - v12;
          if (__OFSUB__(HIDWORD(v12), v12)) {
            goto LABEL_46;
          }
          uint64_t v17 = (int)v17;
LABEL_22:
          switch(v6 >> 62)
          {
            case 1uLL:
              uint64_t v21 = v5 >> 32;
              goto LABEL_26;
            case 2uLL:
              uint64_t v21 = *(void *)(v5 + 24);
              goto LABEL_26;
            case 3uLL:
              uint64_t v22 = -a4;
              goto LABEL_28;
            default:
              uint64_t v21 = BYTE6(v6);
LABEL_26:
              uint64_t v22 = v17;
              uint64_t v17 = v21 - a4;
LABEL_28:
              if (v17 >= v22) {
                uint64_t v17 = v22;
              }
              if (v17 + a4 < a4) {
                goto LABEL_42;
              }
              sub_1000AE15C(v12, v13);
              switch((int)v14)
              {
                case 1:
                  sub_10002BD3C(v15, v16);
                  if (__OFSUB__(HIDWORD(v15), v15)) {
                    goto LABEL_48;
                  }
                  uint64_t result = HIDWORD(v15) - (int)v15;
                  break;
                case 2:
                  uint64_t v25 = *(void *)(v15 + 16);
                  uint64_t v24 = *(void *)(v15 + 24);
                  sub_10002BD3C(v15, v16);
                  uint64_t result = v24 - v25;
                  if (!__OFSUB__(v24, v25)) {
                    return result;
                  }
                  __break(1u);
LABEL_38:
                  sub_10002BD3C(v15, v16);
                  uint64_t result = 0;
                  break;
                case 3:
                  goto LABEL_38;
                default:
                  sub_10002BD3C(v15, v16);
                  return BYTE6(v16);
              }
              return result;
          }
        case 2uLL:
          uint64_t v19 = *(void *)(v12 + 16);
          uint64_t v18 = *(void *)(v12 + 24);
          BOOL v20 = __OFSUB__(v18, v19);
          uint64_t v17 = v18 - v19;
          if (!v20) {
            goto LABEL_22;
          }
          goto LABEL_47;
        case 3uLL:
          goto LABEL_22;
        default:
          uint64_t v17 = BYTE6(v13);
          goto LABEL_22;
      }
  }
}

uint64_t sub_1000ABD2C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t result = sub_1000AB8FC(*a1, v3, a1[2]);
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  a1[2] = v5;
  return result;
}

uint64_t sub_1000ABDB8(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v3 + a1;
  if (__OFADD__(v3, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = *v1;
  unint64_t v6 = v1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < v4) {
        return 0;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v5 + 24) >= v4) {
        goto LABEL_8;
      }
      return 0;
    case 3uLL:
      if (v4 > 0) {
        return 0;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v6) >= v4)
      {
LABEL_8:
        if (v4 >= v3)
        {
          uint64_t result = Data._Representation.subscript.getter();
          v1[2] = v4;
          return result;
        }
LABEL_13:
        __break(1u);
        JUMPOUT(0x1000ABEA0);
      }
      return 0;
  }
}

uint64_t TransparencyByteBuffer.readableBytesView.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = BYTE6(a2);
  unint64_t v4 = a2 >> 62;
  uint64_t v5 = 0;
  switch(v4)
  {
    case 1uLL:
      uint64_t v5 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = v3;
      break;
  }
  if (v5 < a3)
  {
    __break(1u);
    JUMPOUT(0x1000ABF30);
  }
  return Data._Representation.subscript.getter();
}

void *sub_1000ABF40(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v3 + a1;
  if (__OFADD__(v3, a1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    JUMPOUT(0x1000AC01CLL);
  }
  uint64_t v5 = *v1;
  unint64_t v6 = v1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 >= v4) {
        goto LABEL_8;
      }
      return 0;
    case 2uLL:
      if (*(void *)(v5 + 24) >= v4) {
        goto LABEL_8;
      }
      return 0;
    case 3uLL:
      if (v4 > 0) {
        return 0;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v6) < v4) {
        return 0;
      }
LABEL_8:
      if (v4 < v3) {
        goto LABEL_14;
      }
      uint64_t v7 = Data._Representation.subscript.getter();
      unint64_t v9 = v8;
      uint64_t v10 = sub_1000AE40C(v7, v8);
      sub_10002BD3C(v7, v9);
      v1[2] = v4;
      return v10;
  }
}

Swift::Int __swiftcall TransparencyByteBuffer.writeBytes(_:)(Swift::OpaquePointer a1)
{
  if (!*((void *)a1._rawValue + 2)) {
    return 0;
  }
  Data._Representation.append(contentsOf:)();
  return *((void *)a1._rawValue + 2);
}

uint64_t sub_1000AC06C()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t sub_1000AC0B4(uint64_t result)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if (result < (int)v2) {
        goto LABEL_14;
      }
      uint64_t v4 = v2 >> 32;
      break;
    case 2uLL:
      if (*(void *)(v2 + 16) > result) {
        goto LABEL_15;
      }
      uint64_t v4 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      if (result < 0) {
        goto LABEL_16;
      }
      uint64_t v4 = 0;
      break;
    default:
      if (result < 0) {
        goto LABEL_13;
      }
      uint64_t v4 = BYTE6(v3);
      break;
  }
  if (v4 < result)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    JUMPOUT(0x1000AC138);
  }
  v1[2] = result;
  return result;
}

uint64_t sub_1000AC148(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0) {
    return sub_1000AAA30(a1);
  }
  __break(1u);
  return a1;
}

uint64_t sub_1000AC158(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a3;
  uint64_t v7 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v4;
  unint64_t v11 = v4[1];
  uint64_t v12 = 0;
  switch(v11 >> 62)
  {
    case 1uLL:
      uint64_t v12 = v10 >> 32;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(v10 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v12 = BYTE6(v11);
      break;
  }
  uint64_t v20 = v12;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v14 = sub_1000AA7BC((uint64_t)v9, v13, a4);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a4);
  uint64_t v16 = a2(v4);
  uint64_t v22 = v16;
  sub_1000AE5D8();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  sub_1000AAFEC((uint64_t)v9, v20, v17, a4);
  v15(v9, a4);
  uint64_t result = v14 + v16;
  if (__OFADD__(v14, v16))
  {
    __break(1u);
    JUMPOUT(0x1000AC324);
  }
  return result;
}

uint64_t sub_1000AC334(uint64_t (*a1)(uint64_t *))
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = BYTE6(v3);
      break;
  }
  LOBYTE(v10) = 0;
  uint64_t v13 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v14 = &protocol witness table for UnsafeRawBufferPointer;
  unint64_t v11 = &v10;
  uint64_t v12 = (__int16 **)((char *)&v10 + 1);
  sub_10002BCF8(&v11, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_100028A4C((uint64_t)&v11);
  __int16 v10 = 0;
  uint64_t v13 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v14 = &protocol witness table for UnsafeRawBufferPointer;
  unint64_t v11 = &v10;
  uint64_t v12 = &v11;
  sub_10002BCF8(&v11, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_100028A4C((uint64_t)&v11);
  uint64_t v6 = a1(v1);
  if (v6 > 0xFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_1000AAE1C(SBYTE2(v6), v5);
  if (__OFADD__(v5, v8)) {
    goto LABEL_9;
  }
  sub_1000AAF00(v7, v5 + v8);
  return v7 + 3;
}

uint64_t sub_1000AC4C0(uint64_t a1)
{
  if (a1 > 0xFFFFFF) {
    __break(1u);
  }
  unsigned int v1 = a1;
  LOBYTE(v3) = BYTE2(a1);
  uint64_t v6 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v7 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v4 = &v3;
  uint64_t v5 = (__int16 **)((char *)&v3 + 1);
  sub_10002BCF8(&v4, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_100028A4C((uint64_t)&v4);
  __int16 v3 = bswap32(v1) >> 16;
  uint64_t v6 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v7 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v4 = &v3;
  uint64_t v5 = &v4;
  sub_10002BCF8(&v4, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_100028A4C((uint64_t)&v4);
  return 3;
}

uint64_t sub_1000AC5B8(uint64_t result, uint64_t a2)
{
  if (result > 0xFFFFFF)
  {
    __break(1u);
    goto LABEL_6;
  }
  unsigned int v3 = result;
  uint64_t result = sub_1000AAE1C(SBYTE2(result), a2);
  if (__OFADD__(a2, result))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = result;
  uint64_t v5 = sub_1000AAF00(v3, a2 + result);
  BOOL v6 = __OFADD__(v4, v5);
  uint64_t result = v4 + v5;
  if (v6) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t sub_1000AC620@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return sub_1000AD260((void (*)(uint64_t *))sub_1000AE62C, a1, a2);
}

uint64_t sub_1000AC668@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *)@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v106 = a5;
  uint64_t v94 = a3;
  uint64_t v95 = a2;
  uint64_t v104 = a6;
  uint64_t v105 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v96 = (char *)v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = *(void *)(v9 + 8);
  uint64_t v90 = *(void *)(*(void *)(v102 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness);
  Class v87 = (char *)v82 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v82 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = __chkstk_darwin(v13);
  id v88 = (char *)v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v91 = (char *)v82 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v103 = (char *)v82 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v100 = (char *)v82 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v93 = (char *)v82 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v92 = (char *)v82 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v101 = (char *)v82 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)v82 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)v82 - v35;
  uint64_t v99 = a1;
  sub_1000AB460(v34, a4, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))(v104, 1, 1, v106);
  }
  unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v84 = v16 + 32;
  uint64_t v83 = v37;
  v37(v36, v15, a4);
  char v38 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v38(v33, v36, a4);
  char v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v40 = v101;
  id v86 = v33;
  uint64_t v98 = v38;
  v38(v101, v33, a4);
  uint64_t v85 = v36;
  uint64_t v97 = v16;
  if ((v39 & 1) == 0)
  {
    uint64_t v101 = *(char **)(v16 + 8);
    ((void (*)(char *, uint64_t))v101)(v40, a4);
    unint64_t v44 = v86;
    uint64_t v46 = v103;
    uint64_t v42 = a4;
    goto LABEL_21;
  }
  uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v101 = *(char **)(v16 + 8);
  ((void (*)(char *, uint64_t))v101)(v40, a4);
  uint64_t v42 = a4;
  if (v41 <= 64)
  {
    unint64_t v44 = v86;
    uint64_t v46 = v103;
    goto LABEL_21;
  }
  v82[1] = v16 + 8;
  unint64_t v43 = v92;
  unint64_t v44 = v86;
  v98(v92, v86, a4);
  int64_t v112 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v46 = v103;
    unint64_t v47 = (void (*)(char *, uint64_t))v101;
    if (v45 >= 64)
    {
      sub_1000AE5D8();
      uint64_t v48 = v43;
      Swift::String v49 = v93;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_13;
    }
LABEL_17:
    uint64_t v53 = dispatch thunk of BinaryInteger._lowWord.getter();
    v47(v43, v42);
    if (v53 < v112) {
      goto LABEL_49;
    }
    goto LABEL_21;
  }
  char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v46 = v103;
  unint64_t v47 = (void (*)(char *, uint64_t))v101;
  if ((v50 & 1) == 0)
  {
    if (v51 >= 64)
    {
      ((void (*)(char *, uint64_t))v101)(v43, v42);
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v51 > 64)
  {
    sub_1000AE5D8();
    Swift::String v49 = v93;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v48 = v92;
LABEL_13:
    char v52 = dispatch thunk of static Comparable.< infix(_:_:)();
    v47(v49, v42);
    v47(v48, v42);
    if (v52) {
      goto LABEL_49;
    }
    goto LABEL_21;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  char v54 = v93;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v55 = v92;
  LODWORD(v90) = dispatch thunk of static Comparable.< infix(_:_:)();
  v47(v54, v42);
  unsigned int v56 = v88;
  v83(v88, v55, v42);
  if (v90)
  {
LABEL_48:
    v47(v56, v42);
    goto LABEL_49;
  }
  uint64_t v92 = (char *)v112;
  uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
  v47(v56, v42);
  if (v57 < (uint64_t)v92)
  {
LABEL_49:
    __break(1u);
    JUMPOUT(0x1000AD250);
  }
LABEL_21:
  uint64_t v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v59 = v100;
  v98(v100, v44, v42);
  if (v58 < 65)
  {
    uint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter();
    unint64_t v47 = (void (*)(char *, uint64_t))v101;
    ((void (*)(char *, uint64_t))v101)(v59, v42);
    if (v65 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v47 = (void (*)(char *, uint64_t))v101;
    ((void (*)(char *, uint64_t))v101)(v59, v42);
  }
  v98(v46, v44, v42);
  int64_t v112 = 0x7FFFFFFFFFFFFFFFLL;
  char v60 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v61 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v60)
  {
    if (v61 > 64)
    {
      sub_1000AE5D8();
      uint64_t v62 = v93;
      unsigned int v56 = (char *)v42;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
      v47(v62, v42);
      uint64_t v64 = v46;
      goto LABEL_32;
    }
LABEL_30:
    dispatch thunk of BinaryInteger._lowWord.getter();
    v47(v46, v42);
    goto LABEL_33;
  }
  if (v61 <= 63) {
    goto LABEL_30;
  }
  uint64_t v108 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v66 = v93;
  v83(v93, v46, v42);
  sub_1000AE5D8();
  uint64_t v67 = v91;
  unsigned int v56 = (char *)v42;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
  v47(v67, v42);
  uint64_t v64 = v66;
LABEL_32:
  v47(v64, v42);
  if (v63)
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_33:
  uint64_t v68 = dispatch thunk of BinaryInteger._lowWord.getter();
  v47(v44, v42);
  uint64_t v69 = sub_1000ABDB8(v68);
  if (v70 >> 60 == 15)
  {
    v47(v85, v42);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))(v104, 1, 1, v106);
  }
  uint64_t v109 = v69;
  unint64_t v110 = v70;
  uint64_t v111 = v71;
  char v73 = v96;
  unsigned int v56 = v94;
  uint64_t v74 = v107;
  v95(&v109);
  uint64_t v75 = v109;
  unint64_t v76 = v110;
  if (v74) {
    goto LABEL_45;
  }
  uint64_t v77 = 0;
  switch(v110 >> 62)
  {
    case 1uLL:
      uint64_t v77 = v109 >> 32;
      break;
    case 2uLL:
      uint64_t v77 = *(void *)(v109 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v77 = BYTE6(v110);
      break;
  }
  if (__OFSUB__(v77, v111)) {
    goto LABEL_47;
  }
  if (v77 == v111)
  {
    sub_10002BD3C(v109, v110);
    v47(v85, v42);
    uint64_t v79 = v104;
    uint64_t v78 = v105;
    uint64_t v80 = v106;
    (*(void (**)(uint64_t, char *, uint64_t))(v105 + 32))(v104, v73, v106);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v79, 0, 1, v80);
  }
  sub_100030AC0();
  swift_allocError();
  *uint64_t v81 = 0;
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v73, v106);
  uint64_t v75 = v109;
  unint64_t v76 = v110;
LABEL_45:
  sub_10002BD3C(v75, v76);
  return ((uint64_t (*)(char *, uint64_t))v47)(v85, v42);
}

uint64_t sub_1000AD260@<X0>(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v10 = *v3;
  unint64_t v9 = v3[1];
  uint64_t v11 = v3[2];
  sub_10002BD94(*v3, v9);
  uint64_t v12 = v20;
  a1(v3);
  if (v12)
  {
    sub_10002BD3C(*v3, v3[1]);
    uint64_t *v3 = v10;
    v3[1] = v9;
    void v3[2] = v11;
    return swift_willThrow();
  }
  else
  {
    uint64_t v20 = v11;
    uint64_t v14 = *(void *)(a2 - 8);
    int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, a2);
    uint64_t v16 = v19;
    if (v15 == 1)
    {
      sub_10002BD3C(*v3, v3[1]);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v6);
      uint64_t *v3 = v10;
      v3[1] = v9;
      uint64_t v17 = 1;
      void v3[2] = v20;
    }
    else
    {
      sub_10002BD3C(v10, v9);
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v16, v8, a2);
      uint64_t v17 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v16, v17, 1, a2);
  }
}

uint64_t sub_1000AD47C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_1000AD260((void (*)(uint64_t *))sub_1000AE650, a1, a2);
}

uint64_t sub_1000AD4BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v34 = 0;
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  uint64_t v15 = *a1;
  unint64_t v16 = a1[1];
  switch(v16 >> 62)
  {
    case 1uLL:
      if (v15 >> 32 < v14) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v15 + 24) < v14) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      goto LABEL_10;
    case 3uLL:
      if (v14 < 1) {
        goto LABEL_10;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
    default:
      if (BYTE6(v16) < v14) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
LABEL_10:
      uint64_t v35 = *a1;
      unint64_t v36 = v16;
      if (v14 < v13) {
        goto LABEL_25;
      }
      v28[1] = v10;
      uint64_t v29 = v9;
      uint64_t v30 = v12;
      uint64_t v31 = &v35;
      uint64_t v32 = v13;
      uint64_t v33 = v13 + 1;
      sub_100020378(&qword_1001599E8);
      sub_1000AE670();
      sub_1000AE6B8();
      DataProtocol.copyBytes<A>(to:from:)();
      uint64_t v17 = v34;
      a1[2] = v14;
      uint64_t v18 = sub_1000AB308();
      if ((v18 & 0x10000) != 0) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      uint64_t v19 = sub_1000ABDB8((unsigned __int16)v18 | (unint64_t)(v17 << 16));
      if (v20 >> 60 == 15) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, a2);
      }
      uint64_t v35 = v19;
      unint64_t v36 = v20;
      uint64_t v37 = v21;
      uint64_t v23 = v30;
      v29(&v35);
      uint64_t v24 = v35;
      unint64_t v25 = v36;
      if (v3) {
        return sub_10002BD3C(v24, v25);
      }
      uint64_t v26 = 0;
      switch(v36 >> 62)
      {
        case 1uLL:
          uint64_t v26 = v35 >> 32;
          break;
        case 2uLL:
          uint64_t v26 = *(void *)(v35 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v26 = BYTE6(v36);
          break;
      }
      if (__OFSUB__(v26, v37)) {
        goto LABEL_26;
      }
      if (v26 == v37)
      {
        sub_10002BD3C(v35, v36);
        (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v23, a2);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, a2);
      }
      else
      {
        sub_100030AC0();
        swift_allocError();
        *uint64_t v27 = 0;
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v23, a2);
        uint64_t v24 = v35;
        unint64_t v25 = v36;
        return sub_10002BD3C(v24, v25);
      }
  }
}

uint64_t sub_1000AD814()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_16:
    __break(1u);
  }
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v3 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 24);
      goto LABEL_6;
    case 3uLL:
      if (v2 >= 1) {
        return 0;
      }
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_6:
      if (v5 < v2) {
        return 0;
      }
LABEL_7:
      if (v2 < v1) {
        goto LABEL_16;
      }
      sub_100020378(&qword_1001599E8);
      sub_1000AE670();
      sub_1000AE6B8();
      DataProtocol.copyBytes<A>(to:from:)();
      v0[2] = v2;
      uint64_t result = sub_1000AB308();
      if ((result & 0x10000) != 0) {
        return 0;
      }
      else {
        return (unsigned __int16)result;
      }
  }
}

uint64_t TransparencyByteBuffer.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned __int8 v4 = BYTE6(a3);
  unint64_t v5 = a3 >> 62;
  uint64_t v7 = 0;
  switch(v5)
  {
    case 1uLL:
      uint64_t v7 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = v4;
      break;
  }
  if (v7 < a4)
  {
    __break(1u);
    JUMPOUT(0x1000ADA34);
  }
  uint64_t v8 = Data._Representation.subscript.getter();
  unint64_t v10 = v9;
  Data.hash(into:)();

  return sub_10002BD3C(v8, v10);
}

Swift::Int TransparencyByteBuffer.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(a2);
      break;
  }
  if (v6 < a3)
  {
    __break(1u);
    JUMPOUT(0x1000ADB0CLL);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  Data.hash(into:)();
  sub_10002BD3C(v7, v9);
  return Hasher._finalize()();
}

Swift::Int sub_1000ADB1C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1000ADBE0);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  sub_10002BD3C(v5, v7);
  return Hasher._finalize()();
}

uint64_t sub_1000ADBF0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v3 = BYTE6(v2);
      break;
  }
  if (v3 < v0[2])
  {
    __break(1u);
    JUMPOUT(0x1000ADC9CLL);
  }
  uint64_t v4 = Data._Representation.subscript.getter();
  unint64_t v6 = v5;
  Data.hash(into:)();

  return sub_10002BD3C(v4, v6);
}

Swift::Int sub_1000ADCAC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v4 = BYTE6(v2);
      break;
  }
  if (v4 < v3)
  {
    __break(1u);
    JUMPOUT(0x1000ADD6CLL);
  }
  uint64_t v5 = Data._Representation.subscript.getter();
  unint64_t v7 = v6;
  Data.hash(into:)();
  sub_10002BD3C(v5, v7);
  return Hasher._finalize()();
}

uint64_t sub_1000ADD7C(uint64_t a1, uint64_t a2)
{
  return _s15swtransparencyd22TransparencyByteBufferV2eeoiySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
}

char *sub_1000ADD98(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_10010DB20;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_1000AE0A4((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v15 = *v1;
      uint64_t v16 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_1000AE0A4(*(void *)(v15 + 16), *(void *)(v15 + 24), a1);
      unint64_t v12 = v16 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v15;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v15;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v14, 0, 15);
      uint64_t result = (char *)a1(&v15, (char *)v14, (char *)v14);
      if (!v2) {
        return (char *)v15;
      }
      return result;
    default:
      v14[0] = *v1;
      LOWORD(v14[1]) = v3;
      BYTE2(v14[1]) = BYTE2(v3);
      BYTE3(v14[1]) = BYTE3(v3);
      BYTE4(v14[1]) = BYTE4(v3);
      BYTE5(v14[1]) = BYTE5(v3);
      BYTE6(v14[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v15, (char *)v14, (char *)v14 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v15;
      }
      unint64_t v8 = LODWORD(v14[1]) | ((unint64_t)BYTE4(v14[1]) << 32) | ((unint64_t)BYTE5(v14[1]) << 40) | ((unint64_t)BYTE6(v14[1]) << 48);
      *uint64_t v1 = v14[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

char *sub_1000AE0A4(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_1000AE15C(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      sub_1000AE364((int)a1, a1 >> 32);
      uint64_t result = sub_10002BD3C(a1, a2);
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      sub_1000AE364(v5, v6);
      swift_release();
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = Data._Representation.replaceSubrange(_:with:count:)();
      break;
  }
  return result;
}

uint64_t sub_1000AE364(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.replaceSubrange(_:with:count:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1000AE40C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v5)
      {
        if (v5 >= 1)
        {
          sub_100020378((uint64_t *)&unk_1001589F0);
          uint64_t v2 = (void *)swift_allocObject();
          size_t v8 = j__malloc_size(v2);
          v2[2] = v5;
          v2[3] = 2 * v8 - 64;
        }
        uint64_t v9 = type metadata accessor for Data.Iterator();
        uint64_t v10 = *(void *)(v9 - 8);
        __chkstk_darwin(v9);
        uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_10002BD94(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_10002BD3C(a1, a2);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        if (v13 != v5)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1000AE5C8);
        }
      }
      return v2;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v2;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_1000AE5D8()
{
  unint64_t result = qword_1001599E0;
  if (!qword_1001599E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001599E0);
  }
  return result;
}

uint64_t sub_1000AE62C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AC668(a1, *(void (**)(uint64_t *))(v2 + 40), *(char **)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1000AE650@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AD4BC(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_1000AE670()
{
  unint64_t result = qword_1001599F0;
  if (!qword_1001599F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001599F0);
  }
  return result;
}

unint64_t sub_1000AE6B8()
{
  unint64_t result = qword_1001599F8;
  if (!qword_1001599F8)
  {
    sub_100020418(&qword_1001599E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001599F8);
  }
  return result;
}

uint64_t sub_1000AE714(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    a3 = 0;
    goto LABEL_30;
  }
  if (!a3)
  {
    uint64_t v5 = 0;
    goto LABEL_30;
  }
  if (a3 < 0) {
    goto LABEL_33;
  }
  if (!a4)
  {
    a3 = 0;
    uint64_t v5 = 0;
    goto LABEL_30;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 == 1)
    {
      uint64_t v5 = 1;
LABEL_30:
      *(void *)unint64_t result = a4;
      *(unsigned char *)(result + 8) = a5;
      *(void *)(result + 16) = v5;
      return a3;
    }
    unint64_t v6 = a4 - 1;
    if (a4 == 1)
    {
      a3 = 1;
      uint64_t v5 = 1;
      goto LABEL_30;
    }
    unint64_t v7 = a4 - 2;
    if (a4 - 2 >= (unint64_t)(a3 - 2)) {
      unint64_t v7 = a3 - 2;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 >= 0x11)
    {
      uint64_t v12 = v8 & 0xF;
      if ((v8 & 0xF) == 0) {
        uint64_t v12 = 16;
      }
      unint64_t v13 = v8 - v12;
      uint64_t v10 = v8 - v12 + 1;
      uint64_t v11 = &a2[v13];
      uint64_t v9 = v13 + 2;
      int8x16_t v14 = vdupq_n_s8(a5);
      uint64_t v15 = (int8x16_t *)(a2 + 1);
      do
      {
        *v15++ = v14;
        v13 -= 16;
      }
      while (v13);
    }
    else
    {
      uint64_t v9 = 2;
      uint64_t v10 = 1;
      uint64_t v11 = a2;
    }
    uint64_t v16 = 0;
    uint64_t v17 = v10 - a4;
    uint64_t v18 = v11 + 1;
    while (v17 + v16)
    {
      v18[v16] = a5;
      if (!(v9 - a3 + v16))
      {
        uint64_t v5 = v10 + v16 + 1;
        goto LABEL_30;
      }
      if (v10 - a3 + v16 == -1) {
        goto LABEL_32;
      }
      ++v16;
      if (!(v17 + v16))
      {
        a3 = v9 + v16 - 1;
        uint64_t v5 = a4;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s15swtransparencyd22TransparencyByteBufferV2eeoiySbAC_ACtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unsigned __int8 v7 = BYTE6(a2);
  unint64_t v8 = a2 >> 62;
  uint64_t v11 = 0;
  switch(v8)
  {
    case 1uLL:
      uint64_t v11 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v11 = v7;
      break;
  }
  if (v11 < a3)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v12 = Data._Representation.subscript.getter();
  unint64_t v14 = v13;
  uint64_t v15 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      uint64_t v15 = a4 >> 32;
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(a4 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v15 = BYTE6(a5);
      break;
  }
  if (v15 < a6)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x1000AE984);
  }
  uint64_t v16 = Data._Representation.subscript.getter();
  unint64_t v18 = v17;
  char v19 = sub_10002C1CC(v12, v14, v16, v17);
  sub_10002BD3C(v16, v18);
  sub_10002BD3C(v12, v14);
  return v19 & 1;
}

unint64_t sub_1000AE9A8()
{
  unint64_t result = qword_100159A00;
  if (!qword_100159A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159A00);
  }
  return result;
}

unint64_t sub_1000AEA04()
{
  unint64_t result = qword_100159A08;
  if (!qword_100159A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159A08);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TransparencyTLSError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AEB24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyTLSError()
{
  return &type metadata for TransparencyTLSError;
}

uint64_t destroy for TransparencyByteBuffer(uint64_t a1)
{
  return sub_10002BD3C(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s15swtransparencyd22TransparencyByteBufferVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10002BD94(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for TransparencyByteBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10002BD94(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10002BD3C(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for TransparencyByteBuffer(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10002BD3C(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyByteBuffer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TransparencyByteBuffer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyByteBuffer()
{
  return &type metadata for TransparencyByteBuffer;
}

unint64_t sub_1000AED04()
{
  unint64_t result = qword_100159A10;
  if (!qword_100159A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159A10);
  }
  return result;
}

uint64_t sub_1000AED58(uint64_t a1)
{
  uint64_t v2 = sub_100020378(&qword_100159A28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AEDB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1000AEE28(a1, a2, *(void *)(v3 + 16), **(void **)(v3 + 32), *(unsigned char *)(*(void *)(v3 + 32) + 8));
  if (!v4)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(void *)(a3 + 24) = v9;
  }
  return result;
}

uint64_t sub_1000AEDFC()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t sub_1000AEE28(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!result) {
    return a4;
  }
  if (!__OFSUB__(a2 - result, a3))
  {
    sub_1000AE714((uint64_t)&v5, (unsigned char *)(result + a3), a2 - result - a3, a4, a5);
    return v5;
  }
  __break(1u);
  return result;
}

BOOL sub_1000AEEA0(uint64_t a1)
{
  return a1 != 1;
}

Swift::Int sub_1000AEEAC()
{
  return Hasher._finalize()();
}

void sub_1000AEEF0()
{
}

Swift::Int sub_1000AEF18()
{
  return Hasher._finalize()();
}

void *sub_1000AEF58@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 1;
  return result;
}

void sub_1000AEF6C(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000AEF78()
{
  return 0x654667614279656BLL;
}

uint64_t sub_1000AEF98()
{
  return 0x6D6974206B736154;
}

unint64_t sub_1000AEFB8()
{
  return 0xD00000000000001FLL;
}

unint64_t sub_1000AEFD4()
{
  sub_100020378(&qword_100158880);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010B120;
  *(void *)(inited + 32) = 0x656D614E6B736174;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0x654667614279656BLL;
  *(void *)(inited + 56) = 0xEB00000000686374;
  return sub_10006234C(inited);
}

uint64_t sub_1000AF058()
{
  return Error<>._domain.getter();
}

uint64_t sub_1000AF088()
{
  return Error<>._code.getter();
}

uint64_t sub_1000AF0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a1, (uint64_t)v14, &qword_100157030);
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = 0;
  v15[3] = 0;
  v15[4] = a6;
  v15[5] = a4;
  v15[6] = a5;
  v15[7] = a2;
  v15[8] = a3;
  uint64_t v16 = sub_1000B0274((uint64_t)v14, (uint64_t)&unk_100159A38, (uint64_t)v15);
  sub_1000917C8(a1);
  return v16;
}

uint64_t sub_1000AF1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  _OWORD v8[4] = a5;
  v8[5] = a6;
  _OWORD v8[2] = a1;
  v8[3] = a4;
  return _swift_task_switch(sub_1000AF204, 0, 0);
}

uint64_t sub_1000AF204()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  long long v5 = *(_OWORD *)(v0 + 24);
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000AF300;
  uint64_t v7 = *(void *)(v0 + 16);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v7);
}

uint64_t sub_1000AF300()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000AF43C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000AF43C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000AF4A0()
{
  return sub_1000B06FC(72);
}

uint64_t sub_1000AF4A8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  long long v8 = *(_OWORD *)(v1 + 56);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 40);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100021024;
  *(void *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v8;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_1000AF204, 0, 0);
}

uint64_t sub_1000AF57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  void v7[5] = a4;
  v7[6] = a5;
  _OWORD v7[3] = a2;
  _OWORD v7[4] = a3;
  void v7[2] = a1;
  uint64_t v8 = type metadata accessor for Optional();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  sub_100020378(&qword_100157030);
  v7[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000AF67C, 0, 0);
}

uint64_t sub_1000AF67C()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v13 = v0[6];
  uint64_t v14 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v5 = type metadata accessor for TaskPriority();
  long long v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = 0;
  _OWORD v7[3] = 0;
  _OWORD v7[4] = v2;
  void v7[5] = v4;
  v7[6] = v3;
  swift_retain();
  v0[13] = sub_100020418(&qword_1001570C0);
  uint64_t v8 = type metadata accessor for ThrowingTaskGroup();
  sub_1000AFCB4(v1, (uint64_t)&unk_100159A78, (uint64_t)v7);
  sub_1000917C8(v1);
  v6(v1, 1, 1, v5);
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = v13;
  v9[6] = v14;
  sub_1000AFCB4(v1, (uint64_t)&unk_100159A88, (uint64_t)v9);
  sub_1000917C8(v1);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[14] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1000AF890;
  uint64_t v11 = v0[11];
  return ThrowingTaskGroup.next(isolation:)(v11, 0, 0, v8);
}

uint64_t sub_1000AF890()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000AFB6C;
  }
  else {
    uint64_t v2 = sub_1000AF9A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000AF9A4()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[10] + 8))(v1, v0[9]);
    type metadata accessor for CancellationError();
    sub_1000B0A94(&qword_1001599C8, (void (*)(uint64_t))&type metadata accessor for CancellationError);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[2], v1, v2);
    ThrowingTaskGroup.cancelAll()();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000AFB6C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000AFBD8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_100021024;
  return v8(a1);
}

uint64_t sub_1000AFCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_100020378(&qword_100157030);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029208(a1, (uint64_t)v9, &qword_100157030);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1000917C8((uint64_t)v9);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    _OWORD v19[2] = v12;
    uint64_t v19[3] = v14;
  }
  v18[1] = 1;
  id v18[2] = v16;
  uint64_t v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000AFE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  _OWORD v5[3] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  void v5[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000AFF50, 0, 0);
}

uint64_t sub_1000AFF50()
{
  ContinuousClock.init()();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100157820 + dword_100157820);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000B0010;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return v5(v3, v2, 0, 0, 1);
}

uint64_t sub_1000B0010()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_1000B0210;
  }
  else {
    uint64_t v5 = sub_1000B0180;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000B0180()
{
  sub_1000B044C();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B0210()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B0274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1000917C8(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

unint64_t sub_1000B03F4()
{
  unint64_t result = qword_100159A40;
  if (!qword_100159A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159A40);
  }
  return result;
}

unint64_t sub_1000B044C()
{
  unint64_t result = qword_100159A48;
  if (!qword_100159A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159A48);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TaskNamed(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000B053CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TaskNamed()
{
  return &type metadata for TaskNamed;
}

unint64_t sub_1000B0574()
{
  unint64_t result = qword_100159A50;
  if (!qword_100159A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159A50);
  }
  return result;
}

unint64_t sub_1000B05C8()
{
  unint64_t result = qword_100159A58;
  if (!qword_100159A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100159A58);
  }
  return result;
}

uint64_t sub_1000B061C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100029274;
  return sub_1000AF57C(a1, a2, v7, v8, v9, v10, v6);
}

uint64_t sub_1000B06F4()
{
  return sub_1000B06FC(56);
}

uint64_t sub_1000B06FC(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000B0748(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[5];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100029274;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100159A70 + dword_100159A70);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000B0824()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000B085C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100029274;
  return sub_1000AFE90((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t sub_1000B08F4()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_1000B0A94(&qword_100157828, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1000B0A94(&qword_100157830, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = sub_10002E924;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_1000B0A94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B0ADC(uint64_t a1)
{
  return sub_1000B1DF0(a1, qword_100162458);
}

uint64_t sub_1000B0AE8()
{
  return sub_1000B1E94(&qword_1001614E0, (uint64_t)qword_100162458);
}

uint64_t sub_1000B0B0C@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001614E0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162458);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1000B0BB4(uint64_t a1, char a2, double a3)
{
  *(unsigned char *)(v3 + 65) = a2;
  *(double *)(v3 + 88) = a3;
  *(void *)(v3 + 80) = a1;
  sub_100020378(&qword_100157030);
  *(void *)(v3 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_1000B0C50, 0, 0);
}

uint64_t sub_1000B0C50()
{
  uint64_t v1 = *(void *)(v0 + 96);
  char v2 = *(unsigned char *)(v0 + 65);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v5 = static Duration.seconds(_:)();
  uint64_t v7 = v6;
  sub_10003863C(v3, v0 + 16);
  uint64_t v8 = swift_allocObject();
  sub_10003CD24((long long *)(v0 + 16), v8 + 16);
  *(unsigned char *)(v8 + 56) = v2;
  unint64_t v9 = sub_1000B1D98();
  uint64_t v10 = sub_1000AF0D8(v1, v5, v7, (uint64_t)&unk_100159AA0, v8, v9);
  *(void *)(v0 + 104) = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v11;
  uint64_t v12 = sub_100020378(&qword_1001570C0);
  *uint64_t v11 = v0;
  v11[1] = sub_1000B0DFC;
  return Task.result.getter(v0 + 56, v10, v9, v12, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000B0DFC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B0EF8, 0, 0);
}

uint64_t sub_1000B0EF8()
{
  uint64_t v1 = *(void **)(v0 + 56);
  if (*(unsigned char *)(v0 + 64))
  {
    if (qword_1001614E0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_1000294A8(v2, (uint64_t)qword_100162458);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      swift_errorRetain();
      uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 72) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v7;
      sub_1000B1DD8(v1, 1);
      sub_1000B1DD8(v1, 1);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Timed out waiting to configure public key bag %@", v5, 0xCu);
      sub_100020378(&qword_1001590C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000B1DD8(v1, 1);
      sub_1000B1DD8(v1, 1);
    }

    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void *))(v0 + 8);
    return v8(v1);
  }
}

uint64_t sub_1000B1174(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 248) = a3;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = a2;
  return _swift_task_switch(sub_1000B1198, 0, 0);
}

uint64_t sub_1000B1198()
{
  int v1 = *(unsigned __int8 *)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 144);
  type metadata accessor for SWTPublicKeyBag();
  sub_10003863C((uint64_t)v2, v0 + 16);
  *(void *)(v0 + 152) = sub_1000856E4((void *)(v0 + 16));
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10002BCF8(v2, v3);
  uint64_t v5 = *(void **)(v0 + 144);
  if (v1 == 1)
  {
    uint64_t v6 = v0 + 96;
    uint64_t v8 = v2[3];
    uint64_t v7 = v2[4];
    sub_10002BCF8(v5, v8);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v8, v7);
    *(void *)(v0 + 160) = v9;
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 104) + **(int **)(v4 + 104));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v10;
    *uint64_t v10 = v0;
    uint64_t v11 = sub_1000B13F8;
  }
  else
  {
    uint64_t v6 = v0 + 56;
    uint64_t v13 = v2[3];
    uint64_t v12 = v2[4];
    sub_10002BCF8(v5, v13);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 48))(v13, v12);
    *(void *)(v0 + 192) = v9;
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 104) + **(int **)(v4 + 104));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v10;
    *uint64_t v10 = v0;
    uint64_t v11 = sub_1000B1728;
  }
  v10[1] = v11;
  return v15(v6, v9, v3, v4);
}

uint64_t sub_1000B13F8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 96;
  uint64_t v3 = *(void **)(*v0 + 160);
  uint64_t v4 = *(void *)(*v0 + 152);
  uint64_t v8 = *v0;
  swift_task_dealloc();

  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v4 + 360) + **(int **)(*(void *)v4 + 360));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 176) = v5;
  *uint64_t v5 = v8;
  v5[1] = sub_1000B15DC;
  return v7(v2);
}

uint64_t sub_1000B15DC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)v1 + 96;
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  sub_100028A4C(v3);
  if (v0)
  {
    uint64_t v4 = sub_1000B1BD8;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v2[19];
    uint64_t v6 = (*(void *)v5 + 160) & 0xFFFFFFFFFFFFLL | 0x445F000000000000;
    v2[28] = *(void *)(*(void *)v5 + 160);
    v2[29] = v6;
    uint64_t v4 = sub_1000B1A58;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000B1728()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 56;
  uint64_t v3 = *(void **)(*v0 + 192);
  uint64_t v4 = *(void *)(*v0 + 152);
  uint64_t v8 = *v0;
  swift_task_dealloc();

  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v4 + 352) + **(int **)(*(void *)v4 + 352));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 208) = v5;
  *uint64_t v5 = v8;
  v5[1] = sub_1000B190C;
  return v7(v2);
}

uint64_t sub_1000B190C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)v1 + 56;
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  sub_100028A4C(v3);
  if (v0)
  {
    uint64_t v4 = sub_1000B1C3C;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v2[19];
    uint64_t v6 = (*(void *)v5 + 160) & 0xFFFFFFFFFFFFLL | 0x445F000000000000;
    v2[28] = *(void *)(*(void *)v5 + 160);
    v2[29] = v6;
    uint64_t v4 = sub_1000B1A58;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000B1A58()
{
  *(void *)(v0 + 240) = (*(uint64_t (**)(void))(v0 + 224))();
  return _swift_task_switch(sub_1000B1AC8, 0, 0);
}

uint64_t sub_1000B1AC8()
{
  uint64_t v1 = v0[30];
  if (v1)
  {
    uint64_t v2 = (void *)v0[17];
    swift_release();
    *uint64_t v2 = v1;
  }
  else
  {
    type metadata accessor for SWTStateMachineError(0);
    sub_1000B4650(&qword_100157AA0, (void (*)(uint64_t))type metadata accessor for SWTStateMachineError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
  }
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000B1BD8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B1C3C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B1CA0()
{
  sub_100028A4C(v0 + 16);

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1000B1CD8(uint64_t a1)
{
  uint64_t v4 = v1 + 16;
  char v5 = *(unsigned char *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = sub_100021024;
  *(unsigned char *)(v6 + 248) = v5;
  *(void *)(v6 + 136) = a1;
  *(void *)(v6 + 144) = v4;
  return _swift_task_switch(sub_1000B1198, 0, 0);
}

unint64_t sub_1000B1D98()
{
  unint64_t result = qword_1001578E8;
  if (!qword_1001578E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001578E8);
  }
  return result;
}

void sub_1000B1DD8(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_1000B1DE4(uint64_t a1)
{
  return sub_1000B1DF0(a1, qword_100162470);
}

uint64_t sub_1000B1DF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10002C544(v3, a2);
  sub_1000294A8(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000B1E70()
{
  return sub_1000B1E94(qword_1001614E8, (uint64_t)qword_100162470);
}

uint64_t sub_1000B1E94(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();

  return sub_1000294A8(v3, a2);
}

uint64_t sub_1000B1EE8@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001614E8[0] != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000294A8(v2, (uint64_t)qword_100162470);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1000B1F90(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  sub_10003CD24(a2, v6 + 24);
  sub_10003CD24(a3, v6 + 64);
  return v6;
}

uint64_t sub_1000B1FF4(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)(v3 + 16) = a1;
  sub_10003CD24(a2, v3 + 24);
  sub_10003CD24(a3, v3 + 64);
  return v3;
}

uint64_t sub_1000B2038(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000B20F8, 0, 0);
}

uint64_t sub_1000B20F8()
{
  unint64_t v43 = v0;
  uint64_t v1 = type metadata accessor for URL();
  v0[8] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[9] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[10] = v3;
  v0[11] = *(void *)(*(void *)(sub_100020378(&qword_100157A70) - 8) + 64);
  uint64_t v4 = swift_task_alloc();
  URLRequest.url.getter();
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[12] = v5;
  v0[13] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v5(v4, 1, v1) == 1)
  {
    sub_1000B3AB8(v4);
    swift_task_dealloc();
    swift_task_dealloc();
    if (qword_1001614E8[0] != -1) {
      swift_once();
    }
    uint64_t v7 = v0[6];
    uint64_t v6 = v0[7];
    uint64_t v8 = v0[5];
    uint64_t v9 = v0[3];
    uint64_t v10 = sub_1000294A8(v8, (uint64_t)qword_100162470);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    uint64_t v11 = type metadata accessor for URLRequest();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v13, v9, v11);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v39 = v15;
      os_log_t log = v14;
      uint64_t v16 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[12];
      uint64_t v17 = v0[8];
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v19 = swift_task_alloc();
      URLRequest.url.getter();
      if (v16(v19, 1, v17) == 1)
      {
        sub_1000B3AB8(v19);
        unint64_t v20 = 0xEB000000004C5255;
        uint64_t v21 = 0x206E776F6E6B6E75;
      }
      else
      {
        uint64_t v30 = v0[9];
        uint64_t v37 = v0[8];
        uint64_t v21 = URL.description.getter();
        unint64_t v20 = v31;
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v19, v37);
      }
      uint64_t v32 = v0[6];
      uint64_t v36 = v0[5];
      uint64_t v38 = v0[7];
      swift_task_dealloc();
      v0[2] = sub_1000262AC(v21, v20, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v11);
      _os_log_impl((void *)&_mh_execute_header, log, v39, "Fetching public key bag from %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v38, v36);
      swift_task_dealloc();
    }
    else
    {
      uint64_t v28 = v0[6];
      uint64_t v27 = v0[7];
      uint64_t v29 = v0[5];
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v11);

      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    }
    uint64_t v33 = SWTURLSession.shared.unsafeMutableAddressor();
    uint64_t v34 = *v33;
    v0[15] = *v33;
    unint64_t v35 = (*(void *)v34 + 96) & 0xFFFFFFFFFFFFLL | 0xE282000000000000;
    v0[16] = *(void *)(*(void *)v34 + 96);
    v0[17] = v35;
    swift_retain();
    return _swift_task_switch(sub_1000B2BB4, v34, 0);
  }
  else
  {
    uint64_t v22 = (void *)v0[4];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v4, v1);
    swift_task_dealloc();
    uint64_t v23 = v22[11];
    uint64_t v24 = v22[12];
    sub_10002BCF8(v22 + 8, v23);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 24) + **(int **)(v24 + 24));
    unint64_t v25 = (void *)swift_task_alloc();
    v0[14] = v25;
    void *v25 = v0;
    v25[1] = sub_1000B26C8;
    return v40(v3, v23, v24);
  }
}

uint64_t sub_1000B26C8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B27C4, 0, 0);
}

uint64_t sub_1000B27C4()
{
  uint64_t v33 = v0;
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_task_dealloc();
  if (qword_1001614E8[0] != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = sub_1000294A8(v4, (uint64_t)qword_100162470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = type metadata accessor for URLRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v1, v6);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v30 = v10;
    os_log_t log = v9;
    uint64_t v11 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[12];
    uint64_t v12 = v0[8];
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v14 = swift_task_alloc();
    URLRequest.url.getter();
    if (v11(v14, 1, v12) == 1)
    {
      sub_1000B3AB8(v14);
      unint64_t v15 = 0xEB000000004C5255;
      uint64_t v16 = 0x206E776F6E6B6E75;
    }
    else
    {
      uint64_t v20 = v0[9];
      uint64_t v28 = v0[8];
      uint64_t v16 = URL.description.getter();
      unint64_t v15 = v21;
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v14, v28);
    }
    uint64_t v22 = v0[6];
    uint64_t v27 = v0[5];
    uint64_t v29 = v0[7];
    swift_task_dealloc();
    v0[2] = sub_1000262AC(v16, v15, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v6);
    _os_log_impl((void *)&_mh_execute_header, log, v30, "Fetching public key bag from %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v29, v27);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v18 = v0[6];
    uint64_t v17 = v0[7];
    uint64_t v19 = v0[5];
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v6);

    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  uint64_t v23 = SWTURLSession.shared.unsafeMutableAddressor();
  uint64_t v24 = *v23;
  v0[15] = *v23;
  unint64_t v25 = (*(void *)v24 + 96) & 0xFFFFFFFFFFFFLL | 0xE282000000000000;
  v0[16] = *(void *)(*(void *)v24 + 96);
  v0[17] = v25;
  swift_retain();
  return _swift_task_switch(sub_1000B2BB4, v24, 0);
}

uint64_t sub_1000B2BB4()
{
  *(void *)(v0 + 144) = (*(uint64_t (**)(void))(v0 + 128))();
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000B2C70;
  uint64_t v2 = *(void *)(v0 + 24);
  return NSURLSession.data(for:delegate:)(v2, 0);
}

uint64_t sub_1000B2C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 160) = a1;
  *(void *)(v5 + 168) = a2;
  *(void *)(v5 + 176) = a3;
  *(void *)(v5 + 184) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = sub_1000B2FFC;
  }
  else
  {

    uint64_t v6 = sub_1000B2D90;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000B2D90()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  uint64_t v2 = (void *)v0[22];
  if (v1)
  {
    uint64_t v3 = (void *)v1;
    id v4 = v2;
    id v5 = [v3 statusCode];
    uint64_t v6 = (void *)v0[22];
    if (v5 == (id)200)
    {

      swift_task_dealloc();
      uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
      uint64_t v8 = v0[20];
      uint64_t v9 = v0[21];
      return v7(v8, v9);
    }
    uint64_t v13 = v0[20];
    unint64_t v17 = v0[21];
    type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError();
    sub_1000B4650(&qword_100159AB0, (void (*)(uint64_t))type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError);
    swift_allocError();
    unint64_t v15 = v14;
    sub_100020378(&qword_100159AB8);
    void *v15 = [v3 statusCode];
    URLRequest.url.getter();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    sub_10002BD3C(v13, v17);
  }
  else
  {
    uint64_t v12 = v0[20];
    unint64_t v11 = v0[21];
    type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError();
    sub_1000B4650(&qword_100159AB0, (void (*)(uint64_t))type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    sub_10002BD3C(v12, v11);
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1000B2FFC()
{
  uint64_t v1 = *(void *)(v0 + 184);

  type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError();
  sub_1000B4650(&qword_100159AB0, (void (*)(uint64_t))type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError);
  swift_allocError();
  *uint64_t v2 = v1;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void *sub_1000B30E8()
{
  return &unk_10013A670;
}

unint64_t sub_1000B30F4()
{
  return 0xD000000000000020;
}

unint64_t sub_1000B3110()
{
  unint64_t v1 = 0xD000000000000010;
  uint64_t v2 = type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError();
  __chkstk_darwin(v2);
  id v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000B3B64(v0, (uint64_t)v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (uint64_t)v4 + *(int *)(sub_100020378(&qword_100159AB8) + 48);
      uint64_t v8 = sub_100020378(&qword_100157A70);
      uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
      __chkstk_darwin(v8 - 8);
      os_log_type_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_10002867C(v7, (uint64_t)v10);
      unint64_t v25 = 0;
      unint64_t v26 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      unint64_t v25 = 0xD00000000000001ELL;
      unint64_t v26 = 0x80000001001107B0;
      uint64_t v24 = v6;
      v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 0x6C727520726F6620;
      v12._object = (void *)0xE900000000000020;
      String.append(_:)(v12);
      __chkstk_darwin(v13);
      sub_100029208((uint64_t)v10, (uint64_t)v10, &qword_100157A70);
      uint64_t v14 = type metadata accessor for URL();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14) == 1)
      {
        sub_1000B3AB8((uint64_t)v10);
        uint64_t v16 = (void *)0xE500000000000000;
        uint64_t v17 = 0x3E6C72753CLL;
      }
      else
      {
        uint64_t v17 = URL.description.getter();
        uint64_t v16 = v20;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v14);
      }
      v21._uint64_t countAndFlagsBits = v17;
      v21._object = v16;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      unint64_t v1 = v25;
      sub_1000B3AB8((uint64_t)v10);
    }
  }
  else
  {
    uint64_t v18 = *v4;
    unint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v19._uint64_t countAndFlagsBits = 0xD000000000000018;
    v19._object = (void *)0x8000000100112FA0;
    String.append(_:)(v19);
    uint64_t v24 = v18;
    sub_100020378(&qword_1001570C0);
    _print_unlocked<A, B>(_:_:)();
    swift_errorRelease();
    return v25;
  }
  return v1;
}

unint64_t sub_1000B344C()
{
  uint64_t v1 = type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError();
  __chkstk_darwin(v1);
  uint64_t v3 = (void *)((char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000B3B64(v0, (uint64_t)v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *v3;
      uint64_t v6 = (uint64_t)v3 + *(int *)(sub_100020378(&qword_100159AB8) + 48);
      uint64_t v7 = sub_100020378(&qword_100157A70);
      uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
      __chkstk_darwin(v7 - 8);
      uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_10002867C(v6, (uint64_t)v9);
      sub_100020378(&qword_100158880);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10010DEB0;
      *(void *)(inited + 32) = 7107189;
      *(void *)(inited + 40) = 0xE300000000000000;
      __chkstk_darwin(inited);
      sub_100029208((uint64_t)v9, (uint64_t)v9, &qword_100157A70);
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) == 1)
      {
        sub_1000B3AB8((uint64_t)v9);
        uint64_t v13 = (uint64_t *)(inited + 48);
        *(void *)(inited + 72) = &type metadata for String;
      }
      else
      {
        uint64_t v20 = URL.description.getter();
        unint64_t v22 = v21;
        (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
        uint64_t v13 = (uint64_t *)(inited + 48);
        *(void *)(inited + 72) = &type metadata for String;
        if (v22)
        {
          uint64_t *v13 = v20;
LABEL_10:
          *(void *)(inited + 56) = v22;
          *(void *)(inited + 80) = 0x737574617473;
          *(void *)(inited + 88) = 0xE600000000000000;
          *(void *)(inited + 120) = &type metadata for Int;
          *(void *)(inited + 96) = v5;
          unint64_t v19 = sub_10006234C(inited);
          sub_1000B3AB8((uint64_t)v9);
          return v19;
        }
      }
      uint64_t *v13 = 45;
      unint64_t v22 = 0xE100000000000000;
      goto LABEL_10;
    }
    unint64_t v19 = sub_10006234C((uint64_t)_swiftEmptyArrayStorage);
    sub_1000B3BC8((uint64_t)v3);
  }
  else
  {
    sub_100020378(&qword_100158880);
    uint64_t v14 = swift_initStackObject();
    *(_OWORD *)(v14 + 16) = xmmword_10010B120;
    *(void *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v14 + 40) = v15;
    swift_getErrorValue();
    uint64_t v16 = v24[1];
    uint64_t v17 = v25;
    *(void *)(v14 + 72) = v25;
    uint64_t v18 = sub_100047360((uint64_t *)(v14 + 48));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v18, v16, v17);
    unint64_t v19 = sub_10006234C(v14);
    swift_errorRelease();
  }
  return v19;
}

uint64_t sub_1000B37C4()
{
  return Error<>._domain.getter();
}

uint64_t sub_1000B3824()
{
  return Error<>._code.getter();
}

uint64_t sub_1000B388C()
{
  sub_100028A4C(v0 + 24);
  sub_100028A4C(v0 + 64);
  return v0;
}

uint64_t sub_1000B38BC()
{
  sub_100028A4C(v0 + 24);
  sub_100028A4C(v0 + 64);

  return _swift_deallocClassInstance(v0, 104, 7);
}

id sub_1000B3904()
{
  return *(id *)(*(void *)v0 + 16);
}

uint64_t sub_1000B3910(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1000B39A8;
  return sub_1000B2038(a1);
}

uint64_t sub_1000B39A8(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t sub_1000B3AB8(uint64_t a1)
{
  uint64_t v2 = sub_100020378(&qword_100157A70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError()
{
  uint64_t result = qword_100161670;
  if (!qword_100161670) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B3B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B3BC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B3C24()
{
  return sub_1000B4650(&qword_100159AB0, (void (*)(uint64_t))type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError);
}

ValueMetadata *type metadata accessor for KeybagReloader()
{
  return &type metadata for KeybagReloader;
}

uint64_t type metadata accessor for SWTKeyBagFetcher()
{
  return self;
}

uint64_t *sub_1000B3CA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v10 = *(int *)(sub_100020378(&qword_100159AB8) + 48);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_100020378(&qword_100157A70);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      goto LABEL_10;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = *a2;
      swift_errorRetain();
      *a1 = v8;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_1000B3E78(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = a1 + *(int *)(sub_100020378(&qword_100159AB8) + 48);
    uint64_t v4 = type metadata accessor for URL();
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v4);
    if (!result)
    {
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
      return v5(v3, v4);
    }
  }
  else if (!result)
  {
    return swift_errorRelease();
  }
  return result;
}

void *sub_1000B3F7C(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(sub_100020378(&qword_100159AB8) + 48);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_100020378(&qword_100157A70);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    goto LABEL_8;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = *a2;
    swift_errorRetain();
    *a1 = v7;
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_1000B4110(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000B3BC8((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = *(int *)(sub_100020378(&qword_100159AB8) + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = sub_100020378(&qword_100157A70);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      goto LABEL_9;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = *a2;
      swift_errorRetain();
      *a1 = v7;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000B42B4(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_100020378(&qword_100159AB8) + 48);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      uint64_t v11 = sub_100020378(&qword_100157A70);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000B4424(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000B3BC8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_100020378(&qword_100159AB8) + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for URL();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_100020378(&qword_100157A70);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_1000B45A4()
{
  v1[4] = "\b";
  sub_100048F24();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_1000B4650(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B4698@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + 112, a1);
}

uint64_t sub_1000B46B8()
{
  return swift_retain();
}

uint64_t sub_1000B46C0()
{
  return swift_retain();
}

uint64_t sub_1000B46C8(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1000B4708(a1);
  return v2;
}

uint64_t sub_1000B4708(void *a1)
{
  void (*v31)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v32;
  long long v34[2];

  uint64_t v2 = v1;
  swift_defaultActor_initialize();
  type metadata accessor for SMSemaphore();
  uint64_t v4 = sub_100094ED8();
  sub_100020378(&qword_100159C18);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10010E020;
  sub_10003863C((uint64_t)a1, (uint64_t)v34);
  type metadata accessor for Initial(0);
  uint64_t v6 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v6 + 112) = 0;
  *(void *)(v6 + 120) = &_swiftEmptySetSingleton;
  uint64_t v7 = v6 + OBJC_IVAR____TtC15swtransparencyd7Initial_priority;
  static TaskPriority.userInitiated.getter();
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v7, 0, 1, v8);
  sub_10003CD24(v34, v6 + OBJC_IVAR____TtC15swtransparencyd7Initial_deps);
  uint64_t v10 = sub_1000B7DE8(&qword_100159C20, (void (*)(uint64_t))type metadata accessor for Initial);
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v10;
  type metadata accessor for InitialLoadConfigState(0);
  sub_10003863C((uint64_t)a1, (uint64_t)v34);
  uint64_t v11 = sub_10008E7C8(v34);
  uint64_t v12 = sub_1000B7DE8(&qword_100159C28, (void (*)(uint64_t))type metadata accessor for InitialLoadConfigState);
  *(void *)(v5 + 48) = v11;
  *(void *)(v5 + 56) = v12;
  type metadata accessor for WaitForNetwork(0);
  uint64_t v13 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v13 + 112) = 2;
  *(void *)(v13 + 120) = sub_1000916EC((uint64_t)&off_10013A730);
  v9(v13 + OBJC_IVAR____TtC15swtransparencyd14WaitForNetwork_priority, 1, 1, v8);
  uint64_t v14 = sub_1000B7DE8(&qword_100159C30, (void (*)(uint64_t))type metadata accessor for WaitForNetwork);
  *(void *)(v5 + 64) = v13;
  *(void *)(v5 + 72) = v14;
  type metadata accessor for LoadConfigState(0);
  sub_10003863C((uint64_t)a1, (uint64_t)v34);
  uint64_t v15 = sub_10008FE74(v34);
  uint64_t v16 = sub_1000B7DE8(&qword_100159C38, (void (*)(uint64_t))type metadata accessor for LoadConfigState);
  *(void *)(v5 + 80) = v15;
  *(void *)(v5 + 88) = v16;
  sub_10003863C((uint64_t)a1, (uint64_t)v34);
  type metadata accessor for InitialLoadPublicKeyState(0);
  uint64_t v17 = swift_allocObject();
  swift_retain();
  sub_1000B87AC(v34, v4);
  uint64_t v18 = sub_1000B7DE8(&qword_100159C40, (void (*)(uint64_t))type metadata accessor for InitialLoadPublicKeyState);
  *(void *)(v5 + 96) = v17;
  *(void *)(v5 + 104) = v18;
  sub_10003863C((uint64_t)a1, (uint64_t)v34);
  type metadata accessor for ReloadPublicKeyState(0);
  uint64_t v19 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v19 + 112) = 7;
  *(void *)(v19 + 120) = &_swiftEmptySetSingleton;
  v9(v19 + OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_priority, 1, 1, v8);
  sub_10003CD24(v34, v19 + OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_deps);
  uint64_t v20 = sub_1000B7DE8(&qword_100159C48, (void (*)(uint64_t))type metadata accessor for ReloadPublicKeyState);
  *(void *)(v5 + 112) = v19;
  *(void *)(v5 + 120) = v20;
  sub_10003863C((uint64_t)a1, (uint64_t)v34);
  type metadata accessor for MilestoneDownloadState(0);
  uint64_t v21 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v21 + 112) = 5;
  *(void *)(v21 + 120) = &_swiftEmptySetSingleton;
  v9(v21 + OBJC_IVAR____TtC15swtransparencyd22MilestoneDownloadState_priority, 1, 1, v8);
  sub_10003CD24(v34, v21 + OBJC_IVAR____TtC15swtransparencyd22MilestoneDownloadState_deps);
  uint64_t v22 = sub_1000B7DE8(&qword_100159C50, (void (*)(uint64_t))type metadata accessor for MilestoneDownloadState);
  *(void *)(v5 + 128) = v21;
  *(void *)(v5 + 136) = v22;
  sub_10003863C((uint64_t)a1, (uint64_t)v34);
  type metadata accessor for PatConsistencyState(0);
  uint64_t v23 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v23 + 112) = 6;
  *(void *)(v23 + 120) = &_swiftEmptySetSingleton;
  v9(v23 + OBJC_IVAR____TtC15swtransparencyd19PatConsistencyState_priority, 1, 1, v8);
  sub_10003CD24(v34, v23 + OBJC_IVAR____TtC15swtransparencyd19PatConsistencyState_deps);
  uint64_t v24 = sub_1000B7DE8(&qword_100159C58, (void (*)(uint64_t))type metadata accessor for PatConsistencyState);
  *(void *)(v5 + 144) = v23;
  *(void *)(v5 + 152) = v24;
  sub_10003863C((uint64_t)a1, (uint64_t)v34);
  type metadata accessor for DetectSplitViewState(0);
  uint64_t v25 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v25 + 112) = 8;
  *(void *)(v25 + 120) = &_swiftEmptySetSingleton;
  v9(v25 + OBJC_IVAR____TtC15swtransparencyd20DetectSplitViewState_priority, 1, 1, v8);
  sub_10003CD24(v34, v25 + OBJC_IVAR____TtC15swtransparencyd20DetectSplitViewState_deps);
  uint64_t v26 = sub_1000B7DE8(&qword_100159C60, (void (*)(uint64_t))type metadata accessor for DetectSplitViewState);
  *(void *)(v5 + 160) = v25;
  *(void *)(v5 + 168) = v26;
  sub_10003863C((uint64_t)a1, (uint64_t)v34);
  type metadata accessor for Ready(0);
  uint64_t v27 = swift_allocObject();
  sub_1000BE60C(v34);
  uint64_t v28 = sub_1000B7DE8(&qword_100159C68, (void (*)(uint64_t))type metadata accessor for Ready);
  *(void *)(v5 + 176) = v27;
  *(void *)(v5 + 184) = v28;
  sub_10003863C((uint64_t)a1, v2 + 112);
  *(void *)(v2 + 160) = v4;
  type metadata accessor for SWTStateMachine(0);
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  sub_10002BCF8(a1, v29);
  unint64_t v31 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 72);
  swift_retain();
  v31(v34, v29, v30);
  uint64_t v32 = sub_1000970D0(v5, 0, 7, (uint64_t)v34);
  swift_release();
  *(void *)(v2 + 152) = v32;
  sub_100028A4C((uint64_t)a1);
  return v2;
}

uint64_t sub_1000B4DAC(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = &_swiftEmptySetSingleton;
  uint64_t v3 = v2 + OBJC_IVAR____TtC15swtransparencyd7Initial_priority;
  static TaskPriority.userInitiated.getter();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  sub_10003CD24(a1, v2 + OBJC_IVAR____TtC15swtransparencyd7Initial_deps);
  return v2;
}

uint64_t type metadata accessor for Initial(uint64_t a1)
{
  return sub_100028514(a1, (uint64_t *)&unk_100161F00);
}

uint64_t sub_1000B4E88()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v0 + 112) = 2;
  *(void *)(v0 + 120) = sub_1000916EC((uint64_t)&off_10013A758);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd14WaitForNetwork_priority;
  uint64_t v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t sub_1000B4F24(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  sub_1000B87AC(a1, a2);
  return v4;
}

uint64_t sub_1000B4F74(long long *a1)
{
  return sub_1000B4FD4(a1, 7, &OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_priority, &OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_deps);
}

uint64_t sub_1000B4F8C(long long *a1)
{
  return sub_1000B4FD4(a1, 5, &OBJC_IVAR____TtC15swtransparencyd22MilestoneDownloadState_priority, &OBJC_IVAR____TtC15swtransparencyd22MilestoneDownloadState_deps);
}

uint64_t sub_1000B4FA4(long long *a1)
{
  return sub_1000B4FD4(a1, 6, &OBJC_IVAR____TtC15swtransparencyd19PatConsistencyState_priority, &OBJC_IVAR____TtC15swtransparencyd19PatConsistencyState_deps);
}

uint64_t sub_1000B4FBC(long long *a1)
{
  return sub_1000B4FD4(a1, 8, &OBJC_IVAR____TtC15swtransparencyd20DetectSplitViewState_priority, &OBJC_IVAR____TtC15swtransparencyd20DetectSplitViewState_deps);
}

uint64_t sub_1000B4FD4(long long *a1, char a2, void *a3, void *a4)
{
  uint64_t v8 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v8 + 112) = a2;
  *(void *)(v8 + 120) = &_swiftEmptySetSingleton;
  uint64_t v9 = v8 + *a3;
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_10003CD24(a1, v8 + *a4);
  return v8;
}

uint64_t sub_1000B5094(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1000BE60C(a1);
  return v2;
}

uint64_t sub_1000B50D4()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000B50F4, 0, 0);
}

uint64_t sub_1000B50F4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003E26C;
  return sub_1000976DC();
}

uint64_t sub_1000B518C(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for CancellationError();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000B5250, 0, 0);
}

uint64_t sub_1000B5250()
{
  v0[10] = *(void *)(v0[6] + 152);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[11] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000B52F0;
  return sub_100099658(6);
}

uint64_t sub_1000B52F0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B53EC, 0, 0);
}

uint64_t sub_1000B53EC()
{
  uint64_t v1 = *(void *)(v0[6] + 160);
  v0[12] = v1;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)(*(void *)v1 + 160)
                                                                                    + **(int **)(*(void *)v1 + 160));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[13] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000B550C;
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  return v6(v4, v3, 0xD00000000000001DLL, 0x8000000100113030);
}

uint64_t sub_1000B550C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000B5654, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(BOOL))(v2 + 8);
    BOOL v4 = *(void *)(v2 + 112) == 0;
    return v3(v4);
  }
}

uint64_t sub_1000B5654()
{
  v0[2] = v0[14];
  swift_errorRetain();
  sub_100020378(&qword_1001570C0);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[12];
    swift_errorRelease();
    uint64_t v11 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 168) + **(int **)(*(void *)v1 + 168));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[15] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000B5968;
    return v11();
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    BOOL v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138412290;
      swift_errorRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      v0[3] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v7 = v8;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "unknown error for isReadyEnoughForXPC %@", v6, 0xCu);
      sub_100020378(&qword_1001590C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(BOOL))v0[1];
    BOOL v10 = v0[14] == 0;
    return v9(v10);
  }
}

uint64_t sub_1000B5968()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B5A64, 0, 0);
}

uint64_t sub_1000B5A64()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(BOOL))v0[1];
  BOOL v2 = v0[14] == 0;
  return v1(v2);
}

uint64_t sub_1000B5AF0()
{
  *(void *)(v1 + 64) = v0;
  return _swift_task_switch(sub_1000B5B10, v0, 0);
}

uint64_t sub_1000B5B10()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v1[17];
  uint64_t v3 = v1[18];
  sub_10002BCF8(v1 + 14, v2);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 80))(v2, v3);
  NSString v5 = String._bridgeToObjectiveC()();
  double v6 = SFAnalyticsSamplerIntervalOncePerReport;
  v0[6] = sub_1000BF318;
  v0[7] = v1;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1000B5D9C;
  v0[5] = &unk_10013A820;
  uint64_t v7 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  [v4 addMultiSamplerForName:v5 withTimeInterval:v7 block:v6];
  _Block_release(v7);

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

unint64_t sub_1000B5C80(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100020378(&qword_10015A5E8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_100049298(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Class sub_1000B5D9C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  swift_release();
  sub_1000BFD30();
  v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v3.super.isa;
}

void *sub_1000B5E1C()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000B5E28(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for TransparencySWIssue();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000B5EEC, v2, 0);
}

uint64_t sub_1000B5EEC()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  NSDictionary v3 = (void *)v0[9];
  uint64_t v15 = v0[10];
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[18];
  sub_10002BCF8(v3 + 14, v4);
  SWTFollowUpType.rawValue.getter();
  type metadata accessor for Date();
  swift_task_alloc();
  Date.init()();
  swift_bridgeObjectRetain();
  TransparencySWIssue.init(issue:posted:slh:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 128))(v1, v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v15);
  uint64_t v6 = v3[17];
  uint64_t v7 = v3[18];
  id v8 = v3 + 14;
  sub_10002BCF8(v8, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[6];
  sub_10002BCF8(v0 + 2, v9);
  uint64_t v16 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 16)
                                                                             + **(int **)(v10 + 16));
  uint64_t v11 = (void *)swift_task_alloc();
  v0[13] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000B611C;
  uint64_t v13 = v0[7];
  uint64_t v12 = v0[8];
  return v16(v13, v8, v12, v9, v10);
}

uint64_t sub_1000B611C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B622C, v1, 0);
}

uint64_t sub_1000B622C()
{
  sub_100028A4C(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B6298()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_1000B62B8, v0, 0);
}

uint64_t sub_1000B62B8()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = v1[17];
  uint64_t v3 = v1[18];
  sub_10002BCF8(v1 + 14, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  sub_10002BCF8(v0 + 2, v4);
  id v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 40) + **(int **)(v5 + 40));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000B63FC;
  return v8(v4, v5);
}

uint64_t sub_1000B63FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_100097D68, v1, 0);
}

uint64_t sub_1000B650C()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000B652C, v0, 0);
}

uint64_t sub_1000B652C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000BFD70;
  return sub_100099658(4);
}

uint64_t sub_1000B65C8()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000B65E8, v0, 0);
}

uint64_t sub_1000B65E8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000BFD70;
  return sub_100099658(3);
}

uint64_t sub_1000B6684()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000B66A4, v0, 0);
}

uint64_t sub_1000B66A4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000BFD70;
  return sub_100099658(1);
}

uint64_t sub_1000B6740()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000B6760, v0, 0);
}

uint64_t sub_1000B6760()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007D3E8;
  return sub_100099658(5);
}

uint64_t sub_1000B67FC(uint64_t a1, char a2)
{
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 40) = a2;
  return _swift_task_switch(sub_1000B6820, v2, 0);
}

uint64_t sub_1000B6820()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 152);
  if (*(unsigned char *)(v0 + 40) == 1)
  {
    *(void *)(v0 + 24) = v1;
    return _swift_task_switch(sub_1000B6910, v1, 0);
  }
  else
  {
    char v2 = sub_1000292A4();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v3;
    void *v3 = v0;
    v3[1] = sub_10007BB98;
    return sub_10009C554(v2 & 1);
  }
}

uint64_t sub_1000B6910()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1000A1464();
  return _swift_task_switch(sub_1000B6978, v1, 0);
}

uint64_t sub_1000B6978()
{
  char v1 = sub_1000292A4();
  char v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *char v2 = v0;
  v2[1] = sub_10007BB98;
  return sub_10009C554(v1 & 1);
}

uint64_t sub_1000B6A20(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  sub_100020378(&qword_100159CC8);
  v2[15] = swift_task_alloc();
  sub_100020378(&qword_100159CD0);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_1000B6AF4, v1, 0);
}

uint64_t sub_1000B6AF4()
{
  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = v1[17];
  uint64_t v3 = v1[18];
  sub_10002BCF8(v1 + 14, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  v0[18] = v4;
  id v8 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v4 + 272) + **(int **)(*(void *)v4 + 272));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[19] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000B6C40;
  uint64_t v6 = v0[17];
  return v8(v6);
}

uint64_t sub_1000B6C40()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_1000B7754;
  }
  else
  {
    uint64_t v4 = sub_1000B6D90;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000B6D90()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = type metadata accessor for TransparencySWSysdiagnose.PublicKeybag();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  v0[21] = v0[20];
  uint64_t v3 = (void *)v0[14];
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[18];
  sub_10002BCF8(v3 + 14, v4);
  LODWORD(v5) = [(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5) allowsInternalSecurityPolicies];
  swift_unknownObjectRelease();
  uint64_t countAndFlagsBits = 0;
  object = 0;
  if (v5)
  {
    id v8 = (void *)v0[14];
    uint64_t v9 = v8[17];
    uint64_t v10 = v8[18];
    sub_10002BCF8(v8 + 14, v9);
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
    Swift::String v14 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v14._countAndFlagsBits;
    object = v14._object;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v11);
    swift_task_dealloc();
  }
  v0[22] = countAndFlagsBits;
  v0[23] = object;
  uint64_t v15 = *(void *)(v0[14] + 152);
  v0[24] = v15;
  return _swift_task_switch(sub_1000B6F80, v15, 0);
}

uint64_t sub_1000B6F80()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[14];
  swift_beginAccess();
  v0[25] = *(void *)(v1 + 144);
  v0[26] = *(void *)(v1 + 152);
  swift_unknownObjectRetain();
  return _swift_task_switch(sub_1000B7014, v2, 0);
}

uint64_t sub_1000B7014()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[24];
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  swift_unknownObjectRelease();
  v0[10] = sub_10009651C(v1);
  v0[11] = v4;
  uint64_t v5 = *(void *)(v2 + 112);
  v0[27] = v5;
  unint64_t v6 = (*(void *)v5 + 112) & 0xFFFFFFFFFFFFLL | 0xBE5E000000000000;
  v0[28] = *(void *)(*(void *)v5 + 112);
  v0[29] = v6;
  swift_retain();
  return _swift_task_switch(sub_1000B70EC, v5, 0);
}

uint64_t sub_1000B70EC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  *(void *)(v0 + 240) = (*(uint64_t (**)(void))(v0 + 224))();
  swift_release();
  return _swift_task_switch(sub_1000B7168, v1, 0);
}

uint64_t sub_1000B7168()
{
  uint64_t v1 = v0[30];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    sub_1000838EC(0, v2, 0);
    uint64_t v3 = sub_1000A7548(v1);
    int64_t v6 = v3;
    int v7 = v4;
    char v8 = v5 & 1;
    while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v1 + 32))
    {
      if (((*(void *)(v1 + 56 + (((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_16;
      }
      if (*(_DWORD *)(v1 + 36) != v7) {
        goto LABEL_17;
      }
      unint64_t v9 = sub_100094F54(*(unsigned char *)(*(void *)(v1 + 48) + v6));
      uint64_t v11 = v10;
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1) {
        sub_1000838EC(v12 > 1, v13 + 1, 1);
      }
      uint64_t v14 = v22[30];
      _swiftEmptyArrayStorage[2] = v13 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v13];
      v15[4] = v9;
      v15[5] = v11;
      uint64_t v3 = sub_1000A75E8(v6, v7, v8 & 1, v14);
      int64_t v6 = v3;
      int v7 = v4;
      char v8 = v5 & 1;
      if (!--v2)
      {
        uint64_t v0 = v22;
        sub_100028300(v3, v4, v5 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v16 = v0[10];
    uint64_t v17 = v0[11];
    uint64_t v18 = v0[24];
    v0[31] = _swiftEmptyArrayStorage;
    v0[32] = v17;
    v0[33] = v16;
    uint64_t v19 = *(void *)(v18 + 112);
    v0[34] = v19;
    unint64_t v20 = (*(void *)v19 + 136) & 0xFFFFFFFFFFFFLL | 0xDCF0000000000000;
    v0[35] = *(void *)(*(void *)v19 + 136);
    v0[36] = v20;
    swift_retain();
    uint64_t v3 = (uint64_t)sub_1000B7378;
    uint64_t v4 = v19;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000B7378()
{
  uint64_t v1 = *(void *)(v0 + 112);
  *(void *)(v0 + 296) = (*(uint64_t (**)(void))(v0 + 280))();
  swift_release();
  return _swift_task_switch(sub_1000B73F4, v1, 0);
}

uint64_t sub_1000B73F4()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = (void *)v0[14];
  v0[38] = sub_1000B7940(v0[37]);
  swift_bridgeObjectRelease();
  sub_100029208(v1, v2, &qword_100159CD0);
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[18];
  sub_10002BCF8(v3 + 14, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 72))(v4, v5);
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  sub_10002BCF8(v0 + 2, v6);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8) + **(int **)(v7 + 8));
  char v8 = (void *)swift_task_alloc();
  v0[39] = v8;
  void *v8 = v0;
  v8[1] = sub_1000B7584;
  uint64_t v9 = v0[15];
  return v11(v9, v6, v7);
}

uint64_t sub_1000B7584()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B7694, v1, 0);
}

uint64_t sub_1000B7694()
{
  uint64_t v1 = *(void *)(v0 + 136);
  TransparencySWSysdiagnose.StateMachine.init(state:flags:pendingFlags:publicKeybag:containerPath:reachability:)();
  sub_100028C8C(v1, &qword_100159CD0);
  sub_100028A4C(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000B7754()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = type metadata accessor for TransparencySWSysdiagnose.PublicKeybag();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v0[21] = 0;
  uint64_t v3 = (void *)v0[14];
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[18];
  sub_10002BCF8(v3 + 14, v4);
  LODWORD(v5) = [[(id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5) allowsInternalSecurityPolicies];
  swift_unknownObjectRelease();
  uint64_t countAndFlagsBits = 0;
  object = 0;
  if (v5)
  {
    char v8 = (void *)v0[14];
    uint64_t v9 = v8[17];
    uint64_t v10 = v8[18];
    sub_10002BCF8(v8 + 14, v9);
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
    Swift::String v14 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v14._countAndFlagsBits;
    object = v14._object;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v11);
    swift_task_dealloc();
  }
  v0[22] = countAndFlagsBits;
  v0[23] = object;
  uint64_t v15 = *(void *)(v0[14] + 152);
  v0[24] = v15;
  return _swift_task_switch(sub_1000B6F80, v15, 0);
}

void *sub_1000B7940(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000838EC(0, v1, 0);
  unint64_t result = (void *)sub_10008DE88(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 64;
  uint64_t v23 = v2 + 88;
  int64_t v24 = v1;
  int v25 = v4;
  uint64_t v26 = v2 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_26;
    }
    uint64_t v27 = v6;
    unint64_t result = (void *)sub_100094F54(*(unsigned char *)(*(void *)(v2 + 48) + v5));
    uint64_t v11 = result;
    uint64_t v13 = v12;
    uint64_t v14 = v2;
    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1) {
      unint64_t result = (void *)sub_1000838EC(v15 > 1, v16 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v16 + 1;
    uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
    void v17[4] = v11;
    v17[5] = v13;
    int64_t v8 = 1 << *(unsigned char *)(v14 + 32);
    if (v5 >= v8) {
      goto LABEL_27;
    }
    uint64_t v7 = v26;
    uint64_t v18 = *(void *)(v26 + 8 * v10);
    if ((v18 & (1 << v5)) == 0) {
      goto LABEL_28;
    }
    uint64_t v2 = v14;
    int v4 = v25;
    if (*(_DWORD *)(v14 + 36) != v25) {
      goto LABEL_29;
    }
    unint64_t v19 = v18 & (-2 << (v5 & 0x3F));
    if (v19)
    {
      int64_t v8 = __clz(__rbit64(v19)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v24;
    }
    else
    {
      unint64_t v20 = v10 + 1;
      unint64_t v21 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v24;
      if (v10 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v26 + 8 * v20);
        if (!v22)
        {
          unint64_t v20 = v10 + 2;
          if (v10 + 2 >= v21) {
            goto LABEL_4;
          }
          unint64_t v22 = *(void *)(v26 + 8 * v20);
          if (!v22)
          {
            while (v21 - 3 != v10)
            {
              unint64_t v22 = *(void *)(v23 + 8 * v10++);
              if (v22)
              {
                unint64_t v20 = v10 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        int64_t v8 = __clz(__rbit64(v22)) + (v20 << 6);
      }
    }
LABEL_4:
    uint64_t v6 = v27 + 1;
    uint64_t v5 = v8;
    if (v27 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000B7B70(double a1)
{
  *(void *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  return _swift_task_switch(sub_1000B7B94, v1, 0);
}

uint64_t sub_1000B7B94()
{
  uint64_t v1 = static Duration.milliseconds(_:)();
  uint64_t v3 = v2;
  int v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v4;
  *int v4 = v0;
  v4[1] = sub_10007BB98;
  return sub_10009C274(9, v1, v3);
}

uint64_t sub_1000B7C60()
{
  sub_100028A4C(v0 + 112);
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000B7C98()
{
  sub_100028A4C(v0 + 112);
  swift_release();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000B7CE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100029208(v1 + OBJC_IVAR____TtC15swtransparencyd7Initial_priority, a1, &qword_100157030);
}

uint64_t sub_1000B7D14@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + OBJC_IVAR____TtC15swtransparencyd7Initial_deps, a1);
}

uint64_t sub_1000B7D3C(long long *a1)
{
  swift_defaultActor_initialize();
  *(unsigned char *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = &_swiftEmptySetSingleton;
  uint64_t v3 = v1 + OBJC_IVAR____TtC15swtransparencyd7Initial_priority;
  static TaskPriority.userInitiated.getter();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  sub_10003CD24(a1, v1 + OBJC_IVAR____TtC15swtransparencyd7Initial_deps);
  return v1;
}

uint64_t sub_1000B7DE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for WaitForNetwork(uint64_t a1)
{
  return sub_100028514(a1, (uint64_t *)&unk_100161F10);
}

uint64_t sub_1000B7E50()
{
  return sub_100091828(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 1);
}

uint64_t sub_1000B7E88()
{
  return sub_1000BA984(&OBJC_IVAR____TtC15swtransparencyd7Initial_priority, &OBJC_IVAR____TtC15swtransparencyd7Initial_deps);
}

uint64_t sub_1000B7E9C()
{
  return sub_1000BA9F8(&OBJC_IVAR____TtC15swtransparencyd7Initial_priority, &OBJC_IVAR____TtC15swtransparencyd7Initial_deps);
}

uint64_t sub_1000B7EB0(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 128) + **(int **)(*(void *)v1 + 128));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100091E94;
  return v6(a1);
}

uint64_t sub_1000B7FB4(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 136) + **(int **)(*(void *)v1 + 136));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100091E94;
  return v6(a1);
}

uint64_t sub_1000B80B8()
{
  return sub_1000916EC((uint64_t)&off_10013A780);
}

uint64_t sub_1000B80C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100029208(v1 + OBJC_IVAR____TtC15swtransparencyd14WaitForNetwork_priority, a1, &qword_100157030);
}

uint64_t sub_1000B80F8()
{
  return sub_100091828(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_1000B8130(uint64_t a1)
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)a1 + 216) + **(int **)(*(void *)a1 + 216));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000B822C;
  return v4(0);
}

uint64_t sub_1000B822C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(unint64_t))(v3 + 8);
  return v1(0x8000000000000000);
}

uint64_t sub_1000B8324()
{
  swift_bridgeObjectRelease();
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd14WaitForNetwork_priority, &qword_100157030);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000B8364()
{
  swift_bridgeObjectRelease();
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd14WaitForNetwork_priority, &qword_100157030);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000B83B4()
{
  swift_defaultActor_initialize();
  *(unsigned char *)(v0 + 112) = 2;
  *(void *)(v0 + 120) = sub_1000916EC((uint64_t)&off_10013A7A8);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15swtransparencyd14WaitForNetwork_priority;
  uint64_t v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t sub_1000B8440(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 112) + **(int **)(*(void *)v1 + 112));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100090B0C;
  return v6(a1);
}

uint64_t sub_1000B8544(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 120) + **(int **)(*(void *)v1 + 120));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100090B0C;
  return v6(a1);
}

uint64_t sub_1000B8648()
{
  return sub_1000916EC((uint64_t)&off_10013A7D0);
}

uint64_t sub_1000B8654@<X0>(uint64_t a1@<X8>)
{
  return sub_100029208(v1 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_priority, a1, &qword_100157030);
}

uint64_t sub_1000B8684@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_deps, a1);
}

uint64_t sub_1000B86AC()
{
  return swift_retain();
}

uint64_t sub_1000B86BC()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_pendingFetch);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1000B8704(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_pendingFetch);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*sub_1000B8750())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000B87AC(long long *a1, uint64_t a2)
{
  swift_defaultActor_initialize();
  *(unsigned char *)(v2 + 112) = 4;
  *(void *)(v2 + 120) = sub_1000916EC((uint64_t)&off_10013A6E0);
  uint64_t v5 = v2 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_priority;
  static TaskPriority.userInitiated.getter();
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  *(unsigned char *)(v2 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_pendingFetch) = 0;
  sub_10003CD24(a1, v2 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_deps);
  *(void *)(v2 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_readyEnough) = a2;
  return v2;
}

uint64_t sub_1000B887C(uint64_t a1)
{
  v2[2] = v1;
  if (a1 == 6)
  {
LABEL_4:
    uint64_t v6 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 184) + **(int **)(*(void *)v1 + 184));
    uint64_t v3 = (void *)swift_task_alloc();
    v2[3] = v3;
    void *v3 = v2;
    v3[1] = sub_1000B89C0;
    return v6();
  }
  if (a1 != 1)
  {
    if (!(_BYTE)a1) {
      goto LABEL_4;
    }
    a1 = 10;
  }
  uint64_t v5 = (uint64_t (*)(uint64_t))v2[1];
  return v5(a1);
}

uint64_t sub_1000B89C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B8AD8, v2, 0);
}

uint64_t sub_1000B8AD8()
{
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 62)
  {
    if (v1 >> 62 == 1)
    {
      sub_1000665E0(v1);
      uint64_t v2 = 10;
    }
    else if (v1 == 0x8000000000000000)
    {
      uint64_t v2 = 9;
    }
    else
    {
      uint64_t v2 = 10;
    }
  }
  else
  {
    sub_1000665E0(v1);
    uint64_t v2 = 11;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000B8B6C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 184) + **(int **)(*(void *)v1 + 184));
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1000B8C64;
  return v5();
}

uint64_t sub_1000B8C64(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B8D7C, v2, 0);
}

uint64_t sub_1000B8D7C()
{
  unint64_t v1 = v0[5];
  if (!(v1 >> 62))
  {
    uint64_t v2 = v0[2];
    sub_1000665E0(v1);
    int64_t v9 = (uint64_t (*)(unint64_t))(*(void *)(*(void *)v2 + 216)
                                                  + **(int **)(*(void *)v2 + 216));
    uint64_t v3 = (void *)swift_task_alloc();
    v0[6] = v3;
    void *v3 = v0;
    v3[1] = sub_10008EFF4;
    unint64_t v4 = 0;
    uint64_t v5 = v9;
    return v5(v4);
  }
  if (v1 >> 62 == 1)
  {
    sub_1000665E0(v1);
    goto LABEL_11;
  }
  if (v1 != 0x8000000000000000)
  {
LABEL_11:
    uint64_t v5 = (uint64_t (*)(unint64_t))v0[1];
    unint64_t v4 = 0x8000000000000000;
    return v5(v4);
  }
  uint64_t v6 = v0[2];
  unint64_t v7 = (*(void *)v6 + 192) & 0xFFFFFFFFFFFFLL | 0xBE86000000000000;
  v0[7] = *(void *)(*(void *)v6 + 192);
  v0[8] = v7;
  return _swift_task_switch(sub_1000B8F30, v6, 0);
}

uint64_t sub_1000B8F30()
{
  (*(void (**)(uint64_t))(v0 + 56))(1);
  unint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(9);
}

uint64_t sub_1000B8F9C()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000B905C, v0, 0);
}

uint64_t sub_1000B905C()
{
  if ((*(uint64_t (**)(void))(*(void *)v0[8] + 136))())
  {
    swift_task_dealloc();
    unint64_t v1 = (uint64_t (*)(unint64_t))v0[1];
    return v1(0x8000000000000008);
  }
  else
  {
    uint64_t v3 = v0[8];
    uint64_t v4 = *(void (**)(uint64_t))(*(void *)v3 + 144);
    unint64_t v5 = (*(void *)v3 + 144) & 0xFFFFFFFFFFFFLL | 0xE4D0000000000000;
    v0[12] = v4;
    v0[13] = v5;
    v4(1);
    uint64_t v6 = OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_deps;
    v0[14] = OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_deps;
    unint64_t v7 = (void *)(v3 + v6);
    uint64_t v8 = v7[3];
    uint64_t v9 = v7[4];
    sub_10002BCF8(v7, v8);
    uint64_t v10 = v7[3];
    uint64_t v11 = v7[4];
    sub_10002BCF8(v7, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
    v0[15] = v12;
    uint64_t v14 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 104) + **(int **)(v9 + 104));
    uint64_t v13 = (void *)swift_task_alloc();
    v0[16] = v13;
    void *v13 = v0;
    v13[1] = sub_1000B9278;
    return v14(v0 + 2, v12, v8, v9);
  }
}

uint64_t sub_1000B9278()
{
  unint64_t v1 = *(void **)(*(void *)v0 + 120);
  uint64_t v2 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();

  return _swift_task_switch(sub_1000B93A0, v2, 0);
}

uint64_t sub_1000B93A0()
{
  unint64_t v1 = (void *)(v0[8] + v0[14]);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10002BCF8(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  v0[17] = v4;
  unint64_t v7 = (uint64_t (*)(void *))(*(void *)(*(void *)v4 + 352) + **(int **)(*(void *)v4 + 352));
  unint64_t v5 = (void *)swift_task_alloc();
  v0[18] = v5;
  *unint64_t v5 = v0;
  v5[1] = sub_1000B94F8;
  return v7(v0 + 2);
}

uint64_t sub_1000B94F8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_1000B9878;
  }
  else {
    uint64_t v4 = sub_1000B9640;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000B9640()
{
  uint64_t v1 = *(void *)(v0 + 64);
  (*(void (**)(void))(v0 + 96))(0);
  sub_100028A4C(v0 + 16);
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)(v1
                                                   + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_readyEnough)
                                     + 168)
                         + **(int **)(**(void **)(v1
                                                  + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_readyEnough)
                                    + 168));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000B9764;
  return v4();
}

uint64_t sub_1000B9764()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(unint64_t))(v3 + 8);
  return v1(0x8000000000000000);
}

uint64_t sub_1000B9878()
{
  uint64_t v1 = (void (*)(void))v0[12];
  sub_100028A4C((uint64_t)(v0 + 2));
  v1(0);
  Logger.init()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "load config threw error: %@", v4, 0xCu);
    sub_100020378(&qword_1001590C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[19];
  uint64_t v9 = v0[10];
  uint64_t v8 = v0[11];
  uint64_t v10 = v0[9];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  type metadata accessor for ReachabilityTracker(0);
  uint64_t v11 = (void *)_convertErrorToNSError(_:)();
  sub_100025484(v11);
  char v13 = v12;

  if (v13) {
    uint64_t v14 = v7;
  }
  else {
    uint64_t v14 = v7 | 0x4000000000000000;
  }
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
  return v15(v14);
}

uint64_t sub_1000B9AA8()
{
  swift_bridgeObjectRelease();
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_priority, &qword_100157030);
  sub_100028A4C(v0 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_deps);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000B9B08()
{
  swift_bridgeObjectRelease();
  sub_100028C8C(v0 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_priority, &qword_100157030);
  sub_100028A4C(v0 + OBJC_IVAR____TtC15swtransparencyd25InitialLoadPublicKeyState_deps);
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000B9B78(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 168) + **(int **)(*(void *)v1 + 168));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100091E94;
  return v6(a1);
}

uint64_t sub_1000B9C7C(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 176) + **(int **)(*(void *)v1 + 176));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100091E94;
  return v6(a1);
}

uint64_t sub_1000B9D80()
{
  return 7;
}

uint64_t sub_1000B9D88@<X0>(uint64_t a1@<X8>)
{
  return sub_100029208(v1 + OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_priority, a1, &qword_100157030);
}

uint64_t sub_1000B9DB8@<X0>(uint64_t a1@<X8>)
{
  return sub_10003863C(v1 + OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_deps, a1);
}

uint64_t sub_1000B9DE0(long long *a1)
{
  return sub_1000BC4DC(a1, 7, &OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_priority, &OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_deps);
}

uint64_t sub_1000B9DF8(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v4 = type metadata accessor for Logger();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  unint64_t v5 = (*(void *)a1 + 192) & 0xFFFFFFFFFFFFLL | 0xBE86000000000000;
  v2[13] = *(void *)(*(void *)a1 + 192);
  v2[14] = v5;
  return _swift_task_switch(sub_1000B9ED8, a1, 0);
}

uint64_t sub_1000B9ED8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t))(v0 + 104))(1);
  return _swift_task_switch(sub_1000B9F48, v1, 0);
}

uint64_t sub_1000B9F48()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_deps;
  v0[15] = OBJC_IVAR____TtC15swtransparencyd20ReloadPublicKeyState_deps;
  uint64_t v3 = (void *)(v1 + v2);
  uint64_t v4 = *(void *)(v1 + v2 + 24);
  uint64_t v5 = *(void *)(v1 + v2 + 32);
  sub_10002BCF8((void *)(v1 + v2), v4);
  uint64_t v6 = v3[3];
  uint64_t v7 = v3[4];
  sub_10002BCF8(v3, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
  v0[16] = v8;
  uint64_t v11 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 104) + **(int **)(v5 + 104));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[17] = v9;
  void *v9 = v0;
  v9[1] = sub_1000BA0BC;
  return v11(v0 + 2, v8, v4, v5);
}