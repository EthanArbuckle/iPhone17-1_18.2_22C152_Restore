uint64_t sub_100003DF4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;

  sub_1000094A8();
  sub_100017D58();
  v3 = v2;
  sub_10000935C();
  *v4 = v3;
  v5 = *v1;
  sub_100015EE4();
  *v6 = v5;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v7 = *(void *)(v3 + 104);
    v8 = sub_10006C4F0;
  }
  else
  {
    v9 = *(void *)(v3 + 104);
    swift_release();
    v8 = sub_10006C0C4;
    v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100003EE8()
{
  sub_1000113BC();
  sub_100011390();
  sub_10000E860();
  swift_endAccess();
  swift_bridgeObjectRelease();
  v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100003F68()
{
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x7473696C702ELL;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  URL.appendingPathComponent(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100003FF0(uint64_t a1, int *a2)
{
  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000081E8;
  return v6(a1);
}

void sub_1000040CC()
{
  sub_1000113BC();
  *(unsigned char *)(*(void *)(v0 + 104) + OBJC_IVAR____TtC13rtcreportingd7Session_receivedEnd) = 1;
  uint64_t v1 = qword_1000AF3A0;
  *(void *)(v0 + 152) = qword_1000AF3A0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 104);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = *(void *)(v2 + 120);
    v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v5;
    void *v5 = v0;
    v5[1] = sub_100003DF4;
    char v6 = *(unsigned char *)(v0 + 184);
    sub_100042958(v3, v4, v6);
  }
  else
  {
    __break(1u);
  }
}

void *sub_1000041AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRelease();
  if (v5)
  {
    sub_10005B7E8(a2, a3);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

uint64_t sub_100004218(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v7 = v4;
  swift_bridgeObjectRetain();
  sub_100014BA8();
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v7;
    uint64_t v11 = *v7;
    *uint64_t v7 = 0x8000000000000000;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_100016CE0(a3);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    a4(0);
    sub_10000948C();
    sub_100013418();
    _NativeDictionary._delete(at:)();
    *uint64_t v7 = v19;
    swift_bridgeObjectRelease();
    sub_10001AA68();
  }
  else
  {
    a4(0);
    sub_10001A580();
  }
  sub_1000144F4();
  return _s10RTCUtility9XPCObjectOwst_0(v13, v14, v15, v16);
}

uint64_t sub_100004380()
{
  sub_1000113BC();
  uint64_t v1 = v0[14];
  uint64_t v3 = *(void *)(v1 + 192);
  unint64_t v2 = *(void *)(v1 + 200);
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000182FC(v3, v2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  v0[17] = v6;
  if (v6)
  {
    uint64_t v7 = v0[16];
    v0[18] = v4;
    uint64_t v8 = *(void *)(v7 + 128);
    v0[19] = v8;
    char v9 = sub_10001C670;
  }
  else
  {
    uint64_t v10 = v0[15];
    swift_release();
    char v9 = sub_100060844;
    uint64_t v8 = v10;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100004444()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *unint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100009368();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10000453C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *unint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100009368();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100004634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v9 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v9;
  *char v9 = v6;
  v9[1] = sub_10001B7E0;
  return sub_10000B464(a5, a6);
}

uint64_t sub_1000046E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = swift_retain();
  uint64_t v5 = sub_1000055D8(v4, 0);
  if (v6)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 16), 1);
    uint64_t v9 = sub_100016CE0(&qword_1000A7608);
    *a2 = v7;
    a2[1] = v8;
    Date.init(timeIntervalSince1970:)();
    return _s10RTCUtility9XPCObjectOwst_0((uint64_t)a2, 0, 1, v9);
  }
  else
  {
    sub_10001E318();
    swift_allocError();
    *uint64_t v11 = 0;
    return swift_willThrow();
  }
}

void sub_1000047AC()
{
  sub_1000112F8();
  if (v6)
  {
    sub_100019B40();
    if (v8 != v9)
    {
      sub_100017B9C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000199C4();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_100016CE0(v5);
    uint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 32);
  }
  else
  {
    uint64_t v12 = &_swiftEmptyArrayStorage;
  }
  uint64_t v14 = v12 + 4;
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    sub_100014C38();
  }
  else
  {
    v1(0, v10, v14, v0);
  }
}

uint64_t sub_100004888(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 224) = v2;
  swift_task_dealloc();
  swift_release();
  if (v2)
  {
    sub_100009758(v6 + 16);
    sub_100009758(v6 + 32);
    sub_100009758(v6 + 48);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_100021260;
  }
  else
  {
    *(void *)(v6 + 232) = a2;
    *(void *)(v6 + 240) = a1;
    uint64_t v7 = sub_1000095F4;
  }
  return _swift_task_switch(v7, 0, 0);
}

void sub_100004A00()
{
  uint64_t v1 = qword_1000AF3A0;
  v0[21] = qword_1000AF3A0;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[22] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10000619C;
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[9];
    sub_100043DA8(v3, v4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100004AB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100004BB0(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(result + OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID);
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_1000399D8();
    char v8 = sub_10003B084(v16, v5, v4);
    if (*v7)
    {
      uint64_t v9 = v7;
      swift_retain();
      uint64_t result = sub_10003D840(v9, v3);
      uint64_t v10 = *(void *)(*v9 + 16);
      if (v10 < result) {
        goto LABEL_11;
      }
      sub_10003FF04(result, v10);
      ((void (*)(void *, void))v8)(v16, 0);
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(unsigned char *, void))v6)(v17, 0);
    }
    else
    {
      ((void (*)(void *, void))v8)(v16, 0);
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(unsigned char *, void))v6)(v17, 0);
    }
  }
  if (*(unsigned char *)(v3 + 240) != 2)
  {
LABEL_9:
    uint64_t v14 = *(void *)(v3 + 192);
    unint64_t v15 = *(void *)(v3 + 200);
    swift_bridgeObjectRetain();
    sub_10000A630(v14, v15, 1);
    return swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(void *)(v2 + 152);
  BOOL v12 = __OFSUB__(v11, 1);
  uint64_t v13 = v11 - 1;
  if (!v12)
  {
    *(void *)(v2 + 152) = v13;
    goto LABEL_9;
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100004D40(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      if (a2 <= 14)
      {
        return Data.InlineData.init(_:)();
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        __DataStorage.init(bytes:length:)();
        if ((unint64_t)a2 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0;
          *(void *)(result + 24) = a2;
        }
        else
        {
          return a2 << 32;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100004E00()
{
  sub_1000094A8();
  *(void *)(v1 + 104) = v2;
  *(void *)(v1 + 112) = v0;
  *(unsigned char *)(v1 + 176) = v3;
  *(void *)(v1 + 96) = v4;
  sub_100016384();
  *(void *)(v1 + 120) = v5;
  uint64_t v6 = sub_100016CE0(&qword_1000A7EE0);
  sub_100009374(v6);
  *(void *)(v1 + 128) = sub_10000E8B8();
  *(void *)(v1 + 136) = swift_task_alloc();
  sub_10000E934();
  return _swift_task_switch(v7, v8, v9);
}

void sub_100004E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (v22[9])
  {
    uint64_t v25 = *(void *)(v22[7] + 112);
    v22[10] = v25;
    if (v25)
    {
      swift_retain();
      v26 = (void *)swift_task_alloc();
      v22[11] = v26;
      void *v26 = v22;
      v26[1] = sub_100004444;
      sub_100016650();
      sub_100004E00();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1000A5FE0 != -1) {
      swift_once();
    }
    uint64_t v28 = v22[5];
    uint64_t v29 = type metadata accessor for Logger();
    sub_100012884(v29, (uint64_t)qword_1000A6AE0);
    swift_bridgeObjectRetain_n();
    sub_10001A540();
    v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    BOOL v32 = sub_10000E918(v31);
    uint64_t v33 = v22[7];
    unint64_t v34 = v22[5];
    if (v32)
    {
      a9 = v22[4];
      uint64_t v35 = sub_1000141D0();
      a10 = sub_1000152A0();
      a11 = a10;
      *(_DWORD *)uint64_t v35 = 136446466;
      swift_bridgeObjectRetain();
      v22[2] = sub_10001227C(a9, v34, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v35 + 12) = 2082;
      uint64_t v36 = *(void *)(v33 + 128);
      unint64_t v37 = *(void *)(v33 + 136);
      swift_bridgeObjectRetain();
      v22[3] = sub_10001227C(v36, v37, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v28, "invalid session id %{public}s from %{public}s", (uint8_t *)v35, 0x16u);
      sub_10000E848();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }

    sub_10000E83C();
    sub_100016650();
    v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_100005144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100013FC4();
  sub_100007DB0();
  sub_100017D58();
  uint64_t v17 = v16;
  sub_10000935C();
  void *v18 = v17;
  uint64_t v19 = *v15;
  sub_100015EE4();
  void *v20 = v19;
  swift_task_dealloc();
  if (v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v17[54];
    type metadata accessor for Date();
    sub_10000948C();
    sub_100014474();
    v22();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_defaultActor_destroy();
    swift_release();
    sub_1000173F0(v21, &qword_1000A8490);
    sub_10000E994();
    swift_deallocPartialClassInstance();
    sub_10001A42C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    sub_100016650();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, v14, a11, a12, a13, a14);
  }
  else
  {
    memcpy((void *)(v17[55] + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider), v17 + 2, 0x60uLL);
    sub_10000E934();
    sub_100016650();
    return _swift_task_switch(v32, v33, v34);
  }
}

uint64_t sub_1000053E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000054E0()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100009368();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000055D8(uint64_t result, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (sqlite3_column_text(*(sqlite3_stmt **)(result + 16), a2))
  {
    uint64_t v2 = String.init(cString:)();
    swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
  return v2;
}

void sub_10000565C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_100019B40();
    if (v8 != v9)
    {
      sub_100017B9C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000199C4();
    }
  }
  sub_1000167F4();
  if (v5)
  {
    sub_100016CE0(&qword_1000A64E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    sub_1000164E4(v11);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_100070E70((char *)(a4 + 32), v4, v10 + 32);
    sub_100014C38();
  }
  else
  {
    uint64_t v12 = sub_100017044();
    sub_1000053E0(v12, v13, v14, v15);
  }
}

void sub_10000571C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100017DA8(a1, a2, a3, a4, a5);
  if (v7) {
    __break(1u);
  }
  else {
    sub_100007E10(v5, v6);
  }
}

uint64_t sub_100005734()
{
  sub_1000094A8();
  sub_100017D58();
  sub_10000935C();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10000935C();
  void *v4 = v3;
  *(unsigned char *)(v6 + 59) = v5;
  swift_task_dealloc();
  sub_10000E934();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100005818()
{
  sub_1000113BC();
  uint64_t v2 = *v1;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 280) = v7;
  *(void *)(v8 + 288) = v0;
  swift_task_dealloc();
  uint64_t v9 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v10 = sub_10003AEB0;
  }
  else {
    uint64_t v10 = sub_10001C9C4;
  }
  return _swift_task_switch(v10, v9, 0);
}

uint64_t sub_100005940()
{
  sub_1000113BC();
  sub_100009448();
  uint64_t v2 = sub_100014238();
  if (v0)
  {
    *(void *)(v1 + 48) = v0;
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v4 = sub_10004299C;
  }
  else
  {
    sub_100005FE8(v2, *(unsigned char *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
    swift_release();
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v4 = sub_10001B4E4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000059F4()
{
  sub_1000113BC();
  sub_100009448();
  sub_100014238();
  if (v0)
  {
    sub_100015F80();
  }
  else
  {
    sub_100005B70(*(long long **)(v1 + 24), *(uint64_t **)(v1 + 16));
    swift_release();
    sub_100013FE0();
  }
  return v2();
}

uint64_t sub_100005A88()
{
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 152);
  *(_OWORD *)&v2[9] = *(_OWORD *)(v0 + 161);
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v4 = *(_OWORD *)&v2[8];
  sub_100005B44((uint64_t)&v3);
  sub_100005B44((uint64_t)&v3 + 8);
  sub_100019B14((uint64_t)&v4);
  sub_10000BDE4();
  sub_100005B18((uint64_t)&v3);
  sub_100005B18((uint64_t)&v3 + 8);
  sub_100009758((uint64_t)&v4);
  return sub_1000129A0();
}

uint64_t sub_100005B18(uint64_t a1)
{
  return a1;
}

uint64_t sub_100005B44(uint64_t a1)
{
  return a1;
}

uint64_t sub_100005B70@<X0>(long long *a1@<X1>, uint64_t *a2@<X8>)
{
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  long long v7 = a1[1];
  long long v12 = *a1;
  long long v6 = v12;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_10009E600;
  *(_OWORD *)(inited + 16) = xmmword_100085330;
  *(_OWORD *)(inited + 32) = v6;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_10009E600;
  *(_OWORD *)(inited + 72) = v7;
  long long v10 = a1[2];
  long long v8 = v10;
  long long v11 = v7;
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &off_10009E600;
  *(_OWORD *)(inited + 112) = v8;
  sub_100019B14((uint64_t)&v12);
  sub_100019B14((uint64_t)&v11);
  sub_100019B14((uint64_t)&v10);
  sub_10000F264(inited);
  swift_setDeallocating();
  if (v2) {
    return sub_10000F200();
  }
  sub_10000F200();
  return sub_10000F8A8(a2);
}

void sub_100005D04()
{
  sub_100014E08();
  uint64_t v1 = type metadata accessor for URL();
  sub_100014C1C();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100016910();
  uint64_t v5 = sub_100016CE0((uint64_t *)&unk_1000A8A60);
  uint64_t v6 = sub_100009374(v5);
  __chkstk_darwin(v6);
  sub_10001615C();
  uint64_t v9 = v8 - v7;
  sub_100008498();
  uint64_t v10 = type metadata accessor for CachedStorebag(0);
  int v11 = _s10RTCUtility9XPCObjectOwet_0(v9, 1, v10);
  sub_100007D3C(v9, (uint64_t *)&unk_1000A8A60);
  if (v11 == 1)
  {
    sub_100003F68();
    URL.checkResourceIsReachable()();
    if (v12) {
      swift_errorRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  }
  sub_10001A650();
}

uint64_t sub_100005E54()
{
  uint64_t v1 = v0[10];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 152);
  if (*(void *)(v2 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v3 = sub_100014BA8();
    if (v4)
    {
      uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
      return v6(v5);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_endAccess();
  uint64_t v8 = qword_1000AF3B0;
  v0[11] = qword_1000AF3B0;
  if (!v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!*(void *)(v0[10] + 112))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  swift_retain();
  swift_retain();
  XPCConnection.remoteUID.getter();
  swift_release();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[12] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100031A28;
  return sub_10003B75C();
}

uint64_t sub_100005FE8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084CA0;
  *(void *)(inited + 56) = &type metadata for Int64;
  *(void *)(inited + 64) = &off_10009E5C0;
  *(void *)(inited + 32) = a2 & 1;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_10009E600;
  *(void *)(inited + 72) = a3;
  *(void *)(inited + 80) = a4;
  swift_bridgeObjectRetain();
  sub_10000F264(inited);
  if (v4)
  {
    swift_setDeallocating();
    return sub_10000F200();
  }
  else
  {
    swift_setDeallocating();
    sub_10000F200();
    do
    {
      uint64_t v10 = sub_10000F9A8();
      uint64_t result = swift_release();
    }
    while (v10);
  }
  return result;
}

uint64_t sub_1000060EC(uint64_t a1)
{
  unint64_t v3 = *(int **)(v1 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100015EF4(v4);
  void *v5 = v6;
  v5[1] = sub_10000D9FC;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000A6C00 + dword_1000A6C00);
  return v7(a1, v3);
}

uint64_t sub_10000619C()
{
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = sub_100049004;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 80);
    swift_release();
    uint64_t v8 = sub_1000076D4;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100006298()
{
  sub_100012970();
  unint64_t v2 = sub_100014BA8();
  char v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0;
  }
  swift_isUniquelyReferenced_nonNull_native();
  sub_100009544();
  int v5 = sub_100016CE0((uint64_t *)&unk_1000A7880);
  sub_100016308(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  sub_10001A600();
  uint64_t v13 = *(void *)(*(void *)(v1 + 56) + 8 * v2);
  type metadata accessor for Session(0);
  _NativeDictionary._delete(at:)();
  *uint64_t v0 = v1;
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_10000635C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100013FC4();
  sub_100007DB0();
  sub_100016748();
  uint64_t v18 = v17;
  sub_100015EE4();
  *uint64_t v19 = v18;
  uint64_t v20 = *v16;
  *uint64_t v19 = *v16;
  swift_task_dealloc();
  uint64_t v21 = *(void *)(v15 + 440);
  if (v14)
  {
    swift_release();
    swift_release();
    sub_1000173F0(*(void *)(v18 + 432), &qword_1000A8490);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100016650();
    return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14);
  }
  uint64_t v31 = *(void *)(v21 + 144);
  uint64_t v32 = *(void *)(v21 + 168);
  long long v33 = *(_OWORD *)(v18 + 137);
  long long v34 = *(_OWORD *)(v18 + 128);
  *(_OWORD *)(v21 + 136) = *(_OWORD *)(v18 + 112);
  *(_OWORD *)(v21 + 152) = v34;
  *(_OWORD *)(v21 + 161) = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v35 = *(void *)(v21 + 136);
  *(void *)(v18 + 600) = v35;
  char v36 = *(unsigned char *)(v21 + 152);
  if (!*(void *)(v35 + 16) && (*(unsigned char *)(v21 + 152) & 1) == 0)
  {
    uint64_t v31 = *(void *)(v18 + 432);
    goto LABEL_8;
  }
  uint64_t v45 = *(void *)(v18 + 440);
  uint64_t v46 = *(void *)(v45 + 144);
  *(void *)(v18 + 608) = v46;
  if (*(void *)(v46 + 16))
  {
    uint64_t v47 = qword_1000AF3B8;
    *(void *)(v18 + 616) = qword_1000AF3B8;
    if (v47)
    {
      uint64_t v48 = *(void *)(v45 + 160);
      uint64_t v49 = *(void *)(v45 + 168);
      *(void *)(v18 + 624) = v49;
      char v50 = *(unsigned char *)(v45 + 176);
      *(void *)(v18 + 240) = v35;
      *(void *)(v18 + 248) = v46;
      *(unsigned char *)(v18 + 256) = v36;
      *(void *)(v18 + 264) = v48;
      *(void *)(v18 + 272) = v49;
      *(unsigned char *)(v18 + 280) = v50;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v51 = (void *)swift_task_alloc();
      *(void *)(v18 + 632) = v51;
      void *v51 = v20;
      v51[1] = sub_10006D320;
      sub_10001A528(v18 + 240);
      goto LABEL_17;
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (*(unsigned char *)(v45 + 240) == 1)
  {
    uint64_t v52 = qword_1000AF3B8;
    *(void *)(v18 + 640) = qword_1000AF3B8;
    if (v52)
    {
      sub_100072C28(v45);
      sub_100072E8C();
      sub_100005B44(v18 + 416);
      sub_100005B44(v46);
      sub_100019B14(v32);
      v53 = (void *)swift_task_alloc();
      *(void *)(v18 + 648) = v53;
      void *v53 = v20;
      v53[1] = sub_10006D79C;
      sub_10001AB08();
LABEL_17:
      sub_100016650();
      return v39(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14);
    }
    goto LABEL_27;
  }
  uint64_t result = sub_10000E8D4();
  if (!v54)
  {
LABEL_8:
    sub_100072EAC();
    sub_1000173F0(v31, &qword_1000A8490);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100016650();
    return v39(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14);
  }
  uint64_t v55 = qword_1000AF3A0;
  *(void *)(v18 + 656) = qword_1000AF3A0;
  if (v55)
  {
    sub_10001A218();
    v56 = (void *)swift_task_alloc();
    *(void *)(v18 + 664) = v56;
    void *v56 = v20;
    v56[1] = sub_10000A020;
    sub_10001A528(*(void *)(v18 + 440));
    sub_100016650();
    return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14);
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100006860()
{
  sqlite3_finalize(*(sqlite3_stmt **)(v0 + 16));

  return _swift_deallocClassInstance(v0, 25, 7);
}

uint64_t sub_100006898(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  sub_1000142C8();
  if ((v9 & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = *(void *)(v5 + 48);
  int v11 = (void *)(v10 + 16 * v8);
  BOOL v12 = *v11 == a1 && v11[1] == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v16 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v16;
      sub_1000142C8();
      if ((v17 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v18 = (void *)(v10 + 16 * v8);
      BOOL v19 = *v18 == a1 && v18[1] == a2;
    }
    while (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  swift_isUniquelyReferenced_nonNull_native();
  sub_100017504();
  if (!v14)
  {
    sub_10005CD90();
    uint64_t v13 = v21;
  }
  uint64_t v15 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_100007518(v8);
  *unint64_t v2 = v21;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_100006A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 144);
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 && (unint64_t v7 = sub_100014BA8(), (v8 & 1) != 0))
  {
    char v9 = *(void **)(*(void *)(v5 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    char v9 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v9[2];
  if (!v10)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  if (v9[4] != a3)
  {
    int v11 = (char *)(v9 + 5);
    while (--v10)
    {
      uint64_t v12 = *((void *)v11 + 2);
      v11 += 24;
      if (v12 == a3) {
        goto LABEL_10;
      }
    }
    goto LABEL_11;
  }
LABEL_10:
  swift_bridgeObjectRetain();
LABEL_12:
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t sub_100006B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = a3;
  *(void *)(v4 + 88) = a4;
  *(void *)(v4 + 64) = a1;
  *(void *)(v4 + 72) = a2;
  *(_OWORD *)(v4 + 96) = *(_OWORD *)a2;
  *(void *)(v4 + 112) = *(void *)(a2 + 16);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 24);
  *(void *)(v4 + 136) = *(void *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Date();
  *(void *)(v4 + 144) = v5;
  sub_10001130C(v5);
  *(void *)(v4 + 152) = v6;
  *(void *)(v4 + 160) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for TimeZone();
  *(void *)(v4 + 168) = v7;
  sub_10001130C(v7);
  *(void *)(v4 + 176) = v8;
  *(void *)(v4 + 184) = swift_task_alloc();
  return _swift_task_switch(sub_100007324, 0, 0);
}

uint64_t sub_100006C24(char a1, uint64_t a2, uint64_t a3)
{
  sub_100016CE0(&qword_1000A6748);
  sub_100016CE0(&qword_1000A6750);
  sub_10001A880();
  uint64_t v8 = *(void *)(v7 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100084CA0;
  uint64_t v12 = (void *)(v11 + v10);
  uint64_t v13 = (void *)(v11 + v10 + *(int *)(v3 + 56));
  *uint64_t v12 = 0x67616265726F7453;
  v12[1] = 0xEF6E6F6973726556;
  *uint64_t v13 = a2;
  v13[1] = a3;
  type metadata accessor for EventValue();
  sub_100014C50();
  int v14 = (unsigned char *)sub_10001616C((uint64_t)v12 + v8);
  *uint64_t v15 = 0xD000000000000013;
  v15[1] = 0x80000001000887A0;
  *int v14 = a1;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100006D74(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_100014268();
  a4(a1, a2, a3);
  void *v4 = v10;

  return swift_bridgeObjectRelease();
}

uint64_t sub_100006DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = getTimeIntervalSince1970(Date:)();
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100087A40;
  uint64_t v8 = *(void *)(a2 + 112);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_10009E600;
  *(void *)(inited + 32) = v8;
  *(void *)(inited + 40) = v7;
  uint64_t v9 = *(unsigned __int8 *)(a2 + 240);
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 104) = &off_10009E5A0;
  *(void *)(inited + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 192);
  uint64_t v11 = *(void *)(a2 + 200);
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &off_10009E600;
  *(void *)(inited + 112) = v10;
  *(void *)(inited + 120) = v11;
  uint64_t v12 = *(void *)(a2 + 208);
  uint64_t v13 = *(void *)(a2 + 216);
  *(void *)(inited + 176) = &type metadata for String;
  *(void *)(inited + 184) = &off_10009E600;
  *(void *)(inited + 152) = v12;
  *(void *)(inited + 160) = v13;
  uint64_t v14 = *(void *)(a2 + 224);
  uint64_t v15 = *(void *)(a2 + 232);
  *(void *)(inited + 216) = &type metadata for String;
  *(void *)(inited + 224) = &off_10009E600;
  *(void *)(inited + 192) = v14;
  *(void *)(inited + 200) = v15;
  uint64_t v16 = *(void *)(a2 + 128);
  *(void *)(inited + 256) = &type metadata for Double;
  *(void *)(inited + 264) = &off_10009E5E0;
  *(void *)(inited + 232) = v16;
  *(void *)(inited + 296) = &type metadata for Int64;
  *(void *)(inited + 304) = &off_10009E5C0;
  *(void *)(inited + 272) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000F264(inited);
  if (v3)
  {
    swift_setDeallocating();
    return sub_10000F200();
  }
  else
  {
    swift_setDeallocating();
    sub_10000F200();
    do
    {
      uint64_t v18 = sub_10000F9A8();
      uint64_t result = swift_release();
    }
    while (v18);
  }
  return result;
}

uint64_t sub_100006F80(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v2 = type metadata accessor for NWPath.Status();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = type metadata accessor for NWPath();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v21 - v14;
  NWPathMonitor.currentPath.getter();
  NWPath.status.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for NWPath.Status.unsatisfied(_:), v2);
  char v16 = static NWPath.Status.== infix(_:_:)();
  char v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  v17(v8, v2);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  if (v16)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
    v18(v13, v9);
LABEL_4:
    char v22 = 0;
    sub_100016CE0(&qword_1000A6D58);
    CheckedContinuation.resume(returning:)();
    return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
  }
  char v19 = NWPath.isConstrained.getter();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  if (v19) {
    goto LABEL_4;
  }
  if (NWPath.isExpensive.getter()) {
    char v23 = 1;
  }
  else {
    char v24 = 2;
  }
  sub_100016CE0(&qword_1000A6D58);
  CheckedContinuation.resume(returning:)();
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
}

uint64_t sub_100007284()
{
  sub_1000094A8();
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 104));
  if (reply)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(v0 + 96) + 16), reply);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v2();
}

uint64_t sub_100007324()
{
  uint64_t v1 = *(_OWORD **)(v0 + 72);
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v1[1];
  *(_OWORD *)(v0 + 48) = v1[2];
  sub_100019B14(v0 + 16);
  sub_100019B14(v0 + 32);
  sub_100019B14(v0 + 48);
  uint64_t v2 = qword_1000A6080;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 == 1)
  {
    if (qword_1000A6098 != -1) {
      swift_once();
    }
    uint64_t v3 = 5;
    if (!byte_1000AF3D9) {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *(void *)(v0 + 192) = v3;
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 152);
  static TimeZone.current.getter();
  Date.init()();
  *(void *)(v0 + 200) = TimeZone.secondsFromGMT(for:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v11 = qword_1000AF3B8;
  *(void *)(v0 + 208) = qword_1000AF3B8;
  if (v11)
  {
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100004888;
    uint64_t v13 = *(void *)(v0 + 72);
    return sub_100008030(v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100007518(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            uint64_t v15 = (_OWORD *)(v14 + 16 * v2);
            char v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *uint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000076D4()
{
  uint64_t v42 = v0;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = sub_100016CE0(&qword_1000A7608);
  if (_s10RTCUtility9XPCObjectOwet_0(v1, 1, v2) == 1)
  {
    sub_10001F87C(v1);
    UUID.init()();
    uint64_t v3 = UUID.uuidString.getter();
    uint64_t v5 = v4;
    *(void *)(v0 + 248) = v4;
    uint64_t v6 = sub_100015FD0();
    uint64_t result = v7(v6);
    uint64_t v9 = qword_1000AF3A0;
    *(void *)(v0 + 256) = qword_1000AF3A0;
    if (v9)
    {
      uint64_t v10 = *(void *)(v0 + 152);
      uint64_t v11 = *(void *)(v0 + 128);
      uint64_t v12 = *(void *)(v0 + 120);
      *(void *)(v0 + 264) = v3;
      swift_retain();
      swift_bridgeObjectRetain();
      static Date.now.getter();
      Date.addingTimeInterval(_:)();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      *(void *)(v0 + 272) = v13;
      *(void *)(v0 + 280) = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v13(v10, v12);
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 288) = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_100048DEC;
      uint64_t v15 = *(void *)(v0 + 136);
LABEL_15:
      uint64_t v38 = *(void *)(v0 + 72);
      return sub_100043DE8(v38, v3, v5, v15);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 120);
  uint64_t v18 = *(void *)(v0 + 128);
  (*(void (**)(void, uint64_t, uint64_t))(v18 + 32))(*(void *)(v0 + 160), v1 + *(int *)(v2 + 48), v17);
  static Date.now.getter();
  char v19 = static Date.< infix(_:_:)();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  *(void *)(v0 + 192) = v20;
  *(void *)(v0 + 200) = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v16, v17);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (qword_1000A6018 != -1) {
      swift_once();
    }
    char v23 = *(_OWORD **)(v0 + 72);
    uint64_t v24 = type metadata accessor for Logger();
    sub_100012884(v24, (uint64_t)qword_1000AF300);
    *(_OWORD *)(v0 + 16) = *v23;
    *(_OWORD *)(v0 + 32) = v23[1];
    *(_OWORD *)(v0 + 48) = v23[2];
    sub_100019B14(v0 + 16);
    sub_100019B14(v0 + 32);
    sub_100019B14(v0 + 48);
    sub_100019B14(v0 + 16);
    sub_100019B14(v0 + 32);
    sub_100019B14(v0 + 48);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      log = v25;
      os_log_type_t type = v26;
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446210;
      sub_100019B14(v0 + 16);
      sub_100019B14(v0 + 32);
      sub_100019B14(v0 + 48);
      uint64_t v28 = sub_100012C5C();
      unint64_t v30 = v29;
      sub_100009758(v0 + 16);
      sub_100009758(v0 + 32);
      sub_100009758(v0 + 48);
      *(void *)(v0 + 64) = sub_10001227C(v28, v30, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100009758(v0 + 16);
      sub_100009758(v0 + 32);
      sub_100009758(v0 + 48);
      sub_100009758(v0 + 16);
      sub_100009758(v0 + 32);
      sub_100009758(v0 + 48);
      uint64_t v25 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "CID expired for %{public}s, refreshing", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100009758(v0 + 16);
      sub_100009758(v0 + 32);
      sub_100009758(v0 + 48);
      sub_100009758(v0 + 16);
      sub_100009758(v0 + 32);
      sub_100009758(v0 + 48);
    }

    UUID.init()();
    uint64_t v3 = UUID.uuidString.getter();
    uint64_t v5 = v31;
    *(void *)(v0 + 208) = v3;
    *(void *)(v0 + 216) = v31;
    uint64_t v32 = sub_100015FD0();
    uint64_t result = v33(v32);
    uint64_t v34 = qword_1000AF3A0;
    *(void *)(v0 + 224) = qword_1000AF3A0;
    if (v34)
    {
      uint64_t v35 = *(void *)(v0 + 152);
      uint64_t v36 = *(void *)(v0 + 120);
      swift_retain();
      swift_bridgeObjectRetain();
      static Date.now.getter();
      Date.addingTimeInterval(_:)();
      v20(v35, v36);
      uint64_t v37 = (void *)swift_task_alloc();
      *(void *)(v0 + 232) = v37;
      *uint64_t v37 = v0;
      v37[1] = sub_100048B7C;
      uint64_t v15 = *(void *)(v0 + 144);
      goto LABEL_15;
    }
LABEL_19:
    __break(1u);
    return result;
  }
  v20(*(void *)(v0 + 160), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = sub_100019A54();
  return v22(v21);
}

uint64_t sub_100007C84()
{
  sub_100007DA0();
  char v6 = *(unsigned char *)(v1 + 48);
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)sub_100015EF4(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_10000D9FC;
  return sub_100004634(v0, v2, v3, v4, v5, v6);
}

uint64_t sub_100007D3C(uint64_t a1, uint64_t *a2)
{
  sub_100016CE0(a2);
  sub_10000948C();
  uint64_t v3 = sub_100007E50();
  v4(v3);
  return a1;
}

void sub_100007D88(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_100007DBC(uint64_t a1, uint64_t a2)
{
  sub_100012884(a1, a2);
  return Logger.logObject.getter();
}

uint64_t sub_100007DE4()
{
  return swift_slowAlloc();
}

void sub_100007E10(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = a2;
}

void sub_100007E18()
{
  *(void *)(v1 - 264) = v0;
}

uint64_t sub_100007E50()
{
  return v0;
}

uint64_t sub_100007E60()
{
  sub_10000E6A4();
  sub_100011540();
  sub_10000935C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10000935C();
  void *v5 = v4;
  *(void *)(v7 + 400) = v6;
  *(void *)(v7 + 408) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100009368();
  sub_100016198();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_100008030(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[11] = v3;
  sub_10001130C(v3);
  v2[12] = v4;
  v2[13] = swift_task_alloc();
  sub_100016CE0(&qword_1000A64D8);
  v2[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[15] = v5;
  sub_10001130C(v5);
  v2[16] = v6;
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_100004A00, v1, 0);
}

uint64_t sub_10000815C()
{
  sub_1000094A8();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  uint64_t v5 = type metadata accessor for String.Encoding();
  sub_100009374(v5);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10000B578, v0, 0);
}

uint64_t sub_1000081E8()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000E83C();
  return v3();
}

void sub_1000082AC()
{
  sub_100014E08();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_100016CE0((uint64_t *)&unk_1000A8A60);
  uint64_t v6 = sub_100009374(v5);
  __chkstk_darwin(v6);
  sub_100016910();
  if (qword_1000A60C8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100012884(v7, (uint64_t)qword_1000AF418);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)sub_100014490();
    uint64_t v11 = sub_1000094B4();
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain();
    sub_10001227C(v4, v2, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "evicting storebag %{public}s from cache", v10, 0xCu);
    sub_100017228();
    sub_100009474();
    sub_100009474();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_1000134C4();
  sub_10001B46C(v4, v2);
  sub_100007D3C(v0, (uint64_t *)&unk_1000A8A60);
  swift_endAccess();
  sub_10001A650();
}

void sub_100008498()
{
  sub_100014E08();
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v33 = v7;
  uint64_t v8 = type metadata accessor for Date();
  sub_100014C1C();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100013F4C();
  uint64_t v12 = sub_100016CE0((uint64_t *)&unk_1000A8A60);
  uint64_t v13 = sub_100009374(v12);
  __chkstk_darwin(v13);
  sub_100014198();
  uint64_t v32 = v14;
  sub_100013F9C();
  __chkstk_darwin(v15);
  uint64_t v16 = sub_10001A314();
  uint64_t v17 = type metadata accessor for CachedStorebag(v16);
  sub_10000948C();
  __chkstk_darwin(v18);
  sub_10001615C();
  uint64_t v21 = v20 - v19;
  char v22 = (uint64_t *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache);
  swift_beginAccess();
  uint64_t v23 = *v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001B3F8(v23, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (_s10RTCUtility9XPCObjectOwet_0(v2, 1, v17) == 1)
  {
    sub_100007D3C(v2, (uint64_t *)&unk_1000A8A60);
    uint64_t v24 = 1;
    uint64_t v25 = v33;
  }
  else
  {
    sub_10007F818(v2, v21);
    static Date.now.getter();
    char v26 = static Date.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v8);
    if (v26)
    {
      if (qword_1000A60C8 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_100012884(v27, (uint64_t)qword_1000AF418);
      swift_bridgeObjectRetain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        unint64_t v30 = (uint8_t *)sub_100014490();
        uint64_t v34 = sub_1000094B4();
        *(_DWORD *)unint64_t v30 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v31 = v6;
        sub_10001227C(v6, v4, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "removing expired storebag %{public}s from memory cache", v30, 0xCu);
        swift_arrayDestroy();
        sub_100009474();
        sub_100009474();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v31 = v6;
      }
      uint64_t v25 = v33;
      sub_1000134C4();
      sub_10001B46C(v31, v4);
      sub_100007D3C(v32, (uint64_t *)&unk_1000A8A60);
      swift_endAccess();
      sub_10007F8C4(v21, (void (*)(void))type metadata accessor for CachedStorebag);
      uint64_t v24 = 1;
    }
    else
    {
      uint64_t v25 = v33;
      sub_10007F818(v21, v33);
      uint64_t v24 = 0;
    }
  }
  _s10RTCUtility9XPCObjectOwst_0(v25, v24, 1, v17);
  sub_10001A650();
}

uint64_t sub_100008850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007ECC8);
}

uint64_t sub_100008864()
{
  sub_1000094A8();
  sub_1000088D0(*(void *)(v0 + 96), *(void *)(v0 + 104));
  swift_release();
  swift_task_dealloc();
  sub_100013FE0();
  return v1();
}

uint64_t sub_1000088D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100008928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v23;
  a22 = v24;
  sub_100007DB0();
  a20 = v22;
  uint64_t v25 = *(void *)(v22 + 104);
  if (*(unsigned char *)(v25 + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) == 1
    && (sub_10001A1F8(), !v26)
    && (uint64_t v27 = *(void *)(v25 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend),
        (*(void *)(v22 + 112) = v27) != 0))
  {
    swift_unknownObjectRetain();
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v22 + 120) = v28;
    *uint64_t v28 = v22;
    v28[1] = sub_10006BD4C;
    sub_100016650();
    return sub_10006F54C(v29, v30);
  }
  else
  {
    sub_10001A1F8();
    if (!v26) {
      sub_10001A274();
    }
    char v41 = *(unsigned char *)(v22 + 184);
    sub_100016CE0(&qword_1000A6748);
    sub_100016CE0(&qword_1000A6750);
    sub_10001A880();
    uint64_t v33 = (__n128 *)sub_10001A3C0();
    sub_100016448(v33, (__n128)xmmword_100084CA0);
    sub_10000A4CC();
    sub_100013534();
    uint64_t v34 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v35 = *(void *)(v25 + 160);
    uint64_t v36 = *(void *)(v25 + 168);
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100006C24(v41, v35, v36);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a10 = v34;
    sub_10001537C(v37, (uint64_t)sub_100017560, 0, isUniquelyReferenced_nonNull_native, &a10);
    *(void *)(v22 + 136) = a10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v39 = (void *)swift_task_alloc();
    *(void *)(v22 + 144) = v39;
    void *v39 = v22;
    v39[1] = sub_1000054E0;
    sub_10001A250();
    sub_100016650();
    return sub_10000E768();
  }
}

uint64_t sub_100008BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v7 - 8);
  uint64_t v19 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100016CE0(&qword_1000A6D58);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  v17[1] = *(void *)(a2 + 120);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v14 + v13, (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_10001C160;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001B4A0;
  aBlock[3] = &unk_10009F760;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = &_swiftEmptyArrayStorage;
  sub_10001BFE4(&qword_1000A6A40, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100016CE0(&qword_1000A6A48);
  sub_10001B1E4((unint64_t *)&unk_1000A6A50, &qword_1000A6A48);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v19);
  return swift_release();
}

uint64_t sub_100008F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_1000172D0();
  sub_10001A348();
  uint64_t v17 = *v16;
  uint64_t v18 = *v16;
  sub_100015EE4();
  *uint64_t v19 = v18;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_1000091C4();
  uint64_t v33 = *(void *)(v17 + 488);
  sub_1000091C4();
  uint64_t v34 = *(void *)(v20 + 480);
  sub_1000091C4();
  uint64_t v35 = *(void *)(v21 + 472);
  sub_1000091C4();
  uint64_t v23 = *(void *)(v22 + 432);
  swift_release();
  sub_1000173F0(v23, &qword_1000A8490);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100016868();
  return v26(v24, v25, v26, v27, v28, v29, v30, v31, a9, v33, v34, v35, a13, a14, a15, a16);
}

uint64_t sub_1000091D0()
{
  sub_100009594();
  sub_10000935C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 456) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100009368();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10000932C()
{
  return swift_allocError();
}

uint64_t sub_100009374(uint64_t a1)
{
  return a1 - 8;
}

void sub_100009394(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_1000093C0()
{
  return v0;
}

void sub_1000093D4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1 << v1;
}

uint64_t sub_1000093EC()
{
  *(_WORD *)(v1 + 12) = 2082;
  uint64_t v4 = v2[25];
  uint64_t v5 = v2[26];
  uint64_t v6 = v2[27];
  uint64_t v7 = v2[28];
  uint64_t v8 = v2[29];
  v0[2] = v2[24];
  v0[3] = v4;
  v0[4] = v5;
  v0[5] = v6;
  v0[6] = v7;
  v0[7] = v8;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100009428()
{
  return type metadata accessor for Logger();
}

uint64_t sub_100009454(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_100009474()
{
  return swift_slowDealloc();
}

uint64_t sub_1000094B4()
{
  return swift_slowAlloc();
}

uint64_t sub_1000094CC(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwst_0(v1, 1, 1, a1);
}

void sub_1000094EC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_10000950C()
{
  return 0x6E6F6973726576;
}

uint64_t sub_100009528()
{
  return swift_bridgeObjectRetain();
}

void sub_100009544()
{
  *uint64_t v0 = 0x8000000000000000;
}

unint64_t sub_100009560()
{
  return 0xD000000000000012;
}

uint64_t sub_1000095AC()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_1000095C4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 160) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_1000095F4()
{
  uint64_t v1 = *(void *)(v0 + 232);
  long long v11 = *(_OWORD *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100009758(v0 + 16);
  sub_100009758(v0 + 32);
  sub_100009758(v0 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  *(_OWORD *)uint64_t v6 = v11;
  *(void *)(v6 + 16) = v9;
  *(void *)(v6 + 24) = v5;
  *(void *)(v6 + 32) = v14;
  *(void *)(v6 + 40) = v1;
  *(void *)(v6 + 48) = v10;
  *(void *)(v6 + 56) = v4;
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = v3;
  *(void *)(v6 + 80) = v13;
  *(void *)(v6 + 88) = v2;
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100009758(uint64_t a1)
{
  return a1;
}

uint64_t sub_100009784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v23;
  a22 = v24;
  sub_100007DB0();
  a20 = v22;
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = sub_100012884(v25, (uint64_t)qword_1000A7040);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  unint64_t v30 = v22[15];
  if (v29)
  {
    a10 = v26;
    uint64_t v31 = v22[14];
    a9 = v22 + 5;
    uint64_t v32 = (_DWORD *)sub_100014490();
    a11 = sub_1000094B4();
    *uint64_t v32 = 136446210;
    swift_bridgeObjectRetain();
    v22[12] = sub_10001227C(v31, v30, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_100009394((void *)&_mh_execute_header, v27, v33, "eviction timer fired: %{public}s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v34 = v22[13];
  sub_100009368();
  swift_beginAccess();
  uint64_t v35 = *(void *)(v34 + 120);
  if (*(void *)(v35 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v36 = sub_100014BA8();
    if (v37)
    {
      uint64_t v38 = *(void *)(*(void *)(v35 + 56) + 8 * v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v38)
      {
        sub_100011390();
        sub_10000E860();
        swift_endAccess();
        swift_bridgeObjectRelease();
        sub_100016650();
        return v40(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  BOOL v50 = sub_100016884(v49);
  unint64_t v51 = v22[15];
  if (v50)
  {
    uint64_t v52 = v22[14];
    v53 = (uint8_t *)sub_100014490();
    a11 = sub_1000094B4();
    *(_DWORD *)v53 = 136446210;
    swift_bridgeObjectRetain();
    v22[11] = sub_10001227C(v52, v51, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v26, "requesting eviction for %{public}s", v53, 0xCu);
    sub_100017228();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  char v54 = (void *)swift_task_alloc();
  v22[18] = v54;
  *char v54 = v22;
  v54[1] = sub_10001C78C;
  sub_100016650();
  return sub_10001C140(v55, v56);
}

uint64_t sub_100009B48(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = (uint64_t *)(v2 + 120);
  sub_1000134C4();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v30 = *(void *)(v2 + 120);
  *(void *)(v2 + 120) = 0x8000000000000000;
  unint64_t v9 = sub_100014BA8();
  uint64_t v11 = *(void *)(v30 + 16);
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    unint64_t v14 = v9;
    char v15 = v10;
    sub_100016CE0(&qword_1000A7268);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13))
    {
      unint64_t v16 = sub_100014BA8();
      if ((v15 & 1) != (v17 & 1))
      {
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v14 = v16;
    }
    *uint64_t v7 = v30;
    swift_bridgeObjectRelease();
    uint64_t v18 = *v7;
    if ((v15 & 1) == 0)
    {
      sub_10000571C(v14, a1, a2, 0, *v7);
      swift_bridgeObjectRetain();
    }
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t v20 = *(void *)(v19 + 8 * v14);
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      *(void *)(v19 + 8 * v14) = v22;
      swift_endAccess();
      swift_bridgeObjectRelease();
      int v23 = *(unsigned __int16 *)(v4 + 128);
      int v24 = (unsigned __int16)(v23 + 1);
      BOOL v3 = v24 != v23 + 1;
      if (v24 == v23 + 1) {
        LOWORD(v23) = v23 + 1;
      }
      *(_WORD *)(v4 + 128) = v23;
      if (qword_1000A5FF0 == -1) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_20:
  swift_once();
LABEL_11:
  uint64_t v25 = type metadata accessor for Logger();
  sub_100012884(v25, (uint64_t)qword_1000A7040);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    v31[0] = sub_1000094B4();
    *(_DWORD *)uint64_t v28 = 136446722;
    swift_bridgeObjectRetain();
    sub_10001227C(a1, a2, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2048;
    if (*(void *)(*v7 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100014BA8();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v28 + 22) = 512;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "registered use for session config for %{public}s, now %lld uses. Total Active Sessions: %hu", (uint8_t *)v28, 0x1Au);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  return !v3;
}

void sub_100009F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10000E6A4();
  sub_100011540();
  if (xpc_dictionary_create_reply(*(xpc_object_t *)(v12 + 240)))
  {
    sub_100017FD0();
    if (!v14)
    {
      __break(1u);
      return;
    }
    char v15 = v13;
    unint64_t v16 = (_xpc_connection_s *)sub_10001A4C8();
    xpc_connection_send_message(v16, v15);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  sub_100019B8C();
  uint64_t v26 = v17;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100016198();
  v19(v18, v19, v20, v21, v22, v23, v24, v25, v26, a10, a11, a12);
}

uint64_t sub_10000A020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_10001A234();
  a27 = v30;
  a28 = v31;
  a26 = v29;
  sub_100017D58();
  uint64_t v33 = v32;
  sub_10000935C();
  *uint64_t v34 = v33;
  uint64_t v35 = *v29;
  sub_100015EE4();
  *unint64_t v36 = v35;
  swift_task_dealloc();
  if (v28)
  {
    swift_release();
    swift_release();
    swift_release();
    sub_1000173F0(v33[54], &qword_1000A8490);
    sub_10001A42C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    sub_100016568();
    return v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
  else
  {
    uint64_t v69 = v35;
    swift_release();
    sub_100016CE0(&qword_1000A6748);
    uint64_t v46 = (int *)(sub_100016CE0(&qword_1000A6750) - 8);
    uint64_t v47 = *(void *)(*(void *)v46 + 72);
    unint64_t v48 = (*(unsigned __int8 *)(*(void *)v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v46 + 80);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_100084CA0;
    BOOL v50 = (void *)(v49 + v48);
    unint64_t v51 = (void *)(v49 + v48 + v46[14]);
    sub_10001A204();
    *BOOL v50 = v52;
    v50[1] = 0xE700000000000000;
    void *v51 = 0;
    type metadata accessor for EventValue();
    sub_10000A4CC();
    v53 = (void *)sub_10001A2C4((uint64_t)v50 + v47);
    *char v54 = v55;
    v54[1] = 0xE700000000000000;
    void *v53 = 0;
    sub_10000A4CC();
    uint64_t v56 = Dictionary.init(dictionaryLiteral:)();
    static Locale.current.getter();
    uint64_t v57 = Locale.regionCode.getter();
    unint64_t v59 = v58;
    sub_100014474();
    v60();
    if (v59) {
      uint64_t v61 = v57;
    }
    else {
      uint64_t v61 = 16191;
    }
    if (!v59) {
      unint64_t v59 = 0xE200000000000000;
    }
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_100084C90;
    v63 = (void *)(v62 + v48);
    v64 = (uint64_t *)(v62 + v48 + v46[14]);
    void *v63 = 0x656C61636F4CLL;
    v63[1] = 0xE600000000000000;
    uint64_t *v64 = v61;
    v64[1] = v59;
    swift_storeEnumTagMultiPayload();
    uint64_t v65 = Dictionary.init(dictionaryLiteral:)();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a15 = v56;
    sub_10001537C(v65, (uint64_t)sub_100017560, 0, isUniquelyReferenced_nonNull_native, &a15);
    v33[84] = a15;
    swift_bridgeObjectRelease();
    v67 = (void *)swift_task_alloc();
    v33[85] = (uint64_t)v67;
    void *v67 = v69;
    v67[1] = sub_100008F3C;
    sub_100016568();
    return sub_10000E768();
  }
}

uint64_t sub_10000A470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  return sub_10001227C(v8, v9, (uint64_t *)va);
}

uint64_t sub_10000A48C@<X0>(uint64_t a1@<X8>)
{
  *uint64_t v2 = a1;
  v2[1] = v1;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10000A4AC(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v2;
  a1[5] = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000A4CC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10000A4E4()
{
  return type metadata accessor for Logger();
}

uint64_t sub_10000A4FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_10000948C();
  sub_100014474();
  v1();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

void sub_10000A630(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  sub_100016384();
  uint64_t v9 = v8;
  uint64_t v10 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  uint64_t v11 = sub_100009374(v10);
  __chkstk_darwin(v11);
  Swift::Int v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v3 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_10001B36C(a1, a2, v14);
  char v17 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17)
  {
    if (qword_1000A5FF0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100012884(v26, (uint64_t)qword_1000A7040);
    swift_bridgeObjectRetain_n();
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      BOOL v29 = (uint8_t *)sub_100014490();
      v56[0] = sub_1000094B4();
      *(_DWORD *)BOOL v29 = 136446210;
      swift_bridgeObjectRetain();
      v54[0] = sub_10001227C(a1, a2, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10001A4E0();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "session config finished with no use count for %{public}s", v29, 0xCu);
      swift_arrayDestroy();
LABEL_10:
      sub_100009474();
      sub_100009474();
LABEL_19:

      return;
    }
LABEL_18:
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  int v52 = a3;
  uint64_t v50 = v9;
  unint64_t v51 = v13;
  uint64_t v53 = a1;
  uint64_t v18 = v15 - 1;
  if (__OFSUB__(v15, 1))
  {
    __break(1u);
  }
  else
  {
    --*(_WORD *)(v4 + 128);
    if (qword_1000A5FF0 == -1) {
      goto LABEL_4;
    }
  }
  swift_once();
LABEL_4:
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = (uint8_t *)sub_100012884(v19, (uint64_t)qword_1000A7040);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = sub_1000094B4();
    uint64_t v49 = v20;
    v56[0] = v24;
    *(_DWORD *)uint64_t v23 = 136446722;
    swift_bridgeObjectRetain();
    v54[0] = sub_10001227C(v53, a2, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10001A4E0();
    *(_WORD *)(v23 + 12) = 2050;
    v54[0] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 22) = 512;
    __int16 v25 = *(_WORD *)(v4 + 128);
    swift_release();
    LOWORD(v54[0]) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "session config finished for %{public}s with %{public}lld uses remaining. Total Active Sessions: %hu", (uint8_t *)v23, 0x1Au);
    swift_arrayDestroy();
    uint64_t v20 = v49;
    sub_100009474();
    sub_100009474();
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }

  if (v18 > 0)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_10001B424(v18, v53, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    return;
  }
  swift_beginAccess();
  uint64_t v30 = v53;
  sub_10004C288();
  swift_endAccess();
  if (v52)
  {
    swift_beginAccess();
    uint64_t v31 = *(void *)(v4 + 136);
    swift_bridgeObjectRetain();
    sub_100073204(v30, a2, v31);
    char v33 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    BOOL v35 = os_log_type_enabled(v27, v34);
    if (v33)
    {
      if (v35)
      {
        unint64_t v36 = (uint8_t *)sub_100014490();
        v54[0] = sub_1000094B4();
        *(_DWORD *)unint64_t v36 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v37 = sub_10001227C(v30, a2, v54);
        sub_100014560(v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10001A4E0();
        _os_log_impl((void *)&_mh_execute_header, v27, v34, "not evicting %{public}s: already running", v36, 0xCu);
        swift_arrayDestroy();
        goto LABEL_10;
      }
      goto LABEL_18;
    }
    if (v35)
    {
      uint64_t v20 = (uint8_t *)sub_100014490();
      v54[0] = sub_1000094B4();
      *(_DWORD *)uint64_t v20 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_10001227C(v30, a2, v54);
      sub_100014560(v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10001A4E0();
      _os_log_impl((void *)&_mh_execute_header, v27, v34, "starting eviction timer for %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_1000134C4();
    swift_bridgeObjectRetain();
    sub_10005B84C(&v55, v30, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v44 = type metadata accessor for TaskPriority();
    sub_100013EE8(v44);
    uint64_t v46 = sub_10003DA64(&qword_1000A7248, v45, (void (*)(uint64_t))type metadata accessor for SessionCoordinator);
    uint64_t v47 = (void *)swift_allocObject();
    v47[2] = v4;
    v47[3] = v46;
    v47[4] = v4;
    v47[5] = v30;
    uint64_t v48 = v50;
    v47[6] = a2;
    v47[7] = v48;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_10006BBE8((uint64_t)v20, (uint64_t)&unk_1000A7260, (uint64_t)v47);
  }
  else
  {
    uint64_t v38 = type metadata accessor for TaskPriority();
    sub_100013EE8(v38);
    uint64_t v40 = sub_10003DA64(&qword_1000A7248, v39, (void (*)(uint64_t))type metadata accessor for SessionCoordinator);
    uint64_t v41 = (void *)swift_allocObject();
    v41[2] = v4;
    v41[3] = v40;
    v41[4] = v30;
    v41[5] = a2;
    uint64_t v42 = v50;
    v41[6] = v4;
    v41[7] = v42;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_10000FF80((uint64_t)v20, (uint64_t)&unk_1000A7250, (uint64_t)v41);
  }
  swift_release();
}

uint64_t sub_10000AE08()
{
  unint64_t v36 = v0;
  uint64_t v1 = v0[53];
  uint64_t v2 = &unk_100085000;
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = (void *)v0[52];
    uint64_t v4 = sub_1000307B0(v1);
    xpc_dictionary_set_value(v3, "allowed", v4);
    swift_unknownObjectRelease();
    if (qword_1000A5FE0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100012884(v5, (uint64_t)qword_1000A6AE0);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[50];
    if (v8)
    {
      uint64_t v10 = (uint8_t *)sub_1000141D0();
      uint64_t v35 = sub_1000152A0();
      *(_DWORD *)uint64_t v10 = 136446466;
      uint64_t v12 = *(void *)(v9 + 112);
      unint64_t v11 = *(void *)(v9 + 120);
      swift_bridgeObjectRetain();
      v0[25] = sub_10001227C(v12, v11, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001A9B4();
      sub_1000331D0();
      swift_bridgeObjectRetain();
      uint64_t v13 = Set.description.getter();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      v0[26] = sub_10001227C(v13, v15, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100013ED0();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "new session %{public}s allowlisting events: %{public}s", v10, 0x16u);
      sub_10000E848();
      uint64_t v2 = (void *)&unk_100085000;
      sub_100009474();
      sub_100009474();
    }
    else
    {
      sub_100013ED0();
      swift_bridgeObjectRelease_n();

      sub_10001A9B4();
    }
  }
  if (*(void *)(v0[54] + 16))
  {
    char v16 = (void *)v0[52];
    char v17 = sub_1000307B0(v0[54]);
    xpc_dictionary_set_value(v16, "denied", v17);
    swift_unknownObjectRelease();
    if (qword_1000A5FE0 != -1) {
      swift_once();
    }
    uint64_t v18 = v0[53];
    uint64_t v19 = type metadata accessor for Logger();
    sub_100012884(v19, (uint64_t)qword_1000A6AE0);
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    BOOL v22 = sub_10000E918(v21);
    uint64_t v23 = v0[50];
    if (v22)
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = sub_1000152A0();
      *(_DWORD *)uint64_t v24 = v2[97];
      uint64_t v26 = *(void *)(v23 + 112);
      unint64_t v25 = *(void *)(v23 + 120);
      swift_bridgeObjectRetain();
      v0[23] = sub_10001227C(v26, v25, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001A9B4();
      sub_1000331D0();
      swift_bridgeObjectRetain();
      uint64_t v27 = Set.description.getter();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      v0[24] = sub_10001227C(v27, v29, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_1000331FC();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v18, "new session %{public}s denylisting events: %{public}s", v24, 0x16u);
      sub_10000E848();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_1000331FC();

      sub_10001A9B4();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_100017FD0();
  if (v30)
  {
    uint64_t v31 = (void *)v0[52];
    char v32 = (_xpc_connection_s *)sub_10001A4C8();
    xpc_connection_send_message(v32, v31);
    swift_release_n();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_100019B8C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    return v33();
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_10000B36C()
{
  sub_1000113BC();
  uint64_t v1 = *(void *)(v0 + 352);
  if (*(unsigned char *)(v1 + 240) == 1) {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) = 1;
  }
  sub_10000B448();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v2();
}

void sub_10000B408(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

void sub_10000B428(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t sub_10000B448()
{
  return swift_task_dealloc();
}

uint64_t sub_10000B464(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 457) = a2;
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = v2;
  sub_100016CE0(&qword_1000A7EE0);
  *(void *)(v3 + 256) = swift_task_alloc();
  *(void *)(v3 + 264) = swift_task_alloc();
  *(void *)(v3 + 272) = swift_task_alloc();
  *(void *)(v3 + 280) = swift_task_alloc();
  *(void *)(v3 + 288) = swift_task_alloc();
  *(void *)(v3 + 296) = swift_task_alloc();
  *(void *)(v3 + 304) = swift_task_alloc();
  *(void *)(v3 + 312) = swift_task_alloc();
  *(void *)(v3 + 320) = swift_task_alloc();
  *(void *)(v3 + 328) = swift_task_alloc();
  *(void *)(v3 + 336) = swift_task_alloc();
  return _swift_task_switch(sub_100010260, v2, 0);
}

uint64_t sub_10000B578()
{
  uint64_t v1 = v0[7];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v2 = JSONEncoder.init()();
  v0[2] = v1;
  v0[10] = v2;
  swift_bridgeObjectRetain();
  sub_100016CE0((uint64_t *)&unk_1000A7870);
  sub_10000B874();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  v0[11] = 0;
  v0[12] = v3;
  v0[13] = v4;
  swift_bridgeObjectRelease();
  if (Data.count.getter() <= 0x400000)
  {
    static String.Encoding.utf8.getter();
    uint64_t v10 = String.init(data:encoding:)();
    v0[14] = v10;
    v0[15] = v11;
    if (v11)
    {
      uint64_t v11 = *(void *)(v0[8] + 112);
      v0[16] = v11;
      uint64_t v10 = (uint64_t)sub_10000F020;
      uint64_t v12 = 0;
    }
    else
    {
      __break(1u);
    }
    return _swift_task_switch(v10, v11, v12);
  }
  else
  {
    if (qword_1000A6008 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100012884(v6, (uint64_t)qword_1000A74E8);
    sub_10002779C(v3, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 134349312;
      v0[3] = Data.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000088D0(v3, v5);
      *(_WORD *)(v9 + 12) = 2050;
      v0[4] = 0x400000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "event too large: (%{public}ld > %{public}lld", (uint8_t *)v9, 0x16u);
      sub_100009474();
    }
    else
    {
      sub_1000088D0(v3, v5);
    }

    sub_10001E318();
    swift_allocError();
    *uint64_t v13 = 0;
    swift_willThrow();
    sub_1000088D0(v3, v5);
    swift_release();
    swift_task_dealloc();
    sub_10000E83C();
    return v14();
  }
}

unint64_t sub_10000B874()
{
  unint64_t result = qword_1000A6AB0;
  if (!qword_1000A6AB0)
  {
    sub_1000286C8((uint64_t *)&unk_1000A7870);
    sub_1000305A0((unint64_t *)&qword_1000A6AB8, (void (*)(uint64_t))type metadata accessor for EventValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6AB0);
  }
  return result;
}

void sub_10000B920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, uint64_t a19)
{
  uint64_t v57 = v11;
  uint64_t v12 = *(void *)(v11 + 160);
  *(void *)(v11 + 16) = v12;
  uint64_t v13 = *(void **)(v11 + 224);
  uint64_t v14 = *(void *)(v11 + 192);
  uint64_t v15 = *(void *)(v11 + 200);
  uint64_t v16 = *(void *)(v11 + 176);
  uint64_t v17 = *(void *)(v11 + 184);
  unint64_t v18 = *(void *)(v11 + 168);
  *(void *)(v11 + 24) = v18;
  *(void *)(v11 + 32) = v16;
  *(void *)(v11 + 40) = v17;
  *(void *)(v11 + 48) = v14;
  *(void *)(v11 + 56) = v15;
  if (!v13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = 0;
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v11 + 208);
  uint64_t v54 = 0;
  unint64_t v55 = 0xE000000000000000;
  if (v19 < 0)
  {
LABEL_34:
    __break(1u);
    return;
  }
  if (v19)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = 0;
    uint64_t v62 = (char *)&type metadata for Any + 8;
    do
    {
      if (v20 == v19)
      {
        __break(1u);
        goto LABEL_34;
      }
      sub_100006A04(*(void *)(v11 + 216), (uint64_t)v13, v20);
      if (v22)
      {
        uint64_t v23 = v21;
        unint64_t v24 = (unint64_t)v22;
        uint64_t v25 = v54 & 0xFFFFFFFFFFFFLL;
        if ((v55 & 0x2000000000000000) != 0) {
          uint64_t v25 = HIBYTE(v55) & 0xF;
        }
        if (v25)
        {
          v56._countAndFlagsBits = 46;
          v56._object = (void *)0xE100000000000000;
          v26._countAndFlagsBits = v21;
          v26._object = v22;
          String.append(_:)(v26);
          swift_bridgeObjectRelease();
          String.append(_:)(v56);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v54 = v23;
          unint64_t v55 = v24;
        }
      }
      else
      {
        if (qword_1000A5FF0 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_100012884(v27, (uint64_t)qword_1000A7040);
        swift_bridgeObjectRetain_n();
        unint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v31 = *(void *)(v11 + 208);
          uint64_t v30 = *(void *)(v11 + 216);
          uint64_t v32 = swift_slowAlloc();
          v56._countAndFlagsBits = sub_1000094B4();
          *(_DWORD *)uint64_t v32 = 136315394;
          swift_bridgeObjectRetain();
          *(void *)(v32 + 4) = sub_10001227C(v30, (unint64_t)v13, &v56._countAndFlagsBits);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v32 + 12) = 2048;
          swift_bridgeObjectRelease();
          *(void *)(v32 + 14) = v31;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "gap in hierarchy: %s level %ld", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy();
          sub_100009474();
          sub_100009474();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      ++v20;
      uint64_t v19 = *(void *)(v11 + 208);
    }
    while (v20 != v19);
    uint64_t v33 = v54;
    uint64_t v13 = (void *)v55;
    if (!v54) {
      goto LABEL_22;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = 0;
    uint64_t v13 = (void *)0xE000000000000000;
LABEL_22:
    if (v13 == (void *)0xE000000000000000) {
      goto LABEL_24;
    }
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v33 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v12 = *(void *)(v11 + 160);
  unint64_t v18 = *(void *)(v11 + 168);
LABEL_26:
  if (sub_100009B48(v12, v18))
  {
    uint64_t v34 = *(void *)(v11 + 264);
    char v35 = *(unsigned char *)(v11 + 310);
    uint64_t v36 = type metadata accessor for CachedSession(0);
    _s10RTCUtility9XPCObjectOwst_0(v34, 1, 1, v36);
    type metadata accessor for Session(0);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v37 = (void *)swift_task_alloc();
    *(void *)(v11 + 272) = v37;
    *uint64_t v37 = v11;
    v37[1] = sub_100005818;
    uint64_t v46 = *(void *)(v11 + 256);
    uint64_t v47 = *(void *)(v11 + 240);
    uint64_t v48 = *(void *)(v11 + 248);
    uint64_t v49 = *(void *)(v11 + 232);
    int v50 = *(_DWORD *)(v11 + 304);
    char v51 = *(unsigned char *)(v11 + 309);
    uint64_t v61 = *(void *)(v11 + 264);
    char v60 = v35 & 1;
    uint64_t v59 = v48;
    sub_10000DABC(v50, v46, (_OWORD *)(v11 + 16), v51, v33, v13, v49, v47, v38, v39, v40, v41, v42, v43, v44, v45, a17, a18, a19);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v52 = sub_10003DC9C();
    v53(v52);
  }
}

void *sub_10000BDE4()
{
  uint64_t v76 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v75 = (uint64_t)&v68 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for SessionConfiguration.Backend(0);
  uint64_t i = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v69 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v77 = (uint64_t)&v68 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t)&v68 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v68 = (char *)&v68 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v68 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v68 - v16;
  uint64_t v79 = *v0;
  uint64_t v18 = v79;
  uint64_t v19 = *(char **)(v79 + 16);
  uint64_t v20 = &_swiftEmptyArrayStorage;
  v74 = v19;
  uint64_t v70 = i;
  uint64_t v71 = v79;
  if (v19)
  {
    v78 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100019394();
    uint64_t v21 = v18 + ((*(unsigned __int8 *)(i + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(i + 80));
    uint64_t v72 = *(void *)(i + 72);
    uint64_t v73 = v2;
    do
    {
      sub_10005DA0C(v21, (uint64_t)v17);
      sub_10005DA0C((uint64_t)v17, (uint64_t)v15);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t i = *((void *)v15 + 3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v22 = v75;
        sub_10005E668((uint64_t)v15, v75);
        sub_1000140BC();
        sub_10005E6CC(v22, type metadata accessor for SessionConfiguration.BackendHTTP);
      }
      sub_10005E6CC((uint64_t)v17, type metadata accessor for SessionConfiguration.Backend);
      uint64_t v20 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001ABA4(v20[2]);
        uint64_t v20 = v78;
      }
      unint64_t v24 = v20[2];
      unint64_t v23 = v20[3];
      if (v24 >= v23 >> 1)
      {
        BOOL v25 = sub_10001609C(v23);
        sub_100071E40((char *)v25, v24 + 1, 1);
        uint64_t v20 = v78;
      }
      v20[2] = v24 + 1;
      v20[v24 + 4] = i;
      v21 += v72;
      --v19;
    }
    while (v19);
    sub_100005B18((uint64_t)&v79);
    uint64_t v19 = v74;
  }
  v78 = &_swiftEmptySetSingleton;
  uint64_t v26 = v20[2];
  uint64_t v27 = v70;
  uint64_t v28 = (uint64_t)v68;
  if (v26)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v26; ++i)
    {
      uint64_t v29 = swift_bridgeObjectRetain();
      sub_10005B668(v29);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v73 = (uint64_t)v78;
  uint64_t v30 = &_swiftEmptyArrayStorage;
  if (v19)
  {
    v78 = &_swiftEmptyArrayStorage;
    uint64_t v31 = v71;
    swift_bridgeObjectRetain();
    sub_100019394();
    uint64_t v32 = v31 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    uint64_t v33 = *(void *)(v27 + 72);
    uint64_t v34 = v19;
    do
    {
      sub_10005DA0C(v32, v28);
      sub_10005DA0C(v28, v10);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t i = *(void *)(v10 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = v75;
        sub_10005E668(v10, v75);
        sub_1000140BC();
        sub_10005E6CC(v35, type metadata accessor for SessionConfiguration.BackendHTTP);
      }
      sub_10005E6CC(v28, type metadata accessor for SessionConfiguration.Backend);
      uint64_t v30 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001ABA4(v30[2]);
        uint64_t v30 = v78;
      }
      unint64_t v37 = v30[2];
      unint64_t v36 = v30[3];
      if (v37 >= v36 >> 1)
      {
        BOOL v38 = sub_10001609C(v36);
        sub_100071E40((char *)v38, v37 + 1, 1);
        uint64_t v30 = v78;
      }
      v30[2] = v37 + 1;
      v30[v37 + 4] = i;
      v32 += v33;
      --v34;
      uint64_t v19 = v74;
    }
    while (v34);
    sub_100005B18((uint64_t)&v79);
  }
  uint64_t v39 = v71;
  v74 = (char *)v30[2];
  if (!v74)
  {
    double v41 = (char *)&_swiftEmptySetSingleton;
LABEL_38:
    swift_bridgeObjectRelease();
    uint64_t v48 = &_swiftEmptyArrayStorage;
    uint64_t v49 = (uint64_t)v69;
    if (v19)
    {
      v74 = v41;
      v78 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100019394();
      uint64_t v50 = v39 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80));
      uint64_t v51 = *(void *)(v70 + 72);
      do
      {
        uint64_t v52 = v77;
        sub_10005DA0C(v50, v77);
        sub_10005DA0C(v52, v49);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v10 = *(void *)(v49 + 32);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v53 = v75;
          sub_10005E668(v49, v75);
          uint64_t v10 = *(void *)(v53 + *(int *)(v76 + 40));
          swift_bridgeObjectRetain();
          sub_10005E6CC(v53, type metadata accessor for SessionConfiguration.BackendHTTP);
        }
        sub_10005E6CC(v77, type metadata accessor for SessionConfiguration.Backend);
        uint64_t v48 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10001ABA4(v48[2]);
          uint64_t v48 = v78;
        }
        unint64_t v55 = v48[2];
        unint64_t v54 = v48[3];
        if (v55 >= v54 >> 1)
        {
          BOOL v56 = sub_10001609C(v54);
          sub_100071E40((char *)v56, v55 + 1, 1);
          uint64_t v48 = v78;
        }
        v48[2] = v55 + 1;
        v48[v55 + 4] = v10;
        v50 += v51;
        --v19;
      }
      while (v19);
      sub_100005B18((uint64_t)&v79);
      double v41 = v74;
    }
    uint64_t v57 = v48[2];
    if (v57)
    {
      swift_bridgeObjectRetain();
      uint64_t v58 = 0;
      uint64_t v59 = &_swiftEmptySetSingleton;
      do
      {
        unsigned int v60 = v59[32] & 0x3F;
        sub_100009580();
        uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
        if (v60 <= 0xD
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          __chkstk_darwin(isStackAllocationSafe);
          sub_100071D3C(0, v10, (char **)((char *)&v68 - ((8 * v10 + 15) & 0x3FFFFFFFFFFFFFF0)));
          uint64_t v62 = sub_100019CEC();
          if (v10) {
            goto LABEL_61;
          }
          v63 = (unsigned char *)v62;
          swift_bridgeObjectRelease();
          uint64_t v59 = v63;
        }
        else
        {
          v64 = (void *)swift_slowAlloc();
          sub_100071D3C(0, v10, v64);
          uint64_t v65 = sub_100019CEC();
          if (v10) {
            goto LABEL_62;
          }
          v66 = (unsigned char *)v65;
          swift_bridgeObjectRelease();
          swift_slowDealloc();
          uint64_t v59 = v66;
        }
        ++v58;
        swift_bridgeObjectRelease();
      }
      while (v57 != v58);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v59 = &_swiftEmptySetSingleton;
    }
    swift_bridgeObjectRelease();
    return sub_1000041AC((uint64_t)v41, v73, (uint64_t)v59);
  }
  swift_bridgeObjectRetain();
  double v40 = 0;
  double v41 = (char *)&_swiftEmptySetSingleton;
  while (1)
  {
    unsigned int v42 = v41[32] & 0x3F;
    sub_100009580();
    uint64_t v43 = swift_bridgeObjectRetain();
    if (v42 <= 0xD) {
      break;
    }
    uint64_t v43 = swift_stdlib_isStackAllocationSafe();
    if (v43) {
      break;
    }
    double v45 = (void *)swift_slowAlloc();
    sub_100071D3C(0, v10, v45);
    uint64_t v46 = sub_100017C60();
    if (v10) {
      goto LABEL_62;
    }
    uint64_t v47 = (char *)v46;
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    double v41 = v47;
LABEL_35:
    ++v40;
    swift_bridgeObjectRelease();
    if (v74 == v40)
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = v71;
      goto LABEL_38;
    }
  }
  __chkstk_darwin(v43);
  sub_100071D3C(0, v10, (char **)((char *)&v68 - ((8 * v10 + 15) & 0x3FFFFFFFFFFFFFF0)));
  uint64_t v44 = sub_100017C60();
  if (!v10)
  {
    double v41 = (char *)v44;
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
LABEL_61:
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
  __break(1u);
LABEL_62:
  swift_bridgeObjectRelease();
  swift_errorRelease();
  unint64_t result = (void *)swift_slowDealloc();
  __break(1u);
  return result;
}

uint64_t sub_10000C704(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000C738()
{
  uint64_t v48 = v0;
  if (*(unsigned char *)(v0 + 176) != 2) {
    goto LABEL_17;
  }
  uint64_t v1 = v0 + 72;
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 104);
  MessageKeys.payload.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  RTCXPCDictionary.subscript.getter(v3, v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for XPCObject();
  int v5 = _s10RTCUtility9XPCObjectOwet_0(v2, 1, v4);
  uint64_t v6 = *(void ***)(v0 + 136);
  if (v5 == 1)
  {
    sub_1000173F0(*(void *)(v0 + 136), &qword_1000A7EE0);
LABEL_11:
    if (qword_1000A60A8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100012884(v17, (uint64_t)qword_1000A81B0);
    swift_retain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v10, v18);
    uint64_t v20 = *(void *)(v0 + 112);
    if (v19)
    {
      uint64_t v21 = (uint8_t *)sub_100014490();
      uint64_t v47 = sub_1000094B4();
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v22 = *(void *)(v20 + 112);
      unint64_t v23 = *(void *)(v20 + 120);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 64) = sub_10001227C(v22, v23, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v10, v18, "session %{public}s receieved event with no payload", v21, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_release();
    }
    goto LABEL_16;
  }
  sub_1000129A0();
  if (swift_getEnumCaseMultiPayload() != 12)
  {
    sub_100013B30((uint64_t)v6, (void (*)(void))type metadata accessor for XPCObject);
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v8 = *v6;
  *(void *)(v0 + 144) = *v6;
  if (*(unsigned char *)(v7 + OBJC_IVAR____TtC13rtcreportingd7Session_receivedEnd))
  {
    if (qword_1000A60A8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100012884(v9, (uint64_t)qword_1000A81B0);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 112);
    if (!v12)
    {
      swift_unknownObjectRelease();
      swift_release_n();
LABEL_16:

      goto LABEL_17;
    }
    uint64_t v14 = (uint8_t *)sub_100014490();
    uint64_t v47 = sub_1000094B4();
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v16 = *(void *)(v13 + 112);
    unint64_t v15 = *(void *)(v13 + 120);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 88) = sub_10001227C(v16, v15, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "session %{public}s received event after ending", v14, 0xCu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_unknownObjectRelease();
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    return v24();
  }
  uint64_t v26 = (const void *)(v0 + 16);
  if (*(unsigned char *)(v7 + 176) == 1) {
    goto LABEL_37;
  }
  int v27 = *(unsigned __int8 *)(v7 + 240);
  if (!*(unsigned char *)(v7 + 176) && v27 == 1) {
    goto LABEL_37;
  }
  uint64_t v28 = v0 + 72;
  uint64_t v29 = v8;
  uint64_t v30 = *(void *)(v0 + 128);
  uint64_t v31 = *(void **)(v0 + 104);
  MessageKeys.realtime.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  RTCXPCDictionary.subscript.getter(v31, v30);
  swift_bridgeObjectRelease();
  int v32 = _s10RTCUtility9XPCObjectOwet_0(v30, 1, v4);
  uint64_t v33 = *(unsigned char **)(v0 + 128);
  if (v32 != 1)
  {
    uint64_t v1 = v0 + 72;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      if (v27 != 1 && *v33)
      {
        if (qword_1000A60A8 == -1) {
          goto LABEL_31;
        }
        goto LABEL_42;
      }
    }
    else
    {
      sub_100013B30((uint64_t)v33, (void (*)(void))type metadata accessor for XPCObject);
    }
    goto LABEL_37;
  }
  sub_1000173F0(*(void *)(v0 + 128), &qword_1000A7EE0);
  while (1)
  {
    uint64_t v1 = v28;
LABEL_37:
    uint64_t v28 = *(void *)(v0 + 112);
    uint64_t v42 = *(void *)(v0 + 120);
    type metadata accessor for EventValue();
    *(void *)(v0 + 72) = Dictionary.init(dictionaryLiteral:)();
    size_t count = xpc_dictionary_get_count(v8);
    sub_100016CE0((uint64_t *)&unk_1000A7870);
    Dictionary.reserveCapacity(_:)(count);
    uint64_t v44 = (void *)swift_allocObject();
    *(void *)(v0 + 152) = v44;
    v44[2] = v28;
    v44[3] = v1;
    v44[4] = v42;
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = sub_100012D94;
    *(void *)(v45 + 24) = v44;
    *(void *)(v0 + 48) = sub_100012D68;
    *(void *)(v0 + 56) = v45;
    *(void *)(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256;
    *(void *)(v0 + 32) = sub_100012D08;
    *(void *)(v0 + 40) = &unk_1000A14F8;
    uint64_t v29 = _Block_copy(v26);
    uint64_t v26 = *(const void **)(v0 + 56);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    xpc_dictionary_apply(v8, v29);
    swift_unknownObjectRelease();
    _Block_release(v29);
    LOBYTE(v42) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v42 & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_42:
    swift_once();
LABEL_31:
    uint64_t v34 = type metadata accessor for Logger();
    sub_100012884(v34, (uint64_t)qword_1000A81B0);
    swift_retain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = *(void *)(v0 + 112);
    if (v37)
    {
      uint64_t v39 = (uint8_t *)sub_100014490();
      uint64_t v47 = sub_1000094B4();
      *(_DWORD *)uint64_t v39 = 136446210;
      uint64_t v40 = *(void *)(v38 + 112);
      unint64_t v41 = *(void *)(v38 + 120);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 80) = sub_10001227C(v40, v41, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v8 = v29;
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "session %{public}s sent realtime event to non-realtime session", v39, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_release();
    }
  }
  *(void *)(v0 + 160) = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_10000453C;
  sub_10001AB08();
  return sub_10000E768();
}

uint64_t sub_10000CFBC()
{
  uint64_t v57 = v0;
  if (*(unsigned char *)(v0 + 311) == 1) {
    sub_10000A630(*(void *)(v0 + 160), *(void *)(v0 + 168), 1);
  }
  uint64_t v2 = *(void *)(v0 + 224);
  if (v2)
  {
    unint64_t v3 = v0 + 136;
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 288);
    uint64_t v6 = *(void *)(v4 + 112);
    unint64_t v7 = *(void *)(v4 + 120);
    *(void *)(v0 + 136) = 46;
    *(void *)(v0 + 144) = 0xE100000000000000;
    uint64_t v8 = swift_task_alloc();
    *(void *)(v8 + 16) = v0 + 136;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_10000E9CC(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10000EE1C, v8, v6, v7);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    sub_10001B308(v9);
    sub_100011638();
    swift_bridgeObjectRelease();
    if (!v5)
    {
      Substring.init(_:)();
      sub_100011638();
    }
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v11 = *(void *)(v0 + 216);
    uint64_t v54 = static String._fromSubstring(_:)();
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v14 = (uint64_t *)(v10 + 144);
    sub_10000E934();
    swift_beginAccess();
    uint64_t v15 = *(void *)(v10 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_10001B3B4(v11, v2, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v16)
    {
      uint64_t v17 = *(void *)(v0 + 216);
      sub_1000134C4();
      swift_bridgeObjectRetain();
      sub_10001B43C((uint64_t)&_swiftEmptyArrayStorage, v17, v2);
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    sub_1000134C4();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v55 = (uint64_t *)*v14;
    BOOL v19 = v55;
    *uint64_t v14 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_100014BA8();
    uint64_t v22 = v19[2];
    BOOL v23 = (v21 & 1) == 0;
    Swift::Int v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
    }
    else
    {
      unint64_t v3 = v20;
      char v25 = v21;
      sub_100016CE0(&qword_1000A78E0);
      BOOL v19 = (uint64_t *)&v55;
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24))
      {
        BOOL v19 = v55;
        unint64_t v26 = sub_100014BA8();
        if ((v25 & 1) != (v27 & 1))
        {
          sub_100016868();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v3 = v26;
      }
      if (v25)
      {
        BOOL v19 = *(uint64_t **)(v55[7] + 8 * v3);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_17:
          int64_t v1 = v19[2];
          unint64_t v30 = v19[3];
          if (v1 >= v30 >> 1)
          {
            sub_10000565C(v30 > 1, v1 + 1, 1, (uint64_t)v19);
            BOOL v19 = v53;
          }
          uint64_t v32 = *(void *)(v0 + 208);
          uint64_t v31 = *(void *)(v0 + 216);
          v19[2] = v1 + 1;
          uint64_t v33 = &v19[3 * v1];
          v33[4] = v32;
          v33[5] = v54;
          v33[6] = v13;
          BOOL v56 = v19;
          sub_10001AC28((uint64_t *)&v56, 1, (uint64_t *)&v55, v3, v31, v2);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *uint64_t v14 = (uint64_t)v55;
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
LABEL_36:
        sub_10000565C(0, v19[2] + 1, 1, (uint64_t)v19);
        BOOL v19 = v52;
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_36;
  }
LABEL_20:
  int v34 = *(unsigned __int8 *)(*(void *)(v0 + 280) + 240);
  swift_release();
  if (v34 != 2) {
    goto LABEL_31;
  }
  uint64_t v35 = *(void *)(v0 + 256);
  uint64_t v36 = *(void *)(v35 + 152);
  if (v36 || (int64_t v1 = (int64_t)&unk_1000A7000, byte_1000A7670 != 1))
  {
    BOOL v48 = __OFADD__(v36, 1);
    uint64_t v49 = v36 + 1;
    if (v48)
    {
      __break(1u);
      goto LABEL_38;
    }
    *(void *)(v35 + 152) = v49;
LABEL_31:
    swift_task_dealloc();
    sub_10001A408();
    sub_100016868();
    __asm { BRAA            X2, X16 }
  }
  if (qword_1000A5FF0 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = (void *)sub_100007DBC(v37, (uint64_t)qword_1000A7040);
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (sub_10000E918(v39))
  {
    uint64_t v40 = (_WORD *)sub_1000113C8();
    sub_10003DC90(v40);
    sub_1000094EC((void *)&_mh_execute_header, v41, v42, "registering eager submit activity");
    sub_100009474();
  }
  uint64_t v43 = *(void *)(v0 + 256);

  *(unsigned char *)(v1 + 1648) = 0;
  *(void *)(v0 + 296) = *(void *)(v43 + 160);
  sub_100016868();
  return _swift_task_switch(v44, v45, v46);
}

uint64_t sub_10000D488()
{
  uint64_t v39 = v0;
  int64_t v1 = &unk_100085000;
  if ((*(unsigned char *)(v0 + 458) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 400);
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = *(void *)(v2 + 120);
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10001B454(v2, v3, v4);
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (qword_1000A5FE0 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 248);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100012884(v6, (uint64_t)qword_1000A6AE0);
    swift_retain();
    swift_retain();
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (sub_100018208(v8))
    {
      uint64_t v9 = (_DWORD *)sub_1000141D0();
      uint64_t v38 = sub_1000152A0();
      *uint64_t v9 = 136446466;
      unint64_t v11 = *(void *)(v2 + 112);
      unint64_t v10 = *(void *)(v2 + 120);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 232) = sub_10001227C(v11, v10, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1000128F4();
      *(void *)(v0 + 152) = sub_10001227C(v10, v11, &v38);
      int64_t v1 = (void *)&unk_100085000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      sub_100017634((void *)&_mh_execute_header, v7, (os_log_type_t)v5, "new session %{public}s started for %{public}s");
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_release();

      swift_release();
    }
  }
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 240));
  *(void *)(v0 + 416) = reply;
  if (reply)
  {
    uint64_t v13 = reply;
    uint64_t v14 = v1;
    char v15 = *(unsigned char *)(v0 + 458);
    uint64_t v16 = *(void *)(v0 + 400);
    uint64_t v17 = String.utf8CString.getter();
    xpc_dictionary_set_string(v13, "genID", (const char *)(v17 + 32));
    swift_release();
    if (v15)
    {
      if (qword_1000A5FE0 != -1) {
        swift_once();
      }
      uint64_t v18 = *(void *)(v0 + 248);
      uint64_t v19 = type metadata accessor for Logger();
      sub_100012884(v19, (uint64_t)qword_1000A6AE0);
      swift_retain();
      swift_retain();
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      BOOL v22 = sub_10000E918(v21);
      uint64_t v23 = *(void *)(v0 + 248);
      if (v22)
      {
        uint64_t v24 = sub_1000141D0();
        uint64_t v37 = sub_1000152A0();
        *(_DWORD *)uint64_t v24 = v14[97];
        uint64_t v38 = v37;
        uint64_t v26 = *(void *)(v23 + 128);
        unint64_t v25 = *(void *)(v23 + 136);
        swift_bridgeObjectRetain();
        *(void *)(v0 + 216) = sub_10001227C(v26, v25, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        *(_WORD *)(v24 + 12) = 2082;
        uint64_t v27 = *(void *)(v16 + 112);
        unint64_t v28 = *(void *)(v16 + 120);
        swift_bridgeObjectRetain();
        *(void *)(v0 + 224) = sub_10001227C(v27, v28, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        sub_100017634((void *)&_mh_execute_header, v20, (os_log_type_t)v18, "notifying %{public}s that session %{public}s is disabled");
        sub_10000E848();
        sub_100009474();
        sub_100009474();
      }
      else
      {
        swift_release();

        swift_release();
      }
      xpc_dictionary_set_BOOL(v13, "disabled", 1);
      sub_100017FD0();
      if (v32)
      {
        uint64_t v33 = *(void **)(v0 + 416);
        int v34 = (_xpc_connection_s *)sub_10001A4C8();
        xpc_connection_send_message(v34, v33);
        swift_release_n();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_20;
      }
      uint64_t v30 = swift_release();
      __break(1u);
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 400);
      uint64_t v30 = (uint64_t)sub_10001BB48;
      uint64_t v31 = 0;
    }
    return _swift_task_switch(v30, v29, v31);
  }
  swift_release_n();
LABEL_20:
  sub_100019B8C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v35();
}

uint64_t sub_10000D9FC()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000E83C();
  return v3();
}

uint64_t sub_10000DABC(int a1, uint64_t a2, _OWORD *a3, char a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, uint64_t a19)
{
  uint64_t v13 = v11;
  *(void *)(v12 + 432) = a19;
  *(void *)(v12 + 440) = v13;
  *(void *)(v12 + 424) = a2;
  sub_10000E994();
  *(void *)(v12 + 448) = v16;
  uint64_t v17 = type metadata accessor for Locale();
  *(void *)(v12 + 456) = v17;
  sub_10001130C(v17);
  *(void *)(v12 + 464) = v18;
  *(void *)(v12 + 472) = sub_10000E6C0();
  type metadata accessor for SHA256();
  sub_100014C1C();
  uint64_t v90 = sub_10000E6C0();
  *(void *)(v12 + 480) = v90;
  type metadata accessor for SHA256Digest();
  sub_100014C1C();
  *(void *)(v12 + 488) = sub_10000E6C0();
  type metadata accessor for String.Encoding();
  sub_100014C1C();
  *(void *)(v12 + 496) = sub_10000E6C0();
  type metadata accessor for UUID();
  sub_100014C1C();
  uint64_t v92 = v20;
  uint64_t v93 = v19;
  uint64_t v21 = sub_10000E6C0();
  *(void *)(v12 + 504) = v21;
  uint64_t v22 = sub_100016CE0(&qword_1000A8490);
  sub_100009374(v22);
  uint64_t v94 = sub_10000E8B8();
  *(void *)(v12 + 512) = v94;
  uint64_t v23 = swift_task_alloc();
  *(void *)(v12 + 520) = v23;
  uint64_t v24 = type metadata accessor for CachedSession(0);
  *(void *)(v12 + 528) = v24;
  sub_10000948C();
  uint64_t v91 = sub_10000E8B8();
  *(void *)(v12 + 536) = v91;
  uint64_t v25 = swift_task_alloc();
  *(void *)(v12 + 544) = v25;
  swift_defaultActor_initialize();
  *(void *)(v12 + 552) = OBJC_IVAR____TtC13rtcreportingd7Session_creation;
  static Date.now.getter();
  *(void *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents) = 0;
  uint64_t v26 = OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend;
  *(void *)(v12 + 560) = OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend;
  uint64_t v27 = (void *)(v13 + v26);
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v28 = OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend;
  *(void *)(v12 + 568) = OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend;
  uint64_t v29 = (void *)(v13 + v28);
  *uint64_t v29 = 0;
  v29[1] = 0;
  *(unsigned char *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) = 0;
  *(unsigned char *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_sendingNonRealtimeEvents) = 0;
  *(unsigned char *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_receivedEnd) = 0;
  uint64_t v30 = v13 + OBJC_IVAR____TtC13rtcreportingd7Session_user;
  *(_DWORD *)uint64_t v30 = a1;
  *(unsigned char *)(v30 + 4) = 0;
  *(void *)(v13 + 184) = a2;
  *uint64_t v27 = 0;
  v27[1] = 0;
  swift_retain();
  swift_unknownObjectRelease();
  sub_10001277C(a19, v23, &qword_1000A8490);
  if (_s10RTCUtility9XPCObjectOwet_0(v23, 1, v24) == 1)
  {
    sub_1000173F0(v23, &qword_1000A8490);
    uint64_t v31 = (uint64_t)a6;
    if (a6)
    {
      uint64_t v32 = a5;
      swift_bridgeObjectRetain();
      v33._uint64_t countAndFlagsBits = 46;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      UUID.init()();
      *(void *)(v12 + 153) = UUID.uuid.getter();
      *(unsigned char *)(v12 + 161) = v34;
      *(unsigned char *)(v12 + 162) = v35;
      *(unsigned char *)(v12 + 163) = v36;
      *(unsigned char *)(v12 + 164) = v37;
      *(unsigned char *)(v12 + 165) = v38;
      *(unsigned char *)(v12 + 166) = v39;
      *(unsigned char *)(v12 + 167) = v40;
      *(unsigned char *)(v12 + 168) = v41;
      uint64_t v42 = sub_100004D40(v12 + 153, 16);
      unint64_t v44 = v43;
      Swift::String v45 = Data.base64EncodedString(options:)(0);
      sub_1000088D0(v42, v44);
      sub_100014474();
      v46();
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = a5;
      object = a6;
      goto LABEL_7;
    }
    UUID.init()();
    *(void *)(v12 + 169) = UUID.uuid.getter();
    *(unsigned char *)(v12 + 177) = v49;
    *(unsigned char *)(v12 + 178) = v50;
    *(unsigned char *)(v12 + 179) = v51;
    *(unsigned char *)(v12 + 180) = v52;
    *(unsigned char *)(v12 + 181) = v53;
    *(unsigned char *)(v12 + 182) = v54;
    *(unsigned char *)(v12 + 183) = v55;
    *(unsigned char *)(v12 + 184) = v56;
    uint64_t v57 = sub_100004D40(v12 + 169, 16);
    unint64_t v59 = v58;
    Swift::String v60 = Data.base64EncodedString(options:)(0);
    uint64_t countAndFlagsBits = v60._countAndFlagsBits;
    object = v60._object;
    sub_1000088D0(v57, v59);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v21, v93);
  }
  else
  {
    sub_100016FF8();
    uint64_t countAndFlagsBits = *(void *)(v25 + 48);
    object = *(void **)(v25 + 56);
    swift_bridgeObjectRetain();
    sub_100013B30(v25, (void (*)(void))type metadata accessor for CachedSession);
    uint64_t v31 = (uint64_t)a6;
  }
  uint64_t v32 = a5;
LABEL_7:
  *(void *)(v13 + 112) = countAndFlagsBits;
  *(void *)(v13 + 120) = object;
  uint64_t v61 = OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID;
  *(void *)(v12 + 576) = OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID;
  uint64_t v62 = (uint64_t *)(v13 + v61);
  *uint64_t v62 = v32;
  v62[1] = v31;
  if (a18)
  {
    sub_10001277C(a19, v94, &qword_1000A8490);
    if (_s10RTCUtility9XPCObjectOwet_0(v94, 1, v24) == 1)
    {
      sub_1000173F0(v94, &qword_1000A8490);
      if (a8)
      {
        static String.Encoding.utf8.getter();
        uint64_t v64 = String.data(using:allowLossyConversion:)();
        unint64_t v66 = v65;
        swift_bridgeObjectRelease();
        sub_100014474();
        v67();
        if (v66 >> 60 == 15)
        {
          *(_OWORD *)(v12 + 304) = *a3;
          sub_100009758(v12 + 304);
          *(_OWORD *)(v12 + 320) = a3[1];
          sub_100009758(v12 + 320);
          *(_OWORD *)(v12 + 336) = a3[2];
          sub_100009758(v12 + 336);
          sub_1000729D4();
          swift_allocError();
          *uint64_t v68 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v69 = *(void *)(v12 + 432);
          type metadata accessor for Date();
          sub_10000948C();
          sub_100014474();
          v70();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_defaultActor_destroy();
          swift_release();
          sub_1000173F0(v69, &qword_1000A8490);
          swift_deallocPartialClassInstance();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          sub_10000E83C();
          sub_10001AAC4();
          __asm { BRAA            X1, X16 }
        }
        sub_100072A20((unint64_t *)&unk_1000A84B0, (void (*)(uint64_t))&type metadata accessor for SHA256);
        dispatch thunk of HashFunction.init()();
        switch(v66 >> 62)
        {
          case 1uLL:
            if (v64 >> 32 < (int)v64) {
              __break(1u);
            }
            sub_10002779C(v64, v66);
            uint64_t v73 = sub_100015320();
            sub_10002858C(v73, v74);
            goto LABEL_20;
          case 2uLL:
            uint64_t v75 = *(void *)(v64 + 16);
            uint64_t v76 = *(void *)(v64 + 24);
            sub_10002866C(v64, v66);
            swift_retain();
            swift_retain();
            sub_10002858C(v75, v76);
            swift_release();
            swift_release();
LABEL_20:
            sub_10001E798(v64, v66);
            break;
          default:
            *(void *)(swift_task_alloc() + 16) = v90;
            sub_100028710();
            sub_10001E798(v64, v66);
            swift_task_dealloc();
            break;
        }
        dispatch thunk of HashFunction.finalize()();
        sub_100014474();
        v77();
        SHA256Digest.withUnsafeBytes<A>(_:)();
        sub_10001E798(v64, v66);
        double v78 = (double)(*(void *)(v12 + 408) % 0x64uLL);
        sub_100014474();
        v79();
        a17 = v78 / 100.0;
      }
      else
      {
        a17 = (double)arc4random_uniform(0x2710u) / 10000.0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100016FF8();
      a17 = *(double *)(v91 + 64);
      sub_100013B30(v91, (void (*)(void))type metadata accessor for CachedSession);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  *(double *)(v13 + 128) = a17;
  *(void *)(v13 + 136) = &_swiftEmptyArrayStorage;
  *(void *)(v13 + 144) = &_swiftEmptyArrayStorage;
  *(unsigned char *)(v13 + 152) = 0;
  *(void *)(v13 + 160) = 1701736302;
  *(void *)(v13 + 168) = 0xE400000000000000;
  *(unsigned char *)(v13 + 176) = 2;
  long long v80 = *a3;
  long long v81 = a3[1];
  *(_OWORD *)(v12 + 288) = *a3;
  *(_OWORD *)(v12 + 352) = v81;
  long long v82 = a3[2];
  *(_OWORD *)(v12 + 368) = v82;
  *(_OWORD *)(v13 + 208) = v81;
  *(_OWORD *)(v13 + 224) = v82;
  *(_OWORD *)(v13 + 192) = v80;
  *(unsigned char *)(v13 + 240) = a4;
  sub_100019B14(v12 + 288);
  sub_100019B14(v12 + 352);
  sub_100019B14(v12 + 368);
  swift_bridgeObjectRetain();
  v83 = (void *)swift_task_alloc();
  *(void *)(v12 + 584) = v83;
  void *v83 = v12;
  v83[1] = sub_100005144;
  sub_10001AAC4();
  return sub_100006B2C(v84, v85, v86, v87);
}

uint64_t sub_10000E6C0()
{
  return swift_task_alloc();
}

void sub_10000E6D8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_10000E704()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10000E724()
{
  return v0;
}

BOOL sub_10000E738(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10000E754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100070928);
}

uint64_t sub_10000E768()
{
  sub_1000094A8();
  *(unsigned char *)(v1 + 464) = v2;
  *(void *)(v1 + 344) = v3;
  *(void *)(v1 + 352) = v0;
  sub_100016384();
  *(void *)(v1 + 360) = v4;
  uint64_t v5 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  sub_100009374(v5);
  *(void *)(v1 + 368) = sub_10000E6C0();
  uint64_t v6 = sub_100016CE0(&qword_1000A6740);
  sub_100009374(v6);
  *(void *)(v1 + 376) = sub_10000E8B8();
  *(void *)(v1 + 384) = swift_task_alloc();
  *(void *)(v1 + 392) = swift_task_alloc();
  *(void *)(v1 + 400) = swift_task_alloc();
  sub_10000E934();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10000E83C()
{
  return v0 + 8;
}

uint64_t sub_10000E848()
{
  return swift_arrayDestroy();
}

uint64_t sub_10000E860()
{
  return sub_100006898(v1, v0);
}

uint64_t sub_10000E87C(uint64_t result)
{
  *(void *)(v1 + 584) = result;
  return result;
}

uint64_t sub_10000E888()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_10000E8A0()
{
  *(void *)(v1 - 104) = *(void *)(v1 - 296);
  *(void *)(v1 - 96) = v0;
  return *(void *)(v1 - 288);
}

uint64_t sub_10000E8B8()
{
  return swift_task_alloc();
}

uint64_t sub_10000E8D4()
{
  return _s10RTCUtility9XPCObjectOwet_0(*(void *)(v0 + 432), 1, *(void *)(v0 + 528));
}

uint64_t sub_10000E8FC()
{
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[53];
  uint64_t v4 = v0[61];
  return sub_1000288D4(v2, v3, v4, 1);
}

BOOL sub_10000E918(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10000E940()
{
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 320);
  return sub_10003D340(v2, v3);
}

uint64_t sub_10000E97C()
{
  return v0;
}

uint64_t sub_10000E9A8()
{
  *(void *)(v0 + 216) = *(void *)(v0 + 96);
  return sub_100005B18(v0 + 216);
}

uint64_t sub_10000E9CC(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_38;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v42 = v10 + 16;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_10003D118(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_36;
  }
  uint64_t v41 = a1;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = &_swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      unint64_t v14 = String.index(after:)();
      goto LABEL_21;
    }
    int v20 = (v15 >> 14 == v14 >> 14) & a2;
    if (v20 != 1)
    {
      if (v14 >> 14 < v15 >> 14) {
        goto LABEL_38;
      }
      uint64_t v21 = String.subscript.getter();
      uint64_t v43 = v23;
      uint64_t v44 = v22;
      uint64_t v45 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001B06C();
        uint64_t v13 = v28;
      }
      unint64_t v25 = v13[2];
      if (v25 >= v13[3] >> 1)
      {
        sub_10001B06C();
        uint64_t v13 = v29;
      }
      v13[2] = v25 + 1;
      uint64_t v26 = &v13[4 * v25];
      v26[4] = v21;
      v26[5] = v45;
      v26[6] = v44;
      v26[7] = v43;
      *(void *)uint64_t v42 = v13;
    }
    uint64_t v27 = String.index(after:)();
    unint64_t v14 = v27;
    *(void *)(v47 + 16) = v27;
    if ((v20 & 1) == 0 && v13[2] == v41) {
      break;
    }
    unint64_t v15 = v27;
    unint64_t v16 = v27;
LABEL_21:
    if (v48 == v14 >> 14) {
      goto LABEL_30;
    }
  }
  unint64_t v16 = v27;
  unint64_t v15 = v27;
LABEL_30:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  if (v48 < v16 >> 14)
  {
LABEL_38:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v31 = String.subscript.getter();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  sub_10001B294();
  uint64_t v38 = *(void *)(*(void *)v42 + 16);
  sub_10001B234(v38);
  uint64_t v13 = *(void **)v42;
  v13[2] = v38 + 1;
  char v39 = &v13[4 * v38];
  v39[4] = v31;
  v39[5] = v33;
  v39[6] = v35;
  v39[7] = v37;
  *(void *)uint64_t v42 = v13;
LABEL_35:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_36:
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_10000EE1C(uint64_t *a1)
{
  return sub_10000EE3C(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_10000EE3C(uint64_t *a1, uint64_t *a2)
{
  return sub_10000EE68(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_10000EE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t *sub_10000EEAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 5u:
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_8;
      case 6u:
      case 7u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10000F020()
{
  sub_1000113BC();
  uint64_t v1 = v0[11];
  sub_100009448();
  uint64_t v2 = sub_10000F6DC();
  if (v1)
  {
    v0[17] = v1;
    uint64_t v5 = v0[8];
    uint64_t v4 = sub_1000428DC;
  }
  else
  {
    sub_10000F0FC(v2, v0[5], v0[6], v0[7], v0[14], v0[15]);
    uint64_t v3 = v0[8];
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100008864;
    uint64_t v5 = v3;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10000F0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084CA0;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_10009E600;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_10009E600;
  *(void *)(inited + 72) = a5;
  *(void *)(inited + 80) = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000F264(inited);
  if (v6)
  {
    swift_setDeallocating();
    return sub_10000F200();
  }
  else
  {
    swift_setDeallocating();
    sub_10000F200();
    do
    {
      uint64_t v13 = sub_10000F9A8();
      uint64_t result = swift_release();
    }
    while (v13);
  }
  return result;
}

uint64_t sub_10000F200()
{
  sub_100016CE0(&qword_1000A75B0);
  swift_arrayDestroy();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10000F264(uint64_t a1)
{
  uint64_t v3 = v1;
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v19 = a1 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  while (1)
  {
    if (v6 == v4)
    {
      long long v14 = 0u;
      long long v15 = 0u;
      unint64_t v6 = v4;
      long long v13 = 0u;
    }
    else
    {
      if (v6 >= v4) {
        goto LABEL_11;
      }
      sub_10000F43C(v19 + 40 * v6, (uint64_t)v12);
      *(void *)&long long v13 = v6;
      sub_10000F3BC(v12, (uint64_t)&v13 + 8);
      ++v6;
    }
    sub_10000F3D4((uint64_t)&v13, (uint64_t)&v16);
    if (!v18) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v7 = v16;
    uint64_t result = sub_10000F3BC(&v17, (uint64_t)&v13);
    BOOL v8 = __OFADD__(v7, 1);
    uint64_t v9 = v7 + 1;
    if (v8) {
      break;
    }
    uint64_t v10 = *((void *)&v14 + 1);
    uint64_t v11 = v15;
    sub_100017740(&v13, *((uint64_t *)&v14 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(v3, v9, v10, v11);
    uint64_t result = sub_10001610C((uint64_t)&v13);
    if (v2) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000F3BC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10000F3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A6508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000F43C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000F4A0(uint64_t a1, uint64_t a2)
{
  return sub_10000F4BC(a1, a2);
}

uint64_t sub_10000F4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = String.utf8CString.getter();
  swift_retain();
  uint64_t v5 = swift_retain();
  LODWORD(a2) = sub_10000F55C(v5, a1, a2, v4);
  uint64_t result = swift_release();
  if (a2)
  {
    sub_10001E280();
    uint64_t v7 = sub_10000932C();
    sub_100013F88(v7, v8);
    return sub_100017D10(v9, v10);
  }
  return result;
}

uint64_t sub_10000F55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  int v4 = a3;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 16);
  if (v6 >> 31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = a1;
  uint64_t v7 = *(sqlite3_stmt **)(a2 + 16);
  if (qword_1000A5FB0 != -1) {
LABEL_9:
  }
    swift_once();
  uint64_t v8 = sqlite3_bind_text(v7, v4, (const char *)(v5 + 32), v6, (void (__cdecl *)(void *))qword_1000A5FB8);
  swift_release();
  swift_release();
  return v8;
}

uint64_t sub_10000F640(uint64_t a1, uint64_t a2)
{
  return sub_10000F65C(a1, a2, *v2);
}

uint64_t sub_10000F65C(uint64_t result, uint64_t a2, sqlite3_int64 a3)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t result = sqlite3_bind_int64(*(sqlite3_stmt **)(result + 16), a2, a3);
  if (result)
  {
    sub_10001E280();
    uint64_t v3 = sub_10000932C();
    sub_100015124(v3, v4);
    return sub_100017D10(v5, 0xD000000000000014);
  }
  return result;
}

uint64_t sub_10000F6DC()
{
  if (*(unsigned char *)(*(void *)(v0 + 112) + 24))
  {
    sub_10001E2CC();
    sub_10000932C();
    *uint64_t v1 = 3;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v2 = String.utf8CString.getter();
    swift_retain();
    uint64_t v3 = swift_retain();
    int v4 = sub_10000F810(v3, v0, v2, &v10);
    swift_release();
    uint64_t v5 = v10;
    if (v10 && !v4)
    {
      type metadata accessor for SQLiteDB.Statement();
      uint64_t result = swift_allocObject();
      *(unsigned char *)(result + 24) = 0;
      *(void *)(result + 16) = v5;
      return result;
    }
    sub_10001E280();
    uint64_t v7 = sub_10000932C();
    sub_100015124(v7, v8);
    *(void *)(v9 + 8) = 0xD00000000000001BLL;
    *(void *)(v9 + 16) = 0x8000000100088CA0;
  }
  return swift_willThrow();
}

uint64_t sub_10000F810(uint64_t result, uint64_t a2, uint64_t a3, sqlite3_stmt **a4)
{
  unint64_t v4 = *(void *)(a3 + 16);
  if (v4 >> 31)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a2 + 112) + 16), (const char *)(result + 32), v4, a4, 0);
    swift_release();
    swift_release();
    return v5;
  }
  return result;
}

uint64_t type metadata accessor for SQLiteDB.Statement()
{
  return self;
}

uint64_t sub_10000F8A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10000F9A8();
  if (!v1)
  {
    if (result)
    {
      sub_1000046E0(result, a1);
      uint64_t v5 = sub_10000F9A8();
      swift_release();
      if (v5)
      {
        do
        {
          uint64_t v6 = sub_10000F9A8();
          swift_release();
        }
        while (v6);
        sub_10001E2CC();
        uint64_t v7 = sub_10000932C();
        sub_100009454(v7, v8);
        swift_release();
        return sub_10001F87C((uint64_t)a1);
      }
      else
      {
        return swift_release();
      }
    }
    else
    {
      sub_10001E2CC();
      sub_10000932C();
      unsigned char *v4 = 0;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_10000F9A8()
{
  uint64_t v1 = v0;
  int v2 = sqlite3_step(*(sqlite3_stmt **)(v0 + 16));
  if (v2 == 101)
  {
    *(unsigned char *)(v0 + 24) = 1;
    return 0;
  }
  else
  {
    int v3 = v2;
    if (v2 == 100)
    {
      swift_retain();
    }
    else
    {
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      strcpy((char *)v9, "Statement ((");
      BYTE5(v9[1]) = 0;
      HIWORD(v9[1]) = -5120;
      v4._uint64_t countAndFlagsBits = sub_10001D268();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._object = (void *)0x8000000100088DE0;
      v5._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v5);
      uint64_t v6 = v9[0];
      uint64_t v1 = v9[1];
      sub_10001E280();
      sub_10000932C();
      *(_DWORD *)uint64_t v7 = v3;
      *(void *)(v7 + 8) = v6;
      *(void *)(v7 + 16) = v1;
      swift_willThrow();
    }
  }
  return v1;
}

uint64_t sub_10000FAC0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10000FB24(void *a1)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(void *)(v1 + 32);
    xpc_type_t type = xpc_get_type(a1);
    uint64_t ObjectType = swift_getObjectType();
    if (type == (xpc_type_t)&_xpc_type_error) {
      (*(void (**)(void *, uint64_t, uint64_t))(v4 + 8))(a1, ObjectType, v4);
    }
    else {
      (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(a1, ObjectType, v4);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_10000FBF8()
{
  uint64_t v3 = v0;
  uint64_t v4 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  uint64_t v5 = sub_100009374(v4);
  __chkstk_darwin(v5);
  sub_10001615C();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_100016CE0(&qword_1000A7EE0);
  uint64_t v10 = sub_100009374(v9);
  __chkstk_darwin(v10);
  sub_10001615C();
  long long v13 = (uint64_t *)(v12 - v11);
  uint64_t v14 = swift_unknownObjectRetain();
  uint64_t v15 = XPCMessage.init(fromXPC:)(v14);
  if (v15)
  {
    long long v17 = (void *)v15;
    char v18 = v16;
    swift_unknownObjectRetain();
    MessageKeys.sessionID.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    RTCXPCDictionary.subscript.getter(v17, (uint64_t)v13);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = type metadata accessor for XPCObject();
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v13, 1, v19) == 1)
    {
      sub_1000115C4((uint64_t)v13, &qword_1000A7EE0);
    }
    else if (swift_getEnumCaseMultiPayload() == 8)
    {
      uint64_t v25 = v13[1];
      if (v18 != 1)
      {
        uint64_t v29 = *v13;
        uint64_t v30 = type metadata accessor for TaskPriority();
        sub_1000094CC(v30);
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = 0;
        *(void *)(v27 + 24) = 0;
        *(void *)(v27 + 32) = v3;
        *(void *)(v27 + 40) = v29;
        *(void *)(v27 + 48) = v25;
        *(void *)(v27 + 56) = v17;
        *(unsigned char *)(v27 + 64) = v18;
        swift_unknownObjectRetain();
        swift_retain();
        uint64_t v28 = &unk_1000A6BE8;
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100032B10((uint64_t)v13);
    }
    uint64_t v26 = type metadata accessor for TaskPriority();
    sub_1000094CC(v26);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = 0;
    *(void *)(v27 + 32) = v3;
    *(void *)(v27 + 40) = v17;
    *(unsigned char *)(v27 + 48) = v18;
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v28 = &unk_1000A6BD8;
LABEL_16:
    sub_10000FF80(v8, (uint64_t)v28, v27);
    swift_unknownObjectRelease();
    swift_release();
    return;
  }
  if (qword_1000A5FE0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100012884(v20, (uint64_t)qword_1000A6AE0);
  swift_retain();
  uint64_t v21 = (void *)Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (sub_1000331E0(v22))
  {
    sub_100014490();
    uint64_t v31 = sub_1000094B4();
    sub_10001666C(4.8751e-34);
    sub_10001227C(v1, v2, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000164F8((void *)&_mh_execute_header, v23, v24, "received invalid XPC message from %{public}s");
    sub_1000331B4();
    sub_100009474();
    sub_100009474();
  }
  else
  {

    swift_release();
  }
}

uint64_t sub_10000FF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (_s10RTCUtility9XPCObjectOwet_0(a1, 1, v6) == 1)
  {
    sub_1000115C4(a1, (uint64_t *)&unk_1000A83E0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

void *MessageKeys.sessionID.unsafeMutableAddressor()
{
  return &static MessageKeys.sessionID;
}

uint64_t XPCMessage.init(fromXPC:)(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A7EE0);
  __chkstk_darwin(v2 - 8);
  sub_10001615C();
  uint64_t v5 = (Swift::Int64 *)(v4 - v3);
  swift_getObjectType();
  if (OS_xpc_object.type()()._rawValue == &_xpc_type_dictionary)
  {
    uint64_t v6 = (void *)swift_unknownObjectRetain();
    id v7 = xpc_dictionary_get_value(v6, "type");
    XPCObject.init(_:)(v7, (uint64_t)v5);
    swift_unknownObjectRelease();
    uint64_t v8 = type metadata accessor for XPCObject();
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v5, 1, v8) == 1)
    {
      swift_unknownObjectRelease();
      sub_10007643C((uint64_t)v5);
      return 0;
    }
    if (swift_getEnumCaseMultiPayload() != 3)
    {
      swift_unknownObjectRelease();
      sub_100032B10((uint64_t)v5);
      return 0;
    }
    if (XPCMessage.MessageType.init(rawValue:)(*v5).value != RTCUtility_XPCMessage_MessageType_unknownDefault) {
      return a1;
    }
  }
  swift_unknownObjectRelease();
  return 0;
}

Swift::OpaquePointer __swiftcall OS_xpc_object.type()()
{
  return (Swift::OpaquePointer)xpc_get_type(v0);
}

RTCUtility::XPCMessage::MessageType_optional __swiftcall XPCMessage.MessageType.init(rawValue:)(Swift::Int64 rawValue)
{
  if ((unint64_t)rawValue >= 5) {
    LOBYTE(rawValue) = 5;
  }
  return (RTCUtility::XPCMessage::MessageType_optional)rawValue;
}

uint64_t sub_100010260()
{
  if (*(unsigned char *)(v0 + 457) != 1)
  {
    if (*(unsigned char *)(v0 + 457))
    {
      if (qword_1000A5FE0 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      os_log_type_t v12 = sub_100012884(v11, (uint64_t)qword_1000A6AE0);
      sub_10001A540();
      swift_unknownObjectRetain_n();
      long long v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (!sub_100018208(v14))
      {
        swift_unknownObjectRelease_n();
        swift_release_n();
LABEL_30:

LABEL_40:
        sub_100019B8C();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_10000E83C();
        return v52();
      }
      char v15 = *(unsigned char *)(v0 + 457);
      char v16 = (_DWORD *)sub_1000141D0();
      uint64_t v91 = sub_1000152A0();
      *char v16 = 136315394;
      *(unsigned char *)(v0 + 456) = v15;
      uint64_t v17 = String.init<A>(describing:)();
      unint64_t v19 = v18;
      *(void *)(v0 + 176) = sub_10001227C(v17, v18, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      sub_1000128F4();
      *(void *)(v0 + 96) = sub_10001227C(v0 + 176, v19, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      sub_100017634((void *)&_mh_execute_header, v13, v12, "invalid client message %s from %{public}s");
      swift_arrayDestroy();
      sub_100009474();
LABEL_28:
      sub_100009474();
      goto LABEL_30;
    }
    uint64_t v1 = *(void *)(v0 + 336);
    uint64_t v2 = *(void **)(v0 + 240);
    MessageKeys.clientName.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    RTCXPCDictionary.subscript.getter(v2, v1);
    swift_bridgeObjectRelease();
    type metadata accessor for XPCObject();
    int v3 = sub_100011360(v1);
    uint64_t v4 = *(void *)(v0 + 336);
    if (v3 == 1)
    {
      uint64_t v5 = *(void *)(v0 + 336);
LABEL_5:
      sub_1000115C4(v5, &qword_1000A7EE0);
LABEL_24:
      if (qword_1000A5FE0 != -1) {
        swift_once();
      }
      uint64_t v35 = sub_10001A684();
      sub_100012884(v35, (uint64_t)qword_1000A6AE0);
      swift_retain();
      long long v13 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      BOOL v37 = os_log_type_enabled(v13, v36);
      uint64_t v38 = *(void *)(v0 + 248);
      if (!v37)
      {
        swift_release();
        goto LABEL_30;
      }
      char v39 = (uint8_t *)sub_100014490();
      uint64_t v91 = sub_1000094B4();
      *(_DWORD *)char v39 = 136446210;
      uint64_t v41 = *(void *)(v38 + 128);
      unint64_t v40 = *(void *)(v38 + 136);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 136) = sub_10001227C(v41, v40, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v13, v36, "missing required values in create session from %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      goto LABEL_28;
    }
    if (swift_getEnumCaseMultiPayload() != 8)
    {
      uint64_t v34 = v4;
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v0 + 328);
    *(void *)(v0 + 344) = *(void *)(v4 + 8);
    MessageKeys.serviceName.unsafeMutableAddressor();
    sub_10001154C();
    sub_100013FA8(v20);
    swift_bridgeObjectRelease();
    int v21 = sub_100011360(v20);
    uint64_t v22 = *(void *)(v0 + 328);
    if (v21 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = v22;
      goto LABEL_5;
    }
    if (swift_getEnumCaseMultiPayload() != 8)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = v22;
      goto LABEL_23;
    }
    uint64_t v54 = *(void *)(v0 + 320);
    char v55 = *(void **)(v0 + 240);
    *(void *)(v0 + 352) = *(void *)(v22 + 8);
    MessageKeys.clientType.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    RTCXPCDictionary.subscript.getter(v55, v54);
    swift_bridgeObjectRelease();
    int v56 = sub_100011360(v54);
    unint64_t v24 = *(void *)(v0 + 320);
    if (v56 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v57 = v24;
LABEL_46:
      sub_1000115C4(v57, &qword_1000A7EE0);
      goto LABEL_24;
    }
LABEL_60:
    if (swift_getEnumCaseMultiPayload() != 8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100032B10(v24);
      goto LABEL_24;
    }
    uint64_t v66 = *(void *)(v0 + 312);
    v67 = *(void **)(v0 + 240);
    *(void *)(v0 + 360) = *(void *)(v24 + 8);
    MessageKeys.realtime.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    RTCXPCDictionary.subscript.getter(v67, v66);
    swift_bridgeObjectRelease();
    int v68 = sub_100011360(v66);
    uint64_t v69 = *(char **)(v0 + 312);
    if (v68 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v57 = (uint64_t)v69;
      goto LABEL_46;
    }
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v70 = *(void *)(v0 + 304);
      char v71 = *v69;
      MessageKeys.hierarchyToken.unsafeMutableAddressor();
      sub_10001154C();
      sub_100013FA8(v70);
      swift_bridgeObjectRelease();
      int v72 = sub_100011360(v70);
      uint64_t v73 = *(void *)(v0 + 304);
      if (v72 == 1)
      {
LABEL_66:
        sub_1000115C4(v73, &qword_1000A7EE0);
LABEL_74:
        uint64_t v76 = 0;
LABEL_75:
        *(void *)(v0 + 368) = v76;
        uint64_t v78 = *(void *)(v0 + 288);
        MessageKeys.samplingUUID.unsafeMutableAddressor();
        sub_10001154C();
        sub_100013FA8(v78);
        swift_bridgeObjectRelease();
        int v79 = sub_100011360(v78);
        uint64_t v80 = *(void *)(v0 + 288);
        if (v79 == 1)
        {
          sub_1000115C4(*(void *)(v0 + 288), &qword_1000A7EE0);
        }
        else
        {
          if (sub_100011620() == 8)
          {
            uint64_t v81 = *(void *)(v80 + 8);
            goto LABEL_81;
          }
          sub_100032B10(v80);
        }
        uint64_t v81 = 0;
LABEL_81:
        *(void *)(v0 + 376) = v81;
        uint64_t v82 = *(void *)(v0 + 280);
        MessageKeys.eager.unsafeMutableAddressor();
        sub_10001154C();
        sub_100013FA8(v82);
        swift_bridgeObjectRelease();
        if (sub_100011360(v82) != 1)
        {
          sub_100032BF4(*(void *)(v0 + 280), *(void *)(v0 + 272));
          if (sub_100011620() == 2)
          {
            uint64_t v46 = (void *)v0;
            int v83 = **(unsigned __int8 **)(v0 + 272);
            sub_1000115C4(*(void *)(v0 + 280), &qword_1000A7EE0);
            if ((v71 & 1) != 0 || !v83 || qword_1000A6080 == -1)
            {
LABEL_89:
              uint64_t v84 = v46[33];
              uint64_t v85 = (void *)v46[30];
              MessageKeys.overrideSampling.unsafeMutableAddressor();
              swift_bridgeObjectRetain();
              RTCXPCDictionary.subscript.getter(v85, v84);
              swift_bridgeObjectRelease();
              int v86 = sub_100011360(v84);
              uint64_t v87 = v46[33];
              if (v86 == 1)
              {
                sub_1000115C4(v46[33], &qword_1000A7EE0);
              }
              else if (swift_getEnumCaseMultiPayload() != 5)
              {
                sub_100032B10(v87);
              }
              if (*(void *)(v46[31] + 112))
              {
                swift_retain();
                XPCConnection.remoteUID.getter();
                swift_release();
                uint64_t v88 = qword_1000AF3B0;
                v46[48] = qword_1000AF3B0;
                if (v88)
                {
                  swift_retain();
                  v89 = (void *)swift_task_alloc();
                  v46[49] = v89;
                  void *v89 = v46;
                  v89[1] = sub_100007E60;
                  return sub_10001CA2C();
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                __break(1u);
              }
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              __break(1u);
              return result;
            }
LABEL_99:
            swift_once();
            goto LABEL_89;
          }
          sub_100032B10(*(void *)(v0 + 272));
        }
        uint64_t v46 = (void *)v0;
        sub_1000115C4(*(void *)(v0 + 280), &qword_1000A7EE0);
        goto LABEL_89;
      }
      if (sub_100011620() == 8)
      {
        uint64_t v74 = *(void *)(v0 + 296);
        uint64_t v75 = *(void **)(v0 + 240);
        uint64_t v76 = *(void *)(v73 + 8);
        MessageKeys.hierarchyLevel.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        RTCXPCDictionary.subscript.getter(v75, v74);
        swift_bridgeObjectRelease();
        int v77 = sub_100011360(v74);
        uint64_t v73 = *(void *)(v0 + 296);
        if (v77 == 1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_66;
        }
        if (sub_100011620() == 3) {
          goto LABEL_75;
        }
        swift_bridgeObjectRelease();
      }
      sub_100032B10(v73);
      goto LABEL_74;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = (uint64_t)v69;
LABEL_23:
    sub_100032B10(v34);
    goto LABEL_24;
  }
  uint64_t v6 = *(void *)(v0 + 256);
  id v7 = *(void **)(v0 + 240);
  MessageKeys.sessionID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  RTCXPCDictionary.subscript.getter(v7, v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for XPCObject();
  int v9 = _s10RTCUtility9XPCObjectOwet_0(v6, 1, v8);
  uint64_t v10 = *(unint64_t **)(v0 + 256);
  if (v9 == 1)
  {
    sub_1000115C4(*(void *)(v0 + 256), &qword_1000A7EE0);
    goto LABEL_32;
  }
  if (swift_getEnumCaseMultiPayload() != 8)
  {
    sub_100032B10((uint64_t)v10);
LABEL_32:
    if (qword_1000A5FE0 != -1) {
      swift_once();
    }
    uint64_t v42 = sub_10001A684();
    sub_100012884(v42, (uint64_t)qword_1000A6AE0);
    swift_retain();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    BOOL v45 = sub_100018208(v44);
    uint64_t v46 = *(void **)(v0 + 248);
    if (v45)
    {
      uint64_t v47 = (uint8_t *)sub_100014490();
      uint64_t v91 = sub_1000094B4();
      *(_DWORD *)uint64_t v47 = 136446210;
      uint64_t v48 = v46[16];
      unint64_t v49 = v46[17];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 88) = sub_10001227C(v48, v49, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v7, "missing required value in end session from %{public}s", v47, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_release();
    }

    if (!xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 240))) {
      goto LABEL_40;
    }
    sub_100017FD0();
    if (!v51)
    {
      __break(1u);
      goto LABEL_99;
    }
    goto LABEL_39;
  }
  unint64_t v24 = *v10;
  unint64_t v23 = v10[1];
  swift_beginAccess();
  uint64_t v25 = sub_100006298();
  *(void *)(v0 + 440) = v25;
  swift_endAccess();
  if (!v25)
  {
    if (qword_1000A5FE0 != -1) {
      swift_once();
    }
    uint64_t v58 = sub_10001A684();
    sub_100012884(v58, (uint64_t)qword_1000A6AE0);
    sub_10001A540();
    swift_bridgeObjectRetain();
    unint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    BOOL v61 = sub_100033198(v60);
    uint64_t v62 = *(void *)(v0 + 248);
    if (v61)
    {
      v63 = (uint8_t *)sub_1000141D0();
      uint64_t v91 = sub_1000152A0();
      *(_DWORD *)v63 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 104) = sub_10001227C(v24, v23, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_1000331D0();
      uint64_t v64 = *(void *)(v62 + 128);
      unint64_t v24 = *(void *)(v62 + 136);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 112) = sub_10001227C(v64, v24, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "attempt to close non-existing session %{public}s from %{public}s", v63, 0x16u);
      sub_10000E848();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      sub_1000331FC();
      swift_release_n();
    }

    if (!xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 240))) {
      goto LABEL_40;
    }
    sub_100017FD0();
    if (!v51)
    {
      __break(1u);
      goto LABEL_60;
    }
LABEL_39:
    xpc_connection_send_message(*(xpc_connection_t *)(v51 + 16), v50);
    swift_unknownObjectRelease();
    goto LABEL_40;
  }
  if (qword_1000A5FE0 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_10001A684();
  sub_100012884(v26, (uint64_t)qword_1000A6AE0);
  sub_10001A540();
  swift_bridgeObjectRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = *(void *)(v0 + 248);
  if (v29)
  {
    uint64_t v31 = sub_1000141D0();
    uint64_t v91 = sub_1000152A0();
    *(_DWORD *)uint64_t v31 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 120) = sub_10001227C(v24, v23, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 12) = 2082;
    uint64_t v33 = *(void *)(v30 + 128);
    unint64_t v32 = *(void *)(v30 + 136);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 128) = sub_10001227C(v33, v32, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001A9B4();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "session end requested for %{public}s by %{public}s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    sub_1000331FC();
    sub_10001A9B4();
  }

  unint64_t v65 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v65;
  *unint64_t v65 = v0;
  v65[1] = sub_10001BEA0;
  return sub_10006BD2C(1);
}

void *RTCXPCDictionary.subscript.getter@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = String.utf8CString.getter();
  xpc_object_t v5 = xpc_dictionary_get_value(a1, (const char *)(v4 + 32));
  swift_release();

  return XPCObject.init(_:)(v5, a2);
}

uint64_t sub_10001130C(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100011324(uint64_t a1)
{
  *(void *)(v1 + 736) = a1;
  *(_WORD *)uint64_t v2 = 514;
  *(unsigned char *)(v2 + 2) = 34;
  return swift_release();
}

uint64_t sub_10001134C()
{
  return v0;
}

uint64_t sub_100011360(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v1);
}

uint64_t sub_100011378()
{
  return v0;
}

uint64_t sub_100011390()
{
  return swift_beginAccess();
}

uint64_t sub_1000113C8()
{
  return swift_slowAlloc();
}

uint64_t sub_1000113EC()
{
  return swift_retain();
}

unint64_t sub_100011410()
{
  return 0xD000000000000021;
}

uint64_t sub_100011424()
{
  return v0;
}

uint64_t sub_100011438()
{
  sub_100028960();
  sub_100028948(*(void *)(v0 - 176), *(void *)(v0 - 184), *(_DWORD *)(v0 - 168));
  return swift_bridgeObjectRelease();
}

uint64_t sub_100011478()
{
  return v0;
}

uint64_t sub_100011490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(v6 + 16);
  return sub_1000577A8(a1, a2, v9, a4, a5, v7, v5);
}

uint64_t sub_1000114D8()
{
  _s10RTCUtility9XPCObjectOwst_0(v0, 0, 1, v1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100011510()
{
  return 7955819;
}

uint64_t sub_100011520()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_10001154C()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_100011578()
{
  return sub_100014BA8();
}

uint64_t sub_1000115AC()
{
  return v0;
}

uint64_t sub_1000115C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100016CE0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100011620()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_10001164C()
{
  return swift_retain();
}

__n128 sub_100011684(__n128 a1)
{
  *uint64_t v1 = a1;
  __n128 result = *(__n128 *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 48);
  *uint64_t v3 = result;
  _OWORD *v4 = v6;
  return result;
}

uint64_t sub_1000116A8()
{
  return v0;
}

uint64_t sub_1000116C0()
{
  uint64_t v89 = v1;
  uint64_t v5 = *(void *)(v1 + 352);
  uint64_t v6 = OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents;
  uint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents);
  BOOL v8 = __CFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
LABEL_48:
    swift_once();
    goto LABEL_25;
  }
  uint64_t v10 = *(void *)(v1 + 400);
  uint64_t v11 = *(void *)(v1 + 344);
  *(void *)(v5 + OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents) = v9;
  sub_1000127CC(v11, (uint64_t (*)(void))type metadata accessor for EventValue, v10);
  uint64_t v12 = type metadata accessor for EventValue();
  if (_s10RTCUtility9XPCObjectOwet_0(v10, 1, v12) != 1)
  {
    sub_10001277C(*(void *)(v1 + 400), *(void *)(v1 + 392), &qword_1000A6740);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)(v1 + 328) = **(void **)(v1 + 392);
      goto LABEL_7;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(v1 + 336) = **(void **)(v1 + 392);
LABEL_7:
      uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v3 = v14;
      goto LABEL_10;
    }
    sub_100013B30(*(void *)(v1 + 392), (void (*)(void))type metadata accessor for EventValue);
  }
  unint64_t v3 = 0xE300000000000000;
  uint64_t v86 = 4079420;
LABEL_10:
  uint64_t v15 = *(void *)(v1 + 384);
  uint64_t v16 = *(void *)(v1 + 344);
  sub_1000173F0(*(void *)(v1 + 400), &qword_1000A6740);
  sub_1000127CC(v16, (uint64_t (*)(void))type metadata accessor for EventValue, v15);
  if (_s10RTCUtility9XPCObjectOwet_0(v15, 1, v12) != 1)
  {
    sub_10001277C(*(void *)(v1 + 384), *(void *)(v1 + 376), &qword_1000A6740);
    int v17 = swift_getEnumCaseMultiPayload();
    if (v17 == 2)
    {
      *(void *)(v1 + 312) = **(void **)(v1 + 376);
    }
    else
    {
      if (v17 != 1)
      {
        uint64_t v4 = 4079420;
        sub_100013B30(*(void *)(v1 + 376), (void (*)(void))type metadata accessor for EventValue);
        goto LABEL_18;
      }
      *(void *)(v1 + 320) = **(void **)(v1 + 376);
    }
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v0 = v18;
    goto LABEL_19;
  }
  uint64_t v4 = 4079420;
LABEL_18:
  unint64_t v0 = 0xE300000000000000;
LABEL_19:
  int v19 = *(unsigned __int8 *)(v1 + 464);
  sub_1000173F0(*(void *)(v1 + 384), &qword_1000A6740);
  uint64_t v20 = 0x69746C616572202DLL;
  if (!v19) {
    uint64_t v20 = 0;
  }
  uint64_t v84 = v20;
  if (v19) {
    unint64_t v2 = 0xEA0000000000656DLL;
  }
  else {
    unint64_t v2 = 0xE000000000000000;
  }
  if (qword_1000A60A8 != -1) {
    goto LABEL_48;
  }
LABEL_25:
  uint64_t v21 = type metadata accessor for Logger();
  *(void *)(v1 + 408) = sub_100012884(v21, (uint64_t)qword_1000A81B0);
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v22, v83);
  unint64_t v24 = *(void **)(v1 + 352);
  if (!v23)
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
LABEL_29:

    uint64_t v39 = *(void *)(v1 + 344);
    uint64_t v38 = *(void *)(v1 + 352);
    uint64_t v28 = *(void *)(v38 + 112);
    *(void *)(v1 + 416) = v28;
    uint64_t v25 = *(void *)(v38 + 120);
    *(void *)(v1 + 424) = v25;
    memcpy((void *)(v1 + 16), (const void *)(v38 + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider), 0x60uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100012BF0(v1 + 16);
    uint64_t v40 = sub_100019400();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v88[0] = v39;
    sub_1000146A8(v40, (uint64_t)sub_100017560, 0, isUniquelyReferenced_nonNull_native, v88);
    uint64_t v37 = v88[0];
    *(void *)(v1 + 432) = v88[0];
    swift_bridgeObjectRelease();
    sub_100012B84(v1 + 16);
    uint64_t v42 = qword_1000A6080;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v42 == -1) {
      goto LABEL_30;
    }
    goto LABEL_50;
  }
  log = v22;
  unint64_t v78 = v2;
  unint64_t v79 = v0;
  unint64_t v80 = v3;
  uint64_t v81 = v4;
  uint64_t v82 = v5;
  uint64_t v25 = swift_slowAlloc();
  v88[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v25 = 136447490;
  uint64_t v27 = v24[14];
  unint64_t v26 = v24[15];
  swift_bridgeObjectRetain();
  *(void *)(v1 + 264) = sub_10001227C(v27, v26, v88);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_WORD *)(v25 + 12) = 2082;
  uint64_t v28 = v24[25];
  uint64_t v29 = v24[26];
  uint64_t v30 = v24[27];
  uint64_t v31 = v24[28];
  uint64_t v32 = v24[29];
  *(void *)(v1 + 112) = v24[24];
  *(void *)(v1 + 120) = v28;
  *(void *)(v1 + 128) = v29;
  *(void *)(v1 + 136) = v30;
  *(void *)(v1 + 144) = v31;
  *(void *)(v1 + 152) = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_100012C5C();
  uint64_t v34 = v6;
  unint64_t v36 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 272) = sub_10001227C(v33, v36, v88);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_WORD *)(v25 + 22) = 2050;
  uint64_t v37 = *(void *)(v82 + v34);
  swift_release();
  if (v37)
  {
    *(void *)(v1 + 280) = v37 - 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 32) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v1 + 288) = sub_10001227C(v86, v80, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 42) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v1 + 296) = sub_10001227C(v81, v79, v88);
    sub_1000129A0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 52) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v1 + 304) = sub_10001227C(v84, v78, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v22 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v83, "session %{public}s (%{public}s) sending message %{public}llu %{public}s:%{public}s%s", (uint8_t *)v25, 0x3Eu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
    goto LABEL_29;
  }
  __break(1u);
LABEL_50:
  uint64_t result = swift_once();
LABEL_30:
  if (byte_1000AF3C8)
  {
    uint64_t v44 = *(void *)(v1 + 368);
    uint64_t v45 = *(void *)(v1 + 352);
    type metadata accessor for TaskPriority();
    uint64_t v46 = sub_10001AAF4();
    _s10RTCUtility9XPCObjectOwst_0(v46, v47, v48, v49);
    uint64_t v50 = sub_100072A20(&qword_1000A83F8, (void (*)(uint64_t))type metadata accessor for Session);
    uint64_t v51 = (void *)swift_allocObject();
    v51[2] = v45;
    v51[3] = v50;
    v51[4] = v45;
    v51[5] = v28;
    v51[6] = v25;
    v51[7] = v37;
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10006BBE8(v44, (uint64_t)&unk_1000A8420, (uint64_t)v51);
    uint64_t result = swift_release();
  }
  char v52 = (unsigned char *)(v1 + 464);
  uint64_t v53 = *(void *)(v1 + 352);
  uint64_t v54 = *(void *)(v53 + OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend);
  if (v54)
  {
    uint64_t v55 = *(void *)(v1 + 368);
    uint64_t v85 = *(void *)(v1 + 360);
    uint64_t v56 = *(void *)(v53 + OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend + 8);
    uint64_t v57 = type metadata accessor for TaskPriority();
    sub_100072E58(v57);
    uint64_t v58 = sub_100072A20(&qword_1000A83F8, (void (*)(uint64_t))type metadata accessor for Session);
    unint64_t v59 = (void *)swift_allocObject();
    v59[2] = v53;
    v59[3] = v58;
    v59[4] = v54;
    v59[5] = v56;
    v59[6] = v28;
    v59[7] = v25;
    v59[8] = v37;
    v59[9] = v53;
    v59[10] = v85;
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_10000FF80(v55, (uint64_t)&unk_1000A8410, (uint64_t)v59);
    uint64_t result = swift_release();
    char v52 = (unsigned char *)(v1 + 464);
  }
  if (*v52)
  {
    uint64_t v60 = *(void *)(v1 + 352);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v61 = v60 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend;
    uint64_t v62 = *(void *)(v60 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend);
    if (v62)
    {
      uint64_t v63 = *(void *)(v1 + 368);
      uint64_t v87 = *(void *)(v1 + 360);
      uint64_t v64 = *(void *)(v1 + 352);
      uint64_t v65 = *(void *)(v61 + 8);
      uint64_t v66 = type metadata accessor for TaskPriority();
      sub_100072E58(v66);
      uint64_t v67 = sub_100072A20(&qword_1000A83F8, (void (*)(uint64_t))type metadata accessor for Session);
      int v68 = (void *)swift_allocObject();
      v68[2] = v64;
      v68[3] = v67;
      v68[4] = v64;
      v68[5] = v62;
      v68[6] = v65;
      v68[7] = v28;
      v68[8] = v25;
      v68[9] = v37;
      v68[10] = v87;
      swift_retain_n();
      swift_unknownObjectRetain();
      sub_10000FF80(v63, (uint64_t)&unk_1000A8400, (uint64_t)v68);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v72 = Logger.logObject.getter();
      uint64_t v73 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v72, (os_log_type_t)v73))
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v73, "no backend for realtime session", v74, 2u);
        sub_100009474();
      }
    }
    sub_10000B448();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    sub_1000128BC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v69 = qword_1000AF3A0;
  *(void *)(v1 + 440) = qword_1000AF3A0;
  if (v69)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)swift_task_alloc();
    *(void *)(v1 + 448) = v70;
    *uint64_t v70 = v1;
    v70[1] = sub_1000091D0;
    sub_1000128BC();
    return sub_10000815C();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001227C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100012350(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000124A8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000124A8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10001610C((uint64_t)v12);
  return v7;
}

uint64_t sub_100012350(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100032950((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_100012504(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000124A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_100012504(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_10001259C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = sub_1000129D4(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_1000129D4((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_10001259C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_100012710(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100012710(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100016CE0(&qword_1000A6C20);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10001277C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100016CE0(a3);
  sub_10000948C();
  uint64_t v4 = sub_100017388();
  v5(v4);
  return a2;
}

uint64_t sub_1000127CC@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 16) && (sub_100014BA8(), (v5 & 1) != 0))
  {
    uint64_t v6 = a2(0);
    sub_10000948C();
    sub_100016E1C();
    uint64_t v7 = a3;
    uint64_t v8 = 0;
    uint64_t v9 = 1;
    uint64_t v10 = v6;
  }
  else
  {
    a2(0);
    uint64_t v7 = sub_10001AAF4();
  }

  return _s10RTCUtility9XPCObjectOwst_0(v7, v8, v9, v10);
}

uint64_t sub_100012884(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000128D8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000128F4()
{
  *(_WORD *)(v0 + 12) = 2082;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100012918()
{
  return sub_10002779C(v0, v1);
}

uint64_t sub_100012930(float a1)
{
  *unint64_t v1 = a1;
  return swift_getErrorValue();
}

uint64_t sub_100012958()
{
  return v0;
}

uint64_t sub_100012970()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000129A0()
{
  return v0;
}

uint64_t sub_1000129AC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

char *sub_1000129D4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100016CE0(&qword_1000A6C20);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  long long v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100032A28(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100012AAC(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100012AAC(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t sub_100012B84(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012BF0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012C5C()
{
  long long v11 = *v0;
  uint64_t v10 = v11;
  sub_100019B14((uint64_t)&v11);
  v1._uint64_t countAndFlagsBits = 58;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  uint64_t v2 = *((void *)v0 + 2);
  BOOL v3 = (void *)*((void *)v0 + 3);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 58;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  uint64_t v7 = *((void *)v0 + 4);
  unint64_t v6 = (void *)*((void *)v0 + 5);
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v7;
  v8._object = v6;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100012D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t sub_100012D60(uint64_t a1, uint64_t a2)
{
  return sub_10006D1BC(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_100012D68()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100012D94(uint64_t a1, void *a2)
{
  return sub_1000135B0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100012DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for XPCObject();
  sub_10000948C();
  __chkstk_darwin(v4);
  sub_10001615C();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for EventValue();
  sub_10000948C();
  __chkstk_darwin(v9);
  long long v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016DC4();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      sub_100013AD8(a1, (void (*)(void))type metadata accessor for XPCObject);
      *long long v11 = *(unsigned char *)v7;
      sub_100014CD8();
      goto LABEL_7;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      sub_100013AD8(a1, (void (*)(void))type metadata accessor for XPCObject);
      *(void *)long long v11 = *(void *)v7;
      sub_100014CD8();
      goto LABEL_7;
    case 8u:
      sub_100013AD8(a1, (void (*)(void))type metadata accessor for XPCObject);
      uint64_t v16 = *(void *)(v7 + 8);
      *(void *)long long v11 = *(void *)v7;
      *((void *)v11 + 1) = v16;
      sub_100014CD8();
      goto LABEL_7;
    case 9u:
      sub_100013AD8(a1, (void (*)(void))type metadata accessor for XPCObject);
      type metadata accessor for UUID();
      sub_10000948C();
      sub_1000134EC();
      v17();
      sub_100014CD8();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      unint64_t v18 = 0;
      int v19 = 0;
      goto LABEL_8;
    case 0xBu:
      uint64_t v20 = *(void **)v7;
      int64_t count = xpc_array_get_count(*(xpc_object_t *)v7);
      uint64_t v22 = _swiftEmptyArrayStorage;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || count > _swiftEmptyArrayStorage[3] >> 1)
      {
        if (_swiftEmptyArrayStorage[2] <= count) {
          uint64_t v24 = count;
        }
        else {
          uint64_t v24 = _swiftEmptyArrayStorage[2];
        }
        uint64_t v22 = (void *)sub_10001EEBC(isUniquelyReferenced_nonNull_native, v24, 0, (uint64_t)_swiftEmptyArrayStorage);
      }
      uint64_t v42 = (uint64_t)v22;
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = &v42;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = sub_10004C5F0;
      *(void *)(v26 + 24) = v25;
      uint64_t v40 = sub_10004C604;
      uint64_t v41 = v26;
      aBlock = _NSConcreteStackBlock;
      uint64_t v37 = 1107296256;
      uint64_t v38 = sub_10004B000;
      uint64_t v39 = &unk_1000A00C0;
      uint64_t v27 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      xpc_array_apply(v20, v27);
      _Block_release(v27);
      swift_unknownObjectRelease();
      sub_100013AD8(a1, (void (*)(void))type metadata accessor for XPCObject);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (isEscapingClosureAtFileLocation)
      {
        __break(1u);
LABEL_21:
        __break(1u);
      }
      else
      {
        *(void *)long long v11 = v42;
        sub_100014CD8();
        swift_storeEnumTagMultiPayload();
        int v19 = 0;
        unint64_t v18 = sub_10004C5F0;
LABEL_8:
        sub_100013418();
        _s10RTCUtility9XPCObjectOwst_0(a2, 0, 1, v8);
        sub_1000135A0((uint64_t)v18);
        return sub_1000135A0((uint64_t)v19);
      }
      return result;
    case 0xCu:
      xpc_object_t v29 = *(xpc_object_t *)v7;
      uint64_t v42 = Dictionary.init(dictionaryLiteral:)();
      size_t v30 = xpc_dictionary_get_count(v29);
      sub_100016CE0((uint64_t *)&unk_1000A7870);
      Dictionary.reserveCapacity(_:)(v30);
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = &v42;
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = sub_10004C5D0;
      *(void *)(v32 + 24) = v31;
      uint64_t v40 = sub_100012D60;
      uint64_t v41 = v32;
      aBlock = _NSConcreteStackBlock;
      uint64_t v37 = 1107296256;
      uint64_t v38 = sub_100012D08;
      uint64_t v39 = &unk_1000A0048;
      uint64_t v33 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      xpc_dictionary_apply(v29, v33);
      _Block_release(v33);
      swift_unknownObjectRelease_n();
      sub_100013AD8(a1, (void (*)(void))type metadata accessor for XPCObject);
      char v34 = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (v34) {
        goto LABEL_21;
      }
      *(void *)long long v11 = v42;
      sub_100014CD8();
      swift_storeEnumTagMultiPayload();
      unint64_t v18 = 0;
      int v19 = sub_10004C5D0;
      goto LABEL_8;
    default:
      sub_100013AD8(a1, (void (*)(void))type metadata accessor for XPCObject);
      sub_100013AD8(v7, (void (*)(void))type metadata accessor for XPCObject);
      sub_10001A580();
      return _s10RTCUtility9XPCObjectOwst_0(v12, v13, v14, v8);
  }
}

uint64_t sub_100013418()
{
  uint64_t v1 = sub_100017258();
  v2(v1);
  sub_10000948C();
  sub_1000134EC();
  v3();
  return v0;
}

uint64_t sub_100013470()
{
  uint64_t v3 = *(void *)(v0 + 432);
  return sub_10001227C(v3, v1, (uint64_t *)(v0 + 736));
}

uint64_t sub_10001348C()
{
  return v0;
}

uint64_t sub_1000134C4()
{
  return swift_beginAccess();
}

void sub_100013508(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_100013534()
{
  os_log_type_t v6 = (void *)(v4 + v3);
  uint64_t v7 = (void *)(v4 + v3 + *(int *)(v1 + 56));
  *os_log_type_t v6 = 0x7375746174735FLL;
  v6[1] = v2;
  *uint64_t v7 = v0;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100013570(uint64_t a1, uint64_t a2)
{
  sub_100012884(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1000135A0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000135B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a4;
  uint64_t v43 = a3;
  uint64_t v5 = sub_100016CE0(&qword_1000A6740);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = type metadata accessor for EventValue();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100016CE0(&qword_1000A7EE0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for XPCObject();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v40 - v21;
  uint64_t v41 = String.init(cString:)();
  uint64_t v24 = v23;
  uint64_t v25 = (void *)swift_unknownObjectRetain();
  XPCObject.init(_:)(v25, (uint64_t)v16);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v16, 1, v17) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = &qword_1000A7EE0;
    uint64_t v27 = (uint64_t)v16;
  }
  else
  {
    sub_100016FF8();
    sub_100016E1C();
    sub_100012DA0((uint64_t)v20, (uint64_t)v10);
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v10, 1, v11) != 1)
    {
      sub_100016FF8();
      sub_100016E1C();
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v8, 0, 1, v11);
      sub_100013D4C((uint64_t)v8, v41, v24);
      sub_100013B30((uint64_t)v13, (void (*)(void))type metadata accessor for EventValue);
      sub_100013B30((uint64_t)v22, (void (*)(void))type metadata accessor for XPCObject);
      return 1;
    }
    sub_100013B30((uint64_t)v22, (void (*)(void))type metadata accessor for XPCObject);
    swift_bridgeObjectRelease();
    uint64_t v26 = &qword_1000A6740;
    uint64_t v27 = (uint64_t)v10;
  }
  sub_1000173F0(v27, v26);
  xpc_type_t type = xpc_get_type(a2);
  xpc_type_get_name(type);
  uint64_t v29 = String.init(cString:)();
  unint64_t v31 = v30;
  uint64_t v32 = v43;
  if (qword_1000A60A8 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_100012884(v33, (uint64_t)qword_1000A81B0);
  swift_retain_n();
  swift_bridgeObjectRetain();
  char v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136446466;
    uint64_t v37 = *(void *)(v32 + 112);
    unint64_t v38 = *(void *)(v32 + 120);
    swift_bridgeObjectRetain();
    uint64_t v44 = sub_10001227C(v37, v38, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v44 = sub_10001227C(v29, v31, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "session %{public}s skipping invalid payload value of type %{public}s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  return 1;
}

uint64_t sub_100013AD8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000948C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100013B30(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000948C();
  sub_100014474();
  v3();
  return a1;
}

uint64_t sub_100013B84(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 6:
    case 7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for XPCObject(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
      uint64_t result = swift_unknownObjectRelease();
      break;
    case 7:
      uint64_t v3 = *a1;
      unint64_t v4 = a1[1];
      uint64_t result = sub_1000088D0(v3, v4);
      break;
    case 8:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 9:
      uint64_t v5 = type metadata accessor for UUID();
      uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
      uint64_t result = v6(a1, v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100013D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100016CE0(&qword_1000A6740);
  uint64_t v8 = sub_100009374(v7);
  __chkstk_darwin(v8);
  sub_10001403C();
  sub_10000948C();
  __chkstk_darwin(v9);
  if (_s10RTCUtility9XPCObjectOwet_0(a1, 1, v10) == 1)
  {
    sub_10001739C(a1, &qword_1000A6740);
    sub_100004218(a2, a3, (uint64_t *)&unk_1000A7860, (void (*)(void))type metadata accessor for EventValue);
    swift_bridgeObjectRelease();
    return sub_10001739C(v3, &qword_1000A6740);
  }
  else
  {
    uint64_t v12 = sub_100013418();
    sub_100013F0C(v12, v13, v14, (uint64_t *)&unk_1000A7860, (void (*)(void))type metadata accessor for EventValue);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100013EC4()
{
  return 0;
}

uint64_t sub_100013ED0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100013EE8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 - 192);
  return _s10RTCUtility9XPCObjectOwst_0(v4, 1, 1, a1);
}

uint64_t sub_100013F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  return sub_1000140FC(v7, v6, v5, a4, a5);
}

uint64_t sub_100013F2C()
{
  return swift_bridgeObjectRetain();
}

void sub_100013F88(uint64_t a1, _DWORD *a2)
{
  *a2 = v2;
}

void *sub_100013FA8@<X0>(uint64_t a1@<X8>)
{
  return RTCXPCDictionary.subscript.getter(v1, a1);
}

uint64_t sub_100013FE0()
{
  return v0 + 8;
}

uint64_t sub_100013FF0()
{
  return swift_arrayDestroy();
}

uint64_t sub_100014020()
{
  return sub_10005B84C(v1, v2, v0);
}

uint64_t sub_10001403C()
{
  return type metadata accessor for EventValue();
}

uint64_t sub_100014064()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_100014080()
{
  return sub_100056F0C(v0, v1);
}

unint64_t sub_1000140A0()
{
  return sub_100014BA8();
}

uint64_t sub_1000140BC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000140DC()
{
  return v0;
}

uint64_t sub_1000140FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_100014268();
  uint64_t v9 = sub_1000174B0();
  sub_100014320(v9, v10, a3, v11, a4, a5, a5);
  void *v5 = v13;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000141AC(uint64_t a1)
{
  *(void *)(v1 + 720) = a1;
  return v1 + 720;
}

uint64_t sub_1000141B8()
{
  return sub_1000088D0(v1, v0);
}

uint64_t sub_1000141D0()
{
  return swift_slowAlloc();
}

uint64_t sub_1000141E8(__n128 a1)
{
  a1.n128_u64[0] = 0x404E000000000000;
  return URLRequest.init(url:cachePolicy:timeoutInterval:)(v1, 0, a1);
}

void sub_10001420C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100014238()
{
  return sub_10000F6DC();
}

uint64_t sub_100014250@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)(a1 + 16 * v1);
  uint64_t result = v3[1];
  *(void *)(v2 + 632) = result;
  *(void *)(v2 + 640) = *v3;
  return result;
}

void sub_100014268()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_100014284()
{
  return v0;
}

uint64_t sub_100014298()
{
  return 0x73656C7572;
}

uint64_t sub_1000142AC()
{
  return swift_retain_n();
}

_WORD *sub_1000142DC(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1000142E8()
{
  uint64_t result = *(void *)(v0 + 144);
  *(void *)(v1 + 120) = result;
  *(unsigned char *)(v1 + 176) = *(unsigned char *)(result + 32);
  return result;
}

void sub_1000142FC()
{
  sub_10001E8DC();
}

void sub_100014320(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, void (*a6)(void), void (*a7)(void))
{
  uint64_t v10 = v7;
  Swift::Int v15 = *v7;
  sub_100014BA8();
  sub_10001459C();
  if (v18)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v19 = v16;
  char v20 = v17;
  sub_100016CE0(a5);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v21 = sub_100014BA8();
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v19 = v21;
LABEL_5:
  if (v20)
  {
    a6(0);
    sub_10004C6D0();
    sub_1000144F4();
  }
  else
  {
    sub_1000145FC(v19, a2, a3, a1, *v10, a7);
    sub_1000144F4();
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_100014480()
{
  return v0 + 720;
}

uint64_t sub_100014490()
{
  return swift_slowAlloc();
}

uint64_t sub_1000144A8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000144D0()
{
  return swift_task_alloc();
}

unint64_t sub_1000144E8(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_100014510(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 296) = a1;
  *(void *)(v2 - 280) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100014538()
{
  return *(void *)(v0 + 392);
}

uint64_t sub_100014560(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_100014574(uint64_t a1)
{
  *(void *)(v1 + 192) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000145C4(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000145FC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  *(void *)(a5 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  uint64_t v7 = (void *)(*(void *)(a5 + 48) + 16 * a1);
  *uint64_t v7 = a2;
  v7[1] = a3;
  a6(0);
  uint64_t result = sub_100013418();
  uint64_t v9 = *(void *)(a5 + 16);
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v11;
  }
  return result;
}

uint64_t sub_1000146A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for EventValue();
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v43 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v42 = (char *)v41 - v14;
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)v41 - v15;
  uint64_t v17 = sub_100016CE0((uint64_t *)&unk_1000A8440);
  __chkstk_darwin(v17 - 8);
  unint64_t v19 = (void *)((char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100015718(a1, a2, a3, &v44);
  v41[1] = a1;
  swift_bridgeObjectRetain();
  v41[0] = a3;
  swift_retain();
  sub_100016994((uint64_t)v19);
  uint64_t v20 = sub_100016CE0(&qword_1000A6750);
  while (1)
  {
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v19, 1, v20) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_100015754();
      return swift_release();
    }
    uint64_t v22 = *v19;
    uint64_t v21 = v19[1];
    sub_100016FF8();
    uint64_t v23 = *a5;
    unint64_t v25 = sub_100014BA8();
    uint64_t v26 = *(void *)(v23 + 16);
    BOOL v27 = (v24 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      break;
    }
    char v29 = v24;
    if (*(void *)(v23 + 24) >= v28)
    {
      if ((a4 & 1) == 0)
      {
        sub_100016CE0((uint64_t *)&unk_1000A7860);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_100014E20(v28, a4 & 1, (uint64_t (*)(void))type metadata accessor for EventValue, (uint64_t *)&unk_1000A8450);
      unint64_t v30 = sub_100014BA8();
      if ((v29 & 1) != (v31 & 1)) {
        goto LABEL_17;
      }
      unint64_t v25 = v30;
    }
    uint64_t v32 = *a5;
    if (v29)
    {
      unint64_t v33 = *(void *)(v45 + 72) * v25;
      uint64_t v34 = (uint64_t)v43;
      sub_100016E1C();
      uint64_t v35 = (uint64_t)v42;
      sub_100016E1C();
      sub_100013B30(v34, (void (*)(void))type metadata accessor for EventValue);
      sub_100013B30((uint64_t)v16, (void (*)(void))type metadata accessor for EventValue);
      swift_bridgeObjectRelease();
      sub_10005AFB8(v35, *(void *)(*a5 + 56) + v33);
    }
    else
    {
      *(void *)(v32 + 8 * (v25 >> 6) + 64) |= 1 << v25;
      uint64_t v36 = (void *)(*(void *)(v32 + 48) + 16 * v25);
      *uint64_t v36 = v22;
      v36[1] = v21;
      sub_100016FF8();
      uint64_t v37 = *(void *)(v32 + 16);
      BOOL v38 = __OFADD__(v37, 1);
      uint64_t v39 = v37 + 1;
      if (v38) {
        goto LABEL_16;
      }
      *(void *)(v32 + 16) = v39;
    }
    sub_100016994((uint64_t)v19);
    uint64_t v20 = sub_100016CE0(&qword_1000A6750);
    a4 = 1;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100014AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100014BA8()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._finalize()();
  uint64_t v0 = sub_100014CD8();

  return sub_100014AC4(v0, v1, v2);
}

uint64_t sub_100014C38()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100014C50()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_100014C94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0x2D746E65746E6F43;
  unint64_t v4 = 0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, *(Swift::String *)&v3);
}

uint64_t sub_100014CC0()
{
  return v0;
}

uint64_t sub_100014CD8()
{
  return v0;
}

uint64_t sub_100014CF4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_100014D0C()
{
  v0[54] = 1;
  v0[60] = 1;
  v0[56] = 1;
}

uint64_t sub_100014D40()
{
  return sub_10001227C(v0, v1, (uint64_t *)(v2 - 96));
}

uint64_t sub_100014D5C()
{
  return swift_release_n();
}

uint64_t sub_100014D8C()
{
  return Identifiable<>.id.getter();
}

void sub_100014DA8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void *sub_100014DC8(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v14 + 160) = result;
  result[2] = v15;
  result[3] = v16;
  result[4] = a11;
  result[5] = v12;
  result[6] = v13;
  result[7] = v11;
  result[8] = v17;
  return result;
}

uint64_t sub_100014DE8()
{
  return v0;
}

void sub_100014E20(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t *a4)
{
  unint64_t v6 = v4;
  uint64_t v8 = a3(0);
  uint64_t v9 = sub_10001130C(v8);
  __chkstk_darwin(v9);
  uint64_t v10 = *v4;
  sub_100016CE0(a4);
  sub_100015320();
  char v48 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v10 + 16)) {
    goto LABEL_37;
  }
  sub_100015358();
  uint64_t v47 = v12;
  sub_10001532C();
  unint64_t v15 = v14 & v13;
  int64_t v46 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  swift_retain();
  int64_t v18 = 0;
  if (!v15) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = v26 + (v18 << 6))
  {
    BOOL v27 = (uint64_t *)(*(void *)(v10 + 48) + 16 * i);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    if (v48)
    {
      sub_100016FF8();
    }
    else
    {
      sub_100016E1C();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    sub_1000152B8();
    if (((v32 << v31) & ~*(void *)(v17 + 8 * v30)) == 0)
    {
      sub_1000114C4();
      while (++v34 != v35 || (v33 & 1) == 0)
      {
        BOOL v36 = v34 == v35;
        if (v34 == v35) {
          uint64_t v34 = 0;
        }
        v33 |= v36;
        if (*(void *)(v17 + 8 * v34) != -1)
        {
          sub_100016718();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    sub_10001521C();
LABEL_28:
    sub_10001528C();
    *(void *)(v17 + v37) |= v38;
    uint64_t v40 = (void *)(*(void *)(v11 + 48) + 16 * v39);
    *uint64_t v40 = v29;
    v40[1] = v28;
    sub_100016FF8();
    sub_1000152F0();
    if (v15) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_39;
    }
    if (v21 >= v46)
    {
      swift_release();
      unint64_t v6 = v4;
      uint64_t v22 = v47;
      goto LABEL_32;
    }
    uint64_t v22 = v47;
    ++v18;
    if (!v47[v21])
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v46) {
        goto LABEL_30;
      }
      if (!v47[v18]) {
        break;
      }
    }
LABEL_15:
    sub_100072CB4();
    unint64_t v15 = v25 & v24;
  }
  int64_t v23 = v21 + 2;
  if (v23 < v46)
  {
    if (!v47[v23])
    {
      while (1)
      {
        int64_t v18 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_40;
        }
        if (v18 >= v46) {
          goto LABEL_30;
        }
        ++v23;
        if (v47[v18]) {
          goto LABEL_15;
        }
      }
    }
    int64_t v18 = v23;
    goto LABEL_15;
  }
LABEL_30:
  swift_release();
  unint64_t v6 = v4;
LABEL_32:
  if (v48)
  {
    sub_100013F64();
    if (v42 != v43)
    {
      void *v22 = -1 << v41;
    }
    else
    {
      uint64_t v44 = sub_100072CA4();
      sub_100071D3C(v44, v45, v22);
    }
    *(void *)(v10 + 16) = 0;
  }
LABEL_37:
  swift_release();
  *unint64_t v6 = v11;
}

void sub_100015124(uint64_t a1, _DWORD *a2)
{
  *a2 = v2;
}

uint64_t sub_10001513C()
{
  return *(void *)(v0 + 320);
}

uint64_t sub_10001516C()
{
  return 0x554E447473616CLL;
}

uint64_t sub_100015188()
{
  return v0;
}

uint64_t sub_100015198()
{
  sub_100017740(v0, v0[3]);
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t sub_1000151D8()
{
  return v0 + 488;
}

uint64_t sub_1000151E8(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_1000151FC(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v1);
}

uint64_t sub_100015248@<X0>(Swift::Int a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10005B84C((Swift::Int *)(v2 - 128), a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t sub_100015268@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v2 - 160) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 160, v1);
}

uint64_t sub_1000152A0()
{
  return swift_slowAlloc();
}

uint64_t sub_1000152E4(uint64_t result)
{
  *(void *)(v1 + 656) = result;
  return result;
}

void sub_1000152F0()
{
  ++*(void *)(v0 + 16);
}

uint64_t sub_100015300(uint64_t a1)
{
  *(void *)(v2 + 144) = a1;
  *(void *)(v1 + v3) = a1;
  return swift_retain();
}

uint64_t sub_100015320()
{
  return v0;
}

uint64_t sub_100015340()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100015370()
{
  return v0;
}

uint64_t sub_10001537C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  sub_100017258();
  uint64_t v10 = type metadata accessor for EventValue();
  uint64_t v11 = sub_10001130C(v10);
  uint64_t v44 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  char v42 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v40 - v15;
  uint64_t v17 = sub_100016CE0((uint64_t *)&unk_1000A8440);
  uint64_t v18 = sub_100009374(v17);
  __chkstk_darwin(v18);
  uint64_t v20 = (void *)((char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100015718(v6, v5, a3, &v43);
  uint64_t v41 = v6;
  swift_bridgeObjectRetain();
  v40[1] = a3;
  swift_retain();
  sub_100016994((uint64_t)v20);
  uint64_t v21 = sub_100016CE0(&qword_1000A6750);
  while (1)
  {
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v20, 1, v21) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_100015754();
      return swift_release();
    }
    uint64_t v23 = *v20;
    uint64_t v22 = v20[1];
    sub_100016FF8();
    uint64_t v24 = *a5;
    unint64_t v26 = sub_100014BA8();
    uint64_t v27 = *(void *)(v24 + 16);
    BOOL v28 = (v25 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      break;
    }
    char v30 = v25;
    if (*(void *)(v24 + 24) >= v29)
    {
      if (a4)
      {
        if (v25) {
          goto LABEL_10;
        }
      }
      else
      {
        sub_100016CE0((uint64_t *)&unk_1000A7860);
        _NativeDictionary.copy()();
        if (v30) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      sub_100014E20(v29, a4 & 1, (uint64_t (*)(void))type metadata accessor for EventValue, (uint64_t *)&unk_1000A8450);
      unint64_t v31 = sub_100014BA8();
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_18;
      }
      unint64_t v26 = v31;
      if (v30)
      {
LABEL_10:
        uint64_t v33 = (uint64_t)v42;
        sub_100016E1C();
        sub_100013B30((uint64_t)v16, (void (*)(void))type metadata accessor for EventValue);
        swift_bridgeObjectRelease();
        sub_10005AFB8(v33, *(void *)(*a5 + 56) + *(void *)(v44 + 72) * v26);
        goto LABEL_14;
      }
    }
    uint64_t v34 = *a5;
    *(void *)(*a5 + 8 * (v26 >> 6) + 64) |= 1 << v26;
    uint64_t v35 = (void *)(*(void *)(v34 + 48) + 16 * v26);
    *uint64_t v35 = v23;
    v35[1] = v22;
    sub_100016FF8();
    uint64_t v36 = *(void *)(v34 + 16);
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_17;
    }
    *(void *)(v34 + 16) = v38;
LABEL_14:
    sub_100016994((uint64_t)v20);
    uint64_t v21 = sub_100016CE0(&qword_1000A6750);
    a4 = 1;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100015718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_100015754()
{
  return swift_release();
}

void sub_10001575C(void *a1)
{
}

void sub_100015774(void *a1)
{
  uint64_t v6 = sub_100016CE0(&qword_1000A6F68);
  uint64_t v7 = sub_100009374(v6);
  __chkstk_darwin(v7);
  sub_1000163F0();
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v62 - v9);
  uint64_t v68 = sub_100016CE0(&qword_1000A7890);
  sub_100014C1C();
  uint64_t v64 = v11;
  __chkstk_darwin(v12);
  sub_1000166B4(v13, v62);
  type metadata accessor for UUID();
  sub_100014C1C();
  int64_t v65 = v15;
  uint64_t v66 = v14;
  __chkstk_darwin(v14);
  sub_10001615C();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for EventValue();
  sub_100014C1C();
  uint64_t v67 = v20;
  __chkstk_darwin(v21);
  sub_100016584();
  __chkstk_darwin(v22);
  sub_1000168B4();
  __chkstk_darwin(v23);
  char v25 = (uint64_t *)((char *)&v62 - v24);
  sub_100016DC4();
  uint64_t v70 = v19;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100015FF0();
      sub_10001711C();
      sub_100018244();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      goto LABEL_44;
    case 2u:
      sub_100015FF0();
      sub_10001711C();
      sub_100018244();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      goto LABEL_44;
    case 3u:
      sub_100015198();
      sub_100016494((uint64_t)v71, v72);
      sub_100017334();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      goto LABEL_44;
    case 4u:
      sub_100015FF0();
      sub_10001711C();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      goto LABEL_44;
    case 5u:
      int64_t v27 = v65;
      uint64_t v26 = v66;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v65 + 32))(v18, v25, v66);
      sub_100015198();
      UUID.uuidString.getter();
      sub_10001711C();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v18, v26);
      goto LABEL_43;
    case 6u:
      uint64_t v28 = *v25;
      sub_100017690();
      dispatch thunk of Encoder.unkeyedContainer()();
      uint64_t v29 = *(void *)(v28 + 16);
      if (!v29) {
        goto LABEL_43;
      }
      sub_1000093B0();
      uint64_t v31 = v28 + v30;
      uint64_t v33 = *(void *)(v32 + 72);
      while (1)
      {
        sub_100016DC4();
        sub_100016494((uint64_t)v71, v72);
        sub_10004442C();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        if (v1) {
          break;
        }
        sub_100013AD8(v2, (void (*)(void))type metadata accessor for EventValue);
        v31 += v33;
        if (!--v29) {
          goto LABEL_43;
        }
      }
      sub_100013AD8(v2, (void (*)(void))type metadata accessor for EventValue);
LABEL_43:
      swift_bridgeObjectRelease();
LABEL_44:
      sub_10001610C((uint64_t)v71);
      return;
    case 7u:
      uint64_t v34 = *v25;
      sub_100017740(a1, a1[3]);
      sub_10004C630();
      dispatch thunk of Encoder.container<A>(keyedBy:)();
      uint64_t v35 = 0;
      uint64_t v63 = v34 + 64;
      uint64_t v66 = v34;
      sub_100017100();
      unint64_t v38 = v37 & v36;
      int64_t v65 = (unint64_t)(v39 + 63) >> 6;
      uint64_t v62 = v65 - 1;
      while (2)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
LABEL_17:
          char v42 = (void *)(*(void *)(v66 + 48) + 16 * v41);
          uint64_t v43 = v42[1];
          *uint64_t v3 = *v42;
          v3[1] = v43;
          sub_100016CE0((uint64_t *)&unk_1000A78A0);
          sub_100016DC4();
          sub_10001AA68();
          _s10RTCUtility9XPCObjectOwst_0(v44, v45, v46, v47);
          swift_bridgeObjectRetain();
          goto LABEL_27;
        }
        int64_t v48 = v35 + 1;
        if (__OFADD__(v35, 1))
        {
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        if (v48 >= v65) {
          goto LABEL_26;
        }
        if (*(void *)(v63 + 8 * v48)) {
          goto LABEL_21;
        }
        v35 += 2;
        if (v48 + 1 >= v65)
        {
          uint64_t v35 = v48;
        }
        else
        {
          if (*(void *)(v63 + 8 * v35)) {
            goto LABEL_21;
          }
          if (v48 + 2 < v65)
          {
            if (*(void *)(v63 + 8 * (v48 + 2))) {
              goto LABEL_21;
            }
            int64_t v60 = v48 + 3;
            if (v48 + 3 < v65)
            {
              if (!*(void *)(v63 + 8 * v60))
              {
                while (1)
                {
                  int64_t v61 = v60 + 1;
                  if (__OFADD__(v60, 1)) {
                    goto LABEL_46;
                  }
                  if (v61 >= v65) {
                    break;
                  }
                  ++v60;
                  if (*(void *)(v63 + 8 * v61)) {
                    goto LABEL_21;
                  }
                }
                uint64_t v35 = v62;
                goto LABEL_26;
              }
LABEL_21:
              sub_10001A7D4();
              unint64_t v38 = v50 & v49;
              unint64_t v41 = v52 + (v51 << 6);
              uint64_t v35 = v51;
              goto LABEL_17;
            }
            uint64_t v35 = v48 + 2;
          }
        }
LABEL_26:
        sub_100016CE0((uint64_t *)&unk_1000A78A0);
        sub_10001A580();
        _s10RTCUtility9XPCObjectOwst_0(v53, v54, v55, v56);
        unint64_t v38 = 0;
LABEL_27:
        sub_10004C67C((uint64_t)v3, (uint64_t)v10, &qword_1000A6F68);
        uint64_t v57 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
        if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v10, 1, v57) != 1)
        {
          uint64_t v59 = *v10;
          uint64_t v58 = v10[1];
          sub_100013418();
          v71[0] = v59;
          v71[1] = v58;
          sub_10004442C();
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          if (!v1)
          {
            swift_bridgeObjectRelease();
            sub_100013AD8(v4, (void (*)(void))type metadata accessor for EventValue);
            continue;
          }
          swift_bridgeObjectRelease();
          sub_100013AD8(v4, (void (*)(void))type metadata accessor for EventValue);
        }
        break;
      }
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v69, v68);
      return;
    default:
      sub_100017690();
      dispatch thunk of Encoder.singleValueContainer()();
      sub_100016494((uint64_t)v71, v72);
      sub_100017334();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      goto LABEL_43;
  }
}

uint64_t sub_100015E80(char a1)
{
  *uint64_t v1 = a1 & 1;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100015EA4()
{
  return swift_allocObject();
}

uint64_t sub_100015EBC()
{
  return Logger.init()();
}

uint64_t sub_100015EF4(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100015F44()
{
  return 0x6B6E756C7073;
}

uint64_t sub_100015F54()
{
  return swift_slowAlloc();
}

uint64_t sub_100015F80()
{
  return v0 + 8;
}

uint64_t sub_100015F90()
{
  uint64_t v2 = *(void *)(v0 + 184);
  *(void *)(v0 + 600) = v2;
  *(unsigned char *)(v0 + 668) = *(unsigned char *)(v2 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100015FD0()
{
  return v0;
}

uint64_t sub_100015FE8(uint64_t a1, uint64_t a2)
{
  return _swift_deallocObject(a1, a2, 7);
}

uint64_t sub_100015FF0()
{
  sub_100017740(v0, v0[3]);
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t sub_100016030()
{
  return 0x63736A5F343662;
}

uint64_t sub_100016048()
{
  return 0x656469727265766FLL;
}

uint64_t sub_100016068()
{
  return swift_slowAlloc();
}

BOOL sub_10001609C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000160DC()
{
  return 0x79726F6765746163;
}

uint64_t sub_1000160F4()
{
  return v0;
}

uint64_t sub_10001610C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001616C@<X0>(uint64_t a1@<X8>)
{
  return a1 + *(int *)(v1 + 56);
}

uint64_t sub_10001618C()
{
  return v0;
}

uint64_t sub_1000161B4(float a1)
{
  *uint64_t v1 = a1;
  return swift_getErrorValue();
}

void sub_1000161DC(uint64_t a1@<X8>)
{
  *(void *)(v1 + 384) = a1;
}

uint64_t sub_1000161F0()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_100016208()
{
  return 7496054;
}

uint64_t sub_100016218()
{
  return 0x65636976726573;
}

uint64_t sub_100016230()
{
  return v0;
}

void sub_10001623C()
{
  *(void *)(v1 + 8 * (v0 >> 6) + 64) |= 1 << v0;
  uint64_t v4 = (void *)(*(void *)(v1 + 48) + 16 * v0);
  void *v4 = v3;
  v4[1] = v2;
}

uint64_t sub_100016284()
{
  return v0;
}

uint64_t sub_100016298()
{
  return 0x7365707974;
}

uint64_t sub_1000162AC()
{
  return Logger.init()();
}

uint64_t sub_1000162E0(uint64_t a1)
{
  *(void *)(v1 + 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL sub_100016308(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_100016354()
{
  return 0x54494D4D4F43;
}

void sub_100016368(uint64_t a1@<X8>)
{
  v1[92] = a1;
  v1[93] = v2;
  v1[90] = 44;
  v1[91] = 0xE100000000000000;
}

uint64_t sub_100016398@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = v1;
  return sub_100016CE0(v2);
}

uint64_t sub_1000163BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

void sub_1000163D4()
{
  sub_100073204(v2, v0, v1);
}

void sub_10001640C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10001642C()
{
  return v0;
}

uint64_t sub_100016448(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  uint64_t v5 = (unint64_t *)((char *)a1->n128_u64 + v3);
  os_log_type_t v6 = (unint64_t *)((char *)a1->n128_u64 + v3 + *(int *)(v2 + 56));
  void *v5 = 0x646F6874656D5FLL;
  v5[1] = 0xE700000000000000;
  *os_log_type_t v6 = 0;
  return type metadata accessor for EventValue();
}

uint64_t sub_100016488()
{
  return 1701869940;
}

uint64_t sub_100016494(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000164E4(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

void sub_1000164F8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_100016518(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0x747065636341;
  unint64_t v4 = 0xE600000000000000;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, *(Swift::String *)&v3);
}

uint64_t sub_10001654C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000165A0()
{
  return 0x746E65696C63;
}

BOOL sub_1000165E0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000165EC()
{
  return *(void *)(v0 + 384);
}

uint64_t sub_100016604(sqlite3 *a1, const char *a2)
{
  return sqlite3_exec(a1, a2, 0, 0, 0);
}

uint64_t sub_100016630()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_10001666C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100016690()
{
  return swift_task_dealloc();
}

uint64_t sub_1000166B4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_1000166D4()
{
  return v0;
}

uint64_t sub_10001672C()
{
  return swift_slowAlloc();
}

void sub_100016760(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_100016780()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  sub_10001EF24(0, v2, 1, v0);
}

uint64_t sub_1000167A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = v14;
  sub_10000F3BC(v11, a1 + 64);
  *(void *)(a1 + 104) = a9;
  return swift_retain_n();
}

uint64_t sub_100016804(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_100028948(a1, a2, a3);
  sub_100028960();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100016844()
{
  return swift_task_dealloc();
}

BOOL sub_100016884(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000168A0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000168E0()
{
  sub_100028948(*(void *)(v0 + 176), *(void *)(v0 + 168), *(_DWORD *)(v0 + 164));
  return swift_bridgeObjectRelease();
}

uint64_t sub_100016928()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_10001694C(uint64_t a1)
{
  uint64_t v4 = v1 + *(int *)(a1 + 48);
  return sub_100037B90(v2, v4);
}

uint64_t sub_10001696C()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_100016994@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100016CE0(&qword_1000A6F68);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v35 - v9);
  uint64_t v11 = *v1;
  uint64_t v12 = v1[1];
  uint64_t v14 = v1[2];
  int64_t v13 = v1[3];
  int64_t v15 = v13;
  unint64_t v16 = v1[4];
  uint64_t v36 = v5;
  uint64_t v40 = v17;
  if (!v16)
  {
    int64_t v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v25 = (unint64_t)(v14 + 64) >> 6;
    if (v24 < v25)
    {
      unint64_t v26 = *(void *)(v12 + 8 * v24);
      if (v26)
      {
LABEL_7:
        uint64_t v37 = v14;
        uint64_t v38 = v12;
        uint64_t v39 = a1;
        uint64_t v18 = (v26 - 1) & v26;
        unint64_t v19 = __clz(__rbit64(v26)) + (v24 << 6);
        int64_t v15 = v24;
        goto LABEL_3;
      }
      int64_t v27 = v13 + 2;
      int64_t v15 = v13 + 1;
      if (v13 + 2 < v25)
      {
        unint64_t v26 = *(void *)(v12 + 8 * v27);
        if (v26)
        {
LABEL_10:
          int64_t v24 = v27;
          goto LABEL_7;
        }
        int64_t v15 = v13 + 2;
        if (v13 + 3 < v25)
        {
          unint64_t v26 = *(void *)(v12 + 8 * (v13 + 3));
          if (v26)
          {
            int64_t v24 = v13 + 3;
            goto LABEL_7;
          }
          int64_t v27 = v13 + 4;
          int64_t v15 = v13 + 3;
          if (v13 + 4 < v25)
          {
            unint64_t v26 = *(void *)(v12 + 8 * v27);
            if (v26) {
              goto LABEL_10;
            }
            int64_t v24 = v13 + 5;
            int64_t v15 = v13 + 4;
            if (v13 + 5 < v25)
            {
              unint64_t v26 = *(void *)(v12 + 8 * v24);
              if (v26) {
                goto LABEL_7;
              }
              int64_t v15 = v25 - 1;
              int64_t v28 = v13 + 6;
              while (v28 < v25)
              {
                unint64_t v26 = *(void *)(v12 + 8 * v28++);
                if (v26)
                {
                  int64_t v24 = v28 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v10, 1, 1, v3);
    uint64_t v18 = 0;
    goto LABEL_23;
  }
  uint64_t v37 = v14;
  uint64_t v38 = v12;
  uint64_t v39 = a1;
  uint64_t v18 = (v16 - 1) & v16;
  unint64_t v19 = __clz(__rbit64(v16)) | (v13 << 6);
LABEL_3:
  uint64_t v20 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v19);
  uint64_t v21 = v11;
  uint64_t v22 = *v20;
  uint64_t v23 = v20[1];
  type metadata accessor for EventValue();
  sub_100016E1C();
  *uint64_t v10 = v22;
  v10[1] = v23;
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v10, 0, 1, v3);
  uint64_t v11 = v21;
  swift_bridgeObjectRetain();
  uint64_t v12 = v38;
  a1 = v39;
  uint64_t v14 = v37;
LABEL_23:
  *uint64_t v1 = v11;
  v1[1] = v12;
  v1[2] = v14;
  v1[3] = v15;
  v1[4] = v18;
  uint64_t v29 = (void (*)(uint64_t))v1[5];
  uint64_t v30 = v40;
  sub_100016D74((uint64_t)v10, v40, &qword_1000A6F68);
  uint64_t v31 = 1;
  if (_s10RTCUtility9XPCObjectOwet_0(v30, 1, v3) != 1)
  {
    uint64_t v32 = v30;
    uint64_t v33 = (uint64_t)v36;
    sub_100016D74(v32, (uint64_t)v36, (uint64_t *)&unk_1000A78A0);
    v29(v33);
    sub_1000173F0(v33, (uint64_t *)&unk_1000A78A0);
    uint64_t v31 = 0;
  }
  uint64_t v34 = sub_100016CE0(&qword_1000A6750);
  return _s10RTCUtility9XPCObjectOwst_0(a1, v31, 1, v34);
}

uint64_t sub_100016CE0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t _s10RTCUtility9XPCObjectOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t _s10RTCUtility9XPCObjectOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100016D74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100016CE0(a3);
  sub_10000948C();
  uint64_t v4 = sub_1000172EC();
  v5(v4);
  return a2;
}

uint64_t sub_100016DC4()
{
  uint64_t v2 = sub_100017258();
  v3(v2);
  sub_10000948C();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v0, v1);
  return v0;
}

uint64_t sub_100016E1C()
{
  uint64_t v1 = sub_100017258();
  v2(v1);
  sub_10000948C();
  uint64_t v3 = sub_100017388();
  v4(v3);
  return v0;
}

void *sub_100016E68(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 5u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_6;
    case 6u:
    case 7u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_100016F98(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000948C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_100016FF8()
{
  uint64_t v1 = sub_100017258();
  v2(v1);
  sub_10000948C();
  uint64_t v3 = sub_1000172EC();
  v4(v3);
  return v0;
}

uint64_t sub_100017044()
{
  return 0;
}

uint64_t sub_100017068()
{
  return swift_release();
}

uint64_t sub_10001708C(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000170C8()
{
  return swift_slowAlloc();
}

uint64_t sub_10001711C()
{
  uint64_t v2 = *(void *)(v0 - 96);
  return sub_100016494(v0 - 120, v2);
}

uint64_t sub_100017138()
{
  return 0x68775F746E657665;
}

uint64_t sub_100017170()
{
  return 0x6E6F69746361;
}

uint64_t type metadata accessor for EventValue()
{
  uint64_t result = qword_1000A7958;
  if (!qword_1000A7958) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000171CC(uint64_t a1)
{
  return sub_1000288D4(a1, v1, v2, 1);
}

uint64_t sub_1000171E8()
{
  return swift_task_dealloc();
}

uint64_t sub_100017228()
{
  return swift_arrayDestroy();
}

uint64_t sub_100017244()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_100017258()
{
  return 0;
}

uint64_t sub_100017268()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_100017288()
{
  return swift_allocObject();
}

void sub_1000172A8()
{
  sub_10001E8DC();
}

uint64_t sub_1000172EC()
{
  return v0;
}

uint64_t sub_100017300()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_10001731C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100017334()
{
  return v0;
}

uint64_t sub_10001736C()
{
  return Error.localizedDescription.getter();
}

uint64_t sub_100017388()
{
  return v0;
}

uint64_t sub_10001739C(uint64_t a1, uint64_t *a2)
{
  sub_100016CE0(a2);
  sub_10000948C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1000173F0(uint64_t a1, uint64_t *a2)
{
  sub_100016CE0(a2);
  sub_10000948C();
  sub_100014474();
  v3();
  return a1;
}

uint64_t sub_100017458()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t sub_100017478()
{
  return v0;
}

uint64_t sub_100017490()
{
  return v0;
}

char *sub_1000174A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)v1 + *(int *)(v2 + 48);
  *uint64_t v1 = a1;
  return result;
}

uint64_t sub_1000174B0()
{
  return v0;
}

uint64_t sub_1000174BC()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000174D8()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000174F0()
{
  return v0;
}

void sub_100017504()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_100017518()
{
  return swift_release();
}

uint64_t sub_10001754C()
{
  return 0x7365756C6176;
}

uint64_t sub_100017560@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100016CE0((uint64_t *)&unk_1000A78A0);
  uint64_t v4 = sub_100016CE0(&qword_1000A6750);
  uint64_t result = sub_1000175C4((uint64_t)a2 + *(int *)(v4 + 48), *a1);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1000175C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100017618()
{
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[53];
  uint64_t v4 = v0[61];
  return sub_1000288D4(v2, v3, v4, 0);
}

void sub_100017634(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_100017660()
{
  return Error.localizedDescription.getter();
}

uint64_t sub_100017678(uint64_t a1)
{
  *(void *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100017690()
{
  uint64_t v1 = v0[3];
  sub_100017740(v0, v1);
  return v1;
}

void sub_1000176C0()
{
  sub_10001E8DC();
}

uint64_t sub_1000176E4()
{
  return 0;
}

void sub_1000176FC()
{
  *(void *)(v1 + 192) = v0;
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 8 * v3 + 32) = v4;
}

uint64_t sub_100017724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return a17;
}

void *sub_100017740(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

void *XPCObject.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for XPCObject();
  sub_10000948C();
  __chkstk_darwin(v5);
  sub_100014CE4();
  uint64_t v8 = (uint64_t *)(v6 - v7);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v31 - v11);
  __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v31 - v13);
  if (a1)
  {
    int64_t v15 = (void *)swift_unknownObjectRetain();
    xpc_type_t type = xpc_get_type(v15);
    if (type == (xpc_type_t)&_xpc_type_null)
    {
      sub_100017ED0();
      sub_1000193B4();
    }
    else
    {
      xpc_type_t v17 = type;
      if (type == (xpc_type_t)&_xpc_type_connection || type == (xpc_type_t)&_xpc_type_endpoint)
      {
LABEL_37:
        swift_unknownObjectRelease();
        *uint64_t v14 = a1;
        sub_1000193B4();
        goto LABEL_28;
      }
      if (type == (xpc_type_t)&_xpc_type_BOOL)
      {
        BOOL value = xpc_BOOL_get_value(a1);
        sub_100017ED0();
        *(unsigned char *)uint64_t v14 = value;
        sub_1000193B4();
      }
      else if (type == (xpc_type_t)&_xpc_type_int64)
      {
        int64_t v20 = xpc_int64_get_value(a1);
        sub_100017ED0();
        *uint64_t v14 = v20;
        sub_1000193B4();
      }
      else if (type == (xpc_type_t)&_xpc_type_uint64)
      {
        uint64_t v21 = xpc_uint64_get_value(a1);
        sub_100017ED0();
        *uint64_t v14 = v21;
        sub_1000193B4();
      }
      else if (type == (xpc_type_t)&_xpc_type_double)
      {
        double v22 = xpc_double_get_value(a1);
        sub_100017ED0();
        *(double *)uint64_t v14 = v22;
        sub_1000193B4();
      }
      else
      {
        if (type != (xpc_type_t)&_xpc_type_date)
        {
          if (type == (xpc_type_t)&_xpc_type_data)
          {
            uint64_t result = (void *)xpc_data_get_bytes_ptr(a1);
            if (result)
            {
              xpc_data_get_length(a1);
              uint64_t v24 = Data.init(bytes:count:)();
              uint64_t v26 = v25;
              sub_100017ED0();
              *uint64_t v12 = v24;
              v12[1] = v26;
              swift_storeEnumTagMultiPayload();
              uint64_t v27 = (uint64_t)v12;
LABEL_34:
              sub_100017EE8(v27, (uint64_t)v14);
              goto LABEL_29;
            }
            __break(1u);
          }
          else
          {
            if (type != (xpc_type_t)&_xpc_type_string)
            {
              if (type != (xpc_type_t)&_xpc_type_uuid)
              {
                if (type != (xpc_type_t)&_xpc_type_shmem)
                {
                  swift_unknownObjectRelease();
                  if (v17 != (xpc_type_t)&_xpc_type_array && v17 != (xpc_type_t)&_xpc_type_dictionary)
                  {
                    swift_unknownObjectRelease();
                    goto LABEL_17;
                  }
                  *uint64_t v14 = a1;
                  sub_1000193B4();
                  goto LABEL_28;
                }
                goto LABEL_37;
              }
              uint64_t result = (void *)xpc_uuid_get_bytes(a1);
              if (result)
              {
                UUID.init(uuid:)();
                sub_100017ED0();
                sub_1000193B4();
                goto LABEL_28;
              }
LABEL_42:
              __break(1u);
              return result;
            }
            uint64_t result = (void *)xpc_string_get_string_ptr(a1);
            if (result)
            {
              uint64_t v28 = String.init(cString:)();
              uint64_t v30 = v29;
              sub_100017ED0();
              *uint64_t v8 = v28;
              v8[1] = v30;
              swift_storeEnumTagMultiPayload();
              uint64_t v27 = (uint64_t)v8;
              goto LABEL_34;
            }
          }
          __break(1u);
          goto LABEL_42;
        }
        int64_t v23 = xpc_date_get_value(a1);
        sub_100017ED0();
        *uint64_t v14 = v23;
        sub_1000193B4();
      }
    }
LABEL_28:
    swift_storeEnumTagMultiPayload();
LABEL_29:
    sub_100017EE8((uint64_t)v14, a2);
    return (void *)sub_100017CF0();
  }
LABEL_17:

  return (void *)_s10RTCUtility9XPCObjectOwst_0(a2, 1, 1, v4);
}

__n128 sub_100017BA8@<Q0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  a2[1] = v3;
  __n128 result = *(__n128 *)(v4 - 176);
  *(__n128 *)(v4 - 128) = result;
  *a1 = result;
  return result;
}

uint64_t sub_100017BBC()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

unint64_t sub_100017BFC()
{
  return 0xD000000000000011;
}

uint64_t sub_100017C10()
{
  return 0x737265746C6966;
}

uint64_t sub_100017C28(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *uint64_t v1 = *(_OWORD *)(v2 - 128);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100017C60()
{
  return sub_10005E2E0(v2, v1, v3, v0);
}

uint64_t sub_100017C84(uint64_t a1)
{
  qword_1000AF3B8 = a1;
  return swift_release();
}

uint64_t sub_100017CC0()
{
  return 0x65756C6176;
}

uint64_t sub_100017CF0()
{
  return _s10RTCUtility9XPCObjectOwst_0(v1, 0, 1, v0);
}

uint64_t sub_100017D10@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (v2 - 32) | 0x8000000000000000;
  return swift_willThrow();
}

uint64_t sub_100017D30()
{
  return swift_allocObject();
}

void sub_100017D70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0x2D746E65746E6F43;
  unint64_t v4 = 0xEE006874676E654CLL;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, *(Swift::String *)&v3);
}

unint64_t sub_100017DA8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_100017DE4()
{
  return v0;
}

uint64_t sub_100017DFC()
{
  return v0;
}

uint64_t sub_100017E38(uint64_t a1, uint64_t *a2)
{
  return sub_100016CE0(a2);
}

uint64_t sub_100017E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18 = *(void **)(v15 + 72);
  unint64_t v19 = (void *)(*(void *)(a14 + 48) + 16 * v14);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  return sub_100016CE0(v16);
}

uint64_t sub_100017E9C()
{
  return 0;
}

uint64_t sub_100017EB8()
{
  return v0;
}

uint64_t sub_100017ED0()
{
  return swift_unknownObjectRelease_n();
}

uint64_t sub_100017EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for XPCObject()
{
  uint64_t result = qword_1000A8C30;
  if (!qword_1000A8C30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100017F94()
{
  sub_100028948(*(void *)(v0 + 464), *(void *)(v0 + 472), v1);
  sub_100028960();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100017FDC(uint64_t result)
{
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t sub_100017FF0()
{
  return v0;
}

uint64_t sub_100018024()
{
  return *(void *)(v0 + 424);
}

uint64_t *initializeWithCopy for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      *a1 = *a2;
      swift_unknownObjectRetain();
      goto LABEL_7;
    case 7u:
      uint64_t v7 = *a2;
      unint64_t v6 = a2[1];
      sub_10002779C(v7, v6);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_7;
    case 8u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 9u:
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_1000181EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 - 136);
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v3);
}

BOOL sub_100018208(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100018224@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = a1 + *(int *)(v1 + 48);
  return sub_100037C5C(v4, v2);
}

uint64_t sub_100018244()
{
  return v0;
}

uint64_t sub_10001825C()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100018274()
{
  return swift_release_n();
}

void sub_10001828C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 72) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000182C0(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v14;
  a1[2].n128_u64[1] = v13;
  a1[3].n128_u64[0] = v12;
  return a12 + 24;
}

uint64_t sub_1000182DC()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000182FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  sub_100014C1C();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A6080 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 == 1)
  {
    if (qword_1000A6088 != -1) {
      swift_once();
    }
    id v10 = (id)qword_1000AF3D0;
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 stringArrayForKey:v11];

    if (v12)
    {
      uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      int64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        unint64_t v90 = a2;
        uint64_t v91 = v6;
        uint64_t v89 = a1;
        uint64_t v93 = &_swiftEmptyArrayStorage;
        sub_100071E20(0, v14, 0);
        uint64_t v15 = v93;
        uint64_t v16 = v13 + 40;
        do
        {
          Swift::String v17 = String.lowercased()();
          uint64_t v93 = v15;
          unint64_t v19 = v15[2];
          unint64_t v18 = v15[3];
          if (v19 >= v18 >> 1)
          {
            sub_100071E20((char *)(v18 > 1), v19 + 1, 1);
            uint64_t v15 = v93;
          }
          v16 += 16;
          v15[2] = v19 + 1;
          *(Swift::String *)&v15[2 * v19 + 4] = v17;
          --v14;
        }
        while (v14);
        swift_bridgeObjectRelease();
        a1 = v89;
        a2 = v90;
        uint64_t v6 = v91;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v15 = &_swiftEmptyArrayStorage;
      }
      Swift::String v20 = String.lowercased()();
      char v21 = sub_100033214(v20._countAndFlagsBits, (uint64_t)v20._object, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
        Logger.init()();
        swift_bridgeObjectRetain_n();
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)sub_1000328A8();
          uint64_t v29 = (void *)swift_slowAlloc();
          uint64_t v91 = v6;
          uint64_t v93 = v29;
          *(_DWORD *)uint64_t v28 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v92 = sub_10001227C(a1, a2, (uint64_t *)&v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "client %{public}s blocked by defaults", v28, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v91 + 8))(v9, v4);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
        }
        return 0;
      }
    }
  }
  uint64_t v22 = 0x74696B656D6167;
  BOOL v23 = a1 == 19271 && a2 == 0xE200000000000000;
  if (v23 || (sub_100019A08() & 1) != 0) {
    return v22;
  }
  BOOL v25 = a1 == 19779 && a2 == 0xE200000000000000;
  if (v25 || (sub_100019A08() & 1) != 0)
  {
LABEL_26:
    sub_100014C78();
    return v22;
  }
  BOOL v30 = a1 == 17238 && a2 == 0xE200000000000000;
  if (v30 || (sub_100019A08() & 1) != 0) {
    goto LABEL_36;
  }
  uint64_t v22 = 0x7674656C707061;
  BOOL v31 = a1 == 22100 && a2 == 0xE200000000000000;
  if (v31 || (sub_100019A08() & 1) != 0) {
    return v22;
  }
  uint64_t v22 = 0x617273656E757469;
  BOOL v32 = a1 == 21065 && a2 == 0xE200000000000000;
  if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return v22;
  }
  uint64_t v22 = 0x6974736567677573;
  BOOL v33 = a1 == 18259 && a2 == 0xE200000000000000;
  if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return v22;
  }
  BOOL v34 = a1 == 21580 && a2 == 0xE200000000000000;
  if (v34 || (sub_1000192EC() & 1) != 0) {
    goto LABEL_36;
  }
  uint64_t v22 = 0x796C616E6178736FLL;
  BOOL v35 = a1 == 1096307535 && a2 == 0xE400000000000000;
  if (v35 || (sub_1000192EC() & 1) != 0) {
    return v22;
  }
  BOOL v36 = a1 == 0x4D41434B48 && a2 == 0xE500000000000000;
  if (v36 || (sub_1000192EC() & 1) != 0) {
    goto LABEL_36;
  }
  BOOL v37 = a1 == 0x534C482D4D43 && a2 == 0xE600000000000000;
  if (v37 || (sub_1000192EC() & 1) != 0) {
    goto LABEL_26;
  }
  BOOL v38 = a1 == 0x53424152432D4D43 && a2 == 0xE800000000000000;
  if (v38 || (sub_1000192EC() & 1) != 0) {
    return 0x6964656D65726F63;
  }
  uint64_t v22 = 1835364208;
  BOOL v39 = a1 == 0x53425550564544 && a2 == 0xE700000000000000;
  if (v39 || (sub_1000192EC() & 1) != 0) {
    return v22;
  }
  uint64_t v22 = 0x7061736F65646976;
  BOOL v40 = a1 == 0x534F45444956 && a2 == 0xE600000000000000;
  if (v40 || (sub_1000192EC() & 1) != 0) {
    return v22;
  }
  uint64_t v22 = 0x7361656C69626F6DLL;
  BOOL v41 = a1 == 0x54455353414C424DLL && a2 == 0xE800000000000000;
  if (v41 || (sub_1000192EC() & 1) != 0) {
    return v22;
  }
  uint64_t v22 = 0x6964756165726F63;
  BOOL v42 = a1 == 16707 && a2 == 0xE200000000000000;
  if (v42 || (sub_1000192EC() & 1) != 0) {
    return v22;
  }
  if (a1 == 4282189 && a2 == 0xE300000000000000)
  {
LABEL_36:
    sub_100015F04();
    return v22;
  }
  sub_1000192EC();
  sub_100015F04();
  if ((v44 & 1) == 0)
  {
    uint64_t v22 = 0x617261686173;
    BOOL v45 = a1 == 16979 && a2 == 0xE200000000000000;
    if (!v45 && (sub_1000192EC() & 1) == 0)
    {
      uint64_t v22 = 0x76697463616F7270;
      BOOL v46 = a1 == 20545 && a2 == 0xE200000000000000;
      if (!v46 && (sub_1000192EC() & 1) == 0)
      {
        uint64_t v22 = 0x7574696B616CLL;
        BOOL v47 = a1 == 19282 && a2 == 0xE200000000000000;
        if (!v47 && (sub_1000192EC() & 1) == 0)
        {
          uint64_t v22 = 0x73676E6977;
          BOOL v48 = a1 == 1280332353 && a2 == 0xE400000000000000;
          if (!v48 && (sub_1000192EC() & 1) == 0)
          {
            uint64_t v22 = 0x796F6C6C61;
            BOOL v49 = a1 == 5456969 && a2 == 0xE300000000000000;
            if (!v49 && (sub_1000192EC() & 1) == 0)
            {
              uint64_t v22 = 0x656761726F7473;
              BOOL v50 = a1 == 1196577875 && a2 == 0xE400000000000000;
              if (!v50 && (sub_1000192EC() & 1) == 0)
              {
                BOOL v51 = a1 == 21844 && a2 == 0xE200000000000000;
                if (v51 || (sub_1000192EC() & 1) != 0) {
                  return 30068;
                }
                uint64_t v22 = 0x74656C706F7264;
                BOOL v52 = a1 == 22350 && a2 == 0xE200000000000000;
                if (!v52 && (sub_1000192EC() & 1) == 0)
                {
                  uint64_t v22 = 0x7473616365726F66;
                  BOOL v53 = a1 == 18755 && a2 == 0xE200000000000000;
                  if (!v53 && (sub_1000192EC() & 1) == 0)
                  {
                    uint64_t v22 = 1952542820;
                    BOOL v54 = a1 == 1413566532 && a2 == 0xE400000000000000;
                    if (!v54 && (sub_1000192EC() & 1) == 0)
                    {
                      BOOL v55 = a1 == 5524567 && a2 == 0xE300000000000000;
                      if (v55 || (sub_1000192EC() & 1) != 0) {
                        goto LABEL_163;
                      }
                      uint64_t v22 = 0x697463656C666572;
                      BOOL v56 = a1 == 21074 && a2 == 0xE200000000000000;
                      if (v56 || (sub_1000192EC() & 1) != 0) {
                        return v22;
                      }
                      uint64_t v22 = 0x6461737361626D61;
                      BOOL v57 = a1 == 5264215 && a2 == 0xE300000000000000;
                      if (v57 || (sub_1000192EC() & 1) != 0) {
                        return v22;
                      }
                      uint64_t v22 = 0x6C6572656D6F68;
                      BOOL v58 = a1 == 1279611464 && a2 == 0xE400000000000000;
                      if (v58 || (sub_1000192EC() & 1) != 0) {
                        return v22;
                      }
                      uint64_t v22 = 0x7369737361637472;
                      BOOL v59 = a1 == 0x6C6F6F74637472 && a2 == 0xE700000000000000;
                      if (v59 || (sub_1000192EC() & 1) != 0) {
                        return v22;
                      }
                      if (a1 == 0x4C444F2D4D43 && a2 == 0xE600000000000000) {
                        goto LABEL_26;
                      }
                      sub_1000192EC();
                      sub_100014C78();
                      if ((v61 & 1) == 0)
                      {
                        BOOL v62 = a1 == 16708 && a2 == 0xE200000000000000;
                        if (v62 || (sub_1000192EC() & 1) != 0) {
                          return 24931;
                        }
                        uint64_t v22 = 0x7375626D696ELL;
                        BOOL v63 = a1 == 4473923 && a2 == 0xE300000000000000;
                        if (!v63 && (sub_1000192EC() & 1) == 0)
                        {
                          uint64_t v22 = 7630698;
                          BOOL v64 = a1 == 5461070 && a2 == 0xE300000000000000;
                          if (!v64 && (sub_1000192EC() & 1) == 0)
                          {
                            uint64_t v22 = 1869636978;
                            BOOL v65 = a1 == 5657156 && a2 == 0xE300000000000000;
                            if (!v65 && (sub_1000192EC() & 1) == 0)
                            {
                              uint64_t v22 = 0x6365736172656961;
                              BOOL v66 = a1 == 4407892 && a2 == 0xE300000000000000;
                              if (!v66 && (sub_1000192EC() & 1) == 0)
                              {
                                uint64_t v22 = 0x6B726F7769;
                                if (a1 != 5850443 || a2 != 0xE300000000000000)
                                {
                                  char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  BOOL v69 = a1 == 5457744 && a2 == 0xE300000000000000;
                                  BOOL v70 = v69;
                                  if ((v68 & 1) == 0 && !v70)
                                  {
                                    char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    BOOL v72 = a1 == 5390926 && a2 == 0xE300000000000000;
                                    BOOL v73 = v72;
                                    if ((v71 & 1) == 0 && !v73 && (sub_1000192EC() & 1) == 0)
                                    {
                                      uint64_t v22 = 1952804451;
                                      BOOL v74 = a1 == 5723214 && a2 == 0xE300000000000000;
                                      if (!v74 && (sub_1000192EC() & 1) == 0)
                                      {
                                        uint64_t v22 = 1819110755;
                                        BOOL v75 = a1 == 0x4C4D2D4D43 && a2 == 0xE500000000000000;
                                        if (!v75 && (sub_1000192EC() & 1) == 0)
                                        {
                                          uint64_t v22 = 1802661751;
                                          BOOL v76 = a1 == 1263685463 && a2 == 0xE400000000000000;
                                          if (!v76 && (sub_1000192EC() & 1) == 0)
                                          {
                                            uint64_t v22 = 1700949871;
                                            BOOL v77 = a1 == 1161973583 && a2 == 0xE400000000000000;
                                            if (!v77 && (sub_1000192EC() & 1) == 0)
                                            {
                                              uint64_t v22 = 7368547;
                                              BOOL v78 = a1 == 5263171 && a2 == 0xE300000000000000;
                                              if (!v78 && (sub_1000192EC() & 1) == 0)
                                              {
                                                BOOL v79 = a1 == 21062 && a2 == 0xE200000000000000;
                                                if (v79 || (sub_1000192EC() & 1) != 0) {
                                                  return 29286;
                                                }
                                                uint64_t v22 = 7037805;
                                                BOOL v80 = a1 == 4932429 && a2 == 0xE300000000000000;
                                                if (!v80 && (sub_1000192EC() & 1) == 0)
                                                {
                                                  uint64_t v22 = 7499873;
                                                  BOOL v81 = a1 == 5394497 && a2 == 0xE300000000000000;
                                                  if (!v81 && (sub_1000192EC() & 1) == 0)
                                                  {
                                                    uint64_t v22 = 1718644067;
                                                    BOOL v82 = a1 == 0x46502D4D43 && a2 == 0xE500000000000000;
                                                    if (!v82 && (sub_1000192EC() & 1) == 0)
                                                    {
                                                      uint64_t v22 = 1885564259;
                                                      BOOL v83 = a1 == 0x5041432D4D43 && a2 == 0xE600000000000000;
                                                      if (!v83 && (sub_1000192EC() & 1) == 0)
                                                      {
                                                        if (a1 == 0x322D544C57 && a2 == 0xE500000000000000)
                                                        {
LABEL_163:
                                                          sub_100017054();
                                                          return v22;
                                                        }
                                                        sub_1000192EC();
                                                        sub_100017054();
                                                        if (v85) {
                                                          return v22;
                                                        }
                                                        uint64_t v22 = 0x65736E61707865;
                                                        BOOL v86 = a1 == 1280329811 && a2 == 0xE400000000000000;
                                                        if (v86 || (sub_1000192EC() & 1) != 0) {
                                                          return v22;
                                                        }
                                                        BOOL v87 = a1 == 5522771 && a2 == 0xE300000000000000;
                                                        if (v87 || (sub_1000192EC() & 1) != 0) {
                                                          return 1701863795;
                                                        }
                                                        return 0;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v22;
}

uint64_t sub_1000192C4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000192DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000192EC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100019308(uint64_t a1, uint64_t a2)
{
  return _swift_task_switch(a1, a2, 0);
}

uint64_t sub_100019310()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10001932C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 328);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v2 + 664) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 664));
  uint64_t v6 = *(void *)(*(void *)(v2 + 248) + 72);
  *(void *)(v2 + 392) = v6;
  return sub_10003D340(v5 + v6 * a1, v4);
}

uint64_t sub_100019364()
{
  return v0;
}

uint64_t sub_10001937C()
{
  return v0;
}

char *sub_100019394()
{
  return sub_100071E40(0, v0, 0);
}

uint64_t sub_1000193B4()
{
  return v0;
}

uint64_t sub_1000193C8()
{
  return 0x64696C61766E693CLL;
}

uint64_t sub_1000193E4()
{
  return v0;
}

uint64_t sub_100019400()
{
  uint64_t v1 = sub_100016CE0(&qword_1000A6740);
  __chkstk_darwin(v1 - 8);
  v48[0] = (char *)v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016CE0(&qword_1000A6748);
  uint64_t v3 = sub_100016CE0(&qword_1000A6750);
  uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 72);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100085280;
  v48[2] = v6;
  uint64_t v7 = (void *)(v6 + v5);
  uint64_t v8 = (_OWORD *)(v6 + v5 + *(int *)(v3 + 48));
  *uint64_t v7 = 0x7265646E65735FLL;
  v7[1] = 0xE700000000000000;
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v52 = *(_OWORD *)(v0 + 48);
  long long v53 = v9;
  long long v54 = *(_OWORD *)(v0 + 80);
  long long v57 = v52;
  *uint64_t v8 = v52;
  uint64_t v10 = type metadata accessor for EventValue();
  sub_1000192C4();
  NSString v11 = (__n128 *)sub_1000199D4((uint64_t)v7 + v4);
  sub_100017BA8(v11, v12);
  sub_1000192C4();
  uint64_t v13 = (char *)v7 + 2 * v4;
  int64_t v14 = &v13[*(int *)(v3 + 48)];
  strcpy(v13, "_serviceName");
  v13[13] = 0;
  *((_WORD *)v13 + 7) = -5120;
  long long v55 = v54;
  *(_OWORD *)int64_t v14 = v54;
  sub_1000192C4();
  uint64_t v15 = (void *)((char *)v7 + 3 * v4);
  uint64_t v16 = (_OWORD *)((char *)v15 + *(int *)(v3 + 48));
  *uint64_t v15 = 0x6E6F69737365735FLL;
  v15[1] = 0xEA00000000004449;
  long long v51 = *(_OWORD *)(v0 + 16);
  *uint64_t v16 = v51;
  sub_1000192C4();
  Swift::String v17 = (void *)sub_1000199D4((uint64_t)v7 + 4 * v4);
  void *v18 = 0x616E7265746E695FLL;
  v18[1] = 0xE90000000000006CLL;
  *Swift::String v17 = *(void *)v0;
  swift_storeEnumTagMultiPayload();
  unint64_t v19 = (void *)sub_1000199D4((uint64_t)v7 + 5 * v4);
  void *v20 = 0x6E6F7A656D69745FLL;
  v20[1] = 0xEF74657366664F65;
  *unint64_t v19 = *(void *)(v0 + 8);
  swift_storeEnumTagMultiPayload();
  char v21 = (_OWORD *)sub_1000199D4((uint64_t)v7 + 6 * v4);
  void *v22 = 0x6449746E65696C63;
  v22[1] = 0xE800000000000000;
  long long v50 = *(_OWORD *)(v0 + 32);
  *char v21 = v50;
  sub_1000192C4();
  BOOL v23 = (char *)&v7[v4] - v4;
  uint64_t v24 = &v23[*(int *)(v3 + 48)];
  strcpy(v23, "_productFamily");
  v23[15] = -18;
  sub_100019B14((uint64_t)&v57);
  sub_100019B14((uint64_t)v56);
  sub_100019B14((uint64_t)&v55);
  sub_100019B14((uint64_t)&v51);
  sub_100019B14((uint64_t)&v50);
  if (qword_1000A5FC0 != -1) {
    swift_once();
  }
  uint64_t v25 = *(void *)algn_1000A66D8;
  v48[1] = *(void *)algn_1000A66D8;
  *(void *)uint64_t v24 = qword_1000A66D0;
  *((void *)v24 + 1) = v25;
  sub_1000192C4();
  uint64_t v26 = &v7[v4];
  os_log_type_t v27 = (void *)((char *)v26 + *(int *)(v3 + 48));
  void *v26 = 0x656D614E736F5FLL;
  v26[1] = 0xE700000000000000;
  uint64_t v28 = unk_1000A66E8;
  *os_log_type_t v27 = qword_1000A66E0;
  v27[1] = v28;
  sub_1000192C4();
  uint64_t v29 = (void *)sub_1000199D4((uint64_t)v7 + 9 * v4);
  strcpy(v30, "_productModel");
  *((_WORD *)v30 + 7) = -4864;
  uint64_t v31 = unk_1000A66F8;
  *uint64_t v29 = qword_1000A66F0;
  v29[1] = v31;
  sub_1000192C4();
  BOOL v32 = (void *)((char *)v7 + 10 * v4);
  BOOL v33 = (void *)((char *)v32 + *(int *)(v3 + 48));
  *BOOL v32 = 0x6973726556736F5FLL;
  v32[1] = 0xEA00000000006E6FLL;
  uint64_t v34 = unk_1000A6708;
  *BOOL v33 = qword_1000A6700;
  v33[1] = v34;
  sub_1000192C4();
  BOOL v35 = (void *)sub_1000199D4((uint64_t)v7 + 11 * v4);
  *BOOL v36 = 0x646C6975625FLL;
  v36[1] = 0xE600000000000000;
  uint64_t v37 = unk_1000A6718;
  *BOOL v35 = qword_1000A6710;
  v35[1] = v37;
  sub_1000192C4();
  BOOL v38 = (void *)sub_1000199D4((uint64_t)v7 + 12 * v4);
  void *v39 = 0x5674726F7065725FLL;
  v39[1] = 0xEB00000000737265;
  uint64_t v40 = unk_1000A6728;
  *BOOL v38 = qword_1000A6720;
  v38[1] = v40;
  sub_1000192C4();
  sub_100019B50((void *)((char *)v7 + 13 * v4));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v41 = sub_100019DD0();
  sub_100015E80(v41);
  BOOL v42 = (void *)((char *)v7 + 14 * v4);
  *BOOL v42 = 0xD000000000000016;
  v42[1] = 0x8000000100088FC0;
  char v43 = sub_100019EB8();
  sub_100015E80(v43);
  uint64_t v44 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v49 = v44;
  if (qword_1000A6080 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 == 1)
  {
    uint64_t v45 = *(void *)algn_1000A6738;
    uint64_t v46 = v48[0];
    *(void *)v48[0] = qword_1000A6730;
    *(void *)(v46 + 8) = v45;
    sub_1000192C4();
    _s10RTCUtility9XPCObjectOwst_0(v46, 0, 1, v10);
    swift_bridgeObjectRetain();
    sub_100013D4C(v46, 0x754E6C6169726553, 0xE90000000000006DLL);
    return v49;
  }
  return v44;
}

uint64_t sub_1000199D4@<X0>(uint64_t a1@<X8>)
{
  return a1 + *(int *)(v1 + 48);
}

uint64_t sub_1000199E0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100019A08()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100019A28()
{
  *(void *)(v0 + 568) = 0;
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 360)
     + ((*(unsigned __int8 *)(v0 + 664) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 664));
  return sub_10003D340(v3, v2);
}

uint64_t sub_100019A54()
{
  return v0;
}

uint64_t sub_100019A6C()
{
  return v0;
}

void sub_100019A80()
{
  *(void *)(v2 - 304) = v0;
  *(void *)(v2 - 168) = v1 + 56;
  *(void *)(v2 - 160) = (unint64_t)((1 << *(unsigned char *)(v1 + 32)) + 63) >> 6;
}

uint64_t sub_100019AC4()
{
  return Identifiable<>.id.getter();
}

void *sub_100019AE0@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_100019AFC()
{
  return v0;
}

uint64_t sub_100019B14(uint64_t a1)
{
  return a1;
}

void sub_100019B50(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = (v2 - 32) | 0x8000000000000000;
}

uint64_t sub_100019B60()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t sub_100019B78()
{
  return 0xD000000000000018;
}

uint64_t sub_100019B8C()
{
  return *(void *)(v0 + 336);
}

void sub_100019BA8(uint64_t a1@<X8>)
{
  uint64_t v3 = 1885960807;
  unint64_t v4 = 0xE400000000000000;
  unint64_t v5 = 0xD000000000000010;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&v3, *(Swift::String *)&v5);
}

uint64_t sub_100019BEC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100019C04()
{
  return swift_task_dealloc();
}

uint64_t sub_100019C28()
{
  *(void *)(v1 + 400) = *v0;
  *(void *)(v1 + 408) = v0[1];
  return swift_bridgeObjectRetain();
}

uint64_t sub_100019C50()
{
  return swift_task_dealloc();
}

uint64_t sub_100019C6C()
{
  return swift_dynamicCast();
}

uint64_t sub_100019C8C()
{
  return 0x6E6F6973726576;
}

uint64_t sub_100019CA4()
{
  return 0x6C625F746E657665;
}

uint64_t sub_100019CEC()
{
  return sub_10005E2E0(v3, v1, v0, v2);
}

uint64_t sub_100019D10()
{
  return swift_task_dealloc();
}

NSString sub_100019D34()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100019D64()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_100019D88()
{
  return 0x69726F6765746163;
}

uint64_t sub_100019DA4(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL sub_100019DD0()
{
  id v0 = [objc_allocWithZone((Class)MCRestrictionManager) init];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (sub_100019E5C(v1, v2, v0) == 1)
  {

    return 1;
  }
  else
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unsigned int v6 = sub_100019E5C(v4, v5, v0);

    return v6 == 1;
  }
}

id sub_100019E5C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a3 BOOLSettingForFeature:v4];

  return v5;
}

BOOL sub_100019EB8()
{
  uint64_t v1 = type metadata accessor for Logger();
  sub_100014C1C();
  uint64_t v3 = v2;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  long long v9 = (char *)v19 - v8;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t domain_answer = os_eligibility_get_domain_answer();
  uint64_t v11 = v21;
  if (!v21)
  {
    id v0 = (uint8_t *)domain_answer;
    Logger.init()();
    id v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, (os_log_type_t)v13))
    {
      int64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)int64_t v14 = 67109120;
      v19[1] = v0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v13, "Unable to determine eligibility due to error %d", v14, 8u);
      sub_100009474();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v1);
    uint64_t v11 = v21;
  }
  if (v11 == 4)
  {
    Logger.init()();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      Swift::String v17 = (_WORD *)sub_1000113C8();
      sub_1000142DC(v17);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Device is eligible for Elisabeth", v0, 2u);
      sub_100009474();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v1);
  }
  return v11 == 4;
}

uint64_t sub_10001A100()
{
  return swift_release();
}

uint64_t sub_10001A108()
{
  return swift_release();
}

uint64_t sub_10001A110()
{
  return swift_release();
}

uint64_t sub_10001A118()
{
  return swift_release();
}

uint64_t sub_10001A120()
{
  return swift_release();
}

uint64_t sub_10001A128()
{
  return swift_release();
}

uint64_t sub_10001A130()
{
  return swift_release();
}

uint64_t sub_10001A138()
{
  return swift_release();
}

uint64_t sub_10001A140()
{
  return swift_release();
}

uint64_t sub_10001A148(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A158(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A178(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A188(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A198(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007EC40);
}

unsigned char *initializeBufferWithCopyOfBuffer for Storebag._StorebagRoot.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_10001A218()
{
  return swift_retain();
}

uint64_t sub_10001A250()
{
  return v0;
}

uint64_t sub_10001A284(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v1);
}

void sub_10001A2A4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10001A2C4@<X0>(uint64_t a1@<X8>)
{
  return a1 + v1;
}

void sub_10001A2DC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t sub_10001A2FC()
{
  return *(void *)(v0 + 544);
}

uint64_t sub_10001A314()
{
  return 0;
}

uint64_t sub_10001A328(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001A354()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001A374()
{
  *(_WORD *)(v1 + 12) = 2082;
  return v0;
}

uint64_t sub_10001A38C()
{
  return swift_bridgeObjectRelease();
}

void sub_10001A3AC()
{
  *(void *)(v0 + 208) = **(void **)(v0 + 216);
}

uint64_t sub_10001A3C0()
{
  return swift_allocObject();
}

void sub_10001A3E8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

uint64_t sub_10001A408()
{
  return v0;
}

uint64_t sub_10001A42C()
{
  return swift_task_dealloc();
}

uint64_t sub_10001A454()
{
  return v0;
}

BOOL sub_10001A480()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

uint64_t sub_10001A4A0(uint64_t result)
{
  *(void *)(v1 + 160) = result;
  return result;
}

void sub_10001A4AC()
{
  *(void *)(v1 + 48) = v0;
}

uint64_t sub_10001A4C8()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10001A4E0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10001A4F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = a2;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10001A514()
{
  return *(void *)(v0 - 112);
}

uint64_t sub_10001A528@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10001A540()
{
  return swift_retain_n();
}

uint64_t sub_10001A558(float a1)
{
  *uint64_t v1 = a1;
  return swift_getErrorValue();
}

uint64_t sub_10001A598(uint64_t a1, void *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_10001A5B4()
{
  return static _SetStorage.allocate(capacity:)();
}

unint64_t sub_10001A5D0()
{
  return 0xD00000000000002FLL;
}

BOOL sub_10001A5E4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001A600()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001A62C(uint64_t a1)
{
  *(void *)(v1 + 248) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10001A668()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001A684()
{
  return type metadata accessor for Logger();
}

uint64_t sub_10001A69C(uint64_t a1, uint64_t a2)
{
  sub_100012884(a1, a2);
  return swift_errorRetain();
}

uint64_t sub_10001A6C8()
{
  return v0;
}

uint64_t sub_10001A6DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10001227C(v3, v4, a3);
}

uint64_t sub_10001A700@<X0>(uint64_t a1@<X8>)
{
  v3[50] = v1;
  v3[51] = a1;
  v3[49] = v2;
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_10001A724()
{
  return swift_task_dealloc();
}

__n128 sub_10001A750(__n128 *a1)
{
  __n128 result = v1[7];
  a1[1] = result;
  return result;
}

void sub_10001A760(uint64_t a1)
{
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v7 = v1;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, *(Swift::String *)&v6);
}

uint64_t sub_10001A780(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_10001A7A0()
{
  return swift_slowAlloc();
}

uint64_t sub_10001A7E4()
{
  return v0;
}

uint64_t sub_10001A7F8()
{
  *(void *)(v1 - 288) = *v0;
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t sub_10001A81C(uint64_t a1)
{
  *(void *)(v1 + 232) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10001A844()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10001A860()
{
  return *(void *)(v0 + 360);
}

uint64_t sub_10001A89C()
{
  return swift_slowAlloc();
}

uint64_t sub_10001A8B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v4[5] = a2;
  v4[6] = v3;
  v4[7] = *(void *)(*(void *)(result + 56) + 8 * v2);
  return result;
}

uint64_t sub_10001A8E8()
{
  return v0;
}

uint64_t sub_10001A930()
{
  return v0;
}

uint64_t sub_10001A944()
{
  return *(void *)(v0 - 272);
}

uint64_t sub_10001A95C(float a1)
{
  *uint64_t v1 = a1;
  return swift_getErrorValue();
}

uint64_t sub_10001A984()
{
  return v0;
}

uint64_t sub_10001A990()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_10001A9B4()
{
  return swift_release_n();
}

uint64_t sub_10001A9CC()
{
  _s10RTCUtility9XPCObjectOwst_0(v0, 0, 1, v1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001AA04()
{
  return v0;
}

uint64_t sub_10001AA28()
{
  return sub_10001DA6C();
}

uint64_t sub_10001AA4C()
{
  return swift_arrayDestroy();
}

uint64_t sub_10001AA78()
{
  return v0 + 488;
}

uint64_t sub_10001AA8C()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void sub_10001AAA8(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_10001AAE4()
{
  return v0 + 8;
}

uint64_t sub_10001AAF4()
{
  return v0;
}

uint64_t sub_10001AB08()
{
  return v0;
}

uint64_t sub_10001AB58()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_10001AB84()
{
  return swift_allocObject();
}

char *sub_10001ABA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100071E40(0, a1 + 1, 1);
}

uint64_t sub_10001ABF8()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_10001AC28(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    if (a2)
    {
      *(void *)(*(void *)(*a3 + 56) + 8 * a4) = v6;
    }
    else
    {
      sub_10000571C(a4, a5, a6, v6, *a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_100016CE0(&qword_1000A7270);
    _NativeDictionary._delete(at:)();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_10001ACFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  os_log_type_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_100014BA8();
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_100016CE0(&qword_1000A7268);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_100014BA8();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    *(void *)(*(void *)(v20 + 56) + 8 * v16) = a1;
  }
  else
  {
    sub_10000571C(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10001AE1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  os_log_type_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_100014BA8();
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_100016CE0(&qword_1000A78E0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100014BA8();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10000571C(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10001AF44(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  os_log_type_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_100014BA8();
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_100016CE0((uint64_t *)&unk_1000A7880);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100014BA8();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t result = swift_release();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10000571C(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_10001B06C()
{
}

uint64_t sub_10001B0A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_11;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(result + 16), a2, a3);
  if (result)
  {
    sub_10001E280();
    uint64_t v4 = sub_10000932C();
    sub_100015124(v4, v5);
    return sub_100017D10(v6, 0xD000000000000012);
  }
  return result;
}

uint64_t sub_10001B134(uint64_t a1, uint64_t a2)
{
  return sub_10001B0A0(a1, a2, *v2);
}

uint64_t sub_10001B150(uint64_t result, uint64_t a2, double a3)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t result = sqlite3_bind_double(*(sqlite3_stmt **)(result + 16), a2, a3);
  if (result)
  {
    sub_10001E280();
    uint64_t v3 = sub_10000932C();
    sub_100013F88(v3, v4);
    return sub_100017D10(v5, v6);
  }
  return result;
}

uint64_t sub_10001B1C8(uint64_t a1, uint64_t a2)
{
  return sub_10001B150(a1, a2, *v2);
}

uint64_t sub_10001B1E4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000286C8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001B234(uint64_t a1)
{
  return sub_10001B24C(a1, (uint64_t (*)(BOOL))sub_10001B06C);
}

uint64_t sub_10001B24C(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t sub_10001B294()
{
  return sub_10001B2AC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001B06C);
}

uint64_t sub_10001B2AC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_10001B308(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32 * v1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10001B36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_100014BA8(), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001B3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100014BA8(), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10001B3F8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_1000127CC(a1, type metadata accessor for CachedStorebag, a2);
}

uint64_t sub_10001B424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100006D74(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10001ACFC);
}

uint64_t sub_10001B43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100006D74(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10001AE1C);
}

uint64_t sub_10001B454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100006D74(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10001AF44);
}

uint64_t sub_10001B46C(uint64_t a1, uint64_t a2)
{
  return sub_100004218(a1, a2, (uint64_t *)&unk_1000A78B0, (void (*)(void))type metadata accessor for CachedStorebag);
}

uint64_t sub_10001B4A0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10001B4E8()
{
  sub_100013FE0();
  return v0();
}

uint64_t sub_10001B500()
{
  sub_1000113BC();
  uint64_t v1 = sub_10000F6DC();
  sub_100006DF8(v1, *(void *)(v0 + 16));
  swift_release();
  uint64_t v2 = *(void *)(v0 + 24);
  return _swift_task_switch(sub_10001B4E8, v2, 0);
}

uint64_t sub_10001B5BC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 32) = v1;
  return sub_100019308((uint64_t)sub_10001B500, v1);
}

uint64_t sub_10001B5DC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10001B5BC, v1, 0);
}

uint64_t sub_10001B5FC()
{
  sub_10000A4FC();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Session(uint64_t a1)
{
  return sub_10000C704(a1, qword_1000A8228);
}

uint64_t sub_10001B648()
{
  BOOL v1 = *(unsigned char *)(*(void *)(v0 + 440) + 240) == 1;
  uint64_t v2 = dword_1000A8180;
  char v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v3;
  *char v3 = v0;
  v3[1] = sub_10000635C;
  uint64_t v4 = *(void *)(v0 + 440);
  return ((uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1000A8180 + v2))(v0 + 112, v4, v1);
}

uint64_t sub_10001B740()
{
  sub_10000E83C();
  return v0();
}

uint64_t sub_10001B758()
{
  sub_1000094A8();
  sub_100004BB0(*(void *)(v0 + 104));
  sub_100009368();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10001B7C0()
{
  return (*(void *)(*(void *)(v0 + 136) + 16) == 0) & (*(unsigned __int8 *)(v0 + 152) ^ 1u);
}

uint64_t sub_10001B7E4()
{
  sub_100007DA0();
  uint64_t v1 = *(void *)(v0 + 56);
  char v2 = *(unsigned char *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_100015EF4(v3);
  void *v4 = v5;
  v4[1] = sub_10001B7E0;
  uint64_t v6 = sub_10001348C();
  return sub_10001B898(v6, v7, v8, v9, v10, v11, v1, v2);
}

uint64_t sub_10001B898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v13;
  *uint64_t v13 = v8;
  v13[1] = sub_10001B7E0;
  return sub_10001BA98(a5, a6, a7, a8);
}

uint64_t sub_10001B95C()
{
  sub_1000094A8();
  swift_release();
  sub_10000E83C();
  return v0();
}

uint64_t sub_10001B9B4()
{
  sub_1000094A8();
  sub_100017D58();
  sub_10000935C();
  *uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *v0;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *(void *)(v8 + 72) = v7;
  swift_task_dealloc();
  return _swift_task_switch(sub_100004E9C, v4, 0);
}

uint64_t sub_10001BA98(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 96) = a4;
  *(void *)(v5 + 48) = a3;
  *(void *)(v5 + 56) = v4;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 64) = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_10001B9B4;
  return sub_10001BF80(a1, a2);
}

uint64_t sub_10001BB48()
{
  sub_1000094A8();
  *(void *)(v0 + 424) = sub_100005A88();
  *(void *)(v0 + 432) = v1;
  sub_100009368();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10001BBB0()
{
  sub_1000094A8();
  *(unsigned char *)(v0 + 458) = sub_10001B7C0() & 1;
  sub_100009368();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10001BC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  if (*(void *)(v22 + 400))
  {
    swift_retain();
    sub_100016650();
    return _swift_task_switch(v26, v27, v28);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(v22 + 240));
  if (reply)
  {
    uint64_t v31 = reply;
    if (qword_1000A5FE0 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_10001A684();
    sub_100012884(v32, (uint64_t)qword_1000A6AE0);
    swift_retain();
    BOOL v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = sub_100018208(v34);
    uint64_t v36 = *(void *)(v22 + 248);
    if (v35)
    {
      a10 = v22 + 168;
      uint64_t v37 = (uint8_t *)sub_100014490();
      a11 = sub_1000094B4();
      *(_DWORD *)uint64_t v37 = 136446210;
      a9 = v37 + 4;
      uint64_t v38 = *(void *)(v36 + 128);
      unint64_t v39 = *(void *)(v36 + 136);
      swift_bridgeObjectRetain();
      *(void *)(v22 + 168) = sub_10001227C(v38, v39, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v33, v23, "notifying %{public}s that session is disabled", v37, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_release();
    }

    uint64_t v40 = *(void *)(v22 + 248);
    xpc_dictionary_set_BOOL(v31, "disabled", 1);
    uint64_t v41 = *(void *)(v40 + 112);
    if (!v41)
    {
      __break(1u);
      return _swift_task_switch(v26, v27, v28);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(v41 + 16), v31);
    swift_unknownObjectRelease();
  }
  sub_1000171E8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100016650();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10001BEA0()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v2 = *(void *)(v1 + 248);
  uint64_t v3 = *v0;
  sub_100015EE4();
  void *v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_100009F1C, v2, 0);
}

uint64_t sub_10001BF80(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return _swift_task_switch(sub_100005E54, v2, 0);
}

uint64_t type metadata accessor for SessionConfiguration.Backend(uint64_t a1)
{
  return sub_10000C704(a1, qword_1000A8028);
}

uint64_t type metadata accessor for SessionConfiguration.BackendHTTP(uint64_t a1)
{
  return sub_10000C704(a1, qword_1000A7F68);
}

uint64_t sub_10001BFE4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001C02C()
{
  sub_1000094A8();
  sub_1000082AC();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001C098()
{
  sub_1000094A8();
  uint64_t v1 = sub_1000182FC(v0[2], v0[3]);
  v0[5] = v2;
  if (v2)
  {
    uint64_t v3 = v0[4];
    v0[6] = v1;
    uint64_t v4 = *(void *)(v3 + 128);
    v0[7] = v4;
    return _swift_task_switch(sub_10001C02C, v4, 0);
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10001C140(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100019308((uint64_t)sub_10001C098, v2);
}

uint64_t sub_10001C160()
{
  uint64_t v1 = *(void *)(sub_100016CE0(&qword_1000A6D58) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100006F80(v2, v3);
}

uint64_t sub_10001C1C8(uint64_t a1)
{
  return sub_100008BC0(a1, v1);
}

uint64_t sub_10001C1D0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_10001C1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = sub_10001BFE4(&qword_1000A6D50, a2, (void (*)(uint64_t))type metadata accessor for StorebagCoordinator);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v5;
  void *v5 = v2;
  v5[1] = sub_10001C308;
  uint64_t v6 = *(void *)(v2 + 16);
  return withCheckedContinuation<A>(isolation:function:_:)(v2 + 32, v3, v4, 0xD000000000000013, 0x8000000100089810, sub_10001C1C8, v6, &unk_1000A11C0);
}

uint64_t sub_10001C308()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *v0;
  sub_100015EE4();
  void *v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001C1D0, v2, 0);
}

uint64_t sub_10001C3E8()
{
  sub_1000113BC();
  if (*(unsigned char *)(v0 + 59) == 3)
  {
    uint64_t v1 = *(void *)(v0 + 112);
LABEL_7:
    *(void *)(v0 + 88) = type metadata accessor for Session(0);
    *(void *)(v0 + 96) = &off_1000A1450;
    *(void *)(v0 + 64) = v1;
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100060914;
    return sub_1000332F8(v0 + 16, v0 + 64);
  }
  uint64_t v1 = *(void *)(v0 + 112);
  if (*(unsigned char *)(v1 + 240) == 1 || *(unsigned char *)(v0 + 57) != 0) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v0 + 104);
  *(void *)uint64_t v5 = &_swiftEmptyArrayStorage;
  *(void *)(v5 + 8) = &_swiftEmptyArrayStorage;
  *(unsigned char *)(v5 + 16) = 1;
  *(void *)(v5 + 24) = 1701736302;
  *(void *)(v5 + 32) = 0xE400000000000000;
  *(unsigned char *)(v5 + 40) = 2;
  sub_100013FE0();
  return v6();
}

uint64_t sub_10001C540()
{
  sub_1000094A8();
  swift_release();
  sub_10000E934();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_10001C5A0()
{
  sub_1000094A8();
  if (*(unsigned char *)(v0 + 58) == 1)
  {
    swift_release();
    sub_10000E934();
    return _swift_task_switch(v1, v2, v3);
  }
  else
  {
    uint64_t v4 = swift_task_alloc();
    uint64_t v5 = (void *)sub_10001A4A0(v4);
    void *v5 = v6;
    v5[1] = sub_100005734;
    return sub_1000332DC();
  }
}

uint64_t sub_10001C670()
{
  sub_1000113BC();
  uint64_t v1 = *(void *)(v0 + 128);
  sub_100005D04();
  *(unsigned char *)(v0 + 58) = v2 & 1;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10001C5A0, v1, 0);
}

uint64_t sub_10001C6F4()
{
  sub_1000094A8();
  *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 120) + 112);
  swift_retain();
  sub_10000E934();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10001C760(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 120) = v3;
  *(unsigned char *)(v4 + 57) = a3;
  *(void *)(v4 + 104) = a1;
  sub_10000E934();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10001C78C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000E934();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10001C868()
{
  sub_1000094A8();
  sub_100017D58();
  sub_10000935C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100015EE4();
  void *v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  sub_100009368();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10001C958()
{
  sub_1000094A8();
  *(unsigned char *)(v0 + 311) = sub_10001B7C0() & 1;
  sub_100009368();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10001C9C4()
{
  sub_1000094A8();
  swift_retain();
  sub_10000E934();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_10001CA2C()
{
  sub_1000094A8();
  *(void *)(v1 + 248) = v19;
  *(void *)(v1 + 256) = v0;
  *(unsigned char *)(v1 + 310) = v20;
  *(void *)(v1 + 240) = v18;
  *(_OWORD *)(v1 + 208) = v16;
  *(_OWORD *)(v1 + 224) = v17;
  *(void *)(v1 + 192) = v2;
  *(void *)(v1 + 200) = v3;
  *(void *)(v1 + 176) = v4;
  *(void *)(v1 + 184) = v5;
  *(void *)(v1 + 160) = v6;
  *(void *)(v1 + 168) = v7;
  *(unsigned char *)(v1 + 309) = v8;
  *(_DWORD *)(v1 + 304) = v9;
  uint64_t v10 = sub_100016CE0(&qword_1000A8490);
  sub_100009374(v10);
  *(void *)(v1 + 264) = swift_task_alloc();
  sub_10000E934();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_10001CAE4()
{
  return sub_10001CB00();
}

uint64_t sub_10001CB00()
{
  return v0;
}

uint64_t type metadata accessor for CachedStorebag(uint64_t a1)
{
  return sub_10000C704(a1, qword_1000A8A28);
}

uint64_t sub_10001CB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000709B0);
}

uint64_t type metadata accessor for CachedSession(uint64_t a1)
{
  return sub_10000C704(a1, qword_1000A8388);
}

uint64_t getTimeIntervalSince1970(Date:)()
{
  uint64_t result = Date.timeIntervalSince1970.getter();
  if (v1 < 0.0 || (*(void *)&v1 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    return 0;
  }
  if (v1 <= -9.22337204e18)
  {
    __break(1u);
  }
  else if (v1 < 9.22337204e18)
  {
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

uint64_t XPCConnection.remoteUID.getter()
{
  return xpc_connection_get_euid(*(xpc_connection_t *)(v0 + 16));
}

void *MessageKeys.realtime.unsafeMutableAddressor()
{
  return &static MessageKeys.realtime;
}

void *MessageKeys.payload.unsafeMutableAddressor()
{
  return &static MessageKeys.payload;
}

const char *MessageKeys.eager.unsafeMutableAddressor()
{
  return "eager";
}

const char *MessageKeys.overrideSampling.unsafeMutableAddressor()
{
  return "orsf";
}

const char *MessageKeys.hierarchyToken.unsafeMutableAddressor()
{
  return "hktn";
}

const char *MessageKeys.hierarchyLevel.unsafeMutableAddressor()
{
  return "hlvl";
}

const char *MessageKeys.samplingUUID.unsafeMutableAddressor()
{
  return "suuid";
}

void *MessageKeys.serviceName.unsafeMutableAddressor()
{
  return &static MessageKeys.serviceName;
}

void *MessageKeys.clientType.unsafeMutableAddressor()
{
  return &static MessageKeys.clientType;
}

const char *MessageKeys.clientName.unsafeMutableAddressor()
{
  return "cn";
}

const char *sub_10001CC50(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0x6F727245204C5153;
  if (a3) {
    uint64_t v4 = a2;
  }
  uint64_t v11 = v4;
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = sqlite3_errstr(a1);
  if (result)
  {
    uint64_t v7 = String.init(cString:)();
    int v9 = v8;
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (const char *)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001CD30()
{
  return sub_10001CD2C(*v0, *((void *)v0 + 1), *((void *)v0 + 2));
}

const char *sub_10001CD48()
{
  return sub_10001CC50(*(_DWORD *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void sub_10001CD64(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
      sub_100009448();
      break;
    default:
      return;
  }
}

void sub_10001CDE8(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
      sub_100009448();
      break;
    default:
      return;
  }
}

BOOL sub_10001CE6C(char a1, char a2)
{
  return a1 == a2;
}

void sub_10001CE7C(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_10001CEA4(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_10001CEEC(char *a1, char *a2)
{
  return sub_10001CE6C(*a1, *a2);
}

Swift::Int sub_10001CEF8()
{
  return sub_10001CEA4(*v0);
}

void sub_10001CF00(uint64_t a1)
{
  sub_10001CE7C(a1, *v1);
}

Swift::Int sub_10001CF08()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001CF4C()
{
  sub_10001CDE8(*v0);
}

void sub_10001CF54()
{
  sub_10001CD64(*v0);
}

uint64_t sub_10001CF5C()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_100014C1C();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100017440();
  uint64_t v5 = type metadata accessor for SQLiteDB.Location();
  __chkstk_darwin(v5 - 8);
  sub_10001615C();
  uint64_t v8 = v7 - v6;
  sub_10001F924(v0, v7 - v6);
  if (_s10RTCUtility9XPCObjectOwet_0(v8, 1, v1) == 1) {
    return 0x3A79726F6D656D3ALL;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v8, v1);
  uint64_t v9 = URL.path.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return v9;
}

uint64_t sub_10001D094(uint64_t a1)
{
  uint64_t v2 = v1;
  *(unsigned char *)(v2 + 24) = 0;
  uint64_t v9 = 0;
  sub_10001CF5C();
  uint64_t v4 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v5 = sqlite3_open_v2((const char *)(v4 + 32), &v9, 32774, 0);
  swift_release();
  uint64_t v6 = v9;
  if (!v9 || v5)
  {
    sub_10001E280();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = v5;
    *(void *)(v7 + 8) = 0xD000000000000017;
    *(void *)(v7 + 16) = 0x8000000100088F00;
    swift_willThrow();
    sub_10001F988(a1, (uint64_t (*)(void))type metadata accessor for SQLiteDB.Location);
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_10001F988(a1, (uint64_t (*)(void))type metadata accessor for SQLiteDB.Location);
    *(void *)(v2 + 16) = v6;
  }
  return v2;
}

uint64_t sub_10001D218()
{
  if ((*(unsigned char *)(v0 + 24) & 1) == 0)
  {
    *(unsigned char *)(v0 + 24) = 1;
    return sqlite3_close_v2(*(sqlite3 **)(v0 + 16));
  }
  return result;
}

uint64_t sub_10001D234()
{
  sub_10001D218();

  return _swift_deallocClassInstance(v0, 25, 7);
}

uint64_t sub_10001D268()
{
  uint64_t v1 = sqlite3_expanded_sql(*(sqlite3_stmt **)(v0 + 16));
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = String.init(cString:)();
  sqlite3_free(v2);
  return v3;
}

uint64_t sub_10001D2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for EventValue();
  __chkstk_darwin(v7);
  sub_10001615C();
  Swift::String v10 = (uint64_t *)(v9 - v8);
  uint64_t v11 = type metadata accessor for String.Encoding();
  sub_100014C1C();
  uint64_t v39 = v12;
  __chkstk_darwin(v13);
  sub_10001615C();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = sub_10000F9A8();
  if (!v4)
  {
    uint64_t v19 = v17;
    uint64_t v41 = v16;
    uint64_t v42 = v11;
    uint64_t v40 = (void (**)(uint64_t, uint64_t))(v39 + 8);
    while (1)
    {
      if (!v19) {
        return swift_bridgeObjectRelease();
      }
      char v20 = *(sqlite3_stmt **)(v19 + 16);
      swift_retain();
      if (!sqlite3_column_text(v20, 1)) {
        break;
      }
      uint64_t v21 = a2;
      String.init(cString:)();
      swift_release();
      sqlite3_int64 v22 = sqlite3_column_int64(*(sqlite3_stmt **)(v19 + 16), 0);
      uint64_t v23 = a3;
      swift_bridgeObjectRetain();
      static String.Encoding.utf8.getter();
      String.data(using:allowLossyConversion:)();
      unint64_t v25 = v24;
      swift_bridgeObjectRelease();
      (*v40)(v41, v42);
      if (v25 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        sub_10001E364();
        sub_10000932C();
        swift_willThrow();
        goto LABEL_18;
      }
      uint64_t v26 = self;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v44 = 0;
      id v28 = [v26 JSONObjectWithData:isa options:0 error:&v44];

      id v29 = v44;
      if (!v28)
      {
        uint64_t v38 = v29;
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_100020710();
        goto LABEL_18;
      }
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10004A08C((uint64_t)v45, v10);
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        swift_bridgeObjectRelease();
        sub_10001F988((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for EventValue);
        sub_10001E364();
        sub_10000932C();
        swift_willThrow();
        sub_100020710();
        sub_10001610C((uint64_t)v45);
        goto LABEL_18;
      }
      sub_10001610C((uint64_t)v45);
      sub_100020710();
      uint64_t v30 = *v10;
      uint64_t v31 = *a4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000047AC();
        uint64_t v31 = v35;
        *a4 = v35;
      }
      unint64_t v33 = *(void *)(v31 + 16);
      if (v33 >= *(void *)(v31 + 24) >> 1)
      {
        sub_1000047AC();
        uint64_t v31 = v36;
        *a4 = v36;
      }
      *(void *)(v31 + 16) = v33 + 1;
      os_log_type_t v34 = (void *)(v31 + 32 * v33);
      v34[4] = v22;
      v34[5] = v21;
      a2 = v21;
      a3 = v23;
      v34[6] = v23;
      v34[7] = v30;
      swift_release();
      uint64_t v19 = sub_10000F9A8();
    }
    swift_release();
    sub_10001E318();
    sub_10000932C();
    *uint64_t v37 = 0;
    swift_willThrow();
LABEL_18:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10001D78C(uint64_t a1))(uint64_t)
{
  return sub_10001D7E4(a1, sub_10001D8E0);
}

uint64_t (*sub_10001D7B8(uint64_t a1))(uint64_t)
{
  return sub_10001D7E4(a1, sub_10001D95C);
}

uint64_t (*sub_10001D7E4(uint64_t a1, uint64_t (*a2)(uint64_t)))(uint64_t)
{
  uint64_t v4 = sub_10000F9A8();
  if (!v2)
  {
    if (v4)
    {
      a2 = (uint64_t (*)(uint64_t))a2(v4);
      uint64_t v7 = sub_10000F9A8();
      swift_release();
      if (v7)
      {
        do
        {
          a2 = (uint64_t (*)(uint64_t))sub_10000F9A8();
          swift_release();
        }
        while (a2);
        sub_10001E2CC();
        uint64_t v8 = sub_10000932C();
        sub_100009454(v8, v9);
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
    else
    {
      sub_10001E2CC();
      sub_10000932C();
      unsigned char *v5 = 0;
      swift_willThrow();
    }
  }
  return a2;
}

uint64_t sub_10001D8E0(uint64_t a1)
{
  if (sqlite3_column_count(*(sqlite3_stmt **)(a1 + 16)) == 1)
  {
    uint64_t v1 = swift_retain();
    return sub_10001E1AC(v1, 0);
  }
  else
  {
    sub_10001E2CC();
    swift_allocError();
    *uint64_t v3 = 2;
    return swift_willThrow();
  }
}

sqlite3_int64 sub_10001D95C(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt **)(a1 + 16);
  if (sqlite3_column_count(v1) == 1) {
    return sqlite3_column_int64(v1, 0);
  }
  sub_10001E2CC();
  swift_allocError();
  *uint64_t v3 = 2;
  return swift_willThrow();
}

sqlite3_int64 sub_10001D9D4()
{
  return sqlite3_changes64(*(sqlite3 **)(*(void *)(*(void *)(v0 + 16) + 112) + 16));
}

uint64_t sub_10001D9E4()
{
  if (*(unsigned char *)(v0 + 24))
  {
    sub_10001E280();
    sub_10000932C();
    *uint64_t v2 = 1;
    return sub_100017D10((uint64_t)v2, 0xD00000000000001DLL);
  }
  else
  {
    sub_100016354();
    uint64_t result = sub_10001DA6C();
    if (!v1) {
      *(unsigned char *)(v0 + 24) = 1;
    }
  }
  return result;
}

uint64_t sub_10001DA6C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if (*(unsigned char *)(v1 + 24))
  {
    sub_10001E2CC();
    sub_10000932C();
    *uint64_t v2 = 3;
  }
  else
  {
    uint64_t v3 = *(sqlite3 **)(v1 + 16);
    uint64_t v4 = String.utf8CString.getter();
    LODWORD(v3) = sub_100016604(v3, (const char *)(v4 + 32));
    uint64_t result = swift_release();
    if (!v3) {
      return result;
    }
    sub_10001E280();
    uint64_t v6 = sub_10000932C();
    sub_100015124(v6, v7);
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  return swift_willThrow();
}

uint64_t sub_10001DB14()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 25, 7);
}

uint64_t sub_10001DB4C(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for SQLiteDB.Location();
  __chkstk_darwin(v4 - 8);
  sub_100017440();
  swift_defaultActor_initialize();
  sub_10001F924(a1, v1);
  type metadata accessor for SQLiteDB.DBHandle();
  swift_allocObject();
  uint64_t v5 = sub_10001D094(v1);
  if (!v2)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(sqlite3 **)(v5 + 16);
    int v8 = sub_100016604(v7, "PRAGMA journal_mode=WAL;");
    if (v8)
    {
      int v9 = v8;
      sub_10001E280();
      sub_10000932C();
      *(_DWORD *)uint64_t v10 = v9;
      unint64_t v11 = 0xD000000000000014;
      uint64_t v12 = "Failed to enable WAL";
    }
    else
    {
      int v13 = sub_100016604(v7, "PRAGMA foreign_keys=ON;");
      if (!v13)
      {
        sub_10001F988(a1, (uint64_t (*)(void))type metadata accessor for SQLiteDB.Location);
        *(void *)(v1 + 112) = v6;
        return v1;
      }
      int v14 = v13;
      unint64_t v11 = 0xD000000000000013;
      sub_10001E280();
      sub_10000932C();
      *(_DWORD *)uint64_t v10 = v14;
      uint64_t v12 = "Failed to enable FK";
    }
    *(void *)(v10 + 8) = v11;
    *(void *)(v10 + 16) = (unint64_t)(v12 - 32) | 0x8000000000000000;
    swift_willThrow();
    swift_release();
  }
  swift_defaultActor_destroy();
  sub_10001F988(a1, (uint64_t (*)(void))type metadata accessor for SQLiteDB.Location);
  swift_deallocPartialClassInstance();
  return v1;
}

uint64_t sub_10001DD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_10000F6DC();
  if (v7) {
    return swift_bridgeObjectRelease();
  }
  sub_1000434A8(v12, a4, a5, a6, a7, &v14);
  swift_bridgeObjectRelease();
  swift_release();
  return v14;
}

void *sub_10001DDEC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_10001DE04(a1, a2, a3, a4);
}

void *sub_10001DE04(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_10000F6DC();
  if (!v4)
  {
    sub_100016CE0(&qword_1000A64B0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100084C90;
    *(void *)(inited + 56) = &type metadata for Int;
    *(void *)(inited + 64) = &off_10009E5A0;
    *(void *)(inited + 32) = a4;
    sub_10000F264(inited);
    swift_setDeallocating();
    sub_10000F200();
    a3 = sub_100042B28();
    swift_release();
  }
  swift_release();
  return a3;
}

void *sub_10001DF10(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_10000F6DC();
  if (v6)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100016CE0(&qword_1000A64B0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100084CA0;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = &off_10009E600;
    *(void *)(inited + 32) = a4;
    *(void *)(inited + 40) = a5;
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 104) = &off_10009E5A0;
    *(void *)(inited + 72) = a6;
    swift_bridgeObjectRetain();
    sub_10000F264(inited);
    swift_setDeallocating();
    sub_10000F200();
    a3 = sub_100042B28();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return a3;
}

uint64_t sub_10001E070(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SQLiteDB.Transaction();
  uint64_t inited = swift_initStackObject();
  *(unsigned char *)(inited + 24) = 0;
  *(void *)(inited + 16) = a1;
  swift_retain();
  sub_10001DA6C();
  if (!v2)
  {
    sub_10004370C(inited, a2);
    if ((*(unsigned char *)(inited + 24) & 1) == 0)
    {
      sub_100016354();
      sub_10001DA6C();
    }
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001E150()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

void sub_10001E188()
{
}

void sub_10001E190()
{
}

uint64_t sub_10001E1AC(uint64_t result, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    int v2 = sqlite3_column_int(*(sqlite3_stmt **)(result + 16), a2);
    swift_release();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SQLiteDB()
{
  return self;
}

uint64_t type metadata accessor for SQLiteDB.DBHandle()
{
  return self;
}

uint64_t type metadata accessor for SQLiteDB.Transaction()
{
  return self;
}

void sub_10001E270()
{
  qword_1000A5FB8 = -1;
}

unint64_t sub_10001E280()
{
  unint64_t result = qword_1000A6478;
  if (!qword_1000A6478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6478);
  }
  return result;
}

unint64_t sub_10001E2CC()
{
  unint64_t result = qword_1000A6480;
  if (!qword_1000A6480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6480);
  }
  return result;
}

unint64_t sub_10001E318()
{
  unint64_t result = qword_1000A6488;
  if (!qword_1000A6488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6488);
  }
  return result;
}

unint64_t sub_10001E364()
{
  unint64_t result = qword_1000A6490;
  if (!qword_1000A6490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6490);
  }
  return result;
}

uint64_t sub_10001E3B0()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_10001E3FC()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10001E454()
{
  return Hasher._finalize()();
}

uint64_t sub_10001E4BC()
{
  return sub_10001E67C(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10001E4F0(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10001E56C(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

NSString sub_10001E5EC@<X0>(void *a1@<X8>)
{
  NSString result = sub_10001E614();
  *a1 = result;
  return result;
}

NSString sub_10001E614()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001E64C()
{
  return sub_10001E67C(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10001E67C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10001E6BC()
{
  return sub_10001E6C4();
}

uint64_t sub_10001E6C4()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001E718()
{
  return sub_10007EDE0();
}

uint64_t sub_10001E720(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_10001E78C()
{
  return sub_10006B308();
}

uint64_t sub_10001E798(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000088D0(a1, a2);
  }
  return a1;
}

uint64_t sub_10001E7AC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10001E7F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001E820(uint64_t a1)
{
  uint64_t v2 = sub_1000205F0(&qword_1000A65F8, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_1000205F0(&qword_1000A6600, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void sub_10001E8DC()
{
}

void sub_10001E910()
{
}

void sub_10001E944(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_100019B40();
    if (v8 != v9)
    {
      sub_100017B9C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000199C4();
    }
  }
  sub_1000167F4();
  if (v5)
  {
    sub_100016CE0(&qword_1000A65E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v4;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_100070BC4((char *)(a4 + 32), v4, v10 + 32);
    sub_100014C38();
  }
  else
  {
    uint64_t v12 = sub_100017044();
    sub_10001F234(v12, v13, v14, v15);
  }
}

void sub_10001E9FC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_100019B40();
    if (v8 != v9)
    {
      sub_100017B9C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000199C4();
    }
  }
  sub_1000167F4();
  if (v5)
  {
    sub_100016CE0(&qword_1000A64F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    sub_1000164E4(v11);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_100070C34((char *)(a4 + 32), v4, v10 + 32);
    sub_100014C38();
  }
  else
  {
    uint64_t v12 = sub_100017044();
    sub_10001F324(v12, v13, v14, v15);
  }
}

uint64_t sub_10001EABC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10001EB4C(a1, a2, a3, a4, &qword_1000A64F0, type metadata accessor for SessionConfiguration.Backend, type metadata accessor for SessionConfiguration.Backend, sub_100070D44);
}

uint64_t sub_10001EB04(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10001EB4C(a1, a2, a3, a4, &qword_1000A6510, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL, sub_100070E58);
}

uint64_t sub_10001EB4C(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), void (*a8)(unint64_t, uint64_t, unint64_t))
{
  if (a3)
  {
    sub_100019B40();
    if (v14 != v15)
    {
      sub_100017B9C();
      if (v14)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_1000199C4();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v21 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_100016CE0(a5);
  uint64_t v18 = *(void *)(a6(0) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = (void *)swift_allocObject();
  size_t v22 = j__malloc_size(v21);
  if (!v19 || (v22 - v20 == 0x8000000000000000 ? (BOOL v23 = v19 == -1) : (BOOL v23 = 0), v23))
  {
LABEL_23:
    sub_10001AB14();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v21[2] = v16;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v19);
LABEL_18:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v26 = (unint64_t)v21 + v25;
  if (a1)
  {
    a8(a4 + v25, v16, v26);
    sub_100014C38();
  }
  else
  {
    sub_10001F55C(0, v16, v26, a4, a7);
  }
  return (uint64_t)v21;
}

void sub_10001ED64()
{
}

void sub_10001ED98()
{
  sub_1000112F8();
  if (v6)
  {
    sub_100019B40();
    if (v8 != v9)
    {
      sub_100017B9C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000199C4();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_100016CE0(v5);
    uint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    long long v12[2] = v10;
    void v12[3] = 2 * ((uint64_t)(v13 - 32) / 16);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  char v14 = v12 + 4;
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    sub_100014C38();
  }
  else
  {
    v1(0, v10, v14, v0);
  }
}

uint64_t sub_10001EE74(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10001EB4C(a1, a2, a3, a4, &qword_1000A64B8, type metadata accessor for CachedSession, type metadata accessor for CachedSession, sub_100071164);
}

uint64_t sub_10001EEBC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10001EB4C(a1, a2, a3, a4, (uint64_t *)&unk_1000A64A0, (uint64_t (*)(void))type metadata accessor for EventValue, (uint64_t (*)(void))type metadata accessor for EventValue, sub_100070C98);
}

void sub_10001EF04(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10001EF24(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10001EF44(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  if (a3)
  {
    sub_100019B40();
    if (v10 != v11)
    {
      sub_100017B9C();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_1000199C4();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    sub_100016CE0(a5);
    char v14 = (char *)swift_allocObject();
    size_t v15 = j__malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  else
  {
    char v14 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v16 = v14 + 32;
  if (a1)
  {
    a6(a4 + 32, v12, v16);
    sub_100014C38();
  }
  else
  {
    sub_10001F7A0(0, v12, v16, a4);
  }
}

uint64_t sub_10001F024(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F11C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100016CE0(&qword_1000A65F0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10001F234(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F324(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_100016CE0(&qword_1000A6500);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F444(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100016CE0(&qword_1000A64D0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F55C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  sub_10001AB14();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F6A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10001F7A0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  sub_10001AB14();
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F87C(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A64D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SQLiteDB.Location()
{
  uint64_t result = qword_1000A6588;
  if (!qword_1000A6588) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001F924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SQLiteDB.Location();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001F988(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_10001F9E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for URL();
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10001FAE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = _s10RTCUtility9XPCObjectOwet_0(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_10001FB6C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10001FC2C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  int v7 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *sub_10001FD74(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10001FE34(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  int v7 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10001FF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001FF90);
}

uint64_t sub_10001FF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  unsigned int v5 = _s10RTCUtility9XPCObjectOwet_0(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10001FFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001FFEC);
}

uint64_t sub_10001FFEC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for URL();

  return _s10RTCUtility9XPCObjectOwst_0(a1, v5, a3, v6);
}

uint64_t sub_100020048(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();

  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v2);
}

uint64_t sub_100020090(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();

  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1, v4);
}

uint64_t sub_1000200DC()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void sub_100020190(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for StorebagSectionCondition.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_100020264(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100020330);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_100020358(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100020360(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void type metadata accessor for DBError()
{
}

uint64_t destroy for SessionHierarchyItem()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100020380(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000203B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SessionHierarchyItem(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_100020418(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100020454(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000204A8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

void type metadata accessor for SQLError()
{
}

unint64_t sub_100020514()
{
  unint64_t result = qword_1000A65B0;
  if (!qword_1000A65B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A65B0);
  }
  return result;
}

uint64_t sub_100020560()
{
  return sub_1000205F0(&qword_1000A65B8, type metadata accessor for CFString);
}

uint64_t sub_1000205A8()
{
  return sub_1000205F0(&qword_1000A65C0, type metadata accessor for URLResourceKey);
}

uint64_t sub_1000205F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100020638()
{
  return sub_1000205F0(&qword_1000A65C8, type metadata accessor for URLResourceKey);
}

uint64_t sub_100020680()
{
  return sub_1000205F0(&qword_1000A65D0, type metadata accessor for URLResourceKey);
}

uint64_t sub_1000206C8()
{
  return sub_1000205F0(&qword_1000A65D8, type metadata accessor for CFString);
}

uint64_t sub_100020710()
{
  return sub_10001E798(v1, v0);
}

uint64_t initializeBufferWithCopyOfBuffer for ClientIdentity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AllEventFieldProvider()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AllEventFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AllEventFieldProvider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AllEventFieldProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for AllEventFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AllEventFieldProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AllEventFieldProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AllEventFieldProvider()
{
  return &type metadata for AllEventFieldProvider;
}

uint64_t destroy for HTTPHeaderFieldProvider()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for HTTPHeaderFieldProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPHeaderFieldProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPHeaderFieldProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPHeaderFieldProvider()
{
  return &type metadata for HTTPHeaderFieldProvider;
}

uint64_t sub_100020CF0()
{
  uint64_t v2 = sub_100016CE0(&qword_1000A6740);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100016CE0(&qword_1000A6748);
  sub_100016CE0(&qword_1000A6750);
  sub_10001A880();
  uint64_t v6 = *(void *)(v5 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100085270;
  uint64_t v10 = (void *)(v9 + v8);
  uint64_t v11 = (_OWORD *)(v9 + v8 + *(int *)(v1 + 56));
  *uint64_t v10 = 0xD000000000000011;
  v10[1] = 0x8000000100088FE0;
  long long v12 = *(_OWORD *)(v0 + 24);
  long long v25 = *(_OWORD *)(v0 + 8);
  long long v26 = v12;
  long long v27 = *(_OWORD *)(v0 + 40);
  long long v30 = v12;
  *uint64_t v11 = v12;
  uint64_t v13 = type metadata accessor for EventValue();
  sub_100014C50();
  sub_10001616C((uint64_t)v10 + v6);
  sub_100019B50(v14);
  long long v29 = v27;
  *size_t v15 = v27;
  sub_100014C50();
  sub_10001616C((uint64_t)v10 + 2 * v6);
  sub_100019B50(v16);
  *uint64_t v17 = *(void *)v0;
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = (__n128 *)sub_10001616C((uint64_t)v10 + 3 * v6);
  sub_100017BA8(v18, v19);
  sub_100014C50();
  sub_100019B14((uint64_t)&v30);
  sub_100019B14((uint64_t)&v29);
  sub_100019B14((uint64_t)v28);
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  uint64_t v24 = result;
  if (*(unsigned char *)(v0 + 56))
  {
    uint64_t v21 = *(void *)(v0 + 64);
    uint64_t v22 = *(void *)(v0 + 72);
    void *v4 = v21;
    v4[1] = v22;
    sub_100014C50();
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v4, 0, 1, v13);
    swift_bridgeObjectRetain();
    sub_100013D4C((uint64_t)v4, 0xD000000000000010, 0x8000000100089040);
    return v24;
  }
  return result;
}

uint64_t sub_100020F54()
{
  uint64_t v0 = 960051513;
  id v1 = [self mainBundle];
  uint64_t v2 = sub_100021310(v1);
  if (v2)
  {
    sub_10006B1E0(v2, &v5);
    swift_bridgeObjectRelease();
    if (v6)
    {
      if (swift_dynamicCast()) {
        return v4;
      }
    }
    else
    {
      sub_100021388((uint64_t)&v5);
    }
  }
  return v0;
}

void sub_100021028(uint64_t *a1@<X8>)
{
  id v2 = (id)MobileGestalt_get_current_device();
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v3 = v2;
  id v4 = (id)MobileGestalt_copy_deviceName_obj();
  if (!v4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  long long v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  id v9 = (id)MobileGestalt_copy_marketingProductName_obj();
  if (!v9)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  id v14 = (id)MobileGestalt_copy_productType_obj();
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  size_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  id v19 = (id)MobileGestalt_copy_productVersion_obj();
  if (!v19)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v20 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v22;
  uint64_t v43 = v21;

  id v23 = (id)MobileGestalt_copy_supplementalBuildVersion_obj();
  if (!v23)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v24 = v23;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v26;
  uint64_t v39 = v25;

  if (qword_1000A6080 != -1) {
    swift_once();
  }
  uint64_t v40 = v18;
  uint64_t v41 = v16;
  uint64_t v27 = v13;
  uint64_t v28 = v11;
  if (byte_1000AF3C8 != 1)
  {
    uint64_t v31 = v8;
    uint64_t v32 = 0;
    unint64_t v34 = 0xE000000000000000;
    goto LABEL_13;
  }
  id v29 = (id)MobileGestalt_copy_serialNumber_obj();
  if (v29)
  {
    long long v30 = v29;
    uint64_t v31 = v8;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

LABEL_13:
    uint64_t v35 = sub_100020F54();
    uint64_t v37 = v36;

    *a1 = v6;
    a1[1] = v31;
    a1[2] = v28;
    a1[3] = v27;
    a1[4] = v41;
    a1[5] = v40;
    a1[6] = v43;
    a1[7] = v42;
    a1[8] = v39;
    a1[9] = v38;
    a1[10] = v35;
    a1[11] = v37;
    a1[12] = v32;
    a1[13] = v34;
    return;
  }
LABEL_20:
  __break(1u);
}

void *sub_100021228()
{
  sub_100021028(v1);
  return memcpy(&qword_1000A66D0, v1, 0x70uLL);
}

uint64_t sub_100021260()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100021310(void *a1)
{
  id v2 = [a1 infoDictionary];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100021388(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A6758);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000213EC(unint64_t a1)
{
  if (a1 >= 4) {
    return 3;
  }
  else {
    return 0x2010003u >> (8 * a1);
  }
}

uint64_t sub_10002140C(unsigned __int8 a1)
{
  return a1 + 1;
}

uint64_t sub_100021418()
{
  return sub_100049534(*v0);
}

void sub_100021420(uint64_t a1)
{
  sub_100049BB8(a1, *v1);
}

uint64_t sub_100021428(uint64_t a1)
{
  return sub_100049C28(a1, *v1);
}

uint64_t sub_100021430@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000213EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002145C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002140C(*v1);
  *a1 = result;
  return result;
}

void sub_100021488(void *a1@<X8>)
{
  *a1 = &off_10009DC40;
}

uint64_t sub_100021498()
{
  if (qword_1000A6088 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1000AF3D0;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 integerForKey:v1];

  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = sub_1000217E4((unint64_t)v2);
  if (v3 == 4)
  {
    if (qword_1000A5FC8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100012884(v4, (uint64_t)qword_1000AF250);
    long long v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134349056;
      uint64_t v16 = (uint64_t)v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "invalid environmentType override from defaults: %{public}ld", v7, 0xCu);
      sub_100009474();
    }

LABEL_10:
    if (qword_1000A6080 != -1) {
      swift_once();
    }
    if (byte_1000AF3C8) {
      return 1;
    }
    else {
      return 3;
    }
  }
  uint64_t v8 = v3;
  if (qword_1000A5FC8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100012884(v9, (uint64_t)qword_1000AF250);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    uint64_t v13 = String.init<A>(describing:)();
    sub_10001227C(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100007D88((void *)&_mh_execute_header, v10, v11, "overriding environmentType to %{public}s (%{public}ld) from defaults");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }

  return v8;
}

uint64_t sub_1000217E4(unint64_t a1)
{
  if (a1 >= 5) {
    return 4;
  }
  else {
    return (0x302010004uLL >> (8 * a1));
  }
}

uint64_t sub_100021808@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v55[1] = a2;
  type metadata accessor for SHA256();
  sub_100014C1C();
  uint64_t v57 = v3;
  __chkstk_darwin(v4);
  *(void *)&long long v64 = type metadata accessor for String.Encoding();
  sub_100014C1C();
  os_log_type_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SHA256Digest();
  sub_100014C1C();
  uint64_t v59 = v11;
  uint64_t v60 = v10;
  __chkstk_darwin(v10);
  sub_100014198();
  uint64_t v56 = v12;
  sub_100013F9C();
  __chkstk_darwin(v13);
  BOOL v58 = (char *)v55 - v14;
  uint64_t v15 = sub_100016CE0(&qword_1000A6780);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (uint64_t)v55 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  unint64_t v24 = (unint64_t)v55 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)v55 - v26;
  __chkstk_darwin(v25);
  id v29 = (char *)v55 - v28;
  type metadata accessor for URL();
  sub_100014C1C();
  uint64_t v62 = v31;
  uint64_t v63 = v30;
  __chkstk_darwin(v30);
  sub_100016178();
  uint64_t v61 = v32;
  switch((char)a1)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_10;
    default:
      sub_100009448();
      URL.init(string:)();
      if (sub_1000181EC((uint64_t)v29) != 1) {
        goto LABEL_13;
      }
      __break(1u);
LABEL_4:
      sub_10001A5D0();
      sub_100009448();
      URL.init(string:)();
      id v29 = v27;
      if (sub_1000181EC((uint64_t)v27) != 1) {
        goto LABEL_13;
      }
      __break(1u);
LABEL_6:
      a1 = v63;
      if (qword_1000A6080 == -1) {
        goto LABEL_7;
      }
      break;
  }
  while (2)
  {
    swift_once();
LABEL_7:
    if (byte_1000AF3C8 == 1)
    {
      sub_10001A5D0();
      sub_100009448();
      URL.init(string:)();
      id v29 = (char *)v24;
      if (_s10RTCUtility9XPCObjectOwet_0(v24, 1, a1) != 1) {
        goto LABEL_13;
      }
      __break(1u);
LABEL_10:
      sub_100009448();
      URL.init(string:)();
      id v29 = v18;
      if (sub_1000181EC((uint64_t)v18) != 1) {
        goto LABEL_13;
      }
      __break(1u);
    }
    sub_100009448();
    URL.init(string:)();
    id v29 = (char *)v21;
    if (_s10RTCUtility9XPCObjectOwet_0(v21, 1, a1) == 1) {
      goto LABEL_43;
    }
LABEL_13:
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v61, v29, a1);
    id v33 = (id)MobileGestalt_get_current_device();
    if (!v33) {
      goto LABEL_40;
    }
    unint64_t v34 = v33;
    id v35 = (id)MobileGestalt_copy_marketingProductName_obj();
    if (!v35) {
      goto LABEL_41;
    }
    uint64_t v36 = v35;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    static String.Encoding.utf8.getter();
    uint64_t v21 = String.data(using:allowLossyConversion:)();
    unint64_t v24 = v37;
    swift_bridgeObjectRelease();
    (*((void (**)(char *, void))v6 + 1))(v9, v64);
    if (v24 >> 60 == 15) {
      goto LABEL_42;
    }
    sub_100028680((unint64_t *)&unk_1000A84B0, (void (*)(uint64_t))&type metadata accessor for SHA256);
    dispatch thunk of HashFunction.init()();
    v55[0] = v34;
    switch(v24 >> 62)
    {
      case 1uLL:
        if (v21 >> 32 < (int)v21)
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          JUMPOUT(0x100022064);
        }
        sub_10002779C(v21, v24);
        uint64_t v9 = 0;
        sub_10002858C((int)v21, v21 >> 32);
LABEL_20:
        sub_10001E798(v21, v24);
LABEL_22:
        uint64_t v41 = v58;
        dispatch thunk of HashFunction.finalize()();
        sub_100014474();
        v42();
        sub_10001E798(v21, v24);
        (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v56, v41, v60);
        sub_100028680(&qword_1000A6788, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
        dispatch thunk of Sequence.makeIterator()();
        os_log_type_t v6 = v65;
        a1 = v66;
        uint64_t v43 = *((void *)v65 + 2);
        if (v66 != v43)
        {
          if (v66 < v43)
          {
            uint64_t v18 = v65 + 32;
            uint64_t v9 = (char *)_swiftEmptyArrayStorage;
            long long v64 = xmmword_100084C90;
            unint64_t v47 = v66;
            while ((a1 & 0x8000000000000000) == 0)
            {
              if (v47 >= *((void *)v6 + 2)) {
                goto LABEL_36;
              }
              char v48 = v18[v47];
              sub_100016CE0(&qword_1000A6790);
              uint64_t v49 = swift_allocObject();
              *(_OWORD *)(v49 + 16) = v64;
              *(void *)(v49 + 56) = &type metadata for UInt8;
              *(void *)(v49 + 64) = &protocol witness table for UInt8;
              *(unsigned char *)(v49 + 32) = v48;
              unint64_t v24 = String.init(format:_:)();
              uint64_t v51 = v50;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_10001E8DC();
                uint64_t v9 = v53;
              }
              uint64_t v21 = *((void *)v9 + 2);
              if ((unint64_t)v21 >= *((void *)v9 + 3) >> 1)
              {
                sub_10001E8DC();
                uint64_t v9 = v54;
              }
              ++v47;
              *((void *)v9 + 2) = v21 + 1;
              long long v52 = &v9[16 * v21];
              *((void *)v52 + 4) = v24;
              *((void *)v52 + 5) = v51;
              if (v43 == v47) {
                goto LABEL_24;
              }
            }
            __break(1u);
LABEL_36:
            __break(1u);
          }
          __break(1u);
          continue;
        }
        uint64_t v9 = (char *)_swiftEmptyArrayStorage;
LABEL_24:
        swift_bridgeObjectRelease();
        BOOL v65 = v9;
        sub_100016CE0(&qword_1000A6798);
        sub_1000299A4((unint64_t *)&qword_1000A67A0, &qword_1000A6798);
        BidirectionalCollection<>.joined(separator:)();
        swift_bridgeObjectRelease();
        URL.appendingPathComponent(_:isDirectory:)();
        swift_bridgeObjectRelease();

        sub_100014474();
        v44();
        sub_100014474();
        return v45();
      case 2uLL:
        uint64_t v38 = *(void *)(v21 + 16);
        uint64_t v39 = *(void *)(v21 + 24);
        sub_10002866C(v21, v24);
        swift_retain();
        swift_retain();
        uint64_t v40 = v38;
        uint64_t v9 = 0;
        sub_10002858C(v40, v39);
        swift_release();
        swift_release();
        goto LABEL_20;
      default:
        uint64_t v9 = 0;
        sub_100028710();
        sub_10001E798(v21, v24);
        goto LABEL_22;
    }
  }
}

void *sub_100022084(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  os_log_type_t v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    char v18 = *(unsigned char *)(a3 + v5 + 32);
    a1(&v16, &v18);
    if (v3) {
      break;
    }
    uint64_t v7 = v17;
    if (v17)
    {
      char v8 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001E910();
        os_log_type_t v6 = v11;
      }
      unint64_t v9 = v6[2];
      if (v9 >= v6[3] >> 1)
      {
        sub_10001E910();
        os_log_type_t v6 = v12;
      }
      v6[2] = v9 + 1;
      uint64_t v10 = &v6[2 * v9];
      *((unsigned char *)v10 + 32) = v8;
      v10[5] = v7;
    }
    if (v14 == ++v5)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1000221DC(uint64_t a1)
{
  return sub_10004CF8C(a1, *v1);
}

uint64_t sub_1000221E4@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000217E4(*a1);
  *a2 = result;
  return result;
}

void sub_100022210(void *a1@<X8>)
{
  *a1 = &off_10009DC68;
}

uint64_t sub_100022220()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF250);
  sub_100012884(v0, (uint64_t)qword_1000AF250);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100022298()
{
  return 0;
}

uint64_t sub_1000222A4(char a1)
{
  uint64_t result = 0x6E6F6973726576;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E695F656C707061;
      break;
    case 2:
      uint64_t result = 1684366707;
      break;
    case 3:
      uint64_t result = 0x657361656C6572;
      break;
    case 4:
      return result;
    case 5:
      uint64_t result = 0x5F68736572666572;
      break;
    case 6:
      uint64_t result = 0x765F646572616873;
      break;
    default:
      uint64_t result = 0x6D706F6C65766564;
      break;
  }
  return result;
}

uint64_t sub_1000223AC()
{
  return 7;
}

uint64_t sub_1000223B4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    BOOL v7 = a1 == 0x5F68736572666572 && a2 == 0xED0000656C637963;
    if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      BOOL v8 = a1 == 0x765F646572616873 && a2 == 0xEC00000073656C61;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else
      {
        uint64_t v9 = 4;
        uint64_t v10 = &byte_10009DC88;
        while (1)
        {
          unsigned int v11 = *v10++;
          uint64_t v5 = v11;
          unint64_t v12 = 0xE700000000000000;
          uint64_t v13 = 0x657361656C6572;
          switch(v11)
          {
            case 1u:
              unint64_t v12 = 0xEE006C616E726574;
              uint64_t v13 = 0x6E695F656C707061;
              break;
            case 2u:
              unint64_t v12 = 0xE400000000000000;
              uint64_t v13 = 1684366707;
              break;
            case 3u:
              break;
            default:
              unint64_t v12 = 0xEB00000000746E65;
              uint64_t v13 = 0x6D706F6C65766564;
              break;
          }
          if (v13 == a1 && v12 == a2)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            return v5;
          }
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v15) {
            break;
          }
          if (!--v9)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 7;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
  return v5;
}

uint64_t sub_100022684()
{
  return sub_1000222A4(*v0);
}

uint64_t sub_10002268C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000223B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000226B4()
{
  return sub_100022298();
}

uint64_t sub_1000226D4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000223AC();
  *a1 = result;
  return result;
}

uint64_t sub_1000226FC(uint64_t a1)
{
  unint64_t v2 = sub_100029AD0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100022738(uint64_t a1)
{
  unint64_t v2 = sub_100029AD0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100022774@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100016CE0(&qword_1000A6850);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017740(a1, a1[3]);
  sub_100029AD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10001610C((uint64_t)a1);
  }
  char v50 = 4;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v40 = v9;
  char v49 = 5;
  swift_bridgeObjectRetain();
  uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v39 = v12;
  sub_100016CE0(&qword_1000A6860);
  char v48 = 6;
  sub_100029BD0(&qword_1000A6868, &qword_1000A6860, (void (*)(void))sub_100029B1C);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v37 = v46;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v44 = *(void *)(v13 + 16);
  if (v44)
  {
    uint64_t v35 = v5;
    uint64_t v36 = v6;
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    uint64_t v45 = _swiftEmptyArrayStorage;
    uint64_t v42 = a2;
    uint64_t v43 = v13;
    while (1)
    {
      uint64_t v15 = *(unsigned __int8 *)(v13 + v14 + 32);
      int v16 = 1;
      char v17 = 0;
      char v18 = 0;
      int v19 = 0;
      switch(v15)
      {
        case 1:
          char v18 = 0;
          char v17 = 1;
          int v19 = 1;
          goto LABEL_13;
        case 2:
          char v17 = 0;
          char v18 = 1;
          goto LABEL_12;
        case 3:
          char v17 = 0;
          char v18 = 0;
          int v16 = 0;
          int v19 = 0;
          goto LABEL_13;
        case 4:
          goto LABEL_13;
        case 5:
          char v17 = 0;
          char v18 = 0;
          goto LABEL_12;
        case 6:
          char v17 = 0;
          char v18 = 0;
LABEL_12:
          int v19 = 1;
LABEL_13:
          int v41 = v19;
          int v47 = v16;
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          LOBYTE(v15) = (v20 & 1) == 0;
          if (v20 & 1) != 0 || (v17) {
            goto LABEL_25;
          }
          unsigned __int8 v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          LOBYTE(v15) = (v21 & 1) != 0 ? 1 : 2;
          if ((v21 | v18)) {
            goto LABEL_25;
          }
          if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            LOBYTE(v15) = 2;
LABEL_25:
            swift_bridgeObjectRelease();
            a2 = v42;
            uint64_t v23 = (uint64_t)v45;
            goto LABEL_26;
          }
          if ((v47 | v41) != 1)
          {
            LOBYTE(v15) = 3;
            goto LABEL_25;
          }
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v23 = (uint64_t)v45;
          if ((v22 & 1) == 0)
          {
            a2 = v42;
            goto LABEL_31;
          }
          LOBYTE(v15) = 3;
          a2 = v42;
LABEL_26:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10001E944(0, *(void *)(v23 + 16) + 1, 1, v23);
            uint64_t v23 = v26;
          }
          unint64_t v25 = *(void *)(v23 + 16);
          unint64_t v24 = *(void *)(v23 + 24);
          if (v25 >= v24 >> 1)
          {
            sub_10001E944(v24 > 1, v25 + 1, 1, v23);
            uint64_t v23 = v27;
          }
          *(void *)(v23 + 16) = v25 + 1;
          *(unsigned char *)(v23 + v25 + 32) = v15;
LABEL_31:
          uint64_t v45 = (void *)v23;
          ++v14;
          uint64_t v13 = v43;
          if (v44 == v14)
          {
            swift_bridgeObjectRelease();
            uint64_t v5 = v35;
            uint64_t v6 = v36;
            uint64_t v28 = v45;
            goto LABEL_35;
          }
          break;
        default:
          goto LABEL_25;
      }
    }
  }
  uint64_t v28 = _swiftEmptyArrayStorage;
LABEL_35:
  uint64_t v29 = swift_bridgeObjectRelease();
  __chkstk_darwin(v29);
  *(&v35 - 2) = (uint64_t)v8;
  uint64_t v30 = sub_100022084((void (*)(uint64_t *__return_ptr, char *))sub_100029B68, (uint64_t)(&v35 - 4), (uint64_t)v28);
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_100022F6C((uint64_t)v30, (uint64_t *)&unk_1000A84F0, (void (*)(uint64_t, uint64_t, void **))sub_100027A5C);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  sub_10001610C((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v32 = v37;
  swift_bridgeObjectRelease();
  uint64_t v33 = v39;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v40;
  *(void *)(a2 + 8) = v33;
  char v34 = BYTE4(v38);
  *(_DWORD *)(a2 + 16) = v38;
  *(unsigned char *)(a2 + 20) = v34 & 1;
  *(void *)(a2 + 24) = v32;
  *(void *)(a2 + 32) = v31;
  return result;
}

uint64_t sub_100022E3C@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  sub_100016CE0(&qword_1000A6850);
  sub_100029B84();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v2)
  {
    swift_errorRelease();
    sub_100016CE0(&qword_1000A6888);
    sub_100029BD0(&qword_1000A6890, &qword_1000A6888, (void (*)(void))sub_100029C50);
    uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
    *a2 = v4;
    a2[1] = v6;
  }
  else
  {
    uint64_t result = sub_1000088D0(v6, v7);
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_100022F4C(uint64_t a1)
{
  return sub_100022F6C(a1, &qword_1000A67F0, (void (*)(uint64_t, uint64_t, void **))sub_100028078);
}

void *sub_100022F6C(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  if (*(void *)(a1 + 16))
  {
    sub_100016CE0(a2);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
  }
  unint64_t v7 = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  a3(v5, 1, &v7);
  swift_bridgeObjectRelease();
  return v7;
}

double sub_10002301C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100022774(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

unint64_t sub_100023064(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a1) {
      return 0xD000000000000025;
    }
    else {
      return 0xD00000000000001DLL;
    }
  }
  else
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    return 0xD000000000000011;
  }
}

unint64_t sub_10002313C()
{
  return sub_100023064(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_100023148@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_100028838();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)();
  if (v4)
  {
    sub_1000088D0(a1, a2);
    return swift_release();
  }
  else
  {
    int v10 = v17;
    uint64_t v11 = v19;
    uint64_t v12 = sub_10006B244(a3, v20);
    if (!v12) {
      uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v13 = v12;
    if (v18) {
      int v10 = 86400;
    }
    if (v19)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = v16;
      swift_bridgeObjectRetain();
      sub_1000088D0(a1, a2);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = v16;
      swift_bridgeObjectRetain();
      uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
      sub_1000088D0(a1, a2);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    *(void *)a4 = v13;
    *(_DWORD *)(a4 + 8) = v10;
    *(void *)(a4 + 16) = v15;
    *(void *)(a4 + 24) = v14;
    *(void *)(a4 + 32) = v11;
  }
  return result;
}

void sub_100023318(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  v325 = a2;
  uint64_t v330 = type metadata accessor for SessionConfiguration.Backend(0);
  sub_10000948C();
  __chkstk_darwin(v5);
  sub_100016178();
  v329 = v6;
  uint64_t v7 = sub_100013EC4();
  uint64_t v324 = type metadata accessor for SessionConfiguration.BackendHTTP(v7);
  sub_10000948C();
  __chkstk_darwin(v8);
  sub_100016178();
  v323 = v9;
  uint64_t v10 = sub_100016CE0(&qword_1000A6780);
  __chkstk_darwin(v10 - 8);
  sub_100016178();
  uint64_t v339 = v11;
  sub_100013EC4();
  uint64_t v342 = type metadata accessor for URL();
  sub_100014C1C();
  uint64_t v379 = v12;
  __chkstk_darwin(v13);
  sub_100014198();
  uint64_t v328 = v14;
  sub_100013F9C();
  __chkstk_darwin(v15);
  v327 = (char *)v322 - v16;
  sub_100013EC4();
  uint64_t v356 = type metadata accessor for Locale();
  sub_100014C1C();
  v377 = v17;
  __chkstk_darwin(v18);
  sub_100014198();
  uint64_t v341 = v19;
  sub_100013F9C();
  __chkstk_darwin(v20);
  v343 = (char *)v322 - v21;
  sub_100013EC4();
  uint64_t v22 = type metadata accessor for Logger();
  sub_100014C1C();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  sub_100014198();
  v334 = v26;
  sub_100013F9C();
  __chkstk_darwin(v27);
  v352 = (char *)v322 - v28;
  sub_100013F9C();
  __chkstk_darwin(v29);
  v333 = (char *)v322 - v30;
  sub_100013F9C();
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)v322 - v32;
  uint64_t v34 = a1[3];
  uint64_t v35 = a1[4];
  sub_100017740(a1, v34);
  uint64_t v372 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
  v373 = v36;
  uint64_t v37 = a1[3];
  uint64_t v38 = a1[4];
  v344 = a1;
  sub_100017740(a1, v37);
  uint64_t v39 = v37;
  uint64_t v40 = v22;
  uint64_t v380 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 24))(v39, v38);
  v381 = v41;
  uint64_t v42 = *v2;
  uint64_t v43 = *(void *)(*v2 + 64);
  uint64_t v351 = *v2 + 64;
  uint64_t v44 = 1 << *(unsigned char *)(v42 + 32);
  uint64_t v45 = -1;
  v392 = &_swiftEmptyArrayStorage;
  if (v44 < 64) {
    uint64_t v45 = ~(-1 << v44);
  }
  unint64_t v46 = v45 & v43;
  v391 = &_swiftEmptyArrayStorage;
  uint64_t v345 = v24 + 8;
  uint64_t v346 = v24 + 16;
  v337 = &v382;
  v374 = &v393[16];
  v368 = &v393[232];
  v369 = &v393[216];
  int64_t v354 = (unint64_t)(v44 + 63) >> 6;
  v355 = v377 + 1;
  v340 = &v393[224];
  v326 = (char **)(v379 + 32);
  v322[0] = v379 + 8;
  v322[1] = v379 + 16;
  uint64_t v47 = swift_bridgeObjectRetain();
  unint64_t v48 = v46;
  int64_t v49 = 0;
  uint64_t v331 = 2;
  long long v338 = xmmword_100085330;
  v336 = (char *)&type metadata for Any + 8;
  long long v335 = xmmword_100085320;
  v332 = v3;
  uint64_t v375 = v22;
  v378 = v33;
  uint64_t v347 = v47;
  while (1)
  {
    do
    {
      while (1)
      {
        if (v48)
        {
          unint64_t v50 = __clz(__rbit64(v48));
          v48 &= v48 - 1;
          unint64_t v51 = v50 | (v49 << 6);
        }
        else
        {
          int64_t v52 = v49 + 1;
          if (__OFADD__(v49, 1)) {
            goto LABEL_340;
          }
          if (v52 >= v354) {
            goto LABEL_334;
          }
          unint64_t v53 = *(void *)(v351 + 8 * v52);
          ++v49;
          if (!v53)
          {
            int64_t v49 = v52 + 1;
            if (v52 + 1 >= v354) {
              goto LABEL_334;
            }
            unint64_t v53 = *(void *)(v351 + 8 * v49);
            if (!v53)
            {
              int64_t v49 = v52 + 2;
              if (v52 + 2 >= v354) {
                goto LABEL_334;
              }
              unint64_t v53 = *(void *)(v351 + 8 * v49);
              if (!v53)
              {
                int64_t v54 = v52 + 3;
                if (v54 >= v354) {
                  goto LABEL_334;
                }
                unint64_t v53 = *(void *)(v351 + 8 * v54);
                if (!v53)
                {
                  while (1)
                  {
                    int64_t v49 = v54 + 1;
                    if (__OFADD__(v54, 1)) {
                      goto LABEL_342;
                    }
                    if (v49 >= v354) {
                      break;
                    }
                    unint64_t v53 = *(void *)(v351 + 8 * v49);
                    ++v54;
                    if (v53) {
                      goto LABEL_19;
                    }
                  }
LABEL_334:
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
                  v317 = v392;
                  v318 = v391;
                  uint64_t v319 = v332[2];
                  uint64_t v320 = swift_bridgeObjectRetain();
                  v321 = v325;
                  void *v325 = v317;
                  v321[1] = v318;
                  *((unsigned char *)v321 + 16) = 0;
                  v321[3] = v319;
                  v321[4] = v320;
                  *((unsigned char *)v321 + 40) = v331;
                  return;
                }
                int64_t v49 = v54;
              }
            }
          }
LABEL_19:
          unint64_t v48 = (v53 - 1) & v53;
          unint64_t v51 = __clz(__rbit64(v53)) + (v49 << 6);
        }
        uint64_t v55 = *(void *)(v47 + 56) + 32 * v51;
        uint64_t v56 = *(void *)v55;
        uint64_t v371 = *(void *)(v55 + 8);
        uint64_t v57 = *(void *)(v55 + 16);
        int v58 = *(unsigned __int8 *)(v55 + 24);
        uint64_t v379 = v57;
        if (v58) {
          break;
        }
        v377 = *(NSObject **)(v57 + 16);
        if (v377)
        {
          unint64_t v364 = v48;
          int64_t v365 = v49;
          v101 = (uint64_t *)(*(void *)(v47 + 48) + 16 * v51);
          uint64_t v102 = v101[1];
          uint64_t v360 = *v101;
          v376 = (void (*)(char *, uint64_t, uint64_t))(v57 + 32);
          uint64_t v362 = v102;
          swift_bridgeObjectRetain();
          uint64_t v370 = v56;
          sub_100028884(v56, v371, v57, 0);
          swift_bridgeObjectRetain();
          unint64_t v103 = 0;
          while (1)
          {
            if (v103 >= *(void *)(v57 + 16)) {
              goto LABEL_336;
            }
            memcpy(v393, (char *)v376 + 240 * v103, sizeof(v393));
            sub_100016D74((uint64_t)v393, (uint64_t)v398, &qword_1000A67C0);
            sub_100016D74((uint64_t)v398, (uint64_t)&v399, &qword_1000A67C0);
            if (v399.n128_u64[1])
            {
              sub_10002A4BC(v399);
              sub_100028A34((uint64_t)v393);
              sub_1000289E8();
              sub_100014480();
              uint64_t v104 = StringProtocol.components<A>(separatedBy:)();
              uint64_t v105 = *(void *)(v104 + 16);
              if (!v105) {
                goto LABEL_134;
              }
              sub_100015130();
              BOOL v108 = v77 && v106 == v107;
              if (v108 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_83;
              }
              if (v105 == 1) {
                goto LABEL_134;
              }
              sub_100015130();
              BOOL v132 = v77 && v130 == v131;
              if (v132 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_83:
                swift_bridgeObjectRelease();
              }
              else
              {
                if (v105 == 2)
                {
LABEL_134:
                  swift_bridgeObjectRelease();
LABEL_135:
                  sub_100028B28((uint64_t)v393);
                  goto LABEL_255;
                }
                uint64_t v133 = v104 + 72;
                uint64_t v134 = 2;
                while (1)
                {
                  uint64_t v40 = v134 + 1;
                  if (__OFADD__(v134, 1)) {
                    goto LABEL_341;
                  }
                  sub_100015130();
                  BOOL v137 = v77 && v135 == v136;
                  if (v137 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    break;
                  }
                  v133 += 16;
                  ++v134;
                  if (v40 == v105)
                  {
                    swift_bridgeObjectRelease();
                    sub_10002A4E4();
                    goto LABEL_135;
                  }
                }
                swift_bridgeObjectRelease();
                sub_10002A4E4();
              }
            }
            else
            {
              sub_100028A34((uint64_t)v393);
            }
            sub_100016D74((uint64_t)v374, (uint64_t)v397, &qword_1000A67C0);
            sub_100016D74((uint64_t)v397, (uint64_t)&v400, &qword_1000A67C0);
            if (v400.n128_u64[1])
            {
              sub_10002A4BC(v400);
              sub_1000289E8();
              sub_100014480();
              uint64_t v109 = StringProtocol.components<A>(separatedBy:)();
              uint64_t v110 = *(void *)(v109 + 16);
              if (!v110) {
                goto LABEL_171;
              }
              swift_bridgeObjectRetain();
              char v111 = sub_100025CF4();
              swift_bridgeObjectRelease();
              if ((v111 & 1) == 0)
              {
                if (v110 == 1) {
                  goto LABEL_131;
                }
                uint64_t v126 = v109 + 56;
                uint64_t v127 = 1;
                while (1)
                {
                  uint64_t v128 = v127 + 1;
                  if (__OFADD__(v127, 1)) {
                    break;
                  }
                  swift_bridgeObjectRetain();
                  char v129 = sub_100025CF4();
                  swift_bridgeObjectRelease();
                  if (v129) {
                    goto LABEL_88;
                  }
                  ++v127;
                  v126 += 16;
                  if (v128 == v110) {
                    goto LABEL_131;
                  }
                }
                __break(1u);
LABEL_336:
                __break(1u);
LABEL_337:
                __break(1u);
LABEL_338:
                __break(1u);
                goto LABEL_339;
              }
LABEL_88:
              swift_bridgeObjectRelease();
              uint64_t v40 = v375;
              uint64_t v57 = v379;
            }
            sub_100016D74((uint64_t)v369, (uint64_t)&v396, &qword_1000A67C8);
            sub_100016D74((uint64_t)&v396, (uint64_t)&v402, &qword_1000A67C8);
            BOOL v113 = (v402 & 1) == 0 && v402 != 2;
            if ((DiagnosticLogSubmissionEnabled() & 1) == 0 && !v113)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_100028B28((uint64_t)v393);
              if (qword_1000A5FC8 != -1) {
                swift_once();
              }
              sub_100012884(v40, (uint64_t)qword_1000AF250);
              sub_100016620();
              sub_10002A4B0();
              v220();
              uint64_t v221 = sub_100017D30();
              v222 = v373;
              *(void *)(v221 + 16) = v372;
              *(void *)(v221 + 24) = v222;
              uint64_t v223 = sub_100017D30();
              v224 = v381;
              *(void *)(v223 + 16) = v380;
              *(void *)(v223 + 24) = v224;
              v376 = (void (*)(char *, uint64_t, uint64_t))v223;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              v377 = Logger.logObject.getter();
              LODWORD(v367) = static os_log_type_t.debug.getter();
              uint64_t v225 = sub_100015EA4();
              *(unsigned char *)(v225 + 16) = 34;
              uint64_t v226 = v225;
              uint64_t v366 = sub_100015EA4();
              *(unsigned char *)(v366 + 16) = 8;
              uint64_t v227 = sub_100017D30();
              *(void *)(v227 + 16) = sub_10002A488;
              *(void *)(v227 + 24) = v221;
              uint64_t v228 = sub_100017D30();
              *(void *)(v228 + 16) = sub_10002A424;
              *(void *)(v228 + 24) = v227;
              uint64_t v229 = sub_100015EA4();
              *(unsigned char *)(v229 + 16) = 34;
              uint64_t v230 = sub_100015EA4();
              *(unsigned char *)(v230 + 16) = 8;
              uint64_t v231 = sub_100017D30();
              *(void *)(v231 + 16) = sub_10002A488;
              *(void *)(v231 + 24) = v223;
              uint64_t v232 = sub_100017D30();
              *(void *)(v232 + 16) = sub_10002A424;
              *(void *)(v232 + 24) = v231;
              sub_100016CE0(&qword_1000A67B0);
              uint64_t inited = (__n128 *)swift_initStackObject();
              sub_10001A750(inited);
              v234[4] = sub_10002A42C;
              v234[5] = v226;
              uint64_t v235 = v366;
              v234[6] = sub_10002A42C;
              v234[7] = v235;
              v234[8] = sub_10002A428;
              v234[9] = v228;
              v234[10] = sub_10002A42C;
              v234[11] = v229;
              v234[12] = sub_10002A42C;
              v234[13] = v230;
              v234[14] = sub_10002A428;
              v234[15] = v232;
              v363 = v221;
              swift_retain();
              uint64_t v362 = v227;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v361 = (void *)v229;
              swift_retain();
              uint64_t v360 = v230;
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              int v236 = v367;
              if (os_log_type_enabled(v377, (os_log_type_t)v367))
              {
                sub_1000328A8();
                v383[0] = sub_10001A89C();
                *(_WORD *)uint64_t v223 = 514;
                *(unsigned char *)(v223 + 2) = 34;
                swift_release();
                LODWORD(v367) = v236;
                *(unsigned char *)(v223 + 3) = 8;
                swift_release();
                sub_1000128D8();
                uint64_t v237 = sub_100013470();
                sub_1000141AC(v237);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                *(unsigned char *)(v223 + 12) = 34;
                swift_release();
                *(unsigned char *)(v223 + 13) = 8;
                swift_release();
                sub_10001A668();
                uint64_t v238 = sub_10002A494();
                sub_1000141AC(v238);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v239 = v377;
                sub_100007D88((void *)&_mh_execute_header, v377, (os_log_type_t)v367, "skipping %{public}s:%{public}s: dnu disabled");
                swift_arrayDestroy();
                sub_100009474();
                sub_100009474();
              }
              else
              {

                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
              }
              sub_100017618();
              sub_10001A534();
              uint64_t v40 = v375;
              sub_100014474();
              v275();
              goto LABEL_319;
            }
            sub_100016D74((uint64_t)v368, (uint64_t)&v394, &qword_1000A67C8);
            sub_100016D74((uint64_t)&v394, (uint64_t)v404, &qword_1000A67C8);
            int v114 = v404[0];
            if (sub_100019EB8() && v114 != 2 && (v114 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_100028B28((uint64_t)v393);
              uint64_t v254 = v380;
              if (qword_1000A5FC8 != -1) {
                swift_once();
              }
              sub_100012884(v40, (uint64_t)qword_1000AF250);
              sub_100016620();
              sub_10002A4B0();
              v255();
              uint64_t v256 = sub_100017D30();
              v257 = v373;
              *(void *)(v256 + 16) = v372;
              *(void *)(v256 + 24) = v257;
              uint64_t v258 = sub_100017D30();
              v259 = v381;
              *(void *)(v258 + 16) = v254;
              *(void *)(v258 + 24) = v259;
              v376 = (void (*)(char *, uint64_t, uint64_t))v258;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              v377 = Logger.logObject.getter();
              LODWORD(v367) = static os_log_type_t.debug.getter();
              uint64_t v260 = sub_100015EA4();
              *(unsigned char *)(v260 + 16) = 34;
              uint64_t v261 = v260;
              uint64_t v366 = sub_100015EA4();
              *(unsigned char *)(v366 + 16) = 8;
              uint64_t v262 = sub_100017D30();
              *(void *)(v262 + 16) = sub_10002A488;
              *(void *)(v262 + 24) = v256;
              uint64_t v263 = sub_100017D30();
              *(void *)(v263 + 16) = sub_10002A424;
              *(void *)(v263 + 24) = v262;
              uint64_t v264 = sub_100015EA4();
              *(unsigned char *)(v264 + 16) = 34;
              uint64_t v265 = sub_100015EA4();
              *(unsigned char *)(v265 + 16) = 8;
              uint64_t v266 = sub_100017D30();
              *(void *)(v266 + 16) = sub_10002A488;
              *(void *)(v266 + 24) = v258;
              uint64_t v267 = sub_100017D30();
              *(void *)(v267 + 16) = sub_10002A424;
              *(void *)(v267 + 24) = v266;
              sub_100016CE0(&qword_1000A67B0);
              v268 = (__n128 *)swift_allocObject();
              sub_10001A750(v268);
              v269[4] = sub_10002A42C;
              v269[5] = v261;
              uint64_t v270 = v366;
              v269[6] = sub_10002A42C;
              v269[7] = v270;
              v269[8] = sub_10002A428;
              v269[9] = v263;
              v269[10] = sub_10002A42C;
              v269[11] = v264;
              v269[12] = sub_10002A42C;
              v269[13] = v265;
              v269[14] = sub_10002A428;
              v269[15] = v267;
              v363 = v256;
              swift_retain();
              uint64_t v362 = v262;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v361 = (void *)v264;
              swift_retain();
              uint64_t v360 = v265;
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              os_log_type_t v271 = v367;
              if (os_log_type_enabled(v377, (os_log_type_t)v367))
              {
                sub_1000328A8();
                os_log_t v367 = (os_log_t)sub_10001A89C();
                sub_100011324((uint64_t)v367);
                *(unsigned char *)(v258 + 3) = 8;
                swift_release();
                sub_1000128D8();
                uint64_t v272 = sub_100013470();
                sub_1000141AC(v272);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                *(unsigned char *)(v258 + 12) = v264;
                swift_release();
                *(unsigned char *)(v258 + 13) = 8;
                swift_release();
                sub_10001A668();
                uint64_t v273 = sub_10002A494();
                sub_1000141AC(v273);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v274 = v377;
                sub_100007D88((void *)&_mh_execute_header, v377, v271, "skipping %{public}s:%{public}s: PE disabled");
                swift_arrayDestroy();
                sub_100009474();
                sub_100009474();
              }
              else
              {

                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
              }
              sub_100017618();
              sub_10001A534();
              v277 = v333;
              goto LABEL_298;
            }
            NSString v115 = String._bridgeToObjectiveC()();
            uint64_t v116 = MGCopyAnswer();

            if (!v116) {
              goto LABEL_347;
            }
            v117 = *(void **)&v393[104];
            type metadata accessor for CFString(0);
            v118 = (void *)swift_dynamicCastUnknownClassUnconditional();
            uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v121 = v120;

            if (v117)
            {
              uint64_t v122 = v117[2];
              if (!v122) {
                goto LABEL_171;
              }
              BOOL v123 = v117[4] == v119 && v117[5] == v121;
              if (!v123 && (sub_1000199E0() & 1) == 0)
              {
                if (v122 == 1) {
                  goto LABEL_171;
                }
                BOOL v124 = v117[6] == v119 && v117[7] == v121;
                if (!v124 && (sub_1000199E0() & 1) == 0)
                {
                  if (v122 == 2) {
                    goto LABEL_171;
                  }
                  swift_bridgeObjectRetain();
                  uint64_t v40 = (uint64_t)(v117 + 9);
                  uint64_t v57 = 2;
                  while (1)
                  {
                    if (__OFADD__(2, 1)) {
                      goto LABEL_343;
                    }
                    BOOL v125 = v117[8] == v119 && *(void *)v40 == v121;
                    if (v125 || (sub_1000199E0() & 1) != 0) {
                      break;
                    }
                    sub_10002A4D4();
                    if (v77)
                    {
                      swift_bridgeObjectRelease();
LABEL_131:
                      swift_bridgeObjectRelease();
LABEL_132:
                      sub_100028B28((uint64_t)v393);
                      uint64_t v40 = v375;
                      goto LABEL_254;
                    }
                  }
                  swift_bridgeObjectRelease();
                  sub_10000949C();
                }
              }
            }
            v138 = *(void **)&v393[96];
            if (*(void *)&v393[96])
            {
              uint64_t v139 = *(void *)(*(void *)&v393[96] + 16);
              if (v139)
              {
                BOOL v140 = *(void *)(*(void *)&v393[96] + 32) == v119
                    && *(void *)(*(void *)&v393[96] + 40) == v121;
                if (!v140 && (sub_1000199E0() & 1) == 0)
                {
                  if (v139 == 1) {
                    goto LABEL_161;
                  }
                  BOOL v148 = v138[6] == v119 && v138[7] == v121;
                  if (!v148 && (sub_1000199E0() & 1) == 0)
                  {
                    if (v139 == 2) {
                      goto LABEL_161;
                    }
                    swift_bridgeObjectRetain();
                    uint64_t v40 = (uint64_t)(v138 + 9);
                    uint64_t v57 = 2;
                    while (1)
                    {
                      if (__OFADD__(2, 1)) {
                        goto LABEL_344;
                      }
                      BOOL v149 = v138[8] == v119 && *(void *)v40 == v121;
                      if (v149 || (sub_1000199E0() & 1) != 0) {
                        break;
                      }
                      sub_10002A4D4();
                      if (v77)
                      {
                        swift_bridgeObjectRelease();
                        sub_10000949C();
                        goto LABEL_161;
                      }
                    }
                    swift_bridgeObjectRelease();
                    sub_10000949C();
                  }
                }
LABEL_171:
                swift_bridgeObjectRelease();
                sub_100028B28((uint64_t)v393);
                goto LABEL_255;
              }
            }
LABEL_161:
            swift_bridgeObjectRelease();
            v141 = *(void **)&v393[208];
            if (*(void *)&v393[208])
            {
              swift_bridgeObjectRetain();
              static Locale.current.getter();
              uint64_t v142 = Locale.regionCode.getter();
              uint64_t v144 = v143;
              sub_100014474();
              v145();
              if (!v144) {
                goto LABEL_171;
              }
              uint64_t v146 = v141[2];
              if (!v146)
              {
LABEL_170:
                swift_bridgeObjectRelease();
                goto LABEL_171;
              }
              BOOL v147 = v141[4] == v142 && v144 == v141[5];
              if (!v147 && (sub_100019B60() & 1) == 0)
              {
                if (v146 == 1) {
                  goto LABEL_170;
                }
                BOOL v150 = v141[6] == v142 && v144 == v141[7];
                if (!v150 && (sub_100019B60() & 1) == 0)
                {
                  if (v146 == 2) {
                    goto LABEL_170;
                  }
                  swift_bridgeObjectRetain();
                  uint64_t v40 = (uint64_t)(v141 + 9);
                  uint64_t v57 = 2;
                  while (1)
                  {
                    if (__OFADD__(2, 1)) {
                      goto LABEL_346;
                    }
                    BOOL v151 = v141[8] == v142 && v144 == *(void *)v40;
                    if (v151 || (sub_100019B60() & 1) != 0) {
                      break;
                    }
                    sub_10002A4D4();
                    if (v77)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      goto LABEL_132;
                    }
                  }
                  swift_bridgeObjectRelease();
                  sub_10000949C();
                }
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_100016D74((uint64_t)v340, (uint64_t)v395, &qword_1000A67D0);
            static Locale.current.getter();
            uint64_t v152 = Locale.regionCode.getter();
            uint64_t v154 = v153;
            sub_100014474();
            v155();
            if (!v154) {
              goto LABEL_243;
            }
            sub_100016D74((uint64_t)v395, (uint64_t)&v403, &qword_1000A67D0);
            v156 = v403;
            if (!v403 || (uint64_t v366 = *(void *)(v403 + 16)) == 0)
            {
LABEL_242:
              swift_bridgeObjectRelease();
LABEL_243:
              if (v393[56]) {
                double v160 = 1.0;
              }
              else {
                double v160 = *(double *)&v393[48];
              }
              goto LABEL_246;
            }
            sub_100005B44((uint64_t)v395);
            unint64_t v157 = 0;
            os_log_t v367 = v156 + 4;
            v363 = v156;
            while (1)
            {
              sub_100027A3C(v157, 1, (uint64_t)v156);
              v158 = (double *)&v367[2 * v157];
              uint64_t v40 = *(void *)v158;
              uint64_t v159 = *(void *)(*(void *)v158 + 16);
              if (v159) {
                break;
              }
LABEL_240:
              if (++v157 == v366)
              {
                sub_100005B18((uint64_t)v395);
                uint64_t v40 = v375;
                goto LABEL_242;
              }
            }
            double v160 = v158[1];
            uint64_t v57 = *(void *)(v40 + 32);
            uint64_t v161 = *(void *)(v40 + 40);
            swift_bridgeObjectRetain();
            if (v57 == v152 && v154 == v161) {
              goto LABEL_258;
            }
            uint64_t v57 = sub_1000199E0();
            swift_bridgeObjectRetain_n();
            if (v57) {
              goto LABEL_257;
            }
            if (v159 == 1) {
              goto LABEL_239;
            }
            BOOL v163 = *(void *)(v40 + 48) == v152 && v154 == *(void *)(v40 + 56);
            if (!v163 && (sub_1000199E0() & 1) == 0) {
              break;
            }
LABEL_257:
            swift_bridgeObjectRelease_n();
LABEL_258:
            sub_100005B18((uint64_t)v395);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10000949C();
LABEL_246:
            uint64_t v168 = v344[3];
            uint64_t v169 = v344[4];
            sub_100017740(v344, v168);
            if ((*(double (**)(uint64_t, uint64_t))(v169 + 48))(v168, v169) >= v160)
            {
              swift_bridgeObjectRelease();
              sub_100028B28((uint64_t)v393);
              sub_1000288D4(v370, v371, v57, 0);
              swift_bridgeObjectRelease();
              goto LABEL_319;
            }
            int v170 = v393[201];
            v171 = *(char **)&v393[160];
            uint64_t v172 = *(void *)&v393[168];
            unsigned __int8 v173 = v393[176];
            int v174 = v393[153];
            v175 = *(void **)&v393[136];
            v176 = *(void **)&v393[128];
            uint64_t v177 = v339;
            v363 = *(NSObject **)&v393[32];
            uint64_t v366 = *(void *)&v393[40];
            URL.init(string:)();
            if (_s10RTCUtility9XPCObjectOwet_0(v177, 1, v342) != 1)
            {
              swift_bridgeObjectRelease();
              v376 = (void (*)(char *, uint64_t, uint64_t))*v326;
              v376(v327, v177, v342);
              if (v174 == 2) {
                uint64_t v285 = v331;
              }
              else {
                uint64_t v285 = v174 & 1;
              }
              uint64_t v331 = v285;
              sub_100025E70(v171, v172, v173);
              v377 = v286;
              sub_10002A4B0();
              v287();
              BOOL v288 = v170 != 2 && (v170 & 1) == 0;
              v304 = &_swiftEmptyArrayStorage;
              uint64_t v305 = v362;
              v306 = (char *)v376;
              if (v175) {
                v307 = v175;
              }
              else {
                v307 = &_swiftEmptyArrayStorage;
              }
              swift_bridgeObjectRetain();
              uint64_t v308 = sub_10006075C((uint64_t)v307);
              if (v176) {
                v304 = v176;
              }
              swift_bridgeObjectRetain();
              uint64_t v309 = sub_10006075C((uint64_t)v304);
              sub_100028B28((uint64_t)v393);
              sub_100016D74((uint64_t)&v396, (uint64_t)&v401, &qword_1000A67C8);
              BOOL v311 = (v401 & 1) == 0 && v401 != 2;
              uint64_t v313 = (uint64_t)v323;
              v312 = (int *)v324;
              uint64_t *v323 = v360;
              *(void *)(v313 + 8) = v305;
              *(double *)(v313 + 16) = v160;
              ((void (*)(uint64_t, uint64_t, uint64_t))v306)(v313 + v312[6], v328, v342);
              *(void *)(v313 + v312[7]) = v377;
              *(unsigned char *)(v313 + v312[8]) = v288;
              *(void *)(v313 + v312[9]) = v308;
              *(void *)(v313 + v312[10]) = v309;
              *(unsigned char *)(v313 + v312[11]) = v311;
              v314 = v329;
              sub_100028D44(v313, (uint64_t)v329);
              swift_storeEnumTagMultiPayload();
              sub_10004C1B8();
              uint64_t v315 = v392[2];
              sub_10004C1E8(v315);
              sub_10002798C(v315, (uint64_t)v314);
              sub_100017618();
              sub_100029070(v313, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
              sub_100014474();
              v316();
              uint64_t v40 = v375;
              goto LABEL_319;
            }
            sub_100028C2C(v177);
            if (qword_1000A5FC8 != -1) {
              swift_once();
            }
            sub_100012884(v375, (uint64_t)qword_1000AF250);
            sub_100016620();
            sub_10002A4B0();
            v178();
            uint64_t v179 = swift_allocObject();
            memcpy((void *)(v179 + 16), v393, 0xE9uLL);
            sub_100028A34((uint64_t)v393);
            v180 = Logger.logObject.getter();
            os_log_type_t v181 = static os_log_type_t.error.getter();
            uint64_t v182 = sub_100015EA4();
            *(unsigned char *)(v182 + 16) = 32;
            uint64_t v183 = sub_100015EA4();
            *(unsigned char *)(v183 + 16) = 8;
            uint64_t v184 = sub_100017D30();
            *(void *)(v184 + 16) = sub_100028D34;
            *(void *)(v184 + 24) = v179;
            uint64_t v185 = sub_100017D30();
            *(void *)(v185 + 16) = sub_10002A424;
            *(void *)(v185 + 24) = v184;
            sub_100016CE0(&qword_1000A67B0);
            uint64_t v186 = swift_initStackObject();
            *(_OWORD *)(v186 + 16) = v338;
            *(void *)(v186 + 32) = sub_10002A42C;
            *(void *)(v186 + 40) = v182;
            *(void *)(v186 + 48) = sub_10002A42C;
            *(void *)(v186 + 56) = v183;
            *(void *)(v186 + 64) = sub_10002A428;
            *(void *)(v186 + 72) = v185;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            os_log_type_t v187 = v181;
            os_log_t v367 = v180;
            if (os_log_type_enabled(v180, v181))
            {
              v188 = (uint8_t *)sub_1000328A8();
              v361 = (void *)swift_slowAlloc();
              v383[0] = (uint64_t)v361;
              *(_WORD *)v188 = 258;
              v188[2] = 32;
              swift_release();
              v188[3] = 8;
              swift_release();
              unint64_t v189 = v366;
              swift_bridgeObjectRetain();
              uint64_t v190 = sub_10001227C((uint64_t)v363, v189, v383);
              sub_1000141AC(v190);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              sub_100028B28((uint64_t)v393);
              os_log_t v191 = v367;
              _os_log_impl((void *)&_mh_execute_header, v367, v187, "invalid URL \"%s\"", v188, 0xCu);
              swift_arrayDestroy();
              sub_100009474();
              sub_100009474();
            }
            else
            {
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              sub_100028B28((uint64_t)v393);
            }
            sub_10001A534();
            uint64_t v40 = v375;
            sub_100014474();
            v192();
LABEL_254:
            uint64_t v57 = v379;
LABEL_255:
            if (++v103 == v377)
            {
              swift_bridgeObjectRelease();
              sub_1000288D4(v370, v371, v57, 0);
              swift_bridgeObjectRelease();
              goto LABEL_261;
            }
          }
          if (v159 != 2)
          {
            BOOL v164 = *(void *)(v40 + 64) == v152 && v154 == *(void *)(v40 + 72);
            if (v164 || (sub_1000199E0() & 1) != 0) {
              goto LABEL_257;
            }
            if (v159 != 3)
            {
              uint64_t v57 = v40 + 88;
              uint64_t v165 = 3;
              while (1)
              {
                uint64_t v166 = v165 + 1;
                if (__OFADD__(v165, 1)) {
                  break;
                }
                BOOL v167 = *(void *)(v57 - 8) == v152 && v154 == *(void *)v57;
                if (v167 || (sub_1000199E0() & 1) != 0) {
                  goto LABEL_257;
                }
                v57 += 16;
                ++v165;
                if (v166 == v159) {
                  goto LABEL_239;
                }
              }
LABEL_339:
              __break(1u);
LABEL_340:
              __break(1u);
LABEL_341:
              __break(1u);
LABEL_342:
              __break(1u);
LABEL_343:
              __break(1u);
LABEL_344:
              __break(1u);
              goto LABEL_345;
            }
          }
LABEL_239:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v57 = v379;
          v156 = v363;
          goto LABEL_240;
        }
      }
    }
    while (v58 != 1);
    unint64_t v364 = v48;
    int64_t v365 = v49;
    sub_100028884(v56, v371, v57, 1);
    uint64_t v59 = qword_1000A6080;
    uint64_t v370 = v56;
    swift_bridgeObjectRetain();
    if (v59 != -1) {
      swift_once();
    }
    if (byte_1000AF3C8 != 1)
    {
      uint64_t v60 = v370;
LABEL_260:
      sub_1000171CC(v60);
      sub_1000171CC(v60);
LABEL_261:
      uint64_t v47 = v347;
      goto LABEL_320;
    }
    uint64_t v60 = v370;
    uint64_t v349 = *(void *)(v370 + 16);
    if (!v349) {
      goto LABEL_260;
    }
    unint64_t v61 = 0;
    uint64_t v353 = v370 + 32;
LABEL_27:
    if (v61 >= *(void *)(v60 + 16)) {
      goto LABEL_338;
    }
    uint64_t v366 = v61;
    uint64_t v62 = v353 + 112 * v61;
    uint64_t v63 = *(void *)(v62 + 8);
    v363 = *(NSObject **)(v62 + 16);
    uint64_t v64 = *(void *)(v62 + 24);
    double v65 = *(double *)(v62 + 32);
    int v348 = *(unsigned __int8 *)(v62 + 40);
    uint64_t v66 = *(NSObject **)(v62 + 56);
    v376 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 48);
    v377 = v66;
    int v67 = *(unsigned __int8 *)(v62 + 64);
    uint64_t v69 = *(void *)(v62 + 72);
    char v68 = *(void **)(v62 + 80);
    int v70 = *(unsigned __int8 *)(v62 + 88);
    LODWORD(v350) = *(unsigned __int8 *)(v62 + 89);
    char v71 = *(void **)(v62 + 104);
    os_log_t v367 = *(os_log_t *)(v62 + 96);
    if (v63) {
      break;
    }
    uint64_t v357 = 0;
    swift_bridgeObjectRetain();
    BOOL v83 = (char *)v376;
    uint64_t v84 = v64;
    char v85 = v377;
    LODWORD(v362) = v67;
    sub_100028924((uint64_t)v376, (uint64_t)v377, v67);
    uint64_t v360 = v69;
    v361 = v68;
    LODWORD(v359) = v70;
    sub_10002893C();
    v358 = v71;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v40 = v375;
    BOOL v80 = v85;
    BOOL v79 = v83;
    uint64_t v81 = v84;
LABEL_38:
    uint64_t v82 = v379;
    if (!v81) {
      goto LABEL_263;
    }
LABEL_42:
    sub_100016368((uint64_t)v363);
    sub_1000289E8();
    sub_100014480();
    uint64_t v86 = StringProtocol.components<A>(separatedBy:)();
    uint64_t v40 = *(void *)(v86 + 16);
    if (!v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016804((uint64_t)v79, (uint64_t)v80, v362);
      sub_10002A4E4();
      goto LABEL_51;
    }
    uint64_t v87 = (uint64_t)v79;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v82 = sub_100025CF4();
    swift_bridgeObjectRelease();
    if ((v82 & 1) == 0)
    {
      if (v40 != 1)
      {
        uint64_t v88 = v86 + 56;
        uint64_t v89 = 1;
        do
        {
          uint64_t v90 = v89 + 1;
          if (__OFADD__(v89, 1)) {
            goto LABEL_337;
          }
          swift_bridgeObjectRetain();
          uint64_t v82 = sub_100025CF4();
          swift_bridgeObjectRelease();
          if (v82) {
            goto LABEL_262;
          }
          ++v89;
          v88 += 16;
        }
        while (v90 != v40);
      }
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016804(v87, (uint64_t)v377, v362);
      uint64_t v40 = v375;
      uint64_t v82 = v379;
      goto LABEL_51;
    }
LABEL_262:
    swift_bridgeObjectRelease_n();
    sub_10000949C();
    BOOL v80 = v377;
LABEL_263:
    BOOL v194 = (v350 & 1) == 0 && v350 != 2;
    char v195 = DiagnosticLogSubmissionEnabled();
    int v196 = v362;
    if ((v195 & 1) != 0 || v194)
    {
      v363 = v81;
      if (v348) {
        double v65 = 1.0;
      }
      uint64_t v240 = v344[3];
      uint64_t v241 = v344[4];
      sub_100017740(v344, v240);
      double v242 = (*(double (**)(uint64_t, uint64_t))(v241 + 48))(v240, v241);
      int v243 = v359;
      if (v242 >= v65)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100028948((uint64_t)v376, (uint64_t)v80, v196);
        sub_100028960();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v279 = v370;
        uint64_t v278 = v371;
        uint64_t v280 = v379;
        sub_1000288D4(v370, v371, v379, 1);
        sub_1000288D4(v279, v278, v280, 1);
        goto LABEL_319;
      }
      uint64_t v244 = (uint64_t)v80;
      uint64_t v245 = v40;
      LODWORD(v362) = v196;
      v246 = v332;
      sub_100025E70((char *)v376, v244, v196);
      uint64_t v353 = v247;
      uint64_t v249 = v360;
      uint64_t v248 = (uint64_t)v361;
      LODWORD(v359) = v243;
      if (v243)
      {
        uint64_t v250 = v246[4];
        swift_bridgeObjectRetain();
        v251 = (void *)sub_10006B288(v249, v248, v250);
        unsigned __int8 v253 = v252;
        sub_100028960();
        if (v253 == 255) {
          goto LABEL_286;
        }
        if (v253 != 1)
        {
          sub_1000289D4((uint64_t)v251, v253);
LABEL_286:
          v251 = &_swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        v251 = (void *)v249;
      }
      int64_t v289 = v251[2];
      if (v289)
      {
        v383[0] = (uint64_t)&_swiftEmptyArrayStorage;
        sub_100027858(v289);
        v350 = v251;
        v290 = v251 + 9;
        do
        {
          uint64_t v292 = *(v290 - 5);
          uint64_t v291 = *(v290 - 4);
          char v293 = *((unsigned char *)v290 - 24);
          uint64_t v294 = *(v290 - 1);
          uint64_t v366 = *(v290 - 2);
          uint64_t v295 = *v290;
          v290 += 6;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1000284CC();
          uint64_t v40 = *(void *)(v383[0] + 16);
          sub_100028528((char *)v40);
          *(void *)&long long v384 = v292;
          *((void *)&v384 + 1) = v291;
          uint64_t v385 = v292;
          uint64_t v386 = v291;
          char v387 = v293;
          uint64_t v388 = v366;
          uint64_t v389 = v294;
          uint64_t v390 = v295;
          sub_100028550(v40, &v384);
          --v289;
        }
        while (v289);
        swift_bridgeObjectRelease();
        sub_10000E8FC();
        sub_10002A4E4();
      }
      else
      {
        uint64_t v40 = v245;
        swift_bridgeObjectRelease();
        sub_10000E8FC();
        v296 = &_swiftEmptyArrayStorage;
      }
      v297 = sub_100022F6C((uint64_t)v296, &qword_1000A67D8, (void (*)(uint64_t, uint64_t, void **))sub_100027D14);
      if (v358) {
        v298 = v358;
      }
      else {
        v298 = &_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRetain();
      uint64_t v366 = sub_10006075C((uint64_t)v298);
      os_log_t v299 = v367;
      if (v367)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100017F94();
        swift_bridgeObjectRelease();
        os_log_t v300 = v299;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100017F94();
        swift_bridgeObjectRelease();
        os_log_t v300 = (os_log_t)&_swiftEmptyArrayStorage;
      }
      uint64_t v301 = sub_10006075C((uint64_t)v300);
      v302 = v329;
      double *v329 = v65;
      *((void *)v302 + 1) = v353;
      *((void *)v302 + 2) = v297;
      *((void *)v302 + 3) = v366;
      *((void *)v302 + 4) = v301;
      swift_storeEnumTagMultiPayload();
      sub_10004C1B8();
      uint64_t v303 = v391[2];
      sub_10004C1E8(v303);
      sub_10002798C(v303, (uint64_t)v302);
      uint64_t v282 = v370;
      uint64_t v283 = v371;
      uint64_t v284 = v379;
LABEL_318:
      sub_1000288D4(v282, v283, v284, 1);
      goto LABEL_319;
    }
    sub_1000288D4(v370, v371, v82, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100016804((uint64_t)v376, (uint64_t)v80, v196);
    swift_bridgeObjectRelease();
    if (qword_1000A5FC8 != -1) {
      swift_once();
    }
    sub_100012884(v40, (uint64_t)qword_1000AF250);
    sub_100016620();
    sub_10002A4B0();
    v197();
    v198 = sub_100017D30();
    v199 = v373;
    v198[2].Class isa = (Class)v372;
    v198[3].Class isa = v199;
    v200 = sub_100017D30();
    v377 = v200;
    v201 = v381;
    v200[2].Class isa = (Class)v380;
    v200[3].Class isa = v201;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v376 = (void (*)(char *, uint64_t, uint64_t))Logger.logObject.getter();
    LODWORD(v361) = static os_log_type_t.debug.getter();
    uint64_t v202 = sub_100015EA4();
    *(unsigned char *)(v202 + 16) = 34;
    uint64_t v203 = v202;
    uint64_t v360 = sub_100015EA4();
    *(unsigned char *)(v360 + 16) = 8;
    uint64_t v204 = sub_100017D30();
    *(void *)(v204 + 16) = sub_1000289A4;
    *(void *)(v204 + 24) = v198;
    uint64_t v205 = sub_100017D30();
    *(void *)(v205 + 16) = sub_1000289BC;
    *(void *)(v205 + 24) = v204;
    uint64_t v206 = sub_100015EA4();
    *(unsigned char *)(v206 + 16) = 34;
    uint64_t v207 = sub_100015EA4();
    *(unsigned char *)(v207 + 16) = 8;
    uint64_t v208 = sub_100017D30();
    v209 = v377;
    *(void *)(v208 + 16) = sub_10002A488;
    *(void *)(v208 + 24) = v209;
    uint64_t v210 = sub_100017D30();
    *(void *)(v210 + 16) = sub_10002A424;
    *(void *)(v210 + 24) = v208;
    sub_100016CE0(&qword_1000A67B0);
    v211 = (__n128 *)swift_initStackObject();
    sub_10001A750(v211);
    v212[4] = sub_1000289B0;
    v212[5] = v203;
    char v213 = v203;
    uint64_t v214 = v360;
    v212[6] = sub_10002A42C;
    v212[7] = v214;
    v212[8] = sub_1000289C4;
    v212[9] = v205;
    v212[10] = sub_10002A42C;
    v212[11] = v206;
    v212[12] = sub_10002A42C;
    v212[13] = v207;
    v212[14] = sub_10002A428;
    v212[15] = v210;
    os_log_t v367 = v198;
    char v215 = v213;
    swift_retain();
    uint64_t v366 = v204;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v363 = v206;
    swift_retain();
    uint64_t v362 = v207;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    int v216 = v361;
    if (os_log_type_enabled((os_log_t)v376, (os_log_type_t)v361))
    {
      sub_1000328A8();
      uint64_t v359 = sub_10001A89C();
      sub_100011324(v359);
      LODWORD(v361) = v216;
      MEMORY[0xB] = 8;
      swift_release();
      sub_1000128D8();
      uint64_t v217 = sub_100013470();
      sub_1000141AC(v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      MEMORY[0x14] = v215;
      swift_release();
      MEMORY[0x15] = 8;
      swift_release();
      sub_10001A668();
      uint64_t v218 = sub_10002A494();
      sub_1000141AC(v218);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      v219 = (char *)v376;
      sub_100007D88((void *)&_mh_execute_header, v376, (os_log_type_t)v361, "skipping %{public}s:%{public}s: dnu disabled");
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    sub_10000E8FC();
    sub_10001A534();
    v277 = v334;
LABEL_298:
    uint64_t v40 = v375;
    v276(v277, v375);
LABEL_319:
    uint64_t v47 = v347;
LABEL_320:
    unint64_t v48 = v364;
    int64_t v49 = v365;
  }
  sub_100016368(*(void *)v62);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100028924((uint64_t)v376, (uint64_t)v377, v67);
  sub_10002893C();
  sub_1000289E8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v72 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v73 = *(void *)(v72 + 16);
  if (!v73)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100028948((uint64_t)v376, (uint64_t)v377, v67);
    sub_100028960();
    swift_bridgeObjectRelease();
    uint64_t v82 = v379;
    uint64_t v40 = v375;
LABEL_51:
    unint64_t v61 = v366 + 1;
    swift_bridgeObjectRelease();
    uint64_t v60 = v370;
    if (v61 == v349)
    {
      uint64_t v281 = v371;
      sub_1000171CC(v370);
      uint64_t v282 = v60;
      uint64_t v283 = v281;
      uint64_t v284 = v82;
      goto LABEL_318;
    }
    goto LABEL_27;
  }
  uint64_t v357 = v63;
  v358 = v71;
  BOOL v74 = v377;
  LODWORD(v362) = v67;
  uint64_t v360 = v69;
  v361 = v68;
  LODWORD(v359) = v70;
  sub_100015130();
  BOOL v77 = v77 && v75 == v76;
  if (v77)
  {
    swift_bridgeObjectRelease();
    uint64_t v82 = v379;
    uint64_t v40 = v375;
    BOOL v79 = (char *)v376;
    BOOL v80 = v74;
    uint64_t v81 = v64;
    if (!v64) {
      goto LABEL_263;
    }
    goto LABEL_42;
  }
  char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v40 = v375;
  BOOL v79 = (char *)v376;
  BOOL v80 = v74;
  uint64_t v81 = v64;
  if (v78)
  {
    swift_bridgeObjectRelease();
    uint64_t v82 = v379;
    if (!v64) {
      goto LABEL_263;
    }
    goto LABEL_42;
  }
  unsigned __int8 v91 = v362;
  if (v73 == 1) {
    goto LABEL_54;
  }
  sub_100015130();
  BOOL v94 = v77 && v92 == v93;
  if (v94 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  if (v73 == 2)
  {
LABEL_54:
    swift_bridgeObjectRelease();
LABEL_55:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100028948((uint64_t)v79, (uint64_t)v80, v91);
    sub_100028960();
    swift_bridgeObjectRelease();
    uint64_t v82 = v379;
    goto LABEL_51;
  }
  uint64_t v95 = v72 + 72;
  uint64_t v96 = 2;
  while (1)
  {
    uint64_t v97 = v96 + 1;
    if (__OFADD__(v96, 1)) {
      break;
    }
    sub_100015130();
    BOOL v100 = v77 && v98 == v99;
    if (v100 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v40 = v375;
      BOOL v79 = (char *)v376;
      goto LABEL_38;
    }
    v95 += 16;
    ++v96;
    if (v97 == v73)
    {
      swift_bridgeObjectRelease();
      uint64_t v40 = v375;
      BOOL v79 = (char *)v376;
      goto LABEL_55;
    }
  }
LABEL_345:
  __break(1u);
LABEL_346:
  __break(1u);
LABEL_347:
  __break(1u);
}

uint64_t sub_100025CF4()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    while (1)
    {
      Swift::String_optional v3 = String.Iterator.next()();
      if (!v3.value._object) {
        break;
      }
      if (countAndFlagsBits == v3.value._countAndFlagsBits && object == v3.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v5 = sub_100019B60();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
      Swift::String_optional v6 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;
      object = v6.value._object;
      if (!v6.value._object) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v7 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  if (!v7) {
    return 1;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100025E40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_100025E70(char *a1, uint64_t a2, unsigned __int8 a3)
{
  int v7 = ~a3;
  uint64_t v8 = type metadata accessor for EventValue();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v104 = v9;
  if (!v7)
  {
    a1 = (char *)&_swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  if (a3)
  {
    uint64_t v12 = *(void *)(v3 + 32);
    sub_10002893C();
    uint64_t v13 = sub_10006B288((uint64_t)a1, a2, v12);
    unsigned __int8 v15 = v14;
    sub_100028948((uint64_t)a1, a2, a3);
    if (v15 != 255)
    {
      if (!v15)
      {
        a1 = (char *)v13;
LABEL_10:
        uint64_t v9 = v104;
        goto LABEL_11;
      }
      sub_1000289D4(v13, v15);
    }
    a1 = (char *)&_swiftEmptyArrayStorage;
    goto LABEL_10;
  }
  sub_10002893C();
LABEL_11:
  sub_10001E9FC(0, *((void *)a1 + 2), 0, (uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v111 = v16;
  uint64_t v17 = *((void *)a1 + 2);
  if (!v17)
  {
LABEL_67:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v18 = 0;
  uint64_t v19 = a1 + 32;
  unsigned __int8 v91 = "Duplicate values for key: '";
  unint64_t v90 = 0x8000000100089280;
  uint64_t v92 = v8;
  uint64_t v95 = a1;
  uint64_t v94 = v17;
  uint64_t v93 = a1 + 32;
  while (v18 < *((void *)a1 + 2))
  {
    uint64_t v20 = &v19[88 * v18];
    if (!*((void *)v20 + 7))
    {
      unint64_t v103 = v18;
      uint64_t v22 = *(void *)v20;
      uint64_t v21 = *((void *)v20 + 1);
      uint64_t v24 = *((void *)v20 + 2);
      uint64_t v23 = *((void *)v20 + 3);
      uint64_t v25 = *((void *)v20 + 4);
      uint64_t v26 = *((void *)v20 + 5);
      uint64_t v27 = *((void *)v20 + 6);
      uint64_t v28 = *((void *)v20 + 9);
      uint64_t v105 = *((void *)v20 + 8);
      uint64_t v29 = *((void *)v20 + 10);
      uint64_t v100 = *(void *)(v22 + 16);
      uint64_t v101 = v25;
      swift_bridgeObjectRetain();
      uint64_t v108 = v21;
      swift_bridgeObjectRetain();
      uint64_t v107 = v24;
      swift_bridgeObjectRetain();
      uint64_t v106 = v23;
      swift_bridgeObjectRetain();
      uint64_t v102 = v26;
      swift_bridgeObjectRetain();
      uint64_t v96 = v27;
      uint64_t v97 = v29;
      uint64_t v98 = v28;
      sub_100028DF0(v27, 0);
      swift_bridgeObjectRetain();
      uint64_t v30 = Set.init(minimumCapacity:)();
      uint64_t v110 = v30;
      uint64_t v31 = *(void *)(v22 + 16);
      if (v31)
      {
        uint64_t v32 = (Swift::Int *)(v22 + 40);
        do
        {
          Swift::Int v33 = *(v32 - 1);
          Swift::Int v34 = *v32;
          swift_bridgeObjectRetain();
          sub_10005B84C(v109, v33, v34);
          swift_bridgeObjectRelease();
          v32 += 2;
          --v31;
        }
        while (v31);
        swift_bridgeObjectRelease();
        uint64_t v99 = v110;
      }
      else
      {
        uint64_t v99 = v30;
        swift_bridgeObjectRelease();
      }
      uint64_t v35 = v108;
      uint64_t v100 = v22;
      int64_t v36 = *(void *)(v108 + 16);
      if (v36)
      {
        v109[0] = (uint64_t)&_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_100071D58(0, v36, 0);
        uint64_t v37 = (void *)v109[0];
        uint64_t v38 = (uint64_t *)(v35 + 40);
        do
        {
          uint64_t v39 = *v38;
          *uint64_t v11 = *(v38 - 1);
          v11[1] = v39;
          swift_storeEnumTagMultiPayload();
          v109[0] = (uint64_t)v37;
          unint64_t v40 = v37[2];
          unint64_t v41 = v37[3];
          swift_bridgeObjectRetain();
          if (v40 >= v41 >> 1)
          {
            sub_100071D58(v41 > 1, v40 + 1, 1);
            uint64_t v37 = (void *)v109[0];
          }
          v38 += 2;
          v37[2] = v40 + 1;
          sub_10002901C((uint64_t)v11, (uint64_t)v37+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v40, (void (*)(void))type metadata accessor for EventValue);
          --v36;
        }
        while (v36);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v37 = &_swiftEmptyArrayStorage;
      }
      uint64_t v42 = v107;
      swift_bridgeObjectRetain();
      uint64_t v43 = Set.init(minimumCapacity:)();
      uint64_t v44 = *(void *)(v42 + 16);
      if (v44)
      {
        uint64_t v45 = 0;
        do
        {
          uint64_t v46 = v43 + 56;
          while (1)
          {
            uint64_t v47 = *(void *)(v42 + 32 + 8 * v45++);
            uint64_t v48 = static Hasher._hash(seed:_:)();
            uint64_t v49 = -1 << *(unsigned char *)(v43 + 32);
            unint64_t v50 = v48 & ~v49;
            if (((*(void *)(v46 + ((v50 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v50) & 1) == 0) {
              break;
            }
            uint64_t v51 = *(void *)(v43 + 48);
            if (*(void *)(v51 + 8 * v50) != v47)
            {
              uint64_t v52 = ~v49;
              do
              {
                unint64_t v50 = (v50 + 1) & v52;
                if (((*(void *)(v46 + ((v50 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v50) & 1) == 0) {
                  goto LABEL_37;
                }
              }
              while (*(void *)(v51 + 8 * v50) != v47);
            }
            if (v45 == v44) {
              goto LABEL_38;
            }
          }
LABEL_37:
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v109[0] = v43;
          sub_10005CA54(v47, v50, isUniquelyReferenced_nonNull_native);
          uint64_t v43 = v109[0];
          swift_bridgeObjectRelease();
        }
        while (v45 != v44);
LABEL_38:
        swift_bridgeObjectRelease();
        uint64_t v9 = v104;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v54 = v106;
      swift_bridgeObjectRetain();
      uint64_t v55 = Set.init(minimumCapacity:)();
      uint64_t v56 = *(void *)(v54 + 16);
      if (v56)
      {
        uint64_t v57 = 0;
        uint64_t v58 = v54 + 32;
        do
        {
          uint64_t v59 = v55 + 56;
          while (1)
          {
            uint64_t v60 = *(void *)(v58 + 8 * v57++);
            uint64_t v61 = static Hasher._hash(seed:_:)();
            uint64_t v62 = -1 << *(unsigned char *)(v55 + 32);
            unint64_t v63 = v61 & ~v62;
            if (((*(void *)(v59 + ((v63 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v63) & 1) == 0) {
              break;
            }
            uint64_t v64 = *(void *)(v55 + 48);
            if (*(void *)(v64 + 8 * v63) != v60)
            {
              uint64_t v65 = ~v62;
              do
              {
                unint64_t v63 = (v63 + 1) & v65;
                if (((*(void *)(v59 + ((v63 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v63) & 1) == 0) {
                  goto LABEL_50;
                }
              }
              while (*(void *)(v64 + 8 * v63) != v60);
            }
            if (v57 == v56) {
              goto LABEL_51;
            }
          }
LABEL_50:
          char v66 = swift_isUniquelyReferenced_nonNull_native();
          v109[0] = v55;
          sub_10005CA54(v60, v63, v66);
          uint64_t v55 = v109[0];
          swift_bridgeObjectRelease();
        }
        while (v57 != v56);
LABEL_51:
        swift_bridgeObjectRelease();
        uint64_t v9 = v104;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v67 = v101;
      uint64_t v68 = v102;
      BOOL v69 = v101 == 0x776F6C6C61 && v102 == 0xE500000000000000;
      if (v69 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        int v70 = &unk_1000A0B90;
        char v71 = &off_1000A0F28;
        goto LABEL_59;
      }
      BOOL v82 = v67 == 0x65766F6D6572 && v68 == 0xE600000000000000;
      if (v82 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        int v70 = &unk_1000A0C10;
        char v71 = &off_1000A0F48;
        goto LABEL_59;
      }
      BOOL v83 = v67 == 0x363532616873 && v68 == 0xE600000000000000;
      if (v83 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        int v70 = &unk_1000A0C90;
        char v71 = &off_1000A0F68;
        goto LABEL_59;
      }
      BOOL v84 = v67 == 0x73696C6574696877 && v68 == 0xEF7365756C615674;
      if (v84 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        int v70 = &unk_1000A0D10;
        char v71 = &off_1000A0F88;
        goto LABEL_59;
      }
      BOOL v85 = v67 == 0x73696C6B63616C62 && v68 == 0xEF7365756C615674;
      if (v85 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        int v70 = &unk_1000A0D90;
        char v71 = &off_1000A0FA8;
        goto LABEL_59;
      }
      if (v67 == 0xD000000000000018 && v68 == v90 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        int v70 = &unk_1000A0E10;
        char v71 = &off_1000A0FC8;
        goto LABEL_59;
      }
      BOOL v86 = v67 == 0x646E65707061 && v68 == 0xE600000000000000;
      if (v86 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        int v70 = &unk_1000A0E90;
        char v71 = &off_1000A0FE8;
        goto LABEL_59;
      }
      if (v67 == 0x646E6570657270 && v68 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        int v70 = &unk_1000A0F10;
        char v71 = &off_1000A1008;
LABEL_59:
        uint64_t v72 = v96;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100028E54(v72, 0);
LABEL_60:
        uint64_t v73 = (void (*)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>))v71[1];
        v109[3] = (uint64_t)v70;
        v109[4] = (uint64_t)v71;
        BOOL v74 = sub_100028EB8(v109);
        v73(v99, (uint64_t)v37, v43, v55, (uint64_t)v74);
        uint64_t v75 = v111;
        uint64_t v76 = swift_isUniquelyReferenced_nonNull_native();
        if ((v76 & 1) == 0)
        {
          sub_10001E9FC(0, *(void *)(v75 + 16) + 1, 1, v75);
          uint64_t v75 = v76;
          uint64_t v111 = v76;
        }
        unint64_t v78 = *(void *)(v75 + 16);
        unint64_t v77 = *(void *)(v75 + 24);
        if (v78 >= v77 >> 1)
        {
          sub_10001E9FC(v77 > 1, v78 + 1, 1, v75);
          uint64_t v75 = v76;
          uint64_t v111 = v76;
        }
        __chkstk_darwin(v76);
        BOOL v80 = (char *)&v89 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, uint64_t *, void *))(v81 + 16))(v80, v74, v70);
        sub_100028F1C(v78, (uint64_t)v80, &v111, (uint64_t)v70, (uint64_t)v71);
        uint64_t v111 = v75;
        sub_10001610C((uint64_t)v109);
        uint64_t v9 = v104;
      }
      else
      {
        char v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100028E54(v96, 0);
        if (v88)
        {
          int v70 = &unk_1000A0F10;
          char v71 = &off_1000A1008;
          goto LABEL_60;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      a1 = v95;
      uint64_t v17 = v94;
      unint64_t v18 = v103;
      uint64_t v19 = v93;
    }
    if (++v18 == v17) {
      goto LABEL_67;
    }
  }
  __break(1u);
}

uint64_t sub_100026A68(uint64_t a1)
{
  return a1;
}

uint64_t sub_100026A9C()
{
  uint64_t result = sub_100026ABC();
  qword_1000A6768 = result;
  return result;
}

uint64_t sub_100026ABC()
{
  uint64_t v0 = type metadata accessor for Data.Deallocator();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  size[0] = 0;
  uint64_t v4 = _NSGetMachExecuteHeader();
  if (getsectiondata(v4, "__TEXT", "__info_plist", size) && size[0])
  {
    if ((size[0] & 0x8000000000000000) != 0) {
      __break(1u);
    }
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Data.Deallocator.none(_:), v0);
    uint64_t v5 = Data.init(bytesNoCopy:count:deallocator:)();
    unint64_t v7 = v6;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    v27[1] = 100;
    sub_100027750();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)();
    uint64_t v9 = size[9];
    unint64_t v10 = size[10];
    sub_100016CE0(&qword_1000A6778);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100084CA0;
    *(void *)(inited + 32) = kSecAttrKeyType;
    *(void *)(inited + 40) = kSecAttrKeyTypeRSA;
    *(void *)(inited + 48) = kSecAttrKeyClass;
    *(void *)(inited + 56) = kSecAttrKeyClassPublic;
    CFStringRef v12 = (id)kSecAttrKeyType;
    CFStringRef v13 = (id)kSecAttrKeyTypeRSA;
    CFStringRef v14 = (id)kSecAttrKeyClass;
    CFStringRef v15 = (id)kSecAttrKeyClassPublic;
    sub_10002779C(v9, v10);
    type metadata accessor for CFString(0);
    sub_100028680(&qword_1000A65B8, type metadata accessor for CFString);
    Dictionary.init(dictionaryLiteral:)();
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000088D0(v9, v10);
    CFDictionaryRef v17 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    SecKeyRef v18 = SecKeyCreateWithData(isa, v17, 0);

    if (v18)
    {
      sub_1000088D0(v9, v10);
      swift_release();
      sub_1000088D0(v5, v7);
      return (uint64_t)v18;
    }
    if (qword_1000A5FC8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100012884(v24, (uint64_t)qword_1000AF250);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v25, "unable to parse storebag key", v26, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_1000A5FC8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100012884(v20, (uint64_t)qword_1000AF250);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "unable to load Info.plist section", v23, 2u);
      swift_slowDealloc();
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_1000270CC(Swift::String a1)
{
  v1._rawValue = &off_10009DEB0;
  return sub_100027280(a1, v1);
}

uint64_t sub_1000270F0()
{
  return 0x726F706552435452;
}

void *sub_100027110(void *a1)
{
  uint64_t v3 = sub_100016CE0(&qword_1000A6838);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = sub_100017740(a1, a1[3]);
  sub_100029A38();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001610C((uint64_t)a1);
  }
  else
  {
    sub_100029A84();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v7 = v9;
    sub_10001610C((uint64_t)a1);
  }
  return v7;
}

BOOL sub_100027280(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  return v5 != 0;
}

BOOL sub_1000272C4(Swift::String a1)
{
  v1._rawValue = &off_10009DEE8;
  return sub_100027280(a1, v1);
}

uint64_t sub_1000272E8()
{
  return 1;
}

unint64_t sub_1000272F0()
{
  return 0xD000000000000011;
}

void *sub_10002730C(void *a1)
{
  uint64_t v3 = sub_100016CE0(&qword_1000A68C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = sub_100017740(a1, a1[3]);
  sub_10002A1BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001610C((uint64_t)a1);
  }
  else
  {
    sub_100029B84();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v7 = v9;
    sub_10001610C((uint64_t)a1);
  }
  return v7;
}

BOOL sub_10002748C@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10009DEB0;
  BOOL result = sub_100027280(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000274C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000270F0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL sub_1000274F4@<W0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_1000270CC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100027520(uint64_t a1)
{
  unint64_t v2 = sub_100029A38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002755C(uint64_t a1)
{
  unint64_t v2 = sub_100029A38();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100027598@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  BOOL result = sub_100027110(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

BOOL sub_1000275D0@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10009DEE8;
  BOOL result = sub_100027280(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_10002760C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000272F0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL sub_100027638@<W0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_1000272C4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100027664()
{
  return sub_100022298();
}

uint64_t sub_100027680@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000272E8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000276AC(uint64_t a1)
{
  unint64_t v2 = sub_10002A1BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000276E8(uint64_t a1)
{
  unint64_t v2 = sub_10002A1BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100027724@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10002730C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_100027750()
{
  unint64_t result = qword_1000A6770;
  if (!qword_1000A6770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6770);
  }
  return result;
}

uint64_t sub_10002779C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t *sub_1000277F4(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

char *sub_100027858(int64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result || a1 > *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v3 + 16) <= a1) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = *(void *)(v3 + 16);
    }
    return sub_100071DAC(result, v5, 0);
  }
  return result;
}

uint64_t sub_1000278D0(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_100009344();
    uint64_t result = sub_10001A990();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for URL();
      uint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v2[2] = a1;
    }
    else
    {
      uint64_t v2 = _swiftEmptyArrayStorage;
    }
    type metadata accessor for URL();
    return (uint64_t)v2;
  }
  return result;
}

uint64_t sub_10002798C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = *(void *)(type metadata accessor for SessionConfiguration.Backend(0) - 8);
  return sub_10002901C(a2, v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * a1, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
}

unint64_t sub_100027A3C(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100027A5C(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  for (unint64_t i = (void *)(swift_bridgeObjectRetain() + 40); ; i += 2)
  {
    unsigned __int8 v7 = *((unsigned char *)i - 8);
    uint64_t v8 = *i;
    uint64_t v9 = (void *)*a3;
    unint64_t v10 = sub_10004C218(v7);
    uint64_t v12 = v9[2];
    BOOL v13 = (v11 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    unint64_t v15 = v10;
    char v16 = v11;
    uint64_t v17 = v9[3];
    swift_bridgeObjectRetain();
    if (v17 < v14) {
      break;
    }
    if (a2)
    {
      if (v16) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_100016CE0(&qword_1000A6878);
      _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(unsigned char *)(v20[6] + v15) = v7;
    *(void *)(v20[7] + 8 * v15) = v8;
    uint64_t v21 = v20[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_18;
    }
    v20[2] = v23;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_1000717BC(v14, a2 & 1);
  unint64_t v18 = sub_10004C218(v7);
  if ((v16 & 1) != (v19 & 1)) {
    goto LABEL_19;
  }
  unint64_t v15 = v18;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_100016CE0(&qword_1000A67E8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v25._object = (void *)0x8000000100089260;
  v25._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v25);
  _print_unlocked<A, B>(_:_:)();
  v26._uint64_t countAndFlagsBits = 39;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100027D14(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v32 = v4;
  if (!v4) {
    return swift_bridgeObjectRelease_n();
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v31 = v3;
  while (1)
  {
    if (v6 >= *(void *)(v3 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    long long v37 = *(_OWORD *)(v3 + v5 + 80);
    char v7 = *(unsigned char *)(v3 + v5 + 64);
    uint64_t v8 = *(void *)(v3 + v5 + 72);
    uint64_t v10 = *(void *)(v3 + v5 + 48);
    uint64_t v9 = *(void *)(v3 + v5 + 56);
    uint64_t v11 = *(void *)(v3 + v5 + 32);
    uint64_t v12 = *(void *)(v3 + v5 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v12) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v33 = v10;
    uint64_t v34 = v9;
    BOOL v13 = (void *)*a3;
    unint64_t v15 = sub_100014BA8();
    uint64_t v16 = v13[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      goto LABEL_21;
    }
    char v19 = v14;
    if (v13[3] < v18) {
      break;
    }
    if (a2)
    {
      if (v14) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_100016CE0(&qword_1000A67E0);
      _NativeDictionary.copy()();
      if (v19) {
        goto LABEL_16;
      }
    }
LABEL_12:
    BOOL v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    uint64_t v23 = (void *)(v22[6] + 16 * v15);
    *uint64_t v23 = v11;
    v23[1] = v12;
    uint64_t v24 = v22[7] + 48 * v15;
    *(void *)uint64_t v24 = v33;
    *(void *)(v24 + 8) = v34;
    *(unsigned char *)(v24 + 16) = v7;
    *(void *)(v24 + 24) = v8;
    *(_OWORD *)(v24 + 32) = v37;
    uint64_t v25 = v22[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_22;
    }
    ++v6;
    v22[2] = v27;
    v5 += 64;
    a2 = 1;
    uint64_t v3 = v31;
    if (v32 == v6) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_100071A20(v18, a2 & 1);
  unint64_t v20 = sub_100014BA8();
  if ((v19 & 1) != (v21 & 1)) {
    goto LABEL_23;
  }
  unint64_t v15 = v20;
  if ((v19 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_100016CE0(&qword_1000A67E8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v29._object = (void *)0x8000000100089260;
  v29._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v29);
  _print_unlocked<A, B>(_:_:)();
  v30._uint64_t countAndFlagsBits = 39;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100028078(uint64_t a1, char a2, void *a3)
{
  uint64_t v42 = a3;
  uint64_t v6 = type metadata accessor for CachedSession(0);
  uint64_t v41 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100016CE0(&qword_1000A67F8);
  uint64_t v10 = __chkstk_darwin(v9);
  BOOL v13 = (void *)((char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  v37[1] = v3;
  v37[2] = a1;
  uint64_t v40 = (uint64_t)v13 + *(int *)(v10 + 48);
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v38 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  uint64_t v39 = v8;
  while (1)
  {
    sub_100028FB4(v15, (uint64_t)v13);
    uint64_t v16 = v13;
    uint64_t v17 = *v13;
    uint64_t v18 = v13[1];
    uint64_t v45 = v17;
    uint64_t v46 = v18;
    sub_10002901C(v40, (uint64_t)v8, (void (*)(void))type metadata accessor for CachedSession);
    char v19 = (void *)*v42;
    unint64_t v21 = sub_100014BA8();
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v25 = v20;
    if (v19[3] < v24) {
      break;
    }
    if (a2)
    {
      if (v20) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_100016CE0((uint64_t *)&unk_1000A78D0);
      _NativeDictionary.copy()();
      if (v25) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v28 = (void *)*v42;
    *(void *)(*v42 + 8 * (v21 >> 6) + 64) |= 1 << v21;
    Swift::String v29 = (void *)(v28[6] + 16 * v21);
    *Swift::String v29 = v17;
    v29[1] = v18;
    uint64_t v8 = v39;
    sub_10002901C((uint64_t)v39, v28[7] + *(void *)(v41 + 72) * v21, (void (*)(void))type metadata accessor for CachedSession);
    uint64_t v30 = v28[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_18;
    }
    v28[2] = v32;
    v15 += v38;
    a2 = 1;
    --v14;
    BOOL v13 = v16;
    if (!v14) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_100071CF4(v24, a2 & 1);
  unint64_t v26 = sub_100014BA8();
  if ((v25 & 1) != (v27 & 1)) {
    goto LABEL_19;
  }
  unint64_t v21 = v26;
  if ((v25 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v33 = swift_allocError();
  swift_willThrow();
  uint64_t v47 = v33;
  swift_errorRetain();
  sub_100016CE0(&qword_1000A67E8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_100029070((uint64_t)v39, (void (*)(void))type metadata accessor for CachedSession);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
LABEL_20:
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v35._object = (void *)0x8000000100089260;
  v35._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)();
  v36._uint64_t countAndFlagsBits = 39;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000284CC()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if ((result & 1) == 0)
  {
    int64_t v3 = *(void *)(v1 + 16) + 1;
    return (uint64_t)sub_100071DAC(0, v3, 1);
  }
  return result;
}

char *sub_100028528(char *result)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if ((uint64_t)(result + 1) > (uint64_t)(v2 >> 1)) {
    return sub_100071DAC((char *)(v2 > 1), (int64_t)(result + 1), 1);
  }
  return result;
}

__n128 sub_100028550(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *((void *)a2 + 3);
  char v6 = *((unsigned char *)a2 + 32);
  uint64_t v7 = *((void *)a2 + 5);
  uint64_t v8 = *v2;
  *(void *)(v8 + 16) = a1 + 1;
  uint64_t v9 = v8 + (a1 << 6);
  *(_OWORD *)(v9 + 32) = v3;
  *(void *)(v9 + 48) = v4;
  *(void *)(v9 + 56) = v5;
  *(unsigned char *)(v9 + 64) = v6;
  *(void *)(v9 + 72) = v7;
  __n128 result = (__n128)a2[3];
  *(__n128 *)(v9 + 80) = result;
  return result;
}

uint64_t sub_10002858C(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_100028680((unint64_t *)&unk_1000A84B0, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002866C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10002779C(a1, a2);
  }
  return a1;
}

uint64_t sub_100028680(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000286C8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100028710()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

unint64_t sub_100028838()
{
  unint64_t result = qword_1000A67A8;
  if (!qword_1000A67A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A67A8);
  }
  return result;
}

uint64_t sub_100028884(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000288D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100028924(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10002893C();
  }
  return result;
}

uint64_t sub_10002893C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100028948(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100028960();
  }
  return result;
}

uint64_t sub_100028960()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002896C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000289A4()
{
  return sub_100026A68(*(void *)(v0 + 16));
}

unsigned char **sub_1000289B0(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return sub_100032AB8(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_1000289BC()
{
  return sub_1000328B0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000289C4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000328D8(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1000289D4(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000289E8()
{
  unint64_t result = qword_1000A67B8;
  if (!qword_1000A67B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A67B8);
  }
  return result;
}

uint64_t sub_100028A34(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 160);
  unsigned __int8 v2 = *(unsigned char *)(a1 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100028924(v5, v4, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100028B28(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 160);
  unsigned __int8 v2 = *(unsigned char *)(a1 + 176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100028948(v5, v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100028C2C(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A6780);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100028C8C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(v0 + 192) != 255) {
    sub_100028960();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 249, 7);
}

uint64_t sub_100028D34()
{
  return sub_100025E40(v0 + 16);
}

uint64_t sub_100028D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028DB0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100028DF0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100028E54(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_100028EB8(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100028F1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_100028EB8((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_10000F3BC(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_100028FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A67F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002901C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000948C();
  uint64_t v4 = sub_1000172EC();
  v5(v4);
  return a2;
}

uint64_t sub_100029070(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000948C();
  sub_100014474();
  v3();
  return a1;
}

uint64_t destroy for Storebag._StorebagRoot()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Storebag._StorebagRoot(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Storebag._StorebagRoot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Storebag._StorebagRoot()
{
  return &type metadata for Storebag._StorebagRoot;
}

void type metadata accessor for StorebagKeyInfoPlistProvider()
{
}

unsigned char *sub_100029310(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000293DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for StorebagEnvironment()
{
}

__n128 initializeWithTake for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRoot()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot;
}

uint64_t initializeWithTake for StorebagSharedValue(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_10002944C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10002946C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_10002949C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000294B8(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 8) = v2;
  return result;
}

void type metadata accessor for Storebag.Error()
{
}

uint64_t sub_1000294E4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100029528(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100029588(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100029610(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100029670(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000296B0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for Storebag()
{
}

uint64_t getEnumTagSinglePayload for BackendHTTP.POSTData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_10002978C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100029858);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for StorebagExpedite()
{
}

uint64_t sub_10002988C()
{
  return sub_1000299A4(&qword_1000A6800, &qword_1000A6808);
}

unint64_t sub_1000298CC()
{
  unint64_t result = qword_1000A6810;
  if (!qword_1000A6810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6810);
  }
  return result;
}

unint64_t sub_10002991C()
{
  unint64_t result = qword_1000A6818;
  if (!qword_1000A6818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6818);
  }
  return result;
}

uint64_t sub_100029968()
{
  return sub_1000299A4(&qword_1000A6820, &qword_1000A6828);
}

uint64_t sub_1000299A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000286C8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000299EC()
{
  unint64_t result = qword_1000A6830;
  if (!qword_1000A6830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6830);
  }
  return result;
}

unint64_t sub_100029A38()
{
  unint64_t result = qword_1000A6840;
  if (!qword_1000A6840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6840);
  }
  return result;
}

unint64_t sub_100029A84()
{
  unint64_t result = qword_1000A6848;
  if (!qword_1000A6848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6848);
  }
  return result;
}

unint64_t sub_100029AD0()
{
  unint64_t result = qword_1000A6858;
  if (!qword_1000A6858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6858);
  }
  return result;
}

unint64_t sub_100029B1C()
{
  unint64_t result = qword_1000A6870;
  if (!qword_1000A6870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6870);
  }
  return result;
}

uint64_t sub_100029B68@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  return sub_100022E3C(a1, a2);
}

unint64_t sub_100029B84()
{
  unint64_t result = qword_1000A6880;
  if (!qword_1000A6880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6880);
  }
  return result;
}

uint64_t sub_100029BD0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000286C8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100029C50()
{
  unint64_t result = qword_1000A6898;
  if (!qword_1000A6898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6898);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Storebag._StorebagRoot.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA)
  {
    unsigned int v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 6;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100029D4CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 4) {
    unsigned int v8 = v7 - 3;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 4) {
    return v8 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for Storebag._StorebagRoot.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFA) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v7 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x100029E34);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_100029E5C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *sub_100029E70(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for Storebag._StorebagRoot.CodingKeys()
{
  return &type metadata for Storebag._StorebagRoot.CodingKeys;
}

uint64_t sub_100029E9C()
{
  return 0;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10002779C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(uint64_t a1)
{
  return sub_1000088D0(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s13rtcreportingd28StorebagKeyInfoPlistProviderV22_InfoPlistRTCReportingVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10002779C(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1000088D0(v5, v6);
  return a1;
}

uint64_t *assignWithTake for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000088D0(v3, v4);
  return a1;
}

uint64_t _s13rtcreportingd28StorebagKeyInfoPlistProviderV22_InfoPlistRTCReportingVwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(unsigned char *)(a1 + 16))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t _s13rtcreportingd28StorebagKeyInfoPlistProviderV22_InfoPlistRTCReportingVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting;
}

unint64_t sub_10002A030()
{
  unint64_t result = qword_1000A68A0;
  if (!qword_1000A68A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A68A0);
  }
  return result;
}

unint64_t sub_10002A080()
{
  unint64_t result = qword_1000A68A8;
  if (!qword_1000A68A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A68A8);
  }
  return result;
}

unint64_t sub_10002A0D0()
{
  unint64_t result = qword_1000A68B0;
  if (!qword_1000A68B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A68B0);
  }
  return result;
}

unint64_t sub_10002A120()
{
  unint64_t result = qword_1000A68B8;
  if (!qword_1000A68B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A68B8);
  }
  return result;
}

unint64_t sub_10002A170()
{
  unint64_t result = qword_1000A68C0;
  if (!qword_1000A68C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A68C0);
  }
  return result;
}

unint64_t sub_10002A1BC()
{
  unint64_t result = qword_1000A68D0;
  if (!qword_1000A68D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A68D0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BackendGroup.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s13rtcreportingd28StorebagKeyInfoPlistProviderV14_InfoPlistRootV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10002A2F4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys;
}

unint64_t sub_10002A330()
{
  unint64_t result = qword_1000A68D8;
  if (!qword_1000A68D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A68D8);
  }
  return result;
}

unint64_t sub_10002A380()
{
  unint64_t result = qword_1000A68E0;
  if (!qword_1000A68E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A68E0);
  }
  return result;
}

unint64_t sub_10002A3D0()
{
  unint64_t result = qword_1000A68E8;
  if (!qword_1000A68E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A68E8);
  }
  return result;
}

uint64_t sub_10002A494()
{
  uint64_t v3 = *(void *)(v0 + 496);
  return sub_10001227C(v3, v1, (uint64_t *)(v0 + 736));
}

void sub_10002A4BC(__n128 a1)
{
  v1[46] = a1;
  v1[45].n128_u64[0] = 44;
  v1[45].n128_u64[1] = 0xE100000000000000;
}

uint64_t sub_10002A4F0(uint64_t a1, const char *a2)
{
  uint64_t v4 = type metadata accessor for CocoaError();
  sub_100014C1C();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10001615C();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for Logger();
  sub_100014C1C();
  __chkstk_darwin(v12);
  sub_100015EBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a1, v4);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v24 = v11;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    sub_1000305A0((unint64_t *)&unk_1000A6A00, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    uint64_t v16 = Error.localizedDescription.getter();
    sub_10001227C(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100017D48();
    v18();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a2, v15, 0xCu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    uint64_t v19 = sub_10001618C();
    uint64_t v21 = v24;
  }
  else
  {
    sub_100017D48();
    v22();

    uint64_t v19 = sub_10001618C();
    uint64_t v21 = v11;
  }
  return v20(v19, v21);
}

uint64_t sub_10002A758()
{
  type metadata accessor for Logger();
  sub_100014C1C();
  __chkstk_darwin(v0);
  sub_100015EBC();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    sub_10001227C(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "unable to access transparency log (UNKNOWN): %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    sub_10001618C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    sub_10001618C();
  }
  sub_100016838();
  return v6();
}

unint64_t sub_10002A930()
{
  return sub_100019B78();
}

void sub_10002A93C()
{
}

Swift::Int sub_10002A964()
{
  return sub_10002E5C8();
}

unint64_t sub_10002A984()
{
  return 0xD000000000000018;
}

uint64_t sub_10002A9A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF268);
  sub_100012884(v0, (uint64_t)qword_1000AF268);
  return Logger.init(subsystem:category:)();
}

id sub_10002AA24@<X0>(char *a1@<X8>)
{
  uint64_t v3 = sub_100016CE0(&qword_1000A6A70);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v39 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v37 - v10;
  uint64_t v12 = NSHomeDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();
  uint64_t v13 = a1;
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:isDirectory:)();
  os_log_type_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v40 = v7 + 8;
  uint64_t v41 = v6;
  v14(v11, v6);
  sub_100016CE0(&qword_1000A6A78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084C90;
  *(void *)(inited + 32) = NSURLIsDirectoryKey;
  uint64_t v16 = NSURLIsDirectoryKey;
  sub_10007F294(inited);
  URL.resourceValues(forKeys:)();
  if (v1)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for URLResourceValues();
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v5, 1, 1, v17);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for URLResourceValues();
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v5, 0, 1, v18);
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v5, 1, v18) != 1)
    {
      char v36 = URLResourceValues.isDirectory.getter();
      id result = (id)(*(uint64_t (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v5, v18);
      uint64_t v20 = v41;
      uint64_t v19 = v39;
      if (v36) {
        return result;
      }
      goto LABEL_5;
    }
  }
  uint64_t v19 = v39;
  sub_1000115C4((uint64_t)v5, &qword_1000A6A70);
  uint64_t v20 = v41;
LABEL_5:
  if (qword_1000A5FD8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012884(v21, (uint64_t)qword_1000AF268);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v19, v13, v20);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v38 = (uint64_t (*)(char *, uint64_t))v14;
  if (v24)
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    unint64_t v26 = (void *)swift_slowAlloc();
    uint64_t v39 = v13;
    id v43 = v26;
    *(_DWORD *)uint64_t v25 = 136446210;
    v37[1] = 0;
    uint64_t v27 = URL.path.getter();
    uint64_t v42 = sub_10001227C(v27, v28, (uint64_t *)&v43);
    uint64_t v20 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v14(v19, v20);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "creating log directory at %{public}s", v25, 0xCu);
    swift_arrayDestroy();
    uint64_t v13 = v39;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v14(v19, v20);
  }

  id v29 = [self defaultManager];
  URL._bridgeToObjectiveC()(v30);
  uint64_t v32 = v31;
  id v43 = 0;
  unsigned int v33 = [v29 createDirectoryAtURL:v31 withIntermediateDirectories:1 attributes:0 error:&v43];

  if (v33) {
    return v43;
  }
  id v35 = v43;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  return (id)v38(v13, v20);
}

void sub_10002AF8C(uint64_t a1@<X8>)
{
  uint64_t v136 = a1;
  uint64_t v1 = sub_100016CE0(&qword_1000A6A80);
  __chkstk_darwin(v1 - 8);
  uint64_t v133 = (char *)&v128 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for URLResourceValues();
  uint64_t v131 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v135 = (char *)&v128 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for Date();
  uint64_t v130 = *(void *)(v134 - 8);
  uint64_t v4 = __chkstk_darwin(v134);
  v155 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v129 = (char *)&v128 - v6;
  uint64_t v7 = sub_100016CE0(&qword_1000A6780);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v137 = (uint64_t)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v138 = (uint64_t)&v128 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v146 = (uint64_t)&v128 - v13;
  __chkstk_darwin(v12);
  uint64_t v152 = (char **)((char *)&v128 - v14);
  uint64_t v154 = type metadata accessor for URL();
  v156 = *(uint8_t **)(v154 - 8);
  uint64_t v15 = __chkstk_darwin(v154);
  uint64_t v17 = (char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v128 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  os_log_type_t v23 = (char *)&v128 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  unint64_t v26 = (char *)&v128 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  id v29 = (char *)&v128 - v28;
  __chkstk_darwin(v27);
  BOOL v31 = (char *)&v128 - v30;
  uint64_t v32 = (char *)self;
  id v33 = [v32 defaultManager];
  uint64_t v34 = v153;
  sub_10002AA24(v31);
  BOOL v148 = v34;
  if (v34)
  {

    return;
  }
  *(void *)&long long v144 = v29;
  uint64_t v143 = v26;
  BOOL v147 = v23;
  BOOL v149 = v17;
  uint64_t v139 = v32;
  uint64_t v128 = v20;
  URL._bridgeToObjectiveC()(&v157);
  char v36 = v35;
  long long v37 = (void (*)(uint64_t, uint64_t))*((void *)v156 + 1);
  uint64_t v38 = v154;
  BOOL v151 = v156 + 8;
  BOOL v150 = v37;
  v37((uint64_t)v31, v154);
  id v158 = 0;
  uint64_t v39 = (char *)sub_1000302C8((uint64_t)v36, (uint64_t)_swiftEmptyArrayStorage, 0, (uint64_t)&v158, v33);

  id v40 = v158;
  if (!v39)
  {
    uint64_t v68 = v40;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v159 = _swiftEmptyArrayStorage;
  uint64_t v42 = v149;
  unint64_t v44 = v155;
  id v43 = v156;
  p_xpc_type_t type = v152;
  uint64_t v142 = *(void *)(v41 + 16);
  v145 = (void (**)(unint64_t, uint64_t, uint64_t))v41;
  if (v142)
  {
    unint64_t v46 = 0;
    v141 = v156 + 16;
    uint64_t v153 = (char *)(v156 + 32);
    unint64_t v140 = 0x80000001000893E0;
    while (v46 < *(void *)(v41 + 16))
    {
      uint64_t v39 = (char *)((v43[80] + 32) & ~(unint64_t)v43[80]);
      uint64_t v47 = *((void *)v43 + 9);
      (*((void (**)(char **, char *, uint64_t))v43 + 2))(p_type, &v39[v41 + v47 * v46], v38);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)p_type, 0, 1, v38);
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)p_type, 1, v38) == 1) {
        goto LABEL_17;
      }
      uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))v153;
      uint64_t v49 = p_type;
      uint64_t v50 = v144;
      (*(void (**)(void, char **, uint64_t))v153)(v144, v49, v38);
      URL.lastPathComponent.getter();
      char v51 = sub_100025CF4();
      swift_bridgeObjectRelease();
      if (v51)
      {
        v48(v143, v50, v38);
        uint64_t v52 = v159;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100071DCC(0, v52[2] + 1, 1);
          uint64_t v52 = v159;
        }
        p_xpc_type_t type = v152;
        unint64_t v54 = v52[2];
        unint64_t v53 = v52[3];
        if (v54 >= v53 >> 1)
        {
          sub_100071DCC(v53 > 1, v54 + 1, 1);
          uint64_t v52 = v159;
        }
        v52[2] = v54 + 1;
        uint64_t v55 = &v39[(void)v52 + v54 * v47];
        uint64_t v38 = v154;
        v48(v55, (uint64_t)v143, v154);
        uint64_t v159 = v52;
      }
      else
      {
        v150(v50, v38);
        p_xpc_type_t type = v152;
      }
      ++v46;
      uint64_t v42 = v149;
      unint64_t v44 = v155;
      id v43 = v156;
      uint64_t v41 = (uint64_t)v145;
      if (v142 == v46) {
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_56;
  }
LABEL_16:
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)p_type, 1, 1, v38);
LABEL_17:
  swift_bridgeObjectRelease();
  sub_1000115C4((uint64_t)p_type, &qword_1000A6780);
  id v158 = v159;
  uint64_t v56 = v148;
  sub_10002C264((uint64_t *)&v158);
  BOOL v148 = v56;
  uint64_t v142 = sub_10002C310(1, (uint64_t)v158);
  uint64_t v153 = v59;
  if (v57 == v58 >> 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v60 = v154;
    uint64_t v39 = v139;
    p_xpc_type_t type = &stru_1000A4FF0.type;
LABEL_19:
    _s10RTCUtility9XPCObjectOwst_0(v146, 1, 1, v60);
LABEL_20:
    uint64_t v61 = v60;
    swift_unknownObjectRelease();
    uint64_t v62 = v138;
    sub_100039860((uint64_t)v158, v138);
    swift_bridgeObjectRelease();
    uint64_t v63 = v137;
    sub_1000303C0(v62, v137);
    int v64 = _s10RTCUtility9XPCObjectOwet_0(v63, 1, v61);
    uint64_t v65 = v61;
    char v66 = v128;
    if (v64 == 1)
    {
      sub_1000115C4(v63, &qword_1000A6780);
    }
    else
    {
      (*((void (**)(char *, uint64_t, uint64_t))v156 + 4))(v128, v63, v65);
      sub_100016CE0(&qword_1000A6A78);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100084C90;
      *(void *)(inited + 32) = NSURLCreationDateKey;
      unint64_t v90 = NSURLCreationDateKey;
      sub_10007F294(inited);
      unsigned __int8 v91 = v135;
      uint64_t v92 = v148;
      URL.resourceValues(forKeys:)();
      if (v92)
      {
        swift_bridgeObjectRelease();
        v150((uint64_t)v66, v65);
        sub_1000115C4(v138, &qword_1000A6780);
        return;
      }
      swift_bridgeObjectRelease();
      uint64_t v93 = (uint64_t)v133;
      URLResourceValues.creationDate.getter();
      (*(void (**)(char *, uint64_t))(v131 + 8))(v91, v132);
      uint64_t v94 = v134;
      if (_s10RTCUtility9XPCObjectOwet_0(v93, 1, v134) != 1)
      {
        uint64_t v95 = v93;
        uint64_t v96 = v130;
        uint64_t v97 = v129;
        (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v129, v95, v94);
        static Date.now.getter();
        Date.distance(to:)();
        double v99 = v98;
        uint64_t v102 = *(char **)(v96 + 8);
        uint64_t v100 = v96 + 8;
        uint64_t v101 = v102;
        ((void (*)(char *, uint64_t))v102)(v44, v94);
        uint64_t v67 = v136;
        if (v99 > 604800.0)
        {
          v155 = v101;
          unint64_t v46 = v136;
          uint64_t v130 = v100;
          if (qword_1000A5FD8 == -1) {
            goto LABEL_44;
          }
          goto LABEL_57;
        }
        ((void (*)(char *, uint64_t))v101)(v97, v94);
        v150((uint64_t)v128, v154);
LABEL_23:
        sub_100030428(v138, v67);
        return;
      }
      v150((uint64_t)v128, v154);
      sub_1000115C4(v93, &qword_1000A6A80);
    }
    uint64_t v67 = v136;
    goto LABEL_23;
  }
  uint64_t v69 = v57;
  int64_t v70 = v58 >> 1;
  uint64_t v152 = (char **)(v43 + 16);
  v145 = (void (**)(unint64_t, uint64_t, uint64_t))(v43 + 32);
  swift_bridgeObjectRetain();
  *(void *)&long long v71 = 136446210;
  long long v144 = v71;
  uint64_t v143 = (char *)&type metadata for Any + 8;
  uint64_t v60 = v154;
  uint64_t v39 = v139;
  p_xpc_type_t type = &stru_1000A4FF0.type;
  unint64_t v46 = (unint64_t)v147;
  while (v69 < v70)
  {
    uint64_t v72 = &v153[*((void *)v43 + 9) * v69];
    uint64_t v73 = (void (*)(uint64_t, char *, uint64_t))*((void *)v43 + 2);
    uint64_t v74 = v146;
    v73(v146, v72, v60);
    _s10RTCUtility9XPCObjectOwst_0(v74, 0, 1, v60);
    if (_s10RTCUtility9XPCObjectOwet_0(v74, 1, v60) == 1) {
      goto LABEL_20;
    }
    (*v145)(v46, v74, v60);
    uint64_t v75 = v60;
    id v76 = [v39 p_type[436]];
    URL._bridgeToObjectiveC()(v77);
    uint64_t v79 = v78;
    uint64_t v159 = 0;
    unsigned int v80 = [v76 removeItemAtURL:v78 error:&v159];

    if (v80)
    {
      uint64_t v81 = v159;
      v150(v46, v75);
      uint64_t v60 = v75;
    }
    else
    {
      BOOL v82 = v159;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1000A5FD8 != -1) {
        swift_once();
      }
      BOOL v148 = 0;
      uint64_t v83 = type metadata accessor for Logger();
      sub_100012884(v83, (uint64_t)qword_1000AF268);
      swift_errorRetain();
      swift_errorRetain();
      BOOL v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = swift_slowAlloc();
        uint64_t v159 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v86 = v144;
        swift_getErrorValue();
        uint64_t v87 = Error.localizedDescription.getter();
        *(void *)(v86 + 4) = sub_10001227C(v87, v88, (uint64_t *)&v159);
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "failed to erase old log: %{public}s", (uint8_t *)v86, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v42 = v149;
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      swift_errorRelease();
      uint64_t v60 = v154;
      v150((uint64_t)v147, v154);
      uint64_t v39 = v139;
    }
    p_xpc_type_t type = (char **)(&stru_1000A4FF0 + 16);
    unint64_t v44 = v155;
    id v43 = v156;
    if (v70 == ++v69) {
      goto LABEL_19;
    }
  }
LABEL_56:
  __break(1u);
LABEL_57:
  swift_once();
LABEL_44:
  uint64_t v103 = type metadata accessor for Logger();
  uint64_t v104 = sub_100012884(v103, (uint64_t)qword_1000AF268);
  uint64_t v105 = v154;
  (*((void (**)(char *, char *, uint64_t))v156 + 2))(v42, v128, v154);
  v156 = (uint8_t *)v104;
  uint64_t v106 = Logger.logObject.getter();
  os_log_type_t v107 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v106, v107))
  {
    uint64_t v108 = (uint8_t *)swift_slowAlloc();
    uint64_t v159 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v108 = 136446210;
    uint64_t v153 = (char *)(v108 + 4);
    uint64_t v109 = URL.lastPathComponent.getter();
    v157._baseURL = (NSURL *)sub_10001227C(v109, v110, (uint64_t *)&v159);
    unint64_t v46 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v150((uint64_t)v42, v105);
    _os_log_impl((void *)&_mh_execute_header, v106, v107, "aging out log file: %{public}s", v108, 0xCu);
    swift_arrayDestroy();
    uint64_t v39 = v139;
    swift_slowDealloc();
    p_xpc_type_t type = (char **)(&stru_1000A4FF0 + 16);
    swift_slowDealloc();
  }
  else
  {
    v150((uint64_t)v42, v105);
  }

  id v111 = [v39 p_type[436]];
  v112 = v128;
  URL._bridgeToObjectiveC()(&v157);
  int v114 = v113;
  uint64_t v159 = 0;
  unsigned int v115 = [v111 removeItemAtURL:v113 error:&v159];

  uint64_t v116 = v129;
  if (v115)
  {
    v117 = v159;
    ((void (*)(char *, uint64_t))v155)(v116, v134);
    v118 = v112;
LABEL_53:
    uint64_t v127 = v154;
    v150((uint64_t)v118, v154);
    sub_1000115C4(v138, &qword_1000A6780);
    uint64_t v126 = v46;
    goto LABEL_54;
  }
  uint64_t v119 = v159;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v120 = Logger.logObject.getter();
  os_log_type_t v121 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v120, v121))
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    ((void (*)(char *, uint64_t))v155)(v116, v134);
    v118 = v128;
    goto LABEL_53;
  }
  uint64_t v122 = (uint8_t *)swift_slowAlloc();
  uint64_t v159 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v122 = 136446210;
  v156 = v122 + 4;
  swift_getErrorValue();
  uint64_t v123 = Error.localizedDescription.getter();
  v157._baseURL = (NSURL *)sub_10001227C(v123, v124, (uint64_t *)&v159);
  uint64_t v125 = v136;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v126 = v125;
  _os_log_impl((void *)&_mh_execute_header, v120, v121, "failed to erase old log: %{public}s", v122, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  ((void (*)(char *, uint64_t))v155)(v116, v134);
  uint64_t v127 = v154;
  v150((uint64_t)v128, v154);
  sub_1000115C4(v138, &qword_1000A6780);
LABEL_54:
  _s10RTCUtility9XPCObjectOwst_0(v126, 1, 1, v127);
}

void sub_10002C264(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_10003FEC8(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_10002EBBC(v5);
  *a1 = v3;
}

uint64_t sub_10002C310(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  id result = sub_100030490(0, (v3 - result) & ~((uint64_t)(v3 - result) >> 63), v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5)
  {
    type metadata accessor for URL();
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_10002C3C4(uint64_t a1@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)NSDateFormatter) init];
  sub_10003035C(0xD000000000000013, 0x80000001000893C0, v9);
  static Date.now.getter();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id v11 = [v9 stringFromDate:isa];

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  sub_10002AA24(v4);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v19 = 0;
    unint64_t v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0xD000000000000018;
    unint64_t v20 = 0x80000001000893E0;
    v15._uint64_t countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 1954051118;
    v16._object = (void *)0xE400000000000000;
    String.append(_:)(v16);
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
    Data.write(to:options:)();
  }
}

uint64_t sub_10002C69C()
{
  *(void *)(v1 + 16) = v0;
  swift_defaultActor_initialize();
  *(unsigned char *)(v0 + 112) = 2;
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 120) = [self fileHandleWithNullDevice];
  return _swift_task_switch(sub_10002C738, v0, 0);
}

uint64_t sub_10002C738()
{
  sub_10002C7F0();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  return v1(v2);
}

void sub_10002C7F0()
{
  type metadata accessor for CocoaError.Code();
  sub_100014C1C();
  unint64_t v53 = v1;
  __chkstk_darwin(v2);
  sub_100014198();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for CocoaError();
  sub_100014C1C();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100014198();
  uint64_t v51 = v10;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v52 = (char *)&v40 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  Swift::String v16 = (char *)&v40 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v40 - v17;
  sub_10002CCDC();
  if (v0)
  {
    uint64_t v56 = v0;
    swift_errorRetain();
    sub_100016CE0(&qword_1000A67E8);
    if (swift_dynamicCast())
    {
      uint64_t v48 = v8;
      uint64_t v49 = v18;
      id v43 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      uint64_t v44 = v8 + 16;
      v43(v16, v18, v6);
      uint64_t v19 = sub_1000305A0(&qword_1000A69F0, (void (*)(uint64_t))&type metadata accessor for CocoaError);
      uint64_t v50 = v6;
      uint64_t v47 = v19;
      _BridgedStoredNSError.code.getter();
      static CocoaError.fileWriteNoPermission.getter();
      uint64_t v20 = sub_1000305A0(&qword_1000A69F8, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v46 = v20;
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v21 = v54;
      uint64_t v22 = v55;
      os_log_type_t v23 = (void (*)(void))*((void *)v53 + 1);
      uint64_t v45 = v4;
      sub_1000199FC();
      v23();
      unint64_t v53 = v23;
      sub_1000199FC();
      v23();
      if (v22 == v21)
      {
        swift_errorRelease();
        sub_10002A4F0((uint64_t)v16, "unable to access transparency log (PERM): %{public}s");
        CocoaError._nsError.getter();
        swift_willThrow();
        uint64_t v24 = *(void (**)(void))(v48 + 8);
        sub_100014C68();
        v24();
        sub_100014C68();
        v24();
LABEL_9:
        swift_errorRelease();
        return;
      }
      uint64_t v25 = v50;
      uint64_t v41 = *(void (**)(void))(v48 + 8);
      uint64_t v42 = v48 + 8;
      ((void (*)(char *, uint64_t))v41)(v16, v50);
      uint64_t v26 = (uint64_t)v52;
      v43(v52, v49, v25);
      sub_100017458();
      static CocoaError.fileWriteOutOfSpace.getter();
      sub_100017BBC();
      sub_100016630();
      uint64_t v28 = v54;
      uint64_t v27 = v55;
      id v29 = v53;
      sub_1000199FC();
      v29();
      sub_1000199FC();
      v29();
      if (v27 == v28)
      {
        swift_errorRelease();
        sub_10002A4F0(v26, "unable to write transparency log (OOS): %{public}s");
        CocoaError._nsError.getter();
        swift_willThrow();
        uint64_t v30 = v41;
        sub_100016838();
        v30();
        sub_100016838();
        v30();
        goto LABEL_9;
      }
      uint64_t v31 = v50;
      ((void (*)(uint64_t, uint64_t))v41)(v26, v50);
      uint64_t v32 = v51;
      (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v51, v49, v31);
      sub_100017458();
      static CocoaError.fileWriteUnknown.getter();
      sub_100017BBC();
      sub_100016630();
      uint64_t v34 = v54;
      uint64_t v33 = v55;
      id v35 = v53;
      sub_1000199FC();
      v35();
      sub_1000199FC();
      v35();
      if (v33 == v34)
      {
        swift_errorRelease();
        sub_10002A4F0(v32, "unable to access storebag cache (WRITE-UNKNOWN): %{public}s");
        CocoaError._nsError.getter();
        swift_willThrow();
        uint64_t v36 = sub_10001134C();
        v37(v36);
        goto LABEL_9;
      }
      uint64_t v38 = sub_10001134C();
      v39(v38);
    }
    swift_errorRelease();
    sub_10002A758();
    swift_willThrow();
  }
}

void sub_10002CCDC()
{
  uint64_t v2 = v0;
  uint64_t v3 = (void *)*v0;
  uint64_t v97 = v1;
  double v98 = v3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v91 = *(void *)(v4 - 8);
  uint64_t v92 = v4;
  __chkstk_darwin(v4);
  uint64_t v89 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for DispatchQoS();
  uint64_t v88 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v87 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_source.FileSystemEvent();
  uint64_t v85 = *(void *)(v7 - 8);
  uint64_t v86 = v7;
  __chkstk_darwin(v7);
  BOOL v84 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100016CE0(&qword_1000A6780);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for URL();
  uint64_t v93 = *(void *)(v96 - 8);
  uint64_t v12 = __chkstk_darwin(v96);
  uint64_t v83 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  Swift::String v16 = (char *)&v82 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v95 = (uint64_t)&v82 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  BOOL v82 = (char *)&v82 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  os_log_type_t v23 = (char *)&v82 - v22;
  __chkstk_darwin(v21);
  uint64_t v94 = (char *)&v82 - v24;
  uint64_t v25 = (void *)v0[15];
  uint64_t v26 = self;
  id v27 = v25;
  id v28 = [v26 fileHandleWithNullDevice];
  sub_10002E958(0, (unint64_t *)&qword_1000A6A10);
  char v29 = static NSObject.== infix(_:_:)();

  if ((v29 & 1) == 0)
  {
    if (qword_1000A5FD8 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100012884(v30, (uint64_t)qword_1000AF268);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "witnessed log vanish - refeshing", v33, 2u);
      swift_slowDealloc();
    }
  }
  if (v2[16])
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
    v2[16] = 0;
    swift_unknownObjectRelease();
  }
  uint64_t v34 = v97;
  sub_10002AF8C((uint64_t)v11);
  if (!v34)
  {
    uint64_t v35 = v96;
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v11, 1, v96) == 1)
    {
      sub_1000115C4((uint64_t)v11, &qword_1000A6780);
      sub_10002C3C4(v95);
      double v98 = v2;
      uint64_t v36 = v93;
      long long v37 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 16);
      v37(v16, v95, v96);
      id v38 = sub_1000340E0((uint64_t)v16);
      uint64_t v47 = (void *)v98[15];
      v98[15] = v38;

      if (qword_1000A5FD8 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_100012884(v48, (uint64_t)qword_1000AF268);
      uint64_t v49 = v83;
      uint64_t v51 = v95;
      uint64_t v50 = v96;
      v37(v83, v95, v96);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136446210;
        uint64_t v97 = (uint64_t)(v54 + 4);
        uint64_t v55 = URL.path.getter();
        uint64_t v100 = sub_10001227C(v55, v56, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v57 = *(void (**)(char *, uint64_t))(v36 + 8);
        uint64_t v58 = v96;
        v57(v49, v96);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "created new log file at %{public}s", v54, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v59 = v95;
        uint64_t v60 = v58;
      }
      else
      {

        uint64_t v57 = *(void (**)(char *, uint64_t))(v36 + 8);
        v57(v49, v50);
        uint64_t v59 = v51;
        uint64_t v60 = v50;
      }
      v57((char *)v59, v60);
    }
    else
    {
      double v98 = v2;
      uint64_t v40 = v93;
      uint64_t v39 = v94;
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v94, v11, v35);
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
      v41(v23, v39, v35);
      id v42 = sub_1000340E0((uint64_t)v23);
      id v43 = v98;
      uint64_t v44 = (void *)v98[15];
      v98[15] = v42;

      id v45 = (id)v43[15];
      NSFileHandle.seekToEnd()();
      if (v46)
      {
        (*(void (**)(char *, uint64_t))(v40 + 8))(v94, v35);

        return;
      }

      uint64_t v61 = v94;
      if (qword_1000A5FD8 != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      sub_100012884(v62, (uint64_t)qword_1000AF268);
      uint64_t v63 = v82;
      v41(v82, v61, v35);
      int v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v64, v65))
      {
        char v66 = (uint8_t *)swift_slowAlloc();
        uint64_t v97 = swift_slowAlloc();
        aBlock[0] = v97;
        *(_DWORD *)char v66 = 136446210;
        uint64_t v67 = URL.path.getter();
        uint64_t v100 = sub_10001227C(v67, v68, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v69 = *(void (**)(char *, uint64_t))(v40 + 8);
        uint64_t v70 = v96;
        v69(v63, v96);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "opened log file at %{public}s", v66, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v69(v94, v70);
      }
      else
      {

        long long v71 = *(void (**)(char *, uint64_t))(v40 + 8);
        v71(v63, v35);
        v71(v61, v35);
      }
    }
    uint64_t v72 = v86;
    uint64_t v97 = sub_10002E958(0, &qword_1000A6A18);
    uint64_t v73 = v98;
    [(id)v98[15] fileDescriptor];
    sub_100016CE0(&qword_1000A6A20);
    uint64_t v74 = v85;
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_100084CA0;
    static OS_dispatch_source.FileSystemEvent.rename.getter();
    static OS_dispatch_source.FileSystemEvent.delete.getter();
    aBlock[0] = v75;
    sub_1000305A0(&qword_1000A6A28, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.FileSystemEvent);
    sub_100016CE0(&qword_1000A6A30);
    sub_10001B1E4(&qword_1000A6A38, &qword_1000A6A30);
    id v76 = v84;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v77 = static OS_dispatch_source.makeFileSystemObjectSource(fileDescriptor:eventMask:queue:)();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v76, v72);
    v73[16] = v77;
    swift_unknownObjectRelease();
    if (v73[16])
    {
      swift_getObjectType();
      uint64_t v78 = swift_allocObject();
      swift_weakInit();
      aBlock[4] = (uint64_t)sub_10002E9CC;
      aBlock[5] = v78;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10001B4A0;
      aBlock[3] = (uint64_t)&unk_10009F438;
      uint64_t v79 = _Block_copy(aBlock);
      swift_retain();
      swift_unknownObjectRetain();
      unsigned int v80 = v87;
      static DispatchQoS.unspecified.getter();
      uint64_t v81 = v89;
      sub_10002DAF4();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)();
      _Block_release(v79);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v81, v92);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v80, v90);
      swift_release();
      swift_release();
      if (v73[16])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        OS_dispatch_source.resume()();
        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_10002D964()
{
  uint64_t v0 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = type metadata accessor for TaskPriority();
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v2, 1, 1, v5);
    uint64_t v6 = (void *)swift_allocObject();
    _OWORD v6[2] = 0;
    v6[3] = 0;
    v6[4] = v4;
    sub_10006BBE8((uint64_t)v2, (uint64_t)&unk_1000A6A68, (uint64_t)v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_10002DA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10002DA78, a4, 0);
}

uint64_t sub_10002DA78()
{
  sub_10002C7F0();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002DAF4()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10002DBBC(uint64_t a1, void *a2)
{
  v30._uint64_t countAndFlagsBits = a1;
  v30._object = a2;
  type metadata accessor for String.Encoding();
  sub_100014C1C();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10001615C();
  type metadata accessor for Date();
  sub_100014C1C();
  __chkstk_darwin(v5);
  sub_10001615C();
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v32 = 40;
  uint64_t v33 = (void *)0xE100000000000000;
  static Date.now.getter();
  uint64_t v6 = Date.description.getter();
  uint64_t v8 = v7;
  sub_1000199FC();
  v9();
  v10._uint64_t countAndFlagsBits = v6;
  v10._object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 5972009;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  String.append(_:)(v30);
  v12._object = (void *)0x80000001000893A0;
  v12._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v12);
  static String.Encoding.utf8.getter();
  uint64_t v13 = String.data(using:allowLossyConversion:)();
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  Swift::String v16 = *(void (**)(void))(v3 + 8);
  sub_100017D48();
  v16();
  if (v15 >> 60 == 15)
  {
    sub_10002E874();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    uint64_t v32 = v13;
    uint64_t v33 = (void *)v15;
    Data.append(_:)();
    static String.Encoding.utf8.getter();
    uint64_t v18 = String.data(using:allowLossyConversion:)();
    unint64_t v20 = v19;
    sub_100017D48();
    uint64_t result = ((uint64_t (*)(void))v16)();
    if (v20 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      Data.append(_:)();
      sub_10001E798(v18, v20);
      uint64_t v21 = *(void **)(v29 + 120);
      uint64_t v23 = v32;
      unint64_t v22 = (unint64_t)v33;
      v31[0] = (id)v32;
      v31[1] = v33;
      id v24 = v21;
      sub_10002779C(v32, (unint64_t)v33);
      sub_10002E90C();
      NSFileHandle.write<A>(contentsOf:)();
      if (v28)
      {

        sub_1000088D0(v32, (unint64_t)v33);
      }
      else
      {
        sub_1000088D0(v32, (unint64_t)v33);

        uint64_t v25 = *(void **)(v29 + 120);
        v31[0] = 0;
        if ([v25 synchronizeAndReturnError:v31])
        {
          id v26 = v31[0];
        }
        else
        {
          id v27 = v31[0];
          _convertNSErrorToError(_:)();

          swift_willThrow();
        }
      }
      return sub_1000088D0(v23, v22);
    }
  }
  return result;
}

void sub_10002DF10(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  v40._uint64_t countAndFlagsBits = a1;
  v40._object = a2;
  type metadata accessor for JSONEncoder.OutputFormatting();
  sub_100014C1C();
  __chkstk_darwin(v8);
  sub_10001615C();
  type metadata accessor for String.Encoding();
  sub_100014C1C();
  uint64_t v41 = v9;
  uint64_t v42 = v10;
  __chkstk_darwin(v9);
  sub_10001615C();
  uint64_t v13 = v12 - v11;
  type metadata accessor for Date();
  sub_100014C1C();
  __chkstk_darwin(v14);
  sub_10001615C();
  if (qword_1000A6080 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 == 1)
  {
    if (qword_1000A6090 != -1) {
      swift_once();
    }
    if (byte_1000AF3D8 == 1)
    {
      uint64_t v38 = v5;
      uint64_t v39 = a5;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      uint64_t v44 = 40;
      id v45 = (void *)0xE100000000000000;
      static Date.now.getter();
      uint64_t v15 = Date.description.getter();
      uint64_t v17 = v16;
      sub_100014C68();
      v18();
      v19._uint64_t countAndFlagsBits = v15;
      v19._object = v17;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 5972009;
      v20._object = (void *)0xE300000000000000;
      String.append(_:)(v20);
      String.append(_:)(v40);
      v21._object = (void *)0x8000000100089380;
      v21._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v21);
      static String.Encoding.utf8.getter();
      uint64_t v22 = String.data(using:allowLossyConversion:)();
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void (**)(void))(v42 + 8);
      sub_100016838();
      v25();
      if (v24 >> 60 == 15)
      {
        sub_10002E874();
        swift_allocError();
        swift_willThrow();
      }
      else
      {
        uint64_t v44 = v22;
        id v45 = (void *)v24;
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        JSONEncoder.init()();
        sub_100016CE0(&qword_1000A69B0);
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_100084C90;
        static JSONEncoder.OutputFormatting.prettyPrinted.getter();
        sub_1000305A0(&qword_1000A69B8, (void (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting);
        sub_100016CE0(&qword_1000A69C0);
        sub_10001B1E4((unint64_t *)&qword_1000A69C8, &qword_1000A69C0);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        dispatch thunk of JSONEncoder.outputFormatting.setter();
        v43[0] = v39;
        sub_10002E8C0();
        swift_bridgeObjectRetain();
        uint64_t v26 = dispatch thunk of JSONEncoder.encode<A>(_:)();
        if (v6)
        {
          swift_bridgeObjectRelease();
          swift_release();
          sub_10001E798(v22, v24);
        }
        else
        {
          uint64_t v28 = v26;
          unint64_t v29 = v27;
          swift_bridgeObjectRelease();
          Data.append(_:)();
          static String.Encoding.utf8.getter();
          uint64_t v30 = String.data(using:allowLossyConversion:)();
          unint64_t v32 = v31;
          ((void (*)(uint64_t, uint64_t))v25)(v13, v41);
          if (v32 >> 60 == 15)
          {
            __break(1u);
          }
          else
          {
            Data.append(_:)();
            sub_10001E798(v30, v32);
            uint64_t v33 = *(void **)(v5 + 120);
            v43[0] = (id)v44;
            v43[1] = v45;
            id v34 = v33;
            sub_10002779C(v44, (unint64_t)v45);
            sub_10002E90C();
            NSFileHandle.write<A>(contentsOf:)();
            sub_1000141B8();

            uint64_t v35 = *(void **)(v38 + 120);
            v43[0] = 0;
            if ([v35 synchronizeAndReturnError:v43])
            {
              id v36 = v43[0];
              sub_1000141B8();
              sub_1000088D0(v28, v29);
              swift_release();
            }
            else
            {
              id v37 = v43[0];
              _convertNSErrorToError(_:)();

              swift_willThrow();
              sub_1000088D0(v28, v29);
              swift_release();
              sub_1000141B8();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10002E4C8()
{
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10002E4F8()
{
  sub_10002E4C8();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TransparencyLog()
{
  return self;
}

uint64_t sub_10002E548(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_10002E5C8()
{
  return Hasher._finalize()();
}

uint64_t sub_10002E60C()
{
  return 0x73746E657665;
}

uint64_t sub_10002E620(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A6A98);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017740(a1, a1[3]);
  sub_100030554();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_100016CE0((uint64_t *)&unk_1000A7870);
  sub_10000B874();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int sub_10002E770()
{
  return Hasher._finalize()();
}

uint64_t sub_10002E7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10002E548(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10002E7E0(uint64_t a1)
{
  unint64_t v2 = sub_100030554();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002E81C(uint64_t a1)
{
  unint64_t v2 = sub_100030554();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002E858(void *a1)
{
  return sub_10002E620(a1, *v1);
}

unint64_t sub_10002E874()
{
  unint64_t result = qword_1000A69A8;
  if (!qword_1000A69A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A69A8);
  }
  return result;
}

unint64_t sub_10002E8C0()
{
  unint64_t result = qword_1000A69D0;
  if (!qword_1000A69D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A69D0);
  }
  return result;
}

unint64_t sub_10002E90C()
{
  unint64_t result = qword_1000A69D8;
  if (!qword_1000A69D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000A69D8);
  }
  return result;
}

uint64_t sub_10002E958(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10002E994()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002E9CC()
{
  return sub_10002D964();
}

uint64_t sub_10002E9D4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002EA14(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10002EAC8;
  return sub_10002DA58(a1, v4, v5, v6);
}

uint64_t sub_10002EAC8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_10002EBBC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v154 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  BOOL v149 = (char *)&v140 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  BOOL v163 = (char *)&v140 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v140 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v140 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v152 = (char *)&v140 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  BOOL v151 = (char *)&v140 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  BOOL v147 = (char *)&v140 - v20;
  __chkstk_darwin(v19);
  uint64_t v146 = (char *)&v140 - v21;
  BOOL v167 = a1;
  Swift::Int v22 = a1[1];
  Swift::Int v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if (v22 < 0) {
      goto LABEL_155;
    }
    if (v22) {
      sub_10002F854(0, v22, 1, v167);
    }
    return;
  }
  Swift::Int v24 = v23;
  uint64_t v142 = sub_1000278D0(v22 / 2);
  unint64_t v153 = v25;
  uint64_t v143 = v22;
  if (v22 <= 0) {
    goto LABEL_119;
  }
  Swift::Int v141 = v24;
  uint64_t v159 = v154 + 16;
  double v160 = (void (**)(char *, uint64_t))(v154 + 8);
  uint64_t v161 = v4;
  uint64_t v165 = (void (**)(char *, uint64_t, uint64_t))(v154 + 32);
  uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  uint64_t v27 = 0;
  v156 = v11;
  uint64_t v28 = v22;
  v145 = v14;
  while (1)
  {
    uint64_t v29 = v27;
    if (v27 + 1 >= v28)
    {
      uint64_t v39 = v27 + 1;
      uint64_t v40 = v161;
      uint64_t v41 = v145;
    }
    else
    {
      uint64_t v164 = v28;
      uint64_t v30 = *v167;
      uint64_t v31 = *(void *)(v154 + 72);
      uint64_t v162 = v27 + 1;
      unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
      uint64_t v33 = v161;
      v32(v146, v30 + v31 * (v27 + 1), v161);
      uint64_t v150 = v29;
      v155 = (char *)v30;
      uint64_t v166 = v31;
      v32(v147, v30 + v31 * v29, v33);
      uint64_t v34 = URL.lastPathComponent.getter();
      uint64_t v36 = v35;
      if (v34 == URL.lastPathComponent.getter() && v36 == v37) {
        LODWORD(v158) = 0;
      }
      else {
        LODWORD(v158) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v40 = v161;
      uint64_t v42 = *v160;
      (*v160)(v147, v161);
      v42(v146, v40);
      uint64_t v39 = v150 + 2;
      uint64_t v28 = v164;
      if (v150 + 2 < v164)
      {
        long long v144 = v26;
        v162 *= v166;
        id v43 = v155;
        uint64_t v157 = v166 * v39;
        while (1)
        {
          v32(v151, (uint64_t)&v43[v157], v40);
          v32(v152, (uint64_t)&v43[v162], v40);
          uint64_t v44 = URL.lastPathComponent.getter();
          uint64_t v46 = v45;
          BOOL v48 = v44 == URL.lastPathComponent.getter() && v46 == v47;
          int v49 = v48 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v40 = v161;
          v42(v152, v161);
          v42(v151, v40);
          if ((v158 ^ v49)) {
            break;
          }
          ++v39;
          v43 += v166;
          uint64_t v28 = v164;
          if (v39 >= v164)
          {
            uint64_t v39 = v164;
            uint64_t v26 = v144;
            goto LABEL_24;
          }
        }
        uint64_t v26 = v144;
        uint64_t v28 = v164;
      }
LABEL_24:
      uint64_t v41 = v145;
      uint64_t v29 = v150;
      if (v158)
      {
        if (v39 < v150) {
          goto LABEL_156;
        }
        if (v150 < v39)
        {
          long long v144 = v26;
          uint64_t v50 = 0;
          uint64_t v51 = v166 * (v39 - 1);
          uint64_t v52 = v39 * v166;
          uint64_t v53 = v150;
          uint64_t v54 = v150 * v166;
          uint64_t v162 = v39;
          do
          {
            if (v53 != v39 + v50 - 1)
            {
              uint64_t v55 = v155;
              if (!v155) {
                goto LABEL_162;
              }
              unint64_t v56 = &v155[v54];
              uint64_t v157 = (uint64_t)&v155[v51];
              uint64_t v40 = v161;
              id v158 = (void (*)(char *, char *, uint64_t))*v165;
              v158(v149, &v155[v54], v161);
              if (v54 < v51 || v56 >= &v55[v52])
              {
                uint64_t v58 = v157;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v58 = v157;
                if (v54 != v51) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              v158((char *)v58, v149, v40);
              uint64_t v39 = v162;
            }
            ++v53;
            --v50;
            v51 -= v166;
            v52 -= v166;
            v54 += v166;
          }
          while (v53 < v39 + v50);
          uint64_t v26 = v144;
          uint64_t v41 = v145;
          uint64_t v29 = v150;
          uint64_t v28 = v164;
        }
      }
    }
    if (v39 < v28)
    {
      if (__OFSUB__(v39, v29)) {
        goto LABEL_154;
      }
      if (v39 - v29 < v141)
      {
        if (__OFADD__(v29, v141)) {
          goto LABEL_157;
        }
        if (v29 + v141 >= v28) {
          uint64_t v59 = v28;
        }
        else {
          uint64_t v59 = v29 + v141;
        }
        if (v59 < v29)
        {
LABEL_158:
          __break(1u);
          goto LABEL_159;
        }
        if (v39 != v59)
        {
          uint64_t v150 = v29;
          long long v144 = v26;
          uint64_t v140 = v2;
          uint64_t v60 = *(void *)(v154 + 72);
          v155 = *(char **)(v154 + 16);
          uint64_t v61 = v60 * (v39 - 1);
          uint64_t v157 = v60;
          uint64_t v166 = v39 * v60;
          uint64_t v148 = v59;
          do
          {
            uint64_t v62 = 0;
            uint64_t v63 = v150;
            uint64_t v162 = v39;
            id v158 = (void (*)(char *, char *, uint64_t))v61;
            while (1)
            {
              uint64_t v164 = v63;
              uint64_t v64 = *v167;
              os_log_type_t v65 = (void (*)(char *, uint64_t, uint64_t))v155;
              ((void (*)(char *, uint64_t, uint64_t))v155)(v41, v166 + v62 + *v167, v40);
              uint64_t v66 = v61 + v62 + v64;
              uint64_t v67 = v41;
              unint64_t v68 = v156;
              v65(v156, v66, v40);
              uint64_t v69 = URL.lastPathComponent.getter();
              uint64_t v71 = v70;
              if (v69 == URL.lastPathComponent.getter() && v71 == v72) {
                break;
              }
              char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v75 = *v160;
              (*v160)(v68, v40);
              v75(v67, v40);
              uint64_t v41 = v67;
              if ((v74 & 1) == 0) {
                goto LABEL_61;
              }
              uint64_t v76 = *v167;
              uint64_t v61 = (uint64_t)v158;
              if (!*v167) {
                goto LABEL_160;
              }
              uint64_t v77 = (char *)v158 + v76 + v62;
              uint64_t v78 = *v165;
              uint64_t v79 = v161;
              (*v165)(v163, v76 + v166 + v62, v161);
              swift_arrayInitWithTakeFrontToBack();
              v78(v77, (uint64_t)v163, v79);
              v62 -= v157;
              uint64_t v63 = v164 + 1;
              uint64_t v80 = v162;
              uint64_t v40 = v79;
              if (v162 == v164 + 1) {
                goto LABEL_62;
              }
            }
            swift_bridgeObjectRelease_n();
            uint64_t v81 = *v160;
            (*v160)(v68, v40);
            v81(v67, v40);
            uint64_t v41 = v67;
LABEL_61:
            uint64_t v80 = v162;
            uint64_t v61 = (uint64_t)v158;
LABEL_62:
            uint64_t v39 = v80 + 1;
            v61 += v157;
            v166 += v157;
          }
          while (v39 != v148);
          uint64_t v39 = v148;
          uint64_t v2 = v140;
          uint64_t v26 = v144;
          uint64_t v29 = v150;
        }
      }
    }
    if (v39 < v29) {
      goto LABEL_153;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v26 = sub_1000301BC(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v83 = *((void *)v26 + 2);
    unint64_t v82 = *((void *)v26 + 3);
    unint64_t v84 = v83 + 1;
    uint64_t v162 = v39;
    if (v83 >= v82 >> 1) {
      uint64_t v26 = sub_1000301BC((char *)(v82 > 1), v83 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v84;
    uint64_t v85 = v26 + 32;
    uint64_t v86 = &v26[16 * v83 + 32];
    uint64_t v87 = v162;
    *(void *)uint64_t v86 = v29;
    *((void *)v86 + 1) = v87;
    if (v83) {
      break;
    }
    unint64_t v84 = 1;
LABEL_112:
    uint64_t v28 = v167[1];
    uint64_t v27 = v162;
    if (v162 >= v28) {
      goto LABEL_120;
    }
  }
  while (1)
  {
    unint64_t v88 = v84 - 1;
    if (v84 >= 4)
    {
      uint64_t v93 = &v85[16 * v84];
      uint64_t v94 = *((void *)v93 - 8);
      uint64_t v95 = *((void *)v93 - 7);
      BOOL v99 = __OFSUB__(v95, v94);
      uint64_t v96 = v95 - v94;
      if (v99) {
        goto LABEL_138;
      }
      uint64_t v98 = *((void *)v93 - 6);
      uint64_t v97 = *((void *)v93 - 5);
      BOOL v99 = __OFSUB__(v97, v98);
      uint64_t v91 = v97 - v98;
      char v92 = v99;
      if (v99) {
        goto LABEL_139;
      }
      unint64_t v100 = v84 - 2;
      uint64_t v101 = &v85[16 * v84 - 32];
      uint64_t v103 = *(void *)v101;
      uint64_t v102 = *((void *)v101 + 1);
      BOOL v99 = __OFSUB__(v102, v103);
      uint64_t v104 = v102 - v103;
      if (v99) {
        goto LABEL_140;
      }
      BOOL v99 = __OFADD__(v91, v104);
      uint64_t v105 = v91 + v104;
      if (v99) {
        goto LABEL_142;
      }
      if (v105 >= v96)
      {
        uint64_t v123 = &v85[16 * v88];
        uint64_t v125 = *(void *)v123;
        uint64_t v124 = *((void *)v123 + 1);
        BOOL v99 = __OFSUB__(v124, v125);
        uint64_t v126 = v124 - v125;
        if (v99) {
          goto LABEL_148;
        }
        BOOL v116 = v91 < v126;
        goto LABEL_101;
      }
    }
    else
    {
      if (v84 != 3)
      {
        uint64_t v117 = *((void *)v26 + 4);
        uint64_t v118 = *((void *)v26 + 5);
        BOOL v99 = __OFSUB__(v118, v117);
        uint64_t v110 = v118 - v117;
        char v111 = v99;
        goto LABEL_95;
      }
      uint64_t v90 = *((void *)v26 + 4);
      uint64_t v89 = *((void *)v26 + 5);
      BOOL v99 = __OFSUB__(v89, v90);
      uint64_t v91 = v89 - v90;
      char v92 = v99;
    }
    if (v92) {
      goto LABEL_141;
    }
    unint64_t v100 = v84 - 2;
    uint64_t v106 = &v85[16 * v84 - 32];
    uint64_t v108 = *(void *)v106;
    uint64_t v107 = *((void *)v106 + 1);
    BOOL v109 = __OFSUB__(v107, v108);
    uint64_t v110 = v107 - v108;
    char v111 = v109;
    if (v109) {
      goto LABEL_143;
    }
    v112 = &v85[16 * v88];
    uint64_t v114 = *(void *)v112;
    uint64_t v113 = *((void *)v112 + 1);
    BOOL v99 = __OFSUB__(v113, v114);
    uint64_t v115 = v113 - v114;
    if (v99) {
      goto LABEL_145;
    }
    if (__OFADD__(v110, v115)) {
      goto LABEL_147;
    }
    if (v110 + v115 >= v91)
    {
      BOOL v116 = v91 < v115;
LABEL_101:
      if (v116) {
        unint64_t v88 = v100;
      }
      goto LABEL_103;
    }
LABEL_95:
    if (v111) {
      goto LABEL_144;
    }
    uint64_t v119 = &v85[16 * v88];
    uint64_t v121 = *(void *)v119;
    uint64_t v120 = *((void *)v119 + 1);
    BOOL v99 = __OFSUB__(v120, v121);
    uint64_t v122 = v120 - v121;
    if (v99) {
      goto LABEL_146;
    }
    if (v122 < v110) {
      goto LABEL_112;
    }
LABEL_103:
    unint64_t v127 = v88 - 1;
    if (v88 - 1 >= v84)
    {
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    if (!*v167) {
      goto LABEL_161;
    }
    uint64_t v128 = v26;
    char v129 = &v85[16 * v127];
    uint64_t v130 = *(void *)v129;
    uint64_t v131 = &v85[16 * v88];
    uint64_t v132 = *((void *)v131 + 1);
    sub_10002FBCC(*v167 + *(void *)(v154 + 72) * *(void *)v129, *v167 + *(void *)(v154 + 72) * *(void *)v131, *v167 + *(void *)(v154 + 72) * v132, v153);
    if (v2) {
      break;
    }
    if (v132 < v130) {
      goto LABEL_135;
    }
    if (v88 > *((void *)v128 + 2)) {
      goto LABEL_136;
    }
    *(void *)char v129 = v130;
    *(void *)&v85[16 * v127 + 8] = v132;
    unint64_t v133 = *((void *)v128 + 2);
    if (v88 >= v133) {
      goto LABEL_137;
    }
    uint64_t v26 = v128;
    unint64_t v84 = v133 - 1;
    memmove(&v85[16 * v88], v131 + 16, 16 * (v133 - 1 - v88));
    *((void *)v128 + 2) = v133 - 1;
    if (v133 <= 2) {
      goto LABEL_112;
    }
  }
LABEL_117:
  swift_bridgeObjectRelease();
  if (v143 >= -1) {
    goto LABEL_132;
  }
  __break(1u);
LABEL_119:
  uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  unint64_t v84 = _swiftEmptyArrayStorage[2];
LABEL_120:
  if (v84 >= 2)
  {
    uint64_t v134 = *v167;
    while (1)
    {
      unint64_t v135 = v84 - 2;
      if (v84 < 2) {
        break;
      }
      if (!v134) {
        goto LABEL_163;
      }
      uint64_t v136 = *(void *)&v26[16 * v135 + 32];
      uint64_t v137 = *(void *)&v26[16 * v84 + 24];
      sub_10002FBCC(v134 + *(void *)(v154 + 72) * v136, v134 + *(void *)(v154 + 72) * *(void *)&v26[16 * v84 + 16], v134 + *(void *)(v154 + 72) * v137, v153);
      if (v2) {
        goto LABEL_117;
      }
      if (v137 < v136) {
        goto LABEL_150;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v26 = sub_1000302B4((uint64_t)v26);
      }
      if (v135 >= *((void *)v26 + 2)) {
        goto LABEL_151;
      }
      uint64_t v138 = &v26[16 * v135 + 32];
      *(void *)uint64_t v138 = v136;
      *((void *)v138 + 1) = v137;
      unint64_t v139 = *((void *)v26 + 2);
      if (v84 > v139) {
        goto LABEL_152;
      }
      memmove(&v26[16 * v84 + 16], &v26[16 * v84 + 32], 16 * (v139 - v84));
      *((void *)v26 + 2) = v139 - 1;
      unint64_t v84 = v139 - 1;
      if (v139 <= 2) {
        goto LABEL_131;
      }
    }
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
    goto LABEL_158;
  }
LABEL_131:
  swift_bridgeObjectRelease();
  if (v143 >= -1)
  {
LABEL_132:
    *(void *)(v142 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
}

uint64_t sub_10002F854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v46 = a4;
  uint64_t v36 = a1;
  uint64_t v41 = type metadata accessor for URL();
  uint64_t v6 = __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v42 = a3;
  uint64_t v35 = a2;
  if (a3 != a2)
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v38 = v12 + 16;
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v39 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v40 = v15;
    id v43 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v48 = v15 * (v42 - 1);
    uint64_t v47 = v15 * v42;
    while (2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v36;
      uint64_t v18 = v41;
      while (1)
      {
        uint64_t v19 = *v46;
        uint64_t v45 = v47 + v16;
        uint64_t v20 = v37;
        v37(v14, v47 + v16 + v19, v18);
        v20(v10, v48 + v16 + v19, v18);
        uint64_t v21 = URL.lastPathComponent.getter();
        Swift::Int v22 = v14;
        Swift::Int v23 = v10;
        uint64_t v25 = v24;
        if (v21 == URL.lastPathComponent.getter() && v25 == v26) {
          break;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v29 = *v39;
        (*v39)(v23, v18);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v22, v18);
        uint64_t v10 = v23;
        uint64_t v14 = v22;
        if (v28)
        {
          uint64_t v30 = *v46;
          if (!*v46)
          {
            __break(1u);
            return result;
          }
          uint64_t v31 = v30 + v48 + v16;
          unint64_t v32 = *v43;
          uint64_t v18 = v41;
          (*v43)(v44, v30 + v47 + v16, v41);
          swift_arrayInitWithTakeFrontToBack();
          uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(v31, v44, v18);
          v16 -= v40;
          ++v17;
          uint64_t v14 = v22;
          if (v42 != v17) {
            continue;
          }
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v33 = *v39;
      (*v39)(v23, v18);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v22, v18);
      uint64_t v10 = v23;
      uint64_t v14 = v22;
LABEL_13:
      v48 += v40;
      v47 += v40;
      if (++v42 != v35) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_10002FBCC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v77 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v66 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  int64_t v19 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_89;
  }
  int64_t v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_90;
  }
  uint64_t v72 = (char *)&v66 - v15;
  uint64_t v73 = v16;
  uint64_t v23 = v19 / v18;
  uint64_t v24 = v21 / v18;
  uint64_t v75 = v18;
  if (v19 / v18 >= v21 / v18)
  {
    sub_100070E58(a2, v21 / v18, a4);
    uint64_t v25 = (char *)(a4 + v24 * v18);
    if (v24 * v18 >= 1 && a1 < a2)
    {
      uint64_t v73 = -v18;
      char v28 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v74 = v9 + 16;
      uint64_t v69 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v70 = v28;
      unint64_t v67 = a4;
      unint64_t v71 = a1;
      do
      {
        unint64_t v29 = a3;
        unint64_t v78 = (unint64_t)v25;
        uint64_t v30 = v73;
        uint64_t v72 = &v25[v73];
        uint64_t v31 = v70;
        ((void (*)(char *))v70)(v76);
        v31(v77, a2 + v30, v8);
        uint64_t v32 = URL.lastPathComponent.getter();
        uint64_t v34 = v33;
        if (v32 == URL.lastPathComponent.getter() && v34 == v35) {
          char v37 = 0;
        }
        else {
          char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a3 = v29 + v73;
        uint64_t v38 = *v69;
        (*v69)(v77, v8);
        v38(v76, v8);
        unint64_t v39 = v71;
        if (v37)
        {
          if (v29 < a2 || a3 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v29 != a2)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 += v30;
          a4 = v67;
          uint64_t v18 = v75;
          uint64_t v25 = (char *)v78;
        }
        else if (v29 < v78 || a3 >= v78)
        {
          uint64_t v42 = v72;
          swift_arrayInitWithTakeFrontToBack();
          uint64_t v25 = v42;
          a4 = v67;
          uint64_t v18 = v75;
        }
        else
        {
          uint64_t v18 = v75;
          if (v29 == v78)
          {
            uint64_t v25 = v72;
          }
          else
          {
            id v43 = v72;
            swift_arrayInitWithTakeBackToFront();
            uint64_t v25 = v43;
          }
          a4 = v67;
        }
      }
      while ((unint64_t)v25 > a4 && a2 > v39);
    }
  }
  else
  {
    sub_100070E58(a1, v19 / v18, a4);
    uint64_t v25 = (char *)(a4 + v23 * v18);
    if (v23 * v18 >= 1 && a2 < a3)
    {
      uint64_t v47 = *(char **)(v9 + 16);
      uint64_t v74 = v9 + 16;
      uint64_t v76 = (char *)(v9 + 8);
      uint64_t v77 = v47;
      uint64_t v48 = v72;
      uint64_t v49 = v73;
      unint64_t v78 = a4 + v23 * v18;
      unint64_t v68 = a3;
      while (1)
      {
        uint64_t v50 = v77;
        ((void (*)(char *, unint64_t, uint64_t))v77)(v48, a2, v8);
        ((void (*)(uint64_t, unint64_t, uint64_t))v50)(v49, a4, v8);
        uint64_t v51 = URL.lastPathComponent.getter();
        uint64_t v52 = v8;
        uint64_t v54 = v53;
        if (v51 == URL.lastPathComponent.getter() && v54 == v55) {
          break;
        }
        uint64_t v57 = v49;
        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void (**)(char *, uint64_t))v76;
        (*(void (**)(uint64_t, uint64_t))v76)(v57, v52);
        v59(v48, v52);
        uint64_t v8 = v52;
        if ((v58 & 1) == 0) {
          goto LABEL_69;
        }
        uint64_t v18 = v75;
        unint64_t v60 = a2 + v75;
        BOOL v61 = a1 < a2 || a1 >= v60;
        unint64_t v62 = v68;
        if (!v61)
        {
          uint64_t v49 = v73;
          if (a1 != a2) {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v25 = (char *)v78;
          goto LABEL_79;
        }
        swift_arrayInitWithTakeFrontToBack();
LABEL_78:
        uint64_t v25 = (char *)v78;
        uint64_t v49 = v73;
LABEL_79:
        a1 += v18;
        BOOL v65 = a4 >= (unint64_t)v25 || v60 >= v62;
        a2 = v60;
        if (v65) {
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease_n();
      uint64_t v63 = *(void (**)(char *, uint64_t))v76;
      (*(void (**)(uint64_t, uint64_t))v76)(v49, v52);
      v63(v48, v52);
      uint64_t v8 = v52;
LABEL_69:
      uint64_t v18 = v75;
      BOOL v64 = a1 < a4 || a1 >= a4 + v75;
      unint64_t v62 = v68;
      if (v64)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a1 != a4)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v60 = a2;
      a4 += v18;
      goto LABEL_78;
    }
LABEL_16:
    a2 = a1;
  }
  uint64_t v45 = &v25[-a4];
  if (v18 != -1 || v45 != (char *)0x8000000000000000)
  {
    sub_100070E58(a4, (uint64_t)v45 / v18, a2);
    return;
  }
LABEL_91:
  __break(1u);
}

char *sub_1000301BC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100016CE0(&qword_1000A6A88);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000302B4(uint64_t a1)
{
  return sub_1000301BC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

id sub_1000302C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  type metadata accessor for URLResourceKey(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [a5 contentsOfDirectoryAtURL:a1 includingPropertiesForKeys:isa options:a3 error:a4];

  return v10;
}

void sub_10003035C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setDateFormat:v4];
}

uint64_t sub_1000303C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A6780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A6780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030490(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyLog.JustEvents()
{
  return &type metadata for TransparencyLog.JustEvents;
}

ValueMetadata *type metadata accessor for TransparencyLog.WriteError()
{
  return &type metadata for TransparencyLog.WriteError;
}

unint64_t sub_100030508()
{
  unint64_t result = qword_1000A6A90;
  if (!qword_1000A6A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6A90);
  }
  return result;
}

unint64_t sub_100030554()
{
  unint64_t result = qword_1000A6AA0;
  if (!qword_1000A6AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6AA0);
  }
  return result;
}

uint64_t sub_1000305A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s13rtcreportingd15TransparencyLogC10WriteErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100030684);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyLog.JustEvents.CodingKeys()
{
  return &type metadata for TransparencyLog.JustEvents.CodingKeys;
}

unint64_t sub_1000306C0()
{
  unint64_t result = qword_1000A6AC0;
  if (!qword_1000A6AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6AC0);
  }
  return result;
}

unint64_t sub_100030710()
{
  unint64_t result = qword_1000A6AC8;
  if (!qword_1000A6AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6AC8);
  }
  return result;
}

unint64_t sub_100030760()
{
  unint64_t result = qword_1000A6AD0;
  if (!qword_1000A6AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6AD0);
  }
  return result;
}

xpc_object_t *sub_1000307B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = (unint64_t)&_swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v16 = (xpc_object_t *)&_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v4 = sub_100032F3C(a1);
    int v6 = v5;
    char v8 = v7 & 1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        goto LABEL_14;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_15;
      }
      xpc_int64_create(*(void *)(*(void *)(a1 + 48) + 8 * v4));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      int64_t v9 = sub_100032E58(v4, v6, v8 & 1, a1);
      int64_t v4 = v9;
      int v6 = v10;
      char v8 = v11 & 1;
      if (!--v1)
      {
        sub_100032FBC(v9, v10, v11 & 1);
        unint64_t v2 = (unint64_t)v16;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_9:
  if ((v2 & 0x8000000000000000) != 0 || (v2 & 0x4000000000000000) != 0)
  {
LABEL_16:
    unint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = (xpc_object_t *)sub_100032C5C(v14);
    swift_bridgeObjectRelease();
    sub_100030960(v15 + 4, (size_t)v15[2], &v16);
    swift_bridgeObjectRelease();
    swift_release();
    return v16;
  }
  xpc_object_t v12 = xpc_array_create((xpc_object_t *)((v2 & 0xFFFFFFFFFFFFFF8) + 32), *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10));
  swift_bridgeObjectRelease();
  return (xpc_object_t *)v12;
}

xpc_object_t *sub_100030960@<X0>(xpc_object_t *result@<X0>, size_t a2@<X1>, xpc_object_t **a3@<X8>)
{
  if (result)
  {
    unint64_t result = (xpc_object_t *)xpc_array_create(result, a2);
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100030998()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000A6AE0);
  sub_100012884(v0, (uint64_t)qword_1000A6AE0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100030A0C()
{
  sub_10000E6A4();
  sub_100011540();
  unint64_t v2 = v0;
  uint64_t v4 = v3;
  *(void *)(v1 + 32) = v5;
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 24) = v3;
  uint64_t v38 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v38 - 8);
  uint64_t v37 = sub_10000E6C0();
  *(void *)(v1 + 48) = v37;
  uint64_t v34 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v34 - 8);
  uint64_t v36 = sub_10000E6C0();
  *(void *)(v1 + 56) = v36;
  type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v35 = sub_10000E6C0();
  *(void *)(v1 + 64) = v35;
  uint64_t v8 = type metadata accessor for DispatchQoS();
  sub_100009374(v8);
  *(void *)(v1 + 72) = sub_10000E6C0();
  swift_defaultActor_initialize();
  v0[14] = 0;
  type metadata accessor for Session(0);
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
  v0[18] = v4;
  v0[19] = v9;
  swift_retain();
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  *(void *)(v1 + 80) = XPCIncomingConnection.auditToken.getter();
  xpc_object_t v12 = (audit_token_t *)(v1 + 80);
  *(_DWORD *)(v1 + 88) = v13;
  *(_DWORD *)(v1 + 92) = v14;
  *(_DWORD *)(v1 + 96) = v15;
  *(_DWORD *)(v1 + 100) = v16;
  *(_DWORD *)(v1 + 104) = v17;
  *(_DWORD *)(v1 + 108) = v18;
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_100031024(&v32, v12, (uint64_t)v33, &v39);
  }
  else
  {
    uint64_t v20 = (unsigned char *)swift_slowAlloc();
    sub_100031024(v20, v12, (uint64_t)(v20 + 4096), &v39);
    sub_100009474();
  }
  unint64_t v21 = v40;
  v2[16] = v39;
  v2[17] = v21;
  v33[3] = sub_100032FC8();
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  uint64_t v39 = 0xD000000000000018;
  unint64_t v40 = 0x8000000100089730;
  uint64_t v22 = v2[16];
  uint64_t v23 = (void *)v2[17];
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v33[1] = v40;
  v33[2] = v39;
  static DispatchQoS.background.getter();
  *(void *)(v1 + 16) = _swiftEmptyArrayStorage;
  sub_100033008((unint64_t *)&qword_1000A6C38, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100016CE0(&qword_1000A6C40);
  sub_100033050();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v36, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v34);
  uint64_t v26 = v37;
  uint64_t v25 = v38;
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v37, enum case for DispatchQoS.QoSClass.background(_:), v38);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v26, v25);
  v2[15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_100009368();
  sub_100016198();
  return _swift_task_switch(v27, v28, v29);
}

uint64_t sub_100030EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10000E6A4();
  sub_100011540();
  int v13 = *(_xpc_connection_s **)(v12 + 32);
  uint64_t v14 = *(void *)(v12 + 40);
  int v15 = *(void **)(v14 + 120);
  type metadata accessor for XPCConnection();
  swift_allocObject();
  id v16 = v15;
  swift_retain_n();
  id v17 = v16;
  int v18 = XPCConnection.init(conn:targetQ:delegate:)(v13, v17, v14, (uint64_t)&off_10009F658);
  swift_release();
  swift_release();

  *(void *)(v14 + 112) = v18;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100016198();
  return v21(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t sub_100031024@<X0>(unsigned char *buffer@<X0>, audit_token_t *audittoken@<X2>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  *buffer = 0;
  if (!buffer)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a3 - (uint64_t)buffer >= (uint64_t)&_mh_execute_header)
  {
LABEL_9:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = proc_pidpath_audittoken(audittoken, buffer, a3 - buffer);
  if ((int)result < 1)
  {
    unint64_t v8 = 0xE700000000000000;
    uint64_t v6 = 0x6E776F6E6B6E75;
  }
  else
  {
    uint64_t v6 = String.init(cString:)();
    unint64_t v8 = v7;
    v15[0] = 47;
    v15[1] = 0xE100000000000000;
    __chkstk_darwin(v6);
    uint64_t v14 = v15;
    swift_bridgeObjectRetain();
    sub_100032D50(sub_10000EE1C, (uint64_t)v13, v6, v8);
    char v10 = v9;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v11 = String.index(after:)();
      swift_bridgeObjectRelease();
      sub_1000311F0(v11, v6, v8);
      uint64_t v6 = static String._fromSubstring(_:)();
      unint64_t v8 = v12;
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  *a4 = v6;
  a4[1] = v8;
  return result;
}

unint64_t sub_1000311F0(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

BOOL sub_100031294(uint64_t a1, uint64_t a2)
{
  sub_100033008(&qword_1000A6BC8, a2, (void (*)(uint64_t))type metadata accessor for Client);
  uint64_t v2 = Identifiable<>.id.getter();
  return v2 == Identifiable<>.id.getter();
}

void sub_10003132C()
{
  sub_100016384();
  sub_100033008(&qword_1000A6BC8, v0, (void (*)(uint64_t))type metadata accessor for Client);
  Swift::UInt v1 = Identifiable<>.id.getter();
  Hasher._combine(_:)(v1);
}

void sub_1000313A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_1000A5FE0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100012884(v25, (uint64_t)qword_1000A6AE0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    a10 = v22 + 160;
    uint64_t v28 = (uint8_t *)sub_100014490();
    a11 = sub_1000094B4();
    *(_DWORD *)uint64_t v28 = 136446210;
    swift_getErrorValue();
    uint64_t v29 = Error.localizedDescription.getter();
    *(void *)(v22 + 160) = sub_10001227C(v29, v30, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "failed initializing session: %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(v22 + 240));
  if (reply)
  {
    char v32 = reply;
    uint64_t v33 = *(void *)(v22 + 248);
    xpc_dictionary_set_string(reply, "error", "init failed");
    if (!*(void *)(v33 + 112))
    {
      __break(1u);
      return;
    }
    uint64_t v34 = (_xpc_connection_s *)sub_10001A4C8();
    xpc_connection_send_message(v34, v32);
    swift_errorRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_errorRelease();
  }
  sub_1000171E8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100016650();
  v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14);
}

void sub_100031638(void *a1)
{
  uint64_t v5 = XPC_ERROR_CONNECTION_INVALID.getter();
  swift_unknownObjectRelease();
  if ((void *)v5 == a1)
  {
    if (qword_1000A5FE0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100012884(v15, (uint64_t)qword_1000A6AE0);
    swift_retain();
    id v16 = (void *)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (sub_1000331E0(v17))
    {
      sub_100014490();
      uint64_t v25 = sub_1000094B4();
      sub_10001666C(4.8751e-34);
      sub_10001227C(v2, v3, &v25);
      sub_1000144A8();
      swift_release();
      swift_bridgeObjectRelease();
      sub_1000164F8((void *)&_mh_execute_header, v18, v19, "XPC client %{public}s closed connection");
      sub_1000331B4();
      sub_100009474();
      sub_100009474();
    }
    else
    {

      swift_release();
    }
    sub_1000756E4();
  }
  else
  {
    uint64_t v6 = XPC_ERROR_CONNECTION_INTERRUPTED.getter();
    swift_unknownObjectRelease();
    if ((void *)v6 == a1)
    {
      if (qword_1000A5FE0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100012884(v20, (uint64_t)qword_1000A6AE0);
      swift_retain();
      unint64_t v21 = (void *)Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (sub_1000331E0(v22))
      {
        sub_100014490();
        uint64_t v25 = sub_1000094B4();
        sub_10001666C(4.8751e-34);
        sub_10001227C(v2, v3, &v25);
        sub_1000144A8();
        swift_release();
        swift_bridgeObjectRelease();
        sub_1000164F8((void *)&_mh_execute_header, v23, v24, "XPC client %{public}s interrupted connection");
        sub_1000331B4();
        sub_100009474();
        sub_100009474();
      }
      else
      {

        swift_release();
      }
    }
    else
    {
      unint64_t v7 = xpc_copy_description(a1);
      uint64_t v8 = String.init(cString:)();
      unint64_t v10 = v9;
      if (qword_1000A5FE0 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_100012884(v11, (uint64_t)qword_1000A6AE0);
      swift_bridgeObjectRetain();
      unint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (sub_100033198(v13))
      {
        uint64_t v14 = (uint8_t *)sub_100014490();
        uint64_t v25 = sub_1000094B4();
        *(_DWORD *)uint64_t v14 = 136315138;
        swift_bridgeObjectRetain();
        sub_10001227C(v8, v10, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v12, v1, "XPC connection triggered error: %s", v14, 0xCu);
        swift_arrayDestroy();
        sub_100009474();
        sub_100009474();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_1000756E4();
      free(v7);
    }
  }
}

uint64_t sub_100031A28()
{
  sub_1000094A8();
  sub_100017D58();
  sub_10000935C();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_100015EE4();
  void *v4 = v3;
  *(void *)(v6 + 104) = v5;
  swift_task_dealloc();
  swift_release();
  sub_100009368();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100031B24()
{
  uint64_t v1 = v0[13];
  if (v1)
  {
    uint64_t v2 = v0[9];
    uint64_t v3 = v0[8];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v4 = swift_retain();
    sub_10001B454(v4, v3, v2);
    swift_endAccess();
    uint64_t v1 = v0[13];
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v1);
}

uint64_t sub_100031BF0()
{
  sub_100016384();
  uint64_t v2 = v1;
  uint64_t v3 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  uint64_t v4 = sub_100009374(v3);
  __chkstk_darwin(v4);
  sub_10001615C();
  uint64_t v7 = v6 - v5;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v10 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 136);
  uint64_t v11 = type metadata accessor for TaskPriority();
  _s10RTCUtility9XPCObjectOwst_0(v7, 1, 1, v11);
  unint64_t v12 = (void *)swift_allocObject();
  long long v12[2] = 0;
  void v12[3] = 0;
  v12[4] = v8;
  v12[5] = v10;
  v12[6] = v9;
  v12[7] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000FF80(v7, (uint64_t)&unk_1000A6C58, (uint64_t)v12);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100031D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  return _swift_task_switch(sub_100031D58, 0, 0);
}

uint64_t sub_100031D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10000E6A4();
  a19 = v24;
  a20 = v25;
  sub_100011540();
  a18 = v21;
  uint64_t v26 = *(void *)(v21 + 16);
  char v27 = *(unsigned char *)(v26 + 32);
  *(unsigned char *)(v21 + 72) = v27;
  uint64_t v28 = -1;
  uint64_t v29 = -1 << v27;
  if (-(-1 << v27) < 64) {
    uint64_t v28 = ~(-1 << -(char)v29);
  }
  uint64_t v30 = v28 & *(void *)(v26 + 64);
  uint64_t v31 = (void *)swift_bridgeObjectRetain();
  if (v30)
  {
    uint64_t v32 = 0;
LABEL_5:
    sub_10001A8B8((uint64_t)v31, v32);
    uint64_t v33 = qword_1000A5FE0;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v33 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100012884(v34, (uint64_t)qword_1000A6AE0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    BOOL v37 = sub_100033198(v36);
    unint64_t v38 = *(void *)(v21 + 32);
    if (v37)
    {
      uint64_t v39 = *(void *)(v21 + 24);
      uint64_t v40 = sub_1000141D0();
      a9 = sub_1000152A0();
      *(_DWORD *)uint64_t v40 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v40 + 4) = sub_10001227C(v22, v20, &a9);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v40 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v40 + 14) = sub_10001227C(v39, v38, &a9);
      swift_bridgeObjectRelease_n();
      sub_100017634((void *)&_mh_execute_header, v35, v23, "terminating session %{public}s due to %{public}s disconnect");
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100013ED0();
    }

    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v21 + 64) = v41;
    *uint64_t v41 = v21;
    v41[1] = sub_10003206C;
    sub_100016198();
    return sub_10006BD2C(v42);
  }
  unint64_t v45 = 63 - v29;
  if ((unint64_t)(63 - v29) > 0x7F)
  {
    if (v31[9])
    {
LABEL_15:
      sub_10001454C();
      goto LABEL_5;
    }
    if (v45 >= 0xC0)
    {
      if (v31[10]) {
        goto LABEL_15;
      }
      if (v45 >= 0x100)
      {
        if (v31[11]) {
          goto LABEL_15;
        }
        if (v45 >= 0x140)
        {
          if (v31[12]) {
            goto LABEL_15;
          }
          unint64_t v46 = v45 >> 6;
          uint64_t v47 = 13;
          while (v47 - 8 < v46)
          {
            if (v31[v47++]) {
              goto LABEL_15;
            }
          }
        }
      }
    }
  }
  swift_release();
  sub_10000E83C();
  sub_100016198();
  return v50(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12);
}

uint64_t sub_10003206C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100032138, 0, 0);
}

uint64_t sub_100032138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10000E6A4();
  a19 = v24;
  a20 = v25;
  sub_100011540();
  a18 = v21;
  uint64_t result = swift_release();
  uint64_t v27 = *(void *)(v21 + 40);
  if (*(void *)(v21 + 48))
  {
    sub_10001454C();
    uint64_t result = *(void *)(v21 + 16);
LABEL_3:
    sub_10001A8B8(result, v28);
    uint64_t v29 = qword_1000A5FE0;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v29 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100012884(v30, (uint64_t)qword_1000A6AE0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    BOOL v33 = sub_100033198(v32);
    unint64_t v34 = *(void *)(v21 + 32);
    if (v33)
    {
      uint64_t v35 = *(void *)(v21 + 24);
      uint64_t v36 = sub_1000141D0();
      a9 = sub_1000152A0();
      *(_DWORD *)uint64_t v36 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v36 + 4) = sub_10001227C(v22, v20, &a9);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v36 + 14) = sub_10001227C(v35, v34, &a9);
      swift_bridgeObjectRelease_n();
      sub_100017634((void *)&_mh_execute_header, v31, v23, "terminating session %{public}s due to %{public}s disconnect");
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100013ED0();
    }

    BOOL v37 = (void *)swift_task_alloc();
    *(void *)(v21 + 64) = v37;
    *BOOL v37 = v21;
    v37[1] = sub_10003206C;
    sub_100016198();
    return sub_10006BD2C(v38);
  }
  int64_t v40 = v27 + 1;
  if (__OFADD__(v27, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v41 = (1 << *(unsigned char *)(v21 + 72)) + 63;
  uint64_t result = *(void *)(v21 + 16);
  if (v40 < (uint64_t)(v41 >> 6))
  {
    uint64_t v42 = result + 64;
    uint64_t v28 = v27 + 1;
    if (*(void *)(result + 64 + 8 * v40)) {
      goto LABEL_3;
    }
    int64_t v43 = v41 >> 6;
    uint64_t v28 = v40 + 1;
    if (v40 + 1 < v43)
    {
      if (*(void *)(v42 + 8 * v28)) {
        goto LABEL_3;
      }
      uint64_t v28 = v40 + 2;
      if (v40 + 2 < v43)
      {
        if (*(void *)(v42 + 8 * v28)) {
          goto LABEL_3;
        }
        uint64_t v44 = v40 + 3;
        if (v44 < v43)
        {
          if (*(void *)(v42 + 8 * v44))
          {
            uint64_t v28 = v44;
            goto LABEL_3;
          }
          while (1)
          {
            uint64_t v28 = v44 + 1;
            if (__OFADD__(v44, 1)) {
              break;
            }
            if (v28 >= v43) {
              goto LABEL_25;
            }
            ++v44;
            if (*(void *)(v42 + 8 * v28)) {
              goto LABEL_3;
            }
          }
LABEL_29:
          __break(1u);
          return result;
        }
      }
    }
  }
LABEL_25:
  swift_release();
  sub_10000E83C();
  sub_100016198();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12);
}

uint64_t sub_100032440()
{
  sub_100031BF0();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Client()
{
  return self;
}

uint64_t destroy for ClientIdentity()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ClientIdentity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ClientIdentity(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ClientIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for ClientIdentity(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientIdentity(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientIdentity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientIdentity()
{
  return &type metadata for ClientIdentity;
}

Swift::Int sub_1000326C4()
{
  sub_100016384();
  Hasher.init(_seed:)();
  sub_100033008(&qword_1000A6BC8, v0, (void (*)(uint64_t))type metadata accessor for Client);
  Swift::UInt v1 = Identifiable<>.id.getter();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10003274C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

Swift::Int sub_100032778()
{
  return sub_1000326C4();
}

void sub_10003279C()
{
}

Swift::Int sub_1000327C0()
{
  Hasher.init(_seed:)();
  sub_100033008(&qword_1000A6BC8, v0, (void (*)(uint64_t))type metadata accessor for Client);
  Swift::UInt v1 = Identifiable<>.id.getter();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_100032848(uint64_t *a1, uint64_t *a2)
{
  return sub_100031294(*a1, *a2);
}

uint64_t sub_100032854(uint64_t a1, uint64_t a2)
{
  return sub_100033008(&qword_1000A6BC0, a2, (void (*)(uint64_t))type metadata accessor for Client);
}

void *sub_10003289C()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_1000328A8()
{
  return swift_slowAlloc();
}

uint64_t sub_1000328B0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000328D8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_10001227C(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

void *sub_100032950(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_100032A28(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unsigned char **sub_100032AB8(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  unsigned char *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_100032AC8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100032B10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100032B6C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 65, 7);
}

uint64_t sub_100032BBC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100032BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A7EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_100032C5C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v1 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v1 <= 0)
    {
      uint64_t v2 = &_swiftEmptyArrayStorage;
    }
    else
    {
      sub_100016CE0(&qword_1000A6C18);
      uint64_t v2 = (void *)swift_allocObject();
      size_t v3 = j__malloc_size(v2);
      v2[2] = v1;
      v2[3] = (2 * ((uint64_t)(v3 - 32) / 8)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized _ArrayBuffer._copyContents(initializing:)();
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    if (v5 == v1) {
      break;
    }
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v1) {
      return &_swiftEmptyArrayStorage;
    }
  }
  return v2;
}

unint64_t sub_100032D50(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

int64_t sub_100032E58(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100032F3C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100032FBC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100032FC8()
{
  unint64_t result = qword_1000A6C30;
  if (!qword_1000A6C30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A6C30);
  }
  return result;
}

uint64_t sub_100033008(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100033050()
{
  unint64_t result = qword_1000A6C48;
  if (!qword_1000A6C48)
  {
    sub_1000286C8(&qword_1000A6C40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000A6C48);
  }
  return result;
}

uint64_t sub_1000330A4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000330EC()
{
  sub_100007DA0();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100015EF4(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10001B7E0;
  uint64_t v3 = sub_10001348C();
  return sub_100031D34(v3, v4, v5, v6, v7, v8);
}

BOOL sub_100033198(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000331B4()
{
  return swift_arrayDestroy();
}

void sub_1000331D0()
{
  *(_WORD *)(v0 + 12) = 2082;
}

BOOL sub_1000331E0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000331FC()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100033214(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  unint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000332DC()
{
  *(void *)(v1 + 16) = v0;
  return sub_100019308((uint64_t)sub_10001C1E8, v0);
}

uint64_t sub_1000332F8(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return sub_100019308((uint64_t)sub_100033318, v2);
}

uint64_t sub_100033318()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100017740(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  sub_1000182FC(v4, v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  v0[20] = v7;
  if (v7)
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[21] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10003347C;
    return sub_10007B540();
  }
  else
  {
    uint64_t v10 = v0[17];
    *(void *)uint64_t v10 = &_swiftEmptyArrayStorage;
    *(void *)(v10 + 8) = &_swiftEmptyArrayStorage;
    *(unsigned char *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 1701736302;
    *(void *)(v10 + 32) = 0xE400000000000000;
    *(unsigned char *)(v10 + 40) = 2;
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_10003347C()
{
  sub_100017D58();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100015EE4();
  void *v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v4 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 152);
    return _swift_task_switch(sub_1000335B0, v8, 0);
  }
}

uint64_t sub_1000335B0()
{
  sub_1000094A8();
  sub_100023318(*(void **)(v0 + 144), (void *)(v0 + 16));
  *(void *)(v0 + 120) = *(void *)(v0 + 64);
  sub_100005B18(v0 + 120);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 80);
  sub_100009758(v0 + 104);
  *(void *)(v0 + 128) = *(void *)(v0 + 96);
  sub_100005B18(v0 + 128);
  char v1 = *(unsigned char *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  char v4 = *(unsigned char *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 136);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v2;
  *(void *)(v5 + 32) = v3;
  *(unsigned char *)(v5 + 40) = v1;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100033670()
{
  v1[3] = v0;
  type metadata accessor for StorebagCache.Location(0);
  uint64_t v15 = sub_10000E6C0();
  v1[4] = v15;
  type metadata accessor for DispatchQoS.QoSClass();
  sub_100014C1C();
  uint64_t v13 = v3;
  uint64_t v14 = v2;
  uint64_t v4 = sub_10000E6C0();
  v1[5] = v4;
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100014C1C();
  uint64_t v6 = v5;
  uint64_t v10 = sub_10000E6C0();
  v1[6] = v10;
  type metadata accessor for OS_dispatch_queue.Attributes();
  v1[7] = sub_10000E6C0();
  type metadata accessor for DispatchQoS();
  v1[8] = sub_10000E6C0();
  swift_defaultActor_initialize();
  sub_100032FC8();
  static DispatchQoS.background.getter();
  v1[2] = _swiftEmptyArrayStorage;
  sub_10001BFE4((unint64_t *)&qword_1000A6C38, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100016CE0(&qword_1000A6C40);
  sub_10001B1E4(&qword_1000A6C48, &qword_1000A6C40);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v4, enum case for DispatchQoS.QoSClass.background(_:), v14);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v14);
  *(void *)(v11 + 120) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v7 = type metadata accessor for URL();
  _s10RTCUtility9XPCObjectOwst_0(v15, 1, 1, v7);
  type metadata accessor for StorebagCache(0);
  swift_allocObject();
  uint64_t v8 = (void *)swift_task_alloc();
  v1[9] = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1000339A8;
  return sub_10007B394();
}

uint64_t sub_1000339A8(uint64_t a1)
{
  sub_100017D58();
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  *(void *)(v4 + 128) = a1;
  sub_100016CE0(&qword_1000A6D68);
  uint64_t v7 = type metadata accessor for NWInterface.InterfaceType();
  sub_100014C1C();
  uint64_t v9 = v8;
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100084C90;
  (*(void (**)(unint64_t, void, uint64_t))(v9 + 104))(v11 + v10, enum case for NWInterface.InterfaceType.loopback(_:), v7);
  type metadata accessor for NWPathMonitor();
  swift_allocObject();
  *(void *)(v4 + 112) = NWPathMonitor.init(prohibitedInterfaceTypes:)();
  return _swift_task_switch(sub_100033B54, v4, 0);
}

uint64_t sub_100033B54()
{
  char v1 = *(void **)(*(void *)(v0 + 24) + 120);
  swift_retain();
  id v2 = v1;
  NWPathMonitor.start(queue:)();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 24);
  return v3(v4);
}

uint64_t sub_100033C20()
{
  swift_release();

  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100033C58()
{
  sub_100033C20();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for StorebagCoordinator()
{
  return self;
}

uint64_t sub_100033CA8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10001BFE4(&qword_1000A6D50, a2, (void (*)(uint64_t))type metadata accessor for StorebagCoordinator);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100033D00()
{
  uint64_t v1 = sub_100016CE0(&qword_1000A6D58);
  sub_100014C1C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

void *sub_100033DA8(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    sub_100071E70(0, v5, 0);
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(a1 + 48);
    while (1)
    {
      int64_t v24 = v5;
      uint64_t v9 = v7;
      uint64_t v10 = *(v8 - 2);
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = a2;
      uint64_t v7 = a2;
      uint64_t v14 = sub_100034F48(v10, v11, v12);
      if (v3) {
        break;
      }
      uint64_t v17 = v14;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v9;
      unint64_t v21 = v9[2];
      unint64_t v20 = v9[3];
      if (v21 >= v20 >> 1)
      {
        sub_100071E70((char *)(v20 > 1), v21 + 1, 1);
        uint64_t v7 = v9;
      }
      v7[2] = v21 + 1;
      uint64_t v22 = &v7[3 * v21];
      v22[4] = v17;
      v22[5] = v18;
      v22[6] = v19;
      v8 += 3;
      uint64_t v3 = 0;
      int64_t v5 = v24 - 1;
      a2 = v13;
      if (v24 == 1)
      {
        swift_release();
        return v7;
      }
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

uint64_t sub_100033F38(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (_OWORD *)(result + 40);
    uint64_t v7 = _swiftEmptyArrayStorage;
    while (v5 < *(void *)(v3 + 16))
    {
      uint64_t v8 = *((void *)v6 - 1);
      long long v14 = *v6;
      uint64_t v15 = v8;
      long long v16 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v9 = sub_100036CA0(&v15, a2);
      if (v2)
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if (v9)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v17 = v7;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100071E70(0, v7[2] + 1, 1);
          uint64_t v7 = v17;
        }
        unint64_t v11 = v7[2];
        unint64_t v10 = v7[3];
        if (v11 >= v10 >> 1)
        {
          uint64_t result = (uint64_t)sub_100071E70((char *)(v10 > 1), v11 + 1, 1);
          uint64_t v7 = v17;
        }
        v7[2] = v11 + 1;
        uint64_t v12 = &v7[3 * v11];
        v12[4] = v8;
        *(_OWORD *)(v12 + 5) = v14;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
      ++v5;
      uint64_t v6 = (_OWORD *)((char *)v6 + 24);
      if (v4 == v5) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_release();
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  return result;
}

id sub_1000340E0(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v3 = v2;
  id v13 = 0;
  id v4 = [(id)swift_getObjCClassFromMetadata() fileHandleForWritingToURL:v2 error:&v13];

  id v5 = v13;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    sub_10000948C();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    id v9 = v5;
    v8(a1, v6);
  }
  else
  {
    id v10 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    type metadata accessor for URL();
    sub_10000948C();
    (*(void (**)(uint64_t))(v11 + 8))(a1);
  }
  return v4;
}

uint64_t sub_100034228(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000342C4;
  return NSURLSession.data(for:delegate:)(a1, 0);
}

uint64_t sub_1000342C4(uint64_t a1, unint64_t a2, void *a3)
{
  sub_100017D58();
  swift_task_dealloc();
  if (!v3)
  {
    sub_1000088D0(a1, a2);
  }
  sub_10000E83C();
  return v7();
}

uint64_t sub_1000343B8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100038708;
  return sub_100034228(a1);
}

uint64_t sub_100034450(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  id v10 = &v22[-v9];
  strcpy((char *)v23, "/tmp/rtc_mock");
  v23[7] = -4864;
  if (a1) {
    uint64_t v11 = 0x6D69746C6165725FLL;
  }
  else {
    uint64_t v11 = 0;
  }
  if (a1) {
    unint64_t v12 = 0xE900000000000065;
  }
  else {
    unint64_t v12 = 0xE000000000000000;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  Swift::Bool v14 = URL.checkResourceIsReachable()();
  if (v15)
  {
    swift_errorRelease();
LABEL_10:
    id v16 = [self defaultManager];
    URL.path.getter();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 createFileAtPath:v17 contents:0 attributes:0];

    goto LABEL_11;
  }
  if (!v14) {
    goto LABEL_10;
  }
LABEL_11:
  sub_100037544();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v8, v10, v4);
  id v18 = sub_1000340E0((uint64_t)v8);
  NSFileHandle.seekToEnd()();
  if (v19)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    sub_100016CE0(&qword_1000A6F58);
    uint64_t v20 = swift_allocObject();
    *(_DWORD *)(v20 + 24) = 0;
    *(void *)(v20 + 16) = v18;
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
    *(void *)(v2 + 16) = v20;
    return v2;
  }
  return result;
}

uint64_t sub_1000346F8(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_100034718, 0, 0);
}

uint64_t sub_100034718()
{
  uint64_t v1 = URLRequest.httpBody.getter();
  if (v2 >> 60 != 15)
  {
    uint64_t v3 = v1;
    unint64_t v4 = v2;
    uint64_t v5 = *(os_unfair_lock_s **)(*(void *)(v0 + 24) + 16);
    uint64_t v6 = swift_task_alloc();
    *(void *)(v6 + 16) = v3;
    *(void *)(v6 + 24) = v4;
    uint64_t v7 = (uint64_t)&v5[4];
    v5 += 6;
    os_unfair_lock_lock(v5);
    sub_100037528(v7);
    os_unfair_lock_unlock(v5);
    sub_10001E798(v3, v4);
    swift_task_dealloc();
  }
  sub_100013FE0();
  return v8();
}

uint64_t sub_1000347FC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a2;
  unint64_t v15 = a3;
  sub_10002E90C();
  uint64_t result = NSFileHandle.write<A>(contentsOf:)();
  if (!v3)
  {
    static String.Encoding.utf8.getter();
    uint64_t v11 = String.data(using:allowLossyConversion:)();
    unint64_t v13 = v12;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v13 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v14 = v11;
      unint64_t v15 = v13;
      NSFileHandle.write<A>(contentsOf:)();
      return sub_10001E798(v11, v13);
    }
  }
  return result;
}

uint64_t sub_10003496C()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for MockHTTPSending()
{
  return self;
}

uint64_t sub_1000349C8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100038708;
  return sub_1000346F8(a1);
}

uint64_t sub_100034A60()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF280);
  sub_100012884(v0, (uint64_t)qword_1000AF280);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100034AE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D695474736F70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_100034C30()
{
  return 3;
}

uint64_t sub_100034C38(char a1)
{
  if (!a1) {
    return 0x656D695474736F70;
  }
  if (a1 == 1) {
    return 0x6449746E65696C63;
  }
  return 0x73746E657665;
}

uint64_t sub_100034C8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a3;
  uint64_t v7 = sub_100016CE0(&qword_1000A6F88);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017740(a1, a1[3]);
  sub_10003840C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v14 = a4;
    char v13 = 2;
    sub_100016CE0(&qword_1000A6F98);
    sub_100038458();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100034E54()
{
  return sub_100034C38(*v0);
}

uint64_t sub_100034E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100034AE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100034E84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100034C30();
  *a1 = result;
  return result;
}

uint64_t sub_100034EAC(uint64_t a1)
{
  unint64_t v2 = sub_10003840C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100034EE8(uint64_t a1)
{
  unint64_t v2 = sub_10003840C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100034F24(void *a1)
{
  return sub_100034C8C(a1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100034F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[2] = a3;
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10000F43C(v7, (uint64_t)v11);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
      sub_100017740(v11, v12);
      (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v14, v8, v9);
      if (v4) {
        break;
      }
      sub_10001610C((uint64_t)v11);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return v14[0];
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001610C((uint64_t)v11);
  }
  else
  {
    uint64_t v7 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_100035080(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = v3 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_10000F43C(v7, (uint64_t)v11);
    uint64_t v8 = v12;
    uint64_t v9 = v13;
    sub_100017740(v11, v12);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24))(a1, a2, v8, v9)) {
      break;
    }
    sub_10001610C((uint64_t)v11);
    v7 += 40;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  sub_10001610C((uint64_t)v11);
  return 1;
}

uint64_t sub_100035164(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  v2[29] = *v1;
  uint64_t v3 = type metadata accessor for EventValue();
  v2[30] = v3;
  sub_10001130C(v3);
  v2[31] = v4;
  v2[32] = sub_10000E6C0();
  sub_100016CE0(&qword_1000A6F68);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[35] = v5;
  sub_10001130C(v5);
  v2[36] = v6;
  v2[37] = sub_10000E6C0();
  uint64_t v7 = type metadata accessor for URLRequest();
  v2[38] = v7;
  sub_10001130C(v7);
  v2[39] = v8;
  v2[40] = sub_10000E6C0();
  uint64_t v9 = type metadata accessor for JSONEncoder.OutputFormatting();
  v2[41] = v9;
  sub_10001130C(v9);
  v2[42] = v10;
  v2[43] = sub_10000E6C0();
  return _swift_task_switch(sub_1000352F0, v1, 0);
}

uint64_t sub_1000352F0()
{
  uint64_t v91 = v0;
  uint64_t v2 = *((void *)v0 + 27);
  uint64_t v1 = (void *)*((void *)v0 + 28);
  uint64_t v3 = v0 + 27;
  swift_retain();
  uint64_t v6 = sub_100033DA8(v2, v1);
  uint64_t v7 = *((void *)v0 + 28);
  swift_retain();
  uint64_t v8 = sub_100033F38((uint64_t)v6, v7);
  uint64_t v9 = v8;
  if (!*(void *)(v8 + 16))
  {
    swift_bridgeObjectRelease();
    sub_100016690();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100013FE0();
    goto LABEL_2;
  }
  uint64_t v89 = 0;
  if (qword_1000A5FE8 != -1) {
    goto LABEL_80;
  }
LABEL_7:
  uint64_t v10 = type metadata accessor for Logger();
  *((void *)v0 + 44) = sub_100012884(v10, (uint64_t)qword_1000AF280);
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    v90[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134349314;
    v0[25] = *(double *)(v9 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2082;
    sub_1000384CC(&qword_1000A6F60, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *((void *)v0 + 26) = sub_10001227C(v14, v15, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "submitting %{public}ld events to %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease();
  }
  double v16 = sub_100036BAC();
  if (sub_100035080(0x6449746E65696C63, 0xE800000000000000))
  {
    uint64_t v87 = 0;
    unint64_t v17 = 0xE000000000000000;
  }
  else
  {
    id v18 = (uint64_t *)(*((void *)v0 + 28) + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
    unint64_t v17 = v18[1];
    uint64_t v87 = *v18;
    swift_bridgeObjectRetain();
  }
  int64_t v19 = *(void *)(v9 + 16);
  if (v19)
  {
    unint64_t v85 = v17;
    v90[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100071E90(0, v19, 0);
    uint64_t v20 = (void *)v90[0];
    unint64_t v21 = *(void *)(v90[0] + 16);
    uint64_t v22 = 48;
    do
    {
      uint64_t v23 = *(void *)(v9 + v22);
      v90[0] = (uint64_t)v20;
      unint64_t v24 = v20[3];
      swift_bridgeObjectRetain();
      if (v21 >= v24 >> 1)
      {
        sub_100071E90((char *)(v24 > 1), v21 + 1, 1);
        uint64_t v20 = (void *)v90[0];
      }
      v20[2] = v21 + 1;
      v20[v21 + 4] = v23;
      v22 += 24;
      ++v21;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    unint64_t v17 = v85;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v25 = JSONEncoder.init()();
  *((void *)v0 + 45) = v25;
  sub_100016CE0(&qword_1000A69B0);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_100084C90;
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  *((void *)v0 + 23) = v26;
  sub_1000384CC(&qword_1000A69B8, (void (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting);
  sub_100016CE0(&qword_1000A69C0);
  sub_100037A30();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  v0[12] = v16;
  *((void *)v0 + 13) = v87;
  *((void *)v0 + 14) = v17;
  *((void *)v0 + 15) = v20;
  sub_100037A84();
  uint64_t v27 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *((void *)v0 + 46) = v89;
  *((void *)v0 + 47) = v27;
  *((void *)v0 + 48) = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v89)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
LABEL_2:
    sub_100015F24();
    __asm { BRAA            X1, X16 }
  }
  if (qword_1000A6090 != -1) {
    swift_once();
  }
  if (byte_1000AF3D8)
  {
    uint64_t v29 = v3 - 25;
    uint64_t v30 = v3 - 8;
    v3 -= 3;
    unint64_t v31 = *((void *)v0 + 48);
    sub_10001A8D4();
    uint64_t v32 = sub_100011378();
    v34.n128_f64[0] = v33(v32);
    sub_1000141E8(v34);
    switch(v31 >> 62)
    {
      case 1uLL:
        uint64_t v54 = *((void *)v0 + 47);
        if (v54 >> 32 >= (int)v54)
        {
          unint64_t v55 = *((void *)v0 + 48);
          sub_10002779C(*((void *)v0 + 47), v55);
          sub_10002779C(v54, v55);
          sub_100037AD0((int)v54, v54 >> 32, v54, v55, (uint64_t)v90);
          sub_1000088D0(*((void *)v0 + 47), *((void *)v0 + 48));
LABEL_33:
          uint64_t v51 = v90[0];
          uint64_t v9 = v90[1];
          sub_100038744();
          if (!v53 & v52) {
            sub_10002779C(*((void *)v0 + 47), *((void *)v0 + 48));
          }
          else {
            sub_10002779C(v51, v9);
          }
          *((void *)v0 + 53) = v51;
          *((void *)v0 + 54) = v9;
          URLRequest.httpBody.setter();
          URLRequest.httpMethod.setter();
          sub_100038744();
          if (!(!v53 & v52)) {
            sub_100019BA8((uint64_t)"Content-Encoding");
          }
          sub_10001764C();
          uint64_t v88 = v57;
          uint64_t v89 = v58;
          uint64_t v84 = *((void *)v0 + 32);
          uint64_t v59 = *((void *)v0 + 28);
          sub_100016518(0xD000000000000010, 0x8000000100089950);
          sub_100014C94(0xD000000000000010, 0x8000000100089950);
          *((void *)v0 + 19) = Data.count.getter();
          uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
          sub_100017D70(v60, v61);
          swift_bridgeObjectRelease();
          memcpy(v29, (const void *)(v59 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders), 0x50uLL);
          sub_100020CF0();
          sub_100009380();
          uint64_t v83 = v62;
          sub_10001AB28();
          uint64_t v86 = v63;
          uint64_t v81 = v63 - 1;
          uint64_t v82 = v64 + 104;
          while (!v30)
          {
            uint64_t v66 = v59 + 1;
            if (__OFADD__(v59, 1))
            {
              __break(1u);
LABEL_80:
              swift_once();
              goto LABEL_7;
            }
            if (v66 < v86)
            {
              if (*(void *)(v83 + 8 * v66)) {
                goto LABEL_49;
              }
              if (v59 + 2 >= v86)
              {
                ++v59;
              }
              else
              {
                if (*(void *)(v83 + 8 * (v59 + 2))) {
                  goto LABEL_49;
                }
                if (v59 + 3 >= v86)
                {
                  v59 += 2;
                }
                else
                {
                  if (*(void *)(v83 + 8 * (v59 + 3))) {
                    goto LABEL_49;
                  }
                  if (v59 + 4 >= v86)
                  {
                    v59 += 3;
                  }
                  else
                  {
                    if (*(void *)(v83 + 8 * (v59 + 4)))
                    {
LABEL_49:
                      sub_100017BE0();
                      goto LABEL_45;
                    }
                    while (v59 + 5 < v86)
                    {
                      if (*(void *)(v82 + 8 * v59++)) {
                        goto LABEL_49;
                      }
                    }
                    uint64_t v59 = v81;
                  }
                }
              }
            }
            uint64_t v67 = *((void *)v0 + 33);
            uint64_t v68 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
            _s10RTCUtility9XPCObjectOwst_0(v67, 1, 1, v68);
            uint64_t v30 = 0;
LABEL_55:
            uint64_t v9 = *((void *)v0 + 34);
            sub_100037BF4(*((void *)v0 + 33), v9);
            uint64_t v69 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
            if (_s10RTCUtility9XPCObjectOwet_0(v9, 1, v69) == 1)
            {
              uint64_t v76 = *((void *)v0 + 28);
              swift_release();
              sub_100017740((void *)(v76 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target), *(void *)(v76 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target + 24));
              uint64_t v77 = (void *)swift_task_alloc();
              *((void *)v0 + 55) = v77;
              *uint64_t v77 = v0;
              v77[1] = sub_10003684C;
              sub_10001513C();
              sub_100015F24();
              __asm { BRAA            X4, X16 }
            }
            sub_100017214();
            sub_100018224(v70);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            switch(EnumCaseMultiPayload)
            {
              case 0:
                uint64_t v72 = **((void **)v0 + 32);
                uint64_t v3 = *(void **)(v84 + 8);
                goto LABEL_63;
              case 2:
                v0[20] = **((double **)v0 + 32);
                goto LABEL_62;
              case 1:
                v0[21] = **((double **)v0 + 32);
LABEL_62:
                uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
                uint64_t v3 = v73;
LABEL_63:
                sub_10001A760(v72);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                break;
              default:
                uint64_t v74 = *((void *)v0 + 32);
                swift_bridgeObjectRelease();
                sub_100037CC0(v74);
                break;
            }
          }
          sub_1000134AC();
LABEL_45:
          sub_10003870C();
          uint64_t v65 = sub_100016398(v88);
          sub_100038724(v65);
          sub_10001A9CC();
          goto LABEL_55;
        }
        __break(1u);
        break;
      case 2uLL:
        uint64_t v45 = *((void *)v0 + 47);
        unint64_t v46 = *((void *)v0 + 48);
        uint64_t v47 = *(void *)(v45 + 16);
        uint64_t v48 = *(void *)(v45 + 24);
        sub_100012918();
        sub_100012918();
        swift_retain();
        swift_retain();
        sub_100037AD0(v47, v48, v45, v46, (uint64_t)v90);
        uint64_t v50 = *((void *)v0 + 47);
        unint64_t v49 = *((void *)v0 + 48);
        swift_release();
        swift_release();
        sub_1000088D0(v50, v49);
        goto LABEL_33;
      case 3uLL:
        uint64_t v56 = sub_1000144D0();
        *(void *)(v56 + 16) = v25;
        *(void *)(v56 + 24) = v25;
        uint64_t v38 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        goto LABEL_39;
      default:
        uint64_t v35 = sub_1000144D0();
        sub_100017FDC(v35);
        uint64_t v38 = v25;
LABEL_39:
        sub_100037D1C(v38, v36, v37, v25, v25, (uint64_t)v90);
        sub_1000088D0(*((void *)v0 + 47), *((void *)v0 + 48));
        swift_task_dealloc();
        goto LABEL_33;
    }
LABEL_82:
    __break(1u);
    JUMPOUT(0x100036040);
  }
  uint64_t v39 = qword_1000AF3C0;
  *((void *)v0 + 49) = qword_1000AF3C0;
  if (!v39) {
    goto LABEL_82;
  }
  int64_t v40 = (double *)(*((void *)v0 + 28) + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  v0[50] = *v40;
  v0[51] = v40[1];
  swift_retain();
  sub_100015F24();
  return _swift_task_switch(v41, v42, v43);
}

uint64_t sub_100036050()
{
  uint64_t v1 = *(void *)(v0 + 368);
  sub_10002DBBC(*(void *)(v0 + 400), *(void **)(v0 + 408));
  *(void *)(v0 + 416) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v3 = sub_100036A34;
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 224);
    swift_release();
    uint64_t v3 = sub_1000360F4;
    uint64_t v2 = v4;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_1000360F4()
{
  uint64_t v62 = v2;
  uint64_t v3 = (void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 416);
  unint64_t v5 = *(void *)(v2 + 384);
  sub_10001A8D4();
  uint64_t v6 = sub_100011378();
  v8.n128_f64[0] = v7(v6);
  sub_1000141E8(v8);
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v13 = *(void *)(v2 + 376);
      if (v13 >> 32 < (int)v13) {
        goto LABEL_56;
      }
      unint64_t v14 = *(void *)(v2 + 384);
      sub_10002779C(*(void *)(v2 + 376), v14);
      sub_10002779C(v13, v14);
      sub_100037AD0((int)v13, v13 >> 32, v13, v14, (uint64_t)v61);
      uint64_t v15 = v4;
      sub_1000088D0(*(void *)(v2 + 376), *(void *)(v2 + 384));
      if (!v4) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 2uLL:
      uint64_t v16 = *(void *)(v2 + 376);
      unint64_t v17 = *(void *)(v2 + 384);
      uint64_t v18 = *(void *)(v16 + 16);
      uint64_t v19 = *(void *)(v16 + 24);
      sub_100012918();
      sub_100012918();
      swift_retain();
      swift_retain();
      sub_100037AD0(v18, v19, v16, v17, (uint64_t)v61);
      uint64_t v15 = v4;
      uint64_t v21 = *(void *)(v2 + 376);
      unint64_t v20 = *(void *)(v2 + 384);
      swift_release();
      swift_release();
      sub_1000088D0(v21, v20);
      if (!v15) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      uint64_t v26 = sub_1000144D0();
      *(void *)(v26 + 16) = v0;
      *(void *)(v26 + 24) = v1;
      uint64_t v12 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      goto LABEL_11;
    default:
      uint64_t v9 = sub_1000144D0();
      sub_100017FDC(v9);
      uint64_t v12 = v0;
LABEL_11:
      sub_100037D1C(v12, v10, v11, v0, v1, (uint64_t)v61);
      uint64_t v15 = v4;
      sub_1000088D0(*(void *)(v2 + 376), *(void *)(v2 + 384));
      swift_task_dealloc();
      if (v4)
      {
LABEL_12:
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          v61[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = 136446210;
          swift_getErrorValue();
          uint64_t v30 = Error.localizedDescription.getter();
          *(void *)(v2 + 192) = sub_10001227C(v30, v31, v61);
          uint64_t v3 = (void *)(v2 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "failed to compress payload: %{public}s", v29, 0xCu);
          swift_arrayDestroy();
          sub_100009474();
          sub_100009474();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10002779C(*(void *)(v2 + 376), *(void *)(v2 + 384));
        uint64_t v23 = 0;
        unint64_t v22 = 0xF000000000000000;
      }
      else
      {
LABEL_7:
        uint64_t v23 = v61[0];
        unint64_t v22 = v61[1];
        sub_100038744();
        if (!v25 & v24) {
          sub_10002779C(*(void *)(v2 + 376), *(void *)(v2 + 384));
        }
        else {
          sub_10002779C(v23, v22);
        }
      }
      *(void *)(v2 + 424) = v23;
      *(void *)(v2 + 432) = v22;
      URLRequest.httpBody.setter();
      URLRequest.httpMethod.setter();
      sub_100038744();
      if (!(!v25 & v24)) {
        sub_100019BA8((uint64_t)"Content-Encoding");
      }
      sub_10001764C();
      uint64_t v59 = v32;
      uint64_t v33 = *(void *)(v2 + 224);
      sub_100016518(0xD000000000000010, 0x8000000100089950);
      sub_100014C94(0xD000000000000010, 0x8000000100089950);
      *(void *)(v2 + 152) = Data.count.getter();
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_100017D70(v34, v35);
      swift_bridgeObjectRelease();
      memcpy(v3, (const void *)(v33 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders), 0x50uLL);
      sub_100020CF0();
      sub_100009380();
      uint64_t v57 = v36;
      sub_10001AB28();
      uint64_t v58 = v37;
      uint64_t v55 = v37 - 1;
      uint64_t v56 = v38 + 104;
      break;
  }
  while (1)
  {
    if (v15)
    {
      sub_1000134AC();
LABEL_21:
      sub_10003870C();
      uint64_t v39 = sub_100016398(v59);
      sub_100038724(v39);
      sub_10001A9CC();
      goto LABEL_31;
    }
    uint64_t v40 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
LABEL_56:
      __break(1u);
      JUMPOUT(0x10003683CLL);
    }
    if (v40 < v58)
    {
      if (*(void *)(v57 + 8 * v40)) {
        goto LABEL_25;
      }
      if (v33 + 2 >= v58)
      {
        ++v33;
      }
      else
      {
        if (*(void *)(v57 + 8 * (v33 + 2))) {
          goto LABEL_25;
        }
        if (v33 + 3 >= v58)
        {
          v33 += 2;
        }
        else
        {
          if (*(void *)(v57 + 8 * (v33 + 3))) {
            goto LABEL_25;
          }
          if (v33 + 4 >= v58)
          {
            v33 += 3;
          }
          else
          {
            if (*(void *)(v57 + 8 * (v33 + 4)))
            {
LABEL_25:
              sub_100017BE0();
              goto LABEL_21;
            }
            while (v33 + 5 < v58)
            {
              if (*(void *)(v56 + 8 * v33++)) {
                goto LABEL_25;
              }
            }
            uint64_t v33 = v55;
          }
        }
      }
    }
    uint64_t v41 = *(void *)(v2 + 264);
    uint64_t v42 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
    _s10RTCUtility9XPCObjectOwst_0(v41, 1, 1, v42);
    uint64_t v15 = 0;
LABEL_31:
    uint64_t v43 = *(void *)(v2 + 272);
    sub_100037BF4(*(void *)(v2 + 264), v43);
    uint64_t v44 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
    if (_s10RTCUtility9XPCObjectOwet_0(v43, 1, v44) == 1) {
      break;
    }
    sub_100017214();
    sub_100018224(v45);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 0:
        uint64_t v47 = **(void **)(v2 + 256);
        goto LABEL_39;
      case 2:
        *(void *)(v2 + 160) = **(void **)(v2 + 256);
        goto LABEL_38;
      case 1:
        *(void *)(v2 + 168) = **(void **)(v2 + 256);
LABEL_38:
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_39:
        sub_10001A760(v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        uint64_t v48 = *(void *)(v2 + 256);
        swift_bridgeObjectRelease();
        sub_100037CC0(v48);
        break;
    }
  }
  uint64_t v50 = *(void *)(v2 + 224);
  swift_release();
  uint64_t v51 = *(void *)(v50 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target + 32);
  sub_100017740((void *)(v50 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target), *(void *)(v50 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target + 24));
  uint64_t v60 = (uint64_t (*)(uint64_t))(*(void *)(v51 + 8) + **(int **)(v51 + 8));
  char v52 = (void *)swift_task_alloc();
  *(void *)(v2 + 440) = v52;
  *char v52 = v2;
  v52[1] = sub_10003684C;
  uint64_t v53 = sub_10001513C();
  return v60(v53);
}

uint64_t sub_10003684C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 448) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 224);
  if (v0) {
    uint64_t v4 = sub_100036AEC;
  }
  else {
    uint64_t v4 = sub_100036978;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100036978()
{
  sub_100017068();
  sub_1000088D0(v3, v2);
  sub_10001E798(v0, v1);
  uint64_t v4 = sub_100017478();
  v5(v4);
  sub_100016690();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100013FE0();
  return v6();
}

uint64_t sub_100036A34()
{
  unint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 376);
  swift_release();
  sub_1000088D0(v2, v1);
  swift_release();
  sub_100016844();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v3();
}

uint64_t sub_100036AEC()
{
  sub_100017068();
  sub_1000088D0(v3, v2);
  sub_10001E798(v0, v1);
  uint64_t v4 = sub_100017478();
  v5(v4);
  sub_100016844();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v6();
}

double sub_100036BAC()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v4 = sub_100035080(0x656D695474736F70, 0xE800000000000000);
  double result = 0.0;
  if ((v4 & 1) == 0)
  {
    static Date.now.getter();
    uint64_t v6 = getTimeIntervalSince1970(Date:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (double)v6;
  }
  return result;
}

uint64_t sub_100036CA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = sub_100049DF4(*a1, a1[1], a1[2]);
  if (v4) {
    return 1;
  }
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories);
  if (*(void *)(v6 + 16))
  {
    sub_100073318(v3, v6);
    if ((v7 & 1) == 0)
    {
      if (qword_1000A5FE8 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100012884(v19, (uint64_t)qword_1000AF280);
      swift_retain_n();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 12) = 2082;
        swift_retain();
        uint64_t v20 = sub_100037030();
        unint64_t v22 = v21;
        swift_release();
        sub_10001227C(v20, v22, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        unint64_t v17 = "removing event with category %ld from submission to %{public}s due to allowlist";
        goto LABEL_15;
      }
LABEL_16:

      swift_release_n();
      return 0;
    }
  }
  uint64_t v8 = *(void *)(a2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories);
  if (!*(void *)(v8 + 16)) {
    return 1;
  }
  sub_100073318(v5, v8);
  if ((v9 & 1) == 0) {
    return 1;
  }
  if (qword_1000A5FE8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100012884(v10, (uint64_t)qword_1000AF280);
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v11, v12)) {
    goto LABEL_16;
  }
  uint64_t v13 = swift_slowAlloc();
  uint64_t v23 = swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 134218242;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v13 + 12) = 2082;
  swift_retain();
  uint64_t v14 = sub_100037030();
  unint64_t v16 = v15;
  swift_release();
  sub_10001227C(v14, v16, &v23);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  unint64_t v17 = "removing event with category %ld from submission to %{public}s due to denylist";
LABEL_15:
  _os_log_impl((void *)&_mh_execute_header, v11, v12, v17, (uint8_t *)v13, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return 0;
}

uint64_t sub_100037030()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name + 8);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 539828258;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  type metadata accessor for URL();
  sub_1000384CC(&qword_1000A6F60, (void (*)(uint64_t))&type metadata accessor for URL);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 8744;
}

uint64_t sub_100037130()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_url;
  type metadata accessor for URL();
  sub_10000948C();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  sub_10001610C(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100037244()
{
  sub_100037130();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100037270()
{
  return type metadata accessor for BackendHTTP();
}

uint64_t type metadata accessor for BackendHTTP()
{
  uint64_t result = qword_1000A6E40;
  if (!qword_1000A6E40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000372C0()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000373A4(uint64_t a1)
{
  Swift::String v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *Swift::String v3 = v1;
  v3[1] = sub_100037438;
  return sub_100035164(a1);
}

uint64_t sub_100037438()
{
  sub_100017D58();
  swift_task_dealloc();
  sub_10000E83C();
  return v0();
}

uint64_t sub_100037504()
{
  return sub_100037030();
}

uint64_t sub_100037528(uint64_t a1)
{
  return sub_1000347FC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_100037544()
{
  unint64_t result = qword_1000A6A10;
  if (!qword_1000A6A10)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A6A10);
  }
  return result;
}

uint64_t sub_100037584@<X0>(Bytef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uLong v10 = a2 - (void)a1;
  if (a1) {
    uLong v11 = v10;
  }
  else {
    uLong v11 = 0;
  }
  memset(&strm.total_in, 0, 20);
  memset(&strm.total_out, 0, 52);
  strm.adler = 0;
  strm.reserved = 0;
  if ((v11 & 0x8000000000000000) == 0 && !HIDWORD(v11))
  {
    strm.avail_in = v11;
    if (a1)
    {
      strm.next_in = a1;
      int v12 = deflateInit2_(&strm, -1, 8, 31, 8, 0, "1.2.12", 112);
      if (v12)
      {
        int v13 = v12;
        sub_100037E10();
        swift_allocError();
        *uint64_t v14 = v13;
        return swift_willThrow();
      }
      if ((deflateBound(&strm, v10) & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        uint64_t v26 = Data.init(count:)();
        unint64_t v27 = v16;
        int v17 = sub_100037E5C(&v26, &strm);
        if (v17 != 1)
        {
          int v21 = v17;
          Logger.init()();
          unint64_t v22 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v22, v23))
          {
            char v24 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)char v24 = 67240192;
            v25[1] = v21;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "zlib returned unexpected status %{public}d", v24, 8u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          *(_OWORD *)a3 = xmmword_100085ED0;
          sub_1000088D0(v26, v27);
          return deflateEnd(&strm);
        }
        if ((strm.total_out & 0x8000000000000000) == 0)
        {
          Data._Representation.count.setter();
          uint64_t v18 = v26;
          unint64_t v19 = v27;
          uint64_t v20 = Data.count.getter();
          if (v20 >= Data.count.getter())
          {
            sub_1000088D0(v18, v19);
            *(_OWORD *)a3 = xmmword_100085ED0;
          }
          else
          {
            *(void *)a3 = v18;
            *(void *)(a3 + 8) = v19;
          }
          return deflateEnd(&strm);
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100037928@<X0>(z_streamp strm@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, _DWORD *a4@<X8>)
{
  if (a2) {
    uLong v5 = a3 - a2;
  }
  else {
    uLong v5 = 0;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  uLong total_out = strm->total_out;
  BOOL v7 = v5 >= total_out;
  uLong v8 = v5 - total_out;
  if (!v7)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!HIDWORD(v8))
  {
    strm->avail_out = v8;
    if (!a2)
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    if ((total_out & 0x8000000000000000) == 0)
    {
      strm->next_out = (Bytef *)(a2 + total_out);
      uint64_t result = deflate(strm, 4);
      *a4 = result;
      return result;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100037A30()
{
  unint64_t result = qword_1000A69C8;
  if (!qword_1000A69C8)
  {
    sub_1000286C8(&qword_1000A69C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A69C8);
  }
  return result;
}

unint64_t sub_100037A84()
{
  unint64_t result = qword_1000A6F70;
  if (!qword_1000A6F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6F70);
  }
  return result;
}

uint64_t sub_100037AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uLong v11 = (Bytef *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  unint64_t v16 = &v11[v15];
  if (v11) {
    uint64_t v17 = (uint64_t)v16;
  }
  else {
    uint64_t v17 = 0;
  }
  sub_100037584(v11, v17, a5);
  return sub_1000088D0(a3, a4);
}

uint64_t sub_100037B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A6F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037CC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100037D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  sub_100037584((Bytef *)&v9, (uint64_t)&v9 + a3, a6);
  return sub_1000088D0(a4, a5);
}

unint64_t sub_100037E10()
{
  unint64_t result = qword_1000A6F78;
  if (!qword_1000A6F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000A6F78);
  }
  return result;
}

uint64_t sub_100037E5C(uint64_t *a1, z_stream *a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_100085EE0;
      uint64_t v9 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
      if (v9 < (int)v3) {
        goto LABEL_16;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v3, __DataStorage._offset.getter())) {
        goto LABEL_17;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v11 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v8 = v11;
LABEL_11:
      if (v9 < (int)v3)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t result = sub_1000380F8((int)v3, v3 >> 32, v8, a2);
      unint64_t v10 = v8 | 0x4000000000000000;
      *a1 = v3;
LABEL_13:
      a1[1] = v10;
      return result;
    case 2uLL:
      *(void *)&long long v12 = *a1;
      *((void *)&v12 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_1000380F8(*(void *)(v12 + 16), *(void *)(v12 + 24), *((uint64_t *)&v12 + 1), a2);
      unint64_t v10 = *((void *)&v12 + 1) | 0x8000000000000000;
      *a1 = v12;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v12 + 7) = 0;
      *(void *)&long long v12 = 0;
      return sub_10003819C((uint64_t)&v12, 0, a2);
    default:
      *(void *)&long long v12 = *a1;
      WORD4(v12) = v2;
      BYTE10(v12) = BYTE2(v2);
      BYTE11(v12) = BYTE3(v2);
      BYTE12(v12) = BYTE4(v2);
      BYTE13(v12) = BYTE5(v2);
      BYTE14(v12) = BYTE6(v2);
      uint64_t result = sub_10003819C((uint64_t)&v12, BYTE6(v2), a2);
      unint64_t v7 = DWORD2(v12) | ((unint64_t)BYTE12(v12) << 32) | ((unint64_t)BYTE13(v12) << 40) | ((unint64_t)BYTE14(v12) << 48);
      *a1 = v12;
      a1[1] = v7;
      return result;
  }
}

uint64_t sub_1000380F8(uint64_t a1, uint64_t a2, uint64_t a3, z_stream *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v9 = result;
  uint64_t result = __DataStorage._offset.getter();
  uint64_t v10 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v11 = __OFSUB__(a2, a1);
  uint64_t v12 = a2 - a1;
  if (v11)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t result = sub_100037928(a4, v9 + v10, v9 + v10 + v14, &v15);
  if (!v4) {
    return v15;
  }
  return result;
}

uint64_t sub_10003819C(uint64_t a1, uint64_t a2, z_stream *a3)
{
  uint64_t result = sub_100037928(a3, a1, a1 + a2, &v5);
  if (!v3) {
    return v5;
  }
  return result;
}

_DWORD *_s9ZLibErrorOwCP(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s9ZLibErrorOwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s9ZLibErrorOwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

ValueMetadata *_s9ZLibErrorOMa()
{
  return &_s9ZLibErrorON;
}

uint64_t destroy for BackendHTTP.POSTData()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BackendHTTP.POSTData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BackendHTTP.POSTData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for BackendHTTP.POSTData(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for BackendHTTP.POSTData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BackendHTTP.POSTData(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackendHTTP.POSTData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BackendHTTP.POSTData()
{
  return &type metadata for BackendHTTP.POSTData;
}

unint64_t sub_10003840C()
{
  unint64_t result = qword_1000A6F90;
  if (!qword_1000A6F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6F90);
  }
  return result;
}

unint64_t sub_100038458()
{
  unint64_t result = qword_1000A6FA0;
  if (!qword_1000A6FA0)
  {
    sub_1000286C8(&qword_1000A6F98);
    sub_10000B874();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6FA0);
  }
  return result;
}

uint64_t sub_1000384CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BackendHTTP.POSTData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000385E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BackendHTTP.POSTData.CodingKeys()
{
  return &type metadata for BackendHTTP.POSTData.CodingKeys;
}

unint64_t sub_10003861C()
{
  unint64_t result = qword_1000A6FA8;
  if (!qword_1000A6FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6FA8);
  }
  return result;
}

unint64_t sub_10003866C()
{
  unint64_t result = qword_1000A6FB0;
  if (!qword_1000A6FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6FB0);
  }
  return result;
}

unint64_t sub_1000386BC()
{
  unint64_t result = qword_1000A6FB8;
  if (!qword_1000A6FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6FB8);
  }
  return result;
}

void sub_10003870C()
{
  **(void **)(v1 + 264) = *(void *)(*(void *)(v2 + 48) + 16 * v0);
}

uint64_t sub_100038724(uint64_t a1)
{
  uint64_t v4 = v1 + *(int *)(a1 + 48);
  return sub_100037B90(v2, v4);
}

uint64_t sub_100038750(uint64_t a1)
{
  return sub_1000288D4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_100038764(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_100028884(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t sub_1000387C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_100028884(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_1000288D4(v7, v8, v9, v10);
  return a1;
}

__n128 sub_100038834(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100038848(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_1000288D4(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_100038898(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000388D8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100038920(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100038938(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(void *)__n128 result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

void type metadata accessor for StorebagSectionBackend()
{
}

uint64_t sub_100038960()
{
  return 0x73746E65696C63;
}

void sub_100038978(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100038984(uint64_t a1)
{
  unint64_t v2 = sub_10003922C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000389C0(uint64_t a1)
{
  unint64_t v2 = sub_10003922C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000389FC(void *a1)
{
  sub_100016CE0(&qword_1000A6FC0);
  sub_100014C1C();
  __chkstk_darwin(v3);
  sub_100019BD4();
  uint64_t v4 = a1[4];
  sub_100017740(a1, a1[3]);
  sub_10003922C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001610C((uint64_t)a1);
    return v4;
  }
  sub_100017740(a1, a1[3]);
  uint64_t v5 = dispatch thunk of Decoder.codingPath.getter();
  sub_100039928(v5, (uint64_t)v9);
  uint64_t result = swift_bridgeObjectRelease();
  if (v10)
  {
    sub_100017740(v9, v10);
    uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
    swift_bridgeObjectRetain();
    sub_10001610C((uint64_t)v9);
    sub_100016CE0(&qword_1000A6FD0);
    sub_100039310(&qword_1000A6FD8, &qword_1000A6FD0, (void (*)(void))sub_100039278);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = sub_100014CC0();
    v8(v7);
    swift_bridgeObjectRetain();
    sub_10001610C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_100038C18(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73746E65696C63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_100038CA0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000389FC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100038CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_100038C18(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_100038D00(uint64_t a1)
{
  unint64_t v2 = sub_1000392C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100038D3C(uint64_t a1)
{
  unint64_t v2 = sub_1000392C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100038D78(void *a1)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A6FE8);
  sub_100014C1C();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100019BD4();
  char v8 = sub_100017740(a1, a1[3]);
  sub_1000392C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001610C((uint64_t)a1);
  }
  else
  {
    sub_100016CE0(&qword_1000A6FF8);
    sub_100039310(&qword_1000A7000, &qword_1000A6FF8, (void (*)(void))sub_100039388);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
    char v8 = v10;
    sub_10001610C((uint64_t)a1);
  }
  return v8;
}

void *sub_100038EDC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100038D78(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100038F08(void *a1)
{
  sub_100017740(a1, a1[3]);
  uint64_t v3 = dispatch thunk of Decoder.codingPath.getter();
  sub_100039928(v3, (uint64_t)v16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v17)
  {
    sub_100017740(v16, v17);
    uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v7 = v6;
    sub_10001610C((uint64_t)v16);
    BOOL v8 = v5 == 0x6F7A6E6F67 && v7 == (void *)0xE500000000000000;
    if (!v8 && (sub_100019310() & 1) == 0 && (v5 != 0x6B6E756C7073 || v7 != (void *)0xE600000000000000))
    {
      sub_100015F44();
      if ((sub_100019310() & 1) == 0 && (v5 != 0x685F6B6E756C7073 || v7 != (void *)0xEE00646F70656D6FLL))
      {
        sub_100015F44();
        if ((sub_100019310() & 1) == 0 && (v5 != 0x615F6B6E756C7073 || v7 != (void *)0xEA00000000007674))
        {
          sub_100015F44();
          if ((sub_100019310() & 1) == 0
            && (v5 != 0xD000000000000012 || v7 != (void *)0x80000001000899C0)
            && (sub_100019310() & 1) == 0)
          {
            if (v5 == 0x6C61636F6CLL && v7 == (void *)0xE500000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v13 = sub_100019310();
              swift_bridgeObjectRelease();
              if ((v13 & 1) == 0)
              {
                uint64_t v7 = 0;
LABEL_37:
                sub_10001610C((uint64_t)a1);
                return (uint64_t)v7;
              }
            }
            sub_10000F43C((uint64_t)a1, (uint64_t)v16);
            unsigned int v15 = sub_100038D78(v16);
            if (!v1) {
              uint64_t v7 = v15;
            }
            goto LABEL_37;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    sub_10000F43C((uint64_t)a1, (uint64_t)v16);
    uint64_t v14 = sub_1000389FC(v16);
    if (!v1) {
      uint64_t v7 = (void *)v14;
    }
    goto LABEL_37;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000391F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100038F08(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = v7;
  }
  return result;
}

unint64_t sub_10003922C()
{
  unint64_t result = qword_1000A6FC8;
  if (!qword_1000A6FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6FC8);
  }
  return result;
}

unint64_t sub_100039278()
{
  unint64_t result = qword_1000A6FE0;
  if (!qword_1000A6FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6FE0);
  }
  return result;
}

unint64_t sub_1000392C4()
{
  unint64_t result = qword_1000A6FF0;
  if (!qword_1000A6FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6FF0);
  }
  return result;
}

uint64_t sub_100039310(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000286C8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100039388()
{
  unint64_t result = qword_1000A7008;
  if (!qword_1000A7008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7008);
  }
  return result;
}

void type metadata accessor for StorebagSectionBackendTTR.CodingKeys()
{
}

unsigned char *sub_1000393E4(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100039480);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for StorebagSectionBackendHTTP.CodingKeys()
{
}

void type metadata accessor for StorebagSectionBackendTTR()
{
}

uint64_t sub_1000394C4()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100039500(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100039540(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000395A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000395F0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100039630(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionBackendHTTP()
{
}

unint64_t sub_100039680()
{
  unint64_t result = qword_1000A7010;
  if (!qword_1000A7010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7010);
  }
  return result;
}

unint64_t sub_1000396D0()
{
  unint64_t result = qword_1000A7018;
  if (!qword_1000A7018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7018);
  }
  return result;
}

unint64_t sub_100039720()
{
  unint64_t result = qword_1000A7020;
  if (!qword_1000A7020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7020);
  }
  return result;
}

unint64_t sub_100039770()
{
  unint64_t result = qword_1000A7028;
  if (!qword_1000A7028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7028);
  }
  return result;
}

unint64_t sub_1000397C0()
{
  unint64_t result = qword_1000A7030;
  if (!qword_1000A7030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7030);
  }
  return result;
}

unint64_t sub_100039810()
{
  unint64_t result = qword_1000A7038;
  if (!qword_1000A7038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7038);
  }
  return result;
}

uint64_t sub_100039860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v5, v6);
    uint64_t v7 = a2;
    uint64_t v8 = 0;
    uint64_t v9 = v6;
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }

  return _s10RTCUtility9XPCObjectOwst_0(v7, v8, 1, v9);
}

double sub_100039928@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10000F43C(a1 + 40 * v2 - 8, a2);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100039954()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000A7040);
  sub_100012884(v0, (uint64_t)qword_1000A7040);
  return Logger.init(subsystem:category:)();
}

uint64_t (*sub_1000399D8())()
{
  return j__swift_endAccess;
}

uint64_t sub_100039A28()
{
  sub_1000113BC();
  *(void *)(v1 + 128) = v0;
  *(unsigned char *)(v1 + 264) = v2;
  sub_100016384();
  *(void *)(v1 + 136) = v3;
  uint64_t v4 = sub_100016CE0(&qword_1000A67F8);
  *(void *)(v1 + 144) = v4;
  *(void *)(v1 + 152) = *(void *)(v4 - 8);
  *(void *)(v1 + 160) = swift_task_alloc();
  swift_defaultActor_initialize();
  *(void *)(v0 + 120) = sub_100017300();
  *(_WORD *)(v0 + 128) = 0;
  *(void *)(v0 + 136) = &_swiftEmptySetSingleton;
  sub_100016CE0(&qword_1000A7270);
  *(void *)(v0 + 144) = sub_100017300();
  *(void *)(v0 + 152) = 0;
  *(void *)(v1 + 168) = type metadata accessor for CachedSession(0);
  *(void *)(v0 + 168) = sub_100017300();
  type metadata accessor for StorebagCoordinator();
  swift_allocObject();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 176) = v5;
  void *v5 = v1;
  v5[1] = sub_100039BB0;
  return sub_100033670();
}

uint64_t sub_100039BB0()
{
  sub_1000113BC();
  uint64_t v2 = v1;
  sub_100017D58();
  uint64_t v4 = *(void *)(v3 + 128);
  uint64_t v5 = *v0;
  sub_100015EE4();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  *(void *)(v4 + 112) = v2;
  uint64_t v7 = type metadata accessor for SubmitEagerEventsActivity();
  uint64_t v8 = sub_10003DA64(&qword_1000A7EA0, 255, (void (*)(uint64_t))type metadata accessor for SubmitEagerEventsActivity);
  type metadata accessor for XPCActivity();
  swift_allocObject();
  *(void *)(v4 + 160) = sub_100056F0C(v7, v8);
  sub_100009368();
  return _swift_task_switch(v9, v10, v11);
}

void sub_100039D10()
{
  sub_1000094A8();
  if (*(unsigned char *)(v0 + 264))
  {
    swift_task_dealloc();
    uint64_t v1 = *(void (**)(uint64_t))(v0 + 8);
    uint64_t v2 = *(void *)(v0 + 128);
    v1(v2);
  }
  else
  {
    uint64_t v3 = qword_1000AF3A0;
    *(void *)(v0 + 184) = qword_1000AF3A0;
    if (v3)
    {
      swift_retain();
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v4;
      void *v4 = v0;
      v4[1] = sub_100039E00;
      sub_10004040C(50);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100039E00()
{
  sub_100013FC4();
  sub_100007DB0();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  sub_100017D58();
  uint64_t v6 = v5;
  sub_10000935C();
  *uint64_t v7 = v6;
  uint64_t v8 = *v1;
  sub_100015EE4();
  *uint64_t v9 = v8;
  v6[25] = v4;
  swift_task_dealloc();
  swift_release();
  if (v2)
  {
    if (qword_1000A5FF0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100012884(v10, (uint64_t)qword_1000A7040);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (sub_10003DC74(v12))
    {
      sub_100014490();
      sub_1000094B4();
      sub_100012930(4.8751e-34);
      uint64_t v13 = Error.localizedDescription.getter();
      v6[15] = sub_10003DC5C(v13, v14, v15, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_100009394((void *)&_mh_execute_header, v11, v17, "failed to load abandoned sessions: %{public}s");
      sub_100017228();
      sub_100009474();
      sub_100009474();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_24;
  }
  int64_t v18 = *(void *)(v4 + 16);
  v6[26] = v18;
  if (!v18)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    uint64_t v42 = (void *)(v6[16] + 168);
    uint64_t v43 = sub_100022F4C((uint64_t)_swiftEmptyArrayStorage);
    swift_beginAccess();
    *uint64_t v42 = v43;
    swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v44 = qword_1000AF3A0;
    v6[29] = qword_1000AF3A0;
    if (v44)
    {
      swift_retain();
      uint64_t v45 = (void *)swift_task_alloc();
      v6[30] = v45;
      *uint64_t v45 = v8;
      v45[1] = sub_10003A71C;
      sub_100016650();
      sub_100040664(v46);
      return;
    }
    __break(1u);
LABEL_29:
    __break(1u);
    return;
  }
  if (v18 != 50)
  {
    uint64_t v27 = v6[25];
    uint64_t v48 = v8;
    uint64_t v49 = v6[20];
    uint64_t v29 = v6[18];
    uint64_t v28 = v6[19];
    sub_100071EE0(0, v18, 0);
    uint64_t v30 = 0;
    sub_100015154();
    uint64_t v32 = v27 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    uint64_t v34 = *(void *)(v33 + 72);
    do
    {
      uint64_t v35 = (void *)v6[20];
      uint64_t v36 = (uint64_t)v35 + *(int *)(v29 + 48);
      sub_10003D340(v32, v36);
      uint64_t v37 = *(void *)(v36 + 56);
      *uint64_t v35 = *(void *)(v36 + 48);
      *(void *)(v49 + 8) = v37;
      unint64_t v39 = _swiftEmptyArrayStorage[2];
      unint64_t v38 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v39 >= v38 >> 1) {
        sub_100071EE0(v38 > 1, v39 + 1, 1);
      }
      uint64_t v40 = v6[26];
      uint64_t v41 = v6[20];
      ++v30;
      _swiftEmptyArrayStorage[2] = v39 + 1;
      sub_10003DAEC(v41, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v39);
      v32 += v34;
    }
    while (v30 != v40);
    swift_bridgeObjectRelease();
    uint64_t v8 = v48;
    goto LABEL_23;
  }
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = (void *)sub_100007DBC(v19, (uint64_t)qword_1000A7040);
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (sub_100016884(v21))
  {
    *(_WORD *)sub_1000113C8() = 0;
    sub_10000E6D8((void *)&_mh_execute_header, v22, v23, "too many abandoned sessions - dropping all sessions");
    sub_100009474();
  }

  uint64_t v24 = qword_1000AF3A0;
  v6[27] = qword_1000AF3A0;
  if (!v24) {
    goto LABEL_29;
  }
  swift_retain();
  char v25 = (void *)swift_task_alloc();
  v6[28] = v25;
  *char v25 = v8;
  v25[1] = sub_10003A300;
  sub_100016650();
  sub_100040518();
}

void sub_10003A300()
{
  uint64_t v37 = v1;
  uint64_t v2 = (void *)*v1;
  sub_100015EE4();
  *uint64_t v3 = v2;
  uint64_t v4 = (void *)*v1;
  *uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    if (qword_1000A5FF0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100012884(v5, (uint64_t)qword_1000A7040);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (sub_10003DC74(v7))
    {
      sub_100014490();
      uint64_t v36 = (void *)sub_1000094B4();
      sub_100012930(4.8751e-34);
      uint64_t v8 = Error.localizedDescription.getter();
      v2[15] = sub_10001227C(v8, v9, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_100009394((void *)&_mh_execute_header, v6, v10, "failed to load abandoned sessions: %{public}s");
      sub_100017228();
      sub_100009474();
      sub_100009474();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v34 = v4;
    swift_release();
    uint64_t v12 = v2[25];
    int64_t v11 = v2[26];
    uint64_t v35 = v2[20];
    uint64_t v14 = v2[18];
    uint64_t v13 = v2[19];
    uint64_t v36 = _swiftEmptyArrayStorage;
    sub_100071EE0(0, v11, 0);
    uint64_t v15 = 0;
    uint64_t v16 = _swiftEmptyArrayStorage;
    sub_100015154();
    uint64_t v18 = v12 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    uint64_t v20 = *(void *)(v19 + 72);
    do
    {
      os_log_type_t v21 = (void *)v2[20];
      uint64_t v22 = (uint64_t)v21 + *(int *)(v14 + 48);
      sub_10003D340(v18, v22);
      uint64_t v23 = *(void *)(v22 + 56);
      *os_log_type_t v21 = *(void *)(v22 + 48);
      *(void *)(v35 + 8) = v23;
      uint64_t v36 = v16;
      unint64_t v25 = v16[2];
      unint64_t v24 = v16[3];
      swift_bridgeObjectRetain();
      if (v25 >= v24 >> 1)
      {
        sub_100071EE0(v24 > 1, v25 + 1, 1);
        uint64_t v16 = v36;
      }
      uint64_t v26 = v2[26];
      uint64_t v27 = v2[20];
      ++v15;
      v16[2] = v25 + 1;
      sub_10003DAEC(v27, (uint64_t)v16+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v25);
      v18 += v20;
    }
    while (v15 != v26);
    swift_bridgeObjectRelease();
    uint64_t v28 = (void *)(v2[16] + 168);
    uint64_t v29 = sub_100022F4C((uint64_t)v16);
    swift_beginAccess();
    *uint64_t v28 = v29;
    swift_bridgeObjectRelease();
    uint64_t v4 = v34;
  }
  uint64_t v30 = qword_1000AF3A0;
  v2[29] = qword_1000AF3A0;
  if (v30)
  {
    swift_retain();
    uint64_t v31 = (void *)swift_task_alloc();
    v2[30] = v31;
    *uint64_t v31 = v4;
    v31[1] = sub_10003A71C;
    sub_100016868();
    sub_100040664(v32);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003A71C(uint64_t a1)
{
  uint64_t v4 = *v2;
  sub_100015EE4();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  uint64_t *v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v7 = *(void *)(a1 + 16);
    swift_bridgeObjectRelease();
    if (v7)
    {
      if (qword_1000A5FF0 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      unint64_t v9 = (void *)sub_100007DBC(v8, (uint64_t)qword_1000A7040);
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (sub_100016884(v10))
      {
        *(_WORD *)sub_1000113C8() = 0;
        sub_10000E6D8((void *)&_mh_execute_header, v11, v12, "found eager events, starting activity");
        sub_100009474();
      }

      byte_1000A7670 = 0;
    }
  }
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v4 + 248) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_10003A91C;
  return sub_10003BE6C();
}

uint64_t sub_10003A91C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v2 = v1;
  sub_10000935C();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 128);
  uint64_t v6 = *v0;
  sub_100015EE4();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  *(void *)(v2 + 256) = *(void *)(v5 + 160);
  swift_retain();
  sub_100009368();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10003AA08()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  sub_100055654(2);
  swift_release();
  id v3 = [self defaultCenter];
  uint64_t v4 = MCEffectiveSettingsChangedNotification;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v2;
  v0[6] = sub_10003DAE4;
  v0[7] = v5;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_10003ADBC;
  v0[5] = &unk_10009FD10;
  uint64_t v6 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  id v7 = [v3 addObserverForName:v4 object:0 queue:0 usingBlock:v6];
  _Block_release(v6);

  swift_unknownObjectRelease();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v9 = v0[16];
  return v8(v9);
}

uint64_t sub_10003AB94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100012884(v6, (uint64_t)qword_1000A7040);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "received notification for MC effective settings change", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = type metadata accessor for TaskPriority();
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v5, 1, 1, v10);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  void v11[3] = 0;
  v11[4] = a2;
  swift_retain();
  sub_10000FF80((uint64_t)v5, (uint64_t)&unk_1000A7288, (uint64_t)v11);
  return swift_release();
}

uint64_t sub_10003AD2C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001B7E0;
  return sub_10003BE6C();
}

uint64_t sub_10003ADBC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10003AEB0()
{
  sub_1000094A8();
  *(void *)(v0 + 152) = *(void *)(v0 + 288);
  swift_errorRetain();
  sub_100016CE0(&qword_1000A67E8);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 308) == 1)
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v1 = sub_10003DC9C();
    return v2(v1);
  }
  else
  {
    swift_errorRelease();
    swift_task_dealloc();
    sub_10000E83C();
    return v4();
  }
}

uint64_t sub_10003AFA8()
{
  sub_1000094A8();
  sub_100055654(2);
  sub_100009368();
  return _swift_task_switch(v0, v1, v2);
}

void sub_10003B010()
{
  sub_1000094A8();
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v1 + 152);
  BOOL v3 = __OFADD__(v2, 1);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 152) = v4;
    swift_task_dealloc();
    uint64_t v5 = sub_10001A408();
    v6(v5);
  }
}

void (*sub_10003B084(void *a1, uint64_t a2, uint64_t a3))(void **a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_10003D56C(v6, a2, a3);
  return sub_10003B104;
}

void sub_10003B104(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = sub_10001A454();
  v3(v2);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_10003B14C()
{
  *(void *)(v1 + 16) = v0;
  return sub_100019308((uint64_t)sub_10003B168, v0);
}

uint64_t sub_10003B168()
{
  sub_1000113BC();
  if (*(uint64_t *)(*(void *)(v0 + 16) + 152) <= 0)
  {
    if (qword_1000A5FF0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = (void *)sub_100007DBC(v9, (uint64_t)qword_1000A7040);
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (sub_10000E918(v11))
    {
      uint64_t v12 = (_WORD *)sub_1000113C8();
      sub_10003DC90(v12);
      sub_1000094EC((void *)&_mh_execute_header, v13, v14, "dropping eager submit activity");
      sub_100009474();
    }

    byte_1000A7670 = 1;
    sub_10000E83C();
    return v15();
  }
  else
  {
    if (qword_1000A5FF0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    uint64_t v2 = (void *)sub_100007DBC(v1, (uint64_t)qword_1000A7040);
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (sub_10000E918(v3))
    {
      uint64_t v4 = (_WORD *)sub_1000113C8();
      sub_10003DC90(v4);
      sub_1000094EC((void *)&_mh_execute_header, v5, v6, "re-registering eager submit activity");
      sub_100009474();
    }
    uint64_t v7 = *(void *)(v0 + 16);

    uint64_t v8 = *(void *)(v7 + 160);
    *(void *)(v0 + 24) = v8;
    return _swift_task_switch(sub_10003B310, v8, 0);
  }
}

uint64_t sub_10003B310()
{
  sub_1000094A8();
  sub_100055654(2);
  sub_10000E83C();
  return v0();
}

uint64_t sub_10003B36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  uint64_t v7 = (void *)swift_task_alloc();
  v6[16] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_10001C868;
  return static Task<>.sleep(nanoseconds:)(10000000000);
}

uint64_t sub_10003B410()
{
  sub_1000113BC();
  sub_100011390();
  sub_10000E860();
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_10000E83C();
  return v0();
}

uint64_t sub_10003B48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return _swift_task_switch(sub_10003B4B0, a6, 0);
}

uint64_t sub_10003B4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v23;
  a22 = v24;
  sub_100007DB0();
  a20 = v22;
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  os_log_type_t v26 = sub_100012884(v25, (uint64_t)qword_1000A7040);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  BOOL v29 = sub_10000E918(v28);
  unint64_t v30 = v22[4];
  if (v29)
  {
    uint64_t v31 = v22[3];
    uint64_t v32 = (uint8_t *)sub_100014490();
    a11 = sub_1000094B4();
    *(_DWORD *)uint64_t v32 = 136446210;
    swift_bridgeObjectRetain();
    v22[2] = sub_10001227C(v31, v30, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v26, "requesting immediate eviction for %{public}s", v32, 0xCu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v33 = (void *)swift_task_alloc();
  v22[6] = v33;
  *uint64_t v33 = v22;
  v33[1] = sub_10003B69C;
  sub_100016650();
  return sub_10001C140(v34, v35);
}

uint64_t sub_10003B69C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000E83C();
  return v3();
}

uint64_t sub_10003B75C()
{
  sub_1000094A8();
  *(void *)(v1 + 136) = v2;
  *(void *)(v1 + 144) = v0;
  *(_DWORD *)(v1 + 208) = v3;
  *(void *)(v1 + 128) = v4;
  uint64_t v5 = sub_100016CE0(&qword_1000A8490);
  sub_100009374(v5);
  *(void *)(v1 + 152) = swift_task_alloc();
  *(void *)(v1 + 160) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CachedSession(0);
  *(void *)(v1 + 168) = v6;
  sub_100009374(v6);
  *(void *)(v1 + 176) = swift_task_alloc();
  sub_10000E934();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10003B828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, uint64_t a19)
{
  uint64_t v13 = *(void *)(v11 + 160);
  uint64_t v12 = *(void *)(v11 + 168);
  uint64_t v14 = *(void *)(v11 + 136);
  uint64_t v15 = *(void *)(v11 + 128);
  sub_1000134C4();
  sub_10004C394(v15, v14);
  swift_endAccess();
  if (_s10RTCUtility9XPCObjectOwet_0(v13, 1, v12) == 1)
  {
    sub_10003D220(*(void *)(v11 + 160));
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v11 + 8);
    return v40(0);
  }
  uint64_t v16 = *(uint64_t **)(v11 + 176);
  sub_10003D280(*(void *)(v11 + 160), (uint64_t)v16);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  swift_bridgeObjectRetain();
  char v19 = sub_100009B48(v17, v18);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v11 + 176);
  if ((v19 & 1) == 0)
  {
    sub_10003D2E4(v20);
    goto LABEL_8;
  }
  uint64_t v21 = *(void *)(v11 + 168);
  uint64_t v22 = *(void *)(v11 + 152);
  uint64_t v23 = *(void *)(v20 + 16);
  uint64_t v24 = *(void *)(v20 + 24);
  uint64_t v25 = *(void *)(v20 + 32);
  uint64_t v26 = *(void *)(v20 + 40);
  *(void *)(v11 + 16) = v17;
  *(void *)(v11 + 24) = v18;
  *(void *)(v11 + 32) = v23;
  *(void *)(v11 + 40) = v24;
  *(void *)(v11 + 48) = v25;
  *(void *)(v11 + 56) = v26;
  char v27 = *(unsigned char *)(v20 + 72);
  sub_10003D340(v20, v22);
  _s10RTCUtility9XPCObjectOwst_0(v22, 0, 1, v21);
  type metadata accessor for Session(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_log_type_t v28 = (void *)swift_task_alloc();
  *(void *)(v11 + 184) = v28;
  *os_log_type_t v28 = v11;
  v28[1] = sub_10003BA90;
  uint64_t v37 = *(void *)(v11 + 144);
  int v38 = *(_DWORD *)(v11 + 208);
  return sub_10000DABC(v38, v37, (_OWORD *)(v11 + 16), v27, 0, 0, 0, 0, v29, v30, v31, v32, v33, v34, v35, v36, a17, a18, a19);
}

uint64_t sub_10003BA90(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 192) = v1;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 144);
  if (v1)
  {
    uint64_t v8 = sub_10003BC4C;
  }
  else
  {
    *(void *)(v5 + 200) = a1;
    uint64_t v8 = sub_10003BBC4;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_10003BBC4()
{
  sub_1000113BC();
  uint64_t v1 = v0[25];
  sub_10003D2E4(v0[22]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_10003BC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100013FC4();
  sub_100007DB0();
  uint64_t v15 = *(uint64_t **)(v14 + 176);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  swift_bridgeObjectRetain();
  sub_10000A630(v16, v17, 0);
  swift_bridgeObjectRelease();
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100012884(v18, (uint64_t)qword_1000A7040);
  swift_errorRetain();
  swift_errorRetain();
  char v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  BOOL v21 = sub_10003DC74(v20);
  uint64_t v22 = *(void *)(v14 + 176);
  if (v21)
  {
    a10 = *(void *)(v14 + 176);
    a9 = v14 + 120;
    uint64_t v23 = (_DWORD *)sub_100014490();
    a11 = sub_1000094B4();
    *uint64_t v23 = 136446210;
    swift_getErrorValue();
    uint64_t v24 = Error.localizedDescription.getter();
    *(void *)(v14 + 120) = sub_10003DC5C(v24, v25, v26, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100009394((void *)&_mh_execute_header, v19, v28, "failed to rehydrate session: %{public}s");
    sub_100017228();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
    uint64_t v29 = a10;
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v29 = v22;
  }
  sub_10003D2E4(v29);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100016650();
  return v32(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10003BE6C()
{
  *(void *)(v1 + 56) = v0;
  return sub_100019308((uint64_t)sub_10003BE88, v0);
}

void sub_10003BE88()
{
  sub_1000094A8();
  uint64_t v1 = qword_1000AF3A0;
  *(void *)(v0 + 64) = qword_1000AF3A0;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10003BF30;
    sub_100040770();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003BF30()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v1;
  *(unsigned char *)(v3 + 192) = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void *)(v3 + 56);
    uint64_t v7 = sub_10003C848;
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 56);
    swift_release();
    uint64_t v7 = sub_10003C02C;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

void sub_10003C02C()
{
  int v2 = *(unsigned __int8 *)(v1 + 192);
  if (v2 != 2)
  {
    int v12 = v2 & 1;
    if (v12 == DiagnosticLogSubmissionEnabled())
    {
      sub_10000E83C();
      sub_1000170B0();
      __asm { BRAA            X1, X16 }
    }
    if (qword_1000A5FF0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = sub_100007DBC(v13, (uint64_t)qword_1000A7040);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (sub_100016884(v15))
    {
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 67240448;
      *(_DWORD *)(v1 + 184) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 8) = 1026;
      *(_DWORD *)(v1 + 188) = DiagnosticLogSubmissionEnabled();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v0, "DNU status changed (%{BOOL,public}d -> %{BOOL,public}d), resetting clientIDs", (uint8_t *)v16, 0xEu);
      sub_100009474();
    }

    uint64_t v17 = qword_1000AF3A0;
    *(void *)(v1 + 88) = qword_1000AF3A0;
    if (v17)
    {
      swift_retain();
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v1 + 96) = v10;
      *uint64_t v10 = v1;
      uint64_t v11 = sub_10003C2F8;
      goto LABEL_15;
    }
LABEL_22:
    __break(1u);
    return;
  }
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = (void *)sub_100007DBC(v3, (uint64_t)qword_1000A7040);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (sub_10000E918(v5))
  {
    uint64_t v6 = (_WORD *)sub_1000113C8();
    sub_10003DC90(v6);
    sub_1000094EC((void *)&_mh_execute_header, v7, v8, "resetting clientIDs due to missing lastDNU setting");
    sub_100009474();
  }

  uint64_t v9 = qword_1000AF3A0;
  *(void *)(v1 + 136) = qword_1000AF3A0;
  if (!v9)
  {
    __break(1u);
    goto LABEL_22;
  }
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 144) = v10;
  *uint64_t v10 = v1;
  uint64_t v11 = sub_10003C5A0;
LABEL_15:
  v10[1] = v11;
  sub_1000170B0();
  sub_100040A04();
}

uint64_t sub_10003C2F8()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 56);
    uint64_t v8 = sub_10003C9A8;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 56);
    swift_release();
    uint64_t v8 = sub_10003C3EC;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_10003C3EC()
{
  sub_1000094A8();
  uint64_t v1 = qword_1000AF3A0;
  *(void *)(v0 + 112) = qword_1000AF3A0;
  if (v1)
  {
    swift_retain();
    DiagnosticLogSubmissionEnabled();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10003C49C;
    sub_100040B50();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003C49C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 56);
    return _swift_task_switch(sub_10003CB08, v7, 0);
  }
  else
  {
    swift_release();
    sub_10000E83C();
    return v8();
  }
}

uint64_t sub_10003C5A0()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 56);
    uint64_t v8 = sub_10003CC68;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 56);
    swift_release();
    uint64_t v8 = sub_10003C694;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_10003C694()
{
  sub_1000094A8();
  uint64_t v1 = qword_1000AF3A0;
  *(void *)(v0 + 160) = qword_1000AF3A0;
  if (v1)
  {
    swift_retain();
    DiagnosticLogSubmissionEnabled();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10003C744;
    sub_100040B50();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003C744()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 56);
    return _swift_task_switch(sub_10003CDC8, v7, 0);
  }
  else
  {
    swift_release();
    sub_10000E83C();
    return v8();
  }
}

uint64_t sub_10003C848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100013FC4();
  sub_100007DB0();
  swift_release();
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10001A69C(v14, (uint64_t)qword_1000A7040);
  swift_errorRetain();
  os_log_type_t v15 = (void *)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (sub_10003DC40(v16))
  {
    sub_100015F54();
    sub_1000094B4();
    sub_1000162D4();
    sub_1000161B4(4.8751e-34);
    uint64_t v17 = sub_100017660();
    uint64_t v21 = sub_10003DC5C(v17, v18, v19, v20);
    sub_10001708C(v21);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001420C((void *)&_mh_execute_header, v22, v23, "failed to check last DNU setting: %{public}s");
    sub_100013FF0();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000E83C();
  sub_100016650();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10003C9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100013FC4();
  sub_100007DB0();
  swift_release();
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10001A69C(v14, (uint64_t)qword_1000A7040);
  swift_errorRetain();
  os_log_type_t v15 = (void *)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (sub_10003DC40(v16))
  {
    sub_100015F54();
    sub_1000094B4();
    sub_1000162D4();
    sub_1000161B4(4.8751e-34);
    uint64_t v17 = sub_100017660();
    uint64_t v21 = sub_10003DC5C(v17, v18, v19, v20);
    sub_10001708C(v21);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001420C((void *)&_mh_execute_header, v22, v23, "failed to check last DNU setting: %{public}s");
    sub_100013FF0();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000E83C();
  sub_100016650();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10003CB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100013FC4();
  sub_100007DB0();
  swift_release();
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10001A69C(v14, (uint64_t)qword_1000A7040);
  swift_errorRetain();
  os_log_type_t v15 = (void *)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (sub_10003DC40(v16))
  {
    sub_100015F54();
    sub_1000094B4();
    sub_1000162D4();
    sub_1000161B4(4.8751e-34);
    uint64_t v17 = sub_100017660();
    uint64_t v21 = sub_10003DC5C(v17, v18, v19, v20);
    sub_10001708C(v21);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001420C((void *)&_mh_execute_header, v22, v23, "failed to check last DNU setting: %{public}s");
    sub_100013FF0();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000E83C();
  sub_100016650();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10003CC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100013FC4();
  sub_100007DB0();
  swift_release();
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10001A69C(v14, (uint64_t)qword_1000A7040);
  swift_errorRetain();
  os_log_type_t v15 = (void *)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (sub_10003DC40(v16))
  {
    sub_100015F54();
    sub_1000094B4();
    sub_1000162D4();
    sub_1000161B4(4.8751e-34);
    uint64_t v17 = sub_100017660();
    uint64_t v21 = sub_10003DC5C(v17, v18, v19, v20);
    sub_10001708C(v21);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001420C((void *)&_mh_execute_header, v22, v23, "failed to check last DNU setting: %{public}s");
    sub_100013FF0();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000E83C();
  sub_100016650();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10003CDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100013FC4();
  sub_100007DB0();
  swift_release();
  if (qword_1000A5FF0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10001A69C(v14, (uint64_t)qword_1000A7040);
  swift_errorRetain();
  os_log_type_t v15 = (void *)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (sub_10003DC40(v16))
  {
    sub_100015F54();
    sub_1000094B4();
    sub_1000162D4();
    sub_1000161B4(4.8751e-34);
    uint64_t v17 = sub_100017660();
    uint64_t v21 = sub_10003DC5C(v17, v18, v19, v20);
    sub_10001708C(v21);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001420C((void *)&_mh_execute_header, v22, v23, "failed to check last DNU setting: %{public}s");
    sub_100013FF0();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000E83C();
  sub_100016650();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10003CF28()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10003CF78()
{
  sub_10003CF28();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SessionCoordinator()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for SessionHierarchyItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SessionHierarchyItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SessionHierarchyItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionHierarchyItem(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionHierarchyItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionHierarchyItem()
{
  return &type metadata for SessionHierarchyItem;
}

uint64_t sub_10003D118(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    sub_10001B294();
    uint64_t v14 = *(void *)(*(void *)(a4 + 16) + 16);
    sub_10001B234(v14);
    uint64_t v15 = *(void *)(a4 + 16);
    *(void *)(v15 + 16) = v14 + 1;
    os_log_type_t v16 = (void *)(v15 + 32 * v14);
    void v16[4] = v7;
    v16[5] = v9;
    v16[6] = v11;
    v16[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003D220(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A8490);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003D280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003D2E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CachedSession(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003D340(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003D3A4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10003D3EC()
{
  sub_100011564();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100015EF4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000D9FC;
  sub_10001AA04();
  sub_1000170B0();
  return sub_10003B48C(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10003D488()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10003D4D0()
{
  sub_100011564();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100015EF4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000D9FC;
  sub_10001AA04();
  sub_1000170B0();
  return sub_10003B36C(v3, v4, v5, v6, v7, v8);
}

void (*sub_10003D56C(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_10003D804(v6);
  v6[10] = sub_10003D680(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10003D618;
}

void sub_10003D618(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(uint64_t))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_10001A454();
  v2(v3);

  free(v1);
}

void (*sub_10003D680(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v12 = sub_100014BA8();
  *((unsigned char *)v10 + 40) = v13 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v12;
  char v18 = v13;
  sub_100016CE0(&qword_1000A78E0);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v16))
  {
    unint64_t v19 = sub_100014BA8();
    if ((v18 & 1) == (v20 & 1))
    {
      unint64_t v17 = v19;
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_5:
  v10[4] = v17;
  if (v18) {
    uint64_t v21 = *(void *)(*(void *)(*v5 + 56) + 8 * v17);
  }
  else {
    uint64_t v21 = 0;
  }
  *uint64_t v10 = v21;
  return sub_10003D7B4;
}

void sub_10003D7B4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_10001AC28(*a1, *((unsigned char *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_10003D804(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_10003D834;
}

uint64_t sub_10003D834(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_10003D840(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (!v4)
  {
    unint64_t v6 = 0;
LABEL_29:
    swift_release();
    return v6;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 120);
  while (1)
  {
    uint64_t result = *(void *)(v3 + v5 + 40);
    if (result == v7 && *(void *)(v3 + v5 + 48) == v8) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
    ++v6;
    v5 += 24;
    if (v4 == v6)
    {
      unint64_t v6 = *(void *)(v3 + 16);
      goto LABEL_29;
    }
  }
  unint64_t v11 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    unint64_t v12 = *(void *)(v3 + 16);
    while (v11 != v12)
    {
      if (v11 >= v12)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      char v13 = (void *)(v3 + v5);
      uint64_t result = *(void *)(v3 + v5 + 64);
      if (result != *(void *)(a2 + 112) || *(void *)(v3 + v5 + 72) != *(void *)(a2 + 120))
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v11 != v6)
          {
            if (v6 >= v12) {
              goto LABEL_32;
            }
            BOOL v15 = (uint64_t *)(v3 + 32 + 24 * v6);
            uint64_t v16 = v15[2];
            uint64_t v24 = v15[1];
            uint64_t v25 = *v15;
            uint64_t v17 = v13[7];
            uint64_t v18 = v13[8];
            uint64_t v19 = v13[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_10003FEDC(v3);
              uint64_t v3 = v23;
            }
            char v20 = (void *)(v3 + 24 * v6);
            v20[4] = v17;
            v20[5] = v18;
            v20[6] = v19;
            uint64_t result = swift_bridgeObjectRelease();
            if (v11 >= *(void *)(v3 + 16)) {
              goto LABEL_33;
            }
            uint64_t v21 = (void *)(v3 + v5);
            v21[7] = v25;
            v21[8] = v24;
            v21[9] = v16;
            uint64_t result = swift_bridgeObjectRelease();
            *a1 = v3;
          }
          if (__OFADD__(v6++, 1)) {
            goto LABEL_31;
          }
        }
      }
      ++v11;
      unint64_t v12 = *(void *)(v3 + 16);
      v5 += 24;
    }
    goto LABEL_29;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10003DA1C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003DA54()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003DA64(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003DAAC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003DAE4(uint64_t a1)
{
  return sub_10003AB94(a1, *(void *)(v1 + 16));
}

uint64_t sub_10003DAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A67F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003DB54()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003DB94()
{
  sub_1000113BC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100015EF4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10001B7E0;
  return sub_10003AD2C();
}

BOOL sub_10003DC40(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10003DC5C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return sub_10001227C(a1, a2, (uint64_t *)va);
}

BOOL sub_10003DC74(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

_WORD *sub_10003DC90(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_10003DC9C()
{
  return 0;
}

uint64_t sub_10003DCB0()
{
  sub_100016CE0(&qword_1000A7350);
  uint64_t v0 = sub_100016CE0(&qword_1000A7358);
  uint64_t v1 = *(void *)(*(void *)(v0 - 8) + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 - 8) + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100086570;
  unint64_t v4 = v3 + v2;
  uint64_t v5 = (unsigned char *)(v3 + v2 + *(int *)(v0 + 48));
  *(void *)(v3 + v2) = XPC_ACTIVITY_REPEATING;
  unsigned char *v5 = 1;
  type metadata accessor for XPCObject();
  swift_storeEnumTagMultiPayload();
  unint64_t v6 = (void *)(v4 + v1 + *(int *)(v0 + 48));
  *(void *)(v4 + v1) = XPC_ACTIVITY_DELAY;
  *unint64_t v6 = 86400;
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (const char **)(v4 + 2 * v1);
  uint64_t v8 = (const char **)((char *)v7 + *(int *)(v0 + 48));
  *uint64_t v7 = XPC_ACTIVITY_GRACE_PERIOD;
  *uint64_t v8 = 43200;
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = (const char **)(v4 + 3 * v1);
  uint64_t v10 = (uint64_t *)((char *)v9 + *(int *)(v0 + 48));
  *uint64_t v9 = XPC_ACTIVITY_PRIORITY;
  *uint64_t v10 = String.init(cString:)();
  v10[1] = v11;
  swift_storeEnumTagMultiPayload();
  unint64_t v12 = (const char **)(v4 + 4 * v1);
  char v13 = (char *)v12 + *(int *)(v0 + 48);
  *unint64_t v12 = XPC_ACTIVITY_ALLOW_BATTERY;
  *char v13 = 0;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v15 = (void *)(v4 + 5 * v1);
  uint64_t v16 = (char *)v15 + *(int *)(v0 + 48);
  *BOOL v15 = XPC_ACTIVITY_POWER_NAP;
  *uint64_t v16 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v17 = (void *)(v4 + 6 * v1);
  uint64_t v18 = (void *)((char *)v17 + *(int *)(v0 + 48));
  *uint64_t v17 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  void *v18 = 43200;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v19 = (void *)(v4 - v1 + 8 * v1);
  char v20 = (char *)v19 + *(int *)(v0 + 48);
  *uint64_t v19 = XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  unsigned char *v20 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v21 = (void *)(v4 + 8 * v1);
  uint64_t v22 = (char *)v21 + *(int *)(v0 + 48);
  *uint64_t v21 = XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  unsigned char *v22 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v23 = (void *)(v4 + 9 * v1);
  uint64_t v24 = (void *)((char *)v23 + *(int *)(v0 + 48));
  *uint64_t v23 = XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE;
  *uint64_t v24 = 0x100000;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v25 = (void *)(v4 + 10 * v1);
  uint64_t v26 = (void *)((char *)v25 + *(int *)(v0 + 48));
  *uint64_t v25 = XPC_ACTIVITY_EXPECTED_DURATION;
  int64_t *v26 = XPC_ACTIVITY_INTERVAL_1_MIN;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v27 = (void *)(v4 + 11 * v1);
  uint64_t v28 = (void *)((char *)v27 + *(int *)(v0 + 48));
  *uint64_t v27 = XPC_ACTIVITY_GROUP_NAME;
  *uint64_t v28 = 0xD00000000000001DLL;
  v28[1] = 0x8000000100089C20;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
    uint64_t v29 = (void *)(v4 + 12 * v1);
    uint64_t v30 = (void *)((char *)v29 + *(int *)(v0 + 48));
    *uint64_t v29 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
    void *v30 = 1;
    swift_storeEnumTagMultiPayload();
    sub_100016CE0(&qword_1000A7360);
    sub_10003E2CC();
    uint64_t result = Dictionary.init(dictionaryLiteral:)();
    qword_1000AF2E0 = result;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t *sub_10003E0AC()
{
  if (qword_1000A5FF8 != -1) {
    swift_once();
  }
  return &qword_1000AF2E0;
}

uint64_t sub_10003E0F8()
{
  return sub_10003E320(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003E12C()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for RefreshStorebagsActivity()
{
  return self;
}

uint64_t sub_10003E180()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10002EAC8;
  return sub_10003E0F8();
}

uint64_t sub_10003E20C()
{
  sub_10003E0AC();

  return swift_bridgeObjectRetain();
}

unint64_t sub_10003E23C()
{
  return 0xD000000000000011;
}

unint64_t sub_10003E258(uint64_t a1)
{
  unint64_t result = sub_10003E280();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003E280()
{
  unint64_t result = qword_1000A7348;
  if (!qword_1000A7348)
  {
    type metadata accessor for RefreshStorebagsActivity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7348);
  }
  return result;
}

unint64_t sub_10003E2CC()
{
  unint64_t result = qword_1000A7368;
  if (!qword_1000A7368)
  {
    sub_1000286C8(&qword_1000A7360);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7368);
  }
  return result;
}

uint64_t sub_10003E320(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10003E328()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000A7370);
  sub_100012884(v0, (uint64_t)qword_1000A7370);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10003E3B0(uint64_t a1)
{
  swift_beginAccess();
  swift_unknownObjectRetain();
  uint64_t result = sub_10003FD54(v1 + 112, a1);
  uint64_t v4 = *(void *)(*(void *)(v1 + 112) + 16);
  if (v4 < result)
  {
    __break(1u);
  }
  else
  {
    sub_10004000C(result, v4);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_10003E43C(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  return _swift_task_switch(sub_10003E484, v1, 0);
}

uint64_t sub_10003E484()
{
  sub_10001422C();
  uint64_t v1 = v0[6];
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 112) + 16))
  {
    uint64_t v3 = v0[6];
    uint64_t v4 = v0[7];
    uint64_t v5 = v0[5];
    sub_10003FD0C(&qword_1000A7478, v2, (void (*)(uint64_t))type metadata accessor for BackendGroup);
    unint64_t v6 = (void *)swift_task_alloc();
    v0[8] = v6;
    _OWORD v6[2] = v3;
    v6[3] = v5;
    v6[4] = v4;
    uint64_t v7 = (void *)swift_task_alloc();
    v0[9] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10003E634;
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
    sub_10003F8A8();
    swift_allocError();
    swift_willThrow();
    sub_10000E83C();
    return v8();
  }
}

uint64_t sub_10003E634()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *v0;
  sub_100015EE4();
  void *v4 = v3;
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100019BEC, v2, 0);
}

uint64_t sub_10003E730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  sub_100016CE0((uint64_t *)&unk_1000A83E0);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  return _swift_task_switch(sub_10003E7DC, a3, 0);
}

uint64_t sub_10003E7DC()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v27 = *(void *)(v3 + 16);
  if (v27)
  {
    uint64_t v4 = type metadata accessor for TaskPriority();
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v26 = v4;
    uint64_t v25 = v3;
    do
    {
      uint64_t v7 = *(void *)(v0 + 128);
      uint64_t v6 = *(void *)(v0 + 136);
      uint64_t v9 = *(void *)(v0 + 112);
      uint64_t v8 = *(void *)(v0 + 120);
      uint64_t v10 = *(void *)(v0 + 104);
      long long v28 = *(_OWORD *)(v3 + 16 * v5 + 32);
      _s10RTCUtility9XPCObjectOwst_0(v6, 1, 1, v4);
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      *(_OWORD *)(v11 + 32) = v28;
      *(void *)(v11 + 48) = v9;
      *(void *)(v11 + 56) = v10;
      *(void *)(v11 + 64) = v8;
      sub_10003FBBC(v6, v7);
      LODWORD(v7) = _s10RTCUtility9XPCObjectOwet_0(v7, 1, v4);
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v12 = *(void *)(v0 + 128);
      if (v7 == 1)
      {
        sub_1000115C4(*(void *)(v0 + 128), (uint64_t *)&unk_1000A83E0);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v12, v4);
      }
      if (*(void *)(v11 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v15 = v14;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v3 = v25;
      uint64_t v16 = **(void **)(v0 + 96);
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = &unk_1000A74A8;
      *(void *)(v17 + 24) = v11;
      uint64_t v18 = v15 | v13;
      if (v15 | v13)
      {
        uint64_t v18 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v13;
        *(void *)(v0 + 40) = v15;
      }
      ++v5;
      uint64_t v19 = *(void *)(v0 + 136);
      *(void *)(v0 + 72) = 1;
      *(void *)(v0 + 80) = v18;
      *(void *)(v0 + 88) = v16;
      swift_task_create();
      swift_unknownObjectRelease();
      swift_release();
      sub_1000115C4(v19, (uint64_t *)&unk_1000A83E0);
      uint64_t v4 = v26;
    }
    while (v27 != v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = *(void *)(v0 + 104);
  uint64_t v21 = sub_10003FD0C(&qword_1000A7478, v2, (void (*)(uint64_t))type metadata accessor for BackendGroup);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v22;
  uint64_t v23 = sub_100016CE0(&qword_1000A74B8);
  void *v22 = v0;
  v22[1] = sub_10003EB68;
  return TaskGroup.awaitAllRemainingTasks(isolation:)(v20, v21, v23);
}

uint64_t sub_10003EB68()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v3();
}

uint64_t sub_10003EC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[15] = a5;
  v7[16] = a7;
  v7[14] = a4;
  sub_100016CE0(&qword_1000A74C0);
  v7[17] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CocoaError();
  v7[18] = v10;
  v7[19] = *(void *)(v10 - 8);
  v7[20] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URLError.Code();
  v7[21] = v11;
  v7[22] = *(void *)(v11 - 8);
  v7[23] = swift_task_alloc();
  v7[24] = swift_task_alloc();
  sub_100016CE0(&qword_1000A74C8);
  v7[25] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for URLError();
  v7[26] = v12;
  v7[27] = *(void *)(v12 - 8);
  v7[28] = swift_task_alloc();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 24) + **(int **)(a5 + 24));
  uint64_t v14 = (void *)swift_task_alloc();
  v7[29] = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_10003EF00;
  return v16(a6, ObjectType, a5);
}

uint64_t sub_10003EF00()
{
  sub_10001422C();
  sub_100017D58();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100015EE4();
  void *v5 = v4;
  *(void *)(v3 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10003F154, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    return v6();
  }
}

uint64_t sub_10003F058()
{
  sub_1000094A8();
  sub_10003E3B0(*(void *)(v0 + 112));
  return _swift_task_switch(sub_10003F0C0, 0, 0);
}

uint64_t sub_10003F0C0()
{
  sub_10001422C();
  swift_errorRelease();
  sub_100019C04();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v0();
}

uint64_t sub_10003F154()
{
  uint64_t v33 = v0;
  *(void *)(v0 + 80) = *(void *)(v0 + 240);
  swift_errorRetain();
  sub_100016CE0(&qword_1000A67E8);
  if (swift_dynamicCast())
  {
    uint64_t v2 = *(void *)(v0 + 152);
    uint64_t v1 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 136);
    uint64_t v3 = *(void *)(v0 + 144);
    _s10RTCUtility9XPCObjectOwst_0(v4, 0, 1, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v4, v3);
    LOBYTE(v4) = CocoaError.isCoderError.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    if (v4) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 136);
    _s10RTCUtility9XPCObjectOwst_0(v5, 1, 1, *(void *)(v0 + 144));
    sub_1000115C4(v5, &qword_1000A74C0);
  }
  *(void *)(v0 + 56) = *(void *)(v0 + 240);
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v31 = v7;
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v28 = *(void *)(v0 + 184);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 176);
    _s10RTCUtility9XPCObjectOwst_0(v8, 0, 1, v9);
    uint64_t v30 = v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v6, v8, v9);
    sub_10003FD0C(&qword_1000A74D0, 255, (void (*)(uint64_t))&type metadata accessor for URLError);
    _BridgedStoredNSError.code.getter();
    static URLError.Code.cancelled.getter();
    sub_10003FD0C(&qword_1000A74D8, 255, (void (*)(uint64_t))&type metadata accessor for URLError.Code);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v14 = *(void *)(v0 + 96);
    uint64_t v13 = *(void *)(v0 + 104);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v28, v12);
    v15(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v9);
    if (v14 == v13)
    {
LABEL_7:
      swift_errorRelease();
      sub_100019C04();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000E83C();
      return v16();
    }
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 200);
    _s10RTCUtility9XPCObjectOwst_0(v18, 1, 1, *(void *)(v0 + 208));
    sub_1000115C4(v18, &qword_1000A74C8);
  }
  if (qword_1000A6000 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100012884(v19, (uint64_t)qword_1000A7370);
  swift_errorRetain();
  swift_unknownObjectRetain();
  swift_errorRetain();
  swift_unknownObjectRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    long long v29 = *(_OWORD *)(v0 + 112);
    uint64_t v22 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136446466;
    *(_OWORD *)(v0 + 40) = v29;
    swift_unknownObjectRetain();
    sub_100016CE0(&qword_1000A64D0);
    uint64_t v23 = String.init<A>(describing:)();
    *(void *)(v0 + 64) = sub_10001227C(v23, v24, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v25 = Error.localizedDescription.getter();
    *(void *)(v0 + 88) = sub_10001227C(v25, v26, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "disabling backend '%{public}s' which returned error: %{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_unknownObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v27 = *(void *)(v0 + 128);
  return _swift_task_switch(sub_10003F058, v27, 0);
}

uint64_t sub_10003F700()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BackendGroup()
{
  return self;
}

uint64_t sub_10003F75C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000D9FC;
  return sub_10003E43C(a1);
}

uint64_t sub_10003F7F0()
{
  sub_10001422C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)sub_100015EF4(v8);
  *uint64_t v9 = v10;
  v9[1] = sub_10000D9FC;
  return sub_10003E730(v4, v2, v5, v6, v7);
}

unint64_t sub_10003F8A8()
{
  unint64_t result = qword_1000A7490;
  if (!qword_1000A7490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000A7490);
  }
  return result;
}

uint64_t sub_10003F8F4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10003F9D0;
  return v6(a1);
}

uint64_t sub_10003F9D0()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_10003FA98()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10003FAE8(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)sub_100015EF4(v9);
  *uint64_t v10 = v11;
  v10[1] = sub_10001B7E0;
  return sub_10003EC60(a1, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10003FBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003FC24()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003FC5C(uint64_t a1)
{
  uint64_t v3 = *(int **)(v1 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100015EF4(v4);
  void *v5 = v6;
  v5[1] = sub_10000D9FC;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000A74A0 + dword_1000A74A0);
  return v7(a1, v3);
}

uint64_t sub_10003FD0C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003FD54(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)result;
  unint64_t v4 = *(void *)(*(void *)result + 16);
  if (!v4)
  {
    unint64_t v7 = 0;
LABEL_7:
    swift_unknownObjectRelease();
    return v7;
  }
  uint64_t v5 = (void *)result;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  while (*(void *)(v3 + v6 + 32) != a2)
  {
    ++v7;
    v6 += 16;
    if (v4 == v7)
    {
      unint64_t v7 = *(void *)(*(void *)result + 16);
      goto LABEL_7;
    }
  }
  unint64_t v8 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    while (v8 != v4)
    {
      if (v8 >= v4)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v9 = *(void *)(v3 + v6 + 48);
      if (v9 != a2)
      {
        if (v8 != v7)
        {
          if (v7 >= v4) {
            goto LABEL_23;
          }
          uint64_t v10 = *(void *)(v3 + v6 + 56);
          long long v14 = *(_OWORD *)(v3 + 32 + 16 * v7);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10003FEF0();
            uint64_t v3 = v13;
          }
          uint64_t v11 = v3 + 16 * v7;
          *(void *)(v11 + 32) = v9;
          *(void *)(v11 + 40) = v10;
          uint64_t result = swift_unknownObjectRelease();
          if (v8 >= *(void *)(v3 + 16)) {
            goto LABEL_24;
          }
          *(_OWORD *)(v3 + v6 + 48) = v14;
          uint64_t result = swift_unknownObjectRelease();
          void *v5 = v3;
        }
        if (__OFADD__(v7++, 1)) {
          goto LABEL_22;
        }
        unint64_t v4 = *(void *)(v3 + 16);
      }
      ++v8;
      v6 += 16;
    }
    goto LABEL_7;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10003FEC8(uint64_t a1)
{
  return sub_10001EB04(0, *(void *)(a1 + 16), 0, a1);
}

void sub_10003FEDC(uint64_t a1)
{
}

void sub_10003FEF0()
{
}

uint64_t sub_10003FF04(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      uint64_t v11 = v5 + v8;
    }
    else {
      uint64_t v11 = v5;
    }
    sub_10000565C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    uint64_t v4 = v12;
  }
  uint64_t v13 = (char *)(v4 + 32 + 24 * v6);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(v4 + 16);
  if (__OFSUB__(v14, a2)) {
    goto LABEL_22;
  }
  uint64_t result = (uint64_t)sub_100070E70((char *)(v4 + 32 + 24 * a2), v14 - a2, v13);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v16 = __OFADD__(v15, v8);
  uint64_t v17 = v15 - v7;
  if (!v16)
  {
    *(void *)(v4 + 16) = v17;
LABEL_16:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10004000C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_10001ED64();
    uint64_t v4 = v9;
  }
  uint64_t v10 = (char *)(v4 + 32 + 16 * v6);
  sub_100016CE0(&qword_1000A64D0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  uint64_t result = (uint64_t)sub_100070B68((char *)(v4 + 32 + 16 * a2), v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + 16) = v14;
LABEL_13:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for BackendGroup.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000401B0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackendGroup.Error()
{
  return &type metadata for BackendGroup.Error;
}

unint64_t sub_1000401EC()
{
  unint64_t result = qword_1000A74E0;
  if (!qword_1000A74E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A74E0);
  }
  return result;
}

uint64_t sub_100040238(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (*(unsigned char *)(v3 + 24) == 1)
  {
    sub_10001E280();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + 8) = 0xD00000000000001DLL;
    *(void *)(v5 + 16) = 0x8000000100088DC0;
    return swift_willThrow();
  }
  else
  {
    uint64_t result = sub_10000F6DC();
    if (!v4)
    {
      a3();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100040304(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  type metadata accessor for SQLiteDB.Transaction();
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = v1;
  swift_retain();
  sub_10001DA6C();
  if (v2) {
    return swift_release();
  }
  a1(&v6, v4);
  if ((*(unsigned char *)(v4 + 24) & 1) == 0) {
    sub_10001DA6C();
  }
  swift_release();
  return v6;
}

uint64_t sub_10004040C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100019308((uint64_t)sub_100040428, v1);
}

uint64_t sub_100040428()
{
  sub_1000094A8();
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 112);
  swift_retain();
  uint64_t v1 = sub_100017490();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100040490()
{
  sub_1000113BC();
  sub_100009448();
  unint64_t v0 = sub_1000144E8(163);
  sub_10001DDEC(v0, v1, v2, v3);
  sub_1000113E0();
  return v4();
}

uint64_t sub_100040518()
{
  *(void *)(v1 + 56) = v0;
  return sub_100019308((uint64_t)sub_100040534, v0);
}

uint64_t sub_100040534()
{
  uint64_t v1 = *(void *)(v0[7] + 112);
  v0[8] = v1;
  v0[9] = 0;
  return sub_100019308((uint64_t)sub_100040554, v1);
}

uint64_t sub_100040554()
{
  sub_10001422C();
  uint64_t v2 = *(void *)(v1 + 72);
  type metadata accessor for SQLiteDB.Transaction();
  uint64_t inited = swift_initStackObject();
  sub_1000448C4(inited);
  sub_10001AA28();
  if (v2)
  {
    swift_release();
    sub_100015F80();
    goto LABEL_4;
  }
  sub_100042F88(v0, (uint64_t *)(v1 + 48));
  if ((*(unsigned char *)(v0 + 24) & 1) == 0) {
    sub_1000448A0();
  }
  swift_release();
  if (*(void *)(v1 + 48) != 5)
  {
    sub_100013FE0();
LABEL_4:
    sub_10001400C();
    __asm { BRAA            X1, X16 }
  }
  *(void *)(v1 + 72) = 0;
  sub_10001400C();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100040664(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100019308((uint64_t)sub_100040680, v1);
}

uint64_t sub_100040680()
{
  sub_1000094A8();
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 112);
  swift_retain();
  uint64_t v1 = sub_100017490();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000406E8()
{
  sub_1000113BC();
  sub_100009448();
  unint64_t v0 = sub_1000144E8(155);
  sub_10001DDEC(v0, v1, v2, v3);
  sub_1000113E0();
  return v4();
}

uint64_t sub_100040770()
{
  sub_1000094A8();
  *(void *)(v1 + 24) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000407FC;
  uint64_t v3 = sub_10001516C();
  return sub_1000422E8(v3, v4);
}

uint64_t sub_1000407FC()
{
  sub_1000113BC();
  uint64_t v3 = v2;
  sub_100017D58();
  uint64_t v5 = v4;
  sub_10001653C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100015EE4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(void *)(v5 + 24);
    return _swift_task_switch(sub_100040918, v9, 0);
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(BOOL))(v7 + 8);
    return v10(v3 != 0);
  }
}

uint64_t sub_100040918()
{
  sub_1000094A8();
  *(void *)(v0 + 16) = *(void *)(v0 + 40);
  swift_errorRetain();
  sub_100016CE0(&qword_1000A67E8);
  if (!swift_dynamicCast() || *(unsigned char *)(v0 + 48))
  {
    swift_errorRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    sub_1000113E0();
    return v1(2);
  }
}

uint64_t sub_100040A04()
{
  *(void *)(v1 + 56) = v0;
  return sub_100019308((uint64_t)sub_100040A20, v0);
}

uint64_t sub_100040A20()
{
  uint64_t v1 = *(void *)(v0[7] + 112);
  v0[8] = v1;
  v0[9] = 0;
  return sub_100019308((uint64_t)sub_100040A40, v1);
}

uint64_t sub_100040A40()
{
  sub_10001422C();
  uint64_t v2 = *(void *)(v1 + 72);
  type metadata accessor for SQLiteDB.Transaction();
  uint64_t inited = swift_initStackObject();
  sub_1000448C4(inited);
  sub_10001AA28();
  if (v2)
  {
    swift_release();
    sub_100015F80();
    goto LABEL_4;
  }
  sub_100044224(v0, (uint64_t *)(v1 + 48));
  if ((*(unsigned char *)(v0 + 24) & 1) == 0) {
    sub_1000448A0();
  }
  swift_release();
  if (*(void *)(v1 + 48) != 50)
  {
    sub_100013FE0();
LABEL_4:
    sub_10001400C();
    __asm { BRAA            X1, X16 }
  }
  *(void *)(v1 + 72) = 0;
  sub_10001400C();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100040B50()
{
  sub_1000094A8();
  uint64_t v2 = v1 & 1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10000D9FC;
  uint64_t v4 = sub_10001516C();
  return sub_1000425E8(v4, v5, v2);
}

uint64_t sub_100040BE0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v45 = type metadata accessor for URLResourceValues();
  sub_100014C1C();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100016CE0(&qword_1000A6A70);
  uint64_t v10 = sub_100009374(v9);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  sub_100014C1C();
  uint64_t v15 = v14;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  if ((a1 & 1) == 0)
  {
    uint64_t v41 = a2;
    uint64_t v42 = v6;
    id v43 = [self defaultManager];
    uint64_t v20 = NSHomeDirectory();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(fileURLWithPath:isDirectory:)();
    swift_bridgeObjectRelease();
    sub_100009448();
    URL.appendingPathComponent(_:isDirectory:)();
    os_log_type_t v21 = *(void (**)(char *, uint64_t))(v15 + 8);
    v21(v19, v13);
    sub_100016CE0(&qword_1000A6A78);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100084C90;
    *(void *)(inited + 32) = NSURLIsDirectoryKey;
    uint64_t v23 = NSURLIsDirectoryKey;
    sub_10007F294(inited);
    URL.resourceValues(forKeys:)();
    if (v2)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v12, 1, 1, v45);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = v45;
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v12, 0, 1, v45);
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v12, 1, v26) != 1)
      {
        char v36 = URLResourceValues.isDirectory.getter();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v26);
        uint64_t v28 = v43;
        if (v36)
        {
LABEL_11:
          uint64_t v39 = v41;
          URL.appendingPathComponent(_:isDirectory:)();

          uint64_t v40 = sub_100017FF0();
          ((void (*)(uint64_t))v21)(v40);
          uint64_t v24 = v39;
          uint64_t v25 = 0;
          return _s10RTCUtility9XPCObjectOwst_0(v24, v25, 1, v13);
        }
LABEL_7:
        URL._bridgeToObjectiveC()(v27);
        uint64_t v30 = v29;
        id v46 = 0;
        unsigned int v31 = [v28 createDirectoryAtURL:v29 withIntermediateDirectories:1 attributes:0 error:&v46];

        if (!v31)
        {
          id v33 = v46;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          uint64_t v34 = sub_100017FF0();
          return ((uint64_t (*)(uint64_t))v21)(v34);
        }
        id v32 = v46;
        URLResourceValues.init()();
        URLResourceValues.isExcludedFromBackup.setter();
        URL.setResourceValues(_:)();
        uint64_t v37 = sub_10001A8E8();
        v38(v37);
        goto LABEL_11;
      }
    }
    sub_10004459C((uint64_t)v12);
    uint64_t v28 = v43;
    goto LABEL_7;
  }
  uint64_t v24 = a2;
  uint64_t v25 = 1;
  return _s10RTCUtility9XPCObjectOwst_0(v24, v25, 1, v13);
}

BOOL sub_100041028(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100041038(uint64_t a1, char a2)
{
}

Swift::Int sub_100041060(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000410A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100041028(*a1, *a2);
}

Swift::Int sub_1000410B4()
{
  return sub_100041060(*v0);
}

void sub_1000410BC(uint64_t a1)
{
  sub_100041038(a1, *v1);
}

uint64_t sub_1000410C4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000A74E8);
  sub_100012884(v0, (uint64_t)qword_1000A74E8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100041148()
{
  if (qword_1000A6080 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8) {
    return 0x140000000;
  }
  else {
    return 3221225472;
  }
}

uint64_t sub_1000411A8(char a1)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 88) = v1;
  uint64_t v4 = (void *)(v2 + 88);
  char v61 = a1 & 1;
  uint64_t v5 = sub_100016CE0(&qword_1000A6A70);
  sub_100009374(v5);
  uint64_t v6 = swift_task_alloc();
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for URL();
  sub_100014C1C();
  uint64_t v60 = v8;
  uint64_t v9 = swift_task_alloc();
  v4[2] = v9;
  uint64_t v10 = type metadata accessor for SQLiteDB.Location();
  sub_100009374(v10);
  uint64_t v11 = swift_task_alloc();
  v4[3] = v11;
  uint64_t v12 = swift_task_alloc();
  v4[4] = v12;
  uint64_t v13 = swift_task_alloc();
  v4[5] = v13;
  swift_defaultActor_initialize();
  sub_100040BE0(v61, v13);
  uint64_t v59 = (uint64_t)v4;
  uint64_t v62 = v1;
  sub_1000445FC(v13, v12, (void (*)(void))type metadata accessor for SQLiteDB.Location);
  if (_s10RTCUtility9XPCObjectOwet_0(v12, 1, v7) == 1)
  {
    sub_10004465C(v12, (void (*)(void))type metadata accessor for SQLiteDB.Location);
    uint64_t v14 = v1;
    uint64_t v15 = v3;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32))(v9, v12, v7);
  sub_100016CE0(&qword_1000A6A78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084C90;
  *(void *)(inited + 32) = NSURLFileSizeKey;
  uint64_t v17 = NSURLFileSizeKey;
  sub_10007F294(inited);
  URL.resourceValues(forKeys:)();
  uint64_t v15 = v3;
  swift_bridgeObjectRelease();
  uint64_t v18 = type metadata accessor for URLResourceValues();
  _s10RTCUtility9XPCObjectOwst_0(v6, 0, 1, v18);
  if (_s10RTCUtility9XPCObjectOwet_0(v6, 1, v18) == 1)
  {
    sub_10004459C(v6);
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v9, v7);
LABEL_6:
    uint64_t v14 = v62;
LABEL_7:
    sub_1000445FC(v13, v11, (void (*)(void))type metadata accessor for SQLiteDB.Location);
    type metadata accessor for SQLiteDB();
    swift_allocObject();
    *(void *)(v14 + 112) = sub_10001DB4C(v11);
    os_log_type_t v21 = (void *)swift_task_alloc();
    *(void *)(v15 + 136) = v21;
    *os_log_type_t v21 = v15;
    v21[1] = sub_1000418DC;
    uint64_t v22 = sub_10000950C();
    return sub_100042468(v22, v23);
  }
  uint64_t v24 = URLResourceValues.fileSize.getter();
  char v26 = v25;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v6, v18);
  if (v26) {
    goto LABEL_5;
  }
  uint64_t v27 = sub_100041148();
  if (v27 >= v24)
  {
LABEL_24:
    uint64_t v40 = sub_1000163BC(v27, v28, v29, v30, v31, v32, v33, v34, v58, v59, v9);
    v41(v40);
    goto LABEL_6;
  }
  if (qword_1000A60A0 != -1) {
    swift_once();
  }
  if (byte_1000AF3DA)
  {
    if (qword_1000A6008 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100012884(v35, (uint64_t)qword_1000A74E8);
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    int v38 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 134349312;
      *(void *)(v59 - 16) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 12) = 2050;
      HIDWORD(v58) = v38;
      *(void *)(v59 - 8) = sub_100041148();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v38, "cache size %{public}ld exceeded maximum %{public}ld - cache delete overridden", (uint8_t *)v39, 0x16u);
      sub_100009474();
    }

    goto LABEL_24;
  }
  if (qword_1000A6008 != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  sub_100012884(v42, (uint64_t)qword_1000A74E8);
  id v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 134349312;
    *(void *)(v59 - 32) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 12) = 2050;
    *(void *)(v59 - 24) = sub_100041148();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "cache size %{public}ld exceeded maximum %{public}ld - deleting cache", (uint8_t *)v45, 0x16u);
    sub_100009474();
  }

  sub_10001E318();
  uint64_t v46 = swift_allocError();
  uint64_t v48 = sub_10001A780(v46, v47);
  uint64_t v56 = sub_1000163BC(v48, v49, v50, v51, v52, v53, v54, v55, v58, v59, v9);
  v57(v56);
  sub_10004465C(v13, (void (*)(void))type metadata accessor for SQLiteDB.Location);
  swift_defaultActor_destroy();
  swift_deallocPartialClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v15 + 8);
  return v19();
}

uint64_t sub_1000418DC()
{
  sub_10001422C();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 144) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 88);
  if (v0)
  {
    uint64_t v8 = sub_100041B44;
  }
  else
  {
    *(void *)(v5 + 152) = v3;
    uint64_t v8 = sub_100041A0C;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100041A0C()
{
  sub_10001422C();
  uint64_t v1 = v0[19];
  if (v1 > 5)
  {
    sub_10004465C(v0[16], (void (*)(void))type metadata accessor for SQLiteDB.Location);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000113E0();
    uint64_t v5 = v0[11];
    return v4(v5);
  }
  else
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[20] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100041BDC;
    return sub_100041E2C(v1);
  }
}

uint64_t sub_100041B44()
{
  sub_1000094A8();
  swift_errorRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100041BDC;
  return sub_100041E2C(0);
}

uint64_t sub_100041BDC()
{
  sub_10001422C();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10001653C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  v3[21] = v0;
  swift_task_dealloc();
  if (v0)
  {
    v3[22] = *(void *)(v3[11] + 112);
    swift_retain();
    uint64_t v7 = sub_100017490();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    sub_10004465C(v3[16], (void (*)(void))type metadata accessor for SQLiteDB.Location);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000113E0();
    uint64_t v11 = v3[11];
    return v10(v11);
  }
}

uint64_t sub_100041D54()
{
  sub_10001422C();
  uint64_t v1 = *(void *)(v0 + 128);
  sub_10001D218();
  swift_release();
  swift_willThrow();
  swift_release();
  sub_10004465C(v1, (void (*)(void))type metadata accessor for SQLiteDB.Location);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v2();
}

uint64_t sub_100041E2C(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_100041E4C, v1, 0);
}

uint64_t sub_100041E4C()
{
  sub_1000113BC();
  if (v0[3])
  {
    if (qword_1000A6008 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100012884(v1, (uint64_t)qword_1000A74E8);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "unsupported prior database version - deleting disk cache", v4, 2u);
      sub_100009474();
    }

    sub_10001E318();
    uint64_t v5 = swift_allocError();
    sub_10001A780(v5, v6);
    sub_10000E83C();
    return v7();
  }
  else
  {
    uint64_t v9 = *(void *)(v0[4] + 112);
    v0[5] = v9;
    return _swift_task_switch(sub_100041FBC, v9, 0);
  }
}

uint64_t sub_100041FBC()
{
  sub_1000113BC();
  sub_100009448();
  sub_1000144E8(1174);
  sub_10001DA6C();
  if (v0)
  {
    sub_100015F80();
    return v2();
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v1 + 48) = v4;
    void *v4 = v1;
    v4[1] = sub_1000420A4;
    uint64_t v5 = sub_10000950C();
    return sub_1000425E8(v5, v6, 6);
  }
}

uint64_t sub_1000420A4()
{
  sub_1000113BC();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10001653C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 32);
    return _swift_task_switch(sub_1000421B0, v9, 0);
  }
}

uint64_t sub_1000421B0()
{
  sub_10001422C();
  if (qword_1000A6008 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012884(v1, (uint64_t)qword_1000A74E8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    *(void *)(v0 + 16) = 6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "initialized disk cache with version %lld", v4, 0xCu);
    sub_100009474();
  }

  sub_100013FE0();
  return v5();
}

uint64_t sub_1000422E8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10004230C, v2, 0);
}

uint64_t sub_10004230C()
{
  sub_1000094A8();
  *(void *)(v0 + 40) = *(void *)(*(void *)(v0 + 32) + 112);
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_100017490();
  return _swift_task_switch(v1, v2, v3);
}

void sub_100042374()
{
  sub_10001422C();
  uint64_t v2 = sub_100014238();
  if (v0)
  {
    swift_bridgeObjectRelease();
    sub_100015F80();
    sub_10001400C();
    __asm { BRAA            X1, X16 }
  }
  sub_1000427FC(v2, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(uint64_t))sub_10001D78C);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001A6C8();
  sub_10001400C();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_100042468(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10004248C, v2, 0);
}

uint64_t sub_10004248C()
{
  sub_1000094A8();
  *(void *)(v0 + 40) = *(void *)(*(void *)(v0 + 32) + 112);
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_100017490();
  return _swift_task_switch(v1, v2, v3);
}

void sub_1000424F4()
{
  sub_10001422C();
  uint64_t v2 = sub_100014238();
  if (v0)
  {
    swift_bridgeObjectRelease();
    sub_100015F80();
    sub_10001400C();
    __asm { BRAA            X1, X16 }
  }
  sub_1000427FC(v2, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(uint64_t))sub_10001D7B8);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001A6C8();
  sub_10001400C();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_1000425E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_10004260C, v3, 0);
}

uint64_t sub_10004260C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112);
  *(void *)(v0 + 48) = v1;
  return sub_100019308((uint64_t)sub_10004262C, v1);
}

uint64_t sub_10004262C()
{
  sub_1000113BC();
  sub_100009448();
  uint64_t v2 = sub_100014238();
  if (v0)
  {
    v1[7] = v0;
    uint64_t v3 = v1[5];
    uint64_t v4 = sub_1000426E0;
  }
  else
  {
    sub_1000426FC(v2, v1[2], v1[3], v1[4]);
    swift_release();
    uint64_t v3 = v1[5];
    uint64_t v4 = sub_10004489C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000426E0()
{
  sub_10000E83C();
  return v0();
}

uint64_t sub_1000426FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084CA0;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_10009E600;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 96) = &type metadata for Int64;
  *(void *)(inited + 104) = &off_10009E5C0;
  *(void *)(inited + 72) = a4;
  swift_bridgeObjectRetain();
  sub_10000F264(inited);
  if (v4)
  {
    swift_setDeallocating();
    return sub_10000F200();
  }
  else
  {
    swift_setDeallocating();
    sub_10000F200();
    do
    {
      uint64_t v10 = sub_10000F9A8();
      uint64_t result = swift_release();
    }
    while (v10);
  }
  return result;
}

uint64_t sub_1000427FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084C90;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_10009E600;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  swift_bridgeObjectRetain();
  sub_10000F264(inited);
  swift_setDeallocating();
  if (v4) {
    return sub_10000F200();
  }
  sub_10000F200();
  return a4(a1);
}

uint64_t sub_1000428DC()
{
  sub_1000094A8();
  sub_1000088D0(*(void *)(v0 + 96), *(void *)(v0 + 104));
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_10000E83C();
  return v1();
}

uint64_t sub_100042958(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 56) = a3;
  *(void *)(v4 + 16) = a1;
  return sub_100019308((uint64_t)sub_10004297C, v3);
}

uint64_t sub_10004297C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112);
  *(void *)(v0 + 40) = v1;
  return sub_100019308((uint64_t)sub_100005940, v1);
}

uint64_t sub_10004299C()
{
  sub_10000E83C();
  return v0();
}

uint64_t sub_1000429B8(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return sub_100019308((uint64_t)sub_1000429D8, v2);
}

uint64_t sub_1000429D8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 104) + 112);
  *(void *)(v0 + 112) = v1;
  return sub_100019308((uint64_t)sub_1000429F8, v1);
}

uint64_t sub_1000429F8()
{
  sub_100009448();
  sub_100014238();
  if (v0)
  {
    sub_100015F80();
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v2 = *(void *)(v1 + 96);
    sub_100016CE0(&qword_1000A64B0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100084C90;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = &off_10009E600;
    *(void *)(inited + 32) = v3;
    *(void *)(inited + 40) = v2;
    swift_bridgeObjectRetain();
    sub_10000F264(inited);
    swift_setDeallocating();
    sub_10000F200();
    do
    {
      uint64_t v5 = sub_10000F9A8();
      swift_release();
    }
    while (v5);
    swift_release();
    sub_10000E83C();
  }
  return v6();
}

void *sub_100042B28()
{
  uint64_t v4 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_10000F9A8();
  if (v0) {
    return (void *)swift_bridgeObjectRelease();
  }
  for (uint64_t i = v1; i; uint64_t i = sub_10000F9A8())
  {
    sub_100042BBC(i, (uint64_t *)&v4);
    swift_release();
  }
  return v4;
}

uint64_t sub_100042BBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for CachedSession(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_retain();
  uint64_t v9 = sub_1000055D8(v8, 0);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_1000055D8(v13, 2);
  if (!v15)
  {
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    sub_10001E318();
    swift_allocError();
    *uint64_t v33 = 0;
    return swift_willThrow();
  }
  uint64_t v16 = v15;
  uint64_t v38 = v14;
  uint64_t v39 = v5;
  uint64_t v17 = swift_retain();
  uint64_t v18 = sub_1000055D8(v17, 3);
  if (!v19)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v20 = v19;
  uint64_t v37 = v18;
  uint64_t v21 = swift_retain();
  uint64_t v22 = sub_1000055D8(v21, 4);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v24 = *(sqlite3_stmt **)(a1 + 16);
  uint64_t v35 = v23;
  uint64_t v36 = v22;
  sqlite3_int64 v34 = sqlite3_column_int64(v24, 1);
  double v25 = sqlite3_column_double(v24, 5);
  sqlite3_column_int64(v24, 6);
  int v26 = sub_100049FCC(v34);
  if (v26 == 3) {
    int v27 = 0;
  }
  else {
    int v27 = v26;
  }
  LODWORD(v34) = v27;
  Date.init(timeIntervalSince1970:)();
  *(void *)uint64_t v7 = v38;
  *((void *)v7 + 1) = v16;
  *((void *)v7 + 2) = v37;
  *((void *)v7 + 3) = v20;
  uint64_t v28 = v35;
  *((void *)v7 + 4) = v36;
  *((void *)v7 + 5) = v28;
  *((void *)v7 + 6) = v11;
  *((void *)v7 + 7) = v12;
  *((double *)v7 + 8) = v25;
  v7[72] = v34;
  uint64_t v29 = &v7[*(int *)(v4 + 36)];
  *(_DWORD *)uint64_t v29 = 0;
  v29[4] = 1;
  sub_10004C1D0();
  uint64_t v30 = *(void *)(*a2 + 16);
  sub_10004C200(v30);
  uint64_t v31 = *a2;
  *(void *)(v31 + 16) = v30 + 1;
  sub_1000445FC((uint64_t)v7, v31+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v30, (void (*)(void))type metadata accessor for CachedSession);
  return sub_10004465C((uint64_t)v7, (void (*)(void))type metadata accessor for CachedSession);
}

uint64_t sub_100042E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_100019308((uint64_t)sub_100042E78, v3);
}

uint64_t sub_100042E78()
{
  sub_1000113BC();
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112);
  *(void *)(v0 + 48) = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  return _swift_task_switch(sub_100042EFC, v1, 0);
}

uint64_t sub_100042EFC()
{
  sub_1000113BC();
  sub_100009448();
  unint64_t v0 = sub_1000144E8(154);
  sub_10001DF10(v0, v1, v2, v3, v4, v5);
  sub_1000113E0();
  return v6();
}

uint64_t sub_100042F88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 24) == 1)
  {
    sub_10001E280();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = 1;
    *(void *)(v4 + 8) = 0xD00000000000001DLL;
    *(void *)(v4 + 16) = 0x8000000100088DC0;
    return swift_willThrow();
  }
  else
  {
    uint64_t result = sub_10000F6DC();
    if (!v2)
    {
      do
      {
        uint64_t v6 = sub_10000F9A8();
        swift_release();
      }
      while (v6);
      swift_release();
      uint64_t result = sub_10001D9D4();
      *a2 = result;
    }
  }
  return result;
}

uint64_t sub_100043080(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100019308((uint64_t)sub_10004309C, v1);
}

uint64_t sub_10004309C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 32) = v1;
  return sub_100019308((uint64_t)sub_1000430BC, v1);
}

uint64_t sub_1000430BC()
{
  sub_1000113BC();
  uint64_t v6 = v1;
  sub_100009448();
  sub_100014238();
  if (v0)
  {
    sub_100015F80();
    return v2();
  }
  else
  {
    sub_100043184(*(void *)(v1 + 16), &v5);
    swift_release();
    sub_1000113E0();
    return v4();
  }
}

uint64_t sub_100043184@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084C90;
  *(void *)(inited + 56) = &type metadata for Int;
  *(void *)(inited + 64) = &off_10009E5A0;
  *(void *)(inited + 32) = a1;
  sub_10000F264(inited);
  if (v2)
  {
    swift_setDeallocating();
    return sub_10000F200();
  }
  else
  {
    swift_setDeallocating();
    sub_10000F200();
    uint64_t result = sub_10000F9A8();
    uint64_t v7 = result;
    uint64_t v8 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (!v7)
      {
        *a2 = v8;
        return result;
      }
      uint64_t v9 = *(sqlite3_stmt **)(v7 + 16);
      swift_retain();
      if (!sqlite3_column_text(v9, 0)) {
        break;
      }
      uint64_t v10 = String.init(cString:)();
      uint64_t v12 = v11;
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001E8DC();
        uint64_t v8 = v15;
      }
      unint64_t v13 = v8[2];
      if (v13 >= v8[3] >> 1)
      {
        sub_10001E8DC();
        uint64_t v8 = v16;
      }
      v8[2] = v13 + 1;
      uint64_t v14 = &v8[2 * v13];
      v14[4] = v10;
      v14[5] = v12;
      swift_release();
      uint64_t result = sub_10000F9A8();
      uint64_t v7 = result;
    }
    swift_release();
    sub_10001E318();
    swift_allocError();
    *uint64_t v17 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_10004338C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_100019308((uint64_t)sub_1000433B0, v4);
}

uint64_t sub_1000433B0()
{
  sub_1000094A8();
  *(void *)(v0 + 56) = *(void *)(*(void *)(v0 + 48) + 112);
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_100017490();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10004341C()
{
  sub_1000113BC();
  sub_100009448();
  unint64_t v0 = sub_1000144E8(242);
  sub_10001DD48(v0, v1, v2, v3, v4, v5, v6);
  sub_1000113E0();
  return v7();
}

void *sub_1000434A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100085330;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_10009E600;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 96) = &type metadata for Int64;
  *(void *)(inited + 104) = &off_10009E5C0;
  *(void *)(inited + 72) = a4;
  *(void *)(inited + 136) = &type metadata for Int64;
  *(void *)(inited + 144) = &off_10009E5C0;
  *(void *)(inited + 112) = a5;
  swift_bridgeObjectRetain();
  sub_10000F264(inited);
  swift_setDeallocating();
  if (v6) {
    return (void *)sub_10000F200();
  }
  sub_10000F200();
  uint64_t v15 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_10001D2C4(a1, a2, a3, (uint64_t *)&v15);
  uint64_t result = v15;
  *a6 = v15;
  return result;
}

uint64_t sub_1000435E4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100019308((uint64_t)sub_100043600, v1);
}

uint64_t sub_100043600()
{
  sub_1000094A8();
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 112);
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_100017490();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100043668()
{
  sub_1000113BC();
  sub_10001E070(v0[4], v0[2]);
  v0[5] = 0;
  uint64_t v1 = v0[3];
  return _swift_task_switch(sub_10001B4E4, v1, 0);
}

uint64_t sub_1000436F4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004370C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v14 = *(void *)(a2 + 16);
  if (!v14) {
    return sub_10001D9E4();
  }
  uint64_t v5 = a2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  sub_100009448();
  while (*(unsigned char *)(a1 + 24) != 1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v6);
    uint64_t v9 = v7;
    sub_10000F6DC();
    if (v3) {
      return swift_bridgeObjectRelease();
    }
    sub_100016CE0(&qword_1000A64B0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100084C90;
    *(void *)(inited + 56) = &type metadata for Int64;
    *(void *)(inited + 64) = &off_10009E5C0;
    *(void *)(inited + 32) = v8;
    sub_10000F264(inited);
    ++v6;
    swift_setDeallocating();
    sub_10000F200();
    do
    {
      uint64_t v11 = sub_10000F9A8();
      swift_release();
    }
    while (v11);
    swift_release();
    uint64_t v7 = v9;
    if (v6 == v14)
    {
      swift_bridgeObjectRelease();
      return sub_10001D9E4();
    }
  }
  sub_10001E280();
  swift_allocError();
  *(_DWORD *)uint64_t v13 = 1;
  *(void *)(v13 + 8) = 0xD00000000000001DLL;
  *(void *)(v13 + 16) = 0x8000000100088DC0;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100043904(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100019308((uint64_t)sub_100043920, v1);
}

uint64_t sub_100043920()
{
  sub_1000094A8();
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(v0[3] + 112);
  v0[4] = v2;
  v0[5] = 0;
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  return _swift_task_switch(sub_100043998, v2, 0);
}

uint64_t sub_100043998()
{
  sub_1000113BC();
  uint64_t v1 = v0[5];
  v0[7] = sub_100040304((void (*)(uint64_t *__return_ptr, uint64_t))sub_10004447C);
  v0[8] = v1;
  if (v1)
  {
    uint64_t v2 = v0[3];
    uint64_t v3 = sub_100043AFC;
  }
  else
  {
    uint64_t v4 = v0[3];
    swift_task_dealloc();
    uint64_t v3 = sub_100043A48;
    uint64_t v2 = v4;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100043A48()
{
  sub_1000094A8();
  if (v0[7] == 50)
  {
    v0[5] = v0[8];
    uint64_t v1 = v0[4];
    uint64_t v2 = v0[2];
    uint64_t v3 = swift_task_alloc();
    v0[6] = v3;
    *(void *)(v3 + 16) = v2;
    return _swift_task_switch(sub_100043998, v1, 0);
  }
  else
  {
    sub_100013FE0();
    return v4();
  }
}

uint64_t sub_100043AFC()
{
  sub_1000094A8();
  swift_task_dealloc();
  sub_10000E83C();
  return v0();
}

uint64_t sub_100043B58@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100040238(0xD00000000000003CLL, 0x8000000100089F90, (void (*)(void))sub_100044520);
  uint64_t result = swift_release();
  if (!v2)
  {
    uint64_t result = sub_10001D9D4();
    *a2 = result;
  }
  return result;
}

uint64_t sub_100043CD4()
{
  uint64_t v1 = getTimeIntervalSince1970(Date:)();
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084C90;
  *(void *)(inited + 56) = &type metadata for Int64;
  *(void *)(inited + 64) = &off_10009E5C0;
  *(void *)(inited + 32) = v1;
  sub_10000F264(inited);
  if (v0)
  {
    swift_setDeallocating();
    return sub_10000F200();
  }
  else
  {
    swift_setDeallocating();
    sub_10000F200();
    do
    {
      uint64_t v4 = sub_10000F9A8();
      uint64_t result = swift_release();
    }
    while (v4);
  }
  return result;
}

uint64_t sub_100043DA8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100019308((uint64_t)sub_100043DC8, v2);
}

uint64_t sub_100043DC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112);
  *(void *)(v0 + 40) = v1;
  return sub_100019308((uint64_t)sub_1000059F4, v1);
}

uint64_t sub_100043DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_100019308((uint64_t)sub_100043E0C, v4);
}

uint64_t sub_100043E0C()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void *)(v0[6] + 112);
  v0[7] = v2;
  if (v1) {
    uint64_t v3 = sub_100043E44;
  }
  else {
    uint64_t v3 = sub_100043F00;
  }
  return sub_100019308((uint64_t)v3, v2);
}

uint64_t sub_100043E44()
{
  sub_1000113BC();
  sub_100009448();
  uint64_t v2 = sub_100014238();
  if (v0)
  {
    *(void *)(v1 + 64) = v0;
    uint64_t v3 = *(void *)(v1 + 48);
    uint64_t v4 = sub_100043EF8;
  }
  else
  {
    sub_100043FB8(v2, *(void *)(v1 + 40), *(long long **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
    swift_release();
    uint64_t v3 = *(void *)(v1 + 48);
    uint64_t v4 = sub_10001B4E4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100043EF8()
{
  return sub_1000168A0();
}

uint64_t sub_100043F00()
{
  sub_1000113BC();
  sub_100009448();
  uint64_t v2 = sub_100014238();
  if (v0)
  {
    *(void *)(v1 + 72) = v0;
    uint64_t v3 = *(void *)(v1 + 48);
    uint64_t v4 = sub_100043FB0;
  }
  else
  {
    sub_100044114(v2, *(long long **)(v1 + 16));
    swift_release();
    uint64_t v3 = *(void *)(v1 + 48);
    uint64_t v4 = sub_10004489C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100043FB0()
{
  return sub_1000168A0();
}

uint64_t sub_100043FB8(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = getTimeIntervalSince1970(Date:)();
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  long long v12 = a3[1];
  long long v18 = *a3;
  long long v11 = v18;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_10009E600;
  *(_OWORD *)(inited + 16) = xmmword_1000866F0;
  *(_OWORD *)(inited + 32) = v11;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_10009E600;
  *(_OWORD *)(inited + 72) = v12;
  long long v16 = a3[2];
  long long v13 = v16;
  long long v17 = v12;
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &off_10009E600;
  *(_OWORD *)(inited + 112) = v13;
  *(void *)(inited + 176) = &type metadata for String;
  *(void *)(inited + 184) = &off_10009E600;
  *(void *)(inited + 152) = a4;
  *(void *)(inited + 160) = a5;
  *(void *)(inited + 216) = &type metadata for Int64;
  *(void *)(inited + 224) = &off_10009E5C0;
  *(void *)(inited + 192) = v9;
  sub_100019B14((uint64_t)&v18);
  sub_100019B14((uint64_t)&v17);
  sub_100019B14((uint64_t)&v16);
  swift_bridgeObjectRetain();
  sub_10000F264(inited);
  if (v5)
  {
    swift_setDeallocating();
    return sub_10000F200();
  }
  else
  {
    swift_setDeallocating();
    sub_10000F200();
    do
    {
      uint64_t v15 = sub_10000F9A8();
      uint64_t result = swift_release();
    }
    while (v15);
  }
  return result;
}

uint64_t sub_100044114(uint64_t a1, long long *a2)
{
  sub_100016CE0(&qword_1000A64B0);
  uint64_t inited = swift_initStackObject();
  long long v6 = a2[1];
  long long v12 = *a2;
  long long v5 = v12;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_10009E600;
  *(_OWORD *)(inited + 16) = xmmword_100085330;
  *(_OWORD *)(inited + 32) = v5;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_10009E600;
  *(_OWORD *)(inited + 72) = v6;
  long long v10 = a2[2];
  long long v7 = v10;
  long long v11 = v6;
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &off_10009E600;
  *(_OWORD *)(inited + 112) = v7;
  sub_100019B14((uint64_t)&v12);
  sub_100019B14((uint64_t)&v11);
  sub_100019B14((uint64_t)&v10);
  sub_10000F264(inited);
  if (v2)
  {
    swift_setDeallocating();
    return sub_10000F200();
  }
  else
  {
    swift_setDeallocating();
    sub_10000F200();
    do
    {
      uint64_t v9 = sub_10000F9A8();
      uint64_t result = swift_release();
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100044224@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 24) == 1)
  {
    sub_10001E280();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = 1;
    *(void *)(v4 + 8) = 0xD00000000000001DLL;
    *(void *)(v4 + 16) = 0x8000000100088DC0;
    return swift_willThrow();
  }
  else
  {
    uint64_t result = sub_10000F6DC();
    if (!v2)
    {
      do
      {
        uint64_t v6 = sub_10000F9A8();
        swift_release();
      }
      while (v6);
      swift_release();
      uint64_t result = sub_10001D9D4();
      *a2 = result;
    }
  }
  return result;
}

uint64_t sub_100044320()
{
  *(void *)(v1 + 16) = v0;
  return sub_100019308((uint64_t)sub_10004433C, v0);
}

uint64_t sub_10004433C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 112);
  *(void *)(v0 + 24) = v1;
  return sub_100019308((uint64_t)sub_10004435C, v1);
}

uint64_t sub_10004435C()
{
  sub_1000113BC();
  sub_10000F6DC();
  do
  {
    uint64_t v0 = sub_10000F9A8();
    swift_release();
  }
  while (v0);
  swift_release();
  sub_100013FE0();
  return v1();
}

uint64_t type metadata accessor for DiskCache()
{
  return self;
}

unint64_t sub_10004442C()
{
  unint64_t result = qword_1000A6AB8;
  if (!qword_1000A6AB8)
  {
    type metadata accessor for EventValue();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6AB8);
  }
  return result;
}

uint64_t sub_10004447C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100043B58(*(void *)(v1 + 16), a1);
}

uint64_t sub_100044498()
{
  type metadata accessor for Date();
  sub_10000948C();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100044520()
{
  return sub_100043CD4();
}

uint64_t sub_10004459C(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A6A70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000445FC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000948C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_10004465C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000948C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiskCacheError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for DiskCacheError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100044808);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100044830(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DiskCacheError()
{
  return &type metadata for DiskCacheError;
}

unint64_t sub_100044850()
{
  unint64_t result = qword_1000A7668;
  if (!qword_1000A7668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7668);
  }
  return result;
}

uint64_t sub_1000448A0()
{
  return sub_10001DA6C();
}

uint64_t sub_1000448C4(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v1;
  return swift_retain();
}

uint64_t sub_1000448E4()
{
  if ((byte_1000A7670 & 1) == 0)
  {
    sub_100016CE0(&qword_1000A7350);
    uint64_t v0 = sub_100016CE0(&qword_1000A7358);
    uint64_t v1 = *(void *)(*(void *)(v0 - 8) + 72);
    unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 - 8) + 80);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_100086810;
    unsigned int v4 = (void *)(v3 + v2 + *(int *)(v0 + 48));
    *(void *)(v3 + v2) = XPC_ACTIVITY_DELAY;
    void *v4 = 300;
    type metadata accessor for XPCObject();
    swift_storeEnumTagMultiPayload();
    uint64_t v5 = (void *)(v3 + v2 + v1 + *(int *)(v0 + 48));
    *(void *)(v3 + v2 + v1) = XPC_ACTIVITY_GRACE_PERIOD;
    void *v5 = 120;
    swift_storeEnumTagMultiPayload();
    unsigned int v6 = (const char **)(v3 + v2 + 2 * v1);
    BOOL v7 = (uint64_t *)((char *)v6 + *(int *)(v0 + 48));
    *unsigned int v6 = XPC_ACTIVITY_PRIORITY;
    *BOOL v7 = String.init(cString:)();
    v7[1] = v8;
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = (const char **)(v3 + v2 + 3 * v1);
    long long v10 = (char *)v9 + *(int *)(v0 + 48);
    *uint64_t v9 = XPC_ACTIVITY_ALLOW_BATTERY;
    *long long v10 = 0;
    uint64_t result = sub_100015340();
    if (XPC_ACTIVITY_POWER_NAP)
    {
      *sub_1000174A0(XPC_ACTIVITY_POWER_NAP) = 1;
      uint64_t result = sub_100015340();
      if (XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
      {
        long long v12 = sub_1000174A0(XPC_ACTIVITY_RANDOM_INITIAL_DELAY);
        uint64_t result = sub_10001A4F8(v12, 60);
        if (XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
        {
          *sub_1000174A0(XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY) = 1;
          uint64_t result = sub_100015340();
          if (XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
          {
            *sub_1000174A0(XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY) = 1;
            uint64_t result = sub_100015340();
            if (XPC_ACTIVITY_NETWORK_UPLOAD_SIZE)
            {
              long long v13 = sub_1000174A0(XPC_ACTIVITY_NETWORK_UPLOAD_SIZE);
              uint64_t result = sub_10001A4F8(v13, 5242880);
              if (XPC_ACTIVITY_EXPECTED_DURATION)
              {
                *(void *)sub_1000174A0(XPC_ACTIVITY_EXPECTED_DURATION) = XPC_ACTIVITY_INTERVAL_1_MIN;
                uint64_t result = swift_storeEnumTagMultiPayload();
                if (XPC_ACTIVITY_GROUP_NAME)
                {
                  uint64_t v14 = sub_1000174A0(XPC_ACTIVITY_GROUP_NAME);
                  *(void *)uint64_t v14 = 0xD00000000000001DLL;
                  *((void *)v14 + 1) = 0x8000000100089C20;
                  uint64_t result = swift_storeEnumTagMultiPayload();
                  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
                  {
                    uint64_t v15 = sub_1000174A0(XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT);
                    sub_10001A4F8(v15, 1);
                    sub_100016CE0(&qword_1000A7360);
                    sub_10003E2CC();
                    goto LABEL_12;
                  }
LABEL_22:
                  __break(1u);
                  return result;
                }
LABEL_21:
                __break(1u);
                goto LABEL_22;
              }
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  sub_100016CE0(&qword_1000A7360);
  type metadata accessor for XPCObject();
  sub_10003E2CC();
LABEL_12:

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100044C68()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF2E8);
  sub_100012884(v0, (uint64_t)qword_1000AF2E8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100044CE8()
{
  sub_1000094A8();
  v1[30] = v0;
  v1[31] = *(void *)(type metadata accessor for CachedSession(0) - 8);
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  sub_10000E934();
  return _swift_task_switch(v2, v3, v4);
}

void sub_100044E0C()
{
  sub_1000113BC();
  if (qword_1000A6010 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[42] = sub_100012884(v1, (uint64_t)qword_1000AF2E8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "starting eager submission activity", v4, 2u);
    sub_100009474();
  }

  v0[23] = &_swiftEmptySetSingleton;
  if (qword_1000AF3A0)
  {
    v0[43] = qword_1000AF3A0;
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[44] = v5;
    void *v5 = v0;
    v5[1] = sub_100044F80;
    sub_100040664(50);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100044F80()
{
  sub_1000094A8();
  sub_100017D58();
  os_log_type_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v1;
  v3[45] = v5;
  v3[46] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[30];
    BOOL v7 = sub_100046FF0;
  }
  else
  {
    uint64_t v8 = v3[30];
    swift_release();
    BOOL v7 = sub_10004507C;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10004507C()
{
  sub_100011540();
  uint64_t v47 = v1;
  uint64_t v3 = *(void *)(*(void *)(v1 + 360) + 16);
  *(void *)(v1 + 376) = v3;
  if (v3)
  {
    char v4 = static Task<>.isCancelled.getter();
    uint64_t v5 = *(void *)(v1 + 360);
    if ((v4 & 1) == 0)
    {
      uint64_t v11 = *(void *)(v1 + 248);
      int v12 = *(_DWORD *)(v11 + 80);
      *(_DWORD *)(v1 + 664) = v12;
      *(void *)(v1 + 384) = 0;
      uint64_t v13 = *(void *)(v5 + 16);
      uint64_t v7 = swift_bridgeObjectRetain();
      if (v13)
      {
        unint64_t v14 = (v12 + 32) & ~(unint64_t)v12;
        uint64_t v15 = *(void *)(v1 + 328);
        *(void *)(v1 + 392) = *(void *)(v11 + 72);
        sub_10003D340(v7 + v14, v15);
        sub_100019C28();
        swift_bridgeObjectRetain();
        sub_1000163D4();
        sub_10001731C();
        swift_bridgeObjectRelease();
        if (v2)
        {
          sub_10000E940();
          long long v16 = (void *)Logger.logObject.getter();
          os_log_type_t v17 = static os_log_type_t.default.getter();
          BOOL v18 = sub_100016884(v17);
          uint64_t v19 = *(void *)(v1 + 320);
          if (v18)
          {
            sub_100014490();
            sub_1000170C8();
            sub_1000487C8();
            uint64_t v20 = sub_10001654C(4.8751e-34);
            uint64_t v22 = sub_10001A6DC(v20, v21, &v46);
            sub_100017678(v22);
            sub_10003D2E4(v19);
            sub_10000B408((void *)&_mh_execute_header, v23, v24, "sending events for session: %{public}s");
            sub_10004871C();
            sub_100009474();
            sub_100009474();
          }
          else
          {
            sub_10003D2E4(*(void *)(v1 + 320));
          }

          uint64_t v31 = qword_1000AF3B8;
          *(void *)(v1 + 424) = qword_1000AF3B8;
          if (v31)
          {
            sub_1000113EC();
            uint64_t v32 = swift_task_alloc();
            uint64_t v33 = (void *)sub_1000486DC(v32);
            *uint64_t v33 = v34;
            v33[1] = sub_1000455D0;
            sub_100017244();
            sub_10001A468();
            __asm { BR              X1 }
          }
          goto LABEL_42;
        }
        sub_100009528();
        sub_100014020();
        uint64_t v7 = swift_bridgeObjectRelease();
        uint64_t v29 = qword_1000AF3B0;
        *(void *)(v1 + 416) = qword_1000AF3B0;
        if (v29)
        {
          swift_bridgeObjectRetain();
          swift_retain();
LABEL_17:
          sub_10000E934();
          sub_10001A468();
          return _swift_task_switch(v7, v8, v9);
        }
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
  }
  swift_bridgeObjectRelease();
  sub_100015F90();
  if (v0)
  {
    sub_10001A900();
    goto LABEL_5;
  }
  sub_10001A41C();
  if (!v28 & v27)
  {
    if (v25[8]) {
      goto LABEL_14;
    }
    if (v26 < 0xC0) {
      goto LABEL_35;
    }
    if (v25[9]) {
      goto LABEL_14;
    }
    if (v26 < 0x100) {
      goto LABEL_35;
    }
    if (v25[10]) {
      goto LABEL_14;
    }
    if (v26 < 0x140) {
      goto LABEL_35;
    }
    if (v25[11])
    {
LABEL_14:
      sub_1000486C4();
LABEL_5:
      sub_100048770(v6);
      uint64_t v10 = qword_1000AF3B0;
      *(void *)(v1 + 624) = qword_1000AF3B0;
      if (v10)
      {
        sub_100014250(*(void *)(v7 + 48));
        swift_bridgeObjectRetain();
        swift_retain();
        goto LABEL_17;
      }
      goto LABEL_40;
    }
    unint64_t v37 = v26 >> 6;
    uint64_t v38 = 12;
    while (v38 - 7 < v37)
    {
      if (v25[v38++]) {
        goto LABEL_14;
      }
    }
  }
LABEL_35:
  uint64_t v7 = swift_release();
  uint64_t v40 = qword_1000AF3B0;
  *(void *)(v1 + 648) = qword_1000AF3B0;
  if (!v40)
  {
LABEL_43:
    __break(1u);
    return _swift_task_switch(v7, v8, v9);
  }
  sub_10004879C();
  swift_bridgeObjectRelease();
  uint64_t v41 = swift_task_alloc();
  uint64_t v42 = (void *)sub_1000152E4(v41);
  *uint64_t v42 = v43;
  v42[1] = sub_100046E34;
  sub_10001A468();
  return sub_10003B14C();
}

uint64_t sub_100045410()
{
  sub_1000113BC();
  uint64_t v1 = v0[30];
  sub_100009B48(v0[50], v0[51]);
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_task_switch(sub_100045498, v1, 0);
}

void sub_100045498()
{
  sub_100011540();
  uint64_t v17 = v0;
  sub_10000E940();
  uint64_t v1 = (void *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  BOOL v3 = sub_100016884(v2);
  uint64_t v4 = *(void *)(v0 + 320);
  if (v3)
  {
    sub_100014490();
    sub_1000170C8();
    sub_1000487C8();
    uint64_t v5 = sub_10001654C(4.8751e-34);
    uint64_t v7 = sub_10001A6DC(v5, v6, &v16);
    sub_100017678(v7);
    sub_10003D2E4(v4);
    sub_10000B408((void *)&_mh_execute_header, v8, v9, "sending events for session: %{public}s");
    sub_10004871C();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    sub_10003D2E4(*(void *)(v0 + 320));
  }

  uint64_t v10 = qword_1000AF3B8;
  *(void *)(v0 + 424) = qword_1000AF3B8;
  if (v10)
  {
    sub_1000113EC();
    uint64_t v11 = swift_task_alloc();
    int v12 = (void *)sub_1000486DC(v11);
    *int v12 = v13;
    v12[1] = sub_1000455D0;
    sub_100017244();
    sub_10001A468();
    __asm { BR              X1 }
  }
  __break(1u);
}

uint64_t sub_1000455D0()
{
  sub_1000094A8();
  sub_100017D58();
  BOOL v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v1;
  v3[55] = v5;
  v3[56] = v6;
  v3[57] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[30];
    uint64_t v8 = sub_1000472A4;
  }
  else
  {
    uint64_t v9 = v3[30];
    swift_release();
    uint64_t v8 = sub_1000456D0;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1000456D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v82 = v3;
  if (v3[55])
  {
    if (qword_1000AF3A0)
    {
      sub_10004875C();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v4 = (void *)swift_task_alloc();
      v3[60] = v4;
      void *v4 = v3;
      v4[1] = sub_100045C78;
      sub_100012958();
      sub_100016568();
      return sub_10004338C(v5, v6, v7, v8);
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v11 = v3[41];
  uint64_t v12 = v3[37];
  uint64_t v14 = v3[35];
  uint64_t v13 = v3[36];
  sub_10003D340(v11, v3[38]);
  sub_10003D340(v11, v12);
  sub_10003D340(v11, v13);
  sub_10003D340(v11, v14);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = v3[41];
  uint64_t v20 = v3[37];
  uint64_t v19 = v3[38];
  uint64_t v21 = v3[35];
  uint64_t v22 = v3[36];
  if (v17)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v79 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446978;
    uint64_t v80 = v18;
    uint64_t v81 = v79;
    log = v15;
    uint64_t v24 = *(void *)(v19 + 48);
    unint64_t v23 = *(void *)(v19 + 56);
    swift_bridgeObjectRetain();
    v3[16] = sub_10001227C(v24, v23, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10003D2E4(v19);
    *(_WORD *)(v13 + 12) = 2082;
    uint64_t v25 = swift_bridgeObjectRetain();
    v3[17] = sub_10000A470(v25, v26, v27, v28, v29, v30, v31, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10003D2E4(v20);
    *(_WORD *)(v13 + 22) = 2082;
    uint64_t v33 = swift_bridgeObjectRetain();
    v3[18] = sub_10000A470(v33, v34, v35, v36, v37, v38, v39, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10003D2E4(v22);
    *(_WORD *)(v13 + 32) = 2082;
    uint64_t v41 = swift_bridgeObjectRetain();
    v3[19] = sub_10000A470(v41, v42, v43, v44, v45, v46, v47, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10003D2E4(v21);
    _os_log_impl((void *)&_mh_execute_header, log, v16, "no backend available for session %{public}s - %{public}s:%{public}s:%{public}s", (uint8_t *)v13, 0x2Au);
    uint64_t v15 = v79;
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    uint64_t v49 = v80;
  }
  else
  {

    sub_10003D2E4(v21);
    sub_10003D2E4(v22);
    sub_10003D2E4(v20);
    sub_10003D2E4(v19);
    uint64_t v49 = v18;
  }
  sub_10003D2E4(v49);
  sub_1000134DC();
  if (!v51)
  {
    sub_1000161DC(v50);
    if (!v59)
    {
      sub_10001932C(v60);
      sub_100019C28();
      swift_bridgeObjectRetain();
      sub_1000163D4();
      sub_10001731C();
      swift_bridgeObjectRelease();
      if (v13)
      {
        sub_10000E940();
        char v61 = (void *)Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.default.getter();
        BOOL v63 = sub_100016884(v62);
        uint64_t v64 = v3[40];
        if (v63)
        {
          sub_100014490();
          uint64_t v81 = sub_1000170C8();
          LODWORD(v15->isa) = 136446210;
          uint64_t v65 = swift_bridgeObjectRetain();
          uint64_t v67 = sub_10001A6DC(v65, v66, &v81);
          sub_100017678(v67);
          sub_10003D2E4(v64);
          sub_10000B408((void *)&_mh_execute_header, v68, v69, "sending events for session: %{public}s");
          sub_10001AA4C();
          sub_100009474();
          sub_100009474();
        }
        else
        {
          sub_10003D2E4(v3[40]);
        }

        uint64_t v72 = qword_1000AF3B8;
        v3[53] = qword_1000AF3B8;
        if (v72)
        {
          swift_retain();
          uint64_t v73 = swift_task_alloc();
          uint64_t v74 = (void *)sub_1000486DC(v73);
          void *v74 = v75;
          v74[1] = sub_1000455D0;
          sub_100016568();
          __asm { BR              X1 }
        }
        goto LABEL_32;
      }
      sub_100009528();
      sub_100014020();
      a1 = swift_bridgeObjectRelease();
      uint64_t v70 = qword_1000AF3B0;
      v3[52] = qword_1000AF3B0;
      if (v70)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10000E934();
        sub_100016568();
        return _swift_task_switch(a1, a2, a3);
      }
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      return _swift_task_switch(a1, a2, a3);
    }
    __break(1u);
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  a1 = sub_100019A28();
  uint64_t v52 = qword_1000AF3A0;
  v3[72] = qword_1000AF3A0;
  if (!v52)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  sub_1000486E8();
  swift_retain();
  uint64_t v53 = swift_task_alloc();
  uint64_t v54 = (void *)sub_10000E87C(v53);
  *uint64_t v54 = v55;
  v54[1] = sub_1000468E8;
  sub_100015188();
  sub_100016568();
  return sub_1000429B8(v56, v57);
}

uint64_t sub_100045C78()
{
  sub_1000094A8();
  sub_100017D58();
  BOOL v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v1;
  v3[61] = v5;
  v3[62] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[30];
    uint64_t v7 = sub_10004766C;
  }
  else
  {
    uint64_t v8 = v3[30];
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v7 = sub_100045D7C;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100045D7C()
{
  uint64_t v66 = v1;
  uint64_t v3 = v1[61];
  uint64_t v4 = v1[41];
  if (*(void *)(v3 + 16))
  {
    sub_10003D340(v4, v1[39]);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (sub_100016884(v6))
    {
      log = v5;
      uint64_t v7 = v1[61];
      uint64_t v8 = v1[39];
      uint64_t v9 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 134349826;
      v1[26] = *(void *)(v3 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v10 = *(void *)(v8 + 48);
      unint64_t v11 = *(void *)(v8 + 56);
      swift_bridgeObjectRetain();
      v1[27] = sub_10001227C(v10, v11, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10003D2E4(v8);
      *(_WORD *)(v9 + 22) = 2082;
      uint64_t v12 = sub_100060424(v7, 0x646F6874656D5FLL, 0xE700000000000000);
      sub_100060784((uint64_t)v12);
      uint64_t v13 = Set.description.getter();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      v1[28] = sub_10001227C(v13, v15, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 32) = 2082;
      os_log_type_t v16 = sub_100060424(v7, 0x7375746174735FLL, 0xE700000000000000);
      sub_100060784((uint64_t)v16);
      Set.description.getter();
      uint64_t v17 = swift_bridgeObjectRelease();
      v1[29] = sub_10001A6DC(v17, v18, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v5 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v0, "sending %{public}ld events for session %s with categories [%{public}s] types [%{public}s]", (uint8_t *)v9, 0x2Au);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      sub_10003D2E4(v1[39]);
      swift_bridgeObjectRelease_n();
    }

    int64_t v29 = *(void *)(v3 + 16);
    v1[63] = v29;
    uint64_t v30 = _swiftEmptyArrayStorage;
    if (v29)
    {
      uint64_t v31 = v1 + 20;
      uint64_t v32 = v1[61];
      v1[20] = _swiftEmptyArrayStorage;
      sub_100071E70(0, v29, 0);
      uint64_t v30 = (void *)v1[20];
      uint64_t v33 = (_OWORD *)(v32 + 48);
      do
      {
        uint64_t v34 = *((void *)v33 - 1);
        *(_OWORD *)xpc_type_t type = *v33;
        *uint64_t v31 = v30;
        unint64_t v35 = v30[2];
        unint64_t v36 = v30[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v35 >= v36 >> 1)
        {
          sub_100071E70((char *)(v36 > 1), v35 + 1, 1);
          uint64_t v30 = (void *)*v31;
        }
        v30[2] = v35 + 1;
        uint64_t v37 = &v30[3 * v35];
        v37[4] = v34;
        *(_OWORD *)(v37 + 5) = *(_OWORD *)type;
        v33 += 2;
        --v29;
      }
      while (v29);
    }
    v1[64] = v30;
    swift_getObjectType();
    uint64_t v38 = (void *)swift_task_alloc();
    v1[65] = v38;
    *uint64_t v38 = v1;
    v38[1] = sub_100046458;
    sub_1000170E4();
    __asm { BRAA            X4, X16 }
  }
  sub_10003D2E4(v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1000134DC();
  if (!v20)
  {
    sub_1000161DC(v19);
    if (!v41)
    {
      sub_10001932C(v45);
      sub_100019C28();
      swift_bridgeObjectRetain();
      sub_1000163D4();
      sub_10001731C();
      swift_bridgeObjectRelease();
      if (v2)
      {
        sub_10000E940();
        uint64_t v46 = (void *)Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.default.getter();
        BOOL v48 = sub_100016884(v47);
        uint64_t v49 = v1[40];
        if (v48)
        {
          sub_100014490();
          v65[0] = sub_1000170C8();
          uint64_t v50 = sub_10001654C(4.8751e-34);
          uint64_t v52 = sub_10001A6DC(v50, v51, v65);
          sub_100017678(v52);
          sub_10003D2E4(v49);
          sub_10000B408((void *)&_mh_execute_header, v53, v54, "sending events for session: %{public}s");
          sub_10004871C();
          sub_100009474();
          sub_100009474();
        }
        else
        {
          sub_10003D2E4(v1[40]);
        }

        uint64_t v57 = qword_1000AF3B8;
        v1[53] = qword_1000AF3B8;
        if (v57)
        {
          swift_retain();
          uint64_t v58 = swift_task_alloc();
          char v59 = (void *)sub_1000486DC(v58);
          *char v59 = v60;
          v59[1] = sub_1000455D0;
          sub_1000170E4();
          __asm { BR              X1 }
        }
        goto LABEL_35;
      }
      sub_100009528();
      sub_100014020();
      uint64_t v42 = swift_bridgeObjectRelease();
      uint64_t v55 = qword_1000AF3B0;
      v1[52] = qword_1000AF3B0;
      if (v55)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10000E934();
        sub_1000170E4();
        return _swift_task_switch(v42, v43, v44);
      }
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      return _swift_task_switch(v42, v43, v44);
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = sub_100019A28();
  uint64_t v21 = qword_1000AF3A0;
  v1[72] = qword_1000AF3A0;
  if (!v21) {
    goto LABEL_33;
  }
  sub_1000486E8();
  swift_retain();
  uint64_t v22 = swift_task_alloc();
  unint64_t v23 = (void *)sub_10000E87C(v22);
  *unint64_t v23 = v24;
  v23[1] = sub_1000468E8;
  sub_100015188();
  sub_1000170E4();
  return sub_1000429B8(v25, v26);
}

uint64_t sub_100046458()
{
  sub_1000113BC();
  uint64_t v2 = *v1;
  sub_10000935C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 528) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 240);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100047A48;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 240);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000465A8;
    uint64_t v6 = v7;
  }
  return _swift_task_switch(v5, v6, 0);
}

void sub_1000465A8()
{
  uint64_t v1 = qword_1000AF3A0;
  v0[67] = qword_1000AF3A0;
  if (v1)
  {
    int64_t v2 = v0[63];
    uint64_t v3 = v0[61];
    if (v2)
    {
      uint64_t v4 = v0 + 25;
      v0[25] = _swiftEmptyArrayStorage;
      swift_retain();
      sub_100071EC0(0, v2, 0);
      uint64_t v5 = 0;
      uint64_t v6 = (void *)v0[25];
      uint64_t v7 = (uint64_t *)(v3 + 32);
      unint64_t v8 = v6[2];
      do
      {
        uint64_t v10 = *v7;
        v7 += 4;
        uint64_t v9 = v10;
        void *v4 = v6;
        unint64_t v11 = v6[3];
        if (v8 >= v11 >> 1)
        {
          sub_100071EC0((char *)(v11 > 1), v8 + 1, 1);
          uint64_t v6 = (void *)*v4;
        }
        uint64_t v12 = v0[63];
        ++v5;
        _OWORD v6[2] = v8 + 1;
        v6[v8++ + 4] = v9;
      }
      while (v5 != v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v6 = _swiftEmptyArrayStorage;
    }
    v0[68] = v6;
    uint64_t v13 = (void *)swift_task_alloc();
    v0[69] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10004672C;
    sub_1000435E4((uint64_t)v6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10004672C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 560) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 240);
    unint64_t v8 = sub_100047E10;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 240);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v8 = sub_100046830;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_100046830()
{
  sub_1000113BC();
  if (qword_1000AF3A0)
  {
    sub_10004875C();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100045C78;
    uint64_t v2 = sub_100012958();
    sub_10004338C(v2, v3, v4, v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000468E8()
{
  sub_1000113BC();
  uint64_t v2 = *v1;
  sub_10000935C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 592) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  sub_10000E934();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100046A2C()
{
  sub_1000113BC();
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 568) + 1;
  sub_10003D2E4(*(void *)(v0 + 272));
  if (v2 == v1)
  {
    uint64_t result = swift_bridgeObjectRelease();
    if (qword_1000AF3A0)
    {
      *(void *)(v0 + 344) = qword_1000AF3A0;
      swift_retain();
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v4;
      void *v4 = v0;
      v4[1] = sub_100044F80;
      return sub_100040664(50);
    }
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v5 = *(void *)(v0 + 568) + 1;
  *(void *)(v0 + 568) = v5;
  uint64_t result = sub_10003D340(*(void *)(v0 + 360)+ ((*(unsigned __int8 *)(v0 + 664) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 664))+ *(void *)(v0 + 392) * v5, *(void *)(v0 + 272));
  uint64_t v6 = qword_1000AF3A0;
  *(void *)(v0 + 576) = qword_1000AF3A0;
  if (!v6) {
    goto LABEL_11;
  }
  sub_1000486E8();
  swift_retain();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)sub_10000E87C(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_1000468E8;
  uint64_t v10 = sub_100015188();
  return sub_1000429B8(v10, v11);
}

uint64_t sub_100046BBC()
{
  sub_1000113BC();
  uint64_t v1 = v0[30];
  sub_10000A630(v0[80], v0[79], 0);
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_task_switch(sub_100046C4C, v1, 0);
}

uint64_t sub_100046C4C()
{
  sub_1000094A8();
  uint64_t v4 = *(void *)(v0 + 608);
  if (*(void *)(v0 + 616))
  {
LABEL_2:
    sub_100048770(v4);
    uint64_t v5 = qword_1000AF3B0;
    *(void *)(v0 + 624) = qword_1000AF3B0;
    if (v5)
    {
      sub_100014250(*(void *)(*(void *)(v0 + 600) + 48));
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10000E934();
      return _swift_task_switch(v1, v2, v3);
    }
    goto LABEL_26;
  }
  uint64_t v6 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v7 = (1 << *(unsigned char *)(v0 + 668)) + 63;
  uint64_t v1 = *(void *)(v0 + 600);
  if (v6 < (uint64_t)(v7 >> 6))
  {
    uint64_t v8 = v1 + 56;
    ++v4;
    if (*(void *)(v1 + 56 + 8 * v6)) {
      goto LABEL_2;
    }
    int64_t v9 = v7 >> 6;
    uint64_t v4 = v6 + 1;
    if (v6 + 1 < v9)
    {
      if (*(void *)(v8 + 8 * v4)) {
        goto LABEL_2;
      }
      uint64_t v4 = v6 + 2;
      if (v6 + 2 < v9)
      {
        if (*(void *)(v8 + 8 * v4)) {
          goto LABEL_2;
        }
        uint64_t v10 = v6 + 3;
        if (v10 < v9)
        {
          if (*(void *)(v8 + 8 * v10))
          {
            uint64_t v4 = v10;
            goto LABEL_2;
          }
          while (1)
          {
            uint64_t v4 = v10 + 1;
            if (__OFADD__(v10, 1)) {
              break;
            }
            if (v4 >= v9) {
              goto LABEL_20;
            }
            ++v10;
            if (*(void *)(v8 + 8 * v4)) {
              goto LABEL_2;
            }
          }
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
      }
    }
  }
LABEL_20:
  uint64_t v1 = swift_release();
  uint64_t v11 = qword_1000AF3B0;
  *(void *)(v0 + 648) = qword_1000AF3B0;
  if (!v11)
  {
LABEL_27:
    __break(1u);
    return _swift_task_switch(v1, v2, v3);
  }
  sub_10004879C();
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1000152E4(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_100046E34;
  return sub_10003B14C();
}

uint64_t sub_100046E34()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v2 = *(void *)(v1 + 240);
  uint64_t v3 = *v0;
  sub_10000935C();
  void *v4 = v3;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100046F34, v2, 0);
}

uint64_t sub_100046F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10000E6A4();
  sub_100011540();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100016198();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10, a11, a12);
}

uint64_t sub_100046FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  sub_10000E6A4();
  a19 = v21;
  a20 = v22;
  sub_100011540();
  a18 = v20;
  swift_release();
  uint64_t v23 = v20[46];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v24 = (void *)Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (sub_10001A5E4(v25))
  {
    sub_100014490();
    a9 = swift_slowAlloc();
    sub_10001A558(4.8149e-34);
    uint64_t v26 = Error.localizedDescription.getter();
    uint64_t v28 = sub_10001227C(v26, v27, &a9);
    sub_1000486F4(v28);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001A2A4((void *)&_mh_execute_header, v29, v30, "error running submission: %s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100015F90();
  if (v23)
  {
    sub_10001A900();
LABEL_6:
    sub_100048770(v31);
    uint64_t v35 = qword_1000AF3B0;
    v20[78] = qword_1000AF3B0;
    if (v35)
    {
      sub_100014250(*(void *)(v32 + 48));
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10000E934();
      sub_100016198();
      return _swift_task_switch(v32, v33, v34);
    }
    __break(1u);
LABEL_29:
    __break(1u);
    return _swift_task_switch(v32, v33, v34);
  }
  sub_10001A41C();
  if (!v40 & v39)
  {
    if (v37[8]) {
      goto LABEL_13;
    }
    if (v38 < 0xC0) {
      goto LABEL_24;
    }
    if (v37[9]) {
      goto LABEL_13;
    }
    if (v38 < 0x100) {
      goto LABEL_24;
    }
    if (v37[10]) {
      goto LABEL_13;
    }
    if (v38 < 0x140) {
      goto LABEL_24;
    }
    if (v37[11])
    {
LABEL_13:
      sub_1000486C4();
      goto LABEL_6;
    }
    unint64_t v41 = v38 >> 6;
    uint64_t v42 = 12;
    while (v42 - 7 < v41)
    {
      if (v37[v42++]) {
        goto LABEL_13;
      }
    }
  }
LABEL_24:
  uint64_t v32 = swift_release();
  uint64_t v44 = qword_1000AF3B0;
  v20[81] = qword_1000AF3B0;
  if (!v44) {
    goto LABEL_29;
  }
  sub_10004879C();
  swift_bridgeObjectRelease();
  uint64_t v45 = swift_task_alloc();
  uint64_t v46 = (void *)sub_1000152E4(v45);
  *uint64_t v46 = v47;
  v46[1] = sub_100046E34;
  sub_100016198();
  return sub_10003B14C();
}

uint64_t sub_1000472A4()
{
  uint64_t v47 = v0;
  swift_release();
  sub_10003D340(v0[41], v0[33]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (sub_10001A5E4(v3))
  {
    uint64_t v4 = sub_100007DE4();
    uint64_t v46 = sub_1000152A0();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v6 = *(void *)(v1 + 48);
    unint64_t v5 = *(void *)(v1 + 56);
    swift_bridgeObjectRetain();
    *(void *)(v4 + 4) = sub_10001227C(v6, v5, &v46);
    swift_bridgeObjectRelease();
    sub_10003D2E4(v1);
    sub_10001A374();
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    *(void *)(v4 + 14) = sub_10001227C(v7, v8, &v46);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001A2DC((void *)&_mh_execute_header, v9, v10, "failed to process events for session %{public}s: %{public}s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
    uint64_t v11 = v45;
  }
  else
  {
    uint64_t v12 = v0[41];
    uint64_t v6 = v0[33];

    swift_errorRelease();
    swift_errorRelease();
    sub_10003D2E4(v6);
    swift_errorRelease();
    uint64_t v11 = v12;
  }
  sub_10003D2E4(v11);
  sub_1000134DC();
  if (!v14)
  {
    sub_1000161DC(v13);
    if (!v23)
    {
      sub_10001932C(v27);
      sub_100019C28();
      swift_bridgeObjectRetain();
      sub_1000163D4();
      sub_10001731C();
      swift_bridgeObjectRelease();
      if (v6)
      {
        sub_10000E940();
        uint64_t v28 = (void *)Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        BOOL v30 = sub_100016884(v29);
        uint64_t v31 = v0[40];
        if (v30)
        {
          sub_100014490();
          sub_1000170C8();
          sub_1000487C8();
          uint64_t v32 = sub_10001654C(4.8751e-34);
          uint64_t v34 = sub_10001A6DC(v32, v33, &v46);
          sub_100017678(v34);
          sub_10003D2E4(v31);
          sub_10000B408((void *)&_mh_execute_header, v35, v36, "sending events for session: %{public}s");
          sub_10001AA4C();
          sub_100009474();
          sub_100009474();
        }
        else
        {
          sub_10003D2E4(v0[40]);
        }

        uint64_t v39 = qword_1000AF3B8;
        v0[53] = qword_1000AF3B8;
        if (v39)
        {
          sub_1000113EC();
          uint64_t v40 = swift_task_alloc();
          unint64_t v41 = (void *)sub_1000486DC(v40);
          *unint64_t v41 = v42;
          v41[1] = sub_1000455D0;
          sub_100017244();
          sub_100016650();
          __asm { BR              X1 }
        }
        goto LABEL_26;
      }
      sub_100009528();
      sub_100014020();
      uint64_t v24 = swift_bridgeObjectRelease();
      uint64_t v37 = qword_1000AF3B0;
      v0[52] = qword_1000AF3B0;
      if (v37)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10000E934();
        sub_100016650();
        return _swift_task_switch(v24, v25, v26);
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return _swift_task_switch(v24, v25, v26);
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_100019A28();
  uint64_t v15 = qword_1000AF3A0;
  v0[72] = qword_1000AF3A0;
  if (!v15) {
    goto LABEL_24;
  }
  sub_1000486E8();
  swift_retain();
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_10000E87C(v16);
  *uint64_t v17 = v18;
  v17[1] = sub_1000468E8;
  sub_100015188();
  sub_100016650();
  return sub_1000429B8(v19, v20);
}

uint64_t sub_10004766C()
{
  uint64_t v47 = v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  sub_10003D340(v0[41], v0[33]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (sub_10001A5E4(v3))
  {
    uint64_t v4 = sub_100007DE4();
    uint64_t v46 = sub_1000152A0();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v6 = *(void *)(v1 + 48);
    unint64_t v5 = *(void *)(v1 + 56);
    swift_bridgeObjectRetain();
    *(void *)(v4 + 4) = sub_10001227C(v6, v5, &v46);
    swift_bridgeObjectRelease();
    sub_10003D2E4(v1);
    sub_10001A374();
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    *(void *)(v4 + 14) = sub_10001227C(v7, v8, &v46);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001A2DC((void *)&_mh_execute_header, v9, v10, "failed to process events for session %{public}s: %{public}s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
    uint64_t v11 = v45;
  }
  else
  {
    uint64_t v12 = v0[41];
    uint64_t v6 = v0[33];

    swift_errorRelease();
    swift_errorRelease();
    sub_10003D2E4(v6);
    swift_errorRelease();
    uint64_t v11 = v12;
  }
  sub_10003D2E4(v11);
  sub_1000134DC();
  if (!v14)
  {
    sub_1000161DC(v13);
    if (!v23)
    {
      sub_10001932C(v27);
      sub_100019C28();
      swift_bridgeObjectRetain();
      sub_1000163D4();
      sub_10001731C();
      swift_bridgeObjectRelease();
      if (v6)
      {
        sub_10000E940();
        uint64_t v28 = (void *)Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        BOOL v30 = sub_100016884(v29);
        uint64_t v31 = v0[40];
        if (v30)
        {
          sub_100014490();
          sub_1000170C8();
          sub_1000487C8();
          uint64_t v32 = sub_10001654C(4.8751e-34);
          uint64_t v34 = sub_10001A6DC(v32, v33, &v46);
          sub_100017678(v34);
          sub_10003D2E4(v31);
          sub_10000B408((void *)&_mh_execute_header, v35, v36, "sending events for session: %{public}s");
          sub_10001AA4C();
          sub_100009474();
          sub_100009474();
        }
        else
        {
          sub_10003D2E4(v0[40]);
        }

        uint64_t v39 = qword_1000AF3B8;
        v0[53] = qword_1000AF3B8;
        if (v39)
        {
          sub_1000113EC();
          uint64_t v40 = swift_task_alloc();
          unint64_t v41 = (void *)sub_1000486DC(v40);
          *unint64_t v41 = v42;
          v41[1] = sub_1000455D0;
          sub_100017244();
          sub_100016650();
          __asm { BR              X1 }
        }
        goto LABEL_26;
      }
      sub_100009528();
      sub_100014020();
      uint64_t v24 = swift_bridgeObjectRelease();
      uint64_t v37 = qword_1000AF3B0;
      v0[52] = qword_1000AF3B0;
      if (v37)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10000E934();
        sub_100016650();
        return _swift_task_switch(v24, v25, v26);
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return _swift_task_switch(v24, v25, v26);
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_100019A28();
  uint64_t v15 = qword_1000AF3A0;
  v0[72] = qword_1000AF3A0;
  if (!v15) {
    goto LABEL_24;
  }
  sub_1000486E8();
  swift_retain();
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_10000E87C(v16);
  *uint64_t v17 = v18;
  v17[1] = sub_1000468E8;
  sub_100015188();
  sub_100016650();
  return sub_1000429B8(v19, v20);
}

uint64_t sub_100047A48()
{
  uint64_t v47 = v0;
  uint64_t v2 = v0[42];
  sub_10003D340(v0[41], v0[32]);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    sub_10001A7A0();
    uint64_t v46 = sub_1000152A0();
    sub_10001A328(4.8752e-34);
    uint64_t v5 = sub_10001227C(v2, (unint64_t)&type metadata for Any, &v46);
    sub_1000162E0(v5);
    swift_bridgeObjectRelease();
    sub_10003D2E4(v1);
    sub_100048738();
    uint64_t v6 = Error.localizedDescription.getter();
    uint64_t v8 = sub_10001227C(v6, v7, &v46);
    sub_100014574(v8);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10000B428((void *)&_mh_execute_header, v9, v10, "failed to send events for session %{public}s: %{public}s");
    sub_10004877C();
    sub_100009474();
    sub_100009474();

    swift_unknownObjectRelease();
    swift_errorRelease();
    uint64_t v11 = v45;
  }
  else
  {
    uint64_t v1 = v0[41];
    uint64_t v12 = v0[32];

    swift_unknownObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10003D2E4(v12);
    swift_errorRelease();
    uint64_t v11 = v1;
  }
  sub_10003D2E4(v11);
  sub_1000134DC();
  if (!v14)
  {
    sub_1000161DC(v13);
    if (!v23)
    {
      sub_10001932C(v27);
      sub_100019C28();
      swift_bridgeObjectRetain();
      sub_1000163D4();
      sub_10001731C();
      swift_bridgeObjectRelease();
      if (v1)
      {
        sub_10000E940();
        uint64_t v28 = (void *)Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        BOOL v30 = sub_100016884(v29);
        uint64_t v31 = v0[40];
        if (v30)
        {
          sub_100014490();
          uint64_t v46 = sub_1000170C8();
          uint64_t v32 = sub_10001654C(4.8751e-34);
          uint64_t v34 = sub_10001A6DC(v32, v33, &v46);
          sub_100017678(v34);
          sub_10003D2E4(v31);
          sub_10000B408((void *)&_mh_execute_header, v35, v36, "sending events for session: %{public}s");
          sub_10001AA4C();
          sub_100009474();
          sub_100009474();
        }
        else
        {
          sub_10003D2E4(v0[40]);
        }

        uint64_t v39 = qword_1000AF3B8;
        v0[53] = qword_1000AF3B8;
        if (v39)
        {
          sub_10001164C();
          uint64_t v40 = swift_task_alloc();
          unint64_t v41 = (void *)sub_1000486DC(v40);
          *unint64_t v41 = v42;
          v41[1] = sub_1000455D0;
          sub_1000487B4();
          sub_100016868();
          __asm { BR              X1 }
        }
        goto LABEL_26;
      }
      sub_100009528();
      sub_100014020();
      uint64_t v24 = swift_bridgeObjectRelease();
      uint64_t v37 = qword_1000AF3B0;
      v0[52] = qword_1000AF3B0;
      if (v37)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10000E934();
        sub_100016868();
        return _swift_task_switch(v24, v25, v26);
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return _swift_task_switch(v24, v25, v26);
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_100019A28();
  uint64_t v15 = qword_1000AF3A0;
  v0[72] = qword_1000AF3A0;
  if (!v15) {
    goto LABEL_24;
  }
  sub_1000486E8();
  swift_retain();
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_10000E87C(v16);
  *uint64_t v17 = v18;
  v17[1] = sub_1000468E8;
  sub_100015188();
  sub_100016868();
  return sub_1000429B8(v19, v20);
}

uint64_t sub_100047E10()
{
  uint64_t v47 = v0;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = v0[42];
  sub_10003D340(v0[41], v0[32]);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    sub_10001A7A0();
    uint64_t v46 = sub_1000152A0();
    sub_10001A328(4.8752e-34);
    uint64_t v5 = sub_10001227C(v2, (unint64_t)&type metadata for Any, &v46);
    sub_1000162E0(v5);
    swift_bridgeObjectRelease();
    sub_10003D2E4(v1);
    sub_100048738();
    uint64_t v6 = Error.localizedDescription.getter();
    uint64_t v8 = sub_10001227C(v6, v7, &v46);
    sub_100014574(v8);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10000B428((void *)&_mh_execute_header, v9, v10, "failed to send events for session %{public}s: %{public}s");
    sub_10004877C();
    sub_100009474();
    sub_100009474();

    swift_unknownObjectRelease();
    swift_errorRelease();
    uint64_t v11 = v45;
  }
  else
  {
    uint64_t v1 = v0[41];
    uint64_t v12 = v0[32];

    swift_unknownObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10003D2E4(v12);
    swift_errorRelease();
    uint64_t v11 = v1;
  }
  sub_10003D2E4(v11);
  sub_1000134DC();
  if (!v14)
  {
    sub_1000161DC(v13);
    if (!v23)
    {
      sub_10001932C(v27);
      sub_100019C28();
      swift_bridgeObjectRetain();
      sub_1000163D4();
      sub_10001731C();
      swift_bridgeObjectRelease();
      if (v1)
      {
        sub_10000E940();
        uint64_t v28 = (void *)Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        BOOL v30 = sub_100016884(v29);
        uint64_t v31 = v0[40];
        if (v30)
        {
          sub_100014490();
          uint64_t v46 = sub_1000170C8();
          uint64_t v32 = sub_10001654C(4.8751e-34);
          uint64_t v34 = sub_10001A6DC(v32, v33, &v46);
          sub_100017678(v34);
          sub_10003D2E4(v31);
          sub_10000B408((void *)&_mh_execute_header, v35, v36, "sending events for session: %{public}s");
          sub_10001AA4C();
          sub_100009474();
          sub_100009474();
        }
        else
        {
          sub_10003D2E4(v0[40]);
        }

        uint64_t v39 = qword_1000AF3B8;
        v0[53] = qword_1000AF3B8;
        if (v39)
        {
          sub_10001164C();
          uint64_t v40 = swift_task_alloc();
          unint64_t v41 = (void *)sub_1000486DC(v40);
          *unint64_t v41 = v42;
          v41[1] = sub_1000455D0;
          sub_1000487B4();
          sub_100016868();
          __asm { BR              X1 }
        }
        goto LABEL_26;
      }
      sub_100009528();
      sub_100014020();
      uint64_t v24 = swift_bridgeObjectRelease();
      uint64_t v37 = qword_1000AF3B0;
      v0[52] = qword_1000AF3B0;
      if (v37)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10000E934();
        sub_100016868();
        return _swift_task_switch(v24, v25, v26);
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return _swift_task_switch(v24, v25, v26);
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_100019A28();
  uint64_t v15 = qword_1000AF3A0;
  v0[72] = qword_1000AF3A0;
  if (!v15) {
    goto LABEL_24;
  }
  sub_1000486E8();
  swift_retain();
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_10000E87C(v16);
  *uint64_t v17 = v18;
  v17[1] = sub_1000468E8;
  sub_100015188();
  sub_100016868();
  return sub_1000429B8(v19, v20);
}

uint64_t sub_1000481EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20)
{
  sub_10000E6A4();
  a19 = v21;
  a20 = v22;
  sub_100011540();
  a18 = v20;
  sub_10003D2E4(v20[34]);
  uint64_t v23 = v20[74];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v24 = (void *)Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (sub_10001A5E4(v25))
  {
    sub_100014490();
    a9 = swift_slowAlloc();
    sub_10001A558(4.8149e-34);
    uint64_t v26 = Error.localizedDescription.getter();
    uint64_t v28 = sub_10001227C(v26, v27, &a9);
    sub_1000486F4(v28);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001A2A4((void *)&_mh_execute_header, v29, v30, "error running submission: %s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100015F90();
  if (v23)
  {
    sub_10001A900();
LABEL_6:
    sub_100048770(v31);
    uint64_t v35 = qword_1000AF3B0;
    v20[78] = qword_1000AF3B0;
    if (v35)
    {
      sub_100014250(*(void *)(v32 + 48));
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10000E934();
      sub_100016198();
      return _swift_task_switch(v32, v33, v34);
    }
    __break(1u);
LABEL_29:
    __break(1u);
    return _swift_task_switch(v32, v33, v34);
  }
  sub_10001A41C();
  if (!v40 & v39)
  {
    if (v37[8]) {
      goto LABEL_13;
    }
    if (v38 < 0xC0) {
      goto LABEL_24;
    }
    if (v37[9]) {
      goto LABEL_13;
    }
    if (v38 < 0x100) {
      goto LABEL_24;
    }
    if (v37[10]) {
      goto LABEL_13;
    }
    if (v38 < 0x140) {
      goto LABEL_24;
    }
    if (v37[11])
    {
LABEL_13:
      sub_1000486C4();
      goto LABEL_6;
    }
    unint64_t v41 = v38 >> 6;
    uint64_t v42 = 12;
    while (v42 - 7 < v41)
    {
      if (v37[v42++]) {
        goto LABEL_13;
      }
    }
  }
LABEL_24:
  uint64_t v32 = swift_release();
  uint64_t v44 = qword_1000AF3B0;
  v20[81] = qword_1000AF3B0;
  if (!v44) {
    goto LABEL_29;
  }
  sub_10004879C();
  swift_bridgeObjectRelease();
  uint64_t v45 = swift_task_alloc();
  uint64_t v46 = (void *)sub_1000152E4(v45);
  *uint64_t v46 = v47;
  v46[1] = sub_100046E34;
  sub_100016198();
  return sub_10003B14C();
}

uint64_t type metadata accessor for SubmitEagerEventsActivity()
{
  return self;
}

uint64_t sub_1000484C4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100048550;
  return sub_100044CE8();
}

uint64_t sub_100048550()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_10000935C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_100048618()
{
  return sub_1000448E4();
}

uint64_t sub_100048630()
{
  return 0x652D74696D627573;
}

unint64_t sub_100048650(uint64_t a1)
{
  unint64_t result = sub_100048678();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100048678()
{
  unint64_t result = qword_1000A7730;
  if (!qword_1000A7730)
  {
    type metadata accessor for SubmitEagerEventsActivity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7730);
  }
  return result;
}

uint64_t sub_1000486DC(uint64_t result)
{
  *(void *)(v1 + 432) = result;
  return result;
}

uint64_t sub_1000486F4(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10004871C()
{
  return swift_arrayDestroy();
}

uint64_t sub_100048738()
{
  *(_WORD *)(v0 + 12) = 2082;
  return swift_getErrorValue();
}

void sub_10004875C()
{
  v1[58] = v0;
  v1[59] = *(void *)(v1[41] + 56);
}

void sub_100048770(uint64_t a1@<X8>)
{
  *(void *)(v2 + 616) = v1;
  *(void *)(v2 + 608) = a1;
}

uint64_t sub_10004877C()
{
  return swift_arrayDestroy();
}

uint64_t sub_10004879C()
{
  return swift_retain();
}

uint64_t sub_1000487B4()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_1000487D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF300);
  sub_100012884(v0, (uint64_t)qword_1000AF300);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100048858()
{
  swift_defaultActor_initialize();
  id v1 = [self ephemeralSessionConfiguration];
  [v1 setAllowsCellularAccess:0];
  [v1 setAllowsConstrainedNetworkAccess:0];
  [v1 setAllowsExpensiveNetworkAccess:0];
  [v1 setHTTPCookieAcceptPolicy:1];
  [v1 setHTTPCookieStorage:0];
  [v1 setRequestCachePolicy:1];
  [v1 setTimeoutIntervalForRequest:5.0];
  [v1 setURLCache:0];
  [v1 setURLCredentialStorage:0];
  [v1 setWaitsForConnectivity:0];
  uint64_t v2 = self;
  *(void *)(v0 + 112) = [v2 sessionWithConfiguration:v1];
  [v1 setAllowsCellularAccess:1];
  [v1 setAllowsConstrainedNetworkAccess:1];
  [v1 setAllowsExpensiveNetworkAccess:1];
  id v3 = [v2 sessionWithConfiguration:v1];

  *(void *)(v0 + 120) = v3;
  return v0;
}

uint64_t sub_100048A00@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  if (qword_1000A6080 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 != 1) {
    goto LABEL_8;
  }
  if (qword_1000A6088 != -1) {
    swift_once();
  }
  id v5 = (id)qword_1000AF3D0;
  NSString v6 = String._bridgeToObjectiveC()();
  unsigned int v7 = [v5 BOOLForKey:v6];

  if (v7)
  {
    uint64_t v8 = type metadata accessor for MockHTTPSending();
    swift_allocObject();
    uint64_t result = sub_100034450(a1 & 1);
    a2[3] = v8;
    a2[4] = (uint64_t)&off_10009F7B8;
    *a2 = result;
  }
  else
  {
LABEL_8:
    unint64_t v10 = sub_100049264();
    if (a1) {
      uint64_t v11 = *(void *)(v2 + 120);
    }
    else {
      uint64_t v11 = *(void *)(v2 + 112);
    }
    a2[3] = v10;
    a2[4] = (uint64_t)&off_10009F788;
    *a2 = v11;
    return _objc_retain_x1();
  }
  return result;
}

uint64_t sub_100048B7C()
{
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  NSString v6 = (void (*)(uint64_t, uint64_t))v5[24];
  uint64_t v7 = v5[18];
  uint64_t v8 = v5[15];
  uint64_t v9 = *v1;
  sub_10000935C();
  *unint64_t v10 = v9;
  *(void *)(v3 + 240) = v0;
  swift_task_dealloc();
  v6(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
  {
    uint64_t v11 = *(void *)(v3 + 80);
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_1000490A4;
    uint64_t v13 = v11;
  }
  else
  {
    uint64_t v13 = *(void *)(v3 + 80);
    uint64_t v12 = sub_100048D34;
  }
  return _swift_task_switch(v12, v13, 0);
}

uint64_t sub_100048D34()
{
  (*(void (**)(void, void))(v0 + 192))(*(void *)(v0 + 160), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = sub_100019A54();
  return v2(v1);
}

uint64_t sub_100048DEC()
{
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  NSString v6 = (void (*)(uint64_t, uint64_t))v5[34];
  uint64_t v7 = v5[17];
  uint64_t v8 = v5[15];
  uint64_t v9 = *v1;
  sub_10000935C();
  *unint64_t v10 = v9;
  v3[37] = v0;
  swift_task_dealloc();
  v6(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
  {
    uint64_t v11 = v3[10];
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_10004914C, v11, 0);
  }
  else
  {
    uint64_t v12 = v3[33];
    uint64_t v13 = v3[31];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v14 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v14(v12, v13);
  }
}

uint64_t sub_100049004()
{
  swift_release();
  sub_100019C50();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000490A4()
{
  (*(void (**)(void, void))(v0 + 192))(*(void *)(v0 + 160), *(void *)(v0 + 120));
  sub_100019C50();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004914C()
{
  sub_100019C50();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000491E4()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100049214()
{
  sub_1000491E4();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SubmissionCoordinator()
{
  return self;
}

unint64_t sub_100049264()
{
  unint64_t result = qword_1000A7820;
  if (!qword_1000A7820)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A7820);
  }
  return result;
}

unsigned char *sub_1000492A4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100049370);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for SessionType()
{
}

uint64_t sub_1000493A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100016CE0((uint64_t *)&unk_1000A8A60);
  uint64_t v7 = sub_100009374(v6);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CachedStorebag(0);
  sub_10000948C();
  __chkstk_darwin(v10);
  if (_s10RTCUtility9XPCObjectOwet_0(a1, 1, v11) == 1)
  {
    sub_10001739C(a1, (uint64_t *)&unk_1000A8A60);
    sub_100004218(a2, a3, (uint64_t *)&unk_1000A78B0, (void (*)(void))type metadata accessor for CachedStorebag);
    swift_bridgeObjectRelease();
    return sub_10001739C((uint64_t)v9, (uint64_t *)&unk_1000A8A60);
  }
  else
  {
    uint64_t v13 = sub_100013418();
    sub_100013F0C(v13, v14, v15, (uint64_t *)&unk_1000A78B0, (void (*)(void))type metadata accessor for CachedStorebag);
    return swift_bridgeObjectRelease();
  }
}

Swift::Int sub_100049538(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10004957C()
{
  return sub_1000495B8();
}

Swift::Int sub_10004959C()
{
  return sub_1000495B8();
}

Swift::Int sub_1000495B8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100049600(char a1)
{
  sub_10000E888();
  sub_100049B00((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_100049640(uint64_t a1)
{
  return sub_1000496A0(a1, (void (*)(uint64_t))sub_10004DB84);
}

Swift::Int sub_100049658(uint64_t a1)
{
  return sub_1000496A0(a1, (void (*)(uint64_t))sub_10004F234);
}

Swift::Int sub_100049670(uint64_t a1)
{
  return sub_1000496A0(a1, (void (*)(uint64_t))sub_100050654);
}

Swift::Int sub_100049688(uint64_t a1)
{
  return sub_1000496A0(a1, (void (*)(uint64_t))sub_1000786C8);
}

Swift::Int sub_1000496A0(uint64_t a1, void (*a2)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_1000496F0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000497FC()
{
  return String.hash(into:)();
}

uint64_t sub_10004981C()
{
  return String.hash(into:)();
}

uint64_t sub_100049838()
{
  sub_10004F234();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004988C(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 2:
      sub_10000E958();
      break;
    case 6:
    case 7:
      sub_10001A918();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000499B4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100049B00(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 3:
      sub_10000E958();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

void sub_100049BB8(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100049BE4(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_100049C2C(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_100049C74(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  sub_100049B00((uint64_t)v4, a2);
  return Hasher._finalize()();
}

Swift::Int sub_100049CB8(uint64_t a1, uint64_t a2)
{
  return sub_100049DA0(a1, a2, (void (*)(uint64_t))sub_1000786C8);
}

Swift::Int sub_100049CD0(uint64_t a1, uint64_t a2)
{
  return sub_100049DA0(a1, a2, (void (*)(uint64_t))sub_100050654);
}

Swift::Int sub_100049CE8(uint64_t a1, uint64_t a2)
{
  return sub_100049DA0(a1, a2, (void (*)(uint64_t))sub_10004F234);
}

Swift::Int sub_100049D00()
{
  return sub_100049D3C();
}

Swift::Int sub_100049D1C()
{
  return sub_100049D3C();
}

Swift::Int sub_100049D3C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100049D88(uint64_t a1, uint64_t a2)
{
  return sub_100049DA0(a1, a2, (void (*)(uint64_t))sub_10004DB84);
}

Swift::Int sub_100049DA0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_100049DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for EventValue();
  sub_100014C1C();
  __chkstk_darwin(v4);
  sub_100014CE4();
  uint64_t v7 = (char *)(v5 - v6);
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - v10;
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  sub_100014BA8();
  if ((v12 & 1) == 0) {
    return 0;
  }
  sub_100016DC4();
  sub_100013418();
  sub_100016DC4();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 2)
  {
    if (result == 1)
    {
      uint64_t v14 = *(void *)v7;
    }
    else
    {
      sub_100013AD8((uint64_t)v11, (void (*)(void))type metadata accessor for EventValue);
      uint64_t v14 = 0;
      uint64_t v11 = v7;
    }
    goto LABEL_10;
  }
  uint64_t v14 = *(void *)v7;
  if ((*(void *)v7 & 0x8000000000000000) == 0)
  {
LABEL_10:
    sub_100013AD8((uint64_t)v11, (void (*)(void))type metadata accessor for EventValue);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t XPCMessage.MessageType.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_100049FCC(unint64_t result)
{
  if (result >= 3) {
    return 3;
  }
  return result;
}

Swift::Int sub_100049FDC(uint64_t a1)
{
  return sub_100049BE4(a1, *v1);
}

unint64_t sub_100049FE4@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100049FCC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004A010@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = XPCMessage.MessageType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_10004A040()
{
  unint64_t result = qword_1000A7830;
  if (!qword_1000A7830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7830);
  }
  return result;
}

uint64_t sub_10004A08C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for EventValue();
  sub_100014C1C();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100014CE4();
  __chkstk_darwin(v11);
  sub_1000168B4();
  __chkstk_darwin(v12);
  uint64_t v72 = (char *)&v60 - v13;
  sub_1000124A8(a1, (uint64_t)v79);
  if (sub_100019C6C())
  {
    CFBooleanRef v14 = v77;
    *a2 = (uint64_t)v76;
    a2[1] = (uint64_t)v14;
    sub_1000174B0();
    goto LABEL_16;
  }
  uint64_t v71 = v3;
  sub_10002E958(0, &qword_1000A7838);
  if (sub_100019C6C())
  {
    CFBooleanRef v15 = v76;
    if (kCFBooleanTrue) {
      BOOL v16 = v76 == kCFBooleanTrue;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {

      *(unsigned char *)a2 = 1;
      goto LABEL_15;
    }

    if (kCFBooleanFalse && v15 == kCFBooleanFalse)
    {
      *(unsigned char *)a2 = 0;
LABEL_15:
      sub_1000174B0();
      goto LABEL_16;
    }
  }
  if (sub_100019C6C() || sub_100019C6C() || sub_100019C6C())
  {
    *a2 = (uint64_t)v76;
    sub_1000174B0();
    goto LABEL_16;
  }
  sub_100016CE0(&qword_1000A7840);
  int v18 = swift_dynamicCast();
  uint64_t v68 = v9;
  if (!v18)
  {
    sub_100016CE0((uint64_t *)&unk_1000A7848);
    if (!swift_dynamicCast())
    {
      sub_10001E364();
      swift_allocError();
      swift_willThrow();
      return sub_10001610C((uint64_t)v79);
    }
    uint64_t v53 = a2;
    uint64_t v72 = (char *)v7;
    uint64_t v54 = v74;
    uint64_t v55 = sub_10001EEBC(0, *(void *)(v74 + 16), 0, (uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v56 = *(void *)(v54 + 16);
    if (v56)
    {
      uint64_t v57 = v54 + 32;
      while (1)
      {
        sub_1000124A8(v57, (uint64_t)&v76);
        sub_10004A08C(&v76);
        if (v2) {
          break;
        }
        unint64_t v59 = *(void *)(v55 + 16);
        unint64_t v58 = *(void *)(v55 + 24);
        if (v59 >= v58 >> 1) {
          uint64_t v55 = sub_10001EEBC(v58 > 1, v59 + 1, 1, v55);
        }
        *(void *)(v55 + 16) = v59 + 1;
        sub_1000093B0();
        sub_100013418();
        sub_10001610C((uint64_t)&v76);
        v57 += 32;
        if (!--v56) {
          goto LABEL_66;
        }
      }
      sub_10001610C((uint64_t)&v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_10001610C((uint64_t)v79);
    }
LABEL_66:
    swift_bridgeObjectRelease();
    uint64_t *v53 = v55;
LABEL_16:
    swift_storeEnumTagMultiPayload();
    return sub_10001610C((uint64_t)v79);
  }
  uint64_t v19 = v80;
  uint64_t v20 = Dictionary.init(minimumCapacity:)();
  int64_t v21 = 0;
  uint64_t v62 = v19 + 64;
  uint64_t v65 = v19;
  sub_100017100();
  unint64_t v24 = v23 & v22;
  uint64_t v64 = v75;
  uint64_t v67 = &v78;
  int64_t v63 = (unint64_t)(v25 + 63) >> 6;
  int64_t v61 = v63 - 1;
  uint64_t v66 = a2;
  if (!v24) {
    goto LABEL_24;
  }
LABEL_22:
  uint64_t v70 = (v24 - 1) & v24;
  unint64_t v26 = __clz(__rbit64(v24)) | (v21 << 6);
  while (2)
  {
    uint64_t v27 = *(void *)(v65 + 56);
    uint64_t v28 = (void *)(*(void *)(v65 + 48) + 16 * v26);
    uint64_t v29 = v28[1];
    *(void *)&long long v74 = *v28;
    *((void *)&v74 + 1) = v29;
    sub_1000124A8(v27 + 32 * v26, (uint64_t)v64);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10004C67C((uint64_t)&v74, (uint64_t)&v76, &qword_1000A7858);
      CFBooleanRef v35 = v77;
      if (!v77)
      {
        swift_release();
        *a2 = v20;
        sub_1000174B0();
        goto LABEL_16;
      }
      int64_t v69 = v21;
      CFBooleanRef v36 = v76;
      sub_10004C49C(v67, &v74);
      sub_10004A08C(&v74);
      if (v4)
      {
        swift_bridgeObjectRelease();
        sub_10001610C((uint64_t)&v74);
        swift_bridgeObjectRelease();
        swift_release();
        return sub_10001610C((uint64_t)v79);
      }
      sub_100017334();
      sub_100013418();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v73 = v20;
      unint64_t v38 = sub_100014BA8();
      uint64_t v40 = *(void *)(v20 + 16);
      BOOL v41 = (v39 & 1) == 0;
      Swift::Int v42 = v40 + v41;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      unint64_t v43 = v38;
      char v44 = v39;
      sub_100016CE0((uint64_t *)&unk_1000A7860);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42))
      {
        unint64_t v45 = sub_100014BA8();
        if ((v44 & 1) != (v46 & 1)) {
          goto LABEL_72;
        }
        unint64_t v43 = v45;
      }
      uint64_t v20 = v73;
      if (v44)
      {
        sub_10004CFC0();
        sub_10004C6D0();
      }
      else
      {
        *(void *)(v73 + 8 * (v43 >> 6) + 64) |= 1 << v43;
        uint64_t v47 = (CFBooleanRef *)(*(void *)(v20 + 48) + 16 * v43);
        *uint64_t v47 = v36;
        v47[1] = v35;
        sub_10004CFC0();
        sub_100013418();
        uint64_t v48 = *(void *)(v20 + 16);
        BOOL v49 = __OFADD__(v48, 1);
        uint64_t v50 = v48 + 1;
        if (v49) {
          goto LABEL_69;
        }
        *(void *)(v20 + 16) = v50;
        swift_bridgeObjectRetain();
      }
      uint64_t v4 = 0;
      int64_t v21 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001610C((uint64_t)&v74);
      a2 = v66;
      unint64_t v24 = v70;
      if (v70) {
        goto LABEL_22;
      }
LABEL_24:
      int64_t v30 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_70;
      }
      if (v30 < v63)
      {
        if (*(void *)(v62 + 8 * v30)) {
          goto LABEL_27;
        }
        v21 += 2;
        if (v30 + 1 >= v63)
        {
          int64_t v21 = v30;
          goto LABEL_32;
        }
        if (*(void *)(v62 + 8 * v21)) {
          goto LABEL_27;
        }
        if (v30 + 2 < v63) {
          break;
        }
      }
LABEL_32:
      uint64_t v70 = 0;
      memset(v75, 0, sizeof(v75));
      long long v74 = 0u;
    }
    if (*(void *)(v62 + 8 * (v30 + 2))) {
      goto LABEL_27;
    }
    int64_t v51 = v30 + 3;
    if (v30 + 3 >= v63)
    {
      int64_t v21 = v30 + 2;
      goto LABEL_32;
    }
    if (*(void *)(v62 + 8 * v51))
    {
LABEL_27:
      sub_10001A7D4();
      uint64_t v70 = v32 & v31;
      unint64_t v26 = v34 + (v33 << 6);
      int64_t v21 = v33;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v52 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    if (v52 >= v63)
    {
      int64_t v21 = v61;
      goto LABEL_32;
    }
    ++v51;
    if (*(void *)(v62 + 8 * v52)) {
      goto LABEL_27;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10004A854(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  type metadata accessor for UUID();
  sub_100014C1C();
  uint64_t v51 = v4;
  uint64_t v52 = v3;
  __chkstk_darwin(v3);
  sub_1000166B4(v5, v49);
  type metadata accessor for EventValue();
  sub_10000948C();
  __chkstk_darwin(v6);
  sub_100014CE4();
  sub_10004CFD8();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v53 = (char *)&v49 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v49 - v12;
  __chkstk_darwin(v11);
  sub_1000168B4();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v49 - v16);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (uint64_t *)((char *)&v49 - v19);
  __chkstk_darwin(v18);
  uint64_t v22 = (uint64_t *)((char *)&v49 - v21);
  uint64_t v23 = sub_100016CE0((uint64_t *)&unk_1000A79A0);
  uint64_t v24 = sub_100009374(v23);
  __chkstk_darwin(v24);
  sub_10001615C();
  uint64_t v27 = v26 - v25;
  uint64_t v29 = (double *)(v26 - v25 + *(int *)(v28 + 56));
  sub_100016DC4();
  sub_100016DC4();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100016DC4();
      if (sub_1000161F0() != 1) {
        goto LABEL_31;
      }
      uint64_t v34 = *v20;
      goto LABEL_13;
    case 2u:
      sub_100016DC4();
      if (sub_1000161F0() != 2) {
        goto LABEL_31;
      }
      uint64_t v34 = *v17;
LABEL_13:
      BOOL v35 = v34 == *(void *)v29;
      goto LABEL_16;
    case 3u:
      sub_100016DC4();
      if (sub_1000161F0() != 3) {
        goto LABEL_31;
      }
      BOOL v35 = *v2 == *v29;
LABEL_16:
      char v36 = v35;
      goto LABEL_28;
    case 4u:
      sub_100016DC4();
      if (sub_1000161F0() != 4) {
        goto LABEL_31;
      }
      char v37 = *v13 ^ *(unsigned char *)v29;
      sub_100013AD8(v27, (void (*)(void))type metadata accessor for EventValue);
      char v36 = v37 ^ 1;
      return v36 & 1;
    case 5u:
      unint64_t v38 = v53;
      sub_100016DC4();
      if (sub_1000161F0() != 5)
      {
        (*(void (**)(char *, uint64_t))(v51 + 8))(v38, v52);
        goto LABEL_31;
      }
      uint64_t v40 = v50;
      uint64_t v39 = v51;
      uint64_t v41 = v52;
      (*(void (**)(uint64_t, double *, uint64_t))(v51 + 32))(v50, v29, v52);
      char v36 = static UUID.== infix(_:_:)();
      Swift::Int v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v42(v40, v41);
      v42((uint64_t)v38, v41);
LABEL_28:
      sub_100013AD8(v27, (void (*)(void))type metadata accessor for EventValue);
      return v36 & 1;
    case 6u:
      sub_100016DC4();
      if (sub_1000161F0() != 6) {
        goto LABEL_29;
      }
      uint64_t v43 = sub_100014CD8();
      char v45 = sub_10004BBB0(v43, v44);
      goto LABEL_27;
    case 7u:
      sub_100016DC4();
      if (sub_1000161F0() != 7) {
        goto LABEL_29;
      }
      uint64_t v46 = sub_100014CD8();
      char v45 = sub_10004BD3C(v46, v47);
LABEL_27:
      char v36 = v45;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_28;
    default:
      sub_100016DC4();
      uint64_t v31 = *v22;
      uint64_t v30 = v22[1];
      if (sub_1000161F0())
      {
LABEL_29:
        swift_bridgeObjectRelease();
LABEL_31:
        sub_10001739C(v27, (uint64_t *)&unk_1000A79A0);
        goto LABEL_32;
      }
      if (v31 == *(void *)v29 && v30 == *((void *)v29 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v33 & 1) == 0)
        {
          sub_100013AD8(v27, (void (*)(void))type metadata accessor for EventValue);
LABEL_32:
          char v36 = 0;
          return v36 & 1;
        }
      }
      sub_100013AD8(v27, (void (*)(void))type metadata accessor for EventValue);
      char v36 = 1;
      return v36 & 1;
  }
}

uint64_t sub_10004AE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A7EE0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100016CE0(&qword_1000A6740);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)swift_unknownObjectRetain();
  XPCObject.init(_:)(v10, (uint64_t)v6);
  uint64_t v11 = type metadata accessor for XPCObject();
  uint64_t result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v6, 1, v11);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_100012DA0(v6);
    uint64_t v13 = type metadata accessor for EventValue();
    uint64_t result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v9, 1, v13);
    if (result != 1)
    {
      sub_10001B2AC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001EEBC);
      uint64_t v14 = *(void *)(*(void *)a3 + 16);
      sub_10001B24C(v14, (uint64_t (*)(BOOL))sub_10001EEBC);
      *(void *)(*(void *)a3 + 16) = v14 + 1;
      sub_100013418();
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10004B000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t sub_10004B058()
{
  uint64_t v0 = sub_100016CE0(&qword_1000A7EE0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100016CE0(&qword_1000A6740);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = type metadata accessor for EventValue();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = String.init(cString:)();
  uint64_t v14 = v13;
  uint64_t v15 = (void *)swift_unknownObjectRetain();
  XPCObject.init(_:)(v15, (uint64_t)v2);
  uint64_t v16 = type metadata accessor for XPCObject();
  uint64_t result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v2, 1, v16);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_100012DA0(v2);
    uint64_t result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v8, 1, v9);
    if (result != 1)
    {
      sub_100013418();
      sub_100016DC4();
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v6, 0, 1, v9);
      sub_100013D4C((uint64_t)v6, v12, v14);
      sub_100013AD8((uint64_t)v11, (void (*)(void))type metadata accessor for EventValue);
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10004B284()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_10004B2C4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10004B2F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = XPCIncomingConnection.init(conn:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10004B31C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10004B284();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10004B344(uint64_t a1)
{
  unint64_t v2 = sub_10004C630();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004B380(uint64_t a1)
{
  unint64_t v2 = sub_10004C630();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10004B3DC()
{
  return sub_100011410();
}

unint64_t sub_10004B3E8()
{
  return 0xD000000000000021;
}

Class sub_10004B408()
{
  uint64_t v3 = sub_100016CE0(&qword_1000A6F68);
  uint64_t v4 = sub_100009374(v3);
  __chkstk_darwin(v4);
  sub_100016584();
  __chkstk_darwin(v5);
  uint64_t v86 = (char *)&v79 - v6;
  uint64_t v7 = type metadata accessor for UUID();
  sub_100014C1C();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_10001403C();
  sub_100014C1C();
  uint64_t v85 = v11;
  __chkstk_darwin(v12);
  sub_1000163F0();
  __chkstk_darwin(v13);
  sub_10004CFD8();
  __chkstk_darwin(v14);
  uint64_t v16 = (unsigned __int8 *)&v79 - v15;
  sub_100016DC4();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      return (Class)[objc_allocWithZone((Class)NSNumber) initWithLongLong:*(void *)v16];
    case 2u:
      return (Class)[objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:*(void *)v16];
    case 3u:
      return (Class)[objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)v16];
    case 4u:
      return (Class)[objc_allocWithZone((Class)NSNumber) initWithBool:*v16];
    case 5u:
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 32))(v0, v16, v7);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0, v7);
      return isa;
    case 6u:
      uint64_t v71 = *(void *)v16;
      unint64_t v90 = (unint64_t)_swiftEmptyArrayStorage;
      sub_10004C7C8(*(void *)(v71 + 16));
      specialized Array._endMutation()();
      uint64_t v72 = *(void *)(v71 + 16);
      if (v72)
      {
        sub_1000093B0();
        uint64_t v74 = v71 + v73;
        uint64_t v76 = *(void *)(v75 + 72);
        do
        {
          uint64_t v77 = sub_100016DC4();
          sub_10004B408(v77);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          sub_100013AD8(v1, (void (*)(void))type metadata accessor for EventValue);
          v74 += v76;
          --v72;
        }
        while (v72);
      }
      swift_bridgeObjectRelease();
      sub_10002E958(0, (unint64_t *)&qword_1000A78C0);
      uint64_t v17 = Array._bridgeToObjectiveC()().super.isa;
      goto LABEL_48;
    case 7u:
      uint64_t v20 = *(void *)v16;
      uint64_t v81 = sub_10002E958(0, (unint64_t *)&qword_1000A78C0);
      uint64_t v21 = (void *)Dictionary.init(minimumCapacity:)();
      int64_t v87 = 0;
      uint64_t v82 = v20 + 64;
      uint64_t v84 = v20;
      sub_100017100();
      unint64_t v24 = v23 & v22;
      int64_t v83 = (unint64_t)(v25 + 63) >> 6;
      int64_t v80 = v83 - 1;
      uint64_t v26 = (uint64_t *)&unk_1000A78A0;
      uint64_t v27 = (uint64_t *)v86;
      if ((v23 & v22) == 0) {
        goto LABEL_22;
      }
      break;
    default:
      uint64_t v17 = (objc_class *)String._bridgeToObjectiveC()();
LABEL_48:
      Class isa = v17;
      goto LABEL_49;
  }
LABEL_20:
  unint64_t v49 = __clz(__rbit64(v24));
  uint64_t v50 = (v24 - 1) & v24;
  unint64_t v51 = v49 | (v87 << 6);
LABEL_21:
  uint64_t v52 = (void *)(*(void *)(v84 + 48) + 16 * v51);
  uint64_t v53 = v52[1];
  *unint64_t v2 = *v52;
  v2[1] = v53;
  sub_100016CE0(v26);
  sub_100016DC4();
  sub_10001AA68();
  _s10RTCUtility9XPCObjectOwst_0(v54, v55, v56, v57);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_10004C67C((uint64_t)v2, (uint64_t)v27, &qword_1000A6F68);
    uint64_t v70 = sub_100016CE0(v26);
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v27, 1, v70) == 1) {
      break;
    }
    unint64_t v88 = v50;
    uint64_t v28 = v26;
    uint64_t v29 = v2;
    uint64_t v30 = *v27;
    uint64_t v31 = v27[1];
    uint64_t v32 = sub_100013418();
    uint64_t v33 = sub_10004B408(v32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v90 = (unint64_t)v21;
    unint64_t v35 = sub_100014BA8();
    uint64_t v37 = v21[2];
    BOOL v38 = (v36 & 1) == 0;
    Swift::Int v39 = v37 + v38;
    if (__OFADD__(v37, v38))
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x10004BB90);
    }
    unint64_t v40 = v35;
    char v41 = v36;
    sub_100016CE0(&qword_1000A78C8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v39))
    {
      unint64_t v42 = sub_100014BA8();
      if ((v41 & 1) != (v43 & 1)) {
        goto LABEL_55;
      }
      unint64_t v40 = v42;
    }
    uint64_t v21 = (void *)v90;
    if (v41)
    {
      uint64_t v44 = *(void *)(v90 + 56);

      *(void *)(v44 + 8 * v40) = v33;
    }
    else
    {
      *(void *)(v90 + 8 * (v40 >> 6) + 64) |= 1 << v40;
      char v45 = (void *)(v21[6] + 16 * v40);
      *char v45 = v30;
      v45[1] = v31;
      *(void *)(v21[7] + 8 * v40) = v33;
      uint64_t v46 = v21[2];
      BOOL v47 = __OFADD__(v46, 1);
      uint64_t v48 = v46 + 1;
      if (v47) {
        goto LABEL_52;
      }
      v21[2] = v48;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100013AD8(v89, (void (*)(void))type metadata accessor for EventValue);
    unint64_t v2 = v29;
    uint64_t v27 = (uint64_t *)v86;
    uint64_t v26 = v28;
    unint64_t v24 = v88;
    if (v88) {
      goto LABEL_20;
    }
LABEL_22:
    int64_t v58 = v87 + 1;
    if (__OFADD__(v87, 1)) {
      goto LABEL_53;
    }
    if (v58 < v83)
    {
      if (*(void *)(v82 + 8 * v58)) {
        goto LABEL_25;
      }
      int64_t v63 = v87 + 2;
      ++v87;
      if (v58 + 1 < v83)
      {
        if (*(void *)(v82 + 8 * v63)) {
          goto LABEL_25;
        }
        int64_t v87 = v58 + 1;
        if (v58 + 2 < v83)
        {
          if (*(void *)(v82 + 8 * (v58 + 2))) {
            goto LABEL_25;
          }
          int64_t v64 = v58 + 3;
          int64_t v87 = v58 + 2;
          if (v58 + 3 < v83)
          {
            if (*(void *)(v82 + 8 * v64))
            {
LABEL_25:
              sub_10001A7D4();
              uint64_t v50 = v60 & v59;
              unint64_t v51 = v62 + (v61 << 6);
              int64_t v87 = v61;
              goto LABEL_21;
            }
            while (1)
            {
              int64_t v65 = v64 + 1;
              if (__OFADD__(v64, 1)) {
                goto LABEL_54;
              }
              if (v65 >= v83) {
                break;
              }
              ++v64;
              if (*(void *)(v82 + 8 * v65)) {
                goto LABEL_25;
              }
            }
            int64_t v87 = v80;
          }
        }
      }
    }
    sub_100016CE0(v26);
    sub_10001A580();
    _s10RTCUtility9XPCObjectOwst_0(v66, v67, v68, v69);
    uint64_t v50 = 0;
  }
  swift_release();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_49:
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t sub_10004BBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue() - 8;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_100016DC4();
        sub_100016DC4();
        char v15 = sub_10004A854(v10, v7);
        sub_100013AD8((uint64_t)v7, (void (*)(void))type metadata accessor for EventValue);
        sub_100013AD8((uint64_t)v10, (void (*)(void))type metadata accessor for EventValue);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10004BD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  char v41 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - v7;
  uint64_t v9 = sub_100016CE0(&qword_1000A6F68);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  unint64_t v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = __chkstk_darwin(v10);
  char v15 = (char *)&v36 - v14;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v42 = 0;
  uint64_t v40 = a1;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v38 = a1 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v39 = (unint64_t)(v17 + 63) >> 6;
  int64_t v37 = v39 - 1;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v42 << 6);
LABEL_8:
      uint64_t v22 = (void *)(*(void *)(v40 + 48) + 16 * v21);
      uint64_t v23 = v22[1];
      *unint64_t v12 = *v22;
      v12[1] = v23;
      uint64_t v24 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
      sub_100016DC4();
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v12, 0, 1, v24);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    int64_t v25 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v25 < v39)
    {
      unint64_t v26 = *(void *)(v38 + 8 * v25);
      if (v26) {
        goto LABEL_12;
      }
      int64_t v27 = v42 + 2;
      ++v42;
      if (v25 + 1 < v39)
      {
        unint64_t v26 = *(void *)(v38 + 8 * v27);
        if (v26) {
          goto LABEL_15;
        }
        int64_t v42 = v25 + 1;
        if (v25 + 2 < v39)
        {
          unint64_t v26 = *(void *)(v38 + 8 * (v25 + 2));
          if (v26)
          {
            v25 += 2;
            goto LABEL_12;
          }
          int64_t v42 = v25 + 2;
          if (v25 + 3 < v39)
          {
            unint64_t v26 = *(void *)(v38 + 8 * (v25 + 3));
            if (v26)
            {
              v25 += 3;
              goto LABEL_12;
            }
            int64_t v27 = v25 + 4;
            int64_t v42 = v25 + 3;
            if (v25 + 4 < v39) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v28 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v12, 1, 1, v28);
    unint64_t v19 = 0;
LABEL_30:
    sub_10004C67C((uint64_t)v12, (uint64_t)v15, &qword_1000A6F68);
    uint64_t v29 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
    int v30 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v15, 1, v29);
    BOOL v31 = v30 == 1;
    if (v30 == 1) {
      return v31;
    }
    sub_100013418();
    sub_100014BA8();
    char v33 = v32;
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
    {
      sub_100013AD8((uint64_t)v8, (void (*)(void))type metadata accessor for EventValue);
      return 0;
    }
    uint64_t v34 = (uint64_t)v41;
    sub_100016DC4();
    char v35 = sub_10004A854(v34, v8);
    sub_100013AD8(v34, (void (*)(void))type metadata accessor for EventValue);
    uint64_t result = sub_100013AD8((uint64_t)v8, (void (*)(void))type metadata accessor for EventValue);
    if ((v35 & 1) == 0) {
      return v31;
    }
  }
  unint64_t v26 = *(void *)(v38 + 8 * v27);
  if (v26)
  {
LABEL_15:
    int64_t v25 = v27;
LABEL_12:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v21 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v42 = v25;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v39)
    {
      int64_t v42 = v37;
      goto LABEL_29;
    }
    unint64_t v26 = *(void *)(v38 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10004C1B8()
{
  return sub_10001B2AC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001EABC);
}

uint64_t sub_10004C1D0()
{
  return sub_10001B2AC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001EE74);
}

uint64_t sub_10004C1E8(uint64_t a1)
{
  return sub_10001B24C(a1, (uint64_t (*)(BOOL))sub_10001EABC);
}

uint64_t sub_10004C200(uint64_t a1)
{
  return sub_10001B24C(a1, (uint64_t (*)(BOOL))sub_10001EE74);
}

unint64_t sub_10004C218(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 + 1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10004C728(a1, v2);
}

uint64_t sub_10004C288()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain();
  unint64_t v2 = sub_100014BA8();
  char v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v6 = *v0;
  *uint64_t v0 = 0x8000000000000000;
  Swift::Int v7 = *(void *)(v6 + 24);
  sub_100016CE0(&qword_1000A7268);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(v10 + 56) + 8 * v2);
  sub_100017334();
  _NativeDictionary._delete(at:)();
  *uint64_t v1 = v10;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10004C394(uint64_t a1, uint64_t a2)
{
  return sub_100004218(a1, a2, (uint64_t *)&unk_1000A78D0, (void (*)(void))type metadata accessor for CachedSession);
}

uint64_t sub_10004C3C8()
{
  sub_100012970();
  unint64_t v2 = sub_100014BA8();
  char v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0;
  }
  swift_isUniquelyReferenced_nonNull_native();
  sub_100009544();
  int v5 = sub_100016CE0(&qword_1000A78C8);
  sub_100016308(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  sub_10001A600();
  uint64_t v13 = *(void *)(*(void *)(v1 + 56) + 8 * v2);
  sub_10002E958(0, (unint64_t *)&qword_1000A78C0);
  _NativeDictionary._delete(at:)();
  *uint64_t v0 = v1;
  swift_bridgeObjectRelease();
  return v13;
}

_OWORD *sub_10004C49C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_10004C4AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v5 = v4;
  Swift::Int v10 = *v4;
  sub_100014BA8();
  sub_10001459C();
  if (v13)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v11;
  char v15 = v12;
  sub_100016CE0(&qword_1000A78C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v10)) {
    goto LABEL_5;
  }
  sub_100014CD8();
  unint64_t v16 = sub_100014BA8();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v5;
  if (v15)
  {
    uint64_t v19 = *(void *)(v18 + 56);

    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_10000571C(v14, a2, a3, a1, v18);
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_10004C5C4()
{
  return sub_100015FE8(v0, 24);
}

uint64_t sub_10004C5D0()
{
  return sub_10004B058();
}

uint64_t sub_10004C5D8()
{
  return sub_100015FE8(v0, 32);
}

uint64_t sub_10004C5E4()
{
  return sub_100015FE8(v0, 24);
}

uint64_t sub_10004C5F0(uint64_t a1, uint64_t a2)
{
  return sub_10004AE24(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10004C5F8()
{
  return sub_100015FE8(v0, 32);
}

uint64_t sub_10004C604()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

unint64_t sub_10004C630()
{
  unint64_t result = qword_1000A7898;
  if (!qword_1000A7898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7898);
  }
  return result;
}

uint64_t sub_10004C67C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100016CE0(a3);
  sub_10000948C();
  sub_1000134EC();
  v4();
  return a2;
}

uint64_t sub_10004C6D0()
{
  uint64_t v2 = sub_100017258();
  v3(v2);
  sub_10000948C();
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v0, v1);
  return v0;
}

unint64_t sub_10004C728(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10004C7C8(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v1 = result;
  }
  return result;
}

void *sub_10004C888(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10004C8B8()
{
  return swift_bridgeObjectRelease();
}

void *sub_10004C8C0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_10004C904(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10004C938(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10004C978(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for EventValue.CodingKeys()
{
}

void *sub_10004C9C0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10004CA30(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CachedEvent()
{
}

void type metadata accessor for BadCachedEvent()
{
}

void type metadata accessor for Event()
{
}

void *sub_10004CAFC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100013AD8((uint64_t)a1, (void (*)(void))type metadata accessor for EventValue);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 5u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_7;
      case 6u:
      case 7u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10004CC78(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10004CD30(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100013AD8((uint64_t)a1, (void (*)(void))type metadata accessor for EventValue);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10004CE18()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10004CE28()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_10004CEF0()
{
  unint64_t result = qword_1000A7990;
  if (!qword_1000A7990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7990);
  }
  return result;
}

unint64_t sub_10004CF40()
{
  unint64_t result = qword_1000A7998;
  if (!qword_1000A7998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7998);
  }
  return result;
}

uint64_t sub_10004CF9C()
{
  return String.hash(into:)();
}

void sub_10004CFD8()
{
  *(void *)(v2 - 112) = v0 - v1;
}

unint64_t sub_10004CFEC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009DF20, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_10004D03C(char a1)
{
  uint64_t result = 1701606770;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_100019C8C();
      break;
    case 2:
      uint64_t result = sub_100016030();
      break;
    case 3:
      uint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004D0A4(char a1)
{
  uint64_t result = 1701606770;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_100019C8C();
      break;
    case 2:
      uint64_t result = sub_100016030();
      break;
    case 3:
      uint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004D10C(unsigned __int8 *a1, char *a2)
{
  return sub_10006BAA4(*a1, *a2);
}

Swift::Int sub_10004D118()
{
  return sub_100049600(*v0);
}

uint64_t sub_10004D120(uint64_t a1)
{
  return sub_100049B00(a1, *v1);
}

Swift::Int sub_10004D128(uint64_t a1)
{
  return sub_100049C74(a1, *v1);
}

unint64_t sub_10004D130@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10004CFEC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004D160@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10004D03C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10004D18C()
{
  return sub_10004D0A4(*v0);
}

uint64_t sub_10004D194@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10004D038(a1);
  *a2 = result;
  return result;
}

void sub_10004D1BC(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10004D1C8(uint64_t a1)
{
  unint64_t v2 = sub_10004E5A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004D204(uint64_t a1)
{
  unint64_t v2 = sub_10004E5A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

Class sub_10004D240()
{
  sub_10004D488();
  Dictionary.init(minimumCapacity:)();
  String._bridgeToObjectiveC()();
  sub_100014CF4();
  uint64_t v1 = sub_100019A6C();
  sub_10004C4AC(v1, 1701606770, 0xE400000000000000, v2);
  swift_bridgeObjectRelease();
  [objc_allocWithZone((Class)NSNumber) initWithChar:*(char *)(v0 + 16)];
  sub_100014CF4();
  uint64_t v3 = sub_100019A6C();
  sub_10004C4AC(v3, 0x6E6F6973726576, 0xE700000000000000, v4);
  swift_bridgeObjectRelease();
  String._bridgeToObjectiveC()();
  sub_100014CF4();
  uint64_t v5 = sub_100019A6C();
  sub_10004C4AC(v5, 0x63736A5F343662, 0xE700000000000000, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v14 = v7;
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    int v9 = (char *)(v7 + 32);
    do
    {
      memcpy(__dst, v9, sizeof(__dst));
      sub_10004E2B8((uint64_t)__dst);
      sub_10004D4C8();
      sub_10004E32C((uint64_t)__dst);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += 88;
      --v8;
    }
    while (v8);
    sub_100005B18((uint64_t)&v14);
  }
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10004C4AC((uint64_t)isa, 0xD000000000000012, 0x8000000100088800, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t sub_10004D488()
{
  unint64_t result = qword_1000A78C0;
  if (!qword_1000A78C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A78C0);
  }
  return result;
}

Class sub_10004D4C8()
{
  uint64_t v1 = v0;
  sub_10004D488();
  Dictionary.init(minimumCapacity:)();
  String._bridgeToObjectiveC()();
  sub_100014CF4();
  uint64_t v2 = sub_100014284();
  sub_10004C4AC(v2, 0x7972617262696CLL, 0xE700000000000000, v3);
  swift_bridgeObjectRelease();
  String._bridgeToObjectiveC()();
  sub_100014CF4();
  uint64_t v4 = sub_100014284();
  sub_10004C4AC(v4, 7496054, 0xE300000000000000, v5);
  uint64_t v6 = v29[0];
  uint64_t v23 = v29[0];
  swift_bridgeObjectRelease();
  sub_10004E3A0(v1 + 32, (uint64_t)v26);
  sub_10004E3A0((uint64_t)v26, (uint64_t)v27);
  if (v27[1])
  {
    String._bridgeToObjectiveC()();
    sub_100014CF4();
    v29[0] = v6;
    uint64_t v7 = sub_100011424();
    sub_10004C4AC(v7, v8, v9, v10);
    uint64_t v23 = v29[0];
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  sub_10004E3A0(v1 + 48, (uint64_t)v25);
  sub_10004E3A0((uint64_t)v25, (uint64_t)v28);
  if (v28[1])
  {
    String._bridgeToObjectiveC()();
    swift_isUniquelyReferenced_nonNull_native();
    v29[0] = v23;
    uint64_t v11 = sub_100011424();
    sub_10004C4AC(v11, 0xD000000000000012, v12, v13);
    uint64_t v23 = v29[0];
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  uint64_t v14 = *(void *)(v1 + 64);
  if (v14)
  {
    v29[0] = _swiftEmptyArrayStorage;
    uint64_t v15 = *(void *)(v14 + 16);
    swift_bridgeObjectRetain();
    sub_10004C7C8(v15);
    specialized Array._endMutation()();
    if (v15)
    {
      uint64_t v16 = v14 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v29[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        v16 += 16;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        --v15;
      }
      while (v15);
    }
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24[0] = v23;
    sub_10004C4AC((uint64_t)isa, 0xD000000000000011, 0x8000000100088860, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  sub_10004E3A0(v1 + 72, (uint64_t)v24);
  sub_10004E3A0((uint64_t)v24, (uint64_t)v29);
  if (v29[1])
  {
    NSString v19 = String._bridgeToObjectiveC()();
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    sub_10004C4AC((uint64_t)v19, 0x69745F7261646172, 0xEB00000000656C74, v20);
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  Class v21 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_10004D8B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100016CE0(&qword_1000A79B0);
  sub_100014C1C();
  __chkstk_darwin(v5);
  sub_1000168C8();
  sub_100017740(a1, a1[3]);
  sub_10004E5A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10001610C((uint64_t)a1);
  }
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v8 = v7;
  swift_bridgeObjectRetain();
  char v16 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v10 = v9;
  sub_100016CE0(&qword_1000A79C0);
  sub_10004E5F4();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = sub_100017DE4();
  v12(v11);
  swift_bridgeObjectRetain();
  sub_10001610C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = v15;
  return result;
}

unint64_t sub_10004DB34(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009DFA0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

void sub_10004DB84(char a1)
{
  switch(a1)
  {
    case 1:
      sub_100016208();
      break;
    case 2:
    case 3:
      sub_100009448();
      break;
    case 4:
      sub_100017BFC();
      break;
    default:
      return;
  }
}

void sub_10004DC38(char a1)
{
  switch(a1)
  {
    case 1:
      sub_100016208();
      break;
    case 2:
    case 3:
      sub_100009448();
      break;
    case 4:
      sub_100017BFC();
      break;
    default:
      return;
  }
}

uint64_t sub_10004DCEC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = sub_100016CE0(&qword_1000A79F0);
  sub_100014C1C();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_1000168C8();
  sub_100017740(a1, a1[3]);
  sub_10004EBA8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10001610C((uint64_t)a1);
  }
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRetain();
  uint64_t v29 = v12;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000174BC();
  uint64_t v27 = v16;
  uint64_t v28 = v14;
  uint64_t v25 = v15;
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1000174BC();
  uint64_t v18 = v17;
  sub_100016CE0(&qword_1000A6798);
  sub_10004EBF4();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1000174BC();
  uint64_t v21 = v20;
  uint64_t v23 = v19;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
  swift_bridgeObjectRetain();
  sub_10001610C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v10;
  a2[1] = v29;
  a2[2] = v26;
  a2[3] = v28;
  a2[4] = v25;
  a2[5] = v27;
  a2[6] = v24;
  a2[7] = v18;
  a2[8] = v30;
  a2[9] = v23;
  a2[10] = v21;
  return result;
}

double sub_10004E0F4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10004D8B4(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10004E138(unsigned __int8 *a1, char *a2)
{
  return sub_10006B380(*a1, *a2);
}

Swift::Int sub_10004E144()
{
  return sub_100049640(*v0);
}

uint64_t sub_10004E14C()
{
  return sub_1000496F0();
}

Swift::Int sub_10004E154(uint64_t a1)
{
  return sub_100049D88(a1, *v1);
}

unint64_t sub_10004E15C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10004DB34(*a1);
  *a2 = result;
  return result;
}

void sub_10004E18C(void *a1@<X8>)
{
  sub_10004DB84(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void sub_10004E1B8()
{
  sub_10004DC38(*v0);
}

uint64_t sub_10004E1C0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10004DB80(a1);
  *a2 = result;
  return result;
}

void sub_10004E1E8(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_10004E1F4(uint64_t a1)
{
  unint64_t v2 = sub_10004EBA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004E230(uint64_t a1)
{
  unint64_t v2 = sub_10004EBA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10004E26C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_10004DCEC(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x58uLL);
  }
  return result;
}

uint64_t sub_10004E2B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004E32C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004E3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A67C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E408()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004E44C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10004E4AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10004E53C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for StorebagSectionRule()
{
}

unint64_t sub_10004E5A8()
{
  unint64_t result = qword_1000A79B8;
  if (!qword_1000A79B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A79B8);
  }
  return result;
}

unint64_t sub_10004E5F4()
{
  unint64_t result = qword_1000A79C8;
  if (!qword_1000A79C8)
  {
    sub_1000286C8(&qword_1000A79C0);
    sub_10004E668();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A79C8);
  }
  return result;
}

unint64_t sub_10004E668()
{
  unint64_t result = qword_1000A79D0;
  if (!qword_1000A79D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A79D0);
  }
  return result;
}

unsigned char *sub_10004E6B4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004E780);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionRule.CodingKeys()
{
}

uint64_t sub_10004E7B4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10004E810(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10004E8A0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_10004E988(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t sub_10004E990(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10004EA18(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10004EA58(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionRuleRequiredLibraries()
{
}

unint64_t sub_10004EABC()
{
  unint64_t result = qword_1000A79D8;
  if (!qword_1000A79D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A79D8);
  }
  return result;
}

unint64_t sub_10004EB0C()
{
  unint64_t result = qword_1000A79E0;
  if (!qword_1000A79E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A79E0);
  }
  return result;
}

unint64_t sub_10004EB5C()
{
  unint64_t result = qword_1000A79E8;
  if (!qword_1000A79E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A79E8);
  }
  return result;
}

unint64_t sub_10004EBA8()
{
  unint64_t result = qword_1000A79F8;
  if (!qword_1000A79F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A79F8);
  }
  return result;
}

unint64_t sub_10004EBF4()
{
  unint64_t result = qword_1000A7A00;
  if (!qword_1000A7A00)
  {
    sub_1000286C8(&qword_1000A6798);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A00);
  }
  return result;
}

uint64_t sub_10004EC60(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_10004ECE8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004EDB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionRuleRequiredLibraries.CodingKeys()
{
}

unint64_t sub_10004EDEC()
{
  unint64_t result = qword_1000A7A08;
  if (!qword_1000A7A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A08);
  }
  return result;
}

unint64_t sub_10004EE3C()
{
  unint64_t result = qword_1000A7A10;
  if (!qword_1000A7A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A10);
  }
  return result;
}

unint64_t sub_10004EE8C()
{
  unint64_t result = qword_1000A7A18;
  if (!qword_1000A7A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A18);
  }
  return result;
}

void *sub_10004EED8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for StorebagSharedValue()
{
  return swift_bridgeObjectRelease();
}

void *sub_10004EF10(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *sub_10004EF60(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_10004EFA0(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10004EFE0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionPerCountrySampling()
{
}

void type metadata accessor for StorebagBool()
{
}

uint64_t sub_10004F03C(void *a1)
{
  sub_100017740(a1, a1[3]);
  sub_10001A930();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    sub_100017740(v9, v9[3]);
    sub_10001A930();
    char v4 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (!v4)
    {
      uint64_t v1 = 1;
      goto LABEL_10;
    }
    if (v4 == 1)
    {
      uint64_t v1 = 0;
LABEL_10:
      sub_10001610C((uint64_t)v9);
      sub_10001610C((uint64_t)a1);
      return v1;
    }
    uint64_t v6 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v8 = v7;
    sub_100016CE0(&qword_1000A7A38);
    *uint64_t v8 = &unk_1000A05C0;
    uint64_t v1 = (uint64_t)sub_100017740(a1, a1[3]);
    dispatch thunk of Decoder.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v6 - 8) + 104))(v8, enum case for DecodingError.typeMismatch(_:), v6);
    swift_willThrow();
    sub_10001610C((uint64_t)v9);
  }
  sub_10001610C((uint64_t)a1);
  return v1;
}

uint64_t sub_10004F1DC()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x18) {
    return 24;
  }
  else {
    return v0;
  }
}

uint64_t sub_10004F234()
{
  uint64_t result = sub_1000165A0();
  switch(v1)
  {
    case 1:
      uint64_t result = sub_100016218();
      break;
    case 2:
      uint64_t result = 0x6C72755F74736F70;
      break;
    case 3:
      uint64_t result = 0xD000000000000012;
      break;
    case 4:
      uint64_t result = 0xD000000000000011;
      break;
    case 5:
      uint64_t result = 0xD000000000000011;
      break;
    case 6:
    case 7:
    case 8:
    case 19:
      uint64_t result = 0xD000000000000010;
      break;
    case 9:
      uint64_t result = 0x5F64656C62616E65;
      break;
    case 10:
      uint64_t result = sub_100019CA4();
      break;
    case 11:
      uint64_t result = sub_100017138();
      break;
    case 12:
      uint64_t result = 0x68745F746E657665;
      break;
    case 13:
      uint64_t result = 0x6574696465707865;
      break;
    case 14:
      uint64_t result = 0xD000000000000012;
      break;
    case 15:
      uint64_t result = sub_100017C10();
      break;
    case 16:
      uint64_t result = 0x635F646568736168;
      break;
    case 17:
      uint64_t result = 0x6863726172656968;
      break;
    case 18:
      uint64_t result = 0xD000000000000012;
      break;
    case 20:
      uint64_t result = sub_100016048();
      break;
    case 21:
      uint64_t result = 0xD000000000000011;
      break;
    case 22:
      uint64_t result = 0xD00000000000001FLL;
      break;
    case 23:
      uint64_t result = 0x5F656C6261736964;
      break;
    default:
      return result;
  }
  return result;
}

void *sub_10004F4A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_100016CE0(&qword_1000A7A60);
  sub_100014C1C();
  __chkstk_darwin(v5);
  sub_10001615C();
  sub_100017740(a1, a1[3]);
  sub_1000520B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v122 = v2;
    unsigned int v6 = 0;
  }
  else
  {
    uint64_t v62 = a2;
    uint64_t v11 = sub_100014064();
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100014064();
    uint64_t v16 = v15;
    swift_bridgeObjectRetain();
    sub_1000151D8();
    uint64_t v47 = v16;
    uint64_t v61 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    sub_1000151D8();
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v60 = v14;
    char v121 = v18 & 1;
    char v40 = v18;
    uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v43 = v17;
    LOBYTE(v64) = 5;
    uint64_t v20 = v19;
    swift_bridgeObjectRetain();
    sub_1000151D8();
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v14) = v22;
    uint64_t v39 = v21;
    char v119 = v22 & 1;
    sub_100052104();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v38 = v14;
    sub_100016CE0(&qword_1000A6798);
    sub_100052150((unint64_t *)&qword_1000A7A00, &qword_1000A6798);
    sub_1000093C0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    LOBYTE(v63[0]) = 8;
    swift_bridgeObjectRetain();
    sub_1000093C0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v46 = v64;
    uint64_t v23 = v64;
    LOBYTE(v64) = 9;
    uint64_t v59 = v23;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100014064();
    uint64_t v58 = v24;
    uint64_t v122 = 0;
    sub_100016CE0(&qword_1000A7A78);
    LOBYTE(v63[0]) = 10;
    uint64_t v25 = sub_100052150(&qword_1000A7A80, &qword_1000A7A78);
    swift_bridgeObjectRetain();
    sub_100052810();
    sub_1000174D8();
    uint64_t v122 = v25;
    if (!v25)
    {
      uint64_t v57 = v64;
      swift_bridgeObjectRetain();
      sub_100052810();
      sub_1000174D8();
      uint64_t v28 = v64;
      LOBYTE(v64) = 12;
      uint64_t v55 = v28;
      swift_bridgeObjectRetain();
      sub_10001AA78();
      uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      char v30 = v29;
      char v116 = v29 & 1;
      sub_10001AB58();
      sub_10001AB58();
      sub_100016CE0(&qword_1000A7A40);
      sub_1000522C0(&qword_1000A7A88, &qword_1000A7A40);
      sub_1000174D8();
      uint64_t v31 = v64;
      LOBYTE(v64) = 16;
      uint64_t v52 = v65;
      uint64_t v54 = v31;
      unsigned __int8 v50 = v66;
      sub_100028924(v31, v65, v66);
      sub_10001AA78();
      uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v48 = v32;
      swift_bridgeObjectRetain();
      sub_10001AB58();
      sub_10001AB58();
      sub_1000174D8();
      uint64_t v45 = v64;
      swift_bridgeObjectRetain();
      sub_10001AB58();
      sub_10001AB58();
      sub_100016CE0(&qword_1000A7A90);
      sub_1000521B4();
      sub_1000174D8();
      char v109 = 23;
      uint64_t v44 = v64;
      swift_bridgeObjectRetain();
      sub_1000174D8();
      uint64_t v122 = 0;
      uint64_t v33 = sub_10001937C();
      v34(v33);
      LOBYTE(v63[7]) = v40 & 1;
      LOBYTE(v63[11]) = v38 & 1;
      LOBYTE(v63[19]) = v30 & 1;
      char v41 = v110;
      v63[0] = v11;
      v63[1] = v13;
      v63[2] = v60;
      v63[3] = v47;
      v63[4] = v61;
      v63[5] = 0;
      v63[6] = v43;
      v63[8] = v42;
      v63[9] = v20;
      v63[10] = v39;
      BYTE1(v63[11]) = 5;
      v63[12] = v46;
      v63[13] = v59;
      v63[14] = v37;
      v63[15] = v58;
      v63[16] = v57;
      v63[17] = v55;
      v63[18] = v36;
      *(_WORD *)((char *)&v63[19] + 1) = 3084;
      v63[20] = v54;
      v63[21] = v65;
      LOBYTE(v63[22]) = v66;
      v63[23] = v35;
      v63[24] = v48;
      LOWORD(v63[25]) = 4112;
      v63[26] = v64;
      LOWORD(v63[27]) = 4112;
      v63[28] = v64;
      LOBYTE(v63[29]) = v110;
      sub_100028A34((uint64_t)v63);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100028948(v54, v52, v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001610C((uint64_t)a1);
      uint64_t v64 = v11;
      uint64_t v65 = v13;
      uint64_t v66 = v60;
      uint64_t v67 = v47;
      uint64_t v68 = v61;
      uint64_t v69 = 0;
      uint64_t v70 = v43;
      char v71 = v121;
      *(_DWORD *)uint64_t v72 = *(_DWORD *)v120;
      *(_DWORD *)&v72[3] = *(_DWORD *)&v120[3];
      uint64_t v73 = v42;
      uint64_t v74 = v20;
      uint64_t v75 = v39;
      char v76 = v119;
      char v77 = 5;
      int v78 = v117;
      __int16 v79 = v118;
      uint64_t v80 = v46;
      uint64_t v81 = v59;
      uint64_t v82 = v37;
      uint64_t v83 = v58;
      uint64_t v84 = v57;
      uint64_t v85 = v55;
      uint64_t v86 = v36;
      char v87 = v116;
      char v88 = 12;
      char v89 = 12;
      char v91 = v115[11];
      int v90 = *(_DWORD *)&v115[7];
      uint64_t v92 = v54;
      uint64_t v93 = v52;
      unsigned __int8 v94 = v50;
      *(_DWORD *)&v95[3] = *(_DWORD *)&v115[3];
      *(_DWORD *)uint64_t v95 = *(_DWORD *)v115;
      uint64_t v96 = v35;
      uint64_t v97 = v48;
      char v98 = 16;
      char v99 = 16;
      __int16 v101 = v114;
      int v100 = v113;
      uint64_t v102 = v45;
      char v103 = 16;
      char v104 = 16;
      __int16 v106 = v112;
      int v105 = v111;
      uint64_t v107 = v44;
      char v108 = v41;
      sub_100028B28((uint64_t)&v64);
      return memcpy(v62, v63, 0xE9uLL);
    }
    uint64_t v26 = sub_10001937C();
    v27(v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned int v6 = 919;
  }
  sub_10001610C((uint64_t)a1);
  if (v6)
  {
    swift_bridgeObjectRelease();
    if (((v6 >> 1) & 1) == 0)
    {
LABEL_6:
      if ((v6 >> 2)) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  if ((v6 >> 2))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    if (((v6 >> 4) & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  if (((v6 >> 4) & 1) == 0)
  {
LABEL_8:
    uint64_t v7 = v51;
    if ((v6 >> 7)) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v7 = v51;
  if ((v6 >> 7))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v8 = v53;
    if (((v6 >> 8) & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v8 = v53;
  if (((v6 >> 8) & 1) == 0)
  {
LABEL_10:
    if ((v6 >> 9)) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if ((v6 >> 9))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t result = v56;
    if (((v6 >> 10) & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = v56;
  if (((v6 >> 10) & 1) == 0)
  {
LABEL_12:
    if ((v6 >> 11)) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if ((v6 >> 11))
  {
LABEL_13:
    uint64_t result = (void *)swift_bridgeObjectRelease();
    unsigned __int8 v10 = v49;
    if (((v6 >> 15) & 1) == 0) {
      return result;
    }
    return (void *)sub_100028948(v8, v7, v10);
  }
LABEL_23:
  unsigned __int8 v10 = v49;
  if ((v6 >> 15)) {
    return (void *)sub_100028948(v8, v7, v10);
  }
  return result;
}

uint64_t sub_1000502FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972746E756F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000503F8()
{
  return 2;
}

uint64_t sub_100050400(char a1)
{
  if (a1) {
    return 0x6C6F687365726874;
  }
  else {
    return 0x7972746E756F63;
  }
}

double sub_10005043C(void *a1)
{
  sub_100016CE0(&qword_1000A7A28);
  sub_100014C1C();
  __chkstk_darwin(v4);
  sub_10001615C();
  sub_100017740(a1, a1[3]);
  sub_10005108C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001610C((uint64_t)a1);
  }
  else
  {
    sub_100016CE0(&qword_1000A6798);
    sub_100052150((unint64_t *)&qword_1000A7A00, &qword_1000A6798);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    double v2 = v6;
    uint64_t v7 = sub_10001A7E4();
    v8(v7);
    sub_10001610C((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

unint64_t sub_100050604(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009E2B0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

unint64_t sub_100050654()
{
  unint64_t result = sub_1000165A0();
  switch(v1)
  {
    case 1:
      unint64_t result = sub_100016218();
      break;
    case 2:
      unint64_t result = sub_100009560();
      break;
    case 3:
      unint64_t result = sub_100017C10();
      break;
    case 4:
      unint64_t result = sub_100014298();
      break;
    case 5:
      unint64_t result = sub_100016048();
      break;
    case 6:
      unint64_t result = sub_100019CA4();
      break;
    case 7:
      unint64_t result = sub_100017138();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000506D0()
{
  unint64_t result = sub_1000165A0();
  switch(v1)
  {
    case 1:
      unint64_t result = sub_100016218();
      break;
    case 2:
      unint64_t result = sub_100009560();
      break;
    case 3:
      unint64_t result = sub_100017C10();
      break;
    case 4:
      unint64_t result = sub_100014298();
      break;
    case 5:
      unint64_t result = sub_100016048();
      break;
    case 6:
      unint64_t result = sub_100019CA4();
      break;
    case 7:
      unint64_t result = sub_100017138();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005074C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100016CE0(&qword_1000A7AA8);
  sub_100014C1C();
  __chkstk_darwin(v5);
  sub_10001615C();
  sub_100017740(a1, a1[3]);
  sub_100052274();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10001610C((uint64_t)a1);
  }
  uint64_t v6 = sub_100017268();
  uint64_t v8 = v7;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_100017268();
  uint64_t v19 = v6;
  LOBYTE(v20) = 2;
  uint64_t v10 = v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v16 = v12;
  uint64_t v17 = v11;
  sub_100016CE0(&qword_1000A7A40);
  sub_1000522C0(&qword_1000A7A88, &qword_1000A7A40);
  sub_1000134FC();
  sub_10001825C();
  sub_100016CE0(&qword_1000A7AB8);
  sub_100028924(v20, v21, v22);
  sub_1000522C0(&qword_1000A7AC0, &qword_1000A7AB8);
  sub_1000134FC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10002893C();
  sub_100052104();
  sub_1000134FC();
  sub_10001825C();
  sub_100016CE0(&qword_1000A7A78);
  sub_100052150(&qword_1000A7A80, &qword_1000A7A78);
  sub_1000134FC();
  sub_10001825C();
  swift_bridgeObjectRetain();
  sub_1000134FC();
  sub_10001825C();
  uint64_t v13 = sub_100017DFC();
  v14(v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100028924(v20, v21, v22);
  sub_10002893C();
  swift_bridgeObjectRetain();
  sub_100028960();
  sub_100028948(v20, v21, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001610C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100028948(v20, v21, v22);
  sub_100028960();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v17;
  *(unsigned char *)(a2 + 40) = v16 & 1;
  *(void *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v21;
  *(unsigned char *)(a2 + 64) = v22;
  *(void *)(a2 + 72) = v20;
  *(void *)(a2 + 80) = v21;
  *(unsigned char *)(a2 + 88) = v22;
  *(unsigned char *)(a2 + 89) = 2;
  *(void *)(a2 + 96) = v20;
  *(void *)(a2 + 104) = v20;
  return result;
}

Swift::Int sub_100050D64()
{
  return sub_100041060(*v0);
}

uint64_t sub_100050D84@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10004F03C(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

unint64_t sub_100050DB8()
{
  unint64_t result = qword_1000A7A20;
  if (!qword_1000A7A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A20);
  }
  return result;
}

uint64_t sub_100050E04()
{
  return sub_10006B564();
}

Swift::Int sub_100050E10()
{
  return sub_100049658(*v0);
}

uint64_t sub_100050E18()
{
  return sub_100049838();
}

Swift::Int sub_100050E20(uint64_t a1)
{
  return sub_100049CE8(a1, *v1);
}

uint64_t sub_100050E28@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10004F1DC();
  *a1 = result;
  return result;
}

uint64_t sub_100050E58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10004F234();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100050E84()
{
  return sub_10004F4A4(*v0);
}

uint64_t sub_100050E8C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10004F230();
  *a1 = result;
  return result;
}

void sub_100050EB4(unsigned char *a1@<X8>)
{
  *a1 = 24;
}

uint64_t sub_100050EC0(uint64_t a1)
{
  unint64_t v2 = sub_1000520B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100050EFC(uint64_t a1)
{
  unint64_t v2 = sub_1000520B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100050F38@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10004F4A8(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0xE9uLL);
  }
  return result;
}

uint64_t sub_100050F8C()
{
  return sub_100050400(*v0);
}

uint64_t sub_100050F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000502FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100050FBC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000503F8();
  *a1 = result;
  return result;
}

uint64_t sub_100050FE4(uint64_t a1)
{
  unint64_t v2 = sub_10005108C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100051020(uint64_t a1)
{
  unint64_t v2 = sub_10005108C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005105C(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = sub_10005043C(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(double *)(a2 + 8) = v5;
  }
}

unint64_t sub_10005108C()
{
  unint64_t result = qword_1000A7A30;
  if (!qword_1000A7A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A30);
  }
  return result;
}

uint64_t sub_1000510D8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 64) != 255) {
    sub_100028960();
  }
  sub_100028960();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100051148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  int v6 = *(unsigned __int8 *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  }
  else
  {
    char v7 = v6 & 1;
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 56);
    sub_10002893C();
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    *(unsigned char *)(a1 + 64) = v7;
  }
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  char v12 = *(unsigned char *)(a2 + 88);
  sub_10002893C();
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v12;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100051230(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = (long long *)(a1 + 48);
  int v6 = (long long *)(a2 + 48);
  int v7 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v7 == 255)
    {
      long long v9 = *v6;
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      long long *v5 = v9;
    }
    else
    {
      char v13 = v7 & 1;
      uint64_t v14 = *(void *)(a2 + 48);
      uint64_t v15 = *(void *)(a2 + 56);
      sub_10002893C();
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v15;
      *(unsigned char *)(a1 + 64) = v13;
    }
  }
  else if (v7 == 255)
  {
    sub_1000513C4(a1 + 48);
    char v8 = *(unsigned char *)(a2 + 64);
    long long *v5 = *v6;
    *(unsigned char *)(a1 + 64) = v8;
  }
  else
  {
    char v10 = v7 & 1;
    uint64_t v11 = *(void *)(a2 + 48);
    uint64_t v12 = *(void *)(a2 + 56);
    sub_10002893C();
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v12;
    *(unsigned char *)(a1 + 64) = v10;
    sub_100028960();
  }
  uint64_t v16 = *(void *)(a2 + 72);
  uint64_t v17 = *(void *)(a2 + 80);
  char v18 = *(unsigned char *)(a2 + 88);
  sub_10002893C();
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = v17;
  *(unsigned char *)(a1 + 88) = v18;
  sub_100028960();
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000513C4(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A7A40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100051424(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_10005142C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  int v6 = (_OWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 64) != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 64);
    if (v7 != 255)
    {
      *(_OWORD *)(a1 + 48) = *v6;
      *(unsigned char *)(a1 + 64) = v7 & 1;
      sub_100028960();
      goto LABEL_6;
    }
    sub_1000513C4(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
LABEL_6:
  char v8 = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = v8;
  sub_100028960();
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100051528(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10005157C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionClientTTR()
{
}

uint64_t sub_1000515F8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 176) != 255) {
    sub_100028960();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005169C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  uint64_t v11 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v11;
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  int v16 = *(unsigned __int8 *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16 == 255)
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  }
  else
  {
    uint64_t v12 = *(void *)(a2 + 160);
    uint64_t v13 = *(void *)(a2 + 168);
    sub_10002893C();
    *(void *)(a1 + 160) = v12;
    *(void *)(a1 + 168) = v13;
    *(unsigned char *)(a1 + 176) = v16 & 1;
  }
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v14;
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10005183C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v6;
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  uint64_t v7 = (long long *)(a1 + 160);
  uint64_t v8 = (long long *)(a2 + 160);
  int v9 = *(unsigned __int8 *)(a2 + 176);
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
    if (v9 == 255)
    {
      long long v11 = *v8;
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *uint64_t v7 = v11;
    }
    else
    {
      char v15 = v9 & 1;
      uint64_t v16 = *(void *)(a2 + 160);
      uint64_t v17 = *(void *)(a2 + 168);
      sub_10002893C();
      *(void *)(a1 + 160) = v16;
      *(void *)(a1 + 168) = v17;
      *(unsigned char *)(a1 + 176) = v15;
    }
  }
  else if (v9 == 255)
  {
    sub_1000513C4(a1 + 160);
    char v10 = *(unsigned char *)(a2 + 176);
    *uint64_t v7 = *v8;
    *(unsigned char *)(a1 + 176) = v10;
  }
  else
  {
    char v12 = v9 & 1;
    uint64_t v13 = *(void *)(a2 + 160);
    uint64_t v14 = *(void *)(a2 + 168);
    sub_10002893C();
    *(void *)(a1 + 160) = v13;
    *(void *)(a1 + 168) = v14;
    *(unsigned char *)(a1 + 176) = v12;
    sub_100028960();
  }
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  return a1;
}

void *sub_100051ADC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE9uLL);
}

uint64_t sub_100051AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
  int v9 = (_OWORD *)(a2 + 160);
  if (*(unsigned __int8 *)(a1 + 176) != 255)
  {
    int v10 = *(unsigned __int8 *)(a2 + 176);
    if (v10 != 255)
    {
      *(_OWORD *)(a1 + 160) = *v9;
      *(unsigned char *)(a1 + 176) = v10 & 1;
      sub_100028960();
      goto LABEL_6;
    }
    sub_1000513C4(a1 + 160);
  }
  *(_OWORD *)(a1 + 160) = *v9;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v11;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  return a1;
}

uint64_t sub_100051C7C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 233))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100051CBC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 232) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 233) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 233) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionClientHTTP()
{
}

unsigned char *_s13rtcreportingd33StorebagSectionPerCountrySamplingV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100051E10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionPerCountrySampling.CodingKeys()
{
  return &type metadata for StorebagSectionPerCountrySampling.CodingKeys;
}

unint64_t sub_100051E4C()
{
  unint64_t result = qword_1000A7A48;
  if (!qword_1000A7A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A48);
  }
  return result;
}

uint64_t sub_100051E98(unsigned __int8 *a1, char *a2)
{
  return sub_10006B5DC(*a1, *a2);
}

Swift::Int sub_100051EA4()
{
  return sub_100049670(*v0);
}

uint64_t sub_100051EAC(uint64_t a1)
{
  return sub_10004988C(a1, *v1);
}

Swift::Int sub_100051EB4(uint64_t a1)
{
  return sub_100049CD0(a1, *v1);
}

unint64_t sub_100051EBC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100050604(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100051EEC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100050654();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100051F18()
{
  return sub_1000506D0();
}

uint64_t sub_100051F20@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100050650(a1);
  *a2 = result;
  return result;
}

void sub_100051F48(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100051F54(uint64_t a1)
{
  unint64_t v2 = sub_100052274();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100051F90(uint64_t a1)
{
  unint64_t v2 = sub_100052274();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100051FCC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_10005074C(a1, (uint64_t)v5);
  if (!v2) {
    return memcpy(a2, v5, 0x70uLL);
  }
  return result;
}

unint64_t sub_10005201C()
{
  unint64_t result = qword_1000A7A50;
  if (!qword_1000A7A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A50);
  }
  return result;
}

unint64_t sub_10005206C()
{
  unint64_t result = qword_1000A7A58;
  if (!qword_1000A7A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A58);
  }
  return result;
}

unint64_t sub_1000520B8()
{
  unint64_t result = qword_1000A7A68;
  if (!qword_1000A7A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A68);
  }
  return result;
}

unint64_t sub_100052104()
{
  unint64_t result = qword_1000A7A70;
  if (!qword_1000A7A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A70);
  }
  return result;
}

uint64_t sub_100052150(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000286C8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000521B4()
{
  unint64_t result = qword_1000A7A98;
  if (!qword_1000A7A98)
  {
    sub_1000286C8(&qword_1000A7A90);
    sub_100052228();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7A98);
  }
  return result;
}

unint64_t sub_100052228()
{
  unint64_t result = qword_1000A7AA0;
  if (!qword_1000A7AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7AA0);
  }
  return result;
}

unint64_t sub_100052274()
{
  unint64_t result = qword_1000A7AB0;
  if (!qword_1000A7AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7AB0);
  }
  return result;
}

uint64_t sub_1000522C0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000286C8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100052310(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_100052398(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100052464);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionClientTTR.CodingKeys()
{
}

uint64_t sub_100052498(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE9)
  {
    if (a2 + 23 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 23) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 24;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x18;
  int v5 = v6 - 24;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_100052520(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE8)
  {
    unsigned int v6 = ((a2 - 233) >> 8) + 1;
    *uint64_t result = a2 + 23;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000525ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 23;
        break;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionClientHTTP.CodingKeys()
{
}

unint64_t sub_100052624()
{
  unint64_t result = qword_1000A7AC8;
  if (!qword_1000A7AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7AC8);
  }
  return result;
}

unint64_t sub_100052674()
{
  unint64_t result = qword_1000A7AD0;
  if (!qword_1000A7AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7AD0);
  }
  return result;
}

unint64_t sub_1000526C4()
{
  unint64_t result = qword_1000A7AD8;
  if (!qword_1000A7AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7AD8);
  }
  return result;
}

unint64_t sub_100052714()
{
  unint64_t result = qword_1000A7AE0;
  if (!qword_1000A7AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7AE0);
  }
  return result;
}

unint64_t sub_100052764()
{
  unint64_t result = qword_1000A7AE8;
  if (!qword_1000A7AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7AE8);
  }
  return result;
}

unint64_t sub_1000527B4()
{
  unint64_t result = qword_1000A7AF0;
  if (!qword_1000A7AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7AF0);
  }
  return result;
}

uint64_t sub_100052810()
{
  return v0;
}

uint64_t sub_100052828()
{
  sub_100016CE0(&qword_1000A7350);
  uint64_t v0 = sub_100016CE0(&qword_1000A7358);
  uint64_t v1 = *(void *)(*(void *)(v0 - 8) + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 - 8) + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000873E0;
  unint64_t v4 = v3 + v2;
  uint64_t v5 = (unsigned char *)(v3 + v2 + *(int *)(v0 + 48));
  *(void *)(v3 + v2) = XPC_ACTIVITY_REPEATING;
  unsigned char *v5 = 1;
  type metadata accessor for XPCObject();
  swift_storeEnumTagMultiPayload();
  unsigned int v6 = (void *)(v4 + v1 + *(int *)(v0 + 48));
  *(void *)(v4 + v1) = XPC_ACTIVITY_DELAY;
  *unsigned int v6 = 86400;
  swift_storeEnumTagMultiPayload();
  BOOL v7 = (const char **)(v4 + 2 * v1);
  uint64_t v8 = (const char **)((char *)v7 + *(int *)(v0 + 48));
  *BOOL v7 = XPC_ACTIVITY_GRACE_PERIOD;
  *uint64_t v8 = 43200;
  swift_storeEnumTagMultiPayload();
  int v9 = (const char **)(v4 + 3 * v1);
  int v10 = (uint64_t *)((char *)v9 + *(int *)(v0 + 48));
  *int v9 = XPC_ACTIVITY_PRIORITY;
  *int v10 = String.init(cString:)();
  v10[1] = v11;
  swift_storeEnumTagMultiPayload();
  char v12 = (const char **)(v4 + 4 * v1);
  uint64_t v13 = (char *)v12 + *(int *)(v0 + 48);
  *char v12 = XPC_ACTIVITY_ALLOW_BATTERY;
  *uint64_t v13 = 0;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_9;
  }
  char v15 = (void *)(v4 + 5 * v1);
  uint64_t v16 = (char *)v15 + *(int *)(v0 + 48);
  *char v15 = XPC_ACTIVITY_POWER_NAP;
  *uint64_t v16 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v17 = (void *)(v4 + 6 * v1);
  char v18 = (void *)((char *)v17 + *(int *)(v0 + 48));
  *uint64_t v17 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  void *v18 = 43200;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v19 = (void *)(v4 - v1 + 8 * v1);
  uint64_t v20 = (void *)((char *)v19 + *(int *)(v0 + 48));
  *uint64_t v19 = XPC_ACTIVITY_EXPECTED_DURATION;
  int64_t *v20 = XPC_ACTIVITY_INTERVAL_1_MIN;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v21 = (void *)(v4 + 8 * v1);
  unsigned __int8 v22 = (void *)((char *)v21 + *(int *)(v0 + 48));
  *uint64_t v21 = XPC_ACTIVITY_GROUP_NAME;
  void *v22 = 0xD00000000000001DLL;
  v22[1] = 0x8000000100089C20;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v23 = (void *)(v4 + 9 * v1);
  uint64_t v24 = (void *)((char *)v23 + *(int *)(v0 + 48));
  *uint64_t v23 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
  *uint64_t v24 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (XPC_ACTIVITY_DISK_INTENSIVE)
  {
    uint64_t v25 = (void *)(v4 + 10 * v1);
    uint64_t v26 = (char *)v25 + *(int *)(v0 + 48);
    *uint64_t v25 = XPC_ACTIVITY_DISK_INTENSIVE;
    unsigned char *v26 = 1;
    swift_storeEnumTagMultiPayload();
    sub_100016CE0(&qword_1000A7360);
    sub_10003E2CC();
    uint64_t result = Dictionary.init(dictionaryLiteral:)();
    qword_1000AF318 = result;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_100052BAC()
{
  if (qword_1000A6020 != -1) {
    swift_once();
  }
  return &qword_1000AF318;
}

uint64_t sub_100052BF8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF320);
  sub_100012884(v0, (uint64_t)qword_1000AF320);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100052C74()
{
  sub_1000094A8();
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_100052D40, v0, 0);
}

void sub_100052D40()
{
  uint64_t v1 = qword_1000AF3A0;
  v0[12] = qword_1000AF3A0;
  if (v1)
  {
    uint64_t v2 = v0[10];
    uint64_t v3 = v0[8];
    uint64_t v4 = v0[9];
    swift_retain();
    static Date.now.getter();
    Date.addingTimeInterval(_:)();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v0[13] = v5;
    v0[14] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v5(v2, v3);
    unsigned int v6 = (void *)swift_task_alloc();
    v0[15] = v6;
    *unsigned int v6 = v0;
    v6[1] = sub_100052E4C;
    uint64_t v7 = v0[11];
    sub_100043904(v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100052E4C()
{
  uint64_t v2 = (void *)*v1;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v2[13];
  uint64_t v6 = v2[11];
  uint64_t v7 = v2[8];
  void *v4 = *v1;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  v5(v6, v7);
  swift_release();
  uint64_t v8 = v2[7];
  if (v0) {
    int v9 = sub_1000531BC;
  }
  else {
    int v9 = sub_100052FFC;
  }
  return _swift_task_switch(v9, v8, 0);
}

void sub_100052FFC()
{
  sub_1000094A8();
  uint64_t v1 = qword_1000AF3A0;
  *(void *)(v0 + 136) = qword_1000AF3A0;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000530A4;
    sub_100044320();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000530A4()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 56);
    return _swift_task_switch(sub_100053380, v7, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    return v8();
  }
}

uint64_t sub_1000531BC()
{
  uint64_t v12 = v0;
  if (qword_1000A6028 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012884(v1, (uint64_t)qword_1000AF320);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    sub_100015F54();
    uint64_t v11 = swift_slowAlloc();
    sub_1000161B4(4.8751e-34);
    uint64_t v4 = Error.localizedDescription.getter();
    uint64_t v6 = sub_10001227C(v4, v5, &v11);
    sub_10001708C(v6);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001420C((void *)&_mh_execute_header, v7, v8, "failed to delete outdated sessions: %{public}s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v9();
}

uint64_t sub_100053380()
{
  uint64_t v12 = v0;
  swift_release();
  if (qword_1000A6028 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012884(v1, (uint64_t)qword_1000AF320);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    sub_100015F54();
    uint64_t v11 = swift_slowAlloc();
    sub_1000161B4(4.8751e-34);
    uint64_t v4 = Error.localizedDescription.getter();
    uint64_t v6 = sub_10001227C(v4, v5, &v11);
    sub_10001708C(v6);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001420C((void *)&_mh_execute_header, v7, v8, "failed to delete outdated sessions: %{public}s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v9();
}

uint64_t type metadata accessor for CacheCleanupActivity()
{
  return self;
}

uint64_t sub_100053570()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000535FC;
  return sub_100052C74();
}

uint64_t sub_1000535FC()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_10000935C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000E83C();
  return v3();
}

uint64_t sub_1000536C0()
{
  sub_100052BAC();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000536F0()
{
  return 0x6E61656C632D6264;
}

unint64_t sub_10005370C(uint64_t a1)
{
  unint64_t result = sub_100053734();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100053734()
{
  unint64_t result = qword_1000A7BB0;
  if (!qword_1000A7BB0)
  {
    type metadata accessor for CacheCleanupActivity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7BB0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StorebagSharedValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StorebagSharedValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StorebagSharedValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSharedValue(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSharedValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000538BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000538C4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSharedValue()
{
  return &type metadata for StorebagSharedValue;
}

unint64_t sub_1000538DC()
{
  return 0xD000000000000032;
}

unint64_t sub_1000538F8()
{
  return 0xD000000000000032;
}

uint64_t sub_100053918(uint64_t a1)
{
  sub_10000F43C(a1, (uint64_t)v6);
  sub_100053A88();
  uint64_t v3 = Array<A>.init(from:)();
  if (v1)
  {
    swift_errorRelease();
    sub_10000F43C(a1, (uint64_t)v6);
    sub_100053AD4();
    uint64_t v4 = Array<A>.init(from:)();
  }
  else
  {
    uint64_t v4 = v3;
  }
  sub_10001610C(a1);
  return v4;
}

uint64_t sub_100053A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100053918(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

unint64_t sub_100053A88()
{
  unint64_t result = qword_1000A7BB8;
  if (!qword_1000A7BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7BB8);
  }
  return result;
}

unint64_t sub_100053AD4()
{
  unint64_t result = qword_1000A7BC0;
  if (!qword_1000A7BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7BC0);
  }
  return result;
}

unint64_t sub_100053B20()
{
  unint64_t result = qword_1000A7BC8;
  if (!qword_1000A7BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7BC8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for StorebagSharedValue.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100053C08);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for StorebagSharedValue.Error()
{
  return &type metadata for StorebagSharedValue.Error;
}

unint64_t sub_100053C48()
{
  unint64_t result = qword_1000A7BD0;
  if (!qword_1000A7BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7BD0);
  }
  return result;
}

uint64_t sub_100053C98()
{
  sub_100016CE0(&qword_1000A7350);
  uint64_t v0 = sub_100016CE0(&qword_1000A7358);
  uint64_t v1 = *(void *)(*(void *)(v0 - 8) + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 - 8) + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100085330;
  unint64_t v4 = v3 + v2;
  uint64_t v5 = (uint64_t *)(v3 + v2 + *(int *)(v0 + 48));
  *(void *)(v3 + v2) = XPC_ACTIVITY_PRIORITY;
  uint64_t *v5 = String.init(cString:)();
  v5[1] = v6;
  type metadata accessor for XPCObject();
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (XPC_ACTIVITY_POWER_NAP)
  {
    uint64_t v8 = (unsigned char *)(v4 + v1 + *(int *)(v0 + 48));
    *(void *)(v4 + v1) = XPC_ACTIVITY_POWER_NAP;
    *uint64_t v8 = 1;
    uint64_t result = swift_storeEnumTagMultiPayload();
    if (XPC_ACTIVITY_POST_INSTALL)
    {
      int v9 = (void *)(v4 + 2 * v1);
      uint64_t v10 = (char *)v9 + *(int *)(v0 + 48);
      *int v9 = XPC_ACTIVITY_POST_INSTALL;
      *uint64_t v10 = 1;
      swift_storeEnumTagMultiPayload();
      sub_100016CE0(&qword_1000A7360);
      sub_10003E2CC();
      uint64_t result = Dictionary.init(dictionaryLiteral:)();
      qword_1000AF338 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_100053E40()
{
  if (qword_1000A6030 != -1) {
    swift_once();
  }
  return &qword_1000AF338;
}

uint64_t sub_100053E8C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF340);
  sub_100012884(v0, (uint64_t)qword_1000AF340);
  return Logger.init(subsystem:category:)();
}

void sub_100053F0C()
{
  qword_1000AF358 = (uint64_t)&off_10009E390;
}

uint64_t sub_100053F20()
{
  uint64_t result = sub_10007F0D0((uint64_t)&off_10009E3E0);
  qword_1000AF360 = result;
  return result;
}

void sub_100053F48()
{
  qword_1000AF368 = (uint64_t)&off_10009E430;
}

uint64_t sub_100053F5C()
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  v1[11] = v2;
  sub_10001130C(v2);
  v1[12] = v3;
  v1[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v1[14] = v4;
  sub_10001130C(v4);
  v1[15] = v5;
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  return _swift_task_switch(sub_100054094, v0, 0);
}

uint64_t sub_100054094()
{
  uint64_t v123 = v0;
  id v107 = [self defaultManager];
  if (qword_1000A6040 != -1) {
    goto LABEL_87;
  }
LABEL_2:
  uint64_t v1 = *(void *)(qword_1000AF358 + 16);
  uint64_t v2 = &unk_100085000;
  uint64_t v115 = v0;
  if (v1)
  {
    int v105 = v0 + 7;
    uint64_t v3 = v0[15];
    uint64_t v4 = v0[12];
    int v111 = (void (**)(uint64_t, void, uint64_t))(v4 + 104);
    unsigned int v109 = enum case for URL.DirectoryHint.isDirectory(_:);
    char v108 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v120 = (void (**)(uint64_t))(v3 + 8);
    int v113 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    uint64_t v5 = (void *)(swift_bridgeObjectRetain() + 40);
    while (1)
    {
      char v116 = v5;
      uint64_t v118 = v1;
      uint64_t v6 = v0[13];
      uint64_t v7 = v0[11];
      uint64_t v8 = *(v5 - 1);
      uint64_t v9 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v10 = NSHomeDirectory();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URL.init(fileURLWithPath:isDirectory:)();
      swift_bridgeObjectRelease();
      v115[5] = v8;
      uint64_t v0 = v115;
      v115[6] = v9;
      (*v111)(v6, v109, v7);
      sub_1000289E8();
      URL.appending<A>(path:directoryHint:)();
      (*v108)(v6, v7);
      uint64_t v11 = *v120;
      uint64_t v12 = sub_100016230();
      v11(v12);
      swift_bridgeObjectRelease();
      Swift::Bool v13 = URL.checkResourceIsReachable()();
      if (v14) {
        break;
      }
      if (!v13) {
        goto LABEL_11;
      }
      if (qword_1000A6038 != -1) {
        swift_once();
      }
      uint64_t v15 = v115[20];
      uint64_t v16 = v115[18];
      uint64_t v17 = v115[14];
      uint64_t v18 = type metadata accessor for Logger();
      sub_100012884(v18, (uint64_t)qword_1000AF340);
      __int16 v106 = *v113;
      (*v113)(v16, v15, v17);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = sub_100014490();
        v122[0] = sub_1000094B4();
        *(_DWORD *)uint64_t v21 = 136446210;
        uint64_t v22 = URL.path.getter();
        *(void *)(v21 + 4) = sub_10001227C(v22, v23, v122);
        swift_bridgeObjectRelease();
        uint64_t v24 = sub_1000174F0();
        v11(v24);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "removing %{public}s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        sub_100009474();
        sub_100009474();
      }
      else
      {
        uint64_t v40 = sub_1000174F0();
        v11(v40);
      }

      URL._bridgeToObjectiveC()(v41);
      uint64_t v43 = v42;
      v115[7] = 0;
      unsigned int v44 = [v107 removeItemAtURL:v42 error:v105];

      uint64_t v45 = (void *)v115[7];
      uint64_t v46 = v115[20];
      if (v44)
      {
        id v47 = v45;
        uint64_t v48 = sub_100016230();
        v11(v48);
        goto LABEL_18;
      }
      uint64_t v49 = v115[16];
      uint64_t v50 = v115[14];
      id v51 = v45;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      v106(v49, v46, v50);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      BOOL v54 = os_log_type_enabled(v52, v53);
      uint64_t v55 = v115[20];
      uint64_t v56 = v115[14];
      if (v54)
      {
        os_log_type_t type = v53;
        uint64_t v57 = swift_slowAlloc();
        v122[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 136446466;
        uint64_t v58 = URL.path.getter();
        v115[8] = sub_10001227C(v58, v59, v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v60 = sub_100016230();
        v11(v60);
        *(_WORD *)(v57 + 12) = 2082;
        swift_getErrorValue();
        uint64_t v61 = Error.localizedDescription.getter();
        v115[10] = sub_10001227C(v61, v62, v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, type, "failed removing %{public}s: %{public}s", (uint8_t *)v57, 0x16u);
        swift_arrayDestroy();
        sub_100009474();
        sub_100009474();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        uint64_t v63 = sub_100016230();
        v11(v63);
      }
      swift_errorRelease();
      uint64_t v38 = v55;
      uint64_t v39 = v56;
LABEL_17:
      ((void (*)(uint64_t, uint64_t))v11)(v38, v39);
LABEL_18:
      uint64_t v5 = v116 + 2;
      uint64_t v1 = v118 - 1;
      if (v118 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = (void *)&unk_100085000;
        goto LABEL_27;
      }
    }
    swift_errorRelease();
LABEL_11:
    if (qword_1000A6038 != -1) {
      swift_once();
    }
    uint64_t v25 = v115[20];
    uint64_t v26 = v115[17];
    uint64_t v27 = v115[14];
    uint64_t v28 = type metadata accessor for Logger();
    sub_100012884(v28, (uint64_t)qword_1000AF340);
    (*v113)(v26, v25, v27);
    char v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = v115[20];
    uint64_t v33 = v115[17];
    uint64_t v34 = v115[14];
    if (v31)
    {
      uint64_t v35 = sub_100014490();
      v122[0] = sub_1000094B4();
      *(_DWORD *)uint64_t v35 = 136446210;
      uint64_t v36 = URL.path.getter();
      *(void *)(v35 + 4) = sub_10001227C(v36, v37, v122);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v11)(v33, v34);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "skipping %{public}s", (uint8_t *)v35, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {

      ((void (*)(uint64_t, uint64_t))v11)(v33, v34);
    }
    uint64_t v38 = v32;
    uint64_t v39 = v34;
    goto LABEL_17;
  }
LABEL_27:
  if (qword_1000A6088 != -1) {
    swift_once();
  }
  id v64 = [(id)qword_1000AF3D0 dictionaryRepresentation];
  uint64_t v65 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v110 = v65 + 64;
  uint64_t v66 = -1;
  uint64_t v67 = -1 << *(unsigned char *)(v65 + 32);
  if (-v67 < 64) {
    uint64_t v66 = ~(-1 << -(char)v67);
  }
  unint64_t v68 = v66 & *(void *)(v65 + 64);
  int64_t v112 = (unint64_t)(63 - v67) >> 6;
  uint64_t v114 = v65;
  swift_bridgeObjectRetain();
  int64_t v69 = 0;
  int v121 = v2[319];
  if (v68)
  {
LABEL_32:
    uint64_t v117 = (v68 - 1) & v68;
    int64_t v119 = v69;
    unint64_t v70 = __clz(__rbit64(v68)) | (v69 << 6);
    goto LABEL_53;
  }
  while (1)
  {
    BOOL v71 = __OFADD__(v69, 1);
    int64_t v72 = v69 + 1;
    if (v71)
    {
      __break(1u);
LABEL_87:
      swift_once();
      goto LABEL_2;
    }
    if (v72 >= v112) {
      goto LABEL_83;
    }
    unint64_t v73 = *(void *)(v110 + 8 * v72);
    if (!v73) {
      break;
    }
LABEL_52:
    uint64_t v117 = (v73 - 1) & v73;
    int64_t v119 = v72;
    unint64_t v70 = __clz(__rbit64(v73)) + (v72 << 6);
LABEL_53:
    char v76 = (uint64_t *)(*(void *)(v114 + 48) + 16 * v70);
    uint64_t v77 = *v76;
    uint64_t v78 = v76[1];
    uint64_t v79 = qword_1000A6038;
    swift_bridgeObjectRetain();
    if (v79 != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    sub_100012884(v80, (uint64_t)qword_1000AF340);
    swift_bridgeObjectRetain_n();
    uint64_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = sub_100014490();
      v122[0] = sub_1000094B4();
      *(_DWORD *)uint64_t v83 = v121;
      swift_bridgeObjectRetain();
      *(void *)(v83 + 4) = sub_100014D40();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "default set: %{public}s", (uint8_t *)v83, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (qword_1000A6048 != -1) {
      swift_once();
    }
    sub_100073204(v77, v78, qword_1000AF360);
    if (v84)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = sub_100014490();
        uint64_t v88 = sub_1000094B4();
        sub_100017C28(v88);
        *(void *)(v87 + 4) = sub_100014D40();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "removing default %{public}s", (uint8_t *)v87, 0xCu);
        swift_arrayDestroy();
        sub_100009474();
        sub_100009474();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      id v100 = (id)qword_1000AF3D0;
      NSString v101 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v100 removeObjectForKey:v101];
    }
    else
    {
      if (qword_1000A6050 != -1) {
        swift_once();
      }
      uint64_t v89 = *(void *)(qword_1000AF368 + 16);
      if (v89)
      {
        int v90 = (void **)(swift_bridgeObjectRetain() + 40);
        do
        {
          uint64_t v91 = (uint64_t)*(v90 - 1);
          uint64_t v92 = *v90;
          swift_bridgeObjectRetain();
          v93._uint64_t countAndFlagsBits = v91;
          v93._object = v92;
          LOBYTE(v91) = String.hasPrefix(_:)(v93);
          swift_bridgeObjectRelease();
          if (v91)
          {
            swift_bridgeObjectRetain_n();
            unsigned __int8 v94 = Logger.logObject.getter();
            os_log_type_t v95 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v94, v95))
            {
              uint64_t v96 = sub_100014490();
              uint64_t v97 = sub_1000094B4();
              sub_100017C28(v97);
              *(void *)(v96 + 4) = sub_100014D40();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v94, v95, "removing default %{public}s", (uint8_t *)v96, 0xCu);
              swift_arrayDestroy();
              sub_100009474();
              sub_100009474();
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            id v98 = (id)qword_1000AF3D0;
            NSString v99 = String._bridgeToObjectiveC()();
            [v98 removeObjectForKey:v99];
          }
          v90 += 2;
          --v89;
        }
        while (v89);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v0 = v115;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    unint64_t v68 = v117;
    int64_t v69 = v119;
    if (v117) {
      goto LABEL_32;
    }
  }
  sub_100019CC8();
  if (v74 == v71) {
    goto LABEL_83;
  }
  sub_100017E14();
  if (v73) {
    goto LABEL_51;
  }
  sub_100019CC8();
  if (v74 == v71) {
    goto LABEL_83;
  }
  sub_100017E14();
  if (v73) {
    goto LABEL_51;
  }
  sub_100019CC8();
  if (v74 == v71) {
    goto LABEL_83;
  }
  sub_100017E14();
  if (v73) {
    goto LABEL_51;
  }
  sub_100019CC8();
  if (v74 == v71) {
    goto LABEL_83;
  }
  sub_100017E14();
  if (v73) {
    goto LABEL_51;
  }
  sub_100019CC8();
  if (v74 == v71) {
    goto LABEL_83;
  }
  sub_100017E14();
  if (v73)
  {
LABEL_51:
    int64_t v72 = v75;
    goto LABEL_52;
  }
  while (1)
  {
    int64_t v72 = v75 + 1;
    if (__OFADD__(v75, 1)) {
      __break(1u);
    }
    if (v72 >= v112) {
      break;
    }
    unint64_t v73 = *(void *)(v110 + 8 * v72);
    ++v75;
    if (v73) {
      goto LABEL_52;
    }
  }
LABEL_83:
  swift_release();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v102 = (uint64_t (*)(void))v0[1];
  return v102();
}

uint64_t type metadata accessor for PostInstallActivity()
{
  return self;
}

uint64_t sub_100054EF8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10002EAC8;
  return sub_100053F5C();
}

uint64_t sub_100054F84()
{
  sub_100053E40();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100054FB4()
{
  return 0x74736E6974736F70;
}

unint64_t sub_100054FD4(uint64_t a1)
{
  unint64_t result = sub_100054FFC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100054FFC()
{
  unint64_t result = qword_1000A7C90;
  if (!qword_1000A7C90)
  {
    type metadata accessor for PostInstallActivity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7C90);
  }
  return result;
}

uint64_t sub_100055048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  return _swift_task_switch(sub_100055068, 0, 0);
}

uint64_t sub_100055068()
{
  uint64_t v1 = v0[2];
  if (type metadata accessor for SubmitEventsActivity() == v1)
  {
    uint64_t v3 = sub_10001AB84();
    v0[4] = v3;
    swift_retain();
    swift_defaultActor_initialize();
    uint64_t v4 = sub_10005523C;
  }
  else if (type metadata accessor for RefreshStorebagsActivity() == v1)
  {
    uint64_t v3 = sub_10001AB84();
    v0[5] = v3;
    swift_retain();
    swift_defaultActor_initialize();
    uint64_t v4 = sub_1000552D4;
  }
  else if (type metadata accessor for SubmitEagerEventsActivity() == v1)
  {
    uint64_t v3 = sub_10001AB84();
    v0[6] = v3;
    swift_retain();
    swift_defaultActor_initialize();
    uint64_t v4 = sub_10005536C;
  }
  else if (type metadata accessor for CacheCleanupActivity() == v1)
  {
    uint64_t v3 = sub_10001AB84();
    v0[7] = v3;
    swift_retain();
    swift_defaultActor_initialize();
    uint64_t v4 = sub_100055404;
  }
  else
  {
    if (type metadata accessor for PostInstallActivity() != v1) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v3 = sub_10001AB84();
    v0[8] = v3;
    swift_retain();
    swift_defaultActor_initialize();
    uint64_t v4 = sub_10005549C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10005523C()
{
  sub_1000094A8();
  swift_release();
  sub_100057240(&qword_1000A7EB0, 255, (void (*)(uint64_t))type metadata accessor for SubmitEventsActivity);
  sub_100009574();
  return v0();
}

uint64_t sub_1000552D4()
{
  sub_1000094A8();
  swift_release();
  sub_100057240(&qword_1000A7EA8, 255, (void (*)(uint64_t))type metadata accessor for RefreshStorebagsActivity);
  sub_100009574();
  return v0();
}

uint64_t sub_10005536C()
{
  sub_1000094A8();
  swift_release();
  sub_100057240(&qword_1000A7EA0, 255, (void (*)(uint64_t))type metadata accessor for SubmitEagerEventsActivity);
  sub_100009574();
  return v0();
}

uint64_t sub_100055404()
{
  sub_1000094A8();
  swift_release();
  sub_100057240(&qword_1000A7E98, 255, (void (*)(uint64_t))type metadata accessor for CacheCleanupActivity);
  sub_100009574();
  return v0();
}

uint64_t sub_10005549C()
{
  sub_1000094A8();
  swift_release();
  sub_100057240(&qword_1000A7E90, 255, (void (*)(uint64_t))type metadata accessor for PostInstallActivity);
  sub_100009574();
  return v0();
}

uint64_t sub_100055534(xpc_object_t criteria)
{
  uint64_t v2 = *(_xpc_activity_s **)(v1 + 16);
  if (!criteria) {
    criteria = xpc_dictionary_create_empty();
  }
  xpc_activity_set_criteria(v2, criteria);

  return swift_unknownObjectRelease();
}

uint64_t sub_100055580()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for XPCActivityHandle()
{
  return self;
}

uint64_t sub_1000555DC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000A7CA0);
  sub_100012884(v0, (uint64_t)qword_1000A7CA0);
  return Logger.init(subsystem:category:)();
}

void sub_100055654(char a1)
{
  if (a1 != 2) {
    *(unsigned char *)(v1 + 136) = a1 & 1;
  }
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  uint64_t aBlock = 0xD000000000000018;
  unint64_t v17 = 0x8000000100089730;
  uint64_t v2 = *(void *)(v1 + 112);
  uint64_t v3 = *(void *)(v1 + 120);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 32);
  v5._uint64_t countAndFlagsBits = v4(v2, v3);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  os_log_type_t v20 = sub_100057530;
  uint64_t v21 = v1;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v17 = 1107296256;
  uint64_t v18 = sub_10000FAC0;
  uint64_t v19 = &unk_1000A0B00;
  uint64_t v6 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t v7 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  xpc_activity_register((const char *)(v7 + 32), XPC_ACTIVITY_CHECK_IN, v6);
  swift_release();
  _Block_release(v6);
  if (qword_1000A6058 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100012884(v8, (uint64_t)qword_1000A7CA0);
  sub_1000142AC();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (_DWORD *)sub_100016068();
    uint64_t aBlock = sub_1000094B4();
    *uint64_t v11 = 136315138;
    uint64_t v12 = v4(v2, v3);
    sub_10001227C(v12, v13, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100014D5C();
    sub_10001640C((void *)&_mh_execute_header, v14, v15, "registered: %s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    sub_100014D5C();
  }
}

uint64_t sub_100055908()
{
  uint64_t v1 = sub_100016CE0(&qword_1000A7EE0);
  uint64_t v2 = sub_100009374(v1);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for XPCObject();
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100016CE0(&qword_1000A7EE8);
  uint64_t v8 = sub_100009374(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 120) + 24);
  uint64_t v15 = sub_100011478();
  uint64_t v16 = *(void *)(v14(v15) + 16);
  swift_bridgeObjectRelease();
  if (!v16) {
    return 0;
  }
  xpc_object_t v41 = RTCXPCDictionary.init()();
  uint64_t v17 = sub_100011478();
  uint64_t result = v14(v17);
  int64_t v19 = 0;
  uint64_t v20 = *(void *)(result + 64);
  uint64_t v36 = result + 64;
  uint64_t v39 = result;
  uint64_t v21 = 1 << *(unsigned char *)(result + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v37 = (unint64_t)(v21 + 63) >> 6;
  int64_t v35 = v37 - 1;
  if ((v22 & v20) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v24 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v25 = v24 | (v19 << 6);
  while (2)
  {
    uint64_t v26 = *(void *)(v39 + 56);
    *uint64_t v11 = *(void *)(*(void *)(v39 + 48) + 8 * v25);
    uint64_t v27 = v26 + *(void *)(v38 + 72) * v25;
    uint64_t v28 = sub_100016CE0(&qword_1000A7EF0);
    sub_100057464(v27, (uint64_t)v11 + *(int *)(v28 + 48));
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v11, 0, 1, v28);
    while (1)
    {
      sub_1000574C8((uint64_t)v11, (uint64_t)v13);
      uint64_t v33 = sub_100016CE0(&qword_1000A7EF0);
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v13, 1, v33) == 1)
      {
        swift_release();
        return (uint64_t)v41;
      }
      sub_100017EE8((uint64_t)&v13[*(int *)(v33 + 48)], (uint64_t)v6);
      String.init(cString:)();
      sub_100057464((uint64_t)v6, (uint64_t)v4);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v4, 0, 1, v40);
      RTCXPCDictionary.subscript.setter((uint64_t)v4);
      uint64_t result = sub_100032B10((uint64_t)v6);
      if (v23) {
        goto LABEL_5;
      }
LABEL_7:
      int64_t v29 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v29 < v37)
      {
        unint64_t v30 = *(void *)(v36 + 8 * v29);
        if (v30) {
          goto LABEL_10;
        }
        int64_t v31 = v19 + 2;
        ++v19;
        if (v29 + 1 < v37)
        {
          unint64_t v30 = *(void *)(v36 + 8 * v31);
          if (v30) {
            goto LABEL_13;
          }
          int64_t v19 = v29 + 1;
          if (v29 + 2 < v37)
          {
            unint64_t v30 = *(void *)(v36 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_10;
            }
            int64_t v31 = v29 + 3;
            int64_t v19 = v29 + 2;
            if (v29 + 3 < v37) {
              break;
            }
          }
        }
      }
LABEL_24:
      uint64_t v32 = sub_100016CE0(&qword_1000A7EF0);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v11, 1, 1, v32);
      unint64_t v23 = 0;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v31);
    if (v30)
    {
LABEL_13:
      int64_t v29 = v31;
LABEL_10:
      unint64_t v23 = (v30 - 1) & v30;
      unint64_t v25 = __clz(__rbit64(v30)) + (v29 << 6);
      int64_t v19 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v37)
    {
      int64_t v19 = v35;
      goto LABEL_24;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_10;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_100055D00(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  uint64_t v6 = sub_100009374(v5);
  __chkstk_darwin(v6);
  sub_100016910();
  type metadata accessor for XPCActivityHandle();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = (_xpc_activity_s *)swift_unknownObjectRetain();
  xpc_activity_state_t state = xpc_activity_get_state(v8);
  if (state == 2)
  {
    if (qword_1000A6058 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100012884(v20, (uint64_t)qword_1000A7CA0);
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (_DWORD *)sub_100016068();
      uint64_t v39 = sub_1000094B4();
      *unint64_t v23 = 136315138;
      sub_100017E20();
      uint64_t v25 = v24();
      uint64_t v27 = sub_10001227C(v25, v26, &v39);
      sub_1000151E8(v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018274();
      sub_10001640C((void *)&_mh_execute_header, v28, v29, "run: %s");
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      sub_100018274();
    }

    int64_t v35 = *(_xpc_activity_s **)(v7 + 16);
    if (xpc_activity_should_defer(v35))
    {
      xpc_activity_set_state(v35, 3);
    }
    else
    {
      xpc_activity_set_state(v35, 4);
      uint64_t v36 = type metadata accessor for TaskPriority();
      sub_10005753C(v36);
      int64_t v37 = (void *)swift_allocObject();
      void v37[2] = 0;
      void v37[3] = 0;
      v37[4] = v3;
      v37[5] = v7;
      swift_retain();
      sub_10000FF80(v2, (uint64_t)&unk_1000A7ED8, (uint64_t)v37);
    }
    goto LABEL_28;
  }
  if (!state)
  {
    if (qword_1000A6058 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100012884(v10, (uint64_t)qword_1000A7CA0);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (_DWORD *)sub_100016068();
      uint64_t v39 = sub_1000094B4();
      *unint64_t v13 = 136315138;
      sub_100017E20();
      uint64_t v15 = v14();
      uint64_t v17 = sub_10001227C(v15, v16, &v39);
      sub_1000151E8(v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018274();
      sub_100013508((void *)&_mh_execute_header, v18, v19, "checkin: %s");
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      sub_100018274();
    }

    if (sub_100055908())
    {
      xpc_object_t v33 = xpc_activity_copy_criteria(*(xpc_activity_t *)(v7 + 16));
      swift_unknownObjectRelease();
      if (!v33)
      {
        uint64_t v34 = (void *)swift_unknownObjectRetain();
        sub_100055534(v34);
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_28;
  }
  if (qword_1000A6058 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100012884(v30, (uint64_t)qword_1000A7CA0);
  swift_retain();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 134217984;
    uint64_t v39 = xpc_activity_get_state(*(xpc_activity_t *)(v7 + 16));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v38, v31, "unrecognized XPC activity state: %ld", v32, 0xCu);
    sub_100009474();

LABEL_28:
    swift_release();
    return;
  }
  sub_100014D5C();
}

uint64_t sub_1000561D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_1000561F4, a4, 0);
}

uint64_t sub_1000561F4()
{
  sub_1000094A8();
  sub_100056400(*(void *)(v0 + 24));
  sub_10000E83C();
  return v1();
}

void sub_10005624C()
{
  if (*(void *)(v0 + 128))
  {
    uint64_t v1 = v0;
    uint64_t v2 = qword_1000A6058;
    swift_retain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100012884(v3, (uint64_t)qword_1000A7CA0);
    sub_1000142AC();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (_DWORD *)sub_100016068();
      uint64_t v12 = sub_1000094B4();
      *uint64_t v6 = 136315138;
      sub_100017E20();
      uint64_t v8 = v7();
      sub_10001227C(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100014D5C();
      swift_bridgeObjectRelease();
      sub_100013508((void *)&_mh_execute_header, v10, v11, "cancel: %s");
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {

      sub_100014D5C();
    }
    sub_100016CE0(&qword_1000A67E8);
    Task.cancel()();
    swift_release();
    *(void *)(v1 + 128) = 0;
    swift_release();
  }
}

void sub_100056400(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  uint64_t v7 = sub_100009374(v6);
  __chkstk_darwin(v7);
  sub_100016910();
  if (*(unsigned char *)(v3 + 136) == 1)
  {
    xpc_activity_set_state(*(xpc_activity_t *)(a1 + 16), 5);
    if (qword_1000A6058 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100012884(v8, (uint64_t)qword_1000A7CA0);
    sub_1000142AC();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v9))
    {
      uint64_t v10 = (uint8_t *)sub_100016068();
      aBlock[0] = sub_1000094B4();
      *(_DWORD *)uint64_t v10 = 136315138;
      sub_100017E20();
      uint64_t v12 = v11();
      sub_10001227C(v12, v13, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100014D5C();
      _os_log_impl((void *)&_mh_execute_header, v20, v9, "disabled: skipping %s", v10, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      sub_100014D5C();
    }
  }
  else
  {
    aBlock[4] = (uint64_t)sub_100056FAC;
    aBlock[5] = v3;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000FAC0;
    aBlock[3] = (uint64_t)&unk_1000A0A60;
    uint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    uint64_t v15 = xpc_activity_add_eligibility_changed_handler();
    _Block_release(v14);
    uint64_t v16 = type metadata accessor for TaskPriority();
    sub_10005753C(v16);
    uint64_t v18 = sub_100057240(&qword_1000A7E78, v17, (void (*)(uint64_t))type metadata accessor for XPCActivity);
    uint64_t v19 = (void *)swift_allocObject();
    _DWORD v19[2] = v3;
    v19[3] = v18;
    v19[4] = v15;
    v19[5] = a1;
    v19[6] = v3;
    v19[7] = v5;
    swift_retain_n();
    swift_retain();
    *(void *)(v3 + 128) = sub_10006BBE8(v2, (uint64_t)&unk_1000A7E80, (uint64_t)v19);
    swift_release();
  }
}

uint64_t sub_100056754(_xpc_activity_s *a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = xpc_activity_should_defer(a1);
  if (result)
  {
    uint64_t v8 = type metadata accessor for TaskPriority();
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v6, 1, 1, v8);
    os_log_type_t v9 = (void *)swift_allocObject();
    void v9[2] = 0;
    void v9[3] = 0;
    void v9[4] = a2;
    swift_retain();
    sub_10000FF80((uint64_t)v6, (uint64_t)&unk_1000A7EC0, (uint64_t)v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_100056840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100056860, a4, 0);
}

uint64_t sub_100056860()
{
  sub_1000094A8();
  sub_10005624C();
  sub_10000E83C();
  return v0();
}

uint64_t sub_1000568B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return _swift_task_switch(sub_1000568DC, a6, 0);
}

uint64_t sub_1000568DC()
{
  sub_1000094A8();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  void *v4 = v0;
  v4[1] = sub_100056978;
  uint64_t v5 = *(void *)(v0 + 56);
  return sub_100055048(v3, v2, v5);
}

uint64_t sub_100056978()
{
  sub_1000094A8();
  sub_100017D58();
  v2[2] = v0;
  v2[3] = v1;
  v2[4] = v3;
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *v0;
  sub_100015EE4();
  *uint64_t v7 = v6;
  *(void *)(v9 + 80) = v8;
  swift_task_dealloc();
  return _swift_task_switch(sub_100056A68, v5, 0);
}

uint64_t sub_100056A68()
{
  static Task<>.checkCancellation()();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1 + 16) + **(int **)(v1 + 16));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100056BD4;
  return v5(ObjectType, v1);
}

uint64_t sub_100056BD4()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *v0;
  sub_100015EE4();
  void *v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_100056CB4, v2, 0);
}

uint64_t sub_100056CB4()
{
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  swift_unknownObjectRelease();
  sub_100056D38(v3, v2, v1);
  sub_10000E83C();
  return v4();
}

void sub_100056D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    xpc_activity_remove_eligibility_changed_handler();
  }
  xpc_activity_set_state(*(xpc_activity_t *)(a2 + 16), 5);
  if (qword_1000A6058 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100012884(v5, (uint64_t)qword_1000A7CA0);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a3 + 120) + 32))();
    sub_10001227C(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "done: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100056F0C(uint64_t a1, uint64_t a2)
{
  swift_defaultActor_initialize();
  *(void *)(v2 + 120) = a2;
  *(void *)(v2 + 128) = 0;
  *(unsigned char *)(v2 + 136) = 0;
  *(void *)(v2 + 112) = a1;
  return v2;
}

uint64_t sub_100056F50()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCActivity()
{
  return self;
}

uint64_t sub_100056FAC(_xpc_activity_s *a1)
{
  return sub_100056754(a1, v1);
}

uint64_t sub_100056FB4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100056FFC()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100015EF4(v4);
  void *v5 = v6;
  v5[1] = sub_10000D9FC;
  uint64_t v7 = sub_1000166D4();
  return sub_1000568B8(v7, v8, v9, v10, v1, v3, v2);
}

uint64_t sub_1000570B8()
{
  sub_100016CE0(&qword_1000A6C18);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100087600;
  type metadata accessor for SubmitEventsActivity();
  uint64_t v2 = sub_100057240(&qword_1000A7EB0, 255, (void (*)(uint64_t))type metadata accessor for SubmitEventsActivity);
  type metadata accessor for XPCActivity();
  swift_allocObject();
  sub_100014080();
  *(void *)(v1 + 32) = v0;
  type metadata accessor for PostInstallActivity();
  sub_100057240(&qword_1000A7E90, 255, (void (*)(uint64_t))type metadata accessor for PostInstallActivity);
  sub_100017288();
  sub_100014080();
  *(void *)(v1 + 40) = v0;
  uint64_t v3 = type metadata accessor for CacheCleanupActivity();
  sub_100057240(&qword_1000A7E98, 255, (void (*)(uint64_t))type metadata accessor for CacheCleanupActivity);
  uint64_t v4 = sub_100017288();
  sub_100056F0C(v3, v2);
  *(void *)(v1 + 48) = v4;
  uint64_t result = specialized Array._endMutation()();
  qword_1000AF370 = v1;
  return result;
}

uint64_t sub_100057240(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100057288()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000572C8(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_100015EF4(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_10001B7E0;
  return sub_100056840(a1, v3, v4, v5);
}

uint64_t sub_100057374()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000573BC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_100015EF4(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_10000D9FC;
  uint64_t v5 = sub_1000166D4();
  return sub_1000561D4(v5, v6, v7, v8, v1);
}

uint64_t sub_100057464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000574C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A7EE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005753C(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwst_0(v1, 1, 1, a1);
}

uint64_t sub_10005755C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1000575B0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100057620(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000576C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for EventAllowFilter()
{
}

void type metadata accessor for EventRemoveFilter()
{
}

void type metadata accessor for EventSHA256KeyFilter()
{
}

void type metadata accessor for EventAllowValuesFilter()
{
}

void type metadata accessor for EventDenyValuesFilter()
{
}

void type metadata accessor for EventInsertStringKeyFilter()
{
}

void type metadata accessor for EventAppendToKeyFilter()
{
}

void type metadata accessor for EventPrependToKeyFilter()
{
}

uint64_t sub_1000577A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = sub_100016CE0(&qword_1000A6740);
  uint64_t v11 = sub_100009374(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (uint64_t *)((char *)&v44 - v19);
  __chkstk_darwin(v18);
  os_log_type_t v22 = (char *)&v44 - v21;
  if (*(void *)(a6 + 16))
  {
    if (!*(void *)(a3 + 16)) {
      goto LABEL_8;
    }
    unint64_t v23 = sub_100014BA8();
    if ((v24 & 1) == 0) {
      goto LABEL_8;
    }
    unint64_t v25 = v23;
    uint64_t v26 = *(void *)(a3 + 56);
    uint64_t v27 = type metadata accessor for EventValue();
    sub_10000948C();
    sub_100037B90(v26 + *(void *)(v28 + 72) * v25, (uint64_t)v22);
    sub_100018004();
    _s10RTCUtility9XPCObjectOwst_0(v29, v30, v31, v27);
    sub_10005B01C((uint64_t)v22, (uint64_t)v20);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v33 = *v20;
    }
    else
    {
      if (EnumCaseMultiPayload != 2)
      {
        sub_100037CC0((uint64_t)v20);
        goto LABEL_9;
      }
      uint64_t v33 = *v20;
      if (v33 < 0)
      {
        __break(1u);
LABEL_8:
        type metadata accessor for EventValue();
        uint64_t v34 = sub_10005B37C();
        _s10RTCUtility9XPCObjectOwst_0(v34, v35, v36, v37);
LABEL_9:
        uint64_t v38 = (uint64_t)v22;
LABEL_23:
        sub_1000173F0(v38, &qword_1000A6740);
        return 0;
      }
    }
    sub_1000173F0((uint64_t)v22, &qword_1000A6740);
    sub_100073318(v33, a6);
    if ((v39 & 1) == 0) {
      return 0;
    }
  }
  if (!*(void *)(a7 + 16)) {
    return 1;
  }
  sub_10006B2DC(a3, (uint64_t)v17);
  uint64_t v40 = type metadata accessor for EventValue();
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v17, 1, v40) == 1) {
    goto LABEL_22;
  }
  sub_10005B01C((uint64_t)v17, (uint64_t)v14);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 2)
  {
    if (result == 1)
    {
      uint64_t v42 = *v14;
      goto LABEL_19;
    }
    sub_100037CC0((uint64_t)v14);
LABEL_22:
    uint64_t v38 = (uint64_t)v17;
    goto LABEL_23;
  }
  uint64_t v42 = *v14;
  if (*v14 < 0)
  {
    __break(1u);
    return result;
  }
LABEL_19:
  sub_1000173F0((uint64_t)v17, &qword_1000A6740);
  sub_100073318(v42, a7);
  return (v43 & 1) != 0;
}

uint64_t sub_100057A58()
{
  uint64_t result = sub_10007F0D0((uint64_t)&off_10009DC90);
  qword_1000AF378 = result;
  return result;
}

uint64_t sub_100057A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (qword_1000A6068 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1000AF378;
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t result = sub_100057B1C(v11, v10);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = result;
  return result;
}

uint64_t sub_100057B1C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t v14 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * i);
    Swift::Int v15 = *v14;
    Swift::Int v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_10005B84C(&v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

BOOL sub_100057CA0(uint64_t a1, uint64_t a2)
{
  sub_100073204(a1, a2, *(void *)(v2 + 32));
  return (v3 & 1) == 0;
}

void sub_100057CC4()
{
  sub_100017C48();
  uint64_t v3 = v2;
  uint64_t v4 = sub_100016CE0(&qword_1000A6740);
  uint64_t v5 = sub_100009374(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  int64_t v8 = (char *)v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v10 = *(void *)(v0 + 24);
  uint64_t v85 = v0;
  uint64_t v11 = *(void *)(v3 + 16);
  if (sub_1000577A8(v6, v12, v11, v13, v14, v9, v10))
  {
    v80[0] = v3;
    v80[1] = v1;
    uint64_t v15 = *(void *)(v11 + 64);
    os_log_type_t v82 = v8;
    uint64_t v83 = v11 + 64;
    uint64_t v16 = 1 << *(unsigned char *)(v11 + 32);
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    uint64_t v18 = v17 & v15;
    sub_10005B340();
    uint64_t v84 = v19;
    swift_bridgeObjectRetain_n();
    uint64_t v20 = 0;
    uint64_t v81 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v18)
      {
        sub_100011670();
        uint64_t v22 = v21 | (v20 << 6);
      }
      else
      {
        uint64_t v23 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
LABEL_69:
          __break(1u);
          return;
        }
        if (v23 >= v84) {
          goto LABEL_60;
        }
        ++v20;
        if (!*(void *)(v83 + 8 * v23))
        {
          uint64_t v20 = v23 + 1;
          sub_10005B38C();
          if (v24 == v25) {
            goto LABEL_60;
          }
          sub_100012994();
          if (!v27)
          {
            uint64_t v20 = v26 + 2;
            sub_10005B38C();
            if (v24 == v25) {
              goto LABEL_60;
            }
            sub_100012994();
            if (!v29)
            {
              uint64_t v20 = v28 + 3;
              sub_10005B38C();
              if (v24 == v25) {
                goto LABEL_60;
              }
              sub_100012994();
              if (!v31)
              {
                uint64_t v20 = v30 + 4;
                sub_10005B38C();
                if (v24 == v25) {
                  goto LABEL_60;
                }
                sub_100012994();
                if (!v33)
                {
                  uint64_t v34 = v32 + 5;
                  if (v34 >= v84)
                  {
LABEL_60:
                    swift_release();
                    uint64_t v63 = v81[2];
                    if (v63)
                    {
                      id v64 = v81 + 5;
                      do
                      {
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        unint64_t v65 = sub_100014BA8();
                        char v67 = v66;
                        swift_bridgeObjectRelease();
                        if (v67)
                        {
                          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                          uint64_t v86 = v11;
                          Swift::Int v69 = *(void *)(v11 + 24);
                          sub_100016CE0((uint64_t *)&unk_1000A7860);
                          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v69);
                          uint64_t v11 = v86;
                          swift_bridgeObjectRelease();
                          uint64_t v70 = *(void *)(v11 + 56);
                          uint64_t v71 = type metadata accessor for EventValue();
                          sub_10000948C();
                          uint64_t v73 = v70 + *(void *)(v72 + 72) * v65;
                          uint64_t v74 = (uint64_t)v82;
                          sub_100037C5C(v73, (uint64_t)v82);
                          _NativeDictionary._delete(at:)();
                          swift_bridgeObjectRelease();
                          sub_100018004();
                          uint64_t v78 = v71;
                        }
                        else
                        {
                          uint64_t v78 = type metadata accessor for EventValue();
                          uint64_t v74 = (uint64_t)v82;
                          uint64_t v75 = (uint64_t)v82;
                          uint64_t v76 = 1;
                          uint64_t v77 = 1;
                        }
                        _s10RTCUtility9XPCObjectOwst_0(v75, v76, v77, v78);
                        v64 += 2;
                        sub_1000173F0(v74, &qword_1000A6740);
                        swift_bridgeObjectRelease();
                        --v63;
                      }
                      while (v63);
                    }
                    swift_bridgeObjectRelease();
                    uint64_t v79 = v80[0];
                    swift_bridgeObjectRelease();
                    *(void *)(v79 + 16) = v11;
                    goto LABEL_67;
                  }
                  if (!*(void *)(v83 + 8 * v34))
                  {
                    while (1)
                    {
                      uint64_t v20 = v34 + 1;
                      if (__OFADD__(v34, 1)) {
                        goto LABEL_69;
                      }
                      sub_10005B38C();
                      if (v24 == v25) {
                        goto LABEL_60;
                      }
                      sub_100012994();
                      uint64_t v34 = v35 + 1;
                      if (v36) {
                        goto LABEL_30;
                      }
                    }
                  }
                  uint64_t v20 = v34;
                }
              }
            }
          }
        }
LABEL_30:
        sub_1000145B0();
        uint64_t v22 = v37 + (v20 << 6);
      }
      uint64_t v87 = v18;
      uint64_t v38 = v11;
      char v39 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v22);
      uint64_t v41 = *v39;
      uint64_t v40 = v39[1];
      uint64_t v42 = *(void *)(v85 + 32);
      if (!*(void *)(v42 + 16)) {
        break;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v43 = Hasher._finalize()();
      uint64_t v44 = -1 << *(unsigned char *)(v42 + 32);
      Swift::Int v45 = v43 & ~v44;
      uint64_t v46 = v42 + 56;
      sub_100017340();
      if ((v47 & 1) == 0) {
        goto LABEL_54;
      }
      uint64_t v48 = *(void *)(v42 + 48);
      uint64_t v49 = (void *)(v48 + 16 * v45);
      BOOL v50 = *v49 == v41 && v49[1] == v40;
      if (v50 || (sub_10001AA8C() & 1) != 0)
      {
LABEL_44:
        swift_bridgeObjectRelease();
        uint64_t v11 = v38;
        uint64_t v18 = v87;
      }
      else
      {
        uint64_t v51 = ~v44;
        unint64_t v52 = (v45 + 1) & ~v44;
        if ((*(void *)(v46 + ((v52 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v52))
        {
          os_log_type_t v53 = (void *)(v48 + 16 * v52);
          BOOL v54 = *v53 == v41 && v53[1] == v40;
          if (v54 || (sub_10001AA8C() & 1) != 0) {
            goto LABEL_44;
          }
          for (unint64_t i = v52 + 1; ; unint64_t i = v56 + 1)
          {
            unint64_t v56 = i & v51;
            sub_100017340();
            if ((v57 & 1) == 0) {
              break;
            }
            uint64_t v58 = (void *)(v48 + 16 * v56);
            BOOL v59 = *v58 == v41 && v58[1] == v40;
            if (v59 || (sub_10001AA8C() & 1) != 0) {
              goto LABEL_44;
            }
          }
        }
LABEL_54:
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v11 = v38;
          uint64_t v60 = v81;
        }
        else
        {
          sub_10001E8DC();
          uint64_t v11 = v38;
        }
        uint64_t v18 = v87;
        unint64_t v61 = v60[2];
        if (v61 >= v60[3] >> 1) {
          sub_10001E8DC();
        }
        v60[2] = v61 + 1;
        uint64_t v81 = v60;
        unint64_t v62 = &v60[2 * v61];
        v62[4] = v41;
        v62[5] = v40;
      }
    }
    swift_bridgeObjectRetain();
    goto LABEL_54;
  }
LABEL_67:
  sub_100019CD4();
}

double sub_100058180@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_100057A80(a1, a2, a3, a4, v8);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a5 = v8[0];
  *(_OWORD *)(a5 + 16) = v7;
  *(void *)(a5 + 32) = v9;
  return result;
}

void sub_1000581C4()
{
}

void sub_1000581E0()
{
  sub_100017C48();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_100016CE0(&qword_1000A6740);
  uint64_t v10 = sub_100009374(v9);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v8 + 16);
  if ((sub_1000577A8(v11, v15, v14, v16, v17, v4, v2) & 1) == 0)
  {
LABEL_24:
    sub_100019CD4();
    return;
  }
  uint64_t v45 = v8;
  uint64_t v46 = v0;
  uint64_t v47 = v6 + 56;
  sub_100017100();
  uint64_t v20 = v19 & v18;
  sub_10005B340();
  uint64_t v48 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  uint64_t v23 = &qword_1000A6740;
  if (!v20) {
    goto LABEL_4;
  }
LABEL_3:
  for (v20 &= v20 - 1; ; uint64_t v20 = (v25 - 1) & v25)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_100014BA8();
    char v29 = v28;
    swift_bridgeObjectRelease();
    if (v29)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v49 = v22;
      uint64_t v31 = v13;
      uint64_t v32 = v6;
      uint64_t v33 = v23;
      Swift::Int v34 = *(void *)(v14 + 24);
      sub_100016CE0((uint64_t *)&unk_1000A7860);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v34);
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void *)(v14 + 56);
      uint64_t v36 = type metadata accessor for EventValue();
      sub_10000948C();
      uint64_t v38 = v35 + *(void *)(v37 + 72) * v27;
      uint64_t v23 = v33;
      uint64_t v6 = v32;
      uint64_t v13 = v31;
      uint64_t v22 = v49;
      sub_100037C5C(v38, (uint64_t)v13);
      _NativeDictionary._delete(at:)();
      swift_bridgeObjectRelease();
      sub_100018004();
      uint64_t v42 = v36;
    }
    else
    {
      type metadata accessor for EventValue();
      uint64_t v39 = sub_10005B37C();
    }
    _s10RTCUtility9XPCObjectOwst_0(v39, v40, v41, v42);
    sub_1000173F0((uint64_t)v13, v23);
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v24 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v24 >= v48) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v47 + 8 * v24);
    ++v22;
    if (!v25)
    {
      uint64_t v22 = v24 + 1;
      if (v24 + 1 >= v48) {
        goto LABEL_23;
      }
      uint64_t v25 = *(void *)(v47 + 8 * v22);
      if (!v25)
      {
        uint64_t v22 = v24 + 2;
        if (v24 + 2 >= v48) {
          goto LABEL_23;
        }
        uint64_t v25 = *(void *)(v47 + 8 * v22);
        if (!v25) {
          break;
        }
      }
    }
LABEL_17:
    ;
  }
  uint64_t v26 = v24 + 3;
  if (v26 >= v48)
  {
LABEL_23:
    swift_release();
    uint64_t v43 = v45;
    swift_bridgeObjectRelease();
    *(void *)(v43 + 16) = v14;
    goto LABEL_24;
  }
  uint64_t v25 = *(void *)(v47 + 8 * v26);
  if (v25)
  {
    uint64_t v22 = v26;
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t v22 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v22 >= v48) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v47 + 8 * v22);
    ++v26;
    if (v25) {
      goto LABEL_17;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1000584FC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10005AF68(XPCIncomingConnection.init(conn:), a1);
}

void sub_100058514()
{
}

uint64_t sub_100058534(uint64_t a1, uint64_t a2)
{
  return sub_1000584F8(a1, a2, *v2);
}

void sub_10005853C()
{
  sub_100017C48();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v136 = type metadata accessor for SHA256();
  sub_100014C1C();
  uint64_t v149 = v9;
  __chkstk_darwin(v10);
  sub_100016178();
  uint64_t v135 = v11;
  uint64_t v12 = type metadata accessor for String.Encoding();
  sub_100014C1C();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100016178();
  uint64_t v129 = v16;
  uint64_t v134 = type metadata accessor for SHA256Digest();
  sub_100014C1C();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  sub_100014198();
  uint64_t v128 = v20;
  sub_100013F9C();
  __chkstk_darwin(v21);
  sub_100013528();
  uint64_t v133 = v22;
  uint64_t v137 = type metadata accessor for EventValue();
  sub_100014C1C();
  uint64_t v143 = v23;
  __chkstk_darwin(v24);
  sub_100014198();
  uint64_t v132 = v25;
  sub_100013F9C();
  __chkstk_darwin(v26);
  sub_100013528();
  unint64_t v127 = v27;
  uint64_t v28 = sub_100016CE0(&qword_1000A6740);
  uint64_t v29 = sub_100009374(v28);
  __chkstk_darwin(v29);
  sub_100014198();
  uint64_t v130 = v30;
  sub_100013F9C();
  __chkstk_darwin(v31);
  uint64_t v146 = (uint64_t)v126 - v32;
  sub_100013F9C();
  __chkstk_darwin(v33);
  sub_100013528();
  uint64_t v147 = v34;
  uint64_t v131 = v8;
  uint64_t v35 = *(void **)(v8 + 16);
  if (sub_1000577A8(v36, v37, (uint64_t)v35, v38, v39, v4, v2))
  {
    v126[6] = v0;
    v126[5] = v12;
    uint64_t v144 = v6 + 56;
    sub_100017100();
    unint64_t v42 = v41 & v40;
    sub_10005B340();
    uint64_t v145 = v43;
    v126[4] = v14 + 8;
    v126[3] = v149 + 8;
    v126[2] = v18 + 16;
    v126[1] = v18 + 8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v44 = 0;
    long long v140 = xmmword_100084C90;
    uint64_t v45 = v6;
    uint64_t v46 = v137;
    uint64_t v47 = v143;
    uint64_t v48 = v146;
LABEL_3:
    uint64_t v49 = v147;
    if (v42)
    {
LABEL_4:
      unint64_t v50 = __clz(__rbit64(v42));
      v42 &= v42 - 1;
      uint64_t v148 = v44;
      unint64_t v51 = v50 | (v44 << 6);
      goto LABEL_19;
    }
    while (1)
    {
      uint64_t v52 = v44 + 1;
      if (__OFADD__(v44, 1))
      {
        __break(1u);
        goto LABEL_83;
      }
      if (v52 >= v145) {
        goto LABEL_80;
      }
      unint64_t v53 = *(void *)(v144 + 8 * v52);
      uint64_t v54 = v44 + 1;
      if (!v53)
      {
        uint64_t v54 = v44 + 2;
        if (v44 + 2 >= v145) {
          goto LABEL_80;
        }
        unint64_t v53 = *(void *)(v144 + 8 * v54);
        if (!v53)
        {
          uint64_t v54 = v44 + 3;
          if (v44 + 3 >= v145) {
            goto LABEL_80;
          }
          unint64_t v53 = *(void *)(v144 + 8 * v54);
          if (!v53)
          {
            uint64_t v55 = v44 + 4;
            if (v44 + 4 >= v145)
            {
LABEL_80:
              swift_release();
              uint64_t v125 = v131;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(void *)(v125 + 16) = v35;
              swift_bridgeObjectRelease();
              break;
            }
            unint64_t v53 = *(void *)(v144 + 8 * v55);
            if (!v53)
            {
              while (1)
              {
                uint64_t v54 = v55 + 1;
                if (__OFADD__(v55, 1)) {
                  goto LABEL_85;
                }
                if (v54 >= v145) {
                  goto LABEL_80;
                }
                unint64_t v53 = *(void *)(v144 + 8 * v54);
                ++v55;
                if (v53) {
                  goto LABEL_18;
                }
              }
            }
            uint64_t v54 = v44 + 4;
          }
        }
      }
LABEL_18:
      unint64_t v42 = (v53 - 1) & v53;
      uint64_t v148 = v54;
      unint64_t v51 = __clz(__rbit64(v53)) + (v54 << 6);
LABEL_19:
      unint64_t v56 = (uint64_t *)(*(void *)(v45 + 48) + 16 * v51);
      uint64_t v57 = *v56;
      uint64_t v58 = v56[1];
      uint64_t v59 = v35[2];
      uint64_t v149 = v57;
      if (v59)
      {
        swift_bridgeObjectRetain_n();
        unint64_t v60 = sub_100011578();
        uint64_t v49 = v147;
        if (v61)
        {
          sub_100037B90(v35[7] + *(void *)(v47 + 72) * v60, v147);
          uint64_t v62 = v49;
          uint64_t v63 = 0;
        }
        else
        {
          uint64_t v62 = v147;
          uint64_t v63 = 1;
        }
        _s10RTCUtility9XPCObjectOwst_0(v62, v63, 1, v46);
        swift_bridgeObjectRelease();
        uint64_t v48 = v146;
      }
      else
      {
        _s10RTCUtility9XPCObjectOwst_0(v49, 1, 1, v46);
        swift_bridgeObjectRetain();
      }
      if (_s10RTCUtility9XPCObjectOwet_0(v49, 1, v46) == 1)
      {
        sub_1000173F0(v49, &qword_1000A6740);
      }
      else
      {
        if (!swift_getEnumCaseMultiPayload())
        {
          static String.Encoding.utf8.getter();
          uint64_t v75 = String.data(using:allowLossyConversion:)();
          unint64_t v77 = v76;
          swift_bridgeObjectRelease();
          sub_10005B3E8();
          sub_100014474();
          v78();
          if (v77 >> 60 == 15) {
            uint64_t v79 = 0;
          }
          else {
            uint64_t v79 = v75;
          }
          if (v77 >> 60 == 15) {
            unint64_t v80 = 0xC000000000000000;
          }
          else {
            unint64_t v80 = v77;
          }
          uint64_t v81 = sub_10005B084((unint64_t *)&unk_1000A84B0, (void (*)(uint64_t))&type metadata accessor for SHA256);
          dispatch thunk of HashFunction.init()();
          v126[0] = v45;
          switch(v80 >> 62)
          {
            case 1uLL:
              if (v79 >> 32 < (int)v79) {
                goto LABEL_89;
              }
              unint64_t v141 = v80;
              sub_10002779C(v79, v80);
              uint64_t v86 = __DataStorage._bytes.getter();
              uint64_t v142 = v79;
              if (v86 && __OFSUB__((int)v79, __DataStorage._offset.getter())) {
                goto LABEL_92;
              }
              __DataStorage._length.getter();
              sub_10001642C();
              dispatch thunk of HashFunction.update(bufferPointer:)();
              uint64_t v84 = v142;
              break;
            case 2uLL:
              uint64_t v139 = v81;
              uint64_t v82 = *(void *)(v79 + 16);
              uint64_t v83 = *(void *)(v79 + 24);
              unint64_t v141 = v80;
              sub_10002779C(v79, v80);
              uint64_t v142 = v79;
              swift_retain();
              swift_retain();
              if (__DataStorage._bytes.getter() && __OFSUB__(v82, __DataStorage._offset.getter())) {
                goto LABEL_91;
              }
              if (__OFSUB__(v83, v82)) {
                goto LABEL_90;
              }
              __DataStorage._length.getter();
              sub_10001642C();
              dispatch thunk of HashFunction.update(bufferPointer:)();
              swift_release();
              uint64_t v84 = v142;
              swift_release();
              break;
            case 3uLL:
              *(void *)((char *)&v150 + 6) = 0;
              *(void *)&long long v150 = 0;
              goto LABEL_54;
            default:
              *(void *)&long long v150 = v79;
              WORD4(v150) = v80;
              BYTE10(v150) = BYTE2(v80);
              BYTE11(v150) = BYTE3(v80);
              BYTE12(v150) = BYTE4(v80);
              BYTE13(v150) = BYTE5(v80);
LABEL_54:
              uint64_t v84 = v79;
              dispatch thunk of HashFunction.update(bufferPointer:)();
              sub_1000088D0(v79, v80);
              uint64_t v47 = v143;
              unint64_t v85 = v80;
              goto LABEL_60;
          }
          unint64_t v85 = v141;
          sub_1000088D0(v84, v141);
          uint64_t v47 = v143;
LABEL_60:
          uint64_t v87 = v133;
          dispatch thunk of HashFunction.finalize()();
          sub_10005B3E8();
          sub_100014474();
          v88();
          sub_1000088D0(v84, v85);
          sub_10005B3E8();
          v89(v128, v87, v134);
          sub_10005B084(&qword_1000A6788, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
          dispatch thunk of Sequence.makeIterator()();
          uint64_t v142 = v150;
          uint64_t v90 = *(void *)(v150 + 16);
          uint64_t v91 = _swiftEmptyArrayStorage;
          unint64_t v141 = *((void *)&v150 + 1);
          uint64_t v139 = v90;
          if (*((void *)&v150 + 1) != v90)
          {
            if (*((uint64_t *)&v150 + 1) < v90)
            {
              unint64_t v109 = v141;
              uint64_t v138 = v142 + 32;
              while ((v141 & 0x8000000000000000) == 0)
              {
                if (v109 >= *(void *)(v142 + 16)) {
                  goto LABEL_84;
                }
                char v110 = *(unsigned char *)(v138 + v109);
                sub_100016CE0(&qword_1000A6790);
                uint64_t v111 = swift_allocObject();
                *(_OWORD *)(v111 + 16) = v140;
                *(void *)(v111 + 56) = &type metadata for UInt8;
                *(void *)(v111 + 64) = &protocol witness table for UInt8;
                *(unsigned char *)(v111 + 32) = v110;
                uint64_t v112 = String.init(format:_:)();
                uint64_t v114 = v113;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_10001E8DC();
                  uint64_t v91 = v117;
                }
                unint64_t v115 = v91[2];
                if (v115 >= v91[3] >> 1)
                {
                  sub_10001E8DC();
                  uint64_t v91 = v118;
                }
                ++v109;
                v91[2] = v115 + 1;
                char v116 = &v91[2 * v115];
                v116[4] = v112;
                v116[5] = v114;
                uint64_t v47 = v143;
                if (v139 == v109) {
                  goto LABEL_61;
                }
              }
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
            }
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
          }
LABEL_61:
          swift_bridgeObjectRelease();
          sub_10005B3E8();
          sub_100014474();
          v92();
          *(void *)&long long v150 = v91;
          sub_100016CE0(&qword_1000A6798);
          sub_10005B0CC();
          uint64_t v93 = BidirectionalCollection<>.joined(separator:)();
          uint64_t v95 = v94;
          swift_bridgeObjectRelease();
          uint64_t v96 = (uint64_t)v127;
          *unint64_t v127 = v93;
          *(void *)(v96 + 8) = v95;
          swift_storeEnumTagMultiPayload();
          sub_100037C5C(v96, v132);
          LODWORD(v142) = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v150 = v35;
          uint64_t v97 = v149;
          unint64_t v98 = sub_100011578();
          uint64_t v100 = v35[2];
          BOOL v101 = (v99 & 1) == 0;
          Swift::Int v102 = v100 + v101;
          if (__OFADD__(v100, v101)) {
            goto LABEL_86;
          }
          unint64_t v103 = v98;
          char v104 = v99;
          sub_100016CE0((uint64_t *)&unk_1000A7860);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v142, v102))
          {
            unint64_t v105 = sub_100014BA8();
            if ((v104 & 1) != (v106 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              JUMPOUT(0x100059260);
            }
            unint64_t v103 = v105;
          }
          uint64_t v35 = (void *)v150;
          if (v104)
          {
            uint64_t v107 = sub_10001A944();
            sub_10005AFB8(v107, v108);
            uint64_t v45 = v126[0];
            uint64_t v46 = v137;
            uint64_t v48 = v146;
            goto LABEL_79;
          }
          sub_1000093D4(v150 + 8 * (v103 >> 6));
          int64_t v119 = (void *)(v35[6] + 16 * v103);
          *int64_t v119 = v97;
          v119[1] = v58;
          uint64_t v120 = sub_10001A944();
          sub_100037C5C(v120, v121);
          uint64_t v122 = v35[2];
          BOOL v123 = __OFADD__(v122, 1);
          uint64_t v124 = v122 + 1;
          uint64_t v48 = v146;
          if (v123) {
            goto LABEL_88;
          }
          v35[2] = v124;
          swift_bridgeObjectRetain();
          uint64_t v45 = v126[0];
          uint64_t v46 = v137;
LABEL_79:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v44 = v148;
          goto LABEL_3;
        }
        sub_100037CC0(v49);
      }
      if (v35[2])
      {
        swift_bridgeObjectRetain();
        unint64_t v64 = sub_100011578();
        if (v65)
        {
          uint64_t v48 = v146;
          sub_100037B90(v35[7] + *(void *)(v47 + 72) * v64, v146);
          uint64_t v66 = 0;
        }
        else
        {
          uint64_t v66 = 1;
          uint64_t v48 = v146;
        }
        _s10RTCUtility9XPCObjectOwst_0(v48, v66, 1, v46);
        swift_bridgeObjectRelease();
        if (_s10RTCUtility9XPCObjectOwet_0(v48, 1, v46) != 1)
        {
          sub_1000173F0(v48, &qword_1000A6740);
          swift_bridgeObjectRetain();
          unint64_t v67 = sub_100011578();
          char v69 = v68;
          swift_bridgeObjectRelease();
          if (v69)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v150 = v35;
            Swift::Int v71 = v35[3];
            sub_100016CE0((uint64_t *)&unk_1000A7860);
            Swift::Bool v72 = isUniquelyReferenced_nonNull_native;
            uint64_t v46 = v137;
            _NativeDictionary.ensureUnique(isUnique:capacity:)(v72, v71);
            uint64_t v35 = (void *)v150;
            swift_bridgeObjectRelease();
            uint64_t v73 = v130;
            sub_100037C5C(v35[7] + *(void *)(v143 + 72) * v67, v130);
            _NativeDictionary._delete(at:)();
            swift_bridgeObjectRelease();
            uint64_t v74 = 0;
          }
          else
          {
            uint64_t v74 = 1;
            uint64_t v73 = v130;
          }
          _s10RTCUtility9XPCObjectOwst_0(v73, v74, 1, v46);
          sub_1000173F0(v73, &qword_1000A6740);
          swift_bridgeObjectRelease();
          uint64_t v47 = v143;
          uint64_t v48 = v146;
          uint64_t v44 = v148;
          goto LABEL_3;
        }
      }
      else
      {
        _s10RTCUtility9XPCObjectOwst_0(v48, 1, 1, v46);
      }
      swift_bridgeObjectRelease();
      sub_1000173F0(v48, &qword_1000A6740);
      uint64_t v49 = v147;
      uint64_t v44 = v148;
      if (v42) {
        goto LABEL_4;
      }
    }
  }
  sub_100019CD4();
}

uint64_t sub_100059270@<X0>(uint64_t *a1@<X8>)
{
  return sub_10005AF68(j___s10RTCUtility21XPCIncomingConnectionV4connACSo13OS_xpc_object_p_tcfC, a1);
}

void sub_100059288()
{
}

void sub_1000592A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100017C48();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v112 = sub_100016CE0((uint64_t *)&unk_1000A79A0);
  sub_10000948C();
  __chkstk_darwin(v20);
  sub_10001828C(v21, v99[0]);
  uint64_t v22 = sub_100016CE0(&qword_1000A6740);
  uint64_t v23 = sub_100009374(v22);
  __chkstk_darwin(v23);
  char v110 = (char *)v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013F9C();
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)v99 - v26;
  uint64_t v28 = type metadata accessor for EventValue();
  sub_100014C1C();
  uint64_t v30 = v29;
  __chkstk_darwin(v31);
  sub_100014198();
  uint64_t v107 = v32;
  sub_100013F9C();
  __chkstk_darwin(v33);
  char v106 = (double *)((char *)v99 - v34);
  sub_100013F9C();
  __chkstk_darwin(v35);
  unint64_t v105 = (uint64_t *)((char *)v99 - v36);
  sub_100013F9C();
  __chkstk_darwin(v37);
  char v104 = (uint64_t *)((char *)v99 - v38);
  sub_100013F9C();
  __chkstk_darwin(v39);
  uint64_t v111 = (char *)v99 - v40;
  sub_100013F9C();
  __chkstk_darwin(v41);
  uint64_t v115 = (uint64_t)v99 - v42;
  sub_100013F9C();
  __chkstk_darwin(v43);
  sub_100013528();
  uint64_t v113 = v44;
  if ((sub_1000577A8(v45, v46, *(void *)(v19 + 16), v47, v48, v13, v11) & 1) == 0) {
    goto LABEL_72;
  }
  uint64_t v101 = v15;
  sub_100019A80();
  uint64_t v117 = v17;
  swift_bridgeObjectRetain();
  uint64_t v49 = 0;
  Swift::Int v102 = _swiftEmptyArrayStorage;
  uint64_t v118 = v19;
  uint64_t v108 = v30;
LABEL_3:
  uint64_t v50 = v30;
  if (v15)
  {
LABEL_4:
    sub_100014D74();
    goto LABEL_24;
  }
  while (1)
  {
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_74;
    }
    sub_10001A58C();
    if (v52 == v53) {
      goto LABEL_63;
    }
    sub_10001A6F4();
    if (!v55)
    {
      uint64_t v49 = v54 + 1;
      sub_1000165BC();
      if (v52 == v53) {
        goto LABEL_63;
      }
      sub_10000E6F8();
      if (!v57)
      {
        uint64_t v49 = v56 + 2;
        sub_1000165BC();
        if (v52 == v53) {
          goto LABEL_63;
        }
        sub_10000E6F8();
        if (!v58) {
          break;
        }
      }
    }
LABEL_23:
    sub_100016084();
LABEL_24:
    char v61 = (uint64_t *)(*(void *)(v117 + 48) + 16 * v51);
    uint64_t v63 = *v61;
    uint64_t v62 = v61[1];
    uint64_t v64 = *(void *)(v118 + 16);
    uint64_t v65 = *(void *)(v64 + 16);
    uint64_t v116 = v63;
    if (v65)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v66 = sub_100014BA8();
      if (v67)
      {
        uint64_t v68 = *(void *)(v64 + 56);
        uint64_t v69 = v50;
        sub_100037B90(v68 + *(void *)(v50 + 72) * v66, (uint64_t)v27);
        sub_10005B34C((uint64_t)v27, 0);
        goto LABEL_30;
      }
      sub_10005B34C((uint64_t)v27, 1);
    }
    else
    {
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v27, 1, 1, v28);
      swift_bridgeObjectRetain();
    }
    uint64_t v69 = v50;
LABEL_30:
    sub_1000151FC((uint64_t)v27);
    if (!v84)
    {
      sub_100037C5C((uint64_t)v27, v113);
      uint64_t v70 = *(void *)(v101 + 16);
      if (v70)
      {
        uint64_t v71 = v101 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
        swift_bridgeObjectRetain();
        uint64_t v109 = *(void *)(v69 + 72);
        while (2)
        {
          uint64_t v72 = v62;
          uint64_t v73 = v70;
          uint64_t v74 = v15;
          uint64_t v75 = v49;
          unint64_t v76 = v27;
          uint64_t v77 = v28;
          uint64_t v78 = v115;
          sub_100037B90(v71, v115);
          uint64_t v79 = v78;
          uint64_t v28 = v77;
          unint64_t v27 = v76;
          uint64_t v49 = v75;
          uint64_t v15 = v74;
          uint64_t v80 = v73;
          uint64_t v62 = v72;
          uint64_t v81 = a10 + *(int *)(v112 + 48);
          sub_100037B90(v79, a10);
          sub_100037B90(v113, v81);
          uint64_t v82 = (uint64_t)v111;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              sub_100037B90(a10, v82);
              uint64_t v103 = *(void *)(v82 + 8);
              if (sub_100016928())
              {
                swift_bridgeObjectRelease();
                goto LABEL_51;
              }
              uint64_t v85 = sub_10001A7F8();
              sub_100014510(v85, v86);
              sub_10000E8A0();
              Swift::String v87 = String.lowercased()();
              uint64_t countAndFlagsBits = v87._countAndFlagsBits;
              swift_bridgeObjectRelease();
              uint64_t v119 = countAndFlagsBits;
              object = v87._object;
              sub_1000289E8();
              LOBYTE(v81) = StringProtocol.contains<A>(_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_53;
            case 1u:
              sub_100037B90(a10, (uint64_t)v104);
              if (sub_100016928() != 1) {
                goto LABEL_51;
              }
              uint64_t v83 = v104;
              goto LABEL_43;
            case 2u:
              sub_100037B90(a10, (uint64_t)v105);
              if (sub_100016928() != 2) {
                goto LABEL_51;
              }
              uint64_t v83 = v105;
LABEL_43:
              BOOL v84 = *v83 == *(void *)v81;
              goto LABEL_46;
            case 3u:
              sub_100037B90(a10, (uint64_t)v106);
              if (sub_100016928() != 3) {
                goto LABEL_51;
              }
              BOOL v84 = *v106 == *(double *)v81;
LABEL_46:
              LOBYTE(v81) = v84;
              goto LABEL_53;
            case 4u:
              sub_100037B90(a10, v107);
              if (sub_100016928() != 4) {
                goto LABEL_51;
              }
              sub_100016328();
LABEL_53:
              sub_100037CC0(a10);
              sub_100037CC0(v115);
              if ((v81 & 1) == 0) {
                goto LABEL_54;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_61;
            default:
LABEL_51:
              sub_1000173F0(a10, (uint64_t *)&unk_1000A79A0);
              sub_100037CC0(v115);
LABEL_54:
              v71 += v109;
              uint64_t v70 = v80 - 1;
              if (v70) {
                continue;
              }
              swift_bridgeObjectRelease();
              break;
          }
          break;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000176C0();
      }
      sub_100007E18();
      if (v88)
      {
        sub_1000172A8();
        Swift::Int v102 = v91;
      }
      sub_10005B414();
      *(void *)(v89 + 32) = v90;
      *(void *)(v89 + 40) = v62;
LABEL_61:
      sub_100037CC0(v113);
      uint64_t v30 = v108;
      goto LABEL_3;
    }
    swift_bridgeObjectRelease();
    sub_1000173F0((uint64_t)v27, &qword_1000A6740);
    if (v15) {
      goto LABEL_4;
    }
  }
  sub_10001A58C();
  if (v52 != v53)
  {
    if (!*(void *)(v114 + 8 * v59))
    {
      while (1)
      {
        uint64_t v49 = v59 + 1;
        if (__OFADD__(v59, 1)) {
          break;
        }
        sub_1000165BC();
        if (v52 == v53) {
          goto LABEL_63;
        }
        sub_10001A620();
        if (v60) {
          goto LABEL_23;
        }
      }
LABEL_74:
      __break(1u);
      JUMPOUT(0x100059A4CLL);
    }
    uint64_t v49 = v59;
    goto LABEL_23;
  }
LABEL_63:
  swift_release();
  uint64_t v92 = *(void *)(v118 + 16);
  uint64_t v93 = v102[2];
  if (v93)
  {
    swift_bridgeObjectRetain();
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100014BA8();
      char v95 = v94;
      uint64_t v96 = swift_bridgeObjectRelease();
      if (v95)
      {
        swift_isUniquelyReferenced_nonNull_native();
        uint64_t v121 = v92;
        sub_100016CE0((uint64_t *)&unk_1000A7860);
        sub_10001A480();
        sub_10001A38C();
        sub_10005B3F4(*(void *)(v92 + 56));
        _NativeDictionary._delete(at:)();
        uint64_t v96 = swift_bridgeObjectRelease();
        uint64_t v97 = 0;
      }
      else
      {
        uint64_t v97 = 1;
      }
      sub_10005B398(v96, v97);
      swift_bridgeObjectRelease();
      --v93;
    }
    while (v93);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  uint64_t v98 = v118;
  swift_bridgeObjectRelease();
  *(void *)(v98 + 16) = v92;
LABEL_72:
  sub_100019CD4();
}

void sub_100059A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000592A8(a1, *v8, v8[1], v8[2], v8[3], a6, a7, a8, vars0, vars8);
}

void sub_100059A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100017C48();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v97 = v15;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v105 = sub_100016CE0((uint64_t *)&unk_1000A79A0);
  sub_10000948C();
  __chkstk_darwin(v20);
  sub_10001828C(v21, v94[0]);
  uint64_t v22 = sub_100016CE0(&qword_1000A6740);
  uint64_t v23 = sub_100009374(v22);
  __chkstk_darwin(v23);
  char v104 = (char *)v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013F9C();
  __chkstk_darwin(v25);
  sub_10000E96C();
  uint64_t v26 = type metadata accessor for EventValue();
  sub_100014C1C();
  uint64_t v28 = v27;
  __chkstk_darwin(v29);
  sub_100014198();
  uint64_t v102 = v30;
  sub_100013F9C();
  __chkstk_darwin(v31);
  uint64_t v101 = (double *)((char *)v94 - v32);
  sub_100013F9C();
  __chkstk_darwin(v33);
  uint64_t v100 = (uint64_t *)((char *)v94 - v34);
  sub_100013F9C();
  __chkstk_darwin(v35);
  char v99 = (uint64_t *)((char *)v94 - v36);
  sub_100013F9C();
  uint64_t v38 = __chkstk_darwin(v37);
  uint64_t v40 = (char *)v94 - v39;
  __chkstk_darwin(v38);
  uint64_t v110 = (uint64_t)v94 - v41;
  sub_100013F9C();
  __chkstk_darwin(v42);
  sub_100013528();
  uint64_t v106 = v43;
  if ((sub_1000577A8(v44, v45, *(void *)(v19 + 16), v46, v47, v14, v12) & 1) == 0) {
    goto LABEL_72;
  }
  uint64_t v98 = v40;
  sub_100019A80();
  uint64_t v112 = v17;
  swift_bridgeObjectRetain();
  uint64_t v48 = 0;
  uint64_t v96 = _swiftEmptyArrayStorage;
  uint64_t v107 = v28;
  uint64_t v95 = v19;
  while (v40)
  {
    sub_100014D74();
LABEL_24:
    uint64_t v59 = (uint64_t *)(*(void *)(v112 + 48) + 16 * v49);
    uint64_t v61 = *v59;
    uint64_t v60 = v59[1];
    uint64_t v62 = *(void *)(v19 + 16);
    uint64_t v63 = *(void *)(v62 + 16);
    uint64_t v111 = v61;
    if (v63)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v64 = sub_100014BA8();
      if (v65)
      {
        sub_100037B90(*(void *)(v62 + 56) + *(void *)(v107 + 72) * v64, v10);
        uint64_t v66 = v10;
        uint64_t v67 = 0;
      }
      else
      {
        uint64_t v66 = v10;
        uint64_t v67 = 1;
      }
      sub_10005B34C(v66, v67);
    }
    else
    {
      _s10RTCUtility9XPCObjectOwst_0(v10, 1, 1, v26);
      swift_bridgeObjectRetain();
    }
    sub_1000151FC(v10);
    if (v79)
    {
      swift_bridgeObjectRelease();
      sub_1000173F0(v10, &qword_1000A6740);
    }
    else
    {
      sub_100037C5C(v10, v106);
      uint64_t v68 = *(void *)(v97 + 16);
      if (v68)
      {
        uint64_t v69 = v107;
        uint64_t v70 = v97 + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
        swift_bridgeObjectRetain();
        uint64_t v103 = *(void *)(v69 + 72);
        while (2)
        {
          uint64_t v109 = v68;
          uint64_t v71 = v40;
          uint64_t v72 = v48;
          uint64_t v73 = v10;
          uint64_t v74 = v26;
          uint64_t v75 = v110;
          sub_100037B90(v70, v110);
          uint64_t v76 = a10 + *(int *)(v105 + 48);
          uint64_t v77 = v75;
          uint64_t v26 = v74;
          uint64_t v10 = v73;
          uint64_t v48 = v72;
          uint64_t v40 = v71;
          sub_100037B90(v77, a10);
          sub_100037B90(v106, v76);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              sub_100037B90(a10, (uint64_t)v98);
              if (sub_100016928())
              {
                swift_bridgeObjectRelease();
                goto LABEL_50;
              }
              uint64_t v80 = sub_10001A7F8();
              sub_100014510(v80, v81);
              sub_10000E8A0();
              Swift::String v82 = String.lowercased()();
              swift_bridgeObjectRelease();
              Swift::String v113 = v82;
              sub_1000289E8();
              LOBYTE(v76) = StringProtocol.contains<A>(_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_52;
            case 1u:
              sub_100037B90(a10, (uint64_t)v99);
              if (sub_100016928() != 1) {
                goto LABEL_50;
              }
              uint64_t v78 = v99;
              goto LABEL_42;
            case 2u:
              sub_100037B90(a10, (uint64_t)v100);
              if (sub_100016928() != 2) {
                goto LABEL_50;
              }
              uint64_t v78 = v100;
LABEL_42:
              BOOL v79 = *v78 == *(void *)v76;
              goto LABEL_45;
            case 3u:
              sub_100037B90(a10, (uint64_t)v101);
              if (sub_100016928() != 3) {
                goto LABEL_50;
              }
              BOOL v79 = *v101 == *(double *)v76;
LABEL_45:
              LOBYTE(v76) = v79;
              goto LABEL_52;
            case 4u:
              sub_100037B90(a10, v102);
              if (sub_100016928() != 4) {
                goto LABEL_50;
              }
              sub_100016328();
LABEL_52:
              sub_100037CC0(a10);
              sub_100037CC0(v110);
              if ((v76 & 1) == 0) {
                goto LABEL_53;
              }
              swift_bridgeObjectRelease();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                sub_1000176C0();
              }
              sub_100007E18();
              uint64_t v83 = v111;
              if (v84)
              {
                sub_1000172A8();
                uint64_t v96 = v86;
              }
              sub_10005B414();
              *(void *)(v85 + 32) = v83;
              *(void *)(v85 + 40) = v60;
              goto LABEL_61;
            default:
LABEL_50:
              sub_1000173F0(a10, (uint64_t *)&unk_1000A79A0);
              sub_100037CC0(v110);
LABEL_53:
              v70 += v103;
              uint64_t v68 = v109 - 1;
              if (v109 != 1) {
                continue;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_61:
              uint64_t v19 = v95;
              break;
          }
          break;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_100037CC0(v106);
    }
  }
  if (__OFADD__(v48, 1))
  {
    __break(1u);
    goto LABEL_74;
  }
  sub_10001A58C();
  if (v50 == v51) {
    goto LABEL_63;
  }
  sub_10001A6F4();
  if (v53) {
    goto LABEL_23;
  }
  uint64_t v48 = v52 + 1;
  sub_1000165BC();
  if (v50 == v51) {
    goto LABEL_63;
  }
  sub_10000E6F8();
  if (v55) {
    goto LABEL_23;
  }
  uint64_t v48 = v54 + 2;
  sub_1000165BC();
  if (v50 == v51) {
    goto LABEL_63;
  }
  sub_10000E6F8();
  if (v56)
  {
LABEL_23:
    sub_100016084();
    goto LABEL_24;
  }
  sub_10001A58C();
  if (v50 != v51)
  {
    if (!*(void *)(v108 + 8 * v57))
    {
      while (1)
      {
        uint64_t v48 = v57 + 1;
        if (__OFADD__(v57, 1)) {
          break;
        }
        sub_1000165BC();
        if (v50 == v51) {
          goto LABEL_63;
        }
        sub_10001A620();
        if (v58) {
          goto LABEL_23;
        }
      }
LABEL_74:
      __break(1u);
      JUMPOUT(0x10005A1E4);
    }
    uint64_t v48 = v57;
    goto LABEL_23;
  }
LABEL_63:
  swift_release();
  uint64_t v87 = *(void *)(v19 + 16);
  uint64_t v88 = v96[2];
  if (v88)
  {
    swift_bridgeObjectRetain();
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100014BA8();
      char v90 = v89;
      uint64_t v91 = swift_bridgeObjectRelease();
      if (v90)
      {
        swift_isUniquelyReferenced_nonNull_native();
        uint64_t v114 = v87;
        sub_100016CE0((uint64_t *)&unk_1000A7860);
        sub_10001A480();
        sub_10001A38C();
        sub_10005B3F4(*(void *)(v87 + 56));
        _NativeDictionary._delete(at:)();
        uint64_t v91 = swift_bridgeObjectRelease();
        uint64_t v92 = 0;
      }
      else
      {
        uint64_t v92 = 1;
      }
      sub_10005B398(v91, v92);
      swift_bridgeObjectRelease();
      --v88;
    }
    while (v88);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  uint64_t v93 = v95;
  swift_bridgeObjectRelease();
  *(void *)(v93 + 16) = v87;
LABEL_72:
  sub_100019CD4();
}

void sub_10005A1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059A80(a1, *v8, v8[1], v8[2], v8[3], a6, a7, a8, vars0, vars8);
}

void sub_10005A218()
{
  sub_100017C48();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v80 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = sub_100016CE0(&qword_1000A6740);
  uint64_t v11 = sub_100009374(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v72 - v15;
  uint64_t v17 = type metadata accessor for EventValue();
  sub_100014C1C();
  uint64_t v78 = v18;
  __chkstk_darwin(v19);
  sub_100014198();
  uint64_t v77 = v20;
  sub_100013F9C();
  __chkstk_darwin(v21);
  sub_100013528();
  uint64_t v76 = v22;
  uint64_t v23 = *(void **)(v9 + 16);
  if ((sub_1000577A8(v24, v25, (uint64_t)v23, v26, v27, v4, v2) & 1) == 0) {
    goto LABEL_34;
  }
  sub_10005A654(v80, (uint64_t)v16);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v16, 1, v17) == 1)
  {
    sub_1000173F0((uint64_t)v16, &qword_1000A6740);
LABEL_34:
    sub_100019CD4();
    return;
  }
  v72[0] = v9;
  v72[1] = v0;
  sub_100037C5C((uint64_t)v16, v76);
  uint64_t v79 = v7 + 56;
  sub_100017100();
  uint64_t v30 = v29 & v28;
  sub_10005B340();
  uint64_t v80 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = 0;
  uint64_t v33 = v78;
  uint64_t v73 = v17;
  uint64_t v74 = v7;
  while (1)
  {
    if (v30)
    {
      sub_100011670();
      uint64_t v35 = v34 | (v32 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v32 + 1 >= v80) {
      goto LABEL_33;
    }
    sub_10001A6F4();
    if (!v37)
    {
      uint64_t v32 = v36 + 1;
      if (v36 + 1 >= v80) {
        goto LABEL_33;
      }
      if (!*(void *)(v79 + 8 * v32))
      {
        uint64_t v32 = v36 + 2;
        if (v36 + 2 >= v80) {
          goto LABEL_33;
        }
        if (!*(void *)(v79 + 8 * v32)) {
          break;
        }
      }
    }
LABEL_20:
    sub_1000145B0();
    uint64_t v35 = v40 + (v32 << 6);
LABEL_21:
    uint64_t v41 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v35);
    uint64_t v43 = *v41;
    uint64_t v42 = v41[1];
    uint64_t v44 = v23[2];
    swift_bridgeObjectRetain();
    if (v44 && (unint64_t v45 = sub_100014BA8(), (v46 & 1) != 0))
    {
      sub_100037B90(v23[7] + *(void *)(v33 + 72) * v45, (uint64_t)v14);
      sub_100018004();
      _s10RTCUtility9XPCObjectOwst_0(v47, v48, v49, v17);
      swift_bridgeObjectRelease();
      sub_1000173F0((uint64_t)v14, &qword_1000A6740);
    }
    else
    {
      uint64_t v50 = sub_10005B37C();
      _s10RTCUtility9XPCObjectOwst_0(v50, v51, v52, v17);
      sub_1000173F0((uint64_t)v14, &qword_1000A6740);
      sub_100037B90(v76, v77);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v53 = sub_100014BA8();
      uint64_t v55 = v23[2];
      BOOL v56 = (v54 & 1) == 0;
      Swift::Int v57 = v55 + v56;
      if (__OFADD__(v55, v56)) {
        goto LABEL_37;
      }
      unint64_t v58 = v53;
      char v59 = v54;
      sub_100016CE0((uint64_t *)&unk_1000A7860);
      Swift::Bool v60 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v57);
      uint64_t v7 = v74;
      if (v60)
      {
        unint64_t v61 = sub_100014BA8();
        if ((v59 & 1) != (v62 & 1)) {
          goto LABEL_39;
        }
        unint64_t v58 = v61;
      }
      if (v59)
      {
        uint64_t v63 = sub_10001A514();
        sub_10005AFB8(v63, v64);
      }
      else
      {
        sub_1000093D4((uint64_t)&v23[v58 >> 6]);
        char v65 = (void *)(v23[6] + 16 * v58);
        *char v65 = v43;
        v65[1] = v42;
        uint64_t v66 = sub_10001A514();
        sub_100037C5C(v66, v67);
        uint64_t v68 = v23[2];
        BOOL v69 = __OFADD__(v68, 1);
        uint64_t v70 = v68 + 1;
        if (v69) {
          goto LABEL_38;
        }
        v23[2] = v70;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = v73;
      uint64_t v33 = v78;
    }
  }
  uint64_t v38 = v36 + 3;
  if (v38 >= v80)
  {
LABEL_33:
    swift_release();
    sub_100037CC0(v76);
    uint64_t v71 = v72[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v71 + 16) = v23;
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  if (*(void *)(v79 + 8 * v38))
  {
    uint64_t v32 = v38;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v32 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v32 >= v80) {
      goto LABEL_33;
    }
    sub_10001A620();
    if (v39) {
      goto LABEL_20;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_10005A654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for EventValue();
  uint64_t v6 = v5;
  if (v4)
  {
    sub_100037B90(a1+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)), a2);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return _s10RTCUtility9XPCObjectOwst_0(a2, v7, 1, v6);
}

void sub_10005A6FC()
{
}

void sub_10005A71C()
{
  sub_100017C48();
  sub_10005B3D4();
  uint64_t v59 = v5;
  uint64_t v7 = v6;
  type metadata accessor for EventValue();
  sub_100014C1C();
  uint64_t v58 = v8;
  __chkstk_darwin(v9);
  sub_100014198();
  uint64_t v57 = v10;
  sub_100013F9C();
  __chkstk_darwin(v11);
  BOOL v56 = (char *)&v48 - v12;
  sub_100013F9C();
  __chkstk_darwin(v13);
  sub_10000E96C();
  uint64_t v14 = sub_100016CE0(&qword_1000A6740);
  uint64_t v15 = sub_100009374(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  if ((sub_100011490(v16, v17, v18, v19, v20) & 1) == 0) {
    goto LABEL_39;
  }
  sub_10005A654(v1, (uint64_t)v3);
  sub_1000151FC((uint64_t)v3);
  if (v21)
  {
    sub_1000173F0((uint64_t)v3, &qword_1000A6740);
LABEL_39:
    sub_100019CD4();
    return;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_100037CC0((uint64_t)v3);
    goto LABEL_39;
  }
  uint64_t v53 = v7;
  uint64_t v54 = v2;
  uint64_t v52 = *v3;
  uint64_t v55 = (void *)v3[1];
  uint64_t v60 = v59 + 56;
  sub_1000166EC();
  uint64_t v61 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = 0;
  while (v3)
  {
    sub_100014D74();
LABEL_24:
    if (*(void *)(v0 + 16))
    {
      sub_100013F2C();
      unint64_t v29 = sub_1000140A0();
      if (v30)
      {
        uint64_t v31 = *(void *)(v58 + 72);
        sub_100037B90(*(void *)(v0 + 56) + v31 * v29, (uint64_t)v4);
        if (swift_getEnumCaseMultiPayload())
        {
          swift_bridgeObjectRelease();
          sub_100037CC0((uint64_t)v4);
        }
        else
        {
          uint64_t v32 = v4[1];
          uint64_t v62 = *v4;
          uint64_t v63 = v32;
          v33._uint64_t countAndFlagsBits = v52;
          v33._object = v55;
          String.append(_:)(v33);
          uint64_t v34 = (uint64_t)v56;
          sub_10000A48C(v62);
          sub_100037C5C(v34, v57);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v64 = v0;
          unint64_t v50 = sub_1000140A0();
          uint64_t v35 = *(void *)(v0 + 16);
          int v51 = v36;
          BOOL v37 = (v36 & 1) == 0;
          Swift::Int v38 = v35 + v37;
          if (__OFADD__(v35, v37)) {
            goto LABEL_42;
          }
          sub_100016CE0((uint64_t *)&unk_1000A7860);
          Swift::Bool v39 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38);
          unint64_t v40 = v50;
          if (v39)
          {
            unint64_t v41 = sub_100014BA8();
            if ((v51 & 1) != (v42 & 1)) {
              goto LABEL_44;
            }
            unint64_t v40 = v41;
          }
          uint64_t v0 = v64;
          if (v51)
          {
            sub_10005AFB8(v57, *(void *)(v64 + 56) + v40 * v31);
          }
          else
          {
            sub_10001623C();
            sub_100037C5C(v57, v43);
            uint64_t v44 = *(void *)(v64 + 16);
            BOOL v45 = __OFADD__(v44, 1);
            uint64_t v46 = v44 + 1;
            if (v45) {
              goto LABEL_43;
            }
            *(void *)(v64 + 16) = v46;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  if (__OFADD__(v24, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v24 + 1 >= v61) {
    goto LABEL_38;
  }
  sub_10001A6F4();
  if (v26) {
    goto LABEL_23;
  }
  uint64_t v24 = v25 + 1;
  if (v25 + 1 >= v61) {
    goto LABEL_38;
  }
  if (*(void *)(v60 + 8 * v24)) {
    goto LABEL_23;
  }
  uint64_t v24 = v25 + 2;
  if (v25 + 2 >= v61) {
    goto LABEL_38;
  }
  if (*(void *)(v60 + 8 * v24))
  {
LABEL_23:
    sub_100016084();
    goto LABEL_24;
  }
  uint64_t v27 = v25 + 3;
  if (v27 >= v61)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v47 = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v47 + 16) = v0;
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  if (*(void *)(v60 + 8 * v27))
  {
    uint64_t v24 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v24 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v24 >= v61) {
      goto LABEL_38;
    }
    sub_10001A620();
    if (v28) {
      goto LABEL_23;
    }
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_10005AB0C()
{
}

void sub_10005AB2C()
{
  sub_100017C48();
  sub_10005B3D4();
  uint64_t v58 = v5;
  uint64_t v7 = v6;
  type metadata accessor for EventValue();
  sub_100014C1C();
  uint64_t v57 = v8;
  __chkstk_darwin(v9);
  sub_100014198();
  uint64_t v56 = v10;
  sub_100013F9C();
  __chkstk_darwin(v11);
  uint64_t v55 = (char *)&v48 - v12;
  sub_100013F9C();
  __chkstk_darwin(v13);
  sub_10000E96C();
  uint64_t v14 = sub_100016CE0(&qword_1000A6740);
  uint64_t v15 = sub_100009374(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  if ((sub_100011490(v16, v17, v18, v19, v20) & 1) == 0) {
    goto LABEL_39;
  }
  sub_10005A654(v1, (uint64_t)v3);
  sub_1000151FC((uint64_t)v3);
  if (v21)
  {
    sub_1000173F0((uint64_t)v3, &qword_1000A6740);
LABEL_39:
    sub_100019CD4();
    return;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_100037CC0((uint64_t)v3);
    goto LABEL_39;
  }
  uint64_t v52 = v7;
  uint64_t v53 = v2;
  uint64_t v51 = *v3;
  uint64_t v54 = v3[1];
  uint64_t v59 = v58 + 56;
  sub_1000166EC();
  uint64_t v64 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = 0;
  while (v3)
  {
    sub_100014D74();
LABEL_24:
    if (*(void *)(v0 + 16))
    {
      sub_100013F2C();
      unint64_t v29 = sub_1000140A0();
      if (v30)
      {
        uint64_t v31 = *(void *)(v57 + 72);
        sub_100037B90(*(void *)(v0 + 56) + v31 * v29, (uint64_t)v4);
        if (swift_getEnumCaseMultiPayload())
        {
          swift_bridgeObjectRelease();
          sub_100037CC0((uint64_t)v4);
        }
        else
        {
          uint64_t v32 = *v4;
          uint64_t v50 = v4[1];
          uint64_t v62 = v32;
          uint64_t v63 = v50;
          uint64_t v60 = v51;
          uint64_t v61 = v54;
          swift_bridgeObjectRetain();
          uint64_t v60 = String.init<A>(_:)();
          uint64_t v61 = v33;
          String.append<A>(contentsOf:)();
          swift_bridgeObjectRelease();
          uint64_t v34 = (uint64_t)v55;
          sub_10000A48C(v60);
          sub_100037C5C(v34, v56);
          HIDWORD(v48) = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v62 = v0;
          unint64_t v49 = sub_1000140A0();
          uint64_t v35 = *(void *)(v0 + 16);
          LODWORD(v50) = v36;
          BOOL v37 = (v36 & 1) == 0;
          Swift::Int v38 = v35 + v37;
          if (__OFADD__(v35, v37)) {
            goto LABEL_42;
          }
          sub_100016CE0((uint64_t *)&unk_1000A7860);
          Swift::Bool v39 = _NativeDictionary.ensureUnique(isUnique:capacity:)(SBYTE4(v48), v38);
          unint64_t v40 = v49;
          if (v39)
          {
            unint64_t v41 = sub_100014BA8();
            if ((v50 & 1) != (v42 & 1)) {
              goto LABEL_44;
            }
            unint64_t v40 = v41;
          }
          uint64_t v0 = v62;
          if (v50)
          {
            sub_10005AFB8(v56, *(void *)(v62 + 56) + v40 * v31);
          }
          else
          {
            sub_10001623C();
            sub_100037C5C(v56, v43);
            uint64_t v44 = *(void *)(v0 + 16);
            BOOL v45 = __OFADD__(v44, 1);
            uint64_t v46 = v44 + 1;
            if (v45) {
              goto LABEL_43;
            }
            *(void *)(v0 + 16) = v46;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  if (__OFADD__(v24, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v24 + 1 >= v64) {
    goto LABEL_38;
  }
  sub_10001A6F4();
  if (v26) {
    goto LABEL_23;
  }
  uint64_t v24 = v25 + 1;
  if (v25 + 1 >= v64) {
    goto LABEL_38;
  }
  if (*(void *)(v59 + 8 * v24)) {
    goto LABEL_23;
  }
  uint64_t v24 = v25 + 2;
  if (v25 + 2 >= v64) {
    goto LABEL_38;
  }
  if (*(void *)(v59 + 8 * v24))
  {
LABEL_23:
    sub_100016084();
    goto LABEL_24;
  }
  uint64_t v27 = v25 + 3;
  if (v27 >= v64)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v47 = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v47 + 16) = v0;
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  if (*(void *)(v59 + 8 * v27))
  {
    uint64_t v24 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v24 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v24 >= v64) {
      goto LABEL_38;
    }
    sub_10001A620();
    if (v28) {
      goto LABEL_23;
    }
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_10005AF68@<X0>(uint64_t (*a1)(void)@<X6>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

void sub_10005AF98()
{
}

uint64_t sub_10005AFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005B01C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A6740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005B084(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005B0CC()
{
  unint64_t result = qword_1000A67A0;
  if (!qword_1000A67A0)
  {
    sub_1000286C8(&qword_1000A6798);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A67A0);
  }
  return result;
}

uint64_t sub_10005B120()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10005B16C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10005B1C4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10005B254(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10005B2AC(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10005B2EC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for EventFilterMatcher()
{
}

uint64_t sub_10005B34C(uint64_t a1, uint64_t a2)
{
  _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10005B37C()
{
  return v0;
}

uint64_t sub_10005B398(uint64_t a1, uint64_t a2)
{
  _s10RTCUtility9XPCObjectOwst_0(v2, a2, 1, v3);
  return sub_1000173F0(v2, v4);
}

uint64_t sub_10005B3F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = a1 + *(void *)(v1 + 72) * v2;
  uint64_t v6 = *(void *)(v3 - 200);
  return sub_100037C5C(v5, v6);
}

void sub_10005B414()
{
  *(void *)(*(void *)(v1 - 264) + 16) = v0;
}

uint64_t sub_10005B428()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005B46C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10005B4CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 sub_10005B55C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10005B570(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t sub_10005B5D0(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10005B610(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SessionConfiguration()
{
}

uint64_t sub_10005B668(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v2 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v2 << 6))
  {
    __n128 result = sub_10005BA0C(&v13, *(void *)(*(void *)(v1 + 48) + 8 * i), &qword_1000A7EF8);
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v11 - 1) & v11;
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_20;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_20;
  }
LABEL_23:

  return swift_release();
}

void *sub_10005B7E8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    sub_10005E96C(a1);
    return (void *)a2;
  }
  else
  {
    return sub_10005EAE4(a1, a2);
  }
}

uint64_t sub_10005B84C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_1000160AC();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      sub_1000160AC();
      if ((v19 & 1) == 0) {
        break;
      }
      uint64_t v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10005C8B8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10005B9E4(uint64_t *a1, uint64_t a2)
{
  return sub_10005BA0C(a1, a2, &qword_1000A7EF8);
}

uint64_t sub_10005B9F8(uint64_t *a1, uint64_t a2)
{
  return sub_10005BA0C(a1, a2, &qword_1000A7F00);
}

uint64_t sub_10005BA0C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = static Hasher._hash(seed:_:)();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v5;
    uint64_t *v5 = 0x8000000000000000;
    sub_10005CA68(a2, v11, isUniquelyReferenced_nonNull_native, a3);
    uint64_t *v5 = v16;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(v8 + 48);
  if (*(void *)(v12 + 8 * v11) != a2)
  {
    uint64_t v13 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v13;
      if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v12 + 8 * v11) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10005BB20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for Client();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v23 = sub_10005BDFC(v7, result + 1);
    Swift::Int v29 = v23;
    if (*(void *)(v23 + 24) <= *(void *)(v23 + 16))
    {
      swift_retain();
      sub_10005C524();
      uint64_t v24 = v29;
    }
    else
    {
      uint64_t v24 = v23;
      swift_retain();
    }
    sub_10005C7F8(a2, v24);
    *uint64_t v3 = v24;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    uint64_t v25 = v2;
    Hasher.init(_seed:)();
    type metadata accessor for Client();
    sub_10005F0C4();
    swift_bridgeObjectRetain();
    Swift::UInt v9 = sub_100014D8C();
    Hasher._combine(_:)(v9);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    sub_10001715C();
    if (v13)
    {
      swift_retain();
      uint64_t v14 = Identifiable<>.id.getter();
      uint64_t v15 = sub_100014D8C();
      swift_release();
      if (v14 == v15)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v25 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v16 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v16;
        sub_10001715C();
        if ((v17 & 1) == 0) {
          break;
        }
        swift_retain();
        uint64_t v18 = Identifiable<>.id.getter();
        uint64_t v19 = sub_100014D8C();
        swift_release();
        if (v18 == v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v25;
    *uint64_t v25 = 0x8000000000000000;
    Swift::Int v22 = swift_retain();
    sub_10005CBA0(v22, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v25 = v28;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

Swift::Int sub_10005BDFC(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  sub_100016CE0((uint64_t *)&unk_1000A8AB0);
  uint64_t v2 = static _SetStorage.convert(_:capacity:)();
  uint64_t v15 = v2;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
    return v2;
  }
  type metadata accessor for Client();
  while (1)
  {
    swift_dynamicCast();
    uint64_t v2 = v15;
    if (*(void *)(v15 + 24) <= *(void *)(v15 + 16))
    {
      sub_10005C524();
      uint64_t v2 = v15;
    }
    Hasher.init(_seed:)();
    sub_10005F0C4();
    Swift::UInt v3 = Identifiable<>.id.getter();
    Hasher._combine(_:)(v3);
    Swift::Int result = Hasher._finalize()();
    uint64_t v5 = v2 + 56;
    uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v7 = result & ~v6;
    unint64_t v8 = v7 >> 6;
    if (((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6))) == 0) {
      break;
    }
    unint64_t v9 = __clz(__rbit64((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    *(void *)(*(void *)(v2 + 48) + 8 * v9) = v14;
    ++*(void *)(v2 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v10 = 0;
  unint64_t v11 = (unint64_t)(63 - v6) >> 6;
  while (++v8 != v11 || (v10 & 1) == 0)
  {
    BOOL v12 = v8 == v11;
    if (v8 == v11) {
      unint64_t v8 = 0;
    }
    v10 |= v12;
    uint64_t v13 = *(void *)(v5 + 8 * v8);
    if (v13 != -1)
    {
      unint64_t v9 = __clz(__rbit64(~v13)) + (v8 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10005C004()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100016CE0(&qword_1000A7F08);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      char v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *uint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_100071D3C(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                void *v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

void sub_10005C2E0(uint64_t a1, uint64_t *a2)
{
  sub_100017E38(a1, a2);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v5 = v4;
  if (*(void *)(v3 + 16))
  {
    int64_t v6 = 0;
    int64_t v8 = (uint64_t *)(v3 + 56);
    uint64_t v7 = *(void *)(v3 + 56);
    uint64_t v9 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v26 = -1 << v9;
    uint64_t v27 = v2;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v7;
    uint64_t v28 = 1 << *(unsigned char *)(v3 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v4 + 56;
    if ((v10 & v7) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v14 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v6 << 6))
    {
      uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      unint64_t v20 = static Hasher._hash(seed:_:)() & ~(-1 << *(unsigned char *)(v5 + 32));
      if (((-1 << v20) & ~*(void *)(v13 + 8 * (v20 >> 6))) == 0)
      {
        sub_1000114C4();
        while (++v23 != v24 || (v22 & 1) == 0)
        {
          BOOL v25 = v23 == v24;
          if (v23 == v24) {
            uint64_t v23 = 0;
          }
          v22 |= v25;
          if (*(void *)(v13 + 8 * v23) != -1)
          {
            sub_100016718();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      sub_10001521C();
LABEL_30:
      *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      *(void *)(*(void *)(v5 + 48) + 8 * v21) = v19;
      ++*(void *)(v5 + 16);
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_38;
      }
      if (v16 >= v12) {
        goto LABEL_32;
      }
      unint64_t v17 = v8[v16];
      ++v6;
      if (!v17)
      {
        int64_t v6 = v16 + 1;
        if (v16 + 1 >= v12) {
          goto LABEL_32;
        }
        unint64_t v17 = v8[v6];
        if (!v17)
        {
          int64_t v6 = v16 + 2;
          if (v16 + 2 >= v12) {
            goto LABEL_32;
          }
          unint64_t v17 = v8[v6];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v12)
            {
LABEL_32:
              if (v28 > 63) {
                sub_100071D3C(0, v12, (void *)(v3 + 56));
              }
              else {
                *int64_t v8 = v26;
              }
              uint64_t v2 = v27;
              *(void *)(v3 + 16) = 0;
              break;
            }
            unint64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v6 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_39;
                }
                if (v6 >= v12) {
                  goto LABEL_32;
                }
                unint64_t v17 = v8[v6];
                ++v18;
                if (v17) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v6 = v18;
          }
        }
      }
LABEL_20:
      unint64_t v11 = (v17 - 1) & v17;
    }
  }
  swift_release();
  *uint64_t v2 = v5;
}

uint64_t sub_10005C524()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100016CE0((uint64_t *)&unk_1000A8AB0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      Hasher.init(_seed:)();
      type metadata accessor for Client();
      sub_10005F0C4();
      Swift::UInt v19 = Identifiable<>.id.getter();
      Hasher._combine(_:)(v19);
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v10 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      *(void *)(*(void *)(v4 + 48) + 8 * v23) = v18;
      ++*(void *)(v4 + 16);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v9) {
        goto LABEL_32;
      }
      unint64_t v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v9) {
          goto LABEL_32;
        }
        unint64_t v16 = v6[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v9) {
            goto LABEL_32;
          }
          unint64_t v16 = v6[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
              if (v28 > 63) {
                sub_100071D3C(0, (unint64_t)(v28 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                *int64_t v6 = -1 << v28;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_39;
                }
                if (v12 >= v9) {
                  goto LABEL_32;
                }
                unint64_t v16 = v6[v12];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v17;
          }
        }
      }
LABEL_20:
      unint64_t v8 = (v16 - 1) & v16;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_10005C7F8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for Client();
  sub_10005F0C4();
  Swift::UInt v4 = Identifiable<>.id.getter();
  Hasher._combine(_:)(v4);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int sub_10005C8B8(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10005C004();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)sub_10005CD90();
      goto LABEL_22;
    }
    sub_10005D280();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_10005CA54(uint64_t a1, unint64_t a2, char a3)
{
  return sub_10005CA68(a1, a2, a3, &qword_1000A7EF8);
}

uint64_t sub_10005CA68(uint64_t result, unint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v4 + 16);
  unint64_t v8 = *(void *)(*v4 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if (a3)
  {
    sub_10005C2E0(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (uint64_t)sub_10005CF44(a4);
      goto LABEL_14;
    }
    sub_10005D52C(v9, a4);
  }
  uint64_t v10 = *v4;
  unint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = *(void *)(v10 + 48);
    if (*(void *)(v12 + 8 * a2) == v6)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v12 + 8 * a2) == v6) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

Swift::Int sub_10005CBA0(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10005C524();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_10005D0D4();
      goto LABEL_14;
    }
    sub_10005D74C();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for Client();
  sub_10005F0C4();
  Swift::UInt v9 = Identifiable<>.id.getter();
  Hasher._combine(_:)(v9);
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    swift_retain();
    uint64_t v11 = Identifiable<>.id.getter();
    uint64_t v12 = Identifiable<>.id.getter();
    unint64_t result = swift_release();
    if (v11 == v12)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        swift_retain();
        uint64_t v14 = Identifiable<>.id.getter();
        uint64_t v15 = Identifiable<>.id.getter();
        unint64_t result = swift_release();
        if (v14 == v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v20;
  *(void *)(*v20 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = v5;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
  return result;
}

void *sub_10005CD90()
{
  uint64_t v1 = v0;
  sub_100016CE0(&qword_1000A7F08);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    void *v22 = *v20;
    v22[1] = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10005CF44(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100016CE0(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  if (!v13) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v10 << 6))
  {
    *(void *)(*(void *)(v5 + 48) + 8 * i) = *(void *)(*(void *)(v3 + 48) + 8 * i);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10005D0D4()
{
  uint64_t v1 = v0;
  sub_100016CE0((uint64_t *)&unk_1000A8AB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    unint64_t result = (void *)swift_retain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10005D280()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100016CE0(&qword_1000A7F08);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_10005D52C(uint64_t a1, uint64_t *a2)
{
  sub_100017E38(a1, a2);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
    swift_release();
LABEL_34:
    *uint64_t v2 = v5;
    return;
  }
  unint64_t v25 = v2;
  int64_t v6 = 0;
  uint64_t v7 = v3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(v3 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v4 + 56;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v6 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    unint64_t v19 = static Hasher._hash(seed:_:)() & ~(-1 << *(unsigned char *)(v5 + 32));
    if (((-1 << v19) & ~*(void *)(v12 + 8 * (v19 >> 6))) == 0)
    {
      sub_1000114C4();
      while (++v22 != v23 || (v21 & 1) == 0)
      {
        BOOL v24 = v22 == v23;
        if (v22 == v23) {
          uint64_t v22 = 0;
        }
        v21 |= v24;
        if (*(void *)(v12 + 8 * v22) != -1)
        {
          sub_100016718();
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    sub_10001521C();
LABEL_30:
    *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(void *)(*(void *)(v5 + 48) + 8 * v20) = v18;
    ++*(void *)(v5 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_36;
    }
    if (v15 >= v11) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        goto LABEL_32;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v11) {
          goto LABEL_32;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v11)
  {
LABEL_32:
    swift_release();
    uint64_t v2 = v25;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_10005D74C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100016CE0((uint64_t *)&unk_1000A8AB0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    Hasher.init(_seed:)();
    type metadata accessor for Client();
    sub_10005F0C4();
    swift_retain();
    Swift::UInt v18 = Identifiable<>.id.getter();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) == 0)
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v9 + 8 * v21);
        if (v26 != -1)
        {
          unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*(void *)(v4 + 48) + 8 * v22) = v17;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v27) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v27) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v27)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v27) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10005DA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionConfiguration.Backend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005DA70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10005CF44(&qword_1000A7EF8);
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_10005DF88(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10005DB84()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) == 0)
  {
    Hasher.init(_seed:)();
    type metadata accessor for Client();
    sub_10005F0C4();
    swift_bridgeObjectRetain();
    Swift::UInt v4 = sub_100019AC4();
    Hasher._combine(_:)(v4);
    Swift::Int v5 = Hasher._finalize()();
    uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v7 = v5 & ~v6;
    sub_100016270();
    if (v8)
    {
      Swift::UInt v18 = v0;
      swift_retain();
      uint64_t v9 = Identifiable<>.id.getter();
      uint64_t v10 = sub_100019AC4();
      swift_release();
      if (v9 == v10)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        swift_isUniquelyReferenced_nonNull_native();
        sub_100017504();
        if (!v16)
        {
          sub_10005D0D4();
          uint64_t v15 = v19;
        }
        uint64_t v3 = *(void *)(*(void *)(v15 + 48) + 8 * v7);
        sub_10005E104(v7);
        void *v18 = v19;
        goto LABEL_12;
      }
      uint64_t v11 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v11;
        sub_100016270();
        if ((v12 & 1) == 0) {
          break;
        }
        swift_retain();
        uint64_t v13 = Identifiable<>.id.getter();
        uint64_t v14 = sub_100019AC4();
        swift_release();
        if (v13 == v14) {
          goto LABEL_9;
        }
      }
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  char v2 = __CocoaSet.contains(_:)();
  swift_release();
  if ((v2 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v3 = sub_10005DD78();
LABEL_12:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_10005DD78()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = __CocoaSet.count.getter();
  uint64_t v1 = swift_unknownObjectRetain();
  Swift::Int v2 = sub_10005BDFC(v1, v0);
  Swift::Int v16 = v2;
  Hasher.init(_seed:)();
  type metadata accessor for Client();
  sub_10005F0C4();
  swift_retain();
  Swift::UInt v3 = Identifiable<>.id.getter();
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    swift_retain();
    uint64_t v7 = Identifiable<>.id.getter();
    uint64_t v8 = Identifiable<>.id.getter();
    swift_release();
    if (v7 == v8)
    {
LABEL_6:
      swift_release();
      uint64_t v12 = *(void *)(*(void *)(v2 + 48) + 8 * v6);
      sub_10005E104(v6);
      uint64_t v13 = Identifiable<>.id.getter();
      if (v13 == Identifiable<>.id.getter())
      {
        *uint64_t v15 = v16;
        return v12;
      }
      __break(1u);
    }
    else
    {
      uint64_t v9 = ~v5;
      while (1)
      {
        unint64_t v6 = (v6 + 1) & v9;
        if (((*(void *)(v2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        swift_retain();
        uint64_t v10 = Identifiable<>.id.getter();
        uint64_t v11 = Identifiable<>.id.getter();
        swift_release();
        if (v10 == v11) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_10005DF88(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            BOOL v16 = v2 != v6 || v15 >= v11 + 1;
            int64_t v2 = v6;
            if (v16)
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v17 = *(void *)(v3 + 16);
  BOOL v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10005E104(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        type metadata accessor for Client();
        sub_10005F0C4();
        swift_retain();
        Swift::UInt v10 = Identifiable<>.id.getter();
        Hasher._combine(_:)(v10);
        Swift::Int v11 = Hasher._finalize()();
        swift_release();
        Swift::Int v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            uint64_t v15 = *(void *)(v3 + 48);
            BOOL v16 = (void *)(v15 + 8 * v2);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            BOOL v18 = v2 != v6 || v16 >= v17 + 1;
            int64_t v2 = v6;
            if (v18)
            {
              *BOOL v16 = *v17;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10005E2E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = (unint64_t *)result;
  uint64_t v6 = 0;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v7 = 0;
    uint64_t v8 = a4 + 56;
    uint64_t v9 = 1 << *(unsigned char *)(a4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(a4 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v7 << 6);
      }
      else
      {
        int64_t v16 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        if (v16 >= v12) {
          goto LABEL_56;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        ++v7;
        if (!v17)
        {
          int64_t v7 = v16 + 1;
          if (v16 + 1 >= v12) {
            goto LABEL_56;
          }
          unint64_t v17 = *(void *)(v8 + 8 * v7);
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v12)
            {
LABEL_56:
              swift_retain();
              return sub_10005E72C(v46, a2, v6, a3);
            }
            unint64_t v17 = *(void *)(v8 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                int64_t v7 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  break;
                }
                if (v7 >= v12) {
                  goto LABEL_56;
                }
                unint64_t v17 = *(void *)(v8 + 8 * v7);
                ++v18;
                if (v17) {
                  goto LABEL_19;
                }
              }
LABEL_59:
              __break(1u);
              goto LABEL_60;
            }
            int64_t v7 = v18;
          }
        }
LABEL_19:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(a4 + 48) + 8 * v15);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v20 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      uint64_t v23 = 1 << v21;
      if (((1 << v21) & *(void *)(v13 + 8 * (v21 >> 6))) != 0)
      {
        uint64_t v24 = *(void *)(a3 + 48);
        if (*(void *)(v24 + 8 * v21) != v19)
        {
          for (unint64_t i = v21 + 1; ; unint64_t i = v26 + 1)
          {
            unint64_t v26 = i & ~v20;
            if (((*(void *)(v13 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
              goto LABEL_6;
            }
            if (*(void *)(v24 + 8 * v26) == v19) {
              break;
            }
          }
          unint64_t v22 = v26 >> 6;
          uint64_t v23 = 1 << v26;
        }
        v46[v22] |= v23;
        BOOL v27 = __OFADD__(v6++, 1);
        if (v27) {
          break;
        }
      }
    }
    __break(1u);
  }
  int64_t v28 = 0;
  uint64_t v29 = a3 + 56;
  uint64_t v30 = 1 << *(unsigned char *)(a3 + 32);
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  else {
    uint64_t v31 = -1;
  }
  unint64_t v32 = v31 & *(void *)(a3 + 56);
  int64_t v45 = (unint64_t)(v30 + 63) >> 6;
  uint64_t v33 = a4 + 56;
  while (v32)
  {
    unint64_t v34 = __clz(__rbit64(v32));
    v32 &= v32 - 1;
    unint64_t v35 = v34 | (v28 << 6);
LABEL_48:
    uint64_t v39 = *(void *)(*(void *)(a3 + 48) + 8 * v35);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v40 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v41 = result & ~v40;
    if ((*(void *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41))
    {
      uint64_t v42 = *(void *)(a4 + 48);
      if (*(void *)(v42 + 8 * v41) == v39)
      {
LABEL_53:
        *(unint64_t *)((char *)v46 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
        BOOL v27 = __OFADD__(v6++, 1);
        if (v27)
        {
          __break(1u);
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v43 = ~v40;
        while (1)
        {
          unint64_t v41 = (v41 + 1) & v43;
          if (((*(void *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
            break;
          }
          if (*(void *)(v42 + 8 * v41) == v39) {
            goto LABEL_53;
          }
        }
      }
    }
  }
  int64_t v36 = v28 + 1;
  if (__OFADD__(v28, 1)) {
    goto LABEL_58;
  }
  if (v36 >= v45) {
    goto LABEL_56;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v36);
  ++v28;
  if (v37) {
    goto LABEL_47;
  }
  int64_t v28 = v36 + 1;
  if (v36 + 1 >= v45) {
    goto LABEL_56;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v28);
  if (v37)
  {
LABEL_47:
    unint64_t v32 = (v37 - 1) & v37;
    unint64_t v35 = __clz(__rbit64(v37)) + (v28 << 6);
    goto LABEL_48;
  }
  int64_t v38 = v36 + 2;
  if (v38 >= v45) {
    goto LABEL_56;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v38);
  if (v37)
  {
    int64_t v28 = v38;
    goto LABEL_47;
  }
  while (1)
  {
    int64_t v28 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v28 >= v45) {
      goto LABEL_56;
    }
    unint64_t v37 = *(void *)(v29 + 8 * v28);
    ++v38;
    if (v37) {
      goto LABEL_47;
    }
  }
LABEL_60:
  __break(1u);
  return result;
}

uint64_t sub_10005E668(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E6CC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10005E72C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100016CE0(&qword_1000A7EF8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (unsigned char *)result;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_35;
    }
    unint64_t v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_35;
      }
      unint64_t v16 = a1[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_35;
        }
        unint64_t v16 = a1[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) == 0)
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
        if (v26 != -1)
        {
          unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*((void *)v9 + 6) + 8 * v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_35;
  }
  unint64_t v16 = a1[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_35;
    }
    unint64_t v16 = a1[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10005E96C(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t result = sub_10005DA70(*(void *)(*(void *)(v2 + 48) + 8 * i));
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:

  return swift_release();
}

void *sub_10005EAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    int64_t v4 = 0;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    v31[0] = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v5;
    int64_t v10 = (unint64_t)(63 - v7) >> 6;
    uint64_t v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v4 << 6);
        }
        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v14);
          int64_t v16 = v4 + 1;
          if (!v15)
          {
            int64_t v16 = v4 + 2;
            if (v4 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v4 + 3;
              if (v4 + 3 >= v10) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v4 + 4;
                if (v4 + 4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v16);
                if (!v15)
                {
                  int64_t v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain();
                    sub_100015754();
                    return (void *)v2;
                  }
                  unint64_t v15 = *(void *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      int64_t v16 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        break;
                      }
                      if (v16 >= v10) {
                        goto LABEL_33;
                      }
                      unint64_t v15 = *(void *)(v6 + 8 * v16);
                      ++v17;
                      if (v15) {
                        goto LABEL_23;
                      }
                    }
LABEL_36:
                    __break(1u);
                  }
                  int64_t v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          unint64_t v9 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
          int64_t v4 = v16;
        }
        uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * v13);
        uint64_t v19 = static Hasher._hash(seed:_:)();
        uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v21 = v19 & ~v20;
      }
      while (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      uint64_t v22 = *(void *)(v2 + 48);
      if (*(void *)(v22 + 8 * v21) == v18) {
        break;
      }
      while (1)
      {
        unint64_t v21 = (v21 + 1) & ~v20;
        if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        if (*(void *)(v22 + 8 * v21) == v18) {
          goto LABEL_28;
        }
      }
    }
LABEL_28:
    v32[0] = a1;
    v32[1] = v6;
    v32[2] = v31[0];
    v32[3] = v4;
    v32[4] = v9;
    unint64_t v23 = (unint64_t)(63 - v20) >> 6;
    size_t v24 = 8 * v23;
    swift_bridgeObjectRetain();
    if (v23 < 0x81 || swift_stdlib_isStackAllocationSafe())
    {
      __chkstk_darwin();
      uint64_t v26 = (char *)v31 - v25;
      memcpy((char *)v31 - v25, (const void *)(v2 + 56), v24);
      uint64_t v27 = sub_10005EE88((uint64_t)v26, v23, v2, v21, v32);
      swift_release();
      sub_100015754();
      return (void *)v27;
    }
    else
    {
      int64_t v28 = (void *)swift_slowAlloc();
      memcpy(v28, (const void *)(v2 + 56), v24);
      uint64_t v29 = sub_10005EE88((uint64_t)v28, v23, v2, v21, v32);
      swift_release();
      sub_100015754();
      swift_slowDealloc();
      return (void *)v29;
    }
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
}

uint64_t sub_10005EE88(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8 = (unint64_t *)result;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v10 = v9 - 1;
  uint64_t v11 = a3 + 56;
  while (1)
  {
    int64_t v12 = a5[3];
    unint64_t v13 = a5[4];
    if (!v13) {
      break;
    }
    uint64_t v14 = (v13 - 1) & v13;
    unint64_t v15 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_20:
    uint64_t v22 = *(void *)(*(void *)(*a5 + 48) + 8 * v15);
    a5[3] = v12;
    a5[4] = v14;
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    uint64_t v26 = 1 << v24;
    if (((1 << v24) & *(void *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v27 = *(void *)(a3 + 48);
      if (*(void *)(v27 + 8 * v24) == v22)
      {
LABEL_27:
        unint64_t v30 = v8[v25];
        v8[v25] = v30 & ~v26;
        if ((v26 & v30) != 0)
        {
          if (__OFSUB__(v10--, 1)) {
            goto LABEL_34;
          }
          if (!v10) {
            return (uint64_t)&_swiftEmptySetSingleton;
          }
        }
      }
      else
      {
        for (unint64_t i = v24 + 1; ; unint64_t i = v29 + 1)
        {
          unint64_t v29 = i & ~v23;
          if (((*(void *)(v11 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
            break;
          }
          if (*(void *)(v27 + 8 * v29) == v22)
          {
            unint64_t v25 = v29 >> 6;
            uint64_t v26 = 1 << v29;
            goto LABEL_27;
          }
        }
      }
    }
  }
  int64_t v16 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    int64_t v17 = (unint64_t)(a5[2] + 64) >> 6;
    int64_t v18 = a5[3];
    if (v16 >= v17) {
      goto LABEL_32;
    }
    uint64_t v19 = a5[1];
    unint64_t v20 = *(void *)(v19 + 8 * v16);
    if (!v20)
    {
      int64_t v18 = v12 + 1;
      if (v12 + 2 >= v17) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v19 + 8 * (v12 + 2));
      if (v20)
      {
        int64_t v16 = v12 + 2;
      }
      else
      {
        int64_t v18 = v12 + 2;
        if (v12 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v19 + 8 * (v12 + 3));
        if (v20)
        {
          int64_t v16 = v12 + 3;
        }
        else
        {
          int64_t v16 = v12 + 4;
          int64_t v18 = v12 + 3;
          if (v12 + 4 >= v17) {
            goto LABEL_32;
          }
          unint64_t v20 = *(void *)(v19 + 8 * v16);
          if (!v20)
          {
            int64_t v21 = v12 + 5;
            while (v21 < v17)
            {
              unint64_t v20 = *(void *)(v19 + 8 * v21++);
              if (v20)
              {
                int64_t v16 = v21 - 1;
                goto LABEL_19;
              }
            }
            int64_t v18 = v17 - 1;
LABEL_32:
            a5[3] = v18;
            a5[4] = 0;
            swift_retain();
            return sub_10005E72C(v8, a2, v10, a3);
          }
        }
      }
    }
LABEL_19:
    uint64_t v14 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v16 << 6);
    int64_t v12 = v16;
    goto LABEL_20;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

unint64_t sub_10005F0C4()
{
  unint64_t result = qword_1000A6BC8;
  if (!qword_1000A6BC8)
  {
    type metadata accessor for Client();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000A6BC8);
  }
  return result;
}

unsigned char *sub_10005F114(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005F1E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for SessionConfiguration.Availability()
{
}

void *sub_10005F214(void *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    void *v4 = *a2;
    unsigned int v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    int64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *((unsigned char *)v4 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v14 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *(void *)((char *)v4 + v14) = *(void *)((char *)a2 + v14);
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10005F35C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10005F400(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10005F4F8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_10005F610(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

void *sub_10005F6D8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_10005F7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005F7D8);
}

uint64_t sub_10005F7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    return _s10RTCUtility9XPCObjectOwet_0(v9, a2, v8);
  }
}

uint64_t sub_10005F860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005F874);
}

uint64_t sub_10005F874(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = v5 + *(int *)(a4 + 24);
    return _s10RTCUtility9XPCObjectOwst_0(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_10005F8F4()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10005F9B4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[2];
      a1[1] = a2[1];
      a1[2] = v7;
      uint64_t v9 = a2[3];
      uint64_t v8 = a2[4];
      a1[3] = v9;
      a1[4] = v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v11 = a2[2];
      a1[1] = a2[1];
      a1[2] = v11;
      uint64_t v12 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
      uint64_t v13 = v12[6];
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for URL();
      int64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
      *(void *)((char *)a1 + v12[7]) = *(void *)((char *)a2 + v12[7]);
      *((unsigned char *)a1 + v12[8]) = *((unsigned char *)a2 + v12[8]);
      *(void *)((char *)a1 + v12[9]) = *(void *)((char *)a2 + v12[9]);
      *(void *)((char *)a1 + v12[10]) = *(void *)((char *)a2 + v12[10]);
      *((unsigned char *)a1 + v12[11]) = *((unsigned char *)a2 + v12[11]);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10005FB70(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = a1 + *(int *)(type metadata accessor for SessionConfiguration.BackendHTTP(0) + 24);
    uint64_t v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10005FC4C(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    uint64_t v6 = a2[4];
    a1[3] = a2[3];
    a1[4] = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
    uint64_t v9 = v8[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
    *(void *)((char *)a1 + v8[10]) = *(void *)((char *)a2 + v8[10]);
    *((unsigned char *)a1 + v8[11]) = *((unsigned char *)a2 + v8[11]);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10005FDA0(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10005E6CC((uint64_t)a1, type metadata accessor for SessionConfiguration.Backend);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    if (EnumCaseMultiPayload == 1)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v5 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
      uint64_t v6 = v5[6];
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for URL();
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
      swift_bridgeObjectRetain();
      v10(v7, v8, v9);
      *(void *)((char *)a1 + v5[7]) = *(void *)((char *)a2 + v5[7]);
      *((unsigned char *)a1 + v5[8]) = *((unsigned char *)a2 + v5[8]);
      *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
      *(void *)((char *)a1 + v5[10]) = *(void *)((char *)a2 + v5[10]);
      *((unsigned char *)a1 + v5[11]) = *((unsigned char *)a2 + v5[11]);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10005FF30(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v6 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
    uint64_t v7 = v6[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
    *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
    *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
    *(void *)((char *)a1 + v6[10]) = *(void *)((char *)a2 + v6[10]);
    *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100060050(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005E6CC((uint64_t)a1, type metadata accessor for SessionConfiguration.Backend);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v6 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
      uint64_t v7 = v6[6];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
      *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
      *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
      *(void *)((char *)a1 + v6[10]) = *(void *)((char *)a2 + v6[10]);
      *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100060194()
{
  uint64_t result = type metadata accessor for SessionConfiguration.BackendHTTP(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_100060228()
{
  unint64_t result = qword_1000A8060;
  if (!qword_1000A8060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8060);
  }
  return result;
}

uint64_t sub_100060274()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1000602C0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100060320(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000603B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for SessionConfiguration.BackendTTR()
{
}

void *sub_100060424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100016CE0(&qword_1000A6740);
  uint64_t v8 = sub_100009374(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v35 - v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  v35[1] = v3;
  swift_bridgeObjectRetain();
  v35[0] = a1;
  uint64_t v15 = (uint64_t *)(a1 + 56);
  int64_t v36 = v13;
  unint64_t v37 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v16 = *v15;
    if (!*(void *)(*v15 + 16))
    {
      uint64_t v29 = type metadata accessor for EventValue();
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v13, 1, 1, v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    uint64_t v38 = *(v15 - 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_100014BA8();
    if (v18)
    {
      unint64_t v19 = v17;
      unint64_t v20 = v11;
      uint64_t v21 = a3;
      uint64_t v22 = a2;
      uint64_t v23 = *(void *)(v16 + 56);
      uint64_t v24 = type metadata accessor for EventValue();
      sub_10000948C();
      uint64_t v26 = v23 + *(void *)(v25 + 72) * v19;
      a2 = v22;
      a3 = v21;
      uint64_t v11 = v20;
      uint64_t v13 = v36;
      sub_1000686FC(v26, (uint64_t)v36, (void (*)(void))type metadata accessor for EventValue);
      uint64_t v27 = (uint64_t)v13;
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v24 = type metadata accessor for EventValue();
      uint64_t v27 = (uint64_t)v13;
      uint64_t v28 = 1;
    }
    _s10RTCUtility9XPCObjectOwst_0(v27, v28, 1, v24);
    swift_bridgeObjectRelease();
    type metadata accessor for EventValue();
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v13, 1, v24) == 1) {
      goto LABEL_19;
    }
    sub_10005B01C((uint64_t)v13, (uint64_t)v11);
    unint64_t result = (void *)swift_getEnumCaseMultiPayload();
    if (result == 2) {
      break;
    }
    if (result == 1)
    {
      uint64_t v31 = *v11;
LABEL_13:
      sub_100066C38((uint64_t)v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        unint64_t v32 = v37;
      }
      else {
        sub_10001EF04(0, v37[2] + 1, 1, (uint64_t)v37);
      }
      unint64_t v34 = v32[2];
      unint64_t v33 = v32[3];
      if (v34 >= v33 >> 1) {
        sub_10001EF04(v33 > 1, v34 + 1, 1, (uint64_t)v32);
      }
      v32[2] = v34 + 1;
      unint64_t v37 = v32;
      v32[v34 + 4] = v31;
      goto LABEL_20;
    }
    sub_10006875C((uint64_t)v11, (void (*)(void))type metadata accessor for EventValue);
LABEL_19:
    sub_100066C38((uint64_t)v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_20:
    v15 += 4;
    if (!--v14)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v37;
    }
  }
  uint64_t v31 = *v11;
  if ((*v11 & 0x8000000000000000) == 0) {
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006075C(uint64_t a1)
{
  return sub_1000607AC(a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (void (*)(uint64_t *, uint64_t))sub_10005B9E4);
}

uint64_t sub_100060784(uint64_t a1)
{
  return sub_1000607AC(a1, (uint64_t)&type metadata for Int64, (uint64_t)&protocol witness table for Int64, (void (*)(uint64_t *, uint64_t))sub_10005B9F8);
}

uint64_t sub_1000607AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, uint64_t))
{
  uint64_t v6 = Set.init(minimumCapacity:)();
  uint64_t v13 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v9 = *(void *)(a1 + 8 * i + 32);
      a4(&v12, v9);
    }
    swift_bridgeObjectRelease();
    return v13;
  }
  else
  {
    uint64_t v10 = v6;
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_100060844()
{
  sub_100068A70();
  sub_10001422C();
  uint64_t v1 = v0[14];
  v0[11] = type metadata accessor for Session(0);
  v0[12] = &off_1000A1450;
  v0[8] = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[21] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100060914;
  sub_100018010();
  return sub_1000332F8(v3, v4);
}

uint64_t sub_100060914()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 120);
    return _swift_task_switch(sub_100060A40, v7, 0);
  }
  else
  {
    sub_10001610C(v3 + 64);
    char v8 = *(unsigned char *)(v3 + 56);
    uint64_t v9 = *(void *)(v3 + 40);
    uint64_t v10 = *(void *)(v3 + 48);
    char v11 = *(unsigned char *)(v3 + 32);
    uint64_t v12 = *(void *)(v3 + 104);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)(v3 + 16);
    *(unsigned char *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = v9;
    *(void *)(v12 + 32) = v10;
    *(unsigned char *)(v12 + 40) = v8;
    sub_10000E83C();
    return v13();
  }
}

uint64_t sub_100060A40()
{
  sub_1000094A8();
  sub_10001610C(v0 + 64);
  sub_10000E83C();
  return v1();
}

uint64_t sub_100060A9C(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 120) = v3;
  *(unsigned char *)(v4 + 57) = a3;
  *(void *)(v4 + 104) = a1;
  *(void *)(v4 + 128) = type metadata accessor for CachedSession(0);
  *(void *)(v4 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_100060B38, v3, 0);
}

uint64_t sub_100060B38()
{
  sub_1000094A8();
  uint64_t v1 = *(void *)(v0[15] + 112);
  v0[18] = v1;
  uint64_t v2 = (void *)sub_100068ACC();
  v0[19] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100060BD8;
  uint64_t v3 = sub_10001A528(v0[14]);
  return v5(v3, v1);
}

uint64_t sub_100060BD8()
{
  sub_1000094A8();
  sub_100017D58();
  sub_10000935C();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10000935C();
  void *v4 = v3;
  *(unsigned char *)(v6 + 58) = v5;
  swift_task_dealloc();
  sub_10000E934();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100060CBC()
{
  sub_1000113BC();
  int v1 = *(unsigned __int8 *)(v0 + 58);
  sub_1000686FC(*(void *)(v0 + 112), *(void *)(v0 + 136), (void (*)(void))type metadata accessor for CachedSession);
  uint64_t v2 = *(void *)(v0 + 136);
  if (v1 == 3)
  {
    sub_10006875C(v2, (void (*)(void))type metadata accessor for CachedSession);
LABEL_7:
    uint64_t v6 = *(void *)(v0 + 112);
    *(void *)(v0 + 88) = *(void *)(v0 + 128);
    *(void *)(v0 + 96) = &off_1000A13F8;
    uint64_t v7 = sub_100028EB8((uint64_t *)(v0 + 64));
    sub_1000686FC(v6, (uint64_t)v7, (void (*)(void))type metadata accessor for CachedSession);
    uint64_t v8 = swift_task_alloc();
    uint64_t v9 = (void *)sub_10001A4A0(v8);
    *uint64_t v9 = v10;
    v9[1] = sub_100060E7C;
    return sub_1000332F8(v0 + 16, v0 + 64);
  }
  int v3 = *(unsigned __int8 *)(v0 + 57);
  int v4 = *(unsigned __int8 *)(v2 + 72);
  sub_10006875C(v2, (void (*)(void))type metadata accessor for CachedSession);
  if (v4 == 1 || v3 != 0) {
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v0 + 104);
  swift_task_dealloc();
  *(void *)uint64_t v12 = _swiftEmptyArrayStorage;
  *(void *)(v12 + 8) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v12 + 16) = 1;
  *(void *)(v12 + 24) = 1701736302;
  *(void *)(v12 + 32) = 0xE400000000000000;
  *(unsigned char *)(v12 + 40) = 2;
  sub_100013FE0();
  return v13();
}

uint64_t sub_100060E7C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 120);
    uint64_t v8 = sub_100061008;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 120);
    sub_10001610C(v3 + 64);
    uint64_t v8 = sub_100060F74;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100060F74()
{
  sub_100016940();
  char v1 = *(unsigned char *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  char v4 = *(unsigned char *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 104);
  long long v8 = *(_OWORD *)(v0 + 16);
  swift_task_dealloc();
  *(_OWORD *)uint64_t v5 = v8;
  *(unsigned char *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v2;
  *(void *)(v5 + 32) = v3;
  *(unsigned char *)(v5 + 40) = v1;
  sub_100013FE0();
  return v6();
}

uint64_t sub_100061008()
{
  sub_1000094A8();
  sub_10001610C(v0 + 64);
  swift_task_dealloc();
  sub_10000E83C();
  return v1();
}

uint64_t sub_100061070(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return _swift_task_switch(sub_100061090, v1, 0);
}

void sub_100061090()
{
  sub_1000113BC();
  uint64_t v1 = qword_1000AF3B0;
  v0[18] = qword_1000AF3B0;
  if (v1)
  {
    char v4 = (void (*)(uint64_t, uint64_t, char))((char *)&dword_1000A8158 + dword_1000A8158);
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[19] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100061168;
    uint64_t v3 = v0[16];
    v4((uint64_t)(v0 + 2), v3, 1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100061168()
{
  sub_1000113BC();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  v3[20] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[17];
    return _swift_task_switch(sub_100061468, v7, 0);
  }
  else
  {
    swift_release();
    long long v8 = (void *)sub_100068ACC();
    v3[21] = v8;
    *long long v8 = v5;
    v8[1] = sub_1000612C4;
    uint64_t v9 = v3[16];
    return v11(v3 + 2, v9);
  }
}

uint64_t sub_1000612C4()
{
  sub_100016940();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_100017D58();
  uint64_t v7 = v6;
  sub_10000935C();
  *long long v8 = v7;
  uint64_t v9 = *v1;
  sub_10000935C();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  uint64_t v11 = *(void *)(v7 + 16);
  uint64_t v12 = (_OWORD *)(v7 + 40);
  if (v0)
  {
    *(void *)(v7 + 96) = v11;
    sub_100005B18(v7 + 96);
    *(void *)(v7 + 112) = *(void *)(v7 + 24);
    sub_100005B18(v7 + 112);
    *(_OWORD *)(v7 + 80) = *v12;
    sub_100009758(v7 + 80);
    uint64_t v13 = *(uint64_t (**)(void))(v9 + 8);
    return v13();
  }
  else
  {
    *(void *)(v7 + 120) = v11;
    sub_100005B18(v7 + 120);
    *(void *)(v7 + 104) = *(void *)(v7 + 24);
    sub_100005B18(v7 + 104);
    *(_OWORD *)(v7 + 64) = *v12;
    sub_100009758(v7 + 64);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v15(v5, v3);
  }
}

uint64_t sub_100061468()
{
  sub_1000094A8();
  swift_release();
  sub_10000E83C();
  return v0();
}

uint64_t sub_1000614C4()
{
  sub_1000094A8();
  v1[28] = v2;
  v1[29] = v0;
  v1[27] = v3;
  uint64_t v4 = type metadata accessor for SessionConfiguration.Backend(0);
  sub_10001130C(v4);
  v1[30] = v5;
  v1[31] = sub_10000E8B8();
  v1[32] = swift_task_alloc();
  sub_10000E934();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10006155C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10000E6A4();
  sub_100011540();
  sub_10001A3AC();
  *(void *)(v14 + 56) = v12;
  uint64_t v15 = *(void *)(v12 + 16);
  *(void *)(v14 + 64) = v15;
  if (v15 == 1)
  {
    uint64_t v25 = (_OWORD *)(v14 - 192);
    uint64_t v26 = v14 - 96;
    uint64_t v27 = v14 - 32;
    uint64_t v28 = v14 - 16;
    uint64_t v29 = *(void *)(v13 + 224);
    uint64_t v30 = *(unsigned __int8 *)(*(void *)(v13 + 240) + 80);
    sub_1000686FC(v12 + ((v30 + 32) & ~v30), *(void *)(v13 + 256), (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
    long long v31 = *(_OWORD *)(v29 + 224);
    long long v32 = *(_OWORD *)(v29 + 192);
    v25[1] = *(_OWORD *)(v29 + 208);
    _DWORD v25[2] = v31;
    *uint64_t v25 = v32;
    sub_100011684(*(__n128 *)(v29 + 192));
    swift_retain();
    sub_100019B14(v26);
    sub_100019B14(v27);
    sub_100019B14(v28);
    unint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v13 + 280) = v33;
    *unint64_t v33 = v13;
    v33[1] = sub_1000617DC;
  }
  else
  {
    if (!v15)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000176E4();
      sub_100016198();
      return v19(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
    }
    unint64_t v34 = (_OWORD *)(v14 - 144);
    unint64_t v35 = (_OWORD *)(v14 - 80);
    int64_t v36 = (_OWORD *)(v14 - 64);
    unint64_t v37 = (_OWORD *)(v14 - 48);
    uint64_t v38 = *(void *)(v13 + 240);
    uint64_t v39 = *(_OWORD **)(v13 + 224);
    sub_10001ED64();
    long long v40 = v39[14];
    long long v41 = v39[12];
    v34[1] = v39[13];
    v34[2] = v40;
    *unint64_t v34 = v41;
    *unint64_t v37 = v39[12];
    long long v42 = *(_OWORD *)(v13 + 96);
    *int64_t v36 = *(_OWORD *)(v13 + 80);
    *unint64_t v35 = v42;
    int v43 = *(_DWORD *)(v38 + 80);
    *(_DWORD *)(v13 + 360) = v43;
    *(void *)(v13 + 312) = v44;
    *(void *)(v13 + 320) = 1;
    uint64_t v45 = *(void *)(v13 + 248);
    uint64_t v46 = *(void *)(v13 + 264) + ((v43 + 32) & ~(unint64_t)v43);
    swift_bridgeObjectRetain();
    sub_1000686FC(v46, v45, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
    swift_retain();
    sub_100019B14((uint64_t)v37);
    sub_100019B14((uint64_t)v36);
    sub_100019B14((uint64_t)v35);
    uint64_t v47 = (void *)swift_task_alloc();
    *(void *)(v13 + 328) = v47;
    *uint64_t v47 = v13;
    v47[1] = sub_100061A5C;
    sub_100011590();
  }
  sub_100016198();
  return sub_100008030(v48);
}

uint64_t sub_1000617DC()
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_100017D58();
  uint64_t v10 = v9;
  sub_10000935C();
  *uint64_t v11 = v10;
  sub_10001633C();
  uint64_t v12 = *v2;
  sub_10000935C();
  *uint64_t v13 = v12;
  v10[36] = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_10006875C(v10[32], (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  }
  else
  {
    v10[37] = v6;
    v10[38] = v8;
  }
  sub_100009758(v3);
  sub_100009758(v0);
  sub_100009758(v4);
  sub_10000E934();
  sub_1000170B0();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_100061920()
{
  sub_100068A70();
  sub_10001422C();
  uint64_t v1 = v0[32];
  sub_100067390(v0[28], v1, v0[38], v0[37], *(unsigned char *)(v0[28] + 240) == 1, v0[29]);
  swift_bridgeObjectRelease();
  sub_10006875C(v1, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E97C();
  sub_100018010();
  return v5(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000619E4()
{
  sub_1000113BC();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v0();
}

uint64_t sub_100061A5C()
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_100017D58();
  uint64_t v10 = v9;
  sub_10000935C();
  *uint64_t v11 = v10;
  sub_100017354();
  uint64_t v12 = *v1;
  sub_10000935C();
  *uint64_t v13 = v12;
  v10[42] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100009758(v3);
    sub_100009758(v2);
    sub_100009758(v4);
    sub_100005B18((uint64_t)(v10 + 26));
    swift_bridgeObjectRelease();
  }
  else
  {
    v10[43] = v6;
    v10[44] = v8;
    sub_100009758(v3);
    sub_100009758(v2);
    sub_100009758(v4);
  }
  sub_1000170B0();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_100061BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v11 = v10[39];
  sub_100067390(v10[28], v10[31], v10[44], v10[43], *(unsigned char *)(v10[28] + 240) == 1, v10[29]);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v12 = v10[39];
  if (*(void *)(v11 + 16) >= *(void *)(v11 + 24) >> 1)
  {
    sub_100068A10();
    uint64_t v12 = v32;
  }
  uint64_t v13 = v10[40];
  uint64_t v14 = v10[34];
  uint64_t v15 = sub_100068AB8();
  uint64_t result = sub_10006875C(v15, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  if (v13 == v14)
  {
    sub_100005B18((uint64_t)(v10 + 26));
    type metadata accessor for BackendGroup();
    uint64_t v17 = swift_allocObject();
    swift_defaultActor_initialize();
    *(void *)(v17 + 112) = v12;
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000170B0();
    return v21(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
  }
  else
  {
    uint64_t v26 = v10[40];
    v10[39] = v12;
    v10[40] = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v27 = sub_100068A34(v26);
      sub_1000686FC(v27, v28, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
      swift_retain();
      sub_100019B14((uint64_t)(v10 + 20));
      sub_100019B14((uint64_t)(v10 + 18));
      sub_100019B14((uint64_t)(v10 + 16));
      uint64_t v29 = (void *)swift_task_alloc();
      v10[41] = (uint64_t)v29;
      *uint64_t v29 = v10;
      v29[1] = sub_100061A5C;
      sub_100011590();
      sub_1000170B0();
      return sub_100008030(v30);
    }
  }
  return result;
}

uint64_t sub_100061DB4()
{
  sub_1000113BC();
  sub_10006875C(*(void *)(v0 + 248), (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v1();
}

uint64_t sub_100061E48(uint64_t a1, uint64_t a2)
{
  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  v3[30] = *(void *)(type metadata accessor for SessionConfiguration.Backend(0) - 8);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  type metadata accessor for CachedSession(0);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  return _swift_task_switch(sub_100061F54, v2, 0);
}

uint64_t sub_100061F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10000E6A4();
  sub_100011540();
  sub_10001A3AC();
  *(void *)(v14 + 72) = v12;
  uint64_t v15 = *(void *)(v12 + 16);
  *(void *)(v14 + 80) = v15;
  if (v15 == 1)
  {
    uint64_t v25 = (__n128 *)(v14 - 192);
    uint64_t v26 = v14 - 96;
    uint64_t v27 = v14 - 32;
    uint64_t v28 = v14 - 16;
    uint64_t v29 = *(void *)(v13 + 256);
    uint64_t v30 = *(void *)(v13 + 240);
    uint64_t v31 = *(void *)(v13 + 224);
    sub_1000686FC(v31, *(void *)(v13 + 272), (void (*)(void))type metadata accessor for CachedSession);
    sub_1000686FC(v12 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)), v29, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
    __n128 v32 = *(__n128 *)(v31 + 32);
    __n128 v33 = *(__n128 *)v31;
    v25[1] = *(__n128 *)(v31 + 16);
    _DWORD v25[2] = v32;
    *uint64_t v25 = v33;
    sub_100011684(*(__n128 *)v31);
    sub_100019B14(v26);
    sub_100019B14(v27);
    sub_100019B14(v28);
    unint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v13 + 296) = v34;
    *unint64_t v34 = v13;
    v34[1] = sub_100062218;
    sub_100011590();
  }
  else
  {
    if (!v15)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000176E4();
      sub_100016198();
      return v19(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
    }
    unint64_t v35 = (_OWORD *)(v14 - 144);
    int64_t v36 = (_OWORD *)(v14 - 80);
    unint64_t v37 = (_OWORD *)(v14 - 64);
    uint64_t v38 = (long long *)(v14 - 48);
    uint64_t v39 = *(void *)(v13 + 240);
    sub_10001ED64();
    int v40 = *(_DWORD *)(v39 + 80);
    *(_DWORD *)(v13 + 376) = v40;
    *(void *)(v13 + 328) = v41;
    *(void *)(v13 + 336) = 1;
    uint64_t v42 = *(void *)(v13 + 264);
    uint64_t v43 = *(void *)(v13 + 248);
    uint64_t v44 = *(long long **)(v13 + 224);
    uint64_t v45 = *(void *)(v13 + 280) + ((v40 + 32) & ~(unint64_t)v40);
    swift_bridgeObjectRetain();
    sub_1000686FC(v45, v43, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
    sub_1000686FC((uint64_t)v44, v42, (void (*)(void))type metadata accessor for CachedSession);
    long long v46 = v44[2];
    long long v47 = *v44;
    v35[1] = v44[1];
    void v35[2] = v46;
    *unint64_t v35 = v47;
    *uint64_t v38 = *v44;
    long long v48 = *(_OWORD *)(v13 + 96);
    *unint64_t v37 = *(_OWORD *)(v13 + 80);
    *int64_t v36 = v48;
    sub_100019B14((uint64_t)v38);
    sub_100019B14((uint64_t)v37);
    sub_100019B14((uint64_t)v36);
    uint64_t v49 = (void *)swift_task_alloc();
    *(void *)(v13 + 344) = v49;
    *uint64_t v49 = v13;
    v49[1] = sub_1000624E0;
    sub_100011590();
  }
  sub_100016198();
  return sub_100008030(v50);
}

uint64_t sub_100062218()
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_100017D58();
  uint64_t v10 = v9;
  sub_10000935C();
  *uint64_t v11 = v10;
  sub_10001633C();
  uint64_t v12 = *v2;
  sub_10000935C();
  *uint64_t v13 = v12;
  v10[38] = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_10006875C(v10[32], (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  }
  else
  {
    v10[39] = v6;
    v10[40] = v8;
  }
  sub_100009758(v3);
  sub_100009758(v0);
  sub_100009758(v4);
  sub_10000E934();
  sub_1000170B0();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_10006235C()
{
  sub_100068A70();
  sub_10001422C();
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[32];
  sub_100068A84();
  sub_1000676F8(v2, v3, v4, v1, v5, v6);
  swift_bridgeObjectRelease();
  sub_10006875C(v3, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  sub_10006875C(v2, (void (*)(void))type metadata accessor for CachedSession);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E97C();
  sub_100018010();
  return v10(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_100062440()
{
  sub_100068A70();
  sub_10001422C();
  sub_10006875C(*(void *)(v0 + 272), (void (*)(void))type metadata accessor for CachedSession);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100018010();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000624E0()
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_100017D58();
  uint64_t v10 = v9;
  sub_10000935C();
  *uint64_t v11 = v10;
  sub_100017354();
  uint64_t v12 = *v1;
  sub_10000935C();
  *uint64_t v13 = v12;
  v10[44] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100009758(v3);
    sub_100009758(v2);
    sub_100009758(v4);
    sub_100005B18((uint64_t)(v10 + 26));
    swift_bridgeObjectRelease();
  }
  else
  {
    v10[45] = v6;
    v10[46] = v8;
    sub_100009758(v3);
    sub_100009758(v2);
    sub_100009758(v4);
  }
  sub_1000170B0();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_10006262C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v11 = *(void *)(v10 + 360);
  uint64_t v12 = *(void *)(v10 + 328);
  uint64_t v13 = *(void *)(v10 + 264);
  sub_100068A84();
  sub_1000676F8(v13, v14, v15, v11, v16, v17);
  swift_bridgeObjectRelease();
  sub_10006875C(v13, (void (*)(void))type metadata accessor for CachedSession);
  uint64_t v18 = *(void *)(v10 + 328);
  if (*(void *)(v12 + 16) >= *(void *)(v12 + 24) >> 1)
  {
    sub_100068A10();
    uint64_t v18 = v43;
  }
  uint64_t v19 = *(void *)(v10 + 336);
  uint64_t v20 = *(void *)(v10 + 288);
  uint64_t v21 = sub_100068AB8();
  uint64_t result = sub_10006875C(v21, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  if (v19 == v20)
  {
    sub_100005B18(v10 + 208);
    type metadata accessor for BackendGroup();
    uint64_t v23 = swift_allocObject();
    swift_defaultActor_initialize();
    *(void *)(v23 + 112) = v18;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000170B0();
    return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
  }
  else
  {
    uint64_t v32 = *(void *)(v10 + 336);
    *(void *)(v10 + 328) = v18;
    *(void *)(v10 + 336) = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v33 = *(void *)(v10 + 264);
      unint64_t v34 = *(long long **)(v10 + 224);
      uint64_t v35 = sub_100068A34(v32);
      sub_1000686FC(v35, v36, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
      sub_1000686FC((uint64_t)v34, v33, (void (*)(void))type metadata accessor for CachedSession);
      long long v37 = v34[2];
      long long v38 = *v34;
      *(_OWORD *)(v10 + 80) = v34[1];
      *(_OWORD *)(v10 + 96) = v37;
      *(_OWORD *)(v10 + 64) = v38;
      *(_OWORD *)(v10 + 160) = *v34;
      long long v39 = *(_OWORD *)(v10 + 96);
      *(_OWORD *)(v10 + 144) = *(_OWORD *)(v10 + 80);
      *(_OWORD *)(v10 + 128) = v39;
      sub_100019B14(v10 + 160);
      sub_100019B14(v10 + 144);
      sub_100019B14(v10 + 128);
      int v40 = (void *)swift_task_alloc();
      *(void *)(v10 + 344) = v40;
      *int v40 = v10;
      v40[1] = sub_1000624E0;
      sub_1000170B0();
      return sub_100008030(v41);
    }
  }
  return result;
}

uint64_t sub_10006289C()
{
  sub_100068A70();
  sub_10001422C();
  sub_10006875C(*(void *)(v0 + 248), (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  sub_10006875C(*(void *)(v0 + 264), (void (*)(void))type metadata accessor for CachedSession);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100018010();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100062958()
{
  sub_100016CE0(&qword_1000A7350);
  uint64_t v0 = sub_100016CE0(&qword_1000A7358);
  uint64_t v1 = *(void *)(*(void *)(v0 - 8) + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 - 8) + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100086570;
  unint64_t v4 = v3 + v2;
  uint64_t v5 = (unsigned char *)(v3 + v2 + *(int *)(v0 + 48));
  *(void *)(v3 + v2) = XPC_ACTIVITY_REPEATING;
  unsigned char *v5 = 1;
  type metadata accessor for XPCObject();
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (void *)(v4 + v1 + *(int *)(v0 + 48));
  *(void *)(v4 + v1) = XPC_ACTIVITY_DELAY;
  *uint64_t v6 = 86400;
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (const char **)(v4 + 2 * v1);
  uint64_t v8 = (const char **)((char *)v7 + *(int *)(v0 + 48));
  *uint64_t v7 = XPC_ACTIVITY_GRACE_PERIOD;
  *uint64_t v8 = 3600;
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = (const char **)(v4 + 3 * v1);
  uint64_t v10 = (uint64_t *)((char *)v9 + *(int *)(v0 + 48));
  *uint64_t v9 = XPC_ACTIVITY_PRIORITY;
  *uint64_t v10 = String.init(cString:)();
  v10[1] = v11;
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = (const char **)(v4 + 4 * v1);
  uint64_t v13 = (char *)v12 + *(int *)(v0 + 48);
  *uint64_t v12 = XPC_ACTIVITY_ALLOW_BATTERY;
  *uint64_t v13 = 0;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v15 = (void *)(v4 + 5 * v1);
  char v16 = (char *)v15 + *(int *)(v0 + 48);
  *uint64_t v15 = XPC_ACTIVITY_POWER_NAP;
  *char v16 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v17 = (void *)(v4 + 6 * v1);
  uint64_t v18 = (void *)((char *)v17 + *(int *)(v0 + 48));
  *uint64_t v17 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  void *v18 = 43200;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v19 = (void *)(v4 - v1 + 8 * v1);
  uint64_t v20 = (char *)v19 + *(int *)(v0 + 48);
  *uint64_t v19 = XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  unsigned char *v20 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v21 = (void *)(v4 + 8 * v1);
  uint64_t v22 = (char *)v21 + *(int *)(v0 + 48);
  *uint64_t v21 = XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  unsigned char *v22 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_NETWORK_UPLOAD_SIZE)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v23 = (void *)(v4 + 9 * v1);
  uint64_t v24 = (void *)((char *)v23 + *(int *)(v0 + 48));
  *uint64_t v23 = XPC_ACTIVITY_NETWORK_UPLOAD_SIZE;
  *uint64_t v24 = 5242880;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v25 = (void *)(v4 + 10 * v1);
  uint64_t v26 = (void *)((char *)v25 + *(int *)(v0 + 48));
  *uint64_t v25 = XPC_ACTIVITY_EXPECTED_DURATION;
  int64_t *v26 = XPC_ACTIVITY_INTERVAL_5_MIN;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v27 = (void *)(v4 + 11 * v1);
  uint64_t v28 = (void *)((char *)v27 + *(int *)(v0 + 48));
  *uint64_t v27 = XPC_ACTIVITY_GROUP_NAME;
  *uint64_t v28 = 0xD00000000000001DLL;
  v28[1] = 0x8000000100089C20;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
    uint64_t v29 = (void *)(v4 + 12 * v1);
    uint64_t v30 = (void *)((char *)v29 + *(int *)(v0 + 48));
    *uint64_t v29 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
    void *v30 = 1;
    swift_storeEnumTagMultiPayload();
    sub_100016CE0(&qword_1000A7360);
    sub_10003E2CC();
    uint64_t result = Dictionary.init(dictionaryLiteral:)();
    qword_1000AF380 = result;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t *sub_100062D54()
{
  if (qword_1000A6070 != -1) {
    swift_once();
  }
  return &qword_1000AF380;
}

uint64_t sub_100062DA0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF388);
  sub_100012884(v0, (uint64_t)qword_1000AF388);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100062E14()
{
  sub_1000094A8();
  v1[9] = v2;
  v1[10] = v0;
  uint64_t v3 = type metadata accessor for CachedSession(0);
  sub_100009374(v3);
  v1[11] = sub_10000E8B8();
  v1[12] = swift_task_alloc();
  sub_10000E934();
  return _swift_task_switch(v4, v5, v6);
}

void sub_100062E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v24;
  a22 = v25;
  sub_100007DB0();
  a20 = v22;
  if (qword_1000A6078 != -1) {
    swift_once();
  }
  uint64_t v26 = v22[9];
  uint64_t v27 = v22[12];
  uint64_t v28 = type metadata accessor for Logger();
  v22[13] = sub_100012884(v28, (uint64_t)qword_1000AF388);
  sub_1000686FC(v26, v27, (void (*)(void))type metadata accessor for CachedSession);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = v22[12];
  if (v31)
  {
    a9 = v22 + 8;
    sub_100014490();
    a11 = sub_1000094B4();
    sub_100068A4C(4.8751e-34);
    v22[8] = sub_10001227C(v23, 0xCuLL, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006875C(v32, (void (*)(void))type metadata accessor for CachedSession);
    sub_100068AEC((void *)&_mh_execute_header, v33, v34, "sending events for session: %{public}s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    sub_10006875C(v22[12], (void (*)(void))type metadata accessor for CachedSession);
  }

  uint64_t v35 = qword_1000AF3B8;
  v22[14] = qword_1000AF3B8;
  if (v35)
  {
    uint64_t v45 = (char *)&dword_1000A8148 + dword_1000A8148;
    swift_retain();
    uint64_t v36 = (void *)swift_task_alloc();
    v22[15] = v36;
    *uint64_t v36 = v22;
    v36[1] = sub_1000630E0;
    sub_10001A528(v22[9]);
    sub_100016650();
    v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, v45, a11, a12, a13, a14);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000630E0()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v1;
  v3[16] = v5;
  v3[17] = v6;
  v3[18] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[10];
    uint64_t v8 = sub_100063E40;
  }
  else
  {
    uint64_t v9 = v3[10];
    swift_release();
    uint64_t v8 = sub_1000631E0;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_1000631E0()
{
  sub_10001422C();
  if (*(void *)(v0 + 128))
  {
    if (qword_1000AF3A0)
    {
      *(void *)(v0 + 152) = qword_1000AF3A0;
      swift_retain();
      uint64_t v1 = swift_task_alloc();
      uint64_t v2 = (void *)sub_10001A4A0(v1);
      *uint64_t v2 = v3;
      v2[1] = sub_10006330C;
      uint64_t v4 = sub_100012958();
      sub_10004338C(v4, v5, v6, v7);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_100066BEC();
    sub_10000932C();
    *uint64_t v8 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    v9();
  }
}

uint64_t sub_10006330C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v1;
  v3[21] = v5;
  v3[22] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[10];
    uint64_t v7 = sub_100063EAC;
  }
  else
  {
    uint64_t v8 = v3[10];
    swift_release();
    uint64_t v7 = sub_100063408;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100063408()
{
  long long v38 = v0;
  uint64_t v1 = v0[21];
  if (!*(void *)(v1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100013FE0();
    goto LABEL_5;
  }
  if (static Task<>.isCancelled.getter())
  {
    swift_bridgeObjectRelease();
    sub_100066BEC();
    uint64_t v2 = sub_10000932C();
    sub_10001A598(v2, v3);
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
LABEL_5:
    return v4();
  }
  sub_1000686FC(v0[9], v0[11], (void (*)(void))type metadata accessor for CachedSession);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    loga = v6;
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[11];
    uint64_t v10 = swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134349826;
    v0[4] = *(void *)(v1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v11 = *(void *)(v9 + 48);
    unint64_t v12 = *(void *)(v9 + 56);
    swift_bridgeObjectRetain();
    v0[5] = sub_10001227C(v11, v12, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006875C(v9, (void (*)(void))type metadata accessor for CachedSession);
    *(_WORD *)(v10 + 22) = 2082;
    uint64_t v13 = sub_100060424(v8, 0x646F6874656D5FLL, 0xE700000000000000);
    sub_1000607AC((uint64_t)v13, (uint64_t)&type metadata for Int64, (uint64_t)&protocol witness table for Int64, (void (*)(uint64_t *, uint64_t))sub_10005B9F8);
    os_log_type_t type = v7;
    uint64_t v14 = Set.description.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    v0[6] = sub_10001227C(v14, v16, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 32) = 2082;
    uint64_t v17 = sub_100060424(v8, 0x7375746174735FLL, 0xE700000000000000);
    sub_1000607AC((uint64_t)v17, (uint64_t)&type metadata for Int64, (uint64_t)&protocol witness table for Int64, (void (*)(uint64_t *, uint64_t))sub_10005B9F8);
    uint64_t v18 = Set.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    v0[7] = sub_10001227C(v18, v20, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, loga, type, "sending %{public}ld events for session %s with categories [%{public}s] types [%{public}s]", (uint8_t *)v10, 0x2Au);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    sub_10006875C(v0[11], (void (*)(void))type metadata accessor for CachedSession);
    swift_bridgeObjectRelease_n();
  }
  int64_t v21 = *(void *)(v1 + 16);
  v0[23] = v21;
  uint64_t v22 = _swiftEmptyArrayStorage;
  if (v21)
  {
    uint64_t v23 = v0 + 2;
    uint64_t v24 = v0[21];
    v0[2] = _swiftEmptyArrayStorage;
    sub_100071E70(0, v21, 0);
    uint64_t v22 = (void *)v0[2];
    uint64_t v25 = (_OWORD *)(v24 + 48);
    do
    {
      uint64_t v26 = *((void *)v25 - 1);
      long long v36 = *v25;
      *uint64_t v23 = v22;
      unint64_t v27 = v22[2];
      unint64_t v28 = v22[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27 >= v28 >> 1)
      {
        sub_100071E70((char *)(v28 > 1), v27 + 1, 1);
        uint64_t v22 = (void *)*v23;
      }
      v22[2] = v27 + 1;
      uint64_t v29 = &v22[3 * v27];
      v29[4] = v26;
      *(_OWORD *)(v29 + 5) = v36;
      v25 += 2;
      --v21;
    }
    while (v21);
  }
  v0[24] = v22;
  uint64_t v30 = v0[17];
  uint64_t ObjectType = swift_getObjectType();
  os_log_t log = (os_log_t)(*(void *)(v30 + 24) + **(int **)(v30 + 24));
  uint64_t v32 = (void *)swift_task_alloc();
  v0[25] = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_1000639C4;
  return ((uint64_t (*)(void *, uint64_t, uint64_t))log)(v22, ObjectType, v30);
}

uint64_t sub_1000639C4()
{
  sub_1000113BC();
  uint64_t v2 = *v1;
  sub_10000935C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100063F24;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 80);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100063B14;
    uint64_t v6 = v7;
  }
  return _swift_task_switch(v5, v6, 0);
}

void sub_100063B14()
{
  sub_100016940();
  uint64_t v1 = qword_1000AF3A0;
  v0[27] = qword_1000AF3A0;
  if (v1)
  {
    int64_t v2 = v0[23];
    uint64_t v3 = v0[21];
    if (v2)
    {
      uint64_t v4 = v0 + 3;
      v0[3] = _swiftEmptyArrayStorage;
      swift_retain();
      sub_100071EC0(0, v2, 0);
      uint64_t v5 = 0;
      uint64_t v6 = (void *)v0[3];
      uint64_t v7 = (uint64_t *)(v3 + 32);
      unint64_t v8 = v6[2];
      do
      {
        uint64_t v10 = *v7;
        v7 += 4;
        uint64_t v9 = v10;
        void *v4 = v6;
        unint64_t v11 = v6[3];
        if (v8 >= v11 >> 1)
        {
          sub_100071EC0((char *)(v11 > 1), v8 + 1, 1);
          uint64_t v6 = (void *)*v4;
        }
        uint64_t v12 = v0[23];
        ++v5;
        _OWORD v6[2] = v8 + 1;
        v6[v8++ + 4] = v9;
      }
      while (v5 != v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v6 = _swiftEmptyArrayStorage;
    }
    v0[28] = v6;
    uint64_t v13 = (void *)swift_task_alloc();
    v0[29] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100063C8C;
    sub_1000182A8();
    sub_1000435E4(v14);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100063C8C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 80);
    unint64_t v8 = sub_100064000;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 80);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v8 = sub_100063D8C;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_100063D8C()
{
  sub_1000113BC();
  if (qword_1000AF3A0)
  {
    *(void *)(v0 + 152) = qword_1000AF3A0;
    swift_retain();
    uint64_t v1 = swift_task_alloc();
    uint64_t v2 = (void *)sub_10001A4A0(v1);
    *uint64_t v2 = v3;
    v2[1] = sub_10006330C;
    uint64_t v4 = sub_100012958();
    sub_10004338C(v4, v5, v6, v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100063E40()
{
  sub_1000094A8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v0();
}

uint64_t sub_100063EAC()
{
  sub_1000094A8();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v0();
}

uint64_t sub_100063F24()
{
  sub_10001422C();
  uint64_t v1 = *(void *)(v0 + 208);
  if (static Task<>.isCancelled.getter())
  {
    sub_100066BEC();
    uint64_t v2 = sub_10000932C();
    sub_10001A598(v2, v3);
    swift_errorRelease();
  }
  else
  {
    sub_100066BEC();
    sub_10000932C();
    void *v4 = v1;
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100064000()
{
  sub_10001422C();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 240);
  if (static Task<>.isCancelled.getter())
  {
    sub_100066BEC();
    uint64_t v2 = sub_10000932C();
    sub_10001A598(v2, v3);
    swift_errorRelease();
  }
  else
  {
    sub_100066BEC();
    sub_10000932C();
    void *v4 = v1;
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000640EC()
{
  sub_1000094A8();
  v1[32] = v0;
  uint64_t v2 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  sub_100009374(v2);
  v1[33] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CachedSession(0);
  sub_10001130C(v3);
  v1[34] = v4;
  v1[35] = sub_10000E8B8();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  sub_10000E934();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000641F4()
{
  sub_100016940();
  if (qword_1000A6078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[43] = sub_100012884(v1, (uint64_t)qword_1000AF388);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "starting submission activity", v4, 2u);
    sub_100009474();
  }

  uint64_t result = static Task<>.isCancelled.getter();
  if (result)
  {
    uint64_t result = static Task<>.isCancelled.getter();
    if (result)
    {
      swift_bridgeObjectRelease();
      sub_100019D10();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000E83C();
      sub_1000182A8();
      __asm { BRAA            X1, X16 }
    }
    uint64_t v12 = qword_1000AF3A0;
    v0[67] = qword_1000AF3A0;
    if (v12)
    {
      swift_retain();
      uint64_t v13 = (void *)swift_task_alloc();
      v0[68] = v13;
      *uint64_t v13 = v0;
      v13[1] = sub_1000655CC;
      sub_1000182A8();
      return sub_100044320();
    }
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v8 = qword_1000AF3A0;
  v0[44] = qword_1000AF3A0;
  if (!v8)
  {
    __break(1u);
    goto LABEL_19;
  }
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[45] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100064474;
  sub_1000182A8();
  return sub_100043080(v10);
}

uint64_t sub_100064474()
{
  sub_1000094A8();
  sub_100017D58();
  os_log_type_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v1;
  v3[46] = v5;
  v3[47] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[32];
    uint64_t v7 = sub_100065770;
  }
  else
  {
    uint64_t v8 = v3[32];
    swift_release();
    uint64_t v7 = sub_100064570;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100064570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v23;
  a22 = v24;
  sub_100007DB0();
  a20 = v22;
  uint64_t v25 = (void *)v22[46];
  uint64_t v26 = v25[2];
  v22[48] = v26;
  if (v26)
  {
    uint64_t v28 = v25[4];
    unint64_t v27 = v25[5];
    swift_bridgeObjectRetain();
    if ((static Task<>.isCancelled.getter() & 1) == 0)
    {
      sub_10001A700(1);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        sub_100014490();
        a11 = sub_1000094B4();
        sub_1000145C4(4.8751e-34);
        uint64_t v47 = sub_10001227C(v28, v27, &a11);
        sub_10001A62C(v47);
        swift_bridgeObjectRelease_n();
        sub_10001AAA8((void *)&_mh_execute_header, v45, v48, "sending events for client type: %{public}s");
        swift_arrayDestroy();
        sub_100009474();
        sub_100009474();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v52 = qword_1000AF3B0;
      v22[52] = qword_1000AF3B0;
      if (v52)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        sub_10000E934();
        sub_100016650();
        return _swift_task_switch(v29, v30, v31);
      }
      __break(1u);
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = static Task<>.isCancelled.getter();
    if ((v29 & 1) == 0)
    {
      uint64_t v32 = qword_1000AF3A0;
      v22[44] = qword_1000AF3A0;
      if (v32)
      {
        swift_retain();
        uint64_t v33 = (void *)swift_task_alloc();
        v22[45] = v33;
        *uint64_t v33 = v22;
        v33[1] = sub_100064474;
        sub_100016650();
        return sub_100043080(v34);
      }
      goto LABEL_26;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = static Task<>.isCancelled.getter();
  if (v29)
  {
    swift_bridgeObjectRelease();
    sub_100019D10();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    sub_100016650();
    return v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14);
  }
  uint64_t v49 = qword_1000AF3A0;
  v22[67] = qword_1000AF3A0;
  if (!v49)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return _swift_task_switch(v29, v30, v31);
  }
  swift_retain();
  uint64_t v50 = (void *)swift_task_alloc();
  v22[68] = v50;
  *uint64_t v50 = v22;
  v50[1] = sub_1000655CC;
  sub_100016650();
  return sub_100044320();
}

uint64_t sub_10006489C()
{
  sub_1000094A8();
  uint64_t v1 = v0[32];
  sub_100009B48(v0[49], v0[50]);
  swift_release();
  return _swift_task_switch(sub_100064910, v1, 0);
}

uint64_t sub_100064910()
{
  sub_1000094A8();
  uint64_t v1 = qword_1000AF3A0;
  uint64_t result = swift_bridgeObjectRetain();
  if (v1)
  {
    *(void *)(v0 + 424) = v1;
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 432) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000649C0;
    uint64_t v4 = sub_100014538();
    return sub_100042E58(v4, v5, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000649C0()
{
  sub_1000113BC();
  sub_100009594();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  v3[55] = v7;
  v3[56] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v8 = v3[32];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v9 = sub_100065938;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v11 = v3[32];
    swift_release();
    uint64_t v9 = sub_100064B00;
    uint64_t v10 = v11;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_100064B00()
{
  sub_1000094A8();
  char v1 = static Task<>.isCancelled.getter();
  uint64_t v2 = *(void *)(v0 + 440);
  if ((v1 & 1) != 0 || (uint64_t v3 = *(void *)(v2 + 16), (*(void *)(v0 + 456) = v3) == 0))
  {
    uint64_t v6 = swift_bridgeObjectRelease();
    uint64_t v14 = qword_1000AF3B0;
    *(void *)(v0 + 528) = qword_1000AF3B0;
    if (v14)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      sub_10000E934();
      return _swift_task_switch(v6, v7, v8);
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return _swift_task_switch(v6, v7, v8);
  }
  uint64_t v4 = *(void *)(v0 + 272);
  int v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 560) = v5;
  *(void *)(v0 + 464) = *(void *)(v4 + 72);
  *(void *)(v0 + 472) = 0;
  sub_1000686FC(v2 + ((v5 + 32) & ~(unint64_t)v5), *(void *)(v0 + 336), (void (*)(void))type metadata accessor for CachedSession);
  if (static Task<>.isCancelled.getter())
  {
    sub_10006875C(*(void *)(v0 + 336), (void (*)(void))type metadata accessor for CachedSession);
    uint64_t v6 = swift_bridgeObjectRelease();
    if (qword_1000AF3A0)
    {
      *(void *)(v0 + 424) = qword_1000AF3A0;
      swift_retain();
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 432) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_1000649C0;
      uint64_t v10 = sub_100014538();
      return sub_100042E58(v10, v11, v12);
    }
    goto LABEL_16;
  }
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100064CFC;
  sub_10001A528(*(void *)(v0 + 336));
  return sub_100062E14();
}

uint64_t sub_100064CFC()
{
  sub_1000113BC();
  uint64_t v2 = *v1;
  sub_10000935C();
  uint64_t *v4 = v3;
  uint64_t *v4 = *v1;
  *(void *)(v3 + 488) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v6 = sub_100065B44;
  }
  else {
    uint64_t v6 = sub_100064E20;
  }
  return _swift_task_switch(v6, v5, 0);
}

void sub_100064E20()
{
  sub_1000113BC();
  uint64_t v1 = qword_1000AF3A0;
  v0[62] = qword_1000AF3A0;
  if (v1)
  {
    uint64_t v2 = v0[42];
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    v0[63] = v4;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[64] = v5;
    void *v5 = v0;
    v5[1] = sub_100064EEC;
    sub_1000429B8(v3, v4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100064EEC()
{
  sub_100068A70();
  sub_10001422C();
  sub_100009594();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v1;
  *(void *)(v3 + 520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_100018010();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100065054()
{
  sub_1000094A8();
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 472) + 1;
  sub_10006875C(*(void *)(v0 + 336), (void (*)(void))type metadata accessor for CachedSession);
  if (v2 == v1)
  {
LABEL_4:
    uint64_t result = swift_bridgeObjectRelease();
    if (qword_1000AF3A0)
    {
      *(void *)(v0 + 424) = qword_1000AF3A0;
      swift_retain();
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 432) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_1000649C0;
      uint64_t v7 = sub_100014538();
      return sub_100042E58(v7, v8, v9);
    }
    else
    {
      __break(1u);
    }
    return result;
  }
  uint64_t v3 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 472) + 1;
  *(void *)(v0 + 472) = v4;
  sub_1000686FC(*(void *)(v0 + 440)+ ((*(unsigned __int8 *)(v0 + 560) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 560))+ v3 * v4, *(void *)(v0 + 336), (void (*)(void))type metadata accessor for CachedSession);
  if (static Task<>.isCancelled.getter())
  {
    sub_10006875C(*(void *)(v0 + 336), (void (*)(void))type metadata accessor for CachedSession);
    goto LABEL_4;
  }
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100064CFC;
  sub_10001A528(*(void *)(v0 + 336));
  return sub_100062E14();
}

uint64_t sub_100065204()
{
  sub_1000113BC();
  uint64_t v1 = v0[32];
  sub_10000A630(v0[49], v0[50], 0);
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_task_switch(sub_100065290, v1, 0);
}

uint64_t sub_100065290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v23;
  a22 = v24;
  sub_100007DB0();
  a20 = v22;
  unint64_t v28 = v22[51];
  uint64_t v29 = v22[46];
  if (v28 != v22[48])
  {
    if (v28 >= *(void *)(v29 + 16))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      return _swift_task_switch(v25, v26, v27);
    }
    uint64_t v30 = v29 + 16 * v28;
    uint64_t v32 = *(void *)(v30 + 32);
    unint64_t v31 = *(void *)(v30 + 40);
    swift_bridgeObjectRetain();
    if ((static Task<>.isCancelled.getter() & 1) == 0)
    {
      sub_10001A700(v28 + 1);
      os_log_type_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        sub_100014490();
        a11 = sub_1000094B4();
        sub_1000145C4(4.8751e-34);
        uint64_t v48 = sub_10001227C(v32, v31, &a11);
        sub_10001A62C(v48);
        swift_bridgeObjectRelease_n();
        sub_10001AAA8((void *)&_mh_execute_header, v46, v49, "sending events for client type: %{public}s");
        swift_arrayDestroy();
        sub_100009474();
        sub_100009474();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v53 = qword_1000AF3B0;
      v22[52] = qword_1000AF3B0;
      if (v53)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        sub_10000E934();
        sub_100016650();
        return _swift_task_switch(v25, v26, v27);
      }
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = static Task<>.isCancelled.getter();
  if (v25)
  {
    uint64_t v25 = static Task<>.isCancelled.getter();
    if (v25)
    {
      swift_bridgeObjectRelease();
      sub_100019D10();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000E83C();
      sub_100016650();
      return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12, a13, a14);
    }
    uint64_t v50 = qword_1000AF3A0;
    v22[67] = qword_1000AF3A0;
    if (v50)
    {
      swift_retain();
      uint64_t v51 = (void *)swift_task_alloc();
      v22[68] = v51;
      void *v51 = v22;
      v51[1] = sub_1000655CC;
      sub_100016650();
      return sub_100044320();
    }
    goto LABEL_28;
  }
  uint64_t v42 = qword_1000AF3A0;
  v22[44] = qword_1000AF3A0;
  if (!v42) {
    goto LABEL_26;
  }
  swift_retain();
  uint64_t v43 = (void *)swift_task_alloc();
  v22[45] = v43;
  *uint64_t v43 = v22;
  v43[1] = sub_100064474;
  sub_100016650();
  return sub_100043080(v44);
}

uint64_t sub_1000655CC()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_10000935C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 552) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 256);
    uint64_t v8 = sub_1000666A8;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 256);
    swift_release();
    uint64_t v8 = sub_1000656C4;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_1000656C4()
{
  sub_100016940();
  swift_bridgeObjectRelease();
  sub_100019D10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_1000182A8();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_100065770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10000E6A4();
  a19 = v21;
  a20 = v22;
  sub_100011540();
  a18 = v20;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (_DWORD *)sub_100014490();
    a9 = sub_1000094B4();
    *uint64_t v25 = 136315138;
    swift_getErrorValue();
    uint64_t v26 = Error.localizedDescription.getter();
    *(void *)(v20 + 232) = sub_10001227C(v26, v27, &a9);
    sub_10000E704();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001AAA8((void *)&_mh_execute_header, v23, v28, "error running submission: %s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100019D10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100016198();
  return v30(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12);
}

uint64_t sub_100065938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v24;
  a22 = v25;
  sub_100007DB0();
  a20 = v23;
  uint64_t v27 = v23[49];
  uint64_t v26 = v23[50];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v28, v29))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    if (!v26) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v22 = 12;
  sub_100014490();
  a10 = v26;
  a9 = v27;
  a11 = sub_1000094B4();
  sub_10001A95C(4.8149e-34);
  uint64_t v30 = Error.localizedDescription.getter();
  uint64_t v32 = sub_10001227C(v30, v31, &a11);
  sub_10001A81C(v32);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  sub_10001640C((void *)&_mh_execute_header, v33, v34, "error running submission: %s");
  swift_arrayDestroy();
  sub_100009474();
  sub_100009474();

  swift_errorRelease();
  if (v26)
  {
LABEL_5:
    uint64_t v35 = v23[33];
    uint64_t v36 = type metadata accessor for TaskPriority();
    sub_1000094CC(v36);
    uint64_t v37 = (void *)swift_allocObject();
    sub_10000A4AC(v37);
    sub_10000FF80(v35, (uint64_t)&unk_1000A8140, v22);
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_6:
  sub_100019D10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100016650();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14);
}

void sub_100065B44()
{
  uint64_t v59 = v0;
  v0[17] = v0[61];
  uint64_t v1 = v0 + 14;
  swift_errorRetain();
  sub_100016CE0(&qword_1000A67E8);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    unint64_t v2 = *v1;
    if (*v1)
    {
      if (v2 != 1)
      {
        sub_1000686FC(v0[42], v0[36], (void (*)(void))type metadata accessor for CachedSession);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        BOOL v42 = os_log_type_enabled(v40, v41);
        uint64_t v43 = v0[36];
        if (v42)
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = 136446466;
          uint64_t v46 = *(void *)(v43 + 48);
          unint64_t v45 = *(void *)(v43 + 56);
          swift_bridgeObjectRetain();
          v0[19] = sub_10001227C(v46, v45, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006875C(v43, (void (*)(void))type metadata accessor for CachedSession);
          *(_WORD *)(v44 + 12) = 2082;
          swift_getErrorValue();
          uint64_t v47 = Error.localizedDescription.getter();
          v0[22] = sub_10001227C(v47, v48, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100066BDC(v2);
          sub_100066BDC(v2);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "failed to send events for session %{public}s: %{public}s", (uint8_t *)v44, 0x16u);
          sub_100068A98();
          sub_100009474();
          sub_100009474();

          sub_100066BDC(v2);
        }
        else
        {
          sub_100066BDC(v2);
          sub_10006875C(v43, (void (*)(void))type metadata accessor for CachedSession);
          sub_100066BDC(v2);
          sub_100066BDC(v2);
        }
        goto LABEL_18;
      }
      sub_1000686FC(v0[42], v0[41], (void (*)(void))type metadata accessor for CachedSession);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      BOOL v5 = os_log_type_enabled(v3, v4);
      uint64_t v6 = v0[41];
      if (!v5)
      {
        sub_10006875C(v0[41], (void (*)(void))type metadata accessor for CachedSession);
        goto LABEL_15;
      }
      sub_100014490();
      uint64_t v58 = sub_1000094B4();
      sub_100068A4C(4.8751e-34);
      v0[27] = sub_10001227C((uint64_t)(v0 + 23), 0xCuLL, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006875C(v6, (void (*)(void))type metadata accessor for CachedSession);
      sub_100068AEC((void *)&_mh_execute_header, v7, v8, "submission activity cancelled while session %{public}s was in-flight; some events will not be sent");
      swift_arrayDestroy();
      sub_100009474();
    }
    else
    {
      uint64_t v20 = v0[42];
      uint64_t v21 = v0[39];
      uint64_t v23 = v0[37];
      uint64_t v22 = v0[38];
      sub_1000686FC(v20, v0[40], (void (*)(void))type metadata accessor for CachedSession);
      sub_1000686FC(v20, v21, (void (*)(void))type metadata accessor for CachedSession);
      sub_1000686FC(v20, v22, (void (*)(void))type metadata accessor for CachedSession);
      sub_1000686FC(v20, v23, (void (*)(void))type metadata accessor for CachedSession);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v28 = (uint64_t *)v0[39];
      uint64_t v27 = v0[40];
      uint64_t v29 = v0[37];
      uint64_t v30 = v0[38];
      if (!v26)
      {
        sub_10006875C(v0[40], (void (*)(void))type metadata accessor for CachedSession);
        sub_10006875C((uint64_t)v28, (void (*)(void))type metadata accessor for CachedSession);
        sub_10006875C(v30, (void (*)(void))type metadata accessor for CachedSession);
        sub_10006875C(v29, (void (*)(void))type metadata accessor for CachedSession);

        goto LABEL_18;
      }
      os_log_type_t type = v25;
      uint64_t v54 = v0[37];
      uint64_t v31 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136446978;
      os_log_t log = v24;
      uint64_t v58 = v56;
      uint64_t v33 = *(void *)(v27 + 48);
      unint64_t v32 = *(void *)(v27 + 56);
      swift_bridgeObjectRetain();
      v0[23] = sub_10001227C(v33, v32, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006875C(v27, (void (*)(void))type metadata accessor for CachedSession);
      *(_WORD *)(v31 + 12) = 2082;
      uint64_t v34 = *v28;
      unint64_t v35 = v28[1];
      swift_bridgeObjectRetain();
      v0[24] = sub_10001227C(v34, v35, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006875C((uint64_t)v28, (void (*)(void))type metadata accessor for CachedSession);
      *(_WORD *)(v31 + 22) = 2082;
      uint64_t v36 = *(void *)(v30 + 16);
      unint64_t v37 = *(void *)(v30 + 24);
      swift_bridgeObjectRetain();
      v0[25] = sub_10001227C(v36, v37, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006875C(v30, (void (*)(void))type metadata accessor for CachedSession);
      *(_WORD *)(v31 + 32) = 2082;
      uint64_t v38 = *(void *)(v54 + 32);
      unint64_t v39 = *(void *)(v54 + 40);
      swift_bridgeObjectRetain();
      v0[26] = sub_10001227C(v38, v39, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006875C(v54, (void (*)(void))type metadata accessor for CachedSession);
      uint64_t v3 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "no backend available for session %{public}s - %{public}s:%{public}s:%{public}s", (uint8_t *)v31, 0x2Au);
      swift_arrayDestroy();
      sub_100009474();
    }
    sub_100009474();
LABEL_15:

    goto LABEL_18;
  }
  uint64_t v9 = v0[42];
  uint64_t v10 = v0[35];
  swift_errorRelease();
  sub_1000686FC(v9, v10, (void (*)(void))type metadata accessor for CachedSession);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[35];
  if (!v13)
  {
    swift_errorRelease();
    sub_10006875C(v14, (void (*)(void))type metadata accessor for CachedSession);
    swift_errorRelease();
    swift_errorRelease();

    goto LABEL_19;
  }
  uint64_t v15 = swift_slowAlloc();
  uint64_t v58 = swift_slowAlloc();
  *(_DWORD *)uint64_t v15 = 136446466;
  uint64_t v16 = *(void *)(v14 + 48);
  unint64_t v17 = *(void *)(v14 + 56);
  swift_bridgeObjectRetain();
  v0[15] = sub_10001227C(v16, v17, &v58);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_10006875C(v14, (void (*)(void))type metadata accessor for CachedSession);
  *(_WORD *)(v15 + 12) = 2082;
  swift_getErrorValue();
  uint64_t v18 = Error.localizedDescription.getter();
  v0[18] = sub_10001227C(v18, v19, &v58);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v11, v12, "failed to process events for session %{public}s: %{public}s", (uint8_t *)v15, 0x16u);
  sub_100068A98();
  sub_100009474();
  sub_100009474();

LABEL_18:
  swift_errorRelease();
LABEL_19:
  uint64_t v49 = qword_1000AF3A0;
  v0[62] = qword_1000AF3A0;
  if (v49)
  {
    uint64_t v50 = v0[42];
    uint64_t v51 = *(void *)(v50 + 48);
    uint64_t v52 = *(void *)(v50 + 56);
    v0[63] = v52;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v53 = (void *)swift_task_alloc();
    v0[64] = v53;
    void *v53 = v0;
    v53[1] = sub_100064EEC;
    sub_1000429B8(v51, v52);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100066480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v24;
  a22 = v25;
  sub_100007DB0();
  a20 = v23;
  sub_10006875C(v23[42], (void (*)(void))type metadata accessor for CachedSession);
  uint64_t v27 = v23[49];
  uint64_t v26 = v23[50];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v28, v29))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    if (!v26) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v22 = 12;
  sub_100014490();
  a10 = v26;
  a9 = v27;
  a11 = sub_1000094B4();
  sub_10001A95C(4.8149e-34);
  uint64_t v30 = Error.localizedDescription.getter();
  uint64_t v32 = sub_10001227C(v30, v31, &a11);
  sub_10001A81C(v32);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  sub_10001640C((void *)&_mh_execute_header, v33, v34, "error running submission: %s");
  swift_arrayDestroy();
  sub_100009474();
  sub_100009474();

  swift_errorRelease();
  if (v26)
  {
LABEL_5:
    uint64_t v35 = v23[33];
    uint64_t v36 = type metadata accessor for TaskPriority();
    sub_1000094CC(v36);
    unint64_t v37 = (void *)swift_allocObject();
    sub_10000A4AC(v37);
    sub_10000FF80(v35, (uint64_t)&unk_1000A8140, v22);
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_6:
  sub_100019D10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100016650();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000666A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10000E6A4();
  a19 = v21;
  a20 = v22;
  sub_100011540();
  a18 = v20;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (_DWORD *)sub_100014490();
    a9 = sub_1000094B4();
    *uint64_t v25 = 136446210;
    swift_getErrorValue();
    uint64_t v26 = Error.localizedDescription.getter();
    *(void *)(v20 + 240) = sub_10001227C(v26, v27, &a9);
    sub_10000E704();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001AAA8((void *)&_mh_execute_header, v23, v28, "failed to cleanup DB: %{public}s");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_bridgeObjectRelease();
  sub_100019D10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100016198();
  return v30(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12);
}

uint64_t type metadata accessor for SubmitEventsActivity()
{
  return self;
}

uint64_t sub_1000668A4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100068A0C;
  return sub_1000640EC();
}

uint64_t sub_100066930()
{
  sub_100062D54();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100066960()
{
  return 0x74696D627573;
}

unint64_t sub_100066974(uint64_t a1)
{
  unint64_t result = sub_10006699C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10006699C()
{
  unint64_t result = qword_1000A8130;
  if (!qword_1000A8130)
  {
    type metadata accessor for SubmitEventsActivity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1000A8130);
  }
  return result;
}

uint64_t sub_1000669E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100066A08, 0, 0);
}

uint64_t sub_100066A08()
{
  sub_1000094A8();
  uint64_t v4 = qword_1000AF3B0;
  *(void *)(v0 + 32) = qword_1000AF3B0;
  if (v4)
  {
    swift_retain();
    sub_10000E934();
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100066A80()
{
  sub_1000094A8();
  sub_10000A630(*(void *)(v0 + 16), *(void *)(v0 + 24), 0);
  swift_release();
  sub_10000E83C();
  return v1();
}

uint64_t sub_100066AE8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100066B28()
{
  sub_100068A70();
  sub_10001422C();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000535FC;
  sub_100018010();
  return sub_1000669E8(v2, v3, v4, v5, v6);
}

unint64_t sub_100066BDC(unint64_t result)
{
  if (result >= 2) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t sub_100066BEC()
{
  unint64_t result = qword_1000A8150;
  if (!qword_1000A8150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8150);
  }
  return result;
}

uint64_t sub_100066C38(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A6740);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100066C98(uint64_t a1)
{
  sub_100016CE0(&qword_1000A8168);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = result + 64;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = (long long *)(*(void *)(a1 + 56) + 48 * i);
    *(_OWORD *)uint64_t v26 = v18[1];
    *(_OWORD *)&unsigned char v26[16] = v18[2];
    long long v27 = *v18;
    long long v28 = *(_OWORD *)&v26[8];
    uint64_t v29 = *(void *)&v26[24];
    swift_bridgeObjectRetain();
    sub_100019B14((uint64_t)&v27);
    sub_100019B14((uint64_t)&v28);
    sub_100005B44((uint64_t)&v29);
    Class v19 = sub_10004D240();
    sub_100009758((uint64_t)&v27);
    sub_100009758((uint64_t)&v28);
    uint64_t result = sub_100005B18((uint64_t)&v29);
    *(void *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v20 = (void *)(v3[6] + 16 * i);
    void *v20 = v17;
    v20[1] = v16;
    *(void *)(v3[7] + 8 * i) = v19;
    uint64_t v21 = v3[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v23;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v25) {
      return (uint64_t)v3;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v25) {
        return (uint64_t)v3;
      }
      unint64_t v13 = *(void *)(v24 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v25) {
          return (uint64_t)v3;
        }
        unint64_t v13 = *(void *)(v24 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v25) {
    return (uint64_t)v3;
  }
  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v25) {
      return (uint64_t)v3;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100066EF4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  type metadata accessor for CachedSession(0);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 24) = v5;
  sub_1000686FC(a1, v5, (void (*)(void))type metadata accessor for CachedSession);
  return _swift_task_switch(sub_100066FAC, a2, 0);
}

uint64_t sub_100066FAC()
{
  sub_1000113BC();
  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v3 = *v1;
  unint64_t v2 = v1[1];
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000182FC(v3, v2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  v0[4] = v6;
  if (v6)
  {
    uint64_t v7 = v0[2];
    v0[5] = v4;
    uint64_t v8 = *(void *)(v7 + 128);
    v0[6] = v8;
    return _swift_task_switch(sub_1000670B0, v8, 0);
  }
  else
  {
    sub_10006875C(v0[3], (void (*)(void))type metadata accessor for CachedSession);
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
    return v9(3);
  }
}

uint64_t sub_1000670B0()
{
  sub_1000113BC();
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100005D04();
  *(unsigned char *)(v0 + 64) = v2 & 1;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100067138, v1, 0);
}

uint64_t sub_100067138()
{
  sub_1000094A8();
  if (*(unsigned char *)(v0 + 64))
  {
    sub_10006875C(*(void *)(v0 + 24), (void (*)(void))type metadata accessor for CachedSession);
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v1(3);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100067228;
    return sub_1000332DC();
  }
}

uint64_t sub_100067228()
{
  sub_1000094A8();
  sub_100017D58();
  sub_10000935C();
  *char v2 = v1;
  uint64_t v3 = *v0;
  sub_10000935C();
  void *v4 = v3;
  *(unsigned char *)(v6 + 65) = v5;
  swift_task_dealloc();
  sub_10000E934();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10006730C()
{
  sub_1000094A8();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 65);
  sub_10006875C(*(void *)(v0 + 24), (void (*)(void))type metadata accessor for CachedSession);
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100067390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v13 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  uint64_t v14 = sub_100009374(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  Class v19 = (char *)v33 - v18;
  type metadata accessor for SessionConfiguration.Backend(0);
  sub_10000948C();
  __chkstk_darwin(v20);
  sub_100013F4C();
  v34[3] = type metadata accessor for Session(0);
  v34[4] = &off_1000A1450;
  v34[0] = a1;
  sub_1000686FC(a2, v6, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v21 = *(_OWORD *)(v6 + 16);
    long long v35 = *(_OWORD *)v6;
    long long v36 = v21;
    uint64_t v37 = *(void *)(v6 + 32);
    sub_10000F43C((uint64_t)v34, (uint64_t)v33);
    type metadata accessor for BackendTTR();
    BOOL v22 = (void *)swift_allocObject();
    sub_100016494((uint64_t)v33, v33[3]);
    sub_100015230();
    __chkstk_darwin(v23);
    int64_t v25 = (uint64_t *)((char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v26 + 16))(v25);
    uint64_t v27 = *v25;
    swift_retain();
    uint64_t v28 = (uint64_t)sub_100068124(&v35, v27, v22);
    sub_10001610C((uint64_t)v33);
  }
  else
  {
    sub_100016F98(v6, (uint64_t)v19, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
    sub_10000F43C((uint64_t)v34, (uint64_t)&v35);
    sub_1000686FC((uint64_t)v19, (uint64_t)v17, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100048A00(a5 & 1, v33);
    type metadata accessor for BackendHTTP();
    uint64_t v29 = swift_allocObject();
    sub_100016494((uint64_t)&v35, *((uint64_t *)&v36 + 1));
    sub_100015230();
    __chkstk_darwin(v30);
    sub_100013F4C();
    (*(void (**)(uint64_t))(v31 + 16))(v6);
    uint64_t v28 = sub_100067AE4(*(void **)v6, a6, v17, a3, a4, (uint64_t)v33, v29);
    sub_10001610C((uint64_t)&v35);
    sub_10006875C((uint64_t)v19, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
  }
  sub_10001610C((uint64_t)v34);
  return v28;
}

uint64_t sub_1000676F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (uint64_t *)((char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v35 - v16;
  uint64_t v18 = type metadata accessor for SessionConfiguration.Backend(0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[3] = type metadata accessor for CachedSession(0);
  v36[4] = (uint64_t)&off_1000A13F8;
  long long v21 = sub_100028EB8(v36);
  sub_1000686FC(a1, (uint64_t)v21, (void (*)(void))type metadata accessor for CachedSession);
  sub_1000686FC(a2, (uint64_t)v20, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v22 = *((_OWORD *)v20 + 1);
    long long v37 = *(_OWORD *)v20;
    long long v38 = v22;
    uint64_t v39 = *((void *)v20 + 4);
    sub_10000F43C((uint64_t)v36, (uint64_t)v35);
    type metadata accessor for BackendTTR();
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = sub_100016494((uint64_t)v35, v35[3]);
    __chkstk_darwin(v24);
    uint64_t v26 = (char *)v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v27 + 16))(v26);
    uint64_t v28 = (uint64_t)sub_1000683D8(&v37, (uint64_t)v26, v23);
    sub_10001610C((uint64_t)v35);
  }
  else
  {
    sub_100016F98((uint64_t)v20, (uint64_t)v17, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
    sub_10000F43C((uint64_t)v36, (uint64_t)&v37);
    sub_1000686FC((uint64_t)v17, (uint64_t)v15, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100048A00(a5 & 1, v35);
    type metadata accessor for BackendHTTP();
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = sub_100016494((uint64_t)&v37, *((uint64_t *)&v38 + 1));
    __chkstk_darwin(v30);
    uint64_t v32 = (char *)v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v33 + 16))(v32);
    uint64_t v28 = sub_100067DC8((uint64_t)v32, a6, v15, a3, a4, (uint64_t)v35, v29);
    sub_10001610C((uint64_t)&v37);
    sub_10006875C((uint64_t)v17, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
  }
  sub_10001610C((uint64_t)v36);
  return v28;
}

uint64_t sub_100067AE4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_defaultActor_initialize();
  uint64_t v14 = (void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
  *uint64_t v14 = a4;
  v14[1] = a5;
  *(void *)(a7 + 112) = a2;
  uint64_t v15 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
  uint64_t v16 = (char *)a3 + v15[6];
  uint64_t v17 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_url;
  uint64_t v18 = type metadata accessor for URL();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v17, v16, v18);
  uint64_t v36 = a6;
  sub_10000F43C(a6, a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target);
  uint64_t v19 = a1[15];
  uint64_t v20 = a1[25];
  uint64_t v34 = a1[24];
  uint64_t v35 = a1[14];
  uint64_t v21 = a1[27];
  uint64_t v22 = a1[29];
  uint64_t v32 = a1[28];
  uint64_t v33 = a1[26];
  char v31 = *((unsigned char *)a3 + v15[8]);
  uint64_t v23 = qword_1000A6080;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v23 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 == 1)
  {
    if (qword_1000A6098 != -1) {
      swift_once();
    }
    int v24 = byte_1000AF3D9;
    swift_release();
    if (v24) {
      uint64_t v25 = 5;
    }
    else {
      uint64_t v25 = 1;
    }
  }
  else
  {
    swift_release();
    uint64_t v25 = 0;
  }
  sub_10001610C(v36);
  uint64_t v26 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders;
  *(void *)uint64_t v26 = v25;
  *(void *)(v26 + 8) = v34;
  *(void *)(v26 + 16) = v20;
  *(void *)(v26 + 24) = v33;
  *(void *)(v26 + 32) = v21;
  *(void *)(v26 + 40) = v32;
  *(void *)(v26 + 48) = v22;
  *(unsigned char *)(v26 + 56) = v31;
  *(void *)(v26 + 64) = v35;
  *(void *)(v26 + 72) = v19;
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters) = *(void *)((char *)a3 + v15[7]);
  uint64_t v27 = a3[1];
  uint64_t v28 = (void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  *uint64_t v28 = *a3;
  v28[1] = v27;
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories) = *(void *)((char *)a3 + v15[9]);
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories) = *(void *)((char *)a3 + v15[10]);
  char v29 = *((unsigned char *)a3 + v15[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006875C((uint64_t)a3, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
  *(unsigned char *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_skipLogging) = v29;
  swift_release();
  return a7;
}

uint64_t sub_100067DC8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for CachedSession(0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (uint64_t *)((char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100016F98(a1, (uint64_t)v16, (void (*)(void))type metadata accessor for CachedSession);
  swift_defaultActor_initialize();
  uint64_t v17 = (void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
  *uint64_t v17 = a4;
  v17[1] = a5;
  *(void *)(a7 + 112) = a2;
  uint64_t v18 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
  uint64_t v19 = (char *)a3 + v18[6];
  uint64_t v20 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_url;
  uint64_t v21 = type metadata accessor for URL();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v20, v19, v21);
  uint64_t v44 = a6;
  sub_10000F43C(a6, a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target);
  uint64_t v22 = v16[6];
  uint64_t v23 = v16[7];
  uint64_t v24 = v16[1];
  uint64_t v42 = *v16;
  uint64_t v43 = v22;
  uint64_t v25 = v16[2];
  uint64_t v26 = v16[3];
  uint64_t v27 = v16[5];
  uint64_t v40 = v16[4];
  uint64_t v41 = v25;
  HIDWORD(v39) = *((unsigned __int8 *)a3 + v18[8]);
  uint64_t v28 = qword_1000A6080;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 == 1)
  {
    if (qword_1000A6098 != -1) {
      swift_once();
    }
    int v29 = byte_1000AF3D9;
    swift_release();
    if (v29) {
      uint64_t v30 = 5;
    }
    else {
      uint64_t v30 = 1;
    }
  }
  else
  {
    swift_release();
    uint64_t v30 = 0;
  }
  sub_10001610C(v44);
  uint64_t v31 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders;
  uint64_t v32 = v42;
  *(void *)uint64_t v31 = v30;
  *(void *)(v31 + 8) = v32;
  uint64_t v33 = v41;
  *(void *)(v31 + 16) = v24;
  *(void *)(v31 + 24) = v33;
  uint64_t v34 = v40;
  *(void *)(v31 + 32) = v26;
  *(void *)(v31 + 40) = v34;
  *(void *)(v31 + 48) = v27;
  *(unsigned char *)(v31 + 56) = BYTE4(v39);
  *(void *)(v31 + 64) = v43;
  *(void *)(v31 + 72) = v23;
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters) = *(void *)((char *)a3 + v18[7]);
  uint64_t v35 = a3[1];
  uint64_t v36 = (void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  *uint64_t v36 = *a3;
  v36[1] = v35;
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories) = *(void *)((char *)a3 + v18[9]);
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories) = *(void *)((char *)a3 + v18[10]);
  char v37 = *((unsigned char *)a3 + v18[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006875C((uint64_t)a3, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
  *(unsigned char *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_skipLogging) = v37;
  sub_10006875C((uint64_t)v16, (void (*)(void))type metadata accessor for CachedSession);
  return a7;
}

void *sub_100068124(void *a1, uint64_t a2, void *a3)
{
  swift_defaultActor_initialize();
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v22 = a1[4];
  uint64_t v8 = v22;
  uint64_t v23 = v6;
  a3[14] = v6;
  a3[15] = v8;
  uint64_t v21 = v7;
  sub_100005B44((uint64_t)&v23);
  sub_100005B44((uint64_t)&v22);
  uint64_t v9 = sub_100066C98(v7);
  uint64_t v10 = a1[1];
  a3[18] = v9;
  a3[19] = v10;
  sub_100005B18((uint64_t)&v21);
  sub_100005B18((uint64_t)&v23);
  sub_100005B18((uint64_t)&v22);
  uint64_t v11 = *(void *)(a2 + 200);
  a3[16] = *(void *)(a2 + 192);
  a3[17] = v11;
  uint64_t v12 = qword_1000A6080;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 == 1)
  {
    if (qword_1000A60B0 != -1) {
      swift_once();
    }
    if (off_1000AF3F8)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR____TtC13rtcreportingd7Session_user + 4)) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = *(unsigned int *)(a2 + OBJC_IVAR____TtC13rtcreportingd7Session_user);
      }
      a3[20] = (id)off_1000AF3F8(v13);
      if (qword_1000A60B8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100012884(v14, (uint64_t)qword_1000AF400);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_20;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      uint64_t v18 = "initialized RTCTTR framework";
    }
    else
    {
      a3[20] = 0;
      if (qword_1000A60B8 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100012884(v19, (uint64_t)qword_1000AF400);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_20;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      uint64_t v18 = "failed to initialize RTCTTR framework";
    }
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
    swift_slowDealloc();
LABEL_20:
    swift_release();

    return a3;
  }
  a3[20] = 0;
  swift_release();
  return a3;
}

void *sub_1000683D8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for CachedSession(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100016F98(a2, (uint64_t)v8, (void (*)(void))type metadata accessor for CachedSession);
  swift_defaultActor_initialize();
  uint64_t v10 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v27 = a1[4];
  uint64_t v11 = v27;
  uint64_t v28 = v9;
  a3[14] = v9;
  a3[15] = v11;
  uint64_t v26 = v10;
  sub_100005B44((uint64_t)&v28);
  sub_100005B44((uint64_t)&v27);
  uint64_t v12 = sub_100066C98(v10);
  uint64_t v13 = a1[1];
  a3[18] = v12;
  a3[19] = v13;
  sub_100005B18((uint64_t)&v26);
  sub_100005B18((uint64_t)&v28);
  sub_100005B18((uint64_t)&v27);
  uint64_t v14 = v8[1];
  a3[16] = *v8;
  a3[17] = v14;
  uint64_t v15 = qword_1000A6080;
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 == 1)
  {
    if (qword_1000A60B0 != -1) {
      swift_once();
    }
    if (off_1000AF3F8)
    {
      os_log_type_t v16 = (unsigned int *)((char *)v8 + *(int *)(v6 + 36));
      if (*((unsigned char *)v16 + 4)) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *v16;
      }
      a3[20] = (id)off_1000AF3F8(v17);
      if (qword_1000A60B8 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100012884(v18, (uint64_t)qword_1000AF400);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v19, v20)) {
        goto LABEL_20;
      }
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      uint64_t v22 = "initialized RTCTTR framework";
    }
    else
    {
      a3[20] = 0;
      if (qword_1000A60B8 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100012884(v23, (uint64_t)qword_1000AF400);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v19, v20)) {
        goto LABEL_20;
      }
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      uint64_t v22 = "failed to initialize RTCTTR framework";
    }
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v22, v21, 2u);
    swift_slowDealloc();
LABEL_20:

    goto LABEL_21;
  }
  a3[20] = 0;
LABEL_21:
  sub_10006875C((uint64_t)v8, (void (*)(void))type metadata accessor for CachedSession);
  return a3;
}

uint64_t sub_1000686FC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000948C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_10006875C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000948C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for SubmissionError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for SubmissionError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *assignWithCopy for SubmissionError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF) {
      swift_errorRetain();
    }
    *a1 = v3;
  }
  else if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain();
    *a1 = v3;
    swift_errorRelease();
  }
  return a1;
}

void *initializeWithTake for SubmissionError(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for SubmissionError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SubmissionError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SubmissionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1000689BC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000689D4(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SubmissionError()
{
  return &type metadata for SubmissionError;
}

void sub_100068A10()
{
  sub_10001ED64();
}

uint64_t sub_100068A34@<X0>(uint64_t a1@<X8>)
{
  return v2 + ((v1 + 32) & ~v1) + *(void *)(v3 + 72) * a1;
}

uint64_t sub_100068A4C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100068A98()
{
  return swift_arrayDestroy();
}

uint64_t sub_100068AB8()
{
  uint64_t result = *(void *)(v3 + 248);
  *(void *)(v1 + 16) = v4;
  uint64_t v7 = v1 + 16 * v5;
  *(void *)(v7 + 32) = v0;
  *(void *)(v7 + 40) = v2;
  return result;
}

uint64_t sub_100068ACC()
{
  return swift_task_alloc();
}

void sub_100068AEC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_100068B0C()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  byte_1000AF3C8 = result;
  return result;
}

id sub_100068B34()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  id result = sub_10006AF24(0xD000000000000016, 0x800000010008AB90);
  if (result) {
    qword_1000AF3D0 = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_100068B8C()
{
  if (qword_1000A6088 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1000AF3D0;
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned __int8 v2 = [v0 BOOLForKey:v1];

  byte_1000AF3D8 = v2;
}

void sub_100068C38()
{
  if (qword_1000A6088 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1000AF3D0;
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned __int8 v2 = [v0 BOOLForKey:v1];

  if (v2)
  {
    BOOL v3 = 1;
  }
  else
  {
    id v4 = (id)qword_1000AF3D0;
    NSString v5 = sub_100019D34();
    id v6 = [v4 integerForKey:v5];

    BOOL v3 = v6 == (id)5;
  }
  byte_1000AF3D9 = v3;
}

void sub_100068D2C()
{
  if (qword_1000A6080 != -1) {
    swift_once();
  }
  if (byte_1000AF3C8 == 1)
  {
    if (qword_1000A6088 != -1) {
      swift_once();
    }
    id v0 = (id)qword_1000AF3D0;
    NSString v1 = String._bridgeToObjectiveC()();
    unsigned __int8 v2 = [v0 BOOLForKey:v1];
  }
  else
  {
    unsigned __int8 v2 = 0;
  }
  byte_1000AF3DA = v2;
}

void sub_100068E20()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100014C1C();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  NSString v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v9 = String._bridgeToObjectiveC()();
  _CFPreferencesSetBackupDisabled();

  uint64_t v10 = type metadata accessor for TaskPriority();
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v8, 1, 1, v10);
  type metadata accessor for MainActor();
  uint64_t v11 = static MainActor.shared.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = &protocol witness table for MainActor;
  sub_10006BBE8((uint64_t)v8, (uint64_t)&unk_1000A8190, v12);
  swift_release();
  uint64_t v40 = &_swiftEmptySetSingleton;
  if (qword_1000A6090 != -1) {
    swift_once();
  }
  if (byte_1000AF3D8 == 1)
  {
    sub_10005B84C((Swift::Int *)&v38, 0xD000000000000011, 0x800000010008AB70);
    swift_bridgeObjectRelease();
  }
  if (qword_1000A6088 != -1) {
    swift_once();
  }
  id v13 = (id)qword_1000AF3D0;
  NSString v14 = String._bridgeToObjectiveC()();
  unsigned int v15 = [v13 BOOLForKey:v14];

  if (v15)
  {
    sub_10005B84C((Swift::Int *)&v38, 0x50656C6261736964, 0xEB0000000054534FLL);
    swift_bridgeObjectRelease();
  }
  id v16 = (id)qword_1000AF3D0;
  NSString v17 = sub_100019D34();
  id v18 = [v16 valueForKey:v17];

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100021388((uint64_t)&v38);
    sub_100015248(0xD000000000000013, (uint64_t)"environmentOverride");
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
    sub_100021388((uint64_t)&v38);
  }
  if (qword_1000A6098 != -1) {
    swift_once();
  }
  if (byte_1000AF3D9 == 1)
  {
    sub_10005B84C((Swift::Int *)&v38, 0x6976654474736574, 0xEA00000000006563);
    swift_bridgeObjectRelease();
  }
  id v19 = (id)qword_1000AF3D0;
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v19 valueForKey:v20];

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100021388((uint64_t)&v38);
    sub_10005B84C((Swift::Int *)&v38, 0x436465776F6C6C61, 0xEE0073746E65696CLL);
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
    sub_100021388((uint64_t)&v38);
  }
  if (qword_1000A60A0 != -1) {
    swift_once();
  }
  if (byte_1000AF3DA == 1)
  {
    sub_100015248(0xD000000000000014, (uint64_t)"ignoreCacheSizeLimit");
    swift_bridgeObjectRelease();
  }
  Logger.init()();
  uint64_t v22 = v40;
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    swift_slowAlloc();
    uint64_t v37 = sub_10001672C();
    MEMORY[0xD000000000000011] = 136315138;
    if (v22[2])
    {
      *(void *)&long long v38 = 0x6769666E6F632820;
      *((void *)&v38 + 1) = 0xEA0000000000203ALL;
      uint64_t v36 = v22;
      swift_bridgeObjectRetain();
      sub_100016CE0(&qword_1000A8198);
      sub_10006B130();
      uint64_t v35 = v5;
      uint64_t v27 = v2;
      uint64_t v28 = v0;
      sub_1000289E8();
      uint64_t v29 = Sequence<>.joined(separator:)();
      uint64_t v31 = v30;
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);
      uint64_t v0 = v28;
      uint64_t v2 = v27;
      NSString v5 = v35;
      swift_bridgeObjectRelease();
      v33._uint64_t countAndFlagsBits = 41;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      unint64_t v26 = *((void *)&v38 + 1);
      uint64_t v25 = v38;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0xE000000000000000;
    }
    *(void *)&long long v38 = sub_10001227C(v25, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "starting rtcreportingd%s", (uint8_t *)0xD000000000000011, 0xCu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  dispatch_main();
}

uint64_t sub_1000694C4()
{
  uint64_t v1 = type metadata accessor for URL();
  v0[9] = v1;
  v0[10] = *(void *)(v1 - 8);
  v0[11] = swift_task_alloc();
  v0[12] = swift_task_alloc();
  type metadata accessor for SQLiteDB.Location();
  v0[13] = swift_task_alloc();
  v0[14] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v0[15] = v2;
  v0[16] = *(void *)(v2 - 8);
  v0[17] = swift_task_alloc();
  v0[18] = swift_task_alloc();
  v0[19] = type metadata accessor for MainActor();
  v0[20] = static MainActor.shared.getter();
  type metadata accessor for TransparencyLog();
  swift_allocObject();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[21] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000696C0;
  return sub_10002C69C();
}

uint64_t sub_1000696C0(uint64_t a1)
{
  uint64_t v4 = *v2;
  sub_100015EE4();
  uint64_t *v5 = v4;
  uint64_t *v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = sub_10006995C;
  }
  else
  {
    *(void *)(v4 + 176) = a1;
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = sub_100069874;
  }
  return _swift_task_switch(v8, v6, v7);
}

uint64_t sub_100069874()
{
  sub_1000094A8();
  qword_1000AF3C0 = v0[22];
  swift_release();
  v0[23] = type metadata accessor for DiskCache();
  swift_allocObject();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[24] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100069A40;
  return sub_1000411A8(0);
}

uint64_t sub_10006995C()
{
  sub_1000094A8();
  qword_1000AF3C0 = 0;
  swift_release();
  *(void *)(v0 + 184) = type metadata accessor for DiskCache();
  swift_allocObject();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100069A40;
  return sub_1000411A8(0);
}

uint64_t sub_100069A40(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  sub_100015EE4();
  void *v5 = v4;
  void *v5 = *v2;
  v4[25] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    v4[27] = v6;
    v4[28] = v7;
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    uint64_t v10 = sub_100069DB4;
    uint64_t v11 = v8;
  }
  else
  {
    v4[26] = a1;
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v14 = v13;
    uint64_t v10 = sub_100069C14;
    uint64_t v11 = v12;
    uint64_t v9 = v14;
  }
  return _swift_task_switch(v10, v11, v9);
}

uint64_t sub_100069C14()
{
  uint64_t v1 = v0[26];
  v0[29] = v1;
  qword_1000AF3A0 = v1;
  swift_retain();
  swift_release();
  BOOL v3 = qword_1000AF3C0 == 0;
  uint64_t v2 = qword_1000AF3A0;
  v0[30] = qword_1000AF3C0;
  v0[31] = v2;
  BOOL v3 = v3 || v2 == 0;
  if (v3)
  {
    Logger.init()();
    uint64_t v4 = (void *)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (sub_100016884(v5))
    {
      uint64_t v6 = (_WORD *)sub_1000113C8();
      sub_1000142DC(v6);
      sub_100014DA8((void *)&_mh_execute_header, v7, v8, "reporting disabled due to startup failure");
      sub_100009474();
    }

    uint64_t v9 = sub_100016284();
    v10(v9);
  }
  type metadata accessor for SubmissionCoordinator();
  swift_allocObject();
  uint64_t v11 = sub_100048858();
  sub_100017C84(v11);
  type metadata accessor for SessionCoordinator();
  swift_allocObject();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[32] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10006A2B8;
  return sub_100039A28();
}

void sub_100069DB4()
{
  uint64_t v32 = v0;
  *(void *)(v0 + 40) = *(void *)(v0 + 200);
  swift_errorRetain();
  sub_100016CE0(&qword_1000A67E8);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 360) & 1) == 0)
  {
    Logger.init()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 136);
    uint64_t v6 = *(uint8_t **)(v0 + 120);
    if (v3)
    {
      uint64_t v30 = *(void *)(v0 + 136);
      swift_slowAlloc();
      uint64_t v31 = sub_10001672C();
      *(_DWORD *)uint64_t v6 = 136446210;
      swift_getErrorValue();
      uint64_t v7 = Error.localizedDescription.getter();
      *(void *)(v0 + 64) = sub_10001227C(v7, v8, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "failed to open database file: %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();

      (*(void (**)(uint64_t, uint8_t *))(v5 + 8))(v30, v6);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint8_t *))(v5 + 8))(v4, v6);
    }
  }
  sub_100040BE0(0, *(void *)(v0 + 112));
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 72);
  sub_10001F924(*(void *)(v0 + 112), v11);
  int v13 = _s10RTCUtility9XPCObjectOwet_0(v11, 1, v12);
  if (v13 == 1)
  {
    sub_10006B184(*(void *)(v0 + 104));
    _assertionFailure(_:_:file:line:flags:)();
    sub_1000170E4();
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 80);
    (*(void (**)(void, void, uint64_t))(v16 + 32))(*(void *)(v0 + 96), *(void *)(v0 + 104), v15);
    id v17 = [self defaultManager];
    URL.deletingLastPathComponent()();
    URL._bridgeToObjectiveC()(v18);
    NSString v20 = v19;
    id v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    *(void *)(v0 + 320) = v21;
    *(void *)(v0 + 328) = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v21(v14, v15);
    *(void *)(v0 + 48) = 0;
    LODWORD(v14) = [v17 removeItemAtURL:v20 error:v0 + 48];

    id v22 = *(id *)(v0 + 48);
    if (!v14)
    {
      unint64_t v26 = v22;
      uint64_t v27 = *(void *)(v0 + 112);
      uint64_t v28 = *(void *)(v0 + 96);
      uint64_t v29 = *(void *)(v0 + 72);
      swift_release();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      v21(v28, v29);
      sub_10006B184(v27);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000170E4();
      __asm { BRAA            X1, X16 }
    }
    swift_allocObject();
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10006A868;
    sub_1000170E4();
    sub_1000411A8(v24);
  }
}

uint64_t sub_10006A2B8()
{
  sub_100017D58();
  os_log_type_t v2 = v1;
  uint64_t v3 = *v0;
  sub_100015EE4();
  void *v4 = v3;
  v2[33] = v5;
  swift_task_dealloc();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[34] = v6;
  v2[35] = v7;
  return _swift_task_switch(sub_10006A404, v6, v7);
}

uint64_t sub_10006A404()
{
  if (v0[30]) {
    BOOL v1 = v0[31] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  char v2 = v1;
  qword_1000AF3B0 = v0[33];
  swift_release();
  type metadata accessor for Listener();
  swift_allocObject();
  qword_1000AF3A8 = sub_1000757DC(v2);
  swift_release();
  if (qword_1000A6060 != -1) {
    swift_once();
  }
  unint64_t v3 = qword_1000AF370;
  v0[36] = qword_1000AF370;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v0[37] = v4;
  if (!v4)
  {
    sub_100017518();
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000160C0();
    __asm { BRAA            X1, X16 }
  }
  if (v4 < 1) {
    __break(1u);
  }
  v0[38] = 0;
  uint64_t v5 = v0[36];
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 32);
    swift_retain();
  }
  v0[39] = v6;
  sub_1000160C0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10006A648()
{
  sub_1000094A8();
  if (v0[30]) {
    BOOL v1 = v0[31] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  char v2 = v1;
  sub_100055654(v2);
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[35];
  return _swift_task_switch(sub_10006A6E4, v3, v4);
}

uint64_t sub_10006A6E4()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[37];
  swift_release();
  if (v1 + 1 == v2)
  {
    sub_100017518();
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000160C0();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v5 = v0[38] + 1;
  v0[38] = v5;
  uint64_t v6 = v0[36];
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 8 * v5 + 32);
    swift_retain();
  }
  v0[39] = v7;
  sub_1000160C0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10006A868(uint64_t a1)
{
  sub_100017D58();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_100015EE4();
  *uint64_t v7 = v6;
  v5[43] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = v5[27];
    uint64_t v9 = v5[28];
    uint64_t v10 = sub_10006AB54;
  }
  else
  {
    v5[44] = a1;
    uint64_t v8 = v5[27];
    uint64_t v9 = v5[28];
    uint64_t v10 = sub_10006A98C;
  }
  return _swift_task_switch(v10, v8, v9);
}

uint64_t sub_10006A98C()
{
  uint64_t v1 = *(void *)(v0 + 352);
  swift_errorRelease();
  uint64_t v2 = *(void *)(v0 + 112);
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 96), *(void *)(v0 + 72));
  sub_10006B184(v2);
  *(void *)(v0 + 232) = v1;
  qword_1000AF3A0 = v1;
  swift_retain();
  swift_release();
  BOOL v4 = qword_1000AF3C0 == 0;
  uint64_t v3 = qword_1000AF3A0;
  *(void *)(v0 + 240) = qword_1000AF3C0;
  *(void *)(v0 + 248) = v3;
  BOOL v4 = v4 || v3 == 0;
  if (v4)
  {
    Logger.init()();
    uint64_t v5 = (void *)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (sub_100016884(v6))
    {
      uint64_t v7 = (_WORD *)sub_1000113C8();
      sub_1000142DC(v7);
      sub_100014DA8((void *)&_mh_execute_header, v8, v9, "reporting disabled due to startup failure");
      sub_100009474();
    }

    uint64_t v10 = sub_100016284();
    v11(v10);
  }
  type metadata accessor for SubmissionCoordinator();
  swift_allocObject();
  uint64_t v12 = sub_100048858();
  sub_100017C84(v12);
  type metadata accessor for SessionCoordinator();
  swift_allocObject();
  int v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v13;
  *int v13 = v0;
  v13[1] = sub_10006A2B8;
  return sub_100039A28();
}

uint64_t sub_10006AB54()
{
  sub_10006AD24();
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 112);
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 96), *(void *)(v0 + 72));
  sub_10006B184(v1);
  *(void *)(v0 + 232) = 0;
  qword_1000AF3A0 = 0;
  swift_release();
  BOOL v3 = qword_1000AF3C0 == 0;
  uint64_t v2 = qword_1000AF3A0;
  *(void *)(v0 + 240) = qword_1000AF3C0;
  *(void *)(v0 + 248) = v2;
  BOOL v3 = v3 || v2 == 0;
  if (v3)
  {
    Logger.init()();
    BOOL v4 = (void *)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (sub_100016884(v5))
    {
      os_log_type_t v6 = (_WORD *)sub_1000113C8();
      sub_1000142DC(v6);
      sub_100014DA8((void *)&_mh_execute_header, v7, v8, "reporting disabled due to startup failure");
      sub_100009474();
    }

    uint64_t v9 = sub_100016284();
    v10(v9);
  }
  type metadata accessor for SubmissionCoordinator();
  swift_allocObject();
  uint64_t v11 = sub_100048858();
  sub_100017C84(v11);
  type metadata accessor for SessionCoordinator();
  swift_allocObject();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10006A2B8;
  return sub_100039A28();
}

uint64_t sub_10006AD24()
{
  uint64_t v0 = (uint8_t *)type metadata accessor for Logger();
  sub_100014C1C();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  os_log_type_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    swift_slowAlloc();
    uint64_t v12 = v0;
    uint64_t v14 = sub_10001672C();
    *(_DWORD *)uint64_t v0 = 136446210;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    uint64_t v13 = sub_10001227C(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "failed to create disk cache: %{public}s", v0, 0xCu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    return (*(uint64_t (**)(char *, uint8_t *))(v2 + 8))(v5, v12);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    return (*(uint64_t (**)(char *, uint8_t *))(v2 + 8))(v5, v0);
  }
}

int main(int argc, const char **argv, const char **envp)
{
}

id sub_10006AF24(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithSuiteName:v3];

  return v4;
}

uint64_t sub_10006AF88()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006AFC0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006B06C;
  return sub_1000694C4();
}

uint64_t sub_10006B06C()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v1 = *v0;
  sub_100015EE4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

unint64_t sub_10006B130()
{
  unint64_t result = qword_1000A81A0;
  if (!qword_1000A81A0)
  {
    sub_1000286C8(&qword_1000A8198);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A81A0);
  }
  return result;
}

uint64_t sub_10006B184(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SQLiteDB.Location();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_10006B1E0@<D0>(uint64_t a1@<X2>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100014BA8(), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(a1 + 56) + 32 * v4;
    sub_1000124A8(v6, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10006B244(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_10004C218(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10006B288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100014BA8(), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10006B2DC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_1000127CC(a1, (uint64_t (*)(void))type metadata accessor for EventValue, a2);
}

uint64_t sub_10006B308()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    sub_100072C70();
  }
  else {
    LOBYTE(v0) = sub_10001A844();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_10006B380(unsigned __int8 a1, char a2)
{
  unint64_t v3 = 0x7972617262696CLL;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = a1;
  unint64_t v6 = 0x7972617262696CLL;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE300000000000000;
      unint64_t v6 = 7496054;
      break;
    case 2:
      unint64_t v6 = 0xD000000000000013;
      os_log_type_t v7 = "required_libraries";
      goto LABEL_5;
    case 3:
      unint64_t v6 = 0xD000000000000012;
      os_log_type_t v7 = "decision_server_url";
LABEL_5:
      unint64_t v4 = (unint64_t)v7 | 0x8000000000000000;
      break;
    case 4:
      unint64_t v4 = 0x8000000100088860;
      unint64_t v6 = 0xD000000000000011;
      break;
    case 5:
      unint64_t v6 = 0x69745F7261646172;
      unint64_t v4 = 0xEB00000000656C74;
      break;
    default:
      break;
  }
  unint64_t v8 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v8 = 0xE300000000000000;
      unint64_t v3 = 7496054;
      break;
    case 2:
      unint64_t v3 = 0xD000000000000013;
      unint64_t v9 = "required_libraries";
      goto LABEL_12;
    case 3:
      unint64_t v3 = 0xD000000000000012;
      unint64_t v9 = "decision_server_url";
LABEL_12:
      unint64_t v8 = (unint64_t)v9 | 0x8000000000000000;
      break;
    case 4:
      unint64_t v8 = 0x8000000100088860;
      unint64_t v3 = 0xD000000000000011;
      break;
    case 5:
      unint64_t v3 = 0x69745F7261646172;
      unint64_t v8 = 0xEB00000000656C74;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v8) {
    sub_100072C70();
  }
  else {
    char v2 = sub_10001A844();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_10006B564()
{
  uint64_t v0 = sub_10004F234();
  uint64_t v2 = v1;
  if (v0 == sub_10004F234() && v2 == v3) {
    sub_100072C70();
  }
  else {
    LOBYTE(v0) = sub_10001A844();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_10006B5DC(unsigned __int8 a1, char a2)
{
  uint64_t v3 = 0x746E65696C63;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = a1;
  unint64_t v6 = 0x746E65696C63;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE700000000000000;
      unint64_t v6 = 0x65636976726573;
      break;
    case 2:
      unint64_t v6 = sub_100072DB0();
      break;
    case 3:
      unint64_t v4 = 0xE700000000000000;
      unint64_t v6 = 0x737265746C6966;
      break;
    case 4:
      unint64_t v4 = 0xE500000000000000;
      unint64_t v6 = 0x73656C7572;
      break;
    case 5:
      unint64_t v6 = 0x656469727265766FLL;
      unint64_t v4 = 0xEC000000756E645FLL;
      break;
    case 6:
      unint64_t v6 = 0x6C625F746E657665;
      unsigned int v7 = 1818977121;
      goto LABEL_9;
    case 7:
      unint64_t v6 = 0x68775F746E657665;
      unsigned int v7 = 1818588265;
LABEL_9:
      unint64_t v4 = v7 | 0xEF74736900000000;
      break;
    default:
      break;
  }
  unint64_t v8 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v8 = 0xE700000000000000;
      uint64_t v3 = 0x65636976726573;
      break;
    case 2:
      sub_100072DDC();
      break;
    case 3:
      unint64_t v8 = 0xE700000000000000;
      uint64_t v3 = 0x737265746C6966;
      break;
    case 4:
      unint64_t v8 = 0xE500000000000000;
      uint64_t v3 = 0x73656C7572;
      break;
    case 5:
      uint64_t v3 = 0x656469727265766FLL;
      unint64_t v8 = 0xEC000000756E645FLL;
      break;
    case 6:
      uint64_t v3 = 0x6C625F746E657665;
      unsigned int v9 = 1818977121;
      goto LABEL_18;
    case 7:
      uint64_t v3 = 0x68775F746E657665;
      unsigned int v9 = 1818588265;
LABEL_18:
      unint64_t v8 = v9 | 0xEF74736900000000;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v8) {
    sub_100072C70();
  }
  else {
    char v2 = sub_10001A844();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_10006B830(unsigned __int8 a1, char a2)
{
  uint64_t v3 = 1937335659;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = a1;
  uint64_t v6 = 1937335659;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v6 = 7955819;
      break;
    case 2:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v6 = 0x7365756C6176;
      break;
    case 3:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v6 = 0x65756C6176;
      break;
    case 4:
      uint64_t v6 = 0x69726F6765746163;
      unint64_t v4 = 0xEA00000000007365;
      break;
    case 5:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v6 = 0x79726F6765746163;
      break;
    case 6:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v6 = 0x7365707974;
      break;
    case 7:
      uint64_t v6 = 1701869940;
      break;
    case 8:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v6 = 0x6E6F69746361;
      break;
    case 9:
      uint64_t v6 = 0x6F697469646E6F63;
      unint64_t v4 = 0xE90000000000006ELL;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE300000000000000;
      uint64_t v3 = 7955819;
      break;
    case 2:
      unint64_t v7 = 0xE600000000000000;
      uint64_t v3 = 0x7365756C6176;
      break;
    case 3:
      unint64_t v7 = 0xE500000000000000;
      uint64_t v3 = 0x65756C6176;
      break;
    case 4:
      uint64_t v3 = 0x69726F6765746163;
      unint64_t v7 = 0xEA00000000007365;
      break;
    case 5:
      unint64_t v7 = 0xE800000000000000;
      uint64_t v3 = 0x79726F6765746163;
      break;
    case 6:
      unint64_t v7 = 0xE500000000000000;
      uint64_t v3 = 0x7365707974;
      break;
    case 7:
      uint64_t v3 = 1701869940;
      break;
    case 8:
      unint64_t v7 = 0xE600000000000000;
      uint64_t v3 = 0x6E6F69746361;
      break;
    case 9:
      uint64_t v3 = 0x6F697469646E6F63;
      unint64_t v7 = 0xE90000000000006ELL;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v7) {
    sub_100072C70();
  }
  else {
    char v2 = sub_10001A844();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_10006BAA4(unsigned __int8 a1, char a2)
{
  uint64_t v3 = 1701606770;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = a1;
  unint64_t v6 = 1701606770;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE700000000000000;
      unint64_t v6 = 0x6E6F6973726576;
      break;
    case 2:
      unint64_t v4 = 0xE700000000000000;
      unint64_t v6 = 0x63736A5F343662;
      break;
    case 3:
      unint64_t v6 = sub_100072DB0();
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE700000000000000;
      uint64_t v3 = 0x6E6F6973726576;
      break;
    case 2:
      unint64_t v7 = 0xE700000000000000;
      uint64_t v3 = 0x63736A5F343662;
      break;
    case 3:
      sub_100072DDC();
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v7) {
    sub_100072C70();
  }
  else {
    char v2 = sub_10001A844();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_10006BBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  if (_s10RTCUtility9XPCObjectOwet_0(a1, 1, v5) == 1)
  {
    sub_1000173F0(a1, (uint64_t *)&unk_1000A83E0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_100014474();
    v6();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10006BD2C(char a1)
{
  *(void *)(v2 + 104) = v1;
  *(unsigned char *)(v2 + 184) = a1;
  return sub_100019308((uint64_t)sub_100008928, v1);
}

uint64_t sub_10006BD4C()
{
  sub_1000113BC();
  sub_100016748();
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 104);
  if (v0) {
    unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006C0E4;
  }
  else {
    unint64_t v6 = sub_10006BE4C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10006BE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_1000172D0();
  a23 = v25;
  a24 = v26;
  sub_10001A348();
  a22 = v24;
  swift_unknownObjectRelease();
  uint64_t v27 = *(void *)(v24 + 104);
  sub_10001A1F8();
  uint64_t v50 = v28;
  if (!v29) {
    sub_10001A274();
  }
  char v49 = *(unsigned char *)(v24 + 184);
  sub_100016CE0(&qword_1000A6748);
  uint64_t v30 = (int *)(sub_100016CE0(&qword_1000A6750) - 8);
  uint64_t v31 = *(void *)(*(void *)v30 + 72);
  unint64_t v32 = (*(unsigned __int8 *)(*(void *)v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v30 + 80);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_100084CA0;
  uint64_t v34 = (void *)(v33 + v32);
  uint64_t v35 = (void *)(v33 + v32 + v30[14]);
  sub_10001A204();
  *uint64_t v34 = v36;
  v34[1] = 0xE700000000000000;
  *uint64_t v35 = 0;
  type metadata accessor for EventValue();
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = (void *)sub_10001A2C4((uint64_t)v34 + v31);
  *long long v38 = v39;
  v38[1] = 0xE700000000000000;
  *uint64_t v37 = 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v41 = *(void *)(v27 + 160);
  uint64_t v42 = *(void *)(v27 + 168);
  swift_bridgeObjectRetain();
  uint64_t v43 = sub_100006C24(v49, v41, v42);
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a12 = v40;
  sub_10001537C(v43, (uint64_t)sub_100017560, 0, isUniquelyReferenced_nonNull_native, &a12);
  if (v50)
  {
    sub_100016868();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(v24 + 136) = a12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v47 = (void *)swift_task_alloc();
    *(void *)(v24 + 144) = v47;
    *uint64_t v47 = v24;
    v47[1] = sub_1000054E0;
    sub_10001A250();
    sub_100016868();
    return sub_10000E768();
  }
}

uint64_t sub_10006C0C4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 104) + 184);
  *(void *)(v0 + 176) = v1;
  return sub_100019308((uint64_t)sub_10001B758, v1);
}

uint64_t sub_10006C0E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, os_log_type_t type, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_10001A234();
  a28 = v30;
  a29 = v31;
  a27 = v29;
  if (qword_1000A60A8 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_100012884(v32, (uint64_t)qword_1000A81B0);
  swift_errorRetain();
  swift_errorRetain();
  swift_retain();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v36 = *(void *)(v29 + 104);
  if (v35)
  {
    uint64_t v37 = swift_slowAlloc();
    a17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315394;
    uint64_t v39 = *(void *)(v36 + 112);
    unint64_t v38 = *(void *)(v36 + 120);
    swift_bridgeObjectRetain();
    *(void *)(v29 + 72) = sub_10001227C(v39, v38, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v40 = Error.localizedDescription.getter();
    *(void *)(v29 + 96) = sub_10001227C(v40, v41, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "failed to send cached non-realtime events for session %s on session end: %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_unknownObjectRelease();
    swift_errorRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_errorRelease();
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v42 = *(void *)(v29 + 104);
  sub_10001A1F8();
  if (!v43) {
    sub_10001A274();
  }
  char v53 = *(unsigned char *)(v29 + 184);
  sub_100016CE0(&qword_1000A6748);
  sub_100016CE0(&qword_1000A6750);
  sub_10001A880();
  uint64_t v44 = (__n128 *)sub_10001A3C0();
  sub_100016448(v44, (__n128)xmmword_100084CA0);
  sub_10000A4CC();
  sub_100013534();
  uint64_t v45 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v46 = *(void *)(v42 + 160);
  uint64_t v47 = *(void *)(v42 + 168);
  swift_bridgeObjectRetain();
  uint64_t v48 = sub_100006C24(v53, v46, v47);
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a17 = v45;
  sub_10001537C(v48, (uint64_t)sub_100017560, 0, isUniquelyReferenced_nonNull_native, &a17);
  *(void *)(v29 + 136) = a17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v50 = (void *)swift_task_alloc();
  *(void *)(v29 + 144) = v50;
  *uint64_t v50 = v29;
  v50[1] = sub_1000054E0;
  sub_10001A250();
  sub_100016568();
  return sub_10000E768();
}

uint64_t sub_10006C4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v23;
  a22 = v24;
  sub_100007DB0();
  a20 = v22;
  swift_release();
  if (qword_1000A60A8 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100012884(v25, (uint64_t)qword_1000A81B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)sub_100014490();
    a11 = sub_1000094B4();
    *(_DWORD *)uint64_t v28 = 136446210;
    swift_getErrorValue();
    uint64_t v29 = Error.localizedDescription.getter();
    v22[8] = sub_10001227C(v29, v30, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "failed to mark session closed: %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v22[22] = *(void *)(v22[13] + 184);
  sub_100016650();
  return _swift_task_switch(v31, v32, v33);
}

uint64_t sub_10006C6F4()
{
  return sub_1000129A0();
}

uint64_t sub_10006C720()
{
  return sub_1000129A0();
}

uint64_t sub_10006C74C()
{
  sub_10000E83C();
  return v0();
}

uint64_t sub_10006C768()
{
  return sub_1000129A0();
}

uint64_t sub_10006C794()
{
  return sub_1000129A0();
}

uint64_t sub_10006C7C0(uint64_t a1, uint64_t a2)
{
  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  v3[30] = *(void *)(type metadata accessor for SessionConfiguration.Backend(0) - 8);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  return _swift_task_switch(sub_10006C890, v2, 0);
}

uint64_t sub_10006C890()
{
  sub_100011540();
  uint64_t v1 = *(void *)(*(void *)(v0 + 216) + 8);
  *(void *)(v0 + 208) = v1;
  *(void *)(v0 + 264) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 272) = v2;
  if (v2 == 1)
  {
    uint64_t v5 = *(_OWORD **)(v0 + 224);
    sub_100016E1C();
    long long v6 = v5[14];
    long long v7 = v5[12];
    *(_OWORD *)(v0 + 32) = v5[13];
    *(_OWORD *)(v0 + 48) = v6;
    *(_OWORD *)(v0 + 16) = v7;
    *(_OWORD *)(v0 + 112) = v5[12];
    long long v8 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 192) = v8;
    swift_retain();
    sub_100019B14(v0 + 112);
    sub_100019B14(v0 + 176);
    sub_100019B14(v0 + 192);
    unsigned int v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v9;
    *unsigned int v9 = v0;
    v9[1] = sub_10006CB68;
    uint64_t v10 = v0 + 16;
  }
  else
  {
    if (!v2)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v3 = *(uint64_t (**)(void, void))(v0 + 8);
      return v3(0, 0);
    }
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v12 = *(_OWORD **)(v0 + 224);
    sub_10001ED64();
    long long v13 = v12[14];
    long long v14 = v12[12];
    *(_OWORD *)(v0 + 80) = v12[13];
    *(_OWORD *)(v0 + 96) = v13;
    *(_OWORD *)(v0 + 64) = v14;
    *(_OWORD *)(v0 + 160) = v12[12];
    long long v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 128) = v15;
    *(_DWORD *)(v0 + 360) = *(_DWORD *)(v11 + 80);
    *(void *)(v0 + 312) = v16;
    *(void *)(v0 + 320) = 1;
    swift_bridgeObjectRetain();
    sub_100016E1C();
    swift_retain();
    sub_100019B14(v0 + 160);
    sub_100019B14(v0 + 144);
    sub_100019B14(v0 + 128);
    id v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v17;
    *id v17 = v0;
    v17[1] = sub_10006CD98;
    uint64_t v10 = v0 + 64;
  }
  return sub_100008030(v10);
}

uint64_t sub_10006CB68()
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_100017D58();
  long long v7 = v6;
  sub_10000935C();
  *long long v8 = v7;
  uint64_t v9 = *v1;
  sub_100015EE4();
  *uint64_t v10 = v9;
  v7[36] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100013B30(v7[32], (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  }
  else
  {
    v7[37] = v3;
    v7[38] = v5;
  }
  sub_100009758((uint64_t)(v7 + 14));
  sub_100009758((uint64_t)(v7 + 22));
  sub_100009758((uint64_t)(v7 + 24));
  sub_10000E934();
  sub_1000170B0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_10006CCB8()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = sub_100067390(v0[28], v1, v0[38], v0[37], *(unsigned char *)(v0[28] + 240) == 1, v0[29]);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  sub_100013B30(v1, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v5(v2, v4);
}

uint64_t sub_10006CD98()
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_100017D58();
  uint64_t v7 = v6;
  sub_10000935C();
  *long long v8 = v7;
  uint64_t v9 = *v1;
  sub_100015EE4();
  *uint64_t v10 = v9;
  v7[42] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100009758((uint64_t)(v7 + 20));
    sub_100009758((uint64_t)(v7 + 18));
    sub_100009758((uint64_t)(v7 + 16));
    sub_100005B18((uint64_t)(v7 + 26));
    swift_bridgeObjectRelease();
  }
  else
  {
    v7[43] = v3;
    v7[44] = v5;
    sub_100009758((uint64_t)(v7 + 20));
    sub_100009758((uint64_t)(v7 + 18));
    sub_100009758((uint64_t)(v7 + 16));
  }
  sub_1000170B0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_10006CEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v11 = v10[39];
  uint64_t v12 = sub_100067390(v10[28], v10[31], v10[44], v10[43], *(unsigned char *)(v10[28] + 240) == 1, v10[29]);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v15 = *(void *)(v11 + 16);
  uint64_t v16 = v10[39];
  if (v15 >= *(void *)(v11 + 24) >> 1)
  {
    sub_100072D78();
    sub_10001ED64();
    uint64_t v16 = v35;
  }
  uint64_t v17 = v10[40];
  uint64_t v18 = v10[34];
  uint64_t v19 = v10[31];
  *(void *)(v16 + 16) = v15 + 1;
  uint64_t v20 = v16 + 16 * v15;
  *(void *)(v20 + 32) = v12;
  *(void *)(v20 + 40) = v14;
  uint64_t result = sub_100013B30(v19, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  if (v17 == v18)
  {
    sub_100005B18((uint64_t)(v10 + 26));
    type metadata accessor for BackendGroup();
    uint64_t v22 = swift_allocObject();
    swift_defaultActor_initialize();
    *(void *)(v22 + 112) = v16;
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000170B0();
    return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
  }
  else
  {
    uint64_t v31 = v10[40];
    v10[39] = v16;
    v10[40] = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
    }
    else
    {
      sub_100016E1C();
      swift_retain();
      sub_100019B14((uint64_t)(v10 + 20));
      sub_100019B14((uint64_t)(v10 + 18));
      sub_100019B14((uint64_t)(v10 + 16));
      uint64_t v32 = (void *)swift_task_alloc();
      v10[41] = (uint64_t)v32;
      *uint64_t v32 = v10;
      v32[1] = sub_10006CD98;
      sub_1000170B0();
      return sub_100008030(v33);
    }
  }
  return result;
}

uint64_t sub_10006D128()
{
  sub_1000113BC();
  sub_100013B30(*(void *)(v0 + 248), (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v1();
}

uint64_t sub_10006D1BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

unint64_t sub_10006D1E8(char a1)
{
  if (a1) {
    return 0xD000000000000013;
  }
  else {
    return 0xD000000000000015;
  }
}

unint64_t sub_10006D224()
{
  return sub_10006D1E8(*v0);
}

double sub_10006D238()
{
  return *(double *)(v0 + 64);
}

uint64_t sub_10006D240()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000A81B0);
  sub_100012884(v0, (uint64_t)qword_1000A81B0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10006D2B8()
{
  return sub_1000129A0();
}

uint64_t sub_10006D2E4()
{
  return sub_1000129A0();
}

uint64_t sub_10006D320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100013FC4();
  sub_100007DB0();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v20 = *v15;
  sub_100015EE4();
  *id v21 = v20;
  uint64_t v22 = *v15;
  *id v21 = *v15;
  swift_task_dealloc();
  if (v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    sub_1000173F0(v20[54], &qword_1000A8490);
    sub_10001A2FC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100016650();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14);
  }
  uint64_t v32 = v20[71];
  uint64_t v33 = v20[55];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v34 = (uint64_t *)(v33 + v32);
  *uint64_t v34 = v19;
  v34[1] = v17;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v35 = v20[55];
  if (*(unsigned char *)(v35 + 240) == 1)
  {
    uint64_t v36 = qword_1000AF3B8;
    v20[80] = qword_1000AF3B8;
    if (v36)
    {
      sub_100072C28(v35);
      sub_100072E8C();
      sub_100005B44((uint64_t)(v20 + 52));
      sub_100005B44(v19);
      sub_100019B14(v33);
      uint64_t v37 = (void *)swift_task_alloc();
      v20[81] = (uint64_t)v37;
      *uint64_t v37 = v22;
      v37[1] = sub_10006D79C;
      sub_10001AB08();
      sub_100016650();
      return v40(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14);
    }
    __break(1u);
  }
  else
  {
    uint64_t result = sub_10000E8D4();
    if (!v46)
    {
      sub_100072D88();
      sub_100072EAC();
      sub_1000173F0(v32, &qword_1000A8490);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_100016650();
      return v40(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14);
    }
    uint64_t v47 = qword_1000AF3A0;
    v20[82] = qword_1000AF3A0;
    if (v47)
    {
      sub_10001A218();
      uint64_t v48 = (void *)swift_task_alloc();
      v20[83] = (uint64_t)v48;
      *uint64_t v48 = v22;
      v48[1] = sub_10000A020;
      sub_10001A528(v20[55]);
      sub_100016650();
      return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10006D79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_1000172D0();
  sub_10001A348();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = *v17;
  sub_100015EE4();
  *uint64_t v23 = v22;
  uint64_t v47 = *v17;
  *uint64_t v23 = *v17;
  swift_task_dealloc();
  if (v16)
  {
    sub_100005B18((uint64_t)(v22 + 52));
    sub_100005B18((uint64_t)(v22 + 50));
    sub_100009758((uint64_t)(v22 + 48));
    swift_release();
    goto LABEL_3;
  }
  uint64_t v33 = (void *)(v22[55] + v22[70]);
  sub_100005B18((uint64_t)(v22 + 52));
  sub_100005B18((uint64_t)(v22 + 50));
  sub_100009758((uint64_t)(v22 + 48));
  swift_release();
  *uint64_t v33 = v21;
  v33[1] = v19;
  swift_unknownObjectRelease();
  if (!*v33)
  {
    sub_1000729D4();
    swift_allocError();
    *uint64_t v37 = 1;
    swift_willThrow();
LABEL_3:
    swift_release();
    swift_release();
    sub_1000173F0(v22[54], &qword_1000A8490);
    sub_10001A2FC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E83C();
    sub_100016868();
    return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, v47, a12, a13, a14, a15, a16);
  }
  uint64_t result = sub_10000E8D4();
  if (v34)
  {
    uint64_t v35 = qword_1000AF3A0;
    v22[82] = qword_1000AF3A0;
    if (v35)
    {
      sub_10001A218();
      uint64_t v36 = (void *)swift_task_alloc();
      v22[83] = (uint64_t)v36;
      *uint64_t v36 = v47;
      v36[1] = sub_10000A020;
      sub_10001A528(v22[55]);
      sub_100016868();
      return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, v47, a12, a13, a14, a15, a16);
    }
    __break(1u);
  }
  else
  {
    sub_100072D88();
    uint64_t v46 = v22[59];
    swift_release();
    sub_1000173F0((uint64_t)v33, &qword_1000A8490);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100016868();
    return v40(v38, v39, v40, v41, v42, v43, v44, v45, a9, v46, v47, a12, a13, a14, a15, a16);
  }
  return result;
}

uint64_t *sub_10006DB64@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (result && (unint64_t)(a2 - (void)result + 7) >= 0xF)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8 * ((a2 - (uint64_t)result) / 8);
    do
    {
      uint64_t v5 = *result++;
      v3 ^= v5;
      v4 -= 8;
    }
    while (v4);
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a3 = v3;
  return result;
}

uint64_t sub_10006DBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_1000172D0();
  a23 = v25;
  a24 = v26;
  sub_10001A348();
  a22 = v24;
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    a10 = v24 + 32;
    a11 = v24[57];
    uint64_t v29 = v24[52];
    unint64_t v30 = v24[53];
    uint64_t v31 = (void *)v24[44];
    uint64_t v32 = sub_1000094B4();
    a12 = sub_100072DC4();
    a13 = a12;
    *(_DWORD *)uint64_t v32 = 136446722;
    swift_bridgeObjectRetain();
    v24[31] = sub_10001227C(v29, v30, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2082;
    uint64_t v33 = v31[25];
    uint64_t v34 = v31[26];
    uint64_t v35 = v31[27];
    uint64_t v36 = v31[28];
    uint64_t v37 = v31[29];
    v24[20] = v31[24];
    v24[21] = v33;
    v24[22] = v34;
    v24[23] = v35;
    v24[24] = v36;
    v24[25] = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_100012C5C();
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24[29] = sub_10001227C(v38, v40, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v32 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v41 = Error.localizedDescription.getter();
    v24[32] = sub_10001227C(v41, v42, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "session %{public}s (%{public}s): failed to cache event: %{public}s", (uint8_t *)v32, 0x20u);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000B448();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  sub_100016868();
  return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10006DE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  type metadata accessor for SessionConfiguration.BackendHTTP(0);
  v7[6] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SessionConfiguration.Backend(0);
  v7[7] = v9;
  v7[8] = *(void *)(v9 - 8);
  v7[9] = swift_task_alloc();
  v7[10] = swift_task_alloc();
  return _swift_task_switch(sub_10006DF84, a4, 0);
}

uint64_t sub_10006DF84()
{
  sub_1000113BC();
  uint64_t v4 = *(void *)(*(void *)(v0 + 16) + 136);
  *(void *)(v0 + 88) = v4;
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v0 + 96) = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 64);
    *(_DWORD *)(v0 + 184) = *(_DWORD *)(v6 + 80);
    uint64_t v7 = *(void *)(v6 + 72);
    *(void *)(v0 + 112) = 0;
    *(void *)(v0 + 120) = 0;
    *(void *)(v0 + 104) = v7;
    swift_bridgeObjectRetain();
    sub_1000129A0();
    uint64_t v4 = sub_100016E1C();
    uint64_t v8 = qword_1000AF3C0;
    *(void *)(v0 + 128) = qword_1000AF3C0;
    if (v8)
    {
      sub_100016E1C();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v10 = *(void *)(v0 + 72);
      if (EnumCaseMultiPayload == 1)
      {
        swift_retain();
        sub_100013B30(v10, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
        sub_100072C54();
      }
      else
      {
        uint64_t v12 = *(uint64_t **)(v0 + 48);
        sub_100016FF8();
        uint64_t v1 = *v12;
        uint64_t v10 = v12[1];
        swift_retain();
        swift_bridgeObjectRetain();
        sub_100013B30((uint64_t)v12, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
      }
      *(void *)(v0 + 136) = v1;
      *(void *)(v0 + 144) = v10;
      goto LABEL_9;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    return _swift_task_switch(v4, v2, v3);
  }
  uint64_t v11 = qword_1000AF3C0;
  *(void *)(v0 + 160) = 0;
  *(void *)(v0 + 168) = v11;
  if (!v11) {
    goto LABEL_13;
  }
  swift_retain();
LABEL_9:
  sub_10000E934();
  return _swift_task_switch(v4, v2, v3);
}

uint64_t sub_10006E150()
{
  sub_1000113BC();
  uint64_t v1 = *(void *)(v0 + 112);
  sub_10002DF10(*(void *)(v0 + 136), *(void **)(v0 + 144), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
  *(void *)(v0 + 152) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = sub_10006E540;
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 16);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = sub_10006E21C;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_10006E21C()
{
  sub_1000113BC();
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[15] + 1;
  sub_100013B30(v0[10], (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  if (v3 != v2)
  {
    uint64_t v10 = v0[15] + 1;
    v0[14] = v0[19];
    v0[15] = v10;
    uint64_t v5 = sub_100016E1C();
    uint64_t v11 = qword_1000AF3C0;
    v0[16] = qword_1000AF3C0;
    if (v11)
    {
      sub_100016E1C();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v13 = v0[9];
      if (EnumCaseMultiPayload == 1)
      {
        swift_retain();
        sub_100013B30(v13, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
        sub_100072C54();
      }
      else
      {
        uint64_t v14 = (uint64_t *)v0[6];
        sub_100016FF8();
        uint64_t v1 = *v14;
        uint64_t v13 = v14[1];
        swift_retain();
        swift_bridgeObjectRetain();
        sub_100013B30((uint64_t)v14, (void (*)(void))type metadata accessor for SessionConfiguration.BackendHTTP);
      }
      v0[17] = v1;
      v0[18] = v13;
LABEL_13:
      sub_10000E934();
      return _swift_task_switch(v5, v6, v7);
    }
    __break(1u);
LABEL_17:
    __break(1u);
    return _swift_task_switch(v5, v6, v7);
  }
  uint64_t v4 = v0[2];
  uint64_t v5 = swift_bridgeObjectRelease();
  if (!*(void *)(*(void *)(v4 + 136) + 16))
  {
    uint64_t v15 = qword_1000AF3C0;
    v0[20] = v0[19];
    v0[21] = v15;
    if (v15)
    {
      swift_retain();
      goto LABEL_13;
    }
    goto LABEL_17;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100013FE0();
  return v8();
}

uint64_t sub_10006E460()
{
  sub_1000113BC();
  uint64_t v1 = *(void *)(v0 + 160);
  sub_10002DF10(0x6B6E756C7073, (void *)0xE600000000000000, *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
  *(void *)(v0 + 176) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    return _swift_task_switch(sub_10006E5D4, v2, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100013FE0();
    return v3();
  }
}

uint64_t sub_10006E540()
{
  sub_1000113BC();
  sub_100013B30(*(void *)(v0 + 80), (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v1();
}

uint64_t sub_10006E5D4()
{
  sub_1000113BC();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v0();
}

uint64_t sub_10006E654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return ((uint64_t (*)(uint64_t (*)(), void))_swift_task_switch)(sub_10006E680, 0);
}

uint64_t sub_10006E680()
{
  sub_100016940();
  uint64_t v15 = v0[16];
  swift_getObjectType();
  sub_100016CE0(&qword_1000A8428);
  uint64_t v1 = (__n128 *)swift_allocObject();
  v0[21] = v1;
  sub_1000182C0(v1, (__n128)xmmword_100084C90, v2, v3, v4, v5, v6, v7, v8, v13, v14, v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[22] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10006E7B4;
  uint64_t v10 = sub_10000E724();
  return v11(v10);
}

uint64_t sub_10006E7B4()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 160);
    return _swift_task_switch(sub_10006E8B8, v7, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000E83C();
    return v8();
  }
}

uint64_t sub_10006E8B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *type, void *a12, void *a13, void *a14, uint64_t a15, os_log_t log, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_10001A234();
  a27 = v29;
  a28 = v30;
  a26 = v28;
  swift_bridgeObjectRelease();
  if (qword_1000A60A8 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_100012884(v31, (uint64_t)qword_1000A81B0);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  int v34 = v33;
  BOOL v35 = os_log_type_enabled(v32, v33);
  uint64_t v36 = (void *)v28[20];
  if (v35)
  {
    os_log_t log = v32;
    a10 = v28 + 12;
    os_log_type_t type = v28 + 2;
    a12 = v28 + 13;
    a13 = v28 + 8;
    a14 = v28 + 14;
    uint64_t v37 = sub_1000094B4();
    a15 = sub_100072DC4();
    a17 = a15;
    *(_DWORD *)uint64_t v37 = 136446722;
    uint64_t v39 = v36[14];
    unint64_t v38 = v36[15];
    swift_bridgeObjectRetain();
    v28[11] = sub_10001227C(v39, v38, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2082;
    uint64_t v40 = v36[25];
    uint64_t v41 = v36[26];
    uint64_t v42 = v36[27];
    uint64_t v43 = v36[28];
    uint64_t v44 = v36[29];
    void v28[2] = v36[24];
    v28[3] = v40;
    v28[4] = v41;
    v28[5] = v42;
    v28[6] = v43;
    v28[7] = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_100012C5C();
    LODWORD(type) = v34;
    unint64_t v47 = v46;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28[12] = sub_10001227C(v45, v47, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v37 + 22) = 2082;
    sub_100015320();
    swift_getErrorValue();
    uint64_t v48 = Error.localizedDescription.getter();
    v28[14] = sub_10001227C(v48, v49, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)type, "session %{public}s (%{public}s): immediate backend failed to send events: %{public}s", (uint8_t *)v37, 0x20u);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000E83C();
  sub_100016568();
  return v51(v50, v51, v52, v53, v54, v55, v56, v57, a9, a10, type, a12, a13, a14, a15, log, a17, a18, a19, a20);
}

uint64_t sub_10006EBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return _swift_task_switch(sub_10006EC04, a4, 0);
}

uint64_t sub_10006EC04()
{
  sub_100016940();
  if (*(unsigned char *)(v0[15] + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[21] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10006EDB4;
    uint64_t v2 = sub_10001A528(v0[16]);
    return sub_10006F54C(v2, v3);
  }
  else
  {
    sub_100072E24();
    sub_100016CE0(&qword_1000A8428);
    uint64_t v5 = (__n128 *)swift_allocObject();
    v0[23] = v5;
    sub_1000182C0(v5, (__n128)xmmword_100084C90, v6, v7, v8, v9, v10, v11, v12, v16, v17, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[24] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10006EFD8;
    uint64_t v14 = sub_10000E724();
    return v15(v14);
  }
}

uint64_t sub_10006EDB4()
{
  sub_1000113BC();
  sub_100016748();
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 120);
  if (v0) {
    uint64_t v6 = sub_10006F0DC;
  }
  else {
    uint64_t v6 = sub_10006EEB4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10006EEB4()
{
  sub_100016940();
  sub_100072E24();
  sub_100016CE0(&qword_1000A8428);
  uint64_t v1 = (__n128 *)swift_allocObject();
  *(void *)(v0 + 184) = v1;
  sub_1000182C0(v1, (__n128)xmmword_100084C90, v2, v3, v4, v5, v6, v7, v8, v13, v14, v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10006EFD8;
  uint64_t v10 = sub_10000E724();
  return v11(v10);
}

uint64_t sub_10006EFD8()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 120);
    return _swift_task_switch(sub_10006F310, v7, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000E83C();
    return v8();
  }
}

uint64_t sub_10006F0DC()
{
  uint64_t v34 = v0;
  if (qword_1000A60A8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  unint64_t v3 = sub_100012884(v2, (uint64_t)qword_1000A81B0);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v4 = (void *)Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (sub_100016884(v5))
  {
    sub_100072BBC();
    uint64_t v31 = sub_100072DC4();
    uint64_t v33 = v31;
    sub_100072D54(4.8754e-34);
    uint64_t v6 = sub_10001227C(v1, v3, &v33);
    sub_100072D30(v6);
    swift_bridgeObjectRelease();
    sub_1000093EC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_100012C5C();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_10001227C(v7, v9, &v33);
    sub_100072D0C(v10);
    swift_bridgeObjectRelease();
    sub_10001A9B4();
    sub_100072C7C();
    uint64_t v11 = Error.localizedDescription.getter();
    uint64_t v13 = (void *)v12;
    uint64_t v14 = sub_10001227C(v11, v12, &v33);
    sub_100072CE8(v14);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100072CC4((void *)&_mh_execute_header, v15, v16, "session %{public}s (%{public}s): failed to send realtime events: %{public}s", v17, v18, v19, v20, v23, v24, v25, v26, v27, v28, *(int *)v29, (os_log_type_t)v29[4], v30, v31, v32);
    sub_100072DF0();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_10001A9B4();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000E83C();
  return v21();
}

uint64_t sub_10006F310()
{
  uint64_t v34 = v0;
  swift_bridgeObjectRelease();
  if (qword_1000A60A8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  unint64_t v3 = sub_100012884(v2, (uint64_t)qword_1000A81B0);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v4 = (void *)Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (sub_100016884(v5))
  {
    sub_100072BBC();
    uint64_t v31 = sub_100072DC4();
    uint64_t v33 = v31;
    sub_100072D54(4.8754e-34);
    uint64_t v6 = sub_10001227C(v1, v3, &v33);
    sub_100072D30(v6);
    swift_bridgeObjectRelease();
    sub_1000093EC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_100012C5C();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_10001227C(v7, v9, &v33);
    sub_100072D0C(v10);
    swift_bridgeObjectRelease();
    sub_10001A9B4();
    sub_100072C7C();
    uint64_t v11 = Error.localizedDescription.getter();
    uint64_t v13 = (void *)v12;
    uint64_t v14 = sub_10001227C(v11, v12, &v33);
    sub_100072CE8(v14);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100072CC4((void *)&_mh_execute_header, v15, v16, "session %{public}s (%{public}s): failed to send realtime events: %{public}s", v17, v18, v19, v20, v23, v24, v25, v26, v27, v28, *(int *)v29, (os_log_type_t)v29[4], v30, v31, v32);
    sub_100072DF0();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_10001A9B4();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000E83C();
  return v21();
}

uint64_t sub_10006F54C(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return _swift_task_switch(sub_10006F570, v2, 0);
}

void sub_10006F570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100013FC4();
  a21 = v24;
  a22 = v25;
  sub_100007DB0();
  a20 = v23;
  uint64_t v26 = v23[11];
  uint64_t v27 = OBJC_IVAR____TtC13rtcreportingd7Session_sendingNonRealtimeEvents;
  v23[12] = OBJC_IVAR____TtC13rtcreportingd7Session_sendingNonRealtimeEvents;
  if ((*(unsigned char *)(v26 + v27) & 1) != 0
    || (uint64_t v28 = OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents,
        v23[13] = OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents,
        *(unsigned char *)(v26 + v28) != 1))
  {
    sub_100013FE0();
    sub_100016650();
    v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    *(unsigned char *)(v26 + v27) = 1;
    if (qword_1000A60A8 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    v23[14] = sub_100012884(v29, (uint64_t)qword_1000A81B0);
    swift_retain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    BOOL v32 = sub_100016884(v31);
    uint64_t v33 = v23[11];
    if (v32)
    {
      uint64_t v34 = (uint8_t *)sub_100014490();
      a11 = sub_1000094B4();
      *(_DWORD *)uint64_t v34 = 136446210;
      uint64_t v36 = *(void *)(v33 + 112);
      unint64_t v35 = *(void *)(v33 + 120);
      swift_bridgeObjectRetain();
      _WORD v23[8] = sub_10001227C(v36, v35, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v30, v22, "session %{public}s: triggering send for cached events in realtime mode", v34, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();
    }
    else
    {
      swift_release();
    }

    if (qword_1000AF3A0)
    {
      v23[15] = qword_1000AF3A0;
      swift_retain();
      uint64_t v45 = (void *)swift_task_alloc();
      v23[16] = v45;
      *uint64_t v45 = v23;
      v45[1] = sub_10006F7D4;
      sub_100012958();
      sub_100016650();
      sub_10004338C(v46, v47, v48, v49);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10006F7D4()
{
  sub_1000113BC();
  sub_100009594();
  sub_10000935C();
  *unint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10000935C();
  void *v5 = v4;
  *(void *)(v7 + 136) = v6;
  *(void *)(v7 + 144) = v0;
  swift_task_dealloc();
  swift_release();
  sub_100009368();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10006F8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_1000172D0();
  sub_10001A348();
  uint64_t v17 = v16[17];
  int64_t v18 = *(void *)(v17 + 16);
  v16[19] = v18;
  if (v18)
  {
    int v19 = v16 + 5;
    v16[5] = &_swiftEmptyArrayStorage;
    sub_100071E70(0, v18, 0);
    uint64_t v20 = v16[5];
    uint64_t v21 = (_OWORD *)(v17 + 48);
    do
    {
      uint64_t v22 = *((void *)v21 - 1);
      long long v51 = *v21;
      *int v19 = v20;
      unint64_t v23 = *(void *)(v20 + 16);
      unint64_t v24 = *(void *)(v20 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v23 >= v24 >> 1)
      {
        BOOL v26 = sub_100072D78();
        sub_100071E70((char *)v26, v27, v28);
        uint64_t v20 = *v19;
      }
      v16[20] = v20;
      *(void *)(v20 + 16) = v23 + 1;
      uint64_t v25 = v20 + 24 * v23;
      *(void *)(v25 + 32) = v22;
      *(_OWORD *)(v25 + 40) = v51;
      v21 += 2;
      --v18;
    }
    while (v18);
    uint64_t v52 = v16[10];
    swift_getObjectType();
    uint64_t v50 = *(void *)(v52 + 24) + **(int **)(v52 + 24);
    *(void *)&long long v51 = v52 + 24;
    uint64_t v29 = (void *)swift_task_alloc();
    v16[21] = v29;
    *uint64_t v29 = v16;
    v29[1] = sub_10006FAE0;
    sub_10001AB08();
    sub_100016868();
    return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, v50, v51, *((void *)&v51 + 1), a13, a14, a15, a16);
  }
  else
  {
    uint64_t v39 = v16[12];
    uint64_t v40 = v16[13];
    uint64_t v41 = v16[11];
    swift_bridgeObjectRelease();
    *(unsigned char *)(v41 + v40) = 0;
    *(unsigned char *)(v41 + v39) = 0;
    sub_100013FE0();
    sub_100016868();
    return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_10006FAE0()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 88);
    uint64_t v8 = sub_10006FED0;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 88);
    swift_release();
    uint64_t v8 = sub_10006FBD4;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_10006FBD4()
{
  sub_100016940();
  uint64_t v2 = qword_1000AF3A0;
  v0[23] = qword_1000AF3A0;
  if (v2)
  {
    int64_t v3 = v0[19];
    v0[6] = &_swiftEmptyArrayStorage;
    swift_retain();
    sub_100071EC0(0, v3, 0);
    sub_100072E10();
    do
    {
      sub_10001A4AC();
      if (v5)
      {
        sub_100071EC0((char *)(v4 > 1), v1, 1);
        int64_t v3 = v0[6];
      }
      sub_1000176FC();
    }
    while (!v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[25] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10006FCF8;
    sub_1000435E4(v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10006FCF8()
{
  sub_1000094A8();
  sub_100017D58();
  uint64_t v3 = v2;
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100015EE4();
  *char v6 = v5;
  *(void *)(v3 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 88);
    uint64_t v8 = sub_100070120;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 88);
    swift_release();
    swift_release();
    uint64_t v8 = sub_10006FDF4;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_10006FDF4()
{
  sub_1000113BC();
  if (qword_1000AF3A0)
  {
    *(void *)(v0 + 120) = qword_1000AF3A0;
    swift_retain();
    int64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v1;
    *int64_t v1 = v0;
    v1[1] = sub_10006F7D4;
    uint64_t v2 = sub_100012958();
    sub_10004338C(v2, v3, v4, v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10006FEAC()
{
  *(unsigned char *)(*(void *)(v0 + 88) + *(void *)(v0 + 96)) = 0;
  sub_10000E83C();
  return v1();
}

void sub_10006FED0()
{
  sub_100011540();
  int v15 = v0;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  int64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = sub_100014490();
    uint64_t v14 = sub_1000094B4();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v3 + 4) = sub_10001227C(v4, v5, &v14);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "failed to send events: %{public}s", (uint8_t *)v3, 0xCu);
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = qword_1000AF3A0;
  v0[23] = qword_1000AF3A0;
  if (v6)
  {
    int64_t v7 = v0[19];
    v0[6] = &_swiftEmptyArrayStorage;
    swift_retain();
    sub_100071EC0(0, v7, 0);
    sub_100072E10();
    do
    {
      sub_10001A4AC();
      if (v8)
      {
        BOOL v10 = sub_100072D78();
        sub_100071EC0((char *)v10, v11, v12);
        int64_t v7 = v0[6];
      }
      sub_1000176FC();
    }
    while (!v9);
    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[25] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10006FCF8;
    sub_1000435E4(v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100070120()
{
  sub_1000094A8();
  swift_release();
  swift_release();
  *(unsigned char *)(*(void *)(v0 + 88) + *(void *)(v0 + 96)) = 0;
  sub_10000E83C();
  return v1();
}

uint64_t sub_10007018C()
{
  return type metadata accessor for Session(0);
}

uint64_t sub_100070194()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_1000702A0(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t sub_1000702B4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000702D4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_100070300(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10007031C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)uint64_t result = a2 - 1;
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 4) = v2;
  return result;
}

void type metadata accessor for SessionUser()
{
}

void *sub_100070348(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[6];
    uint64_t v11 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v11;
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v20 = (uint64_t)a2 + v12;
    uint64_t v21 = a1 + v12;
    *(void *)(a1 + 48) = v10;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v21, v20, v13);
    uint64_t v15 = *(int *)(a3 + 36);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    void v16[4] = *(unsigned char *)(v17 + 4);
  }
  return v4;
}

uint64_t sub_1000704A4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100070534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v18 = a1 + v10;
  uint64_t v11 = a2 + v10;
  *(void *)(a1 + 48) = v8;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v18, v11, v12);
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  return a1;
}

uint64_t sub_100070648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  char v13 = *(unsigned char *)(v12 + 4);
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = v13;
  return a1;
}

uint64_t sub_100070778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  return a1;
}

uint64_t sub_100070838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  return a1;
}

uint64_t sub_100070928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = a1 + *(int *)(a3 + 32);
    return _s10RTCUtility9XPCObjectOwet_0(v9, a2, v8);
  }
}

uint64_t sub_1000709B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = v5 + *(int *)(a4 + 32);
    return _s10RTCUtility9XPCObjectOwst_0(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_100070A30()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100070AF0()
{
  return sub_10006C6F4();
}

uint64_t sub_100070B14()
{
  return sub_10006D2B8();
}

uint64_t sub_100070B38()
{
  return sub_10006D2E4();
}

double sub_100070B5C()
{
  return *(double *)(*(void *)v0 + 128);
}

char *sub_100070B68(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001AB14();
    uint64_t result = (char *)sub_100019D64();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100019AE0(a3, result);
  }
  return result;
}

char *sub_100070BC4(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    sub_10001AB14();
    __src = (char *)sub_100019D64();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_100070C34(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001AB14();
    uint64_t result = (char *)sub_100019D64();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_100019AE0(a3, result);
  }
  return result;
}

void sub_100070C98(unint64_t a1, uint64_t a2, unint64_t a3)
{
}

char *sub_100070CB0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }
  return __src;
}

void sub_100070D44(unint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_100070D5C(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_10001AB14();
    sub_100019D64();
    __break(1u);
  }
  else if (a3 < a1 || (a4(0), sub_10000948C(), a1 + *(void *)(v8 + 72) * a2 <= a3))
  {
    a4(0);
    sub_100072E78();
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    sub_100072E78();
    swift_arrayInitWithTakeBackToFront();
  }
}

void sub_100070E58(unint64_t a1, uint64_t a2, unint64_t a3)
{
}

char *sub_100070E70(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001AB14();
    uint64_t result = (char *)sub_100019D64();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100019AE0(a3, result);
  }
  return result;
}

char *sub_100070ED4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001AB14();
    uint64_t result = (char *)sub_100019D64();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100019AE0(a3, result);
  }
  return result;
}

char *sub_100070F30(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_100070FCC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001AB14();
    uint64_t result = (char *)sub_100019D64();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100019AE0(a3, result);
  }
  return result;
}

uint64_t sub_10007102C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a3 < a1 {
         || (uint64_t result = sub_100016CE0(&qword_1000A67F8), a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  }
  {
    sub_100016CE0(&qword_1000A67F8);
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

void sub_100071164(unint64_t a1, uint64_t a2, unint64_t a3)
{
}

uint64_t sub_10007117C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10001AB14();
    sub_100011698();
LABEL_11:
    uint64_t result = sub_1000095AC();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    sub_10001AB14();
    sub_10001159C();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_10007122C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + (a2 << 6) > a1 ? (BOOL v3 = a1 + (a2 << 6) > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_100016CE0(&qword_1000A84D8);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_10007132C(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_10001AB14();
    sub_100011698();
LABEL_11:
    uint64_t result = sub_1000095AC();
    __break(1u);
    return result;
  }
  a4(0);
  sub_10000948C();
  uint64_t v8 = *(void *)(v7 + 72) * a2;
  unint64_t v9 = a3 + v8;
  unint64_t v10 = a1 + v8;
  if (v9 > a1 && v10 > a3)
  {
    sub_10001AB14();
    sub_10001159C();
    goto LABEL_11;
  }
  sub_100072E44();

  return swift_arrayInitWithCopy();
}

uint64_t sub_100071404(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1000714E8(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a2 < 0)
  {
    sub_10001AB14();
    sub_100011698();
LABEL_11:
    uint64_t result = sub_1000095AC();
    __break(1u);
    return result;
  }
  if (a3 + 8 * a2 > a1 && a1 + 8 * a2 > a3)
  {
    sub_10001AB14();
    sub_10001159C();
    goto LABEL_11;
  }
  sub_100016CE0(a4);
  sub_100072E44();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1000715A8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v5 = *(void *)(*(void *)(sub_100016CE0(&qword_1000A67F8) - 8) + 72) * a2,
         unint64_t v6 = a3 + v5,
         unint64_t v7 = a1 + v5,
         v6 > a1)
      ? (BOOL v8 = v7 > a3)
      : (BOOL v8 = 0),
        v8))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

void *sub_1000716C8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_10001AB14();
    sub_100011698();
LABEL_11:
    uint64_t result = (void *)sub_1000095AC();
    __break(1u);
    return result;
  }
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst)
  {
    sub_10001AB14();
    sub_10001159C();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, 8 * a2);
}

uint64_t sub_100071774()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000717AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000717BC(uint64_t a1, char a2)
{
  unint64_t v4 = v2;
  sub_100072D9C();
  sub_100016CE0((uint64_t *)&unk_1000A84F0);
  sub_100015320();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v3 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = *(void *)(v3 + 64);
    uint64_t v39 = v3 + 64;
    uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v9;
    int64_t v38 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    if ((v11 & v9) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (unint64_t i = v14 | (v8 << 6); ; unint64_t i = v20 + (v8 << 6))
    {
      uint64_t v21 = *(unsigned __int8 *)(*(void *)(v3 + 48) + i);
      uint64_t v22 = *(void *)(*(void *)(v3 + 56) + 8 * i);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21 + 1);
      unint64_t v23 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v7 + 32));
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) == 0)
      {
        sub_1000114C4();
        while (++v25 != v26 || (v24 & 1) == 0)
        {
          BOOL v27 = v25 == v26;
          if (v25 == v26) {
            uint64_t v25 = 0;
          }
          v24 |= v27;
          if (*(void *)(v13 + 8 * v25) != -1)
          {
            sub_100016718();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      sub_10001521C();
LABEL_30:
      sub_10001528C();
      *(void *)(v13 + v28) |= v29;
      *(unsigned char *)(*(void *)(v7 + 48) + v30) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v30) = v22;
      sub_1000152F0();
      if (v12) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_41;
      }
      if (v16 >= v38) {
        goto LABEL_32;
      }
      ++v8;
      if (!*(void *)(v39 + 8 * v16))
      {
        int64_t v8 = v16 + 1;
        if (v16 + 1 >= v38) {
          goto LABEL_32;
        }
        if (!*(void *)(v39 + 8 * v8))
        {
          int64_t v17 = v16 + 2;
          if (v17 >= v38)
          {
LABEL_32:
            if ((a2 & 1) == 0)
            {
              swift_release();
              unint64_t v4 = v2;
              goto LABEL_39;
            }
            sub_100013F64();
            if (v33 != v34)
            {
              *uint64_t v31 = -1 << v32;
            }
            else
            {
              uint64_t v35 = sub_100072CA4();
              sub_100071D3C(v35, v36, v37);
            }
            unint64_t v4 = v2;
            *(void *)(v3 + 16) = 0;
            break;
          }
          if (!*(void *)(v39 + 8 * v17))
          {
            while (1)
            {
              int64_t v8 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_42;
              }
              if (v8 >= v38) {
                goto LABEL_32;
              }
              ++v17;
              if (*(void *)(v39 + 8 * v8)) {
                goto LABEL_18;
              }
            }
          }
          int64_t v8 = v17;
        }
      }
LABEL_18:
      sub_100072CB4();
      unint64_t v12 = v19 & v18;
    }
  }
  swift_release();
LABEL_39:
  uint64_t *v4 = v7;
}

void sub_100071A20(uint64_t a1, char a2)
{
  unint64_t v4 = v2;
  sub_100072D9C();
  sub_100016CE0(&qword_1000A67D8);
  sub_100015320();
  char v48 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (v3[2])
  {
    sub_100015358();
    uint64_t v46 = v7;
    sub_10001532C();
    unint64_t v10 = v9 & v8;
    int64_t v45 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v12 = v6 + 64;
    swift_retain();
    int64_t v13 = 0;
    uint64_t v14 = 48;
    uint64_t v47 = v3;
    if (!v10) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v13 << 6); ; unint64_t i = v21 + (v13 << 6))
    {
      uint64_t v22 = (uint64_t *)(v3[6] + 16 * i);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      uint64_t v25 = v3[7] + i * v14;
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *(void *)(v25 + 8);
      char v28 = *(unsigned char *)(v25 + 16);
      uint64_t v49 = *(void *)(v25 + 24);
      long long v50 = *(_OWORD *)(v25 + 32);
      if ((v48 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      sub_1000152B8();
      if (((v31 << v30) & ~*(void *)(v12 + 8 * v29)) == 0)
      {
        sub_1000114C4();
        while (++v35 != v36 || (v34 & 1) == 0)
        {
          BOOL v37 = v35 == v36;
          if (v35 == v36) {
            uint64_t v35 = 0;
          }
          v34 |= v37;
          if (*(void *)(v12 + 8 * v35) != -1)
          {
            sub_100016718();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_10001521C();
      uint64_t v33 = 48;
LABEL_27:
      *(void *)(v12 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
      int64_t v38 = (void *)(*(void *)(v6 + 48) + 16 * v32);
      *int64_t v38 = v24;
      v38[1] = v23;
      uint64_t v39 = *(void *)(v6 + 56) + v32 * v33;
      *(void *)uint64_t v39 = v26;
      *(void *)(v39 + 8) = v27;
      *(unsigned char *)(v39 + 16) = v28;
      *(void *)(v39 + 24) = v49;
      *(_OWORD *)(v39 + 32) = v50;
      sub_1000152F0();
      uint64_t v3 = v47;
      if (v10) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_36;
      }
      if (v17 >= v45) {
        goto LABEL_29;
      }
      ++v13;
      if (!v46[v17])
      {
        int64_t v13 = v17 + 1;
        if (v17 + 1 >= v45) {
          goto LABEL_29;
        }
        if (!v46[v13])
        {
          int64_t v18 = v17 + 2;
          if (v18 >= v45)
          {
LABEL_29:
            swift_release();
            unint64_t v4 = v2;
            if (v48)
            {
              sub_100013F64();
              if (v41 != v42)
              {
                *uint64_t v46 = -1 << v40;
              }
              else
              {
                uint64_t v43 = sub_100072CA4();
                sub_100071D3C(v43, v44, v46);
              }
              v3[2] = 0;
            }
            break;
          }
          if (!v46[v18])
          {
            while (1)
            {
              int64_t v13 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_37;
              }
              if (v13 >= v45) {
                goto LABEL_29;
              }
              ++v18;
              if (v46[v13]) {
                goto LABEL_15;
              }
            }
          }
          int64_t v13 = v18;
        }
      }
LABEL_15:
      sub_100072CB4();
      unint64_t v10 = v20 & v19;
    }
  }
  swift_release();
  uint64_t *v4 = v6;
}

void sub_100071CF4(uint64_t a1, char a2)
{
}

uint64_t sub_100071D3C(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

size_t sub_100071D58(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100071FE4(a1, a2, a3, *v3, (uint64_t *)&unk_1000A64A0, (uint64_t (*)(void))type metadata accessor for EventValue, (void (*)(void))type metadata accessor for EventValue, (void (*)(void))type metadata accessor for EventValue);
  *uint64_t v3 = result;
  return result;
}

char *sub_100071DAC(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100071F00(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

size_t sub_100071DCC(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100071FE4(a1, a2, a3, *v3, &qword_1000A6510, (uint64_t (*)(void))&type metadata accessor for URL, (void (*)(void))&type metadata accessor for URL, (void (*)(void))&type metadata accessor for URL);
  *uint64_t v3 = result;
  return result;
}

char *sub_100071E20(char *a1, int64_t a2, char a3)
{
  size_t result = sub_10007217C(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_100071E40(char *a1, int64_t a2, char a3)
{
  size_t result = sub_10007234C(a1, a2, a3, *v3, &qword_1000A8460, &qword_1000A8468);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_100071E70(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100072260(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_100071E90(char *a1, int64_t a2, char a3)
{
  size_t result = sub_10007234C(a1, a2, a3, *v3, (uint64_t *)&unk_1000A84C0, (uint64_t *)&unk_1000A7870);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_100071EC0(char *a1, int64_t a2, char a3)
{
  size_t result = sub_10007243C(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

size_t sub_100071EE0(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100072520(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100071F00(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100016CE0(&qword_1000A84D0);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 64);
  }
  else
  {
    unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100070CB0(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10007122C((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

size_t sub_100071FE4(size_t result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(void), void (*a8)(void))
{
  char v12 = result;
  if (a3)
  {
    unint64_t v13 = *(void *)(a4 + 24);
    uint64_t v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < a2)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v14 = a2;
      }
    }
  }
  else
  {
    uint64_t v14 = a2;
  }
  uint64_t v15 = *(void *)(a4 + 16);
  if (v14 <= v15) {
    uint64_t v16 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v16 = v14;
  }
  if (!v16)
  {
    uint64_t v22 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100016CE0(a5);
  uint64_t v17 = a6(0);
  sub_10001130C(v17);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v22);
  if (!v19)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v21 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_24;
  }
  v22[2] = v15;
  v22[3] = 2 * ((uint64_t)(result - v21) / v19);
LABEL_19:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v26 = (unint64_t)v22 + v25;
  unint64_t v27 = a4 + v25;
  if (v12)
  {
    sub_100070D5C(v27, v15, v26, a7);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10007132C(v27, v15, v26, a8);
  }
  swift_release();
  return (size_t)v22;
}

char *sub_10007217C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100016CE0(&qword_1000A8480);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  char v12 = v10 + 32;
  unint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100070B68(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10007117C((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

char *sub_100072260(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100016CE0(&qword_1000A8428);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  char v12 = v10 + 32;
  unint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100070F30(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100071404((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

char *sub_10007234C(char *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100016CE0(a5);
    unint64_t v13 = (char *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    *((void *)v13 + 2) = v11;
    *((void *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 8);
  }
  else
  {
    unint64_t v13 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v15 = v13 + 32;
  uint64_t v16 = (char *)(a4 + 32);
  if (v8)
  {
    sub_100070FCC(v16, v11, v15);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000714E8((unint64_t)v16, v11, (unint64_t)v15, a6);
  }
  swift_release();
  return v13;
}

char *sub_10007243C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100016CE0(&qword_1000A64C0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100070FCC(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000716C8(v13, v8, v12);
  }
  swift_release();
  return v10;
}

size_t sub_100072520(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100016CE0(&qword_1000A84E0);
  uint64_t v10 = *(void *)(sub_100016CE0(&qword_1000A67F8) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_100016CE0(&qword_1000A67F8) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_10007102C(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000715A8(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_1000726C4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10007271C()
{
  sub_100011540();
  sub_100007E30();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100015EF4(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10001B7E0;
  uint64_t v3 = sub_100072BFC();
  return sub_10006EBD4(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000727C8()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100072820()
{
  sub_100011540();
  sub_100007E30();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100015EF4(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10000D9FC;
  uint64_t v3 = sub_100072BFC();
  return sub_10006E654(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000728CC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10007291C()
{
  sub_1000165C8();
  sub_100016940();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100015EF4(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10000D9FC;
  sub_1000170B0();
  return sub_10006DE80(v3, v4, v5, v6, v7, v8, v9);
}

unint64_t sub_1000729D4()
{
  unint64_t result = qword_1000A84A8;
  if (!qword_1000A84A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A84A8);
  }
  return result;
}

uint64_t sub_100072A20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_100072A68(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100072B34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for SessionError()
{
}

unint64_t sub_100072B70()
{
  unint64_t result = qword_1000A84E8;
  if (!qword_1000A84E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A84E8);
  }
  return result;
}

uint64_t sub_100072BBC()
{
  return swift_slowAlloc();
}

uint64_t sub_100072BFC()
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  return v0;
}

__n128 sub_100072C28@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 136);
  long long v3 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v1 + 217) = *(_OWORD *)(a1 + 161);
  *(__n128 *)(v1 + 192) = result;
  *(_OWORD *)(v1 + 208) = v3;
  *(void *)(v1 + 416) = *(void *)(v1 + 192);
  return result;
}

uint64_t sub_100072C7C()
{
  *(_WORD *)(v0 + 22) = 2082;
  return swift_getErrorValue();
}

uint64_t sub_100072CA4()
{
  return 0;
}

void sub_100072CC4(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, os_log_type_t type, uint64_t a17, uint64_t a18, os_log_t log)
{
  _os_log_impl(a1, log, type, a4, v19, 0x20u);
}

uint64_t sub_100072CE8(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100072D0C(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100072D30(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100072D54(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

BOOL sub_100072D78()
{
  return (!v1 & v0) != 0;
}

unint64_t sub_100072DB0()
{
  return 0xD000000000000012;
}

uint64_t sub_100072DC4()
{
  return swift_slowAlloc();
}

uint64_t sub_100072DF0()
{
  return swift_arrayDestroy();
}

uint64_t sub_100072E24()
{
  return swift_getObjectType();
}

uint64_t sub_100072E44()
{
  return v0;
}

uint64_t sub_100072E58(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwst_0(v1, 1, 1, a1);
}

uint64_t sub_100072E78()
{
  return v0;
}

uint64_t sub_100072E8C()
{
  *(void *)(v1 + 400) = v0;
  *uint64_t v2 = *(_OWORD *)(v1 + 216);
  return swift_retain();
}

uint64_t sub_100072EAC()
{
  return swift_release();
}

void *sub_100072ECC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    sub_100071E70(0, v5, 0);
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(a1 + 48);
    while (1)
    {
      int64_t v24 = v5;
      uint64_t v9 = v7;
      uint64_t v10 = *(v8 - 2);
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v13 = a2;
      uint64_t v7 = a2;
      uint64_t v14 = sub_10007364C(v10, v11, v12);
      if (v3) {
        break;
      }
      uint64_t v17 = v14;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v9;
      unint64_t v21 = v9[2];
      unint64_t v20 = v9[3];
      if (v21 >= v20 >> 1)
      {
        sub_100071E70((char *)(v20 > 1), v21 + 1, 1);
        uint64_t v7 = v9;
      }
      v7[2] = v21 + 1;
      uint64_t v22 = &v7[3 * v21];
      v22[4] = v17;
      v22[5] = v18;
      v22[6] = v19;
      v8 += 3;
      uint64_t v3 = 0;
      int64_t v5 = v24 - 1;
      a2 = v13;
      if (v24 == 1)
      {
        swift_release();
        return v7;
      }
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

uint64_t sub_10007305C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = (_OWORD *)(result + 40);
    uint64_t v7 = _swiftEmptyArrayStorage;
    while (v5 < *(void *)(v3 + 16))
    {
      uint64_t v8 = *((void *)v6 - 1);
      long long v14 = *v6;
      uint64_t v15 = v8;
      long long v16 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v9 = sub_100074930(&v15, a2);
      if (v2)
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if (v9)
      {
        __n128 result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v17 = v7;
        if ((result & 1) == 0)
        {
          __n128 result = (uint64_t)sub_100071E70(0, v7[2] + 1, 1);
          uint64_t v7 = v17;
        }
        unint64_t v11 = v7[2];
        unint64_t v10 = v7[3];
        if (v11 >= v10 >> 1)
        {
          __n128 result = (uint64_t)sub_100071E70((char *)(v10 > 1), v11 + 1, 1);
          uint64_t v7 = v17;
        }
        v7[2] = v11 + 1;
        uint64_t v12 = &v7[3 * v11];
        v12[4] = v8;
        *(_OWORD *)(v12 + 5) = v14;
      }
      else
      {
        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
      }
      ++v5;
      unsigned int v6 = (_OWORD *)((char *)v6 + 24);
      if (v4 == v5) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_release();
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  return result;
}

void sub_100073204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_1000160AC();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        sub_1000160AC();
        if (v15)
        {
          do
          {
            long long v16 = (void *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            sub_1000160AC();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

void sub_100073318(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v4 = static Hasher._hash(seed:_:)() & ~(-1 << *(unsigned char *)(a2 + 32));
    if (((*(void *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0
      && *(void *)(*(void *)(a2 + 48) + 8 * v4) != a1)
    {
      sub_100017CA4();
      if (v7)
      {
        do
        {
          if (*(void *)(v5 + 8 * v6) == a1) {
            break;
          }
          sub_100017CA4();
        }
        while ((v8 & 1) != 0);
      }
    }
  }
}

void *sub_1000733BC()
{
  uint64_t v0 = dlopen("../../AppleInternal/Library/Frameworks/RTCLocalBackend.framework/RTCLocalBackend", 1);
  if (v0) {
    return dlsym(v0, "initLocalBackend");
  }
  if (dlerror())
  {
    uint64_t v2 = String.init(cString:)();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v2 = 0x6E776F6E6B6E75;
  }
  if (qword_1000A60B8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100012884(v5, (uint64_t)qword_1000AF400);
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    char v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)char v8 = 136446210;
    swift_bridgeObjectRetain();
    sub_10001227C(v2, v4, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "failed to load RTCTTR framework: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

void *sub_1000735AC()
{
  __n128 result = sub_1000733BC();
  off_1000AF3F8 = result;
  return result;
}

uint64_t sub_1000735CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF400);
  sub_100012884(v0, (uint64_t)qword_1000AF400);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10007364C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[2] = a3;
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v5 = *(void *)(v3 + 152);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10000F43C(v7, (uint64_t)v11);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
      sub_100017740(v11, v12);
      (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v14, v8, v9);
      if (v4) {
        break;
      }
      sub_10001610C((uint64_t)v11);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return v14[0];
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001610C((uint64_t)v11);
  }
  else
  {
    uint64_t v7 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_10007377C(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  uint64_t v3 = type metadata accessor for EventValue();
  sub_10001130C(v3);
  v2[7] = v4;
  v2[8] = swift_task_alloc();
  sub_100016CE0(&qword_1000A6F68);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_10007387C, v1, 0);
}

uint64_t sub_10007387C()
{
  uint64_t v107 = v0;
  if (qword_1000A6080 != -1) {
    goto LABEL_76;
  }
LABEL_2:
  if (byte_1000AF3C8 != 1) {
    goto LABEL_63;
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[5];
  swift_retain();
  uint64_t v3 = sub_100072ECC(v1, v2);
  uint64_t v4 = v0[5];
  swift_retain();
  uint64_t v5 = sub_10007305C((uint64_t)v3, v4);
  uint64_t v6 = v5;
  v0[11] = v5;
  uint64_t v7 = *(void **)(v4 + 160);
  v0[12] = v7;
  if (!v7) {
    goto LABEL_62;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  v0[13] = v8;
  if (!v8) {
    goto LABEL_62;
  }
  v0[14] = 0;
  uint64_t v9 = *(void *)(v5 + 16);
  id v10 = v7;
  if (!v9)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    swift_bridgeObjectRelease();
LABEL_63:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100016568();
    __asm { BRAA            X1, X16 }
  }
  unint64_t v11 = v0 + 2;
  uint64_t v12 = v0 + 3;
  unint64_t v13 = sub_10004D488();
  unint64_t v14 = 0;
  uint64_t v100 = v13;
  uint64_t v101 = (uint64_t)(v0 + 2);
LABEL_7:
  uint64_t v15 = *(void *)(v6 + 24 * v14 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *unint64_t v11 = Dictionary.init(minimumCapacity:)();
  unint64_t v16 = *(void *)(v15 + 64);
  uint64_t v102 = v15 + 64;
  uint64_t v104 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = swift_bridgeObjectRelease();
  uint64_t v105 = 0;
  if (-v17 < 64) {
    uint64_t v26 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v26 = -1;
  }
  uint64_t v27 = v26 & v16;
  int64_t v103 = (unint64_t)(63 - v17) >> 6;
  uint64_t v99 = v103 - 1;
  while (1)
  {
    if (v27)
    {
      v27 &= v27 - 1;
      goto LABEL_13;
    }
    if (__OFADD__(v105, 1))
    {
      __break(1u);
LABEL_76:
      swift_once();
      goto LABEL_2;
    }
    sub_100017540();
    if (v30 != v31) {
      break;
    }
LABEL_32:
    uint64_t v35 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
    sub_1000094CC(v35);
    uint64_t v27 = 0;
LABEL_33:
    uint64_t v36 = v0[10];
    sub_100037BF4(v0[9], v36);
    uint64_t v37 = sub_100016CE0((uint64_t *)&unk_1000A78A0);
    if (_s10RTCUtility9XPCObjectOwet_0(v36, 1, v37) == 1)
    {
      swift_release();
      uint64_t v54 = sub_1000142E8();
      uint64_t v56 = -1 << v55;
      if (-(-1 << v55) < 64) {
        uint64_t v57 = ~(-1 << -(char)v56);
      }
      else {
        uint64_t v57 = -1;
      }
      unint64_t v58 = v57 & *(void *)(v54 + 64);
      unint64_t v44 = swift_bridgeObjectRetain();
      if (v58)
      {
        uint64_t v71 = 0;
        unint64_t v68 = __clz(__rbit64(v58));
        uint64_t v69 = (v58 - 1) & v58;
        goto LABEL_80;
      }
      unint64_t v59 = 63 - v56;
      if ((unint64_t)(63 - v56) > 0x7F)
      {
        unint64_t v46 = *(void *)(v44 + 72);
        if (v46) {
          goto LABEL_72;
        }
        if (v59 >= 0xC0)
        {
          unint64_t v46 = *(void *)(v44 + 80);
          if (v46) {
            goto LABEL_74;
          }
          if (v59 >= 0x100)
          {
            unint64_t v46 = *(void *)(v44 + 88);
            if (v46)
            {
              uint64_t v71 = 3;
              goto LABEL_79;
            }
            if (v59 >= 0x140)
            {
              unint64_t v46 = *(void *)(v44 + 96);
              if (v46)
              {
                uint64_t v71 = 4;
              }
              else
              {
                unint64_t v60 = v59 >> 6;
                uint64_t v61 = 13;
                do
                {
                  if (v61 - 8 >= v60) {
                    goto LABEL_59;
                  }
                  unint64_t v46 = *(void *)(v44 + 8 * v61++);
                }
                while (!v46);
                uint64_t v71 = v61 - 9;
              }
              goto LABEL_79;
            }
          }
        }
      }
LABEL_59:
      uint64_t v63 = v0[13];
      uint64_t v62 = v0[14];
      swift_release();
      swift_bridgeObjectRelease();
      if (v62 + 1 == v63)
      {
        uint64_t v70 = (void *)v0[12];
        swift_bridgeObjectRelease();

        goto LABEL_63;
      }
      unint64_t v14 = v0[14] + 1;
      v0[14] = v14;
      uint64_t v6 = v0[11];
      unint64_t v11 = (void *)v101;
      if (v14 >= *(void *)(v6 + 16)) {
        goto LABEL_61;
      }
      goto LABEL_7;
    }
    int64_t v38 = (uint64_t *)v0[10];
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    sub_100037C5C((uint64_t)v38 + *(int *)(v37 + 48), v0[8]);
    Class v41 = sub_10004B408();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v43 = v0[2];
    v0[2] = 0x8000000000000000;
    v0[3] = v43;
    sub_100014BA8();
    sub_10001459C();
    if (v31)
    {
      __break(1u);
LABEL_72:
      uint64_t v71 = 1;
      goto LABEL_79;
    }
    unint64_t v16 = v44;
    char v47 = v45;
    sub_100016CE0(&qword_1000A78C8);
    unint64_t v44 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v43);
    if (v44)
    {
      unint64_t v44 = sub_100014BA8();
      if ((v47 & 1) != (v48 & 1))
      {
        sub_100016568();
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v16 = v44;
    }
    uint64_t v49 = (void *)*v12;
    if (v47)
    {
      uint64_t v50 = v49[7];

      *(void *)(v50 + 8 * v16) = v41;
      goto LABEL_42;
    }
    v49[(v16 >> 6) + 8] |= 1 << v16;
    long long v51 = (void *)(v49[6] + 16 * v16);
    void *v51 = v39;
    v51[1] = v40;
    *(void *)(v49[7] + 8 * v16) = v41;
    uint64_t v52 = v49[2];
    BOOL v31 = __OFADD__(v52, 1);
    unint64_t v46 = v52 + 1;
    if (v31)
    {
      __break(1u);
LABEL_74:
      uint64_t v71 = 2;
LABEL_79:
      uint64_t v69 = (v46 - 1) & v46;
      unint64_t v68 = __clz(__rbit64(v46)) + (v71 << 6);
LABEL_80:
      v0[16] = v71;
      v0[17] = v69;
      uint64_t v72 = (unint64_t *)(*(void *)(v44 + 48) + 16 * v68);
      unint64_t v16 = *v72;
      uint64_t v12 = (void *)v72[1];
      v0[18] = v12;
      uint64_t v73 = *(void **)(*(void *)(v44 + 56) + 8 * v68);
      v0[19] = v73;
      uint64_t v74 = qword_1000A60B8;
      swift_bridgeObjectRetain();
      id v75 = v73;
      if (v74 != -1) {
        goto LABEL_88;
      }
      goto LABEL_81;
    }
    v49[2] = v46;
    swift_bridgeObjectRetain();
LABEL_42:
    uint64_t v53 = v0[8];
    v0[2] = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_100037CC0(v53);
  }
  uint64_t v32 = *(void *)(v102 + 8 * v29);
  if (v32) {
    goto LABEL_18;
  }
  uint64_t v33 = v29 + 1;
  uint64_t v105 = v29;
  if (v29 + 1 >= v103) {
    goto LABEL_32;
  }
  uint64_t v32 = *(void *)(v102 + 8 * v33);
  if (v32)
  {
LABEL_21:
    uint64_t v29 = v33;
    goto LABEL_18;
  }
  uint64_t v105 = v29 + 1;
  if (v29 + 2 >= v103) {
    goto LABEL_32;
  }
  uint64_t v32 = *(void *)(v102 + 8 * (v29 + 2));
  if (v32)
  {
    v29 += 2;
LABEL_18:
    uint64_t v27 = (v32 - 1) & v32;
    uint64_t v105 = v29;
LABEL_13:
    uint64_t v28 = sub_100017E60(v18, v19, v20, v21, v22, v23, v24, v25, v99, v100, v101, v102, v103, v104);
    sub_10001694C(v28);
    sub_1000114D8();
    goto LABEL_33;
  }
  uint64_t v33 = v29 + 3;
  uint64_t v105 = v29 + 2;
  if (v29 + 3 >= v103) {
    goto LABEL_32;
  }
  uint64_t v32 = *(void *)(v102 + 8 * v33);
  if (v32) {
    goto LABEL_21;
  }
  while (!__OFADD__(v33, 1))
  {
    sub_100017540();
    if (v30 == v31)
    {
      uint64_t v105 = v99;
      goto LABEL_32;
    }
    uint64_t v32 = *(void *)(v102 + 8 * v29);
    uint64_t v33 = v34 + 1;
    if (v32) {
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_88:
  swift_once();
LABEL_81:
  uint64_t v76 = type metadata accessor for Logger();
  sub_100012884(v76, (uint64_t)qword_1000AF400);
  swift_bridgeObjectRetain_n();
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    *(_DWORD *)uint64_t v79 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v79 + 4) = sub_10001227C(v16, (unint64_t)v12, &v106);
    swift_bridgeObjectRelease_n();
    sub_100016760((void *)&_mh_execute_header, v80, v81, "running TTR rule \"%{public}s\"");
    swift_arrayDestroy();
    sub_100009474();
    sub_100009474();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_100075424();
  Swift::String v82 = (void *)swift_task_alloc();
  sub_100014DC8(v82, v83, v84, v85, v86, v87, v88, v89, v99, v100, v101);
  char v90 = (void *)swift_task_alloc();
  v0[21] = v90;
  *char v90 = v0;
  v90[1] = sub_1000740A4;
  sub_10001ABC4();
  sub_100016568();
  return withCheckedContinuation<A>(isolation:function:_:)(v91, v92, v93, v94, v95, v96, v97, v98);
}

uint64_t sub_1000740A4()
{
  sub_100017D58();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000741D0, v1, 0);
}

uint64_t sub_1000741D0()
{
  uint64_t v90 = v2;
  uint64_t v84 = (uint64_t *)(v2 + 16);

  int64_t v3 = *(void *)(v2 + 128);
  unint64_t v4 = *(void *)(v2 + 136);
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + 120);
    goto LABEL_3;
  }
  uint64_t v18 = (uint64_t *)&unk_1000A78A0;
LABEL_8:
  BOOL v19 = __OFADD__(v3++, 1);
  if (v19) {
    goto LABEL_79;
  }
  unint64_t v20 = (1 << *(unsigned char *)(v2 + 176)) + 63;
  uint64_t v5 = *(void *)(v2 + 120);
  if (v3 < (uint64_t)(v20 >> 6))
  {
    uint64_t v21 = v5 + 64;
    unint64_t v22 = *(void *)(v5 + 64 + 8 * v3);
    if (v22) {
      goto LABEL_72;
    }
    int64_t v23 = v20 >> 6;
    int64_t v24 = v3 + 1;
    if (v3 + 1 < v23)
    {
      unint64_t v22 = *(void *)(v21 + 8 * v24);
      if (v22) {
        goto LABEL_71;
      }
      int64_t v24 = v3 + 2;
      if (v3 + 2 < v23)
      {
        unint64_t v22 = *(void *)(v21 + 8 * v24);
        if (v22)
        {
LABEL_71:
          int64_t v3 = v24;
          goto LABEL_72;
        }
        v3 += 3;
        if (v3 < v23)
        {
          unint64_t v22 = *(void *)(v21 + 8 * v3);
          if (!v22)
          {
            while (1)
            {
              int64_t v24 = v3 + 1;
              if (__OFADD__(v3, 1)) {
                break;
              }
              if (v24 >= v23) {
                goto LABEL_21;
              }
              unint64_t v22 = *(void *)(v21 + 8 * v24);
              ++v3;
              if (v22) {
                goto LABEL_71;
              }
            }
LABEL_81:
            __break(1u);
LABEL_82:
            swift_once();
LABEL_5:
            uint64_t v12 = type metadata accessor for Logger();
            sub_100012884(v12, (uint64_t)qword_1000AF400);
            swift_bridgeObjectRetain_n();
            unint64_t v13 = Logger.logObject.getter();
            os_log_type_t v14 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v13, v14))
            {
              uint64_t v15 = swift_slowAlloc();
              uint64_t v89 = swift_slowAlloc();
              *(_DWORD *)uint64_t v15 = 136446210;
              swift_bridgeObjectRetain();
              *(void *)(v15 + 4) = sub_10001227C(v1, v0, &v89);
              swift_bridgeObjectRelease_n();
              sub_100016760((void *)&_mh_execute_header, v16, v17, "running TTR rule \"%{public}s\"");
              swift_arrayDestroy();
              sub_100009474();
              sub_100009474();
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            sub_100075424();
            unint64_t v68 = (void *)swift_task_alloc();
            sub_100014DC8(v68, v69, v70, v71, v72, v73, v74, v75, v82, v83, (uint64_t)v84);
            uint64_t v76 = (void *)swift_task_alloc();
            *(void *)(v2 + 168) = v76;
            *uint64_t v76 = v2;
            v76[1] = sub_1000740A4;
            sub_10001ABC4();
            sub_100016568();
            return withCheckedContinuation<A>(isolation:function:_:)(v29, v30, v31, v32, v33, v34, v35, v36);
          }
LABEL_72:
          uint64_t v6 = (v22 - 1) & v22;
          unint64_t v7 = __clz(__rbit64(v22)) + (v3 << 6);
LABEL_4:
          *(void *)(v2 + 128) = v3;
          *(void *)(v2 + 136) = v6;
          uint64_t v8 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v7);
          uint64_t v1 = *v8;
          unint64_t v0 = v8[1];
          *(void *)(v2 + 144) = v0;
          uint64_t v9 = *(void **)(*(void *)(v5 + 56) + 8 * v7);
          *(void *)(v2 + 152) = v9;
          uint64_t v10 = qword_1000A60B8;
          swift_bridgeObjectRetain();
          id v11 = v9;
          if (v10 == -1) {
            goto LABEL_5;
          }
          goto LABEL_82;
        }
      }
    }
  }
LABEL_21:
  uint64_t v1 = *(void *)(v2 + 104);
  uint64_t v25 = *(void *)(v2 + 112);
  swift_release();
  swift_bridgeObjectRelease();
  if (v25 + 1 == v1)
  {
    uint64_t v79 = *(void **)(v2 + 96);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100016568();
    __asm { BRAA            X1, X16 }
  }
  unint64_t v26 = *(void *)(v2 + 112) + 1;
  *(void *)(v2 + 112) = v26;
  uint64_t v27 = *(void *)(v2 + 88);
  if (v26 >= *(void *)(v27 + 16)) {
    goto LABEL_80;
  }
  unint64_t v0 = *(void *)(v27 + 24 * v26 + 48);
  sub_10004D488();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *uint64_t v84 = Dictionary.init(minimumCapacity:)();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v85 = v0 + 64;
  uint64_t v87 = v0;
  uint64_t v28 = -1 << *(unsigned char *)(v0 + 32);
  uint64_t v29 = swift_bridgeObjectRelease();
  uint64_t v88 = 0;
  if (-v28 < 64) {
    uint64_t v37 = ~(-1 << -(char)v28);
  }
  else {
    uint64_t v37 = -1;
  }
  uint64_t v38 = v37 & v1;
  int64_t v86 = (unint64_t)(63 - v28) >> 6;
  uint64_t v83 = v86 - 1;
  if ((v37 & v1) != 0)
  {
LABEL_27:
    v38 &= v38 - 1;
LABEL_28:
    uint64_t v39 = sub_100017E60(v29, v30, v31, v32, v33, v34, v35, v36, v82, v83, (uint64_t)v84, v85, v86, v87);
    sub_10001694C(v39);
    sub_1000114D8();
    goto LABEL_48;
  }
  while (1)
  {
    if (__OFADD__(v88, 1)) {
      goto LABEL_78;
    }
    sub_100017540();
    if (v41 != v19)
    {
      uint64_t v42 = *(void *)(v85 + 8 * v40);
      if (v42) {
        goto LABEL_33;
      }
      uint64_t v43 = v40 + 1;
      uint64_t v88 = v40;
      if (v40 + 1 < v86)
      {
        uint64_t v42 = *(void *)(v85 + 8 * v43);
        if (v42) {
          goto LABEL_36;
        }
        uint64_t v88 = v40 + 1;
        if (v40 + 2 < v86)
        {
          uint64_t v42 = *(void *)(v85 + 8 * (v40 + 2));
          if (v42)
          {
            v40 += 2;
            goto LABEL_33;
          }
          uint64_t v43 = v40 + 3;
          uint64_t v88 = v40 + 2;
          if (v40 + 3 < v86)
          {
            uint64_t v42 = *(void *)(v85 + 8 * v43);
            if (!v42)
            {
              while (!__OFADD__(v43, 1))
              {
                sub_100017540();
                if (v41 == v19)
                {
                  uint64_t v88 = v83;
                  goto LABEL_47;
                }
                uint64_t v42 = *(void *)(v85 + 8 * v40);
                uint64_t v43 = v44 + 1;
                if (v42) {
                  goto LABEL_33;
                }
              }
              __break(1u);
              return withCheckedContinuation<A>(isolation:function:_:)(v29, v30, v31, v32, v33, v34, v35, v36);
            }
LABEL_36:
            uint64_t v40 = v43;
LABEL_33:
            uint64_t v38 = (v42 - 1) & v42;
            uint64_t v88 = v40;
            goto LABEL_28;
          }
        }
      }
    }
LABEL_47:
    uint64_t v45 = sub_100016CE0(v18);
    sub_1000094CC(v45);
    uint64_t v38 = 0;
LABEL_48:
    uint64_t v1 = *(void *)(v2 + 80);
    sub_100037BF4(*(void *)(v2 + 72), v1);
    uint64_t v46 = sub_100016CE0(v18);
    if (_s10RTCUtility9XPCObjectOwet_0(v1, 1, v46) == 1)
    {
      swift_release();
      uint64_t v64 = sub_1000142E8();
      uint64_t v66 = 1 << v65;
      if (v66 < 64) {
        uint64_t v67 = ~(-1 << v66);
      }
      else {
        uint64_t v67 = -1;
      }
      unint64_t v4 = v67 & *(void *)(v64 + 64);
      uint64_t v5 = swift_bridgeObjectRetain();
      int64_t v3 = 0;
      if (v4)
      {
LABEL_3:
        uint64_t v6 = (v4 - 1) & v4;
        unint64_t v7 = __clz(__rbit64(v4)) | (v3 << 6);
        goto LABEL_4;
      }
      goto LABEL_8;
    }
    unint64_t v0 = (unint64_t)v18;
    char v47 = *(uint64_t **)(v2 + 80);
    uint64_t v49 = *v47;
    uint64_t v48 = v47[1];
    sub_100037C5C((uint64_t)v47 + *(int *)(v46 + 48), *(void *)(v2 + 64));
    uint64_t v1 = (uint64_t)sub_10004B408();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v51 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0x8000000000000000;
    *(void *)(v2 + 24) = v51;
    sub_100014BA8();
    sub_10001459C();
    if (v19)
    {
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    unint64_t v54 = v52;
    char v55 = v53;
    sub_100016CE0(&qword_1000A78C8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v51)) {
      break;
    }
LABEL_53:
    unint64_t v58 = *(void **)(v2 + 24);
    if (v55)
    {
      uint64_t v59 = v58[7];

      *(void *)(v59 + 8 * v54) = v1;
    }
    else
    {
      v58[(v54 >> 6) + 8] |= 1 << v54;
      unint64_t v60 = (void *)(v58[6] + 16 * v54);
      *unint64_t v60 = v49;
      v60[1] = v48;
      *(void *)(v58[7] + 8 * v54) = v1;
      uint64_t v61 = v58[2];
      BOOL v19 = __OFADD__(v61, 1);
      uint64_t v62 = v61 + 1;
      if (v19) {
        goto LABEL_77;
      }
      v58[2] = v62;
      swift_bridgeObjectRetain();
    }
    uint64_t v63 = *(void *)(v2 + 64);
    *(void *)(v2 + 16) = v58;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = sub_100037CC0(v63);
    uint64_t v18 = (uint64_t *)v0;
    if (v38) {
      goto LABEL_27;
    }
  }
  unint64_t v56 = sub_100014BA8();
  if ((v55 & 1) == (v57 & 1))
  {
    unint64_t v54 = v56;
    goto LABEL_53;
  }
  sub_100016568();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_100074930(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = sub_100049DF4(*a1, a1[1], a1[2]);
  if (v4) {
    return 1;
  }
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a2 + 112);
  if (*(void *)(v6 + 16))
  {
    sub_100073318(v3, v6);
    if ((v7 & 1) == 0)
    {
      if (qword_1000A60B8 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100012884(v19, (uint64_t)qword_1000AF400);
      swift_retain_n();
      id v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 12) = 2082;
        swift_retain();
        unint64_t v20 = sub_100075370();
        unint64_t v22 = v21;
        swift_release();
        sub_10001227C(v20, v22, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        uint64_t v17 = "removing event with category %ld from submission to %{public}s due to allowlist";
        goto LABEL_15;
      }
LABEL_16:

      swift_release_n();
      return 0;
    }
  }
  uint64_t v8 = *(void *)(a2 + 120);
  if (!*(void *)(v8 + 16)) {
    return 1;
  }
  sub_100073318(v5, v8);
  if ((v9 & 1) == 0) {
    return 1;
  }
  if (qword_1000A60B8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100012884(v10, (uint64_t)qword_1000AF400);
  swift_retain_n();
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v11, v12)) {
    goto LABEL_16;
  }
  uint64_t v13 = swift_slowAlloc();
  uint64_t v23 = swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 134218242;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v13 + 12) = 2082;
  swift_retain();
  unint64_t v14 = sub_100075370();
  unint64_t v16 = v15;
  swift_release();
  sub_10001227C(v14, v16, &v23);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  uint64_t v17 = "removing event with category %ld from submission to %{public}s due to denylist";
LABEL_15:
  _os_log_impl((void *)&_mh_execute_header, v11, v12, v17, (uint8_t *)v13, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return 0;
}

void sub_100074CB0()
{
  uint64_t v0 = sub_100016CE0(&qword_1000A85F8);
  __chkstk_darwin(v0);
  self;
  swift_dynamicCastObjCClassUnconditional();
  sub_10004D488();
  static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
}

uint64_t sub_100074F2C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (qword_1000A60B8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100012884(v5, (uint64_t)qword_1000AF400);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    swift_bridgeObjectRetain();
    sub_10001227C(a2, a3, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 1026;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "TTR rule \"%{public}s\" processed event with status: %{BOOL,public}d", (uint8_t *)v8, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100016CE0(&qword_1000A85F8);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100075118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_10007516C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000751BC()
{
  sub_10007516C();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BackendTTR()
{
  return self;
}

uint64_t sub_10007520C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000752A0;
  return sub_10007377C(a1);
}

uint64_t sub_1000752A0()
{
  sub_100017D58();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_100075370()
{
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void **)(v0 + 136);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000016;
}

unint64_t sub_100075400()
{
  return sub_100075370();
}

unint64_t sub_100075424()
{
  unint64_t result = qword_1000A85F0;
  if (!qword_1000A85F0)
  {
    type metadata accessor for BackendTTR();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A85F0);
  }
  return result;
}

void sub_100075470()
{
}

uint64_t sub_100075484()
{
  uint64_t v1 = sub_100016CE0(&qword_1000A85F8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100075560(uint64_t a1)
{
  uint64_t v3 = sub_100016CE0(&qword_1000A85F8);
  sub_10001130C(v3);
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = *(void *)(v1 + 24);

  return sub_100074F2C(a1, v4, v5);
}

void sub_1000755E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  sub_10004D488();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a6 handleEvent:isa sender:v9 ruleConfig:v10 withReplyBlock:a5];
}

uint64_t sub_1000756E4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 40);
  swift_retain();
  os_unfair_lock_lock(v1 + 6);
  sub_100076420();
  os_unfair_lock_unlock(v1 + 6);

  return swift_release();
}

uint64_t sub_100075764()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000A8600);
  sub_100012884(v0, (uint64_t)qword_1000A8600);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000757DC(char a1)
{
  uint64_t v3 = v1;
  uint64_t v24 = type metadata accessor for DispatchQoS.QoSClass();
  sub_100014C1C();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100017E9C();
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100014C1C();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_10001615C();
  uint64_t v22 = v11 - v10;
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v12);
  sub_10001615C();
  uint64_t v13 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v13 - 8);
  sub_10001615C();
  sub_100032FC8();
  static DispatchQoS.background.getter();
  sub_1000765C0();
  sub_100016CE0(&qword_1000A6C40);
  sub_100033050();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v22, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v23);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v2, enum case for DispatchQoS.QoSClass.background(_:), v24);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v24);
  unint64_t v14 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v3 + 16) = v14;
  *(void *)(v3 + 24) = 0;
  sub_100016CE0(&qword_1000A86E8);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = 0;
  *(void *)(v3 + 32) = v15;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10007F49C((unint64_t)_swiftEmptyArrayStorage);
    unint64_t v16 = v20;
  }
  else
  {
    unint64_t v16 = &_swiftEmptySetSingleton;
  }
  sub_100016CE0(&qword_1000A86F0);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(void *)(v17 + 16) = v16;
  *(void *)(v3 + 40) = v17;
  *(unsigned char *)(v3 + 48) = a1 & 1;
  type metadata accessor for XPCConnection();
  swift_allocObject();
  id v18 = v14;
  swift_retain();
  *(void *)(v3 + 24) = XPCConnection.init(machService:targetQ:listen:delegate:)(0xD000000000000017, 0x8000000100089110, v18, 1, v3, (uint64_t)&off_1000A1698);
  swift_release();
  return v3;
}

void sub_100075B38(void *a1)
{
  xpc_copy_description(a1);
  uint64_t v1 = String.init(cString:)();
  uint64_t v3 = v2;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100075BE0(_xpc_connection_s *a1)
{
  uint64_t v4 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  __chkstk_darwin(v4 - 8);
  sub_100017E9C();
  uint64_t v5 = type metadata accessor for XPCObject();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v31 - v9;
  uint64_t v11 = sub_100016CE0(&qword_1000A7EE0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)v31 - v15;
  swift_unknownObjectRetain();
  XPCIncomingConnection.entitlementValue(forKey:)((uint64_t)v16);
  sub_100032BF4((uint64_t)v16, (uint64_t)v14);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v14, 1, v5) == 1)
  {
    sub_10007643C((uint64_t)v14);
LABEL_14:
    pid_t pid = xpc_connection_get_pid(a1);
    if (qword_1000A60C0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100012884(v24, (uint64_t)qword_1000A8600);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 67240192;
      uint64_t v31[3] = pid;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "connection attempted by unentitled process %{public}d", v27, 8u);
      swift_slowDealloc();
    }

    xpc_connection_cancel(a1);
    swift_unknownObjectRelease();
    return sub_10007643C((uint64_t)v16);
  }
  sub_100017EE8((uint64_t)v14, (uint64_t)v10);
  sub_100057464((uint64_t)v10, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_100032B10((uint64_t)v10);
    uint64_t v22 = (uint64_t)v8;
LABEL_13:
    sub_100032B10(v22);
    goto LABEL_14;
  }
  if ((*v8 & 1) == 0)
  {
    uint64_t v22 = (uint64_t)v10;
    goto LABEL_13;
  }
  if (*(unsigned char *)(v1 + 48))
  {
    pid_t v17 = xpc_connection_get_pid(a1);
    if (qword_1000A60C0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100012884(v18, (uint64_t)qword_1000A8600);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v21 = 67240192;
      void v31[2] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "rejecting connection from %{public}d while reporting is disabled", v21, 8u);
      swift_slowDealloc();
    }

    xpc_connection_cancel(a1);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v29 = type metadata accessor for TaskPriority();
    _s10RTCUtility9XPCObjectOwst_0(v2, 1, 1, v29);
    uint64_t v30 = (void *)swift_allocObject();
    v30[2] = 0;
    v30[3] = 0;
    v30[4] = v1;
    v30[5] = a1;
    swift_unknownObjectRetain();
    swift_retain();
    sub_10000FF80(v2, (uint64_t)&unk_1000A86E0, (uint64_t)v30);
    swift_unknownObjectRelease();
    swift_release();
  }
  sub_100032B10((uint64_t)v10);
  return sub_10007643C((uint64_t)v16);
}

uint64_t sub_100076060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for Client();
  swift_allocObject();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  void *v5 = v4;
  v5[1] = sub_100076138;
  return sub_100030A0C();
}

uint64_t sub_100076138()
{
  sub_100017D58();
  *(void *)(v1 + 32) = v0;
  swift_task_dealloc();
  return _swift_task_switch(sub_100076214, 0, 0);
}

uint64_t sub_100076214()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 16) + 40);
  swift_retain();
  os_unfair_lock_lock(v1 + 6);
  sub_1000765A4((uint64_t)&v1[4]);
  os_unfair_lock_unlock(v1 + 6);
  swift_release();
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000762F8(uint64_t a1, uint64_t a2)
{
  swift_retain();
  sub_10005BB20(&v4, a2);
  return swift_release();
}

uint64_t sub_100076348()
{
  return swift_release();
}

uint64_t sub_10007637C()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000763B4()
{
  sub_10007637C();

  return _swift_deallocClassInstance(v0, 49, 7);
}

uint64_t type metadata accessor for Listener()
{
  return self;
}

void sub_10007640C(void *a1)
{
}

uint64_t sub_100076420()
{
  return sub_100076348();
}

uint64_t sub_10007643C(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A7EE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007649C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000764E4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000752A0;
  return sub_100076060(a1, v4, v5, v6);
}

uint64_t sub_1000765A4(uint64_t a1)
{
  return sub_1000762F8(a1, v1);
}

unint64_t sub_1000765C0()
{
  unint64_t result = qword_1000A6C38;
  if (!qword_1000A6C38)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6C38);
  }
  return result;
}

uint64_t destroy for RawStorebag._EncodedRawStorebag()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RawStorebag._EncodedRawStorebag(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RawStorebag._EncodedRawStorebag(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for RawStorebag._EncodedRawStorebag(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RawStorebag._EncodedRawStorebag(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RawStorebag._EncodedRawStorebag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RawStorebag._EncodedRawStorebag()
{
  return &type metadata for RawStorebag._EncodedRawStorebag;
}

uint64_t sub_1000767D4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6775138 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000768C0(char a1)
{
  if (a1) {
    return 0x727574616E676973;
  }
  else {
    return 6775138;
  }
}

uint64_t sub_1000768F4(void *a1)
{
  uint64_t v3 = sub_100016CE0(&qword_1000A86F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_100017740(a1, a1[3]);
  sub_100076BD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001610C((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_10001610C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_100076AFC()
{
  return sub_1000768C0(*v0);
}

uint64_t sub_100076B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000767D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100076B2C(uint64_t a1)
{
  unint64_t v2 = sub_100076BD4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100076B68(uint64_t a1)
{
  unint64_t v2 = sub_100076BD4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100076BA4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000768F4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_100076BD4()
{
  unint64_t result = qword_1000A8700;
  if (!qword_1000A8700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8700);
  }
  return result;
}

uint64_t destroy for RawStorebag(uint64_t *a1)
{
  sub_1000088D0(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];

  return sub_1000088D0(v2, v3);
}

uint64_t *initializeWithCopy for RawStorebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10002779C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_10002779C(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for RawStorebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10002779C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1000088D0(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_10002779C(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_1000088D0(v10, v11);
  return a1;
}

uint64_t *assignWithTake for RawStorebag(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000088D0(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_1000088D0(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RawStorebag(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(unsigned char *)(a1 + 32))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for RawStorebag(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RawStorebag()
{
  return &type metadata for RawStorebag;
}

unsigned char *storeEnumTagSinglePayload for RawStorebag._EncodedRawStorebag.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100076EE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RawStorebag._EncodedRawStorebag.CodingKeys()
{
  return &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys;
}

unint64_t sub_100076F20()
{
  unint64_t result = qword_1000A8708;
  if (!qword_1000A8708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8708);
  }
  return result;
}

unint64_t sub_100076F70()
{
  unint64_t result = qword_1000A8710;
  if (!qword_1000A8710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8710);
  }
  return result;
}

unint64_t sub_100076FC0()
{
  unint64_t result = qword_1000A8718[0];
  if (!qword_1000A8718[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000A8718);
  }
  return result;
}

uint64_t sub_10007700C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100077014()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1000770A8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *int v3 = *(void *)a2;
    int v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      uint64_t v14 = *((void *)a2 + 1);
      *int v3 = *(void *)a2;
      v3[1] = v14;
      *((unsigned char *)v3 + v5) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_100077224(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_100077324(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v10;
    swift_bridgeObjectRetain();
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v4) = v11;
  return a1;
}

unsigned __int8 *sub_100077460(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_bridgeObjectRelease();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      a1[v7] = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

_OWORD *sub_100077684(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_1000777BC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_bridgeObjectRelease();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_1000779D4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_100077B08(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if (a3 < 0xFF)
  {
    int v8 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v9 = a2 - 255;
    if (v6 < 4)
    {
      int v10 = (v9 >> v7) + 1;
      if (v5 != -1)
      {
        int v12 = v9 & ~(-1 << v7);
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v6] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v10;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x100077CCCLL);
      case 4:
        *(_DWORD *)&a1[v6] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_100077CF4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 16;
  if (*(void *)(v2 + 64) > 0x10uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_100077DAC(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    size_t v4 = 16;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for StorebagSectionMaybeShared()
{
  return sub_100079AA8();
}

uint64_t sub_100077E9C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100077F20(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    a1[6] = a2[6];
    a1[7] = v7;
    uint64_t v8 = a2[9];
    a1[8] = a2[8];
    a1[9] = v8;
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v9;
    a1[10] = a2[10];
  }
  return a1;
}

void *sub_100077FF8(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 6;
  uint64_t v5 = a2 + 6;
  uint64_t v6 = a2[7];
  if (a1[7])
  {
    if (v6)
    {
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000781A8((uint64_t)(a1 + 6));
      uint64_t v7 = a2[10];
      long long v8 = *((_OWORD *)a2 + 4);
      _OWORD *v4 = *v5;
      *((_OWORD *)a1 + 4) = v8;
      a1[10] = v7;
    }
  }
  else if (v6)
  {
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *((_OWORD *)a2 + 4);
    a1[10] = a2[10];
    _OWORD *v4 = v9;
    *((_OWORD *)a1 + 4) = v10;
  }
  return a1;
}

uint64_t sub_1000781A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000781D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 56)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 56);
  if (!v5)
  {
    sub_1000781A8(a1 + 48);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    return a1;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000782C8(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100078308(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionFilter()
{
}

void *sub_100078368(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100078400(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for StorebagSectionCondition()
{
}

uint64_t sub_10007846C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  int v17 = a2;
  uint64_t v22 = type metadata accessor for StorebagSectionMaybeShared();
  sub_100014C1C();
  uint64_t v5 = v4;
  uint64_t v7 = __chkstk_darwin(v6);
  long long v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v18 = (uint64_t *)((char *)&v17 - v10);
  sub_100017740(a1, a1[3]);
  sub_1000140DC();
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    swift_errorRelease();
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    sub_100079988((uint64_t)v19);
    sub_10000F43C((uint64_t)a1, (uint64_t)v21);
    dispatch thunk of Decodable.init(from:)();
    uint64_t v12 = v22;
    swift_storeEnumTagMultiPayload();
    unsigned int v13 = *(void (**)(uint64_t *, char *, uint64_t))(v5 + 32);
    unsigned int v14 = v18;
    v13(v18, v9, v12);
  }
  else
  {
    sub_10000F3BC(v19, (uint64_t)v21);
    sub_100017740(v21, v21[3]);
    sub_1000140DC();
    uint64_t v11 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    unsigned int v14 = v18;
    uint64_t *v18 = v11;
    v14[1] = v15;
    uint64_t v12 = v22;
    swift_storeEnumTagMultiPayload();
    sub_10001610C((uint64_t)v21);
    unsigned int v13 = *(void (**)(uint64_t *, char *, uint64_t))(v5 + 32);
  }
  v13(v17, (char *)v14, v12);
  return sub_10001610C((uint64_t)a1);
}

unint64_t sub_100078678(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009E480, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000786C8(char a1)
{
  uint64_t result = 1937335659;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_100011510();
      break;
    case 2:
      uint64_t result = sub_10001754C();
      break;
    case 3:
      uint64_t result = sub_100017CC0();
      break;
    case 4:
      uint64_t result = sub_100019D88();
      break;
    case 5:
      uint64_t result = sub_1000160DC();
      break;
    case 6:
      uint64_t result = sub_100016298();
      break;
    case 7:
      uint64_t result = sub_100016488();
      break;
    case 8:
      uint64_t result = sub_100017170();
      break;
    case 9:
      uint64_t result = 0x6F697469646E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100078760(char a1)
{
  uint64_t result = 1937335659;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_100011510();
      break;
    case 2:
      uint64_t result = sub_10001754C();
      break;
    case 3:
      uint64_t result = sub_100017CC0();
      break;
    case 4:
      uint64_t result = sub_100019D88();
      break;
    case 5:
      uint64_t result = sub_1000160DC();
      break;
    case 6:
      uint64_t result = sub_100016298();
      break;
    case 7:
      uint64_t result = sub_100016488();
      break;
    case 8:
      uint64_t result = sub_100017170();
      break;
    case 9:
      uint64_t result = 0x6F697469646E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000787F8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10007846C(a1, a2);
}

uint64_t sub_100078818(unsigned __int8 *a1, char *a2)
{
  return sub_10006B830(*a1, *a2);
}

Swift::Int sub_100078824()
{
  return sub_100049688(*v0);
}

uint64_t sub_10007882C()
{
  return sub_1000499B4();
}

Swift::Int sub_100078834(uint64_t a1)
{
  return sub_100049CB8(a1, *v1);
}

unint64_t sub_10007883C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078678(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007886C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000786C8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100078898()
{
  return sub_100078760(*v0);
}

uint64_t sub_1000788A0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000786C4(a1);
  *a2 = result;
  return result;
}

void sub_1000788C8(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1000788D4(uint64_t a1)
{
  unint64_t v2 = sub_1000798F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100078910(uint64_t a1)
{
  unint64_t v2 = sub_1000798F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007894C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_100016CE0(&qword_1000A87A0);
  sub_100014C1C();
  __chkstk_darwin(v5);
  sub_100017740(a1, a1[3]);
  sub_1000798F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10001610C((uint64_t)a1);
  }
  unint64_t v58 = a2;
  sub_100016CE0(&qword_1000A6798);
  sub_100052150((unint64_t *)&qword_1000A7A00, &qword_1000A6798);
  sub_10001ABF8();
  if (v59) {
    sub_1000790B4(v59);
  }
  sub_10001696C();
  sub_1000790B4(v59);
  uint64_t v6 = sub_1000095C4(1);
  uint64_t v52 = v7;
  uint64_t v55 = v6;
  uint64_t v8 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1000142FC();
    uint64_t v8 = v38;
  }
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  unint64_t v11 = v10 + 1;
  if (v10 >= v9 >> 1)
  {
    sub_1000165E0(v9);
    unint64_t v51 = v39;
    sub_10001E8DC();
    unint64_t v11 = v51;
    uint64_t v8 = v40;
  }
  _OWORD v8[2] = v11;
  uint64_t v12 = &v8[2 * v10];
  v12[4] = v55;
  v12[5] = v52;
  uint64_t v66 = v8;
  sub_10001ABF8();
  if (v59) {
    sub_1000790B4(v59);
  }
  sub_10001696C();
  sub_1000790B4(v59);
  uint64_t v13 = sub_1000095C4(3);
  uint64_t v15 = v14;
  int v16 = _swiftEmptyArrayStorage;
  uint64_t v56 = v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1000142FC();
    int v16 = v41;
  }
  unint64_t v18 = v16[2];
  unint64_t v17 = v16[3];
  if (v18 >= v17 >> 1)
  {
    sub_1000165E0(v17);
    sub_10001E8DC();
    int v16 = v42;
  }
  v16[2] = v18 + 1;
  uint64_t v19 = &v16[2 * v18];
  v19[4] = v56;
  v19[5] = v15;
  char v65 = v16;
  uint64_t v64 = _swiftEmptyArrayStorage;
  sub_100016CE0(&qword_1000A7A78);
  sub_100052150(&qword_1000A7A80, &qword_1000A7A78);
  sub_10001ABF8();
  if (v59) {
    sub_100079190(v59);
  }
  uint64_t v20 = sub_100015268(5);
  if ((v21 & 1) == 0)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    uint64_t v57 = v20;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100016780();
      uint64_t v22 = v43;
    }
    unint64_t v24 = v22[2];
    unint64_t v23 = v22[3];
    uint64_t v25 = v24 + 1;
    if (v24 >= v23 >> 1)
    {
      char v44 = sub_1000165E0(v23);
      uint64_t v54 = v45;
      sub_10001EF24(v44, v45, 1, (uint64_t)v22);
      uint64_t v25 = v54;
      uint64_t v22 = v46;
    }
    v22[2] = v25;
    v22[v24 + 4] = v57;
    uint64_t v64 = v22;
  }
  sub_10001ABF8();
  if (v59) {
    sub_100079190(v59);
  }
  uint64_t v26 = sub_100015268(7);
  uint64_t v29 = _swiftEmptyArrayStorage;
  if ((v27 & 1) == 0)
  {
    uint64_t v30 = v26;
    uint64_t v31 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100016780();
      uint64_t v31 = v47;
    }
    uint64_t v29 = v31;
    unint64_t v33 = v31[2];
    unint64_t v32 = v31[3];
    if (v33 >= v32 >> 1)
    {
      char v48 = sub_1000165E0(v32);
      sub_10001EF24(v48, v33 + 1, 1, (uint64_t)v31);
      uint64_t v29 = v49;
    }
    void v29[2] = v33 + 1;
    v29[v33 + 4] = v30;
  }
  LOBYTE(v59) = 8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v53 = v35;
  uint64_t v50 = v34;
  sub_10007993C();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v36 = sub_100019AFC();
  v37(v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100028DF0(v59, v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001610C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_100028E54(v59, v60);
  *unint64_t v58 = v66;
  v58[1] = v65;
  v58[2] = v64;
  v58[3] = v29;
  v58[4] = v50;
  v58[5] = v53;
  v58[6] = v59;
  v58[7] = v60;
  v58[8] = v61;
  v58[9] = v62;
  v58[10] = v63;
  return result;
}

void sub_1000790B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_10001E8DC();
    uint64_t v3 = v6;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10007117C(a1 + 32, v2, v3 + 16 * v7 + 32);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *unint64_t v1 = v3;
    return;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100079190(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    sub_10001EF24(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v3 = v9;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v10 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_1000716C4(a1 + 32, v2, v3 + 8 * v10 + 32);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *unint64_t v1 = v3;
    return;
  }
  uint64_t v11 = *(void *)(v3 + 16);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *(void *)(v3 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_10007926C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F69746361 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1937335659 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x7365756C6176 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x6F697469646E6F63 && a2 == 0xEA0000000000736ELL)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_100079408()
{
  return 4;
}

uint64_t sub_100079410(char a1)
{
  uint64_t result = 0x6E6F69746361;
  switch(a1)
  {
    case 1:
      uint64_t result = 1937335659;
      break;
    case 2:
      uint64_t result = 0x7365756C6176;
      break;
    case 3:
      uint64_t result = 0x6F697469646E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100079494@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100016CE0(&qword_1000A87C0);
  sub_100014C1C();
  __chkstk_darwin(v5);
  sub_100017740(a1, a1[3]);
  sub_1000799E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10001610C((uint64_t)a1);
  }
  LOBYTE(v13) = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v8 = v7;
  uint64_t v12 = v6;
  sub_100016CE0(&qword_1000A6798);
  sub_100052150((unint64_t *)&qword_1000A7A00, &qword_1000A6798);
  swift_bridgeObjectRetain();
  sub_100014DE8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  swift_bridgeObjectRetain();
  sub_100014DE8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100016CE0(&qword_1000A87D0);
  sub_100079A34();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v9 = sub_100017EB8();
  v10(v9);
  swift_bridgeObjectRetain();
  sub_10001610C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v12;
  a2[1] = v8;
  a2[2] = v13;
  a2[3] = v13;
  a2[4] = v13;
  return result;
}

void *sub_10007978C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_10007894C(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x58uLL);
  }
  return result;
}

uint64_t sub_1000797D8()
{
  return sub_100079410(*v0);
}

uint64_t sub_1000797E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007926C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100079808@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100079408();
  *a1 = result;
  return result;
}

uint64_t sub_100079830(uint64_t a1)
{
  unint64_t v2 = sub_1000799E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007986C(uint64_t a1)
{
  unint64_t v2 = sub_1000799E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000798A8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100079494(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

unint64_t sub_1000798F0()
{
  unint64_t result = qword_1000A87A8;
  if (!qword_1000A87A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87A8);
  }
  return result;
}

unint64_t sub_10007993C()
{
  unint64_t result = qword_1000A87B0;
  if (!qword_1000A87B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87B0);
  }
  return result;
}

uint64_t sub_100079988(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A87B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000799E8()
{
  unint64_t result = qword_1000A87C8;
  if (!qword_1000A87C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87C8);
  }
  return result;
}

unint64_t sub_100079A34()
{
  unint64_t result = qword_1000A87D8;
  if (!qword_1000A87D8)
  {
    sub_1000286C8(&qword_1000A87D0);
    sub_10007993C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87D8);
  }
  return result;
}

uint64_t sub_100079AA8()
{
  return swift_getGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for StorebagSectionCondition.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100079BA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionCondition.CodingKeys()
{
  return &type metadata for StorebagSectionCondition.CodingKeys;
}

uint64_t sub_100079BDC(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_100079C64(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100079D30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void type metadata accessor for StorebagSectionFilter.CodingKeys()
{
}

unint64_t sub_100079D68()
{
  unint64_t result = qword_1000A87E0;
  if (!qword_1000A87E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87E0);
  }
  return result;
}

unint64_t sub_100079DB8()
{
  unint64_t result = qword_1000A87E8;
  if (!qword_1000A87E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87E8);
  }
  return result;
}

unint64_t sub_100079E08()
{
  unint64_t result = qword_1000A87F0;
  if (!qword_1000A87F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87F0);
  }
  return result;
}

unint64_t sub_100079E58()
{
  unint64_t result = qword_1000A87F8;
  if (!qword_1000A87F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A87F8);
  }
  return result;
}

unint64_t sub_100079EA8()
{
  unint64_t result = qword_1000A8800;
  if (!qword_1000A8800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8800);
  }
  return result;
}

unint64_t sub_100079EF8()
{
  unint64_t result = qword_1000A8808;
  if (!qword_1000A8808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8808);
  }
  return result;
}

void sub_100079F44()
{
  sub_100014E08();
  int v3 = v2;
  uint64_t v4 = type metadata accessor for CocoaError();
  sub_100014C1C();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  sub_100009428();
  sub_100014C1C();
  uint64_t v29 = v12;
  uint64_t v30 = v11;
  __chkstk_darwin(v11);
  sub_1000162AC();
  uint64_t v13 = sub_10007FB64();
  v14(v13);
  uint64_t v15 = (void *)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (sub_10000E738(v16))
  {
    uint64_t v17 = sub_100014490();
    char v27 = v10;
    unint64_t v18 = (_DWORD *)v17;
    uint64_t v25 = sub_1000094B4();
    unint64_t v31 = v25;
    uint64_t v26 = v3;
    _DWORD *v18 = 136446210;
    int v3 = v18 + 3;
    unint64_t v24 = v18 + 1;
    sub_10007F87C((unint64_t *)&unk_1000A6A00, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    uint64_t v19 = sub_10001736C();
    uint64_t v21 = sub_10007FB18(v19, v20);
    sub_100019DA4(v21);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
    sub_10001A3E8((void *)&_mh_execute_header, v22, v23, "unable to write storebag cache (OOS): %{public}s");
    sub_1000182DC();
    sub_100009474();
    uint64_t v10 = v27;
    sub_100009474();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  }

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v0, v30);
  v28(v10, v3, v4);
  unint64_t v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  unint64_t v31 = 0xD000000000000026;
  unint64_t v32 = 0x800000010008B160;
  sub_10007F87C((unint64_t *)&unk_1000A6A00, (void (*)(uint64_t))&type metadata accessor for CocoaError);
  v33._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  sub_10007FB88(v33);
  swift_bridgeObjectRelease();
  sub_100011520();
  __break(1u);
}

void sub_10007A210()
{
  sub_100014E08();
  int v3 = v2;
  uint64_t v4 = type metadata accessor for CocoaError();
  sub_100014C1C();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  sub_100009428();
  sub_100014C1C();
  uint64_t v29 = v12;
  uint64_t v30 = v11;
  __chkstk_darwin(v11);
  sub_1000162AC();
  uint64_t v13 = sub_10007FB64();
  v14(v13);
  uint64_t v15 = (void *)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (sub_10000E738(v16))
  {
    uint64_t v17 = sub_100014490();
    char v27 = v10;
    unint64_t v18 = (_DWORD *)v17;
    uint64_t v25 = sub_1000094B4();
    unint64_t v31 = v25;
    uint64_t v26 = v3;
    _DWORD *v18 = 136446210;
    int v3 = v18 + 3;
    unint64_t v24 = v18 + 1;
    sub_10007F87C((unint64_t *)&unk_1000A6A00, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    uint64_t v19 = sub_10001736C();
    uint64_t v21 = sub_10007FB18(v19, v20);
    sub_100019DA4(v21);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
    sub_10001A3E8((void *)&_mh_execute_header, v22, v23, "unable to access storebag cache (PERM): %{public}s");
    sub_1000182DC();
    sub_100009474();
    uint64_t v10 = v27;
    sub_100009474();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  }

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v0, v30);
  v28(v10, v3, v4);
  unint64_t v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  unint64_t v31 = 0xD000000000000028;
  unint64_t v32 = 0x800000010008B130;
  sub_10007F87C((unint64_t *)&unk_1000A6A00, (void (*)(uint64_t))&type metadata accessor for CocoaError);
  v33._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  sub_10007FB88(v33);
  swift_bridgeObjectRelease();
  sub_100011520();
  __break(1u);
}

void sub_10007A4DC()
{
  sub_100014E08();
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for CocoaError();
  sub_100014C1C();
  uint64_t v7 = v6;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  sub_100009428();
  sub_100014C1C();
  uint64_t v27 = v13;
  uint64_t v28 = v12;
  __chkstk_darwin(v12);
  sub_1000162AC();
  uint64_t v26 = *(void (**)(uint64_t, uint8_t *, uint64_t))(v7 + 16);
  v26(v1, v4, v5);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_10000E738(v15))
  {
    uint64_t v16 = sub_100014490();
    uint64_t v25 = v11;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v23 = sub_1000094B4();
    uint64_t v29 = v23;
    unint64_t v24 = v4;
    *(_DWORD *)uint64_t v17 = 136446210;
    uint64_t v4 = v17 + 12;
    uint64_t v22 = v17 + 4;
    sub_10007F87C((unint64_t *)&unk_1000A6A00, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    uint64_t v18 = sub_10001736C();
    uint64_t v20 = sub_10007FB18(v18, v19);
    sub_100019DA4(v20);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
    _os_log_impl((void *)&_mh_execute_header, v14, v2, "unable to access storebag cache (WRITE-UNKNOWN): %{public}s", v17, 0xCu);
    sub_1000182DC();
    sub_100009474();
    uint64_t v11 = v25;
    sub_100009474();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
  }

  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0, v28);
  v26((uint64_t)v11, v4, v5);
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v21._object = (void *)0x800000010008B190;
  v21._uint64_t countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v21);
  sub_10007F87C((unint64_t *)&unk_1000A6A00, (void (*)(uint64_t))&type metadata accessor for CocoaError);
  v31._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  sub_10007FB88(v31);
  swift_bridgeObjectRelease();
  sub_100011520();
  __break(1u);
}

void sub_10007A7CC()
{
  sub_100014E08();
  uint64_t v1 = type metadata accessor for Logger();
  sub_100014C1C();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100016910();
  Logger.init()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v10 = v1;
    uint64_t v7 = (uint8_t *)sub_100014490();
    sub_1000094B4();
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    sub_10007FB18(v8, v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "unable to access storebag cache (UNKNOWN): %{public}s", v7, 0xCu);
    sub_100017228();
    sub_100009474();
    sub_100009474();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v10);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  }
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v11._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  sub_10007FB88(v11);
  swift_bridgeObjectRelease();
  sub_100011520();
  __break(1u);
}

void sub_10007AA0C()
{
  sub_100014E08();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v87 = type metadata accessor for CocoaError.Code();
  sub_100014C1C();
  uint64_t v89 = v5;
  __chkstk_darwin(v6);
  sub_100014198();
  uint64_t v86 = v7;
  sub_100013F9C();
  __chkstk_darwin(v8);
  uint64_t v85 = (char *)&v80 - v9;
  uint64_t v91 = type metadata accessor for CocoaError();
  sub_100014C1C();
  uint64_t v84 = v10;
  __chkstk_darwin(v11);
  sub_100014198();
  uint64_t v82 = v12;
  sub_100013F9C();
  __chkstk_darwin(v13);
  uint64_t v83 = (char *)&v80 - v14;
  sub_100013F9C();
  __chkstk_darwin(v15);
  uint64_t v88 = (char *)&v80 - v16;
  sub_100013F9C();
  __chkstk_darwin(v17);
  uint64_t v90 = (char *)&v80 - v18;
  uint64_t v19 = type metadata accessor for URLResourceValues();
  sub_100014C1C();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  sub_100013F4C();
  uint64_t v23 = sub_100016CE0(&qword_1000A6A70);
  uint64_t v24 = sub_100009374(v23);
  __chkstk_darwin(v24);
  sub_10001615C();
  uint64_t v93 = (void (*)(char *, char *, uint64_t))(v26 - v25);
  uint64_t v27 = type metadata accessor for URL();
  sub_100014C1C();
  uint64_t v29 = v28;
  uint64_t v31 = __chkstk_darwin(v30);
  Swift::String v33 = (char *)&v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v34 = sub_10001A314();
  uint64_t v35 = type metadata accessor for StorebagCache.Location(v34);
  uint64_t v36 = sub_100009374(v35);
  __chkstk_darwin(v36);
  sub_100014198();
  uint64_t v92 = v37;
  sub_100013F9C();
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v80 - v39;
  sub_10007F934(v2, (uint64_t)&v80 - v39, (void (*)(void))type metadata accessor for StorebagCache.Location);
  int v41 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v40, 1, v27);
  uint64_t v94 = v27;
  if (v41 == 1)
  {
    uint64_t v42 = NSHomeDirectory();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v81 = v1;

    URL.init(fileURLWithPath:isDirectory:)();
    uint64_t v27 = v94;
    swift_bridgeObjectRelease();
    uint64_t v40 = v81;
    URL.appendingPathComponent(_:isDirectory:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v27);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v4, v40, v27);
  sub_100016CE0(&qword_1000A6A78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084C90;
  *(void *)(inited + 32) = NSURLIsDirectoryKey;
  char v44 = NSURLIsDirectoryKey;
  sub_10007F294(inited);
  uint64_t v45 = (uint64_t)v93;
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  _s10RTCUtility9XPCObjectOwst_0(v45, 0, 1, v19);
  sub_10001A284(v45);
  if (v46)
  {
    sub_100007D3C(v45, &qword_1000A6A70);
  }
  else
  {
    char v59 = URLResourceValues.isDirectory.getter();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v45, v19);
    if (v59) {
      goto LABEL_9;
    }
  }
  id v47 = [self defaultManager];
  URL._bridgeToObjectiveC()(v48);
  uint64_t v50 = v49;
  id v97 = 0;
  unsigned int v51 = [v47 createDirectoryAtURL:v49 withIntermediateDirectories:1 attributes:0 error:&v97];

  id v52 = v97;
  if (!v51)
  {
    id v60 = v97;
    uint64_t v61 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v97 = v61;
    swift_errorRetain();
    sub_100016CE0(&qword_1000A67E8);
    if (swift_dynamicCast())
    {
      uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
      v93(v88, v90, v91);
      uint64_t v94 = sub_10007F87C(&qword_1000A69F0, (void (*)(uint64_t))&type metadata accessor for CocoaError);
      _BridgedStoredNSError.code.getter();
      static CocoaError.fileWriteNoPermission.getter();
      sub_10007F87C(&qword_1000A69F8, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v63 = v95;
      uint64_t v62 = v96;
      uint64_t v64 = v89;
      char v65 = *(void (**)(void))(v89 + 8);
      sub_1000095E8();
      v65();
      uint64_t v89 = v64 + 8;
      sub_1000095E8();
      v65();
      if (v62 == v63) {
        sub_10007A210();
      }
      uint64_t v66 = v91;
      uint64_t v92 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
      sub_1000140F0();
      v67();
      v93(v83, v90, v66);
      unint64_t v68 = v85;
      _BridgedStoredNSError.code.getter();
      uint64_t v69 = v86;
      static CocoaError.fileWriteOutOfSpace.getter();
      uint64_t v70 = v87;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v72 = v95;
      uint64_t v71 = v96;
      ((void (*)(uint64_t, uint64_t))v65)(v69, v70);
      ((void (*)(char *, uint64_t))v65)(v68, v70);
      if (v71 == v72) {
        sub_100079F44();
      }
      uint64_t v73 = v91;
      sub_1000140F0();
      v74();
      (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v82, v90, v73);
      uint64_t v75 = v85;
      _BridgedStoredNSError.code.getter();
      uint64_t v76 = v86;
      static CocoaError.fileWriteUnknown.getter();
      uint64_t v77 = v87;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v79 = v95;
      uint64_t v78 = v96;
      ((void (*)(uint64_t, uint64_t))v65)(v76, v77);
      ((void (*)(char *, uint64_t))v65)(v75, v77);
      if (v78 == v79) {
        sub_10007A4DC();
      }
      v92(v82, v91);
    }
    swift_errorRelease();
    sub_10007A7CC();
  }
  uint64_t v53 = v2;
  uint64_t v54 = v92;
  sub_10007F934(v53, (uint64_t)v92, (void (*)(void))type metadata accessor for StorebagCache.Location);
  int v55 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v54, 1, v94);
  id v56 = v52;
  sub_10007F8C4((uint64_t)v54, (void (*)(void))type metadata accessor for StorebagCache.Location);
  if (v55 == 1)
  {
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    URL.setResourceValues(_:)();
    uint64_t v57 = sub_10007FB04();
    v58(v57);
  }
LABEL_9:
  sub_10001A650();
}

uint64_t sub_10007B310()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000277F4(v0, qword_1000AF418);
  sub_100012884(v0, (uint64_t)qword_1000AF418);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10007B394()
{
  sub_10001422C();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for URL();
  sub_100014C1C();
  uint64_t v5 = v4;
  uint64_t v6 = sub_10000E6C0();
  v1[4] = v6;
  swift_defaultActor_initialize();
  uint64_t v7 = OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache;
  type metadata accessor for CachedStorebag(0);
  *(void *)(v0 + v7) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0;
  sub_10007AA0C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_location, v6, v3);
  return _swift_task_switch(sub_10007B4C0, v0, 0);
}

uint64_t sub_10007B4C0()
{
  sub_1000094A8();
  sub_10007F8C4(v0[2], (void (*)(void))type metadata accessor for StorebagCache.Location);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[3];
  return v1(v2);
}

uint64_t sub_10007B540()
{
  sub_1000113BC();
  v1[35] = v2;
  v1[36] = v0;
  v1[33] = v3;
  v1[34] = v4;
  uint64_t v5 = sub_100016CE0(&qword_1000A6A80);
  sub_100009374(v5);
  v1[37] = sub_10000E6C0();
  uint64_t v6 = type metadata accessor for URLResourceValues();
  v1[38] = v6;
  sub_10001130C(v6);
  v1[39] = v7;
  v1[40] = sub_10000E6C0();
  uint64_t v8 = type metadata accessor for Date();
  v1[41] = v8;
  sub_10001130C(v8);
  v1[42] = v9;
  v1[43] = sub_10000E8B8();
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v1[46] = v10;
  sub_10001130C(v10);
  v1[47] = v11;
  v1[48] = sub_10000E6C0();
  uint64_t v12 = sub_100016CE0((uint64_t *)&unk_1000A8A60);
  sub_100009374(v12);
  v1[49] = sub_10000E8B8();
  v1[50] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for CachedStorebag(0);
  v1[51] = v13;
  sub_100009374(v13);
  v1[52] = sub_10000E8B8();
  v1[53] = swift_task_alloc();
  return _swift_task_switch(sub_10007B704, v0, 0);
}

uint64_t sub_10007B704()
{
  uint64_t v75 = v0;
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 408);
  sub_100008498();
  if (_s10RTCUtility9XPCObjectOwet_0(v3, 1, v2) != 1)
  {
    uint64_t v6 = *(void *)(v0 + 424);
    sub_10007F818(*(void *)(v0 + 400), v6);
    int v73 = *(_DWORD *)(v6 + 8);
    uint64_t v7 = *(void *)(v6 + 24);
    uint64_t v69 = *(void *)(v6 + 16);
    uint64_t v70 = *(void *)v6;
    uint64_t v8 = *(void *)(v6 + 32);
    swift_bridgeObjectRetain();
    uint64_t v68 = v7;
    swift_bridgeObjectRetain();
    uint64_t v67 = v8;
    swift_bridgeObjectRetain();
    sub_10007F8C4(v6, (void (*)(void))type metadata accessor for CachedStorebag);
LABEL_5:
    uint64_t v9 = *(void *)(v0 + 264);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    *(void *)uint64_t v9 = v70;
    *(_DWORD *)(v9 + 8) = v73;
    *(void *)(v9 + 16) = v69;
    *(void *)(v9 + 24) = v68;
    *(void *)(v9 + 32) = v67;
    sub_10001AAE4();
    goto LABEL_6;
  }
  sub_100007D3C(*(void *)(v0 + 400), (uint64_t *)&unk_1000A8A60);
  sub_100003F68();
  Swift::Bool v4 = URL.checkResourceIsReachable()();
  if (v5)
  {
    swift_errorRelease();
LABEL_11:
    *(void *)(v0 + 160) = &unk_10009EF08;
    *(void *)(v0 + 168) = &off_10009F1D0;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 432) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10007C1CC;
    sub_100017CD4();
    return sub_10007D0E4();
  }
  if (!v4) {
    goto LABEL_11;
  }
  sub_100016CE0(&qword_1000A6A78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084C90;
  *(void *)(inited + 32) = NSURLContentModificationDateKey;
  uint64_t v13 = NSURLContentModificationDateKey;
  sub_10007F294(inited);
  URL.resourceValues(forKeys:)();
  sub_10001A354();
  URLResourceValues.contentModificationDate.getter();
  uint64_t v16 = sub_1000115AC();
  v17(v16);
  uint64_t result = sub_10001A284(v1);
  if (v18)
  {
    __break(1u);
    return result;
  }
  uint64_t v20 = sub_10001A860();
  v21(v20);
  Data.init(contentsOf:options:)();
  unsigned __int8 v22 = sub_100021498();
  sub_10007FB44(v22);
  uint64_t v23 = *(void *)(v0 + 352);
  uint64_t v24 = *(void *)(v0 + 336);
  int v25 = *(_DWORD *)(v0 + 104);
  Date.advanced(by:)();
  static Date.now.getter();
  uint64_t v26 = static Date.< infix(_:_:)();
  uint64_t v27 = *(void (**)(void))(v24 + 8);
  *(void *)(v0 + 448) = v27;
  *(void *)(v0 + 456) = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100015370();
  sub_1000140F0();
  v27();
  uint64_t v66 = v27;
  if ((v26 & 1) == 0)
  {
    int v73 = v25;
    uint64_t v35 = *(void *)(v0 + 408);
    uint64_t v36 = *(void *)(v0 + 416);
    uint64_t v37 = *(void *)(v0 + 392);
    uint64_t v38 = *(void *)(v0 + 280);
    uint64_t v72 = *(void *)(v0 + 272);
    uint64_t v39 = *(void *)(v0 + 96);
    uint64_t v40 = *(void *)(v0 + 120);
    uint64_t v69 = *(void *)(v0 + 112);
    uint64_t v41 = *(void *)(v0 + 128);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 336) + 16))(v36 + *(int *)(v35 + 20), *(void *)(v0 + 352), *(void *)(v0 + 328));
    uint64_t v42 = *(void *)(v0 + 128);
    long long v43 = *(_OWORD *)(v0 + 112);
    *(_OWORD *)uint64_t v36 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v36 + 16) = v43;
    *(void *)(v36 + 32) = v42;
    sub_10007F934(v36, v37, (void (*)(void))type metadata accessor for CachedStorebag);
    _s10RTCUtility9XPCObjectOwst_0(v37, 0, 1, v35);
    sub_1000134C4();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000493A4(v37, v72, v38);
    swift_endAccess();
    if (qword_1000A60C8 != -1) {
      swift_once();
    }
    uint64_t v67 = v41;
    uint64_t v68 = v40;
    uint64_t v70 = v39;
    uint64_t v44 = sub_10000A4E4();
    sub_100013570(v44, (uint64_t)qword_1000AF418);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v49 = *(void *)(v0 + 376);
    uint64_t v48 = *(void *)(v0 + 384);
    uint64_t v50 = *(void *)(v0 + 368);
    uint64_t v65 = *(void *)(v0 + 416);
    unint64_t v51 = *(void *)(v0 + 280);
    if (v47)
    {
      uint64_t v64 = *(void *)(v0 + 272);
      id v52 = (uint8_t *)sub_100014490();
      v74[0] = sub_1000094B4();
      *(_DWORD *)id v52 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 240) = sub_10001227C(v64, v51, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "storing storebag %{public}s in cache", v52, 0xCu);
      swift_arrayDestroy();
      sub_100009474();
      sub_100009474();

      sub_10007F8C4(v65, (void (*)(void))type metadata accessor for CachedStorebag);
      sub_1000140F0();
      v66();
      sub_1000140F0();
      v66();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      sub_10007F8C4(v65, (void (*)(void))type metadata accessor for CachedStorebag);
      sub_1000140F0();
      v66();
      sub_10001A984();
      sub_1000140F0();
      v66();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    }
    goto LABEL_5;
  }
  sub_10000E9A8();
  *(_OWORD *)uint64_t v26 = *(_OWORD *)(v0 + 112);
  sub_100009758(v26);
  *(void *)(v0 + 232) = *(void *)(v0 + 128);
  sub_100005B18(v23);
  if (qword_1000A60C8 != -1) {
    swift_once();
  }
  uint64_t v28 = sub_10000A4E4();
  sub_100013570(v28, (uint64_t)qword_1000AF418);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  unint64_t v32 = *(void *)(v0 + 280);
  if (v31)
  {
    uint64_t v71 = *(void *)(v0 + 272);
    sub_100014490();
    v74[0] = sub_1000094B4();
    sub_10007FBA0(4.8751e-34);
    *(void *)(v0 + 256) = sub_10001227C(v71, v32, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_10000B408((void *)&_mh_execute_header, v33, v34, "removing expired storebag %{public}s");
    sub_100017228();
    sub_100009474();
    sub_100009474();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v53 = [self defaultManager];
  URL._bridgeToObjectiveC()(v54);
  id v56 = v55;
  *(void *)(v0 + 248) = 0;
  unsigned int v57 = [v53 removeItemAtURL:v55 error:v0 + 248];

  unint64_t v58 = *(void **)(v0 + 248);
  if (!v57)
  {
    id v62 = v58;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10001A984();
    sub_1000140F0();
    v66();
    sub_1000140F0();
    v66();
    sub_1000095E8();
    v63();
    sub_10001A724();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10001AAE4();
LABEL_6:
    sub_100017CD4();
    __asm { BRAA            X1, X16 }
  }
  id v59 = v58;
  id v60 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v60;
  *id v60 = v0;
  v60[1] = sub_10007CC54;
  sub_100017CD4();
  return sub_10007B540();
}

uint64_t sub_10007C1CC()
{
  sub_10001422C();
  uint64_t v2 = *v1;
  sub_10000935C();
  uint64_t *v4 = v3;
  uint64_t v5 = v3 + 136;
  uint64_t *v4 = *v1;
  *(void *)(v3 + 440) = v0;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v2 + 288);
  sub_10001610C(v5);
  if (v0) {
    uint64_t v7 = sub_10007CED4;
  }
  else {
    uint64_t v7 = sub_10007C334;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10007C334()
{
  uint64_t v107 = v0;
  uint64_t v2 = *(void *)(v0 + 440);
  sub_100016CE0(&qword_1000A6A78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100084C90;
  *(void *)(inited + 32) = NSURLContentModificationDateKey;
  Swift::Bool v4 = NSURLContentModificationDateKey;
  sub_10007F294(inited);
  URL.resourceValues(forKeys:)();
  if (v2)
  {
    uint64_t v5 = sub_1000165EC();
    v6(v5);
    swift_bridgeObjectRelease();
LABEL_5:
    sub_10001A724();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10001AAE4();
    goto LABEL_6;
  }
  sub_10001A354();
  URLResourceValues.contentModificationDate.getter();
  uint64_t v7 = sub_1000115AC();
  v8(v7);
  uint64_t result = sub_10001A284(v1);
  if (v10)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = sub_10001A860();
    v12(v11);
    Data.init(contentsOf:options:)();
    unsigned __int8 v13 = sub_100021498();
    sub_10007FB44(v13);
    uint64_t v16 = v0 + 248;
    uint64_t v17 = *(void *)(v0 + 352);
    uint64_t v18 = *(void *)(v0 + 336);
    int v19 = *(_DWORD *)(v0 + 104);
    Date.advanced(by:)();
    static Date.now.getter();
    uint64_t v20 = static Date.< infix(_:_:)();
    unsigned __int8 v22 = *(void (**)(void))(v18 + 8);
    uint64_t v21 = v18 + 8;
    *(void *)(v0 + 448) = v22;
    *(void *)(v0 + 456) = v21 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_100015370();
    sub_1000095E8();
    v22();
    uint64_t v105 = v22;
    if ((v20 & 1) == 0)
    {
      int v104 = v19;
      uint64_t v95 = v21;
      uint64_t v32 = *(void *)(v0 + 408);
      uint64_t v31 = *(void *)(v0 + 416);
      uint64_t v33 = *(void *)(v0 + 392);
      uint64_t v34 = *(void *)(v0 + 280);
      uint64_t v98 = *(void *)(v0 + 272);
      uint64_t v35 = *(void *)(v0 + 96);
      uint64_t v36 = *(void *)(v0 + 120);
      uint64_t v103 = *(void *)(v0 + 112);
      uint64_t v37 = *(void *)(v0 + 128);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 336) + 16))(v31 + *(int *)(v32 + 20), *(void *)(v0 + 352), *(void *)(v0 + 328));
      uint64_t v38 = *(void *)(v0 + 128);
      long long v39 = *(_OWORD *)(v0 + 112);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v31 + 16) = v39;
      *(void *)(v31 + 32) = v38;
      sub_10007F934(v31, v33, (void (*)(void))type metadata accessor for CachedStorebag);
      _s10RTCUtility9XPCObjectOwst_0(v33, 0, 1, v32);
      sub_1000134C4();
      swift_bridgeObjectRetain();
      uint64_t v100 = v35;
      swift_bridgeObjectRetain();
      uint64_t v102 = v36;
      swift_bridgeObjectRetain();
      uint64_t v101 = v37;
      swift_bridgeObjectRetain();
      sub_1000493A4(v33, v98, v34);
      swift_endAccess();
      if (qword_1000A60C8 != -1) {
        swift_once();
      }
      uint64_t v40 = sub_10000A4E4();
      sub_100013570(v40, (uint64_t)qword_1000AF418);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = *(void (**)(uint64_t))(v0 + 416);
      uint64_t v46 = *(void *)(v0 + 376);
      uint64_t v45 = *(void *)(v0 + 384);
      uint64_t v48 = *(void *)(v0 + 360);
      uint64_t v47 = *(void *)(v0 + 368);
      uint64_t v99 = *(void *)(v0 + 352);
      uint64_t v49 = *(void *)(v0 + 328);
      unint64_t v50 = *(void *)(v0 + 280);
      if (v43)
      {
        uint64_t v87 = *(void *)(v0 + 272);
        uint64_t v96 = *(void *)(v0 + 384);
        unint64_t v51 = (uint8_t *)sub_100014490();
        uint64_t v90 = (uint64_t)v44;
        id v52 = (void (*)(uint64_t))sub_1000094B4();
        v106[0] = (uint64_t)v52;
        *(_DWORD *)unint64_t v51 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 240) = sub_10001227C(v87, v50, v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "storing storebag %{public}s in cache", v51, 0xCu);
        swift_arrayDestroy();
        sub_100009474();
        sub_100009474();

        uint64_t v53 = sub_10007F8C4(v90, (void (*)(void))type metadata accessor for CachedStorebag);
        uint64_t v61 = sub_100017724(v53, v54, v55, v56, v57, v58, v59, v60, v85, v87, v0 + 240, v90, v47, v48, v95, v96, v99);
        v52(v61);
        ((void (*)(uint64_t, uint64_t))v52)(v94, v49);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v97, v92);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        uint64_t v71 = sub_10007F8C4((uint64_t)v44, (void (*)(void))type metadata accessor for CachedStorebag);
        uint64_t v79 = sub_100017724(v71, v72, v73, v74, v75, v76, v77, v78, v85, v86, v88, v89, v91, v93, v95, v0 + 176, v99);
        v44(v79);
        ((void (*)(uint64_t, uint64_t))v44)(v48, v49);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
      }
      sub_100018024();
      uint64_t v80 = *(void *)(v0 + 264);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      *(void *)uint64_t v80 = v100;
      *(_DWORD *)(v80 + 8) = v104;
      *(void *)(v80 + 16) = v103;
      *(void *)(v80 + 24) = v102;
      *(void *)(v80 + 32) = v101;
      sub_10001AAE4();
LABEL_6:
      sub_100017CD4();
      __asm { BRAA            X1, X16 }
    }
    sub_10000E9A8();
    *(_OWORD *)uint64_t v20 = *(_OWORD *)(v0 + 112);
    sub_100009758(v20);
    *(void *)(v0 + 232) = *(void *)(v0 + 128);
    sub_100005B18(v17);
    if (qword_1000A60C8 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_10000A4E4();
    sub_100013570(v23, (uint64_t)qword_1000AF418);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    unint64_t v27 = *(void *)(v0 + 280);
    if (v26)
    {
      uint64_t v28 = *(void *)(v0 + 272);
      sub_100014490();
      v106[0] = sub_1000094B4();
      sub_10007FBA0(4.8751e-34);
      *(void *)(v0 + 256) = sub_10001227C(v28, v27, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_10000B408((void *)&_mh_execute_header, v29, v30, "removing expired storebag %{public}s");
      sub_100017228();
      uint64_t v16 = v0 + 248;
      sub_100009474();
      sub_100009474();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v62 = [self defaultManager];
    URL._bridgeToObjectiveC()(v63);
    uint64_t v65 = v64;
    *(void *)(v0 + 248) = 0;
    unsigned int v66 = [v62 removeItemAtURL:v64 error:v16];

    uint64_t v67 = *(void **)(v0 + 248);
    if (!v66)
    {
      uint64_t v81 = *(void *)(v0 + 376);
      uint64_t v82 = *(void *)(v0 + 384);
      uint64_t v83 = *(void *)(v0 + 368);
      id v84 = v67;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_10001A984();
      sub_1000095E8();
      v105();
      sub_1000095E8();
      v105();
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v82, v83);
      goto LABEL_5;
    }
    id v68 = v67;
    uint64_t v69 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v69;
    *uint64_t v69 = v0;
    v69[1] = sub_10007CC54;
    sub_100017CD4();
    return sub_10007B540();
  }
  return result;
}

uint64_t sub_10007CC54()
{
  sub_1000113BC();
  sub_100016748();
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 472) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 288);
  if (v0) {
    uint64_t v6 = sub_10007CFD4;
  }
  else {
    uint64_t v6 = sub_10007CD80;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10007CD80()
{
  uint64_t v2 = sub_10007FA90();
  v1(v2);
  uint64_t v3 = sub_100015370();
  v1(v3);
  uint64_t v4 = sub_1000116A8();
  v5(v4);
  uint64_t v12 = *(void *)(v0 + 72);
  int v11 = *(_DWORD *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 56);
  sub_100018024();
  uint64_t v6 = *(void *)(v0 + 264);
  long long v9 = *(_OWORD *)(v0 + 80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v6 = v10;
  *(_DWORD *)(v6 + 8) = v11;
  *(void *)(v6 + 16) = v12;
  *(_OWORD *)(v6 + 24) = v9;
  sub_10000E83C();
  return v7();
}

uint64_t sub_10007CED4()
{
  uint64_t v1 = sub_1000165EC();
  v2(v1);
  sub_10007FA60();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10007CFD4()
{
  uint64_t v2 = sub_10007FA90();
  v1(v2);
  uint64_t v3 = sub_100015370();
  v1(v3);
  uint64_t v4 = sub_1000116A8();
  v5(v4);
  sub_10007FA60();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10007D0E4()
{
  sub_1000094A8();
  *(unsigned char *)(v1 + 65) = v2;
  *(void *)(v1 + 88) = v3;
  *(void *)(v1 + 96) = v0;
  *(void *)(v1 + 72) = v4;
  *(void *)(v1 + 80) = v5;
  *(void *)(v1 + 104) = *v0;
  uint64_t v6 = sub_100016CE0((uint64_t *)&unk_1000A83E0);
  sub_100009374(v6);
  *(void *)(v1 + 112) = sub_10000E6C0();
  return _swift_task_switch(sub_10007D198, v0, 0);
}

uint64_t sub_10007D198()
{
  uint64_t v2 = v0[12];
  uint64_t v3 = OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask;
  v0[15] = OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask;
  uint64_t v4 = *(void *)(v2 + v3);
  if (v4)
  {
    v0[16] = v4;
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[17] = v5;
    sub_100016CE0(&qword_1000A67E8);
    void *v5 = v0;
    v5[1] = sub_10007D3F0;
    sub_100016198();
    return Task.result.getter();
  }
  else
  {
    uint64_t v7 = v0[14];
    sub_1000152D0();
    *(void *)(v2 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = os_transaction_create();
    swift_unknownObjectRelease();
    uint64_t v8 = type metadata accessor for TaskPriority();
    sub_10007FAC8(v8);
    sub_10007F87C(&qword_1000A8A78, (void (*)(uint64_t))type metadata accessor for StorebagCache);
    uint64_t v9 = swift_allocObject();
    sub_1000167A4(v9, v10, v11, v12, v13, v14, v15, v16, v21);
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_10006BBE8(v7, (uint64_t)&unk_1000A8A80, v1);
    sub_100015300(v17);
    swift_release();
    uint64_t v18 = (void *)swift_task_alloc();
    v0[19] = v18;
    sub_100016CE0(&qword_1000A67E8);
    void *v18 = v0;
    v18[1] = sub_10007D774;
    sub_100016198();
    return Task.value.getter();
  }
}

uint64_t sub_10007D3F0()
{
  sub_1000113BC();
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  sub_10000935C();
  *uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v1 + 96);
  *uint64_t v3 = *v0;
  swift_task_dealloc();
  sub_10007F078(*(void *)(v1 + 56), *(unsigned char *)(v2 + 64));
  return _swift_task_switch(sub_10007D51C, v4, 0);
}

uint64_t sub_10007D51C()
{
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  swift_release();
  uint64_t v4 = *(void *)(v3 + v2);
  if (v4)
  {
    v0[16] = v4;
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[17] = v5;
    sub_100016CE0(&qword_1000A67E8);
    void *v5 = v0;
    v5[1] = sub_10007D3F0;
    sub_100016198();
    return Task.result.getter();
  }
  else
  {
    uint64_t v7 = v0[14];
    uint64_t v8 = v0[12];
    sub_1000152D0();
    *(void *)(v8 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = os_transaction_create();
    swift_unknownObjectRelease();
    uint64_t v9 = type metadata accessor for TaskPriority();
    sub_10007FAC8(v9);
    sub_10007F87C(&qword_1000A8A78, (void (*)(uint64_t))type metadata accessor for StorebagCache);
    uint64_t v10 = swift_allocObject();
    sub_1000167A4(v10, v11, v12, v13, v14, v15, v16, v17, v22);
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_10006BBE8(v7, (uint64_t)&unk_1000A8A80, v1);
    sub_100015300(v18);
    swift_release();
    uint64_t v19 = (void *)swift_task_alloc();
    v0[19] = v19;
    sub_100016CE0(&qword_1000A67E8);
    *uint64_t v19 = v0;
    v19[1] = sub_10007D774;
    sub_100016198();
    return Task.value.getter();
  }
}

uint64_t sub_10007D774()
{
  sub_1000113BC();
  sub_100016748();
  sub_10000935C();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 96);
  if (v0) {
    uint64_t v6 = sub_10007D8E0;
  }
  else {
    uint64_t v6 = sub_10007D874;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10007D874()
{
  sub_1000094A8();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007D8E0()
{
  sub_1000094A8();
  swift_release();
  swift_task_dealloc();
  sub_10000E83C();
  return v0();
}

uint64_t sub_10007D948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 72) = a8;
  *(void *)(v8 + 80) = v13;
  *(unsigned char *)(v8 + 184) = a7;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 48) = a4;
  uint64_t v10 = type metadata accessor for URL();
  *(void *)(v8 + 88) = v10;
  *(void *)(v8 + 96) = *(void *)(v10 - 8);
  *(void *)(v8 + 104) = swift_task_alloc();
  *(void *)(v8 + 112) = swift_task_alloc();
  *(void *)(v8 + 120) = swift_task_alloc();
  *(void *)(v8 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_10007DA48, a4, 0);
}

uint64_t sub_10007DA48()
{
  sub_10001422C();
  uint64_t v1 = (void *)v0[15];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v4 = sub_100021498();
  sub_100021808(v4, v1);
  URL.appendingPathComponent(_:)();
  uint64_t v5 = *(void (**)(void *, uint64_t))(v3 + 8);
  v0[17] = v5;
  v0[18] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v2);
  id v6 = [self ephemeralSessionConfiguration];
  v0[19] = [self sessionWithConfiguration:v6];

  uint64_t v7 = (void *)swift_task_alloc();
  v0[20] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10007DB9C;
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[14];
  return NSURLSession.download(from:delegate:)(v9, v8, 0);
}

uint64_t sub_10007DB9C()
{
  sub_1000113BC();
  sub_100016748();
  sub_10000935C();
  void *v4 = v3;
  uint64_t v5 = *v2;
  sub_10000935C();
  *id v6 = v5;
  *(void *)(v8 + 168) = v7;
  *(void *)(v8 + 176) = v0;
  swift_task_dealloc();
  uint64_t v9 = *(void *)(v1 + 48);
  if (v0) {
    uint64_t v10 = sub_10007E294;
  }
  else {
    uint64_t v10 = sub_10007DCA0;
  }
  return _swift_task_switch(v10, v9, 0);
}

uint64_t sub_10007DCA0()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    id v3 = *(id *)(v0 + 168);
    id v4 = [v2 statusCode];
    uint64_t v5 = *(void **)(v0 + 168);
    if (v4 != (id)200)
    {
      uint64_t v11 = *(void **)(v0 + 152);
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
      uint64_t v13 = *(void *)(v0 + 112);
      uint64_t v14 = *(void *)(v0 + 88);
      uint64_t v48 = *(void *)(v0 + 128);
      uint64_t v15 = *(void *)(v0 + 48);
      id v16 = [v2 statusCode];
      sub_10002991C();
      swift_allocError();
      *(void *)uint64_t v17 = v16;
      *(unsigned char *)(v17 + 8) = 0;
      swift_willThrow();

      sub_10007E374();
      v12(v13, v14);
      [v11 finishTasksAndInvalidate];

      v12(v48, v14);
LABEL_14:
      *(void *)(v15 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0;
      swift_release();
      *(void *)(v15 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0;
      swift_unknownObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000E83C();
      goto LABEL_15;
    }
  }
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = Data.init(contentsOf:options:)();
  if (v6)
  {
LABEL_13:
    os_log_type_t v25 = *(void **)(v0 + 168);
    BOOL v26 = *(void **)(v0 + 152);
    uint64_t v27 = *(void *)(v0 + 128);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
    uint64_t v29 = *(void *)(v0 + 112);
    uint64_t v30 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 48);
    sub_10007E374();

    v28(v29, v30);
    [v26 finishTasksAndInvalidate];

    v28(v27, v30);
    goto LABEL_14;
  }
  uint64_t v9 = v7;
  unint64_t v10 = v8;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10007F084();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)();
  uint64_t v49 = Data.init(base64Encoded:options:)();
  unint64_t v19 = v18;
  uint64_t v20 = Data.init(base64Encoded:options:)();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19 >> 60 == 15 || v22 >> 60 == 15)
  {
    sub_10002991C();
    swift_allocError();
    *(void *)uint64_t v24 = 0;
    *(unsigned char *)(v24 + 8) = 1;
    swift_willThrow();
    swift_release();
    sub_10001E798(v20, v22);
    sub_10001E798(v49, v19);
    sub_1000088D0(v9, v10);
    goto LABEL_13;
  }
  char v33 = *(unsigned char *)(v0 + 184);
  swift_release();
  sub_1000088D0(v9, v10);
  if ((v33 & 1) == 0)
  {
    sub_100017740(*(void **)(v0 + 72), *(void *)(*(void *)(v0 + 72) + 24));
    if (!sub_10007F740())
    {
      uint64_t v36 = *(void **)(v0 + 152);
      os_log_type_t v42 = *(void **)(v0 + 168);
      uint64_t v44 = *(void (**)(uint64_t))(v0 + 136);
      id v47 = *(id *)(v0 + 128);
      uint64_t v37 = *(void *)(v0 + 88);
      uint64_t v15 = *(void *)(v0 + 48);
      sub_10002991C();
      swift_allocError();
      *(void *)uint64_t v38 = 1;
      *(unsigned char *)(v38 + 8) = 1;
      swift_willThrow();
      sub_1000088D0(v49, v19);
      sub_1000088D0(v20, v22);
      sub_10007E374();

      uint64_t v39 = sub_10001A984();
      v44(v39);
      [v36 finishTasksAndInvalidate];

      ((void (*)(id, uint64_t))v44)(v47, v37);
      goto LABEL_14;
    }
  }
  sub_100003F68();
  Data.write(to:options:)();
  uint64_t v35 = *(void *)(v0 + 128);
  uint64_t v34 = *(void (**)(void))(v0 + 136);
  uint64_t v45 = *(void **)(v0 + 168);
  id v46 = *(id *)(v0 + 152);
  uint64_t v43 = *(void *)(v0 + 112);
  uint64_t v40 = *(void *)(v0 + 88);
  uint64_t v41 = *(void *)(v0 + 48);
  v34();
  sub_1000088D0(v49, v19);
  sub_1000088D0(v20, v22);
  sub_10007E374();

  ((void (*)(uint64_t, uint64_t))v34)(v43, v40);
  [v46 finishTasksAndInvalidate];

  ((void (*)(uint64_t, uint64_t))v34)(v35, v40);
  *(void *)(v41 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0;
  swift_release();
  *(void *)(v41 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0;
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
LABEL_15:
  return v31();
}

uint64_t sub_10007E294()
{
  sub_10001422C();
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = v0[16];
  id v3 = (void (*)(uint64_t, uint64_t))v0[17];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[6];
  [v1 finishTasksAndInvalidate];

  v3(v2, v4);
  *(void *)(v5 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0;
  swift_release();
  *(void *)(v5 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0;
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000E83C();
  return v6();
}

void sub_10007E374()
{
  id v0 = [self defaultManager];
  URL._bridgeToObjectiveC()(v1);
  id v3 = v2;
  id v14 = 0;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v14];

  id v5 = v14;
  if (v4)
  {
    id v6 = v5;
  }
  else
  {
    id v7 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1000A60C8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100012884(v8, (uint64_t)qword_1000AF418);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v14 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      swift_getErrorValue();
      uint64_t v12 = Error.localizedDescription.getter();
      sub_10001227C(v12, v13, (uint64_t *)&v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "failed to remove temporary storebag download: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_10007E63C()
{
  type metadata accessor for URL();
  sub_10000948C();
  uint64_t v1 = sub_100007E50();
  v2(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10007E6C8()
{
  sub_10007E63C();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10007E6F4()
{
  return type metadata accessor for StorebagCache(0);
}

uint64_t type metadata accessor for StorebagCache(uint64_t a1)
{
  return sub_10000C704(a1, (uint64_t *)&unk_1000A8838);
}

uint64_t sub_10007E71C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10007E7D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t sub_10007E8E4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_10007E96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_10007EA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_10007EB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_10007EB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10007EC40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 20);
    return _s10RTCUtility9XPCObjectOwet_0(v9, a2, v8);
  }
}

void *sub_10007ECC8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)_s10RTCUtility9XPCObjectOwst_0(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_10007ED48()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Int sub_10007EDE0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10007EE58()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001610C(v0 + 64);

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_10007EEA8()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10007EF90;
  sub_100016198();
  return sub_10007D948(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10007EF90()
{
  sub_1000094A8();
  uint64_t v1 = *v0;
  sub_10000935C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000E83C();
  return v3();
}

uint64_t sub_10007F078(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t sub_10007F084()
{
  unint64_t result = qword_1000A8A90;
  if (!qword_1000A8A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8A90);
  }
  return result;
}

uint64_t sub_10007F0D0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }
  sub_100016CE0(&qword_1000A7F08);
  uint64_t result = sub_10001A5B4();
  uint64_t v3 = (unsigned char *)result;
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << v3[32];
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v14 = *((void *)v3 + 6);
      uint64_t v15 = (void *)(v14 + 16 * v10);
      BOOL v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v17 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v17;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_11;
      }
    }
    *(void *)(v5 + 8 * v11) = v13 | v12;
    uint64_t v20 = (void *)(*((void *)v3 + 6) + 16 * v10);
    void *v20 = v8;
    v20[1] = v7;
    uint64_t v21 = *((void *)v3 + 2);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_27;
    }
    *((void *)v3 + 2) = v23;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_10007F294(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(a1 + 16)
    || (sub_100016CE0((uint64_t *)&unk_1000A8AA0), uint64_t v2 = sub_10001A5B4(), (v30 = *(void *)(v1 + 16)) == 0))
  {
LABEL_24:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v3 = 0;
  uint64_t v28 = v1;
  uint64_t v29 = v1 + 32;
  while (v3 < *(void *)(v1 + 16))
  {
    unint64_t v4 = *(void **)(v29 + 8 * v3);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v5 = v4;
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v8 = v6 & ~v7;
    sub_10001A260();
    if ((v11 & v10) != 0)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
      if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
      {
LABEL_21:
        swift_bridgeObjectRelease_n();
LABEL_22:

        goto LABEL_23;
      }
      char v17 = sub_1000129AC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_22;
      }
      uint64_t v18 = ~v7;
      while (1)
      {
        uint64_t v8 = (v8 + 1) & v18;
        sub_10001A260();
        if ((v10 & v11) == 0) {
          break;
        }
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
          goto LABEL_21;
        }
        char v24 = sub_1000129AC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v24) {
          goto LABEL_22;
        }
      }
    }
    *(void *)(v2 + 56 + 8 * v9) = v11 | v10;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v5;
    uint64_t v25 = *(void *)(v2 + 16);
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_26;
    }
    *(void *)(v2 + 16) = v27;
LABEL_23:
    ++v3;
    uint64_t v1 = v28;
    if (v3 == v30) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
}

void sub_10007F49C(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    unint64_t v3 = &_swiftEmptySetSingleton;
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  sub_100016CE0((uint64_t *)&unk_1000A8AB0);
  unint64_t v3 = (unsigned char *)sub_10001A5B4();
LABEL_6:
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      goto LABEL_26;
    }
  }
  unint64_t v6 = 0;
  unint64_t v26 = a1 & 0xC000000000000001;
  unint64_t v23 = a1 + 32;
  uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v25 = v5;
  while (1)
  {
    if (v26)
    {
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v6 >= *(void *)(v24 + 16)) {
        goto LABEL_29;
      }
      uint64_t v7 = *(void *)(v23 + 8 * v6);
      swift_retain();
    }
    BOOL v8 = __OFADD__(v6++, 1);
    if (v8) {
      break;
    }
    Hasher.init(_seed:)();
    type metadata accessor for Client();
    sub_10007F87C(&qword_1000A6BC8, (void (*)(uint64_t))type metadata accessor for Client);
    Swift::UInt v9 = sub_10007FAAC();
    Hasher._combine(_:)(v9);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << v3[32];
    uint64_t v12 = v10 & ~v11;
    sub_1000145E4();
    if ((v15 & v14) != 0)
    {
      swift_retain();
      sub_10001A984();
      uint64_t v16 = Identifiable<>.id.getter();
      uint64_t v17 = sub_10007FAAC();
      swift_release();
      if (v16 == v17)
      {
LABEL_21:
        swift_release();
        uint64_t v5 = v25;
        goto LABEL_25;
      }
      uint64_t v18 = ~v11;
      while (1)
      {
        uint64_t v12 = (v12 + 1) & v18;
        sub_1000145E4();
        if ((v14 & v15) == 0) {
          break;
        }
        swift_retain();
        sub_10001A984();
        uint64_t v19 = Identifiable<>.id.getter();
        uint64_t v20 = sub_10007FAAC();
        swift_release();
        if (v19 == v20) {
          goto LABEL_21;
        }
      }
      uint64_t v5 = v25;
    }
    *(void *)&v3[8 * v13 + 56] = v15 | v14;
    *(void *)(*((void *)v3 + 6) + 8 * v12) = v7;
    uint64_t v21 = *((void *)v3 + 2);
    BOOL v8 = __OFADD__(v21, 1);
    uint64_t v22 = v21 + 1;
    if (v8) {
      goto LABEL_28;
    }
    *((void *)v3 + 2) = v22;
LABEL_25:
    if (v6 == v5) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

BOOL sub_10007F740()
{
  if (qword_1000A5FD0 != -1) {
    swift_once();
  }
  uint64_t v0 = (__SecKey *)(id)qword_1000A6768;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  CFDataRef v2 = Data._bridgeToObjectiveC()().super.isa;
  int v3 = SecKeyVerifySignature(v0, kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1, isa, v2, 0);

  return v3 != 0;
}

uint64_t sub_10007F818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedStorebag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007F87C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007F8C4(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000948C();
  uint64_t v3 = sub_100007E50();
  v4(v3);
  return a1;
}

uint64_t type metadata accessor for StorebagCache.Location(uint64_t a1)
{
  return sub_10000C704(a1, qword_1000A8B38);
}

uint64_t sub_10007F934(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000948C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_10007F994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007F9A8);
}

uint64_t sub_10007F9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  unsigned int v5 = _s10RTCUtility9XPCObjectOwet_0(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10007F9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007FA04);
}

uint64_t sub_10007FA04(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for URL();

  return _s10RTCUtility9XPCObjectOwst_0(a1, v5, a3, v6);
}

uint64_t sub_10007FA60()
{
  return swift_task_dealloc();
}

uint64_t sub_10007FA90()
{
  return *(void *)(v0 + 352);
}

uint64_t sub_10007FAAC()
{
  return Identifiable<>.id.getter();
}

uint64_t sub_10007FAC8(uint64_t a1)
{
  _s10RTCUtility9XPCObjectOwst_0(v1, 1, 1, a1);
  return sub_10000F43C(v3, v2);
}

uint64_t sub_10007FB04()
{
  return v0;
}

uint64_t sub_10007FB18(uint64_t a1, unint64_t a2)
{
  return sub_10001227C(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10007FB44(unsigned __int8 a1)
{
  return sub_100023148(v1, v2, a1, v3);
}

uint64_t sub_10007FB64()
{
  uint64_t result = v1;
  *(void *)(v2 - 128) = *(void *)(v0 + 16);
  return result;
}

void sub_10007FB88(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10007FBA0(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

void *XPCObject.obj.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  sub_100014C1C();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_10001615C();
  uint64_t v8 = v7 - v6;
  type metadata accessor for XPCObject();
  sub_10000948C();
  __chkstk_darwin(v9);
  sub_10001615C();
  uint64_t v12 = v11 - v10;
  sub_100057464(v1, v11 - v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      xpc_object_t v14 = xpc_BOOL_create(*(unsigned char *)v12);
      goto LABEL_13;
    case 3u:
      xpc_object_t v14 = xpc_int64_create(*(void *)v12);
      goto LABEL_13;
    case 4u:
      xpc_object_t v14 = xpc_uint64_create(*(void *)v12);
      goto LABEL_13;
    case 5u:
      xpc_object_t v14 = xpc_double_create(*(double *)v12);
      goto LABEL_13;
    case 6u:
      xpc_object_t v14 = xpc_date_create(*(void *)v12);
      goto LABEL_13;
    case 7u:
      uint64_t v16 = *(void *)v12;
      unint64_t v15 = *(void *)(v12 + 8);
      switch(v15 >> 62)
      {
        case 1uLL:
          if (v16 >> 32 < (int)v16) {
            __break(1u);
          }
          swift_retain();
          uint64_t v13 = sub_100080984((int)v16, v16 >> 32);
          sub_1000088D0(v16, v15);
          break;
        case 2uLL:
          uint64_t v31 = *(void *)(v16 + 16);
          uint64_t v32 = *(void *)(v16 + 24);
          swift_retain();
          swift_retain();
          uint64_t v13 = sub_100080984(v31, v32);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          uint64_t v18 = 0;
          uint64_t v17 = 0;
          goto LABEL_19;
        default:
          uint64_t v17 = v15 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v18 = *(void *)v12;
LABEL_19:
          uint64_t v13 = sub_1000808B8(v18, v17);
          break;
      }
      sub_1000088D0(v16, v15);
      return v13;
    case 8u:
      uint64_t v19 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = xpc_string_create((const char *)(v19 + 32));
      swift_release();
      return v13;
    case 9u:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8, v12, v2);
      uint64_t uuid = UUID.uuid.getter();
      char v34 = v20;
      char v35 = v21;
      char v36 = v22;
      char v37 = v23;
      char v38 = v24;
      char v39 = v25;
      char v40 = v26;
      char v41 = v27;
      uint64_t v13 = xpc_uuid_create((const unsigned __int8 *)&uuid);
      uint64_t v28 = sub_1000193B4();
      v29(v28);
      return v13;
    case 0xDu:
      xpc_object_t v14 = xpc_null_create();
LABEL_13:
      uint64_t v13 = v14;
      break;
    default:
      uint64_t v13 = *(void **)v12;
      break;
  }
  return v13;
}

BOOL static XPCObject.== infix(_:_:)()
{
  XPCObject.obj.getter();
  XPCObject.obj.getter();
  uint64_t v0 = (void *)sub_1000193B4();
  BOOL v2 = xpc_equal(v0, v1);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v2;
}

xpc_object_t RTCXPCDictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = sub_100016CE0(&qword_1000A7EE0);
  uint64_t v3 = sub_100009374(v2);
  __chkstk_darwin(v3);
  sub_100014CE4();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v50 = (uint64_t)&v42 - v8;
  uint64_t v9 = sub_100016CE0(&qword_1000A8B58);
  sub_100014C1C();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100014CE4();
  uint64_t v49 = (void *)(v13 - v14);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v48 = (uint64_t *)((char *)&v42 - v17);
  uint64_t v18 = __chkstk_darwin(v16);
  char v20 = (uint64_t *)((char *)&v42 - v19);
  __chkstk_darwin(v18);
  char v22 = (uint64_t *)((char *)&v42 - v21);
  xpc_object_t empty = xpc_dictionary_create_empty();
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23)
  {
    uint64_t v42 = a1;
    uint64_t v43 = v6;
    id v46 = v22;
    uint64_t v47 = v9;
    uint64_t v45 = (uint64_t)v22 + *(int *)(v9 + 48);
    uint64_t v24 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v44 = *(void *)(v11 + 72);
    uint64_t v25 = v50;
    do
    {
      sub_100080A0C(v24, (uint64_t)v22, &qword_1000A8B58);
      uint64_t v26 = v47;
      uint64_t v27 = (uint64_t)v20 + *(int *)(v47 + 48);
      uint64_t v29 = *v22;
      uint64_t v28 = v22[1];
      void *v20 = v29;
      v20[1] = v28;
      sub_100017EE8(v45, v27);
      uint64_t v30 = *(int *)(v26 + 48);
      uint64_t v31 = v48;
      uint64_t v32 = (uint64_t)v48 + v30;
      *uint64_t v48 = v29;
      v31[1] = v28;
      sub_100057464(v27, (uint64_t)v31 + v30);
      uint64_t v33 = *(int *)(v26 + 48);
      char v34 = v49;
      uint64_t v35 = (uint64_t)v49 + v33;
      *uint64_t v49 = v29;
      v34[1] = v28;
      sub_100057464(v27, (uint64_t)v34 + v33);
      sub_100017EE8(v35, v25);
      uint64_t v36 = type metadata accessor for XPCObject();
      sub_100017CF0();
      uint64_t v37 = v25;
      uint64_t v38 = v43;
      sub_100080A0C(v37, v43, &qword_1000A7EE0);
      LODWORD(v36) = _s10RTCUtility9XPCObjectOwet_0(v38, 1, v36);
      swift_bridgeObjectRetain();
      if (v36 == 1)
      {
        sub_10001739C(v38, &qword_1000A7EE0);
        char v39 = 0;
      }
      else
      {
        char v39 = XPCObject.obj.getter();
        sub_100032B10(v38);
      }
      uint64_t v40 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_value(empty, (const char *)(v40 + 32), v39);
      swift_unknownObjectRelease();
      uint64_t v25 = v50;
      sub_10001739C(v50, &qword_1000A7EE0);
      swift_release();
      sub_10001739C((uint64_t)v20, &qword_1000A8B58);
      sub_100032B10(v32);
      v24 += v44;
      --v23;
      char v22 = v46;
    }
    while (v23);
  }
  swift_bridgeObjectRelease();
  return empty;
}

uint64_t RTCXPCDictionary.subscript.setter(uint64_t a1)
{
  uint64_t v3 = sub_100016CE0(&qword_1000A7EE0);
  uint64_t v4 = sub_100009374(v3);
  __chkstk_darwin(v4);
  sub_10001615C();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = *v1;
  sub_100080A0C(a1, v6 - v5, &qword_1000A7EE0);
  uint64_t v9 = type metadata accessor for XPCObject();
  if (_s10RTCUtility9XPCObjectOwet_0(v7, 1, v9) == 1)
  {
    sub_10001739C(v7, &qword_1000A7EE0);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = XPCObject.obj.getter();
    sub_100032B10(v7);
  }
  uint64_t v11 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v8, (const char *)(v11 + 32), v10);
  swift_unknownObjectRelease();
  sub_10001739C(a1, &qword_1000A7EE0);
  return swift_release();
}

uint64_t RTCXPCDictionary.keys.getter(void *a1)
{
  int64_t count = xpc_dictionary_get_count(a1);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!swift_isUniquelyReferenced_nonNull_native() || count > _swiftEmptyArrayStorage[3] >> 1)
  {
    sub_10001E8DC();
    uint64_t v3 = v4;
  }
  uint64_t v12 = v3;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &v12;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_100080A74;
  *(void *)(v6 + 24) = v5;
  aBlock[4] = sub_100012D68;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100012D08;
  aBlock[3] = &unk_1000A1BA8;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_dictionary_apply(a1, v7);
  _Block_release(v7);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v12;
    swift_release();
    return (uint64_t)v10;
  }
  return result;
}

uint64_t sub_1000805A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = String.init(cString:)();
  uint64_t v6 = v5;
  sub_100081160();
  uint64_t v7 = *(void *)(*a3 + 16);
  sub_1000811AC(v7);
  uint64_t v8 = *a3;
  *(void *)(v8 + 16) = v7 + 1;
  uint64_t v9 = v8 + 16 * v7;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v6;
  return 1;
}

void (*RTCXPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t v8 = sub_100016CE0(&qword_1000A7EE0);
  sub_100009374(v8);
  size_t v10 = *(void *)(v9 + 64);
  v7[3] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v7[4] = v11;
  uint64_t v12 = *v3;
  uint64_t v13 = String.utf8CString.getter();
  xpc_object_t v14 = xpc_dictionary_get_value(v12, (const char *)(v13 + 32));
  swift_release();
  XPCObject.init(_:)(v14, (uint64_t)v11);
  return sub_1000806E4;
}

void sub_1000806E4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_100080A0C(*(void *)(*(void *)a1 + 32), (uint64_t)v3, &qword_1000A7EE0);
    swift_bridgeObjectRetain();
    RTCXPCDictionary.subscript.setter((uint64_t)v3);
    sub_10001739C((uint64_t)v4, &qword_1000A7EE0);
  }
  else
  {
    swift_bridgeObjectRetain();
    RTCXPCDictionary.subscript.setter((uint64_t)v4);
  }
  free(v4);
  free(v3);

  free(v2);
}

Swift::Bool __swiftcall RTCXPCDictionary.contains(key:)(Swift::String key)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_100016CE0(&qword_1000A7EE0);
  uint64_t v4 = sub_100009374(v3);
  __chkstk_darwin(v4);
  sub_10001615C();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = String.utf8CString.getter();
  xpc_object_t v9 = xpc_dictionary_get_value(v2, (const char *)(v8 + 32));
  swift_release();
  XPCObject.init(_:)(v9, v7);
  uint64_t v10 = type metadata accessor for XPCObject();
  LOBYTE(v9) = _s10RTCUtility9XPCObjectOwet_0(v7, 1, v10) != 1;
  sub_10001739C(v7, &qword_1000A7EE0);
  return (char)v9;
}

xpc_object_t sub_100080890@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t result = RTCXPCDictionary.init(dictionaryLiteral:)(a1);
  *a2 = result;
  return result;
}

xpc_object_t sub_1000808B8(uint64_t a1, uint64_t a2)
{
  uint64_t bytes = a1;
  __int16 v4 = a2;
  char v5 = BYTE2(a2);
  char v6 = BYTE3(a2);
  char v7 = BYTE4(a2);
  char v8 = BYTE5(a2);
  return xpc_data_create(&bytes, BYTE6(a2));
}

char *sub_100080984(uint64_t a1, uint64_t a2)
{
  xpc_object_t result = (char *)__DataStorage._bytes.getter();
  char v5 = result;
  if (result)
  {
    xpc_object_t result = (char *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - (void)result;
  }
  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = v8;
  }
  if (v5) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = 0;
  }
  return (char *)xpc_data_create(v5, v10);
}

uint64_t sub_100080A0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100016CE0(a3);
  sub_10000948C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_100080A68()
{
  return sub_100015FE8(v0, 24);
}

uint64_t sub_100080A74(uint64_t a1, uint64_t a2)
{
  return sub_1000805A0(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_100080A7C()
{
  return sub_100015FE8(v0, 32);
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
        *a1 = *a2;
        swift_unknownObjectRetain();
        goto LABEL_9;
      case 7u:
        uint64_t v9 = *a2;
        unint64_t v8 = a2[1];
        sub_10002779C(v9, v8);
        *a1 = v9;
        a1[1] = v8;
        goto LABEL_9;
      case 8u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 9u:
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t *assignWithCopy for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100032B10((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
        *a1 = *a2;
        swift_unknownObjectRetain();
        goto LABEL_8;
      case 7u:
        uint64_t v7 = *a2;
        unint64_t v6 = a2[1];
        sub_10002779C(v7, v6);
        *a1 = v7;
        a1[1] = v6;
        goto LABEL_8;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 9u:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for XPCObject(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 9)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for XPCObject(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100032B10((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 9)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100081084()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RTCXPCDictionary()
{
  return &type metadata for RTCXPCDictionary;
}

void sub_100081160()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10001E8DC();
    *uint64_t v0 = v3;
  }
}

void sub_1000811AC(uint64_t a1)
{
  if (a1 + 1 > *(void *)(*(void *)v1 + 24) >> 1)
  {
    sub_10001E8DC();
    *(void *)uint64_t v1 = v2;
  }
}

void static MessageKeys.clientName.getter()
{
}

void static MessageKeys.serviceName.getter()
{
}

void static MessageKeys.clientType.getter()
{
}

void *MessageKeys.legacyClient.unsafeMutableAddressor()
{
  return &static MessageKeys.legacyClient;
}

void static MessageKeys.legacyClient.getter()
{
}

void static MessageKeys.payload.getter()
{
}

void static MessageKeys.sessionID.getter()
{
}

void static MessageKeys.realtime.getter()
{
}

void static MessageKeys.hierarchyLevel.getter()
{
}

void static MessageKeys.hierarchyToken.getter()
{
}

uint64_t static MessageKeys.samplingUUID.getter()
{
  return 0x6469757573;
}

uint64_t static MessageKeys.eager.getter()
{
  return 0x7265676165;
}

const char *MessageKeys.allowed.unsafeMutableAddressor()
{
  return "allowed";
}

uint64_t static MessageKeys.allowed.getter()
{
  return 0x6465776F6C6C61;
}

const char *MessageKeys.denied.unsafeMutableAddressor()
{
  return "denied";
}

uint64_t static MessageKeys.denied.getter()
{
  return 0x6465696E6564;
}

void static MessageKeys.overrideSampling.getter()
{
}

ValueMetadata *type metadata accessor for MessageKeys()
{
  return &type metadata for MessageKeys;
}

uint64_t XPCError.errorDescription.getter(void *a1)
{
  if (xpc_dictionary_get_string(a1, "XPCErrorDescription")) {
    return String.init(cString:)();
  }
  else {
    return sub_1000193C8();
  }
}

uint64_t sub_100081300()
{
  return XPCError.errorDescription.getter(*v0);
}

uint64_t XPCIncomingConnection.auditToken.getter()
{
  return 0;
}

void *XPCIncomingConnection.entitlementValue(forKey:)@<X0>(uint64_t a1@<X8>)
{
  String.utf8CString.getter();
  uint64_t v2 = (void *)xpc_connection_copy_entitlement_value();
  swift_release();

  return XPCObject.init(_:)(v2, a1);
}

uint64_t XPCIncomingConnection.makeConnection(targetQ:delegate:)(void *a1, uint64_t a2, uint64_t a3, _xpc_connection_s *a4)
{
  type metadata accessor for XPCConnection();
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  XPCConnection.init(conn:targetQ:delegate:)(a4, a1, a2, a3);
  return v8;
}

uint64_t XPCConnection.__allocating_init(conn:targetQ:delegate:)(_xpc_connection_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  XPCConnection.init(conn:targetQ:delegate:)(a1, a2, a3, a4);
  return v8;
}

uint64_t type metadata accessor for XPCConnection()
{
  return self;
}

uint64_t XPCConnection.conn.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t XPCConnection.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t XPCConnection.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*XPCConnection.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 32);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10008160C;
}

void sub_10008160C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 32) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t XPCConnection.__allocating_init(machService:targetQ:listen:delegate:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  XPCConnection.init(machService:targetQ:listen:delegate:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

void *XPCConnection.init(machService:targetQ:listen:delegate:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  v6[4] = 0;
  swift_unknownObjectWeakInit();
  if (a4) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 2;
  }
  uint64_t v11 = String.utf8CString.getter();
  uint64_t v12 = a3;
  swift_bridgeObjectRelease();
  mach_service = xpc_connection_create_mach_service((const char *)(v11 + 32), v12, v10);

  swift_release();
  swift_beginAccess();
  v6[4] = a6;
  swift_unknownObjectWeakAssign();
  _OWORD v6[2] = mach_service;
  v6[5] = v12;
  xpc_object_t v14 = v12;
  uint64_t v15 = (_xpc_connection_s *)swift_unknownObjectRetain();
  xpc_connection_set_target_queue(v15, v14);
  aBlock[4] = sub_1000100F4;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000FAC0;
  aBlock[3] = &unk_1000A1C18;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_connection_set_event_handler(mach_service, v16);
  _Block_release(v16);
  xpc_connection_activate(mach_service);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return v6;
}

void *XPCConnection.init(conn:targetQ:delegate:)(_xpc_connection_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v4[4] = 0;
  swift_unknownObjectWeakInit();
  v4[2] = a1;
  swift_beginAccess();
  v4[4] = a4;
  swift_unknownObjectWeakAssign();
  v4[5] = a2;
  swift_unknownObjectRetain();
  uint64_t v8 = a2;
  xpc_connection_set_target_queue(a1, v8);
  aBlock[4] = sub_10000FB20;
  uint64_t v12 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000FAC0;
  aBlock[3] = &unk_1000A1C40;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_connection_set_event_handler(a1, v9);
  _Block_release(v9);
  xpc_connection_activate(a1);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return v4;
}

void XPCConnection.send(_:)(xpc_object_t message)
{
  xpc_connection_send_message(*(xpc_connection_t *)(v1 + 16), message);
}

uint64_t XPCConnection.sendWithReply(_:)(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 64) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = v2;
  return _swift_task_switch(sub_100081A50, 0, 0);
}

uint64_t sub_100081A50()
{
  char v1 = *(unsigned char *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 40) = v6;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  *(unsigned char *)(v6 + 32) = v1;
  *(void *)(v6 + 40) = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100081B68;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000011, 0x800000010008B220, sub_100081ED0, v6, &type metadata for RTCXPCDictionary);
}

uint64_t sub_100081B68()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100081CA0;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100081C84;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100081C84()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_100081CA0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100081D04(uint64_t a1, _xpc_connection_s *a2, void *a3, uint64_t a4, NSObject *a5)
{
  uint64_t v9 = sub_100016CE0(&qword_1000A8D38);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_1000821C0;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000FAC0;
  aBlock[3] = &unk_1000A1CE0;
  xpc_object_t v14 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_release();
  xpc_connection_send_message_with_reply(a2, a3, a5, v14);
  _Block_release(v14);
  return swift_unknownObjectRelease();
}

uint64_t sub_100081ED0(uint64_t a1)
{
  return sub_100081D04(a1, *(_xpc_connection_s **)(v1 + 16), *(void **)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_100081EE0(void *a1)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_error)
  {
    sub_1000820C0();
    swift_allocError();
    *uint64_t v3 = a1;
    swift_unknownObjectRetain();
    sub_100016CE0(&qword_1000A8D38);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_unknownObjectRetain();
    sub_100016CE0(&qword_1000A8D38);
    return CheckedContinuation.resume(returning:)();
  }
}

Swift::Bool __swiftcall OS_xpc_object.isError()()
{
  return xpc_get_type(v0) == (xpc_type_t)&_xpc_type_error;
}

uint64_t XPCConnection.auditToken.getter()
{
  return 0;
}

uint64_t XPCConnection.deinit()
{
  xpc_connection_cancel(*(xpc_connection_t *)(v0 + 16));
  swift_unknownObjectRelease();
  sub_100082094(v0 + 24);

  return v0;
}

uint64_t XPCConnection.__deallocating_deinit()
{
  XPCConnection.deinit();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_100082094(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000820C0()
{
  unint64_t result = qword_1000A8C78;
  if (!qword_1000A8C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8C78);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

ValueMetadata *type metadata accessor for XPCIncomingConnection()
{
  return &type metadata for XPCIncomingConnection;
}

uint64_t sub_10008212C()
{
  uint64_t v1 = sub_100016CE0(&qword_1000A8D38);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000821C0(void *a1)
{
  sub_100016CE0(&qword_1000A8D38);

  return sub_100081EE0(a1);
}

Swift::Int sub_100082244()
{
  return sub_10008224C(*v0);
}

Swift::Int sub_10008224C(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void sub_100082294(uint64_t a1)
{
  sub_10008229C(a1, *v1);
}

void sub_10008229C(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_1000822C4(uint64_t a1)
{
  return sub_1000822CC(a1, *v1);
}

Swift::Int sub_1000822CC(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

RTCUtility::XPCMessage::MessageType_optional sub_100082310@<W0>(Swift::Int64 *a1@<X0>, RTCUtility::XPCMessage::MessageType_optional *a2@<X8>)
{
  result.BOOL value = XPCMessage.MessageType.init(rawValue:)(*a1).value;
  a2->BOOL value = result.value;
  return result;
}

uint64_t XPCMessage.ty.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *XPCMessage.init(ty:payload:)(unsigned __int8 a1, void *a2)
{
  uint64_t v4 = sub_100016CE0(&qword_1000A7EE0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v14 - v8;
  swift_unknownObjectRetain();
  xpc_object_t v10 = xpc_int64_create(a1);
  XPCObject.init(_:)(v10, (uint64_t)v9);
  sub_100032BF4((uint64_t)v9, (uint64_t)v7);
  uint64_t v11 = type metadata accessor for XPCObject();
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v7, 1, v11) == 1)
  {
    sub_10007643C((uint64_t)v7);
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v12 = XPCObject.obj.getter();
    sub_100032B10((uint64_t)v7);
  }
  xpc_dictionary_set_value(a2, "type", v12);
  swift_unknownObjectRelease();
  sub_10007643C((uint64_t)v9);
  swift_unknownObjectRelease();
  return a2;
}

uint64_t XPCMessage.description.getter(void *a1)
{
  uint64_t v42 = type metadata accessor for XPCObject();
  __chkstk_darwin(v42);
  sub_10001615C();
  unint64_t v4 = v3 - v2;
  uint64_t v5 = sub_100016CE0(&qword_1000A7EE0);
  __chkstk_darwin(v5 - 8);
  sub_10001615C();
  uint64_t v8 = v7 - v6;
  _print_unlocked<A, B>(_:_:)();
  v9._uint64_t countAndFlagsBits = 2683;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  char v41 = a1;
  uint64_t v10 = RTCXPCDictionary.keys.getter(a1);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    unint64_t v12 = (uint64_t *)(v10 + 40);
    uint64_t v40 = v8;
    while (1)
    {
      uint64_t v14 = *(v12 - 1);
      uint64_t v13 = *v12;
      uint64_t v15 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain();
      xpc_object_t v16 = xpc_dictionary_get_value(v41, v15);
      swift_release();
      XPCObject.init(_:)(v16, v8);
      if (_s10RTCUtility9XPCObjectOwet_0(v8, 1, v42) == 1) {
        break;
      }
      sub_100017EE8(v8, v4);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v18 = sub_100014BA8();
      uint64_t v20 = _swiftEmptyDictionarySingleton[2];
      BOOL v21 = (v19 & 1) == 0;
      Swift::Int v22 = v20 + v21;
      if (__OFADD__(v20, v21))
      {
        __break(1u);
LABEL_15:
        __break(1u);
        break;
      }
      unint64_t v4 = v18;
      char v23 = v19;
      sub_100016CE0(&qword_1000A8D40);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22))
      {
        unint64_t v24 = sub_100014BA8();
        if ((v23 & 1) != (v25 & 1)) {
          goto LABEL_17;
        }
        unint64_t v4 = v24;
      }
      if (v23)
      {
        uint64_t v26 = sub_1000193E4();
        sub_1000827EC(v26, v27);
      }
      else
      {
        _swiftEmptyDictionarySingleton[(v4 >> 6) + 8] |= 1 << v4;
        uint64_t v28 = (void *)(_swiftEmptyDictionarySingleton[6] + 16 * v4);
        *uint64_t v28 = v14;
        v28[1] = v13;
        uint64_t v29 = sub_1000193E4();
        sub_100017EE8(v29, v30);
        uint64_t v31 = _swiftEmptyDictionarySingleton[2];
        BOOL v32 = __OFADD__(v31, 1);
        uint64_t v33 = v31 + 1;
        if (v32) {
          goto LABEL_15;
        }
        _swiftEmptyDictionarySingleton[2] = v33;
        swift_bridgeObjectRetain();
      }
      v12 += 2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v11;
      uint64_t v8 = v40;
      if (!v11) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v34 = Dictionary.description.getter();
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = v34;
    v37._object = v36;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 125;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    return 0;
  }
  return result;
}

uint64_t sub_1000827E0()
{
  return XPCMessage.description.getter(*v0);
}

uint64_t sub_1000827EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100082854()
{
  unint64_t result = qword_1000A8D48;
  if (!qword_1000A8D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A8D48);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for XPCMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for XPCMessage()
{
  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for XPCMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for XPCMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCMessage(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCMessage()
{
  return &type metadata for XPCMessage;
}

uint64_t getEnumTagSinglePayload for XPCMessage.MessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for XPCMessage.MessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100082B54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCMessage.MessageType()
{
  return &type metadata for XPCMessage.MessageType;
}

uint64_t CocoaError._nsError.getter()
{
  return CocoaError._nsError.getter();
}

uint64_t CocoaError.isCoderError.getter()
{
  return CocoaError.isCoderError.getter();
}

uint64_t static CocoaError.fileWriteUnknown.getter()
{
  return static CocoaError.fileWriteUnknown.getter();
}

uint64_t static CocoaError.fileWriteOutOfSpace.getter()
{
  return static CocoaError.fileWriteOutOfSpace.getter();
}

uint64_t static CocoaError.fileWriteNoPermission.getter()
{
  return static CocoaError.fileWriteNoPermission.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t type metadata accessor for CocoaError()
{
  return type metadata accessor for CocoaError();
}

uint64_t URLRequest.httpMethod.setter()
{
  return URLRequest.httpMethod.setter();
}

uint64_t URLRequest.httpBody.getter()
{
  return URLRequest.httpBody.getter();
}

uint64_t URLRequest.httpBody.setter()
{
  return URLRequest.httpBody.setter();
}

Swift::Void __swiftcall URLRequest.setValue(_:forHTTPHeaderField:)(Swift::String_optional _, Swift::String forHTTPHeaderField)
{
}

uint64_t type metadata accessor for URLRequest()
{
  return type metadata accessor for URLRequest();
}

uint64_t static JSONEncoder.OutputFormatting.prettyPrinted.getter()
{
  return static JSONEncoder.OutputFormatting.prettyPrinted.getter();
}

uint64_t type metadata accessor for JSONEncoder.OutputFormatting()
{
  return type metadata accessor for JSONEncoder.OutputFormatting();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.setter()
{
  return dispatch thunk of JSONEncoder.outputFormatting.setter();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t URLResourceValues.isDirectory.getter()
{
  return URLResourceValues.isDirectory.getter();
}

uint64_t URLResourceValues.creationDate.getter()
{
  return URLResourceValues.creationDate.getter();
}

uint64_t URLResourceValues.isExcludedFromBackup.setter()
{
  return URLResourceValues.isExcludedFromBackup.setter();
}

uint64_t URLResourceValues.contentModificationDate.getter()
{
  return URLResourceValues.contentModificationDate.getter();
}

uint64_t URLResourceValues.fileSize.getter()
{
  return URLResourceValues.fileSize.getter();
}

uint64_t URLResourceValues.init()()
{
  return URLResourceValues.init()();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return URL.resourceValues(forKeys:)();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return URL.init(fileURLWithPath:isDirectory:)();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

uint64_t URL.setResourceValues(_:)()
{
  return URL.setResourceValues(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.checkResourceIsReachable()()
{
  return URL.checkResourceIsReachable()();
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.InlineData.init(_:)()
{
  return Data.InlineData.init(_:)();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t type metadata accessor for Data.Deallocator()
{
  return type metadata accessor for Data.Deallocator();
}

uint64_t Data.init(bytesNoCopy:count:deallocator:)()
{
  return Data.init(bytesNoCopy:count:deallocator:)();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return Data.init(base64Encoded:options:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data._Representation.count.setter()
{
  return Data._Representation.count.setter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t Data.init(bytes:count:)()
{
  return Data.init(bytes:count:)();
}

uint64_t Data.init(count:)()
{
  return Data.init(count:)();
}

uint64_t Data.count.getter()
{
  return Data.count.getter();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Data.append(_:)()
{
  return Data.append(_:)();
}

uint64_t Date.description.getter()
{
  return Date.description.getter();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.advanced(by:)()
{
  return Date.advanced(by:)();
}

uint64_t Date.distance(to:)()
{
  return Date.distance(to:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t UUID.init(uuid:)()
{
  return UUID.init(uuid:)();
}

uint64_t UUID.uuid.getter()
{
  return UUID.uuid.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.regionCode.getter()
{
  return Locale.regionCode.getter();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t TimeZone.secondsFromGMT(for:)()
{
  return TimeZone.secondsFromGMT(for:)();
}

uint64_t static TimeZone.current.getter()
{
  return static TimeZone.current.getter();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t static URLError.Code.cancelled.getter()
{
  return static URLError.Code.cancelled.getter();
}

uint64_t type metadata accessor for URLError.Code()
{
  return type metadata accessor for URLError.Code();
}

uint64_t type metadata accessor for URLError()
{
  return type metadata accessor for URLError();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.init()()
{
  return Logger.init()();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t XPC_ERROR_CONNECTION_INVALID.getter()
{
  return XPC_ERROR_CONNECTION_INVALID.getter();
}

uint64_t XPC_ERROR_CONNECTION_INTERRUPTED.getter()
{
  return XPC_ERROR_CONNECTION_INTERRUPTED.getter();
}

uint64_t type metadata accessor for NWInterface.InterfaceType()
{
  return type metadata accessor for NWInterface.InterfaceType();
}

uint64_t NWPathMonitor.currentPath.getter()
{
  return NWPathMonitor.currentPath.getter();
}

uint64_t NWPathMonitor.init(prohibitedInterfaceTypes:)()
{
  return NWPathMonitor.init(prohibitedInterfaceTypes:)();
}

uint64_t NWPathMonitor.start(queue:)()
{
  return NWPathMonitor.start(queue:)();
}

uint64_t type metadata accessor for NWPathMonitor()
{
  return type metadata accessor for NWPathMonitor();
}

uint64_t NWPath.isExpensive.getter()
{
  return NWPath.isExpensive.getter();
}

uint64_t NWPath.isConstrained.getter()
{
  return NWPath.isConstrained.getter();
}

uint64_t static NWPath.Status.== infix(_:_:)()
{
  return static NWPath.Status.== infix(_:_:)();
}

uint64_t type metadata accessor for NWPath.Status()
{
  return type metadata accessor for NWPath.Status();
}

uint64_t NWPath.status.getter()
{
  return NWPath.status.getter();
}

uint64_t type metadata accessor for NWPath()
{
  return type metadata accessor for NWPath();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.background.getter()
{
  return static DispatchQoS.background.getter();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return dispatch thunk of HashFunction.finalize()();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return dispatch thunk of HashFunction.init()();
}

uint64_t SHA256Digest.withUnsafeBytes<A>(_:)()
{
  return SHA256Digest.withUnsafeBytes<A>(_:)();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return type metadata accessor for SHA256Digest();
}

uint64_t type metadata accessor for SHA256()
{
  return type metadata accessor for SHA256();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return Dictionary.init(minimumCapacity:)();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(before:)()
{
  return String.index(before:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

{
  return String.init(cString:)();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = String.Iterator.next()();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t Sequence<>.joined(separator:)()
{
  return Sequence<>.joined(separator:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array<A>.init(from:)()
{
  return Array<A>.init(from:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t static Task<>.checkCancellation()()
{
  return static Task<>.checkCancellation()();
}

uint64_t dispatch thunk of Decodable.init(from:)()
{
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t NSFileHandle.write<A>(contentsOf:)()
{
  return NSFileHandle.write<A>(contentsOf:)();
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileHandle.seekToEnd()()
{
  return NSFileHandle.seekToEnd()();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t static OS_dispatch_source.FileSystemEvent.delete.getter()
{
  return static OS_dispatch_source.FileSystemEvent.delete.getter();
}

uint64_t static OS_dispatch_source.FileSystemEvent.rename.getter()
{
  return static OS_dispatch_source.FileSystemEvent.rename.getter();
}

uint64_t type metadata accessor for OS_dispatch_source.FileSystemEvent()
{
  return type metadata accessor for OS_dispatch_source.FileSystemEvent();
}

uint64_t static OS_dispatch_source.makeFileSystemObjectSource(fileDescriptor:eventMask:queue:)()
{
  return static OS_dispatch_source.makeFileSystemObjectSource(fileDescriptor:eventMask:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t Substring.init(_:)()
{
  return Substring.init(_:)();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t Identifiable<>.id.getter()
{
  return Identifiable<>.id.getter();
}

uint64_t specialized _ArrayBuffer._copyContents(initializing:)()
{
  return specialized _ArrayBuffer._copyContents(initializing:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return dispatch thunk of SingleValueDecodingContainer.decode(_:)();
}

{
  return dispatch thunk of SingleValueDecodingContainer.decode(_:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.codingPath.getter()
{
  return dispatch thunk of Decoder.codingPath.getter();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return dispatch thunk of Decoder.singleValueContainer()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return dispatch thunk of Encoder.unkeyedContainer()();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of CodingKey.stringValue.getter()
{
  return dispatch thunk of CodingKey.stringValue.getter();
}

uint64_t DiagnosticLogSubmissionEnabled()
{
  return _DiagnosticLogSubmissionEnabled();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MobileGestalt_copy_deviceName_obj()
{
  return _MobileGestalt_copy_deviceName_obj();
}

uint64_t MobileGestalt_copy_marketingProductName_obj()
{
  return _MobileGestalt_copy_marketingProductName_obj();
}

uint64_t MobileGestalt_copy_productType_obj()
{
  return _MobileGestalt_copy_productType_obj();
}

uint64_t MobileGestalt_copy_productVersion_obj()
{
  return _MobileGestalt_copy_productVersion_obj();
}

uint64_t MobileGestalt_copy_serialNumber_obj()
{
  return _MobileGestalt_copy_serialNumber_obj();
}

uint64_t MobileGestalt_copy_supplementalBuildVersion_obj()
{
  return _MobileGestalt_copy_supplementalBuildVersion_obj();
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

NSString *NSHomeDirectory(void)
{
  return _NSHomeDirectory();
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return _SecKeyCreateWithData(keyData, attributes, error);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return _SecKeyVerifySignature(key, algorithm, signedData, signature, error);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFPreferencesSetBackupDisabled()
{
  return __CFPreferencesSetBackupDisabled();
}

mach_header_64 *_NSGetMachExecuteHeader(void)
{
  return __NSGetMachExecuteHeader();
}

{
}

{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

int deflate(z_streamp strm, int flush)
{
  return _deflate(strm, flush);
}

uLong deflateBound(z_streamp strm, uLong sourceLen)
{
  return _deflateBound(strm, sourceLen);
}

int deflateEnd(z_streamp strm)
{
  return _deflateEnd(strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return _deflateInit2_(strm, level, method, windowBits, memLevel, strategy, version, stream_size);
}

void dispatch_main(void)
{
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void free(void *a1)
{
}

uint8_t *__cdecl getsectiondata(const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return _getsectiondata(mhp, segname, sectname, size);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

uint64_t os_eligibility_get_domain_answer()
{
  return _os_eligibility_get_domain_answer();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return _os_variant_has_internal_diagnostics();
}

int proc_pidpath_audittoken(audit_token_t *audittoken, void *buffer, uint32_t buffersize)
{
  return _proc_pidpath_audittoken(audittoken, buffer, buffersize);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return _sqlite3_bind_int(a1, a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

sqlite3_int64 sqlite3_changes64(sqlite3 *a1)
{
  return _sqlite3_changes64(a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return _sqlite3_close_v2(a1);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return _sqlite3_column_count(pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return _sqlite3_errstr(a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  return _sqlite3_expanded_sql(pStmt);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

void sqlite3_free(void *a1)
{
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return _swift_dynamicCastUnknownClassUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t xpc_activity_add_eligibility_changed_handler()
{
  return _xpc_activity_add_eligibility_changed_handler();
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

uint64_t xpc_activity_remove_eligibility_changed_handler()
{
  return _xpc_activity_remove_eligibility_changed_handler();
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return _xpc_activity_should_defer(activity);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return _xpc_array_apply(xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return _xpc_array_create(objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return _xpc_array_get_count(xarray);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return _xpc_BOOL_create(value);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return _xpc_BOOL_get_value(xBOOL);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return _xpc_connection_copy_entitlement_value();
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return _xpc_connection_get_audit_token();
}

uid_t xpc_connection_get_euid(xpc_connection_t connection)
{
  return _xpc_connection_get_euid(connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return _xpc_connection_get_pid(connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return _xpc_copy_description(object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return _xpc_data_create(bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return _xpc_data_get_bytes_ptr(xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return _xpc_data_get_length(xdata);
}

xpc_object_t xpc_date_create(int64_t interval)
{
  return _xpc_date_create(interval);
}

int64_t xpc_date_get_value(xpc_object_t xdate)
{
  return _xpc_date_get_value(xdate);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return _xpc_dictionary_apply(xdict, applier);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return _xpc_dictionary_create_empty();
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return _xpc_dictionary_create_reply(original);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return _xpc_dictionary_get_count(xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_object_t xpc_double_create(double value)
{
  return _xpc_double_create(value);
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  return _xpc_double_get_value(xdouble);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return _xpc_equal(object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return _xpc_int64_create(value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return _xpc_int64_get_value(xint);
}

xpc_object_t xpc_null_create(void)
{
  return _xpc_null_create();
}

xpc_object_t xpc_string_create(const char *string)
{
  return _xpc_string_create(string);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return _xpc_type_get_name(type);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return _xpc_uint64_create(value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return _xpc_uint64_get_value(xuint);
}

xpc_object_t xpc_uuid_create(const unsigned __int8 *uuid)
{
  return _xpc_uuid_create(uuid);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return _xpc_uuid_get_bytes(xuuid);
}