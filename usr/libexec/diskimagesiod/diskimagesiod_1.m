uint64_t *sub_1000B9FB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  unint64_t v36;
  BOOL v37;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3) {
      v6 = 1;
    }
    else {
      v6 = -1;
    }
    if (v5 == v3)
    {
      v7 = a1[v2 + 3];
      v8 = v7 == v4;
      v6 = v7 >= v4 ? 1 : -1;
      if (v8) {
        v6 = 0;
      }
    }
    v2 += 2;
  }
  while (v6 < 0);
  v9 = &a1[v2];
  if (v2 == 2)
  {
    while (v9 < a2)
    {
      v10 = a2 - 2;
      v16 = *(a2 - 2);
      v17 = v16 == v3;
      if (v16 >= v3) {
        v18 = 1;
      }
      else {
        v18 = -1;
      }
      if (v17)
      {
        v19 = *(a2 - 1);
        v20 = v19 == v4;
        v18 = v19 >= v4 ? 1 : -1;
        if (v20) {
          v18 = 0;
        }
      }
      a2 -= 2;
      if (v18 < 0) {
        goto LABEL_39;
      }
    }
    v10 = a2;
  }
  else
  {
    v10 = a2;
    do
    {
      v11 = *(v10 - 2);
      v10 -= 2;
      v12 = v11 == v3;
      if (v11 >= v3) {
        v13 = 1;
      }
      else {
        v13 = -1;
      }
      if (v12)
      {
        v14 = *(a2 - 1);
        v15 = v14 == v4;
        v13 = v14 >= v4 ? 1 : -1;
        if (v15) {
          v13 = 0;
        }
      }
      a2 = v10;
    }
    while ((v13 & 0x80) == 0);
  }
LABEL_39:
  if (v9 >= v10)
  {
    v22 = v9;
  }
  else
  {
    v21 = *v10;
    v22 = v9;
    v23 = v10;
    do
    {
      v24 = v22[1];
      v25 = v23[1];
      *v22 = v21;
      v22[1] = v25;
      *v23 = v5;
      v23[1] = v24;
      v26 = v22;
      do
      {
        v27 = v22[2];
        v22 += 2;
        v5 = v27;
        v28 = v27 == v3;
        if (v27 >= v3) {
          v29 = 1;
        }
        else {
          v29 = -1;
        }
        if (v28)
        {
          v30 = v26[3];
          v31 = v30 == v4;
          v29 = v30 >= v4 ? 1 : -1;
          if (v31) {
            v29 = 0;
          }
        }
        v26 = v22;
      }
      while (v29 < 0);
      v32 = v23;
      do
      {
        v33 = *(v23 - 2);
        v23 -= 2;
        v21 = v33;
        v34 = v33 == v3;
        if (v33 >= v3) {
          v35 = 1;
        }
        else {
          v35 = -1;
        }
        if (v34)
        {
          v36 = *(v32 - 1);
          v37 = v36 == v4;
          v35 = v36 >= v4 ? 1 : -1;
          if (v37) {
            v35 = 0;
          }
        }
        v32 = v23;
      }
      while ((v35 & 0x80) == 0);
    }
    while (v22 < v23);
  }
  if (v22 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v22 - 1);
  }
  *(v22 - 2) = v3;
  *(v22 - 1) = v4;
  return v22 - 2;
}

BOOL sub_1000BA118(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      uint64_t v7 = *a1;
      char v8 = -1;
      if (v6 >= *a1) {
        char v8 = 1;
      }
      if (v6 == *a1)
      {
        unint64_t v9 = *(a2 - 1);
        unint64_t v10 = a1[1];
        BOOL v11 = v9 >= v10;
        BOOL v12 = v9 == v10;
        char v8 = -1;
        if (v11) {
          char v8 = 1;
        }
        if (v12) {
          char v8 = 0;
        }
      }
      if (v8 < 0)
      {
        uint64_t v13 = a1[1];
        uint64_t v14 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v14;
        *(a2 - 2) = v7;
        *(a2 - 1) = v13;
      }
      return result;
    case 3:
      sub_1000B9CD4(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1000BA31C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1000BA42C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v15 = a1 + 4;
      sub_1000B9CD4(a1, a1 + 2, a1 + 4);
      v16 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    uint64_t v19 = *v16;
    uint64_t v20 = *v15;
    if (*v16 >= *v15) {
      char v21 = 1;
    }
    else {
      char v21 = -1;
    }
    if (*v16 == *v15)
    {
      unint64_t v22 = v16[1];
      unint64_t v23 = v15[1];
      BOOL v24 = v22 == v23;
      char v21 = v22 >= v23 ? 1 : -1;
      if (v24) {
        char v21 = 0;
      }
    }
    if (v21 < 0)
    {
      unint64_t v25 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        v27 = (uint64_t *)((char *)a1 + v26);
        uint64_t v28 = *(uint64_t *)((char *)a1 + v26 + 40);
        v27[6] = v20;
        v27[7] = v28;
        if (v26 == -32) {
          break;
        }
        uint64_t v20 = v27[2];
        if (v19 >= v20) {
          char v29 = 1;
        }
        else {
          char v29 = -1;
        }
        if (v19 == v20)
        {
          unint64_t v30 = *(uint64_t *)((char *)a1 + v26 + 24);
          BOOL v31 = v25 == v30;
          char v29 = v25 >= v30 ? 1 : -1;
          if (v31) {
            char v29 = 0;
          }
        }
        v26 -= 16;
        if ((v29 & 0x80) == 0)
        {
          v32 = (uint64_t *)((char *)a1 + v26 + 48);
          goto LABEL_38;
        }
      }
      v32 = a1;
LABEL_38:
      uint64_t *v32 = v19;
      v32[1] = v25;
      if (++v18 == 8) {
        return v16 + 2 == a2;
      }
    }
    v15 = v16;
    v17 += 16;
    v16 += 2;
    if (v16 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1000BA31C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = sub_1000B9CD4(a1, a2, a3);
  uint64_t v9 = *a3;
  char v10 = -1;
  if (*a4 >= *a3) {
    char v10 = 1;
  }
  if (*a4 == *a3)
  {
    unint64_t v11 = a4[1];
    unint64_t v12 = a3[1];
    BOOL v13 = v11 >= v12;
    BOOL v14 = v11 == v12;
    char v10 = -1;
    if (v13) {
      char v10 = 1;
    }
    if (v14) {
      char v10 = 0;
    }
  }
  if (v10 < 0)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v15 = *a3;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = *a2;
    char v18 = -1;
    if (v15 >= *a2) {
      char v18 = 1;
    }
    if (v15 == *a2)
    {
      unint64_t v19 = a3[1];
      unint64_t v20 = a2[1];
      BOOL v13 = v19 >= v20;
      BOOL v21 = v19 == v20;
      char v18 = -1;
      if (v13) {
        char v18 = 1;
      }
      if (v21) {
        char v18 = 0;
      }
    }
    if (v18 < 0)
    {
      *a2 = v15;
      *a3 = v17;
      uint64_t v22 = *a2;
      uint64_t v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      uint64_t v24 = *a1;
      char v25 = -1;
      if (v22 >= *a1) {
        char v25 = 1;
      }
      if (v22 == *a1)
      {
        unint64_t v26 = a2[1];
        unint64_t v27 = a1[1];
        BOOL v13 = v26 >= v27;
        BOOL v28 = v26 == v27;
        char v25 = -1;
        if (v13) {
          char v25 = 1;
        }
        if (v28) {
          char v25 = 0;
        }
      }
      if (v25 < 0)
      {
        uint64_t v29 = a1[1];
        uint64_t v30 = a2[1];
        *a1 = v22;
        a1[1] = v30;
        *a2 = v24;
        a2[1] = v29;
      }
    }
  }
  return result;
}

uint64_t sub_1000BA42C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_1000BA31C(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  char v12 = -1;
  if (*a5 >= *a4) {
    char v12 = 1;
  }
  if (*a5 == *a4)
  {
    unint64_t v13 = a5[1];
    unint64_t v14 = a4[1];
    BOOL v15 = v13 >= v14;
    BOOL v16 = v13 == v14;
    char v12 = -1;
    if (v15) {
      char v12 = 1;
    }
    if (v16) {
      char v12 = 0;
    }
  }
  if (v12 < 0)
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v17 = *a4;
    uint64_t v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    uint64_t v19 = *a3;
    char v20 = -1;
    if (v17 >= *a3) {
      char v20 = 1;
    }
    if (v17 == *a3)
    {
      unint64_t v21 = a4[1];
      unint64_t v22 = a3[1];
      BOOL v15 = v21 >= v22;
      BOOL v23 = v21 == v22;
      char v20 = -1;
      if (v15) {
        char v20 = 1;
      }
      if (v23) {
        char v20 = 0;
      }
    }
    if (v20 < 0)
    {
      *a3 = v17;
      *a4 = v19;
      uint64_t v24 = *a3;
      uint64_t v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      uint64_t v26 = *a2;
      char v27 = -1;
      if (v24 >= *a2) {
        char v27 = 1;
      }
      if (v24 == *a2)
      {
        unint64_t v28 = a3[1];
        unint64_t v29 = a2[1];
        BOOL v15 = v28 >= v29;
        BOOL v30 = v28 == v29;
        char v27 = -1;
        if (v15) {
          char v27 = 1;
        }
        if (v30) {
          char v27 = 0;
        }
      }
      if (v27 < 0)
      {
        *a2 = v24;
        *a3 = v26;
        uint64_t v31 = *a2;
        uint64_t v32 = a2[1];
        a2[1] = a3[1];
        a3[1] = v32;
        uint64_t v33 = *a1;
        char v34 = -1;
        if (v31 >= *a1) {
          char v34 = 1;
        }
        if (v31 == *a1)
        {
          unint64_t v35 = a2[1];
          unint64_t v36 = a1[1];
          BOOL v15 = v35 >= v36;
          BOOL v37 = v35 == v36;
          char v34 = -1;
          if (v15) {
            char v34 = 1;
          }
          if (v37) {
            char v34 = 0;
          }
        }
        if (v34 < 0)
        {
          uint64_t v38 = a1[1];
          uint64_t v39 = a2[1];
          *a1 = v31;
          a1[1] = v39;
          *a2 = v33;
          a2[1] = v38;
        }
      }
    }
  }
  return result;
}

char *sub_1000BA590(char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = &a1[16 * v10];
      do
      {
        sub_1000BA704((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(void *)v14 >= *(void *)a1) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (*(void *)v14 == *(void *)a1)
        {
          unint64_t v17 = *((void *)v14 + 1);
          unint64_t v18 = *((void *)a1 + 1);
          BOOL v19 = v17 == v18;
          char v16 = v17 >= v18 ? 1 : -1;
          if (v19) {
            char v16 = 0;
          }
        }
        if (v16 < 0)
        {
          uint64_t v20 = *((void *)v14 + 1);
          uint64_t v21 = *((void *)a1 + 1);
          *(void *)unint64_t v14 = *(void *)a1;
          *((void *)v14 + 1) = v21;
          *(void *)a1 = v15;
          *((void *)a1 + 1) = v20;
          sub_1000BA704((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v22 = (unint64_t)v8 >> 4;
      BOOL v23 = a2 - 16;
      do
      {
        uint64_t v25 = *(void *)a1;
        uint64_t v24 = *((void *)a1 + 1);
        uint64_t v26 = (char *)sub_1000BA858(a1, a4, v22);
        if (v23 == v26)
        {
          *(void *)uint64_t v26 = v25;
          *((void *)v26 + 1) = v24;
        }
        else
        {
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v23;
          *(void *)BOOL v23 = v25;
          *((void *)v23 + 1) = v24;
          sub_1000BA8EC((uint64_t)a1, (uint64_t)(v26 + 16), a4, (v26 + 16 - a1) >> 4);
        }
        v23 -= 16;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1000BA704(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (void *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = v8[2];
        BOOL v11 = *v8 == v10;
        if (*v8 >= v10) {
          char v12 = 1;
        }
        else {
          char v12 = -1;
        }
        if (v11)
        {
          unint64_t v13 = *(void *)(result + 16 * v7 + 8);
          unint64_t v14 = v8[3];
          BOOL v15 = v13 >= v14;
          BOOL v16 = v13 == v14;
          char v12 = -1;
          if (v15) {
            char v12 = 1;
          }
          if (v16) {
            char v12 = 0;
          }
        }
        if (v12 < 0)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v17 = *v8;
      uint64_t v18 = *a4;
      char v19 = -1;
      if (*v8 >= *a4) {
        char v19 = 1;
      }
      if (*v8 == *a4)
      {
        unint64_t v20 = v8[1];
        unint64_t v21 = a4[1];
        BOOL v15 = v20 >= v21;
        BOOL v22 = v20 == v21;
        char v19 = -1;
        if (v15) {
          char v19 = 1;
        }
        if (v22) {
          char v19 = 0;
        }
      }
      if ((v19 & 0x80) == 0)
      {
        unint64_t v23 = a4[1];
        do
        {
          uint64_t v24 = a4;
          a4 = v8;
          uint64_t v25 = v8[1];
          *uint64_t v24 = v17;
          v24[1] = v25;
          if (v5 < v7) {
            break;
          }
          uint64_t v26 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 16 * v26);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v7 = v26;
          }
          else
          {
            uint64_t v27 = v8[2];
            BOOL v28 = *v8 == v27;
            if (*v8 >= v27) {
              char v29 = 1;
            }
            else {
              char v29 = -1;
            }
            if (v28)
            {
              unint64_t v30 = *(void *)(result + 16 * v26 + 8);
              unint64_t v31 = v8[3];
              BOOL v32 = v30 == v31;
              char v29 = v30 >= v31 ? 1 : -1;
              if (v32) {
                char v29 = 0;
              }
            }
            if (v29 < 0) {
              v8 += 2;
            }
            else {
              uint64_t v7 = v26;
            }
          }
          uint64_t v17 = *v8;
          if (*v8 >= v18) {
            char v33 = 1;
          }
          else {
            char v33 = -1;
          }
          if (*v8 == v18)
          {
            unint64_t v34 = v8[1];
            BOOL v35 = v34 == v23;
            if (v34 >= v23) {
              char v33 = 1;
            }
            else {
              char v33 = -1;
            }
            if (v35) {
              char v33 = 0;
            }
          }
        }
        while ((v33 & 0x80) == 0);
        *a4 = v18;
        a4[1] = v23;
      }
    }
  }
  return result;
}

void *sub_1000BA858(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = v3 + 1;
    uint64_t v7 = &a1[v3 + 1];
    uint64_t v8 = (2 * v3) | 1;
    uint64_t v9 = 2 * v3 + 2;
    if (v9 < a3)
    {
      uint64_t v10 = v7[2];
      BOOL v11 = *v7 == v10;
      if (*v7 >= v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v11)
      {
        unint64_t v13 = *((void *)&a1[v6] + 1);
        unint64_t v14 = v7[3];
        BOOL v15 = v13 == v14;
        if (v13 >= v14) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (v15) {
          char v12 = 0;
        }
        else {
          char v12 = v16;
        }
      }
      if (v12 < 0)
      {
        v7 += 2;
        uint64_t v8 = v9;
      }
    }
    *a1 = *(_OWORD *)v7;
    a1 = v7;
    uint64_t v3 = v8;
  }
  while (v8 <= v5);
  return v7;
}

uint64_t sub_1000BA8EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(void *)(a2 - 16);
    uint64_t v9 = *v6;
    char v10 = -1;
    if (*v6 >= v8) {
      char v10 = 1;
    }
    if (*v6 == v8)
    {
      unint64_t v11 = v6[1];
      unint64_t v12 = *(void *)(a2 - 8);
      BOOL v13 = v11 >= v12;
      BOOL v14 = v11 == v12;
      char v10 = -1;
      if (v13) {
        char v10 = 1;
      }
      if (v14) {
        char v10 = 0;
      }
    }
    if (v10 < 0)
    {
      unint64_t v15 = *(void *)(a2 - 8);
      do
      {
        char v16 = v7;
        uint64_t v7 = v6;
        uint64_t v17 = v6[1];
        void *v16 = v9;
        v16[1] = v17;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 16 * v5);
        uint64_t v9 = *v6;
        if (*v6 >= v8) {
          char v18 = 1;
        }
        else {
          char v18 = -1;
        }
        if (*v6 == v8)
        {
          unint64_t v19 = v6[1];
          BOOL v20 = v19 == v15;
          if (v19 >= v15) {
            char v18 = 1;
          }
          else {
            char v18 = -1;
          }
          if (v20) {
            char v18 = 0;
          }
        }
      }
      while (v18 < 0);
      *uint64_t v7 = v8;
      v7[1] = v15;
    }
  }
  return result;
}

uint64_t sub_1000BA988(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BAC18(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BA9D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BAC18(v1);

  return std::ios::~ios();
}

void sub_1000BAA34(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BAC18(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BAA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BAAD4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BAB3C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BAC18(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BABA0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BAC18(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BAC18(uint64_t a1)
{
  *(void *)a1 = off_1001A6A90;
  sub_1000BAD54(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BAD54(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BAF14((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BAEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BAEDC(uint64_t a1)
{
  sub_1000BAC18(a1);

  operator delete();
}

int *sub_1000BAF14(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 213;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 213;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BB0FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BB38C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BB148(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BB38C(v1);

  return std::ios::~ios();
}

void sub_1000BB1A8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BB38C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BB210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BB248(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BB2B0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BB38C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BB314(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BB38C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BB38C(uint64_t a1)
{
  *(void *)a1 = off_1001A6CB0;
  sub_1000BB4C8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BB4C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BB688((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BB624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BB650(uint64_t a1)
{
  sub_1000BB38C(a1);

  operator delete();
}

int *sub_1000BB688(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 218;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 218;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BB870(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BBB00(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BB8BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BBB00(v1);

  return std::ios::~ios();
}

void sub_1000BB91C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BBB00(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BB984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BB9BC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BBA24(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BBB00(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BBA88(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BBB00(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BBB00(uint64_t a1)
{
  *(void *)a1 = off_1001A6ED0;
  sub_1000BBC3C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BBC3C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BBDFC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BBD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BBDC4(uint64_t a1)
{
  sub_1000BBB00(a1);

  operator delete();
}

int *sub_1000BBDFC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 222;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 222;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BBFE4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BC274(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BC030(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BC274(v1);

  return std::ios::~ios();
}

void sub_1000BC090(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BC274(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BC0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BC130(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BC198(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BC274(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BC1FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BC274(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BC274(uint64_t a1)
{
  *(void *)a1 = off_1001A70F0;
  sub_1000BC3B0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BC3B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BC570((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BC50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BC538(uint64_t a1)
{
  sub_1000BC274(a1);

  operator delete();
}

int *sub_1000BC570(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 231;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 231;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BC758(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BC9E8(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BC7A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BC9E8(v1);

  return std::ios::~ios();
}

void sub_1000BC804(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BC9E8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BC86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BC8A4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BC90C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BC9E8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BC970(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BC9E8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BC9E8(uint64_t a1)
{
  *(void *)a1 = off_1001A7310;
  sub_1000BCB24(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BCB24(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BCCE4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BCC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BCCAC(uint64_t a1)
{
  sub_1000BC9E8(a1);

  operator delete();
}

int *sub_1000BCCE4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 235;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 235;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BCECC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BD15C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BCF18(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BD15C(v1);

  return std::ios::~ios();
}

void sub_1000BCF78(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BD15C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BCFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BD018(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BD080(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BD15C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BD0E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BD15C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BD15C(uint64_t a1)
{
  *(void *)a1 = off_1001A7530;
  sub_1000BD298(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BD298(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BD458((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BD3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BD420(uint64_t a1)
{
  sub_1000BD15C(a1);

  operator delete();
}

int *sub_1000BD458(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 237;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 237;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BD640(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BD8D0(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BD68C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BD8D0(v1);

  return std::ios::~ios();
}

void sub_1000BD6EC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BD8D0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BD754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BD78C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BD7F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BD8D0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BD858(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BD8D0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BD8D0(uint64_t a1)
{
  *(void *)a1 = off_1001A7750;
  sub_1000BDA0C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BDA0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BDBCC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BDB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BDB94(uint64_t a1)
{
  sub_1000BD8D0(a1);

  operator delete();
}

int *sub_1000BDBCC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 284;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 284;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BDDB4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BE044(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BDE00(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BE044(v1);

  return std::ios::~ios();
}

void sub_1000BDE60(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BE044(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BDEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BDF00(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BDF68(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BE044(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BDFCC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BE044(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BE044(uint64_t a1)
{
  *(void *)a1 = off_1001A7970;
  sub_1000BE180(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BE180(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BE340((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BE2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BE308(uint64_t a1)
{
  sub_1000BE044(a1);

  operator delete();
}

int *sub_1000BE340(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 295;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 295;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000BE528(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000BE690((uint64_t)a1, a2);
  *a1 = off_1001A79F8;
  a1[45] = &off_1001A7AF8;
  a1[46] = &off_1001A7B20;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A79F8;
  a1[45] = off_1001A7A80;
  a1[46] = off_1001A7AA8;
  return a1;
}

void sub_1000BE628(_Unwind_Exception *a1)
{
  sub_1000BE720(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000BE64C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BE690(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7B90;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000BE70C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000BE720(uint64_t a1)
{
  *(void *)a1 = off_1001A7B90;
  sub_1000BEB28(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000BE85C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BE720(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BE8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BE8FC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000BE964(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BE720(v1);

  return std::ios::~ios();
}

void sub_1000BE9B0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BE720(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BEA14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BE720(v1);

  return std::ios::~ios();
}

void sub_1000BEA74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BE720(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BEAF0(uint64_t a1)
{
  sub_1000BE720(a1);

  operator delete();
}

uint64_t sub_1000BEB28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BECAC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BEC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000BECAC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 241;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 241;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BEE94(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_1000BEEE0((_OWORD *)a1, a2);
  return a1;
}

void sub_1000BEEC4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_1001470D4(v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1000BEEE0(_OWORD *__dst, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    unsigned __int8 v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      __dst = sub_100047744(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *__dst = v3;
    }
    v2[24] = 1;
  }
  return __dst;
}

uint64_t sub_1000BEF3C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BF1CC(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BEF88(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BF1CC(v1);

  return std::ios::~ios();
}

void sub_1000BEFE8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BF1CC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BF050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BF088(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BF0F0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BF1CC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BF154(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BF1CC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BF1CC(uint64_t a1)
{
  *(void *)a1 = off_1001A7DB0;
  sub_1000BF308(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BF308(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BF4C8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BF464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BF490(uint64_t a1)
{
  sub_1000BF1CC(a1);

  operator delete();
}

int *sub_1000BF4C8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 434;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 434;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BF6B0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BF940(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BF6FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BF940(v1);

  return std::ios::~ios();
}

void sub_1000BF75C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BF940(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BF7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BF7FC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BF864(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BF940(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000BF8C8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BF940(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BF940(uint64_t a1)
{
  *(void *)a1 = off_1001A7FD0;
  sub_1000BFA7C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000BFA7C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000BFC3C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BFBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BFC04(uint64_t a1)
{
  sub_1000BF940(a1);

  operator delete();
}

int *sub_1000BFC3C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 443;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 443;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BFE24(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C00B4(v1);

  return std::ios::~ios();
}

uint64_t sub_1000BFE70(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C00B4(v1);

  return std::ios::~ios();
}

void sub_1000BFED0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C00B4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000BFF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BFF70(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BFFD8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C00B4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C003C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C00B4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C00B4(uint64_t a1)
{
  *(void *)a1 = off_1001A81F0;
  sub_1000C01F0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000C01F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C03B0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C034C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C0378(uint64_t a1)
{
  sub_1000C00B4(a1);

  operator delete();
}

int *sub_1000C03B0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 460;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 460;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C0598(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C0828(v1);

  return std::ios::~ios();
}

uint64_t sub_1000C05E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C0828(v1);

  return std::ios::~ios();
}

void sub_1000C0644(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C0828(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C06AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C06E4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C074C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C0828(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C07B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C0828(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C0828(uint64_t a1)
{
  *(void *)a1 = off_1001A8410;
  sub_1000C0964(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000C0964(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C0B24((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C0AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C0AEC(uint64_t a1)
{
  sub_1000C0828(a1);

  operator delete();
}

int *sub_1000C0B24(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 469;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 469;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C0D0C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C0F9C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000C0D58(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C0F9C(v1);

  return std::ios::~ios();
}

void sub_1000C0DB8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C0F9C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C0E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C0E58(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C0EC0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C0F9C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C0F24(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C0F9C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C0F9C(uint64_t a1)
{
  *(void *)a1 = off_1001A8630;
  sub_1000C10D8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000C10D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C1298((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C1234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C1260(uint64_t a1)
{
  sub_1000C0F9C(a1);

  operator delete();
}

int *sub_1000C1298(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 492;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 492;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C1480(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C1710(v1);

  return std::ios::~ios();
}

uint64_t sub_1000C14CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C1710(v1);

  return std::ios::~ios();
}

void sub_1000C152C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C1710(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C1594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C15CC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C1634(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C1710(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C1698(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C1710(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C1710(uint64_t a1)
{
  *(void *)a1 = off_1001A8850;
  sub_1000C184C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000C184C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C1A0C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C19A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C19D4(uint64_t a1)
{
  sub_1000C1710(a1);

  operator delete();
}

int *sub_1000C1A0C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 498;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 498;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C1BF4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C1E84(v1);

  return std::ios::~ios();
}

uint64_t sub_1000C1C40(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C1E84(v1);

  return std::ios::~ios();
}

void sub_1000C1CA0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C1E84(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C1D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C1D40(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C1DA8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C1E84(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C1E0C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C1E84(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C1E84(uint64_t a1)
{
  *(void *)a1 = off_1001A8A70;
  sub_1000C1FC0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000C1FC0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C2180((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C211C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C2148(uint64_t a1)
{
  sub_1000C1E84(a1);

  operator delete();
}

int *sub_1000C2180(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 505;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 505;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C2368(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C25F8(v1);

  return std::ios::~ios();
}

uint64_t sub_1000C23B4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C25F8(v1);

  return std::ios::~ios();
}

void sub_1000C2414(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C25F8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C247C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C24B4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C251C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C25F8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C2580(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C25F8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C25F8(uint64_t a1)
{
  *(void *)a1 = off_1001A8C90;
  sub_1000C2734(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000C2734(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C28F4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C2890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C28BC(uint64_t a1)
{
  sub_1000C25F8(a1);

  operator delete();
}

int *sub_1000C28F4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 511;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 511;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C2ADC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C2D6C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000C2B28(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C2D6C(v1);

  return std::ios::~ios();
}

void sub_1000C2B88(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C2D6C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C2BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C2C28(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C2C90(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C2D6C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C2CF4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C2D6C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C2D6C(uint64_t a1)
{
  *(void *)a1 = off_1001A8EB0;
  sub_1000C2EA8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000C2EA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C3068((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C3004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C3030(uint64_t a1)
{
  sub_1000C2D6C(a1);

  operator delete();
}

int *sub_1000C3068(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 523;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 523;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000C3250(void *a1, uint64_t a2)
{
  *a1 = off_1001A8F30;
  a1[1] = a2;
  sub_1000C3504(a1 + 2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 720) - *(void *)(a2 + 712)) >> 3));
  if (sub_1000D29B8())
  {
    *(void *)&long long v4 = "DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(DiskImageSparseBundle &)";
    *((void *)&v4 + 1) = 63;
    int v5 = 2;
    sub_1000C3360(v6, &v4);
    sub_100003DF0(v7, (uint64_t)"Constructing sb context", 23);
    std::ostream::~ostream();
    sub_1000C3614((uint64_t)v6);
    std::ios::~ios();
  }
  return a1;
}

void sub_1000C3334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000C3484((uint64_t)va);
  sub_100017D2C((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_1000C3360(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C3584((uint64_t)a1, a2);
  *a1 = off_1001A8F90;
  a1[45] = &off_1001A9090;
  a1[46] = &off_1001A90B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A8F90;
  a1[45] = off_1001A9018;
  a1[46] = off_1001A9040;
  return a1;
}

void sub_1000C3460(_Unwind_Exception *a1)
{
  sub_1000C3614(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000C3484(uint64_t a1)
{
  return a1;
}

void sub_1000C34CC(uint64_t a1)
{
  sub_1000C3D88(a1);

  operator delete();
}

void *sub_1000C3504(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100017BDC(a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1000C3570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_1000C3584(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A9128;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C3600(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C3614(uint64_t a1)
{
  *(void *)a1 = off_1001A9128;
  sub_1000C3A1C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000C3750(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C3614(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C37B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C37F0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000C3858(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C3614(v1);

  return std::ios::~ios();
}

void sub_1000C38A4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C3614(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C3908(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C3614(v1);

  return std::ios::~ios();
}

void sub_1000C3968(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C3614(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C39E4(uint64_t a1)
{
  sub_1000C3614(a1);

  operator delete();
}

uint64_t sub_1000C3A1C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C3BA0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C3B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000C3BA0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 37;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 37;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C3D88(uint64_t a1)
{
  *(void *)a1 = off_1001A8F30;
  if (sub_1000D29B8())
  {
    *(void *)&long long v3 = "DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle()";
    *((void *)&v3 + 1) = 64;
    int v4 = 2;
    sub_1000C3E58(v5, &v3);
    sub_100003DF0(v6, (uint64_t)"Destructing sb context", 22);
    std::ostream::~ostream();
    sub_1000C4050((uint64_t)v5);
    std::ios::~ios();
  }
  v5[0] = (void **)(a1 + 16);
  sub_100017D2C(v5);
  return a1;
}

void *sub_1000C3E58(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C3FC0((uint64_t)a1, a2);
  *a1 = off_1001A91B0;
  a1[45] = &off_1001A92B0;
  a1[46] = &off_1001A92D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A91B0;
  a1[45] = off_1001A9238;
  a1[46] = off_1001A9260;
  return a1;
}

void sub_1000C3F58(_Unwind_Exception *a1)
{
  sub_1000C4050(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000C3F7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C3FC0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A9348;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C403C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4050(uint64_t a1)
{
  *(void *)a1 = off_1001A9348;
  sub_1000C4458(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000C418C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C4050(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C41F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C422C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000C4294(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C4050(v1);

  return std::ios::~ios();
}

void sub_1000C42E0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C4050(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C4344(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C4050(v1);

  return std::ios::~ios();
}

void sub_1000C43A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C4050(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C4420(uint64_t a1)
{
  sub_1000C4050(a1);

  operator delete();
}

uint64_t sub_1000C4458(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C45DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C45B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000C45DC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 41;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 41;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C47C4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5550;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C4840(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4854(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5770;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C48D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C48E4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5990;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C4960(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4974(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5BB0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C49F0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4A04(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5DD0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C4A80(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4A94(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5FF0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C4B10(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4B24(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6210;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C4BA0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4BB4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6430;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C4C30(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4C44(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6650;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C4CC0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4CD4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6870;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C4D50(_Unwind_Exception *a1)
{
}

void sub_1000C4D64(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, void *a5@<X8>)
{
  char v10 = *a1;
  unint64_t v11 = sub_1000C4E04((uint64_t)a1, a3);
  if (v11 >> 59) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  os_log_type_t v12 = (char *)v11;
  uint64_t v13 = operator new(16 * v11);
  sub_1000C4E7C(a1, v13, v12, a2, a3, a4);
  *a5 = (char *)*a1 + a2 - v10;
}

unint64_t sub_1000C4E04(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x7FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x7FFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000C4E7C(void **a1, _OWORD *__dst, char *a3, char *__src, uint64_t a5, _OWORD *a6)
{
  os_log_type_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (*a1) {
    BOOL v14 = __dst == 0;
  }
  else {
    BOOL v14 = 1;
  }
  BOOL v15 = v14 || v12 == __src;
  char v16 = __dst;
  if (!v15)
  {
    memmove(__dst, v12, __src - v12);
    char v16 = (_OWORD *)((char *)__dst + __src - v12);
  }
  _OWORD *v16 = *a6;
  if (__src)
  {
    int v17 = &v12[16 * (void)v13];
    if (v17 != __src && v16 != 0) {
      memmove(&v16[a5], __src, v17 - __src);
    }
  }
  if (v12 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  uint64_t v19 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v19;
  a1[2] = a3;
}

uint64_t sub_1000C4F50(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6A90;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C4FCC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4FE0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6CB0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C505C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C5070(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6ED0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C50EC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C5100(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A70F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C517C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C5190(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7310;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C520C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C5220(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7530;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C529C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C52B0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7750;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C532C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C5340(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7970;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C53BC(_Unwind_Exception *a1)
{
}

void sub_1000C53D0(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 560);
  *(void *)(v3 + 136) = sub_100143B3C();
  *(void *)(v3 + 144) = v4;
  sub_10007580C(*(void *)(v2 + 560));
}

void sub_1000C541C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v63 = v59;
  if (a2 == 1)
  {
    v60 = __cxa_begin_catch(exception_object);
    *(void *)&a11 = "DiskImageSparseBundle::void_stackable_identifier()::(anonymous class)::operator()() const";
    *((void *)&a11 + 1) = 81;
    a12 = 16;
    sub_1000C54F8(&a14, &a11);
    sub_100143A7C(&a59, (uint64_t)v60);
    std::ostream::~ostream();
    sub_1000C56F0((uint64_t)&a14);
    std::ios::~ios();
    int v61 = v60[2];
    if (v61 < 0) {
      int v62 = v60[2];
    }
    else {
      int v62 = -v61;
    }
    **(_DWORD **)(v63 + 8) = v62;
    __cxa_end_catch();
    JUMPOUT(0x1000C5408);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000C54F8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C5660((uint64_t)a1, a2);
  *a1 = off_1001A93D0;
  a1[45] = &off_1001A94D0;
  a1[46] = &off_1001A94F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A93D0;
  a1[45] = off_1001A9458;
  a1[46] = off_1001A9480;
  return a1;
}

void sub_1000C55F8(_Unwind_Exception *a1)
{
  sub_1000C56F0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000C561C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C5660(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A9568;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C56DC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C56F0(uint64_t a1)
{
  *(void *)a1 = off_1001A9568;
  sub_1000C5AF8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000C582C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C56F0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C5894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C58CC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000C5934(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C56F0(v1);

  return std::ios::~ios();
}

void sub_1000C5980(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C56F0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000C59E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C56F0(v1);

  return std::ios::~ios();
}

void sub_1000C5A44(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C56F0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000C5AC0(uint64_t a1)
{
  sub_1000C56F0(a1);

  operator delete();
}

uint64_t sub_1000C5AF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000C5C7C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C5C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000C5C7C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 307;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 307;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C5E64(void *a1)
{
  uint64_t v1 = qword_1001C4710;
  unsigned __int8 v2 = a1 + 1;
  uint64_t v3 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      uint64_t v4 = sub_1000C5EE8(v3 + 4);
      int v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          char v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      v1 += v4;
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
  return v1;
}

uint64_t sub_1000C5EE8(unint64_t *a1)
{
  unsigned int v1 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v1 == 3)
    {
      unint64_t v3 = *a1;
      unint64_t v2 = a1[1];
      if (v2 >= *a1) {
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
      }
    }
    else
    {
      unint64_t v3 = *a1;
      unint64_t v2 = a1[1];
      if (*a1 < v2) {
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
      }
    }
  }
  else
  {
    unint64_t v3 = *a1;
    unint64_t v2 = a1[1];
    if (*a1 < v2 && *a1 + 1 < v2) {
      return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
    }
  }
  return qword_1001C4710;
}

uint64_t sub_1000C5F50(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7DB0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C5FCC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C5FE0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7FD0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C605C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C6070(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A81F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C60EC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C6100(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_1000C6158((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1000C6140(_Unwind_Exception *a1)
{
  sub_10002A594(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1000C6158(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    long long v5 = (uint64_t **)result;
    char v6 = (uint64_t *)result + 1;
    do
    {
      uint64_t result = sub_1000C61E4(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_1000C61E4(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v6 = sub_10002B240(a1, a2, &v11, &v10, a3);
  BOOL v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    BOOL v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_10002B3B8(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t sub_1000C6274(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8410;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C62F0(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000C6304(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    do
    {
      char v6 = sub_1000464E4(a1, v4);
      operator delete(v4);
      char v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t **sub_1000C6364(uint64_t **a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 < v11 && *(void *)a2 + 1 < v11) {
      goto LABEL_4;
    }
    return a1 + 1;
  }
  if (*(unsigned char *)(a2 + 16) == 3)
  {
    if (*(void *)(a2 + 8) >= *(void *)a2) {
      goto LABEL_4;
    }
    return a1 + 1;
  }
  if (*(void *)a2 >= *(void *)(a2 + 8)) {
    return a1 + 1;
  }
LABEL_4:
  char v4 = (uint64_t *)sub_1000C64B0(a1, a2, a2);
  if (v5)
  {
    uint64_t v13 = v4;
    sub_1000C653C(a1, &v13);
    return sub_1000C663C(a1, (uint64_t ***)&v13);
  }
  else
  {
    char v6 = (void *)sub_1000C6838((uint64_t)a1, a2);
    BOOL v7 = (void *)*v6;
    if (*v6)
    {
      do
      {
        unint64_t v8 = v7;
        BOOL v7 = (void *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        unint64_t v8 = (void *)v6[2];
        BOOL v9 = *v8 == (void)v6;
        char v6 = v8;
      }
      while (v9);
    }
    return sub_1000C6468(a1, (unint64_t *)a2, (uint64_t)v8);
  }
}

uint64_t **sub_1000C6468(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  char v5 = (uint64_t *)sub_1000C6880(a1, a2, a3);
  sub_1000C653C(a1, &v5);
  return sub_1000C663C(a1, (uint64_t ***)&v5);
}

_OWORD *sub_1000C64B0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  char v5 = (void **)sub_10002B410((uint64_t)a1, &v9, a2);
  char v6 = *v5;
  if (!*v5)
  {
    BOOL v7 = (uint64_t **)v5;
    char v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    sub_10002B3B8(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_1000C653C(uint64_t **a1, uint64_t **a2)
{
  unint64_t v2 = *a2;
  if (*a2 == *a1) {
    return *a1;
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = (uint64_t)*a2;
    do
    {
      uint64_t v5 = *(void *)(v6 + 16);
      BOOL v7 = *(void *)v5 == v6;
      uint64_t v6 = v5;
    }
    while (v7);
  }
  uint64_t v8 = v2[4];
  if ((v2[6] & 2) == 0) {
    ++v8;
  }
  if (v8 == (*(unsigned char *)(v5 + 48) & 1) + *(void *)(v5 + 40))
  {
    long long v14 = *((_OWORD *)v2 + 2);
    uint64_t v15 = v2[6];
    sub_1000464E4(a1, v2);
    operator delete(v2);
    long long v10 = *(_OWORD *)(v5 + 32);
    uint64_t v11 = *(void *)(v5 + 48);
    sub_1000C6744((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 32) = v12;
    *(unsigned char *)(v5 + 48) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }
  return v2;
}

uint64_t **sub_1000C663C(uint64_t **a1, uint64_t ***a2)
{
  unint64_t v3 = a1 + 1;
  uint64_t result = *a2;
  if (*a2 == v3) {
    return v3;
  }
  uint64_t v6 = result[1];
  if (v6)
  {
    do
    {
      BOOL v7 = (uint64_t **)v6;
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v8 = *a2;
    do
    {
      BOOL v7 = (uint64_t **)v8[2];
      BOOL v9 = *v7 == (uint64_t *)v8;
      uint64_t v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    long long v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0) {
      long long v10 = (uint64_t *)((char *)v10 + 1);
    }
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1)))
    {
      long long v17 = *((_OWORD *)v7 + 2);
      __int16 v18 = v7[6];
      sub_1000464E4(a1, (uint64_t *)v7);
      operator delete(v7);
      uint64_t v11 = *a2;
      long long v13 = *((_OWORD *)*a2 + 2);
      long long v14 = v11[6];
      sub_1000C6744((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      long long v12 = *a2;
      *((_OWORD *)v12 + 2) = v15;
      *((unsigned char *)v12 + 48) = v16;
      return *a2;
    }
  }
  return result;
}

unint64_t *sub_1000C6744@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (*((unsigned char *)a2 + 16))
  {
    if (v3 == 3)
    {
      uint64_t v5 = (uint64_t *)*a2;
      unint64_t v4 = a2[1];
      if (v4 >= *a2) {
        goto LABEL_4;
      }
LABEL_24:
      *(_OWORD *)a3 = *(_OWORD *)result;
      unint64_t v15 = result[2];
LABEL_33:
      *(void *)(a3 + 16) = v15;
      return result;
    }
    uint64_t v5 = (uint64_t *)*a2;
    unint64_t v4 = a2[1];
    if (*a2 >= v4) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)*a2;
    unint64_t v4 = a2[1];
    if (*a2 >= v4 || *a2 + 1 >= v4) {
      goto LABEL_24;
    }
  }
LABEL_4:
  int v6 = *((unsigned __int8 *)result + 16);
  if (!*((unsigned char *)result + 16))
  {
    uint64_t v8 = (uint64_t *)*result;
    unint64_t v7 = result[1];
    if (*result < v7 && *result + 1 < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
  if (v6 != 3)
  {
    uint64_t v8 = (uint64_t *)*result;
    unint64_t v7 = result[1];
    if (*result < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
  uint64_t v8 = (uint64_t *)*result;
  unint64_t v7 = result[1];
  if (v7 < *result)
  {
LABEL_32:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    unint64_t v15 = a2[2];
    goto LABEL_33;
  }
LABEL_7:
  char v9 = v6 & 2;
  if ((v6 & 2) != 0) {
    unint64_t v10 = (unint64_t)v8;
  }
  else {
    unint64_t v10 = (unint64_t)v8 + 1;
  }
  char v11 = v3 & 2;
  if ((v3 & 2) != 0) {
    uint64_t result = (unint64_t *)v5;
  }
  else {
    uint64_t result = (unint64_t *)((char *)v5 + 1);
  }
  int v12 = v6 & 1;
  int v13 = v3 & 1;
  if (v10 >= (unint64_t)result) {
    char v9 = v11;
  }
  else {
    uint64_t v5 = v8;
  }
  if (v7 + v12 - 1 >= v4 + v13 - 1)
  {
    unint64_t v4 = v7;
    LOBYTE(v13) = v12;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 16) = v13 | v9;
  return result;
}

uint64_t sub_1000C6838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = a1 + 8;
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = (*(unsigned char *)(a2 + 16) & 1) + *(void *)(a2 + 8) - 1;
    do
    {
      unint64_t v6 = *(void *)(v3 + 32);
      if ((*(unsigned char *)(v3 + 48) & 2) == 0) {
        ++v6;
      }
      BOOL v7 = v5 >= v6;
      if (v5 >= v6) {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      else {
        uint64_t v8 = (uint64_t *)v3;
      }
      if (!v7) {
        uint64_t result = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t sub_1000C6880(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000C6B64((uint64_t)a1, (uint64_t)a2);
  uint64_t v7 = v6;
  uint64_t v8 = *(uint64_t **)(v6 + 8);
  if (v8)
  {
    do
    {
      char v9 = v8;
      uint64_t v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v10 = v6;
    do
    {
      char v9 = *(uint64_t **)(v10 + 16);
      BOOL v11 = *v9 == v10;
      uint64_t v10 = (uint64_t)v9;
    }
    while (!v11);
  }
  int v12 = *(uint64_t **)(a3 + 8);
  if (v12)
  {
    do
    {
      int v13 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v14 = (uint64_t *)a3;
    do
    {
      int v13 = (uint64_t *)v14[2];
      BOOL v11 = *v13 == (void)v14;
      long long v14 = v13;
    }
    while (!v11);
  }
  long long v24 = *(_OWORD *)(v6 + 32);
  uint64_t v25 = *(void *)(v6 + 48);
  sub_1000C69BC((unint64_t *)&v24, (uint64_t)a2, (uint64_t)&v26);
  long long v21 = *(_OWORD *)(a3 + 32);
  uint64_t v22 = *(void *)(a3 + 48);
  sub_1000C6A90((uint64_t)&v21, (uint64_t)a2, (uint64_t)v23);
  sub_1000C6304(a1, v9, v13);
  long long v16 = v26;
  uint64_t v17 = v27;
  sub_1000C6744((unint64_t *)&v16, a2, (uint64_t)v18);
  sub_1000C6744(v18, v23, (uint64_t)&v19);
  *(_OWORD *)(v7 + 32) = v19;
  *(unsigned char *)(v7 + 48) = v20;
  return v7;
}

unint64_t *sub_1000C69BC@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)result + 16);
  if (*((unsigned char *)result + 16))
  {
    if (v3 == 3)
    {
      unint64_t v4 = *result;
      unint64_t v5 = result[1];
      if (v5 < *result) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v4 = *result;
      unint64_t v5 = result[1];
      if (*result >= v5) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    unint64_t v4 = *result;
    unint64_t v5 = result[1];
    if (*result >= v5 || *result + 1 >= v5) {
      goto LABEL_27;
    }
  }
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v8 = *(void *)a2;
    unint64_t v9 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v9 || *(void *)a2 + 1 >= v9) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  if (v7 != 3)
  {
    unint64_t v8 = *(void *)a2;
    if (*(void *)a2 < *(void *)(a2 + 8)) {
      goto LABEL_23;
    }
LABEL_27:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(void *)(a3 + 16) = result[2];
    return result;
  }
  unint64_t v8 = *(void *)a2;
  if (*(void *)(a2 + 8) < *(void *)a2) {
    goto LABEL_27;
  }
LABEL_23:
  unint64_t v11 = (v3 & 1) + v5 - 1;
  if ((v7 & 2) != 0) {
    unint64_t v12 = v8;
  }
  else {
    unint64_t v12 = v8 + 1;
  }
  if (v11 < v12) {
    goto LABEL_27;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v3 & 2 | ((~v7 & 2) != 0);
  return result;
}

uint64_t sub_1000C6A90@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v3 == 3)
    {
      unint64_t v4 = *(void *)(a2 + 8);
      if (v4 < *(void *)a2) {
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v4 = *(void *)(a2 + 8);
      if (*(void *)a2 >= v4) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v4 || *(void *)a2 + 1 >= v4) {
      goto LABEL_26;
    }
  }
  int v6 = *(unsigned __int8 *)(result + 16);
  if (!*(unsigned char *)(result + 16))
  {
    unint64_t v8 = *(void *)result;
    unint64_t v7 = *(void *)(result + 8);
    if (*(void *)result >= v7 || *(void *)result + 1 >= v7) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  if (v6 != 3)
  {
    unint64_t v8 = *(void *)result;
    unint64_t v7 = *(void *)(result + 8);
    if (*(void *)result < v7) {
      goto LABEL_23;
    }
LABEL_26:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(void *)(a3 + 16) = *(void *)(result + 16);
    return result;
  }
  unint64_t v8 = *(void *)result;
  unint64_t v7 = *(void *)(result + 8);
  if (v7 < *(void *)result) {
    goto LABEL_26;
  }
LABEL_23:
  if ((v6 & 2) == 0) {
    ++v8;
  }
  if ((v3 & 1) + v4 - 1 < v8) {
    goto LABEL_26;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v7;
  *(unsigned char *)(a3 + 16) = v6 & 1 | (2 * ((v3 & 1) == 0));
  return result;
}

uint64_t sub_1000C6B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = a1 + 8;
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = *(void *)a2;
    if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
      ++v5;
    }
    do
    {
      unint64_t v6 = (*(unsigned char *)(v3 + 48) & 1) + *(void *)(v3 + 40) - 1;
      BOOL v7 = v6 >= v5;
      if (v6 >= v5) {
        unint64_t v8 = (uint64_t *)v3;
      }
      else {
        unint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t result = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t sub_1000C6BAC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8630;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C6C28(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C6C3C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8850;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C6CB8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C6CCC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8A70;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C6D48(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C6D5C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8C90;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C6DD8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C6DEC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8EB0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000C6E68(_Unwind_Exception *a1)
{
}

void sub_1000C6EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C6F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C6FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C71AC(_Unwind_Exception *a1, int a2)
{
  unint64_t v6 = v5;

  if (a2 == 1)
  {
    uint64_t v9 = +[DIError errorWithDIException:__cxa_begin_catch(a1) description:0 prefix:0 error:0];
    uint64_t v10 = (void *)v3[6];
    v3[6] = v9;

    __cxa_end_catch();
    JUMPOUT(0x1000C718CLL);
  }

  _Unwind_Resume(a1);
}

void sub_1000C7238()
{
}

void sub_1000C7240()
{
}

void sub_1000C7380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C751C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C775C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    BOOL v7 = [objc_begin_catch(a1) reason];
    +[DIError failWithEnumValue:150 verboseInfo:v7 error:v2];

    objc_end_catch();
    JUMPOUT(0x1000C7724);
  }
  _Unwind_Resume(a1);
}

void sub_1000C7D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C7FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C866C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18, __int16 a19, uint64_t a20,__int16 a21,int a22)
{
  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Failed opening the shadow/cache file(s)" error:v23];
    __cxa_end_catch();
    JUMPOUT(0x1000C8628);
  }

  _Unwind_Resume(a1);
}

void sub_1000C8A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C8D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100010A48(v12);
  }
  if (a12) {
    sub_100010A48(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C8EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C8F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C906C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C9178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C923C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C92F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C93D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C9468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C957C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C96FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C9920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C99E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C9AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C9AB0(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  unint64_t v6 = v5;
  uint64_t v7 = 514;
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(unsigned char *)(a1 + 41)) {
      uint64_t v7 = 514;
    }
    else {
      uint64_t v7 = 2562;
    }
  }
  if ([v5 isCache])
  {
    [v6 createBackendWithFlags:v7];
    int v8 = *__error();
    if (sub_1000D29A0())
    {
      uint64_t v9 = sub_1000D2920();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      uint64_t v10 = [v6 URL];
      [v10 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = (id)objc_claimAutoreleasedReturnValue();
      unint64_t v11 = (char *)_os_log_send_and_compose_impl();

      if (v11)
      {
        fprintf(__stderrp, "%s\n", v11);
        free(v11);
      }
    }
    else
    {
      long long v14 = sub_1000D2920();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v15 = [v6 URL];
        long long v16 = [v15 path];
        *(_DWORD *)buf = 68158211;
        int v29 = 61;
        __int16 v30 = 2080;
        unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
        __int16 v32 = 2113;
        id v33 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%.*s: Cache file %{private}@ opened with RW access", buf, 0x1Cu);
      }
    }
    goto LABEL_33;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v12 = [*(id *)(a1 + 32) nodes];
    if ((char *)[v12 count] - 1 == a3) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  [v6 createBackendWithFlags:v13];
  if ((v13 & 3) != 0)
  {
    int v8 = *__error();
    if (sub_1000D29A0())
    {
      uint64_t v17 = sub_1000D2920();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      __int16 v18 = [v6 URL];
      [v18 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = (id)objc_claimAutoreleasedReturnValue();
      long long v19 = (char *)_os_log_send_and_compose_impl();

      if (!v19) {
        goto LABEL_33;
      }
      goto LABEL_25;
    }
    uint64_t v22 = sub_1000D2920();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = [v6 URL];
      long long v24 = [v23 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%.*s: Shadow file %{private}@ opened with RW access", buf, 0x1Cu);
    }
  }
  else
  {
    int v8 = *__error();
    if (sub_1000D29A0())
    {
      char v20 = sub_1000D2920();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      long long v21 = [v6 URL];
      [v21 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = (id)objc_claimAutoreleasedReturnValue();
      long long v19 = (char *)_os_log_send_and_compose_impl();

      if (!v19) {
        goto LABEL_33;
      }
LABEL_25:
      fprintf(__stderrp, "%s\n", v19);
      free(v19);
      goto LABEL_33;
    }
    uint64_t v25 = sub_1000D2920();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      long long v26 = [v6 URL];
      uint64_t v27 = [v26 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%.*s: Using an existing shadow file: %{private}@", buf, 0x1Cu);
    }
  }
LABEL_33:
  *__error() = v8;
}

void sub_1000CA074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void sub_1000CA784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CA93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CA9B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CAA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CAAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CAB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000CABB0(id a1, DIShadowNode *a2, NSDictionary *a3)
{
  return ![(DIShadowNode *)a2 isCache];
}

void sub_1000CAF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a19) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a17);
  }
  if (v20) {
    sub_100010A48(v20);
  }

  _Unwind_Resume(a1);
}

void sub_1000CB170(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000CB24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CB2DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CBBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CBBDC(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = 0;
  id v3 = a1;
  if ([v3 decodeBytesForKey:@"crypto_header" returnedLength:&v6])
  {
    if (v6 == 76) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v5);
    sub_100003DF0(v5, (uint64_t)"Unexpected crypto header length (", 33);
    std::ostream::operator<<();
    sub_100003DF0(v5, (uint64_t)")", 1);
    sub_100010C3C((uint64_t)exception, (uint64_t)v5, 0x9Au);
  }
  *a2 = 0;
}

void sub_1000CBCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000E628((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000CBDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CBE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100010A48(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CBF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_1000CC054()
{
}

void sub_1000CC1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  sub_100060B34((uint64_t)&a11);

  if (a26) {
    sub_100010A48(a26);
  }

  _Unwind_Resume(a1);
}

void sub_1000CC8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1000CCBFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CCDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100010A48(a14);
  }
  if (a12) {
    sub_100010A48(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1000CCEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100010A48(a12);
  }
  if (a10) {
    sub_100010A48(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1000CD070(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100010A48(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000CD22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CD2A8()
{
}

void sub_1000CD2B0(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  size_t v22 = 0;
  size_t v23 = 0;
  id v5 = a1;
  id v6 = [v5 decodeBytesForKey:@"encKeys" returnedLength:&v23];
  id v7 = v5;
  id v8 = [v7 decodeBytesForKey:@"prngKeys" returnedLength:&v22];
  if (v6 && (uint64_t v9 = v8) != 0)
  {
    char v20 = 0;
    uint64_t v21 = 0;
    long long v19 = 0;
    sub_1000D0B80(&v19, v6, (uint64_t)v6 + v23, v23);
    uint64_t v18 = 0;
    __n128 v17 = 0uLL;
    sub_1000D0B80(&v17, v9, (uint64_t)v9 + v22, v22);
    sub_1001382F0(v11, (uint64_t)&v19, &v17, a2);
    sub_10006373C(a3);
    if (__p)
    {
      long long v16 = __p;
      operator delete(__p);
    }
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      operator delete();
    }
    if (v12)
    {
      uint64_t v13 = v12;
      operator delete(v12);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
    if (v17.n128_u64[0])
    {
      v17.n128_u64[1] = v17.n128_u64[0];
      operator delete((void *)v17.n128_u64[0]);
    }
    if (v19)
    {
      char v20 = v19;
      operator delete(v19);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1000CD410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  sub_100060B34((uint64_t)&a10);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  long long v24 = *(void **)(v22 - 96);
  if (v24)
  {
    *(void *)(v22 - 88) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_1000CD618(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100010A48(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000CD670(void *a1, void *a2)
{
  id v3 = a1;
  [v3 encodeBytes:a2[6] length:76 forKey:@"crypto_header"];
  [v3 encodeBytes:*a2 length:a2[1] - *a2 forKey:@"encKeys"];
  [v3 encodeBytes:a2[3] length:a2[4] - a2[3] forKey:@"prngKeys"];
}

void sub_1000CD6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CD7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100010A48(a14);
  }
  if (a12) {
    sub_100010A48(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1000CD8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100010A48(a14);
  }
  if (a12) {
    sub_100010A48(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1000CD960(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100010A48(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CDA54(_Unwind_Exception *a1)
{
  if (v3) {
    sub_100010A48(v3);
  }
  if (v2) {
    sub_100010A48(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000CDB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  if (v11) {
    sub_100010A48(v11);
  }

  _Unwind_Resume(a1);
}

void sub_1000CDC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100010A48(a12);
  }
  if (a10) {
    sub_100010A48(a10);
  }

  _Unwind_Resume(a1);
}

#error "1000CDF0C: call analysis failed (funcsize=142)"

void sub_1000CE184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100010A48(a12);
  }
  if (a10) {
    sub_100010A48(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1000CE2A8(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1000CE3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_100010A48(a17);
  }

  _Unwind_Resume(a1);
}

void sub_1000CE7F0(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100010A48(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000CE8E0(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100010A48(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000CEA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEDC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_100010A48(a16);
  }
  if (a14) {
    sub_100010A48(a14);
  }
  if (a12) {
    sub_100010A48(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1000CF53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    sub_100010A48(a14);
  }
  if (a12) {
    sub_100010A48(a12);
  }
  if (a16) {
    sub_100010A48(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1000CF654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    sub_100010A48(a12);
  }
  if (a10) {
    sub_100010A48(a10);
  }
  if (a16) {
    sub_100010A48(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1000CFB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a16) {
    sub_100010A48(a16);
  }
  if (a14) {
    sub_100010A48(a14);
  }
  if (a22) {
    sub_100010A48(a22);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000CFB88(void *a1, uint64_t a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    id v5 = a1;
    id v6 = +[NSString stringWithUTF8String:a2];
    id v7 = [v5 objectForKeyedSubscript:v6];
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v7 length])
      {
        id v8 = malloc_type_malloc((size_t)[v7 length], 0x2E7B6484uLL);
        *a3 = v8;
        if (v8)
        {
          id v9 = v7;
          memcpy(v8, [v9 bytes], (size_t)[v9 length]);
          uint64_t v10 = (uint64_t)[v9 length];
        }
        else
        {
          int v20 = *__error();
          if (sub_1000D29A0())
          {
            uint64_t v21 = sub_1000D2920();
            os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 68158466;
            int v25 = 59;
            __int16 v26 = 2080;
            uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v28 = 2048;
            id v29 = [v7 length];
            __int16 v30 = 2112;
            unint64_t v31 = v6;
            uint64_t v22 = (char *)_os_log_send_and_compose_impl();

            if (v22)
            {
              fprintf(__stderrp, "%s\n", v22);
              free(v22);
            }
          }
          else
          {
            size_t v23 = sub_1000D2920();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68158466;
              int v25 = 59;
              __int16 v26 = 2080;
              uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
              __int16 v28 = 2048;
              id v29 = [v7 length];
              __int16 v30 = 2112;
              unint64_t v31 = v6;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%.*s: Out of memory, failed to allocated %zu bytes for key %@", buf, 0x26u);
            }
          }
          *__error() = v20;
          uint64_t v10 = -12;
        }
      }
      else
      {
        int v15 = *__error();
        if (sub_1000D29A0())
        {
          long long v16 = sub_1000D2920();
          os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 68158210;
          int v25 = 59;
          __int16 v26 = 2080;
          uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
          __int16 v28 = 2112;
          id v29 = v6;
          __n128 v17 = (char *)_os_log_send_and_compose_impl();

          if (v17)
          {
            fprintf(__stderrp, "%s\n", v17);
            free(v17);
          }
        }
        else
        {
          uint64_t v18 = sub_1000D2920();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            int v25 = 59;
            __int16 v26 = 2080;
            uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v28 = 2112;
            id v29 = v6;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }
        *__error() = v15;
        uint64_t v10 = -22;
      }
    }
    else
    {
      uint64_t v10 = -2;
    }
  }
  else
  {
    int v11 = *__error();
    if (sub_1000D29A0())
    {
      unint64_t v12 = sub_1000D2920();
      os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v25 = 59;
      __int16 v26 = 2080;
      uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();

      if (v13)
      {
        fprintf(__stderrp, "%s\n", v13);
        free(v13);
      }
    }
    else
    {
      uint64_t v14 = sub_1000D2920();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v25 = 59;
        __int16 v26 = 2080;
        uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v11;
    return -22;
  }
  return v10;
}

void sub_1000D00EC(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1000D0148(void *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    id v3 = a1;
    char v4 = +[NSString stringWithUTF8String:a2];
    id v5 = [v3 objectForKeyedSubscript:v4];
    if (v5)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v6 = dup((int)[v5 fileDescriptor]);
        if ((v6 & 0x80000000) != 0) {
          uint64_t v6 = -*__error();
        }
      }
      else
      {
        int v11 = *__error();
        if (sub_1000D29A0())
        {
          unint64_t v12 = sub_1000D2920();
          os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 68158210;
          int v17 = 42;
          __int16 v18 = 2080;
          long long v19 = "int plugin_decode_fd(void *, const char *)";
          __int16 v20 = 2112;
          uint64_t v21 = v4;
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();

          if (v13)
          {
            fprintf(__stderrp, "%s\n", v13);
            free(v13);
          }
        }
        else
        {
          uint64_t v14 = sub_1000D2920();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            int v17 = 42;
            __int16 v18 = 2080;
            long long v19 = "int plugin_decode_fd(void *, const char *)";
            __int16 v20 = 2112;
            uint64_t v21 = v4;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }
        *__error() = v11;
        uint64_t v6 = 4294967274;
      }
    }
    else
    {
      uint64_t v6 = 4294967294;
    }
  }
  else
  {
    int v7 = *__error();
    if (sub_1000D29A0())
    {
      id v8 = sub_1000D2920();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v17 = 42;
      __int16 v18 = 2080;
      long long v19 = "int plugin_decode_fd(void *, const char *)";
      id v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf(__stderrp, "%s\n", v9);
        free(v9);
      }
    }
    else
    {
      uint64_t v10 = sub_1000D2920();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v17 = 42;
        __int16 v18 = 2080;
        long long v19 = "int plugin_decode_fd(void *, const char *)";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v7;
    return 4294967274;
  }
  return v6;
}

void sub_1000D04D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0634(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2 && a3 && a4)
  {
    id v13 = a1;
    int v7 = +[NSString stringWithUTF8String:a2];
    id v8 = +[NSData dataWithBytes:a3 length:a4];
    [v13 setObject:v8 forKeyedSubscript:v7];
  }
  else
  {
    int v9 = *__error();
    if (sub_1000D29A0())
    {
      uint64_t v10 = sub_1000D2920();
      os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v15 = 69;
      __int16 v16 = 2080;
      int v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
      int v11 = (char *)_os_log_send_and_compose_impl();

      if (v11)
      {
        fprintf(__stderrp, "%s\n", v11);
        free(v11);
      }
    }
    else
    {
      unint64_t v12 = sub_1000D2920();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v15 = 69;
        __int16 v16 = 2080;
        int v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v9;
  }
}

void sub_1000D0874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void sub_1000D08A8(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    id v11 = a1;
    id v5 = +[NSString stringWithUTF8String:a2];
    id v6 = [objc_alloc((Class)NSFileHandle) initWithFileDescriptor:a3];
    [v11 setObject:v6 forKeyedSubscript:v5];
  }
  else
  {
    int v7 = *__error();
    if (sub_1000D29A0())
    {
      id v8 = sub_1000D2920();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v13 = 48;
      __int16 v14 = 2080;
      int v15 = "void plugin_encode_fd(void *, const char *, int)";
      int v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf(__stderrp, "%s\n", v9);
        free(v9);
      }
    }
    else
    {
      uint64_t v10 = sub_1000D2920();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v13 = 48;
        __int16 v14 = 2080;
        int v15 = "void plugin_encode_fd(void *, const char *, int)";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v7;
  }
}

void sub_1000D0ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *sub_1000D0B80(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    id v6 = result;
    uint64_t result = sub_100060C24(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000D0BE0(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000D0BFC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = sub_1000D0C78(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000D0C64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D0C78(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019ADB8;
  sub_100138C54(a1 + 24);
  return a1;
}

void sub_1000D0CC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D0CDC(char **a1@<X1>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  id v6 = operator new(0x470uLL);
  sub_1000D0D58(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D0D44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D0D58(void *a1, char **a2, _DWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100199828;
  sub_1000D0DB4((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000D0DA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D0DB4(uint64_t a1, char **a2, _DWORD *a3)
{
  sub_100003BA4(__p, *a2);
  LODWORD(a3) = *a3;
  uint64_t v5 = sub_10011EDAC((uint64_t)__p, (int)a3);
  sub_10004C904(a1, v5, (a3 & 3) != 0, 0);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D0E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D0E44(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x470uLL);
  sub_1000D0ED0(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1000196A4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1000D0EBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D0ED0(void *a1, unsigned int *a2, unsigned __int8 *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100199828;
  sub_10004C904((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1000D0F24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D0F38(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, void *a3@<X8>)
{
  id v6 = operator new(0xB0uLL);
  sub_1000D0FCC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D0FB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D0FCC(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9678;
  sub_1000756A0(a1 + 3, *a2, *a3);
  return a1;
}

void sub_1000D101C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1030(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D1050(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9678;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000D10A4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000D10CC(char **a1@<X1>, _DWORD *a2@<X2>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0xB0uLL);
  sub_1000D1158(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1000196A4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1000D1144(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1158(void *a1, char **a2, _DWORD *a3, unint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9678;
  sub_1000D11B4((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000D11A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D11B4(uint64_t a1, char **a2, _DWORD *a3, unint64_t *a4)
{
  sub_100003BA4(__p, *a2);
  LODWORD(a3) = *a3;
  unint64_t v7 = *a4;
  *(void *)&long long v12 = sub_100143B3C();
  *((void *)&v12 + 1) = v8;
  sub_1000752B4(a1, (uint64_t)__p, (__int16)a3, v7, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D1260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1000D1284(char **a1@<X1>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  id v6 = operator new(0xB0uLL);
  sub_1000D1300(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D12EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1300(void *a1, char **a2, _DWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9678;
  sub_1000D135C((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000D1348(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D135C(uint64_t a1, char **a2, _DWORD *a3)
{
  sub_100003BA4(__p, *a2);
  LODWORD(a3) = *a3;
  *(void *)&long long v9 = sub_100143B3C();
  *((void *)&v9 + 1) = v5;
  sub_1000752B4(a1, (uint64_t)__p, (__int16)a3, 0, &v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D13F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1000D141C(uint64_t *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x48uLL);
  sub_1000D1490(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1000196A4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000D147C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1490(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100198018;
  uint64_t v3 = *a2;
  uint64_t v4 = sub_100143B3C();
  uint64_t v6 = v5;
  sub_10014193C(a1 + 3);
  a1[3] = off_100198068;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_1000D1518(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D152C(size_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x80uLL);
  sub_1000D15A8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D1594(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D15A8(void *a1, size_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A96C8;
  sub_1000D16AC(a1 + 3, *a2, *a3, a3[1]);
  return a1;
}

void sub_1000D15FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1610(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A96C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D1630(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A96C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000D1684(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000D16AC(void *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = sub_10014193C(a1);
  *char v8 = off_1001B4C08;
  v8[3] = 0;
  long long v9 = v8 + 3;
  v8[7] = 0;
  v8[9] = a2;
  v8[10] = a3;
  v8[11] = a4;
  uint64_t v10 = malloc_type_valloc(a2, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v13 = std::bad_alloc::bad_alloc(exception);
  }
  v16[0] = off_1001A9718;
  v16[3] = v16;
  __int16 v14 = v10;
  sub_100017FFC((uint64_t)v15, (uint64_t)v16);
  sub_100017750(v16);
  sub_100010500(v9, (uint64_t *)&v14);
  sub_1000176CC((uint64_t *)&v14, 0);
  sub_100017750(v15);
  a1[8] = a1[3];
  a1[12] = getpagesize();
  return a1;
}

void sub_1000D180C(_Unwind_Exception *a1)
{
  sub_1000176CC(v2, 0);
  sub_100017750((void *)(v1 + 32));
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void sub_1000D183C()
{
}

void *sub_1000D1850()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001A9718;
  return result;
}

void sub_1000D1888(uint64_t a1, void *a2)
{
  *a2 = off_1001A9718;
}

void sub_1000D18B0(uint64_t a1, void **a2)
{
}

uint64_t sub_1000D18B8(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001A9778)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000D18F8()
{
  return &off_1001A9778;
}

void sub_1000D1904(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x48uLL);
  sub_1000D1980(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D196C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1980(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100198018;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  sub_10014193C(a1 + 3);
  a1[3] = off_100198068;
  a1[6] = v4;
  a1[7] = v5;
  a1[8] = v6;
  return a1;
}

void sub_1000D19FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1A10(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  sub_1000D1A8C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D1A78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1A8C(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019AE08;
  int v5 = 0;
  sub_100139F90(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_1000D1AE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1AF8(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  sub_1000D1B74(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D1B60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1B74(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019AE08;
  int v5 = 0;
  sub_100139F90(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_1000D1BCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1BE0(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x68uLL);
  sub_1000D1C54(v2);
  *a1 = v2 + 3;
  a1[1] = v2;

  sub_1000196A4((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000D1C40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1C54(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9798;
  sub_100108808(a1 + 3);
  return a1;
}

void sub_1000D1C9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1CB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D1CD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9798;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000D1D24(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000D1D4C(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x68uLL);
  sub_1000D1DC0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;

  sub_1000196A4((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000D1DAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1DC0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9798;
  sub_100108808(a1 + 3);
  return a1;
}

void sub_1000D1E08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1E1C(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  sub_1000D1E98(v2);
  *a1 = v2 + 3;
  a1[1] = v2;

  sub_1000196A4((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000D1E84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1E98(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A97E8;
  sub_10011CA18(a1 + 3);
  return a1;
}

void sub_1000D1EE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1EF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A97E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D1F14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A97E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000D1F68(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000D1F90@<X0>(char **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t result = sub_1000D1FEC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000D1FD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D1FEC(void *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9838;
  sub_100003BA4(a1 + 3, *a2);
  return a1;
}

void sub_1000D2038(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D204C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D206C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9838;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000D20C0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void sub_1000D20D8(uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  sub_1000D2164(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D2150(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D2164(void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9888;
  sub_10012E388(a1 + 3, a2, *a3);
  return a1;
}

void sub_1000D21B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D21C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D21E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000D2238(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000D2260@<X0>(char **a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x40uLL);
  uint64_t result = sub_1000D22D4(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000D22C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D22D4(void *a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A98D8;
  sub_1000D23B0((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000D231C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D2330(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A98D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D2350(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A98D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000D23A4(uint64_t a1)
{
}

uint64_t sub_1000D23B0(uint64_t a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  sub_100003BA4(__p, *a2);
  uint64_t v7 = *a3;
  uint64_t v8 = *a4;
  memset(v10, 0, sizeof(v10));
  sub_10006B97C(a1, __p, v7, v8 | (unint64_t)&_mh_execute_header, v10, 0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D2430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D244C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_100010A48(v2);
  }
}

void sub_1000D24A0(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  sub_1000D2514(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1000196A4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000D2500(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D2514(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9928;
  sub_10014193C(a1 + 3);
  a1[3] = off_1001A9978;
  uint64_t v4 = a2[1];
  a1[6] = *a2;
  a1[7] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1000D2594(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D25A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D25C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9928;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000D261C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000D2644(void *a1)
{
  *a1 = off_1001A9978;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1000D269C(void *a1)
{
  *a1 = off_1001A9978;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

uint64_t sub_1000D2714()
{
  return 4294967251;
}

uint64_t sub_1000D271C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 8))() * v2;
}

void *sub_1000D2764(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 24) + 24))(*(void **)(a1 + 24));
}

uint64_t sub_1000D2774()
{
  return 4294967251;
}

void *sub_1000D277C(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"BackendPlugin", 13);
}

uint64_t sub_1000D2790()
{
  return 4294967251;
}

uint64_t sub_1000D2798()
{
  return 4294967251;
}

uint64_t sub_1000D27A0(uint64_t a1)
{
  return sub_1000683A0(*(void *)(a1 + 24));
}

void *sub_1000D27A8@<X0>(char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  char v12 = operator new(0x40uLL);
  uint64_t result = sub_1000D2834(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1000D2820(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D2834(void *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A98D8;
  sub_1000D2890((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1000D287C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2890(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  sub_100003BA4(__p, *a2);
  sub_10006B97C(a1, __p, 0, 0, a5, *a6);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D2904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D2920()
{
  if (qword_1001C4FD0 != -1) {
    dispatch_once(&qword_1001C4FD0, &stru_1001A9A60);
  }
  return qword_1001C4FC8;
}

void sub_1000D2964(id a1)
{
  qword_1001C4FC8 = (uint64_t)os_log_create("com.apple.DiskImages2", "Default");
}

uint64_t sub_1000D2994(uint64_t result)
{
  byte_1001C4FD8 = result;
  return result;
}

uint64_t sub_1000D29A0()
{
  return byte_1001C4FD8;
}

uint64_t sub_1000D29AC(uint64_t result)
{
  byte_1001C4FD9 = result;
  return result;
}

uint64_t sub_1000D29B8()
{
  return byte_1001C4FD9;
}

const void **sub_1000D29C4@<X0>(uint64_t a1@<X1>, char a2@<W2>, const __CFArray **a3@<X8>)
{
  CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4), &kCFTypeArrayCallBacks);
  CFArrayRef theArray = Mutable;
  uint64_t v7 = *(int **)(a1 + 16);
  uint64_t v8 = *(int **)(a1 + 24);
  if (v7 != v8)
  {
    do
    {
      (*(void (**)(char **__return_ptr))(**((void **)v7 + 3) + 48))(&v22);
      CFIndex Count = CFArrayGetCount(theArray);
      CFStringRef v10 = @"Base";
      if (Count != -1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4)) {
        CFStringRef v10 = off_1001AA7E0[*v7];
      }
      CFStringRef v21 = v10;
      char v11 = theArray;
      if ((a2 & 4) != 0)
      {
        CFStringRef v24 = @"Role";
        CFStringRef v25 = v10;
        CFRetain(v10);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)&v22[*(void *)(*(void *)v22 - 96)] + 16))(&v17);
        CFStringRef v26 = @"Image";
        uint64_t v27 = v17;
        uint64_t v17 = 0;
        __int16 v18 = &v24;
        uint64_t v19 = 2;
        sub_10011B428((uint64_t *)&v18, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v11, value);
        sub_10002AB08((const void **)&value);
        for (uint64_t i = 24; i != -8; i -= 16)
          sub_10002AAD4((const void **)((char *)&v24 + i));
        sub_100010A14((const void **)&v17);
      }
      else
      {
        CFStringRef v24 = @"Role";
        CFStringRef v25 = v10;
        CFRetain(v10);
        uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 96)] + 24))(&v22[*(void *)(*(void *)v22 - 96)]);
        CFStringRef v26 = @"Image Format";
        uint64_t v27 = v12;
        __int16 v18 = &v24;
        uint64_t v19 = 2;
        sub_10011B428((uint64_t *)&v18, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v11, value);
        sub_10002AB08((const void **)&value);
        for (uint64_t j = 24; j != -8; j -= 16)
          sub_10002AAD4((const void **)((char *)&v24 + j));
      }
      sub_10002A560((const void **)&v21);
      int v15 = v22;
      uint64_t v22 = 0;
      if (v15) {
        (*(void (**)(char *))(*(void *)v15 + 8))(v15);
      }
      v7 += 12;
    }
    while (v7 != v8);
    CFArrayRef Mutable = theArray;
  }
  *a3 = Mutable;
  CFArrayRef theArray = 0;
  return sub_10002B054((const void **)&theArray);
}

void sub_1000D2CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, uint64_t a16, const void *a17, char a18)
{
  sub_10002AB08(&a14);
  for (uint64_t i = 24; i != -8; i -= 16)
    sub_10002AAD4((const void **)(&a18 + i));
  sub_100010A14(&a11);
  sub_10002A560(&a15);
  uint64_t v20 = a16;
  a16 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_10002B054(&a17);
  _Unwind_Resume(a1);
}

CFTypeRef *sub_1000D2D98(CFTypeRef *a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRetain(*a2);
  }
  if (*a1) {
    CFRelease(*a1);
  }
  *a1 = *a2;
  return a1;
}

uint64_t *sub_1000D2DE0(uint64_t *a1, uint64_t a2, char a3)
{
  a1[5] = (uint64_t)off_100194960;
  a1[6] = (uint64_t)off_100194990;
  a1[7] = (uint64_t)off_1001949C0;
  a1[8] = (uint64_t)off_1001949F0;
  *a1 = (uint64_t)off_1001AA1E0;
  a1[3] = (uint64_t)off_1001AA228;
  a1[4] = (uint64_t)off_1001AA270;
  a1[5] = (uint64_t)off_1001AA2B8;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001AA300;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001AA348;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001AA390;
  *a1 = (uint64_t)off_1001A9FB8;
  a1[3] = (uint64_t)off_1001AA000;
  a1[4] = (uint64_t)off_1001AA048;
  a1[5] = (uint64_t)off_1001AA090;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001AA0D8;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001AA120;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001AA168;
  a1[9] = (uint64_t)off_1001AA3F0;
  a1[3] = (uint64_t)off_1001AA448;
  *((unsigned char *)a1 + 96) = 0;
  *((unsigned char *)a1 + 104) = 0;
  *((unsigned char *)a1 + 112) = 0;
  *((unsigned char *)a1 + 120) = 0;
  a1[17] = (uint64_t)off_1001AA538;
  a1[5] = (uint64_t)off_1001AA590;
  *((unsigned char *)a1 + 144) = 0;
  *((unsigned char *)a1 + 152) = 0;
  a1[20] = 0;
  sub_1000D3630(a1 + 21, (uint64_t *)&off_1001A9F38, a2);
  *a1 = (uint64_t)off_1001A9B00;
  a1[3] = (uint64_t)off_1001A9B48;
  a1[4] = (uint64_t)off_1001A9B90;
  a1[5] = (uint64_t)off_1001A9BD8;
  a1[6] = (uint64_t)off_1001A9C20;
  a1[7] = (uint64_t)off_1001A9C68;
  a1[8] = (uint64_t)off_1001A9CB0;
  a1[9] = (uint64_t)off_1001A9D10;
  a1[17] = (uint64_t)off_1001A9D80;
  a1[21] = (uint64_t)off_1001A9DF0;
  a1[1] = 0;
  int v5 = (CFTypeRef *)(a1 + 1);
  a1[2] = 0;
  uint64_t v6 = (CFTypeRef *)(a1 + 2);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 + 24);
  long long v9 = *(std::__shared_weak_count **)(v7 + 32);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(char **__return_ptr))(*(void *)v8 + 48))(&v22);
  uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 24)] + 16))(&v22[*(void *)(*(void *)v22 - 24)]);
  uint64_t v11 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = *(void *)(v10 + 16);
  *(uint64_t *)((char *)a1 + *(void *)(v11 - 112) + 8) = *(void *)(v10 + 8);
  *(uint64_t *)((char *)a1 + *(void *)(v11 - 112) + 56) = *(void *)(v10 + 56);
  uint64_t v12 = (uint64_t)a1 + *(void *)(v11 - 112);
  uint64_t v13 = *(void *)(v10 + 40);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v10 + 48);
  *(void *)(v12 + 40) = v13;
  uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 112);
  uint64_t v15 = *(void *)(v10 + 24);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v10 + 32);
  *(void *)(v14 + 24) = v15;
  uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 64)] + 16))(&v22[*(void *)(*(void *)v22 - 64)]);
  sub_1000D2D98((CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128) + 16), (CFTypeRef *)(v16 + 16));
  sub_1000D2D98((CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128) + 24), (CFTypeRef *)(v16 + 24));
  sub_1000D29C4(a2, a3, (const __CFArray **)&v21);
  if (*v5) {
    CFRelease(*v5);
  }
  *int v5 = v21;
  CFStringRef v21 = 0;
  sub_1000AD6B8(&v21);
  uint64_t v17 = (const void *)(*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 96)] + 24))(&v22[*(void *)(*(void *)v22 - 96)]);
  CFStringRef v21 = v17;
  if (*v6)
  {
    CFRelease(*v6);
    uint64_t v17 = v21;
  }
  *uint64_t v6 = v17;
  CFStringRef v21 = 0;
  sub_10002A560(&v21);
  __int16 v18 = v22;
  uint64_t v22 = 0;
  if (v18) {
    (*(void (**)(char *))(*(void *)v18 + 8))(v18);
  }
  if (v9) {
    sub_100010A48(v9);
  }
  return a1;
}

void sub_1000D357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12)
{
  sub_10002A560(&a11);
  uint64_t v18 = a12;
  a12 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (v14) {
    sub_100010A48(v14);
  }
  sub_10002A560(v13);
  sub_1000AD6B8(v16);
  sub_100027F6C(v15, (uint64_t *)&off_1001A9F38);
  sub_1000280F4(v12, (uint64_t *)&off_1001A9F18);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D3630(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100194E80;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  uint64_t v7 = sub_100063E00(*(uint64_t (****)(void))(*(void *)(a3 + 16) + 24));
  uint64_t v9 = v8;
  *(void *)&v14.byte0 = v7;
  *(void *)&v14.byte8 = v9;
  CFUUIDRef v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  CFStringRef v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v10 = v12;
  }
  a1[1] = (uint64_t)v10;
  CFStringRef v12 = 0;
  sub_10002A560((const void **)&v12);
  sub_10002B088((const void **)&v13);
  return a1;
}

void sub_1000D37FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_10002A560(&a9);
  sub_10002B088(&a10);
  sub_10002A560((const void **)(v10 + 24));
  sub_10002A560((const void **)(v10 + 16));
  sub_10002A560(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D3848(uint64_t a1)
{
  uint64_t v2 = sub_1000D4EBC(a1, (uint64_t *)off_1001A9E20);
  *(void *)(v2 + 168) = off_1001AA680;
  *(void *)(v2 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v2 + 192));
  sub_10002A560((const void **)(a1 + 184));
  sub_10002A560((const void **)(a1 + 176));
  *(void *)(a1 + 136) = off_1001AA538;
  *(void *)(a1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(a1 + 160));
  return a1;
}

void sub_1000D3918(uint64_t a1)
{
  uint64_t v2 = sub_1000D4EBC(a1, (uint64_t *)off_1001A9E20);
  *(void *)(v2 + 168) = off_1001AA680;
  *(void *)(v2 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v2 + 192));
  sub_10002A560((const void **)(a1 + 184));
  sub_10002A560((const void **)(a1 + 176));
  *(void *)(a1 + 136) = off_1001AA538;
  *(void *)(a1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(a1 + 160));

  operator delete();
}

const void **sub_1000D3A08@<X0>(CFArrayRef *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*((uint64_t (**)(CFArrayRef *))*a1 + 3))(a1);
  v13[0] = @"Image Format";
  v13[1] = v4;
  v13[2] = @"Format Description";
  v13[3] = @"Stackable image";
  sub_100028A28((uint64_t)a1 + *((void *)*a1 - 14), &valuePtr);
  v13[4] = @"Size Info";
  v13[5] = valuePtr;
  CFIndex valuePtr = 0;
  sub_100010A14((const void **)&valuePtr);
  sub_100028DC4((uint64_t)a1 + *((void *)*a1 - 15), &valuePtr);
  v13[6] = @"Encryption Info";
  v13[7] = valuePtr;
  CFIndex valuePtr = 0;
  sub_100010A14((const void **)&valuePtr);
  sub_100029774((CFArrayRef *)((char *)a1 + *((void *)*a1 - 16)), &valuePtr);
  v13[8] = @"Identity Info";
  v13[9] = valuePtr;
  CFIndex valuePtr = 0;
  sub_100010A14((const void **)&valuePtr);
  CFIndex valuePtr = CFArrayGetCount(a1[1]);
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  v13[10] = @"Images Count";
  v13[11] = v5;
  uint64_t v9 = 0;
  CFArrayRef v6 = a1[1];
  v13[12] = @"Stack Info";
  v13[13] = v6;
  if (v6) {
    CFRetain(v6);
  }
  v10[0] = (uint64_t)v13;
  v10[1] = 7;
  sub_10011B428(v10, (CFMutableDictionaryRef *)&v11);
  *a2 = v11;
  uint64_t v11 = 0;
  sub_10002AB08(&v11);
  for (uint64_t i = 13; i != -1; i -= 2)
    sub_10002AAD4((const void **)&v13[i]);
  return sub_1000D526C(&v9);
}

void sub_1000D3C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_1000D526C(&a9);
  do
  {
    sub_10002AAD4(v14 - 1);
    v14 -= 2;
  }
  while (v14 != (const void **)&a14);
  _Unwind_Resume(a1);
}

CFStringRef sub_1000D3C80()
{
  return @"STCK";
}

const void **sub_1000D3C8C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;

  return sub_10002A560((const void **)(v1 + 160));
}

void sub_1000D3D7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(v1 + 160));

  operator delete();
}

const void **sub_1000D3E84(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;

  return sub_10002A560((const void **)(v1 + 160));
}

void sub_1000D3F74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(v1 + 160));

  operator delete();
}

const void **sub_1000D407C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;

  return sub_10002A560((const void **)(v1 + 160));
}

void sub_1000D416C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(v1 + 160));

  operator delete();
}

const void **sub_1000D4274(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;

  return sub_10002A560((const void **)(v1 + 160));
}

void sub_1000D4364(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(v1 + 160));

  operator delete();
}

const void **sub_1000D446C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;

  return sub_10002A560((const void **)(v1 + 160));
}

void sub_1000D455C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(v1 + 160));

  operator delete();
}

const void **sub_1000D4664(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;

  return sub_10002A560((const void **)(v1 + 160));
}

void sub_1000D4754(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(v1 + 160));

  operator delete();
}

const void **sub_1000D485C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;

  return sub_10002A560((const void **)(v1 + 160));
}

void sub_1000D494C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(v1 + 160));

  operator delete();
}

const void **sub_1000D4A54@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D3A08((CFArrayRef *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

CFStringRef sub_1000D4A70()
{
  return @"STCK";
}

const void **sub_1000D4A7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;

  return sub_10002A560((const void **)(v1 + 160));
}

void sub_1000D4B6C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(v1 + 160));

  operator delete();
}

const void **sub_1000D4C74@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D3A08((CFArrayRef *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

CFStringRef sub_1000D4C90()
{
  return @"STCK";
}

const void **sub_1000D4C9C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;

  return sub_10002A560((const void **)(v1 + 160));
}

void sub_1000D4D8C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000D4EBC(v1, (uint64_t *)off_1001A9E20);
  *(void *)(v1 + 168) = off_1001AA680;
  *(void *)(v1 + 64) = off_1001AA6D8;
  sub_10002A560((const void **)(v1 + 192));
  sub_10002A560((const void **)(v1 + 184));
  sub_10002A560((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001AA538;
  *(void *)(v1 + 40) = off_1001AA590;
  sub_10002A560((const void **)(v1 + 160));

  operator delete();
}

const void **sub_1000D4E94@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D3A08((CFArrayRef *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

CFStringRef sub_1000D4EB0()
{
  return @"STCK";
}

uint64_t sub_1000D4EBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 104)) = a2[1];
  *(void *)(a1 + *(void *)(*(void *)a1 - 96)) = a2[2];
  *(void *)(a1 + *(void *)(*(void *)a1 - 24)) = a2[3];
  *(void *)(a1 + *(void *)(*(void *)a1 - 32)) = a2[4];
  *(void *)(a1 + *(void *)(*(void *)a1 - 40)) = a2[5];
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = a2[6];
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = a2[7];
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = a2[8];
  *(void *)(a1 + *(void *)(*(void *)a1 - 112)) = a2[9];
  *(void *)(a1 + *(void *)(*(void *)a1 - 120)) = a2[10];
  *(void *)(a1 + *(void *)(*(void *)a1 - 128)) = a2[11];
  sub_10002A560((const void **)(a1 + 16));
  sub_1000AD6B8((const void **)(a1 + 8));
  return a1;
}

const void **sub_1000D526C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1000D52A0(uint64_t *a1, uint64_t a2)
{
  if (*(void *)sub_1000D9030(a2 + 32, *(void *)(a2 + 176)))
  {
    uint64_t v4 = *(void *)(a2 + 352);
    uint64_t v5 = *(void *)(a2 + 360);
    long long v21 = 0u;
    long long v22 = 0u;
    sub_1000DC690(a2 + 200, v19);
    CFArrayRef v6 = a1 + 2;
    if (v4 == v5)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = *(void *)(v4 + 8 * v8) * *(unsigned int *)(a2 + 96);
        if (v9)
        {
          ++*(uint64_t *)((char *)v6 + *(void *)(*a1 - 136));
          sub_1000E4A20((atomic_ullong *)(a2 + 200), (uint64_t)v19, v8, v9, 0, 1, (atomic_ullong *)buf);
          if (*(void *)buf && !*(unsigned char *)(*(void *)buf + 520))
          {
            if (*(unsigned char *)(*(void *)buf + 400)) {
              uint64_t v10 = (uint64_t *)(*(void *)buf + 40);
            }
            else {
              uint64_t v10 = 0;
            }
            sub_1000D6920(a1, v10, (uint64_t)v19, &v21);
          }
          sub_1000D90F8((atomic_ullong *)buf);
        }
        ++v8;
        v7 += 8;
      }
      while (v4 + v7 != v5);
      uint64_t v11 = *((void *)&v21 + 1);
    }
    uint64_t v12 = *v6;
    *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 56) -= v12
                                                            + (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2)
                                                            * v11;
    uint64_t v13 = *((void *)&v22 + 1);
    if (*((void *)&v22 + 1) && sub_1000D29B8())
    {
      int v14 = *__error();
      if (sub_1000D29A0())
      {
        uint64_t v15 = sub_1000D2920();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 71;
        __int16 v24 = 2080;
        CFStringRef v25 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
        __int16 v26 = 2048;
        uint64_t v27 = v13;
        uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
        if (v16)
        {
          uint64_t v17 = (char *)v16;
          fprintf(__stderrp, "%s\n", v16);
          free(v17);
        }
      }
      else
      {
        uint64_t v18 = sub_1000D2920();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68158210;
          *(_DWORD *)&uint8_t buf[4] = 71;
          __int16 v24 = 2080;
          CFStringRef v25 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
          __int16 v26 = 2048;
          uint64_t v27 = v13;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%.*s: WARNING: Found %llu sectors with invalid flags (has_bitmap)", buf, 0x1Cu);
        }
      }
      *__error() = v14;
    }
    v19[0] = off_1001AB7C0;
    if (v20) {
      sub_100010A48(v20);
    }
  }
}

void sub_1000D55CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a16) {
    sub_100010A48(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D5640(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        sub_100010A48(v3);
      }
      sub_100141C20((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      CFArrayRef v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    sub_100010A48(v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_1000D5748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100010A48(v12);
  }
  if (a12) {
    sub_100010A48(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D5778(void *a1, void *a2)
{
  uint64_t v4 = sub_1000EBA40(a2);
  v14[4] = (const void *)v4;
  v14[5] = (const void *)v5;
  if (v4 | v5)
  {
    *(void *)&v15.byte8 = v5;
    *(void *)&v15.byte0 = v4;
    v14[0] = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v15);
    CFStringRef v6 = CFUUIDCreateString(kCFAllocatorDefault, (CFUUIDRef)v14[0]);
    v13[0] = v6;
    uint64_t v7 = (CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128));
    if (v7[3])
    {
      CFRelease(v7[3]);
      CFStringRef v6 = (CFStringRef)v13[0];
    }
    v7[3] = v6;
    v13[0] = 0;
    sub_10002A560(v13);
    sub_10002B088(v14);
  }
  uint64_t result = sub_1000EBA34(a2);
  *(void *)&v9.byte8 = *(void *)&v9.byte0;
  v14[0] = (const void *)result;
  v14[1] = *(const void **)&v9.byte0;
  if (result | *(void *)&v9.byte0)
  {
    *(void *)&v9.byte0 = result;
    v13[0] = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v9);
    CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, (CFUUIDRef)v13[0]);
    CFStringRef v12 = v10;
    uint64_t v11 = (CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128));
    if (v11[2])
    {
      CFRelease(v11[2]);
      CFStringRef v10 = v12;
    }
    v11[2] = v10;
    CFStringRef v12 = 0;
    sub_10002A560((const void **)&v12);
    return (uint64_t)sub_10002B088(v13);
  }
  return result;
}

void sub_1000D58E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  sub_10002A560((const void **)va);
  sub_10002B088((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1000D5930(void *a1, const void *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v35[0] = Mutable;
  unint64_t v5 = (CFTypeRef *)((char *)a1 + *(void *)(*a1 - 136));
  if (v5[10])
  {
    CFRelease(v5[10]);
    CFMutableArrayRef Mutable = (CFMutableArrayRef)v35[0];
  }
  v5[10] = Mutable;
  v35[0] = 0;
  sub_10002B054(v35);
  sub_1000DC690((uint64_t)a2 + 200, v28);
  CFStringRef v6 = *(const void **)((char *)a1 + *(void *)(*a1 - 112) + 16);
  v35[0] = a2;
  v35[1] = 0;
  v35[2] = v6;
  char v36 = 2;
  uint64_t v37 = 0;
  uint64_t v38 = v28;
  int v39 = 2;
  v40[0] = off_100199578;
  v40[3] = v40;
  sub_100058EC0((uint64_t)v35, (uint64_t)&v23);
  sub_100059040((uint64_t)v35, (uint64_t)v22);
  while (sub_100105B00((uint64_t)&v23, (uint64_t)v22))
  {
    if (v27 == 3)
    {
      int v15 = *__error();
      if (sub_1000D29A0())
      {
        uint64_t v16 = sub_1000D2920();
        os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
        value = (void *)0x4B04100302;
        __int16 v31 = 2080;
        __int16 v32 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
        __int16 v33 = 2048;
        uint64_t v34 = v24;
        uint64_t v17 = (const char *)_os_log_send_and_compose_impl();
        if (v17)
        {
          uint64_t v18 = (char *)v17;
          fprintf(__stderrp, "%s\n", v17);
          free(v18);
        }
      }
      else
      {
        uint64_t v19 = sub_1000D2920();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          value = (void *)0x4B04100302;
          __int16 v31 = 2080;
          __int16 v32 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
          __int16 v33 = 2048;
          uint64_t v34 = v24;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%.*s: Failed during ASIF extents enumeration on offset: %llu", (uint8_t *)&value, 0x1Cu);
        }
      }
      *__error() = v15;
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001B6CA0;
      long long v21 = std::generic_category();
      exception[1] = 22;
      exception[2] = v21;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Failed during ASIF extents enumeration.";
    }
    uint64_t v8 = v24;
    uint64_t v7 = v25;
    char v9 = v26;
    CFMutableArrayRef v10 = CFArrayCreateMutable(kCFAllocatorDefault, 2, &kCFTypeArrayCallBacks);
    value = v10;
    if ((v9 & 2) != 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    sub_10011ABE0(v10, v11);
    sub_10011ABE0(value, (v9 & 1) + v7 - 1);
    CFArrayAppendValue(*(CFMutableArrayRef *)((char *)a1 + *(void *)(*a1 - 136) + 80), value);
    sub_10002B054((const void **)&value);
    sub_100105D68(&v23);
  }
  uint64_t v12 = v22[0];
  v22[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  uint64_t v13 = v23;
  uint64_t v23 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  sub_100058E3C(v40);
  uint64_t v14 = v37;
  uint64_t v37 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
  }
  v28[0] = off_1001AB7C0;
  if (v29) {
    sub_100010A48(v29);
  }
}

void sub_1000D5DA0(_Unwind_Exception *a1)
{
  sub_10002B054((const void **)(v1 - 176));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D5E8C(uint64_t *a1, void *a2, char a3)
{
  a1[7] = (uint64_t)off_100194960;
  a1[8] = (uint64_t)off_100194990;
  a1[9] = (uint64_t)off_1001949C0;
  a1[10] = (uint64_t)off_1001949F0;
  *a1 = (uint64_t)off_1001AAFF8;
  a1[5] = (uint64_t)off_1001AB040;
  a1[6] = (uint64_t)off_1001AB088;
  a1[7] = (uint64_t)off_1001AB0D0;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001AB118;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001AB160;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001AB1A8;
  *a1 = (uint64_t)off_1001AADD0;
  a1[5] = (uint64_t)off_1001AAE18;
  a1[6] = (uint64_t)off_1001AAE60;
  a1[7] = (uint64_t)off_1001AAEA8;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001AAEF0;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001AAF38;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001AAF80;
  a1[11] = (uint64_t)off_1001AB208;
  a1[5] = (uint64_t)off_1001AB260;
  *((unsigned char *)a1 + 112) = 0;
  *((unsigned char *)a1 + 120) = 0;
  *((unsigned char *)a1 + 128) = 0;
  *((unsigned char *)a1 + 136) = 0;
  a1[19] = (uint64_t)off_1001AB350;
  a1[7] = (uint64_t)off_1001AB3A8;
  *((unsigned char *)a1 + 160) = 0;
  *((unsigned char *)a1 + 168) = 0;
  a1[22] = 0;
  sub_1000D665C(a1 + 23, (uint64_t *)&off_1001AAD30, (uint64_t)a2);
  a1[29] = 0;
  a1[37] = 0;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  *a1 = (uint64_t)off_1001AA880;
  a1[5] = (uint64_t)off_1001AA8C8;
  a1[6] = (uint64_t)off_1001AA910;
  a1[7] = (uint64_t)off_1001AA958;
  a1[8] = (uint64_t)off_1001AA9A0;
  a1[9] = (uint64_t)off_1001AA9E8;
  a1[10] = (uint64_t)off_1001AAA30;
  a1[11] = (uint64_t)off_1001AAA90;
  a1[19] = (uint64_t)off_1001AAB00;
  a1[23] = (uint64_t)off_1001AAB70;
  a1[27] = (uint64_t)off_1001AABE0;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2 + 32))(a2);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = v5;
  uint64_t v7 = *(uint64_t *)((char *)a1 + *(void *)(v6 - 112) + 16);
  uint64_t v8 = (*(uint64_t (**)(void *))(*a2 + 24))(a2);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 112) + 8) = v8 * v7;
  uint64_t v11 = *((unsigned int *)a2 + 24);
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 136) + 24) = v11;
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 136) + 64) = a2[11];
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 136) + 8) = a2[476];
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 112) + 56) = *(uint64_t *)((char *)a1 + *(void *)(v10 - 112) + 8);
  uint64_t v12 = a2[13];
  if (v12)
  {
    uint64_t v13 = v12 * v11;
  }
  else
  {
    uint64_t v14 = a2[11];
    uint64_t v13 = (*(uint64_t (**)(void *))(*a2 + 24))(a2) * v14;
    uint64_t v9 = *a1;
  }
  uint64_t v15 = (uint64_t)a1 + *(void *)(v9 - 112);
  *(void *)(v15 + 40) = v13;
  *(unsigned char *)(v15 + 48) = 1;
  uint64_t v16 = (uint64_t)a1 + *(void *)(*a1 - 112);
  uint64_t v17 = *((unsigned int *)a2 + 24);
  if (!*(unsigned char *)(v16 + 32)) {
    *(unsigned char *)(v16 + 32) = 1;
  }
  *(void *)(v16 + 24) = v17;
  *((unsigned char *)a1 + *(void *)(*a1 - 136) + 72) = *((unsigned char *)a2 + 44) & 1;
  sub_1000D52A0(a1, (uint64_t)a2);
  sub_1000D5640(a2 + 2, (uint64_t)a1 + *(void *)(*a1 - 104));
  sub_1000D5778(a1, a2);
  if ((a3 & 2) != 0) {
    sub_1000D5930(a1, a2);
  }
  return a1;
}

void sub_1000D660C(_Unwind_Exception *a1)
{
  sub_1000D6870(v2, (uint64_t *)&off_1001AAD50);
  sub_100027F6C(v3, (uint64_t *)&off_1001AAD30);
  sub_1000280F4(v1, (uint64_t *)&off_1001AAD10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D665C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100194E80;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  uint64_t v7 = sub_1000EBA4C(a3);
  uint64_t v9 = v8;
  *(void *)&v14.byte0 = v7;
  *(void *)&v14.byte8 = v9;
  CFUUIDRef v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  CFStringRef v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v10 = v12;
  }
  a1[1] = (uint64_t)v10;
  CFStringRef v12 = 0;
  sub_10002A560((const void **)&v12);
  sub_10002B088((const void **)&v13);
  return a1;
}

void sub_1000D6824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_10002A560(&a9);
  sub_10002B088(&a10);
  sub_10002A560((const void **)(v10 + 24));
  sub_10002A560((const void **)(v10 + 16));
  sub_10002A560(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D6870(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[3];
  sub_10002B054((const void **)(a1 + 80));
  return a1;
}

uint64_t sub_1000D6920(uint64_t *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t result = sub_1000DD800((uint64_t)a2, (uint64_t)a2, (uint64_t)v23);
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 3;
  unint64_t v10 = a2[44];
  uint64_t v11 = a1 + 4;
  while (v23[0] != v23[5] || v23[1] != v23[6])
  {
    CFStringRef v12 = (void *)sub_1000DA4C8((uint64_t)v23);
    sub_1000DD888((uint64_t)a2, v12, (uint64_t)v22);
    while (v22[0] != v22[5] || v22[1] != v22[6])
    {
      *(_OWORD *)long long v21 = *(_OWORD *)sub_1000DA4C8((uint64_t)v22);
      int v13 = sub_1000DB00C(v21);
      uint64_t v14 = *a1;
      uint64_t v15 = *a1;
      unint64_t v16 = *(void *)((char *)v8 + *(void *)(*a1 - 112));
      BOOL v17 = v16 > v10;
      unint64_t v18 = v16 - v10;
      if (v17)
      {
        if (v18 >= *(void *)((char *)v9 + *(void *)(v15 - 136))) {
          uint64_t v19 = *(void *)((char *)v9 + *(void *)(v15 - 136));
        }
        else {
          uint64_t v19 = v18;
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      switch(v13)
      {
        case 0:
          ++*(void *)((char *)v11 + *(void *)(v15 - 136));
          *v8 += v19;
          break;
        case 1:
          ++*(uint64_t *)((char *)a1 + *(void *)(v15 - 136) + 40);
          a1[2] += v19;
          break;
        case 2:
          ++*(uint64_t *)((char *)a1 + *(void *)(v15 - 136) + 48);
          *v11 += v19;
          break;
        case 3:
          ++*(uint64_t *)((char *)a1 + *(void *)(v15 - 136) + 56);
          *v9 += v19;
          if (v19)
          {
            sub_1000D6BD8(a1, a2, a3, v21[0], v21[1], a4, v19);
            uint64_t v14 = *a1;
          }
          break;
        default:
          break;
      }
      v10 += *(void *)((char *)v9 + *(void *)(v14 - 136));
      sub_1000DA69C((uint64_t)v22, (uint64_t)v21);
    }
    uint64_t result = sub_1000DA584((uint64_t)v23, (uint64_t)v22);
  }
  return result;
}

void *sub_1000D6B8C(void *a1)
{
  *a1 = off_1001AB7C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

atomic_ullong *sub_1000D6BD8(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  v28[0] = a4;
  v28[1] = a5;
  unint64_t v12 = sub_1000DB2EC(v28);
  sub_1000DB028(a2, a3, v12, 0, &v27);
  int v13 = (char *)a1 + *(void *)(*a1 - 112);
  unint64_t v14 = *((void *)v13 + 1);
  unint64_t v15 = *((void *)v13 + 2);
  if (v15 - 1 >= v14)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    char v26 = std::generic_category();
    exception[1] = 22;
    exception[2] = v26;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Corrupted ASIF image.";
  }
  unint64_t v16 = sub_1000DB430(v28);
  unint64_t v17 = v16 + a7;
  if (v16 < v17)
  {
    int v18 = 0;
    unint64_t v19 = v14 / v15;
    do
    {
      while (1)
      {
        if (v27) {
          uint64_t v20 = *(unsigned char *)(v27 + 224) ? (void *)(v27 + 40) : 0;
        }
        else {
          uint64_t v20 = 0;
        }
        unint64_t v21 = sub_1000DB458(v20, (uint64_t)a2, v18, v16, v17);
        long long v22 = a6;
        unint64_t v23 = (v21 - v16) / v19;
        if (v18)
        {
          long long v22 = a6 + 1;
          if (v18 == 2) {
            break;
          }
        }
        *v22 += v23;
        ++v18;
        unint64_t v16 = v21;
      }
      int v18 = 0;
      a6[2] += v23;
      unint64_t v16 = v21;
    }
    while (v21 < v17);
  }
  return sub_1000D9F50((atomic_ullong *)&v27);
}

void sub_1000D6D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000D9F50((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D6DB8(uint64_t a1)
{
  *(void *)a1 = off_1001ABA40;
  *(void *)(a1 + 88) = off_1001ABA98;
  sub_10002B054((const void **)(a1 + 80));
  return a1;
}

void sub_1000D6E20(uint64_t a1)
{
  *(void *)a1 = off_1001ABA40;
  *(void *)(a1 + 88) = off_1001ABA98;
  sub_10002B054((const void **)(a1 + 80));

  operator delete();
}

const void **sub_1000D6EA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t valuePtr = *(void *)(a1 + 8);
  uint64_t v11 = (uint64_t **)@"Dir Pointer Version";
  uint64_t v12 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v13 = @"Num Tables";
  uint64_t valuePtr = *(void *)(a1 + 16);
  CFNumberRef v14 = 0;
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v15 = @"Chunk Size";
  uint64_t valuePtr = *(void *)(a1 + 24);
  CFNumberRef v16 = 0;
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v17 = @"Uninitialized Entries";
  uint64_t valuePtr = *(void *)(a1 + 32);
  CFNumberRef v18 = 0;
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v19 = @"Full Entries";
  uint64_t valuePtr = *(void *)(a1 + 40);
  CFNumberRef v20 = 0;
  CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v21 = @"Unmapped Entries";
  uint64_t valuePtr = *(void *)(a1 + 48);
  CFNumberRef v22 = 0;
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v23 = @"Bitmapped Entries";
  uint64_t valuePtr = *(void *)(a1 + 56);
  CFNumberRef v24 = 0;
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v25 = @"Max Sector Count";
  uint64_t valuePtr = *(void *)(a1 + 64);
  CFNumberRef v26 = 0;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 72);
  CFNumberRef v26 = v4;
  CFStringRef v27 = @"Is Cache";
  uint64_t valuePtr = v5;
  CFNumberRef v28 = 0;
  CFNumberRef v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  id v29 = (uint64_t *)&v11;
  uint64_t v30 = 9;
  sub_10011B428((uint64_t *)&v29, (CFMutableDictionaryRef *)&v9);
  for (uint64_t i = 17; i != -1; i -= 2)
    sub_10002AAD4((const void **)&(&v11)[i]);
  uint64_t v7 = *(const void **)(a1 + 80);
  if (v7)
  {
    id v29 = (uint64_t *)@"Mapped Sectors";
    uint64_t v30 = (uint64_t)v7;
    CFRetain(v7);
    uint64_t v11 = &v29;
    uint64_t v12 = 1;
    sub_10011B3DC((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    sub_10002AAD4((const void **)&v30);
  }
  *a2 = v9;
  uint64_t v9 = 0;
  return sub_10002AB08(&v9);
}

void sub_1000D7130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002AAD4(v2);
  sub_10002AB08((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000D71B4()
{
}

CFStringRef sub_1000D71BC()
{
  return @"ASIF Info";
}

const void **sub_1000D71D0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_1001ABA40;
  *((void *)v1 + 11) = off_1001ABA98;
  return sub_10002B054((const void **)v1 + 10);
}

void sub_1000D722C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_1001ABA40;
  *((void *)v1 + 11) = off_1001ABA98;
  sub_10002B054((const void **)v1 + 10);

  operator delete();
}

char *sub_1000D72C8(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_1000D72E4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

uint64_t sub_1000D7300(uint64_t a1)
{
  *(void *)(a1 + 216) = off_1001AB5E0;
  *(void *)(a1 + 72) = off_1001AB638;
  sub_10002B054((const void **)(a1 + 296));
  *(void *)(a1 + 184) = off_1001AB498;
  *(void *)(a1 + 80) = off_1001AB4F0;
  sub_10002A560((const void **)(a1 + 208));
  sub_10002A560((const void **)(a1 + 200));
  sub_10002A560((const void **)(a1 + 192));
  *(void *)(a1 + 152) = off_1001AB350;
  *(void *)(a1 + 56) = off_1001AB3A8;
  sub_10002A560((const void **)(a1 + 176));
  return a1;
}

void sub_1000D740C(uint64_t a1)
{
  *(void *)(a1 + 216) = off_1001AB5E0;
  *(void *)(a1 + 72) = off_1001AB638;
  sub_10002B054((const void **)(a1 + 296));
  *(void *)(a1 + 184) = off_1001AB498;
  *(void *)(a1 + 80) = off_1001AB4F0;
  sub_10002A560((const void **)(a1 + 208));
  sub_10002A560((const void **)(a1 + 200));
  sub_10002A560((const void **)(a1 + 192));
  *(void *)(a1 + 152) = off_1001AB350;
  *(void *)(a1 + 56) = off_1001AB3A8;
  sub_10002A560((const void **)(a1 + 176));

  operator delete();
}

const void **sub_1000D7538@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  uint64_t v10[2] = @"Format Description";
  v10[3] = @"Apple sparse image";
  sub_100028A28(a1 + *(void *)(*(void *)a1 - 112), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0;
  sub_100010A14(&v9);
  sub_100028DC4(a1 + *(void *)(*(void *)a1 - 120), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0;
  sub_100010A14(&v9);
  sub_1000D6EA8(a1 + *(void *)(*(void *)a1 - 136), &v9);
  v10[8] = @"ASIF Info";
  v10[9] = v9;
  uint64_t v9 = 0;
  sub_100010A14(&v9);
  sub_100029774((void *)(a1 + *(void *)(*(void *)a1 - 128)), &v9);
  v10[10] = @"Identity Info";
  v10[11] = v9;
  uint64_t v9 = 0;
  sub_100010A14(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 6;
  sub_10011B428(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0;
  sub_10002AB08(&v8);
  for (uint64_t i = 11; i != -1; i -= 2)
    uint64_t result = sub_10002AAD4((const void **)&v10[i]);
  return result;
}

void sub_1000D7730(_Unwind_Exception *a1)
{
  for (uint64_t i = 88; i != -8; i -= 16)
    sub_10002AAD4((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_1000D7774()
{
  return @"ASIF";
}

const void **sub_1000D7780(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D78A8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D79E8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D7B10(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D7C50(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D7D78(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D7EB8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D7FE0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D8120(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D8248(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D8388(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D84B0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D85F0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D8718(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D8858@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D7538((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000D8874()
{
  return @"ASIF";
}

const void **sub_1000D8880(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D89A8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D8AE8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D7538((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000D8B04()
{
  return @"ASIF";
}

const void **sub_1000D8B10(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D8C38(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D8D78@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D7538((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000D8D94()
{
  return @"ASIF";
}

const void **sub_1000D8DA0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;

  return sub_10002A560((const void **)v1 + 22);
}

void sub_1000D8EC8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001AB5E0;
  *((void *)v1 + 9) = off_1001AB638;
  sub_10002B054((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001AB498;
  *((void *)v1 + 10) = off_1001AB4F0;
  sub_10002A560((const void **)v1 + 26);
  sub_10002A560((const void **)v1 + 25);
  sub_10002A560((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001AB350;
  *((void *)v1 + 7) = off_1001AB3A8;
  sub_10002A560((const void **)v1 + 22);

  operator delete();
}

const void **sub_1000D9008@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D7538((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000D9024()
{
  return @"ASIF";
}

uint64_t sub_1000D9030(uint64_t a1, uint64_t a2)
{
  if (a2 == 1) {
    return a1 + 24;
  }
  if (a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v4 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"ASIF: invalid dir index to header", 0x16u);
  }
  return a1 + 16;
}

void sub_1000D908C(void *a1)
{
  *a1 = off_1001AB7C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100010A48(v1);
  }

  operator delete();
}

atomic_ullong *sub_1000D90F8(atomic_ullong *a1)
{
  uint64_t result = (atomic_ullong *)atomic_exchange(a1, 0);
  if (result)
  {
    if (atomic_fetch_add(result, 0xFFFFFFFFFFFFFFFFLL) == 1)
    {
      uint64_t v2 = result[4];
      result[4] = -1;
      return (atomic_ullong *)sub_1000D9124((uint64_t)result, v2, 1u);
    }
  }
  return result;
}

uint64_t sub_1000D9124(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (*(unsigned char *)(a1 + 520) || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2))
  {
    int v7 = (a3 >> 1) & 2;
    goto LABEL_9;
  }
  int v7 = (a3 >> 1) & 2;
  if (!sub_1000D92CC(a1))
  {
LABEL_9:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000D94DC((void *)(a1 + 40));
    sub_1000D947C(a1 + 408, a1, a2, v7);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1;
  }
  if ((v3 & 2) != 0)
  {
    *(void *)&long long v9 = "ref::details::ctrl_blk<di_asif::details::table, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::table, tag_t = unsigned long long]";
    *((void *)&v9 + 1) = 78;
    int v10 = 16;
    sub_1000D9314(v11, &v9);
    sub_100003DF0(v12, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<();
    sub_100003DF0(v12, (uint64_t)" with ret ", 10);
    std::ostream::operator<<();
    sub_100003DF0(v12, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream();
    sub_1000D95DC((uint64_t)v11);
    std::ios::~ios();
    goto LABEL_9;
  }
  if (v3) {
    sub_1000D947C(a1 + 408, a1, a2, v7 | 1);
  }
  return 0;
}

void sub_1000D92B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000D9438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D92CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 400)) {
    return 0;
  }
  uint64_t v1 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 496);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, v1);
  }
  else {
    return sub_1000E3C1C(v1);
  }
}

void *sub_1000D9314(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_1000D954C((uint64_t)a1, a2);
  *a1 = off_1001AB820;
  a1[45] = &off_1001AB920;
  a1[46] = &off_1001AB948;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AB820;
  a1[45] = off_1001AB8A8;
  a1[46] = off_1001AB8D0;
  return a1;
}

void sub_1000D9414(_Unwind_Exception *a1)
{
  sub_1000D95DC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000D9438(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D947C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void *sub_1000D94DC(void *result)
{
  if (*((unsigned char *)result + 360))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 35));
    sub_1000D9D50(v1 + 29);
    std::mutex::~mutex((std::mutex *)(v1 + 21));
    std::mutex::~mutex((std::mutex *)(v1 + 13));
    uint64_t v2 = (void *)v1[9];
    if (v2)
    {
      v1[10] = v2;
      operator delete(v2);
    }
    sub_1000D9E48(v1 + 2, 0);
    uint64_t result = sub_1000D9ECC(v1 + 3);
    *((unsigned char *)v1 + 360) = 0;
  }
  return result;
}

uint64_t sub_1000D954C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AB9B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000D95C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D95DC(uint64_t a1)
{
  *(void *)a1 = off_1001AB9B8;
  sub_1000D99E4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000D9718(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000D95DC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000D9780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000D97B8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000D9820(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000D95DC(v1);

  return std::ios::~ios();
}

void sub_1000D986C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000D95DC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000D98D0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000D95DC(v1);

  return std::ios::~ios();
}

void sub_1000D9930(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000D95DC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000D99AC(uint64_t a1)
{
  sub_1000D95DC(a1);

  operator delete();
}

uint64_t sub_1000D99E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000D9B68((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000D9B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000D9B68(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 210;
    __int16 v22 = 2082;
    CFStringRef v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        CFNumberRef v14 = a2;
      }
      else {
        CFNumberRef v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 210;
      __int16 v22 = 2082;
      CFStringRef v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000D9D50(void *a1)
{
  unsigned __int8 v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unsigned __int8 v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D9DF8((uint64_t)a1);
}

uint64_t sub_1000D9DF8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_1000D9E48(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)sub_1000D9E78((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_1000D9E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1000D9ECC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

atomic_ullong *sub_1000D9F50(atomic_ullong *a1)
{
  uint64_t result = (atomic_ullong *)atomic_exchange(a1, 0);
  if (result)
  {
    if (atomic_fetch_add(result, 0xFFFFFFFFFFFFFFFFLL) == 1)
    {
      uint64_t v2 = result[4];
      result[4] = -1;
      return (atomic_ullong *)sub_1000D9F7C((uint64_t)result, v2, 1u);
    }
  }
  return result;
}

uint64_t sub_1000D9F7C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (*(unsigned char *)(a1 + 344)
    || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2)
    || !*(unsigned char *)(a1 + 224)
    || (uint64_t v7 = *(void *)(a1 + 320)) == 0)
  {
    int v8 = (a3 >> 1) & 2;
    goto LABEL_11;
  }
  int v8 = (a3 >> 1) & 2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a1 + 40))
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000DA1B0((void *)(a1 + 40));
    sub_1000DA150(a1 + 232, a1, a2, v8);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1;
  }
  if ((v3 & 2) != 0)
  {
    *(void *)&long long v10 = "ref::details::ctrl_blk<di_asif::details::map_element, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::map_element, tag_t = unsigned long long]";
    *((void *)&v10 + 1) = 84;
    int v11 = 16;
    sub_1000D9314(v12, &v10);
    sub_100003DF0(v13, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<();
    sub_100003DF0(v13, (uint64_t)" with ret ", 10);
    std::ostream::operator<<();
    sub_100003DF0(v13, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream();
    sub_1000D95DC((uint64_t)v12);
    std::ios::~ios();
    goto LABEL_11;
  }
  if (v3) {
    sub_1000DA150(a1 + 232, a1, a2, v8 | 1);
  }
  return 0;
}

void sub_1000DA138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000D9438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DA150(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void *sub_1000DA1B0(void *result)
{
  if (*((unsigned char *)result + 184))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 15));
    v1[4] = off_10019F2D8;
    sub_10007F4FC(v1 + 7, 0);
    uint64_t result = sub_10007F68C(v1 + 8);
    *((unsigned char *)v1 + 184) = 0;
  }
  return result;
}

uint64_t sub_1000DA2A0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = v1 % (*(void *)(a1 + 48) + 1);
  uint64_t result = v1 - v2;
  if (v1 == v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v5 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Invalid chunk size", 0xFFFFFFEA);
  }
  return result;
}

unint64_t sub_1000DA304(uint64_t *a1)
{
  unint64_t v1 = (void *)a1[2];
  unint64_t v2 = a1[7];
  uint64_t v3 = v2 * *v1;
  unint64_t v4 = a1[5];
  unint64_t v5 = v3 + v4;
  unint64_t v6 = v1[1] * v2;
  if (v4 < v6) {
    return v5 / v2;
  }
  a1[5] = 0;
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  if (v8 <= ((uint64_t)v1 - *a1) >> 4) {
    return v5 / v2;
  }
  a1[2] = (uint64_t)(v1 + 2);
  if (v8 != ((uint64_t)v1 - v7 + 16) >> 4)
  {
    unint64_t v9 = v1[2] * v2;
    if (v9 < a1[9])
    {
      unint64_t v5 = v1[2] * v2;
      return v5 / v2;
    }
  }
  return 0;
}

uint64_t *sub_1000DA3C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  *a1 = a2;
  a1[1] = a3;
  a1[5] = 0;
  a1[6] = a4;
  a1[7] = a5;
  a1[8] = a6;
  unint64_t v9 = (uint64_t *)(a2 + 16 * a8);
  a1[9] = a7;
  if (a8 == a3)
  {
LABEL_6:
    a1[2] = (uint64_t)v9;
  }
  else
  {
    uint64_t v10 = 16 * a3 - 16 * a8;
    while (1)
    {
      uint64_t v11 = *v9;
      if ((v9[1] + *v9) * a5 >= a6) {
        break;
      }
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        unint64_t v9 = (uint64_t *)(a2 + 16 * a3);
        goto LABEL_6;
      }
    }
    a1[2] = (uint64_t)v9;
    unint64_t v13 = v11 * a5;
    if (v11 * a5 < a7)
    {
      BOOL v14 = a6 >= v13;
      uint64_t v15 = a6 - v13;
      if (v15 != 0 && v14) {
        a1[5] = v15;
      }
      a1[3] = sub_1000DA304(a1);
      a1[4] = v16;
    }
  }
  return a1;
}

uint64_t sub_1000DA460(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_1000EE1D0(&v4, a1, *(void *)(v2 + 48)+ (*(void *)(v2 + 48) + 1)* ((a2 / *(unsigned __int16 *)(v2 + 18) - *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v2 + 18))/ (*(void *)(v2 + 48)* (unint64_t)(*(_DWORD *)(v2 + 20) / *(unsigned __int16 *)(v2 + 18)))));
  return v4;
}

uint64_t sub_1000DA4C8(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1000DA4D0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = *(void *)(a1 + 8)
     + *(unsigned __int16 *)(v3 + 18)
     * (unint64_t)(*(_DWORD *)(v3 + 20) / *(unsigned __int16 *)(v3 + 18))
     * *(void *)(v3 + 48);
  *(void *)(a1 + 8) = v4;
  if (v4 >= *(void *)(v2 + 352) + *(void *)(v3 + 80))
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    int v8 = 0;
  }
  else
  {
    uint64_t v5 = sub_1000DA460(v2, v4);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
    uint64_t v7 = v5;
    int v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(unsigned char *)(a1 + 32)) {
      *(void *)(a1 + 24) = v4;
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v6 | v7;
    *(void *)(a1 + 24) = v4;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t sub_1000DA584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return sub_1000DA4D0(a1);
}

uint64_t sub_1000DA598(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(unsigned __int16 *)(v2 + 18);
  sub_1000EE154(&v5, a1, ((a2 / v3 - *(void *)(a1 + 352) / v3) / (*(_DWORD *)(v2 + 20) / v3)+ (a2 / v3 - *(void *)(a1 + 352) / v3) / (*(_DWORD *)(v2 + 20) / v3) * *(void *)(v2 + 48))/ *(void *)(v2 + 48));
  return v5;
}

uint64_t sub_1000DA5F8(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = *(void *)(a1 + 8) + *(unsigned int *)(v3 + 20);
  *(void *)(a1 + 8) = v4;
  if (v4 >= *(void *)(v2 + 352) + *(void *)(v3 + 80))
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    int v8 = 0;
  }
  else
  {
    uint64_t v5 = sub_1000DA598(v2, v4);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
    uint64_t v7 = v5;
    int v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(unsigned char *)(a1 + 32)) {
      *(void *)(a1 + 24) = v4;
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v6 | v7;
    *(void *)(a1 + 24) = v4;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t sub_1000DA69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return sub_1000DA5F8(a1);
}

void sub_1000DA6B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  sub_1000FC9A0((uint64_t *)(a1 + 16), *(void *)(a2 + 56), a6);
  sub_1000EC1AC((void *)(a1 + 72), *(void *)(a2 + 64));
  *(void *)(a1 + 104) = 850045863;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 101) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 168) = 850045863;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 280) = 850045863;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a4;
  *(void *)(a1 + 352) = a5;
  unint64_t v10 = *(unsigned int *)(a2 + 20);
  if (a4)
  {
    if (a4 % v10)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001B6CA0;
      os_log_type_t v12 = std::generic_category();
      exception[1] = 4294967274;
      exception[2] = v12;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "ASIF: table is not aligned to chunk size";
    }
  }
  operator new[]();
}

void sub_1000DA8AC()
{
  if (v0) {
    sub_100010A48(v0);
  }
  operator delete[]();
}

void sub_1000DA938()
{
}

void sub_1000DAB30()
{
}

void sub_1000DAB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v3 = (std::mutex *)(a1 + 280);
    std::mutex::lock((std::mutex *)(a1 + 280));
    sub_1000DABDC((void *)(a1 + 232), &v4);
    atomic_store(1u, (unsigned int *)(a1 + 96));
    std::mutex::unlock(v3);
  }
}

void sub_1000DABC8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DABDC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000FCDB8(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  uint64_t v10 = v8 + 1;
  a1[5] = v10;
  unint64_t v11 = v7 + v10;
  os_log_type_t v12 = (void *)(v5 + 8 * (v11 >> 9));
  uint64_t v13 = v11 & 0x1FF;
  if (v13) {
    uint64_t v14 = *v12 + 8 * v13;
  }
  else {
    uint64_t v14 = *(v12 - 1) + 4096;
  }
  return v14 - 8;
}

uint64_t sub_1000DAC90(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8));
  if (v3 >> 62 != 3) {
    return 0;
  }
  sub_1000E40F4(*(void *)(*a3 + 56) + 16 * a3[1], 0, (uint64_t)v36);
  if (!v36[16])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    uint64_t v34 = std::generic_category();
    exception[1] = 4294967291;
    exception[2] = v34;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't take exclusive lock on entry";
  }
  unint64_t v7 = atomic_load((unint64_t *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8));
  if (v7 >> 62 == 3)
  {
    uint64_t v8 = *(void *)(*a3 + 8);
    sub_1000DB028((uint64_t *)a1, a2, (*(void *)(*a3 + 352)+ (*(void *)(v8 + 48) + *(void *)(v8 + 48) * a3[1])/ (unint64_t)(*(void *)(v8 + 48) + 1)* *(unsigned int *)(v8 + 20))/ *(unsigned __int16 *)(v8 + 18), 0, &v35);
    if (v35 && !*(unsigned char *)(v35 + 344))
    {
      if (*(unsigned char *)(v35 + 224)) {
        uint64_t v14 = v35 + 40;
      }
      else {
        uint64_t v14 = 0;
      }
      unsigned int v15 = sub_1000DB3AC(a3);
      uint64_t v16 = sub_1000DB31C(v14, v15);
      uint64_t v17 = *(void *)(*a3 + 8);
      uint64_t v18 = *(void *)(v17 + 48);
      uint64_t v19 = *(unsigned int *)(v17 + 20);
      if (v35)
      {
        if (*(unsigned char *)(v35 + 224)) {
          uint64_t v21 = (void *)(v35 + 40);
        }
        else {
          uint64_t v21 = 0;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      unint64_t v20 = *(void *)(*a3 + 352) + (v18 + v18 * a3[1]) / (unint64_t)(v18 + 1) * v19;
      if (sub_1000E3FB4(v21, a1, v16, v20, v20 + v19, 0) == v20 + v19)
      {
        __int16 v22 = (atomic_ullong *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8);
        uint64_t v23 = *v22 & 0x7FFFFFFFFFFFFFLL;
        uint64_t v24 = *(unsigned int *)(*(void *)(*a3 + 8) + 20);
        BOOL v10 = v16 == 2;
        atomic_ullong v26 = *v22;
        atomic_ullong v25 = *v22;
        atomic_compare_exchange_strong(v22, (unint64_t *)&v26, (v16 << 62) | v26 & 0x3FFFFFFFFFFFFFFFLL);
        if (v26 != v25)
        {
          atomic_ullong v27 = v26;
          do
          {
            atomic_compare_exchange_strong(v22, (unint64_t *)&v27, v26 & 0x3FFFFFFFFFFFFFFFLL | (v16 << 62));
            BOOL v28 = v27 == v26;
            atomic_ullong v26 = v27;
          }
          while (!v28);
        }
        uint64_t v11 = v23 * v24;
        if (v16 != 1)
        {
          id v29 = (atomic_ullong *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8);
          if (*(_DWORD *)(*(void *)(*a3 + 8) + 20))
          {
            atomic_fetch_and_explicit(v29, 0xFF80000000000000, memory_order_relaxed);
          }
          else
          {
            atomic_ullong v30 = *v29;
            atomic_ullong v31 = *v29;
            atomic_compare_exchange_strong_explicit(v29, (unint64_t *)&v31, *v29 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
            if (v31 != v30)
            {
              atomic_ullong v32 = v31;
              do
              {
                atomic_compare_exchange_strong_explicit(v29, (unint64_t *)&v32, v31 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
                BOOL v28 = v32 == v31;
                atomic_ullong v31 = v32;
              }
              while (!v28);
            }
          }
        }
        int v12 = 0;
        uint64_t v9 = 1;
        atomic_store(1u, (unsigned int *)(a1 + 96));
      }
      else
      {
        int v12 = 0;
        uint64_t v9 = 0;
        BOOL v10 = 0;
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      BOOL v10 = 0;
      uint64_t v11 = 0;
      int v12 = 1;
    }
    sub_1000D9F50((atomic_ullong *)&v35);
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
    uint64_t v11 = 0;
    int v12 = 1;
  }
  sub_10014156C(v36);
  if (v12) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v9;
  }
  if (!v12 && v10)
  {
    sub_1000DAB6C(a1, v11);
    return v9;
  }
  return result;
}

void sub_1000DAFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  atomic_ullong v3 = va_arg(va1, void);
  sub_1000D9F50((atomic_ullong *)va);
  sub_10014156C(va1);
  _Unwind_Resume(a1);
}

unint64_t sub_1000DB00C(void *a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8));
  return v1 >> 62;
}

void sub_1000DB028(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, unint64_t *a5@<X8>)
{
  unint64_t v10 = (a3 - a1[44] / (unint64_t)*(unsigned __int16 *)(a1[1] + 18))
      / (*(void *)(a1[1] + 48)
       * (unint64_t)(*(_DWORD *)(a1[1] + 20) / *(unsigned __int16 *)(a1[1] + 18)));
  unint64_t v11 = sub_1000DB4CC((uint64_t)a1, v10);
  sub_1000DB53C((unint64_t *)(a1[9] + 8 * v10), v11, a5);
  if (!*a5 || *(unsigned char *)(*a5 + 344))
  {
    uint64_t v12 = a1[1];
    uint64_t v26 = *(void *)(v12 + 48)
        + (*(void *)(v12 + 48) + 1)
        * ((a3 - a1[44] / (unint64_t)*(unsigned __int16 *)(v12 + 18))
         / (*(void *)(v12 + 48)
          * (unint64_t)(*(_DWORD *)(v12 + 20) / *(unsigned __int16 *)(v12 + 18))));
    sub_1000EE1D0(&v23, (uint64_t)a1, v26);
    uint64_t v13 = v23;
    uint64_t v14 = v24;
    if (a4)
    {
      LOBYTE(v23) = 0;
      char v25 = 0;
    }
    else
    {
      unsigned int v15 = (unint64_t *)(*(void *)(v23 + 56) + 16 * v24);
      BOOL v16 = sub_1000F6308(v15);
      v21[0] = (uint64_t)off_1001B66A0;
      v21[1] = (uint64_t)v15;
      BOOL v22 = v16;
      sub_100141338((uint64_t)&v23, (uint64_t)v21);
      char v25 = 1;
      sub_1001413CC(v21);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 32))(v21);
    sub_1000DB5D8((atomic_ullong *)a5, v21);
    sub_1000D9F50(v21);
    if (*a5)
    {
      if (!*(unsigned char *)(*a5 + 344))
      {
        if (!*a5 || (unsigned int v17 = atomic_load((unsigned int *)(*a5 + 24)), v17 != 2))
        {
          unint64_t v18 = atomic_load(a5);
          v21[0] = v18;
          atomic_store(atomic_exchange(v21, 0), (unint64_t *)(a1[9] + 8 * v10));
          v21[0] = 0;
          v21[0] = (*(void *)(*(void *)(v13 + 56) + 16 * v14 + 8) & 0x7FFFFFFFFFFFFFLL)
                 * *(unsigned int *)(*(void *)(v13 + 8) + 20);
          if (v21[0])
          {
            sub_1000DB618((uint64_t *)a5, a2, (uint64_t)a1, (unint64_t *)&v26, v21);
          }
          else
          {
            uint64_t v20 = sub_1000DB67C(a1[1], a2, 1);
            char v19 = 1;
            sub_1000DB77C((uint64_t *)a5, a2, (uint64_t)a1, (unint64_t *)&v26, &v20, &v19);
          }
        }
      }
    }
    if (v25) {
      sub_1001413CC(&v23);
    }
  }
}

void sub_1000DB29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17) {
    sub_1001413CC(&a14);
  }
  sub_1000D9F50(v17);
  _Unwind_Resume(a1);
}

unint64_t sub_1000DB2EC(void *a1)
{
  uint64_t v1 = *(void *)(*a1 + 8);
  return (*(void *)(*a1 + 352)
        + (*(void *)(v1 + 48) + *(void *)(v1 + 48) * a1[1])
        / (unint64_t)(*(void *)(v1 + 48) + 1)
        * *(unsigned int *)(v1 + 20))
       / *(unsigned __int16 *)(v1 + 18);
}

uint64_t sub_1000DB31C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1 + 32;
  unsigned int v4 = sub_1000A4C0C(a1 + 32, a2);
  if (sub_1000A4C0C(v3, a2 + 1)) {
    int v5 = 2;
  }
  else {
    int v5 = 0;
  }
  uint64_t result = v5 | v4;
  if (result == 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v8 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"bitmap flag value invalid", 0xFFFFFFEA);
  }
  return result;
}

unint64_t sub_1000DB3AC(void *a1)
{
  unint64_t v1 = *(void *)(*a1 + 352);
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(unsigned int *)(v2 + 20);
  unint64_t v5 = (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  unint64_t v6 = *(unsigned __int16 *)(v2 + 18);
  return ((2
         * ((v5
                         - ((v5 + v1) / v6 - v1 / v6)
                         / (v3
                          * (unint64_t)(v4 / v6))
                         * v3
                         * v4)
                        / v6)) | (((v4
                                  - v6
                                  + v5
                                  - ((v4 - v6 + v5 + v1) / v6 - v1 / v6)
                                  / (v3
                                   * (unint64_t)(v4 / v6))
                                  * v3
                                  * v4)
                                 / v6) << 33))
       + 0x200000000;
}

unint64_t sub_1000DB430(void *a1)
{
  return *(void *)(*a1 + 352)
       + (*(void *)(*(void *)(*a1 + 8) + 48) + *(void *)(*(void *)(*a1 + 8) + 48) * a1[1])
       / (unint64_t)(*(void *)(*(void *)(*a1 + 8) + 48) + 1)
       * *(unsigned int *)(*(void *)(*a1 + 8) + 20);
}

unint64_t sub_1000DB458(void *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  return sub_1000E3FB4(a1, a2, a3, a4, a5, 0);
}

void *sub_1000DB460(void *result, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(*(void *)(*result + 8) + 20);
  uint64_t v3 = (atomic_ullong *)(*(void *)(*result + 56) + 16 * result[1] + 8);
  if (v2 <= a2)
  {
    unint64_t v4 = a2 / v2;
    atomic_ullong v5 = *v3;
    atomic_ullong v6 = *v3;
    atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v6, *v3 & 0xFF80000000000000 | v4, memory_order_relaxed, memory_order_relaxed);
    if (v6 != v5)
    {
      atomic_ullong v7 = v6;
      do
      {
        atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v7, v6 & 0xFF80000000000000 | v4, memory_order_relaxed, memory_order_relaxed);
        BOOL v8 = v7 == v6;
        atomic_ullong v6 = v7;
      }
      while (!v8);
    }
  }
  else
  {
    atomic_fetch_and_explicit(v3, 0xFF80000000000000, memory_order_relaxed);
  }
  return result;
}

unint64_t sub_1000DB4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(v2 + 64);
  if ((v3 & (v3 - 1)) != 0)
  {
    char v4 = 0;
    unint64_t v5 = 2 * v3;
    do
    {
      v5 >>= 1;
      ++v4;
    }
    while (v5 != 1);
    unint64_t v3 = 1 << v4;
  }
  unint64_t v6 = *(void *)(v2 + 80);
  if (v3 == 1)
  {
    char v7 = 0;
  }
  else
  {
    char v7 = 0;
    do
    {
      v3 >>= 1;
      ++v7;
    }
    while (v3 != 1);
  }
  return ((*(void *)(a1 + 352) / v6) << v7) | a2;
}

unint64_t *sub_1000DB53C@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    unint64_t v6 = (unint64_t *)atomic_load(result);
    sub_1000FB698(&v8, v6, 1);
    if (v8 && !*(unsigned char *)(v8 + 344))
    {
      uint64_t v7 = *(void *)(v8 + 32);
      *a3 = 0;
      if (v7 == a2) {
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v8, 0), a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return (unint64_t *)sub_1000D9F50((atomic_ullong *)&v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

atomic_ullong *sub_1000DB5D8(atomic_ullong *a1, atomic_ullong *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = atomic_exchange(a2, 0);
    sub_1000D9F50(a1);
    atomic_store(v3, (unint64_t *)a1);
  }
  return a1;
}

void sub_1000DB618(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
}

void sub_1000DB640(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 288)) {
      sub_1000FD460(v2 + 264, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1000DB668(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DB67C(uint64_t a1, uint64_t a2, int a3)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (a3)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 20);
    v10[0] = off_1001ABE98;
    v10[1] = a2;
    uint64_t v10[2] = v7;
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v8 = sub_1000EC224(v6, (uint64_t)v10);
  sub_1000FC91C(v10);
  return v8;
}

void sub_1000DB764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000FC91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000DB77C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, char *a6)
{
}

void sub_1000DB7A4(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 288)) {
      sub_1000FD460(v2 + 264, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1000DB7CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DB7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(void *)(*(void *)(a3 + 56) + 16 * a4 + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(a3 + 8) + 20))
  {
    return 0;
  }
  unint64_t v8 = sub_1000DB67C(*(void *)(a1 + 8), a2, 0);
  if (v8)
  {
    uint64_t v9 = *(void *)(a3 + 56) + 16 * a4;
    uint64_t v10 = *(void *)(v9 + 8);
    if ((v10 & 0x7FFFFFFFFFFFFFLL) != 0)
    {
LABEL_7:
      sub_1000DB8A8(*(atomic_ullong **)(a1 + 8), v8, a2);
    }
    else
    {
      unint64_t v11 = (atomic_ullong *)(v9 + 8);
      uint64_t v12 = v10;
      unint64_t v13 = v8 / *(unsigned int *)(*(void *)(a3 + 8) + 20);
      while (1)
      {
        atomic_compare_exchange_strong_explicit(v11, (unint64_t *)&v12, v10 & 0xFF80000000000000 | v13, memory_order_relaxed, memory_order_relaxed);
        if (v12 == v10) {
          break;
        }
        uint64_t v10 = v12;
        if ((v12 & 0x7FFFFFFFFFFFFFLL) != 0) {
          goto LABEL_7;
        }
      }
    }
    return 0;
  }
  return 4294967268;
}

void *sub_1000DB8A8(atomic_ullong *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(atomic_ullong *))(*a1 + 16))(a1);
  v8[0] = off_1001ABF28;
  v8[1] = a3;
  v8[3] = v8;
  sub_1000ED118(v6, a2, (uint64_t)v8);
  uint64_t result = sub_1000FC91C(v8);
  atomic_fetch_add(a1 + 1, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

void sub_1000DB974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000FC91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1000DB988(uint64_t a1, uint64_t a2, void *a3, unsigned int *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(*a3 + 8);
  sub_1000DB028((uint64_t *)a1, a2, (*(void *)(*a3 + 352)+ (*(void *)(v11 + 48) + *(void *)(v11 + 48) * a3[1])/ (unint64_t)(*(void *)(v11 + 48) + 1)* *(unsigned int *)(v11 + 20))/ *(unsigned __int16 *)(v11 + 18), 0, (unint64_t *)&v30);
  if (!(void)v30 || *(unsigned char *)(v30 + 344))
  {
    *(void *)&long long v34 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
    *((void *)&v34 + 1) = 47;
    int v35 = 16;
    sub_1000DBD70(&v36, &v34);
    sub_100003DF0(v38, (uint64_t)"Can't load bitmap while setting range", 37);
    sub_1000DBE94((uint64_t)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    atomic_ullong v27 = std::generic_category();
    exception[1] = 5;
    exception[2] = v27;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't load bitmap while setting range";
  }
  BOOL v12 = (a6 & 0xFF00000000) == 0 || a6 == 3;
  char v13 = v12;
  if (!v12)
  {
    if (*(unsigned char *)(v30 + 224)) {
      uint64_t v14 = v30 + 40;
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v36 = sub_1000DB3AC(a3);
    sub_1000DBED8(v14, a1, (unsigned int *)&v36, a6);
  }
  if ((void)v30)
  {
    if (*(unsigned char *)(v30 + 224)) {
      uint64_t v15 = v30 + 40;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_1000DBED8(v15, a1, a4, a5);
  uint64_t result = sub_1000D9F50((atomic_ullong *)&v30);
  if ((v13 & 1) == 0)
  {
    uint64_t v17 = *(void *)(*a3 + 8);
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = *(void *)(v18 + 48);
    sub_1000EE1D0(&v36, a1, v19+ (v19 + 1)* (((*(void *)(*a3 + 352)+ (*(void *)(v17 + 48) + *(void *)(v17 + 48) * a3[1])/ (unint64_t)(*(void *)(v17 + 48) + 1)* *(unsigned int *)(v17 + 20))/ *(unsigned __int16 *)(v17 + 18)- *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v18 + 18))/ (v19* (unint64_t)(*(_DWORD *)(v18 + 20) / *(unsigned __int16 *)(v18 + 18)))));
    unint64_t v32 = v36;
    uint64_t v33 = v37;
    uint64_t v20 = (unint64_t *)(*(void *)(v36 + 56) + 16 * v37);
    BOOL v21 = sub_1000F6308(v20);
    *(void *)&long long v34 = off_1001B66A0;
    *((void *)&v34 + 1) = v20;
    LOBYTE(v35) = v21;
    if (!v21)
    {
      *(void *)&long long v30 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
      *((void *)&v30 + 1) = 47;
      int v31 = 16;
      sub_1000DBFF0(&v36, &v30);
      sub_100003DF0(v38, (uint64_t)"Couldn't lock entry ", 20);
      sub_1000DBF58((uint64_t)&v36);
      sub_1000DC114((uint64_t)&v36);
      BOOL v28 = __cxa_allocate_exception(0x40uLL);
      *BOOL v28 = &off_1001B6CA0;
      id v29 = std::generic_category();
      v28[1] = 4294967282;
      void v28[2] = v29;
      *((unsigned char *)v28 + 24) = 0;
      *((unsigned char *)v28 + 48) = 0;
      v28[7] = "Couldn't lock entry";
    }
    BOOL v22 = (atomic_ullong *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8);
    atomic_ullong v23 = *v22;
    atomic_ullong v24 = *v22;
    atomic_compare_exchange_strong(v22, (unint64_t *)&v24, *v22 | 0xC000000000000000);
    if (v24 != v23)
    {
      atomic_ullong v25 = v24;
      do
      {
        atomic_compare_exchange_strong(v22, (unint64_t *)&v25, v24 | 0xC000000000000000);
        BOOL v12 = v25 == v24;
        atomic_ullong v24 = v25;
      }
      while (!v12);
    }
    atomic_store(1u, (unsigned int *)(a1 + 96));
    return (atomic_ullong *)sub_1001413CC(&v34);
  }
  return result;
}

void sub_1000DBD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001413CC(va);
  _Unwind_Resume(a1);
}

void *sub_1000DBD70(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000FD2B0((uint64_t)a1, a2);
  *a1 = off_1001ABFB0;
  a1[45] = &off_1001AC0B0;
  a1[46] = &off_1001AC0D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ABFB0;
  a1[45] = off_1001AC038;
  a1[46] = off_1001AC060;
  return a1;
}

void sub_1000DBE70(_Unwind_Exception *a1)
{
  sub_1000ED4FC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000DBE94(uint64_t a1)
{
  return a1;
}

void *sub_1000DBED8(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v6 = *a3;
  unint64_t v7 = a3[1];
  LOWORD(v9[0]) = a4 & 1 | (((a4 >> 1) & 1) << 8);
  uint64_t result = (void *)sub_1000A4454(a1 + 32, v6, v7, (unsigned __int8 *)v9);
  if (result)
  {
    *(unsigned char *)(a1 + 113) = 1;
    uint64_t result = sub_1000EE1D0(v9, a2, *(void *)a1);
    atomic_fetch_or((atomic_ullong *volatile)(*(void *)(v9[0] + 56) + 16 * v9[1] + 8), 0x8000000000000000);
  }
  return result;
}

uint64_t sub_1000DBF58(uint64_t a1)
{
  sub_100003DF0((void *)(a1 + 360), (uint64_t)"table entry map@", 16);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100003DF0(v2, (uint64_t)" = offset = ", 12);
  std::ostream::operator<<();
  return a1;
}

void *sub_1000DBFF0(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000FD340((uint64_t)a1, a2);
  *a1 = off_1001AC1D0;
  a1[45] = &off_1001AC2D0;
  a1[46] = &off_1001AC2F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AC1D0;
  a1[45] = off_1001AC258;
  a1[46] = off_1001AC280;
  return a1;
}

void sub_1000DC0F0(_Unwind_Exception *a1)
{
  sub_1000EDC70(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000DC114(uint64_t a1)
{
  return a1;
}

void *sub_1000DC158(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1000EE1D0(v13, a1, a2);
  unint64_t v6 = *(unsigned int *)(*(void *)(v13[0] + 8) + 20);
  unint64_t v7 = (atomic_ullong *)(*(void *)(v13[0] + 56) + 16 * v13[1] + 8);
  if (v6 <= a3)
  {
    unint64_t v8 = a3 / v6;
    atomic_ullong v9 = *v7;
    atomic_ullong v10 = *v7;
    atomic_compare_exchange_strong_explicit(v7, (unint64_t *)&v10, *v7 & 0xFF80000000000000 | v8, memory_order_relaxed, memory_order_relaxed);
    if (v10 != v9)
    {
      atomic_ullong v11 = v10;
      do
      {
        atomic_compare_exchange_strong_explicit(v7, (unint64_t *)&v11, v10 & 0xFF80000000000000 | v8, memory_order_relaxed, memory_order_relaxed);
        BOOL v12 = v11 == v10;
        atomic_ullong v10 = v11;
      }
      while (!v12);
    }
  }
  else
  {
    atomic_fetch_and_explicit(v7, 0xFF80000000000000, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(a1 + 96));
  return result;
}

__n128 sub_1000DC208@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_1000DA3C0((uint64_t *)v15, a1, a2, a3, a4, a5, a6, 0);
  sub_1000DA3C0((uint64_t *)(a7 + 80), a1, a2, a3, a4, a6, a6, 0);
  long long v13 = v15[3];
  *(_OWORD *)(a7 + 32) = v15[2];
  *(_OWORD *)(a7 + 48) = v13;
  *(_OWORD *)(a7 + 64) = v15[4];
  __n128 result = (__n128)v15[1];
  *(_OWORD *)a7 = v15[0];
  *(__n128 *)(a7 + 16) = result;
  return result;
}

void sub_1000DC2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  v15[0] = off_1001AB7C0;
  v15[1] = v3;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 16) + 72))(&v16);
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_41;
  }
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 3680);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 3680));
    while (!*(unsigned char *)(a1 + 16) && !*(unsigned char *)(a1 + 3672))
      std::condition_variable::wait((std::condition_variable *)(a1 + 3624), &__lk);
    v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
    while (!*(unsigned char *)(a1 + 16) && v4.__d_.__rep_ > std::chrono::steady_clock::now().__d_.__rep_)
    {
      v5.__d_.__rep_ = v4.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v5.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v6.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0;
          goto LABEL_18;
        }
        if (v6.__d_.__rep_ < 1)
        {
          if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_17;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v6.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_18;
          }
LABEL_17:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 1000 * v6.__d_.__rep_;
LABEL_18:
          if (v7 > (v5.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
            std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 3624), &__lk, v8);
            std::chrono::steady_clock::now();
            goto LABEL_22;
          }
        }
        v8.__d_.__rep_ = v7 + v5.__d_.__rep_;
        goto LABEL_21;
      }
LABEL_22:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v4.__d_.__rep_) {
        break;
      }
    }
    *(unsigned char *)(a1 + 3672) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      unint64_t v9 = 0;
      int v10 = 0;
      do
      {
        if (*(unsigned char *)(a1 + 16)) {
          break;
        }
        v10 |= sub_1000DC6EC(a1, (uint64_t)v15, v9) == 0;
        sub_1000DCA90(a1, (uint64_t)v15, v9, 0, 1, (unint64_t *)&__lk);
        if (__lk.__m_ && !__lk.__m_[8].__m_.__opaque[0])
        {
          if (__lk.__m_[6].__m_.__opaque[8]) {
            atomic_ullong v11 = &__lk.__m_->__m_.__opaque[32];
          }
          else {
            atomic_ullong v11 = 0;
          }
          v10 |= sub_1000DCB88((uint64_t)v11, (uint64_t)v15);
        }
        sub_1000D90F8((atomic_ullong *)&__lk);
        ++v9;
      }
      while (v9 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
      if (v10)
      {
        if ((*(unsigned int (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0)) {
          sub_1000B23BC((uint64_t)v15);
        }
        uint64_t v12 = *(void *)(a2 + 24);
        if (!v12) {
          sub_100017644();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v15);
      }
    }
  }
  while (!*(unsigned char *)(a1 + 16));
LABEL_41:
  v15[0] = off_1001AB7C0;
  if (v17) {
    sub_100010A48(v17);
  }
}

void sub_1000DC640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000DCEF4((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x1000DC670);
}

void sub_1000DC66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 - 120) = a12;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 - 96);
  if (v14) {
    sub_100010A48(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DC690@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *a2 = off_1001AB7C0;
  a2[1] = v2;
  return (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 72))(*(void *)(v2 + 16));
}

uint64_t sub_1000DC6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 8));
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  uint64_t v5 = *(void *)(*(void *)(a1 + 152) + 8 * a3) * v4;
  uint64_t v22 = v5;
  if (v5 && 3 * v5 > 4 * v3 * v4)
  {
    unint64_t v9 = (unint64_t *)(*(void *)(a1 + 128) + 8 * a3);
    sub_1000E4E80(v9, a3, (unint64_t *)&v21);
    if (v21 && !*(unsigned char *)(v21 + 520))
    {
      if (*(void *)(v21 + 464)) {
        sub_1001017D4(v21 + 440, v21);
      }
      sub_1000E4E80(v9, a3, (unint64_t *)&v23);
      sub_1000E4D78(&v21, &v23);
      sub_1000D90F8(&v23);
      if (v21)
      {
        if (!*(unsigned char *)(v21 + 520)) {
          goto LABEL_15;
        }
      }
    }
    sub_1000E4BAC(a1 + 280, a3, 1, (unint64_t *)&v23);
    sub_1000E4D78(&v21, &v23);
    sub_1000D90F8(&v23);
    if (v21)
    {
      if (!*(unsigned char *)(v21 + 520))
      {
        unsigned int v12 = atomic_load((unsigned int *)(v21 + 24));
        if (v12 != 2)
        {
          long long v13 = malloc_type_valloc(*(unsigned int *)(a1 + 20), 0xF8ED6DDuLL);
          if (!v13)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            uint64_t v20 = std::bad_alloc::bad_alloc(exception);
          }
          v25[0] = off_1001AC608;
          v25[3] = v25;
          uint64_t v23 = (uint64_t)v13;
          sub_100017FFC((uint64_t)v24, (uint64_t)v25);
          sub_100017750(v25);
          unint64_t v14 = *(unsigned int *)(a1 + 20);
          uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
          if (v15 - v22 >= v14) {
            uint64_t v16 = v14;
          }
          else {
            uint64_t v16 = v15 - v22;
          }
          uint64_t v10 = sub_1000DD1A4((atomic_ullong *)a1, a2, v23, v16, v22);
          uint64_t v18 = v17;
          if (v21 && *(void *)(v21 + 464)) {
            sub_1001017D4(v21 + 440, v21);
          }
          if ((v10 & 0x8000000000000000) == 0)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, *(void *)(a1 + 80) * a3, v18);
            std::mutex::lock((std::mutex *)(a1 + 3792));
            sub_1000DABDC((void *)(a1 + 3744), &v22);
            atomic_store(1u, (unsigned int *)(a1 + 3592));
            std::mutex::unlock((std::mutex *)(a1 + 3792));
            uint64_t v10 = 0;
          }
          sub_1000176CC(&v23, 0);
          sub_100017750(v24);
          goto LABEL_17;
        }
      }
    }
    if (v21 && !*(unsigned char *)(v21 + 520)) {
LABEL_15:
    }
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    uint64_t v10 = 4294967248;
LABEL_17:
    sub_1000D90F8(&v21);
    return v10;
  }
  return 4294967274;
}

void sub_1000DCA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::mutex::unlock(v11);
  sub_1000176CC(&a11, 0);
  sub_100017750(v12);
  sub_1000D90F8(&a9);
  _Unwind_Resume(a1);
}

void *sub_1000DCA90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  __n128 result = sub_1000E4E80((unint64_t *)(*(void *)(a1 + 128) + 8 * a3), a3, a6);
  if (!*a6 || *(unsigned char *)(*a6 + 520))
  {
    sub_1000E4A20((atomic_ullong *)a1, a2, a3, *(void *)(*(void *)(a1 + 152) + 8 * a3) * *(unsigned int *)(a1 + 20), a4, a5, (atomic_ullong *)&v14);
    sub_1000E4D78((atomic_ullong *)a6, (atomic_ullong *)&v14);
    __n128 result = sub_1000D90F8((atomic_ullong *)&v14);
    if (*a6)
    {
      if (!*(unsigned char *)(*a6 + 520))
      {
        unint64_t v13 = atomic_load(a6);
        unint64_t v14 = v13;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), (unint64_t *)(*(void *)(a1 + 128) + 8 * a3));
      }
    }
  }
  return result;
}

void sub_1000DCB70(_Unwind_Exception *a1)
{
  sub_1000D90F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DCB88(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8));
  size_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 20);
  std::chrono::system_clock::time_point v6 = malloc_type_valloc(v5, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v15 = std::bad_alloc::bad_alloc(exception);
  }
  v18[0] = off_1001AC608;
  v19[1] = v18;
  uint64_t v20 = (uint64_t)v6;
  sub_100017FFC((uint64_t)v21, (uint64_t)v18);
  sub_100017750(v18);
  sub_1000DD800(a1, v7, (uint64_t)v18);
  char v8 = 0;
  uint64_t v9 = v4 * v5;
  while ((v18[0] != v19[3] || v18[1] != v19[4]) && !*(unsigned char *)(*(void *)(a1 + 8) + 16))
  {
    int v10 = sub_1000DD43C(a1, a2, v19, v9, v20);
    sub_1000DD888(a1, v19, (uint64_t)v16);
    for (BOOL i = v10 == 0; ; BOOL i = v12 != 0)
    {
      v8 |= i;
      if (v16[0] == v17[3] && v16[1] == v17[4]) {
        break;
      }
      if (*(unsigned char *)(*(void *)(a1 + 8) + 16)) {
        break;
      }
      int v12 = sub_1000DCF88(a1, a2, v17, v9, v20);
      sub_1000DA5F8((uint64_t)v16);
    }
    sub_1000DA4D0((uint64_t)v18);
  }
  sub_1000176CC(&v20, 0);
  sub_100017750(v21);
  return v8 & 1;
}

void sub_1000DCD9C(_Unwind_Exception *a1)
{
  sub_1000176CC((uint64_t *)(v2 - 128), 0);
  sub_100017750(v1);
  _Unwind_Resume(a1);
}

void *sub_1000DCDD0(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000FD3D0((uint64_t)a1, a2);
  *a1 = off_1001AC3F0;
  a1[45] = &off_1001AC4F0;
  a1[46] = &off_1001AC518;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AC3F0;
  a1[45] = off_1001AC478;
  a1[46] = off_1001AC4A0;
  return a1;
}

void sub_1000DCED0(_Unwind_Exception *a1)
{
  sub_1000EE4C4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000DCEF4(uint64_t a1)
{
  return a1;
}

void sub_1000DCF38(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 3680);
  std::mutex::lock((std::mutex *)(a1 + 3680));
  *(unsigned char *)(a1 + 3672) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 3624));

  std::mutex::unlock(v2);
}

uint64_t sub_1000DCF88(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3[1];
  uint64_t v6 = *(void *)(*a3 + 56);
  uint64_t v7 = (*(void *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(*a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4)) {
    return 4294967274;
  }
  uint64_t v9 = (atomic_ullong *)(v6 + 16 * v5);
  if (*v9)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    atomic_compare_exchange_strong(v9, (unint64_t *)&v13, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v10 = v13 == 0;
  }
  v15[1] = v9;
  BOOL v16 = v10;
  v15[0] = off_1001B66C0;
  uint64_t v17 = 0;
  if (v10)
  {
    uint64_t v14 = (*(void *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8) & 0x7FFFFFFFFFFFFFLL)
        * *(unsigned int *)(*(void *)(*a3 + 8) + 20);
    uint64_t v11 = sub_1000DD0F4(a1, a2, a3, v14, a5);
    sub_10014156C(v15);
    if ((v11 & 0x80000000) == 0)
    {
      atomic_store(1u, (unsigned int *)(a1 + 96));
      sub_1000DAB6C(a1, v14);
    }
  }
  else
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
    sub_10014156C(v15);
    return 4294967282;
  }
  return v11;
}

void sub_1000DD0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000DD0F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return 0;
  }
  unint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 20);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
  if (v11 - a4 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11 - a4;
  }
  uint64_t result = sub_1000DD1A4(*(atomic_ullong **)(a1 + 8), a2, a5, v12, a4);
  if ((result & 0x8000000000000000) == 0)
  {
    sub_1000DB460(a3, v14);
    return 0;
  }
  return result;
}

uint64_t sub_1000DD1A4(atomic_ullong *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  uint64_t v22 = a3;
  uint64_t v23 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a4;
  char v27 = 0;
  int v11 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v22);
  if (v11 != a4)
  {
    *(void *)&long long v18 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
    *((void *)&v18 + 1) = 46;
    int v19 = 16;
    sub_1000E4F1C(v20, &v18);
    sub_100003DF0(v21, (uint64_t)"Can't read for defrag", 21);
    std::ostream::~ostream();
    sub_1000F6B20((uint64_t)v20);
    std::ios::~ios();
    if (v11 < 0) {
      int v16 = v11;
    }
    else {
      int v16 = -5;
    }
    goto LABEL_16;
  }
  uint64_t v12 = sub_1000DB67C((uint64_t)a1, a2, 0);
  if (v12)
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v14 = v23;
    uint64_t v22 = a3;
    uint64_t v23 = v13;
    if (v14) {
      sub_100010A48(v14);
    }
    uint64_t v24 = a4;
    uint64_t v25 = v12;
    uint64_t v26 = a4;
    char v27 = 0;
    int v15 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 80))(*(void *)(a2 + 16), &v22);
    if (v15 != a4)
    {
      *(void *)&long long v18 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
      *((void *)&v18 + 1) = 46;
      int v19 = 16;
      sub_1000E5084(v20, &v18);
      sub_100003DF0(v21, (uint64_t)"Can't write table for defrag", 28);
      std::ostream::~ostream();
      sub_1000F7294((uint64_t)v20);
      std::ios::~ios();
      sub_1000DB8A8(a1, v12, a2);
      if (v15 < 0) {
        int v16 = v15;
      }
      else {
        int v16 = -5;
      }
LABEL_16:
      a4 = -(uint64_t)-v16;
    }
  }
  else
  {
    a4 = -28;
  }
  if (v23) {
    sub_100010A48(v23);
  }
  return a4;
}

void sub_1000DD3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000E51A8((uint64_t)va);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 - 88);
  if (v6) {
    sub_100010A48(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000DD43C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3[1];
  uint64_t v6 = *(void *)(*a3 + 56);
  uint64_t v7 = (*(void *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(*a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4)) {
    return 4294967274;
  }
  uint64_t v12 = (atomic_ullong *)(v6 + 16 * v5);
  if (*v12)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    uint64_t v14 = 0;
    atomic_compare_exchange_strong(v12, (unint64_t *)&v14, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v13 = v14 == 0;
  }
  v25[1] = v12;
  BOOL v26 = v13;
  v25[0] = off_1001B66C0;
  uint64_t v27 = 0;
  if (!v13)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
    sub_10014156C(v25);
    return 4294967274;
  }
  uint64_t v15 = *(void *)(a1 + 8);
  unint64_t v16 = *(unsigned __int16 *)(v15 + 18);
  unint64_t v17 = ((*(void *)(*a3 + 352)
        + a3[1]
        / (unint64_t)(*(void *)(*(void *)(*a3 + 8) + 48) + 1)
        * *(void *)(*(void *)(*a3 + 8) + 48)
        * *(unsigned int *)(*(void *)(*a3 + 8) + 20))
       / v16
       - *(void *)(a1 + 352) / v16)
      / (*(void *)(v15 + 48)
       * (unint64_t)(*(_DWORD *)(v15 + 20) / v16));
  unint64_t v18 = sub_1000DB4CC(a1, v17);
  sub_1000DB53C((unint64_t *)(*(void *)(a1 + 72) + 8 * v17), v18, (unint64_t *)&v24);
  if (!v24 || *(unsigned char *)(v24 + 344)) {
    goto LABEL_9;
  }
  if (*(void *)(v24 + 288)) {
    sub_1000FD460(v24 + 264, v24);
  }
  sub_1000DB53C((unint64_t *)(*(void *)(a1 + 72) + 8 * v17), v18, &v23);
  sub_1000DB5D8(&v24, (atomic_ullong *)&v23);
  sub_1000D9F50((atomic_ullong *)&v23);
  if (!v24 || *(unsigned char *)(v24 + 344))
  {
LABEL_9:
    (*(void (**)(unint64_t *__return_ptr))(**(void **)(a1 + 8) + 32))(&v23);
    sub_1000DB5D8(&v24, (atomic_ullong *)&v23);
    sub_1000D9F50((atomic_ullong *)&v23);
    if (!v24 || *(unsigned char *)(v24 + 344) || (unsigned int v22 = atomic_load((unsigned int *)(v24 + 24)), v22 == 2))
    {
      if (v24 && !*(unsigned char *)(v24 + 344))
      {
        (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
        uint64_t v19 = 4294967248;
      }
      else
      {
        uint64_t v19 = 4294967274;
      }
    }
    else
    {
      uint64_t v7 = (*(void *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(void *)(*a3 + 8) + 20);
      uint64_t v19 = sub_1000DD0F4(a1, a2, a3, v7, a5);
    }
    if (v24 && !*(unsigned char *)(v24 + 344) && *(void *)(v24 + 288)) {
      sub_1000FD460(v24 + 264, v24);
    }
    int v21 = 1;
  }
  else
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
    int v21 = 0;
    uint64_t v19 = 4294967274;
  }
  sub_1000D9F50(&v24);
  sub_10014156C(v25);
  if (!v21) {
    return 4294967248;
  }
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)(a1 + 96));
    sub_1000DAB6C(a1, v7);
  }
  return v19;
}

void sub_1000DD7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  atomic_ullong v3 = va_arg(va1, void);
  sub_1000D9F50((atomic_ullong *)va);
  sub_10014156C(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DD800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 352);
  unint64_t v6 = *(void *)(*(void *)(a1 + 8) + 80) + v5;
  if (v5 >= v6)
  {
    char v8 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = sub_1000DA460(a1, *(void *)(a1 + 352));
    unint64_t v6 = *(void *)(*(void *)(a1 + 8) + 80) + *(void *)(a1 + 352);
    char v8 = 1;
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = a2;
  *(unsigned char *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 48) = v6;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

uint64_t sub_1000DD888@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(void *)(*a2 + 352)
     + a2[1]
     / (unint64_t)(*(void *)(*(void *)(*a2 + 8) + 48) + 1)
     * *(void *)(*(void *)(*a2 + 8) + 48)
     * *(unsigned int *)(*(void *)(*a2 + 8) + 20);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 352) + *(void *)(v7 + 80);
  if (v6 >= v8)
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
    char v17 = 0;
    unint64_t v16 = *(void *)(*a2 + 352)
        + a2[1]
        / (unint64_t)(*(void *)(*(void *)(*a2 + 8) + 48) + 1)
        * *(void *)(*(void *)(*a2 + 8) + 48)
        * *(unsigned int *)(*(void *)(*a2 + 8) + 20);
  }
  else
  {
    uint64_t v10 = sub_1000DA598(a1, v6);
    atomic_ullong v3 = a2;
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFF00;
    uint64_t v12 = v10;
    uint64_t v13 = *(void *)(*a2 + 8);
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = *(unsigned int *)(v13 + 20);
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v16 = *(void *)(*a2 + 352) + a2[1] / (unint64_t)(v14 + 1) * v14 * v15;
    unint64_t v8 = *(void *)(a1 + 352) + *(void *)(v7 + 80);
    char v17 = 1;
  }
  unsigned int v18 = *(unsigned __int16 *)(v7 + 18);
  unsigned int v19 = *(_DWORD *)(v7 + 20) / v18;
  uint64_t v20 = *(void *)(v7 + 48);
  unint64_t v21 = v16 + v18 * (unint64_t)v19 * v20;
  if (v21 >= v8)
  {
    char v23 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = sub_1000DA598(a1, v16 + v18 * (unint64_t)v19 * v20);
    char v23 = 1;
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v11 | v12;
  *(void *)(a3 + 24) = v3;
  *(unsigned char *)(a3 + 32) = v17;
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 48) = v21;
  *(void *)(a3 + 56) = result;
  *(void *)(a3 + 64) = a2;
  *(unsigned char *)(a3 + 72) = v23;
  return result;
}

uint64_t sub_1000DD9C0(uint64_t a1)
{
  *(void *)a1 = off_1001ABAC8;
  uint64_t v2 = (std::mutex *)(a1 + 3680);
  std::mutex::lock((std::mutex *)(a1 + 3680));
  *(unsigned char *)(a1 + 16) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 3624));
  std::mutex::unlock(v2);
  std::thread::join((std::thread *)(a1 + 3616));
  std::mutex::~mutex((std::mutex *)(a1 + 3792));
  sub_1000D9D50((void *)(a1 + 3744));
  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 3624));
  std::thread::~thread((std::thread *)(a1 + 3616));
  std::mutex::~mutex((std::mutex *)(a1 + 3528));
  sub_1000FE060(a1 + 2080);
  sub_1000FD538(a1 + 280);
  sub_10002A594(a1 + 248, *(void **)(a1 + 256));
  std::mutex::~mutex((std::mutex *)(a1 + 184));
  atomic_ullong v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 160) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }
  sub_1000FD4B4((void *)(a1 + 88));
  return a1;
}

uint64_t sub_1000DDABC(uint64_t a1)
{
  return a1;
}

void sub_1000DDAF8(uint64_t a1)
{
  sub_1000DD9C0(a1);

  operator delete();
}

__n128 sub_1000DDB30@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1000DA3C0((uint64_t *)v10, a2, a3, *(void *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), 0, *(void *)(a1 + 120), 0);
  sub_1000DA3C0((uint64_t *)(a4 + 80), a2, a3, *(void *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), *(void *)(a1 + 120), *(void *)(a1 + 120), 0);
  long long v8 = v10[3];
  *(_OWORD *)(a4 + 32) = v10[2];
  *(_OWORD *)(a4 + 48) = v8;
  *(_OWORD *)(a4 + 64) = v10[4];
  __n128 result = (__n128)v10[1];
  *(_OWORD *)a4 = v10[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

void sub_1000DDBC4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1000EE1D0(&v26, (uint64_t)a1, a3);
  long long v30 = v26;
  if ((*(void *)(*(void *)(v26 + 56) + 16 * *((void *)&v26 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(v26 + 8) + 20))
  {
    sub_1000DD888((uint64_t)a1, &v30, (uint64_t)&v26);
    long long v23 = v26;
    long long v24 = v27;
    uint64_t v25 = v28;
    while (v23 != v29)
    {
      unint64_t v5 = atomic_load((unint64_t *)(*(void *)(v24 + 56) + 16 * *((void *)&v24 + 1) + 8));
      if (v5 >> 62 == 3) {
        return;
      }
      sub_1000DA5F8((uint64_t)&v23);
    }
    if ((*(void *)(*(void *)(v30 + 56) + 16 * *((void *)&v30 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(void *)(v30 + 8) + 20))
    {
      long long v23 = v26;
      if (v25 == v28)
      {
        if ((_BYTE)v25) {
          *((void *)&v24 + 1) = *((void *)&v27 + 1);
        }
      }
      else if ((_BYTE)v25)
      {
        LOBYTE(v25) = 0;
      }
      else
      {
        long long v24 = v27;
        LOBYTE(v25) = 1;
      }
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      unint64_t v22 = 0;
      while (v23 != v29)
      {
        sub_1000E40F4(*(void *)(v24 + 56) + 16 * *((void *)&v24 + 1), 0, (uint64_t)v19);
        unint64_t v6 = v21;
        if (v21 >= v22)
        {
          uint64_t v7 = sub_1000EEA74(&v20, (uint64_t)v19);
        }
        else
        {
          sub_100141338(v21, (uint64_t)v19);
          *(void *)unint64_t v6 = off_1001B66C0;
          *(void ***)(v6 + 24) = v19[3];
          uint64_t v7 = v6 + 32;
        }
        unint64_t v21 = v7;
        sub_10014156C(v19);
        unint64_t v8 = atomic_load((unint64_t *)(*(void *)(v24 + 56) + 16 * *((void *)&v24 + 1) + 8));
        if (v8 >> 62 == 3) {
          goto LABEL_33;
        }
        sub_1000DA5F8((uint64_t)&v23);
      }
      long long v9 = v30;
      uint64_t v10 = *(void *)(v30 + 56) + 16 * *((void *)&v30 + 1);
      if ((*(void *)(v10 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(v30 + 8) + 20))
      {
        sub_1000E40F4(v10, 0, (uint64_t)v19);
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v12 = *(unsigned int *)(v11 + 20);
        if ((*(void *)(*(void *)(v9 + 56) + 16 * *((void *)&v9 + 1) + 8) & 0x7FFFFFFFFFFFFFLL) * v12)
        {
          sub_1000DB028(a1, a2, (*(void *)(v9 + 352)+ *(void *)(v11 + 48) * v12 * (*((void *)&v9 + 1) / (unint64_t)(*(void *)(v11 + 48) + 1)))/ *(unsigned __int16 *)(a1[1] + 18), 1, (unint64_t *)&v18);
          if (v18 && !*(unsigned char *)(v18 + 344))
          {
            if (*(unsigned char *)(v18 + 224)) {
              uint64_t v13 = v18 + 40;
            }
            else {
              uint64_t v13 = 0;
            }
            uint64_t v14 = *(void *)(v13 + 16);
            *(void *)(v13 + 16) = 0;
            *(void *)(v13 + 24) = v14;
            *(unsigned char *)(v13 + 112) = 0;
            if (v18 && *(void *)(v18 + 288)) {
              sub_1000FD460(v18 + 264, v18);
            }
            uint64_t v15 = a1[1];
            unint64_t v16 = ((*(void *)(v9 + 352)
                  + *((void *)&v9 + 1)
                  / (unint64_t)(*(void *)(*(void *)(v9 + 8) + 48) + 1)
                  * *(void *)(*(void *)(v9 + 8) + 48)
                  * *(unsigned int *)(*(void *)(v9 + 8) + 20))
                 / *(unsigned __int16 *)(v15 + 18)
                 - a1[44] / (unint64_t)*(unsigned __int16 *)(v15 + 18))
                / (*(void *)(v15 + 48)
                 * (unint64_t)(*(_DWORD *)(v15 + 20) / *(unsigned __int16 *)(v15 + 18)));
            atomic_ullong v17 = 0;
            atomic_store(atomic_exchange(&v17, 0), (unint64_t *)(a1[9] + 8 * v16));
          }
          sub_1000D9F50(&v18);
        }
        sub_10014156C(v19);
      }
LABEL_33:
      v19[0] = (void **)&v20;
      sub_1000EED24(v19);
    }
  }
}

void sub_1000DDF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_ullong a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a12 = (void **)&a16;
  sub_1000EED24(&a12);
  _Unwind_Resume(a1);
}

void *sub_1000DDF94(void *a1, void *a2)
{
  sub_100003DF0(a1, (uint64_t)"table entry data@", 17);
  atomic_ullong v3 = (void *)std::ostream::operator<<();
  sub_100003DF0(v3, (uint64_t)" = offset = ", 12);
  uint64_t v4 = (void *)std::ostream::operator<<();
  unint64_t v5 = sub_100003DF0(v4, (uint64_t)", flags = ", 10);
  unint64_t v6 = atomic_load((unint64_t *)(*(void *)(*a2 + 56) + 16 * a2[1] + 8));
  int v8 = v6 >> 62;
  return sub_1000E7714(v5, &v8);
}

__n128 sub_1000DE05C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  v69 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  sub_1000DC208(a3, a4, *(unsigned int *)(*(void *)(a1 + 8) + 20), *(unsigned __int16 *)(*(void *)(a1 + 8) + 18), *(void *)(a1 + 352), *(void *)(*(void *)(a1 + 8) + 80) + *(void *)(a1 + 352), (uint64_t)v80);
  int v9 = 0;
  LOBYTE(v78) = 0;
  char v79 = 0;
  int v70 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 24) + 184);
  while (*(void *)v80 != v83
       || *(_OWORD *)&v80[8] != v84
       || *(void *)&v80[16] != *(void *)v80 + 16 * *(void *)&v80[8]
       && (*(_OWORD *)&v81[8] != v85 || *(void *)&v81[24] != v86))
  {
    uint64_t v10 = *(void *)&v80[24];
    uint64_t v11 = *(void *)v81;
    *(void *)&v81[8] += *(void *)&v81[24] * *(void *)v81;
    *(void *)&v80[24] = sub_1000DA304((uint64_t *)v80);
    *(void *)v81 = v12;
    unint64_t v13 = v10 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
    uint64_t v14 = sub_1000DA598(a1, v13);
    unint64_t v16 = (void *)v14;
    uint64_t v17 = v15;
    *(void *)&long long v77 = v14;
    *((void *)&v77 + 1) = v15;
    if (v79)
    {
      uint64_t v18 = v78;
      BOOL v19 = *(void *)(v14 + 352) == *(void *)(v78 + 352) && v15 == *((void *)&v78 + 1);
      if (!v19)
      {
        v9 |= sub_1000DAC90(a1, a2, &v78);
        uint64_t v20 = *(void *)(v18 + 8);
        unint64_t v21 = (*(void *)(v18 + 352)
             + (*(void *)(v20 + 48) + *(void *)(v20 + 48) * *((void *)&v78 + 1))
             / (unint64_t)(*(void *)(v20 + 48) + 1)
             * *(unsigned int *)(v20 + 20))
            / *(unsigned __int16 *)(v20 + 18);
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(void *)(v22 + 48);
        unsigned int v24 = *(_DWORD *)(v22 + 20);
        unint64_t v25 = *(unsigned __int16 *)(v22 + 18);
        unint64_t v26 = v23 * (v24 / v25);
        unint64_t v27 = *(void *)(a1 + 352) / v25;
        ++v23;
        uint64_t v28 = v23 + v23 * ((v21 - v27) / v26);
        uint64_t v29 = v16[1];
        if (v28 != v23
                  + v23
                  * (((v16[44]
                     + (*(void *)(v29 + 48) + *(void *)(v29 + 48) * v17)
                     / (unint64_t)(*(void *)(v29 + 48) + 1)
                     * *(unsigned int *)(v29 + 20))
                    / *(unsigned __int16 *)(v29 + 18)
                    - v27)
                   / v26)
          && (v9 & 1) != 0)
        {
          sub_1000DDBC4((uint64_t *)a1, a2, v28 - 1);
          int v9 = 0;
        }
      }
      *((void *)&v78 + 1) = v17;
    }
    else
    {
      long long v78 = v77;
      char v79 = 1;
    }
    unint64_t v30 = atomic_load((unint64_t *)(v16[7] + 16 * v17 + 8));
    unint64_t v31 = v30 >> 62;
    if (v30 >> 62 != 2)
    {
      long long v32 = v77;
      uint64_t v33 = *(void *)(v77 + 8);
      uint64_t v34 = *(void *)(v33 + 48);
      uint64_t v35 = *(unsigned int *)(v33 + 20);
      if (*(void *)(v77 + 352) + (v34 + v34 * *((void *)&v77 + 1)) / (unint64_t)(v34 + 1) * v35 == v13
        && v11 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18) == v35)
      {
        sub_1000E40F4(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1), 0, (uint64_t)v75);
        if (!v76)
        {
          *(void *)&long long v71 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v71 + 1) = 30;
          int v72 = 16;
          sub_1000DE8C0(v73, &v71);
          sub_100003DF0(v74, (uint64_t)"Couldn't lock entry ", 20);
          sub_1000DDF94(v74, &v77);
          sub_1000DE9E4((uint64_t)v73);
          exception = __cxa_allocate_exception(0x40uLL);
          void *exception = &off_1001B6CA0;
          v65 = std::generic_category();
          exception[1] = 4294967282;
          exception[2] = v65;
          *((unsigned char *)exception + 24) = 0;
          *((unsigned char *)exception + 48) = 0;
          exception[7] = "Couldn't lock entry";
        }
        unint64_t v36 = atomic_load((unint64_t *)(*(void *)(v32 + 56) + 16 * *((void *)&v32 + 1) + 8));
        unint64_t v37 = v36 & 0xC000000000000000;
        if (v31 != 1 && v37 == 0x4000000000000000) {
          goto LABEL_32;
        }
        int v39 = (atomic_ullong *)(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1) + 8);
        unint64_t v40 = *v39;
        unint64_t v41 = *v39 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
        for (atomic_ullong i = *v39; ; v41 = i & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000)
        {
          atomic_compare_exchange_strong(v39, (unint64_t *)&i, v41);
          if (i == v40) {
            break;
          }
          unint64_t v40 = i;
        }
        BOOL v48 = v40 >> 62 == 3;
        v49 = (atomic_ullong *)(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1) + 8);
        atomic_ullong v50 = *v49;
        uint64_t v51 = *(unsigned int *)(*(void *)(v77 + 8) + 20);
        if (v51)
        {
          atomic_fetch_and_explicit(v49, 0xFF80000000000000, memory_order_relaxed);
        }
        else
        {
          atomic_ullong v52 = *v49;
          atomic_ullong v53 = *v49;
          atomic_compare_exchange_strong_explicit(v49, (unint64_t *)&v53, *v49 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
          if (v53 != v52)
          {
            atomic_ullong v54 = v53;
            do
            {
              atomic_compare_exchange_strong_explicit(v49, (unint64_t *)&v54, v53 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
              BOOL v19 = v54 == v53;
              atomic_ullong v53 = v54;
            }
            while (!v19);
          }
        }
        v9 |= v48;
        uint64_t v55 = (v50 & 0x7FFFFFFFFFFFFFLL) * v51;
        atomic_store(1u, (unsigned int *)(a1 + 96));
        sub_10014156C(v75);
        if (v55) {
          sub_1000DAB6C(a1, v55);
        }
      }
      else if (v31)
      {
        v45 = (unint64_t *)(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1));
        BOOL v46 = sub_1000F6308(v45);
        v75[0] = off_1001B66A0;
        v75[1] = v45;
        BOOL v76 = v46;
        if (!v46)
        {
          *(void *)&long long v71 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v71 + 1) = 30;
          int v72 = 16;
          sub_1000DEA28(v73, &v71);
          sub_100003DF0(v74, (uint64_t)"Couldn't lock entry ", 20);
          sub_1000DDF94(v74, &v77);
          sub_1000DEB4C((uint64_t)v73);
          int v62 = __cxa_allocate_exception(0x40uLL);
          *int v62 = &off_1001B6CA0;
          uint64_t v63 = std::generic_category();
          v62[1] = 4294967282;
          v62[2] = v63;
          *((unsigned char *)v62 + 24) = 0;
          *((unsigned char *)v62 + 48) = 0;
          v62[7] = "Couldn't lock entry";
        }
        uint64_t v47 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
        *(void *)v73 = sub_1000E4074(a1, v10 * v47, v11 * v47);
        sub_1000DB988(a1, a2, &v77, v73, 2u, v31 | (unint64_t)&_mh_execute_header);
        sub_1001413CC(v75);
      }
      else if (!v70)
      {
        sub_1000E40F4(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1), 0, (uint64_t)v75);
        if (!v76)
        {
          *(void *)&long long v71 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v71 + 1) = 30;
          int v72 = 16;
          sub_1000DEB90(v73, &v71);
          sub_100003DF0(v74, (uint64_t)"Couldn't exclusively lock entry ", 32);
          sub_1000DDF94(v74, &v77);
          sub_1000DECB4((uint64_t)v73);
          v66 = __cxa_allocate_exception(0x40uLL);
          void *v66 = &off_1001B6CA0;
          v67 = std::generic_category();
          v66[1] = 4294967282;
          v66[2] = v67;
          *((unsigned char *)v66 + 24) = 0;
          *((unsigned char *)v66 + 48) = 0;
          v66[7] = "Couldn't lock entry";
        }
        unint64_t v43 = atomic_load((unint64_t *)(*(void *)(v32 + 56) + 16 * *((void *)&v32 + 1) + 8));
        uint64_t v44 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
        *(void *)v73 = sub_1000E4074(a1, v10 * v44, v11 * v44);
        sub_1000DB988(a1, a2, &v77, v73, 2u, (unint64_t)&_mh_execute_header & 0xFFFFFFFFFFFFFFFCLL | (v43 >> 62));
LABEL_32:
        sub_10014156C(v75);
      }
    }
  }
  if (v79 && ((sub_1000DAC90(a1, a2, &v78) | v9) & 1) != 0)
  {
    uint64_t v56 = *(void *)(v78 + 8);
    uint64_t v57 = *(void *)(a1 + 8);
    uint64_t v58 = *(void *)(v57 + 48);
    sub_1000DDBC4((uint64_t *)a1, a2, v58+ (v58 + 1)* (((*(void *)(v78 + 352)+ (*(void *)(v56 + 48) + *(void *)(v56 + 48) * *((void *)&v78 + 1))/ (unint64_t)(*(void *)(v56 + 48) + 1)* *(unsigned int *)(v56 + 20))/ *(unsigned __int16 *)(v56 + 18)- *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v57 + 18))/ (v58* (unint64_t)(*(_DWORD *)(v57 + 20) / *(unsigned __int16 *)(v57 + 18)))));
  }
  long long v59 = *(_OWORD *)&v81[16];
  a5[2] = *(_OWORD *)v81;
  a5[3] = v59;
  a5[4] = v82;
  long long v60 = *(_OWORD *)&v80[16];
  *a5 = *(_OWORD *)v80;
  a5[1] = v60;
  std::mutex::unlock(v69);
  return result;
}

void sub_1000DE828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
}

void *sub_1000DE8C0(void *a1, long long *a2)
{
  atomic_ullong v3 = (std::ios_base *)(a1 + 46);
  sub_1000FE5FC((uint64_t)a1, a2);
  *a1 = off_1001AC690;
  a1[45] = &off_1001AC790;
  a1[46] = &off_1001AC7B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AC690;
  a1[45] = off_1001AC718;
  a1[46] = off_1001AC740;
  return a1;
}

void sub_1000DE9C0(_Unwind_Exception *a1)
{
  sub_1000EF074(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000DE9E4(uint64_t a1)
{
  return a1;
}

void *sub_1000DEA28(void *a1, long long *a2)
{
  atomic_ullong v3 = (std::ios_base *)(a1 + 46);
  sub_1000FE68C((uint64_t)a1, a2);
  *a1 = off_1001AC8B0;
  a1[45] = &off_1001AC9B0;
  a1[46] = &off_1001AC9D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AC8B0;
  a1[45] = off_1001AC938;
  a1[46] = off_1001AC960;
  return a1;
}

void sub_1000DEB28(_Unwind_Exception *a1)
{
  sub_1000EF7E8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEB4C(uint64_t a1)
{
  return a1;
}

void *sub_1000DEB90(void *a1, long long *a2)
{
  atomic_ullong v3 = (std::ios_base *)(a1 + 46);
  sub_1000FE71C((uint64_t)a1, a2);
  *a1 = off_1001ACAD0;
  a1[45] = &off_1001ACBD0;
  a1[46] = &off_1001ACBF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ACAD0;
  a1[45] = off_1001ACB58;
  a1[46] = off_1001ACB80;
  return a1;
}

void sub_1000DEC90(_Unwind_Exception *a1)
{
  sub_1000EFF5C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000DECB4(uint64_t a1)
{
  return a1;
}

BOOL sub_1000DECF8(uint64_t a1, uint64_t a2)
{
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  unsigned int v45 = atomic_exchange((atomic_uint *volatile)(a1 + 96), 0);
  uint64_t v4 = (std::mutex *)(a1 + 280);
  std::mutex::lock((std::mutex *)(a1 + 280));
  long long v5 = *(_OWORD *)(a1 + 248);
  long long v6 = *(_OWORD *)(a1 + 264);
  long long v53 = *(_OWORD *)(a1 + 232);
  long long v54 = v5;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  long long v7 = v55;
  long long v55 = v6;
  *(_OWORD *)(a1 + 264) = v7;
  std::mutex::unlock(v4);
  size_t v8 = ((unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 8) + 18)
      + 8 * *(void *)(*(void *)(a1 + 8) + 56)
      - 1)
     / *(unsigned __int16 *)(*(void *)(a1 + 8) + 18)
     * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
  int v9 = malloc_type_valloc(v8, 0xF8ED6DDuLL);
  if (!v9)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v44 = std::bad_alloc::bad_alloc(exception);
  }
  v58[0] = off_1001AC608;
  unint64_t v60 = (unint64_t)v58;
  uint64_t v63 = (uint64_t)v9;
  sub_100017FFC((uint64_t)v64, (uint64_t)v58);
  sub_100017750(v58);
  uint64_t v10 = v63;
  std::mutex::lock((std::mutex *)(a1 + 168));
  sub_1000DD800(a1, v11, (uint64_t)v58);
  uint64_t v12 = 0;
  size_t v13 = v10 + v8;
  uint64_t v52 = *(void *)(a1 + 344);
  char v51 = 0;
  *(void *)&long long v49 = a2;
  *((void *)&v49 + 1) = &v52;
  *(void *)&long long v50 = v10;
  *((void *)&v50 + 1) = &v51;
  uint64_t v14 = (void *)v10;
  while (v58[0] != v61 || v58[1] != v62)
  {
    if ((atomic_fetch_and((atomic_ullong *volatile)(v59[7] + 16 * v60 + 8), 0x7FFFFFFFFFFFFFFFuLL) & 0x8000000000000000) != 0)
    {
      sub_1000DB028((uint64_t *)a1, a2, (v59[44]+ v60 / (*(void *)(v59[1] + 48) + 1) * *(void *)(v59[1] + 48) * *(unsigned int *)(v59[1] + 20))/ *(unsigned __int16 *)(*(void *)(a1 + 8) + 18), 0, v46);
      if (v46[0] && !*(unsigned char *)(v46[0] + 344))
      {
        if (*(unsigned char *)(v46[0] + 224)) {
          uint64_t v15 = v46[0] + 40;
        }
        else {
          uint64_t v15 = 0;
        }
        int v16 = sub_1000DF6F4(v15, a2, a1);
        if (v16)
        {
          sub_1000B23BC(a2);
          uint64_t v35 = __cxa_allocate_exception(0x40uLL);
          unint64_t v36 = v35;
          if (v16 < 0) {
            uint64_t v37 = v16;
          }
          else {
            uint64_t v37 = -v16;
          }
          *uint64_t v35 = &off_1001B6CA0;
          uint64_t v38 = std::generic_category();
          v36[1] = v37;
          v36[2] = v38;
          *((unsigned char *)v36 + 24) = 0;
          *((unsigned char *)v36 + 48) = 0;
          v36[7] = "Can't flush asif, bitmap flush failed";
        }
        char v51 = 1;
      }
      sub_1000D9F50((atomic_ullong *)v46);
    }
    sub_1000E40F4(v59[7] + 16 * v60, 0, (uint64_t)v48);
    unint64_t v17 = atomic_fetch_and((atomic_ullong *volatile)(v59[7] + 16 * v60 + 8), 0x7FFFFFFFFFFFFFFFuLL);
    sub_1000DF76C(&v59);
    if ((v17 & 0x8000000000000000) != 0)
    {
      sub_1000DB028((uint64_t *)a1, a2, (v59[44]+ v60 / (*(void *)(v59[1] + 48) + 1) * *(void *)(v59[1] + 48) * *(unsigned int *)(v59[1] + 20))/ *(unsigned __int16 *)(*(void *)(a1 + 8) + 18), 1, v46);
      if (v46[0] && !*(unsigned char *)(v46[0] + 344))
      {
        if (*(unsigned char *)(v46[0] + 224)) {
          uint64_t v18 = v46[0] + 40;
        }
        else {
          uint64_t v18 = 0;
        }
        int v19 = sub_1000DF6F4(v18, a2, a1);
        if (v19)
        {
          sub_1000B23BC(a2);
          int v39 = __cxa_allocate_exception(0x40uLL);
          unint64_t v40 = v39;
          if (v19 < 0) {
            uint64_t v41 = v19;
          }
          else {
            uint64_t v41 = -v19;
          }
          *int v39 = &off_1001B6CA0;
          v42 = std::generic_category();
          v40[1] = v41;
          v40[2] = v42;
          *((unsigned char *)v40 + 24) = 0;
          *((unsigned char *)v40 + 48) = 0;
          v40[7] = "Can't flush asif, bitmap flush failed";
        }
        char v51 = 1;
      }
      sub_1000D9F50((atomic_ullong *)v46);
    }
    ++v12;
    if (v45)
    {
      sub_1000DD888(a1, &v59, (uint64_t)v46);
      while (v46[0] != v47[3] || v46[1] != v47[4])
      {
        sub_1000DFA4C(v47);
        unint64_t v20 = atomic_load((unint64_t *)(*(void *)(v47[0] + 56) + 16 * v47[1] + 8));
        *v14++ = bswap64(v20);
        unint64_t v21 = (char *)operator new(0x28uLL);
        *(void *)unint64_t v21 = off_1001AF178;
        long long v22 = v50;
        *(_OWORD *)(v21 + 8) = v49;
        *(_OWORD *)(v21 + 24) = v22;
        uint64_t v57 = v21;
        if ((unint64_t)v14 >= v13)
        {
          sub_1000F0DAC((uint64_t)v56, (uint64_t)v14);
          uint64_t v14 = (void *)v10;
        }
        sub_1000FE8A8(v56);
        sub_1000DA5F8((uint64_t)v46);
      }
      unint64_t v23 = atomic_load((unint64_t *)(v59[7] + 16 * v60 + 8));
      *v14++ = bswap64(v23);
      unsigned int v24 = (char *)operator new(0x28uLL);
      *(void *)unsigned int v24 = off_1001AF178;
      long long v25 = v50;
      *(_OWORD *)(v24 + 8) = v49;
      *(_OWORD *)(v24 + 24) = v25;
      uint64_t v57 = v24;
      if ((unint64_t)v14 >= v13)
      {
        sub_1000F0DAC((uint64_t)v56, (uint64_t)v14);
        uint64_t v14 = (void *)v10;
      }
      sub_1000FE8A8(v56);
    }
    else
    {
      if (v14 != (void *)v10) {
        sub_1000DF86C((uint64_t *)&v49, (uint64_t)v14);
      }
      uint64_t v52 = *(void *)(a1 + 344) + 8 * (v12 + v12 * *(void *)(*(void *)(a1 + 8) + 48));
    }
    sub_10014156C(v48);
    sub_1000DA4D0((uint64_t)v58);
  }
  if (v14 != (void *)v10)
  {
    unint64_t v26 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
    size_t v27 = v26 + ((unint64_t)v14 - v10) / v26 * v26 - ((void)v14 - v10);
    bzero(v14, v27);
    sub_1000DF86C((uint64_t *)&v49, (uint64_t)v14 + v27);
  }
  std::mutex::unlock((std::mutex *)(a1 + 168));
  sub_1000176CC(&v63, 0);
  sub_100017750(v64);
  uint64_t v28 = *((void *)&v55 + 1);
  uint64_t v29 = (unint64_t **)(*((void *)&v53 + 1) + 8 * ((unint64_t)v55 >> 9));
  if ((void)v54 == *((void *)&v53 + 1))
  {
    unint64_t v30 = 0;
    long long v32 = 0;
    unint64_t v31 = (char *)(*((void *)&v53 + 1) + 8 * (((void)v55 + *((void *)&v55 + 1)) >> 9));
  }
  else
  {
    unint64_t v30 = &(*v29)[v55 & 0x1FF];
    unint64_t v31 = (char *)(*((void *)&v53 + 1) + 8 * (((void)v55 + *((void *)&v55 + 1)) >> 9));
    long long v32 = (unint64_t *)(*(void *)v31 + 8 * ((v55 + *((void *)&v55 + 1)) & 0x1FF));
  }
  sub_1000DFB94(*(atomic_ullong **)(a1 + 8), v29, v30, v31, v32, a2);
  if (v28) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  }
  int v33 = *(unsigned __int8 *)(a1 + 100);
  if (*(unsigned char *)(a1 + 100))
  {
    (*(void (**)(void, void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(void *)(a1 + 352), *(void *)(a1 + 344));
    *(unsigned char *)(a1 + 100) = 0;
  }
  sub_1000D9D50(&v53);
  return v33 != 0;
}

void sub_1000DF500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::mutex *a11, std::mutex *a12, void *a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40,uint64_t a41)
{
  std::mutex::unlock(a12);
  sub_1000176CC((uint64_t *)(v42 - 136), 0);
  sub_100017750(a13);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(a11);
    unint64_t v45 = *(void *)(v41 + 264) + *(void *)(v41 + 272);
    uint64_t v46 = *(void *)(v41 + 240);
    uint64_t v47 = (char *)(v46 + 8 * (v45 >> 9));
    if (*(void *)(v41 + 248) == v46) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)v47 + 8 * (v45 & 0x1FF);
    }
    long long v49 = (char *)(a37 + 8 * (a40 >> 9));
    if (a38 == a37)
    {
      long long v50 = 0;
      char v51 = 0;
      uint64_t v52 = (char *)(a37 + 8 * ((a41 + a40) >> 9));
    }
    else
    {
      long long v50 = (char *)(*(void *)v49 + 8 * (a40 & 0x1FF));
      uint64_t v52 = (char *)(a37 + 8 * ((a41 + a40) >> 9));
      char v51 = (char *)(*(void *)v52 + 8 * ((a41 + a40) & 0x1FF));
    }
    sub_1000DFB60(a10, v47, v48, v49, v50, v52, v51);
    std::mutex::unlock(a11);
    atomic_fetch_or((atomic_uint *volatile)(v41 + 96), a15 != 0);
    __cxa_rethrow();
  }
  sub_1000D9D50(&a36);
  _Unwind_Resume(a1);
}

void sub_1000DF6B8()
{
}

uint64_t sub_1000DF6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  uint64_t v7 = sub_1000E42F0(a1, a2, a3, *(unsigned int *)(*(void *)(a3 + 8) + 20));
  std::mutex::unlock(v6);
  return v7;
}

void sub_1000DF758(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000DF76C(void *a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8));
  if ((v1 & 0x7F80000000000000) != 0)
  {
    *(void *)&long long v3 = "di_asif::details::table_entry_map::validate() const";
    *((void *)&v3 + 1) = 43;
    int v4 = 16;
    sub_10009618C(v5, &v3);
    sub_100003DF0(v6, (uint64_t)"Diskimages2 - ASIF - bad map entry reserved bits ", 49);
    *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100096384((uint64_t)v5);
    std::ios::~ios();
  }
  return (v1 & 0x7F80000000000000) == 0;
}

void sub_1000DF858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000962B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000DF86C(uint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)a1[3])
  {
    int v4 = (*(uint64_t (**)(void, void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16), 0);
    if (v4)
    {
      uint64_t v12 = *a1;
      int v13 = v4;
      sub_1000B23BC(v12);
      exception = __cxa_allocate_exception(0x40uLL);
      if (v13 < 0) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = -v13;
      }
      int v16 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Can't flush asif, backend flush failed", v15);
    }
    *(unsigned char *)a1[3] = 0;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a2 - v5;
  uint64_t v7 = *(void *)a1[1];
  size_t v8 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  uint64_t v17 = v5;
  uint64_t v18 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = v6;
  uint64_t v20 = v7;
  uint64_t v21 = v6;
  char v22 = 0;
  LODWORD(v7) = (*(uint64_t (**)(void, uint64_t *))(**(void **)(*a1 + 16) + 80))(*(void *)(*a1 + 16), &v17);
  *(void *)a1[1] += v6;
  if (v6 != (int)v7)
  {
    sub_1000B23BC(*a1);
    int v9 = __cxa_allocate_exception(0x40uLL);
    uint64_t v10 = v9;
    if ((int)v7 < 0) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = -(int)v7;
    }
    *int v9 = &off_1001B6CA0;
    uint64_t v11 = std::generic_category();
    v10[1] = v7;
    uint64_t v10[2] = v11;
    *((unsigned char *)v10 + 24) = 0;
    *((unsigned char *)v10 + 48) = 0;
    v10[7] = "Can't flush asif";
  }
  if (v18) {
    sub_100010A48(v18);
  }
}

void sub_1000DFA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000DFA4C(void *a1)
{
  atomic_load((unint64_t *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8));
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8));
  if ((v1 & 0x3F80000000000000) != 0)
  {
    *(void *)&long long v3 = "di_asif::details::table_entry_data::validate() const";
    *((void *)&v3 + 1) = 44;
    int v4 = 16;
    sub_1000F0440(v5, &v3);
    sub_100003DF0(v6, (uint64_t)"Diskimages2 - ASIF - bad reserved bits ", 39);
    *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000F0638((uint64_t)v5);
    std::ios::~ios();
  }
  return (v1 & 0x3F80000000000000) == 0;
}

void sub_1000DFB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000F0564((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000DFB60(void **a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7)
{
  if (a7 == a5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = ((uint64_t)&a7[-*(void *)a6] >> 3) + ((a6 - a4) << 6) - ((uint64_t)&a5[-*(void *)a4] >> 3);
  }
  return sub_1000FE92C(a1, a2, a3, a4, a5, a6, a7, v7);
}

void *sub_1000DFB94(atomic_ullong *a1, unint64_t **a2, unint64_t *a3, char *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v12 = (*(uint64_t (**)(atomic_ullong *))(*a1 + 16))(a1);
  v15[0] = off_1001ABF28;
  v15[1] = a6;
  v15[3] = v15;
  sub_1000FFD10(v12, a2, a3, (uint64_t)a4, a5, (uint64_t)v15);
  __n128 result = sub_1000FC91C(v15);
  if (a5 == a3) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = (((char *)a2 - a4) << 6) - (((uint64_t)a5 - *(void *)a4) >> 3) + a3 - *a2;
  }
  atomic_fetch_add(a1 + 1, v14);
  return result;
}

void sub_1000DFCAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000FC91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000DFCC0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(_WORD *)v97 = 0;
  char v99 = 0;
  unint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v84 = *a3;
  long long v85 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v86 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v86[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v87 = a3[6];
  long long v88 = *(_OWORD *)(a3 + 7);
  long long v89 = *(_OWORD *)(a3 + 9);
  long long v90 = *(_OWORD *)(a3 + 11);
  char v91 = *((unsigned char *)a3 + 104);
  size_t v8 = (std::__shared_weak_count *)a3[15];
  uint64_t v92 = a3[14];
  v93 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v58 = 0;
  long long v94 = *((_OWORD *)a3 + 8);
  uint64_t v95 = a3[18];
  char v96 = *((unsigned char *)a3 + 152);
  while (!sub_10002F3D8((uint64_t)&v84, a4))
  {
    long long v82 = (void *)sub_1000DA598(a1, *(unint64_t *)&v86[8]);
    uint64_t v83 = v9;
    uint64_t v10 = v82[1];
    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = *(unsigned int *)(v10 + 20);
    v73[0] = v82[44] + (v11 + v11 * v9) / (unint64_t)(v11 + 1) * v12;
    v73[1] = v73[0] + v12;
    char v74 = 2;
    sub_1000302E0((uint64_t)&v84, (uint64_t)v73, a4, (uint64_t)v76);
    if (!sub_10002F3D8((uint64_t)v76, (uint64_t)&v79))
    {
      unsigned int v15 = (unint64_t *)(v82[7] + 16 * v83);
      BOOL v16 = sub_1000F6308(v15);
      v71[0] = off_1001B66A0;
      v71[1] = v15;
      BOOL v72 = v16;
      if (!v16)
      {
        *(void *)&long long v63 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v63 + 1) = 30;
        LODWORD(v64) = 16;
        sub_1000E08D0(v73, &v63);
        sub_100003DF0(v75, (uint64_t)"Couldn't lock entry ", 20);
        sub_1000DDF94(v75, &v82);
        sub_1000E09F4((uint64_t)v73);
        exception = __cxa_allocate_exception(0x40uLL);
        void *exception = &off_1001B6CA0;
        long long v53 = std::generic_category();
        exception[1] = 4294967282;
        exception[2] = v53;
        *((unsigned char *)exception + 24) = 0;
        *((unsigned char *)exception + 48) = 0;
        exception[7] = "Couldn't lock entry";
      }
      uint64_t v17 = v83;
      uint64_t v18 = v82[7];
      uint64_t v19 = (*(void *)(v18 + 16 * v83 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(v82[1] + 20);
      if (!v19)
      {
        LODWORD(v14) = sub_1000DB7E0(a1, a2, (uint64_t)v82, v83);
        if (!v14)
        {
          uint64_t v17 = v83;
          uint64_t v18 = v82[7];
          goto LABEL_11;
        }
        *(void *)&long long v63 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v63 + 1) = 30;
        LODWORD(v64) = 16;
        sub_1000E0A38(v73, &v63);
        sub_100003DF0(v75, (uint64_t)"couldn't allocate space for entry ", 34);
        sub_1000DDF94(v75, &v82);
        sub_100003DF0(v75, (uint64_t)" ret: ", 6);
        std::ostream::operator<<();
        std::ostream::~ostream();
        sub_1000F1F78((uint64_t)v73);
        std::ios::~ios();
        unint64_t v14 = (int)v14;
LABEL_53:
        int v13 = 1;
        goto LABEL_54;
      }
LABEL_11:
      unint64_t v20 = atomic_load((unint64_t *)(v18 + 16 * v17 + 8));
      unint64_t v21 = sub_1000E0BA0(&v82, a2, (uint64_t)v76, (uint64_t)&v79);
      unint64_t v14 = v21;
      unint64_t v23 = v22;
      if ((v21 & 0x8000000000000000) != 0 && v21)
      {
        if (v19) {
          goto LABEL_14;
        }
        sub_100141408((uint64_t)v71, 0, (uint64_t)v73);
        if (!v74) {
          goto LABEL_52;
        }
        unint64_t v32 = atomic_load((unint64_t *)(v82[7] + 16 * v83 + 8));
        if ((v32 & 0x4000000000000000) != 0) {
          goto LABEL_52;
        }
        int v33 = (atomic_ullong *)(v82[7] + 16 * v83 + 8);
        atomic_ullong v34 = *v33;
        uint64_t v35 = *(unsigned int *)(v82[1] + 20);
        if (v35)
        {
          atomic_fetch_and_explicit(v33, 0xFF80000000000000, memory_order_relaxed);
          goto LABEL_68;
        }
        atomic_ullong v41 = *v33;
        atomic_ullong v42 = *v33;
        atomic_compare_exchange_strong_explicit(v33, (unint64_t *)&v42, *v33 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
        if (v42 == v41)
        {
LABEL_52:
          sub_10014156C(v73);
          goto LABEL_53;
        }
        atomic_ullong v43 = v42;
        do
        {
          atomic_compare_exchange_strong_explicit(v33, (unint64_t *)&v43, v42 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
          BOOL v44 = v43 == v42;
          atomic_ullong v42 = v43;
        }
        while (!v44);
LABEL_68:
        uint64_t v45 = (v34 & 0x7FFFFFFFFFFFFFLL) * v35;
        sub_10014156C(v73);
        if (v45) {
          sub_1000DB8A8(*(atomic_ullong **)(a1 + 8), v45, a2);
        }
LABEL_14:
        int v13 = 1;
LABEL_54:
        sub_1001413CC(v71);
        goto LABEL_55;
      }
      unint64_t v24 = v20 >> 62;
      *(void *)&long long v63 = &v84;
      *((void *)&v63 + 1) = a4;
      v64 = &v97[1];
      v65 = &v82;
      v66 = v97;
      uint64_t v67 = a1;
      unint64_t v68 = v21;
      unint64_t v69 = v22;
      uint64_t v70 = a2;
      if (v24 == 1)
      {
LABEL_16:
        int v13 = 2;
      }
      else
      {
        uint64_t v25 = v82[1];
        uint64_t v26 = *(unsigned int *)(v25 + 20);
        if (v21 == v26
          && v82[44]
           + (*(void *)(v25 + 48) + *(void *)(v25 + 48) * v83)
           / (unint64_t)(*(void *)(v25 + 48) + 1)
           * v26 == v22)
        {
          sub_100141408((uint64_t)v71, 0, (uint64_t)v61);
          if (!v62)
          {
            *(void *)&long long v59 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
            *((void *)&v59 + 1) = 30;
            int v60 = 16;
            sub_1000E15D4(v73, &v59);
            sub_100003DF0(v75, (uint64_t)"Couldn't upgrade lock entry ", 28);
            sub_1000DDF94(v75, &v82);
            sub_1000E16F8((uint64_t)v73);
            long long v54 = __cxa_allocate_exception(0x40uLL);
            *long long v54 = &off_1001B6CA0;
            long long v55 = std::generic_category();
            v54[1] = 4294967282;
            v54[2] = v55;
            *((unsigned char *)v54 + 24) = 0;
            *((unsigned char *)v54 + 48) = 0;
            v54[7] = "Couldn't upgrade lock entry";
          }
          unint64_t v27 = atomic_load((unint64_t *)(v82[7] + 16 * v83 + 8));
          if (v24 == 2 || (v27 & 0xC000000000000000) != 0x8000000000000000)
          {
            uint64_t v28 = (atomic_ullong *)(v82[7] + 16 * v83 + 8);
            unint64_t v29 = *v28;
            unint64_t v30 = *v28 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000;
            for (i = *v28; ; unint64_t v30 = i & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000)
            {
              atomic_compare_exchange_strong(v28, (unint64_t *)&i, v30);
              if (i == v29) {
                break;
              }
              unint64_t v29 = i;
            }
            unint64_t v38 = v29 >> 62;
            if (v97[0]) {
              BOOL v39 = 1;
            }
            else {
              BOOL v39 = v38 > 2;
            }
            char v40 = v39;
            v97[0] = v40;
            atomic_store(1u, (unsigned int *)(a1 + 96));
          }
          sub_10014156C(v61);
          int v13 = 2;
        }
        else
        {
          if (v24 == 3)
          {
            v73[0] = sub_1000E4074(a1, v22, v21);
            sub_1000DB988(a1, a2, &v82, (unsigned int *)v73, 1u, v24 | (unint64_t)&_mh_execute_header);
          }
          else
          {
            sub_100141408((uint64_t)v71, 0, (uint64_t)v61);
            if (!v62)
            {
              *(void *)&long long v59 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
              *((void *)&v59 + 1) = 30;
              int v60 = 16;
              sub_1000E173C(v73, &v59);
              sub_100003DF0(v75, (uint64_t)"Couldn't upgrade lock entry ", 28);
              sub_1000DDF94(v75, &v82);
              sub_1000E1860((uint64_t)v73);
              uint64_t v56 = __cxa_allocate_exception(0x40uLL);
              *uint64_t v56 = &off_1001B6CA0;
              uint64_t v57 = std::generic_category();
              v56[1] = 4294967282;
              v56[2] = v57;
              *((unsigned char *)v56 + 24) = 0;
              *((unsigned char *)v56 + 48) = 0;
              v56[7] = "Couldn't upgrade lock entry";
            }
            unint64_t v36 = atomic_load((unint64_t *)(v82[7] + 16 * v83 + 8));
            if (!((*(void *)(v82[7] + 16 * v83 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(v82[1] + 20))
              || (unint64_t v37 = v36 >> 62, v36 >> 62 == 1))
            {
              sub_10014156C(v61);
              goto LABEL_16;
            }
            v73[0] = sub_1000E4074(a1, v23, v14);
            sub_1000DB988(a1, a2, &v82, (unsigned int *)v73, 1u, v37 | (unint64_t)&_mh_execute_header);
            sub_10014156C(v61);
          }
          if (v19)
          {
            int v13 = 0;
          }
          else
          {
            int v13 = 0;
            atomic_store(1u, (unsigned int *)(a1 + 96));
          }
        }
      }
      v58 += v14;
      sub_1000E18A4((uint64_t *)&v63);
      goto LABEL_54;
    }
    *(void *)&long long v63 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v63 + 1) = 30;
    LODWORD(v64) = 16;
    sub_1000E0768(v73, &v63);
    sub_100003DF0(v75, (uint64_t)"Couldn't trim entry in write ", 29);
    sub_1001416B8(v75);
    std::ostream::~ostream();
    sub_1000F1090((uint64_t)v73);
    std::ios::~ios();
    int v13 = 1;
    unint64_t v14 = -34;
LABEL_55:
    if (v81) {
      sub_100010A48(v81);
    }
    if (v80) {
      sub_100010A48(v80);
    }
    if (v78) {
      sub_100010A48(v78);
    }
    if (v77) {
      sub_100010A48(v77);
    }
    if ((v13 | 2) != 2) {
      goto LABEL_77;
    }
  }
  if (v99)
  {
    int v46 = sub_1000DAC90(a1, a2, &v97[1]);
    unint64_t v14 = v58;
    if (v97[0]) {
      int v47 = 1;
    }
    else {
      int v47 = v46;
    }
    v97[0] = v47;
    if (v47 == 1)
    {
      uint64_t v48 = *(void *)(*(void *)&v97[1] + 8);
      uint64_t v49 = *(void *)(a1 + 8);
      uint64_t v50 = *(void *)(v49 + 48);
      sub_1000DDBC4((uint64_t *)a1, a2, v50+ (v50 + 1)* (((*(void *)(*(void *)&v97[1] + 352)+ (*(void *)(v48 + 48) + *(void *)(v48 + 48) * v98)/ (unint64_t)(*(void *)(v48 + 48) + 1)* *(unsigned int *)(v48 + 20))/ *(unsigned __int16 *)(v48 + 18)- *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v49 + 18))/ (v50* (unint64_t)(*(_DWORD *)(v49 + 20) / *(unsigned __int16 *)(v49 + 18)))));
    }
  }
  else
  {
    unint64_t v14 = v58;
  }
LABEL_77:
  if (v93) {
    sub_100010A48(v93);
  }
  if (v85) {
    sub_100010A48(v85);
  }
  return v14;
}

void sub_1000E0680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void *sub_1000E0768(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000FFF3C((uint64_t)a1, a2);
  *a1 = off_1001ACF10;
  a1[45] = &off_1001AD010;
  a1[46] = &off_1001AD038;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ACF10;
  a1[45] = off_1001ACF98;
  a1[46] = off_1001ACFC0;
  return a1;
}

void sub_1000E0868(_Unwind_Exception *a1)
{
  sub_1000F1090(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E088C(uint64_t a1)
{
  return a1;
}

void *sub_1000E08D0(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000FFFCC((uint64_t)a1, a2);
  *a1 = off_1001AD130;
  a1[45] = &off_1001AD230;
  a1[46] = &off_1001AD258;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD130;
  a1[45] = off_1001AD1B8;
  a1[46] = off_1001AD1E0;
  return a1;
}

void sub_1000E09D0(_Unwind_Exception *a1)
{
  sub_1000F1804(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E09F4(uint64_t a1)
{
  return a1;
}

void *sub_1000E0A38(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10010005C((uint64_t)a1, a2);
  *a1 = off_1001AD350;
  a1[45] = &off_1001AD450;
  a1[46] = &off_1001AD478;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD350;
  a1[45] = off_1001AD3D8;
  a1[46] = off_1001AD400;
  return a1;
}

void sub_1000E0B38(_Unwind_Exception *a1)
{
  sub_1000F1F78(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E0B5C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E0BA0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(*a1 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 20);
  if (!((*(void *)(*(void *)(*a1 + 56) + 16 * v4 + 8) & 0x7FFFFFFFFFFFFFLL) * v6))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v56 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"ASIF: No data offset found (write)", 0xFFFFFFEA);
  }
  __p = (void *)(*(void *)(*a1 + 352)
               + (*(void *)(v5 + 48) + *(void *)(v5 + 48) * v4)
               / (unint64_t)(*(void *)(v5 + 48) + 1)
               * v6);
  *(void *)&long long v136 = (char *)__p + v6;
  BYTE8(v136) = 2;
  sub_1000302E0(a3, (uint64_t)&__p, a4, (uint64_t)v70);
  if (sub_10002F3D8((uint64_t)v70, (uint64_t)&v73))
  {
    uint64_t v10 = -34;
  }
  else
  {
    __p = v137;
    long long v136 = xmmword_100164620;
    long long v11 = *(_OWORD *)(a3 + 72);
    long long v125 = *(_OWORD *)(a3 + 56);
    long long v126 = v11;
    long long v127 = *(_OWORD *)(a3 + 88);
    char v128 = *(unsigned char *)(a3 + 104);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 120);
    uint64_t v129 = *(void *)(a3 + 112);
    v130 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v131 = *(_OWORD *)(a3 + 128);
    uint64_t v13 = *(void *)(a4 + 72);
    uint64_t v14 = *(void *)(a4 + 56);
    uint64_t v15 = *(void *)(a4 + 64);
    BOOL v16 = *(std::__shared_weak_count **)(a4 + 120);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v57 = a3 + 72;
    while (1)
    {
      BOOL v19 = (void)v125 == v14 && *((void *)&v125 + 1) == v15;
      if (v19 && (void)v126 == v13) {
        break;
      }
      ++v18;
      v17 += 40;
      sub_10002EFC0((uint64_t)&v125);
    }
    if (v16) {
      sub_100010A48(v16);
    }
    if (v130) {
      sub_100010A48(v130);
    }
    if (*((void *)&v136 + 1) < v18)
    {
      if (v18 >= 0x333333333333334) {
        sub_100014AAC("get_next_capacity, allocator's max size reached");
      }
      unint64_t v21 = operator new(v17);
      sub_100053D1C((uint64_t *)&__p, (unint64_t)v21, v18, (uint64_t)__p + 40 * v136, 0, 0);
    }
    uint64_t v22 = *(void *)a3;
    unint64_t v23 = *(std::__shared_weak_count **)(a3 + 8);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)long long v63 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v63[9] = *(_OWORD *)(a3 + 25);
    long long v64 = *(_OWORD *)v57;
    uint64_t v24 = *(void *)(a3 + 48);
    uint64_t v25 = *(void *)(a3 + 56);
    uint64_t v26 = *(void *)(a3 + 64);
    long long v65 = *(_OWORD *)(a3 + 88);
    char v66 = *(unsigned char *)(a3 + 104);
    uint64_t v27 = *(void *)(a3 + 112);
    uint64_t v28 = *(std::__shared_weak_count **)(a3 + 120);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v67 = *(_OWORD *)(a3 + 128);
    unint64_t v68 = *(void *)(a3 + 144);
    char v69 = *(unsigned char *)(a3 + 152);
    uint64_t v29 = *(void *)a4;
    unint64_t v30 = *(std::__shared_weak_count **)(a4 + 8);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)long long v59 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v59[9] = *(_OWORD *)(a4 + 25);
    long long v60 = *(_OWORD *)(a4 + 72);
    uint64_t v32 = *(void *)(a4 + 48);
    uint64_t v31 = *(void *)(a4 + 56);
    uint64_t v33 = *(void *)(a4 + 64);
    long long v61 = *(_OWORD *)(a4 + 88);
    char v62 = *(unsigned char *)(a4 + 104);
    uint64_t v35 = *(void *)(a4 + 112);
    atomic_ullong v34 = *(std::__shared_weak_count **)(a4 + 120);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v36 = 0;
    v92[0] = *(_OWORD *)v63;
    *(_OWORD *)((char *)v92 + 9) = *(_OWORD *)&v63[9];
    long long v95 = v64;
    long long v96 = v65;
    long long v100 = v67;
    v78[0] = *(_OWORD *)v59;
    *(_OWORD *)((char *)v78 + 9) = *(_OWORD *)&v59[9];
    long long v83 = v61;
    uint64_t v90 = v22;
    char v91 = v23;
    uint64_t v93 = v24;
    *(void *)&long long v94 = v25;
    *((void *)&v94 + 1) = v26;
    char v97 = v66;
    uint64_t v98 = v27;
    char v99 = v28;
    unint64_t v101 = v68;
    char v102 = v69;
    uint64_t v76 = v29;
    long long v77 = v30;
    uint64_t v79 = v32;
    uint64_t v80 = v31;
    uint64_t v81 = v33;
    char v84 = v62;
    long long v82 = v60;
    uint64_t v85 = v35;
    uint64_t v86 = v34;
    long long v87 = *(_OWORD *)(a4 + 128);
    char v89 = *(unsigned char *)(a4 + 152);
    unint64_t v88 = *(void *)(a4 + 144);
    unint64_t v37 = v88;
    LOBYTE(v125) = 0;
    char v132 = 0;
    while (!sub_10002F3D8((uint64_t)&v90, (uint64_t)&v76))
    {
      if (v101 >= v37 || (_OWORD *)((char *)v36 + 1) == 0) {
        break;
      }
      if (sub_1000D29B8())
      {
        *(void *)&long long v121 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1765:32)]";
        *((void *)&v121 + 1) = 104;
        LODWORD(v122) = 2;
        sub_10003A8D8(&v115, &v121);
        sub_100003DF0(v120, (uint64_t)"sg: ", 4);
        sub_1001416B8(v120);
        std::ostream::~ostream();
        sub_10003ABC8((uint64_t)&v115);
        std::ios::~ios();
      }
      *(void *)&long long v115 = 0;
      *((void *)&v115 + 1) = v37;
      LOBYTE(v116) = 2;
      sub_100081638(&v90, (uint64_t)&v115, (uint64_t)&v121);
      int64_t v39 = v122;
      uint64_t v40 = *(void *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8);
      unint64_t v41 = *(unsigned int *)(*(void *)(*a1 + 8) + 20);
      unint64_t v42 = v123;
      uint64_t v43 = v124;
      long long v115 = v121;
      if (*((void *)&v121 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v121 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      int64_t v116 = v39;
      uint64_t v117 = v42 % v41 + (v40 & 0x7FFFFFFFFFFFFFLL) * v41;
      uint64_t v118 = v43;
      char v119 = 0;
      (*(void (**)(void *__return_ptr))(**(void **)(a2 + 16) + 136))(v133);
      if ((void)v136 == *((void *)&v136 + 1))
      {
        sub_10005581C((uint64_t *)&__p, (uint64_t)__p + 40 * v136, 1, (uint64_t)v133, &v134);
      }
      else
      {
        sub_100042C50((unint64_t)__p + 40 * v136, (uint64_t)v133);
        *(void *)&long long v136 = v136 + 1;
      }
      unint64_t v44 = v123;
      int64_t v45 = v122;
      if (*((void *)&v115 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v115 + 1));
      }
      BOOL v46 = v45 >= 0 || v45 == 0;
      char v47 = v46;
      if (v46)
      {
        if (sub_100030B70((uint64_t)&v90, (uint64_t)&v76, v44, v45))
        {
          v103[0] = v90;
          v103[1] = v91;
          if (v91) {
            atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v104[0] = v92[0];
          *(_OWORD *)((char *)v104 + 9) = *(_OWORD *)((char *)v92 + 9);
          uint64_t v105 = v93;
          long long v106 = v94;
          long long v107 = v95;
          long long v108 = v96;
          char v109 = v97;
          uint64_t v110 = v98;
          v111 = v99;
          if (v99) {
            atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v112 = v100;
          unint64_t v113 = v101;
          char v114 = v102;
          sub_100030B34((uint64_t)v103, (uint64_t)&v76, v44, v45, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v115);
          sub_10003AA40((uint64_t)&v125, (uint64_t)&v115);
          sub_100030B8C(&v115);
          sub_100011F6C((uint64_t)v103);
          sub_10002F8C8((uint64_t)&v125, (uint64_t)&v115);
          sub_10003AA88((uint64_t)&v90, &v115);
          sub_100011F6C((uint64_t)&v115);
          sub_10002F51C((uint64_t)&v125, (uint64_t)&v115);
          sub_10003AA88((uint64_t)&v76, &v115);
          sub_100011F6C((uint64_t)&v115);
        }
        sub_100030064((uint64_t)&v90, v45);
        unint64_t v36 = (_OWORD *)((char *)v36 + v45);
      }
      else
      {
        if ((int)v45 >= 0) {
          uint64_t v48 = v45;
        }
        else {
          uint64_t v48 = -(int)v45;
        }
        uint64_t v57 = -v48;
      }
      if (*((void *)&v121 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v121 + 1));
      }
      if ((v47 & 1) == 0) {
        goto LABEL_71;
      }
    }
    uint64_t v57 = (uint64_t)v36;
LABEL_71:
    sub_100030F34((uint64_t)&v125);
    if (v86) {
      sub_100010A48(v86);
    }
    uint64_t v10 = v57;
    if (v77) {
      sub_100010A48(v77);
    }
    if (v99) {
      sub_100010A48(v99);
    }
    if (v91) {
      sub_100010A48(v91);
    }
    if ((v57 & 0x8000000000000000) == 0 || !v57)
    {
      (*(void (**)(void))(**(void **)(a2 + 16) + 144))(*(void *)(a2 + 16));
      if ((void)v136)
      {
        int v49 = 0;
        uint64_t v50 = (unsigned int *)__p;
        uint64_t v51 = 40 * v136;
        do
        {
          int v52 = sub_10003D040(v50);
          if (v52 < 0) {
            break;
          }
          v49 += v52;
          v50 += 10;
          int v52 = v49;
          v51 -= 40;
        }
        while (v51);
      }
      else
      {
        int v52 = 0;
      }
      if (v57 != v52)
      {
        if (v52 < 0) {
          int v53 = v52;
        }
        else {
          int v53 = -5;
        }
        uint64_t v10 = -(uint64_t)-v53;
      }
    }
    if (*((void *)&v136 + 1) && v137 != __p) {
      operator delete(__p);
    }
  }
  if (v75) {
    sub_100010A48(v75);
  }
  if (v74) {
    sub_100010A48(v74);
  }
  if (v72) {
    sub_100010A48(v72);
  }
  if (v71) {
    sub_100010A48(v71);
  }
  return v10;
}

void sub_1000E14D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (STACK[0x6D8]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x6D8]);
  }
  sub_100030F34((uint64_t)&STACK[0x700]);
  sub_100011F6C((uint64_t)&STACK[0x2E0]);
  sub_100011F6C((uint64_t)&STACK[0x380]);
  sub_100011F6C((uint64_t)&a21);
  sub_100011F6C((uint64_t)&a41);
  if (STACK[0x960])
  {
    if (a17 != STACK[0x950]) {
      operator delete((void *)STACK[0x950]);
    }
  }
  sub_100064EA4(&a61);
  _Unwind_Resume(a1);
}

void sub_1000E15B4()
{
  if (v0) {
    sub_100010A48(v0);
  }
  if (STACK[0x740]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x740]);
  }
  JUMPOUT(0x1000E1588);
}

void *sub_1000E15D4(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1001000EC((uint64_t)a1, a2);
  *a1 = off_1001AD570;
  a1[45] = &off_1001AD670;
  a1[46] = &off_1001AD698;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD570;
  a1[45] = off_1001AD5F8;
  a1[46] = off_1001AD620;
  return a1;
}

void sub_1000E16D4(_Unwind_Exception *a1)
{
  sub_1000F26EC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E16F8(uint64_t a1)
{
  return a1;
}

void *sub_1000E173C(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10010017C((uint64_t)a1, a2);
  *a1 = off_1001AD790;
  a1[45] = &off_1001AD890;
  a1[46] = &off_1001AD8B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD790;
  a1[45] = off_1001AD818;
  a1[46] = off_1001AD840;
  return a1;
}

void sub_1000E183C(_Unwind_Exception *a1)
{
  sub_1000F2E60(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E1860(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1000E18A4(uint64_t *a1)
{
  long long v3 = (uint64_t *)a1[5];
  unint64_t v2 = a1[6];
  if ((v2 & 0x8000000000000000) == 0 || !a1[6])
  {
    sub_10002FF28(*a1, v2);
    uint64_t v4 = a1[2];
    if (*(unsigned char *)(v4 + 16))
    {
      uint64_t v5 = (void *)a1[3];
      if (*(void *)(*v5 + 352) != *(void *)(*(void *)v4 + 352) || v5[1] != *(void *)(v4 + 8))
      {
        char v6 = sub_1000DAC90((uint64_t)v3, a1[8], (void *)v4);
        unint64_t v7 = (unsigned char *)a1[4];
        BOOL v8 = (v6 & 1) != 0 || *v7 != 0;
        *unint64_t v7 = v8;
        uint64_t v4 = a1[2];
        if (v8)
        {
          uint64_t v9 = *(void *)(*(void *)v4 + 8);
          uint64_t v10 = v3[1];
          uint64_t v11 = *(void *)(v10 + 48);
          unsigned int v12 = *(_DWORD *)(v10 + 20);
          unint64_t v13 = *(unsigned __int16 *)(v10 + 18);
          unint64_t v14 = v11 * (v12 / v13);
          unint64_t v15 = v3[44] / v13;
          ++v11;
          uint64_t v16 = v11
              + v11
              * (((*(void *)(*(void *)v4 + 352)
                 + (*(void *)(v9 + 48) + *(void *)(v9 + 48) * *(void *)(v4 + 8))
                 / (unint64_t)(*(void *)(v9 + 48) + 1)
                 * *(unsigned int *)(v9 + 20))
                / *(unsigned __int16 *)(v9 + 18)
                - v15)
               / v14);
          size_t v17 = (void *)a1[3];
          uint64_t v18 = *(void *)(*v17 + 8);
          if (v16 != v11
                    + v11
                    * (((*(void *)(*v17 + 352)
                       + (*(void *)(v18 + 48) + *(void *)(v18 + 48) * v17[1])
                       / (unint64_t)(*(void *)(v18 + 48) + 1)
                       * *(unsigned int *)(v18 + 20))
                      / *(unsigned __int16 *)(v18 + 18)
                      - v15)
                     / v14))
          {
            sub_1000DDBC4(v3, a1[8], v16 - 1);
            *(unsigned char *)a1[4] = 0;
            uint64_t v4 = a1[2];
          }
        }
      }
    }
    uint64_t v19 = a1[3];
    if (*(unsigned char *)(v4 + 16))
    {
      *(void *)(v4 + 8) = *(void *)(v19 + 8);
    }
    else
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v19;
      *(unsigned char *)(v4 + 16) = 1;
    }
  }
  return a1;
}

uint64_t sub_1000E1A34(uint64_t a1)
{
  uint64_t v2 = __chkstk_darwin(a1);
  uint64_t v6 = v5;
  uint64_t v7 = v3;
  BOOL v8 = (uint64_t *)v2;
  uint64_t v55 = v4[3];
  uint64_t v9 = *v4;
  uint64_t v10 = (std::__shared_weak_count *)v4[1];
  uint64_t v102 = *v4;
  v103 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)v104 = *((_OWORD *)v4 + 1);
  *(_OWORD *)&v104[9] = *(_OWORD *)((char *)v4 + 25);
  uint64_t v105 = v4[6];
  long long v106 = *(_OWORD *)(v4 + 7);
  long long v107 = *(_OWORD *)(v4 + 9);
  long long v108 = *(_OWORD *)(v4 + 11);
  char v109 = *((unsigned char *)v4 + 104);
  uint64_t v11 = (std::__shared_weak_count *)v4[15];
  uint64_t v110 = v4[14];
  v111 = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = v103;
  }
  long long v112 = *((_OWORD *)v4 + 8);
  uint64_t v113 = v4[18];
  char v114 = *((unsigned char *)v4 + 152);
  *(void *)&long long v115 = -78;
  LOBYTE(v155[0]) = 0;
  char v159 = 0;
  uint64_t v160 = v9;
  v161 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)((char *)v162 + 9) = *(_OWORD *)&v104[9];
  v162[0] = *(_OWORD *)v104;
  long long v164 = v106;
  long long v165 = v107;
  uint64_t v163 = v105;
  char v167 = v109;
  long long v166 = v108;
  uint64_t v168 = v110;
  v169 = v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v170 = v112;
  char v172 = v114;
  uint64_t v171 = v113;
  v173[0] = v9;
  v173[1] = v103;
  if (v103) {
    atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)((char *)v174 + 9) = *(_OWORD *)&v104[9];
  v174[0] = *(_OWORD *)v104;
  long long v176 = v106;
  long long v177 = v107;
  uint64_t v175 = v105;
  long long v178 = v108;
  char v179 = v109;
  uint64_t v180 = v110;
  v181 = v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v58 = 0;
  char v184 = v114;
  long long v182 = v112;
  uint64_t v183 = v113;
  uint64_t v185 = v3;
  v186[0] = (uint64_t)&v187;
  v186[1] = 0;
  v186[2] = 16;
  LOBYTE(v188) = 0;
  char v189 = 0;
  v190 = &v193;
  uint64_t v191 = 0;
  uint64_t v192 = 16;
  uint64_t v194 = 0;
  v101[0] = (uint64_t)v155;
  v101[1] = (uint64_t)&v115;
  v101[2] = v3;
  uint64_t v57 = v3;
  uint64_t v56 = (uint64_t *)v2;
  while (!sub_10002F3D8((uint64_t)&v102, v6))
  {
    *(void *)&long long v100 = sub_1000DA598((uint64_t)v8, *(unint64_t *)&v104[8]);
    *((void *)&v100 + 1) = v12;
    uint64_t v13 = *(void *)(v100 + 8);
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = *(unsigned int *)(v13 + 20);
    *(void *)&long long v195 = *(void *)(v100 + 352) + (v14 + v14 * v12) / (unint64_t)(v14 + 1) * v15;
    *((void *)&v195 + 1) = v195 + v15;
    v196[0] = 2;
    sub_1000302E0((uint64_t)&v102, (uint64_t)&v195, v6, (uint64_t)&v75);
    if (sub_10002F3D8((uint64_t)&v75, (uint64_t)&v87))
    {
      *(void *)&long long v223 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((void *)&v223 + 1) = 29;
      LODWORD(v224) = 16;
      sub_1000E2E70(&v195, &v223);
      sub_100003DF0(v220, (uint64_t)"Couldn't trim entry in read ", 28);
      sub_1001416B8(v220);
      std::ostream::~ostream();
      sub_1000F35D4((uint64_t)&v195);
      std::ios::~ios();
      *(void *)&long long v115 = -34;
      uint64_t v1 = 3;
    }
    else
    {
      if (v189 && !sub_1000E4184(&v100, &v188) && (uint64_t v44 = sub_1000F3AB8((uint64_t)v155), v44 < 0) && v44)
      {
        *(void *)&long long v70 = v44;
        *((void *)&v70 + 1) = v45;
        long long v71 = v155;
        int v72 = 0;
        v73[0] = 0;
        char v74 = 0;
      }
      else
      {
        long long v188 = v100;
        char v189 = 1;
        uint64_t v1 = *(void *)(v100 + 56) + 16 * *((void *)&v100 + 1);
        BOOL v16 = sub_1000F6308((unint64_t *)v1);
        *(void *)&long long v223 = off_1001B66A0;
        *((void *)&v223 + 1) = v1;
        LOBYTE(v224) = v16;
        if (v16)
        {
          uint64_t v17 = 0;
        }
        else
        {
          *(void *)&long long v141 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)::data_entries_vectorizer_t::add_data_entry(const data_entry_t &)";
          *((void *)&v141 + 1) = 139;
          LODWORD(v142[0]) = 16;
          sub_1000F3BCC(&v195, &v141);
          sub_100003DF0(v220, (uint64_t)"Couldn't lock entry ", 20);
          sub_1000DDF94(v220, &v100);
          std::ostream::~ostream();
          sub_1000F3EB8((uint64_t)&v195);
          std::ios::~ios();
          uint64_t v17 = -5;
        }
        unint64_t v18 = atomic_load((unint64_t *)(*(void *)(v188 + 56) + 16 * *((void *)&v188 + 1) + 8));
        *(void *)&long long v70 = v17;
        long long v71 = v155;
        int v72 = v18 >> 62;
        sub_100141338((uint64_t)v73, (uint64_t)&v223);
        char v74 = 1;
        sub_1001413CC(&v223);
      }
      long long v115 = v70;
      unint64_t v19 = v70;
      if ((v70 & 0x8000000000000000) != 0 && v115)
      {
LABEL_129:
        uint64_t v1 = 3;
      }
      else
      {
        switch(v72)
        {
          case 0:
          case 2:
            long long v20 = v75;
            if (*((void *)&v75 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v75 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)long long v63 = v76[0];
            *(_OWORD *)&v63[9] = *(_OWORD *)((char *)v76 + 9);
            uint64_t v21 = v77;
            uint64_t v22 = v78;
            long long v64 = v79;
            long long v65 = v80;
            char v66 = v81;
            uint64_t v23 = *((void *)&v78 + 1);
            uint64_t v24 = v82;
            uint64_t v25 = v83;
            if (v83) {
              atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v67 = v84;
            unint64_t v68 = v85;
            char v69 = v86;
            uint64_t v26 = v87;
            uint64_t v27 = v88;
            if (v88) {
              atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)long long v59 = v89[0];
            *(_OWORD *)&v59[9] = *(_OWORD *)((char *)v89 + 9);
            uint64_t v28 = v90;
            long long v29 = v91;
            uint64_t v30 = v95;
            long long v60 = v92;
            long long v61 = v93;
            char v62 = v94;
            uint64_t v31 = v96;
            if (v96) {
              atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v32 = 0;
            int v33 = 0;
            unint64_t v34 = 0;
            long long v129 = v20;
            v130[0] = *(_OWORD *)v63;
            *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v63[9];
            uint64_t v131 = v21;
            *(void *)&long long v132 = v22;
            long long v133 = v64;
            long long v134 = v65;
            char v135 = v66;
            *((void *)&v132 + 1) = v23;
            uint64_t v136 = v24;
            v137 = v25;
            long long v138 = v67;
            unint64_t v139 = v68;
            char v140 = v69;
            uint64_t v116 = v26;
            uint64_t v117 = v27;
            v118[0] = *(_OWORD *)v59;
            *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)&v59[9];
            uint64_t v119 = v28;
            long long v120 = v29;
            char v123 = v62;
            long long v121 = v60;
            long long v122 = v61;
            uint64_t v124 = v30;
            long long v125 = v31;
            long long v126 = v97;
            char v128 = v99;
            unint64_t v127 = v98;
            unint64_t v35 = v98;
            LOBYTE(v195) = 0;
            char v221 = 0;
            while (1)
            {
              unint64_t v36 = v227;
              if (sub_10002F3D8((uint64_t)&v129, (uint64_t)&v116)) {
                break;
              }
              if (v139 >= v35 || v34 == -1) {
                break;
              }
              if (sub_1000D29B8())
              {
                *(void *)&long long v153 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1462:30)]";
                *((void *)&v153 + 1) = 104;
                int v154 = 2;
                sub_10003A8D8(&v223, &v153);
                sub_100003DF0(v227, (uint64_t)"sg: ", 4);
                sub_1001416B8(v227);
                std::ostream::~ostream();
                sub_10003ABC8((uint64_t)&v223);
                std::ios::~ios();
              }
              *(void *)&long long v223 = 0;
              *((void *)&v223 + 1) = v35;
              LOBYTE(v224) = 2;
              sub_100081638(&v129, (uint64_t)&v223, (uint64_t)&v153);
              int64_t v38 = sub_1000E4254(&v100, &v153);
              unint64_t v40 = v38;
              BOOL v41 = v38 >= 0 || v38 == 0;
              char v42 = v41;
              if (v41)
              {
                unint64_t v36 = (void *)v39;
                if (!v33) {
                  uint64_t v32 = (void *)v39;
                }
                if (sub_100030B70((uint64_t)&v129, (uint64_t)&v116, v39, v38))
                {
                  long long v141 = v129;
                  if (*((void *)&v129 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v129 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  v142[0] = v130[0];
                  *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)((char *)v130 + 9);
                  long long v144 = v132;
                  long long v145 = v133;
                  long long v146 = v134;
                  char v147 = v135;
                  uint64_t v143 = v131;
                  uint64_t v148 = v136;
                  v149 = v137;
                  if (v137) {
                    atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  long long v150 = v138;
                  unint64_t v151 = v139;
                  char v152 = v140;
                  sub_100030B34((uint64_t)&v141, (uint64_t)&v116, (uint64_t)v36, v40, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v223);
                  sub_10003AA40((uint64_t)&v195, (uint64_t)&v223);
                  sub_100030B8C(&v223);
                  sub_100011F6C((uint64_t)&v141);
                  sub_10002F8C8((uint64_t)&v195, (uint64_t)&v223);
                  sub_10003AA88((uint64_t)&v129, &v223);
                  sub_100011F6C((uint64_t)&v223);
                  sub_10002F51C((uint64_t)&v195, (uint64_t)&v223);
                  sub_10003AA88((uint64_t)&v116, &v223);
                  sub_100011F6C((uint64_t)&v223);
                }
                sub_100030064((uint64_t)&v129, v40);
                v34 += v40;
                int v33 = 1;
              }
              else
              {
                if ((int)v38 >= 0) {
                  uint64_t v43 = v38;
                }
                else {
                  uint64_t v43 = -(int)v38;
                }
                unint64_t v19 = -v43;
              }
              if (*((void *)&v153 + 1)) {
                sub_100010A48(*((std::__shared_weak_count **)&v153 + 1));
              }
              if ((v42 & 1) == 0) {
                goto LABEL_74;
              }
            }
            if (v33) {
              unint64_t v36 = v32;
            }
            else {
              unint64_t v36 = 0;
            }
            unint64_t v19 = v34;
LABEL_74:
            sub_100030F34((uint64_t)&v195);
            uint64_t v7 = v57;
            if (v125) {
              sub_100010A48(v125);
            }
            BOOL v8 = v56;
            if (v117) {
              sub_100010A48(v117);
            }
            if (v137) {
              sub_100010A48(v137);
            }
            if (*((void *)&v129 + 1)) {
              sub_100010A48(*((std::__shared_weak_count **)&v129 + 1));
            }
            *(void *)&long long v115 = v19;
            *((void *)&v115 + 1) = v36;
            goto LABEL_127;
          case 1:
            goto LABEL_124;
          case 3:
            uint64_t v46 = *(void *)(v100 + 8);
            unint64_t v47 = (*(void *)(v100 + 352)
                 + (*(void *)(v46 + 48) + *(void *)(v46 + 48) * *((void *)&v100 + 1))
                 / (unint64_t)(*(void *)(v46 + 48) + 1)
                 * *(unsigned int *)(v46 + 20))
                / *(unsigned __int16 *)(v46 + 18);
            if (!v159)
            {
              unint64_t v19 = 0;
LABEL_87:
              *(void *)&long long v223 = 0;
              *((void *)&v223 + 1) = v8;
              v224 = &v226;
              long long v225 = xmmword_100164620;
              sub_1000DB028(v8, v185, v47, 0, (unint64_t *)&v141);
              sub_1000DB5D8((atomic_ullong *)&v223, (atomic_ullong *)&v141);
              sub_1000D9F50((atomic_ullong *)&v141);
              if ((void)v223 && !*(unsigned char *)(v223 + 344))
              {
                sub_1000F4D98((unint64_t *)&v195, (unint64_t *)&v223);
                *((void *)&v195 + 1) = *((void *)&v223 + 1);
                *(void *)v196 = &v196[24];
                *(_OWORD *)&v196[8] = xmmword_100164620;
                *(void *)&long long v141 = v224;
                *(void *)&long long v129 = &v224[40 * v225];
                sub_1000F507C((uint64_t *)v196, (uint64_t *)&v141, (uint64_t *)&v129);
                uint64_t v48 = v1;
                char v50 = 1;
              }
              else
              {
                uint64_t v48 = v1;
                int v49 = std::generic_category();
                char v50 = 0;
                *(void *)&long long v195 = 5;
                *((void *)&v195 + 1) = v49;
              }
              uint64_t v1 = (uint64_t)&v222;
              char v222 = v50;
              sub_1000F4684((atomic_ullong *)&v223);
              if (!v222)
              {
                if ((int)v195 >= 0) {
                  uint64_t v53 = v195;
                }
                else {
                  uint64_t v53 = -(int)v195;
                }
                unint64_t v19 = -v53;
                uint64_t v7 = v57;
                goto LABEL_122;
              }
              uint64_t v1 = v48;
              if (v159)
              {
                sub_1000F4684((atomic_ullong *)v155);
                char v159 = 0;
              }
              sub_1000F4D98(v155, (unint64_t *)&v195);
              v155[1] = *((void *)&v195 + 1);
              v156 = &v158;
              long long v157 = xmmword_100164620;
              *(void *)&long long v223 = *(void *)v196;
              *(void *)&long long v141 = *(void *)v196 + 320 * *(void *)&v196[8];
              sub_1000F507C((uint64_t *)&v156, (uint64_t *)&v223, (uint64_t *)&v141);
              uint64_t v7 = v57;
              char v159 = 1;
              if (v222) {
                sub_1000F4684((atomic_ullong *)&v195);
              }
              goto LABEL_100;
            }
            if (*(void *)(v155[0] + 40) == (v47 - v8[44] / (unint64_t)*(unsigned __int16 *)(v8[1] + 18))
                                            / (*(void *)(v8[1] + 48)
                                             * (unint64_t)(*(_DWORD *)(v8[1] + 20)
                                                                / *(unsigned __int16 *)(v8[1] + 18))))
            {
              unint64_t v19 = 0;
              goto LABEL_100;
            }
            uint64_t v51 = sub_1000F462C((uint64_t)v155);
            unint64_t v19 = v51;
            uint64_t v1 = v52;
            if (v51 < 0 && v51) {
              goto LABEL_122;
            }
            if (!v159) {
              goto LABEL_87;
            }
LABEL_100:
            long long v195 = v75;
            if (*((void *)&v75 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v75 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)v196 = v76[0];
            *(_OWORD *)&v196[9] = *(_OWORD *)((char *)v76 + 9);
            long long v198 = v78;
            long long v199 = v79;
            long long v200 = v80;
            char v201 = v81;
            uint64_t v197 = v77;
            uint64_t v202 = v82;
            v203 = v83;
            if (v83) {
              atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v204 = v84;
            unint64_t v205 = v85;
            char v206 = v86;
            uint64_t v207 = v87;
            v208 = v88;
            if (v88) {
              atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v209[0] = v89[0];
            *(_OWORD *)((char *)v209 + 9) = *(_OWORD *)((char *)v89 + 9);
            long long v211 = v91;
            long long v212 = v92;
            long long v213 = v93;
            char v214 = v94;
            uint64_t v210 = v90;
            uint64_t v215 = v95;
            v216 = v96;
            if (v96) {
              atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v217 = v97;
            unint64_t v218 = v98;
            char v219 = v99;
            if ((void)v157 == *((void *)&v157 + 1))
            {
              sub_1000F53B8((uint64_t *)&v156, (uint64_t)&v156[40 * v157], 1, (uint64_t)&v195, &v223);
            }
            else
            {
              sub_1000F5468((uint64_t)&v156[40 * v157], (uint64_t)&v195);
              *(void *)&long long v157 = v157 + 1;
            }
            if (v216) {
              sub_100010A48(v216);
            }
            if (v208) {
              sub_100010A48(v208);
            }
            if (v203) {
              sub_100010A48(v203);
            }
            if (*((void *)&v195 + 1)) {
              sub_100010A48(*((std::__shared_weak_count **)&v195 + 1));
            }
LABEL_122:
            *(void *)&long long v115 = v19;
            *((void *)&v115 + 1) = v1;
            if ((v19 & 0x8000000000000000) == 0 || !v19)
            {
LABEL_124:
              sub_1000E2FD8(&v100, v7, (uint64_t)&v75, (uint64_t)&v87, v186, (unint64_t *)&v195);
              long long v115 = v195;
              unint64_t v19 = v195;
              if ((v195 & 0x8000000000000000) == 0 || !v115) {
                v194 += *(void *)v196;
              }
            }
LABEL_127:
            if ((v19 & 0x8000000000000000) != 0 && v19) {
              goto LABEL_129;
            }
            sub_10002FF28((uint64_t)&v102, v19);
            v58 += v19;
            sub_1000F3D34((uint64_t)v173, (uint64_t)&v102);
            uint64_t v1 = 0;
            break;
          default:
            goto LABEL_127;
        }
      }
      sub_1000E3A70((uint64_t)&v70);
    }
    if (v96) {
      sub_100010A48(v96);
    }
    if (v88) {
      sub_100010A48(v88);
    }
    if (v83) {
      sub_100010A48(v83);
    }
    if (*((void *)&v75 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v75 + 1));
    }
    if (v1) {
      break;
    }
  }
  if ((v115 & 0x8000000000000000) == 0 || !v115)
  {
    *(void *)&long long v115 = v58;
    *((void *)&v115 + 1) = v55;
  }
  sub_1000E3B34(v101);
  sub_1000E3B88((uint64_t)v155);
  if (v111) {
    sub_100010A48(v111);
  }
  if (v103) {
    sub_100010A48(v103);
  }
  return v115;
}

void sub_1000E2C78(_Unwind_Exception *a1)
{
}

void *sub_1000E2E70(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010020C((uint64_t)a1, a2);
  *a1 = off_1001AD9B0;
  a1[45] = &off_1001ADAB0;
  a1[46] = &off_1001ADAD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD9B0;
  a1[45] = off_1001ADA38;
  a1[46] = off_1001ADA60;
  return a1;
}

void sub_1000E2F70(_Unwind_Exception *a1)
{
  sub_1000F35D4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E2F94(uint64_t a1)
{
  return a1;
}

void sub_1000E2FD8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned int *)(v9 + 20);
  *(void *)&long long v152 = *(void *)(*a1 + 352) + (v10 + v10 * a1[1]) / (unint64_t)(v10 + 1) * v11;
  *((void *)&v152 + 1) = v152 + v11;
  LOBYTE(v153[0]) = 2;
  sub_1000302E0(a3, (uint64_t)&v152, a4, (uint64_t)&v72);
  if (sub_10002F3D8((uint64_t)&v72, (uint64_t)&v86))
  {
    *a6 = -34;
    a6[2] = 0;
  }
  else
  {
    uint64_t v12 = v72;
    if ((*(void *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(void *)(*a1 + 8) + 20))
    {
      uint64_t v13 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v58 = v74[0];
      *(_OWORD *)&v58[9] = *(_OWORD *)((char *)v74 + 9);
      uint64_t v14 = v75;
      uint64_t v15 = v76;
      uint64_t v16 = v77;
      long long v59 = v78;
      long long v60 = v79;
      char v61 = v80;
      uint64_t v17 = v81;
      unint64_t v18 = v82;
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v51 = a6;
      long long v62 = v83;
      unint64_t v63 = v84;
      char v64 = v85;
      long long v19 = v86;
      if (*((void *)&v86 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)long long v54 = v87[0];
      *(_OWORD *)&v54[9] = *(_OWORD *)((char *)v87 + 9);
      uint64_t v20 = v88;
      long long v21 = v89;
      long long v55 = v90;
      long long v56 = v91;
      char v57 = v92;
      uint64_t v22 = v93;
      uint64_t v23 = v94;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v52 = 0;
      unint64_t v24 = 0;
      int v25 = 0;
      unint64_t v26 = 0;
      v112[0] = *(_OWORD *)v58;
      *(_OWORD *)((char *)v112 + 9) = *(_OWORD *)&v58[9];
      long long v115 = v59;
      long long v116 = v60;
      long long v120 = v62;
      v99[0] = *(_OWORD *)v54;
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v54[9];
      long long v103 = v56;
      long long v102 = v55;
      unint64_t v27 = v96;
      uint64_t v110 = v12;
      v111 = v13;
      uint64_t v113 = v14;
      *(void *)&long long v114 = v15;
      *((void *)&v114 + 1) = v16;
      char v117 = v61;
      uint64_t v118 = v17;
      uint64_t v119 = v18;
      unint64_t v121 = v63;
      char v122 = v64;
      long long v98 = v19;
      uint64_t v100 = v20;
      long long v101 = v21;
      char v104 = v57;
      uint64_t v105 = v22;
      long long v106 = v23;
      long long v107 = v95;
      char v109 = v97;
      unint64_t v108 = v96;
      LOBYTE(v152) = 0;
      char v165 = 0;
      while (!sub_10002F3D8((uint64_t)&v110, (uint64_t)&v98))
      {
        if (v121 >= v27 || v26 == -1) {
          break;
        }
        if (sub_1000D29B8())
        {
          *(void *)&long long v168 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1729:32)]";
          *((void *)&v168 + 1) = 104;
          LODWORD(v169) = 2;
          sub_10003A8D8(&v135, &v168);
          sub_100003DF0(v147, (uint64_t)"sg: ", 4);
          sub_1001416B8(v147);
          std::ostream::~ostream();
          sub_10003ABC8((uint64_t)&v135);
          std::ios::~ios();
        }
        *(void *)&long long v135 = 0;
        *((void *)&v135 + 1) = v27;
        v136[0] = 2;
        sub_100081638(&v110, (uint64_t)&v135, (uint64_t)&v148);
        int64_t v29 = v149;
        uint64_t v30 = *(void *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8);
        unint64_t v31 = *(unsigned int *)(*(void *)(*a1 + 8) + 20);
        unint64_t v32 = v150;
        uint64_t v33 = v151;
        long long v135 = v148;
        if (*((void *)&v148 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v148 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)uint64_t v136 = v29;
        *(void *)&v136[8] = v32 % v31 + (v30 & 0x7FFFFFFFFFFFFFLL) * v31;
        *(void *)&v136[16] = v33;
        v136[24] = 0;
        uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
        v166[0] = 0;
        v166[1] = v34;
        char v167 = 2;
        sub_100081638(&v135, (uint64_t)v166, (uint64_t)&v168);
        if (v169)
        {
          (*(void (**)(void *__return_ptr))(**(void **)(a2 + 16) + 128))(v166);
          uint64_t v35 = a5[1];
          if (v35 == a5[2])
          {
            sub_10005581C(a5, *a5 + 40 * v35, 1, (uint64_t)v166, &v170);
          }
          else
          {
            sub_100042C50(*a5 + 40 * v35, (uint64_t)v166);
            ++a5[1];
          }
          v52 += v169;
        }
        unint64_t v36 = v150;
        int64_t v37 = v149;
        if (*((void *)&v168 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v168 + 1));
        }
        if (*((void *)&v135 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v135 + 1));
        }
        BOOL v38 = v37 >= 0 || v37 == 0;
        char v39 = v38;
        if (v38)
        {
          if (!v25) {
            unint64_t v24 = v36;
          }
          if (sub_100030B70((uint64_t)&v110, (uint64_t)&v98, v36, v37))
          {
            v123[0] = v110;
            v123[1] = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v124[0] = v112[0];
            *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)((char *)v112 + 9);
            long long v126 = v114;
            long long v127 = v115;
            long long v128 = v116;
            char v129 = v117;
            uint64_t v125 = v113;
            uint64_t v130 = v118;
            uint64_t v131 = v119;
            if (v119) {
              atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v132 = v120;
            unint64_t v133 = v121;
            char v134 = v122;
            sub_100030B34((uint64_t)v123, (uint64_t)&v98, v36, v37, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v135);
            sub_10003AA40((uint64_t)&v152, (uint64_t)&v135);
            sub_100030B8C(&v135);
            sub_100011F6C((uint64_t)v123);
            sub_10002F8C8((uint64_t)&v152, (uint64_t)&v135);
            sub_10003AA88((uint64_t)&v110, &v135);
            sub_100011F6C((uint64_t)&v135);
            sub_10002F51C((uint64_t)&v152, (uint64_t)&v135);
            sub_10003AA88((uint64_t)&v98, &v135);
            sub_100011F6C((uint64_t)&v135);
          }
          sub_100030064((uint64_t)&v110, v37);
          v26 += v37;
          int v25 = 1;
        }
        else
        {
          if ((int)v37 >= 0) {
            uint64_t v40 = v37;
          }
          else {
            uint64_t v40 = -(int)v37;
          }
          unint64_t v50 = -v40;
        }
        if (*((void *)&v148 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v148 + 1));
        }
        if ((v39 & 1) == 0) {
          goto LABEL_60;
        }
      }
      if (v25) {
        int64_t v37 = v24;
      }
      else {
        int64_t v37 = 0;
      }
      unint64_t v50 = v26;
LABEL_60:
      sub_100030F34((uint64_t)&v152);
      if (v106) {
        sub_100010A48(v106);
      }
      if (*((void *)&v98 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v98 + 1));
      }
      if (v119) {
        sub_100010A48(v119);
      }
      if (v111) {
        sub_100010A48(v111);
      }
      *uint64_t v51 = v50;
      v51[1] = v37;
      if ((v50 & 0x8000000000000000) != 0 && v50) {
        v51[2] = 0;
      }
      else {
        v51[2] = v52;
      }
    }
    else
    {
      BOOL v41 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)long long v65 = v74[0];
      *(_OWORD *)&v65[9] = *(_OWORD *)((char *)v74 + 9);
      uint64_t v42 = v75;
      uint64_t v43 = v76;
      uint64_t v44 = v77;
      long long v66 = v78;
      long long v67 = v79;
      char v68 = v80;
      uint64_t v45 = v81;
      uint64_t v46 = v82;
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v69 = v83;
      unint64_t v70 = v84;
      char v71 = v85;
      *(void *)&long long v152 = v12;
      *((void *)&v152 + 1) = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v153[0] = *(_OWORD *)v65;
      *(_OWORD *)((char *)v153 + 9) = *(_OWORD *)&v65[9];
      long long v157 = v66;
      uint64_t v154 = v42;
      uint64_t v155 = v43;
      uint64_t v156 = v44;
      long long v158 = v67;
      char v159 = v68;
      uint64_t v160 = v45;
      v161 = v46;
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v162 = v69;
      unint64_t v163 = v70;
      char v164 = v71;
      long long v135 = v86;
      if (*((void *)&v86 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v136 = v87[0];
      *(_OWORD *)&v136[9] = *(_OWORD *)((char *)v87 + 9);
      uint64_t v137 = v88;
      long long v138 = v89;
      long long v139 = v90;
      long long v140 = v91;
      char v141 = v92;
      uint64_t v142 = v93;
      uint64_t v143 = v94;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v144 = v95;
      unint64_t v145 = v96;
      char v146 = v97;
      unint64_t v47 = sub_1000F646C((uint64_t (*)(long long *))sub_100081608, &v152, &v135, 0xFFFFFFFFFFFFFFFFLL);
      unint64_t v49 = v48;
      if (v143) {
        sub_100010A48(v143);
      }
      if (*((void *)&v135 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v135 + 1));
      }
      if (v161) {
        sub_100010A48(v161);
      }
      if (*((void *)&v152 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v152 + 1));
      }
      *a6 = v47;
      a6[1] = v49;
      a6[2] = 0;
      if (v46) {
        sub_100010A48(v46);
      }
      if (v41) {
        sub_100010A48(v41);
      }
    }
  }
  if (v94) {
    sub_100010A48(v94);
  }
  if (*((void *)&v86 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v86 + 1));
  }
  if (v82) {
    sub_100010A48(v82);
  }
  if (v73) {
    sub_100010A48(v73);
  }
}

void sub_1000E3990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (STACK[0x788]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x788]);
  }
  sub_100030F34((uint64_t)&STACK[0x7B0]);
  sub_100011F6C((uint64_t)&STACK[0x390]);
  sub_100011F6C((uint64_t)&STACK[0x430]);
  sub_100011F6C((uint64_t)&a23);
  sub_100011F6C((uint64_t)&a43);
  sub_100064EA4(&STACK[0x250]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E3A70(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v2 + 6184) && (*(_DWORD *)(a1 + 24) | 2) != 2)
    {
      uint64_t v3 = *(void *)(v2 + 6200);
      if (v3 == *(void *)(v2 + 6208))
      {
        sub_1000F57E8((uint64_t *)(v2 + 6192), *(void *)(v2 + 6192) + 24 * v3, 1, a1 + 32, &v5);
      }
      else
      {
        sub_100141338(*(void *)(v2 + 6192) + 24 * v3, a1 + 32);
        ++*(void *)(v2 + 6200);
      }
    }
    if (*(unsigned char *)(a1 + 56)) {
      sub_1001413CC(a1 + 32);
    }
  }
  return a1;
}

uint64_t *sub_1000E3B34(uint64_t *a1)
{
  uint64_t v2 = sub_1000F462C(*a1);
  if (v2 < 0)
  {
    if (v2)
    {
      uint64_t v4 = (uint64_t *)a1[1];
      if ((*v4 & 0x8000000000000000) == 0 || !*v4)
      {
        *uint64_t v4 = v2;
        v4[1] = v3;
      }
    }
  }
  return a1;
}

uint64_t sub_1000E3B88(uint64_t a1)
{
  sub_1000F5B04(a1 + 6192);
  if (*(void *)(a1 + 5520))
  {
    uint64_t v2 = *(void **)(a1 + 5504);
    if ((void *)(a1 + 5528) != v2) {
      operator delete(v2);
    }
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 5448);
  if (v3) {
    sub_100010A48(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 5336);
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 5288);
  if (v5) {
    sub_100010A48(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 5176);
  if (v6) {
    sub_100010A48(v6);
  }
  if (*(unsigned char *)(a1 + 5160)) {
    sub_1000F4684((atomic_ullong *)a1);
  }
  return a1;
}

uint64_t sub_1000E3C1C(uint64_t a1)
{
  if (!atomic_load((unsigned int *)(a1 + 96))) {
    return 0;
  }
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v10 = off_1001AB7C0;
  uint64_t v11 = v3;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 16) + 72))(&v12);
  if (*(unsigned char *)(v11 + 8))
  {
    char v5 = 0;
    uint64_t v2 = 4294967290;
  }
  else
  {
    LODWORD(v4) = (*(uint64_t (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    if (v4)
    {
      sub_1000B23BC((uint64_t)&v10);
      exception = __cxa_allocate_exception(0x40uLL);
      BOOL v8 = exception;
      if ((int)v4 < 0) {
        uint64_t v4 = v4;
      }
      else {
        uint64_t v4 = -(int)v4;
      }
      void *exception = &off_1001B6CA0;
      uint64_t v9 = std::generic_category();
      v8[1] = v4;
      v8[2] = v9;
      *((unsigned char *)v8 + 24) = 0;
      *((unsigned char *)v8 + 48) = 0;
      v8[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    sub_1000DECF8(v2, (uint64_t)&v10);
    char v5 = 1;
  }
  uint64_t v10 = off_1001AB7C0;
  if (v13) {
    sub_100010A48(v13);
  }
  if (v5) {
    return 0;
  }
  return v2;
}

void *sub_1000E3E4C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010029C((uint64_t)a1, a2);
  *a1 = off_1001ADDF0;
  a1[45] = &off_1001ADEF0;
  a1[46] = &off_1001ADF18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ADDF0;
  a1[45] = off_1001ADE78;
  a1[46] = off_1001ADEA0;
  return a1;
}

void sub_1000E3F4C(_Unwind_Exception *a1)
{
  sub_1000F5E24(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E3F70(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000E3FB4(void *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, int a6)
{
  if (a5 != a4)
  {
    unint64_t v10 = sub_1000E4074(a2, a4, a5 - a4);
    unsigned int v11 = v10;
    unint64_t v12 = HIDWORD(v10);
    uint64_t v13 = (uint64_t)(a1 + 4);
    if (a6)
    {
      __int16 v17 = a3 & 1 | (((a3 & 2) != 0) << 8);
      unint64_t v14 = sub_1000A48B4(v13, v11, v12, (unsigned __int8 *)&v17);
    }
    else
    {
      __int16 v16 = a3 & 1 | (((a3 & 2) != 0) << 8);
      unint64_t v14 = sub_1000A4678(v13, v11, v12, (unsigned __int8 *)&v16);
    }
    return *(void *)(a2 + 352)
         + *a1
         / (unint64_t)(*(void *)(*(void *)(a2 + 8) + 48) + 1)
         * *(void *)(*(void *)(a2 + 8) + 48)
         * *(unsigned int *)(*(void *)(a2 + 8) + 20)
         + ((v14 * *(unsigned __int16 *)(*(void *)(a2 + 8) + 18)) >> 1);
  }
  return a4;
}

unint64_t sub_1000E4074(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(unsigned __int16 *)(v3 + 18);
  if (v4 <= a3) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = *(unsigned __int16 *)(v3 + 18);
  }
  if (!a3) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v3 + 20);
  uint64_t v7 = *(void *)(v3 + 48);
  return ((2
         * ((a2
                         - (*(void *)(a1 + 352)
                          + v7
                          * v6
                          * ((a2 / v4 - *(void *)(a1 + 352) / v4)
                           / (v7
                            * (unint64_t)(v6 / v4)))))
                        / v4)) | (((v5
                                  + a2
                                  - v4
                                  - (*(void *)(a1 + 352)
                                   + ((v5 + a2 - v4) / v4 - *(void *)(a1 + 352) / v4)
                                   / (v7
                                    * (unint64_t)(v6 / v4))
                                   * v7
                                   * v6))
                                 / v4) << 33))
       + 0x200000000;
}

uint64_t sub_1000E40F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (atomic_ullong *)result;
  while (1)
  {
    if (!*v4)
    {
      uint64_t v6 = 0;
      atomic_compare_exchange_strong(v4, (unint64_t *)&v6, 0xFFFFFFFFFFFFFFFFLL);
      if (!v6) {
        break;
      }
    }
    __n128 result = sub_1000F637C((unint64_t *)v4, 1);
    if ((result & 1) == 0)
    {
      char v7 = 0;
      goto LABEL_7;
    }
  }
  char v7 = 1;
LABEL_7:
  *(unsigned char *)(a3 + 16) = v7;
  *(void *)a3 = off_1001B66C0;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 24) = a2;
  return result;
}

BOOL sub_1000E4184(void *a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(*a1 + 8) + 20);
  uint64_t v3 = (*(void *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8) & 0x7FFFFFFFFFFFFFLL) * v2;
  uint64_t v4 = (*(void *)(*(void *)(*a2 + 56) + 16 * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(*a2 + 8) + 20);
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  return v5 || v3 == v4 + v2;
}

uint64_t sub_1000E41E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  LODWORD(v2) = 0;
  uint64_t v3 = *(unsigned int **)a1;
  uint64_t v4 = 40 * v1;
  while (1)
  {
    uint64_t v5 = sub_10003D040(v3);
    if ((v5 & 0x80000000) != 0) {
      break;
    }
    uint64_t v2 = (v5 + v2);
    v3 += 10;
    v4 -= 40;
    if (!v4) {
      return v2;
    }
  }
  return v5;
}

size_t sub_1000E4254(void *a1, void *a2)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(unsigned int *)(v2 + 20);
  v7[0] = *(void *)(*a1 + 352) + (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  v7[1] = v7[0] + v4;
  char v8 = 2;
  sub_100081638(a2, (uint64_t)v7, (uint64_t)&v9);
  if (v11)
  {
    bzero(v9, v11);
    size_t v5 = v11;
  }
  else
  {
    size_t v5 = -34;
  }
  if (v10) {
    sub_100010A48(v10);
  }
  return v5;
}

uint64_t sub_1000E42F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 113)) {
    goto LABEL_13;
  }
  *(unsigned char *)(a1 + 113) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = v9;
    __int16 v16 = v10;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = a4;
    sub_100010A48(v10);
  }
  else
  {
    uint64_t v15 = v9;
    __int16 v16 = 0;
    uint64_t v17 = a4;
  }
  uint64_t v18 = v6;
  uint64_t v19 = a4;
  char v20 = 1;
  int v11 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 80))(*(void *)(a2 + 16), &v15);
  uint64_t v12 = v17;
  if (v17 != v11)
  {
    *(unsigned char *)(a1 + 113) = 1;
    sub_1000B23BC(a2);
    if (v11 < 0) {
      a4 = v11;
    }
    else {
      a4 = -v11;
    }
  }
  if (v16) {
    sub_100010A48(v16);
  }
  if (v12 == v11)
  {
LABEL_13:
    a4 = 0;
    if (a3)
    {
      if (*(unsigned char *)(a1 + 112))
      {
        *(unsigned char *)(a1 + 112) = 0;
        sub_1000DC158(a3, *(void *)a1, *(void *)(a1 + 16));
        a4 = 0;
        if (!*(void *)(a1 + 16))
        {
          uint64_t v13 = *(void *)(a1 + 24);
          if (v13) {
            sub_1000DAB6C(a3, v13);
          }
          return 0;
        }
      }
    }
  }
  return a4;
}

void sub_1000E4440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000E4458(unint64_t result, uint64_t a2, char **a3)
{
  unint64_t v3 = *(unsigned __int16 *)(*(void *)(a2 + 8) + 18);
  uint64_t v4 = a3[3];
  unint64_t v5 = (unint64_t)v4 / v3 * v3;
  unint64_t v6 = (unint64_t)&v4[(void)a3[2]];
  unint64_t v7 = (v3 + v6 - 1) / v3 * v3;
  if (v5 < v7)
  {
    uint64_t v9 = (void *)result;
    unint64_t v10 = (unint64_t)v4 % v3;
    int v11 = *a3;
    do
    {
      unint64_t v12 = sub_1000E3FB4(v9, a2, 1, v5, v7, 1);
      unint64_t v13 = v12;
      if (v6 >= v12) {
        unint64_t v14 = v12;
      }
      else {
        unint64_t v14 = v6;
      }
      unint64_t v15 = v5 + v10;
      if (v14 >= v5 + v10)
      {
        if ((unint64_t)&(*a3)[a3[2] - v11] >= v14 - (v5 + v10)) {
          size_t v16 = v14 - (v5 + v10);
        }
        else {
          size_t v16 = (size_t)&(*a3)[a3[2] - v11];
        }
        bzero(v11, v16);
      }
      __n128 result = sub_1000E3FB4(v9, a2, 1, v13, v7, 0);
      unint64_t v5 = result;
      if (result < v14 + v10)
      {
        unint64_t v17 = 0;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v17 = result - v15;
      }
      v11 += v17;
    }
    while (result < v6);
  }
  return result;
}

void sub_1000E457C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(*(void *)(a3 + 8) + 20);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  uint64_t v16 = v6;
  unint64_t v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v7;
  char v21 = 0;
  int v10 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v16);
  if (v18 != v10)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v13 = exception;
    if (v10 < 0) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = -v10;
    }
    void *exception = &off_1001B6CA0;
    unint64_t v15 = std::generic_category();
    v13[1] = v14;
    void v13[2] = v15;
    *((unsigned char *)v13 + 24) = 0;
    *((unsigned char *)v13 + 48) = 0;
    v13[7] = "Can't load bitmap from backend";
  }
  if (*(void *)(*(void *)(a3 + 8) + 48)
     * (*(_DWORD *)(*(void *)(a3 + 8) + 20)
      / *(unsigned __int16 *)(*(void *)(a3 + 8) + 18)))
  {
    unint64_t v11 = 0;
    do
    {
      sub_1000DB31C(a1, v11);
      v11 += 2;
    }
    while (*(void *)(*(void *)(a3 + 8) + 48)
          * (unint64_t)(*(_DWORD *)(*(void *)(a3 + 8) + 20)
                             / *(unsigned __int16 *)(*(void *)(a3 + 8) + 18)) > v11);
  }
  if (v17) {
    sub_100010A48(v17);
  }
}

void sub_1000E46FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E4718(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  *(void *)a1 = a4;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned int *)(v9 + 20);
  *(void *)(a1 + 8) = *(void *)(a3 + 352) + a4 / (v10 + 1) * v10 * v11;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = 0;
  char v12 = a6 ^ 1;
  sub_10007F0F0((void *)(a1 + 32), 2 * v10 * (v11 / *(unsigned __int16 *)(v9 + 18)), a6 ^ 1);
  *(void *)(a1 + 120) = 850045863;
  *(_WORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  if (v12)
  {
    sub_1000E457C(a1, a2, a3);
  }
  else
  {
    *(_WORD *)(a1 + 112) = 257;
    sub_1000EE1D0(v14, a3, *(void *)a1);
    atomic_fetch_or((atomic_ullong *volatile)(*(void *)(v14[0] + 56) + 16 * v14[1] + 8), 0x8000000000000000);
  }
  return a1;
}

void sub_1000E481C(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  sub_10007F174(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E483C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(*(void *)(a2 + 8) + 8) & 1) == 0)
  {
    uint64_t v8 = (std::mutex *)(a1 + 120);
    std::mutex::lock((std::mutex *)(a1 + 120));
    int v9 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
    if (v9)
    {
      sub_1000B23BC(a2);
      exception = __cxa_allocate_exception(0x40uLL);
      unint64_t v15 = exception;
      if (v9 < 0) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = -v9;
      }
      void *exception = &off_1001B6CA0;
      unint64_t v17 = std::generic_category();
      v15[1] = v16;
      void v15[2] = v17;
      *((unsigned char *)v15 + 24) = 0;
      *((unsigned char *)v15 + 48) = 0;
      v15[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    if (a3
      && (sub_1000EE1D0(&v18, a3, *(void *)a1),
          (atomic_fetch_and((atomic_ullong *volatile)(*(void *)(v18 + 56) + 16 * v19 + 8), 0x7FFFFFFFFFFFFFFFuLL) & 0x8000000000000000) != 0))
    {
      int v10 = 1;
    }
    else if (*(unsigned char *)(a1 + 113))
    {
      int v10 = 0;
    }
    else
    {
      int v10 = 0;
      if (!*(unsigned char *)(a1 + 112))
      {
        uint64_t v11 = 0;
LABEL_17:
        std::mutex::unlock(v8);
        return v11;
      }
    }
    uint64_t v11 = sub_1000E42F0(a1, a2, a3, a4);
    if (v11) {
      int v12 = v10;
    }
    else {
      int v12 = 0;
    }
    if (a3 && v12)
    {
      sub_1000EE1D0(&v18, a3, *(void *)a1);
      atomic_fetch_or((atomic_ullong *volatile)(*(void *)(v18 + 56) + 16 * v19 + 8), 0x8000000000000000);
    }
    goto LABEL_17;
  }
  return 4294967290;
}

void sub_1000E4A00(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1000E4A20@<X0>(atomic_ullong *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, atomic_ullong *a7@<X8>)
{
  uint64_t v10 = (uint64_t)result;
  unint64_t v19 = a4;
  *a7 = 0;
  if (a4 || a5)
  {
    sub_1000E4BAC((uint64_t)(result + 35), a3, a6, (unint64_t *)&v18);
    sub_1000E4D78(a7, &v18);
    __n128 result = sub_1000D90F8(&v18);
    atomic_ullong v12 = *a7;
    if (*a7) {
      LOBYTE(v12) = *(unsigned char *)(v12 + 520) == 0;
    }
    if (v12 & 1) != 0 || (a6)
    {
      if (!*a7 || (unsigned int v13 = atomic_load((unsigned int *)(*a7 + 24)), v13 != 2))
      {
        if (!*a7 || !*(unsigned char *)(*a7 + 520))
        {
          if (v19 | (*(void *)(*(void *)(v10 + 152) + 8 * a3) * *(unsigned int *)(v10 + 20)))
          {
            if (v19) {
              unint64_t v14 = v19;
            }
            else {
              unint64_t v14 = *(void *)(*(void *)(v10 + 152) + 8 * a3) * *(unsigned int *)(v10 + 20);
            }
            uint64_t v18 = *(void *)(v10 + 80) * a3;
            unint64_t v19 = v14;
            sub_1000E4E1C(a7, v10, (void *)(a2 + 16), &v19, &v18);
          }
          uint64_t v15 = sub_1000DB67C(v10, a2, 1);
          uint64_t v17 = *(void *)(v10 + 80) * a3;
          uint64_t v18 = v15;
          unsigned __int8 v16 = 1;
          sub_1000E4DB8(a7, v10, (void *)(a2 + 16), (unint64_t *)&v18, &v17, &v16);
        }
      }
    }
  }
  return result;
}

void sub_1000E4B84(_Unwind_Exception *a1)
{
  sub_1000D90F8(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1000E4BAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  sub_10010032C(a1, a2, a3, &v13);
  if (v13 && !*(unsigned char *)(v13 + 520) || v13 && *(unsigned char *)(v13 + 520))
  {
LABEL_17:
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v13, 0), a4);
    return sub_1000D90F8((atomic_ullong *)&v13);
  }
  if (*(unsigned char *)(a1 + 912) && v14 != (void *)(a1 + 936))
  {
    do
    {
      sub_100100768(a1, a2, &v11);
      uint64_t v15 = v11;
      sub_1000E4D78((atomic_ullong *)&v13, &v12);
      sub_1000D90F8(&v12);
      if (v13)
      {
        if (!*(unsigned char *)(v13 + 520)) {
          break;
        }
      }
      uint64_t v7 = (unint64_t *)sub_100100908((void *)a1);
      if (v7)
      {
        uint64_t v15 = v7;
        sub_1001009A4(a1, v7, a2, (unint64_t *)&v11);
        sub_1000E4D78((atomic_ullong *)&v13, (atomic_ullong *)&v11);
        sub_1000D90F8((atomic_ullong *)&v11);
        break;
      }
    }
    while (*(unsigned char *)(a1 + 912));
    std::mutex::lock((std::mutex *)(a1 + 952));
    uint64_t v8 = sub_1000FC6DC((uint64_t **)(a1 + 928), v14, (unint64_t *)&v16, &v16, (uint64_t *)&v15);
    if (!v9) {
      v8[5] = (uint64_t)v15;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
    std::mutex::unlock((std::mutex *)(a1 + 952));
    sub_1000FD9EC(a1, 0, 0, 0);
    goto LABEL_17;
  }
  *a4 = 0;
  return sub_1000D90F8((atomic_ullong *)&v13);
}

void sub_1000E4D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000D90F8((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1000E4D78(atomic_ullong *a1, atomic_ullong *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = atomic_exchange(a2, 0);
    sub_1000D90F8(a1);
    atomic_store(v3, (unint64_t *)a1);
  }
  return a1;
}

void sub_1000E4DB8(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
}

void sub_1000E4DE0(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 464)) {
      sub_1001017D4(v2 + 440, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1000E4E08(_Unwind_Exception *a1)
{
}

void sub_1000E4E1C(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
}

void sub_1000E4E44(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 464)) {
      sub_1001017D4(v2 + 440, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1000E4E6C(_Unwind_Exception *a1)
{
}

unint64_t *sub_1000E4E80@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    uint64_t v6 = (unint64_t *)atomic_load(result);
    sub_100100C18(&v8, v6, 1);
    if (v8 && !*(unsigned char *)(v8 + 520))
    {
      uint64_t v7 = *(void *)(v8 + 32);
      *a3 = 0;
      if (v7 == a2) {
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v8, 0), a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return (unint64_t *)sub_1000D90F8((atomic_ullong *)&v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void *sub_1000E4F1C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001016B4((uint64_t)a1, a2);
  *a1 = off_1001AE010;
  a1[45] = &off_1001AE110;
  a1[46] = &off_1001AE138;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AE010;
  a1[45] = off_1001AE098;
  a1[46] = off_1001AE0C0;
  return a1;
}

void sub_1000E501C(_Unwind_Exception *a1)
{
  sub_1000F6B20(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E5040(uint64_t a1)
{
  return a1;
}

void *sub_1000E5084(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100101744((uint64_t)a1, a2);
  *a1 = off_1001AE230;
  a1[45] = &off_1001AE330;
  a1[46] = &off_1001AE358;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AE230;
  a1[45] = off_1001AE2B8;
  a1[46] = off_1001AE2E0;
  return a1;
}

void sub_1000E5184(_Unwind_Exception *a1)
{
  sub_1000F7294(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E51A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E51EC(uint64_t a1, uint64_t a2)
{
  int v4 = sub_1000FB47C(a1 + 2080, 0, 0, 0);
  if (v4 == -1) {
    return 4294967282;
  }
  if (v4 == 1)
  {
    LODWORD(result) = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
    int v6 = result;
    uint64_t result = (int)result < 0 ? result : -(int)result;
    if (v6) {
      return result;
    }
  }
  int v7 = sub_1000FD9EC(a1 + 280, 0, 0, 0);
  if (v7 == -1) {
    return 4294967282;
  }
  if (v7 != 1) {
    return 0;
  }
  LODWORD(result) = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
  int v8 = result;
  uint64_t result = (int)result < 0 ? result : -(int)result;
  if (!v8) {
    return 0;
  }
  return result;
}

uint64_t sub_1000E52DC(uint64_t a1, uint64_t a2, uint64_t (***a3)())
{
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  int v6 = (std::mutex *)(a1 + 3792);
  std::mutex::lock((std::mutex *)(a1 + 3792));
  long long v7 = *(_OWORD *)(a1 + 3744);
  *(_OWORD *)(a1 + 3744) = 0u;
  long long v8 = *(_OWORD *)(a1 + 3760);
  long long v37 = v7;
  long long v38 = v8;
  *(_OWORD *)(a1 + 3760) = 0u;
  long long v9 = v39;
  long long v39 = *(_OWORD *)(a1 + 3776);
  *(_OWORD *)(a1 + 3776) = v9;
  std::mutex::unlock(v6);
  size_t v10 = (*(void *)(a1 + 160) - *(void *)(a1 + 152) + (unint64_t)*(unsigned __int16 *)(a1 + 18) + 7)
      / *(unsigned __int16 *)(a1 + 18)
      * *(unsigned __int16 *)(a1 + 18);
  uint64_t v11 = malloc_type_valloc(v10, 0xF8ED6DDuLL);
  if (!v11)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v36 = std::bad_alloc::bad_alloc(exception);
  }
  uint64_t v40 = off_1001AC608;
  uint64_t v43 = &v40;
  uint64_t v46 = v11;
  sub_100017FFC((uint64_t)v47, (uint64_t)&v40);
  sub_100017750(&v40);
  atomic_ullong v12 = v46;
  unint64_t v13 = *(void *)(a1 + 3608);
  *(void *)(a1 + 3608) = v13 + 1;
  *atomic_ullong v12 = bswap64(v13);
  unint64_t v14 = v12 + 1;
  uint64_t v15 = *(unint64_t **)(a1 + 152);
  uint64_t v16 = *(unint64_t **)(a1 + 160);
  while (v15 != v16)
  {
    unint64_t v17 = *v15++;
    *v14++ = bswap64(v17);
  }
  bzero(v14, (size_t)v46 + v10 - (void)v14);
  sub_1000E56C0(a1 + 2080);
  sub_1000E5754(a1 + 280);
  uint64_t v18 = sub_1000E51EC(a1, a2);
  if (!v18)
  {
    uint64_t v19 = (uint64_t)v46;
    uint64_t v20 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
    uint64_t v40 = (uint64_t (**)())v19;
    BOOL v41 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v42 = v10;
    uint64_t v43 = a3;
    size_t v44 = v10;
    char v45 = 0;
    int v21 = (*(uint64_t (**)(void, uint64_t (***)()))(**(void **)(a2 + 16) + 80))(*(void *)(a2 + 16), &v40);
    if (v10 == v21)
    {
      uint64_t v22 = (unint64_t **)(*((void *)&v37 + 1) + 8 * ((unint64_t)v39 >> 9));
      if ((void)v38 == *((void *)&v37 + 1))
      {
        uint64_t v23 = 0;
        int v25 = 0;
        unint64_t v24 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
      }
      else
      {
        uint64_t v23 = &(*v22)[v39 & 0x1FF];
        unint64_t v24 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
        int v25 = (unint64_t *)(*(void *)v24 + 8 * ((*((void *)&v39 + 1) + v39) & 0x1FF));
      }
      sub_1000DFB94((atomic_ullong *)a1, v22, v23, v24, v25, a2);
      uint64_t v18 = 1;
    }
    else
    {
      *(void *)(a1 + 3608) = v13;
      std::mutex::lock(v6);
      unint64_t v26 = *(void *)(a1 + 3776) + *(void *)(a1 + 3784);
      uint64_t v27 = *(void *)(a1 + 3752);
      uint64_t v28 = (char *)(v27 + 8 * (v26 >> 9));
      if (*(void *)(a1 + 3760) == v27) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = *(void *)v28 + 8 * (v26 & 0x1FF);
      }
      uint64_t v30 = (char *)(*((void *)&v37 + 1) + 8 * ((unint64_t)v39 >> 9));
      if ((void)v38 == *((void *)&v37 + 1))
      {
        unint64_t v31 = 0;
        uint64_t v33 = 0;
        unint64_t v32 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
      }
      else
      {
        unint64_t v31 = (char *)(*(void *)v30 + 8 * (v39 & 0x1FF));
        unint64_t v32 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
        uint64_t v33 = (char *)(*(void *)v32 + 8 * ((*((void *)&v39 + 1) + v39) & 0x1FF));
      }
      sub_1000DFB60((void **)(a1 + 3744), v28, v29, v30, v31, v32, v33);
      if (v21 >= 0) {
        uint64_t v18 = 4294967291;
      }
      else {
        uint64_t v18 = v21;
      }
      std::mutex::unlock(v6);
    }
    if (v41) {
      sub_100010A48(v41);
    }
  }
  sub_1000176CC((uint64_t *)&v46, 0);
  sub_100017750(v47);
  sub_1000D9D50(&v37);
  return v18;
}

void sub_1000E565C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::mutex::unlock(v22);
  if (a16) {
    sub_100010A48(a16);
  }
  sub_1000176CC(&a21, 0);
  sub_100017750(v21);
  sub_1000D9D50(&a9);
  _Unwind_Resume(a1);
}

void sub_1000E56C0(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)(a1 + 608);
  if (atomic_load((unint64_t *)(a1 + 608)))
  {
    int v4 = (atomic_ullong *)(a1 + 616);
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 616), 1uLL);
    v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 624);
    v7.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 624));
    if (atomic_load(v1))
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 688), &v7);
      while (atomic_load((unint64_t *)(a1 + 608)));
    }
    atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL);
    if (v7.__owns_) {
      std::mutex::unlock(v7.__m_);
    }
  }
}

void sub_1000E5754(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)(a1 + 784);
  if (atomic_load((unint64_t *)(a1 + 784)))
  {
    int v4 = (atomic_ullong *)(a1 + 792);
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 792), 1uLL);
    v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 800);
    v7.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 800));
    if (atomic_load(v1))
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 864), &v7);
      while (atomic_load((unint64_t *)(a1 + 784)));
    }
    atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL);
    if (v7.__owns_) {
      std::mutex::unlock(v7.__m_);
    }
  }
}

uint64_t sub_1000E57E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v8 = *(void *)(a4 + 144) - a3[18];
  unint64_t v9 = a3[3];
  size_t v10 = (std::__shared_weak_count *)a3[1];
  uint64_t v34 = *a3;
  uint64_t v35 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v36[0] = *((_OWORD *)a3 + 1);
  uint64_t v11 = v8 & ~(v8 >> 63);
  *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v37 = a3[6];
  long long v38 = *(_OWORD *)(a3 + 7);
  long long v39 = *(_OWORD *)(a3 + 9);
  long long v40 = *(_OWORD *)(a3 + 11);
  char v41 = *((unsigned char *)a3 + 104);
  atomic_ullong v12 = (std::__shared_weak_count *)a3[15];
  uint64_t v42 = a3[14];
  uint64_t v43 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  long long v44 = *((_OWORD *)a3 + 8);
  uint64_t v45 = a3[18];
  char v46 = *((unsigned char *)a3 + 152);
  int v14 = a5 ^ 1;
  while (1)
  {
    uint64_t v15 = v9 / *(void *)(a1 + 80);
    sub_1000DCA90(a1, a2, v15, v14, 1, &v33);
    if (v33 && *(unsigned char *)(v33 + 520))
    {
      if ((a5 & 1) == 0) {
        sub_1000B23BC(a2);
      }
      int v16 = 1;
      uint64_t v5 = -5;
      goto LABEL_24;
    }
    sub_1000307F8((uint64_t)&v34, *(void *)(a1 + 80) + *(void *)(a1 + 80) * v15, a4, 0, (uint64_t)&v26);
    if (v33 && !*(unsigned char *)(v33 + 520))
    {
      if (a5)
      {
        if (*(unsigned char *)(v33 + 400)) {
          uint64_t v19 = v33 + 40;
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v21 = sub_1000E1A34(v19);
        uint64_t v5 = v21;
        if (v21 < 0 && v21) {
          goto LABEL_40;
        }
      }
      else
      {
        if (*(unsigned char *)(v33 + 400)) {
          uint64_t v20 = v33 + 40;
        }
        else {
          uint64_t v20 = 0;
        }
        unint64_t v22 = sub_1000DFCC0(v20, a2, (uint64_t *)&v26, (uint64_t)&v30);
        uint64_t v5 = v22;
        if ((v22 & 0x8000000000000000) != 0 && v22)
        {
          sub_1000B23BC(a2);
LABEL_40:
          int v16 = 1;
          goto LABEL_16;
        }
      }
      unint64_t v17 = v5;
    }
    else
    {
      unint64_t v17 = 0;
      do
      {
        size_t v18 = v28;
        bzero(v26, v28);
        sub_100030064((uint64_t)&v26, v18);
        v17 += v18;
      }
      while (!sub_10002F3D8((uint64_t)&v26, (uint64_t)&v30));
    }
    sub_10002FF28((uint64_t)&v34, v17);
    int v16 = 0;
    v9 += v17;
    v13 += v17;
LABEL_16:
    if (v32) {
      sub_100010A48(v32);
    }
    if (v31) {
      sub_100010A48(v31);
    }
    if (v29) {
      sub_100010A48(v29);
    }
    if (v27) {
      sub_100010A48(v27);
    }
LABEL_24:
    sub_1000D90F8((atomic_ullong *)&v33);
    if (v16) {
      break;
    }
    if (v13 == v11) {
      goto LABEL_43;
    }
  }
  uint64_t v11 = v5;
LABEL_43:
  if (v43) {
    sub_100010A48(v43);
  }
  if (v35) {
    sub_100010A48(v35);
  }
  return v11;
}

void sub_1000E5ADC(_Unwind_Exception *a1)
{
  sub_1000D90F8((atomic_ullong *)(v1 - 256));
  sub_100011F6C(v1 - 248);
  _Unwind_Resume(a1);
}

double sub_1000E5B24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (*(unsigned char *)(a1 + 32) & 1) + *(void *)(a1 + 24);
  v10[0] = *(void *)(a1 + 40);
  v10[1] = v3;
  char v11 = 2;
  *(void *)&long long v8 = qword_1001C45E0;
  *((void *)&v8 + 1) = qword_1001C45E0;
  LOBYTE(v9) = 2;
  unsigned int v4 = sub_1000E5BE0(*(void *)(a1 + 64), *(void *)(a1 + 56), v10, (uint64_t)&v8);
  if (v4 >= 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::unique_lock<std::mutex> v7 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Can't convert ASIF flag.", 5u);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

unint64_t sub_1000E5BE0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v7 = 0;
  *(void *)&long long v32 = *a3;
  *((void *)&v32 + 1) = v32;
  uint64_t v29 = qword_1001C45E0;
  uint64_t v30 = qword_1001C45E0;
  unsigned __int8 v33 = 2;
  char v31 = 2;
  long long v27 = *(_OWORD *)a3;
  uint64_t v28 = a3[2];
  do
  {
    if ((_BYTE)v28)
    {
      if (v28 == 3)
      {
        unint64_t v9 = *((void *)&v27 + 1);
        uint64_t v8 = v27;
        if (*((void *)&v27 + 1) < (unint64_t)v27) {
          goto LABEL_5;
        }
      }
      else
      {
        unint64_t v9 = *((void *)&v27 + 1);
        uint64_t v8 = v27;
        if ((unint64_t)v27 >= *((void *)&v27 + 1)) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      unint64_t v9 = *((void *)&v27 + 1);
      uint64_t v8 = v27;
      if ((unint64_t)v27 >= *((void *)&v27 + 1) || (unint64_t)(v27 + 1) >= *((void *)&v27 + 1))
      {
LABEL_5:
        if (!qword_1001C45E0) {
          break;
        }
        goto LABEL_12;
      }
    }
    if (!((v28 & 1) + ((v28 >> 1) & 1) - 1 - v8 + v9)) {
      break;
    }
LABEL_12:
    if ((v28 & 2) != 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    unint64_t v12 = v11 * *(unsigned __int16 *)(a1 + 18);
    sub_1000DCA90(a1, a2, v12 / *(void *)(a1 + 80), 0, 1, &v26);
    if (v26 && *(unsigned char *)(v26 + 520))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001B6CA0;
      uint64_t v21 = std::generic_category();
      exception[1] = 4294967291;
      exception[2] = v21;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Can't load table to get extents";
    }
    if (v26 && !*(unsigned char *)(v26 + 520))
    {
      if (*(unsigned char *)(v26 + 400)) {
        uint64_t v15 = (uint64_t *)(v26 + 40);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v13 = sub_1000E5EE0(v15, a2, (uint64_t)&v27, (uint64_t)&v29);
    }
    else
    {
      unint64_t v13 = 0;
      unint64_t v14 = (*(void *)(a1 + 80) + *(void *)(a1 + 80) * (v12 / *(void *)(a1 + 80)) + 1)
          / *(unsigned __int16 *)(a1 + 18);
      if (v14 >= v9) {
        unint64_t v14 = v9;
      }
      uint64_t v29 = v11;
      uint64_t v30 = v14;
      char v31 = 2;
    }
    if (v13 == v7)
    {
LABEL_36:
      *((void *)&v32 + 1) = v30;
      unsigned __int8 v33 = 2;
      long long v22 = v27;
      uint64_t v23 = v28;
      sub_1000C6A90((uint64_t)&v22, (uint64_t)&v32, (uint64_t)&v24);
      long long v27 = v24;
      LOBYTE(v28) = v25;
      char v18 = 1;
      unint64_t v7 = v13;
      goto LABEL_40;
    }
    if (v33)
    {
      if (v33 == 3)
      {
        uint64_t v16 = *((void *)&v32 + 1);
        uint64_t v17 = v32;
        if (*((void *)&v32 + 1) >= (unint64_t)v32) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v16 = *((void *)&v32 + 1);
        uint64_t v17 = v32;
        if ((unint64_t)v32 < *((void *)&v32 + 1)) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      uint64_t v16 = *((void *)&v32 + 1);
      uint64_t v17 = v32;
      if ((unint64_t)v32 < *((void *)&v32 + 1) && (unint64_t)(v32 + 1) < *((void *)&v32 + 1))
      {
LABEL_35:
        if (!((v33 & 1) + (uint64_t)(((v33 >> 1) & 1) - 1) - v17 + v16)) {
          goto LABEL_36;
        }
        goto LABEL_39;
      }
    }
    if (!qword_1001C45E0) {
      goto LABEL_36;
    }
LABEL_39:
    char v18 = 0;
LABEL_40:
    sub_1000D90F8((atomic_ullong *)&v26);
  }
  while ((v18 & 1) != 0);
  *(_OWORD *)a4 = v32;
  *(unsigned char *)(a4 + 16) = v33;
  return v7;
}

void sub_1000E5EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000D90F8((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000E5EE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void *)a3;
  unint64_t v6 = *(void *)(a3 + 8);
  unsigned int v7 = *(unsigned __int8 *)(a3 + 16);
  v64[0] = *(_DWORD *)(a3 + 17);
  *(_DWORD *)((char *)v64 + 3) = *(_DWORD *)(a3 + 20);
  if ((v7 & 2) != 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v5 + 1;
  }
  unint64_t v9 = (void *)sub_1000DA598((uint64_t)a1, v8 * *(unsigned __int16 *)(a1[1] + 18));
  unint64_t v11 = atomic_load((unint64_t *)(v9[7] + 16 * v10 + 8));
  unint64_t v49 = v11 >> 62;
  if (v11 >> 62 == 3)
  {
    uint64_t v12 = v9[1];
    sub_1000DB028(a1, a2, (v9[44]+ (*(void *)(v12 + 48) + *(void *)(v12 + 48) * v10)/ (unint64_t)(*(void *)(v12 + 48) + 1)* *(unsigned int *)(v12 + 20))/ *(unsigned __int16 *)(v12 + 18), 0, v57);
    uint64_t v13 = a1[1];
    if (v57[0])
    {
      if (*(unsigned char *)(v57[0] + 224)) {
        uint64_t v15 = v57[0] + 40;
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v14 = *(unsigned __int16 *)(v13 + 18);
    unint64_t v49 = sub_1000DB31C(v15, 2* ((v8 * v14- (a1[44]+ *(void *)(v13 + 48)* *(unsigned int *)(v13 + 20)* ((v8 * v14 / v14 - a1[44] / v14)/ (*(void *)(v13 + 48)* (unint64_t)(*(_DWORD *)(v13 + 20) / v14)))))/ v14));
    sub_1000D9F50((atomic_ullong *)v57);
  }
  unint64_t v16 = 0;
  while (1)
  {
    if ((_BYTE)v7)
    {
      if (v7 == 3)
      {
        if (v6 >= v5) {
          goto LABEL_18;
        }
      }
      else if (v6 > v5)
      {
        goto LABEL_18;
      }
    }
    else if (v6 > v5 && v5 + 1 < v6)
    {
LABEL_18:
      if (!(v6 - v5 + (v7 & 1) + (int)(((v7 >> 1) & 1) - 1))) {
        goto LABEL_42;
      }
      goto LABEL_22;
    }
    if (!qword_1001C45E0) {
      goto LABEL_42;
    }
LABEL_22:
    if ((v7 & 2) != 0) {
      unint64_t v17 = v5;
    }
    else {
      unint64_t v17 = v5 + 1;
    }
    uint64_t v18 = a1[1];
    unint64_t v19 = v17 * *(unsigned __int16 *)(v18 + 18);
    if (v19 >= *(void *)(v18 + 80) + a1[44]) {
      goto LABEL_42;
    }
    uint64_t v20 = (void *)sub_1000DA598((uint64_t)a1, v19);
    long long v22 = v20;
    uint64_t v23 = v21;
    long long v62 = v20;
    uint64_t v63 = v21;
    char v24 = v7;
    unint64_t v50 = v6;
    uint64_t v25 = *(unsigned __int16 *)(a1[1] + 18);
    uint64_t v26 = v20[1];
    unint64_t v27 = (*(void *)(v26 + 48) + *(void *)(v26 + 48) * v21) / (unint64_t)(*(void *)(v26 + 48) + 1);
    uint64_t v28 = *(unsigned int *)(v26 + 20);
    if (v20[44] + v28 + v27 * v28 >= v25 + v25 * (v6 + (int)((v7 & 1) - 1))) {
      unint64_t v29 = v25 + v25 * (v6 + (int)((v7 & 1) - 1));
    }
    else {
      unint64_t v29 = v20[44] + v28 + v27 * v28;
    }
    uint64_t v30 = (unint64_t *)(v20[7] + 16 * v21);
    BOOL v31 = sub_1000F6308(v30);
    v60[0] = off_1001B66A0;
    v60[1] = v30;
    BOOL v61 = v31;
    if (!v31)
    {
      *(void *)&long long v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((void *)&v55 + 1) = 40;
      int v56 = 16;
      sub_1000E64DC(v57, &v55);
      sub_100003DF0(v59, (uint64_t)"Couldn't lock entry ", 20);
      sub_1000DDF94(v59, &v62);
      sub_1000E6600((uint64_t)v57);
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001B6CA0;
      uint64_t v43 = std::generic_category();
      exception[1] = 5;
      exception[2] = v43;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Can't lock entry";
    }
    unint64_t v32 = atomic_load((unint64_t *)(v22[7] + 16 * v23 + 8));
    unint64_t v33 = v32 >> 62;
    if (v49 == v33)
    {
      uint64_t v34 = a1[1];
      unint64_t v16 = v29 / *(unsigned __int16 *)(v34 + 18);
      goto LABEL_40;
    }
    if (v33 != 3) {
      break;
    }
    uint64_t v35 = v62[1];
    sub_1000DB028(a1, a2, (v62[44]+ (*(void *)(v35 + 48) + *(void *)(v35 + 48) * v63)/ (unint64_t)(*(void *)(v35 + 48) + 1)* *(unsigned int *)(v35 + 20))/ *(unsigned __int16 *)(v35 + 18), 0, &v54);
    if (!v54 || *(unsigned char *)(v54 + 344))
    {
      *(void *)&long long v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((void *)&v55 + 1) = 40;
      int v56 = 16;
      sub_1000E6644(v57, &v55);
      sub_100003DF0(v59, (uint64_t)"Can't read bitmap", 17);
      sub_1000E6768((uint64_t)v57);
      long long v44 = __cxa_allocate_exception(0x40uLL);
      *long long v44 = &off_1001B6CA0;
      uint64_t v45 = std::generic_category();
      v44[1] = 5;
      v44[2] = v45;
      *((unsigned char *)v44 + 24) = 0;
      *((unsigned char *)v44 + 48) = 0;
      v44[7] = "Can't read bitmap";
    }
    unint64_t v36 = *(unsigned char *)(v54 + 224) ? (void *)(v54 + 40) : 0;
    unint64_t v37 = sub_1000E3FB4(v36, (uint64_t)a1, v49, v19, v29, 0);
    unint64_t v38 = *(unsigned __int16 *)(a1[1] + 18);
    sub_1000D9F50((atomic_ullong *)&v54);
    unint64_t v16 = v37 / v38;
    if (v37 < v29) {
      break;
    }
    uint64_t v34 = a1[1];
LABEL_40:
    v51[0] = v5;
    v51[1] = v50;
    char v52 = v24;
    *(_DWORD *)uint64_t v53 = v64[0];
    *(_DWORD *)&v53[3] = *(_DWORD *)((char *)v64 + 3);
    unint64_t v39 = v29 / *(unsigned __int16 *)(v34 + 18);
    *(void *)&long long v55 = v17;
    *((void *)&v55 + 1) = v39;
    LOBYTE(v56) = 2;
    sub_1000C6A90((uint64_t)v51, (uint64_t)&v55, (uint64_t)v57);
    unint64_t v5 = v57[0];
    unint64_t v6 = v57[1];
    unsigned int v7 = v58;
    sub_1001413CC(v60);
  }
  sub_1001413CC(v60);
LABEL_42:
  unint64_t v40 = *(void *)a3;
  if ((*(unsigned char *)(a3 + 16) & 2) == 0) {
    ++v40;
  }
  *(void *)a4 = v40;
  *(void *)(a4 + 8) = v16;
  *(unsigned char *)(a4 + 16) = 2;
  return v49;
}

void sub_1000E6468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1000D9F50((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void *sub_1000E64DC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100101828((uint64_t)a1, a2);
  *a1 = off_1001AE450;
  a1[45] = &off_1001AE550;
  a1[46] = &off_1001AE578;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AE450;
  a1[45] = off_1001AE4D8;
  a1[46] = off_1001AE500;
  return a1;
}

void sub_1000E65DC(_Unwind_Exception *a1)
{
  sub_1000F7A08(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E6600(uint64_t a1)
{
  return a1;
}

void *sub_1000E6644(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001018B8((uint64_t)a1, a2);
  *a1 = off_1001AE670;
  a1[45] = &off_1001AE770;
  a1[46] = &off_1001AE798;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AE670;
  a1[45] = off_1001AE6F8;
  a1[46] = off_1001AE720;
  return a1;
}

void sub_1000E6744(_Unwind_Exception *a1)
{
  sub_1000F817C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E6768(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E67AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000DDB30(a1, a3, a4, (uint64_t)&v32);
  int v9 = *(unsigned __int8 *)(*(void *)(a1 + 24) + 184);
  while (v32 != v40 || v33 != v41 || v34 != v42 || v34 != v32 + 16 * v33 && (v37 != v43 || v38 != v44 || v39 != v45))
  {
    unint64_t v10 = v35 * *(unsigned __int16 *)(a1 + 18);
    sub_1000DCA90(a1, a2, v10 / *(void *)(a1 + 80), v9 == 0, 1, &v31);
    if (v31 && !*(unsigned char *)(v31 + 520))
    {
      if (*(unsigned char *)(v31 + 400)) {
        uint64_t v15 = v31 + 40;
      }
      else {
        uint64_t v15 = 0;
      }
      sub_1000DE05C(v15, a2, a3, a4, &v18);
      uint64_t v34 = v19;
      uint64_t v37 = v22;
      if (v33 != (v19 - v32) >> 4)
      {
        unint64_t v35 = sub_1000DA304(&v32);
        uint64_t v36 = v16;
      }
      int v12 = 0;
      goto LABEL_37;
    }
    if (v31)
    {
      if (*(unsigned char *)(v31 + 520)) {
        uint64_t v11 = 4294967291;
      }
      else {
        uint64_t v11 = 0;
      }
      if (!(*(unsigned __int8 *)(v31 + 520) | v9))
      {
LABEL_19:
        sub_1000DC208(a3, a4, *(unsigned int *)(a1 + 20), *(unsigned __int16 *)(a1 + 18), v10 / *(void *)(a1 + 80) * *(void *)(a1 + 80), *(void *)(a1 + 80) + v10 / *(void *)(a1 + 80) * *(void *)(a1 + 80), (uint64_t)&v18);
        while ((void)v18 != v25
             || *((void *)&v18 + 1) != v26
             || v19 != v27
             || v19 != (void)v18 + 16 * *((void *)&v18 + 1) && (v22 != v28 || v23 != v29 || v24 != v30))
        {
          v22 += v24 * v21;
          unint64_t v20 = sub_1000DA304((uint64_t *)&v18);
          uint64_t v21 = v13;
        }
        uint64_t v34 = v19;
        uint64_t v37 = v22;
        if (v33 != (v19 - v32) >> 4)
        {
          unint64_t v35 = sub_1000DA304(&v32);
          uint64_t v36 = v14;
        }
        int v12 = 2;
        goto LABEL_37;
      }
      int v12 = 1;
      uint64_t v4 = v11;
    }
    else
    {
      if (!v9) {
        goto LABEL_19;
      }
      uint64_t v4 = 0;
      int v12 = 1;
    }
LABEL_37:
    sub_1000D90F8((atomic_ullong *)&v31);
    if ((v12 | 2) != 2) {
      return v4;
    }
  }
  return 0;
}

uint64_t sub_1000E6AA0(uint64_t a1, uint64_t a2, uint64_t (***a3)())
{
  unint64_t v6 = (std::mutex *)(a1 + 3528);
  std::mutex::lock((std::mutex *)(a1 + 3528));
  sub_1000E56C0(a1 + 2080);
  sub_1000E5754(a1 + 280);
  unsigned int v7 = atomic_exchange((atomic_uint *volatile)(a1 + 3592), 0);
  int v8 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
  if (v8) {
    goto LABEL_2;
  }
  uint64_t v9 = sub_1000E51EC(a1, a2);
  if (v9)
  {
LABEL_8:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v11 = *(unint64_t **)(a1 + 128);
  int v12 = *(unint64_t **)(a1 + 136);
  if (v11 == v12)
  {
    uint64_t v9 = 0;
    if (v7) {
      goto LABEL_22;
    }
LABEL_25:
    if (*(uint64_t (****)())(a1 + 3600) == a3)
    {
LABEL_27:
      if (!v7 && (v9 & 0x80000000) == 0)
      {
        uint64_t v9 = 0;
        goto LABEL_6;
      }
      goto LABEL_8;
    }
LABEL_26:
    uint64_t v9 = sub_1000E52DC(a1, a2, a3);
    goto LABEL_27;
  }
  uint64_t v9 = 0;
  unint64_t v13 = 0;
  do
  {
    sub_1000E4E80(v11, v13 / *(void *)(a1 + 80), &v16);
    if (v16 && !*(unsigned char *)(v16 + 520))
    {
      if (*(unsigned char *)(v16 + 400)) {
        uint64_t v14 = v16 + 40;
      }
      else {
        uint64_t v14 = 0;
      }
      BOOL v15 = sub_1000DECF8(v14, a2);
      if (v7) {
        unsigned int v7 = 1;
      }
      else {
        unsigned int v7 = v15;
      }
    }
    v13 += *(void *)(a1 + 80);
    sub_1000D90F8((atomic_ullong *)&v16);
    ++v11;
  }
  while (v11 != v12);
  if (!v7) {
    goto LABEL_25;
  }
LABEL_22:
  int v8 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
  if (!v8) {
    goto LABEL_26;
  }
LABEL_2:
  if (v8 < 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = -v8;
  }
LABEL_5:
  atomic_fetch_or((atomic_uint *volatile)(a1 + 3592), v7);
LABEL_6:
  std::mutex::unlock(v6);
  return v9;
}

void sub_1000E6CC0()
{
}

void sub_1000E6CE0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  int v12 = (void *)sub_1000E72E8(a1, a2, a4, a5);
  *int v12 = off_1001ABAC8;
  v12[11] = off_1001AF9C8;
  v12[12] = v12;
  v12[14] = v12 + 11;
  v12[15] = a3;
  sub_1000F8660(v12 + 16, (unint64_t)(*(void *)(a1 + 80) + a3 - 1) / *(void *)(a1 + 80));
  sub_1000F86D8((void *)(a1 + 152), (unint64_t)(*(void *)(a1 + 80) + a3 - 1) / *(void *)(a1 + 80));
  *(void *)(a1 + 176) = a4;
  unint64_t v13 = (a4
       - 1
       + (a5 - 1 + (unint64_t)a6) / a5 * a5
       + (a5 + 7 + 8 * ((unint64_t)(*(void *)(a1 + 120) + *(void *)(a1 + 80) - 1) / *(void *)(a1 + 80)))
       / a5
       * a5
       * a7)
      / a4;
  *(void *)(a1 + 184) = 850045863;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = v13 * a4;
  v15[3] = 0;
  sub_1001019CC(a1 + 280, 2, 0, (uint64_t)v15);
}

void sub_1000E71B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::condition_variable *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::thread *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  sub_1001041AC(v25, 0);
  operator delete();
}

void sub_1000E72E0()
{
}

uint64_t sub_1000E72E8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  *(void *)a1 = off_1001AE888;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 18) = a4;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3 >> 3;
  unint64_t v5 = a3 / a4;
  unint64_t v6 = 4 * a3;
  if (v6 < v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v6 / v5;
  }
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = sub_1000DA2A0(a1);
  unint64_t v9 = (*(void *)(a1 + 48) + v8) / (unint64_t)(*(void *)(a1 + 48) + 1);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  unint64_t v10 = v8 - v9;
  unint64_t v11 = v10 * *(unsigned int *)(a1 + 20);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  return a1;
}

unint64_t sub_1000E737C(uint64_t a1, uint64_t (***a2)(), unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a4;
  size_t v9 = (a3 + 8 * a4 + 7) / a3 * a3;
  unint64_t v10 = (unint64_t *)malloc_type_valloc(v9, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v19 = std::bad_alloc::bad_alloc(exception);
  }
  uint64_t v24 = off_1001AC608;
  uint64_t v27 = &v24;
  uint64_t v30 = v10;
  sub_100017FFC((uint64_t)v31, (uint64_t)&v24);
  sub_100017750(&v24);
  unint64_t v11 = v30;
  int v12 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  uint64_t v24 = (uint64_t (**)())v11;
  uint64_t v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v26 = v9;
  uint64_t v27 = a2;
  size_t v28 = v9;
  char v29 = 0;
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(void *)a1 + 88))(a1, &v24);
  if (v9 != v13)
  {
    unint64_t v20 = __cxa_allocate_exception(0x40uLL);
    uint64_t v21 = v20;
    if (v13 >= 0) {
      uint64_t v22 = 4294967291;
    }
    else {
      uint64_t v22 = v13;
    }
    *unint64_t v20 = &off_1001B6CA0;
    uint64_t v23 = std::generic_category();
    v21[1] = v22;
    uint64_t v21[2] = v23;
    *((unsigned char *)v21 + 24) = 0;
    *((unsigned char *)v21 + 48) = 0;
    v21[7] = "Can't load asif dir table";
  }
  unint64_t v14 = *v11;
  if (v6)
  {
    BOOL v15 = v11 + 1;
    do
    {
      unint64_t v16 = *v15++;
      *a5++ = bswap64(v16);
      --v6;
    }
    while (v6);
  }
  if (v25) {
    sub_100010A48(v25);
  }
  sub_1000176CC((uint64_t *)&v30, 0);
  sub_100017750(v31);
  return bswap64(v14);
}

void sub_1000E75A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000176CC((uint64_t *)va, 0);
  sub_100017750(v7);
  _Unwind_Resume(a1);
}

unint64_t sub_1000E75D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  unint64_t v10 = &v16;
  unint64_t v11 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = 0;
  uint64_t v12 = 8;
  uint64_t v13 = a2;
  uint64_t v14 = 8;
  char v15 = 0;
  LODWORD(a1) = (*(uint64_t (**)(uint64_t, unint64_t **))(*(void *)a1 + 88))(a1, &v10);
  if (a1 != 8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v8 = exception;
    if ((int)a1 >= 0) {
      a1 = 4294967291;
    }
    else {
      a1 = a1;
    }
    void *exception = &off_1001B6CA0;
    size_t v9 = std::generic_category();
    v8[1] = a1;
    v8[2] = v9;
    *((unsigned char *)v8 + 24) = 0;
    *((unsigned char *)v8 + 48) = 0;
    v8[7] = "Can't load asif dir version";
  }
  unint64_t v5 = bswap64(v16);
  unint64_t v16 = v5;
  if (v11) {
    sub_100010A48(v11);
  }
  return v5;
}

void sub_1000E76FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_100010A48(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000E7714(void *result, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v2 = "uninit";
      uint64_t v3 = 6;
      goto LABEL_3;
    case 1:
      uint64_t v2 = "fully";
      uint64_t v3 = 5;
      goto LABEL_3;
    case 2:
      uint64_t v2 = "unmapped";
      uint64_t v3 = 8;
      goto LABEL_3;
    case 3:
      uint64_t v2 = "has_bitmap";
      uint64_t v3 = 10;
LABEL_3:
      double result = sub_100003DF0(result, (uint64_t)v2, v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000E7794(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(void *)(*(void *)(a1 + 152) + 8 * (a2 / *(void *)(a1 + 80))) = a3 / *(unsigned int *)(a1 + 20);
  atomic_store(1u, (unsigned int *)(a1 + 3592));
}

void *sub_1000E77BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  v5[0] = off_1001ABF28;
  v5[1] = a2;
  v5[3] = v5;
  sub_1000E787C(v3, (uint64_t)v5);
  return sub_1000FC91C(v5);
}

void sub_1000E7868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000FC91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E787C(void *a1, uint64_t a2)
{
  if (a1[11])
  {
    char v4 = 0;
    unint64_t v5 = (uint64_t **)(a1 + 9);
    uint64_t v6 = (uint64_t **)(a1 + 10);
    do
    {
      uint64_t v7 = *v6;
      uint64_t v8 = *v6;
      size_t v9 = v6;
      if (*v6)
      {
        do
        {
          unint64_t v10 = (uint64_t **)v8;
          uint64_t v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v10 = (uint64_t **)v9[2];
          BOOL v11 = *v10 == (uint64_t *)v9;
          size_t v9 = v10;
        }
        while (v11);
      }
      if ((uint64_t *)((char *)v10[4] + *a1) != (uint64_t *)a1[12]) {
        break;
      }
      uint64_t v12 = (uint64_t *)v6;
      if (v7)
      {
        do
        {
          uint64_t v13 = v7;
          uint64_t v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)v12[2];
          BOOL v11 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (v11);
      }
      sub_1000464E4(v5, v13);
      operator delete(v13);
      uint64_t v14 = a1[11];
      a1[12] -= *a1;
      char v4 = 1;
    }
    while (v14);
    if ((v4 & 1) != 0 && *(void *)(a2 + 24))
    {
      if (sub_1000EC384(a2, a1[12]))
      {
        *(void *)&long long v15 = "space_allocators::FixedSize::trim_largest(const size_changed_fn_t &)";
        *((void *)&v15 + 1) = 41;
        int v16 = 16;
        sub_1000F8750(v17, &v15);
        sub_100003DF0(v18, (uint64_t)"trim largest: size change callback failed with ", 47);
        std::ostream::operator<<();
        std::ostream::~ostream();
        sub_1000F8948((uint64_t)v17);
        std::ios::~ios();
      }
    }
  }
}

void sub_1000E7A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000F8874((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000E7A14(_OWORD *a1, uint64_t a2)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) > 0x1FF) {
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x20uLL);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  void *exception = &off_1001AEAE8;
  exception[1] = "asif_header";
  exception[2] = 512;
  exception[3] = v4;
}

void sub_1000E7C94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1000E7CD0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  LODWORD(v14[0]) = 2003069043;
  sub_100090DEC((uint64_t)"header_signature", v4, v14, 1);
  *(_DWORD *)a1 = 2003069043;
  *(_DWORD *)(a1 + 4) = bswap32(*(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 8) = bswap32(*(_DWORD *)(a2 + 8));
  sub_1000FAAC0(v14, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v14[0];
  *(void *)(a1 + 16) = bswap64(*(void *)(a2 + 16));
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = bswap64(*(void *)(a2 + 48));
  *(void *)(a1 + 56) = bswap64(*(void *)(a2 + 56));
  *(_DWORD *)(a1 + 64) = bswap32(*(_DWORD *)(a2 + 64));
  *(_WORD *)(a1 + 68) = bswap32(*(unsigned __int16 *)(a2 + 68)) >> 16;
  double result = sub_1001041FC(v14, *(unsigned __int16 *)(a2 + 70));
  *(_WORD *)(a1 + 70) = v14[0];
  *(void *)(a1 + 72) = bswap64(*(void *)(a2 + 72));
  if (*(_DWORD *)(a1 + 4) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v14);
    sub_100003DF0(v14, (uint64_t)"Unsupported ASIF version ", 25);
    std::ostream::operator<<();
    sub_100010C3C((uint64_t)exception, (uint64_t)v14, 0xA1u);
  }
  if ((*(_DWORD *)(a1 + 8) - 1048577) <= 0xFFF0004E)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Invalid ASIF header size";
LABEL_15:
    unsigned int v12 = 152;
    goto LABEL_19;
  }
  unint64_t v6 = *(unsigned __int16 *)(a1 + 68);
  if (!*(_WORD *)(a1 + 68))
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Shadow block size is invalid (0)";
    goto LABEL_15;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 64);
  if (v7 < v6 || v7 % v6)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "ASIF max_write size in header exceed the limit";
LABEL_18:
    unsigned int v12 = 22;
LABEL_19:
    uint64_t v13 = (void *)sub_100003670((uint64_t)v9, (uint64_t)v10, v12);
  }
  if ((v6 & 0x1FF) != 0)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "ASIF block size isn't multiple of 512";
    goto LABEL_15;
  }
  unint64_t v8 = *(void *)(a1 + 56);
  if (v8 >= 0xFFFFFFFFFFFFFFFFLL / v6)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Max sector count is too large";
    goto LABEL_18;
  }
  if (v8 < *(void *)(a1 + 48))
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Sector count is too large";
    goto LABEL_18;
  }
  return result;
}

void sub_1000E7F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1000E7F7C(_OWORD *a1, uint64_t a2)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  *a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  a1[3] = *(_OWORD *)(a2 + 48);
  a1[4] = v4;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

uint64_t sub_1000E7FA8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(void *)(a2 + 16) = bswap64(*(void *)(a1 + 16));
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = bswap64(*(void *)(a1 + 48));
  *(void *)(a2 + 56) = bswap64(*(void *)(a1 + 56));
  *(_DWORD *)(a2 + 64) = bswap32(*(_DWORD *)(a1 + 64));
  *(_WORD *)(a2 + 68) = bswap32(*(unsigned __int16 *)(a1 + 68)) >> 16;
  *(_WORD *)(a2 + 70) = *(_WORD *)(a1 + 70);
  *(void *)(a2 + 72) = bswap64(*(void *)(a1 + 72));
  return a2 + 80;
}

uint64_t sub_1000E8044(uint64_t a1, _DWORD *a2, _OWORD *a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned int a7)
{
  *(_DWORD *)a1 = 2003069043;
  int v18 = 2003069043;
  sub_100090DEC((uint64_t)"header_signature", 2003069043, &v18, 1);
  *(void *)(a1 + 4) = 0x20000000001;
  *(_DWORD *)(a1 + 12) = *a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 64) = a6;
  *(_WORD *)(a1 + 68) = a7;
  sub_1001041FC((_WORD *)(a1 + 70), 0);
  *(void *)(a1 + 72) = 0;
  if (!is_mul_ok(a5, a7) || !is_mul_ok(a4, a7) || (unint64_t v14 = a4 * a7 + 2 * a6, __CFADD__(a4 * a7, 2 * a6)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v17 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"ASIF header calculation overflow", 0x16u);
  }
  if (v14 <= a5 * a7) {
    unint64_t v14 = a5 * a7;
  }
  *(void *)(a1 + 56) = v14 / a7;
  *(_OWORD *)(a1 + 32) = *a3;
  return a1;
}

void sub_1000E817C()
{
}

void sub_1000E8240()
{
}

uint64_t sub_1000E8264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = 1635018093;
  int v7 = 1635018093;
  sub_100090DEC((uint64_t)"header_signature", 1635018093, &v7, 1);
  *(_DWORD *)(a1 + 4) = 1;
  int v8 = 1;
  sub_100090DEC((uint64_t)"version_t", 1, &v8, 1);
  *(_DWORD *)(a1 + 8) = 512;
  int v9 = 512;
  sub_100090DEC((uint64_t)"header_size_t", 512, &v9, 1);
  *(void *)(a1 + 12) = a2;
  *(void *)(a1 + 20) = a3;
  return a1;
}

void *sub_1000E831C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v17 = std::bad_alloc::bad_alloc(exception);
  }
  v29[0] = (uint64_t)off_1001AC608;
  v29[3] = (uint64_t)v29;
  unint64_t v31 = v8;
  sub_100017FFC((uint64_t)v32, (uint64_t)v29);
  sub_100017750(v29);
  int v9 = v31;
  *unint64_t v31 = *(_DWORD *)a1;
  v9[1] = bswap32(*(_DWORD *)(a1 + 4));
  void v9[2] = bswap32(*(_DWORD *)(a1 + 8));
  *(void *)(v9 + 3) = bswap64(*(void *)(a1 + 12));
  *(void *)(v9 + 5) = bswap64(*(void *)(a1 + 20));
  unint64_t v10 = v31;
  int64_t v11 = (char *)v31 - (char *)(v9 + 7) + 512;
  if (v11 >= 1) {
    bzero(v9 + 7, v11);
  }
  uint64_t v12 = *((void *)sub_100143B90() + 1);
  *(void *)&long long v23 = v10;
  *((void *)&v23 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = 512;
  uint64_t v25 = a4;
  uint64_t v26 = 512;
  char v27 = 0;
  sub_10006395C(v29, &v23);
  if (*((void *)&v23 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v23 + 1));
  }
  sub_10002F8C8((uint64_t)v30, (uint64_t)&v23);
  sub_10002F51C((uint64_t)v30, (uint64_t)&v20);
  uint64_t v13 = sub_1000E57E8(a3, a2, (uint64_t *)&v23, (uint64_t)&v20, 0);
  if (v22) {
    sub_100010A48(v22);
  }
  if (v21) {
    sub_100010A48(v21);
  }
  if (v28) {
    sub_100010A48(v28);
  }
  if (*((void *)&v23 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v23 + 1));
  }
  if (v13 < 0)
  {
    uint64_t v14 = v13;
    if (v13)
    {
      int v18 = __cxa_allocate_exception(0x40uLL);
      *int v18 = &off_1001B6CA0;
      uint64_t v19 = std::generic_category();
      v18[1] = v14;
      void v18[2] = v19;
      *((unsigned char *)v18 + 24) = 0;
      *((unsigned char *)v18 + 48) = 0;
      v18[7] = "Failed to write metadata header";
    }
  }
  sub_1000175AC(v29);
  sub_1000176CC((uint64_t *)&v31, 0);
  return sub_100017750(v32);
}

void sub_1000E85A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  sub_1000175AC(&a49);
  sub_1000176CC((uint64_t *)(v50 - 96), 0);
  sub_100017750(v49);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E860C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  int v8 = malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v19 = std::bad_alloc::bad_alloc(exception);
  }
  v34[0] = (uint64_t)off_1001AC608;
  v34[3] = (uint64_t)v34;
  uint64_t v36 = v8;
  sub_100017FFC((uint64_t)v37, (uint64_t)v34);
  sub_100017750(v34);
  uint64_t v9 = (uint64_t)v36;
  uint64_t v10 = *((void *)sub_100143B90() + 1);
  *(void *)&long long v27 = v9;
  *((void *)&v27 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = 512;
  uint64_t v29 = a4;
  uint64_t v30 = 512;
  char v31 = 0;
  sub_10006395C(v34, &v27);
  if (*((void *)&v27 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v27 + 1));
  }
  sub_10002F51C((uint64_t)v35, (uint64_t)&v27);
  unint64_t v11 = *(void *)(a3 + 120);
  unint64_t v12 = v33;
  if (v32) {
    sub_100010A48(v32);
  }
  if (*((void *)&v27 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v27 + 1));
  }
  if (v12 > v11)
  {
    uint64_t v20 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v20 = &off_1001B6CA0;
    uint64_t v21 = std::generic_category();
    v20[1] = 152;
    v20[2] = v21;
    *((unsigned char *)v20 + 24) = 0;
    *((unsigned char *)v20 + 48) = 0;
    v20[7] = "Metadata offset is invalid";
  }
  sub_10002F8C8((uint64_t)v35, (uint64_t)&v27);
  sub_10002F51C((uint64_t)v35, (uint64_t)&v24);
  uint64_t v13 = sub_1000E57E8(a3, a2, (uint64_t *)&v27, (uint64_t)&v24, 1);
  if (v26) {
    sub_100010A48(v26);
  }
  if (v25) {
    sub_100010A48(v25);
  }
  if (v32) {
    sub_100010A48(v32);
  }
  if (*((void *)&v27 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v27 + 1));
  }
  if (v13 < 0 && v13)
  {
    uint64_t v22 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v22 = &off_1001B6CA0;
    long long v23 = std::generic_category();
    v22[1] = v13;
    v22[2] = v23;
    *((unsigned char *)v22 + 24) = 0;
    *((unsigned char *)v22 + 48) = 0;
    v22[7] = "ASIF meta header failed to read";
  }
  sub_1000E8A04(a1, (uint64_t)v36, a3);
  for (uint64_t i = 28; i != 512; ++i)
  {
    if (v36[i])
    {
      int v16 = __cxa_allocate_exception(0x40uLL);
      void *v16 = &off_1001B6CA0;
      unint64_t v17 = std::generic_category();
      v16[1] = 152;
      void v16[2] = v17;
      *((unsigned char *)v16 + 24) = 0;
      *((unsigned char *)v16 + 48) = 0;
      v16[7] = "ASIF meta header trailer isn't equal to zero";
    }
  }
  sub_1000175AC(v34);
  sub_1000176CC((uint64_t *)&v36, 0);
  sub_100017750(v37);
  return a1;
}

void sub_1000E8990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  sub_100011F6C((uint64_t)&a9);
  sub_100011F6C((uint64_t)&a29);
  sub_1000175AC(&a49);
  sub_1000176CC((uint64_t *)(v50 - 112), 0);
  sub_100017750(v49);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E8A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a2;
  int v14 = 1635018093;
  sub_100090DEC((uint64_t)"header_signature", v6, &v14, 1);
  *(_DWORD *)a1 = 1635018093;
  int v7 = bswap32(*(_DWORD *)(a2 + 4));
  int v15 = 1;
  sub_100090DEC((uint64_t)"version_t", v7, &v15, 1);
  *(_DWORD *)(a1 + 4) = 1;
  int v8 = bswap32(*(_DWORD *)(a2 + 8));
  int v16 = 512;
  uint64_t result = sub_100090DEC((uint64_t)"header_size_t", v8, &v16, 1);
  *(_DWORD *)(a1 + 8) = 512;
  unint64_t v10 = bswap64(*(void *)(a2 + 12));
  *(void *)(a1 + 12) = v10;
  *(void *)(a1 + 20) = bswap64(*(void *)(a2 + 20));
  if (v10 > (unint64_t)*(unsigned int *)(a3 + 20) - 512)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v12 = "ASIF meta header size exceeds its maximum";
    goto LABEL_6;
  }
  if (v10 % *(unsigned __int16 *)(a3 + 18))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v12 = "ASIF meta header data is unaligned";
LABEL_6:
    uint64_t v13 = (void *)sub_100003670((uint64_t)exception, (uint64_t)v12, 0x98u);
  }
  return result;
}

uint64_t sub_1000E8B3C(void *a1, uint64_t a2)
{
  if (!*(void *)(*a1 + 72)) {
    return 0;
  }
  sub_1000E8BC8(a1, a2, (uint64_t *)&v4);
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 2);
  if (v4)
  {
    unint64_t v5 = v4;
    operator delete(v4);
  }
  return v2;
}

uint64_t sub_1000E8BC8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = a1[1];
  unint64_t v15 = *(void *)(*a1 + 72) * *(unsigned int *)(v6 + 20);
  uint64_t result = sub_1000FA680(a3, a2, v6, (uint64_t *)&v15);
LABEL_2:
  for (unint64_t i = result; ; a3[1] = i)
  {
    a3[1] = i;
    if (!*(void *)(i - 8)) {
      break;
    }
    unint64_t v15 = 0;
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    unint64_t v11 = *(void *)(i - 8) * *(unsigned int *)(v9 + 20);
    unint64_t v15 = v11;
    uint64_t v12 = *(unsigned __int16 *)(v9 + 18);
    if (v11 < *(void *)(v10 + 48) * v12 || *(void *)(v10 + 56) * v12 <= v11)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001B6CA0;
      int v14 = std::generic_category();
      exception[1] = 152;
      exception[2] = v14;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "ASIF: metadata header out of range";
    }
    if (i >= a3[2])
    {
      uint64_t result = sub_1000FA844(a3, a2, v9, (uint64_t *)&v15);
      goto LABEL_2;
    }
    uint64_t result = sub_1000E860C(i, a2, v9, v11);
    i += 28;
  }
  return result;
}

void sub_1000E8D18(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E8D48(void *a1@<X0>, uint64_t a2@<X1>, CFMutableDictionaryRef *a3@<X8>)
{
  if (*(void *)(*a1 + 72))
  {
    sub_1000E9394(a1, a2, &v24);
    uint64_t v6 = (uint64_t *)v24;
    int v7 = (uint64_t *)v25;
    if (v24 == v25) {
      goto LABEL_18;
    }
    do
    {
      sub_10003B48C((uint64_t *)&keys, v6);
      uint64_t v8 = a1[1];
      sub_10002F8C8((uint64_t)v32, (uint64_t)&values);
      sub_10002F51C((uint64_t)v32, (uint64_t)&v21);
      uint64_t v9 = sub_1000E57E8(v8, a2, (uint64_t *)&values, (uint64_t)&v21, 1);
      if (v23) {
        sub_100010A48(v23);
      }
      if (v22) {
        sub_100010A48(v22);
      }
      if (v29) {
        sub_100010A48(v29);
      }
      if (v27) {
        sub_100010A48(v27);
      }
      if (v9 < 0 && v9)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        void *exception = &off_1001B6CA0;
        int v18 = std::generic_category();
        exception[1] = v9;
        exception[2] = v18;
        *((unsigned char *)exception + 24) = 0;
        *((unsigned char *)exception + 48) = 0;
        exception[7] = "ASIF: failed to deserialize metadata";
      }
      sub_1000175AC(&keys);
      v6 += 6;
    }
    while (v6 != v7);
    uint64_t v10 = v24;
    if (v24 == v25)
    {
LABEL_18:
      int v11 = 0;
    }
    else
    {
      int v11 = 0;
      do
      {
        v11 += LODWORD(v10->__shared_weak_owners_);
        v10 += 2;
      }
      while (v10 != v25);
    }
    CFIndex v12 = v11;
    uint64_t v13 = malloc_type_valloc(v11, 0xF8ED6DDuLL);
    if (!v13)
    {
      uint64_t v19 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v20 = std::bad_alloc::bad_alloc(v19);
    }
    values = off_1001AC608;
    p_values = &values;
    keys = v13;
    sub_100017FFC((uint64_t)v31, (uint64_t)&values);
    sub_100017750(&values);
    int v14 = v24;
    unint64_t v15 = v25;
    if (v24 != v25)
    {
      int v16 = 0;
      do
      {
        memcpy((char *)keys + v16, v14->__vftable, v14->__shared_weak_owners_);
        v16 += LODWORD(v14->__shared_weak_owners_);
        v14 += 2;
      }
      while (v14 != v15);
    }
    sub_10011AF64((UInt8 *)keys, v12, a3);
    sub_1000176CC((uint64_t *)&keys, 0);
    sub_100017750(v31);
    keys = &v24;
    sub_1000F9304((void ***)&keys);
  }
  else
  {
    keys = @"internal metadata";
    v31[0] = @"user metadata";
    sub_10011AD9C((CFMutableDictionaryRef *)&v21);
    sub_10011AD9C((CFMutableDictionaryRef *)&v24);
    values = v21;
    long long v27 = v24;
    sub_10011ACFC((const void **)&keys, (const void **)&values, 2, a3);
    sub_10002AB08((const void **)&v24);
    sub_10002AB08((const void **)&v21);
  }
}

void sub_1000E9058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29)
{
}

const void **sub_1000E92C4@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  keys[0] = @"internal metadata";
  keys[1] = @"user metadata";
  sub_10011AD9C((CFMutableDictionaryRef *)&v4);
  sub_10011AD9C((CFMutableDictionaryRef *)&v3);
  values[0] = v4;
  values[1] = v3;
  sub_10011ACFC((const void **)keys, (const void **)values, 2, a1);
  sub_10002AB08((const void **)&v3);
  return sub_10002AB08((const void **)&v4);
}

void sub_1000E9368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v3 = va_arg(va1, const void *);
  sub_10002AB08((const void **)va);
  sub_10002AB08((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1000E9394(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_1000E8BC8(a1, a2, &v5);
  if (v6 != (void *)v5)
  {
    if (malloc_type_valloc(*(void *)(v5 + 12), 0xF1341ED1uLL)) {
      operator new();
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    long long v4 = std::bad_alloc::bad_alloc(exception);
  }
  if (v6) {
    operator delete(v6);
  }
}

void sub_1000E9554(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void sub_1000E958C()
{
}

void *sub_1000E95C4(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100104318((uint64_t)a1, a2);
  *a1 = off_1001AEB20;
  a1[45] = &off_1001AEC20;
  a1[46] = &off_1001AEC48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AEB20;
  a1[45] = off_1001AEBA8;
  a1[46] = off_1001AEBD0;
  return a1;
}

void sub_1000E96C4(_Unwind_Exception *a1)
{
  sub_1000F9634(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E96E8(uint64_t a1)
{
  return a1;
}

void *sub_1000E972C(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100104288((uint64_t)a1, a2);
  *a1 = off_1001AED40;
  a1[45] = &off_1001AEE40;
  a1[46] = &off_1001AEE68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AED40;
  a1[45] = off_1001AEDC8;
  a1[46] = off_1001AEDF0;
  return a1;
}

void sub_1000E982C(_Unwind_Exception *a1)
{
  sub_1000F9DA8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E9850(uint64_t a1)
{
  return a1;
}

const void **sub_1000E9894(const void **result, uint64_t a2, CFPropertyListRef propertyList)
{
  if (propertyList)
  {
    long long v4 = (uint64_t *)result;
    uint64_t v5 = *result;
    uint64_t v6 = (unsigned int *)result[1];
    unint64_t v7 = v6[5];
    unint64_t v8 = *((void *)*result + 9) * v7;
    uint64_t v9 = *((unsigned __int16 *)v6 + 9);
    if (!v8) {
      unint64_t v8 = (v5[7] * v9 - v7) / v7 * v7;
    }
    if (v8 < v5[6] * v9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v41 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Not enough space for metadata", 0x1Cu);
    }
    sub_10011ADE4(propertyList, (const __CFData **)v60);
    unint64_t v10 = (unint64_t)v60[1];
    CFTypeRef cf = v60[0];
    v60[0] = 0;
    sub_1000807A8(v60);
    uint64_t v11 = *v4;
    uint64_t v12 = v4[1];
    uint64_t v13 = *(unsigned int *)(v12 + 20);
    size_t v14 = v13 - 512;
    unint64_t v48 = v10;
    unint64_t v15 = v10 + v13 - 512 - 1;
    unint64_t v16 = v15 / (v13 - 512);
    if (v16 * v13 > v8 + v13 - *(void *)(*v4 + 48) * *(unsigned __int16 *)(v12 + 18))
    {
      uint64_t v42 = __cxa_allocate_exception(0x40uLL);
      void *v42 = &off_1001B6CA0;
      uint64_t v43 = std::generic_category();
      v42[1] = 28;
      v42[2] = v43;
      *((unsigned char *)v42 + 24) = 0;
      *((unsigned char *)v42 + 48) = 0;
      v42[7] = "Not enough space for metadata";
    }
    if (v14 <= v15)
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = v16 - 1;
      if (v16 <= 1) {
        unint64_t v16 = 1;
      }
      unint64_t v45 = v16;
      unint64_t v46 = v19;
      size_t v44 = v10 % v14;
      size_t v47 = v13 - 512;
      do
      {
        if (v19 == v18)
        {
          uint64_t v20 = 0;
          uint64_t v21 = v4[1];
          uint64_t v22 = v8 - v19 * *(unsigned int *)(v21 + 20);
          size_t v14 = v44;
        }
        else
        {
          uint64_t v21 = v4[1];
          unint64_t v23 = *(unsigned int *)(v21 + 20);
          uint64_t v22 = v8 - v18 * v23;
          uint64_t v20 = (v22 - v23) / v23;
        }
        size_t v24 = v14 - 1;
        sub_1000E8264((uint64_t)v58, (v14 - 1 + *(unsigned __int16 *)(v21 + 18))/ *(unsigned __int16 *)(v21 + 18)* *(unsigned __int16 *)(v21 + 18), v20);
        sub_1000E831C((uint64_t)v58, a2, v4[1], v22);
        uint64_t v25 = a2;
        if (v48 - v14 >= v17) {
          unint64_t v26 = v17;
        }
        else {
          unint64_t v26 = v48 - v14;
        }
        unint64_t v27 = *(unsigned __int16 *)(v4[1] + 18);
        uint64_t v28 = (char *)malloc_type_valloc((v24 + v27) / v27 * v27, 0xF8ED6DDuLL);
        if (!v28)
        {
          uint64_t v36 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          uint64_t v37 = std::bad_alloc::bad_alloc(v36);
        }
        v60[0] = off_1001AC608;
        v60[3] = v60;
        long long v62 = v28;
        sub_100017FFC((uint64_t)v63, (uint64_t)v60);
        sub_100017750(v60);
        uint64_t v29 = v62;
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        memcpy(v29, &BytePtr[v26], v14);
        unint64_t v31 = *(unsigned __int16 *)(v4[1] + 18);
        if (v14 % v31)
        {
          bzero(&v62[v14], v31 - v14 % v31);
          unint64_t v31 = *(unsigned __int16 *)(v4[1] + 18);
        }
        uint64_t v32 = (uint64_t)v62;
        uint64_t v33 = *((void *)sub_100143B90() + 1);
        *(void *)&long long v52 = v32;
        *((void *)&v52 + 1) = v33;
        if (v33) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        }
        size_t v53 = (v24 + v31) / v31 * v31;
        uint64_t v54 = v22 + 512;
        size_t v55 = v53;
        char v56 = 0;
        sub_10006395C((uint64_t *)v60, &v52);
        a2 = v25;
        if (*((void *)&v52 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v52 + 1));
        }
        uint64_t v34 = v4[1];
        sub_10002F8C8((uint64_t)v61, (uint64_t)&v52);
        sub_10002F51C((uint64_t)v61, (uint64_t)v49);
        uint64_t v35 = sub_1000E57E8(v34, v25, (uint64_t *)&v52, (uint64_t)v49, 0);
        if (v51) {
          sub_100010A48(v51);
        }
        if (v50) {
          sub_100010A48(v50);
        }
        if (v57) {
          sub_100010A48(v57);
        }
        if (*((void *)&v52 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v52 + 1));
        }
        if (v35 < 0 && v35)
        {
          uint64_t v38 = __cxa_allocate_exception(0x40uLL);
          *uint64_t v38 = &off_1001B6CA0;
          uint64_t v39 = std::generic_category();
          v38[1] = v35;
          v38[2] = v39;
          *((unsigned char *)v38 + 24) = 0;
          *((unsigned char *)v38 + 48) = 0;
          v38[7] = "Failed to write metadata";
        }
        sub_1000175AC(v60);
        sub_1000176CC((uint64_t *)&v62, 0);
        sub_100017750(v63);
        ++v18;
        unint64_t v19 = v46;
        size_t v14 = v47;
        v17 += v47;
      }
      while (v45 != v18);
      uint64_t v11 = *v4;
    }
    if (!*(void *)(v11 + 72))
    {
      *(void *)(v11 + 72) = v8 / *(unsigned int *)(v4[1] + 20);
      sub_1000E817C();
    }
    return sub_1000807A8(&cf);
  }
  return result;
}

void sub_1000E9E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const void *a61,const void *a62)
{
}

void sub_1000E9EBC(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  size_t v14 = (uint64_t *)&v15;
  if (*(void *)sub_1000D9030(a1 + 32, *(void *)(a1 + 176)))
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
    uint64_t v5 = *(void *)(a1 + 352);
    uint64_t v6 = *(void *)(a1 + 360);
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = *(void *)(v5 + 8 * v8) * *(unsigned int *)(a1 + 96);
        unint64_t v13 = v9;
        if (v9)
        {
          sub_1000EA070((atomic_ullong *)(a1 + 200), v4, v8, v9, (uint64_t)&v14, (uint64_t)v14);
          sub_1000ED1B0(&v14, &v13, (uint64_t *)&v13);
        }
        ++v8;
        v7 += 8;
      }
      while (v5 + v7 != v6);
    }
    unint64_t v10 = v15;
    *a2 = v14;
    a2[1] = v10;
    uint64_t v11 = a2 + 1;
    uint64_t v12 = v16;
    a2[2] = v16;
    if (v12)
    {
      void v10[2] = v11;
      size_t v14 = (uint64_t *)&v15;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      if (!v4) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    *a2 = v11;
    if (v4) {
LABEL_12:
    }
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = a2 + 1;
  }
LABEL_13:
  sub_10002A594((uint64_t)&v14, v15);
}

void sub_1000EA040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

atomic_ullong *sub_1000EA070(atomic_ullong *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1000E4A20(a1, a2, a3, a4, 0, 1, &v11);
  if (v11 && !*(unsigned char *)(v11 + 520))
  {
    if (*(unsigned char *)(v11 + 400)) {
      uint64_t v9 = v11 + 40;
    }
    else {
      uint64_t v9 = 0;
    }
    sub_1001043A8(v9, a2, a5, a6);
  }
  return sub_1000D90F8(&v11);
}

void sub_1000EA100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000D90F8((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void *sub_1000EA11C(void *result, void *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v7 = result;
  if (a2[2])
  {
    uint64_t v8 = a2 + 1;
    uint64_t v9 = (void *)a2[1];
    if (v9)
    {
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        unint64_t v10 = (void *)v8[2];
        BOOL v11 = *v10 == (void)v8;
        uint64_t v8 = v10;
      }
      while (v11);
    }
    unint64_t v12 = v10[4] + a4;
    uint64_t result = (void *)(*(uint64_t (**)(void))(result[25] + 16))();
    if (result[12] <= v12) {
      result[12] = v12;
    }
  }
  unint64_t v15 = (void *)*a2;
  unint64_t v13 = a2 + 1;
  size_t v14 = v15;
  if (v15 != v13)
  {
    do
    {
      uint64_t v16 = v14[4];
      atomic_fetch_add(v7 + 26, 1uLL);
      long long v21 = a3;
      uint64_t v22 = a4;
      if ((v16 - a3) % a4) {
        unint64_t v17 = (v16 - a3) / a4 + 1;
      }
      else {
        unint64_t v17 = (v16 - a3) / a4;
      }
      v20[0] = a3;
      v20[1] = v17;
      v20[2] = a4;
      uint64_t result = sub_1000EA274((uint64_t)(v7 + 25), &v21, (uint64_t)v20);
      uint64_t v18 = (void *)v14[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v14[2];
          BOOL v11 = *v19 == (void)v14;
          size_t v14 = v19;
        }
        while (!v11);
      }
      a3 = v16 + a4;
      size_t v14 = v19;
    }
    while (v19 != v13);
  }
  return result;
}

void *sub_1000EA274(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  long long v7 = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  v11[3] = 0;
  sub_100104528(v5, (uint64_t *)&v9, &v7, (uint64_t)v11);
  return sub_1000FC91C(v11);
}

void sub_1000EA32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000FC91C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000EA340(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001ABB08;
  *(void *)(a1 + 16) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 24) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 32) = 2003069043;
  *(void *)(a1 + 36) = *(void *)(a3 + 4);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 16);
  long long v10 = *(_OWORD *)(a3 + 32);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 94) = *(void *)(a3 + 62);
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 102) = 0;
  *(void *)(a1 + 104) = *(void *)(a3 + 72);
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a4;
  uint64_t v12 = *a6;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a6 + 2);
  *(void *)(a1 + 184) = v12;
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v14 = *(unsigned __int16 *)(a3 + 68);
  unsigned int v15 = *(_DWORD *)(a3 + 64);
  v16[0] = off_1001AEFB8;
  v16[1] = a1;
  v16[3] = v16;
  sub_1000E6CE0(a1 + 200, a1, v13 * v14, v15, v14, a5, 2);
}

void sub_1000EA638(_Unwind_Exception *a1)
{
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  sub_1000DD9C0(v3);
  std::mutex::~mutex(v2);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    sub_100010A48(v6);
  }
  _Unwind_Resume(a1);
}

void sub_1000EA6C4(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, void *a6, uint64_t *a7, _OWORD *a8)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001ABB08;
  *(void *)(a1 + 16) = *a6;
  uint64_t v15 = a6[1];
  *(void *)(a1 + 24) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000FAAC0(&v17, *((unsigned __int8 *)a7 + 1));
  sub_1000E8044(a1 + 32, &v17, a8, a4, a5, a3, a2);
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v16 = *a7;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a7 + 2);
  *(void *)(a1 + 184) = v16;
  v18[0] = off_1001AEFB8;
  v18[1] = a1;
  unint64_t v18[3] = v18;
  sub_1000E6CE0(a1 + 200, a1, a2 * a5, a3, a2, 0x200u, 2);
}

void sub_1000EA9E4(_Unwind_Exception *a1)
{
  sub_1000DD9C0(v3);
  std::mutex::~mutex(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 24);
  if (v5) {
    sub_100010A48(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000EAA30(const void **a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = (*((uint64_t (**)(const void **))*a1 + 17))(a1);
  sub_1000E8D48(a1 + 507, v6, &theDict);
  long long v7 = CFDictionaryGetValue(theDict, @"internal metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    unint64_t v19 = std::generic_category();
    exception[1] = 152;
    exception[2] = v19;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  if (CFGetTypeID(v7) != TypeID)
  {
    uint64_t v20 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    long long v21 = sub_10002A5EC(v20);
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v7);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 1, (CFDictionaryRef)v7);
  value = MutableCopy;
  long long v11 = "ASIF: can't copy metadata to mutable copy";
  if (!MutableCopy)
  {
    uint64_t v22 = 4294967284;
    goto LABEL_14;
  }
  uint64_t v12 = operator new(0x28uLL);
  __p = v12;
  long long v30 = xmmword_100166550;
  *uint64_t v12 = 0u;
  v12[1] = 0u;
  *(void *)((char *)v12 + 29) = 0;
  sub_10007BBE4(a3, v12);
  BOOL v13 = sub_10011B33C(MutableCopy, a2, (uint64_t)&__p);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  if (!v13)
  {
    long long v11 = "ASIF: can't set requested uuid";
    uint64_t v22 = 150;
LABEL_14:
    unint64_t v23 = __cxa_allocate_exception(0x40uLL);
    *unint64_t v23 = &off_1001B6CA0;
    size_t v24 = std::generic_category();
    v23[1] = v22;
    v23[2] = v24;
    *((unsigned char *)v23 + 24) = 0;
    *((unsigned char *)v23 + 48) = 0;
    v23[7] = v11;
  }
  CFIndex v14 = CFDictionaryGetCount(theDict);
  CFMutableDictionaryRef v15 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, v14 + 1, theDict);
  __p = v15;
  if (!v15)
  {
    uint64_t v25 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v25 = &off_1001B6CA0;
    unint64_t v26 = std::generic_category();
    v25[1] = 4294967284;
    void v25[2] = v26;
    *((unsigned char *)v25 + 24) = 0;
    *((unsigned char *)v25 + 48) = 0;
    v25[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(v15, @"internal metadata", value);
  sub_1000E9894(a1 + 507, v6, __p);
  unsigned int v16 = (*((uint64_t (**)(const void **, uint64_t, void))*a1 + 22))(a1, v6, 0);
  if (v16)
  {
    unint64_t v27 = __cxa_allocate_exception(0x40uLL);
    void *v27 = &off_1001B6CA0;
    uint64_t v28 = std::generic_category();
    v27[1] = v16;
    v27[2] = v28;
    *((unsigned char *)v27 + 24) = 0;
    *((unsigned char *)v27 + 48) = 0;
    v27[7] = "ASIF: failed to write metadata";
  }
  sub_10002AB08((const void **)&__p);
  sub_10002AB08((const void **)&value);
  sub_100010A14((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
}

void sub_1000EAE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  __cxa_free_exception(v19);
  sub_100010A14(&a18);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
  }
  _Unwind_Resume(a1);
}

void sub_1000EAEDC(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, void *a6, uint64_t *a7, _OWORD *a8)
{
}

uint64_t sub_1000EAEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  int v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = 0;
  char v8 = 1;
  do
  {
    char v9 = v8;
    uint64_t v10 = *(void *)sub_1000D9030(a2, v4);
    if (v10)
    {
      int64_t v11 = sub_1000E75D4(a1, v10);
      if (!v5 || v6 < v11)
      {
        int v5 = 1;
        uint64_t v7 = v4;
        int64_t v6 = v11;
      }
    }
    char v8 = 0;
    uint64_t v4 = 1;
  }
  while ((v9 & 1) != 0);
  return v7;
}

uint64_t sub_1000EAF98(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  uint64_t v3 = (std::once_flag::_State_type *)(a1 + 4072);
  v5[0] = a1;
  v5[1] = &v6;
  v5[2] = a2;
  if (atomic_load_explicit((atomic_ullong *volatile)v3, memory_order_acquire) != -1)
  {
    char v8 = v5;
    uint64_t v7 = &v8;
    std::__call_once(v3, &v7, (void (__cdecl *)(void *))sub_1001046D0);
  }
  if (v6 < 0) {
    return v6;
  }
  else {
    return -v6;
  }
}

uint64_t sub_1000EB00C(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (std::mutex *)(a1 + 112);
  std::mutex::lock((std::mutex *)(a1 + 112));
  uint64_t v7 = *(uint64_t (****)())sub_1000D9030(a1 + 32, *(void *)(a1 + 176));
  char v8 = v7;
  if (!v7)
  {
    unint64_t v9 = *(unsigned __int16 *)(a1 + 100);
    uint64_t v10 = *(void *)(a1 + 176);
    uint64_t v11 = *(void *)(a1 + 320);
    unint64_t v12 = *(void *)(a1 + 280);
    BOOL v13 = (void *)sub_1000D9030(a1 + 32, v10);
    char v8 = (uint64_t (***)())(v9
                                    + 511
                                    - ((int)v9 + 511) % v9
                                    + (8 * ((v11 + v12 - 1) / v12) + v9 + 7) / v9 * v9 * v10);
    *BOOL v13 = v8;
  }
  uint64_t v14 = sub_1000E6AA0(a1 + 200, a2, v8);
  uint64_t v15 = v14;
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 == 1)
    {
      uint64_t v16 = *(void *)(a1 + 176);
      if (v16 == 1) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v16 + 1;
      }
      *(void *)(a1 + 176) = v17;
    }
    if (v7)
    {
      uint64_t v15 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 2 * (a3 == 2));
    }
    else
    {
      uint64_t v15 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
      if (!v15) {
        sub_1000E817C();
      }
    }
  }
  std::mutex::unlock(v6);
  return v15;
}

void sub_1000EB194(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000EB1D8()
{
}

uint64_t sub_1000EB278@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 136))(a1);
  sub_1000E8D48(a1 + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, @"user metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      uint64_t v10 = sub_10002A5EC(exception);
    }
    CFTypeID v7 = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != v7)
    {
      uint64_t v11 = __cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      unint64_t v12 = sub_10002A5EC(v11);
    }
    CFRetain(Value);
    *a2 = Value;
  }
  else
  {
    sub_10011AD9C((CFMutableDictionaryRef *)&v13);
    *a2 = v13;
    BOOL v13 = 0;
    sub_10002AB08(&v13);
  }
  sub_100010A14((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
}

void sub_1000EB418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v11);
  sub_100010A14(&a10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000EB47C(const void **a1, const void *a2)
{
  uint64_t v4 = (*((uint64_t (**)(const void **))*a1 + 17))(a1);
  sub_1000E8D48(a1 + 507, v4, &theDict);
  if (!theDict)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    uint64_t v10 = std::generic_category();
    exception[1] = 4294967284;
    exception[2] = v10;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "ASIF: can't read/allocate asif metadata";
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count, theDict);
  CFPropertyListRef propertyList = MutableCopy;
  if (!MutableCopy)
  {
    uint64_t v11 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v11 = &off_1001B6CA0;
    unint64_t v12 = std::generic_category();
    v11[1] = 4294967284;
    v11[2] = v12;
    *((unsigned char *)v11 + 24) = 0;
    *((unsigned char *)v11 + 48) = 0;
    v11[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(MutableCopy, @"user metadata", a2);
  sub_1000E9894(a1 + 507, v4, propertyList);
  unsigned int v7 = (*((uint64_t (**)(const void **, uint64_t, uint64_t))*a1 + 22))(a1, v4, 2);
  if (v7)
  {
    BOOL v13 = __cxa_allocate_exception(0x40uLL);
    *BOOL v13 = &off_1001B6CA0;
    uint64_t v14 = std::generic_category();
    v13[1] = v7;
    void v13[2] = v14;
    *((unsigned char *)v13 + 24) = 0;
    *((unsigned char *)v13 + 48) = 0;
    v13[7] = "ASIF: failed to write metadata";
  }
  sub_10002AB08(&propertyList);
  sub_100010A14((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
}

void sub_1000EB6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100010A14((const void **)va);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000EB750(void *a1, const void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 136))(a1);
  sub_1000E8D48(a1 + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, @"internal metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    uint64_t v11 = std::generic_category();
    exception[1] = 152;
    exception[2] = v11;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  if (CFGetTypeID(Value) != TypeID)
  {
    unint64_t v12 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(Value);
    BOOL v13 = sub_10002A5EC(v12);
  }
  CFStringRef v7 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, a2);
  CFTypeID v8 = CFStringGetTypeID();
  if (v7)
  {
    if (CFGetTypeID(v7) == v8) {
      sub_10011A9D0(v7);
    }
    uint64_t v14 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    uint64_t v15 = sub_10002A5EC(v14);
  }
  sub_100010A14((const void **)&theDict);
  (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  return 0;
}

void sub_1000EB9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, const void *a17)
{
  __cxa_free_exception(v18);
  sub_100010A14(&a17);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000EBA24(const void **a1, uint64_t a2)
{
  return sub_1000EAA30(a1, @"source uuid", a2);
}

uint64_t sub_1000EBA34(void *a1)
{
  return sub_1000EB750(a1, @"stable uuid");
}

uint64_t sub_1000EBA40(void *a1)
{
  return sub_1000EB750(a1, @"source uuid");
}

uint64_t sub_1000EBA4C(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_1000EBA60(uint64_t a1)
{
  *(void *)a1 = off_1001ABB08;
  sub_1000DD9C0(a1 + 200);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void sub_1000EBAB8(uint64_t a1)
{
  *(void *)a1 = off_1001ABB08;
  sub_1000DD9C0(a1 + 200);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_100010A48(v2);
  }

  operator delete();
}

uint64_t sub_1000EBB30(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 218);
}

uint64_t sub_1000EBB38(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_1000EBB40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

void sub_1000EBB68()
{
}

void sub_1000EBBDC()
{
}

uint64_t sub_1000EBC00(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B4450((uint64_t)a1, a2);
  if (!v4)
  {
    unint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    unint64_t v6 = (a2 + v5 - 1) / v5;
    if (v6 <= a1[11])
    {
      uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 136))(a1);
      uint64_t v8 = a1[11];
      if (v8 - v6 >= sub_1000E8B3C(a1 + 507, v7))
      {
        a1[10] = v6;
        sub_1000E817C();
      }
      uint64_t v4 = 4294967269;
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    else
    {
      return 4294967269;
    }
  }
  return v4;
}

void sub_1000EBD40(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100146C04(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EBD58()
{
  return 1;
}

uint64_t sub_1000EBD60()
{
  return 1;
}

void sub_1000EBD68()
{
}

void sub_1000EBDF0()
{
}

uint64_t sub_1000EBE14(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = ((*(void *)(a4 + 144) - a3[18]) & ~((*(void *)(a4 + 144) - a3[18]) >> 63)) + a3[3];
  uint64_t v9 = a1[10];
  if (v8 > (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v9) {
    return -34;
  }
  else {
    return sub_1000E57E8((uint64_t)(a1 + 25), a2, a3, a4, 1);
  }
}

uint64_t sub_1000EBEEC(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = ((*(void *)(a4 + 144) - a3[18]) & ~((*(void *)(a4 + 144) - a3[18]) >> 63)) + a3[3];
  uint64_t v9 = a1[10];
  if (v8 > (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v9) {
    return -34;
  }
  int v10 = sub_1000EAF98((uint64_t)a1, a2 + 16);
  if (!v10) {
    return sub_1000E57E8((uint64_t)(a1 + 25), a2, a3, a4, 0);
  }
  if (v10 >= 0) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = -v10;
  }
  return -v11;
}

uint64_t sub_1000EBFE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v8 = (void *)(a3 + 8);
    uint64_t v9 = a4;
    while (1)
    {
      uint64_t v10 = *v8 + *(v8 - 1);
      unint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v10;
      uint64_t v12 = a1[10];
      if (v11 > (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v12) {
        return 4294967262;
      }
      v8 += 2;
      if (!--v9) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = sub_1000EAF98((uint64_t)a1, a2 + 16);
    if (!result) {
      return sub_1000E67AC((uint64_t)(a1 + 25), a2, a3, a4);
    }
  }
  return result;
}

void sub_1000EC100()
{
}

void sub_1000EC188()
{
}

uint64_t sub_1000EC19C(uint64_t a1)
{
  return a1 + 176;
}

atomic_ullong *sub_1000EC1A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  return sub_1000FAB50(a1 + 2080, a2, a3, a4);
}

void *sub_1000EC1AC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10009415C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000EC208(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EC224(uint64_t a1, uint64_t a2)
{
  unint64_t v11 = (std::mutex *)(a1 + 8);
  char v12 = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(void *)(a1 + 88))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 72);
    uint64_t v5 = v4[4];
    sub_1000464E4((uint64_t **)(a1 + 72), v4);
    operator delete(v4);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = *(void *)a1 + v5;
    sub_100042B98((uint64_t)&v11);
    if (*(void *)(a2 + 24) && sub_1000EC384(a2, *(void *)a1 + v5))
    {
      *(void *)&long long v7 = "space_allocators::FixedSize::allocate(const size_changed_fn_t &)";
      *((void *)&v7 + 1) = 37;
      int v8 = 16;
      sub_1000EC3D8(v9, &v7);
      sub_100003DF0(v10, (uint64_t)"allocated: size change callback failed with ", 44);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_1000EC5D0((uint64_t)v9);
      std::ios::~ios();
    }
  }
  if (v12) {
    std::mutex::unlock(v11);
  }
  return v5;
}

void sub_1000EC350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (*(unsigned char *)(v12 - 40)) {
    std::mutex::unlock(*(std::mutex **)(v12 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EC384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1000EC3D8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000EC540((uint64_t)a1, a2);
  *a1 = off_1001ABC80;
  a1[45] = &off_1001ABD80;
  a1[46] = &off_1001ABDA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ABC80;
  a1[45] = off_1001ABD08;
  a1[46] = off_1001ABD30;
  return a1;
}

void sub_1000EC4D8(_Unwind_Exception *a1)
{
  sub_1000EC5D0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000EC4FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000EC540(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ABE18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000EC5BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EC5D0(uint64_t a1)
{
  *(void *)a1 = off_1001ABE18;
  sub_1000EC9D8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000EC70C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000EC5D0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EC774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000EC7AC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000EC814(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EC5D0(v1);

  return std::ios::~ios();
}

void sub_1000EC860(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EC5D0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EC8C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EC5D0(v1);

  return std::ios::~ios();
}

void sub_1000EC924(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EC5D0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000EC9A0(uint64_t a1)
{
  sub_1000EC5D0(a1);

  operator delete();
}

uint64_t sub_1000EC9D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000ECB5C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000ECB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000ECB5C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 137;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 137;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_1000ECD48()
{
}

__n128 sub_1000ECD5C(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned __int8 v2 = off_1001ABE98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1000ECDA8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001ABE98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000ECDD8(uint64_t a1, uint64_t *a2)
{
  return sub_1000ECE30((uint64_t *)(a1 + 8), *a2);
}

uint64_t sub_1000ECDE4(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001ABF08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000ECE24()
{
  return &off_1001ABF08;
}

uint64_t sub_1000ECE30(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 16);
  int v5 = malloc_type_valloc(a1[1], 0xF8ED6DDuLL);
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_alloc::bad_alloc(exception);
  }
  v13[0] = off_1001AC608;
  v13[3] = v13;
  unint64_t v11 = v5;
  sub_100017FFC((uint64_t)v12, (uint64_t)v13);
  sub_100017750(v13);
  bzero(v11, a1[1]);
  int v6 = sub_10003D44C(v4, (uint64_t)v11, a1[1], a2 - a1[1]);
  if (a1[1] == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v6 >= 0) {
      uint64_t v7 = 4294967291;
    }
    else {
      uint64_t v7 = v6;
    }
    sub_1000B23BC(*a1);
  }
  sub_1000176CC((uint64_t *)&v11, 0);
  sub_100017750(v12);
  return v7;
}

void sub_1000ECF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000176CC(&a9, 0);
  sub_100017750(v9);
  _Unwind_Resume(a1);
}

void sub_1000ECF9C()
{
}

void *sub_1000ECFB0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001ABF28;
  result[1] = v3;
  return result;
}

uint64_t sub_1000ECFF8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001ABF28;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000ED024(uint64_t a1, unint64_t *a2)
{
  return sub_1000ED078((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_1000ED02C(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001ABF88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000ED06C()
{
  return &off_1001ABF88;
}

uint64_t sub_1000ED078(uint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a1 + 16);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) > v3
    && (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v4 + 56))(v4, v3))
  {
    sub_1000B23BC(*a1);
  }
  return 0;
}

void sub_1000ED118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  sub_1000ED1B0((uint64_t **)(a1 + 72), (unint64_t *)&v7, &v7);
  unint64_t v6 = *(void *)a1 + v7;
  if (*(void *)(a1 + 96) <= v6) {
    *(void *)(a1 + 96) = v6;
  }
  sub_1000E787C((void *)a1, a3);
  std::mutex::unlock(v5);
}

void sub_1000ED19C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000ED1B0(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_10002B3B8(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_1000ED26C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000ED4FC(v1);

  return std::ios::~ios();
}

uint64_t sub_1000ED2B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000ED4FC(v1);

  return std::ios::~ios();
}

void sub_1000ED318(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000ED4FC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000ED380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000ED3B8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000ED420(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000ED4FC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000ED484(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000ED4FC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000ED4FC(uint64_t a1)
{
  *(void *)a1 = off_1001AC148;
  sub_1000ED638(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000ED638(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000ED7F8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000ED794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ED7C0(uint64_t a1)
{
  sub_1000ED4FC(a1);

  operator delete();
}

int *sub_1000ED7F8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 436;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 436;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_1000ED9E0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EDC70(v1);

  return std::ios::~ios();
}

uint64_t sub_1000EDA2C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EDC70(v1);

  return std::ios::~ios();
}

void sub_1000EDA8C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000EDC70(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EDAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000EDB2C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000EDB94(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EDC70(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000EDBF8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EDC70(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EDC70(uint64_t a1)
{
  *(void *)a1 = off_1001AC368;
  sub_1000EDDAC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000EDDAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000EDF6C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000EDF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EDF34(uint64_t a1)
{
  sub_1000EDC70(a1);

  operator delete();
}

int *sub_1000EDF6C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 450;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 450;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void *sub_1000EE154(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = a2;
  result[1] = a3;
  atomic_load((unint64_t *)(*(void *)(a2 + 56) + 16 * a3 + 8));
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(a2 + 56) + 16 * a3 + 8));
  if ((v3 & 0x3F80000000000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v5 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return result;
}

void *sub_1000EE1D0(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = a2;
  result[1] = a3;
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(a2 + 56) + 16 * a3 + 8));
  if ((v3 & 0x7F80000000000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v5 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return result;
}

uint64_t sub_1000EE234(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EE4C4(v1);

  return std::ios::~ios();
}

uint64_t sub_1000EE280(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EE4C4(v1);

  return std::ios::~ios();
}

void sub_1000EE2E0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000EE4C4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EE348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000EE380(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000EE3E8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EE4C4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000EE44C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EE4C4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EE4C4(uint64_t a1)
{
  *(void *)a1 = off_1001AC588;
  sub_1000EE600(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000EE600(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000EE7C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000EE75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EE788(uint64_t a1)
{
  sub_1000EE4C4(a1);

  operator delete();
}

int *sub_1000EE7C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 547;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 547;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void sub_1000EE9AC()
{
}

void *sub_1000EE9C0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001AC608;
  return result;
}

void sub_1000EE9F8(uint64_t a1, void *a2)
{
  *a2 = off_1001AC608;
}

void sub_1000EEA20(uint64_t a1, void **a2)
{
}

uint64_t sub_1000EEA28(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001AC668)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000EEA68()
{
  return &off_1001AC668;
}

uint64_t sub_1000EEA74(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_10001796C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000A8E38(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v14 = v10;
  uint64_t v15 = &v10[32 * v4];
  uint64_t v16 = (uint64_t)v15;
  int v17 = &v10[32 * v9];
  unint64_t v11 = (void *)sub_100141338((uint64_t)v15, a2);
  *unint64_t v11 = off_1001B66C0;
  v11[3] = *(void *)(a2 + 24);
  v16 += 32;
  sub_1000EEB80(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1000EECB8((uint64_t)&v14);
  return v12;
}

void sub_1000EEB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000EECB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EEB80(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000EEBF8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000EEBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(void *)sub_100141338(a7 + v11 - 32, a3 + v11 - 32) = off_1001B66C0;
      *(void *)(a7 + v11 - 8) = *(void *)(a3 + v11 - 8);
      v11 -= 32;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1000EEC9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100147100();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EECB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000EED24(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      uint64_t v8 = v4 - 32;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000EEDE4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EF074(v1);

  return std::ios::~ios();
}

uint64_t sub_1000EEE30(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EF074(v1);

  return std::ios::~ios();
}

void sub_1000EEE90(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000EF074(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EEEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000EEF30(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000EEF98(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EF074(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000EEFFC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EF074(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EF074(uint64_t a1)
{
  *(void *)a1 = off_1001AC828;
  sub_1000EF1B0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000EF1B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000EF370((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000EF30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EF338(uint64_t a1)
{
  sub_1000EF074(a1);

  operator delete();
}

int *sub_1000EF370(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 863;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 863;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000EF558(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EF7E8(v1);

  return std::ios::~ios();
}

uint64_t sub_1000EF5A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EF7E8(v1);

  return std::ios::~ios();
}

void sub_1000EF604(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000EF7E8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EF66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000EF6A4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000EF70C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EF7E8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000EF770(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EF7E8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EF7E8(uint64_t a1)
{
  *(void *)a1 = off_1001ACA48;
  sub_1000EF924(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000EF924(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000EFAE4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000EFA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EFAAC(uint64_t a1)
{
  sub_1000EF7E8(a1);

  operator delete();
}

int *sub_1000EFAE4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 888;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 888;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000EFCCC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EFF5C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000EFD18(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EFF5C(v1);

  return std::ios::~ios();
}

void sub_1000EFD78(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000EFF5C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EFDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000EFE18(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000EFE80(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000EFF5C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000EFEE4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000EFF5C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000EFF5C(uint64_t a1)
{
  *(void *)a1 = off_1001ACC68;
  sub_1000F0098(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F0098(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F0258((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F01F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F0220(uint64_t a1)
{
  sub_1000EFF5C(a1);

  operator delete();
}

int *sub_1000F0258(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 900;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 900;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000F0440(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000F05A8((uint64_t)a1, a2);
  *a1 = off_1001ACCF0;
  a1[45] = &off_1001ACDF0;
  a1[46] = &off_1001ACE18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ACCF0;
  a1[45] = off_1001ACD78;
  a1[46] = off_1001ACDA0;
  return a1;
}

void sub_1000F0540(_Unwind_Exception *a1)
{
  sub_1000F0638(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0564(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F05A8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ACE88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000F0624(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F0638(uint64_t a1)
{
  *(void *)a1 = off_1001ACE88;
  sub_1000F0A40(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000F0774(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F0638(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F07DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F0814(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000F087C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F0638(v1);

  return std::ios::~ios();
}

void sub_1000F08C8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F0638(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F092C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F0638(v1);

  return std::ios::~ios();
}

void sub_1000F098C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F0638(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F0A08(uint64_t a1)
{
  sub_1000F0638(a1);

  operator delete();
}

uint64_t sub_1000F0A40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F0BC4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F0B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000F0BC4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 258;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 258;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F0DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1000F0E00(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F1090(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F0E4C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F1090(v1);

  return std::ios::~ios();
}

void sub_1000F0EAC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F1090(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F0F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F0F4C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F0FB4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F1090(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F1018(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F1090(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F1090(uint64_t a1)
{
  *(void *)a1 = off_1001AD0A8;
  sub_1000F11CC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F11CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F138C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F1328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F1354(uint64_t a1)
{
  sub_1000F1090(a1);

  operator delete();
}

int *sub_1000F138C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1075;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1075;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F1574(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F1804(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F15C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F1804(v1);

  return std::ios::~ios();
}

void sub_1000F1620(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F1804(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F1688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F16C0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F1728(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F1804(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F178C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F1804(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F1804(uint64_t a1)
{
  *(void *)a1 = off_1001AD2C8;
  sub_1000F1940(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F1940(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F1B00((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F1A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F1AC8(uint64_t a1)
{
  sub_1000F1804(a1);

  operator delete();
}

int *sub_1000F1B00(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1081;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1081;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F1CE8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F1F78(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F1D34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F1F78(v1);

  return std::ios::~ios();
}

void sub_1000F1D94(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F1F78(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F1DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F1E34(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F1E9C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F1F78(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F1F00(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F1F78(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F1F78(uint64_t a1)
{
  *(void *)a1 = off_1001AD4E8;
  sub_1000F20B4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F20B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F2274((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F2210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F223C(uint64_t a1)
{
  sub_1000F1F78(a1);

  operator delete();
}

int *sub_1000F2274(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1090;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1090;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F245C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F26EC(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F24A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F26EC(v1);

  return std::ios::~ios();
}

void sub_1000F2508(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F26EC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F2570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F25A8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F2610(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F26EC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F2674(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F26EC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F26EC(uint64_t a1)
{
  *(void *)a1 = off_1001AD708;
  sub_1000F2828(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F2828(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F29E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F2984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F29B0(uint64_t a1)
{
  sub_1000F26EC(a1);

  operator delete();
}

int *sub_1000F29E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1151;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1151;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F2BD0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F2E60(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F2C1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F2E60(v1);

  return std::ios::~ios();
}

void sub_1000F2C7C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F2E60(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F2CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F2D1C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F2D84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F2E60(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F2DE8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F2E60(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F2E60(uint64_t a1)
{
  *(void *)a1 = off_1001AD928;
  sub_1000F2F9C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F2F9C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F315C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F30F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F3124(uint64_t a1)
{
  sub_1000F2E60(a1);

  operator delete();
}

int *sub_1000F315C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1188;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1188;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F3344(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F35D4(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F3390(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F35D4(v1);

  return std::ios::~ios();
}

void sub_1000F33F0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F35D4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F3458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F3490(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F34F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F35D4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F355C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F35D4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F35D4(uint64_t a1)
{
  *(void *)a1 = off_1001ADB48;
  sub_1000F3710(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F3710(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F38D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F386C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F3898(uint64_t a1)
{
  sub_1000F35D4(a1);

  operator delete();
}

int *sub_1000F38D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1441;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1441;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F3AB8(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 5496) + 16) + 144))(*(void *)(*(void *)(a1 + 5496) + 16));
  int v2 = sub_1000E41E8(a1 + 5504);
  uint64_t v3 = *(void *)(a1 + 6600);
  if (v3 == v2)
  {
    sub_1000F3D34(a1 + 5168, a1 + 5328);
    *(void *)(a1 + 5512) = 0;
    uint64_t v4 = *(void *)(a1 + 6200);
    if (v4)
    {
      int v5 = *(void (****)(void))(a1 + 6192);
      char v6 = v5;
      uint64_t v7 = v5;
      do
      {
        --v4;
        uint64_t v8 = *v7;
        v7 += 3;
        (*v8)(v6);
        v5 += 3;
        char v6 = v7;
      }
      while (v4);
    }
    *(void *)(a1 + 6200) = 0;
    if (*(unsigned char *)(a1 + 6184)) {
      *(unsigned char *)(a1 + 6184) = 0;
    }
    *(void *)(a1 + 6600) = 0;
  }
  else
  {
    if (v2 < 0) {
      int v9 = v2;
    }
    else {
      int v9 = -5;
    }
    return -(uint64_t)-v9;
  }
  return v3;
}

void *sub_1000F3BCC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000F3E28((uint64_t)a1, a2);
  *a1 = off_1001ADBD0;
  a1[45] = &off_1001ADCD0;
  a1[46] = &off_1001ADCF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ADBD0;
  a1[45] = off_1001ADC58;
  a1[46] = off_1001ADC80;
  return a1;
}

void sub_1000F3CCC(_Unwind_Exception *a1)
{
  sub_1000F3EB8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000F3CF0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F3D34(uint64_t a1, uint64_t a2)
{
  sub_1000F3DCC(a1, (uint64_t *)a2);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  uint64_t v7 = *(void *)(a2 + 112);
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v6;
  if (v8) {
    sub_100010A48(v8);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v9;
  return a1;
}

uint64_t sub_1000F3DCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    sub_100010A48(v6);
  }
  long long v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  *(_OWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t sub_1000F3E28(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ADD68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000F3EA4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F3EB8(uint64_t a1)
{
  *(void *)a1 = off_1001ADD68;
  sub_1000F42C0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000F3FF4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F3EB8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F405C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F4094(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000F40FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F3EB8(v1);

  return std::ios::~ios();
}

void sub_1000F4148(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F3EB8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F41AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F3EB8(v1);

  return std::ios::~ios();
}

void sub_1000F420C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F3EB8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F4288(uint64_t a1)
{
  sub_1000F3EB8(a1);

  operator delete();
}

uint64_t sub_1000F42C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F4444((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F441C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000F4444(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1409;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1409;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F462C(uint64_t a1)
{
  uint64_t v2 = sub_1000F3AB8(a1);
  if (*(unsigned char *)(a1 + 5160))
  {
    sub_1000F4684((atomic_ullong *)a1);
    *(unsigned char *)(a1 + 5160) = 0;
  }
  return v2;
}

atomic_ullong *sub_1000F4684(atomic_ullong *a1)
{
  atomic_ullong v2 = a1[3];
  if (v2)
  {
    atomic_ullong v3 = a1[2];
    atomic_ullong v28 = v3 + 320 * v2;
    do
    {
      uint64_t v5 = *(void *)v3;
      int v4 = *(std::__shared_weak_count **)(v3 + 8);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v33 = *(_OWORD *)(v3 + 16);
      *(_OWORD *)&v33[9] = *(_OWORD *)(v3 + 25);
      uint64_t v6 = *(void *)(v3 + 48);
      long long v7 = *(_OWORD *)(v3 + 56);
      long long v8 = *(_OWORD *)(v3 + 88);
      long long v90 = *(_OWORD *)(v3 + 72);
      long long v91 = v8;
      char v92 = *(unsigned char *)(v3 + 104);
      uint64_t v10 = *(void *)(v3 + 112);
      uint64_t v9 = *(std::__shared_weak_count **)(v3 + 120);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v32 = *(_OWORD *)(v3 + 128);
      unint64_t v30 = *(void *)(v3 + 144);
      char v31 = *(unsigned char *)(v3 + 152);
      uint64_t v12 = *(void *)(v3 + 160);
      uint64_t v11 = *(std::__shared_weak_count **)(v3 + 168);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v29 = *(_OWORD *)(v3 + 176);
      *(_OWORD *)&v29[9] = *(_OWORD *)(v3 + 185);
      uint64_t v13 = *(void *)(v3 + 208);
      long long v14 = *(_OWORD *)(v3 + 216);
      long long v15 = *(_OWORD *)(v3 + 248);
      long long v87 = *(_OWORD *)(v3 + 232);
      long long v88 = v15;
      char v89 = *(unsigned char *)(v3 + 264);
      uint64_t v17 = *(void *)(v3 + 272);
      uint64_t v16 = *(std::__shared_weak_count **)(v3 + 280);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = 0;
      unint64_t v45 = *(void *)(v3 + 304);
      char v46 = *(unsigned char *)(v3 + 312);
      long long v44 = *(_OWORD *)(v3 + 288);
      uint64_t v47 = v5;
      unint64_t v48 = v4;
      v49[0] = *(_OWORD *)v33;
      *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)&v33[9];
      long long v51 = v7;
      long long v52 = v90;
      long long v53 = v91;
      char v54 = v92;
      uint64_t v50 = v6;
      uint64_t v55 = v10;
      char v56 = v9;
      long long v57 = v32;
      char v59 = v31;
      unint64_t v58 = v30;
      uint64_t v34 = v12;
      uint64_t v35 = v11;
      *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)&v29[9];
      v36[0] = *(_OWORD *)v29;
      long long v38 = v14;
      char v41 = v89;
      long long v39 = v87;
      long long v40 = v88;
      uint64_t v37 = v13;
      uint64_t v42 = v17;
      uint64_t v43 = v16;
      unint64_t v19 = v45;
      v86[0] = 0;
      v86[528] = 0;
      do
      {
        if (sub_10002F3D8((uint64_t)&v47, (uint64_t)&v34)) {
          break;
        }
        if (v58 >= v19 || v18 == -1) {
          break;
        }
        if (sub_1000D29B8())
        {
          *(void *)&long long v83 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1274:32)]";
          *((void *)&v83 + 1) = 104;
          LODWORD(v84) = 2;
          sub_10003A8D8(&v73, &v83);
          sub_100003DF0(v80, (uint64_t)"sg: ", 4);
          sub_1001416B8(v80);
          std::ostream::~ostream();
          sub_10003ABC8((uint64_t)&v73);
          std::ios::~ios();
        }
        *(void *)&long long v73 = 0;
        *((void *)&v73 + 1) = v19;
        char v74 = 2;
        sub_100081638(&v47, (uint64_t)&v73, (uint64_t)&v83);
        atomic_ullong v21 = *a1;
        if (*a1)
        {
          if (*(unsigned char *)(v21 + 224)) {
            unint64_t v22 = v21 + 40;
          }
          else {
            unint64_t v22 = 0;
          }
        }
        else
        {
          unint64_t v22 = 0;
        }
        sub_1000E4458(v22, a1[1], (char **)&v83);
        unint64_t v23 = v84;
        BOOL v24 = v84 >= 0 || v84 == 0;
        char v25 = v24;
        if (v24)
        {
          uint64_t v26 = v85;
          if (sub_100030B70((uint64_t)&v47, (uint64_t)&v34, v85, v84))
          {
            uint64_t v60 = v47;
            BOOL v61 = v48;
            if (v48) {
              atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v62[0] = v49[0];
            *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)((char *)v49 + 9);
            uint64_t v63 = v50;
            long long v64 = v51;
            long long v65 = v52;
            long long v66 = v53;
            char v67 = v54;
            uint64_t v68 = v55;
            long long v69 = v56;
            if (v56) {
              atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v70 = v57;
            unint64_t v71 = v58;
            char v72 = v59;
            sub_100030B34((uint64_t)&v60, (uint64_t)&v34, v26, v23, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v73);
            sub_10003AA40((uint64_t)v86, (uint64_t)&v73);
            if (v82) {
              sub_100010A48(v82);
            }
            if (v81) {
              sub_100010A48(v81);
            }
            if (v79) {
              sub_100010A48(v79);
            }
            if (v78) {
              sub_100010A48(v78);
            }
            if (v77) {
              sub_100010A48(v77);
            }
            if (v75) {
              sub_100010A48(v75);
            }
            if (v69) {
              sub_100010A48(v69);
            }
            if (v61) {
              sub_100010A48(v61);
            }
            sub_10002F8C8((uint64_t)v86, (uint64_t)&v73);
            sub_10003AA88((uint64_t)&v47, &v73);
            if (v76) {
              sub_100010A48(v76);
            }
            if (*((void *)&v73 + 1)) {
              sub_100010A48(*((std::__shared_weak_count **)&v73 + 1));
            }
            sub_10002F51C((uint64_t)v86, (uint64_t)&v73);
            sub_10003AA88((uint64_t)&v34, &v73);
            if (v76) {
              sub_100010A48(v76);
            }
            if (*((void *)&v73 + 1)) {
              sub_100010A48(*((std::__shared_weak_count **)&v73 + 1));
            }
          }
          sub_10002FF28((uint64_t)&v47, v23);
          v18 += v23;
        }
        if (*((void *)&v83 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v83 + 1));
        }
      }
      while ((v25 & 1) != 0);
      sub_100030F34((uint64_t)v86);
      if (v43) {
        sub_100010A48(v43);
      }
      if (v35) {
        sub_100010A48(v35);
      }
      if (v56) {
        sub_100010A48(v56);
      }
      if (v48) {
        sub_100010A48(v48);
      }
      v3 += 320;
    }
    while (v3 != v28);
  }
  sub_1000F4D04((uint64_t)(a1 + 2));
  sub_1000D9F50(a1);
  return a1;
}

void sub_1000F4BF4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (STACK[0x4D0]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x4D0]);
  }
  sub_100030F34((uint64_t)&STACK[0x4F8]);
  sub_100011F6C((uint64_t)&a36);
  sub_100011F6C((uint64_t)&a56);
  sub_100003744(a1);
}

uint64_t sub_1000F4D04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 168;
    do
    {
      int v4 = *(std::__shared_weak_count **)(v3 + 112);
      if (v4) {
        sub_100010A48(v4);
      }
      if (*(void *)v3) {
        sub_100010A48(*(std::__shared_weak_count **)v3);
      }
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 48);
      if (v5) {
        sub_100010A48(v5);
      }
      uint64_t v6 = *(std::__shared_weak_count **)(v3 - 160);
      if (v6) {
        sub_100010A48(v6);
      }
      v3 += 320;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t *sub_1000F4D98(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (v3)
  {
    unint64_t v4 = atomic_load(v3);
    if (!v4)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    long long v7 = (atomic_ullong *)v3[41];
    if (v7) {
      v3[42] = atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    if (!sub_1000F4E3C((uint64_t)v3))
    {
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v3[4];
        v3[4] = -1;
        sub_1000D9F7C((uint64_t)v3, v8, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1000F4E3C(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
    unsigned int v6 = atomic_load(v2);
    if (v6 != 2 && !*(unsigned char *)(a1 + 344)) {
      sub_1000F4EDC(a1 + 24, 1u, 5u);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v7 = atomic_load((unint64_t *)a1);
    if (v7 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = atomic_load(v2);
      return v8 == 2;
    }
  }
}

BOOL sub_1000F4EDC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  long long v6 = v4;
  return sub_1000F4F20((uint64_t)&v4, (uint64_t)&v5, 0);
}

BOOL sub_1000F4F20(uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v7 = 0;
  while (1)
  {
    unsigned int v8 = *(unsigned int **)a1;
    int v9 = *(_DWORD *)(a1 + 12);
    if ((v9 - 1) >= 2) {
      unsigned int explicit = v9 == 5 ? atomic_load(v8) : *v8;
    }
    else {
      unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v8, memory_order_acquire);
    }
    int v11 = *(_DWORD *)(a1 + 8);
    if (explicit != v11) {
      break;
    }
    if (v7 <= 0x3F)
    {
      ++v7;
    }
    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_;
      if (a3 && v12.__d_.__rep_ > a3 || sub_1000F4FE4(a2, v12.__d_.__rep_)) {
        return explicit != v11;
      }
    }
  }
  return explicit != v11;
}

uint64_t sub_1000F4FE4(uint64_t a1, uint64_t a2)
{
  if (a2 < 64001)
  {
    if (a2 >= 4001) {
      sched_yield();
    }
    return 0;
  }
  std::__cxx_contention_t v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  long long v4 = *(unsigned int **)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 20);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5) {
      unsigned int explicit = atomic_load(v4);
    }
    else {
      unsigned int explicit = *v4;
    }
  }
  else
  {
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v4, memory_order_acquire);
  }
  if (explicit == *(_DWORD *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0;
  }
  return 1;
}

void sub_1000F507C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int64_t v4 = *a3 - *a2;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 6);
  if (v5 <= a1[2])
  {
    uint64_t v11 = *a2;
    sub_1000F5280((uint64_t)a1, &v11, v5, *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x66666666666667) {
      sub_100014AAC("get_next_capacity, allocator's max size reached");
    }
    unsigned int v8 = operator new(v4);
    int v9 = (uint64_t *)*a1;
    if (*a1)
    {
      sub_1000F5174(a1);
      if (a1 + 3 != v9) {
        operator delete(v9);
      }
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v8;
    uint64_t v10 = *a2;
    uint64_t v12 = *a3;
    uint64_t v13 = v10;
    sub_1000F51EC(a1, &v13, &v12);
  }
}

void sub_1000F5174(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1 + 168;
    do
    {
      int64_t v4 = *(std::__shared_weak_count **)(v3 + 112);
      if (v4) {
        sub_100010A48(v4);
      }
      if (*(void *)v3) {
        sub_100010A48(*(std::__shared_weak_count **)v3);
      }
      unint64_t v5 = *(std::__shared_weak_count **)(v3 - 48);
      if (v5) {
        sub_100010A48(v5);
      }
      std::chrono::steady_clock::time_point v6 = *(std::__shared_weak_count **)(v3 - 160);
      if (v6) {
        sub_100010A48(v6);
      }
      v3 += 320;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

void sub_1000F51EC(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *a1 + 320 * v4;
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = v5;
  if (*a2 != *a3)
  {
    do
    {
      sub_100030CB0(v8, v6);
      sub_100030CB0(v8 + 160, v6 + 160);
      v6 += 320;
      v8 += 320;
    }
    while (v6 != v7);
    uint64_t v4 = a1[1];
  }
  a1[1] = v4 - 0x3333333333333333 * ((v8 - v5) >> 6);
}

void sub_1000F5280(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      uint64_t v13 = *a2;
      unint64_t v14 = a3;
      do
      {
        --v14;
        sub_1000F3D34(a4, v13);
        sub_1000F3D34(a4 + 160, v13 + 160);
        a4 += 320;
        v13 += 320;
      }
      while (v14);
    }
    if (a5 != a3)
    {
      unint64_t v15 = a3 - a5;
      uint64_t v16 = (std::__shared_weak_count **)(a4 + 168);
      do
      {
        uint64_t v17 = v16[14];
        if (v17) {
          sub_100010A48(v17);
        }
        if (*v16) {
          sub_100010A48(*v16);
        }
        uint64_t v18 = *(v16 - 6);
        if (v18) {
          sub_100010A48(v18);
        }
        unint64_t v19 = *(v16 - 20);
        if (v19) {
          sub_100010A48(v19);
        }
        v16 += 40;
        BOOL v12 = __CFADD__(v15++, 1);
      }
      while (!v12);
    }
  }
  else
  {
    uint64_t v10 = *a2;
    if (a5)
    {
      unint64_t v11 = a5;
      do
      {
        --v11;
        sub_1000F3D34(a4, v10);
        sub_1000F3D34(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
      }
      while (v11);
    }
    *a2 = v10;
    if (a3 != a5)
    {
      do
      {
        sub_100030CB0(a4, v10);
        sub_100030CB0(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
        BOOL v12 = __CFADD__(v9++, 1);
      }
      while (!v12);
    }
  }
}

void sub_1000F53B8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000F554C((uint64_t)a1, a3);
  if (v11 >= 0x66666666666667) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(320 * v11);
  sub_1000F55C8(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

__n128 sub_1000F5468(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v3 = *(_OWORD *)(a2 + 72);
  long long v4 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v5 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  long long v7 = *(_OWORD *)(a2 + 232);
  long long v8 = *(_OWORD *)(a2 + 248);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 232) = v7;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  __n128 result = *(__n128 *)(a2 + 288);
  *(__n128 *)(a1 + 288) = result;
  uint64_t v10 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v10;
  return result;
}

unint64_t sub_1000F554C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x66666666666666;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x66666666666666 - v4 < a2 - v4 + v3) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x66666666666666) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000F55C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000F56C0((uint64_t)a1, *a1, a4, *a1 + 320 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count **)(v10 + 168);
      do
      {
        uint64_t v13 = v12[14];
        if (v13) {
          sub_100010A48(v13);
        }
        if (*v12) {
          sub_100010A48(*v12);
        }
        unint64_t v14 = *(v12 - 6);
        if (v14) {
          sub_100010A48(v14);
        }
        unint64_t v15 = *(v12 - 20);
        if (v15) {
          sub_100010A48(v15);
        }
        v12 += 40;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v16 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v16;
  a1[2] = a3;
}

void sub_1000F569C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000F56C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  void v16[2] = a1;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      sub_1000F5468(a5, v12);
      v12 += 320;
      a5 += 320;
    }
    while (v12 != v11);
  }
  sub_1000F5468(a5, a7);
  if (v11 != a4)
  {
    uint64_t v13 = a5 + 320 * a6;
    do
    {
      sub_1000F5468(v13, v11);
      v11 += 320;
      uint64_t v13 = v14 + 320;
    }
    while (v11 != a4);
  }
  v16[0] = 0;
  v16[1] = 0;
  return sub_1000F5774(v16);
}

void *sub_1000F5774(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 != a1[1])
  {
    do
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[35];
      if (v3) {
        sub_100010A48(v3);
      }
      unint64_t v4 = (std::__shared_weak_count *)v2[21];
      if (v4) {
        sub_100010A48(v4);
      }
      unint64_t v5 = (std::__shared_weak_count *)v2[15];
      if (v5) {
        sub_100010A48(v5);
      }
      unint64_t v6 = (std::__shared_weak_count *)v2[1];
      if (v6) {
        sub_100010A48(v6);
      }
      uint64_t v7 = (void *)a1[1];
      uint64_t v2 = (void *)(*a1 + 320);
      *a1 = v2;
    }
    while (v2 != v7);
  }
  return a1;
}

void sub_1000F57E8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000697F8((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(24 * v11);
  sub_1000F5898(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

void sub_1000F5898(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000F5998((uint64_t)a1, *a1, a4, *a1 + 24 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = v10;
      uint64_t v13 = (void (***)(uint64_t))v10;
      do
      {
        --v11;
        uint64_t v14 = *v13;
        v13 += 3;
        (*v14)(v10);
        v12 += 24;
        uint64_t v10 = (uint64_t)v13;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v15 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v15;
  a1[2] = a3;
}

void sub_1000F5974(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F5998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a5;
  if (a2 != a3)
  {
    uint64_t v14 = 0;
    do
    {
      sub_100141338(a5 + v14, a2 + v14);
      v14 += 24;
    }
    while (a2 + v14 != a3);
    uint64_t v12 = a5 + v14;
  }
  uint64_t result = sub_100141338(v12, a7);
  if (a3 != a4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v12 + 24 * a6;
    do
    {
      uint64_t result = sub_100141338(v17 + v16, a3 + v16);
      v16 += 24;
    }
    while (a3 + v16 != a4);
  }
  return result;
}

void sub_1000F5A58(_Unwind_Exception *exception_object)
{
  if (v2 != v1)
  {
    unint64_t v4 = v1;
    unint64_t v5 = v1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 3;
      (*v6)(v1);
      v4 += 3;
      uint64_t v1 = v5;
    }
    while (v5 != v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F5B04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))a1;
    unint64_t v4 = *(void (****)(void))a1;
    unint64_t v5 = *(void (****)(void))a1;
    do
    {
      --v2;
      unint64_t v6 = *v5;
      v5 += 3;
      (*v6)(v4);
      v3 += 3;
      unint64_t v4 = v5;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000F5B94(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F5E24(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F5BE0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F5E24(v1);

  return std::ios::~ios();
}

void sub_1000F5C40(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F5E24(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F5CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F5CE0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F5D48(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F5E24(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F5DAC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F5E24(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F5E24(uint64_t a1)
{
  *(void *)a1 = off_1001ADF88;
  sub_1000F5F60(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F5F60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F6120((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F60BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F60E8(uint64_t a1)
{
  sub_1000F5E24(a1);

  operator delete();
}

int *sub_1000F6120(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1513;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1513;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

BOOL sub_1000F6308(unint64_t *a1)
{
  while (1)
  {
    unint64_t v2 = *a1;
    if ((*a1 & 0x8000000000000000) == 0) {
      break;
    }
    unint64_t v3 = *a1;
LABEL_7:
    unint64_t v2 = v3;
    if (v3 != -1) {
      return v2 != -1;
    }
    if ((sub_1000F637C(a1, 0) & 1) == 0)
    {
      unint64_t v2 = -1;
      return v2 != -1;
    }
  }
  unint64_t v3 = *a1;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_ullong *volatile)a1, &v3, v2 + 1);
    if (v3 == v2) {
      return v2 != -1;
    }
    unint64_t v2 = v3;
    if ((v3 & 0x8000000000000000) != 0) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_1000F637C(unint64_t *a1, int a2)
{
  unint64_t v2 = atomic_load(a1);
  BOOL v3 = v2 == 0;
  BOOL v4 = v2 != -1;
  if (a2) {
    BOOL v4 = v3;
  }
  if (!v4)
  {
    v16.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C((unint64_t)a1);
    v16.__owns_ = 1;
    std::mutex::lock(v16.__m_);
    uint64_t v7 = sub_100141268((unint64_t)a1);
    unint64_t v8 = atomic_load(a1);
    BOOL v9 = v8 == 0;
    BOOL v10 = v8 != -1;
    if (a2) {
      BOOL v10 = v9;
    }
    if (!v10)
    {
      uint64_t v11 = (std::condition_variable *)v7;
      do
      {
        std::condition_variable::wait(v11, &v16);
        unint64_t v12 = atomic_load(a1);
        BOOL v13 = v12 == 0;
        BOOL v14 = v12 != -1;
        if (a2) {
          BOOL v14 = v13;
        }
      }
      while (!v14);
    }
    if (v16.__owns_) {
      std::mutex::unlock(v16.__m_);
    }
  }
  return 1;
}

void sub_1000F6458(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1000F646C(uint64_t (*a1)(long long *), long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  unint64_t v15 = sub_1000F65B8(a1, &v28, (uint64_t)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_1000F659C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

unint64_t sub_1000F65B8(uint64_t (*a1)(long long *), void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = *(void *)(a3 + 144);
  v28[0] = 0;
  v28[528] = 0;
  while (!sub_10002F3D8((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v26 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = io_result_t (&)(const sg_entry &)]";
      *((void *)&v26 + 1) = 119;
      int v27 = 2;
      sub_10003A8D8(&v23, &v26);
      sub_100003DF0(v25, (uint64_t)"sg: ", 4);
      sub_1001416B8(v25);
      std::ostream::~ostream();
      sub_10003ABC8((uint64_t)&v23);
      std::ios::~ios();
    }
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = v8;
    char v24 = 2;
    sub_100081638(a2, (uint64_t)&v23, (uint64_t)&v26);
    int64_t v10 = a1(&v26);
    unint64_t v12 = v10;
    BOOL v13 = v10 >= 0 || v10 == 0;
    char v14 = v13;
    if (v13)
    {
      uint64_t v15 = v11;
      if (sub_100030B70((uint64_t)a2, a3, v11, v10))
      {
        sub_100030CB0((uint64_t)v22, (uint64_t)a2);
        sub_100030B34((uint64_t)v22, a3, v15, v12, a4, (uint64_t)&v23);
        sub_10003AA40((uint64_t)v28, (uint64_t)&v23);
        sub_100030B8C(&v23);
        sub_100011F6C((uint64_t)v22);
        sub_10002F8C8((uint64_t)v28, (uint64_t)&v23);
        sub_10003AA88((uint64_t)a2, &v23);
        sub_100011F6C((uint64_t)&v23);
        sub_10002F51C((uint64_t)v28, (uint64_t)&v23);
        sub_10003AA88(a3, &v23);
        sub_100011F6C((uint64_t)&v23);
      }
      if (a5) {
        sub_10002FF28((uint64_t)a2, v12);
      }
      else {
        sub_100030064((uint64_t)a2, v12);
      }
      v7 += v12;
    }
    else
    {
      if ((int)v10 >= 0) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = -(int)v10;
      }
      unint64_t v18 = -v16;
    }
    if (*((void *)&v26 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v26 + 1));
    }
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
  }
  unint64_t v18 = v7;
LABEL_32:
  sub_100030F34((uint64_t)v28);
  return v18;
}

void sub_1000F6820(_Unwind_Exception *a1)
{
  if (STACK[0x2E8]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x2E8]);
  }
  sub_100030F34((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F6890(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F6B20(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F68DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F6B20(v1);

  return std::ios::~ios();
}

void sub_1000F693C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F6B20(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F69A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F69DC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F6A44(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F6B20(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F6AA8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F6B20(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F6B20(uint64_t a1)
{
  *(void *)a1 = off_1001AE1A8;
  sub_1000F6C5C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F6C5C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F6E1C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F6DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F6DE4(uint64_t a1)
{
  sub_1000F6B20(a1);

  operator delete();
}

int *sub_1000F6E1C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2061;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2061;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F7004(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F7294(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F7050(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F7294(v1);

  return std::ios::~ios();
}

void sub_1000F70B0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F7294(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F7118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F7150(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F71B8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F7294(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F721C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F7294(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F7294(uint64_t a1)
{
  *(void *)a1 = off_1001AE3C8;
  sub_1000F73D0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F73D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F7590((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F752C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F7558(uint64_t a1)
{
  sub_1000F7294(a1);

  operator delete();
}

int *sub_1000F7590(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2071;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2071;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F7778(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F7A08(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F77C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F7A08(v1);

  return std::ios::~ios();
}

void sub_1000F7824(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F7A08(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F788C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F78C4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F792C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F7A08(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F7990(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F7A08(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F7A08(uint64_t a1)
{
  *(void *)a1 = off_1001AE5E8;
  sub_1000F7B44(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F7B44(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F7D04((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F7CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F7CCC(uint64_t a1)
{
  sub_1000F7A08(a1);

  operator delete();
}

int *sub_1000F7D04(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2311;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2311;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F7EEC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F817C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F7F38(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F817C(v1);

  return std::ios::~ios();
}

void sub_1000F7F98(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F817C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F8000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F8038(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F80A0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F817C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F8104(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F817C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F817C(uint64_t a1)
{
  *(void *)a1 = off_1001AE808;
  sub_1000F82B8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F82B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F8478((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F8414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F8440(uint64_t a1)
{
  sub_1000F817C(a1);

  operator delete();
}

int *sub_1000F8478(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2321;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2321;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000F8660(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10009415C(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000F86BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000F86D8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10009415C(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000F8734(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000F8750(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000F88B8((uint64_t)a1, a2);
  *a1 = off_1001AE8D0;
  a1[45] = &off_1001AE9D0;
  a1[46] = &off_1001AE9F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AE8D0;
  a1[45] = off_1001AE958;
  a1[46] = off_1001AE980;
  return a1;
}

void sub_1000F8850(_Unwind_Exception *a1)
{
  sub_1000F8948(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000F8874(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F88B8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AEA68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000F8934(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F8948(uint64_t a1)
{
  *(void *)a1 = off_1001AEA68;
  sub_1000F8D50(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000F8A84(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F8948(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F8AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F8B24(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000F8B8C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F8948(v1);

  return std::ios::~ios();
}

void sub_1000F8BD8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F8948(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F8C3C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F8948(v1);

  return std::ios::~ios();
}

void sub_1000F8C9C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F8948(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F8D18(uint64_t a1)
{
  sub_1000F8948(a1);

  operator delete();
}

uint64_t sub_1000F8D50(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F8ED4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F8EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000F8ED4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 158;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 158;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_1000F90BC(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

const char *sub_1000F90F4()
{
  return "File too small.";
}

void sub_1000F9100(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  sub_100003BA4(v13, v3);
  sub_10002A7B8((uint64_t)v9);
  if ((v14 & 0x80u) == 0) {
    int v4 = v13;
  }
  else {
    int v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v5 = v14;
  }
  else {
    uint64_t v5 = (uint64_t)v13[1];
  }
  char v6 = sub_100003DF0(&v10, (uint64_t)v4, v5);
  sub_100003DF0(v6, (uint64_t)" header size ", 13);
  uint64_t v7 = (void *)std::ostream::operator<<();
  sub_100003DF0(v7, (uint64_t)", but file size only ", 21);
  std::ostream::operator<<();
  sub_100003890((uint64_t)v11, a2);
  *(void *)((char *)v9
  uint64_t v10 = v8;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
}

void sub_1000F9304(void ***a1)
{
  unsigned __int8 v2 = *a1;
  if (*v2)
  {
    sub_1000F9358((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000F9358(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    int v4 = *(std::__shared_weak_count **)(i - 40);
    if (v4) {
      sub_100010A48(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_1000F93A4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F9634(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F93F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F9634(v1);

  return std::ios::~ios();
}

void sub_1000F9450(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F9634(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F94B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F94F0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F9558(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F9634(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F95BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F9634(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F9634(uint64_t a1)
{
  *(void *)a1 = off_1001AECB8;
  sub_1000F9770(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F9770(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000F9930((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F98CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F98F8(uint64_t a1)
{
  sub_1000F9634(a1);

  operator delete();
}

int *sub_1000F9930(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2831;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unsigned __int8 v14 = a2;
      }
      else {
        unsigned __int8 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2831;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F9B18(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F9DA8(v1);

  return std::ios::~ios();
}

uint64_t sub_1000F9B64(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F9DA8(v1);

  return std::ios::~ios();
}

void sub_1000F9BC4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F9DA8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F9C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F9C64(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F9CCC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F9DA8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000F9D30(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F9DA8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000F9DA8(uint64_t a1)
{
  *(void *)a1 = off_1001AEED8;
  sub_1000F9EE4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000F9EE4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000FA0A4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000FA040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FA06C(uint64_t a1)
{
  sub_1000F9DA8(a1);

  operator delete();
}

int *sub_1000FA0A4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2828;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unsigned __int8 v14 = a2;
      }
      else {
        unsigned __int8 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2828;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_1000FA290(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000FA2C8(uint64_t a1)
{
}

uint64_t sub_1000FA2D0(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001AEF98)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000FA314(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_10001796C();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4);
  if (2 * v14 > v8) {
    unint64_t v8 = 2 * v14;
  }
  if (v14 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v15 = 0x555555555555555;
  }
  else {
    unint64_t v15 = v8;
  }
  void v25[4] = a1 + 2;
  if (v15) {
    uint64_t v16 = (char *)sub_100068538(v13, v15);
  }
  else {
    uint64_t v16 = 0;
  }
  int v17 = &v16[48 * v7];
  v25[0] = v16;
  v25[1] = v17;
  v25[3] = &v16[48 * v15];
  uint64_t v18 = *a3;
  uint64_t v19 = *a4;
  uint64_t v20 = *a5;
  *(void *)int v17 = *a2;
  uint64_t v21 = a2[1];
  *((void *)v17 + 1) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v22 = &v16[48 * v7];
  *((void *)v22 + 2) = v18;
  *((void *)v22 + 3) = v19;
  *((void *)v22 + 4) = v20;
  v22[40] = 0;
  void v25[2] = v17 + 48;
  sub_1000FA460(a1, v25);
  uint64_t v23 = a1[1];
  sub_1000FA5F8(v25);
  return v23;
}

void sub_1000FA44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000FA5F8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FA460(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000FA4D8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000FA4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 48);
    do
    {
      long long v9 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v10 = *(_OWORD *)(a3 + 25);
      v8[1] = *(_OWORD *)(a3 + 16);
      *(_OWORD *)((char *)v8 + 25) = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 3;
      v7 -= 48;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1000FA57C((uint64_t)v13);
  return v11;
}

uint64_t sub_1000FA57C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000FA5B4(a1);
  }
  return a1;
}

void sub_1000FA5B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_100010A48(v3);
    }
    v1 += 48;
  }
}

void **sub_1000FA5F8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1000FA62C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 48;
    int v4 = *(std::__shared_weak_count **)(v1 - 40);
    if (v4)
    {
      sub_100010A48(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 48;
    }
  }
}

uint64_t sub_1000FA680(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924) {
    sub_10001796C();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - (uint64_t)v5) >> 2);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x492492492492492) {
    unint64_t v13 = 0x924924924924924;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    char v14 = (char *)sub_1000FA7F8(v11, v13);
    uint64_t v16 = v15;
  }
  else
  {
    char v14 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v17 = sub_1000E860C((uint64_t)&v14[28 * v6], a2, a3, *a4);
  uint64_t v18 = v17 + 28;
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = v17 + v21;
      *(void *)(v22 - 28) = 0x16174656DLL;
      *(_DWORD *)(v22 - 20) = 512;
      *(_OWORD *)(v22 - 16) = *(_OWORD *)&v19[v21 - 16];
      v21 -= 28;
    }
    while (&v19[v21] != v20);
    uint64_t v19 = (char *)*a1;
    v17 += v21;
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v14[28 * v16];
  if (v19) {
    operator delete(v19);
  }
  return v18;
}

void sub_1000FA7E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000FA7F8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    sub_100010CDC();
  }
  return operator new(28 * a2);
}

uint64_t sub_1000FA844(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924) {
    sub_10001796C();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - (uint64_t)v5) >> 2);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x492492492492492) {
    unint64_t v13 = 0x924924924924924;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    char v14 = (char *)sub_1000FA7F8(v11, v13);
    uint64_t v16 = v15;
  }
  else
  {
    char v14 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v17 = sub_1000E860C((uint64_t)&v14[28 * v6], a2, a3, *a4);
  uint64_t v18 = v17 + 28;
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = v17 + v21;
      *(void *)(v22 - 28) = 0x16174656DLL;
      *(_DWORD *)(v22 - 20) = 512;
      *(_OWORD *)(v22 - 16) = *(_OWORD *)&v19[v21 - 16];
      v21 -= 28;
    }
    while (&v19[v21] != v20);
    uint64_t v19 = (char *)*a1;
    v17 += v21;
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v14[28 * v16];
  if (v19) {
    operator delete(v19);
  }
  return v18;
}

void sub_1000FA9A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FA9C0()
{
}

void *sub_1000FA9D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1001AEFB8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000FAA1C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AEFB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000FAA48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), a2, 0);
}

uint64_t sub_1000FAA74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000FAAB4()
{
}

_DWORD *sub_1000FAAC0(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "header_flags";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100199548;
    *((_DWORD *)exception + 8) = v2;
  }
  return result;
}

atomic_ullong *sub_1000FAB50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  sub_1000FAD1C(a1, a2, a3, &v13);
  if (v13 && !*(unsigned char *)(v13 + 344) || v13 && *(unsigned char *)(v13 + 344))
  {
LABEL_17:
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v13, 0), a4);
    return sub_1000D9F50((atomic_ullong *)&v13);
  }
  if (*(unsigned char *)(a1 + 736) && v14 != (void *)(a1 + 760))
  {
    do
    {
      sub_1000FB158(a1, a2, &v11);
      uint64_t v15 = v11;
      sub_1000DB5D8((atomic_ullong *)&v13, &v12);
      sub_1000D9F50(&v12);
      if (v13)
      {
        if (!*(unsigned char *)(v13 + 344)) {
          break;
        }
      }
      unint64_t v7 = (unint64_t *)sub_1000FB2F4((void *)a1);
      if (v7)
      {
        uint64_t v15 = v7;
        sub_1000FB390(a1, v7, a2, (unint64_t *)&v11);
        sub_1000DB5D8((atomic_ullong *)&v13, (atomic_ullong *)&v11);
        sub_1000D9F50((atomic_ullong *)&v11);
        break;
      }
    }
    while (*(unsigned char *)(a1 + 736));
    std::mutex::lock((std::mutex *)(a1 + 776));
    uint64_t v8 = sub_1000FC6DC((uint64_t **)(a1 + 752), v14, (unint64_t *)&v16, &v16, (uint64_t *)&v15);
    if (!v9) {
      v8[5] = (uint64_t)v15;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
    std::mutex::unlock((std::mutex *)(a1 + 776));
    sub_1000FB47C(a1, 0, 0, 0);
    goto LABEL_17;
  }
  *a4 = 0;
  return sub_1000D9F50((atomic_ullong *)&v13);
}

void sub_1000FACDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000D9F50((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void sub_1000FAD1C(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v40 = a2;
  unint64_t v7 = (std::mutex *)(a1 + 776);
  uint64_t v8 = (void *)(a1 + 760);
  char v9 = (uint64_t **)(a1 + 752);
  long long v10 = (unint64_t *)(a1 + 1008);
  char v34 = (unint64_t *)(a1 + 104);
  long long v35 = (std::condition_variable *)(a1 + 840);
  do
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v40;
    }
    else
    {
      uint64_t v15 = (void *)*v8;
      if (!*v8) {
        goto LABEL_18;
      }
      uint64_t v11 = v40;
      uint64_t v16 = v8;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v40;
        if (v17 >= v40) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = v15 + 1;
        }
        if (v18) {
          uint64_t v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v8 || v40 < v16[4] || (unint64_t *)v16[5] == v10)
      {
LABEL_18:
        char v41 = 0;
        *a4 = 0;
        a4[1] = (unint64_t)v8;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
        sub_1000D9F50((atomic_ullong *)&v41);
        goto LABEL_19;
      }
    }
    char v41 = (unint64_t *)v11;
    uint64_t v42 = v10;
    atomic_ullong v12 = sub_1000FB5DC(v9, (unint64_t *)&v41, (uint64_t *)&v41);
    unint64_t v13 = v12;
    if (v14)
    {
      char v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v12;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1000D9F50((atomic_ullong *)&v41);
LABEL_19:
      int v20 = 1;
      goto LABEL_20;
    }
    char v38 = (unint64_t *)v12[5];
    if (v38 != v10)
    {
      sub_100042B98((uint64_t)&__lk);
      sub_1000F4D98(&v37, v38 + 45);
      if (v37 && !*(unsigned char *)(v37 + 344))
      {
        uint64_t v21 = v40;
        if (*(void *)(v37 + 32) == v40)
        {
          *a4 = 0;
          a4[1] = (unint64_t)v13;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v37, 0), a4);
          goto LABEL_66;
        }
        if (*(void *)(v37 + 32) != -1 || (a3 & 1) != 0)
        {
LABEL_30:
          if (sub_1000FB47C(a1, 0, v21, 1u) != -1)
          {
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 1uLL);
            v36.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C((unint64_t)v38);
            v36.__owns_ = 1;
            std::mutex::lock(v36.__m_);
            uint64_t v22 = sub_100141268((unint64_t)v38);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
            char v41 = (unint64_t *)&v38;
            uint64_t v42 = &v37;
            uint64_t v43 = &v40;
            sub_1000FB740((std::condition_variable *)v22, &v36, &v44, (uint64_t)&v41);
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 0xFFFFFFFFFFFFFFFFLL);
            if (v36.__owns_) {
              std::mutex::unlock(v36.__m_);
            }
            int v20 = 3;
            goto LABEL_67;
          }
          char v41 = 0;
          unint64_t v31 = atomic_load(v34);
          if (v31)
          {
            unint64_t v32 = v31;
            while (1)
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)v34, &v32, v31 + 1);
              if (v32 == v31) {
                break;
              }
              unint64_t v31 = v32;
              if (!v32) {
                goto LABEL_65;
              }
            }
            long long v33 = *(atomic_ullong **)(a1 + 432);
            unint64_t v32 = (unint64_t)v34;
            if (v33)
            {
              *(void *)(a1 + 440) = atomic_fetch_add_explicit(v33, 1uLL, memory_order_relaxed);
              unint64_t v32 = (unint64_t)v34;
            }
          }
          else
          {
            unint64_t v32 = 0;
          }
LABEL_65:
          atomic_store(v32, (unint64_t *)&v41);
          *a4 = 0;
          a4[1] = (unint64_t)v8;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
          sub_1000D9F50((atomic_ullong *)&v41);
LABEL_66:
          int v20 = 1;
LABEL_67:
          sub_1000D9F50((atomic_ullong *)&v37);
          goto LABEL_20;
        }
      }
      else if (a3)
      {
        uint64_t v21 = v40;
        goto LABEL_30;
      }
      char v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v8;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1000D9F50((atomic_ullong *)&v41);
      goto LABEL_66;
    }
    uint64_t v23 = (void *)*v8;
    if (*v8)
    {
      unint64_t v24 = v40;
      long long v25 = v8;
      while (1)
      {
        unint64_t v26 = v23[4];
        BOOL v27 = v26 >= v24;
        if (v26 >= v24) {
          long long v28 = v23;
        }
        else {
          long long v28 = v23 + 1;
        }
        if (v27) {
          long long v25 = v23;
        }
        uint64_t v23 = (void *)*v28;
        if (!*v28)
        {
          if (v25 == v8) {
            break;
          }
          if (v24 < v25[4]) {
            break;
          }
          uint64_t v29 = (unint64_t *)v25[5];
          if (v29 != v10)
          {
            unint64_t v30 = v29[45];
            if (v30)
            {
              if (!*(unsigned char *)(v30 + 344)) {
                break;
              }
            }
          }
          if (!*(unsigned char *)(a1 + 736)) {
            break;
          }
          std::condition_variable::wait(v35, &__lk);
          uint64_t v23 = (void *)*v8;
          long long v25 = v8;
          if (!*v8) {
            break;
          }
        }
      }
    }
    int v20 = 0;
LABEL_20:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v20 == 1) {
      return;
    }
  }
  while (*(unsigned char *)(a1 + 736));
  char v41 = 0;
  *a4 = 0;
  a4[1] = (unint64_t)v8;
  atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
  sub_1000D9F50((atomic_ullong *)&v41);
}

void sub_1000FB0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, atomic_ullong a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1000FB158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  atomic_ullong v11 = 0;
  uint64_t v6 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  uint64_t v7 = *(void *)(a1 + 512);
  if (v7)
  {
    uint64_t v8 = *(unint64_t **)(*(void *)(*(void *)(a1 + 480) + ((*(void *)(a1 + 504) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(void *)(a1 + 504) & 0x1FFLL));
    ++*(void *)(a1 + 504);
    *(void *)(a1 + 512) = v7 - 1;
    sub_1000FB8C8(a1 + 472, 1);
    sub_1000FB390(a1, v8, a2, v12);
    sub_1000DB5D8(&v11, (atomic_ullong *)v12);
    sub_1000D9F50((atomic_ullong *)v12);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v9 = atomic_load((unint64_t *)(a1 + 608));
  if (v9 + v7 >= *(void *)(a1 + 464))
  {
    sub_1000FB47C(a1, 0, 0, 0);
  }
  else
  {
    v12[0] = (unint64_t)_NSConcreteStackBlock;
    v12[1] = 0x40000000;
    v12[2] = (unint64_t)sub_1000FB928;
    v12[3] = (unint64_t)&unk_1001AF038;
    void v12[4] = a1;
    sub_10011DF84((dispatch_queue_t *)(a1 + 744), v12);
  }
  *a3 = v8;
  a3[1] = 0;
  atomic_store(atomic_exchange(&v11, 0), (unint64_t *)a3 + 1);
  return sub_1000D9F50(&v11);
}

void sub_1000FB2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong a9)
{
  std::mutex::unlock(v9);
  sub_1000D9F50(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1000FB2F4(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 75);
  uint64_t v2 = a1[57];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = a1[73];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 344) != -1)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[73] + 8 * v4), &v8, 0);
  if (v8 != v5 || (sub_1000FC1EC((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0) {
    return 0;
  }
  return v5;
}

atomic_ullong *sub_1000FB390@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  sub_1000FC5A4((uint64_t)a2, a3);
  uint64_t v7 = (atomic_ullong *)(a2 + 1);
  unint64_t v14 = 0;
  unint64_t v8 = atomic_load(a2 + 1);
  if (v8)
  {
    unint64_t v9 = v8;
    while (1)
    {
      atomic_compare_exchange_strong(v7, &v9, v8 + 1);
      if (v9 == v8) {
        break;
      }
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_5;
      }
    }
    long long v10 = (atomic_ullong *)a2[42];
    if (v10) {
      a2[43] = atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  atomic_store((unint64_t)v7, &v14);
  if (*(void *)(a1 + 456))
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 584) + 8 * v11), (unint64_t *)&v12, (unint64_t)a2);
      if (!v12) {
        break;
      }
      if (*(void *)(a1 + 456) <= (unint64_t)++v11) {
        goto LABEL_12;
      }
    }
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), a4);
  }
  else
  {
LABEL_12:
    *a4 = 0;
  }
  return sub_1000D9F50((atomic_ullong *)&v14);
}

uint64_t sub_1000FB47C(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 968)) {
    return 0;
  }
  unint64_t v17 = (std::mutex *)(a1 + 888);
  std::mutex::lock((std::mutex *)(a1 + 888));
  if (*(void *)(a1 + 968))
  {
    unint64_t v8 = *(uint64_t **)(a1 + 960);
    if (v8 == (uint64_t *)(a1 + 952))
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v8[2];
        if ((sub_1000D9F7C(v12 + 8, v8[3], v10) | a2) == 1)
        {
          unint64_t v13 = sub_10014119C(v12);
          std::mutex::lock((std::mutex *)v13);
          atomic_fetch_and((atomic_uint *volatile)(v12 + 368), 0xFFFFFFFB);
          std::mutex::unlock((std::mutex *)v13);
          uint64_t v14 = *v8;
          uint64_t v15 = (uint64_t *)v8[1];
          *(void *)(v14 + 8) = v15;
          *(void *)v8[1] = v14;
          --*(void *)(a1 + 968);
          operator delete(v8);
          unint64_t v8 = v15;
        }
        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          unint64_t v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 952));
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v17);
  return v11;
}

void sub_1000FB5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t *sub_1000FB5DC(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4] = *a3;
    _OWORD v10[5] = v11;
    sub_10002B3B8(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

unint64_t *sub_1000FB698(unint64_t *a1, unint64_t *a2, int a3)
{
  uint64_t v3 = (atomic_ullong *)a2;
  *a1 = 0;
  if (a2)
  {
    unint64_t v5 = atomic_load(a2);
    if (!v5)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v6 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a2, &v6, v5 + 1);
      if (v6 == v5) {
        break;
      }
      unint64_t v5 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
    unint64_t v8 = (atomic_ullong *)a2[41];
    if (v8) {
      a2[42] = atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    if (a3 && !sub_1000F4E3C((uint64_t)a2))
    {
      if (atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v3[4];
        v3[4] = -1;
        sub_1000D9F7C((uint64_t)v3, v9, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1000FB740(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if (*(_DWORD *)(**(void **)a4 + 368)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(unsigned char *)(*(void *)v8 + 344) && *(void *)(*(void *)v8 + 32) == **(void **)(a4 + 16)) {
        return 1;
      }
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if (*(_DWORD *)(**(void **)a4 + 368)) {
    return 1;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(unsigned char *)(*(void *)v14 + 344)
      && *(void *)(*(void *)v14 + 32) == **(void **)(a4 + 16);
}

uint64_t sub_1000FB8C8(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t sub_1000FB928(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = sub_1000FB2F4(v1);
  if (v2) {
    sub_1000FB980((uint64_t)v1, v2);
  }

  return sub_1000FB47C((uint64_t)v1, 0, 0, 0);
}

void sub_1000FB980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  sub_1000FB9E0((void *)(a1 + 472), &v4);
  std::mutex::unlock(v3);
}

void sub_1000FB9CC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000FB9E0(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1000FBA68(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1000FBA68(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100019308(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1000FBD80(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1000FBE98((uint64_t)a1, &v54);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100019308((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  char v56 = a1 + 3;
  *(void *)&long long v54 = sub_100019308((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_1000FBFB8(&v54, &v53);
  BOOL v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000FC0D0((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1000FBD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000FBD80(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_100019308(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      BOOL v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_1000FBE98(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_100019308(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_1000FBFB8(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_100019308(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_1000FC0D0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_100019308(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_1000FC1EC(uint64_t a1, unint64_t a2, unint64_t a3, atomic_ullong *a4)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 608), 1uLL);
  if (a3) {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 1uLL);
  }
  atomic_fetch_or((atomic_uint *volatile)(a2 + 368), 2u);
  sub_1000D9F50((atomic_ullong *)(a2 + 360));
  if (a4) {
    sub_1000D9F50(a4);
  }
  if (a3)
  {
    char v8 = atomic_load((unsigned int *)(a2 + 368));
    if ((v8 & 4) == 0)
    {
      uint64_t v9 = a3 & 0x100;
      uint64_t v10 = (a3 >> 8) & 1;
      uint64_t v11 = (a3 >> 16) & 1;
      do
      {
        if (*(_DWORD *)(a2 + 368)) {
          break;
        }
        if (v10)
        {
          std::mutex::lock((std::mutex *)(a1 + 520));
          uint64_t v12 = *(void *)(a1 + 512);
          std::mutex::unlock((std::mutex *)(a1 + 520));
          if (v12) {
            break;
          }
        }
        if (sub_1000FB47C(a1, v11, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v18 = sub_100141268(a2);
          v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v26 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = v19.__d_.__rep_ + 200000;
          unint64_t v23 = a2;
          char v24 = v10;
          *(_DWORD *)unint64_t v25 = *(_DWORD *)v29;
          *(_DWORD *)&v25[3] = *(_DWORD *)&v29[3];
          sub_1000FC430((std::condition_variable *)v18, &__lk, &v27, (uint64_t)&v23);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v13 = sub_100141268(a2);
          char v14 = atomic_load((unsigned int *)(a2 + 368));
          if ((v14 & 4) == 0)
          {
            uint64_t v15 = (std::condition_variable *)v13;
            do
            {
              if (*(_DWORD *)(a2 + 368)) {
                break;
              }
              if (v10)
              {
                std::mutex::lock((std::mutex *)(a1 + 520));
                uint64_t v16 = *(void *)(a1 + 512);
                std::mutex::unlock((std::mutex *)(a1 + 520));
                if (v16) {
                  break;
                }
              }
              std::condition_variable::wait(v15, &__lk);
              char v17 = atomic_load((unsigned int *)(a2 + 368));
            }
            while ((v17 & 4) == 0);
          }
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        int v20 = *(_DWORD *)(a2 + 368);
        if (!v9 || (v20 & 1) != 0)
        {
          if (v20) {
            break;
          }
        }
        else if (*(void *)(a1 + 512))
        {
          break;
        }
        char v21 = atomic_load((unsigned int *)(a2 + 368));
      }
      while ((v21 & 4) == 0);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 0xFFFFFFFFFFFFFFFFLL);
  }
  return atomic_fetch_and((atomic_uint *volatile)(a2 + 368), 0xFFFFFFFD) & 1;
}

void sub_1000FC408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FC430(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 368));
    if ((v9 & 4) != 0) {
      return 1;
    }
    if (*(_DWORD *)(*(void *)a4 + 368)) {
      return 1;
    }
    if (*(unsigned char *)(a4 + 8))
    {
      uint64_t v10 = (std::mutex *)(v8 + 520);
      std::mutex::lock((std::mutex *)(v8 + 520));
      uint64_t v11 = *(void *)(v8 + 512);
      std::mutex::unlock(v10);
      if (v11) {
        return 1;
      }
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 368));
  if (v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 368)) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    return 0;
  }
  std::mutex::lock((std::mutex *)(v15 + 520));
  BOOL v17 = *(void *)(v15 + 512) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 520));
  return v17;
}

atomic_ullong *sub_1000FC5A4(uint64_t a1, uint64_t a2)
{
  atomic_store(0, (unsigned int *)(a1 + 368));
  BOOL v3 = (unint64_t *)(a1 + 8);
  sub_1000FC674(a1 + 8, a2);
  unint64_t v9 = 0;
  unint64_t v4 = atomic_load(v3);
  if (v4)
  {
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_9;
      }
    }
    uint64_t v6 = *(atomic_ullong **)(a1 + 336);
    unint64_t v5 = (unint64_t)v3;
    if (v6)
    {
      *(void *)(a1 + 344) = atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
      unint64_t v5 = (unint64_t)v3;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_9:
  atomic_store(v5, &v9);
  sub_1000DB5D8((atomic_ullong *)(a1 + 360), (atomic_ullong *)&v9);
  uint64_t result = sub_1000D9F50((atomic_ullong *)&v9);
  if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1;
    return (atomic_ullong *)sub_1000D9F7C((uint64_t)v3, v8, 1u);
  }
  return result;
}

void *sub_1000FC674(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 344) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  uint64_t result = sub_1000DA1B0((void *)(a1 + 40));
  unint64_t v4 = *(atomic_ullong **)(a1 + 328);
  if (v4) {
    *(void *)(a1 + 336) = atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

uint64_t *sub_1000FC6DC(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8 = (uint64_t **)sub_1000FC774(a1, a2, &v14, &v13, a3);
  unint64_t v9 = *v8;
  if (!*v8)
  {
    uint64_t v10 = v8;
    unint64_t v9 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = *a5;
    v9[4] = *a4;
    v9[5] = v11;
    sub_10002B3B8(a1, v14, v10, v9);
  }
  return v9;
}

void *sub_1000FC774(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    char v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          char v16 = (void *)*v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        char v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      BOOL v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    std::chrono::system_clock::time_point v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      std::chrono::system_clock::time_point v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    std::chrono::system_clock::time_point v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      std::chrono::system_clock::time_point v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    int v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          int v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        int v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_1000FC91C(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_1000FC9A0(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t result = sub_1000FC9F4(a1, a2);
  result[5] = *result;
  result[6] = v4;
  if (v4 && a3)
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (void *)(*result + v6);
      *unint64_t v7 = 0;
      v7[1] = 0;
      v6 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *sub_1000FC9F4(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[4] = 0;
  BOOL v3 = malloc_type_valloc(16 * a2, 0x1000040451B5BE8uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_alloc::bad_alloc(exception);
  }
  v7[0] = off_1001AF068;
  v7[3] = v7;
  uint64_t v8 = v3;
  sub_1000FCC2C((uint64_t)v9, (uint64_t)v7);
  sub_1000FCB1C(a1, (uint64_t *)&v8);
  sub_1000D9E48((uint64_t *)&v8, 0);
  sub_1000D9ECC(v9);
  sub_1000D9ECC(v7);
  return a1;
}

void sub_1000FCAFC(_Unwind_Exception *a1)
{
  sub_1000D9E48(v1, 0);
  sub_1000D9ECC(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000FCB1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  sub_1000D9E48(a1, v4);
  sub_1000FCCAC(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000FCB64()
{
}

void *sub_1000FCB78()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001AF068;
  return result;
}

void sub_1000FCBB0(uint64_t a1, void *a2)
{
  *a2 = off_1001AF068;
}

void sub_1000FCBD8(uint64_t a1, void **a2)
{
}

uint64_t sub_1000FCBE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000FCC20()
{
}

uint64_t sub_1000FCC2C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    BOOL v3 = (void *)(a1 + 24);
  }
  *BOOL v3 = 0;
  return a1;
}

void *sub_1000FCCAC(void *a1, uint64_t a2)
{
  sub_1000FCD30(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1000FCD30(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000FCDB8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100019308(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    std::chrono::system_clock::time_point v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1000FBD80(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1000FBE98((uint64_t)a1, &v54);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100019308((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  char v56 = a1 + 3;
  *(void *)&long long v54 = sub_100019308((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_1000FBFB8(&v54, &v53);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000FC0D0((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1000FD084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000FD0D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  *(void *)(a1 + 336) = **(void **)(a1 + 328);
  uint64_t v10 = a1 + 40;
  sub_1000DA1B0((void *)(a1 + 40));
  sub_1000E4718(v10, a2, a3, *a4, *a5, 0);
  *(unsigned char *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));

  sub_1000FD1A4(a1);
}

void sub_1000FD16C(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 344) = 1;
  sub_1000FD1A4(v1);
  __cxa_rethrow();
}

void sub_1000FD190(_Unwind_Exception *a1)
{
}

void sub_1000FD1A4(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 8))) {
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
  }
}

void sub_1000FD1D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, char *a6)
{
  *(void *)(a1 + 336) = **(void **)(a1 + 328);
  uint64_t v12 = a1 + 40;
  sub_1000DA1B0((void *)(a1 + 40));
  sub_1000E4718(v12, a2, a3, *a4, *a5, *a6);
  *(unsigned char *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));

  sub_1000FD1A4(a1);
}

void sub_1000FD278(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 344) = 1;
  sub_1000FD1A4(v1);
  __cxa_rethrow();
}

void sub_1000FD29C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FD2B0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AC148;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000FD32C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FD340(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AC368;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000FD3BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FD3D0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AC588;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000FD44C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FD460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1000FD4B4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1000FD538(uint64_t a1)
{
  *(unsigned char *)(a1 + 912) = 0;
  if (*(void *)(a1 + 632))
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 760) + 8 * v3), 0);
      if (v4)
      {
        sub_1000FD76C(a1, v4, v1 & 0xFFFFFFFFFF000000 | 0x10001, 0);
        sub_1000D90F8((atomic_ullong *)(v4 + 536));
        sub_1000FDCC0((void *)(v4 + 8));
        operator delete();
      }
      ++v3;
    }
    while (*(void *)(a1 + 632) > v3);
  }
  sub_10011E030((dispatch_queue_t *)(a1 + 920), &stru_1001AF108);
  if (*(void *)(a1 + 760)) {
    operator delete[]();
  }
  std::mutex::lock((std::mutex *)(a1 + 696));
  uint64_t v5 = *(void *)(a1 + 656);
  if (*(void *)(a1 + 664) != v5)
  {
    unint64_t v6 = *(void *)(a1 + 680);
    unint64_t v7 = (void *)(v5 + 8 * (v6 >> 9));
    uint64_t v8 = (uint64_t *)(*v7 + 8 * (v6 & 0x1FF));
    while (v8 != (uint64_t *)(*(void *)(v5 + (((*(void *)(a1 + 688) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(void *)(a1 + 688) + v6) & 0x1FF)))
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        sub_1000D90F8((atomic_ullong *)(v9 + 536));
        sub_1000FDCC0((void *)(v9 + 8));
        operator delete();
      }
      if ((uint64_t *)((char *)++v8 - *v7) == (uint64_t *)4096)
      {
        uint64_t v10 = (uint64_t *)v7[1];
        ++v7;
        uint64_t v8 = v10;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 696));
  sub_1000FDE7C((void *)(a1 + 1768));
  sub_1000FDF00((void *)(a1 + 1736));
  sub_1000D90F8((atomic_ullong *)(a1 + 1720));
  sub_1000FDCC0((void *)(a1 + 1192));
  sub_100101948((void *)(a1 + 1152));
  sub_1000FDF84((void *)(a1 + 1128));
  std::mutex::~mutex((std::mutex *)(a1 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1016));
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  sub_10002A594(a1 + 928, *(void **)(a1 + 936));
  sub_10011DEBC((NSObject **)(a1 + 920));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 864));
  std::mutex::~mutex((std::mutex *)(a1 + 800));
  std::mutex::~mutex((std::mutex *)(a1 + 696));
  sub_1000D9D50((void *)(a1 + 648));

  return sub_1000FDFE8((void *)a1);
}

uint64_t sub_1000FD76C(uint64_t a1, unint64_t a2, unint64_t a3, atomic_ullong *a4)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 784), 1uLL);
  if (a3) {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 1uLL);
  }
  atomic_fetch_or((atomic_uint *volatile)(a2 + 544), 2u);
  sub_1000D90F8((atomic_ullong *)(a2 + 536));
  if (a4) {
    sub_1000D90F8(a4);
  }
  if (a3)
  {
    char v8 = atomic_load((unsigned int *)(a2 + 544));
    if ((v8 & 4) == 0)
    {
      uint64_t v9 = a3 & 0x100;
      uint64_t v10 = (a3 >> 8) & 1;
      uint64_t v11 = (a3 >> 16) & 1;
      do
      {
        if (*(_DWORD *)(a2 + 544)) {
          break;
        }
        if (v10)
        {
          std::mutex::lock((std::mutex *)(a1 + 696));
          uint64_t v12 = *(void *)(a1 + 688);
          std::mutex::unlock((std::mutex *)(a1 + 696));
          if (v12) {
            break;
          }
        }
        if (sub_1000FD9EC(a1, v11, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v18 = sub_100141268(a2);
          v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v26 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = v19.__d_.__rep_ + 200000;
          unint64_t v23 = a2;
          char v24 = v10;
          *(_DWORD *)unint64_t v25 = *(_DWORD *)v29;
          *(_DWORD *)&v25[3] = *(_DWORD *)&v29[3];
          sub_1000FDB4C((std::condition_variable *)v18, &__lk, &v27, (uint64_t)&v23);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v13 = sub_100141268(a2);
          char v14 = atomic_load((unsigned int *)(a2 + 544));
          if ((v14 & 4) == 0)
          {
            uint64_t v15 = (std::condition_variable *)v13;
            do
            {
              if (*(_DWORD *)(a2 + 544)) {
                break;
              }
              if (v10)
              {
                std::mutex::lock((std::mutex *)(a1 + 696));
                uint64_t v16 = *(void *)(a1 + 688);
                std::mutex::unlock((std::mutex *)(a1 + 696));
                if (v16) {
                  break;
                }
              }
              std::condition_variable::wait(v15, &__lk);
              char v17 = atomic_load((unsigned int *)(a2 + 544));
            }
            while ((v17 & 4) == 0);
          }
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        int v20 = *(_DWORD *)(a2 + 544);
        if (!v9 || (v20 & 1) != 0)
        {
          if (v20) {
            break;
          }
        }
        else if (*(void *)(a1 + 688))
        {
          break;
        }
        char v21 = atomic_load((unsigned int *)(a2 + 544));
      }
      while ((v21 & 4) == 0);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 0xFFFFFFFFFFFFFFFFLL);
  }
  return atomic_fetch_and((atomic_uint *volatile)(a2 + 544), 0xFFFFFFFD) & 1;
}

void sub_1000FD988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FD9B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000FD9EC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 1144)) {
    return 0;
  }
  char v17 = (std::mutex *)(a1 + 1064);
  std::mutex::lock((std::mutex *)(a1 + 1064));
  if (*(void *)(a1 + 1144))
  {
    char v8 = *(uint64_t **)(a1 + 1136);
    if (v8 == (uint64_t *)(a1 + 1128))
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v8[2];
        if ((sub_1000D9124(v12 + 8, v8[3], v10) | a2) == 1)
        {
          uint64_t v13 = sub_10014119C(v12);
          std::mutex::lock((std::mutex *)v13);
          atomic_fetch_and((atomic_uint *volatile)(v12 + 544), 0xFFFFFFFB);
          std::mutex::unlock((std::mutex *)v13);
          uint64_t v14 = *v8;
          uint64_t v15 = (uint64_t *)v8[1];
          *(void *)(v14 + 8) = v15;
          *(void *)v8[1] = v14;
          --*(void *)(a1 + 1144);
          operator delete(v8);
          char v8 = v15;
        }
        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          char v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 1128));
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v17);
  return v11;
}

void sub_1000FDB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t sub_1000FDB4C(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 544));
    if ((v9 & 4) != 0) {
      return 1;
    }
    if (*(_DWORD *)(*(void *)a4 + 544)) {
      return 1;
    }
    if (*(unsigned char *)(a4 + 8))
    {
      unsigned int v10 = (std::mutex *)(v8 + 696);
      std::mutex::lock((std::mutex *)(v8 + 696));
      uint64_t v11 = *(void *)(v8 + 688);
      std::mutex::unlock(v10);
      if (v11) {
        return 1;
      }
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 544));
  if (v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 544)) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    return 0;
  }
  std::mutex::lock((std::mutex *)(v15 + 696));
  BOOL v17 = *(void *)(v15 + 688) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 696));
  return v17;
}

void *sub_1000FDCC0(void *a1)
{
  return a1;
}

void *sub_1000FDD04(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1000FDD88(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1000FDE0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 360))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 280));
    sub_1000D9D50((void *)(a1 + 232));
    std::mutex::~mutex((std::mutex *)(a1 + 168));
    std::mutex::~mutex((std::mutex *)(a1 + 104));
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
    sub_1000D9E48((uint64_t *)(a1 + 16), 0);
    sub_1000D9ECC((void *)(a1 + 24));
  }
  return a1;
}

void *sub_1000FDE7C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1000FDF00(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1000FDF84(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        unint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void *sub_1000FDFE8(void *a1)
{
  uint64_t v2 = a1 + 13;
  if (atomic_fetch_add(a1 + 13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v3 = a1[17];
    a1[17] = -1;
    sub_1000D9124((uint64_t)(a1 + 13), v3, 1u);
  }
  sub_1000FDCC0(v2);
  sub_100101948(a1 + 8);
  sub_1000FDD04(a1 + 4);

  return sub_1000FDD88(a1);
}

void *sub_1000FE060(uint64_t a1)
{
  *(unsigned char *)(a1 + 736) = 0;
  if (*(void *)(a1 + 456))
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 584) + 8 * v3), 0);
      if (v4)
      {
        sub_1000FC1EC(a1, v4, v1 & 0xFFFFFFFFFF000000 | 0x10001, 0);
        sub_1000D9F50((atomic_ullong *)(v4 + 360));
        sub_1000FE2C8((void *)(v4 + 8));
        operator delete();
      }
      ++v3;
    }
    while (*(void *)(a1 + 456) > v3);
  }
  sub_10011E030((dispatch_queue_t *)(a1 + 744), &stru_1001AF148);
  if (*(void *)(a1 + 584)) {
    operator delete[]();
  }
  std::mutex::lock((std::mutex *)(a1 + 520));
  uint64_t v5 = *(void *)(a1 + 480);
  if (*(void *)(a1 + 488) != v5)
  {
    unint64_t v6 = *(void *)(a1 + 504);
    unint64_t v7 = (void *)(v5 + 8 * (v6 >> 9));
    uint64_t v8 = (uint64_t *)(*v7 + 8 * (v6 & 0x1FF));
    while (v8 != (uint64_t *)(*(void *)(v5 + (((*(void *)(a1 + 512) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(void *)(a1 + 512) + v6) & 0x1FF)))
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        sub_1000D9F50((atomic_ullong *)(v9 + 360));
        sub_1000FE2C8((void *)(v9 + 8));
        operator delete();
      }
      if ((uint64_t *)((char *)++v8 - *v7) == (uint64_t *)4096)
      {
        unsigned int v10 = (uint64_t *)v7[1];
        ++v7;
        uint64_t v8 = v10;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 520));
  sub_1000FE47C((void *)(a1 + 1416));
  sub_1000FE500((void *)(a1 + 1384));
  sub_1000D9F50((atomic_ullong *)(a1 + 1368));
  sub_1000FE2C8((void *)(a1 + 1016));
  sub_1000FD4B4((void *)(a1 + 976));
  sub_1000FDF84((void *)(a1 + 952));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 840));
  std::mutex::~mutex((std::mutex *)(a1 + 776));
  sub_10002A594(a1 + 752, *(void **)(a1 + 760));
  sub_10011DEBC((NSObject **)(a1 + 744));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 688));
  std::mutex::~mutex((std::mutex *)(a1 + 624));
  std::mutex::~mutex((std::mutex *)(a1 + 520));
  sub_1000D9D50((void *)(a1 + 472));

  return sub_1000FE584((void *)a1);
}

uint64_t sub_1000FE28C(uint64_t a1)
{
  return a1;
}

void *sub_1000FE2C8(void *a1)
{
  return a1;
}

void *sub_1000FE30C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1000FE390(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1000FE414(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 120));
    *(void *)(a1 + 32) = off_10019F2D8;
    sub_10007F4FC((uint64_t *)(a1 + 56), 0);
    sub_10007F68C((void *)(a1 + 64));
  }
  return a1;
}

void *sub_1000FE47C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1000FE500(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1000FE584(void *a1)
{
  uint64_t v2 = a1 + 13;
  if (atomic_fetch_add(a1 + 13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v3 = a1[17];
    a1[17] = -1;
    sub_1000D9F7C((uint64_t)(a1 + 13), v3, 1u);
  }
  sub_1000FE2C8(v2);
  sub_1000FD4B4(a1 + 8);
  sub_1000FE30C(a1 + 4);

  return sub_1000FE390(a1);
}

uint64_t sub_1000FE5FC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AC828;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000FE678(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FE68C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ACA48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000FE708(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FE71C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ACC68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000FE798(_Unwind_Exception *a1)
{
}

void sub_1000FE7B0()
{
}

__n128 sub_1000FE7C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1001AF178;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1000FE818(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001AF178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1000FE850(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000FE85C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000FE89C()
{
}

void *sub_1000FE8A8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1000FE92C(void **a1, char *a2, uint64_t a3, void *a4, char *a5, void *a6, char *a7, unint64_t a8)
{
  unint64_t v8 = a8;
  unint64_t v14 = (unint64_t)a1[4];
  unint64_t v15 = v14 >> 9;
  char v16 = a1[1];
  BOOL v17 = a1[2];
  uint64_t v18 = &v16[8 * (v14 >> 9)];
  if (v17 == v16) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)v18 + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  if (a3 == v19) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = ((a3 - *(void *)a2) >> 3) + ((a2 - v18) << 6) - ((v19 - *(void *)v18) >> 3);
  }
  char v21 = (char *)a1[5];
  if (v20 >= (unint64_t)&v21[-v20])
  {
    uint64_t v24 = ((v17 - v16) << 6) - 1;
    if (v17 == v16) {
      uint64_t v24 = 0;
    }
    unint64_t v25 = (unint64_t)&v21[v14];
    unint64_t v26 = v24 - v25;
    if (a8 > v26)
    {
      sub_1000FF400(a1, a8 - v26);
      char v21 = (char *)a1[5];
      char v16 = a1[1];
      BOOL v17 = a1[2];
      unint64_t v25 = (unint64_t)&v21[(void)a1[4]];
    }
    long long v88 = (char **)a6;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = (char **)&v16[8 * (v25 >> 9)];
    if (v17 == v16) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = &(*v27)[8 * (v25 & 0x1FF)];
    }
    v90.n128_u64[0] = (unint64_t)&v16[8 * (v25 >> 9)];
    v90.n128_u64[1] = (unint64_t)v28;
    unint64_t v31 = (unint64_t)&v21[-v20];
    long long v87 = (char **)a4;
    if ((unint64_t)&v21[-v20] >= v8)
    {
      char v34 = a7;
      if (!v8) {
        goto LABEL_90;
      }
      goto LABEL_78;
    }
    if (v31 >= v8 >> 1)
    {
      uint64_t v32 = (uint64_t)&v21[-v20 - v8 + ((a7 - *v88) >> 3)];
      if (v32 >= 1)
      {
        v88 += (unint64_t)v32 >> 9;
        unint64_t v33 = *v88;
        goto LABEL_39;
      }
      unint64_t v37 = 511 - v32;
      __int16 v38 = ~(_WORD)v37;
      v88 -= v37 >> 9;
      uint64_t v39 = *v88;
    }
    else
    {
      if (!v31)
      {
        long long v88 = (char **)a4;
        char v34 = a5;
        goto LABEL_69;
      }
      uint64_t v32 = v31 + ((uint64_t)&a5[-*a4] >> 3);
      if (v32 >= 1)
      {
        long long v88 = (char **)&a4[(unint64_t)v32 >> 9];
        unint64_t v33 = *v88;
LABEL_39:
        char v34 = &v33[8 * (v32 & 0x1FF)];
        goto LABEL_69;
      }
      unint64_t v64 = 511 - v32;
      __int16 v38 = ~(_WORD)v64;
      long long v88 = (char **)&a4[-(v64 >> 9)];
      uint64_t v39 = *v88;
    }
    char v34 = &v39[8 * (v38 & 0x1FF)];
LABEL_69:
    if (v34 != a7)
    {
      long long v65 = *v27;
      long long v66 = v88;
      char v67 = v34;
      do
      {
        *(void *)uint64_t v28 = *(void *)v67;
        v28 += 8;
        if (v28 - v65 == 4096)
        {
          uint64_t v68 = v27[1];
          ++v27;
          long long v65 = v68;
          uint64_t v28 = v68;
        }
        v67 += 8;
        if (v67 - *v66 == 4096)
        {
          long long v69 = v66[1];
          ++v66;
          char v67 = v69;
        }
        ++v21;
      }
      while (v67 != a7);
      a1[5] = v21;
    }
    unint64_t v8 = v31;
    if (!v31) {
      goto LABEL_90;
    }
LABEL_78:
    long long v70 = (char **)sub_1000FF98C((uint64_t)&v90, v8);
    char v72 = v70;
    long long v73 = v71;
    char v74 = (char *)v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v71)
    {
      uint64_t v75 = (char *)a1[5];
      uint64_t v76 = *v27;
      uint64_t v77 = v70;
      long long v78 = v71;
      do
      {
        *(void *)uint64_t v28 = *(void *)v78;
        v28 += 8;
        if (v28 - v76 == 4096)
        {
          long long v79 = v27[1];
          ++v27;
          uint64_t v76 = v79;
          uint64_t v28 = v79;
        }
        v78 += 8;
        if (&v78[-*v77] == (char *)4096)
        {
          char v80 = (char *)v77[1];
          ++v77;
          long long v78 = v80;
        }
        ++v75;
      }
      while (v78 != v74);
      a1[5] = v75;
    }
    if (v8 >= v31)
    {
      long long v83 = (void *)v90.n128_u64[0];
    }
    else
    {
      uint64_t v81 = (char **)sub_1000FF98C((uint64_t)&v90, v31);
      sub_1000FFB84(v81, v82, v72, v73, v90.n128_u64[0], (char *)v90.n128_u64[1], &v91);
      char v74 = (char *)v92.n128_u64[1];
      long long v83 = (void *)v92.n128_u64[0];
      __n128 v90 = v92;
    }
    sub_1000FFB84(v87, a5, v88, v34, v83, v74, &v91);
    goto LABEL_90;
  }
  if (a8 > v14)
  {
    sub_1000FEED0(a1, a8 - v14);
    unint64_t v14 = (unint64_t)a1[4];
    char v16 = a1[1];
    BOOL v17 = a1[2];
    unint64_t v15 = v14 >> 9;
  }
  unint64_t v22 = (uint64_t *)&v16[8 * v15];
  if (v17 == v16) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *v22 + 8 * (v14 & 0x1FF);
  }
  v90.n128_u64[0] = (unint64_t)&v16[8 * v15];
  v90.n128_u64[1] = v23;
  if (v8 <= v20)
  {
    long long v30 = a5;
    if (!v8) {
      goto LABEL_90;
    }
    goto LABEL_55;
  }
  if (v20 >= v8 >> 1)
  {
    uint64_t v29 = v8 - v20 + ((uint64_t)&a5[-*a4] >> 3);
    if (v29 >= 1)
    {
      a4 += (unint64_t)v29 >> 9;
      goto LABEL_36;
    }
    unint64_t v35 = 511 - v29;
    __int16 v36 = ~(_WORD)v35;
    a4 -= v35 >> 9;
  }
  else
  {
    if (!v20)
    {
      a4 = a6;
      long long v30 = a7;
      goto LABEL_46;
    }
    uint64_t v29 = ((uint64_t)&a7[-*a6] >> 3) - v20;
    if (v29 >= 1)
    {
      a4 = &a6[(unint64_t)v29 >> 9];
LABEL_36:
      long long v30 = (char *)(*a4 + 8 * (v29 & 0x1FF));
      goto LABEL_46;
    }
    unint64_t v40 = 511 - v29;
    __int16 v36 = ~(_WORD)v40;
    a4 = &a6[-(v40 >> 9)];
  }
  long long v30 = (char *)(*a4 + 8 * (v36 & 0x1FF));
LABEL_46:
  if (v30 != a5)
  {
    char v41 = (char *)a1[5];
    uint64_t v42 = *v22;
    uint64_t v43 = (char **)a4;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = v30;
    do
    {
      if (v23 == v42)
      {
        uint64_t v45 = *--v22;
        uint64_t v42 = v45;
        uint64_t v23 = v45 + 4096;
      }
      if (v44 == *v43)
      {
        uint64_t v46 = (uint64_t)*--v43;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (char *)(v46 + 4096);
      }
      uint64_t v47 = *((void *)v44 - 1);
      v44 -= 8;
      *(void *)(v23 - 8) = v47;
      v23 -= 8;
      --v14;
      ++v41;
    }
    while (v44 != a5);
    a1[4] = (void *)v14;
    a1[5] = v41;
  }
  unint64_t v8 = v20;
  if (v20)
  {
LABEL_55:
    char v89 = (char **)a6;
    unint64_t v48 = (char **)a4;
    uint64_t v49 = (char **)sub_1000FF39C((uint64_t)&v90, v8);
    long long v51 = v49;
    uint64_t v52 = v50;
    unint64_t v53 = v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v50)
    {
      int64x2_t v54 = *((int64x2_t *)a1 + 2);
      uint64_t v55 = *v22;
      char v56 = v49;
      long long v57 = v50;
      do
      {
        if (v23 == v55)
        {
          uint64_t v58 = *--v22;
          uint64_t v55 = v58;
          uint64_t v23 = v58 + 4096;
        }
        if (v57 == *v56)
        {
          uint64_t v59 = (uint64_t)*--v56;
          long long v57 = (char *)(v59 + 4096);
        }
        uint64_t v60 = *((void *)v57 - 1);
        v57 -= 8;
        *(void *)(v23 - 8) = v60;
        v23 -= 8;
        int64x2_t v54 = vaddq_s64(v54, (int64x2_t)xmmword_1001694A0);
      }
      while (v57 != (char *)v53);
      *((int64x2_t *)a1 + 2) = v54;
    }
    if (v8 >= v20)
    {
      unint64_t v63 = v90.n128_u64[0];
    }
    else
    {
      BOOL v61 = (char **)sub_1000FF39C((uint64_t)&v90, v20);
      __n128 v91 = v90;
      sub_1000FF9F4(v51, v52, v61, v62, (uint64_t)&v91);
      unint64_t v53 = v91.n128_u64[1];
      unint64_t v63 = v91.n128_u64[0];
      __n128 v90 = v91;
    }
    v91.n128_u64[0] = v63;
    v91.n128_u64[1] = v53;
    sub_1000FF9F4(v48, v30, v89, a7, (uint64_t)&v91);
  }
LABEL_90:
  int64_t v84 = a1[1];
  if (a1[2] == v84) {
    uint64_t v85 = 0;
  }
  else {
    uint64_t v85 = v84[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  v91.n128_u64[0] = (unint64_t)&v84[(unint64_t)a1[4] >> 9];
  v91.n128_u64[1] = v85;
  return sub_1000FF39C((uint64_t)&v91, v20);
}

void sub_1000FEED0(void **a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  char v4 = a1[2];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  if (v4 == v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v3) << 6) - 1;
  }
  if ((v6 & 0x1FF) != 0) {
    unint64_t v8 = (v6 >> 9) + 1;
  }
  else {
    unint64_t v8 = v6 >> 9;
  }
  uint64_t v9 = (uint64_t)a1[4];
  unint64_t v10 = v7 - ((void)a1[5] + v9);
  if (v8 >= v10 >> 9) {
    unint64_t v11 = v10 >> 9;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v8 <= v10 >> 9)
  {
    for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
    {
      uint64_t v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      sub_1000FBE98((uint64_t)a1, __p);
    }
  }
  else
  {
    uint64_t v12 = (uint64_t)(a1 + 3);
    unint64_t v13 = v8 - v11;
    uint64_t v14 = (unsigned char *)a1[3] - (unsigned char *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            sub_1000FBD80(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          uint64_t v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            sub_1000FBE98((uint64_t)a1, __p);
            unint64_t v20 = a1[1];
            uint64_t v21 = (unsigned char *)a1[2] - v20 == 8 ? 511 : 512;
            uint64_t v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13) {
              break;
            }
            if (v20 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
      {
        uint64_t v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        sub_1000FBE98((uint64_t)a1, __p);
      }
    }
    else
    {
      BOOL v15 = v4 == v3;
      unint64_t v16 = v8 << 9;
      if (v14 >> 2 <= v13 + (v5 >> 3)) {
        unint64_t v17 = v13 + (v5 >> 3);
      }
      else {
        unint64_t v17 = v14 >> 2;
      }
      long long v70 = a1 + 3;
      if (v17) {
        uint64_t v18 = (char *)sub_100019308(v12, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      uint64_t v68 = v18;
      long long v69 = &v18[8 * v17];
      do
      {
        long long v66 = operator new(0x1000uLL);
        sub_1000FBFB8(__p, &v66);
        --v13;
      }
      while (v13);
      unint64_t v25 = (char *)a1[2];
      for (uint64_t i = v68; v11; --v11)
      {
        if (i == v69)
        {
          int64_t v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v35 = 1;
            }
            else {
              unint64_t v35 = (i - (char *)__p[0]) >> 2;
            }
            __int16 v36 = (char *)sub_100019308((uint64_t)v70, v35);
            __int16 v38 = (uint64_t *)__p[1];
            uint64_t i = &v36[8 * (v35 >> 2)];
            uint64_t v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              uint64_t i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v40 = 8 * (v39 >> 3);
              char v41 = &v36[8 * (v35 >> 2)];
              do
              {
                uint64_t v42 = *v38++;
                *(void *)char v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            uint64_t v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            uint64_t v68 = i;
            long long v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              uint64_t i = v68;
            }
          }
          else
          {
            uint64_t v28 = v27 >> 3;
            BOOL v29 = v27 >> 3 < -1;
            uint64_t v30 = (v27 >> 3) + 2;
            if (v29) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = v28 + 1;
            }
            uint64_t v32 = (char *)__p[1] - 8 * (v31 >> 1);
            int64_t v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              uint64_t i = (char *)__p[1];
            }
            char v34 = &i[-8 * (v31 >> 1)];
            uint64_t i = &v32[v33];
            __p[1] = v34;
            uint64_t v68 = &v32[v33];
          }
        }
        *(void *)uint64_t i = *((void *)v25 - 1);
        uint64_t i = v68 + 8;
        v68 += 8;
        unint64_t v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (char *)a1[1];
      if (v44 == v25)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            int64_t v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v52 = 1;
              }
              else {
                unint64_t v52 = (i - (char *)__p[0]) >> 2;
              }
              unint64_t v53 = (char *)sub_100019308((uint64_t)v70, v52);
              uint64_t v55 = (uint64_t *)__p[1];
              uint64_t i = &v53[8 * (v52 >> 2)];
              uint64_t v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                uint64_t i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v57 = 8 * (v56 >> 3);
                uint64_t v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  uint64_t v59 = *v55++;
                  *(void *)uint64_t v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              uint64_t v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              uint64_t v68 = i;
              long long v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                uint64_t i = v68;
              }
            }
            else
            {
              uint64_t v46 = v45 >> 3;
              BOOL v29 = v45 >> 3 < -1;
              uint64_t v47 = (v45 >> 3) + 2;
              if (v29) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v46 + 1;
              }
              uint64_t v49 = (char *)__p[1] - 8 * (v48 >> 1);
              int64_t v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                uint64_t i = (char *)__p[1];
              }
              long long v51 = &i[-8 * (v48 >> 1)];
              uint64_t i = &v49[v50];
              __p[1] = v51;
              uint64_t v68 = &v49[v50];
            }
          }
          uint64_t v61 = *(void *)v44;
          v44 += 8;
          *(void *)uint64_t i = v61;
          uint64_t i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        unint64_t v25 = (char *)a1[1];
      }
      long long v62 = v69;
      unint64_t v63 = (char *)a1[3];
      unint64_t v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      long long v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      uint64_t v68 = v44;
      long long v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25) {
        uint64_t v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v65) {
        operator delete(v65);
      }
    }
  }
}

void sub_1000FF328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000FF39C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

void sub_1000FF400(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          BOOL v29 = (char *)sub_100019308((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          int64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000FBD80(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000FBE98((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        long long v66 = (char *)a1[2];
        do
        {
          char v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              long long v79 = (char *)sub_100019308((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              long long v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                long long v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              long long v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                long long v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                long long v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              long long v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)long long v66 = v69;
          long long v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __n128 v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)sub_100019308((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        long long v88 = operator new(0x1000uLL);
        sub_1000FBFB8(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_100019308((uint64_t)v91, v48);
              long long v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1000FC0D0((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1000FF918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000FF98C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

double sub_1000FF9F4(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    unint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    unint64_t v8 = a1 + 1;
    sub_1000FFAC4(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      unint64_t v9 = *v8++;
      sub_1000FFAC4(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    unint64_t v12 = *(char **)(a5 + 8);
  }
  sub_1000FFAC4(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_1000FFAC4@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  unint64_t v6 = a4;
  if (__src != a3)
  {
    unint64_t v9 = __src;
    unint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      unint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

__n128 sub_1000FFB84@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    unint64_t v16 = a6;
  }
  else
  {
    unint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    long long v15 = a5;
    unint64_t v16 = a6;
    while (1)
    {
      sub_1000FFC54(v12, v14, v15, v16, &v21);
      unint64_t v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      unint64_t v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  sub_1000FFC54(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1000FFC54@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unint64_t v6 = a3;
  if (a1 == a2)
  {
    unint64_t v9 = a1;
  }
  else
  {
    unint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 3;
      }
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 8 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      unint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void sub_1000FFD10(uint64_t a1, unint64_t **a2, unint64_t *a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  if (a3 != a5)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a3;
    unint64_t v14 = a3;
    uint64_t v15 = a2;
    while (1)
    {
      if ((char *)++v14 - (char *)v12 == 4096)
      {
        unint64_t v16 = v15[1];
        ++v15;
        uint64_t v12 = v16;
        unint64_t v14 = v16;
      }
      if (v14 == a5) {
        break;
      }
      if (*v13 < *v14) {
        uint64_t v13 = v14;
      }
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    sub_1000FFE34((uint64_t *)(a1 + 72), a2, a3, a4, a5);
    if (*v13 >= *(void *)(a1 + 96)) {
      *(void *)(a1 + 96) = *(void *)a1 + *v13;
    }
    sub_1000E787C((void *)a1, a6);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_1000FFE20(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000FFE34(uint64_t *result, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (a3 != a5)
  {
    unint64_t v6 = a3;
    unint64_t v8 = (uint64_t **)result;
    unint64_t v9 = result + 1;
    do
    {
      __n128 result = sub_1000FFEB4(v8, v9, v6, (uint64_t *)v6);
      if ((unint64_t *)((char *)++v6 - *a2) == (unint64_t *)4096)
      {
        uint64_t v10 = (unint64_t *)a2[1];
        ++a2;
        unint64_t v6 = v10;
      }
    }
    while (v6 != a5);
  }
  return result;
}

uint64_t *sub_1000FFEB4(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)sub_1000FC774(a1, a2, &v11, &v10, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    sub_10002B3B8(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t sub_1000FFF3C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AD0A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000FFFB8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FFFCC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AD2C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100100048(_Unwind_Exception *a1)
{
}

uint64_t sub_10010005C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AD4E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1001000D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001000EC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AD708;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100100168(_Unwind_Exception *a1)
{
}

uint64_t sub_10010017C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AD928;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1001001F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10010020C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ADB48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100100288(_Unwind_Exception *a1)
{
}

uint64_t sub_10010029C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ADF88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100100318(_Unwind_Exception *a1)
{
}

void sub_10010032C(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v40 = a2;
  unint64_t v7 = (std::mutex *)(a1 + 952);
  unint64_t v8 = (void *)(a1 + 936);
  unint64_t v9 = (uint64_t **)(a1 + 928);
  uint64_t v10 = (unint64_t *)(a1 + 1184);
  uint64_t v34 = (unint64_t *)(a1 + 104);
  unint64_t v35 = (std::condition_variable *)(a1 + 1016);
  do
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v40;
    }
    else
    {
      uint64_t v15 = (void *)*v8;
      if (!*v8) {
        goto LABEL_18;
      }
      uint64_t v11 = v40;
      unint64_t v16 = v8;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v40;
        if (v17 >= v40) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = v15 + 1;
        }
        if (v18) {
          unint64_t v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v8 || v40 < v16[4] || (unint64_t *)v16[5] == v10)
      {
LABEL_18:
        int64_t v41 = 0;
        *a4 = 0;
        a4[1] = (unint64_t)v8;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
        sub_1000D90F8((atomic_ullong *)&v41);
        goto LABEL_19;
      }
    }
    int64_t v41 = (unint64_t *)v11;
    uint64_t v42 = v10;
    uint64_t v12 = sub_1000FB5DC(v9, (unint64_t *)&v41, (uint64_t *)&v41);
    uint64_t v13 = v12;
    if (v14)
    {
      int64_t v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v12;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1000D90F8((atomic_ullong *)&v41);
LABEL_19:
      int v20 = 1;
      goto LABEL_20;
    }
    uint64_t v38 = (unint64_t *)v12[5];
    if (v38 != v10)
    {
      sub_100042B98((uint64_t)&__lk);
      sub_100100A90(&v37, v38 + 67);
      if (v37 && !*(unsigned char *)(v37 + 520))
      {
        uint64_t v21 = v40;
        if (*(void *)(v37 + 32) == v40)
        {
          *a4 = 0;
          a4[1] = (unint64_t)v13;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v37, 0), a4);
          goto LABEL_66;
        }
        if (*(void *)(v37 + 32) != -1 || (a3 & 1) != 0)
        {
LABEL_30:
          if (sub_1000FD9EC(a1, 0, v21, 1u) != -1)
          {
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 1uLL);
            v36.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C((unint64_t)v38);
            v36.__owns_ = 1;
            std::mutex::lock(v36.__m_);
            __n128 v22 = sub_100141268((unint64_t)v38);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
            int64_t v41 = (unint64_t *)&v38;
            uint64_t v42 = &v37;
            uint64_t v43 = &v40;
            sub_100100CC0((std::condition_variable *)v22, &v36, &v44, (uint64_t)&v41);
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 0xFFFFFFFFFFFFFFFFLL);
            if (v36.__owns_) {
              std::mutex::unlock(v36.__m_);
            }
            int v20 = 3;
            goto LABEL_67;
          }
          int64_t v41 = 0;
          unint64_t v31 = atomic_load(v34);
          if (v31)
          {
            unint64_t v32 = v31;
            while (1)
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)v34, &v32, v31 + 1);
              if (v32 == v31) {
                break;
              }
              unint64_t v31 = v32;
              if (!v32) {
                goto LABEL_65;
              }
            }
            uint64_t v33 = *(atomic_ullong **)(a1 + 608);
            unint64_t v32 = (unint64_t)v34;
            if (v33)
            {
              *(void *)(a1 + 616) = atomic_fetch_add_explicit(v33, 1uLL, memory_order_relaxed);
              unint64_t v32 = (unint64_t)v34;
            }
          }
          else
          {
            unint64_t v32 = 0;
          }
LABEL_65:
          atomic_store(v32, (unint64_t *)&v41);
          *a4 = 0;
          a4[1] = (unint64_t)v8;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
          sub_1000D90F8((atomic_ullong *)&v41);
LABEL_66:
          int v20 = 1;
LABEL_67:
          sub_1000D90F8((atomic_ullong *)&v37);
          goto LABEL_20;
        }
      }
      else if (a3)
      {
        uint64_t v21 = v40;
        goto LABEL_30;
      }
      int64_t v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v8;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1000D90F8((atomic_ullong *)&v41);
      goto LABEL_66;
    }
    uint64_t v23 = (void *)*v8;
    if (*v8)
    {
      unint64_t v24 = v40;
      unint64_t v25 = v8;
      while (1)
      {
        unint64_t v26 = v23[4];
        BOOL v27 = v26 >= v24;
        if (v26 >= v24) {
          unint64_t v28 = v23;
        }
        else {
          unint64_t v28 = v23 + 1;
        }
        if (v27) {
          unint64_t v25 = v23;
        }
        uint64_t v23 = (void *)*v28;
        if (!*v28)
        {
          if (v25 == v8) {
            break;
          }
          if (v24 < v25[4]) {
            break;
          }
          BOOL v29 = (unint64_t *)v25[5];
          if (v29 != v10)
          {
            unint64_t v30 = v29[67];
            if (v30)
            {
              if (!*(unsigned char *)(v30 + 520)) {
                break;
              }
            }
          }
          if (!*(unsigned char *)(a1 + 912)) {
            break;
          }
          std::condition_variable::wait(v35, &__lk);
          uint64_t v23 = (void *)*v8;
          unint64_t v25 = v8;
          if (!*v8) {
            break;
          }
        }
      }
    }
    int v20 = 0;
LABEL_20:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v20 == 1) {
      return;
    }
  }
  while (*(unsigned char *)(a1 + 912));
  int64_t v41 = 0;
  *a4 = 0;
  a4[1] = (unint64_t)v8;
  atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
  sub_1000D90F8((atomic_ullong *)&v41);
}

void sub_100100708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, atomic_ullong a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_100100768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  atomic_ullong v12 = 0;
  unint64_t v6 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  uint64_t v7 = *(void *)(a1 + 688);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 680);
    unint64_t v9 = *(unint64_t **)(*(void *)(*(void *)(a1 + 656) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
    *(void *)(a1 + 688) = v7 - 1;
    *(void *)(a1 + 680) = v8 + 1;
    sub_1000FB8C8(a1 + 648, 1);
    sub_1001009A4(a1, v9, a2, v13);
    sub_1000E4D78(&v12, (atomic_ullong *)v13);
    sub_1000D90F8((atomic_ullong *)v13);
  }
  else
  {
    unint64_t v9 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v10 = atomic_load((unint64_t *)(a1 + 784));
  if (v10 + v7 >= *(void *)(a1 + 640))
  {
    sub_1000FD9EC(a1, 0, 0, 0);
  }
  else
  {
    v13[0] = (unint64_t)_NSConcreteStackBlock;
    v13[1] = 0x40000000;
    void v13[2] = (unint64_t)sub_100100E48;
    void v13[3] = (unint64_t)&unk_1001AF1F8;
    void v13[4] = a1;
    sub_10011DF84((dispatch_queue_t *)(a1 + 920), v13);
  }
  *a3 = v9;
  a3[1] = 0;
  atomic_store(atomic_exchange(&v12, 0), (unint64_t *)a3 + 1);
  return sub_1000D90F8(&v12);
}

void sub_1001008D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong a9)
{
  std::mutex::unlock(v9);
  sub_1000D90F8(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_100100908(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 97);
  uint64_t v2 = a1[79];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = a1[95];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 520) != -1)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[95] + 8 * v4), &v8, 0);
  if (v8 != v5 || (sub_1000FD76C((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0) {
    return 0;
  }
  return v5;
}

atomic_ullong *sub_1001009A4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  sub_1001012A0((uint64_t)a2, a3);
  uint64_t v7 = (atomic_ullong *)(a2 + 1);
  unint64_t v14 = 0;
  unint64_t v8 = atomic_load(a2 + 1);
  if (v8)
  {
    unint64_t v9 = v8;
    while (1)
    {
      atomic_compare_exchange_strong(v7, &v9, v8 + 1);
      if (v9 == v8) {
        break;
      }
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_5;
      }
    }
    unint64_t v10 = (atomic_ullong *)a2[64];
    if (v10) {
      a2[65] = atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  atomic_store((unint64_t)v7, &v14);
  if (*(void *)(a1 + 632))
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 760) + 8 * v11), (unint64_t *)&v12, (unint64_t)a2);
      if (!v12) {
        break;
      }
      if (*(void *)(a1 + 632) <= (unint64_t)++v11) {
        goto LABEL_12;
      }
    }
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), a4);
  }
  else
  {
LABEL_12:
    *a4 = 0;
  }
  return sub_1000D90F8((atomic_ullong *)&v14);
}

unint64_t *sub_100100A90(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (v3)
  {
    unint64_t v4 = atomic_load(v3);
    if (!v4)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = (atomic_ullong *)v3[63];
    if (v7) {
      v3[64] = atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    if (!sub_100100B34((uint64_t)v3))
    {
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v3[4];
        v3[4] = -1;
        sub_1000D9124((uint64_t)v3, v8, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_100100B34(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
    unsigned int v6 = atomic_load(v2);
    if (v6 != 2 && !*(unsigned char *)(a1 + 520)) {
      sub_100100BD4(a1 + 24, 1u, 5u);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v7 = atomic_load((unint64_t *)a1);
    if (v7 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = atomic_load(v2);
      return v8 == 2;
    }
  }
}

BOOL sub_100100BD4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  long long v6 = v4;
  return sub_1000F4F20((uint64_t)&v4, (uint64_t)&v5, 0);
}

unint64_t *sub_100100C18(unint64_t *a1, unint64_t *a2, int a3)
{
  unsigned int v3 = (atomic_ullong *)a2;
  *a1 = 0;
  if (a2)
  {
    unint64_t v5 = atomic_load(a2);
    if (!v5)
    {
LABEL_6:
      unsigned int v3 = 0;
      goto LABEL_7;
    }
    unint64_t v6 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a2, &v6, v5 + 1);
      if (v6 == v5) {
        break;
      }
      unint64_t v5 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
    unsigned int v8 = (atomic_ullong *)a2[63];
    if (v8) {
      a2[64] = atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    if (a3 && !sub_100100B34((uint64_t)a2))
    {
      if (atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v3[4];
        v3[4] = -1;
        sub_1000D9124((uint64_t)v3, v9, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_100100CC0(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if (*(_DWORD *)(**(void **)a4 + 544)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(unsigned char *)(*(void *)v8 + 520) && *(void *)(*(void *)v8 + 32) == **(void **)(a4 + 16)) {
        return 1;
      }
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if (*(_DWORD *)(**(void **)a4 + 544)) {
    return 1;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(unsigned char *)(*(void *)v14 + 520)
      && *(void *)(*(void *)v14 + 32) == **(void **)(a4 + 16);
}

uint64_t sub_100100E48(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = sub_100100908(v1);
  if (v2) {
    sub_100100EA0((uint64_t)v1, v2);
  }

  return sub_1000FD9EC((uint64_t)v1, 0, 0, 0);
}

void sub_100100EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unsigned int v3 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  sub_100100F00((void *)(a1 + 648), &v4);
  std::mutex::unlock(v3);
}

void sub_100100EEC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100100F00(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100100F88(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100100F88(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100019308(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1000FBD80(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1000FBE98((uint64_t)a1, &v54);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100019308((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100019308((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000FBFB8(&v54, &v53);
  BOOL v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000FC0D0((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100101254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1001012A0(uint64_t a1, uint64_t a2)
{
  atomic_store(0, (unsigned int *)(a1 + 544));
  BOOL v3 = (unint64_t *)(a1 + 8);
  sub_100101370(a1 + 8, a2);
  unint64_t v9 = 0;
  unint64_t v4 = atomic_load(v3);
  if (v4)
  {
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_9;
      }
    }
    uint64_t v6 = *(atomic_ullong **)(a1 + 512);
    unint64_t v5 = (unint64_t)v3;
    if (v6)
    {
      *(void *)(a1 + 520) = atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
      unint64_t v5 = (unint64_t)v3;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_9:
  atomic_store(v5, &v9);
  sub_1000E4D78((atomic_ullong *)(a1 + 536), (atomic_ullong *)&v9);
  __n128 result = sub_1000D90F8((atomic_ullong *)&v9);
  if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1;
    return (atomic_ullong *)sub_1000D9124((uint64_t)v3, v8, 1u);
  }
  return result;
}

void *sub_100101370(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 520) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  __n128 result = sub_1000D94DC((void *)(a1 + 40));
  unint64_t v4 = *(atomic_ullong **)(a1 + 504);
  if (v4) {
    *(void *)(a1 + 512) = atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

void sub_1001013D8(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  *(void *)(a1 + 512) = **(void **)(a1 + 504);
  uint64_t v11 = a1 + 40;
  sub_1000D94DC((void *)(a1 + 40));
  sub_1001014E4(v11, a2, a3, a4, a5, a6);
}

void sub_100101480(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 520) = 1;
  sub_1001014B8(v1);
  __cxa_rethrow();
}

void sub_1001014A4(_Unwind_Exception *a1)
{
}

void sub_1001014B8(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 8))) {
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
  }
}

void sub_1001014E4(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  uint64_t v6 = a3[1];
  v7[0] = *a3;
  v7[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000DA6B0(a1, a2, (uint64_t)v7, *a4, *a5, *a6);
}

void sub_10010154C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100010A48(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100101564(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  *(void *)(a1 + 512) = **(void **)(a1 + 504);
  uint64_t v9 = a1 + 40;
  sub_1000D94DC((void *)(a1 + 40));
  sub_100101634(v9, a2, a3, a4, a5);
}

void sub_1001015FC(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 520) = 1;
  sub_1001014B8(v1);
  __cxa_rethrow();
}

void sub_100101620(_Unwind_Exception *a1)
{
}

void sub_100101634(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = a3[1];
  v6[0] = *a3;
  v6[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000DA6B0(a1, a2, (uint64_t)v6, *a4, *a5, 0);
}

void sub_10010169C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100010A48(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001016B4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AE1A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100101730(_Unwind_Exception *a1)
{
}

uint64_t sub_100101744(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AE3C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1001017C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001017D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_100101828(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AE5E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1001018A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001018B8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AE808;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100101934(_Unwind_Exception *a1)
{
}

void *sub_100101948(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001019CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100101DB4(a1);
  *(void *)(v8 + 632) = a2;
  *(void *)(v8 + 640) = a3;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  *(void *)(v8 + 696) = 850045863;
  *(_OWORD *)(v8 + 704) = 0u;
  *(_OWORD *)(v8 + 720) = 0u;
  *(_OWORD *)(v8 + 736) = 0u;
  *(void *)(v8 + 752) = 0;
  *(_OWORD *)(v8 + 768) = 0u;
  *(_OWORD *)(v8 + 784) = 0u;
  *(void *)(v8 + 800) = 850045863;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *(void *)(v8 + 856) = 0;
  *(void *)(v8 + 864) = 1018212795;
  *(void *)(v8 + 904) = 0;
  *(_OWORD *)(v8 + 888) = 0u;
  *(unsigned char *)(v8 + 912) = 1;
  *(_OWORD *)(v8 + 872) = 0u;
  sub_10011DF70(v8 + 920, "dealloc_queue");
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = a1 + 936;
  *(void *)(a1 + 952) = 850045863;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 1016) = 1018212795;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(void *)(a1 + 1064) = 850045863;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1128) = a1 + 1128;
  *(void *)(a1 + 1136) = a1 + 1128;
  *(void *)(a1 + 1144) = 0;
  sub_1001022F0(a1 + 1152, a4);
  sub_100102388(a1 + 1184, a1);
  *(void *)(a1 + 1736) = off_1001AF4D8;
  *(void *)(a1 + 1744) = a1;
  *(void *)(a1 + 1760) = a1 + 1736;
  *(void *)(a1 + 1768) = off_1001AF568;
  *(void *)(a1 + 1776) = a1;
  *(void *)(a1 + 1792) = a1 + 1768;
  operator new[]();
}

void sub_100101C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, std::condition_variable *a12, NSObject **a13)
{
  sub_100101948(a10);
  sub_1000FDF84(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 1016));
  std::mutex::~mutex((std::mutex *)(v13 + 952));
  sub_10002A594(v13 + 928, *a11);
  sub_10011DEBC(a13);
  std::condition_variable::~condition_variable(a12);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 696));
  sub_1000D9D50(v14);
  sub_1000FDFE8((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_100101CF4(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_100100F88(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

uint64_t sub_100101DB4(uint64_t a1)
{
  *(void *)a1 = off_1001AF228;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = off_1001AF2B8;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)(a1 + 64) = off_1001AF348;
  *(void *)(a1 + 88) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = sub_1001020F4(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_100101370(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(unsigned char *)(a1 + 624) = 1;
  return a1;
}

void sub_100101E74(_Unwind_Exception *a1)
{
  sub_100101948(v3);
  sub_1000FDD04(v2);
  sub_1000FDD88(v1);
  _Unwind_Resume(a1);
}

void sub_100101E9C()
{
}

void *sub_100101EB0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001AF228;
  return result;
}

void sub_100101EE8(uint64_t a1, void *a2)
{
  *a2 = off_1001AF228;
}

uint64_t sub_100101F14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100101F54()
{
}

void sub_100101F64()
{
}

void *sub_100101F78()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001AF2B8;
  return result;
}

void sub_100101FB0(uint64_t a1, void *a2)
{
  *a2 = off_1001AF2B8;
}

uint64_t sub_100101FDC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010201C()
{
}

void sub_10010202C()
{
}

void *sub_100102040()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001AF348;
  return result;
}

void sub_100102078(uint64_t a1, void *a2)
{
  *a2 = off_1001AF348;
}

uint64_t sub_1001020A0()
{
  return 0;
}

uint64_t sub_1001020A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001020E8()
{
}

uint64_t sub_1001020F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  sub_1001021C0(a1 + 408, a2);
  sub_100102258(a1 + 440, a3);
  sub_1001022F0(a1 + 472, a4);
  *(void *)(a1 + 504) = a5;
  *(void *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  return a1;
}

void sub_10010218C(_Unwind_Exception *a1)
{
  sub_1000FDD04(v3);
  sub_1000FDD88(v2);
  sub_1000FDE0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001021C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100102258(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1001022F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100102388(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v5[0] = off_1001AF3D8;
  v5[1] = a1;
  void v5[3] = v5;
  v4[0] = off_1001AF458;
  v4[1] = a1;
  v4[3] = v4;
  sub_1001020F4(a1 + 8, (uint64_t)v5, (uint64_t)v4, a2 + 1152, a2 + 776);
  sub_1000FDD04(v4);
  sub_1000FDD88(v5);
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  return a1;
}

void sub_100102458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1000FDD04((uint64_t *)va);
  sub_1000FDD88((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100102478()
{
}

void *sub_10010248C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001AF3D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1001024D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AF3D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100102500(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_100102564(**(void **)(a1 + 8) + 1736, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t sub_100102518(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100102558()
{
}

uint64_t sub_100102564(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void sub_1001025C8()
{
}

void *sub_1001025DC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001AF458;
  result[1] = v3;
  return result;
}

uint64_t sub_100102624(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AF458;
  a2[1] = v2;
  return result;
}

uint64_t sub_100102650(uint64_t a1)
{
  return sub_1001026AC(**(void **)(a1 + 8) + 1768, *(void *)(a1 + 8));
}

uint64_t sub_100102660(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001026A0()
{
}

uint64_t sub_1001026AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_100102704()
{
}

void *sub_100102718(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001AF4D8;
  result[1] = v3;
  return result;
}

uint64_t sub_100102760(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AF4D8;
  a2[1] = v2;
  return result;
}

void sub_10010278C(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t sub_1001027A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001027E0()
{
}

void sub_1001027EC(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 544)) {
    return;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v7 = (char *)(a1 + 1064);
    std::mutex::lock((std::mutex *)(a1 + 1064));
    int v8 = operator new(0x20uLL);
    v8[2] = a2;
    v8[3] = a3;
    uint64_t v9 = *(void *)(a1 + 1128);
    *int v8 = v9;
    v8[1] = a1 + 1128;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 1128) = v8;
    ++*(void *)(a1 + 1144);
    atomic_fetch_or((atomic_uint *volatile)(a2 + 544), 4u);
    unint64_t v10 = sub_10014119C(a2);
    std::mutex::lock((std::mutex *)v10);
    uint64_t v11 = sub_100141268(a2);
    std::condition_variable::notify_all((std::condition_variable *)v11);
    std::mutex::unlock((std::mutex *)v10);
LABEL_14:
    std::mutex::unlock((std::mutex *)v7);
    return;
  }
  sub_100102990(a1, a3);
  sub_1000D90F8((atomic_ullong *)(a2 + 536));
  if ((atomic_fetch_or((atomic_uint *volatile)(a2 + 544), 1u) & 2) == 0) {
    sub_100100EA0(a1, a2);
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 784), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (atomic_load((unint64_t *)(a1 + 792)))
    {
      std::mutex::lock((std::mutex *)(a1 + 800));
      if (atomic_load((unint64_t *)(a1 + 792))) {
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 864));
      }
      std::mutex::unlock((std::mutex *)(a1 + 800));
    }
  }
  BOOL v14 = (unint64_t *)(a1 + 768);
  if (atomic_load(v14))
  {
    uint64_t v7 = sub_10014119C(a2);
    std::mutex::lock((std::mutex *)v7);
    if (atomic_load(v14))
    {
      uint64_t v17 = sub_100141268(a2);
      std::condition_variable::notify_all((std::condition_variable *)v17);
    }
    goto LABEL_14;
  }
}

void sub_100102964(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100102990(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 952);
  std::mutex::lock((std::mutex *)(a1 + 952));
  sub_100046468(a1 + 928, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
  std::mutex::unlock(v3);
}

void sub_1001029E4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001029FC()
{
}

void *sub_100102A10(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001AF568;
  result[1] = v3;
  return result;
}

uint64_t sub_100102A58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AF568;
  a2[1] = v2;
  return result;
}

void sub_100102A84(uint64_t a1, unint64_t *a2, atomic_ullong *a3)
{
}

uint64_t sub_100102A90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100102AD0()
{
}

void sub_100102ADC(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = *(void *)(a1 + 632);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 760);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8) {
        return;
      }
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (atomic_ullong *)(v7 + v6);
      unint64_t v10 = a2;
      atomic_compare_exchange_strong(v9, &v10, 0);
      if (v10 == a2)
      {
        sub_1000FD76C(a1, a2, 1uLL, a3);
        sub_100100EA0(a1, a2);
      }
    }
  }
}

void sub_100102B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100102F68(a1);
  *(void *)(v8 + 456) = a2;
  *(void *)(v8 + 464) = a3;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(void *)(v8 + 520) = 850045863;
  *(_OWORD *)(v8 + 528) = 0u;
  *(_OWORD *)(v8 + 544) = 0u;
  *(_OWORD *)(v8 + 560) = 0u;
  *(void *)(v8 + 576) = 0;
  *(_OWORD *)(v8 + 592) = 0u;
  *(_OWORD *)(v8 + 608) = 0u;
  *(void *)(v8 + 624) = 850045863;
  *(_OWORD *)(v8 + 632) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(void *)(v8 + 680) = 0;
  *(void *)(v8 + 688) = 1018212795;
  *(void *)(v8 + 728) = 0;
  *(_OWORD *)(v8 + 712) = 0u;
  *(unsigned char *)(v8 + 736) = 1;
  *(_OWORD *)(v8 + 696) = 0u;
  sub_10011DF70(v8 + 744, "dealloc_queue");
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 752) = a1 + 760;
  *(void *)(a1 + 776) = 850045863;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 840) = 1018212795;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 888) = 850045863;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 952) = a1 + 952;
  *(void *)(a1 + 960) = a1 + 952;
  *(void *)(a1 + 968) = 0;
  sub_1001034A4(a1 + 976, a4);
  sub_10010353C(a1 + 1008, a1);
  *(void *)(a1 + 1384) = off_1001AF8A8;
  *(void *)(a1 + 1392) = a1;
  *(void *)(a1 + 1408) = a1 + 1384;
  *(void *)(a1 + 1416) = off_1001AF938;
  *(void *)(a1 + 1424) = a1;
  *(void *)(a1 + 1440) = a1 + 1416;
  operator new[]();
}

void sub_100102DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, std::condition_variable *a12, NSObject **a13)
{
  sub_1000FD4B4(a10);
  sub_1000FDF84(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 840));
  std::mutex::~mutex((std::mutex *)(v13 + 776));
  sub_10002A594(v13 + 752, *a11);
  sub_10011DEBC(a13);
  std::condition_variable::~condition_variable(a12);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 520));
  sub_1000D9D50(v14);
  sub_1000FE584((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_100102EA8(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000FBA68(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

uint64_t sub_100102F68(uint64_t a1)
{
  *(void *)a1 = off_1001AF5F8;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = off_1001AF688;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)(a1 + 64) = off_1001AF718;
  *(void *)(a1 + 88) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = sub_1001032A8(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_1000FC674(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(unsigned char *)(a1 + 448) = 1;
  return a1;
}

void sub_100103028(_Unwind_Exception *a1)
{
  sub_1000FD4B4(v3);
  sub_1000FE30C(v2);
  sub_1000FE390(v1);
  _Unwind_Resume(a1);
}

void sub_100103050()
{
}

void *sub_100103064()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001AF5F8;
  return result;
}

void sub_10010309C(uint64_t a1, void *a2)
{
  *a2 = off_1001AF5F8;
}

uint64_t sub_1001030C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100103108()
{
}

void sub_100103118()
{
}

void *sub_10010312C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001AF688;
  return result;
}

void sub_100103164(uint64_t a1, void *a2)
{
  *a2 = off_1001AF688;
}

uint64_t sub_100103190(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001031D0()
{
}

void sub_1001031E0()
{
}

void *sub_1001031F4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001AF718;
  return result;
}

void sub_10010322C(uint64_t a1, void *a2)
{
  *a2 = off_1001AF718;
}

uint64_t sub_100103254()
{
  return 0;
}

uint64_t sub_10010325C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010329C()
{
}

uint64_t sub_1001032A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  sub_100103374(a1 + 232, a2);
  sub_10010340C(a1 + 264, a3);
  sub_1001034A4(a1 + 296, a4);
  *(void *)(a1 + 328) = a5;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  return a1;
}

void sub_100103340(_Unwind_Exception *a1)
{
  sub_1000FE30C(v3);
  sub_1000FE390(v2);
  sub_1000FE414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100103374(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10010340C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1001034A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10010353C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v5[0] = off_1001AF7A8;
  v5[1] = a1;
  void v5[3] = v5;
  v4[0] = off_1001AF828;
  v4[1] = a1;
  v4[3] = v4;
  sub_1001032A8(a1 + 8, (uint64_t)v5, (uint64_t)v4, a2 + 976, a2 + 600);
  sub_1000FE30C(v4);
  sub_1000FE390(v5);
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  return a1;
}

void sub_10010360C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1000FE30C((uint64_t *)va);
  sub_1000FE390((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_10010362C()
{
}

void *sub_100103640(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001AF7A8;
  result[1] = v3;
  return result;
}

uint64_t sub_100103688(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AF7A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001036B4(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_100103718(**(void **)(a1 + 8) + 1384, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t sub_1001036CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010370C()
{
}

uint64_t sub_100103718(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void sub_10010377C()
{
}

void *sub_100103790(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001AF828;
  result[1] = v3;
  return result;
}

uint64_t sub_1001037D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AF828;
  a2[1] = v2;
  return result;
}

uint64_t sub_100103804(uint64_t a1)
{
  return sub_100103860(**(void **)(a1 + 8) + 1416, *(void *)(a1 + 8));
}

uint64_t sub_100103814(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100103854()
{
}

uint64_t sub_100103860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1001038B8()
{
}

void *sub_1001038CC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001AF8A8;
  result[1] = v3;
  return result;
}

uint64_t sub_100103914(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AF8A8;
  a2[1] = v2;
  return result;
}

void sub_100103940(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t sub_100103954(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100103994()
{
}

void sub_1001039A0(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 368)) {
    return;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v7 = (char *)(a1 + 888);
    std::mutex::lock((std::mutex *)(a1 + 888));
    int v8 = operator new(0x20uLL);
    v8[2] = a2;
    v8[3] = a3;
    uint64_t v9 = *(void *)(a1 + 952);
    *int v8 = v9;
    v8[1] = a1 + 952;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 952) = v8;
    ++*(void *)(a1 + 968);
    atomic_fetch_or((atomic_uint *volatile)(a2 + 368), 4u);
    unint64_t v10 = sub_10014119C(a2);
    std::mutex::lock((std::mutex *)v10);
    uint64_t v11 = sub_100141268(a2);
    std::condition_variable::notify_all((std::condition_variable *)v11);
    std::mutex::unlock((std::mutex *)v10);
LABEL_14:
    std::mutex::unlock((std::mutex *)v7);
    return;
  }
  sub_100103B44(a1, a3);
  sub_1000D9F50((atomic_ullong *)(a2 + 360));
  if ((atomic_fetch_or((atomic_uint *volatile)(a2 + 368), 1u) & 2) == 0) {
    sub_1000FB980(a1, a2);
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 608), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (atomic_load((unint64_t *)(a1 + 616)))
    {
      std::mutex::lock((std::mutex *)(a1 + 624));
      if (atomic_load((unint64_t *)(a1 + 616))) {
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 688));
      }
      std::mutex::unlock((std::mutex *)(a1 + 624));
    }
  }
  BOOL v14 = (unint64_t *)(a1 + 592);
  if (atomic_load(v14))
  {
    uint64_t v7 = sub_10014119C(a2);
    std::mutex::lock((std::mutex *)v7);
    if (atomic_load(v14))
    {
      uint64_t v17 = sub_100141268(a2);
      std::condition_variable::notify_all((std::condition_variable *)v17);
    }
    goto LABEL_14;
  }
}

void sub_100103B18(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100103B44(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 776);
  std::mutex::lock((std::mutex *)(a1 + 776));
  sub_100046468(a1 + 752, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
  std::mutex::unlock(v3);
}

void sub_100103B98(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100103BB0()
{
}

void *sub_100103BC4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001AF938;
  result[1] = v3;
  return result;
}

uint64_t sub_100103C0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AF938;
  a2[1] = v2;
  return result;
}

void sub_100103C38(uint64_t a1, unint64_t *a2, atomic_ullong *a3)
{
}

uint64_t sub_100103C44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100103C84()
{
}

void sub_100103C90(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = *(void *)(a1 + 456);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 584);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8) {
        return;
      }
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (atomic_ullong *)(v7 + v6);
      unint64_t v10 = a2;
      atomic_compare_exchange_strong(v9, &v10, 0);
      if (v10 == a2)
      {
        sub_1000FC1EC(a1, a2, 1uLL, a3);
        sub_1000FB980(a1, a2);
      }
    }
  }
}

void sub_100103D44()
{
}

void *sub_100103D58(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001AF9C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100103DA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001AF9C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100103DCC(uint64_t a1, uint64_t a2)
{
  return sub_100103E20((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_100103DD4(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001AFA28)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100103E14()
{
  return &off_1001AFA28;
}

uint64_t sub_100103E20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 24);
  v9[0] = off_1001AB7C0;
  v9[1] = v4;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v4 + 16) + 72))(&v10);
  if (*(unsigned char *)(a2 + 113)) {
    sub_1000DCA90(v3, (uint64_t)v9, *(void *)(a2 + 8) / *(void *)(v3 + 80), 0, 0, &v8);
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8 && !*(unsigned char *)(v8 + 520))
  {
    if (*(unsigned char *)(v8 + 400)) {
      uint64_t v5 = v8 + 40;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_1000E483C(a2, (uint64_t)v9, v5, *(unsigned int *)(v3 + 20));
  sub_1000D90F8((atomic_ullong *)&v8);
  v9[0] = off_1001AB7C0;
  if (v11) {
    sub_100010A48(v11);
  }
  return v6;
}

void sub_100103F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100010A48(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100103F70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100104008(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10010408C(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = *(const void **)v5;
  *(void *)uint64_t v5 = 0;
  pthread_setspecific(v1->__key_, v2);
  uint64_t v3 = *(void *)(v5 + 8);
  sub_100103F70((uint64_t)v6, v5 + 16);
  sub_1000DC2B4(v3, (uint64_t)v6);
  sub_100104008(v6);
  sub_100104150(&v5);
  return 0;
}

void sub_10010412C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100104150(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_100104008((void *)(v1 + 16));
    sub_1001041AC((std::__thread_struct **)v1, 0);
    operator delete();
  }
  return result;
}

std::__thread_struct *sub_1001041AC(std::__thread_struct **a1, std::__thread_struct *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__thread_struct::~__thread_struct(result);
    operator delete();
  }
  return result;
}

_WORD *sub_1001041FC(_WORD *result, int a2)
{
  *__n128 result = 0;
  if (a2)
  {
    __int16 v2 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "total_segments_t";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_1001A4EF0;
    *((_WORD *)exception + 16) = v2;
  }
  return result;
}

uint64_t sub_100104288(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AEED8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100104304(_Unwind_Exception *a1)
{
}

uint64_t sub_100104318(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AECB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100104394(_Unwind_Exception *a1)
{
}

uint64_t sub_1001043A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  uint64_t result = sub_1000DD800(a1, a2, (uint64_t)v12);
  while (v12[0] != v13[3] || v12[1] != v13[4])
  {
    v7[0] = 0;
    v7[0] = (*(void *)(*(void *)(v13[0] + 56) + 16 * v13[1] + 8) & 0x7FFFFFFFFFFFFFLL)
          * *(unsigned int *)(*(void *)(v13[0] + 8) + 20);
    if (v7[0]) {
      sub_1001044BC((uint64_t)v14, v7);
    }
    sub_1000DD888(a1, v13, (uint64_t)v7);
    while (v7[0] != v10 || v7[1] != v11)
    {
      uint64_t v6 = 0;
      uint64_t v6 = (*(void *)(*(void *)(v8 + 56) + 16 * v9 + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(void *)(v8 + 8) + 20);
      if (v6) {
        sub_1001044BC((uint64_t)v14, (unint64_t *)&v6);
      }
      sub_1000DA5F8((uint64_t)v7);
    }
    uint64_t result = sub_1000DA4D0((uint64_t)v12);
  }
  return result;
}

uint64_t sub_1001044BC(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = sub_1000FFEB4(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, (uint64_t *)a2);
  *(void *)(a1 + 8) = v3;
  char v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      long long v5 = v4;
      char v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      long long v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void sub_100104528(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *((void *)a3 + 1);
  if (v4 != v5)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = a2[2];
    uint64_t v12 = v4 + 1;
    if (v4 + 1 != v5)
    {
      unint64_t v13 = v10 + v11 * v12;
      uint64_t v14 = a2[1];
      do
      {
        if (v10 + v14 * v11 < v13)
        {
          uint64_t v4 = v12;
          uint64_t v14 = v12;
        }
        ++v12;
        v13 += v11;
      }
      while (v5 != v12);
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    long long v18 = *(_OWORD *)a2;
    uint64_t v19 = a2[2];
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    sub_100104640((uint64_t *)(a1 + 72), &v18, (uint64_t)&v16);
    unint64_t v15 = v10 + v4 * v11;
    if (v15 >= *(void *)(a1 + 96)) {
      *(void *)(a1 + 96) = *(void *)a1 + v15;
    }
    sub_1000E787C((void *)a1, a4);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_10010462C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100104640(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if (v3 != *(void *)(a3 + 8))
  {
    BOOL v6 = (uint64_t **)result;
    uint64_t v7 = result + 1;
    do
    {
      uint64_t v8 = *a2 + a2[2] * v3;
      uint64_t result = sub_1000FFEB4(v6, v7, (unint64_t *)&v8, &v8);
      uint64_t v3 = a2[1] + 1;
      a2[1] = v3;
    }
    while (v3 != *(void *)(a3 + 8));
  }
  return result;
}

uint64_t ***sub_1001046D0(uint64_t ***result)
{
  uint64_t v1 = **result;
  uint64_t v2 = *v1;
  if (*(_DWORD *)(*v1 + 44) != 1)
  {
    *(void *)(v2 + 64) = sub_100143B3C();
    *(void *)(v2 + 72) = v3;
    sub_1000E817C();
  }
  return result;
}

void sub_1001047F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100104910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100104ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10)
{
  sub_100010A14(&a9);
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  _Unwind_Resume(a1);
}

AAByteStream *sub_100104B90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 176))(*a1);
  if (v3 < 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    BOOL v6 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"AEAHelper: Invalid file descriptor.", 0x16u);
  }
  AEAContext v7 = AAFileStreamOpenWithFD(v3, 0);
  sub_100107E5C(&v8, &v7);
  sub_100107F44(&v7, &v8);
  sub_1001081FC(a2, &v7);
  sub_100107F48(&v7);
  return sub_100107E60(&v8);
}

void sub_100104C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AEAContext a9, AAByteStream a10)
{
}

void sub_100104C7C()
{
}

void sub_1001050A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a33)
  {
    if (a32 < 0) {
      operator delete(__p);
    }
  }
  operator delete[]();
}

void *sub_100105170@<X0>(AEAAuthData *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6 = (char *)malloc_type_valloc(0x800uLL, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v19 = std::bad_alloc::bad_alloc(exception);
  }
  __s = (char *)off_1001AFA48;
  v24[2] = (char *)&__s;
  __s2 = v6;
  sub_100017FFC((uint64_t)v26, (uint64_t)&__s);
  sub_100017750(&__s);
  int v7 = sub_100108230(a1);
  if (v7)
  {
    uint32_t v8 = 0;
    uint64_t v9 = __s2;
    while (1)
    {
      size_t v22 = 0;
      bzero(v9, 0x800uLL);
      if (sub_100108238(a1, v8, 0x800uLL, v9, 0, 0, 0, &v22))
      {
        uint64_t v12 = std::generic_category();
        *(_DWORD *)a3 = 1;
        goto LABEL_13;
      }
      if (*(char *)(a2 + 23) < 0)
      {
        uint64_t v11 = *(const char **)a2;
        size_t v10 = *(void *)(a2 + 8);
      }
      else
      {
        size_t v10 = *(unsigned __int8 *)(a2 + 23);
        uint64_t v11 = (const char *)a2;
      }
      uint64_t v9 = __s2;
      if (!strncmp(v11, __s2, v10)) {
        break;
      }
      if (v7 == ++v8) {
        goto LABEL_10;
      }
    }
    if (v22 < 0x100000)
    {
      unint64_t v15 = (char *)malloc_type_valloc(v22 + 1, 0xF8ED6DDuLL);
      if (!v15)
      {
        int64_t v20 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v21 = std::bad_alloc::bad_alloc(v20);
      }
      v27[0] = off_1001AFA48;
      v27[3] = v27;
      __s = v15;
      sub_100017FFC((uint64_t)v24, (uint64_t)v27);
      sub_100017750(v27);
      bzero(__s, v22 + 1);
      if (sub_100108238(a1, v8, 0x800uLL, __s2, 0, v22, (uint8_t *)__s, 0))
      {
        long long v16 = std::generic_category();
        char v17 = 0;
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v16;
      }
      else
      {
        sub_100003BA4((void *)a3, __s);
        char v17 = 1;
      }
      *(unsigned char *)(a3 + 24) = v17;
      sub_1000176CC((uint64_t *)&__s, 0);
      sub_100017750(v24);
      goto LABEL_14;
    }
    uint64_t v12 = std::generic_category();
    uint64_t v13 = 84;
  }
  else
  {
LABEL_10:
    uint64_t v12 = std::generic_category();
    uint64_t v13 = 22;
  }
  *(void *)a3 = v13;
LABEL_13:
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 24) = 0;
LABEL_14:
  sub_1000176CC((uint64_t *)&__s2, 0);
  return sub_100017750(v26);
}

void sub_100105430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_1000176CC((uint64_t *)va, 0);
  sub_100017750(v3);
  sub_1000176CC((uint64_t *)va1, 0);
  sub_100017750(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100105478(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int v4 = *(char *)(a1 + 23);
    if (*((unsigned char *)a2 + 24))
    {
      if (v4 < 0) {
        operator delete(*(void **)a1);
      }
      long long v5 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
    }
    else
    {
      if (v4 < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 24) = 0;
    }
  }
  else if (*((unsigned char *)a2 + 24))
  {
    long long v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
  }
  return a1;
}

void sub_100105528(uint64_t a1, void *a2)
{
}

void sub_100105564(_Unwind_Exception *a1)
{
  sub_100108200(v1);
  _Unwind_Resume(a1);
}

void sub_100105580()
{
}

void *sub_100105594()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001AFA48;
  return result;
}

void sub_1001055CC(uint64_t a1, void *a2)
{
  *a2 = off_1001AFA48;
}

void sub_1001055F4(uint64_t a1, void **a2)
{
}

uint64_t sub_1001055FC(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001AFAA8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10010563C()
{
  return &off_1001AFAA8;
}

uint64_t sub_100105648(uint64_t a1)
{
  long long v4 = 0u;
  long long v5 = 0u;
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 72))(&v4);
  uint64_t v1 = sub_10003C118()[2];
  if ((unint64_t)v1 <= (unint64_t)v4) {
    uint64_t v1 = (uint64_t (*)())v4;
  }
  if (*((void *)&v5 + 1) >= (unint64_t)v1) {
    unsigned int v2 = v1;
  }
  else {
    unsigned int v2 = DWORD2(v5);
  }
  if (*((void *)&v5 + 1)) {
    return v2;
  }
  else {
    return v1;
  }
}

uint64_t sub_1001056BC(uint64_t a1)
{
  (*(void (**)(unint64_t *__return_ptr))(*(void *)a1 + 72))(v5);
  unint64_t v2 = v5[0];
  unint64_t v3 = sub_100105648(a1);
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  if (v3 <= 0x1000) {
    return 4096;
  }
  else {
    return v3;
  }
}

void sub_100105730()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"User data is not supported in this image format", 0x2Du);
}

void sub_100105770()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"User data is not supported in this image format", 0x2Du);
}

void *sub_1001057B0(void *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (*(void *)(a2 + 8) >= *(void *)a2)
      {
LABEL_4:
        if ((v4 & 2) != 0) {
          long long v5 = "[";
        }
        else {
          long long v5 = "(";
        }
        sub_100003BA4(&v24, v5);
        if ((v26 & 0x80u) == 0) {
          long long v6 = &v24;
        }
        else {
          long long v6 = v24;
        }
        if ((v26 & 0x80u) == 0) {
          uint64_t v7 = v26;
        }
        else {
          uint64_t v7 = v25;
        }
        sub_100003DF0(a1, (uint64_t)v6, v7);
        uint64_t v8 = (void *)std::ostream::operator<<();
        sub_100003DF0(v8, (uint64_t)",", 1);
        uint64_t v9 = (void *)std::ostream::operator<<();
        if (*(unsigned char *)(a2 + 16)) {
          uint64_t v10 = "]";
        }
        else {
          uint64_t v10 = ")";
        }
        sub_100003BA4(&__p, v10);
        if ((v23 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v23 & 0x80u) == 0) {
          uint64_t v12 = v23;
        }
        else {
          uint64_t v12 = v22;
        }
        goto LABEL_45;
      }
    }
    else if (*(void *)a2 < *(void *)(a2 + 8))
    {
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a2 + 8);
    if (*(void *)a2 < v13 && *(void *)a2 + 1 < v13) {
      goto LABEL_4;
    }
  }
  if ((v4 & 2) != 0) {
    unint64_t v15 = "[";
  }
  else {
    unint64_t v15 = "(";
  }
  sub_100003BA4(&v24, v15);
  if ((v26 & 0x80u) == 0) {
    long long v16 = &v24;
  }
  else {
    long long v16 = v24;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v17 = v26;
  }
  else {
    uint64_t v17 = v25;
  }
  uint64_t v9 = sub_100003DF0(a1, (uint64_t)v16, v17);
  if (*(unsigned char *)(a2 + 16)) {
    long long v18 = "]";
  }
  else {
    long long v18 = ")";
  }
  sub_100003BA4(&__p, v18);
  if ((v23 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v12 = v23;
  }
  else {
    uint64_t v12 = v22;
  }
LABEL_45:
  uint64_t v19 = sub_100003DF0(v9, (uint64_t)p_p, v12);
  if ((char)v23 < 0) {
    operator delete(__p);
  }
  if ((char)v26 < 0) {
    operator delete(v24);
  }
  return v19;
}

void sub_100105990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001059D4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(**(void **)a2 + 8))();
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

BOOL sub_100105A40(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100105A84(*(void *)a1, *(void *)a2);
  if (result) {
    return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return result;
}

BOOL sub_100105A84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(void *)v2 != *(void *)v3) {
    return 0;
  }
  BOOL result = sub_100068BA0((unint64_t *)(v2 + 8), (unint64_t *)(v3 + 8));
  if (result)
  {
    if (*(_DWORD *)(v2 + 48) == *(_DWORD *)(v3 + 48)) {
      return *(void *)(a1 + 40) == *(void *)(a2 + 40);
    }
    return 0;
  }
  return result;
}

BOOL sub_100105B00(uint64_t a1, uint64_t a2)
{
  return !sub_100105A84(*(void *)a1, *(void *)a2) || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40);
}

void *sub_100105B4C@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = *(void **)a1;
  unint64_t v5 = result[5];
  unint64_t v6 = result[3];
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 3;
  if (*(unsigned char *)(*(void *)result[1] + 8))
  {
    BOOL result = (void *)sub_1000D29B8();
    if (result)
    {
      *(void *)uint64_t v7 = "DiskImage::const_extents_iterator_t::make_val() const";
      *(void *)&v7[8] = 45;
      *(_DWORD *)&v7[16] = 2;
      sub_100011FA8(v8, (long long *)v7);
      sub_100003DF0(v9, (uint64_t)"Disk image is terminated, skipping ...", 38);
      std::ostream::~ostream();
      sub_1000164E0((uint64_t)v8);
      return (void *)std::ios::~ios();
    }
  }
  else if (v5 < v6 && a1[8] != 3)
  {
    BOOL result = (*(void *(**)(unsigned char *__return_ptr))*result)(v8);
    if (*(_DWORD *)&v8[24] != 3 && (a1[10] & (1 << v8[24])) == 0)
    {
      do
      {
        BOOL result = *(void **)a1;
        if (*(void *)(*(void *)a1 + 40) >= (unint64_t)(*(unsigned char *)(*(void *)a1 + 32) & 1)
                                                + *(void *)(*(void *)a1 + 24))
          break;
        result[5] = (v8[16] & 1) + *(void *)&v8[8];
        BOOL result = (*(void *(**)(unsigned char *__return_ptr))*result)(v7);
        *(_OWORD *)&v8[12] = *(_OWORD *)&v7[12];
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
        if (*(_DWORD *)&v7[24] == 3) {
          break;
        }
      }
      while ((a1[10] & (1 << v7[24])) == 0);
    }
    *(_OWORD *)a2 = *(_OWORD *)v8;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v8[12];
  }
  return result;
}

void sub_100105D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    uint64_t v15 = *(void *)(*(void *)v14 + 24);
    *(void *)uint64_t v13 = *(void *)(*(void *)v14 + 40);
    *(void *)(v13 + 8) = v15;
    *(unsigned char *)(v13 + 16) = 2;
    *(_DWORD *)(v13 + 24) = 3;
    __cxa_end_catch();
    JUMPOUT(0x100105D00);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_100105D68(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (a1[3] & 1) + a1[2];
  *(void *)(v2 + 40) = v3;
  if (v3 < (unint64_t)(*(unsigned char *)(v2 + 32) & 1) + *(void *)(v2 + 24))
  {
    sub_100105B4C(a1, (uint64_t)v5);
    *(_OWORD *)(a1 + 1) = v5[0];
    *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)v5 + 12);
  }
  return a1;
}

uint64_t *sub_100105DE0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
  *(_DWORD *)(a2 + 40) = *((_DWORD *)a1 + 10);
  return sub_100105D68(a1);
}

void sub_100105E4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_10014706C(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100105E68(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  *(void *)(a1 + 40) = v5;
  sub_1001060A0((void *)(a1 + 56), a2 + 56);
  return a1;
}

uint64_t sub_100105EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = qword_1001C45E0;
  *(void *)a2 = qword_1001C45E0;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  sub_100058EC0(a1, (uint64_t)v12);
  sub_100059040(a1, (uint64_t)v10);
  while (!sub_100105A84(v12[0], v10[0]) || v13 != v11)
  {
    sub_100105DE0(v12, (uint64_t)&v8);
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)v9 + 12);
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
  }
  uint64_t v6 = v10[0];
  v10[0] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  uint64_t result = v12[0];
  v12[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_100106028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17 = *(void *)(v15 - 64);
  *(void *)(v15 - 64) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001060A0(void *a1, uint64_t a2)
{
  sub_100106124(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_100106124(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001061AC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010755C((uint64_t)a1, a2);
  *a1 = off_1001AFAF8;
  a1[45] = &off_1001AFBF8;
  a1[46] = &off_1001AFC20;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AFAF8;
  a1[45] = off_1001AFB80;
  a1[46] = off_1001AFBA8;
  return a1;
}

void sub_1001062AC(_Unwind_Exception *a1)
{
  sub_100106904(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001062D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100106314(mach_port_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a4 >= 0) {
    uint64_t v5 = a4;
  }
  else {
    uint64_t v5 = -a4;
  }
  input[0] = a3;
  input[1] = v5;
  if (sub_1000D29B8())
  {
    *(void *)&long long v7 = "complete_function_uc(io_connect_t, const DIDeviceCommand &, unsigned int, int)";
    *((void *)&v7 + 1) = 20;
    int v8 = 2;
    sub_10010650C(v9, &v7);
    sub_100003DF0(v10, (uint64_t)"index=", 6);
    std::ostream::operator<<();
    sub_100003DF0(v10, (uint64_t)" status=", 8);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100107078((uint64_t)v9);
    std::ios::~ios();
  }
  uint64_t result = IOConnectCallMethod(a1, 1u, input, 2u, 0, 0, 0, 0, 0, 0);
  if (result)
  {
    *(void *)&long long v7 = "complete_function_uc(io_connect_t, const DIDeviceCommand &, unsigned int, int)";
    *((void *)&v7 + 1) = 20;
    int v8 = 16;
    sub_1000731E8(v9, &v7);
    sub_100003DF0(v10, (uint64_t)"Kernel returned error for complete command, command = ", 54);
    std::ostream::operator<<();
    sub_100003DF0(v10, (uint64_t)" error = ", 9);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000733E0((uint64_t)v9);
    return std::ios::~ios();
  }
  return result;
}

void sub_1001064E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100106630((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10010650C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001075EC((uint64_t)a1, a2);
  *a1 = off_1001AFD18;
  a1[45] = &off_1001AFE18;
  a1[46] = &off_1001AFE40;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AFD18;
  a1[45] = off_1001AFDA0;
  a1[46] = off_1001AFDC8;
  return a1;
}

void sub_10010660C(_Unwind_Exception *a1)
{
  sub_100107078(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100106630(uint64_t a1)
{
  return a1;
}

uint64_t sub_100106674(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100106904(v1);

  return std::ios::~ios();
}

uint64_t sub_1001066C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100106904(v1);

  return std::ios::~ios();
}

void sub_100106720(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100106904(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100106788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001067C0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100106828(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100106904(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10010688C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100106904(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100106904(uint64_t a1)
{
  *(void *)a1 = off_1001AFC90;
  sub_100106A40(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100106A40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100106C00((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100106B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100106BC8(uint64_t a1)
{
  sub_100106904(a1);

  operator delete();
}

int *sub_100106C00(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 114;
    __int16 v22 = 2082;
    unsigned __int8 v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 114;
      __int16 v22 = 2082;
      unsigned __int8 v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100106DE8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100107078(v1);

  return std::ios::~ios();
}

uint64_t sub_100106E34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100107078(v1);

  return std::ios::~ios();
}

void sub_100106E94(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100107078(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100106EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100106F34(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100106F9C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100107078(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100107000(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100107078(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100107078(uint64_t a1)
{
  *(void *)a1 = off_1001AFEB0;
  sub_1001071B4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1001071B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100107374((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100107310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010733C(uint64_t a1)
{
  sub_100107078(a1);

  operator delete();
}

int *sub_100107374(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 162;
    __int16 v22 = 2082;
    unsigned __int8 v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 162;
      __int16 v22 = 2082;
      unsigned __int8 v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10010755C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AFC90;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1001075D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001075EC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AFEB0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100107668(_Unwind_Exception *a1)
{
}

void sub_100107940(id a1)
{
  int v1 = *__error();
  if (sub_1000D29A0())
  {
    uint64_t v2 = sub_1000D2920();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    int v6 = 60;
    __int16 v7 = 2080;
    int v8 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    char v4 = sub_1000D2920();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v6 = 60;
      __int16 v7 = 2080;
      int v8 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an invalidation handler for the IO daemon connection", buf, 0x12u);
    }
  }
  *__error() = v1;
}

void sub_100107AD0(id a1)
{
  int v1 = *__error();
  if (sub_1000D29A0())
  {
    uint64_t v2 = sub_1000D2920();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    int v6 = 60;
    __int16 v7 = 2080;
    int v8 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    char v4 = sub_1000D2920();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v6 = 60;
      __int16 v7 = 2080;
      int v8 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an interruption handler for the IO daemon connection", buf, 0x12u);
    }
  }
  *__error() = v1;
}

void sub_100107D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100107D74(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

uint64_t *sub_100107E08(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    char v4 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Error opening ByteStream", 0x16u);
  }
  return result;
}

AAByteStream *sub_100107E60(AAByteStream *a1)
{
  return a1;
}

ssize_t sub_100107E90(AAByteStream *a1, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*a1, a2, a3, a4);
}

uint64_t *sub_100107E98@<X0>(AAByteStream *a1@<X0>, AEAContext *a2@<X1>, size_t a3@<X2>, AAFlagSet a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  AAByteStream v8 = AEADecryptionRandomAccessInputStreamOpen(*a1, *a2, a3, a4, a5);
  return sub_100107E08(a6, (uint64_t *)&v8);
}

AEAContext *sub_100107EDC(AEAContext *a1, AAByteStream *a2)
{
  AEAContext v3 = AEAContextCreateWithEncryptedStream(*a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v6 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Context creation failed.", 0x16u);
  }
  return a1;
}

AEAContext *sub_100107F48(AEAContext *a1)
{
  return a1;
}

uint64_t sub_100107F78(AEAContext *a1, uint8_t *buf, size_t buf_size)
{
  uint64_t result = AEAContextSetFieldBlob(*a1, 9u, 0, buf, buf_size);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v5 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Context setup failed.", 0x16u);
  }
  return result;
}

uint64_t sub_100107FDC(AEAContext_impl **a1)
{
  int v1 = *a1;
  size_t buf_size = 0;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, 0, 0, &buf_size) < 0) {
    return 0;
  }
  size_t v2 = buf_size;
  if (buf_size >= 0x100000) {
    size_t v3 = 0x100000;
  }
  else {
    size_t v3 = buf_size;
  }
  char v4 = (uint8_t *)malloc_type_valloc(v3, 0xF8ED6DDuLL);
  if (!v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_alloc::bad_alloc(exception);
  }
  __dst[0] = off_1001AFF70;
  __dst[3] = __dst;
  buf = v4;
  sub_100017FFC((uint64_t)v13, (uint64_t)__dst);
  sub_100017750(__dst);
  long long v5 = buf;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, v3, buf, 0) < 0)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v2 >= 0x10) {
      size_t v6 = 16;
    }
    else {
      size_t v6 = v2;
    }
    memcpy(__dst, v5, v6);
    uint64_t v7 = __dst[0];
  }
  sub_1000176CC((uint64_t *)&buf, 0);
  sub_100017750(v13);
  return v7;
}

void sub_10010816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000176CC((uint64_t *)va, 0);
  sub_100017750(v3);
  _Unwind_Resume(a1);
}

AEAAuthData *sub_100108194(AEAAuthData *a1, AEAContext *a2)
{
  AEAAuthData v3 = AEAAuthDataCreateWithContext(*a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    size_t v6 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Authentication Data creation failed.", 0x16u);
  }
  return a1;
}

AEAAuthData *sub_100108200(AEAAuthData *a1)
{
  return a1;
}

uint64_t sub_100108230(AEAAuthData *a1)
{
  return AEAAuthDataGetEntryCount(*a1);
}

uint64_t sub_100108238(AEAAuthData *a1, uint32_t a2, size_t a3, char *a4, size_t *a5, size_t a6, uint8_t *a7, size_t *a8)
{
  return AEAAuthDataGetEntry(*a1, a2, a3, a4, a5, a6, a7, a8);
}

void *sub_100108240(void *result, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *a3;
  *uint64_t result = *a2;
  *a2 = 0;
  result[1] = v4;
  *a3 = 0;
  result[2] = *a4;
  *a4 = 0;
  return result;
}

uint64_t sub_100108268(uint64_t a1)
{
  return AEAContextGetFieldUInt(*(AEAContext *)(a1 + 8), 4u);
}

uint64_t sub_100108274(uint64_t a1)
{
  return AEAContextGetFieldUInt(*(AEAContext *)(a1 + 8), 0xDu);
}

ssize_t sub_100108280(uint64_t a1, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*(AAByteStream *)(a1 + 16), a2, a3, a4);
}

void sub_10010828C()
{
}

void *sub_1001082A0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001AFF70;
  return result;
}

void sub_1001082D8(uint64_t a1, void *a2)
{
  *a2 = off_1001AFF70;
}

void sub_100108300(uint64_t a1, void **a2)
{
}

uint64_t sub_100108308(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001AFFD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100108348()
{
  return &off_1001AFFD0;
}

void sub_100108354(void *a1, void *a2)
{
  size_t v2 = sub_10003C438(a1, a2);
  *size_t v2 = off_1001AFFF0;
  *(_OWORD *)(v2 + 5) = 0u;
  v2[9] = 0;
  *(_OWORD *)(v2 + 7) = 0u;
  AEAAuthData v3 = sub_10003C118();
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 1)
  {
    int v5 = (*v3)();
  }
  else
  {
    if (v4) {
      sub_100017DCC();
    }
    int v5 = *(_DWORD *)v3;
  }
  v6[0] = v5 + 1;
  int v7 = 0;
  sub_1001095D8((uint64_t)&v8, v6, &v7);
}

void sub_10010852C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100010A48(a12);
  }
  sub_1001095AC(v13);
  sub_1001471B8((uint64_t)v12);
  sub_10003C494(v12);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_100108598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  sub_10010BA20(a1, a2, a3, &v13);
  if (v13 && !*(unsigned char *)(v13 + 312) || v13 && *(unsigned char *)(v13 + 312))
  {
LABEL_17:
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v13, 0), a4);
    return sub_1001095AC((atomic_ullong *)&v13);
  }
  if (*(unsigned char *)(a1 + 704) && v14 != (void *)(a1 + 728))
  {
    do
    {
      sub_10010BE5C(a1, a2, &v11);
      uint64_t v15 = v11;
      sub_100108764((atomic_ullong *)&v13, &v12);
      sub_1001095AC(&v12);
      if (v13)
      {
        if (!*(unsigned char *)(v13 + 312)) {
          break;
        }
      }
      int v7 = (unint64_t *)sub_10010BFF8((void *)a1);
      if (v7)
      {
        uint64_t v15 = v7;
        sub_10010C094(a1, v7, a2, (unint64_t *)&v11);
        sub_100108764((atomic_ullong *)&v13, (atomic_ullong *)&v11);
        sub_1001095AC((atomic_ullong *)&v11);
        break;
      }
    }
    while (*(unsigned char *)(a1 + 704));
    std::mutex::lock((std::mutex *)(a1 + 744));
    char v8 = sub_1000FC6DC((uint64_t **)(a1 + 720), v14, (unint64_t *)&v16, &v16, (uint64_t *)&v15);
    if (!v9) {
      v8[5] = (uint64_t)v15;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
    std::mutex::unlock((std::mutex *)(a1 + 744));
    sub_10010B1A4(a1, 0, 0, 0);
    goto LABEL_17;
  }
  *a4 = 0;
  return sub_1001095AC((atomic_ullong *)&v13);
}

void sub_100108724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1001095AC((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_100108764(atomic_ullong *a1, atomic_ullong *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = atomic_exchange(a2, 0);
    sub_1001095AC(a1);
    atomic_store(v3, (unint64_t *)a1);
  }
  return a1;
}

void sub_1001087A4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void sub_1001087CC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 256)) {
      sub_10010C7E8(v2 + 232, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1001087F4(_Unwind_Exception *a1)
{
}

atomic_ullong *sub_10010880C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2[3];
  int v7 = *(unint64_t ***)(a1 + 40);
  char v8 = *v7;
  char v9 = v7[1];
  while (v8 != v9)
  {
    sub_100108A98(v8, v6, (unint64_t *)&v23);
    if (v23 && !*(unsigned char *)(v23 + 312))
    {
      sub_100109110((unint64_t *)&v21, (unint64_t *)&v23);
      uint64_t v22 = -2;
      *(void *)a3 = 0;
      atomic_store(atomic_exchange(&v21, 0), (unint64_t *)a3);
      *(_DWORD *)(a3 + 8) = v22;
      sub_1001095AC(&v21);
      return sub_1001095AC(&v23);
    }
    sub_1001095AC(&v23);
    ++v8;
  }
  sub_100108598(*(void *)(a1 + 56), v6, 1, (unint64_t *)&v23);
  if (v23 && (unsigned int v10 = atomic_load((unsigned int *)(v23 + 24)), v10 == 2))
  {
    sub_100109110((unint64_t *)&v21, (unint64_t *)&v23);
    uint64_t v22 = -2;
    *(void *)a3 = 0;
    atomic_store(atomic_exchange(&v21, 0), (unint64_t *)a3);
    *(_DWORD *)(a3 + 8) = v22;
    sub_1001095AC(&v21);
  }
  else
  {
    uint64_t v21 = a2[3];
    sub_100108B34(&v23, a2, &v21);
    int v11 = *(unint64_t ***)(a1 + 40);
    atomic_ullong v12 = *v11;
    unint64_t v13 = v11[1];
    if (*v11 == v13)
    {
      int v14 = 0;
    }
    else
    {
      int v14 = 0;
      do
      {
        unint64_t v15 = atomic_load(v12);
        if (!v15) {
          goto LABEL_13;
        }
LABEL_12:
        if (*(void *)(v15 + 32) == -2)
        {
LABEL_13:
          while (1)
          {
            unint64_t v16 = atomic_load((unint64_t *)&v23);
            unint64_t v17 = v15;
            atomic_compare_exchange_strong((atomic_ullong *volatile)v12, &v17, v16);
            if (v17 == v15) {
              break;
            }
            unint64_t v15 = v17;
            if (v17) {
              goto LABEL_12;
            }
          }
          sub_100109110((unint64_t *)&v21, (unint64_t *)&v23);
        }
        else
        {
          uint64_t v21 = 0;
          atomic_store(0, (unint64_t *)&v21);
        }
        if (v21) {
          int v18 = *(unsigned __int8 *)(v21 + 312) == 0;
        }
        else {
          int v18 = 0;
        }
        if (v23) {
          int v19 = *(unsigned __int8 *)(v23 + 312) == 0;
        }
        else {
          int v19 = 0;
        }
        sub_1001095AC(&v21);
        if (v18 == v19) {
          break;
        }
        ++v14;
        ++v12;
      }
      while (v12 != v13);
    }
    sub_100109110((unint64_t *)a3, (unint64_t *)&v23);
    *(_DWORD *)(a3 + 8) = v14;
  }
  return sub_1001095AC(&v23);
}

void sub_100108A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001095AC((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_100108A98@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    uint64_t v6 = (unint64_t *)atomic_load(result);
    sub_10010C180(&v8, v6, 1);
    if (v8 && !*(unsigned char *)(v8 + 312))
    {
      uint64_t v7 = *(void *)(v8 + 32);
      *a3 = 0;
      if (v7 == a2) {
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v8, 0), a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return (unint64_t *)sub_1001095AC((atomic_ullong *)&v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_100108B34(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void sub_100108B5C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 256)) {
      sub_10010C7E8(v2 + 232, v2);
    }
  }
  __cxa_rethrow();
}

void sub_100108B84(_Unwind_Exception *a1)
{
}

uint64_t sub_100108B98(uint64_t a1, uint64_t *a2, int *a3, void **a4)
{
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v4 = *a2 + 40;
  }
  else {
    uint64_t v4 = 0;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v4 + 140));
  if (v5)
  {
    uint64_t v7 = *(unsigned char *)(*a2 + 192) ? *a2 + 40 : 0;
    size_t v8 = atomic_load((unsigned int *)(v7 + 144));
    *a3 = v8;
    if ((v8 & 0x80000000) == 0)
    {
      char v9 = *a4;
      if (*(unsigned char *)(*a2 + 192)) {
        uint64_t v10 = *a2 + 40;
      }
      else {
        uint64_t v10 = 0;
      }
      int v11 = *(const void **)v10;
      atomic_ullong v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        memcpy(v9, v11, *a3);
        sub_100010A48(v12);
      }
      else
      {
        memcpy(v9, v11, v8);
      }
      uint64_t v13 = *a2;
      if (*a2)
      {
        if (*(unsigned char *)(v13 + 192)) {
          v13 += 40;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      atomic_fetch_add((atomic_uint *volatile)(v13 + 136), 0xFFFFFFFF);
    }
  }
  return v5 & 1;
}

void sub_100108C74(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    if (*(unsigned char *)(v3 + 192)) {
      v3 += 40;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v4 = (std::mutex *)(v3 + 72);
  std::mutex::lock((std::mutex *)(v3 + 72));
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v5 = *a2 + 40;
  }
  else {
    uint64_t v5 = 0;
  }
  if (atomic_load((unsigned int *)(v5 + 136)))
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      if (*(unsigned char *)(v7 + 192)) {
        v7 += 40;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    std::condition_variable::notify_all((std::condition_variable *)(v7 + 24));
  }

  std::mutex::unlock(v4);
}

uint64_t sub_100108D0C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (*a2)
  {
    if (*(unsigned char *)(v6 + 192)) {
      v6 += 40;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  uint64_t v7 = (std::mutex *)(v6 + 72);
  std::mutex::lock((std::mutex *)(v6 + 72));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24), a3);
  uint64_t v9 = v8;
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v10 = *a2 + 40;
  }
  else {
    uint64_t v10 = 0;
  }
  atomic_store(v8, (unsigned int *)(v10 + 144));
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v11 = *a2 + 40;
  }
  else {
    uint64_t v11 = 0;
  }
  atomic_store(1u, (unsigned __int8 *)(v11 + 140));
  std::mutex::unlock(v7);
  return v9;
}

void sub_100108DD8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_100108DEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2;
  unsigned int v23 = 0;
  uint64_t v4 = sub_10010880C(a1, a2, (uint64_t)&v21);
  unint64_t v5 = v22;
  if (v22 != -2)
  {
    uint64_t v11 = sub_100108D0C(a1, &v21, (uint64_t)v2);
    unsigned int v23 = v11;
    sub_100108C74(v11, &v21);
    if (v5 < (uint64_t)(*(void *)(*(void *)(a1 + 40) + 8) - **(void **)(a1 + 40)) >> 3)
    {
      __lk.__m_ = 0;
      unint64_t v12 = atomic_load((unint64_t *)(a1 + 72));
      atomic_store(v12, (unint64_t *)&__lk);
      atomic_store(atomic_exchange((atomic_ullong *volatile)&__lk, 0), (unint64_t *)(**(void **)(a1 + 40) + 8 * v5));
    }
    if (v21 && *(void *)(v21 + 256)) {
      sub_10010C7E8(v21 + 232, v21);
    }
    goto LABEL_35;
  }
  uint64_t v6 = v21;
  if (v21)
  {
    if (*(unsigned char *)(v21 + 192)) {
      uint64_t v6 = v21 + 40;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  atomic_fetch_add((atomic_uint *volatile)(v6 + 136), 1u);
  if (sub_100108B98((uint64_t)v4, &v21, (int *)&v23, (void **)&v2->__vftable)) {
    goto LABEL_35;
  }
  uint64_t v7 = v21;
  if (v21)
  {
    if (*(unsigned char *)(v21 + 192)) {
      uint64_t v7 = v21 + 40;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v7 + 72);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v7 + 72));
  int v9 = sub_100108B98(v8, &v21, (int *)&v23, (void **)&v2->__vftable);
  char v10 = v9;
  if (v9)
  {
    uint64_t v2 = (std::__shared_weak_count *)v23;
  }
  else
  {
    uint64_t v13 = v21;
    if (v21)
    {
      if (*(unsigned char *)(v21 + 192)) {
        uint64_t v13 = v21 + 40;
      }
      else {
        uint64_t v13 = 0;
      }
    }
    std::condition_variable::wait((std::condition_variable *)(v13 + 24), &__lk);
    if (*(unsigned char *)(v21 + 192)) {
      uint64_t v14 = v21 + 40;
    }
    else {
      uint64_t v14 = 0;
    }
    size_t v15 = atomic_load((unsigned int *)(v14 + 144));
    unsigned int v23 = v15;
    if ((int)v15 >= 1)
    {
      unint64_t v16 = v2->__vftable;
      if (*(unsigned char *)(v21 + 192)) {
        uint64_t v17 = v21 + 40;
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = *(const void **)v17;
      uint64_t v2 = *(std::__shared_weak_count **)(v17 + 8);
      if (v2)
      {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
        memcpy(v16, v18, v15);
        sub_100010A48(v2);
      }
      else
      {
        memcpy(v16, v18, v15);
      }
    }
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if ((v10 & 1) == 0) {
LABEL_35:
  }
    uint64_t v2 = (std::__shared_weak_count *)v23;
  sub_1001095AC(&v21);
  return v2;
}

void sub_100108FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001095AC((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

double sub_100109004@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_10010C83C(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void sub_10010904C(void *a1)
{
  sub_100109518(a1);

  operator delete();
}

void *sub_100109084(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"readSynchronizer", 16);
}

void *sub_100109098(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10009415C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1001090F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_100109110(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (v3)
  {
    unint64_t v4 = atomic_load(v3);
    if (!v4)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = (atomic_ullong *)v3[37];
    if (v7) {
      v3[38] = atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    if (!sub_1001091B4((uint64_t)v3))
    {
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v3[4];
        v3[4] = -1;
        sub_100109298((uint64_t)v3, v8, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1001091B4(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
    unsigned int v6 = atomic_load(v2);
    if (v6 != 2 && !*(unsigned char *)(a1 + 312)) {
      sub_100109254(a1 + 24, 1u, 5u);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v7 = atomic_load((unint64_t *)a1);
    if (v7 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = atomic_load(v2);
      return v8 == 2;
    }
  }
}

BOOL sub_100109254(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  long long v6 = v4;
  return sub_1000F4F20((uint64_t)&v4, (uint64_t)&v5, 0);
}

uint64_t sub_100109298(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (!*(unsigned char *)(a1 + 312)
    && (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 == 2)
    && *(unsigned char *)(a1 + 192)
    && (uint64_t v7 = *(void *)(a1 + 288)) != 0)
  {
    int v8 = (a3 >> 1) & 2;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a1 + 40))
    {
      if ((v3 & 2) == 0)
      {
        if (v3) {
          sub_100109478(a1 + 200, a1, a2, v8 | 1);
        }
        return 0;
      }
      *(void *)&long long v10 = "ref::details::ctrl_blk<CurrentReader, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = CurrentReader, tag_t = unsigned long long]";
      *((void *)&v10 + 1) = 68;
      int v11 = 16;
      sub_1000D9314(v12, &v10);
      sub_100003DF0(v13, (uint64_t)"Got error when trying to close ", 31);
      std::ostream::operator<<();
      sub_100003DF0(v13, (uint64_t)" with ret ", 10);
      std::ostream::operator<<();
      sub_100003DF0(v13, (uint64_t)", Force closing.", 16);
      std::ostream::~ostream();
      sub_1000D95DC((uint64_t)v12);
      std::ios::~ios();
    }
  }
  else
  {
    int v8 = (a3 >> 1) & 2;
  }
  atomic_store(0, (unsigned int *)(a1 + 24));
  if (*(unsigned char *)(a1 + 192))
  {
    sub_1001094D8(a1 + 40);
    *(unsigned char *)(a1 + 192) = 0;
  }
  sub_100109478(a1 + 200, a1, a2, v8);
  std::__cxx_atomic_notify_all((const void *)(a1 + 24));
  return 1;
}

void sub_100109460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000D9438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100109478(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

uint64_t sub_1001094D8(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void *sub_100109518(void *a1)
{
  *a1 = off_1001AFFF0;
  sub_1001095AC(a1 + 9);
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_100010A48(v2);
  }
  char v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_100010A48(v3);
  }
  *a1 = off_1001966B0;
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

atomic_ullong *sub_1001095AC(atomic_ullong *a1)
{
  double result = (atomic_ullong *)atomic_exchange(a1, 0);
  if (result)
  {
    if (atomic_fetch_add(result, 0xFFFFFFFFFFFFFFFFLL) == 1)
    {
      uint64_t v2 = result[4];
      result[4] = -1;
      return (atomic_ullong *)sub_100109298((uint64_t)result, v2, 1u);
    }
  }
  return result;
}

void sub_1001095D8(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v5 = operator new(0x580uLL);
  sub_10010963C(v5, a2, a3);
}

void sub_100109628(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10010963C(void *a1, unsigned int *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B00D0;
  sub_100109718((uint64_t)(a1 + 3), a2, a3);
}

void sub_100109684(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100109698(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B00D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001096B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B00D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_10010970C(uint64_t a1)
{
  return sub_10010B67C(a1 + 24);
}

void sub_100109718(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v6 = 0;
  sub_1001097A0(a1, v3, v4, (uint64_t)v5);
}

void sub_10010978C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10010B5F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1001097A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100109BB4(a1);
  *(void *)(v8 + 424) = a2;
  *(void *)(v8 + 432) = a3;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(void *)(v8 + 488) = 850045863;
  *(_OWORD *)(v8 + 496) = 0u;
  *(_OWORD *)(v8 + 512) = 0u;
  *(_OWORD *)(v8 + 528) = 0u;
  *(void *)(v8 + 544) = 0;
  *(_OWORD *)(v8 + 560) = 0u;
  *(_OWORD *)(v8 + 576) = 0u;
  *(void *)(v8 + 592) = 850045863;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 632) = 0u;
  *(void *)(v8 + 648) = 0;
  *(void *)(v8 + 656) = 1018212795;
  *(void *)(v8 + 696) = 0;
  *(_OWORD *)(v8 + 680) = 0u;
  *(unsigned char *)(v8 + 704) = 1;
  *(_OWORD *)(v8 + 664) = 0u;
  sub_10011DF70(v8 + 712, "dealloc_queue");
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = a1 + 728;
  *(void *)(a1 + 744) = 850045863;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 808) = 1018212795;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 856) = 850045863;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 920) = a1 + 920;
  *(void *)(a1 + 928) = a1 + 920;
  *(void *)(a1 + 936) = 0;
  sub_10010A2C4(a1 + 944, a4);
  sub_10010A35C(a1 + 976, a1);
  *(void *)(a1 + 1320) = off_1001B03D0;
  *(void *)(a1 + 1328) = a1;
  *(void *)(a1 + 1344) = a1 + 1320;
  *(void *)(a1 + 1352) = off_1001B0460;
  *(void *)(a1 + 1360) = a1;
  *(void *)(a1 + 1376) = a1 + 1352;
  operator new[]();
}

void sub_1001099E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, std::condition_variable *a12, NSObject **a13)
{
  sub_10010B5F8(a10);
  sub_1000FDF84(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 808));
  std::mutex::~mutex((std::mutex *)(v13 + 744));
  sub_10002A594(v13 + 720, *a11);
  sub_10011DEBC(a13);
  std::condition_variable::~condition_variable(a12);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 488));
  sub_1000D9D50(v14);
  sub_10010B580((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_100109ABC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_10010AAB4(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  unint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

uint64_t sub_100109B7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100109BB4(uint64_t a1)
{
  *(void *)a1 = off_1001B0120;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = off_1001B01B0;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)(a1 + 64) = off_1001B0240;
  *(void *)(a1 + 88) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = sub_100109F6C(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_100109C98(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(unsigned char *)(a1 + 416) = 1;
  return a1;
}

void sub_100109C74(_Unwind_Exception *a1)
{
  sub_10010B5F8(v3);
  sub_10010A1BC(v2);
  sub_10010A240(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100109C98(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  *(void *)(result + 32) = a2;
  *(unsigned char *)(result + 312) = 0;
  atomic_store(1uLL, (unint64_t *)result);
  atomic_store(0, (unint64_t *)(result + 8));
  atomic_store(0, (unint64_t *)(result + 16));
  if (*(unsigned char *)(result + 192))
  {
    double result = sub_1001094D8(result + 40);
    *(unsigned char *)(v2 + 192) = 0;
  }
  uint64_t v3 = *(atomic_ullong **)(v2 + 296);
  if (v3) {
    *(void *)(v2 + 304) = atomic_fetch_add_explicit(v3, 1uLL, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(v2 + 24));
  __dmb(0xBu);
  return result;
}

void sub_100109D14()
{
}

void *sub_100109D28()
{
  double result = operator new(0x10uLL);
  *double result = off_1001B0120;
  return result;
}

void sub_100109D60(uint64_t a1, void *a2)
{
  *a2 = off_1001B0120;
}

uint64_t sub_100109D8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100109DCC()
{
}

void sub_100109DDC()
{
}

void *sub_100109DF0()
{
  double result = operator new(0x10uLL);
  *double result = off_1001B01B0;
  return result;
}

void sub_100109E28(uint64_t a1, void *a2)
{
  *a2 = off_1001B01B0;
}

uint64_t sub_100109E54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100109E94()
{
}

void sub_100109EA4()
{
}

void *sub_100109EB8()
{
  double result = operator new(0x10uLL);
  *double result = off_1001B0240;
  return result;
}

void sub_100109EF0(uint64_t a1, void *a2)
{
  *a2 = off_1001B0240;
}

uint64_t sub_100109F18()
{
  return 0;
}

uint64_t sub_100109F20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100109F60()
{
}

uint64_t sub_100109F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  sub_10010A040(a1 + 200, a2);
  sub_10010A0D8(a1 + 232, a3);
  sub_10010A2C4(a1 + 264, a4);
  *(void *)(a1 + 296) = a5;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  return a1;
}

void sub_10010A004(_Unwind_Exception *a1)
{
  sub_10010A1BC(v4);
  sub_10010A240(v3);
  if (*(unsigned char *)(v1 + 192)) {
    sub_1001094D8(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10010A040(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10010A0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10010A170(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192)) {
    sub_1001094D8(a1 + 40);
  }
  return a1;
}

void *sub_10010A1BC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10010A240(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10010A2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10010A35C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v5[0] = off_1001B02D0;
  v5[1] = a1;
  double v5[3] = v5;
  v4[0] = off_1001B0350;
  v4[1] = a1;
  v4[3] = v4;
  sub_100109F6C(a1 + 8, (uint64_t)v5, (uint64_t)v4, a2 + 944, a2 + 568);
  sub_10010A1BC(v4);
  sub_10010A240(v5);
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_10010A42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_10010A1BC((uint64_t *)va);
  sub_10010A240((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_10010A44C()
{
}

void *sub_10010A460(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1001B02D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10010A4A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001B02D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10010A4D4(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_10010A538(**(void **)(a1 + 8) + 1320, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t sub_10010A4EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010A52C()
{
}

uint64_t sub_10010A538(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void sub_10010A59C()
{
}

void *sub_10010A5B0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1001B0350;
  result[1] = v3;
  return result;
}

uint64_t sub_10010A5F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001B0350;
  a2[1] = v2;
  return result;
}

uint64_t sub_10010A624(uint64_t a1)
{
  return sub_10010A680(**(void **)(a1 + 8) + 1352, *(void *)(a1 + 8));
}

uint64_t sub_10010A634(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010A674()
{
}

uint64_t sub_10010A680(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_10010A6D8()
{
}

void *sub_10010A6EC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1001B03D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10010A734(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001B03D0;
  a2[1] = v2;
  return result;
}

void sub_10010A760(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t sub_10010A774(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010A7B4()
{
}

void sub_10010A7C0(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 336)) {
    return;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v7 = (char *)(a1 + 856);
    std::mutex::lock((std::mutex *)(a1 + 856));
    int v8 = operator new(0x20uLL);
    v8[2] = a2;
    v8[3] = a3;
    uint64_t v9 = *(void *)(a1 + 920);
    *int v8 = v9;
    v8[1] = a1 + 920;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 920) = v8;
    ++*(void *)(a1 + 936);
    atomic_fetch_or((atomic_uint *volatile)(a2 + 336), 4u);
    unint64_t v10 = sub_10014119C(a2);
    std::mutex::lock((std::mutex *)v10);
    uint64_t v11 = sub_100141268(a2);
    std::condition_variable::notify_all((std::condition_variable *)v11);
    std::mutex::unlock((std::mutex *)v10);
LABEL_14:
    std::mutex::unlock((std::mutex *)v7);
    return;
  }
  sub_10010A964(a1, a3);
  sub_1001095AC((atomic_ullong *)(a2 + 328));
  if ((atomic_fetch_or((atomic_uint *volatile)(a2 + 336), 1u) & 2) == 0) {
    sub_10010A9CC(a1, a2);
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 576), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (atomic_load((unint64_t *)(a1 + 584)))
    {
      std::mutex::lock((std::mutex *)(a1 + 592));
      if (atomic_load((unint64_t *)(a1 + 584))) {
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 656));
      }
      std::mutex::unlock((std::mutex *)(a1 + 592));
    }
  }
  uint64_t v14 = (unint64_t *)(a1 + 560);
  if (atomic_load(v14))
  {
    uint64_t v7 = sub_10014119C(a2);
    std::mutex::lock((std::mutex *)v7);
    if (atomic_load(v14))
    {
      uint64_t v17 = sub_100141268(a2);
      std::condition_variable::notify_all((std::condition_variable *)v17);
    }
    goto LABEL_14;
  }
}

void sub_10010A938(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10010A964(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 744);
  std::mutex::lock((std::mutex *)(a1 + 744));
  sub_100046468(a1 + 720, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
  std::mutex::unlock(v3);
}

void sub_10010A9B8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10010A9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  sub_10010AA2C((void *)(a1 + 440), &v4);
  std::mutex::unlock(v3);
}

void sub_10010AA18(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10010AA2C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10010AAB4(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10010AAB4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100019308(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1000FBD80(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1000FBE98((uint64_t)a1, &v54);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100019308((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100019308((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000FBFB8(&v54, &v53);
  BOOL v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000FC0D0((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10010AD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10010ADD0()
{
}

void *sub_10010ADE4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1001B0460;
  result[1] = v3;
  return result;
}

uint64_t sub_10010AE2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001B0460;
  a2[1] = v2;
  return result;
}

void sub_10010AE58(uint64_t a1, unint64_t *a2, atomic_ullong *a3)
{
}

uint64_t sub_10010AE64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010AEA4()
{
}

void sub_10010AEB0(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = *(void *)(a1 + 424);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 552);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8) {
        return;
      }
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (atomic_ullong *)(v7 + v6);
      unint64_t v10 = a2;
      atomic_compare_exchange_strong(v9, &v10, 0);
      if (v10 == a2)
      {
        sub_10010AF60(a1, a2, 1uLL, a3);
        sub_10010A9CC(a1, a2);
      }
    }
  }
}

uint64_t sub_10010AF60(uint64_t a1, unint64_t a2, unint64_t a3, atomic_ullong *a4)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 576), 1uLL);
  if (a3) {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 1uLL);
  }
  atomic_fetch_or((atomic_uint *volatile)(a2 + 336), 2u);
  sub_1001095AC((atomic_ullong *)(a2 + 328));
  if (a4) {
    sub_1001095AC(a4);
  }
  if (a3)
  {
    char v8 = atomic_load((unsigned int *)(a2 + 336));
    if ((v8 & 4) == 0)
    {
      uint64_t v9 = a3 & 0x100;
      uint64_t v10 = (a3 >> 8) & 1;
      uint64_t v11 = (a3 >> 16) & 1;
      do
      {
        if (*(_DWORD *)(a2 + 336)) {
          break;
        }
        if (v10)
        {
          std::mutex::lock((std::mutex *)(a1 + 488));
          uint64_t v12 = *(void *)(a1 + 480);
          std::mutex::unlock((std::mutex *)(a1 + 488));
          if (v12) {
            break;
          }
        }
        if (sub_10010B1A4(a1, v11, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v18 = sub_100141268(a2);
          v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v26 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = v19.__d_.__rep_ + 200000;
          unint64_t v23 = a2;
          char v24 = v10;
          *(_DWORD *)unint64_t v25 = *(_DWORD *)v29;
          *(_DWORD *)&v25[3] = *(_DWORD *)&v29[3];
          sub_10010B304((std::condition_variable *)v18, &__lk, &v27, (uint64_t)&v23);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v13 = sub_100141268(a2);
          char v14 = atomic_load((unsigned int *)(a2 + 336));
          if ((v14 & 4) == 0)
          {
            uint64_t v15 = (std::condition_variable *)v13;
            do
            {
              if (*(_DWORD *)(a2 + 336)) {
                break;
              }
              if (v10)
              {
                std::mutex::lock((std::mutex *)(a1 + 488));
                uint64_t v16 = *(void *)(a1 + 480);
                std::mutex::unlock((std::mutex *)(a1 + 488));
                if (v16) {
                  break;
                }
              }
              std::condition_variable::wait(v15, &__lk);
              char v17 = atomic_load((unsigned int *)(a2 + 336));
            }
            while ((v17 & 4) == 0);
          }
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        int v20 = *(_DWORD *)(a2 + 336);
        if (!v9 || (v20 & 1) != 0)
        {
          if (v20) {
            break;
          }
        }
        else if (*(void *)(a1 + 480))
        {
          break;
        }
        char v21 = atomic_load((unsigned int *)(a2 + 336));
      }
      while ((v21 & 4) == 0);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 0xFFFFFFFFFFFFFFFFLL);
  }
  return atomic_fetch_and((atomic_uint *volatile)(a2 + 336), 0xFFFFFFFD) & 1;
}

void sub_10010B17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010B1A4(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 936)) {
    return 0;
  }
  char v17 = (std::mutex *)(a1 + 856);
  std::mutex::lock((std::mutex *)(a1 + 856));
  if (*(void *)(a1 + 936))
  {
    char v8 = *(uint64_t **)(a1 + 928);
    if (v8 == (uint64_t *)(a1 + 920))
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v8[2];
        if ((sub_100109298(v12 + 8, v8[3], v10) | a2) == 1)
        {
          uint64_t v13 = sub_10014119C(v12);
          std::mutex::lock((std::mutex *)v13);
          atomic_fetch_and((atomic_uint *volatile)(v12 + 336), 0xFFFFFFFB);
          std::mutex::unlock((std::mutex *)v13);
          uint64_t v14 = *v8;
          uint64_t v15 = (uint64_t *)v8[1];
          *(void *)(v14 + 8) = v15;
          *(void *)v8[1] = v14;
          --*(void *)(a1 + 936);
          operator delete(v8);
          char v8 = v15;
        }
        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          char v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 920));
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v17);
  return v11;
}

void sub_10010B2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t sub_10010B304(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 336));
    if ((v9 & 4) != 0) {
      return 1;
    }
    if (*(_DWORD *)(*(void *)a4 + 336)) {
      return 1;
    }
    if (*(unsigned char *)(a4 + 8))
    {
      unsigned int v10 = (std::mutex *)(v8 + 488);
      std::mutex::lock((std::mutex *)(v8 + 488));
      uint64_t v11 = *(void *)(v8 + 480);
      std::mutex::unlock(v10);
      if (v11) {
        return 1;
      }
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 336));
  if (v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 336)) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    return 0;
  }
  std::mutex::lock((std::mutex *)(v15 + 488));
  BOOL v17 = *(void *)(v15 + 480) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 488));
  return v17;
}

void *sub_10010B478(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10010B4FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10010B580(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 13);
  if (atomic_fetch_add(a1 + 13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v3 = a1[17];
    a1[17] = -1;
    sub_100109298((uint64_t)(a1 + 13), v3, 1u);
  }
  sub_10010A170(v2);
  sub_10010B5F8(a1 + 8);
  sub_10010A1BC(a1 + 4);

  return sub_10010A240(a1);
}

void *sub_10010B5F8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10010B67C(uint64_t a1)
{
  *(unsigned char *)(a1 + 704) = 0;
  if (*(void *)(a1 + 424))
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 552) + 8 * v3), 0);
      if (v4)
      {
        sub_10010AF60(a1, v4, v1 & 0xFFFFFFFFFF000000 | 0x10001, 0);
        sub_1001095AC((atomic_ullong *)(v4 + 328));
        sub_10010A170(v4 + 8);
        operator delete();
      }
      ++v3;
    }
    while (*(void *)(a1 + 424) > v3);
  }
  sub_10011E030((dispatch_queue_t *)(a1 + 712), &stru_1001B0500);
  if (*(void *)(a1 + 552)) {
    operator delete[]();
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v5 = *(void *)(a1 + 448);
  if (*(void *)(a1 + 456) != v5)
  {
    unint64_t v6 = *(void *)(a1 + 472);
    uint64_t v7 = (void *)(v5 + 8 * (v6 >> 9));
    uint64_t v8 = (uint64_t *)(*v7 + 8 * (v6 & 0x1FF));
    while (v8 != (uint64_t *)(*(void *)(v5 + (((*(void *)(a1 + 480) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(void *)(a1 + 480) + v6) & 0x1FF)))
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        sub_1001095AC((atomic_ullong *)(v9 + 328));
        sub_10010A170(v9 + 8);
        operator delete();
      }
      if ((uint64_t *)((char *)++v8 - *v7) == (uint64_t *)4096)
      {
        unsigned int v10 = (uint64_t *)v7[1];
        ++v7;
        uint64_t v8 = v10;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 488));
  sub_10010B478((void *)(a1 + 1352));
  sub_10010B4FC((void *)(a1 + 1320));
  sub_1001095AC((atomic_ullong *)(a1 + 1304));
  sub_10010A170(a1 + 984);
  sub_10010B5F8((void *)(a1 + 944));
  sub_1000FDF84((void *)(a1 + 920));
  std::mutex::~mutex((std::mutex *)(a1 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 808));
  std::mutex::~mutex((std::mutex *)(a1 + 744));
  sub_10002A594(a1 + 720, *(void **)(a1 + 728));
  sub_10011DEBC((NSObject **)(a1 + 712));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 656));
  std::mutex::~mutex((std::mutex *)(a1 + 592));
  std::mutex::~mutex((std::mutex *)(a1 + 488));
  sub_1000D9D50((void *)(a1 + 440));

  return sub_10010B580((void *)a1);
}

void sub_10010B8AC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10010B91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_10010B9C4((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010B940(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10010B978(uint64_t a1)
{
}

uint64_t sub_10010B980(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10010B9C4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_10010BA20(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v40 = a2;
  uint64_t v7 = (std::mutex *)(a1 + 744);
  uint64_t v8 = (void *)(a1 + 728);
  uint64_t v9 = (uint64_t **)(a1 + 720);
  uint64_t v10 = (unint64_t *)(a1 + 976);
  uint64_t v34 = (unint64_t *)(a1 + 104);
  unint64_t v35 = (std::condition_variable *)(a1 + 808);
  do
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v40;
    }
    else
    {
      uint64_t v15 = (void *)*v8;
      if (!*v8) {
        goto LABEL_18;
      }
      uint64_t v11 = v40;
      char v16 = v8;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v40;
        if (v17 >= v40) {
          std::chrono::system_clock::time_point v19 = v15;
        }
        else {
          std::chrono::system_clock::time_point v19 = v15 + 1;
        }
        if (v18) {
          char v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v8 || v40 < v16[4] || (unint64_t *)v16[5] == v10)
      {
LABEL_18:
        int64_t v41 = 0;
        *a4 = 0;
        a4[1] = (unint64_t)v8;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
        sub_1001095AC((atomic_ullong *)&v41);
        goto LABEL_19;
      }
    }
    int64_t v41 = (unint64_t *)v11;
    uint64_t v42 = v10;
    std::chrono::system_clock::time_point v12 = sub_1000FB5DC(v9, (unint64_t *)&v41, (uint64_t *)&v41);
    uint64_t v13 = v12;
    if (v14)
    {
      int64_t v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v12;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1001095AC((atomic_ullong *)&v41);
LABEL_19:
      int v20 = 1;
      goto LABEL_20;
    }
    uint64_t v38 = (unint64_t *)v12[5];
    if (v38 != v10)
    {
      sub_100042B98((uint64_t)&__lk);
      sub_100109110(&v37, v38 + 41);
      if (v37 && !*(unsigned char *)(v37 + 312))
      {
        uint64_t v21 = v40;
        if (*(void *)(v37 + 32) == v40)
        {
          *a4 = 0;
          a4[1] = (unint64_t)v13;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v37, 0), a4);
          goto LABEL_66;
        }
        if (*(void *)(v37 + 32) != -1 || (a3 & 1) != 0)
        {
LABEL_30:
          if (sub_10010B1A4(a1, 0, v21, 1u) != -1)
          {
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 1uLL);
            v36.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10014119C((unint64_t)v38);
            v36.__owns_ = 1;
            std::mutex::lock(v36.__m_);
            unint64_t v22 = sub_100141268((unint64_t)v38);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
            int64_t v41 = (unint64_t *)&v38;
            uint64_t v42 = &v37;
            uint64_t v43 = &v40;
            sub_10010C228((std::condition_variable *)v22, &v36, &v44, (uint64_t)&v41);
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 0xFFFFFFFFFFFFFFFFLL);
            if (v36.__owns_) {
              std::mutex::unlock(v36.__m_);
            }
            int v20 = 3;
            goto LABEL_67;
          }
          int64_t v41 = 0;
          unint64_t v31 = atomic_load(v34);
          if (v31)
          {
            unint64_t v32 = v31;
            while (1)
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)v34, &v32, v31 + 1);
              if (v32 == v31) {
                break;
              }
              unint64_t v31 = v32;
              if (!v32) {
                goto LABEL_65;
              }
            }
            unint64_t v33 = *(atomic_ullong **)(a1 + 400);
            unint64_t v32 = (unint64_t)v34;
            if (v33)
            {
              *(void *)(a1 + 408) = atomic_fetch_add_explicit(v33, 1uLL, memory_order_relaxed);
              unint64_t v32 = (unint64_t)v34;
            }
          }
          else
          {
            unint64_t v32 = 0;
          }
LABEL_65:
          atomic_store(v32, (unint64_t *)&v41);
          *a4 = 0;
          a4[1] = (unint64_t)v8;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
          sub_1001095AC((atomic_ullong *)&v41);
LABEL_66:
          int v20 = 1;
LABEL_67:
          sub_1001095AC((atomic_ullong *)&v37);
          goto LABEL_20;
        }
      }
      else if (a3)
      {
        uint64_t v21 = v40;
        goto LABEL_30;
      }
      int64_t v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v8;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1001095AC((atomic_ullong *)&v41);
      goto LABEL_66;
    }
    unint64_t v23 = (void *)*v8;
    if (*v8)
    {
      unint64_t v24 = v40;
      unint64_t v25 = v8;
      while (1)
      {
        unint64_t v26 = v23[4];
        BOOL v27 = v26 >= v24;
        if (v26 >= v24) {
          uint64_t v28 = v23;
        }
        else {
          uint64_t v28 = v23 + 1;
        }
        if (v27) {
          unint64_t v25 = v23;
        }
        unint64_t v23 = (void *)*v28;
        if (!*v28)
        {
          if (v25 == v8) {
            break;
          }
          if (v24 < v25[4]) {
            break;
          }
          BOOL v29 = (unint64_t *)v25[5];
          if (v29 != v10)
          {
            unint64_t v30 = v29[41];
            if (v30)
            {
              if (!*(unsigned char *)(v30 + 312)) {
                break;
              }
            }
          }
          if (!*(unsigned char *)(a1 + 704)) {
            break;
          }
          std::condition_variable::wait(v35, &__lk);
          unint64_t v23 = (void *)*v8;
          unint64_t v25 = v8;
          if (!*v8) {
            break;
          }
        }
      }
    }
    int v20 = 0;
LABEL_20:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v20 == 1) {
      return;
    }
  }
  while (*(unsigned char *)(a1 + 704));
  int64_t v41 = 0;
  *a4 = 0;
  a4[1] = (unint64_t)v8;
  atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
  sub_1001095AC((atomic_ullong *)&v41);
}

void sub_10010BDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, atomic_ullong a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_10010BE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  atomic_ullong v11 = 0;
  unint64_t v6 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v7 = *(void *)(a1 + 480);
  if (v7)
  {
    uint64_t v8 = *(unint64_t **)(*(void *)(*(void *)(a1 + 448) + ((*(void *)(a1 + 472) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(void *)(a1 + 472) & 0x1FFLL));
    ++*(void *)(a1 + 472);
    *(void *)(a1 + 480) = v7 - 1;
    sub_1000FB8C8(a1 + 440, 1);
    sub_10010C094(a1, v8, a2, v12);
    sub_100108764(&v11, (atomic_ullong *)v12);
    sub_1001095AC((atomic_ullong *)v12);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v9 = atomic_load((unint64_t *)(a1 + 576));
  if (v9 + v7 >= *(void *)(a1 + 432))
  {
    sub_10010B1A4(a1, 0, 0, 0);
  }
  else
  {
    v12[0] = (unint64_t)_NSConcreteStackBlock;
    v12[1] = 0x40000000;
    void v12[2] = (unint64_t)sub_10010C3B0;
    v12[3] = (unint64_t)&unk_1001B0598;
    void v12[4] = a1;
    sub_10011DF84((dispatch_queue_t *)(a1 + 712), v12);
  }
  *a3 = v8;
  a3[1] = 0;
  atomic_store(atomic_exchange(&v11, 0), (unint64_t *)a3 + 1);
  return sub_1001095AC(&v11);
}

void sub_10010BFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong a9)
{
  std::mutex::unlock(v9);
  sub_1001095AC(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_10010BFF8(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 71);
  uint64_t v2 = a1[53];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = a1[69];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 312) != -1)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[69] + 8 * v4), &v8, 0);
  if (v8 != v5 || (sub_10010AF60((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0) {
    return 0;
  }
  return v5;
}

atomic_ullong *sub_10010C094@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  sub_10010C408((uint64_t)a2, a3);
  uint64_t v7 = (atomic_ullong *)(a2 + 1);
  unint64_t v14 = 0;
  unint64_t v8 = atomic_load(a2 + 1);
  if (v8)
  {
    unint64_t v9 = v8;
    while (1)
    {
      atomic_compare_exchange_strong(v7, &v9, v8 + 1);
      if (v9 == v8) {
        break;
      }
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = (atomic_ullong *)a2[38];
    if (v10) {
      a2[39] = atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  atomic_store((unint64_t)v7, &v14);
  if (*(void *)(a1 + 424))
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 552) + 8 * v11), (unint64_t *)&v12, (unint64_t)a2);
      if (!v12) {
        break;
      }
      if (*(void *)(a1 + 424) <= (unint64_t)++v11) {
        goto LABEL_12;
      }
    }
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), a4);
  }
  else
  {
LABEL_12:
    *a4 = 0;
  }
  return sub_1001095AC((atomic_ullong *)&v14);
}

unint64_t *sub_10010C180(unint64_t *a1, unint64_t *a2, int a3)
{
  uint64_t v3 = (atomic_ullong *)a2;
  *a1 = 0;
  if (a2)
  {
    unint64_t v5 = atomic_load(a2);
    if (!v5)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v6 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a2, &v6, v5 + 1);
      if (v6 == v5) {
        break;
      }
      unint64_t v5 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
    unint64_t v8 = (atomic_ullong *)a2[37];
    if (v8) {
      a2[38] = atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    if (a3 && !sub_1001091B4((uint64_t)a2))
    {
      if (atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v3[4];
        v3[4] = -1;
        sub_100109298((uint64_t)v3, v9, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_10010C228(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if (*(_DWORD *)(**(void **)a4 + 336)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(unsigned char *)(*(void *)v8 + 312) && *(void *)(*(void *)v8 + 32) == **(void **)(a4 + 16)) {
        return 1;
      }
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if (*(_DWORD *)(**(void **)a4 + 336)) {
    return 1;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(unsigned char *)(*(void *)v14 + 312)
      && *(void *)(*(void *)v14 + 32) == **(void **)(a4 + 16);
}

uint64_t sub_10010C3B0(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = sub_10010BFF8(v1);
  if (v2) {
    sub_10010A9CC((uint64_t)v1, v2);
  }

  return sub_10010B1A4((uint64_t)v1, 0, 0, 0);
}

atomic_ullong *sub_10010C408(uint64_t a1, uint64_t a2)
{
  atomic_store(0, (unsigned int *)(a1 + 336));
  uint64_t v3 = (unint64_t *)(a1 + 8);
  sub_100109C98(a1 + 8, a2);
  unint64_t v9 = 0;
  unint64_t v4 = atomic_load(v3);
  if (v4)
  {
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_9;
      }
    }
    unint64_t v6 = *(atomic_ullong **)(a1 + 304);
    unint64_t v5 = (unint64_t)v3;
    if (v6)
    {
      *(void *)(a1 + 312) = atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
      unint64_t v5 = (unint64_t)v3;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_9:
  atomic_store(v5, &v9);
  sub_100108764((atomic_ullong *)(a1 + 328), (atomic_ullong *)&v9);
  double result = sub_1001095AC((atomic_ullong *)&v9);
  if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1;
    return (atomic_ullong *)sub_100109298((uint64_t)v3, v8, 1u);
  }
  return result;
}

void sub_10010C4D8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 304) = **(void **)(a1 + 296);
  sub_10010C564(a1 + 40, a2, a3);
  atomic_store(2u, (unsigned int *)(a1 + 24));

  sub_10010C5C4(a1);
}

void sub_10010C52C(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 312) = 1;
  sub_10010C5C4(v1);
  __cxa_rethrow();
}

void sub_10010C550(_Unwind_Exception *a1)
{
}

uint64_t sub_10010C564(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 152))
  {
    sub_1001094D8(a1);
    *(unsigned char *)(a1 + 152) = 0;
  }
  sub_10010C5F0(a1, a2, a3);
  *(unsigned char *)(a1 + 152) = 1;
  return a1;
}

void sub_10010C5C4(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 8))) {
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
  }
}

uint64_t sub_10010C5F0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v6 = *a3;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v4) {
    sub_100010A48(v4);
  }
  return a1;
}

void sub_10010C670(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 304) = **(void **)(a1 + 296);
  sub_10010C6FC(a1 + 40, a2, a3);
  atomic_store(2u, (unsigned int *)(a1 + 24));

  sub_10010C5C4(a1);
}

void sub_10010C6C4(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 312) = 1;
  sub_10010C5C4(v1);
  __cxa_rethrow();
}

void sub_10010C6E8(_Unwind_Exception *a1)
{
}

uint64_t sub_10010C6FC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 152))
  {
    sub_1001094D8(a1);
    *(unsigned char *)(a1 + 152) = 0;
  }
  sub_10010C75C(a1, a2, a3);
  *(unsigned char *)(a1 + 152) = 1;
  return a1;
}

uint64_t sub_10010C75C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v6 = *a3;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v4) {
    sub_100010A48(v4);
  }
  return a1;
}

uint64_t sub_10010C7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_10010C83C(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x68uLL);
  sub_10010C8B8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10010C8A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10010C8B8(void *a1, void *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9798;
  sub_10010C914(a1 + 3, a2, a3);
  return a1;
}

void sub_10010C900(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_10010C914(void *a1, void *a2, void *a3)
{
  uint64_t v5 = sub_10003C438(a1, a3);
  *uint64_t v5 = off_1001AFFF0;
  uint64_t v6 = a2[6];
  v5[5] = a2[5];
  v5[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100109110(a1 + 9, a2 + 9);
  return a1;
}

void sub_10010C99C(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[8];
  if (v3) {
    sub_100010A48(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[6];
  if (v4) {
    sub_100010A48(v4);
  }
  sub_10003C494(v1);
  _Unwind_Resume(a1);
}

uLong sub_10010C9C8(unsigned int *a1)
{
  uLong result = *a1;
  if (result)
  {
    if (result != 2)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Unknown checksum found", 0x16u);
    }
    return crc32(0, 0, 0) << 32;
  }
  return result;
}

uint64_t sub_10010CA3C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v37 = &_mh_execute_header;
  sub_100090DEC((uint64_t)"segment_num_t", 0, &v37, 2);
  *(_DWORD *)(a1 + 60) = 0;
  unint64_t v37 = &_mh_execute_header;
  sub_100090DEC((uint64_t)"segment_count_t", 0, &v37, 2);
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_10011861C((_DWORD *)(a1 + 80));
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  sub_10011861C((_DWORD *)(a1 + 352));
  *(_DWORD *)(a1 + 356) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  unint64_t v37 = &_mh_execute_header;
  LODWORD(v38) = 2;
  sub_100090DEC((uint64_t)"image_variant_type", 0, &v37, 3);
  *(void *)(a1 + 492) = 0;
  int v6 = *(_DWORD *)a2;
  LODWORD(v37) = 2037149547;
  sub_100090DEC((uint64_t)"header_signature", v6, &v37, 1);
  *(_DWORD *)a1 = 2037149547;
  int v7 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v37) = 4;
  sub_100090DEC((uint64_t)"version_t", v7, &v37, 1);
  *(_DWORD *)(a1 + 4) = 4;
  int v8 = bswap32(*(_DWORD *)(a2 + 8));
  LODWORD(v37) = 512;
  sub_100090DEC((uint64_t)"header_size_t", v8, &v37, 1);
  *(_DWORD *)(a1 + 8) = 512;
  sub_10011852C(&v37, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v37;
  *uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *uint64_t v5 = bswap64(*(void *)(a2 + 32));
  *(void *)(a1 + 40) = bswap64(*(void *)(a2 + 40));
  *(void *)(a1 + 48) = bswap64(*(void *)(a2 + 48));
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 56));
  unint64_t v37 = &_mh_execute_header;
  sub_100090DEC((uint64_t)"segment_num_t", (int)v5, &v37, 2);
  *(_DWORD *)(a1 + 56) = v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 60));
  unint64_t v37 = &_mh_execute_header;
  sub_100090DEC((uint64_t)"segment_count_t", (int)v5, &v37, 2);
  *(_DWORD *)(a1 + 60) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10011861C(v36);
  long long v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)&v36[96] = *(_OWORD *)(a2 + 176);
  *(_OWORD *)&v36[112] = v9;
  *(void *)&v36[128] = *(void *)(a2 + 208);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&unsigned char v36[32] = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v36[48] = v10;
  long long v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v36[64] = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v36[80] = v11;
  long long v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)std::unique_lock<std::mutex> v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v36[16] = v12;
  long long v42 = *(_OWORD *)&v36[72];
  long long v43 = *(_OWORD *)&v36[88];
  long long v44 = *(_OWORD *)&v36[104];
  long long v45 = *(_OWORD *)&v36[120];
  long long v38 = *(_OWORD *)&v36[8];
  long long v39 = *(_OWORD *)&v36[24];
  long long v40 = *(_OWORD *)&v36[40];
  long long v41 = *(_OWORD *)&v36[56];
  unint64_t v37 = *(const mach_header_64 **)v36;
  sub_10010E7C4((uint64_t)&v37, (int *)&v27);
  *(void *)(a1 + 80) = v27;
  *(_OWORD *)(a1 + 152) = v32;
  *(_OWORD *)(a1 + 168) = v33;
  *(_OWORD *)(a1 + 184) = v34;
  *(_OWORD *)(a1 + 200) = v35;
  *(_OWORD *)(a1 + 88) = v28;
  *(_OWORD *)(a1 + 104) = v29;
  *(_OWORD *)(a1 + 120) = v30;
  *(_OWORD *)(a1 + 136) = v31;
  *(void *)(a1 + 216) = bswap64(*(void *)(a2 + 216));
  *(void *)(a1 + 224) = bswap64(*(void *)(a2 + 224));
  long long v13 = *(_OWORD *)(a2 + 232);
  long long v14 = *(_OWORD *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  *(void *)(a1 + 296) = bswap64(*(void *)(a2 + 296));
  *(void *)(a1 + 304) = bswap64(*(void *)(a2 + 304));
  long long v16 = *(_OWORD *)(a2 + 312);
  long long v17 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v16;
  *(_OWORD *)(a1 + 328) = v17;
  sub_10011861C(v36);
  long long v18 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)&v36[96] = *(_OWORD *)(a2 + 448);
  *(_OWORD *)&v36[112] = v18;
  *(void *)&v36[128] = *(void *)(a2 + 480);
  long long v19 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)&unsigned char v36[32] = *(_OWORD *)(a2 + 384);
  *(_OWORD *)&v36[48] = v19;
  long long v20 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)&v36[64] = *(_OWORD *)(a2 + 416);
  *(_OWORD *)&v36[80] = v20;
  long long v21 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)std::unique_lock<std::mutex> v36 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)&v36[16] = v21;
  long long v42 = *(_OWORD *)&v36[72];
  long long v43 = *(_OWORD *)&v36[88];
  long long v44 = *(_OWORD *)&v36[104];
  long long v45 = *(_OWORD *)&v36[120];
  long long v38 = *(_OWORD *)&v36[8];
  long long v39 = *(_OWORD *)&v36[24];
  long long v40 = *(_OWORD *)&v36[40];
  long long v41 = *(_OWORD *)&v36[56];
  unint64_t v37 = *(const mach_header_64 **)v36;
  sub_10010E7C4((uint64_t)&v37, (int *)&v27);
  *(void *)(a1 + 352) = v27;
  long long v22 = v33;
  *(_OWORD *)(a1 + 424) = v32;
  *(_OWORD *)(a1 + 440) = v22;
  long long v23 = v35;
  *(_OWORD *)(a1 + 456) = v34;
  *(_OWORD *)(a1 + 472) = v23;
  long long v24 = v29;
  *(_OWORD *)(a1 + 360) = v28;
  *(_OWORD *)(a1 + 376) = v24;
  long long v25 = v31;
  *(_OWORD *)(a1 + 392) = v30;
  *(_OWORD *)(a1 + 408) = v25;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 488));
  unint64_t v37 = &_mh_execute_header;
  LODWORD(v38) = 2;
  sub_100090DEC((uint64_t)"image_variant_type", (int)v5, &v37, 3);
  *(_DWORD *)(a1 + 488) = v5;
  *(void *)(a1 + 492) = bswap64(*(void *)(a2 + 492));
  return a1;
}

void sub_10010CF2C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003744(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10010CF40(uint64_t a1, uint64_t a2)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v12 = "*udif::header::write(char *)";
    *((void *)&v12 + 1) = 20;
    int v13 = 2;
    sub_10010D0F8(v14, &v12);
    sub_10010D260(v15, a1);
    std::ostream::~ostream();
    sub_100113F00((uint64_t)v14);
    std::ios::~ios();
  }
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(void *)(a2 + 32) = bswap64(*(void *)(a1 + 32));
  *(void *)(a2 + 40) = bswap64(*(void *)(a1 + 40));
  *(void *)(a2 + 48) = bswap64(*(void *)(a1 + 48));
  *(_DWORD *)(a2 + 56) = bswap32(*(_DWORD *)(a1 + 56));
  *(_DWORD *)(a2 + 60) = bswap32(*(_DWORD *)(a1 + 60));
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  uint64_t v4 = sub_10010EA8C(a1 + 80, a2 + 80);
  *(void *)uint64_t v4 = bswap64(*(void *)(a1 + 216));
  *(void *)(v4 + 8) = bswap64(*(void *)(a1 + 224));
  long long v5 = *(_OWORD *)(a1 + 232);
  long long v6 = *(_OWORD *)(a1 + 248);
  long long v7 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v4 + 64) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  *(void *)(v4 + 80) = bswap64(*(void *)(a1 + 296));
  *(void *)(v4 + 88) = bswap64(*(void *)(a1 + 304));
  long long v9 = *(_OWORD *)(a1 + 312);
  long long v8 = *(_OWORD *)(a1 + 328);
  *(void *)(v4 + 128) = *(void *)(a1 + 344);
  *(_OWORD *)(v4 + 96) = v9;
  *(_OWORD *)(v4 + 112) = v8;
  uint64_t v10 = sub_10010EA8C(a1 + 352, v4 + 136);
  *(_DWORD *)uint64_t v10 = bswap32(*(_DWORD *)(a1 + 488));
  *(void *)(v10 + 4) = bswap64(*(void *)(a1 + 492));
  return v10 + 12;
}

void sub_10010D0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10010D21C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10010D0F8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001186B8((uint64_t)a1, a2);
  *a1 = off_1001B0630;
  a1[45] = &off_1001B0730;
  a1[46] = &off_1001B0758;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B0630;
  a1[45] = off_1001B06B8;
  a1[46] = off_1001B06E0;
  return a1;
}

void sub_10010D1F8(_Unwind_Exception *a1)
{
  sub_100113F00(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10010D21C(uint64_t a1)
{
  return a1;
}

void *sub_10010D260(void *a1, uint64_t a2)
{
  sub_100003DF0(a1, (uint64_t)"header (", 8);
  uint64_t v4 = (void *)std::ostream::operator<<();
  long long v5 = sub_100003DF0(v4, (uint64_t)"):", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  long long v6 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  int v7 = *(_DWORD *)(a2 + 12);
  int v112 = *(_DWORD *)(a2 + 60);
  int v113 = *(_DWORD *)(a2 + 56);
  uint64_t v110 = *(void *)(a2 + 72);
  uint64_t v111 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 168);
  long long v134 = *(_OWORD *)(a2 + 152);
  long long v135 = v9;
  long long v10 = *(_OWORD *)(a2 + 200);
  long long v136 = *(_OWORD *)(a2 + 184);
  long long v137 = v10;
  long long v11 = *(_OWORD *)(a2 + 104);
  long long v130 = *(_OWORD *)(a2 + 88);
  long long v131 = v11;
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v132 = *(_OWORD *)(a2 + 120);
  long long v133 = v12;
  long long v13 = *(_OWORD *)(a2 + 248);
  long long v126 = *(_OWORD *)(a2 + 232);
  long long v127 = v13;
  long long v14 = *(_OWORD *)(a2 + 280);
  long long v128 = *(_OWORD *)(a2 + 264);
  long long v129 = v14;
  long long v15 = *(_OWORD *)(a2 + 328);
  long long v123 = *(_OWORD *)(a2 + 312);
  long long v124 = v15;
  uint64_t v125 = *(void *)(a2 + 344);
  uint64_t v16 = *(void *)(a2 + 352);
  long long v17 = *(_OWORD *)(a2 + 440);
  long long v119 = *(_OWORD *)(a2 + 424);
  long long v120 = v17;
  long long v18 = *(_OWORD *)(a2 + 472);
  long long v121 = *(_OWORD *)(a2 + 456);
  long long v122 = v18;
  long long v19 = *(_OWORD *)(a2 + 376);
  long long v115 = *(_OWORD *)(a2 + 360);
  long long v116 = v19;
  long long v20 = *(_OWORD *)(a2 + 408);
  long long v117 = *(_OWORD *)(a2 + 392);
  long long v118 = v20;
  int v109 = *(_DWORD *)(a2 + 488);
  long long v21 = sub_100003DF0(a1, (uint64_t)"signature", 9);
  long long v22 = sub_100003DF0(v21, (uint64_t)": ", 2);
  v138[23] = 4;
  strcpy(v138, "koly");
  long long v23 = sub_100003DF0(v22, (uint64_t)v138, 4);
  if ((v138[23] & 0x80000000) != 0) {
    operator delete(*(void **)v138);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  long long v24 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v25 = sub_100003DF0(a1, (uint64_t)"version", 7);
  sub_100003DF0(v25, (uint64_t)": ", 2);
  unint64_t v26 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
  uint64_t v27 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v28 = sub_100003DF0(a1, (uint64_t)"header_size", 11);
  sub_100003DF0(v28, (uint64_t)": ", 2);
  long long v29 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
  long long v30 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v31 = sub_100003DF0(a1, (uint64_t)"flags", 5);
  long long v32 = sub_100003DF0(v31, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v7;
  long long v33 = sub_100118748(v32, (int *)&v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  long long v34 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v35 = sub_100003DF0(a1, (uint64_t)"run_data_fork_offset", 20);
  std::unique_lock<std::mutex> v36 = sub_100003DF0(v35, (uint64_t)": ", 2);
  uint64_t v37 = *v36;
  long long v38 = (char *)v36 + *(void *)(*v36 - 24);
  int v39 = *((_DWORD *)v38 + 2);
  *((_DWORD *)v38 + 2) = v39 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v36 + *(void *)(v37 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_100016CD0(v36, v138);
  std::ostream::operator<<();
  uint64_t v40 = *v36;
  *(_DWORD *)((char *)v36 + *(void *)(*v36 - 24) + 8) = v39;
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(v40 - 24)));
  long long v41 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v42 = sub_100003DF0(a1, (uint64_t)"data_fork_offset", 16);
  long long v43 = sub_100003DF0(v42, (uint64_t)": ", 2);
  uint64_t v44 = *v43;
  long long v45 = (char *)v43 + *(void *)(*v43 - 24);
  LODWORD(v36) = *((_DWORD *)v45 + 2);
  *((_DWORD *)v45 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v43 + *(void *)(v44 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_100016CD0(v43, v138);
  std::ostream::operator<<();
  uint64_t v46 = *v43;
  *(_DWORD *)((char *)v43 + *(void *)(*v43 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(v46 - 24)));
  uint64_t v47 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v48 = sub_100003DF0(a1, (uint64_t)"data_fork_len", 13);
  sub_100003DF0(v48, (uint64_t)": ", 2);
  uint64_t v49 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24)));
  uint64_t v50 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v51 = sub_100003DF0(a1, (uint64_t)"rsrc_fork_offset", 16);
  uint64_t v52 = sub_100003DF0(v51, (uint64_t)": ", 2);
  uint64_t v53 = *v52;
  long long v54 = (char *)v52 + *(void *)(*v52 - 24);
  LODWORD(v36) = *((_DWORD *)v54 + 2);
  *((_DWORD *)v54 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v52 + *(void *)(v53 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_100016CD0(v52, v138);
  std::ostream::operator<<();
  uint64_t v55 = *v52;
  *(_DWORD *)((char *)v52 + *(void *)(*v52 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(v55 - 24)));
  uint64_t v56 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v57 = sub_100003DF0(a1, (uint64_t)"rsrc_fork_len", 13);
  sub_100003DF0(v57, (uint64_t)": ", 2);
  uint64_t v58 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
  uint64_t v59 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v60 = sub_100003DF0(a1, (uint64_t)"segment_num", 11);
  long long v61 = sub_100003DF0(v60, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v113;
  long long v62 = sub_100118818(v61, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
  unint64_t v63 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v64 = sub_100003DF0(a1, (uint64_t)"segment_count", 13);
  uint64_t v65 = sub_100003DF0(v64, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v112;
  long long v66 = sub_10011885C(v65, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
  char v67 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v138 = v111;
  *(void *)&v138[8] = v110;
  uint64_t v68 = sub_100003DF0(a1, (uint64_t)"segment_id", 10);
  uint64_t v69 = sub_100003DF0(v68, (uint64_t)": ", 2);
  sub_1001188A0(v69, (uint64_t)v138, 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
  uint64_t v70 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v138 = v8;
  long long v139 = v134;
  long long v140 = v135;
  long long v141 = v136;
  long long v142 = v137;
  *(_OWORD *)&v138[8] = v130;
  *(_OWORD *)&v138[24] = v131;
  *(_OWORD *)&v138[40] = v132;
  *(_OWORD *)&v138[56] = v133;
  uint64_t v71 = sub_100003DF0(a1, (uint64_t)"data_fork_checksum", 18);
  uint64_t v72 = sub_100003DF0(v71, (uint64_t)": ", 2);
  sub_10010FBB0(v72, (int *)v138);
  std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(void *)(*v72 - 24)));
  uint64_t v73 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v74 = sub_100003DF0(a1, (uint64_t)"xml_offset", 10);
  uint64_t v75 = sub_100003DF0(v74, (uint64_t)": ", 2);
  uint64_t v76 = *v75;
  uint64_t v77 = (char *)v75 + *(void *)(*v75 - 24);
  LODWORD(v36) = *((_DWORD *)v77 + 2);
  *((_DWORD *)v77 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v75 + *(void *)(v76 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_100016CD0(v75, v138);
  std::ostream::operator<<();
  uint64_t v78 = *v75;
  *(_DWORD *)((char *)v75 + *(void *)(*v75 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(void *)(v78 - 24)));
  long long v79 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v80 = sub_100003DF0(a1, (uint64_t)"xml_length", 10);
  sub_100003DF0(v80, (uint64_t)": ", 2);
  uint64_t v81 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(void *)(*v81 - 24)));
  uint64_t v82 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)long long v138 = v126;
  *(_OWORD *)&v138[16] = v127;
  *(_OWORD *)&v138[32] = v128;
  *(_OWORD *)&v138[48] = v129;
  uint64_t v83 = sub_100003DF0(a1, (uint64_t)"external", 8);
  uint64_t v84 = sub_100003DF0(v83, (uint64_t)": ", 2);
  sub_1001188A0(v84, (uint64_t)v138, 64);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(void *)(*v84 - 24)));
  uint64_t v85 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v86 = sub_100003DF0(a1, (uint64_t)"code_sign_offset", 16);
  long long v87 = sub_100003DF0(v86, (uint64_t)": ", 2);
  uint64_t v88 = *v87;
  char v89 = (char *)v87 + *(void *)(*v87 - 24);
  LODWORD(v36) = *((_DWORD *)v89 + 2);
  *((_DWORD *)v89 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v87 + *(void *)(v88 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_100016CD0(v87, v138);
  std::ostream::operator<<();
  uint64_t v90 = *v87;
  *(_DWORD *)((char *)v87 + *(void *)(*v87 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(v90 - 24)));
  __n128 v91 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  __n128 v92 = sub_100003DF0(a1, (uint64_t)"code_sign_length", 16);
  sub_100003DF0(v92, (uint64_t)": ", 2);
  uint64_t v93 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
  char v94 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)long long v138 = v123;
  *(_OWORD *)&v138[16] = v124;
  *(void *)&v138[32] = v125;
  long long v95 = sub_100003DF0(a1, (uint64_t)"reserved", 8);
  unint64_t v96 = sub_100003DF0(v95, (uint64_t)": ", 2);
  sub_1001188A0(v96, (uint64_t)v138, 40);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24)));
  char v97 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v138 = v16;
  long long v139 = v119;
  long long v140 = v120;
  long long v141 = v121;
  long long v142 = v122;
  *(_OWORD *)&v138[8] = v115;
  *(_OWORD *)&v138[24] = v116;
  *(_OWORD *)&v138[40] = v117;
  *(_OWORD *)&v138[56] = v118;
  long long v98 = sub_100003DF0(a1, (uint64_t)"master_checksum", 15);
  char v99 = sub_100003DF0(v98, (uint64_t)": ", 2);
  sub_10010FBB0(v99, (int *)v138);
  std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24)));
  uint64_t v100 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  long long v101 = sub_100003DF0(a1, (uint64_t)"image_variant", 13);
  long long v102 = sub_100003DF0(v101, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v109;
  long long v103 = sub_100118A34(v102, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(void *)(*v103 - 24)));
  char v104 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v105 = sub_100003DF0(a1, (uint64_t)"sector_count", 12);
  sub_100003DF0(v105, (uint64_t)": ", 2);
  long long v106 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v106 + *(void *)(*v106 - 24)));
  long long v107 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v107->__vftable[2].~facet_0)(v107, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_10010E730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (*(char *)(v18 - 233) < 0) {
    operator delete(*(void **)(v18 - 256));
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10010E7C4@<Q0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  sub_1001143E4(&v8, bswap32(*(_DWORD *)a1));
  *a2 = v8;
  a2[1] = 0;
  unsigned int v7 = bswap32(*(_DWORD *)(a1 + 4));
  sub_10010E88C(a2 + 1, &v7);
  int v5 = *a2;
  if (*a2) {
    BOOL v6 = v5 == 10;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (v5 == 2)
    {
      a2[2] = bswap32(*(_DWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)(a2 + 18) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a2 + 22) = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a2 + 26) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a2 + 30) = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a2 + 10) = *(_OWORD *)(a1 + 40);
      __n128 result = *(__n128 *)(a1 + 56);
      *(__n128 *)(a2 + 14) = result;
    }
  }
  return result;
}

_DWORD *sub_10010E88C(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x408u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001B0860;
    exception[1] = "_checksum";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

BOOL sub_10010E904(_DWORD *a1, uint64_t a2)
{
  sub_10010E96C((uint64_t)v4, a2);
  return sub_100051E64(a1, v4);
}

uint64_t sub_10010E96C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2 == -1) {
    sub_100017DCC();
  }
  BOOL v6 = &v5;
  ((void (*)(uint64_t *__return_ptr, char **, uint64_t))off_1001B0880[v2])(&v7, &v6, a2 + 4);
  *(void *)a1 = v7;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 56) = v11;
  return a1;
}

unsigned int *sub_10010EA44@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X8>)
{
  unsigned int v3 = bswap32(*result);
  if ((v3 & 0x80000000) != 0)
  {
    __n128 result = sub_100114BE8(&v4, v3);
    unsigned int v3 = v4;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_10010EA8C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  uint64_t v2 = (_OWORD *)(a2 + 8);
  unsigned int v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1) {
    BOOL v4 = v3 == 10;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = 0;
  }
  else if (v3 == 2)
  {
    *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
    uint64_t v2 = (_OWORD *)(a2 + 12);
    uint64_t v5 = 4;
  }
  else
  {
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 56) = v8;
    *uint64_t v2 = v6;
    *(_OWORD *)(a2 + 24) = v7;
    long long v9 = *(_OWORD *)(a1 + 72);
    long long v10 = *(_OWORD *)(a1 + 88);
    long long v11 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a2 + 120) = v11;
    *(_OWORD *)(a2 + 72) = v9;
    *(_OWORD *)(a2 + 88) = v10;
    uint64_t v5 = 128;
  }
  bzero(v2, 128 - v5);
  return (uint64_t)v2 - v5 + 128;
}

uint64_t sub_10010EB48@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(result + 8) + v3;
  unint64_t v5 = v4 + *(void *)(result + 16);
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 2;
  if (v4 < v5 && (v4 < v3 || v3 + *(void *)(a2 + 16) - 1 < v5 - 1))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v7 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Invalid UDIF, run is not within block boundary", 0x16u);
  }
  return result;
}

void sub_10010EBD4()
{
}

void sub_10010ECBC()
{
  void *v0 = 0;
  operator delete[]();
}

void sub_10010ECE4(uint64_t a1, void *a2)
{
  values = a2;
  keys = @"resource-fork";
  sub_10011ACFC((const void **)&keys, (const void **)&values, 1, (CFMutableDictionaryRef *)&propertyList);
  if (sub_1000D29B8())
  {
    int v3 = *__error();
    if (sub_1000D29A0())
    {
      v16[0] = 0;
      unint64_t v4 = sub_1000D2920();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 41;
      *(_WORD *)long long v19 = 2080;
      *(void *)&v19[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
      *(_WORD *)&v19[10] = 2114;
      *(void *)&v19[12] = propertyList;
      unint64_t v5 = (const char *)_os_log_send_and_compose_impl();
      if (v5)
      {
        long long v6 = (char *)v5;
        fprintf(__stderrp, "%s\n", v5);
        free(v6);
      }
    }
    else
    {
      long long v7 = sub_1000D2920();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 41;
        *(_WORD *)long long v19 = 2080;
        *(void *)&v19[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
        *(_WORD *)&v19[10] = 2114;
        *(void *)&v19[12] = propertyList;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%.*s: res_dict: %{public}@", buf, 0x1Cu);
      }
    }
    *__error() = v3;
  }
  sub_10011ADE4(propertyList, v16);
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 216);
  uint64_t v9 = *(void *)(a1 + 56);
  CFDataRef v10 = v16[1];
  BytePtr = CFDataGetBytePtr(v16[0]);
  uint64_t v12 = *((void *)sub_100143B90() + 1);
  *(void *)buf = BytePtr;
  *(void *)long long v19 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&void v19[8] = v10;
  *(void *)&v19[16] = v8;
  CFDataRef v20 = v10;
  char v21 = 0;
  unsigned int v13 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v9 + 96))(v9, buf);
  if (*(void *)v19) {
    sub_100010A48(*(std::__shared_weak_count **)v19);
  }
  if ((v13 & 0x80000000) == 0)
  {
    *(void *)(*(void *)(a1 + 72) + 224) = v10;
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x40uLL);
  void *exception = &off_1001B6CA0;
  long long v15 = std::generic_category();
  exception[1] = v13;
  exception[2] = v15;
  *((unsigned char *)exception + 24) = 0;
  *((unsigned char *)exception + 48) = 0;
  exception[7] = "Can't write UDIF resource part";
}

void sub_10010F100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100010A14((const void **)va);
  _Unwind_Resume(a1);
}

void *sub_10010F190(void *a1, _DWORD *a2)
{
  if ((*a2 & 0x80000000) != 0)
  {
    unint64_t v4 = sub_100003DF0(a1, (uint64_t)"special: ", 9);
    if (*a2 == -1) {
      unint64_t v5 = "ddm";
    }
    else {
      unint64_t v5 = "entire_device";
    }
    if (*a2 == -1) {
      uint64_t v6 = 3;
    }
    else {
      uint64_t v6 = 13;
    }
    return sub_100003DF0(v4, (uint64_t)v5, v6);
  }
  else
  {
    sub_100003DF0(a1, (uint64_t)"partition_num: ", 15);
    return (void *)std::ostream::operator<<();
  }
}

void *sub_10010F230(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_100003DF0(a1, (uint64_t)"Blocks header", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  int v6 = *(_DWORD *)(a2 + 36);
  long long v58 = *(_OWORD *)(a2 + 40);
  uint64_t v59 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 152);
  long long v54 = *(_OWORD *)(a2 + 136);
  long long v55 = v8;
  long long v9 = *(_OWORD *)(a2 + 184);
  long long v56 = *(_OWORD *)(a2 + 168);
  long long v57 = v9;
  long long v10 = *(_OWORD *)(a2 + 88);
  long long v50 = *(_OWORD *)(a2 + 72);
  long long v51 = v10;
  long long v11 = *(_OWORD *)(a2 + 120);
  long long v52 = *(_OWORD *)(a2 + 104);
  long long v53 = v11;
  uint64_t v12 = sub_100003DF0(a1, (uint64_t)"signature", 9);
  unsigned int v13 = sub_100003DF0(v12, (uint64_t)": ", 2);
  v60[23] = 4;
  strcpy(v60, "mish");
  long long v14 = sub_100003DF0(v13, (uint64_t)v60, 4);
  if ((v60[23] & 0x80000000) != 0) {
    operator delete(*(void **)v60);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  long long v15 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v16 = sub_100003DF0(a1, (uint64_t)"version", 7);
  sub_100003DF0(v16, (uint64_t)": ", 2);
  long long v17 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  uint64_t v18 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v19 = sub_100003DF0(a1, (uint64_t)"first_sector_number", 19);
  sub_100003DF0(v19, (uint64_t)": ", 2);
  CFDataRef v20 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  char v21 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v22 = sub_100003DF0(a1, (uint64_t)"sector_count", 12);
  sub_100003DF0(v22, (uint64_t)": ", 2);
  long long v23 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  long long v24 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v25 = sub_100003DF0(a1, (uint64_t)"data_start", 10);
  unint64_t v26 = sub_100003DF0(v25, (uint64_t)": ", 2);
  uint64_t v27 = *v26;
  long long v28 = (char *)v26 + *(void *)(*v26 - 24);
  int v29 = *((_DWORD *)v28 + 2);
  *((_DWORD *)v28 + 2) = v29 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v26 + *(void *)(v27 - 24) + 8) |= 0x200u;
  v60[0] = 48;
  sub_100016CD0(v26, v60);
  std::ostream::operator<<();
  uint64_t v30 = *v26;
  *(_DWORD *)((char *)v26 + *(void *)(*v26 - 24) + 8) = v29;
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(v30 - 24)));
  long long v31 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v32 = sub_100003DF0(a1, (uint64_t)"decompression_buffer_req", 24);
  sub_100003DF0(v32, (uint64_t)": ", 2);
  long long v33 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  long long v34 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  LODWORD(v49.__locale_) = v6;
  long long v35 = sub_100003DF0(a1, (uint64_t)"descriptor", 10);
  std::unique_lock<std::mutex> v36 = sub_100003DF0(v35, (uint64_t)": ", 2);
  uint64_t v37 = sub_10010F190(v36, &v49);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
  long long v38 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)long long v60 = v58;
  *(void *)&v60[16] = v59;
  int v39 = sub_100003DF0(a1, (uint64_t)"reserved", 8);
  uint64_t v40 = sub_100003DF0(v39, (uint64_t)": ", 2);
  sub_1001188A0(v40, (uint64_t)v60, 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
  long long v41 = std::locale::use_facet(&v49, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale(&v49);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v60 = v7;
  long long v64 = v54;
  long long v65 = v55;
  long long v66 = v56;
  long long v67 = v57;
  *(_OWORD *)&v60[8] = v50;
  long long v61 = v51;
  long long v62 = v52;
  long long v63 = v53;
  long long v42 = sub_100003DF0(a1, (uint64_t)"checksum", 8);
  long long v43 = sub_100003DF0(v42, (uint64_t)": ", 2);
  sub_10010FBB0(v43, (int *)v60);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
  uint64_t v44 = std::locale::use_facet(&v49, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v49);
  std::ostream::put();
  std::ostream::flush();
  long long v45 = sub_100003DF0(a1, (uint64_t)"run_count", 9);
  sub_100003DF0(v45, (uint64_t)": ", 2);
  uint64_t v46 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
  uint64_t v47 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_10010FB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10010FBB0(void *a1, int *a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  unint64_t v5 = sub_100003DF0(a1, (uint64_t)"type: ", 6);
  int v16 = *a2;
  int v6 = sub_100028324(v5, &v16);
  uint64_t v7 = sub_100003DF0(v6, (uint64_t)" ", 1);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v15 = 48;
  long long v8 = sub_100016CD0(v7, &v15);
  uint64_t v9 = *v8;
  *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
  int v10 = *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8);
  sub_100003DF0(v8, (uint64_t)"len: ", 5);
  long long v11 = (void *)std::ostream::operator<<();
  uint64_t v12 = sub_100003DF0(v11, (uint64_t)" data: ", 7);
  *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v13 = a2[1];
  if (v13) {
    sub_1001188A0(v8, (uint64_t)(a2 + 2), v13);
  }
  else {
    sub_100003DF0(v8, (uint64_t)"(empty)", 7);
  }
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = v10;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v4;
  return a1;
}

void *sub_10010FD88()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C4FF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001C4FF8))
  {
    sub_100114EBC(v1, -2147483643);
    v1[1] = 0;
    sub_100114EBC(v2, -2147483641);
    v2[1] = 1;
    sub_100114EBC(v3, -2147483640);
    v3[1] = 2;
    sub_100114EBC(v4, -2147483642);
    v4[1] = 4;
    sub_100118A78((uint64_t)&unk_1001C4FE0, (unsigned int *)v1, 4);
    __cxa_atexit((void (*)(void *))sub_10010FED4, &unk_1001C4FE0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001C4FF8);
  }
  return &unk_1001C4FE0;
}

void sub_10010FEAC(_Unwind_Exception *a1)
{
}

uint64_t sub_10010FED4(uint64_t a1)
{
  return a1;
}

void *sub_10010FF00@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  sub_10010FD88();
  uint64_t v4 = qword_1001C4FE8;
  if (!qword_1001C4FE8) {
    goto LABEL_12;
  }
  unsigned int v5 = *a1;
  int v6 = &qword_1001C4FE8;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      int v6 = (uint64_t *)v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != &qword_1001C4FE8 && v5 >= *((_DWORD *)v6 + 7))
  {
    __n128 result = sub_10010FD88();
    *(_DWORD *)a2 = *((_DWORD *)v6 + 8);
    char v11 = 1;
  }
  else
  {
LABEL_12:
    __n128 result = sub_10010FD88();
    char v11 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 4) = v11;
  return result;
}

uint64_t **sub_10010FF98(uint64_t **result, uint64_t **a2, _DWORD *a3, uint64_t *a4, uint64_t *a5)
{
  if (HIBYTE(*a3) == 128)
  {
    uint64_t v9 = result;
    int v14 = *a3;
    ((void (*)(_DWORD **__return_ptr))(*result)[2])(v13);
    if (!BYTE4(v13[0]))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100003C58((uint64_t)v13);
      sub_100003DF0(v13, (uint64_t)"Unsupported compressed run (", 28);
      int v15 = *a3;
      sub_10002AA90(v13, &v15);
      sub_100003DF0(v13, (uint64_t)")", 1);
      sub_100010C3C((uint64_t)exception, (uint64_t)v13, 0x2Du);
    }
    v13[0] = a3;
    int v10 = sub_100118D28(a2, a3, (uint64_t)&unk_100164F68, v13)[5];
    if (v10)
    {
      v13[0] = a3;
      int v10 = sub_100118D28(a2, a3, (uint64_t)&unk_100164F68, v13)[5];
    }
    if (v10 > a4) {
      a4 = v10;
    }
    v13[0] = a3;
    __n128 result = sub_100118D28(a2, a3, (uint64_t)&unk_100164F68, v13);
    result[5] = a4;
    *((unsigned char *)v9 + 88) = 1;
    char v11 = v9[12];
    if (v11 <= a5) {
      char v11 = a5;
    }
    v9[12] = v11;
  }
  return result;
}

void sub_10011013C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100110170(uint64_t a1, void *a2)
{
  sub_100114EBC(&v11, 1);
  sub_10011021C(a1, &v11, 0);
  int v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  unsigned int v5 = v6;
  if (v6 != v4)
  {
    do
    {
      int v10 = *((_DWORD *)v5 + 8);
      sub_10011021C(a1, &v10, v5[5]);
      unsigned int v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unsigned int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          unsigned int v5 = v8;
        }
        while (!v9);
      }
      unsigned int v5 = v8;
    }
    while (v8 != v4);
  }
}

void sub_10011021C(uint64_t a1, int *a2, uint64_t a3)
{
  if (*a2 != 1)
  {
    int v13 = *a2;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(void *)a1 + 16))(&v14, a1, &v13);
    if (BYTE4(v14))
    {
      int v11 = v14;
      sub_10003C318((void *)(a1 + 56), &v11, a3);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    int v10 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"UDIF: compression algo is invalid", 0x16u);
  }
  sub_100114EBC((int *)&v15, 1);
  *(void *)&long long v12 = &v15;
  uint64_t v4 = sub_100054EE0((uint64_t **)(a1 + 104), (unsigned int *)&v15, (uint64_t)&unk_100164F68, (_DWORD **)&v12);
  int v6 = *(uint64_t **)(a1 + 56);
  unsigned int v5 = *(uint64_t **)(a1 + 64);
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = (std::__shared_weak_count *)v4[6];
  v4[5] = v6;
  v4[6] = v5;
  if (v7) {
    sub_100010A48(v7);
  }
}

void sub_100110390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100010A48(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001103A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v23 = 0;
  uint64_t v24 = 0;
  long long v22 = (uint64_t *)&v23;
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 56) + 72))(&v21);
  uint64_t v4 = *(unsigned int **)(a1 + 104);
  if (v4 != (unsigned int *)(a1 + 112))
  {
    while (1)
    {
      unsigned int v5 = (const void *)*((void *)v4 + 5);
      if (v5 == *(const void **)(a1 + 56)) {
        break;
      }
      if (v5)
      {
        if (v6)
        {
          unsigned int v7 = (std::__shared_weak_count *)*((void *)v4 + 6);
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v19 = (std::__shared_weak_count *)*((void *)&v21 + 1);
          if (*((void *)&v21 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(long long *__return_ptr))(*(void *)v6 + 176))(&v20);
          long long v25 = v4 + 8;
          BOOL v8 = sub_100054EE0(&v22, v4 + 8, (uint64_t)&unk_100164F68, &v25);
          long long v9 = v20;
          long long v20 = 0uLL;
          int v10 = (std::__shared_weak_count *)v8[6];
          *(_OWORD *)(v8 + 5) = v9;
          if (v10)
          {
            sub_100010A48(v10);
            if (*((void *)&v20 + 1)) {
              sub_100010A48(*((std::__shared_weak_count **)&v20 + 1));
            }
          }
          if (v19) {
            sub_100010A48(v19);
          }
LABEL_17:
          if (v7) {
            sub_100010A48(v7);
          }
        }
      }
      int v13 = (unsigned int *)*((void *)v4 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          int v13 = *(unsigned int **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (unsigned int *)*((void *)v4 + 2);
          BOOL v15 = *(void *)v14 == (void)v4;
          uint64_t v4 = v14;
        }
        while (!v15);
      }
      uint64_t v4 = v14;
      if (v14 == (unsigned int *)(a1 + 112)) {
        goto LABEL_25;
      }
    }
    *(void *)&long long v20 = v4 + 8;
    int v11 = sub_100054EE0(&v22, v4 + 8, (uint64_t)&unk_100164F68, (_DWORD **)&v20);
    long long v12 = v21;
    if (*((void *)&v21 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v7 = (std::__shared_weak_count *)v11[6];
    *(_OWORD *)(v11 + 5) = v12;
    goto LABEL_17;
  }
LABEL_25:
  int v16 = v23;
  *(void *)a2 = v22;
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = a2 + 8;
  uint64_t v18 = v24;
  *(void *)(a2 + 16) = v24;
  if (v18)
  {
    void v16[2] = v17;
    long long v22 = (uint64_t *)&v23;
    long long v23 = 0;
    uint64_t v24 = 0;
    int v16 = 0;
  }
  else
  {
    *(void *)a2 = v17;
  }
  *(_OWORD *)(a2 + 24) = v21;
  sub_10005358C((uint64_t)&v22, v16);
}

void sub_100110618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

uint64_t sub_100110678(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  if (v1 != (void *)(result + 16))
  {
    do
    {
      if (*((unsigned __int8 *)v1 + 59) == 128
        && (v1[5] - v1[4] + (unint64_t)(v1[6] & 1) + ((*((unsigned __int8 *)v1 + 48) >> 1) & 1) - 1) << 9 > 0x400000)
      {
        unsigned int v7 = v1;
        *(void *)&long long v9 = "udif::details::UDIF_base::validate_runs()";
        *((void *)&v9 + 1) = 39;
        int v10 = 16;
        sub_10011088C(v11, &v9);
        sub_100003DF0(v12, (uint64_t)"Run interval: ", 14);
        sub_1001057B0(v12, (uint64_t)(v7 + 4));
        sub_100003DF0(v12, (uint64_t)" of type ", 9);
        LODWORD(v8) = *((_DWORD *)v7 + 14);
        sub_10002AA90(v12, &v8);
        sub_100003DF0(v12, (uint64_t)" has size ", 10);
        std::ostream::operator<<();
        sub_100003DF0(v12, (uint64_t)"which is larger than allowed ", 29);
        std::ostream::operator<<();
        sub_100003DF0(v12, (uint64_t)" or exceeds size_t size ", 24);
        uint64_t v8 = -1;
        sub_10011085C((uint64_t)v11);
        sub_1001109B0((uint64_t)v11);
        exception = __cxa_allocate_exception(0x40uLL);
        int v6 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"UDIF: compressed runs should be <= 1MB", 0x16u);
      }
      uint64_t v2 = (void *)v1[1];
      if (v2)
      {
        do
        {
          int v3 = v2;
          uint64_t v2 = (void *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          int v3 = (void *)v1[2];
          BOOL v4 = *v3 == (void)v1;
          uint64_t v1 = v3;
        }
        while (!v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != (void *)(result + 16));
  }
  return result;
}

void sub_100110840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1001109B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10011085C(uint64_t a1)
{
  return a1;
}

void *sub_10011088C(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100118DEC((uint64_t)a1, a2);
  *a1 = off_1001B08F0;
  a1[45] = &off_1001B09F0;
  a1[46] = &off_1001B0A18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B08F0;
  a1[45] = off_1001B0978;
  a1[46] = off_1001B09A0;
  return a1;
}

void sub_10011098C(_Unwind_Exception *a1)
{
  sub_1001151F0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001109B0(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1001109F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = (uint64_t **)(a1 + 32);
  if (a1 + 40 != sub_100118E7C(a1 + 32, a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v10 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Invalid UDIF format, contains intersected blocks", 0x16u);
  }
  int v6 = *((_DWORD *)a3 + 2);
  long long v19 = *(_OWORD *)((char *)a3 + 76);
  long long v20 = *(_OWORD *)((char *)a3 + 92);
  long long v21 = *(_OWORD *)((char *)a3 + 108);
  long long v22 = *(_OWORD *)((char *)a3 + 124);
  long long v15 = *(_OWORD *)((char *)a3 + 12);
  long long v16 = *(_OWORD *)((char *)a3 + 28);
  long long v17 = *(_OWORD *)((char *)a3 + 44);
  long long v18 = *(_OWORD *)((char *)a3 + 60);
  uint64_t v7 = *a3;
  uint64_t v12 = *(void *)(a2 + 16);
  long long v11 = *(_OWORD *)a2;
  uint64_t v13 = v7;
  int v14 = v6;
  char v23 = 1;
  return sub_100118F00(v5, (uint64_t)&v11);
}

void sub_100110B1C(int a1, CFArrayRef theArray)
{
}

void sub_100111100(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29)
{
}

void *sub_1001111C8(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10011967C((uint64_t)a1, a2);
  *a1 = off_1001B0B10;
  a1[45] = &off_1001B0C10;
  a1[46] = &off_1001B0C38;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B0B10;
  a1[45] = off_1001B0B98;
  a1[46] = off_1001B0BC0;
  return a1;
}

void sub_1001112C8(_Unwind_Exception *a1)
{
  sub_100115964(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001112EC(uint64_t a1)
{
  return a1;
}

void *sub_100111334(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100119F04((uint64_t)a1, a2);
  *a1 = off_1001B0D30;
  a1[45] = &off_1001B0E30;
  a1[46] = &off_1001B0E58;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B0D30;
  a1[45] = off_1001B0DB8;
  a1[46] = off_1001B0DE0;
  return a1;
}

void sub_100111434(_Unwind_Exception *a1)
{
  sub_1001160D8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100111458(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10011149C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C5018, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001C5018))
  {
    sub_100114EBC(&v1, 0);
    long long v2 = xmmword_10016CAE0;
    char v3 = 2;
    int v4 = v1;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_100119F94((uint64_t)&qword_1001C5000, (unint64_t *)&v2, 1);
    __cxa_atexit((void (*)(void *))sub_1001115A8, &qword_1001C5000, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001C5018);
  }
  return &qword_1001C5000;
}

void sub_10011158C(_Unwind_Exception *a1)
{
}

uint64_t sub_1001115A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001115D4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  v6[0] = a2 / a4;
  v6[1] = (a3 + a2) / a4;
  char v7 = 2;
  uint64_t result = sub_1000C6B64(a1 + 8, (uint64_t)v6);
  if (a1 + 16 == result)
  {
    sub_10011149C();
    return qword_1001C5000;
  }
  return result;
}

void sub_100111638(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a3;
  uint64_t v8 = sub_1001115D4(a1, a2, a3, 0x200uLL);
  if (v5)
  {
    long long v9 = (void *)v8;
    uint64_t v10 = a1 + 16;
    unint64_t v11 = a2;
    while (v9 != (void *)v10)
    {
      uint64_t v12 = v9[4];
      unint64_t v13 = v12 << 9;
      if (v11 < v12 << 9) {
        goto LABEL_11;
      }
      uint64_t v14 = (v9[5] - v12) << 9;
      if (v14 - (v11 - v13) >= v5) {
        unint64_t v15 = v5;
      }
      else {
        unint64_t v15 = v14 - (v11 - v13);
      }
      unsigned int v16 = *((_DWORD *)v9 + 14);
      unsigned int v29 = v16;
      if (HIBYTE(v16) == 128)
      {
        long long v30 = *((_OWORD *)v9 + 4);
        *(void *)&long long v31 = v13;
        *((void *)&v31 + 1) = v14;
        *(void *)&long long v32 = v11 - a2;
        *((void *)&v32 + 1) = v11 - v13;
      }
      else
      {
        *(void *)&long long v30 = v9[8] + v11 - v13;
        *((void *)&v30 + 1) = v15;
        *(void *)&long long v31 = v11;
        *((void *)&v31 + 1) = v15;
        long long v32 = v11 - a2;
      }
      unint64_t v33 = v15;
      uint64_t v22 = a4[1];
      uint64_t v23 = *a4 + (v22 << 6);
      if (v22 == a4[2])
      {
        sub_10011A250(a4, v23, 1, (uint64_t)&v29, &v34);
      }
      else
      {
        *(_DWORD *)uint64_t v23 = v16;
        long long v24 = v30;
        long long v25 = v31;
        long long v26 = v32;
        *(void *)(v23 + 56) = v33;
        *(_OWORD *)(v23 + 40) = v26;
        *(_OWORD *)(v23 + 24) = v25;
        *(_OWORD *)(v23 + 8) = v24;
        ++a4[1];
      }
      uint64_t v27 = (void *)v9[1];
      if (v27)
      {
        do
        {
          long long v9 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          long long v28 = v9;
          long long v9 = (void *)v9[2];
        }
        while ((void *)*v9 != v28);
      }
LABEL_23:
      v11 += v15;
      v5 -= v15;
      if (!v5) {
        return;
      }
    }
    unint64_t v13 = v11 + v5;
LABEL_11:
    if (v13 - v11 >= v5) {
      unint64_t v15 = v5;
    }
    else {
      unint64_t v15 = v13 - v11;
    }
    sub_100114EBC((int *)&v29, 0);
    long long v30 = 0uLL;
    *(void *)&long long v31 = v11;
    *((void *)&v31 + 1) = v15;
    long long v32 = v11 - a2;
    unint64_t v33 = v15;
    uint64_t v17 = a4[1];
    uint64_t v18 = *a4 + (v17 << 6);
    if (v17 == a4[2])
    {
      sub_10011A250(a4, v18, 1, (uint64_t)&v29, &v34);
    }
    else
    {
      *(_DWORD *)uint64_t v18 = v29;
      long long v19 = v30;
      long long v20 = v31;
      long long v21 = v32;
      *(void *)(v18 + 56) = v33;
      *(_OWORD *)(v18 + 40) = v21;
      *(_OWORD *)(v18 + 24) = v20;
      *(_OWORD *)(v18 + 8) = v19;
      ++a4[1];
    }
    goto LABEL_23;
  }
}

uint64_t sub_100111848(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = sub_1000C6B64(a1 + 8, a2);
  sub_1000C6838(v3, a2);
  return v4;
}

uint64_t sub_100111894(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1001118A4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  sub_10010E96C((uint64_t)v16, a3);
  if (sub_100051E64(a4, v16))
  {
    *(void *)&long long v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((void *)&v14 + 1) = 60;
    int v15 = 0;
    sub_100111A94(v16, &v14);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    sub_100003DF0(v17, v8, v9);
    sub_100003DF0(v17, (uint64_t)" - same ", 8);
    sub_10011A514((uint64_t)v17, a3);
    std::ostream::~ostream();
    sub_10011684C((uint64_t)v16);
  }
  else
  {
    *(void *)&long long v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((void *)&v14 + 1) = 60;
    int v15 = 0;
    sub_100111BFC(v16, &v14);
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    sub_100003DF0(v17, v11, v12);
    sub_100003DF0(v17, (uint64_t)" - different calculated: <", 26);
    sub_10011A514((uint64_t)v17, a3);
    sub_100003DF0(v17, (uint64_t)"> real: <", 9);
    sub_10010FBB0(v17, a4);
    sub_100003DF0(v17, (uint64_t)">", 1);
    std::ostream::~ostream();
    sub_100116FC0((uint64_t)v16);
  }
  return std::ios::~ios();
}

void sub_100111A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100111BB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100111A94(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10011A484((uint64_t)a1, a2);
  *a1 = off_1001B0F50;
  a1[45] = &off_1001B1050;
  a1[46] = &off_1001B1078;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B0F50;
  a1[45] = off_1001B0FD8;
  a1[46] = off_1001B1000;
  return a1;
}

void sub_100111B94(_Unwind_Exception *a1)
{
  sub_10011684C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100111BB8(uint64_t a1)
{
  return a1;
}

void *sub_100111BFC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10011A634((uint64_t)a1, a2);
  *a1 = off_1001B1170;
  a1[45] = &off_1001B1270;
  a1[46] = &off_1001B1298;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B1170;
  a1[45] = off_1001B11F8;
  a1[46] = off_1001B1220;
  return a1;
}

void sub_100111CFC(_Unwind_Exception *a1)
{
  sub_100116FC0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100111D20(uint64_t a1)
{
  return a1;
}

void sub_100111D64(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_1001B05C8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2[1];
  uint64_t v3 = a2[2];
  *(void *)(a1 + 64) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  sub_10010FD88();
  sub_10011149C();
  *(unsigned char *)(a1 + 89) = *(void *)(*(void *)(a1 + 72) + 216) >= *(void *)(*(void *)(a1 + 72) + 32)
                                                                   + *(void *)(*(void *)(a1 + 72) + 24);
  sub_1001120E4();
}

void sub_100112058(_Unwind_Exception *a1)
{
  sub_1000109B8(v7 - 168);
  sub_10005358C(v4, *(void **)(v1 + 112));
  uint64_t v9 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (v9) {
    operator delete();
  }
  int v10 = *(std::__shared_weak_count **)(v1 + 64);
  if (v10) {
    sub_100010A48(v10);
  }
  sub_10002A594(v3, *v6);
  sub_10002A594(v2, *v5);
  _Unwind_Resume(a1);
}

void sub_1001120E4()
{
}

void sub_10011225C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_100010978((uint64_t)va);
  sub_100010978((uint64_t)va1);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 32);
  if (v4) {
    sub_100010A48(v4);
  }
  sub_100010A14((const void **)(v2 - 24));
  _Unwind_Resume(a1);
}

void *sub_1001122AC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10011A6C4((uint64_t)a1, a2);
  *a1 = off_1001B1390;
  a1[45] = &off_1001B1490;
  a1[46] = &off_1001B14B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B1390;
  a1[45] = off_1001B1418;
  a1[46] = off_1001B1440;
  return a1;
}

void sub_1001123AC(_Unwind_Exception *a1)
{
  sub_100117734(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001123D0(uint64_t a1)
{
  return a1;
}

void sub_100112414()
{
}

void sub_1001125E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  sub_100010A14(&a10);
  _Unwind_Resume(a1);
}

void sub_10011261C()
{
}

void sub_100112900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100010A14((const void **)va);
  if (v5) {
    operator delete[]();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10011295C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (void *)(a1 + 16);
  *(void *)(a1 + 32) = 0xFFFFFFFE00000000;
  uint64_t v5 = (_DWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a1 + 40;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  sub_10011861C((_DWORD *)(a1 + 64));
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  int v7 = *(_DWORD *)a2;
  LODWORD(v25) = 1752394093;
  sub_100090DEC((uint64_t)"blocks_signature", v7, &v25, 1);
  *(_DWORD *)a1 = 1752394093;
  int v8 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v25) = 1;
  sub_100090DEC((uint64_t)"version", v8, &v25, 1);
  *(_DWORD *)(a1 + 4) = 1;
  *(void *)(a1 + 8) = bswap64(*(void *)(a2 + 8));
  *uint64_t v4 = bswap64(*(void *)(a2 + 16));
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *uint64_t v5 = bswap32(*(_DWORD *)(a2 + 32));
  LODWORD(v25) = *(_DWORD *)(a2 + 36);
  sub_10010EA44((unsigned int *)&v25, (unsigned int *)v24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)v24;
  long long v9 = *(_OWORD *)(a2 + 40);
  *(void *)(v6 + 16) = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t v6 = v9;
  sub_10011861C(v24);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)&v24[96] = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v24[112] = v10;
  *(void *)&v24[128] = *(void *)(a2 + 192);
  long long v11 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v24[32] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v24[48] = v11;
  long long v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v24[64] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v24[80] = v12;
  long long v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)long long v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v24[16] = v13;
  long long v30 = *(_OWORD *)&v24[72];
  long long v31 = *(_OWORD *)&v24[88];
  long long v32 = *(_OWORD *)&v24[104];
  long long v33 = *(_OWORD *)&v24[120];
  long long v26 = *(_OWORD *)&v24[8];
  long long v27 = *(_OWORD *)&v24[24];
  long long v28 = *(_OWORD *)&v24[40];
  long long v29 = *(_OWORD *)&v24[56];
  uint64_t v25 = *(void *)v24;
  sub_10010E7C4((uint64_t)&v25, (int *)&v15);
  *(void *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 152) = v21;
  *(_OWORD *)(a1 + 168) = v22;
  *(_OWORD *)(a1 + 184) = v23;
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 120) = v19;
  *(_DWORD *)(a1 + 200) = bswap32(*(_DWORD *)(a2 + 200));
  return a1;
}

void sub_100112BCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003744(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100112BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10011A898((_DWORD *)a1);
  v4[9] = 0;
  *(_OWORD *)(v4 + 5) = 0u;
  *(_OWORD *)(v4 + 1) = 0u;
  sub_100114EBC(&v6, bswap32(*(_DWORD *)a2));
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = bswap32(*(_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = bswap64(*(void *)(a2 + 8));
  *(void *)(a1 + 16) = bswap64(*(void *)(a2 + 16));
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *(void *)(a1 + 32) = bswap64(*(void *)(a2 + 32));
  return a1;
}

const void **sub_100112C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X4>, CFDictionaryRef *a5@<X8>)
{
  if (*(char *)(a1 + 23) >= 0) {
    long long v9 = (const char *)a1;
  }
  else {
    long long v9 = *(const char **)a1;
  }
  CFTypeRef cf = 0;
  CFStringRef v21 = CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v10 = (const char *)a2;
    }
    else {
      long long v10 = *(const char **)a2;
    }
    CFTypeRef cf = CFStringCreateWithCString(kCFAllocatorDefault, v10, 0x8000100u);
  }
  else
  {
    CFTypeRef cf = &stru_1001B7B48;
  }
  keys[0] = 0;
  sub_10002A560((const void **)keys);
  std::to_string(&v19, a3);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v11 = &v19;
  }
  else {
    long long v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  CFStringRef v18 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v11, 0x600u);
  sub_10002A7B8((uint64_t)keys);
  sub_100003DF0(&v24, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v24 + *(void *)(v24 - 24) + 8) = *(_DWORD *)((unsigned char *)&v24 + *(void *)(v24 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(values[0]) = 48;
  sub_100016CD0(&v24, (char *)values);
  *(void *)&v26[*(void *)(v24 - 24)] = 4;
  std::ostream::operator<<();
  sub_100118480((uint64_t)&v24 + 8, &v17);
  *(void **)((char *)keys
  *(void *)&long long v24 = v12;
  if (v28 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v13 = &v17;
  }
  else {
    long long v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  CFStringRef v16 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v13, 0x600u);
  *(_OWORD *)keys = *(_OWORD *)off_1001B05E0;
  long long v24 = *(_OWORD *)off_1001B05F0;
  CFStringRef v25 = @"CFName";
  values[0] = a4;
  values[1] = (void *)v21;
  values[2] = (void *)v18;
  values[3] = (void *)v16;
  if (*(unsigned char *)(a2 + 24)) {
    CFIndex v14 = 5;
  }
  else {
    CFIndex v14 = 4;
  }
  values[4] = (void *)cf;
  *a5 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, v14, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_10002A560((const void **)&v16);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  sub_10002A560((const void **)&v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  sub_10002A560(&cf);
  return sub_10002A560((const void **)&v21);
}

void sub_100113028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,const void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31)
{
}

uint64_t sub_1001130C0(uint64_t a1)
{
  *(void *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void *sub_1001131F8(void *a1, int *a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  uint64_t v5 = sub_100003DF0(a1, (uint64_t)"type: ", 6);
  int v26 = *a2;
  int v6 = sub_10002AA90(v5, &v26);
  int v7 = sub_100003DF0(v6, (uint64_t)" data: ", 7);
  uint64_t v8 = *v7;
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) |= 0x200u;
  long long v9 = (void *)std::ostream::operator<<();
  long long v10 = sub_100003DF0(v9, (uint64_t)"/", 1);
  uint64_t v11 = *v10;
  *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v10 + *(void *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) &= ~0x200u;
  uint64_t v12 = (void *)std::ostream::operator<<();
  long long v13 = sub_100003DF0(v12, (uint64_t)" logical: ", 10);
  uint64_t v14 = *v13;
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) |= 0x200u;
  uint64_t v15 = (void *)std::ostream::operator<<();
  CFStringRef v16 = sub_100003DF0(v15, (uint64_t)"/", 1);
  uint64_t v17 = *v16;
  *(_DWORD *)((char *)v16 + *(void *)(*v16 - 24) + 8) = *(_DWORD *)((unsigned char *)v16 + *(void *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v16 + *(void *)(v17 - 24) + 8) &= ~0x200u;
  CFStringRef v18 = (void *)std::ostream::operator<<();
  std::string v19 = sub_100003DF0(v18, (uint64_t)" io: ", 5);
  uint64_t v20 = *v19;
  *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v19 + *(void *)(v20 - 24) + 8) |= 0x200u;
  CFStringRef v21 = (void *)std::ostream::operator<<();
  long long v22 = sub_100003DF0(v21, (uint64_t)",", 1);
  uint64_t v23 = *v22;
  *(_DWORD *)((char *)v22 + *(void *)(*v22 - 24) + 8) = *(_DWORD *)((unsigned char *)v22 + *(void *)(*v22 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v22 + *(void *)(v23 - 24) + 8) &= ~0x200u;
  long long v24 = (void *)std::ostream::operator<<();
  sub_100003DF0(v24, (uint64_t)"/", 1);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v4;
  return a1;
}

uint64_t sub_1001135A8(void *a1)
{
  uint64_t result = sub_10011AB10(*(const __CFString **)(*a1 + 8 * a1[4]));
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v3);
    sub_100003DF0(v3, (uint64_t)"UDIF: Failed converting type array string (", 43);
    std::ostream::operator<<();
    sub_100003DF0(v3, (uint64_t)") to type", 9);
    sub_100010C3C((uint64_t)exception, (uint64_t)v3, 0x16u);
  }
  return result;
}

void sub_100113674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *sub_1001136A8(uint64_t a1)
{
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), *(const void **)(*(void *)a1 + 8 * *(void *)(a1 + 32)));
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v3 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"UDIF: Can't get resource array", 0x16u);
  }
  return result;
}

BOOL sub_10011370C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if ((*(unsigned char *)(a1 + 24) != 0) == (v3 != 0)) {
      return *(void *)(a1 + 32) == *(void *)(a2 + 32);
    }
    return 0;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

void sub_100113778(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = *a2;
  uint64_t v2 = a2[1];
  a1[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  operator new[]();
}

void sub_100113A08(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100113BC4((uint64_t)va);
  operator delete[]();
}

void *sub_100113AA0(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10011A940((uint64_t)a1, a2);
  *a1 = off_1001B15B0;
  a1[45] = &off_1001B16B0;
  a1[46] = &off_1001B16D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B15B0;
  a1[45] = off_1001B1638;
  a1[46] = off_1001B1660;
  return a1;
}

void sub_100113BA0(_Unwind_Exception *a1)
{
  sub_100117F9C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100113BC4(uint64_t a1)
{
  return a1;
}

void *sub_100113C0C(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *uint64_t result = v3;
  result[1] = v5;
  result[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100113C38(uint64_t a1)
{
  sub_1000562CC(a1);

  operator delete();
}

uint64_t sub_100113C70(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100113F00(v1);

  return std::ios::~ios();
}

uint64_t sub_100113CBC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100113F00(v1);

  return std::ios::~ios();
}

void sub_100113D1C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100113F00(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100113D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100113DBC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100113E24(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100113F00(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100113E88(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100113F00(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100113F00(uint64_t a1)
{
  *(void *)a1 = off_1001B07C8;
  sub_10011403C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10011403C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1001141FC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100114198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001141C4(uint64_t a1)
{
  sub_100113F00(a1);

  operator delete();
}

int *sub_1001141FC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 85;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 85;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

int *sub_1001143E4(int *a1, int a2)
{
  *a1 = a2;
  v4[0] = xmmword_10016CAF0;
  v4[1] = xmmword_10016CB00;
  uint64_t v5 = 0x900000008;
  int v6 = 10;
  sub_100090DEC((uint64_t)"checksum_type", a2, v4, 11);
  return a1;
}

void sub_100114480(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_1001144B8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1001144C0@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10002A7B8((uint64_t)v12);
  size_t v4 = strlen(*(const char **)(a1 + 8));
  sub_100003DF0(v13, *(void *)(a1 + 8), v4);
  sub_100003DF0(v13, (uint64_t)" - ", 3);
  uint64_t v5 = *(const char **)(a1 + 16);
  size_t v6 = strlen(v5);
  sub_100003DF0(v13, (uint64_t)v5, v6);
  sub_100114740(v15, v12);
  *(void *)((char *)v12
  long long v10 = v8;
  v13[0] = v8;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  sub_100118480((uint64_t)v16, a2);
  v15[0] = v7;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v15 + (void)*(v7 - 3)) = v9;
  void v15[2] = v10;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void (__cdecl ***sub_100114740(void (__cdecl ***a1)(std::basic_stringstream<char> *__hidden this), void *a2))(std::basic_stringstream<char> *__hidden this)
{
  *a1 = v4;
  *(void *)((char *)*(v4 - 3) + (void)a1) = v3;
  a1[1] = (void (__cdecl **)(std::basic_stringstream<char> *__hidden))a2[1];
  a2[1] = 0;
  uint64_t v5 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  size_t v6 = (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24));
  std::ios_base::move(v5, v6);
  v5[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = 0;
  v5[1].__fmtflags_ = v6[1].__fmtflags_;
  a1[2] = v8;
  *(void *)((char *)*(v8 - 3) + (void)(a1 + 2)) = v7;
  *a1 = v9;
  *(void *)((char *)*(*a1 - 3) + (void)a1 + 40) = std::stringbuf::basic_stringbuf();
  return a1;
}

void sub_100114A08(_Unwind_Exception *a1)
{
}

uint64_t sub_100114A30@<X0>(uint64_t a1@<X8>)
{
  return sub_100114A48(a1);
}

uint64_t sub_100114A3C@<X0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100114AF0(a2, (uint64_t)a1, a1);
}

uint64_t sub_100114A48(uint64_t a1)
{
  sub_1001143E4((int *)&v3, 0);
  *(void *)a1 = v3;
  int v4 = 0;
  sub_10010E88C(v5, &v4);
  *(_DWORD *)(a1 + 4) = v5[0];
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

uint64_t sub_100114AF0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_1001143E4(&v6, 2);
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(a3) = *a3;
  int v7 = 32;
  sub_10010E88C(&v8, &v7);
  *(_DWORD *)long long v9 = a3;
  memset(&v9[4], 0, 124);
  *(_DWORD *)(a1 + 4) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v9[64];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v9[80];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v9[96];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v9[112];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v9[16];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v9[32];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v9[48];
  return a1;
}

unsigned int *sub_100114BE8(unsigned int *result, unsigned int a2)
{
  *uint64_t result = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "descriptor_special";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_1001B08B8;
    *((_DWORD *)exception + 8) = a2;
  }
  return result;
}

void sub_100114C7C(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

void sub_100114CB4(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = (char *)sub_100131BC4(a1);
  sub_100003BA4(v14, v3);
  sub_10002A7B8((uint64_t)v10);
  if ((v15 & 0x80u) == 0) {
    int v4 = v14;
  }
  else {
    int v4 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  int v6 = sub_100003DF0(&v11, (uint64_t)v4, v5);
  int v7 = sub_100003DF0(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  int v8 = (void *)std::ostream::operator<<();
  sub_100003DF0(v8, (uint64_t)"]", 1);
  sub_100003890((uint64_t)v12, a2);
  *(void *)((char *)v10
  uint64_t v11 = v9;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
}

int *sub_100114EBC(int *a1, int a2)
{
  *a1 = a2;
  v4[0] = xmmword_10016CB10;
  v4[1] = xmmword_10016CB20;
  _OWORD v4[2] = xmmword_10016CB30;
  unint64_t v5 = 0x8000000880000007;
  int v6 = -1;
  sub_100090DEC((uint64_t)"run_type", a2, v4, 15);
  return a1;
}

uint64_t sub_100114F60(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001151F0(v1);

  return std::ios::~ios();
}

uint64_t sub_100114FAC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001151F0(v1);

  return std::ios::~ios();
}

void sub_10011500C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001151F0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100115074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001150AC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100115114(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001151F0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100115178(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001151F0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001151F0(uint64_t a1)
{
  *(void *)a1 = off_1001B0A88;
  sub_10011532C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10011532C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1001154EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100115488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001154B4(uint64_t a1)
{
  sub_1001151F0(a1);

  operator delete();
}

int *sub_1001154EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 417;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 417;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1001156D4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100115964(v1);

  return std::ios::~ios();
}

uint64_t sub_100115720(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100115964(v1);

  return std::ios::~ios();
}

void sub_100115780(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100115964(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001157E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100115820(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100115888(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100115964(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1001158EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100115964(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100115964(uint64_t a1)
{
  *(void *)a1 = off_1001B0CA8;
  sub_100115AA0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100115AA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100115C60((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100115BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100115C28(uint64_t a1)
{
  sub_100115964(a1);

  operator delete();
}

int *sub_100115C60(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 458;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 458;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100115E48(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001160D8(v1);

  return std::ios::~ios();
}

uint64_t sub_100115E94(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001160D8(v1);

  return std::ios::~ios();
}

void sub_100115EF4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001160D8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100115F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100115F94(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100115FFC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001160D8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100116060(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001160D8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001160D8(uint64_t a1)
{
  *(void *)a1 = off_1001B0EC8;
  sub_100116214(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100116214(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1001163D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100116370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011639C(uint64_t a1)
{
  sub_1001160D8(a1);

  operator delete();
}

int *sub_1001163D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 500;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 500;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1001165BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011684C(v1);

  return std::ios::~ios();
}

uint64_t sub_100116608(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011684C(v1);

  return std::ios::~ios();
}

void sub_100116668(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10011684C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001166D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100116708(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100116770(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011684C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1001167D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011684C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10011684C(uint64_t a1)
{
  *(void *)a1 = off_1001B10E8;
  sub_100116988(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100116988(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100116B48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100116AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100116B10(uint64_t a1)
{
  sub_10011684C(a1);

  operator delete();
}

int *sub_100116B48(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 601;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 601;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100116D30(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100116FC0(v1);

  return std::ios::~ios();
}

uint64_t sub_100116D7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100116FC0(v1);

  return std::ios::~ios();
}

void sub_100116DDC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100116FC0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100116E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100116E7C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100116EE4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100116FC0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100116F48(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100116FC0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100116FC0(uint64_t a1)
{
  *(void *)a1 = off_1001B1308;
  sub_1001170FC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1001170FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1001172BC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100117258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100117284(uint64_t a1)
{
  sub_100116FC0(a1);

  operator delete();
}

int *sub_1001172BC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 603;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 603;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1001174A4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100117734(v1);

  return std::ios::~ios();
}

uint64_t sub_1001174F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100117734(v1);

  return std::ios::~ios();
}

void sub_100117550(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100117734(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001175B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001175F0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100117658(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100117734(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1001176BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100117734(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100117734(uint64_t a1)
{
  *(void *)a1 = off_1001B1528;
  sub_100117870(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100117870(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100117A30((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001179CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001179F8(uint64_t a1)
{
  sub_100117734(a1);

  operator delete();
}

int *sub_100117A30(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 638;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 638;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100117C18(uint64_t a1, void *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v7 = *a3;
  *(void *)(a1 + 16) = *a3;
  if (v7) {
    CFRetain(v7);
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = a4;
  return a1;
}

void sub_100117C78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_100010A48(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100117C90(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(result + 40) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    *(void *)(result + 56) = 0;
    *(void *)(result + 56) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(result + 64) = 1;
  }
  *(void *)(result + 72) = *(void *)(a3 + 32);
  return result;
}

uint64_t sub_100117D0C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100117F9C(v1);

  return std::ios::~ios();
}

uint64_t sub_100117D58(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100117F9C(v1);

  return std::ios::~ios();
}

void sub_100117DB8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100117F9C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100117E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100117E58(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100117EC0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100117F9C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100117F24(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100117F9C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100117F9C(uint64_t a1)
{
  *(void *)a1 = off_1001B1748;
  sub_1001180D8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1001180D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100118298((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100118234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100118260(uint64_t a1)
{
  sub_100117F9C(a1);

  operator delete();
}

int *sub_100118298(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 898;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 898;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100118480(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = sub_100003930(a1);
  if (v5)
  {
    char v6 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      char v6 = (void *)*v6;
    }
    std::string::size_type v7 = v4 - (void)v6;
  }
  else
  {
    std::string::size_type v7 = 0;
  }
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
  a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  std::string::resize(a2, v7 + v5, 0);
  std::string::erase(a2, 0, v7);
  sub_100003A90(a1);
}

void sub_100118510(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_10011852C(_DWORD *result, int a2)
{
  uint64_t v2 = 0;
  *uint64_t result = a2;
  uint64_t v5 = 0x200000001;
  int v6 = 4;
  do
  {
    a2 &= ~*(_DWORD *)((char *)&v5 + v2);
    v2 += 4;
  }
  while (v2 != 12);
  if (a2)
  {
    int v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "header_flags";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100199548;
    *((_DWORD *)exception + 8) = v3;
  }
  return result;
}

_DWORD *sub_10011861C(_DWORD *a1)
{
  *a1 = 0;
  v3[0] = xmmword_10016CAF0;
  v3[1] = xmmword_10016CB00;
  uint64_t v4 = 0x900000008;
  int v5 = 10;
  sub_100090DEC((uint64_t)"checksum_type", 0, v3, 11);
  return a1;
}

uint64_t sub_1001186B8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B07C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100118734(_Unwind_Exception *a1)
{
}

void *sub_100118748(void *a1, int *a2)
{
  int v3 = *a2;
  if (*a2)
  {
    for (uint64_t i = 0; i != 18; i += 6)
    {
      int v5 = dword_1001B17B8[i];
      if ((v5 & v3) != 0)
      {
        v3 &= ~v5;
        sub_100003DF0(a1, *(void *)&dword_1001B17B8[i + 2], *(void *)&dword_1001B17B8[i + 4]);
        if (v3)
        {
          char v7 = 44;
          sub_100003DF0(a1, (uint64_t)&v7, 1);
        }
      }
    }
    return a1;
  }
  else
  {
    return sub_100003DF0(a1, (uint64_t)"none", 4);
  }
}

void *sub_100118818(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_1001B1800[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      int v3 = "no_match";
      uint64_t v4 = 8;
      return sub_100003DF0(a1, (uint64_t)v3, v4);
    }
  }
  int v5 = &dword_1001B1800[v2];
  int v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_100003DF0(a1, (uint64_t)v3, v4);
}

void *sub_10011885C(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_1001B1830[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      int v3 = "no_match";
      uint64_t v4 = 8;
      return sub_100003DF0(a1, (uint64_t)v3, v4);
    }
  }
  int v5 = &dword_1001B1830[v2];
  int v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_100003DF0(a1, (uint64_t)v3, v4);
}

uint64_t *sub_1001188A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  int v5 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  if (a3 != 1)
  {
    uint64_t v7 = a3 - 1;
    do
    {
      *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
      char v13 = 48;
      int v8 = sub_100016CD0(a1, &v13);
      *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
      ++a2;
      uint64_t v9 = (void *)std::ostream::operator<<();
      sub_100003DF0(v9, (uint64_t)" ", 1);
      --v7;
    }
    while (v7);
    uint64_t v4 = *a1;
  }
  *(_DWORD *)((char *)a1 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v12 = 48;
  long long v10 = sub_100016CD0(a1, &v12);
  *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 2;
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v5;
  return a1;
}

void *sub_100118A34(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_1001B1860[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 18)
    {
      int v3 = "no_match";
      uint64_t v4 = 8;
      return sub_100003DF0(a1, (uint64_t)v3, v4);
    }
  }
  int v5 = &dword_1001B1860[v2];
  int v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_100003DF0(a1, (uint64_t)v3, v4);
}

uint64_t sub_100118A78(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_100118AF8((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_100118AE0(_Unwind_Exception *a1)
{
  sub_10002A594(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100118AF8(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v6 = sub_100118B80(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_10002B3B8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_100118B80(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **sub_100118D28(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_10002B3B8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100118DEC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B0A88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100118E68(_Unwind_Exception *a1)
{
}

uint64_t sub_100118E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = (*(unsigned char *)(a2 + 16) & 2) != 0 ? *(void *)a2 : *(void *)a2 + 1;
  uint64_t v6 = v2;
  do
  {
    unint64_t v7 = (*(unsigned char *)(v3 + 48) & 1) + *(void *)(v3 + 40) - 1;
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v3;
    }
    else {
      uint64_t v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 == v2) {
    return v2;
  }
  unint64_t v10 = *(void *)(v6 + 32);
  if ((*(unsigned char *)(v6 + 48) & 2) == 0) {
    ++v10;
  }
  if ((unint64_t)(*(unsigned char *)(a2 + 16) & 1) + *(void *)(a2 + 8) - 1 < v10) {
    return v2;
  }
  return v6;
}

uint64_t *sub_100118F00(uint64_t **a1, uint64_t a2)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((void *)&v14 + 1) < (unint64_t)v14) {
        return (uint64_t *)(a1 + 1);
      }
    }
    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return (uint64_t *)(a1 + 1);
    }
  }
  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return (uint64_t *)(a1 + 1);
  }
  unint64_t v5 = (uint64_t *)(a2 + 24);
  if (sub_100119020(a2 + 24)) {
    return (uint64_t *)(a1 + 1);
  }
  uint64_t result = sub_1001194BC(a1, a2, a2);
  if ((v7 & 1) == 0)
  {
    BOOL v8 = (uint64_t *)sub_1000C6B64((uint64_t)a1, (uint64_t)&v14);
    uint64_t v9 = (uint64_t **)sub_1000C6838((uint64_t)a1, (uint64_t)&v14);
    unint64_t v10 = *v9;
    if (*v9)
    {
      do
      {
        uint64_t v11 = v10;
        unint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = v9[2];
        BOOL v12 = *v11 == (void)v9;
        uint64_t v9 = (uint64_t **)v11;
      }
      while (v12);
    }
    char v13 = v11;
    uint64_t v16 = v8;
    sub_1001190E4(a1, &v14, v5, &v16, &v13);
    return v16;
  }
  return result;
}

BOOL sub_100119020(uint64_t a1)
{
  LOBYTE(v2) = 0;
  char v12 = 0;
  if (byte_1001C4804)
  {
    uint64_t v2 = qword_1001C4778;
    int v3 = dword_1001C4780;
    long long v8 = unk_1001C47C4;
    long long v9 = unk_1001C47D4;
    long long v10 = unk_1001C47E4;
    long long v11 = unk_1001C47F4;
    long long v4 = *(_OWORD *)algn_1001C4784;
    long long v5 = unk_1001C4794;
    long long v6 = unk_1001C47A4;
    long long v7 = unk_1001C47B4;
    char v12 = 1;
  }
  return sub_100119468(a1, (uint64_t)&v2);
}

uint64_t sub_1001190E4(uint64_t **a1, long long *a2, uint64_t *a3, uint64_t **a4, uint64_t **a5)
{
  long long v8 = *a5;
  long long v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      long long v10 = v9;
      long long v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    long long v11 = *a5;
    do
    {
      long long v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      long long v11 = v10;
    }
    while (!v12);
  }
  char v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    long long v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        long long v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      uint64_t v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        uint64_t v16 = v15;
      }
      while (v12);
    }
  }
  long long v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&long long v37 = qword_1001C45E0;
  *((void *)&v37 + 1) = qword_1001C45E0;
  char v38 = 2;
  long long v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  if (v13 != v10)
  {
    int v17 = (long long *)((char *)a3 + 12);
    do
    {
      long long v37 = *((_OWORD *)v13 + 2);
      char v38 = *((unsigned char *)v13 + 48);
      long long v33 = v39;
      uint64_t v34 = v40;
      sub_1000C69BC((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v41);
      if ((_BYTE)v42)
      {
        if (v42 == 3)
        {
          if (*((void *)&v41 + 1) >= (unint64_t)v41) {
            goto LABEL_24;
          }
        }
        else if ((unint64_t)v41 < *((void *)&v41 + 1))
        {
          goto LABEL_24;
        }
      }
      else if ((unint64_t)v41 < *((void *)&v41 + 1) && (unint64_t)(v41 + 1) < *((void *)&v41 + 1))
      {
LABEL_24:
        LOBYTE(v43) = 0;
        char v53 = 0;
        if (*((unsigned char *)a3 + 140))
        {
          uint64_t v43 = *a3;
          int v44 = *((_DWORD *)a3 + 2);
          long long v18 = *(_OWORD *)((char *)a3 + 92);
          long long v49 = *(_OWORD *)((char *)a3 + 76);
          long long v50 = v18;
          long long v19 = *(_OWORD *)((char *)a3 + 124);
          long long v51 = *(_OWORD *)((char *)a3 + 108);
          long long v52 = v19;
          long long v20 = *(_OWORD *)((char *)a3 + 28);
          long long v45 = *v17;
          long long v46 = v20;
          long long v21 = *(_OWORD *)((char *)a3 + 60);
          long long v47 = *(_OWORD *)((char *)a3 + 44);
          long long v48 = v21;
          char v53 = 1;
        }
        *a4 = sub_1001195F8(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
      }
      long long v31 = v39;
      uint64_t v32 = v40;
      sub_1000C6A90((uint64_t)&v31, (uint64_t)&v37, (uint64_t)&v41);
      long long v39 = v41;
      LOBYTE(v40) = v42;
      uint64_t v15 = *a4;
      unsigned int v22 = (uint64_t *)(*a4)[1];
      uint64_t v23 = *a4;
      if (v22)
      {
        do
        {
          char v13 = v22;
          unsigned int v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          char v13 = (uint64_t *)v23[2];
          BOOL v12 = *v13 == (void)v23;
          uint64_t v23 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
    }
    while (v13 != v10);
  }
  long long v27 = v39;
  uint64_t v28 = v40;
  uint64_t result = sub_1000C6A90((uint64_t)&v27, (uint64_t)&v35, (uint64_t)&v29);
  if (!(_BYTE)v30)
  {
    unint64_t v25 = *((void *)&v29 + 1);
    if ((unint64_t)v29 >= *((void *)&v29 + 1)) {
      goto LABEL_44;
    }
    unint64_t v26 = v29 + 1;
    goto LABEL_40;
  }
  if (v30 != 3)
  {
    unint64_t v25 = *((void *)&v29 + 1);
    unint64_t v26 = v29;
LABEL_40:
    if (v26 >= v25) {
      goto LABEL_44;
    }
    goto LABEL_41;
  }
  if (*((void *)&v29 + 1) < (unint64_t)v29) {
    goto LABEL_44;
  }
LABEL_41:
  long long v41 = v29;
  uint64_t v42 = v30;
  LOBYTE(v43) = 0;
  char v53 = 0;
  if (*((unsigned char *)a3 + 140))
  {
    uint64_t v43 = *a3;
    int v44 = *((_DWORD *)a3 + 2);
    long long v49 = *(_OWORD *)((char *)a3 + 76);
    long long v50 = *(_OWORD *)((char *)a3 + 92);
    long long v51 = *(_OWORD *)((char *)a3 + 108);
    long long v52 = *(_OWORD *)((char *)a3 + 124);
    long long v45 = *(_OWORD *)((char *)a3 + 12);
    long long v46 = *(_OWORD *)((char *)a3 + 28);
    long long v47 = *(_OWORD *)((char *)a3 + 44);
    long long v48 = *(_OWORD *)((char *)a3 + 60);
    char v53 = 1;
  }
  uint64_t result = (uint64_t)sub_1001195F8(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
  uint64_t v15 = (uint64_t *)result;
LABEL_44:
  *a4 = v15;
  return result;
}

BOOL sub_100119468(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 140)) {
    BOOL v2 = *(unsigned char *)(a2 + 140) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 140) != 0) == (*(unsigned char *)(a2 + 140) != 0);
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return sub_100051E64((_DWORD *)(a1 + 4), (_DWORD *)(a2 + 4));
  }
  return 0;
}

uint64_t *sub_1001194BC(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (uint64_t **)sub_10002B410((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_10011953C((uint64_t)a1, a3, (uint64_t)&v7);
    sub_10002B3B8(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_OWORD *sub_10011953C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0xC8uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *((void *)result + 6) = *(void *)(a2 + 16);
  *((unsigned char *)result + 56) = 0;
  *((unsigned char *)result + 196) = 0;
  if (*(unsigned char *)(a2 + 164))
  {
    *((void *)result + 7) = *(void *)(a2 + 24);
    *((_DWORD *)result + 16) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)((char *)result + 132) = *(_OWORD *)(a2 + 100);
    *(_OWORD *)((char *)result + 148) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)((char *)result + 164) = *(_OWORD *)(a2 + 132);
    *(_OWORD *)((char *)result + 180) = *(_OWORD *)(a2 + 148);
    *(_OWORD *)((char *)result + 68) = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)result + 84) = *(_OWORD *)(a2 + 52);
    *(_OWORD *)((char *)result + 100) = *(_OWORD *)(a2 + 68);
    *(_OWORD *)((char *)result + 116) = *(_OWORD *)(a2 + 84);
    *((unsigned char *)result + 196) = 1;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_1001195F8(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = (uint64_t **)sub_10002B240(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_10011953C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10002B3B8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_10011967C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B0CA8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1001196F8(_Unwind_Exception *a1)
{
}

uint64_t **sub_10011970C(uint64_t **a1, uint64_t a2)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((void *)&v14 + 1) < (unint64_t)v14) {
        return a1 + 1;
      }
    }
    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return a1 + 1;
    }
  }
  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return a1 + 1;
  }
  long long v5 = (int *)(a2 + 24);
  if (sub_100119848(a2 + 24)) {
    return a1 + 1;
  }
  long long v7 = (uint64_t *)sub_100119C00(a1, a2, a2);
  if (v8)
  {
    int v17 = v7;
    sub_100119C9C(a1, &v17);
    return sub_100119DCC(a1, (uint64_t ***)&v17);
  }
  else
  {
    long long v9 = (uint64_t *)sub_1000C6B64((uint64_t)a1, (uint64_t)&v14);
    long long v10 = (uint64_t **)sub_1000C6838((uint64_t)a1, (uint64_t)&v14);
    long long v11 = *v10;
    if (*v10)
    {
      do
      {
        BOOL v12 = v11;
        long long v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      do
      {
        BOOL v12 = v10[2];
        BOOL v13 = *v12 == (void)v10;
        long long v10 = (uint64_t **)v12;
      }
      while (v13);
    }
    uint64_t v16 = v9;
    int v17 = v12;
    sub_10011990C(a1, &v14, v5, &v16, &v17);
    return (uint64_t **)v16;
  }
}

BOOL sub_100119848(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C4820, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001C4820))
  {
    sub_100114EBC(&dword_1001C4808, 2);
    qword_1001C4810 = 0;
    qword_1001C4818 = 0;
    __cxa_guard_release(&qword_1001C4820);
  }
  return *(_DWORD *)a1 == dword_1001C4808
      && *(void *)(a1 + 8) == qword_1001C4810
      && *(void *)(a1 + 16) == qword_1001C4818;
}

void sub_1001198F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10011990C(uint64_t **a1, long long *a2, int *a3, uint64_t **a4, uint64_t **a5)
{
  char v8 = *a5;
  long long v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      long long v10 = v9;
      long long v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    long long v11 = *a5;
    do
    {
      long long v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      long long v11 = v10;
    }
    while (!v12);
  }
  BOOL v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    long long v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        long long v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      uint64_t v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        uint64_t v16 = v15;
      }
      while (v12);
    }
  }
  long long v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&long long v37 = qword_1001C45E0;
  *((void *)&v37 + 1) = qword_1001C45E0;
  char v38 = 2;
  long long v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  if (v13 != v10)
  {
    int v17 = (long long *)(a3 + 2);
    while (1)
    {
      long long v37 = *((_OWORD *)v13 + 2);
      char v38 = *((unsigned char *)v13 + 48);
      long long v33 = v39;
      uint64_t v34 = v40;
      sub_1000C69BC((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v29);
      if ((_BYTE)v30) {
        break;
      }
      if ((unint64_t)v29 < *((void *)&v29 + 1) && (unint64_t)(v29 + 1) < *((void *)&v29 + 1)) {
        goto LABEL_22;
      }
LABEL_23:
      long long v27 = v39;
      uint64_t v28 = v40;
      sub_1000C6A90((uint64_t)&v27, (uint64_t)&v37, (uint64_t)&v29);
      long long v39 = v29;
      LOBYTE(v40) = v30;
      uint64_t v15 = *a4;
      long long v18 = (uint64_t *)(*a4)[1];
      long long v19 = *a4;
      if (v18)
      {
        do
        {
          BOOL v13 = v18;
          long long v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          BOOL v13 = (uint64_t *)v19[2];
          BOOL v12 = *v13 == (void)v19;
          long long v19 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
      if (v13 == v10) {
        goto LABEL_32;
      }
    }
    if (v30 == 3)
    {
      if (*((void *)&v29 + 1) < (unint64_t)v29) {
        goto LABEL_23;
      }
    }
    else if ((unint64_t)v29 >= *((void *)&v29 + 1))
    {
      goto LABEL_23;
    }
LABEL_22:
    int v31 = *a3;
    long long v32 = *v17;
    *(void *)&long long v29 = sub_10002B1A0(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_100119C9C(a1, (uint64_t **)&v29);
    *a4 = (uint64_t *)sub_100119DCC(a1, (uint64_t ***)&v29);
    goto LABEL_23;
  }
LABEL_32:
  long long v23 = v39;
  uint64_t v24 = v40;
  uint64_t result = sub_1000C6A90((uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v25);
  if ((_BYTE)v26)
  {
    if (v26 == 3)
    {
      if (*((void *)&v25 + 1) < (unint64_t)v25) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    unint64_t v21 = *((void *)&v25 + 1);
    unint64_t v22 = v25;
  }
  else
  {
    unint64_t v21 = *((void *)&v25 + 1);
    if ((unint64_t)v25 >= *((void *)&v25 + 1)) {
      goto LABEL_41;
    }
    unint64_t v22 = v25 + 1;
  }
  if (v22 < v21)
  {
LABEL_40:
    long long v29 = v25;
    uint64_t v30 = v26;
    int v31 = *a3;
    long long v32 = *(_OWORD *)(a3 + 2);
    *(void *)&long long v29 = sub_10002B1A0(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_100119C9C(a1, (uint64_t **)&v29);
    uint64_t result = (uint64_t)sub_100119DCC(a1, (uint64_t ***)&v29);
    uint64_t v15 = (uint64_t *)result;
  }
LABEL_41:
  *a4 = v15;
  return result;
}

_OWORD *sub_100119C00(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (void **)sub_10002B410((uint64_t)a1, &v9, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    long long v6 = operator new(0x50uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    void v6[4] = *(_OWORD *)(a3 + 32);
    sub_10002B3B8(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_100119C9C(uint64_t **a1, uint64_t **a2)
{
  BOOL v2 = *a2;
  if (*a2 == *a1) {
    return *a1;
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = (uint64_t)*a2;
    do
    {
      uint64_t v5 = *(void *)(v6 + 16);
      BOOL v7 = *(void *)v5 == v6;
      uint64_t v6 = v5;
    }
    while (v7);
  }
  uint64_t v8 = v2[4];
  if ((v2[6] & 2) == 0) {
    ++v8;
  }
  if (v8 == (*(unsigned char *)(v5 + 48) & 1) + *(void *)(v5 + 40)
    && *(_DWORD *)(v5 + 56) == *((_DWORD *)v2 + 14)
    && *(void *)(v5 + 64) == v2[8]
    && *(void *)(v5 + 72) == v2[9])
  {
    long long v14 = *((_OWORD *)v2 + 2);
    uint64_t v15 = v2[6];
    sub_1000464E4(a1, v2);
    operator delete(v2);
    long long v10 = *(_OWORD *)(v5 + 32);
    uint64_t v11 = *(void *)(v5 + 48);
    sub_1000C6744((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 32) = v12;
    *(unsigned char *)(v5 + 48) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }
  return v2;
}

uint64_t **sub_100119DCC(uint64_t **a1, uint64_t ***a2)
{
  int v3 = a1 + 1;
  uint64_t result = *a2;
  if (*a2 == v3) {
    return v3;
  }
  uint64_t v6 = result[1];
  if (v6)
  {
    do
    {
      BOOL v7 = (uint64_t **)v6;
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v8 = *a2;
    do
    {
      BOOL v7 = (uint64_t **)v8[2];
      BOOL v9 = *v7 == (uint64_t *)v8;
      uint64_t v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    long long v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0) {
      long long v10 = (uint64_t *)((char *)v10 + 1);
    }
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1))
      && *((_DWORD *)result + 14) == *((_DWORD *)v7 + 14)
      && result[8] == v7[8]
      && result[9] == v7[9])
    {
      long long v17 = *((_OWORD *)v7 + 2);
      long long v18 = v7[6];
      sub_1000464E4(a1, (uint64_t *)v7);
      operator delete(v7);
      uint64_t v11 = *a2;
      long long v13 = *((_OWORD *)*a2 + 2);
      long long v14 = v11[6];
      sub_1000C6744((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      long long v12 = *a2;
      *((_OWORD *)v12 + 2) = v15;
      *((unsigned char *)v12 + 48) = v16;
      return *a2;
    }
  }
  return result;
}

uint64_t sub_100119F04(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B0EC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100119F80(_Unwind_Exception *a1)
{
}

uint64_t sub_100119F94(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  char v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      sub_10011A018((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_10011A000(_Unwind_Exception *a1)
{
  sub_10002A594(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_10011A018(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = sub_10011A0B8(a1, a2, &v11, &v10, a3);
  BOOL v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    BOOL v7 = operator new(0x50uLL);
    unint64_t v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    void v7[4] = *(_OWORD *)(a4 + 32);
    sub_10002B3B8(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_10011A0B8(void *a1, void *a2, void *a3, uint64_t *a4, unint64_t *a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_1000AE2A4(a5, a2 + 4))
  {
    if (!sub_1000AE2A4(a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (void *)a2[1];
      do
      {
        long long v15 = v14;
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      long long v18 = a2;
      do
      {
        long long v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        long long v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1000AE2A4(a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    long long v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      long long v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    char v16 = a2;
    do
    {
      long long v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      char v16 = v12;
    }
    while (v17);
  }
  if (sub_1000AE2A4(v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_1000AE210((uint64_t)a1, a3, a5);
}

void sub_10011A250(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10011A2F0((uint64_t)a1, a3);
  if (v11 >> 57) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(v11 << 6);
  sub_10011A368(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_10011A2F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x1FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x1FFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x1FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10011A368(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)*a1;
  uint64_t v11 = *a1 + (a1[1] << 6);
  uint64_t v12 = a2;
  if (*a1 != a4)
  {
    uint64_t v13 = (void *)*a1;
    uint64_t v12 = a2;
    do
    {
      *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
      long long v14 = *(_OWORD *)(v13 + 1);
      long long v15 = *(_OWORD *)(v13 + 3);
      long long v16 = *(_OWORD *)(v13 + 5);
      *(void *)(v12 + 56) = v13[7];
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + 8) = v14;
      v12 += 64;
      v13 += 8;
    }
    while (v13 != (void *)a4);
  }
  *(_DWORD *)uint64_t v12 = *(_DWORD *)a6;
  long long v17 = *(_OWORD *)(a6 + 8);
  long long v18 = *(_OWORD *)(a6 + 24);
  long long v19 = *(_OWORD *)(a6 + 40);
  *(void *)(v12 + 56) = *(void *)(a6 + 56);
  *(_OWORD *)(v12 + 40) = v19;
  *(_OWORD *)(v12 + 24) = v18;
  *(_OWORD *)(v12 + 8) = v17;
  if (v11 != a4)
  {
    uint64_t v20 = v12 + (a5 << 6);
    do
    {
      *(_DWORD *)uint64_t v20 = *(_DWORD *)a4;
      long long v21 = *(_OWORD *)(a4 + 8);
      long long v22 = *(_OWORD *)(a4 + 24);
      long long v23 = *(_OWORD *)(a4 + 40);
      *(void *)(v20 + 56) = *(void *)(a4 + 56);
      *(_OWORD *)(v20 + 40) = v23;
      *(_OWORD *)(v20 + 24) = v22;
      *(_OWORD *)(v20 + 8) = v21;
      a4 += 64;
      v20 += 64;
    }
    while (a4 != v11);
  }
  if (v10)
  {
    uint64_t v24 = (void *)*a1;
    if (a1 + 3 != (void *)*a1) {
      operator delete(v24);
    }
  }
  uint64_t v25 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v25;
  a1[2] = a3;
}

uint64_t sub_10011A484(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B10E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10011A500(_Unwind_Exception *a1)
{
}

uint64_t sub_10011A514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2 == -1) {
    sub_100017DCC();
  }
  long long v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1001B18A8[v2])(&v5, a2 + 4);
}

void *sub_10011A564(void ***a1)
{
  return sub_10011A57C(**a1);
}

void *sub_10011A570(void ***a1, int *a2)
{
  return sub_10011A5CC(**a1, a2);
}

void *sub_10011A57C(void *a1)
{
  uint64_t v1 = sub_100003DF0(a1, (uint64_t)"none {", 6);
  uint64_t v2 = sub_100003DF0(v1, (uint64_t)"[empty]", 7);

  return sub_100003DF0(v2, (uint64_t)"}", 1);
}

void *sub_10011A5CC(void *a1, int *a2)
{
  uint64_t v3 = sub_100003DF0(a1, (uint64_t)"crc32 {", 7);
  int v6 = *a2;
  uint64_t v4 = sub_1001188A0(v3, (uint64_t)&v6, 4);

  return sub_100003DF0(v4, (uint64_t)"}", 1);
}

uint64_t sub_10011A634(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B1308;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10011A6B0(_Unwind_Exception *a1)
{
}

uint64_t sub_10011A6C4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B1528;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10011A740(_Unwind_Exception *a1)
{
}

void sub_10011A754(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10011A7BC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete[]();
  }
  __cxa_rethrow();
}

void sub_10011A7E4(_Unwind_Exception *a1)
{
}

void sub_10011A7FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10011A834(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete[]();
  }
  return result;
}

uint64_t sub_10011A854(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

_DWORD *sub_10011A898(_DWORD *a1)
{
  *a1 = 0;
  v3[0] = xmmword_10016CB10;
  v3[1] = xmmword_10016CB20;
  _OWORD v3[2] = xmmword_10016CB30;
  unint64_t v4 = 0x8000000880000007;
  int v5 = -1;
  sub_100090DEC((uint64_t)"run_type", 0, v3, 15);
  return a1;
}

uint64_t sub_10011A940(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B1748;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10011A9BC(_Unwind_Exception *a1)
{
}

void sub_10011A9D0(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  operator new[]();
}

void sub_10011AAEC()
{
}

uint64_t sub_10011AB10(const __CFString *a1)
{
  if (!a1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v5 = "Invalid resource key";
    goto LABEL_8;
  }
  unint64_t Length = CFStringGetLength(a1);
  if (Length >= 5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v5 = "Resource name is too long to fit uint32_t";
    goto LABEL_8;
  }
  v8.length = Length;
  *(_DWORD *)buffer = 0;
  v8.location = 0;
  if (CFStringGetBytes(a1, v8, 0, 0, 0, buffer, 4, 0) != 4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v5 = "Can't get key in cstring format";
LABEL_8:
    int v6 = (void *)sub_100003670((uint64_t)exception, (uint64_t)v5, 0x16u);
  }
  return bswap32(*(unsigned int *)buffer);
}

BOOL sub_10011ABE4(__CFArray *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v5 = v3;
  if (v3) {
    CFArrayAppendValue(a1, v3);
  }
  sub_1000D526C((const void **)&v5);
  return v3 != 0;
}

void sub_10011AC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL sub_10011AC68(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v7 = v5;
  if (v5) {
    CFDictionarySetValue(a1, a2, v5);
  }
  sub_1000D526C((const void **)&v7);
  return v5 != 0;
}

void sub_10011ACE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

__CFDictionary *sub_10011ACFC@<X0>(const void **keys@<X0>, const void **values@<X1>, CFIndex numValues@<X2>, CFMutableDictionaryRef *a4@<X8>)
{
  if (keys && values && numValues)
  {
    uint64_t result = CFDictionaryCreate(kCFAllocatorDefault, keys, values, numValues, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFMutableDictionaryRef Mutable = result;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFNumberRef v7 = 0;
    uint64_t result = (__CFDictionary *)sub_10002AB08(&v7);
  }
  *a4 = Mutable;
  return result;
}

CFMutableDictionaryRef sub_10011AD9C@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *a1 = result;
  return result;
}

const void **sub_10011ADE4@<X0>(CFPropertyListRef propertyList@<X0>, const __CFData **a2@<X8>)
{
  CFErrorRef error = 0;
  CFDataRef v3 = CFPropertyListCreateData(kCFAllocatorDefault, propertyList, kCFPropertyListXMLFormat_v1_0, 0, &error);
  CFDataRef v4 = v3;
  if (v3) {
    BOOL v5 = error == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    uint64_t v10 = std::generic_category();
    exception[1] = 22;
    exception[2] = v10;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't serialize property list";
  }
  CFIndex Length = CFDataGetLength(v3);
  CFTypeID TypeID = CFDataGetTypeID();
  if (CFGetTypeID(v4) != TypeID)
  {
    uint64_t v11 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v4);
    uint64_t v12 = sub_10002A5EC(v11);
  }
  uint64_t v13 = 0;
  *a2 = v4;
  a2[1] = (const __CFData *)Length;
  sub_1000807A8(&v13);
  return sub_100080C10((const void **)&error);
}

void sub_10011AF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  sub_100080C10(&a10);
  _Unwind_Resume(a1);
}

const void **sub_10011AF64@<X0>(UInt8 *bytes@<X0>, CFIndex length@<X1>, void *a3@<X8>)
{
  CFErrorRef error = 0;
  CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, bytes, length);
  CFDataRef v18 = v4;
  if (v4) {
    BOOL v5 = error == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    uint64_t v11 = std::generic_category();
    exception[1] = 12;
    exception[2] = v11;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't create data for plist deserialization";
  }
  CFPropertyListFormat format = kCFPropertyListXMLFormat_v1_0;
  CFPropertyListRef v6 = CFPropertyListCreateWithData(kCFAllocatorDefault, v4, 0, &format, &error);
  if (v6) {
    BOOL v7 = error == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    uint64_t v12 = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    *uint64_t v12 = &off_1001B6CA0;
    long long v14 = std::generic_category();
    v12[1] = Code;
    void v12[2] = v14;
    *((unsigned char *)v12 + 24) = 0;
    *((unsigned char *)v12 + 48) = 0;
    v12[7] = "Can't convert data to property list";
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v6) != TypeID)
  {
    long long v15 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v6);
    long long v16 = sub_10002A5EC(v15);
  }
  *a3 = v6;
  sub_1000807A8((const void **)&v18);
  return sub_100080C10((const void **)&error);
}

void sub_10011B150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12)
{
  __cxa_free_exception(v12);
  sub_1000807A8(&a11);
  sub_100080C10(&a12);
  _Unwind_Resume(a1);
}

char *sub_10011B198@<X0>(const __CFData *a1@<X0>, unsigned int a2@<W1>, size_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t Length = CFDataGetLength(a1);
  if (!a3) {
    a3 = Length;
  }
  unint64_t v9 = a3 + a2;
  if (__CFADD__(a3, a2) || Length < v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v13 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Unable to convert data to vector.", 0x16u);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  BytePtr = CFDataGetBytePtr(a1);
  sub_10011B280(a4, a3);
  return sub_10011B494((uint64_t)a4, (char *)*a4, (char *)&BytePtr[a2], (char *)&BytePtr[v9], a3);
}

void sub_10011B260(_Unwind_Exception *exception_object)
{
  CFDataRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011B280(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      sub_10001796C();
    }
    BOOL v5 = (char *)a1[1];
    CFPropertyListRef v6 = operator new(__sz);
    BOOL v7 = &v5[(void)v6 - v2];
    CFRange v8 = v7;
    if (v5 != (char *)v2)
    {
      unint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      CFRange v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

BOOL sub_10011B33C(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) >= 0) {
    BOOL v5 = (const char *)a3;
  }
  else {
    BOOL v5 = *(const char **)a3;
  }
  CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
  CFStringRef v8 = v6;
  if (v6) {
    CFDictionarySetValue(a1, a2, v6);
  }
  sub_10002A560((const void **)&v8);
  return v6 != 0;
}

void sub_10011B3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002A560((const void **)va);
  _Unwind_Resume(a1);
}

void sub_10011B3DC(CFMutableDictionaryRef *a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *a2 + 16 * v2;
    do
    {
      CFStringRef v6 = *(const void **)v4;
      BOOL v7 = *(const void **)(v4 + 8);
      v4 += 16;
      CFDictionaryAddValue(*a1, v6, v7);
    }
    while (v4 != v5);
  }
}

void sub_10011B428(uint64_t *a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  *a2 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_10011B3DC(a2, a1);
}

void sub_10011B480(_Unwind_Exception *a1)
{
  sub_10002AB08(v1);
  _Unwind_Resume(a1);
}

char *sub_10011B494(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  char v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_10001796C();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      long long v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      long long v17 = 0;
    }
    long long v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    uint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      char v10 = *(char **)(a1 + 8);
      uint64_t v28 = v17;
    }
    uint64_t v30 = &v27[a5];
    int v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    long long v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    long long v19 = &__src[a5];
    long long v21 = *(char **)(a1 + 8);
LABEL_17:
    long long v22 = &v5[a5];
    long long v23 = &v21[-a5];
    uint64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      uint64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  long long v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  long long v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_10011BAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011BB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011BBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011BC44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011BEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_10011C0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011C170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011C1B0()
{
}

uint64_t sub_10011C2B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  CFDataRef v3 = *(void **)(a1 + 32);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        operator delete[]();
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v2;
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_10011C33C(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  CFStringRef v6 = (void **)(a1 + 24);
  *(void *)(a1 + 48) = 1018212795;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  if (a3 <= a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = a3;
  }
  *(void *)(a1 + 16) = v7;
  sub_1000ADAEC(v6, a3);
  if (a3) {
    sub_10011C1B0();
  }
  return a1;
}

void sub_10011C3D0(_Unwind_Exception *a1)
{
  sub_10011C2B4(v1);
  _Unwind_Resume(a1);
}

void sub_10011C3EC(uint64_t a1@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 96);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 96));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 24) == v4)
  {
    if (*(void *)(a1 + 16) > (unint64_t)*(unsigned int *)(a1 + 8)) {
      sub_10011C1B0();
    }
    do
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 48), &__lk);
      uint64_t v4 = *(void *)(a1 + 32);
    }
    while (*(void *)(a1 + 24) == v4);
  }
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(a1 + 32) = v4 - 8;
  uint64_t v7 = a1;
  *a2 = v5;
  operator new();
}

void sub_10011C4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_10011C520(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::mutex *)(*a1 + 96);
  std::mutex::lock(v4);
  uint64_t v5 = *(void **)(v3 + 32);
  unint64_t v6 = *(void *)(v3 + 40);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10001796C();
    }
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_100019308(v3 + 40, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = &v13[8 * v12];
    *(void *)unint64_t v14 = a2;
    uint64_t v7 = v14 + 8;
    long long v17 = *(char **)(v3 + 24);
    size_t v16 = *(char **)(v3 + 32);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      size_t v16 = *(char **)(v3 + 24);
    }
    *(void *)(v3 + 24) = v14;
    *(void *)(v3 + 32) = v7;
    *(void *)(v3 + 40) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v3 + 32) = v7;
  std::mutex::unlock(v4);

  std::condition_variable::notify_one((std::condition_variable *)(v3 + 48));
}

void sub_10011C634(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10011C64C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10011C684(uint64_t a1)
{
}

uint64_t sub_10011C6AC(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

void sub_10011C6F0(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = sub_10003C438(a1, a2);
  *unint64_t v6 = off_1001B19C8;
  uint64_t v7 = v6 + 5;
  uint64_t v8 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8);
  uint64_t v12 = 0;
  int v13 = v10;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  size_t v15 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10011CCCC((uint64_t)&v12, v7);
  if (v15) {
    sub_100010A48(v15);
  }
  if (v9) {
    sub_100010A48(v9);
  }
  a1[7] = 0;
  a1[8] = 0;
  operator new();
}

void sub_10011C83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_100010A48(a13);
  }
  if (v14) {
    sub_100010A48(v14);
  }
  sub_10003C494(v13);
  _Unwind_Resume(a1);
}

void sub_10011C8A0(uint64_t a1, int a2)
{
  uint64_t v4 = *(std::mutex **)(a1 + 72);
  std::mutex::lock(v4);
  lseek(a2, 0, 0);
  *(void *)&long long v10 = AAFileStreamOpenWithFD(a2, 0);
  sub_100107E5C(&v13, &v10);
  sub_100107F44(&v12, &v13);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(uint8_t **)(v5 + 16);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 24);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100107F78(&v12, v6, 0x20uLL);
  sub_100107E98(&v13, &v12, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 1, (uint64_t *)&v11);
  sub_10011CF74(&v13, (uint64_t *)&v12, &v11, &v10);
  long long v8 = v10;
  long long v10 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v8;
  if (v9)
  {
    sub_100010A48(v9);
    if (*((void *)&v10 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  sub_100107E60(&v11);
  if (v7) {
    sub_100010A48(v7);
  }
  sub_100107F48(&v12);
  sub_100107E60(&v13);
  std::mutex::unlock(v4);
}

void sub_10011C9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  AAByteStream v6 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  AEAContext v8 = va_arg(va2, AEAContext);
  sub_100107E60((AAByteStream *)va);
  if (v4) {
    sub_100010A48(v4);
  }
  sub_100107F48((AEAContext *)va1);
  sub_100107E60((AAByteStream *)va2);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void *sub_10011CA1C(void *a1, void *a2, void *a3)
{
  uint64_t v5 = sub_10003C438(a1, a3);
  *uint64_t v5 = off_1001B19C8;
  uint64_t v6 = a2[6];
  v5[5] = a2[5];
  v5[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[7] = 0;
  a1[8] = 0;
  uint64_t v7 = a2[10];
  a1[9] = a2[9];
  a1[10] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10011C8A0((uint64_t)a1, *(_DWORD *)(a1[5] + 8));
  return a1;
}

void sub_10011CABC(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)v1[10];
  if (v4) {
    sub_100010A48(v4);
  }
  sub_1001471F0((uint64_t)v1, v2);
  sub_10003C494(v1);
  _Unwind_Resume(a1);
}

double sub_10011CAE8@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_10011D104(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

ssize_t sub_10011CB2C(uint64_t a1, uint64_t a2)
{
  return sub_100108280(*(void *)(a1 + 56), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_10011CB54(uint64_t a1)
{
  return **(void **)(a1 + 40);
}

uint64_t sub_10011CB60(uint64_t a1)
{
  return sub_100108268(*(void *)(a1 + 56));
}

void *sub_10011CB68(void *a1)
{
  *a1 = off_1001B19C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_100010A48(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    sub_100010A48(v4);
  }
  *a1 = off_1001966B0;
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    sub_100010A48(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_10011CC00(void *a1)
{
  *a1 = off_1001B19C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_100010A48(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    sub_100010A48(v4);
  }
  *a1 = off_1001966B0;
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    sub_100010A48(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete();
}

void *sub_10011CCB8(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"AEA", 3);
}

void *sub_10011CCCC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  double result = operator new(0x38uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = off_1001B1AA8;
  result[3] = *(void *)a1;
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  result[5] = *(void *)(a1 + 16);
  result[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_10011CD48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B1AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10011CD68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B1AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10011CDBC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_100010A48(v1);
  }
}

void sub_10011CDD0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10011CE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10011CF24((std::mutex **)va, 0);
  _Unwind_Resume(a1);
}

void sub_10011CE60(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

std::mutex *sub_10011CE98(uint64_t a1)
{
  double result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    std::mutex::~mutex(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10011CEE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::mutex *sub_10011CF24(std::mutex **a1, std::mutex *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    std::mutex::~mutex(result);
    operator delete();
  }
  return result;
}

void *sub_10011CF74@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  AEAContext v8 = operator new(0x30uLL);
  double result = sub_10011CFE8(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_10011CFD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10011CFE8(void *a1, void *a2, uint64_t *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B1B70;
  sub_100108240(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_10011D030(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10011D044(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B1B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10011D064(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B1B70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

AAByteStream *sub_10011D0B8(AAByteStream *a1)
{
  uint64_t v2 = a1 + 3;
  sub_100107E60(a1 + 5);
  sub_100107F48(a1 + 4);

  return sub_100107E60(v2);
}

void sub_10011D104(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  sub_10011D180(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10011D16C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10011D180(void *a1, void *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A97E8;
  sub_10011CA1C(a1 + 3, a2, a3);
  return a1;
}

void sub_10011D1C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

dispatch_group_t *sub_10011DE90(dispatch_group_t *a1)
{
  *a1 = dispatch_group_create();
  return a1;
}

NSObject **sub_10011DEBC(NSObject **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    dispatch_release(v2);
  }
  return a1;
}

intptr_t sub_10011DEEC(dispatch_group_t *a1, dispatch_time_t a2)
{
  return dispatch_group_wait(*a1, a2);
}

dispatch_queue_t *sub_10011DEF4(dispatch_queue_t *a1, char *label, int a3)
{
  switch(a3)
  {
    case 2:
      uint64_t v6 = &_dispatch_queue_attr_concurrent;
      uint64_t v5 = label;
      goto LABEL_6;
    case 1:
      global_queue = dispatch_get_global_queue(21, 0);
      dispatch_queue_t v7 = dispatch_queue_create_with_target_V2(label, 0, global_queue);
      goto LABEL_8;
    case 0:
      uint64_t v5 = label;
      uint64_t v6 = 0;
LABEL_6:
      dispatch_queue_t v7 = dispatch_queue_create(v5, v6);
LABEL_8:
      *a1 = v7;
      break;
  }
  return a1;
}

void *sub_10011DF74(void *result, void *a2)
{
  *double result = *a2;
  *a2 = 0;
  return result;
}

void sub_10011DF84(dispatch_queue_t *a1, void *a2)
{
}

void sub_10011DF8C(dispatch_queue_t *a1, dispatch_group_t *a2, void *a3)
{
}

void sub_10011DF9C(NSObject **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    if (a3)
    {
      dispatch_time_t v6 = dispatch_time(0, 1000 * a3);
      dispatch_queue_t v7 = *a1;
      AEAContext v8 = *a2;
      dispatch_after(v6, v7, v8);
    }
    else
    {
      uint64_t v9 = *a1;
      dispatch_async(v9, v4);
    }
  }
}

void sub_10011E020(dispatch_queue_t *a1, void *a2)
{
}

void sub_10011E028(dispatch_queue_t *a1, void *a2)
{
}

void sub_10011E030(dispatch_queue_t *a1, void *a2)
{
}

void sub_10011E038(dispatch_object_t *a1)
{
}

void sub_10011E040(dispatch_object_t *a1)
{
}

uint64_t sub_10011E048(dispatch_object_t *a1, int a2)
{
  if ((a2 - 1) > 2) {
    intptr_t v3 = 5;
  }
  else {
    intptr_t v3 = *(void *)&asc_10016D2E0[8 * a2 - 8];
  }
  global_queue = dispatch_get_global_queue(v3, 0);
  if (!global_queue) {
    return 22;
  }
  dispatch_set_target_queue(*a1, global_queue);
  return 0;
}

void sub_10011E0AC(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    dispatch_release(v2);
    a1[1] = 0;
  }
  uint64_t v3 = a1[5];
  if (v3)
  {
    sub_10011E110(v3);
    uint64_t v4 = (std::__shared_weak_count *)a1[6];
    a1[5] = 0;
    a1[6] = 0;
    if (v4)
    {
      sub_100010A48(v4);
    }
  }
}

void sub_10011E110(uint64_t a1)
{
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 128), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v2 = (std::mutex *)(a1 + 64);
    std::mutex::lock((std::mutex *)(a1 + 64));
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 16));
    std::mutex::unlock(v2);
  }
}

uint64_t sub_10011E178(uint64_t a1, long long *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1001B1BC0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100047744((unsigned char *)(a1 + 16), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v10;
  }
  uint64_t v11 = a4[1];
  *(void *)(a1 + 40) = *a4;
  *(void *)(a1 + 48) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10011E68C((uint64_t)v13, a5);
  sub_100010F94((uint64_t)v14, a6);
  *(void *)(a1 + 8) = dispatch_mach_create();
  sub_100018430(v14);
  sub_10001A65C(v13);
  return a1;
}

void sub_10011E300(_Unwind_Exception *a1)
{
  sub_10001A65C(v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    sub_100010A48(v5);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_10011E338(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 8:
      uint64_t v4 = *(void *)(a1 + 96);
      if (v4)
      {
        uint64_t v5 = *(void (**)(void))(*(void *)v4 + 48);
        v5();
      }
      break;
    case 7:
      dispatch_time_t v6 = *(void **)(a1 + 32);
      sub_10011E0AC(v6);
      break;
    case 2:
      uint64_t msg = dispatch_mach_msg_get_msg();
      sub_10011E408(a1 + 40, msg, 0);
      break;
  }
}

uint64_t sub_10011E408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_10011E460(uint64_t a1, uint64_t a2)
{
  return sub_100010F94(a1 + 72, a2 + 72);
}

void sub_10011E4A8(_Unwind_Exception *a1)
{
  sub_10001A65C(v1);
  _Unwind_Resume(a1);
}

void *sub_10011E4BC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);
  sub_100018430((void *)(a1 + 72));

  return sub_10001A65C(v1);
}

uint64_t sub_10011E4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (a2) {
    a2 = *(unsigned int *)(a2 + 8);
  }
  if (a3) {
    a3 = *(unsigned int *)(a3 + 8);
  }
  return _dispatch_mach_connect(v3, a2, a3, 0);
}

uint64_t sub_10011E518(uint64_t a1)
{
  return _dispatch_mach_cancel(*(void *)(a1 + 8));
}

uint64_t sub_10011E520(uint64_t a1)
{
  *(void *)a1 = off_1001B1BC0;
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_100010A48(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10011E590(uint64_t a1)
{
  sub_10011E520(a1);

  operator delete();
}

dispatch_semaphore_t *sub_10011E5C8(dispatch_semaphore_t *a1, intptr_t value)
{
  *a1 = dispatch_semaphore_create(value);
  return a1;
}

intptr_t sub_10011E5F8(dispatch_semaphore_t *a1, dispatch_time_t a2)
{
  return dispatch_semaphore_wait(*a1, a2);
}

intptr_t sub_10011E600(dispatch_semaphore_t *a1)
{
  return dispatch_semaphore_signal(*a1);
}

dispatch_block_t *sub_10011E608(dispatch_block_t *a1, void *a2)
{
  *a1 = dispatch_block_create((dispatch_block_flags_t)0, a2);
  return a1;
}

void sub_10011E638(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    dispatch_block_cancel(v1);
  }
}

const void **sub_10011E648(const void **a1)
{
  uint64_t v2 = (void *)*a1;
  if (v2)
  {
    dispatch_block_cancel(v2);
    if (*a1) {
      _Block_release(*a1);
    }
  }
  return a1;
}

uint64_t sub_10011E68C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10011E724@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W3>, void *a4@<X8>)
{
  sub_10002A7B8((uint64_t)v35);
  AEAContext v8 = sub_100003DF0(&v36, (uint64_t)"Couldn't open ", 14);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  AEAContext v12 = sub_100003DF0(v8, v10, v11);
  AAByteStream v13 = sub_100003DF0(v12, (uint64_t)"' with flags ", 13);
  uint64_t v14 = *v13;
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) |= 0x200u;
  size_t v15 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
  if (a3 == 13)
  {
    if (*(char *)(a2 + 23) >= 0) {
      size_t v16 = (const char *)a2;
    }
    else {
      size_t v16 = *(const char **)a2;
    }
    if (fstatat(a1, v16, &v34, 0))
    {
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)"std::string FileDescriptorWrapper::handle_open_from_error_message(int, const std::string &, int, int)";
      v33.__r_.__value_.__l.__size_ = 65;
      LODWORD(v33.__r_.__value_.__r.__words[2]) = 16;
      sub_10011EC44(&v31, (long long *)&v33);
      sub_100003DF0(v32, (uint64_t)"fstatfs failed with err code", 28);
      __error();
      std::ostream::operator<<();
      sub_100003DF0(v32, (uint64_t)" trying to check permission after EACCES", 40);
      std::ostream::~ostream();
      sub_100124060((uint64_t)&v31);
      std::ios::~ios();
    }
    else
    {
      std::to_string(&v31, v34.st_gid);
      long long v17 = getgrgid(v34.st_gid);
      if (v17) {
        sub_100046238(&v31, v17->gr_name);
      }
      uint64_t v18 = sub_100003DF0(&v36, (uint64_t)", UID:GID(Name)=", 16);
      std::to_string(&v33, v34.st_uid);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v19 = &v33;
      }
      else {
        long long v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v33.__r_.__value_.__l.__size_;
      }
      long long v21 = sub_100003DF0(v18, (uint64_t)v19, size);
      long long v22 = sub_100003DF0(v21, (uint64_t)":", 1);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v23 = &v31;
      }
      else {
        long long v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v31.__r_.__value_.__l.__size_;
      }
      sub_100003DF0(v22, (uint64_t)v23, v24);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      int64_t v25 = sub_100003DF0(&v36, (uint64_t)" mode=", 6);
      uint64_t v26 = *v25;
      *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + 8) |= 0x200u;
      long long v27 = (void *)std::ostream::operator<<();
      *(_DWORD *)((char *)v27 + *(void *)(*v27 - 24) + 8) = *(_DWORD *)((unsigned char *)v27 + *(void *)(*v27 - 24) + 8) & 0xFFFFFFB5 | 2;
      sub_100003DF0(v27, (uint64_t)" (our euid is ", 14);
      geteuid();
      uint64_t v28 = (void *)std::ostream::operator<<();
      sub_100003DF0(v28, (uint64_t)")", 1);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_100003890((uint64_t)v37, a4);
  *(void *)((char *)v35
  uint64_t v36 = v29;
  if (v38 < 0) {
    operator delete((void *)v37[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10011EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1001130C0((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void *sub_10011EC44(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012C860((uint64_t)a1, a2);
  *a1 = off_1001B1F58;
  a1[45] = &off_1001B2058;
  a1[46] = &off_1001B2080;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B1F58;
  a1[45] = off_1001B1FE0;
  a1[46] = off_1001B2008;
  return a1;
}

void sub_10011ED44(_Unwind_Exception *a1)
{
  sub_100124060(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011ED68(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011EDAC(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  uint64_t v3 = open((const char *)a1, a2, 438);
  if (v3 == -1)
  {
    int v11 = *__error();
    if (sub_1000D29A0())
    {
      *(void *)&long long v21 = 0;
      AEAContext v12 = sub_1000D2920();
      os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (*(char *)(v2 + 23) < 0) {
        uint64_t v2 = *(void *)v2;
      }
      int v13 = *__error();
      *(_DWORD *)buf = 68158467;
      *(_DWORD *)&uint8_t buf[4] = 69;
      __int16 v24 = 2080;
      int64_t v25 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
      __int16 v26 = 2081;
      uint64_t v27 = v2;
      __int16 v28 = 1024;
      int v29 = v13;
      uint64_t v14 = (const char *)_os_log_send_and_compose_impl();
      if (v14)
      {
        size_t v15 = (char *)v14;
        fprintf(__stderrp, "%s\n", v14);
        free(v15);
      }
    }
    else
    {
      size_t v16 = sub_1000D2920();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v2 + 23) < 0) {
          uint64_t v2 = *(void *)v2;
        }
        int v17 = *__error();
        *(_DWORD *)buf = 68158467;
        *(_DWORD *)&uint8_t buf[4] = 69;
        __int16 v24 = 2080;
        int64_t v25 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
        __int16 v26 = 2081;
        uint64_t v27 = v2;
        __int16 v28 = 1024;
        int v29 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%.*s: Failed opening %{private}s, errno %d", buf, 0x22u);
      }
    }
    *__error() = v11;
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)buf);
    sub_100003DF0(buf, (uint64_t)"Couldn't open file with flags ", 30);
    uint64_t v19 = *(void *)buf;
    *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 8] = *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 8] & 0xFFFFFFB5 | 8;
    *(_DWORD *)&buf[*(void *)(v19 - 24) + 8] |= 0x200u;
    std::ostream::operator<<();
    int64_t v20 = __error();
    sub_100010C3C((uint64_t)exception, (uint64_t)buf, *v20);
  }
  uint64_t v4 = v3;
  if (sub_1000D29B8())
  {
    *(void *)&long long v21 = "int FileDescriptorWrapper::open_file(const std::string &, int)";
    *((void *)&v21 + 1) = 36;
    int v22 = 2;
    sub_10011F294(buf, &v21);
    sub_100003DF0(v30, (uint64_t)"'", 1);
    int v5 = *(char *)(v2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = *(void *)v2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(v2 + 8);
    }
    sub_100003DF0(v30, v6, v7);
    sub_100003DF0(v30, (uint64_t)"' opened successfully with flags ", 33);
    uint64_t v8 = v30[0];
    *(_DWORD *)((char *)&v30[1] + *(void *)(v30[0] - 24)) = *(_DWORD *)((unsigned char *)&v30[1] + *(void *)(v30[0] - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v30[1] + *(void *)(v8 - 24)) |= 0x200u;
    std::ostream::operator<<();
    uint64_t v9 = v30[0];
    *(_DWORD *)((char *)&v30[1] + *(void *)(v30[0] - 24)) &= ~0x200u;
    *(_DWORD *)((char *)&v30[1] + *(void *)(v9 - 24)) = *(_DWORD *)((unsigned char *)&v30[1] + *(void *)(v9 - 24)) & 0xFFFFFFB5 | 2;
    sub_100003DF0(v30, (uint64_t)", fd=", 5);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1001247D4((uint64_t)buf);
    std::ios::~ios();
  }
  return v4;
}

void sub_10011F248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10011F294(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012C8F0((uint64_t)a1, a2);
  *a1 = off_1001B2178;
  a1[45] = &off_1001B2278;
  a1[46] = &off_1001B22A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B2178;
  a1[45] = off_1001B2200;
  a1[46] = off_1001B2228;
  return a1;
}

void sub_10011F394(_Unwind_Exception *a1)
{
  sub_1001247D4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011F3B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011F3FC(int a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  v24[1] = 438;
  uint64_t v25 = v5;
  v24[0] = a3 | 0x100;
  uint64_t v6 = fcntl(a1, 56, v24);
  if (v6 == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v19);
    size_t v15 = __error();
    sub_10011E724(a1, a2, *v15, &v21);
    if ((v23 & 0x80u) == 0) {
      size_t v16 = &v21;
    }
    else {
      size_t v16 = (long long *)v21;
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v17 = v23;
    }
    else {
      uint64_t v17 = *((void *)&v21 + 1);
    }
    sub_100003DF0(v19, (uint64_t)v16, v17);
    uint64_t v18 = __error();
    sub_100010C3C((uint64_t)exception, (uint64_t)v19, *v18);
  }
  uint64_t v7 = v6;
  if (sub_1000D29B8())
  {
    *(void *)&long long v21 = "int FileDescriptorWrapper::open_from(int, const std::string &, int)";
    *((void *)&v21 + 1) = 36;
    int v22 = 2;
    sub_10011F714(v19, &v21);
    sub_100003DF0(v20, (uint64_t)"'", 1);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    sub_100003DF0(v20, v9, v10);
    sub_100003DF0(v20, (uint64_t)"' opened successfully with flags ", 33);
    uint64_t v11 = v20[0];
    *(_DWORD *)((char *)&v20[1] + *(void *)(v20[0] - 24)) = *(_DWORD *)((unsigned char *)&v20[1] + *(void *)(v20[0] - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v20[1] + *(void *)(v11 - 24)) |= 0x200u;
    std::ostream::operator<<();
    uint64_t v12 = v20[0];
    *(_DWORD *)((char *)&v20[1] + *(void *)(v20[0] - 24)) &= ~0x200u;
    *(_DWORD *)((char *)&v20[1] + *(void *)(v12 - 24)) = *(_DWORD *)((unsigned char *)&v20[1] + *(void *)(v12 - 24)) & 0xFFFFFFB5 | 2;
    sub_100003DF0(v20, (uint64_t)", fd=", 5);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100124F48((uint64_t)v19);
    std::ios::~ios();
  }
  return v7;
}

void sub_10011F6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v5 - 65) < 0)
  {
    operator delete(*(void **)(v5 - 88));
    sub_10000E628((uint64_t)va);
    if ((v4 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_10000E628((uint64_t)va);
    if (!v4) {
      goto LABEL_6;
    }
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

void *sub_10011F714(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012C980((uint64_t)a1, a2);
  *a1 = off_1001B2398;
  a1[45] = &off_1001B2498;
  a1[46] = &off_1001B24C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B2398;
  a1[45] = off_1001B2420;
  a1[46] = off_1001B2448;
  return a1;
}

void sub_10011F814(_Unwind_Exception *a1)
{
  sub_100124F48(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011F838(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011F87C(uint64_t a1)
{
  *(void *)a1 = off_1001B1C20;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 != -1)
  {
    close(v2);
    if (sub_1000D29B8())
    {
      *(void *)&long long v4 = "FileDescriptorWrapper::~FileDescriptorWrapper()";
      *((void *)&v4 + 1) = 45;
      int v5 = 2;
      sub_10011F96C(v6, &v4);
      sub_100003DF0(v7, (uint64_t)"File descriptor ", 16);
      std::ostream::operator<<();
      sub_100003DF0(v7, (uint64_t)" closed", 7);
      std::ostream::~ostream();
      sub_1001256BC((uint64_t)v6);
      std::ios::~ios();
    }
  }
  return a1;
}

void *sub_10011F96C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012CA10((uint64_t)a1, a2);
  *a1 = off_1001B25B8;
  a1[45] = &off_1001B26B8;
  a1[46] = &off_1001B26E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B25B8;
  a1[45] = off_1001B2640;
  a1[46] = off_1001B2668;
  return a1;
}

void sub_10011FA6C(_Unwind_Exception *a1)
{
  sub_1001256BC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011FA90(uint64_t a1)
{
  return a1;
}

void sub_10011FAD8(uint64_t a1)
{
  sub_10011F87C(a1);

  operator delete();
}

uint64_t sub_10011FB10(uint64_t a1, int a2, char a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = off_100198268;
  *(unsigned char *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_10011FB78(a1);
  return a1;
}

void sub_10011FB64(_Unwind_Exception *a1)
{
  sub_10011F87C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011FB78(uint64_t a1)
{
  memset(&v31, 0, sizeof(v31));
  uint64_t result = sub_10011FFD4(a1, &v31);
  if ((v31.st_mode & 0xB000) != 0x2000)
  {
    *(void *)(a1 + 16) = v31.st_size;
    goto LABEL_17;
  }
  bzero(v34, 0x400uLL);
  bzero(bsdName, 0x400uLL);
  if (fcntl(*(_DWORD *)(a1 + 8), 50, v34) < 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v18 = __error();
    uint64_t v19 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"get path failed", *v18);
  }
  if (!basename_r(v34, bsdName))
  {
    int64_t v20 = __cxa_allocate_exception(0x40uLL);
    long long v21 = __error();
    int v22 = (void *)sub_100003670((uint64_t)v20, (uint64_t)"basename_r failed", *v21);
  }
  CFDictionaryRef v3 = IOBSDNameMatching(kIOMainPortDefault, 0, bsdName);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  io_registry_entry_t v5 = MatchingService;
  if (!MatchingService)
  {
    unsigned __int8 v23 = __cxa_allocate_exception(0x40uLL);
    __int16 v24 = (void *)sub_100003670((uint64_t)v23, (uint64_t)"device not found in registry", 0x13u);
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, @"Size", kCFAllocatorDefault, 0);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (CFProperty && CFGetTypeID(CFProperty) != TypeID)
  {
    uint64_t v25 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(CFProperty);
    __int16 v26 = sub_1000AC5D0(v25);
  }
  CFTypeRef cf = CFProperty;
  CFTypeRef v8 = IORegistryEntryCreateCFProperty(v5, @"Preferred Block Size", kCFAllocatorDefault, 0);
  CFTypeID v9 = CFNumberGetTypeID();
  if (v8 && CFGetTypeID(v8) != v9)
  {
    uint64_t v27 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v8);
    __int16 v28 = sub_10002A5EC(v27);
  }
  CFTypeRef v29 = v8;
  IOObjectRelease(v5);
  if (!cf || (CFTypeID v10 = CFGetTypeID(cf), v10 != CFNumberGetTypeID()))
  {
    int v13 = "device size not found in registry";
LABEL_20:
    uint64_t v14 = 19;
    goto LABEL_22;
  }
  uint64_t valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr))
  {
LABEL_21:
    int v13 = "Failed converting CFNumber to longlong";
    uint64_t v14 = 22;
LABEL_22:
    size_t v15 = __cxa_allocate_exception(0x40uLL);
    void *v15 = &off_1001B6CA0;
    size_t v16 = std::generic_category();
    v15[1] = v14;
    void v15[2] = v16;
    *((unsigned char *)v15 + 24) = 0;
    *((unsigned char *)v15 + 48) = 0;
    v15[7] = v13;
  }
  *(void *)(a1 + 16) = valuePtr;
  if (!v29 || (CFTypeID v11 = CFGetTypeID(v29), v11 != CFNumberGetTypeID()))
  {
    int v13 = "device block size not found in registry";
    goto LABEL_20;
  }
  uint64_t valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)v29, kCFNumberLongLongType, &valuePtr)) {
    goto LABEL_21;
  }
  *(void *)(a1 + 24) = valuePtr;
  sub_1000D526C(&v29);
  uint64_t result = (uint64_t)sub_1000D526C(&cf);
LABEL_17:
  __darwin_ino64_t st_ino = v31.st_ino;
  *(void *)(a1 + 32) = v31.st_dev;
  *(void *)(a1 + 40) = st_ino;
  return result;
}

void sub_10011FF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13)
{
  __cxa_free_exception(v13);
  sub_1000D526C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10011FFD4@<X0>(uint64_t a1@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*(_DWORD *)(a1 + 8), a2);
  if (result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v4 = __error();
    io_registry_entry_t v5 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"fstat failed", *v4);
  }
  return result;
}

void sub_100120040(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100120054@<X0>(uint64_t a1@<X0>, statfs *a2@<X8>)
{
  uint64_t result = fstatfs(*(_DWORD *)(a1 + 8), a2);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v4 = __error();
    io_registry_entry_t v5 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"fstatfs failed", *v4);
  }
  return result;
}

void sub_1001200C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1001200D4(uint64_t a1)
{
  return (*(_WORD *)(a1 + 4) & 0xB000) == 0x2000;
}

BOOL sub_1001200EC(uint64_t a1)
{
  sub_10011FFD4(a1, &v2);
  return (v2.st_mode & 0xB000) == 0x2000;
}

uint64_t sub_100120124(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  sub_100120054(v1, &__src);
  memcpy(__dst, &__src, sizeof(__dst));
  sub_100003BA4((void *)v3, &__dst[72]);
  *(void *)&long long v8 = "FileDescriptor::get_mounted_on_fs() const";
  *((void *)&v8 + 1) = 33;
  int v9 = 2;
  sub_100015158(&__src, &v8);
  sub_100003DF0(&__src.f_mntonname[272], (uint64_t)"File system is ", 15);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  sub_100003DF0(&__src.f_mntonname[272], v5, v6);
  std::ostream::~ostream();
  sub_100015350((uint64_t)&__src);
  return std::ios::~ios();
}

void sub_100120248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1001202C4(uint64_t a1, uint64_t a2)
{
  sub_100120054(a1, &v7);
  int32_t v3 = v7.f_fsid.val[0];
  int32_t v4 = v7.f_fsid.val[1];
  sub_100120054(a2, &v7);
  return v3 == v7.f_fsid.val[0] && v4 == v7.f_fsid.val[1];
}

void sub_100120368(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 144);
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v5 = &v3;
    int32_t v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))sub_10012CAA0);
  }
}

uint64_t sub_1001203C4(int a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = (uint64_t *)*a2;
  }
  if (fcntl(a1, 57, v2) < 0) {
    return -*__error();
  }
  else {
    return 0;
  }
}

off_t sub_100120414(int a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  if (fstatat(a1, (const char *)a2, &v10, 32))
  {
    if (*__error() == 13 || *__error() == 1) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v9);
    sub_100003DF0(v9, (uint64_t)"Cannot stat ", 12);
    int v5 = *(char *)(v2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = *(void *)v2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(v2 + 8);
    }
    sub_100003DF0(v9, v6, v7);
    long long v8 = __error();
    sub_100010C3C((uint64_t)exception, (uint64_t)v9, *v8);
  }
  return v10.st_size;
}

void sub_1001205A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10012062C(uint64_t a1, uint64_t a2)
{
  ssize_t v4 = pwrite(**(_DWORD **)(a1 + 56), *(const void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
  ssize_t v5 = v4;
  if (v4 < 0 || v4 != *(void *)(a2 + 16))
  {
    *(void *)&long long v11 = "int FileLocal::write(const sg_entry &)";
    *((void *)&v11 + 1) = 20;
    int v12 = 16;
    sub_1001207AC(v13, &v11);
    sub_100003DF0(v14, (uint64_t)"Error writing file @ ", 21);
    sub_1001416B8(v14);
    sub_100003DF0(v14, (uint64_t)". returned ", 11);
    std::ostream::operator<<();
    sub_100003DF0(v14, (uint64_t)" with errno: ", 13);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100125E30((uint64_t)v13);
    std::ios::~ios();
    if (v5 == -1) {
      return -*__error();
    }
    else {
      return 4294967291;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 24) + v4;
    uint64_t v7 = (unint64_t *)(*(void *)(a1 + 40) + 64);
    unint64_t v8 = atomic_load(v7);
    if (v8 < v6)
    {
      unint64_t v9 = v8;
      do
      {
        atomic_compare_exchange_strong((atomic_ullong *volatile)v7, &v9, v6);
        if (v9 == v8) {
          break;
        }
        unint64_t v8 = v9;
      }
      while (v9 < v6);
    }
  }
  return v5;
}

void sub_100120798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001208D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1001207AC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012D7B0((uint64_t)a1, a2);
  *a1 = off_1001B27D8;
  a1[45] = &off_1001B28D8;
  a1[46] = &off_1001B2900;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B27D8;
  a1[45] = off_1001B2860;
  a1[46] = off_1001B2888;
  return a1;
}

void sub_1001208AC(_Unwind_Exception *a1)
{
  sub_100125E30(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001208D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100120914(uint64_t a1, uint64_t a2)
{
  ssize_t v3 = pread(**(_DWORD **)(a1 + 56), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
  ssize_t v4 = v3;
  if (v3 < 0 || v3 != *(void *)(a2 + 16))
  {
    *(void *)&long long v6 = "int FileLocal::read(const sg_entry &)";
    *((void *)&v6 + 1) = 19;
    int v7 = 16;
    sub_100120A54(v8, &v6);
    sub_100003DF0(v9, (uint64_t)"Error reading file @ ", 21);
    sub_1001416B8(v9);
    sub_100003DF0(v9, (uint64_t)". returned ", 11);
    std::ostream::operator<<();
    sub_100003DF0(v9, (uint64_t)" with errno: ", 13);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1001265A4((uint64_t)v8);
    std::ios::~ios();
    if (v4 == -1) {
      return -*__error();
    }
    else {
      return 4294967291;
    }
  }
  return v4;
}

void sub_100120A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100120B78((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100120A54(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012D840((uint64_t)a1, a2);
  *a1 = off_1001B29F8;
  a1[45] = &off_1001B2AF8;
  a1[46] = &off_1001B2B20;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B29F8;
  a1[45] = off_1001B2A80;
  a1[46] = off_1001B2AA8;
  return a1;
}

void sub_100120B54(_Unwind_Exception *a1)
{
  sub_1001265A4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100120B78(uint64_t a1)
{
  return a1;
}

uint64_t sub_100120BBC(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (v4 < a2)
  {
    char __buf = 0;
    ssize_t v5 = pwrite(**(_DWORD **)(a1 + 56), &__buf, 1uLL, a2 - 1);
    if (v5 != 1)
    {
      ssize_t v6 = v5;
      *(void *)&long long v8 = "int FileLocal::truncate(uint64_t)";
      *((void *)&v8 + 1) = 23;
      int v9 = 16;
      sub_100083E50(v10, &v8);
      sub_100003DF0(v11, (uint64_t)"Failed to increase file size, pwrite returned ", 46);
      std::ostream::operator<<();
      sub_100003DF0(v11, (uint64_t)" errno: ", 8);
      __error();
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_10008A2B4((uint64_t)v10);
      std::ios::~ios();
      if (v6 != -1) {
        return 4294967291;
      }
      return -*__error();
    }
LABEL_7:
    uint64_t result = 0;
    atomic_store(a2, (unint64_t *)(*(void *)(a1 + 40) + 64));
    return result;
  }
  if (v4 <= a2 || ftruncate(**(_DWORD **)(a1 + 56), a2) != -1) {
    goto LABEL_7;
  }
  *(void *)&long long v8 = "int FileLocal::truncate(uint64_t)";
  *((void *)&v8 + 1) = 23;
  int v9 = 16;
  sub_100120DBC(v10, &v8);
  sub_100003DF0(v11, (uint64_t)"ftruncate failed, errno: ", 25);
  __error();
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_100126D18((uint64_t)v10);
  std::ios::~ios();
  return -*__error();
}

void sub_100120D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100120EE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100120DBC(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012D8D0((uint64_t)a1, a2);
  *a1 = off_1001B2C18;
  a1[45] = &off_1001B2D18;
  a1[46] = &off_1001B2D40;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B2C18;
  a1[45] = off_1001B2CA0;
  a1[46] = off_1001B2CC8;
  return a1;
}

void sub_100120EBC(_Unwind_Exception *a1)
{
  sub_100126D18(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100120EE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100120F24(uint64_t a1, int a2)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v12 + 1) = 20;
    int v13 = 2;
    sub_100077830(v14, &v12);
    sub_100003DF0(v15, (uint64_t)"Calling ", 8);
    sub_100141620(v15, a2);
    sub_100003DF0(v15, (uint64_t)" on ", 4);
    sub_100141960((uint64_t)v15, a1);
    std::ostream::~ostream();
    sub_10007E430((uint64_t)v14);
    std::ios::~ios();
  }
  if (a2 == 1)
  {
    if (fsync(**(_DWORD **)(a1 + 56)) == -1)
    {
      uint64_t v4 = -*__error();
      goto LABEL_6;
    }
    return 0;
  }
  if (a2 == 2) {
    unint64_t v5 = 2;
  }
  else {
    unint64_t v5 = 1;
  }
  if ((*(void *)(*(void *)(a1 + 40) + 56) & v5) != 0)
  {
    if (sub_1000D29B8())
    {
      *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
      *((void *)&v12 + 1) = 20;
      int v13 = 2;
      sub_100121314(v14, &v12);
      sub_100141620(v15, a2);
      sub_100003DF0(v15, (uint64_t)" is not supported", 17);
      std::ostream::~ostream();
      sub_10012748C((uint64_t)v14);
      std::ios::~ios();
    }
    return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 16))(a1, a2 != 2);
  }
  int v7 = **(_DWORD **)(a1 + 56);
  if (a2 == 2) {
    int v8 = fcntl(v7, 51, 0);
  }
  else {
    int v8 = fcntl(v7, 85, 0);
  }
  if (v8 != -1) {
    return 0;
  }
  stat v10 = __error();
  uint64_t v4 = -*v10;
  unsigned int v11 = 45 - *v10;
  if (v11 <= 0x17 && ((1 << v11) & 0x900001) != 0)
  {
    atomic_fetch_or_explicit((atomic_ullong *volatile)(*(void *)(a1 + 40) + 56), v5, memory_order_relaxed);
    *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v12 + 1) = 20;
    int v13 = 0;
    sub_10012147C(v14, &v12);
    sub_100141620(v15, a2);
    sub_100003DF0(v15, (uint64_t)" is not supported (err code ", 28);
    __error();
    std::ostream::operator<<();
    sub_100003DF0(v15, (uint64_t)")", 1);
    std::ostream::~ostream();
    sub_100127C00((uint64_t)v14);
    std::ios::~ios();
    if (a2 == 2) {
      return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 16))(a1, 0);
    }
    atomic_fetch_or_explicit((atomic_ullong *volatile)(*(void *)(a1 + 40) + 56), 2uLL, memory_order_relaxed);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 1);
  }
LABEL_6:
  if (v4)
  {
    *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v12 + 1) = 20;
    int v13 = 16;
    sub_1001215E4(v14, &v12);
    sub_100141620(v15, a2);
    sub_100003DF0(v15, (uint64_t)" failed wih error ", 18);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100128374((uint64_t)v14);
    std::ios::~ios();
  }
  return v4;
}

void sub_1001212D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001215A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100121314(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012D960((uint64_t)a1, a2);
  *a1 = off_1001B2E38;
  a1[45] = &off_1001B2F38;
  a1[46] = &off_1001B2F60;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B2E38;
  a1[45] = off_1001B2EC0;
  a1[46] = off_1001B2EE8;
  return a1;
}

void sub_100121414(_Unwind_Exception *a1)
{
  sub_10012748C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100121438(uint64_t a1)
{
  return a1;
}

void *sub_10012147C(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012D9F0((uint64_t)a1, a2);
  *a1 = off_1001B3058;
  a1[45] = &off_1001B3158;
  a1[46] = &off_1001B3180;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3058;
  a1[45] = off_1001B30E0;
  a1[46] = off_1001B3108;
  return a1;
}

void sub_10012157C(_Unwind_Exception *a1)
{
  sub_100127C00(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001215A0(uint64_t a1)
{
  return a1;
}

void *sub_1001215E4(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012DA80((uint64_t)a1, a2);
  *a1 = off_1001B3278;
  a1[45] = &off_1001B3378;
  a1[46] = &off_1001B33A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3278;
  a1[45] = off_1001B3300;
  a1[46] = off_1001B3328;
  return a1;
}

void sub_1001216E4(_Unwind_Exception *a1)
{
  sub_100128374(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100121708(uint64_t a1)
{
  return a1;
}

uint64_t sub_10012174C(uint64_t a1, unint64_t a2, size_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  sub_100120368(v6);
  size_t v7 = *(void *)(v6 + 72);
  int v8 = *(unsigned __int8 *)(v6 + 88);
  uint64_t v9 = *(void *)(a1 + 40);
  sub_100120368(v9);
  if (!*(unsigned char *)(v9 + 136) || !v8)
  {
    *(void *)&long long v25 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
    *((void *)&v25 + 1) = 26;
    LODWORD(v26) = 0;
    sub_100121C3C(&v27, &v25);
    sub_100003DF0(v33, (uint64_t)"fd block size retrieval failed (err code ", 41);
    std::ostream::operator<<();
    sub_100003DF0(v33, (uint64_t)")", 1);
    std::ostream::~ostream();
    sub_100128AE8((uint64_t)&v27);
    goto LABEL_14;
  }
  stat v10 = *(void **)(v9 + 96);
  unint64_t v11 = (a2 + v7 - 1) / v7 * v7;
  unint64_t v12 = a3 + a2;
  if (a2 <= v11 && v11 < v12)
  {
    unint64_t v14 = a2 - v11 + a3;
    size_t v15 = v14 / v7 * v7;
    unint64_t v16 = v14 == v14 % v7 ? 0 : (a2 + v7 - 1) / v7 * v7;
    if (v14 != v14 % v7)
    {
      *(void *)&long long v25 = 0;
      *((void *)&v25 + 1) = v16;
      size_t v26 = v14 / v7 * v7;
      size_t v19 = fcntl(**(_DWORD **)(a1 + 56), 99, &v25);
      if (!v19)
      {
        if (v16 != a2)
        {
          int64_t v20 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
          uint64_t v27 = v10;
          __int16 v28 = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v29 = v16 - a2;
          unint64_t v30 = a2;
          unint64_t v31 = v16 - a2;
          char v32 = 0;
          size_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 80))(a1, &v27);
          if (v28) {
            sub_100010A48(v28);
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(void *)&long long v23 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((void *)&v23 + 1) = 26;
            int v24 = 16;
            sub_100121F0C(&v27, &v23);
            sub_100003DF0(v33, (uint64_t)"Write zeros to unmap unaligned start region failed (err code", 60);
            __error();
            std::ostream::operator<<();
            sub_100003DF0(v33, (uint64_t)")", 1);
            sub_100122030((uint64_t)&v27);
            return v7;
          }
        }
        if (v15 + v16 < v12)
        {
          size_t v21 = a3 - v15 - (v16 - a2);
          int v22 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
          uint64_t v27 = v10;
          __int16 v28 = v22;
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v29 = v21;
          unint64_t v30 = v15 + v16;
          unint64_t v31 = v21;
          char v32 = 0;
          size_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 80))(a1, &v27);
          if (v28) {
            sub_100010A48(v28);
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(void *)&long long v23 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((void *)&v23 + 1) = 26;
            int v24 = 16;
            sub_100122074(&v27, &v23);
            sub_100003DF0(v33, (uint64_t)"Write zeros to unmap unaligned end region failed (err code", 58);
            __error();
            std::ostream::operator<<();
            sub_100003DF0(v33, (uint64_t)")", 1);
            sub_100122198((uint64_t)&v27);
            return v7;
          }
        }
        return 0;
      }
      size_t v7 = v19;
      *(void *)&long long v23 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
      *((void *)&v23 + 1) = 26;
      int v24 = 0;
      sub_100121DA4(&v27, &v23);
      sub_100003DF0(v33, (uint64_t)"Punch hole is not supported (err code ", 38);
      __error();
      std::ostream::operator<<();
      sub_100003DF0(v33, (uint64_t)")", 1);
      std::ostream::~ostream();
      sub_10012925C((uint64_t)&v27);
LABEL_14:
      std::ios::~ios();
      return v7;
    }
  }
  ssize_t v17 = sub_1001221DC(a1, a2, a3, v7, v10);
  if (v17 == a3) {
    return 0;
  }
  size_t v7 = v17;
  *(void *)&long long v25 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
  *((void *)&v25 + 1) = 26;
  LODWORD(v26) = 16;
  sub_100122398(&v27, &v25);
  sub_100003DF0(v33, (uint64_t)"Write zeros to unmap region failed (err code", 44);
  __error();
  std::ostream::operator<<();
  sub_100003DF0(v33, (uint64_t)")", 1);
  std::ostream::~ostream();
  sub_10012A8B8((uint64_t)&v27);
  std::ios::~ios();
  if ((v7 & 0x8000000000000000) == 0) {
    return 4294967291;
  }
  else {
    return v7;
  }
}

void sub_100121BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_100010A48(a17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100121C3C(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012DB10((uint64_t)a1, a2);
  *a1 = off_1001B3498;
  a1[45] = &off_1001B3598;
  a1[46] = &off_1001B35C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3498;
  a1[45] = off_1001B3520;
  a1[46] = off_1001B3548;
  return a1;
}

void sub_100121D3C(_Unwind_Exception *a1)
{
  sub_100128AE8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100121D60(uint64_t a1)
{
  return a1;
}

void *sub_100121DA4(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012DBA0((uint64_t)a1, a2);
  *a1 = off_1001B36B8;
  a1[45] = &off_1001B37B8;
  a1[46] = &off_1001B37E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B36B8;
  a1[45] = off_1001B3740;
  a1[46] = off_1001B3768;
  return a1;
}

void sub_100121EA4(_Unwind_Exception *a1)
{
  sub_10012925C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100121EC8(uint64_t a1)
{
  return a1;
}

void *sub_100121F0C(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012DC30((uint64_t)a1, a2);
  *a1 = off_1001B38D8;
  a1[45] = &off_1001B39D8;
  a1[46] = &off_1001B3A00;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B38D8;
  a1[45] = off_1001B3960;
  a1[46] = off_1001B3988;
  return a1;
}

void sub_10012200C(_Unwind_Exception *a1)
{
  sub_1001299D0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100122030(uint64_t a1)
{
  return a1;
}

void *sub_100122074(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012DCC0((uint64_t)a1, a2);
  *a1 = off_1001B3AF8;
  a1[45] = &off_1001B3BF8;
  a1[46] = &off_1001B3C20;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3AF8;
  a1[45] = off_1001B3B80;
  a1[46] = off_1001B3BA8;
  return a1;
}

void sub_100122174(_Unwind_Exception *a1)
{
  sub_10012A144(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100122198(uint64_t a1)
{
  return a1;
}

ssize_t sub_1001221DC(uint64_t a1, off_t a2, size_t a3, size_t a4, void *a5)
{
  size_t v7 = a3;
  int v22 = 0;
  long long v23 = 0;
  int v24 = 0;
  sub_100122500((void **)&v22, (a3 + a4 - 1) / a4 * a4);
  if (v7)
  {
    stat v10 = v23;
    do
    {
      if (v7 >= a4) {
        size_t v11 = a4;
      }
      else {
        size_t v11 = v7;
      }
      if (v10 >= v24)
      {
        uint64_t v12 = v10 - v22;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_10001796C();
        }
        unint64_t v13 = ((char *)v24 - (char *)v22) >> 3;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)((char *)v24 - (char *)v22) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          size_t v15 = (char *)sub_100017984((uint64_t)&v24, v14);
        }
        else {
          size_t v15 = 0;
        }
        unint64_t v16 = (iovec *)&v15[16 * v12];
        v16->iov_base = a5;
        v16->iov_len = v11;
        uint64_t v18 = v22;
        ssize_t v17 = v23;
        size_t v19 = v16;
        if (v23 != v22)
        {
          do
          {
            v19[-1] = v17[-1];
            --v19;
            --v17;
          }
          while (v17 != v18);
          ssize_t v17 = v22;
        }
        stat v10 = v16 + 1;
        int v22 = v19;
        long long v23 = v16 + 1;
        int v24 = (iovec *)&v15[16 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        v10->iov_base = a5;
        v10->iov_len = v11;
        ++v10;
      }
      long long v23 = v10;
      v7 -= v11;
    }
    while (v7);
  }
  else
  {
    stat v10 = v23;
  }
  ssize_t v20 = pwritev(**(_DWORD **)(a1 + 56), v22, (unint64_t)((char *)v10 - (char *)v22) >> 4, a2);
  if (v22)
  {
    long long v23 = v22;
    operator delete(v22);
  }
  return v20;
}

void sub_100122374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100122398(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012DD50((uint64_t)a1, a2);
  *a1 = off_1001B3D18;
  a1[45] = &off_1001B3E18;
  a1[46] = &off_1001B3E40;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3D18;
  a1[45] = off_1001B3DA0;
  a1[46] = off_1001B3DC8;
  return a1;
}

void sub_100122498(_Unwind_Exception *a1)
{
  sub_10012A8B8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001224BC(uint64_t a1)
{
  return a1;
}

void sub_100122500(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_10001796C();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_100017984(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    size_t v11 = (char *)*a1;
    stat v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      stat v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_1001225B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v1 + 48)
    || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0 && sub_10004CC34(*(void *)(a1 + 40)))
  {
    return 0;
  }
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (v4) {
    int v5 = 6;
  }
  else {
    int v5 = 5;
  }
  if (!flock(**(_DWORD **)(a1 + 56), v5))
  {
    *(void *)&long long v8 = "int FileLocal::lock()";
    *((void *)&v8 + 1) = 19;
    int v9 = 0;
    sub_10005C748(v10, &v8);
    sub_100003DF0(v11, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<();
    sub_100003DF0(v11, (uint64_t)") is locked", 11);
    std::ostream::~ostream();
    sub_10005C940((uint64_t)v10);
    std::ios::~ios();
    uint64_t result = 0;
    *(unsigned char *)(v1 + 48) = 1;
    return result;
  }
  if (*__error() != 35)
  {
    *(void *)&long long v8 = "int FileLocal::lock()";
    *((void *)&v8 + 1) = 19;
    int v9 = 0;
    sub_1000B3C00(v10, &v8);
    sub_100003DF0(v11, (uint64_t)"flock returned errno ", 21);
    __error();
    std::ostream::operator<<();
    sub_100003DF0(v11, (uint64_t)", keeping file unlocked", 23);
    std::ostream::~ostream();
    sub_1000C0F9C((uint64_t)v10);
    std::ios::~ios();
    return 0;
  }
  *(void *)&long long v8 = "int FileLocal::lock()";
  *((void *)&v8 + 1) = 19;
  int v9 = 16;
  sub_100122898(v10, &v8);
  sub_100003DF0(v11, (uint64_t)"Cannot acquire ", 15);
  if (v4) {
    uint64_t v6 = "exclusive";
  }
  else {
    uint64_t v6 = "shared";
  }
  if (v4) {
    uint64_t v7 = 9;
  }
  else {
    uint64_t v7 = 6;
  }
  sub_100003DF0(v11, (uint64_t)v6, v7);
  sub_100003DF0(v11, (uint64_t)" lock, errno ", 13);
  __error();
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_10012B02C((uint64_t)v10);
  std::ios::~ios();
  return -*__error();
}

void sub_100122860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001229BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100122898(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012DDE0((uint64_t)a1, a2);
  *a1 = off_1001B3F38;
  a1[45] = &off_1001B4038;
  a1[46] = &off_1001B4060;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3F38;
  a1[45] = off_1001B3FC0;
  a1[46] = off_1001B3FE8;
  return a1;
}

void sub_100122998(_Unwind_Exception *a1)
{
  sub_10012B02C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001229BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100122A00(uint64_t a1)
{
  return sub_1001225B4(a1 - 24);
}

uint64_t sub_100122A08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v1 + 48)) {
    return 0;
  }
  if (flock(**(_DWORD **)(a1 + 56), 8))
  {
    *(void *)&long long v3 = "int FileLocal::unlock_all()";
    *((void *)&v3 + 1) = 25;
    int v4 = 16;
    sub_100122BAC(v5, &v3);
    sub_100003DF0(v6, (uint64_t)"Failed unlocking file with fd ", 30);
    std::ostream::operator<<();
    sub_100003DF0(v6, (uint64_t)", errno ", 8);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10012B7A0((uint64_t)v5);
    std::ios::~ios();
    return -*__error();
  }
  else
  {
    *(void *)&long long v3 = "int FileLocal::unlock_all()";
    *((void *)&v3 + 1) = 25;
    int v4 = 0;
    sub_1000B4034(v5, &v3);
    sub_100003DF0(v6, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<();
    sub_100003DF0(v6, (uint64_t)") is unlocked", 13);
    std::ostream::~ostream();
    sub_1000C1E84((uint64_t)v5);
    std::ios::~ios();
    uint64_t result = 0;
    *(unsigned char *)(v1 + 48) = 0;
  }
  return result;
}

void sub_100122B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000B4158((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100122BAC(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10012DE70((uint64_t)a1, a2);
  *a1 = off_1001B4158;
  a1[45] = &off_1001B4258;
  a1[46] = &off_1001B4280;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4158;
  a1[45] = off_1001B41E0;
  a1[46] = off_1001B4208;
  return a1;
}

void sub_100122CAC(_Unwind_Exception *a1)
{
  sub_10012B7A0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100122CD0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100122D14(uint64_t a1)
{
  return sub_100122A08(a1 - 24);
}

uint64_t sub_100122D1C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 40) + 48);
}

uint64_t sub_100122D28(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 48);
}

uint64_t sub_100122D34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t result = *(unsigned __int8 *)(v1 + 48);
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

void sub_100122D44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    int v38 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 49);
    long long v37 = (void *)(a1 + 64);
    long long v3 = *(void **)(a1 + 64);
    int v4 = v3;
    while (1)
    {
      long long v41 = (iovec *)v43;
      uint64_t v5 = v4[2];
      v43[0] = *v4;
      v43[1] = v5;
      long long v42 = xmmword_10016D300;
      uint64_t v6 = &v3[8 * v1];
      uint64_t v40 = &v41;
      if (v4 == v6)
      {
        uint64_t v7 = 1;
        unint64_t v8 = (unint64_t)v4;
      }
      else
      {
        uint64_t v7 = 1;
        unint64_t v8 = (unint64_t)v4;
        if (v4 + 8 != v6)
        {
          int v9 = v4;
          while (v9[2] + v9[3] == v9[11] && *((_DWORD *)v9 + 12) == *((_DWORD *)v9 + 28))
          {
            *(void *)&long long v39 = v9[8];
            *((void *)&v39 + 1) = v9[10];
            sub_10012DF00((uint64_t *)&v40, &v39);
            unint64_t v8 = (unint64_t)(v9 + 8);
            stat v10 = v9 + 16;
            v9 += 8;
            if (v10 == v6) {
              goto LABEL_11;
            }
          }
          unint64_t v8 = (unint64_t)v9;
LABEL_11:
          uint64_t v7 = v42;
        }
      }
      unint64_t v11 = v8 + 64;
      int v12 = *((_DWORD *)v4 + 12);
      if (v12 == 1)
      {
        uint64_t v15 = v4[3];
        int v16 = **(_DWORD **)(a1 + 56);
        if (v7 == 1) {
          ssize_t v17 = pwrite(v16, v41->iov_base, v41->iov_len, v4[3]);
        }
        else {
          ssize_t v17 = pwritev(v16, v41, (v11 - (unint64_t)v4) >> 6, v4[3]);
        }
        uint64_t v19 = v17;
        if (v17 < 1) {
          goto LABEL_43;
        }
        unint64_t v28 = v17 + v15;
        uint64_t v29 = *(void *)(a1 + 40);
        unint64_t v30 = atomic_load((unint64_t *)(v29 + 64));
        if (v30 < v17 + v15)
        {
          unint64_t v31 = v30;
          do
          {
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v29 + 64), &v31, v28);
            if (v31 == v30) {
              break;
            }
            unint64_t v30 = v31;
          }
          while (v31 < v28);
LABEL_43:
          if (v19 == -1) {
            uint64_t v19 = -(uint64_t)*__error();
          }
        }
      }
      else
      {
        if (!v12)
        {
          off_t v13 = v4[3];
          if (v7 == 1)
          {
            ssize_t v14 = pread(**(_DWORD **)(a1 + 56), v41->iov_base, v41->iov_len, v4[3]);
LABEL_42:
            uint64_t v19 = v14;
            goto LABEL_43;
          }
          if (!v38)
          {
            ssize_t v14 = preadv(**(_DWORD **)(a1 + 56), v41, (v11 - (unint64_t)v4) >> 6, v13);
            goto LABEL_42;
          }
          uint64_t v18 = v11 - (void)v4;
          if ((v11 - (void)v4) << 26)
          {
            uint64_t v19 = 0;
            uint64_t v20 = 0;
            int v21 = **(_DWORD **)(a1 + 56);
            uint64_t v22 = 16 * (int)(v18 >> 6);
            p_iov_len = &v41->iov_len;
            do
            {
              if ((v20 & 0x8000000000000000) == 0)
              {
                ssize_t v24 = pread(v21, (void *)*(p_iov_len - 1), *p_iov_len, v20 + v13);
                size_t v25 = *p_iov_len;
                uint64_t v26 = v19 + v24;
                uint64_t v27 = -5;
                if (v24 == -1) {
                  uint64_t v27 = -1;
                }
                if (v24 == v25) {
                  v19 += v24;
                }
                else {
                  uint64_t v19 = v27;
                }
                if (v24 == v25) {
                  uint64_t v20 = v26;
                }
                else {
                  uint64_t v20 = v27;
                }
              }
              p_iov_len += 2;
              v22 -= 16;
            }
            while (v22);
            goto LABEL_43;
          }
        }
        uint64_t v19 = 0;
      }
      char v32 = v4 + 7;
      do
      {
        uint64_t v33 = v19;
        if (v19 >= 1)
        {
          if (*(v32 - 5) >= v19) {
            uint64_t v33 = v19;
          }
          else {
            uint64_t v33 = *(v32 - 5);
          }
        }
        uint64_t v34 = *v32;
        *(_DWORD *)uint64_t v34 = v33;
        *(unsigned char *)(v34 + 4) = 1;
        sub_100042BDC((uint64_t)v32);
        v19 -= v33 & ~(v33 >> 63);
        long long v35 = v32 + 8;
        uint64_t v36 = v32 + 1;
        v32 += 8;
      }
      while ((unint64_t)v36 <= v8);
      if (*((void *)&v42 + 1))
      {
        if (v43 != (void *)v41) {
          operator delete(v41);
        }
      }
      int v4 = v35 - 7;
      long long v3 = *(void **)(a1 + 64);
      uint64_t v1 = *(void *)(a1 + 72);
      if (v35 - 7 == &v3[8 * v1])
      {
        sub_10012DF6C(v37);
        return;
      }
    }
  }
}

void sub_100123098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  if (a18)
  {
    if (v18 != __p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1001230D0(uint64_t a1, uint64_t a2)
{
  return sub_1001202C4(*(void *)(a1 + 40), *(void *)(a2 + 40));
}

uint64_t sub_1001230DC(uint64_t a1)
{
  *(void *)a1 = off_1001B1C48;
  *(void *)(a1 + 24) = off_1001B1D28;
  *(void *)(a1 + 32) = off_1001B1D60;
  if (futimes(**(_DWORD **)(a1 + 56), 0))
  {
    *(void *)&long long v5 = "PurgeableFileBackend::~PurgeableFileBackend()";
    *((void *)&v5 + 1) = 43;
    int v6 = 16;
    sub_100123294(v7, &v5);
    sub_100003DF0(v8, (uint64_t)"futimes failed on ", 18);
    sub_100141960((uint64_t)v8, a1);
    sub_100003DF0(v8, (uint64_t)", errno ", 8);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10012BF14((uint64_t)v7);
    std::ios::~ios();
  }
  *(void *)a1 = off_1001B1DB0;
  *(void *)(a1 + 24) = off_1001B1E90;
  *(void *)(a1 + 32) = off_1001B1EC8;
  sub_10004CD98(a1 + 64);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100010A48(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *sub_100123294(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10012DFCC((uint64_t)a1, a2);
  *a1 = off_1001B4378;
  a1[45] = &off_1001B4478;
  a1[46] = &off_1001B44A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4378;
  a1[45] = off_1001B4400;
  a1[46] = off_1001B4428;
  return a1;
}

void sub_100123394(_Unwind_Exception *a1)
{
  sub_10012BF14(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001233B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100123400(uint64_t a1)
{
  return sub_1001230DC(a1 - 24);
}

uint64_t sub_100123408(uint64_t a1)
{
  return sub_1001230DC(a1 - 32);
}

void sub_100123410(uint64_t a1)
{
  sub_1001230DC(a1);

  operator delete();
}

void sub_100123448(uint64_t a1)
{
  sub_1001230DC(a1 - 24);

  operator delete();
}

void sub_100123484(uint64_t a1)
{
  sub_1001230DC(a1 - 32);

  operator delete();
}

uint64_t sub_1001234C0(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  if (!*(void *)a1) {
    return 0xFFFFFFFFLL;
  }
  if (!v3)
  {
    if (v6)
    {
      int v4 = *(std::__shared_weak_count **)(a1 + 8);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v6 + 176))(v6);
      goto LABEL_10;
    }
    return 0xFFFFFFFFLL;
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (**v3)(v3);
LABEL_10:
  uint64_t v7 = v5;
  if (v4) {
    sub_100010A48(v4);
  }
  return v7;
}

void sub_1001235F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100010A48(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012360C(void *a1)
{
  *a1 = off_1001B1DB0;
  a1[3] = off_1001B1E90;
  a1[4] = off_1001B1EC8;
  sub_10004CD98((uint64_t)(a1 + 8));
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_100010A48(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

BOOL sub_1001236CC(uint64_t a1)
{
  return sub_1000A2988(*(void *)(a1 + 40));
}

unint64_t sub_1001236D4(uint64_t a1)
{
  return atomic_load((unint64_t *)(*(void *)(a1 + 40) + 64));
}

uint64_t sub_1001236E4(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 40) + 12);
}

void *sub_1001236F0(uint64_t a1, void *a2)
{
  sub_100003DF0(a2, (uint64_t)"file(", 5);
  uint64_t v2 = (void *)std::ostream::operator<<();

  return sub_100003DF0(v2, (uint64_t)")", 1);
}

double sub_100123750@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10012C3F8(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

unint64_t sub_100123790@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v16) = 0;
  BYTE4(v16) = 0;
  ssize_t v17 = 0;
  *(void *)&v18[0] = sub_10014119C((unint64_t)&v16);
  int v6 = sub_100141268((unint64_t)&v16);
  long long v23 = &v16;
  *((void *)&v18[0] + 1) = v6;
  *(void *)&v18[1] = &v23;
  sub_100042C50((unint64_t)v21, (uint64_t)&v16);
  uint64_t v7 = v23;
  uint64_t v22 = v23;
  v23[4] = (uint64_t)&v22;
  uint64_t v8 = *a2;
  int v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  ssize_t v17 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = v22;
  }
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 25);
  v18[0] = *((_OWORD *)a2 + 1);
  int v19 = 0;
  uint64_t v20 = v7;
  uint64_t v22 = 0;
  void v7[4] = (uint64_t)&v20;
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[8] + (v10 << 6);
  if (v10 == a1[10])
  {
    sub_10012C57C(a1 + 8, v11, 1, (uint64_t)&v16, &v23);
    if (v20) {
      v20[4] = 0;
    }
  }
  else
  {
    *(void *)uint64_t v11 = v8;
    *(void *)(v11 + 8) = v9;
    uint64_t v16 = 0;
    ssize_t v17 = 0;
    long long v12 = v18[0];
    *(_OWORD *)(v11 + 25) = *(_OWORD *)((char *)v18 + 9);
    *(_OWORD *)(v11 + 16) = v12;
    int v13 = v19;
    *(void *)(v11 + 56) = v20;
    uint64_t v14 = v11 + 56;
    *(_DWORD *)(v14 - 8) = v13;
    uint64_t v20 = 0;
    *(void *)(*(void *)v14 + 32) = v14;
    ++a1[9];
  }
  if (v17) {
    sub_100010A48(v17);
  }
  unint64_t result = sub_100042C50(a3, (uint64_t)v21);
  if (v22) {
    v22[4] = 0;
  }
  return result;
}

void sub_1001238FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17) {
    *(void *)(a17 + 32) = 0;
  }
  if (a11) {
    sub_100010A48(a11);
  }
  if (a23) {
    *(void *)(a23 + 32) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_100123934()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x10012392CLL);
  }
  JUMPOUT(0x100123928);
}

unint64_t sub_100123944@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v16) = 0;
  BYTE4(v16) = 0;
  ssize_t v17 = 0;
  *(void *)&v18[0] = sub_10014119C((unint64_t)&v16);
  int v6 = sub_100141268((unint64_t)&v16);
  long long v23 = &v16;
  *((void *)&v18[0] + 1) = v6;
  *(void *)&v18[1] = &v23;
  sub_100042C50((unint64_t)v21, (uint64_t)&v16);
  uint64_t v7 = v23;
  uint64_t v22 = v23;
  v23[4] = (uint64_t)&v22;
  uint64_t v8 = *a2;
  int v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  ssize_t v17 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = v22;
  }
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 25);
  v18[0] = *((_OWORD *)a2 + 1);
  int v19 = 1;
  uint64_t v20 = v7;
  uint64_t v22 = 0;
  void v7[4] = (uint64_t)&v20;
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[8] + (v10 << 6);
  if (v10 == a1[10])
  {
    sub_10012C57C(a1 + 8, v11, 1, (uint64_t)&v16, &v23);
    if (v20) {
      v20[4] = 0;
    }
  }
  else
  {
    *(void *)uint64_t v11 = v8;
    *(void *)(v11 + 8) = v9;
    uint64_t v16 = 0;
    ssize_t v17 = 0;
    long long v12 = v18[0];
    *(_OWORD *)(v11 + 25) = *(_OWORD *)((char *)v18 + 9);
    *(_OWORD *)(v11 + 16) = v12;
    int v13 = v19;
    *(void *)(v11 + 56) = v20;
    uint64_t v14 = v11 + 56;
    *(_DWORD *)(v14 - 8) = v13;
    uint64_t v20 = 0;
    *(void *)(*(void *)v14 + 32) = v14;
    ++a1[9];
  }
  if (v17) {
    sub_100010A48(v17);
  }
  unint64_t result = sub_100042C50(a3, (uint64_t)v21);
  if (v22) {
    v22[4] = 0;
  }
  return result;
}

void sub_100123AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17) {
    *(void *)(a17 + 32) = 0;
  }
  if (a11) {
    sub_100010A48(a11);
  }
  if (a23) {
    *(void *)(a23 + 32) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_100123AEC()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x100123AE4);
  }
  JUMPOUT(0x100123AE0);
}

uint64_t sub_100123AFC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 32);
}

uint64_t sub_100123B08(uint64_t a1)
{
  return **(unsigned int **)(a1 + 56);
}

void sub_100123B14(void *a1)
{
  *(a1 - 3) = off_1001B1DB0;
  *a1 = off_1001B1E90;
  a1[1] = off_1001B1EC8;
  sub_10004CD98((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100010A48(v2);
  }
  long long v3 = (std::__shared_weak_count *)*(a1 - 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_100123BB0(void *a1)
{
  *(a1 - 3) = off_1001B1DB0;
  *a1 = off_1001B1E90;
  a1[1] = off_1001B1EC8;
  sub_10004CD98((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100010A48(v2);
  }
  long long v3 = (std::__shared_weak_count *)*(a1 - 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

uint64_t sub_100123C70(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

void sub_100123C7C(void *a1)
{
  *(a1 - 4) = off_1001B1DB0;
  *(a1 - 1) = off_1001B1E90;
  *a1 = off_1001B1EC8;
  sub_10004CD98((uint64_t)(a1 + 4));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100010A48(v2);
  }
  long long v3 = (std::__shared_weak_count *)*(a1 - 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_100123D14(void *a1)
{
  *(a1 - 4) = off_1001B1DB0;
  *(a1 - 1) = off_1001B1E90;
  *a1 = off_1001B1EC8;
  sub_10004CD98((uint64_t)(a1 + 4));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100010A48(v2);
  }
  long long v3 = (std::__shared_weak_count *)*(a1 - 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

uint64_t sub_100123DD0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100124060(v1);

  return std::ios::~ios();
}

uint64_t sub_100123E1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100124060(v1);

  return std::ios::~ios();
}

void sub_100123E7C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100124060(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100123EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100123F1C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100123F84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100124060(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100123FE8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100124060(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100124060(uint64_t a1)
{
  *(void *)a1 = off_1001B20F0;
  sub_10012419C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10012419C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10012435C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001242F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100124324(uint64_t a1)
{
  sub_100124060(a1);

  operator delete();
}

int *sub_10012435C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 66;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 66;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100124544(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001247D4(v1);

  return std::ios::~ios();
}

uint64_t sub_100124590(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001247D4(v1);

  return std::ios::~ios();
}

void sub_1001245F0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001247D4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100124658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100124690(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1001246F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001247D4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10012475C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001247D4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001247D4(uint64_t a1)
{
  *(void *)a1 = off_1001B2310;
  sub_100124910(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100124910(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100124AD0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100124A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100124A98(uint64_t a1)
{
  sub_1001247D4(a1);

  operator delete();
}

int *sub_100124AD0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 78;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 78;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100124CB8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100124F48(v1);

  return std::ios::~ios();
}

uint64_t sub_100124D04(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100124F48(v1);

  return std::ios::~ios();
}

void sub_100124D64(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100124F48(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100124DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100124E04(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100124E6C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100124F48(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100124ED0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100124F48(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100124F48(uint64_t a1)
{
  *(void *)a1 = off_1001B2530;
  sub_100125084(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100125084(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100125244((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001251E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012520C(uint64_t a1)
{
  sub_100124F48(a1);

  operator delete();
}

int *sub_100125244(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 95;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 95;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012542C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001256BC(v1);

  return std::ios::~ios();
}

uint64_t sub_100125478(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001256BC(v1);

  return std::ios::~ios();
}

void sub_1001254D8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001256BC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100125540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100125578(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1001255E0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001256BC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100125644(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001256BC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001256BC(uint64_t a1)
{
  *(void *)a1 = off_1001B2750;
  sub_1001257F8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1001257F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1001259B8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100125954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100125980(uint64_t a1)
{
  sub_1001256BC(a1);

  operator delete();
}

int *sub_1001259B8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 103;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 103;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100125BA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100125E30(v1);

  return std::ios::~ios();
}

uint64_t sub_100125BEC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100125E30(v1);

  return std::ios::~ios();
}

void sub_100125C4C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100125E30(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100125CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100125CEC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100125D54(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100125E30(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100125DB8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100125E30(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100125E30(uint64_t a1)
{
  *(void *)a1 = off_1001B2970;
  sub_100125F6C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100125F6C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10012612C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001260C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001260F4(uint64_t a1)
{
  sub_100125E30(a1);

  operator delete();
}

int *sub_10012612C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 298;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 298;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100126314(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001265A4(v1);

  return std::ios::~ios();
}

uint64_t sub_100126360(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001265A4(v1);

  return std::ios::~ios();
}

void sub_1001263C0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001265A4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100126428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100126460(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1001264C8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001265A4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10012652C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001265A4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001265A4(uint64_t a1)
{
  *(void *)a1 = off_1001B2B90;
  sub_1001266E0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1001266E0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1001268A0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012683C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100126868(uint64_t a1)
{
  sub_1001265A4(a1);

  operator delete();
}

int *sub_1001268A0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 313;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 313;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100126A88(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100126D18(v1);

  return std::ios::~ios();
}

uint64_t sub_100126AD4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100126D18(v1);

  return std::ios::~ios();
}

void sub_100126B34(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100126D18(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100126B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100126BD4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100126C3C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100126D18(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100126CA0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100126D18(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100126D18(uint64_t a1)
{
  *(void *)a1 = off_1001B2DB0;
  sub_100126E54(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100126E54(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100127014((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100126FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100126FDC(uint64_t a1)
{
  sub_100126D18(a1);

  operator delete();
}

int *sub_100127014(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 336;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 336;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1001271FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012748C(v1);

  return std::ios::~ios();
}

uint64_t sub_100127248(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012748C(v1);

  return std::ios::~ios();
}

void sub_1001272A8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012748C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100127310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100127348(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1001273B0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012748C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100127414(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012748C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012748C(uint64_t a1)
{
  *(void *)a1 = off_1001B2FD0;
  sub_1001275C8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1001275C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100127788((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100127724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100127750(uint64_t a1)
{
  sub_10012748C(a1);

  operator delete();
}

int *sub_100127788(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 381;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 381;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100127970(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100127C00(v1);

  return std::ios::~ios();
}

uint64_t sub_1001279BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100127C00(v1);

  return std::ios::~ios();
}

void sub_100127A1C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100127C00(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100127A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100127ABC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100127B24(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100127C00(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100127B88(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100127C00(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100127C00(uint64_t a1)
{
  *(void *)a1 = off_1001B31F0;
  sub_100127D3C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100127D3C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100127EFC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100127E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100127EC4(uint64_t a1)
{
  sub_100127C00(a1);

  operator delete();
}

int *sub_100127EFC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 388;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 388;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1001280E4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100128374(v1);

  return std::ios::~ios();
}

uint64_t sub_100128130(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100128374(v1);

  return std::ios::~ios();
}

void sub_100128190(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100128374(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001281F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100128230(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100128298(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100128374(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1001282FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100128374(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100128374(uint64_t a1)
{
  *(void *)a1 = off_1001B3410;
  sub_1001284B0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1001284B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100128670((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012860C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100128638(uint64_t a1)
{
  sub_100128374(a1);

  operator delete();
}

int *sub_100128670(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 398;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 398;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100128858(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100128AE8(v1);

  return std::ios::~ios();
}

uint64_t sub_1001288A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100128AE8(v1);

  return std::ios::~ios();
}

void sub_100128904(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100128AE8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012896C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001289A4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100128A0C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100128AE8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100128A70(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100128AE8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100128AE8(uint64_t a1)
{
  *(void *)a1 = off_1001B3630;
  sub_100128C24(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100128C24(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100128DE4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100128D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100128DAC(uint64_t a1)
{
  sub_100128AE8(a1);

  operator delete();
}

int *sub_100128DE4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 411;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 411;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100128FCC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012925C(v1);

  return std::ios::~ios();
}

uint64_t sub_100129018(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012925C(v1);

  return std::ios::~ios();
}

void sub_100129078(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012925C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001290E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100129118(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100129180(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012925C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1001291E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012925C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012925C(uint64_t a1)
{
  *(void *)a1 = off_1001B3850;
  sub_100129398(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100129398(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100129558((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001294F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100129520(uint64_t a1)
{
  sub_10012925C(a1);

  operator delete();
}

int *sub_100129558(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 424;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 424;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100129740(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001299D0(v1);

  return std::ios::~ios();
}

uint64_t sub_10012978C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001299D0(v1);

  return std::ios::~ios();
}

void sub_1001297EC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001299D0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100129854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012988C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1001298F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001299D0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100129958(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001299D0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001299D0(uint64_t a1)
{
  *(void *)a1 = off_1001B3A70;
  sub_100129B0C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100129B0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100129CCC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100129C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100129C94(uint64_t a1)
{
  sub_1001299D0(a1);

  operator delete();
}

int *sub_100129CCC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 432;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 432;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100129EB4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012A144(v1);

  return std::ios::~ios();
}

uint64_t sub_100129F00(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012A144(v1);

  return std::ios::~ios();
}

void sub_100129F60(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012A144(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100129FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012A000(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012A068(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012A144(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10012A0CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012A144(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012A144(uint64_t a1)
{
  *(void *)a1 = off_1001B3C90;
  sub_10012A280(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10012A280(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10012A440((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012A3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012A408(uint64_t a1)
{
  sub_10012A144(a1);

  operator delete();
}

int *sub_10012A440(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 441;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 441;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012A628(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012A8B8(v1);

  return std::ios::~ios();
}

uint64_t sub_10012A674(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012A8B8(v1);

  return std::ios::~ios();
}

void sub_10012A6D4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012A8B8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012A73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012A774(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012A7DC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012A8B8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10012A840(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012A8B8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012A8B8(uint64_t a1)
{
  *(void *)a1 = off_1001B3EB0;
  sub_10012A9F4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10012A9F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10012ABB4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012AB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012AB7C(uint64_t a1)
{
  sub_10012A8B8(a1);

  operator delete();
}

int *sub_10012ABB4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 449;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 449;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012AD9C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012B02C(v1);

  return std::ios::~ios();
}

uint64_t sub_10012ADE8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012B02C(v1);

  return std::ios::~ios();
}

void sub_10012AE48(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012B02C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012AEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012AEE8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012AF50(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012B02C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10012AFB4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012B02C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012B02C(uint64_t a1)
{
  *(void *)a1 = off_1001B40D0;
  sub_10012B168(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10012B168(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10012B328((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012B2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012B2F0(uint64_t a1)
{
  sub_10012B02C(a1);

  operator delete();
}

int *sub_10012B328(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 489;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 489;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012B510(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012B7A0(v1);

  return std::ios::~ios();
}

uint64_t sub_10012B55C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012B7A0(v1);

  return std::ios::~ios();
}

void sub_10012B5BC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012B7A0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012B624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012B65C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012B6C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012B7A0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10012B728(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012B7A0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012B7A0(uint64_t a1)
{
  *(void *)a1 = off_1001B42F0;
  sub_10012B8DC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10012B8DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10012BA9C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012BA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012BA64(uint64_t a1)
{
  sub_10012B7A0(a1);

  operator delete();
}

int *sub_10012BA9C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 502;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 502;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012BC84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012BF14(v1);

  return std::ios::~ios();
}

uint64_t sub_10012BCD0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012BF14(v1);

  return std::ios::~ios();
}

void sub_10012BD30(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012BF14(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012BD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012BDD0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012BE38(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012BF14(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10012BE9C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012BF14(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012BF14(uint64_t a1)
{
  *(void *)a1 = off_1001B4510;
  sub_10012C050(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10012C050(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10012C210((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012C1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012C1D8(uint64_t a1)
{
  sub_10012BF14(a1);

  operator delete();
}

int *sub_10012C210(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 643;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 643;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_10012C3F8(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x470uLL);
  sub_10012C46C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1000196A4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10012C458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10012C46C(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100199828;
  sub_10012C4C8(a1 + 3, a2);
  return a1;
}

void sub_10012C4B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double sub_10012C4C8(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_10014193C(a1);
  *uint64_t v3 = off_1001B1DB0;
  _OWORD v3[3] = off_1001B1E90;
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  v3[4] = off_1001B1EC8;
  v3[5] = v4;
  v3[6] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = v3[5];
  }
  v3[7] = v4 + 8;
  v3[8] = v3 + 11;
  double result = 0.0;
  *(_OWORD *)(v3 + 9) = xmmword_100164620;
  return result;
}

void sub_10012C57C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10011A2F0((uint64_t)a1, a3);
  if (v11 >> 57) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(v11 << 6);
  sub_10012C61C(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

void sub_10012C61C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_10012C6F8((uint64_t)a1, *a1, a4, *a1 + (a1[1] << 6), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = v10 + 56;
      do
      {
        if (*(void *)v12) {
          *(void *)(*(void *)v12 + 32) = 0;
        }
        uint64_t v13 = *(std::__shared_weak_count **)(v12 - 48);
        if (v13) {
          sub_100010A48(v13);
        }
        v12 += 64;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v14 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v14;
  a1[2] = a3;
}

void sub_10012C6D4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10012C6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a5;
  uint64_t v19 = a1;
  while (a2 != a3)
  {
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a5 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a5 + 16) = v7;
    int v8 = *(_DWORD *)(a2 + 48);
    *(void *)(a5 + 56) = *(void *)(a2 + 56);
    uint64_t v9 = a5 + 56;
    *(_DWORD *)(v9 - 8) = v8;
    *(void *)(a2 + 56) = 0;
    *(void *)(*(void *)v9 + 32) = v9;
    a5 = v9 + 8;
    a2 += 64;
  }
  uint64_t v18 = a5;
  *(_OWORD *)a5 = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  long long v10 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(a5 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(a5 + 16) = v10;
  int v11 = *(_DWORD *)(a7 + 48);
  *(void *)(a5 + 56) = *(void *)(a7 + 56);
  *(_DWORD *)(a5 + 48) = v11;
  *(void *)(a7 + 56) = 0;
  *(void *)(*(void *)(a5 + 56) + 32) = a5 + 56;
  if (a3 != a4)
  {
    uint64_t v12 = a5 + (a6 << 6);
    do
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v12 + 25) = *(_OWORD *)(a3 + 25);
      *(_OWORD *)(v12 + 16) = v13;
      int v14 = *(_DWORD *)(a3 + 48);
      *(void *)(v12 + 56) = *(void *)(a3 + 56);
      uint64_t v15 = v12 + 56;
      *(_DWORD *)(v15 - 8) = v14;
      *(void *)(a3 + 56) = 0;
      *(void *)(*(void *)v15 + 32) = v15;
      a3 += 64;
      uint64_t v12 = v15 + 8;
    }
    while (a3 != a4);
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  return sub_10012C808(&v17);
}

uint64_t *sub_10012C808(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 56);
    if (v4) {
      *(void *)(v4 + 32) = 0;
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
    if (v5)
    {
      sub_100010A48(v5);
      uint64_t v2 = *a1;
      uint64_t v3 = a1[1];
    }
    v2 += 64;
    *a1 = v2;
  }
  return a1;
}

uint64_t sub_10012C860(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B20F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012C8DC(_Unwind_Exception *a1)
{
}

uint64_t sub_10012C8F0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2310;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012C96C(_Unwind_Exception *a1)
{
}

uint64_t sub_10012C980(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2530;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012C9FC(_Unwind_Exception *a1)
{
}

uint64_t sub_10012CA10(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2750;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012CA8C(_Unwind_Exception *a1)
{
}

void sub_10012CAA0(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *v1;
  if (fstatfs(*(_DWORD *)(*v1 + 8), &v17) < 0)
  {
    *(void *)&long long v18 = "FileLocal::shared_state_t::init_unmap_zeros()::(anonymous class)::operator()() const";
    *((void *)&v18 + 1) = 76;
    int v19 = 16;
    sub_10012CD10(&v14, &v18);
    sub_100003DF0(v16, (uint64_t)"fstatfs failed with err code ", 29);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10012CF70((uint64_t)&v14);
    std::ios::~ios();
    int v6 = *__error();
    long long v7 = std::generic_category();
    int v8 = *(unsigned __int8 *)(v2 + 88);
    *(_DWORD *)(v2 + 72) = v6;
    *(void *)(v2 + 80) = v7;
    if (v8) {
      *(unsigned char *)(v2 + 88) = 0;
    }
    int v9 = *__error();
    long long v10 = std::generic_category();
    int v11 = v10;
    if (*(unsigned char *)(v2 + 136))
    {
      sub_10004CD48((uint64_t *)(v2 + 96));
      *(_DWORD *)(v2 + 96) = v9;
      *(void *)(v2 + 104) = v11;
      *(unsigned char *)(v2 + 136) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 96) = v9;
      *(void *)(v2 + 104) = v10;
    }
  }
  else
  {
    f_bstd::string::size_type size = v17.f_bsize;
    if (!*(unsigned char *)(v2 + 88)) {
      *(unsigned char *)(v2 + 88) = 1;
    }
    *(void *)(v2 + 72) = f_bsize;
    char v4 = malloc_type_valloc(f_bsize, 0xF8ED6DDuLL);
    if (!v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      long long v13 = std::bad_alloc::bad_alloc(exception);
    }
    *(void *)&long long v18 = off_1001B47B0;
    __int16 v20 = &v18;
    int v14 = v4;
    sub_100017FFC((uint64_t)v15, (uint64_t)&v18);
    sub_100017750(&v18);
    sub_10012CE78(v2 + 96, (uint64_t *)&v14);
    sub_1000176CC((uint64_t *)&v14, 0);
    sub_100017750(v15);
    int64_t v5 = *(void *)(v2 + 72);
    if (v5 >= 1) {
      bzero(*(void **)(v2 + 96), v5);
    }
  }
}

void sub_10012CCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = v2;
  sub_1000176CC((uint64_t *)va, 0);
  sub_100017750(v3);
  _Unwind_Resume(a1);
}

void *sub_10012CD10(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10012CEE0((uint64_t)a1, a2);
  *a1 = off_1001B4598;
  a1[45] = &off_1001B4698;
  a1[46] = &off_1001B46C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4598;
  a1[45] = off_1001B4620;
  a1[46] = off_1001B4648;
  return a1;
}

void sub_10012CE10(_Unwind_Exception *a1)
{
  sub_10012CF70(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10012CE34(uint64_t a1)
{
  return a1;
}

uint64_t sub_10012CE78(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_100010500((uint64_t *)a1, a2);
  }
  else
  {
    sub_10004CD48((uint64_t *)a1);
    uint64_t v4 = *a2;
    *a2 = 0;
    *(void *)a1 = v4;
    sub_100017FFC(a1 + 8, (uint64_t)(a2 + 1));
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t sub_10012CEE0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B4730;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012CF5C(_Unwind_Exception *a1)
{
}

uint64_t sub_10012CF70(uint64_t a1)
{
  *(void *)a1 = off_1001B4730;
  sub_10012D378(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10012D0AC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012CF70(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012D114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012D14C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10012D1B4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012CF70(v1);

  return std::ios::~ios();
}

void sub_10012D200(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012CF70(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012D264(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012CF70(v1);

  return std::ios::~ios();
}

void sub_10012D2C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012CF70(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10012D340(uint64_t a1)
{
  sub_10012CF70(a1);

  operator delete();
}

uint64_t sub_10012D378(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10012D4FC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012D4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10012D4FC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 236;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 236;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

void sub_10012D6E8()
{
}

void *sub_10012D6FC()
{
  double result = operator new(0x10uLL);
  *double result = off_1001B47B0;
  return result;
}

void sub_10012D734(uint64_t a1, void *a2)
{
  *a2 = off_1001B47B0;
}

void sub_10012D75C(uint64_t a1, void **a2)
{
}

uint64_t sub_10012D764(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001B4810)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10012D7A4()
{
  return &off_1001B4810;
}

uint64_t sub_10012D7B0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2970;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012D82C(_Unwind_Exception *a1)
{
}

uint64_t sub_10012D840(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2B90;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012D8BC(_Unwind_Exception *a1)
{
}

uint64_t sub_10012D8D0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2DB0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012D94C(_Unwind_Exception *a1)
{
}

uint64_t sub_10012D960(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2FD0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012D9DC(_Unwind_Exception *a1)
{
}

uint64_t sub_10012D9F0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B31F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012DA6C(_Unwind_Exception *a1)
{
}

uint64_t sub_10012DA80(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3410;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012DAFC(_Unwind_Exception *a1)
{
}

uint64_t sub_10012DB10(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3630;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012DB8C(_Unwind_Exception *a1)
{
}

uint64_t sub_10012DBA0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3850;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012DC1C(_Unwind_Exception *a1)
{
}

uint64_t sub_10012DC30(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3A70;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012DCAC(_Unwind_Exception *a1)
{
}

uint64_t sub_10012DCC0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3C90;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012DD3C(_Unwind_Exception *a1)
{
}

uint64_t sub_10012DD50(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3EB0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012DDCC(_Unwind_Exception *a1)
{
}

uint64_t sub_10012DDE0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B40D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012DE5C(_Unwind_Exception *a1)
{
}

uint64_t sub_10012DE70(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B42F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012DEEC(_Unwind_Exception *a1)
{
}

uint64_t *sub_10012DF00(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v4 + 8);
  char v6 = (char *)(*(void *)v4 + 16 * v5);
  if (v5 == *(void *)(v4 + 16))
  {
    sub_1000C4D64((void **)v4, v6, 1, a2, &v8);
  }
  else
  {
    *(_OWORD *)char v6 = *a2;
    ++*(void *)(v4 + 8);
  }
  return a1;
}

void sub_10012DF6C(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1 + 56;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      uint64_t v4 = *(std::__shared_weak_count **)(v3 - 48);
      if (v4) {
        sub_100010A48(v4);
      }
      v3 += 64;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

uint64_t sub_10012DFCC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B4510;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012E048(_Unwind_Exception *a1)
{
}

void *sub_10012E05C(void *__dst, long long *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100047744(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v10;
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  __dst[3] = a3;
  void __dst[4] = v12;
  __dst[5] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = *((char *)a2 + 23);
  if (v13 >= 0) {
    int v14 = (char *)a2;
  }
  else {
    int v14 = *(char **)a2;
  }
  if (v13 >= 0) {
    uint64_t v15 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v15 = *((void *)a2 + 1);
  }
  __dst[6] = sub_100143A20(v14, v15);
  __dst[7] = v16;
  __dst[8] = a5;
  return __dst;
}

void sub_10012E108(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    sub_100010A48(v3);
  }
  sub_1001470D4(v1);
  _Unwind_Resume(a1);
}

AAByteStream *sub_10012E128(uint64_t a1, char *a2, uint64_t a3, uint8_t **a4)
{
  if (a2[23] >= 0) {
    char v6 = a2;
  }
  else {
    char v6 = *(char **)a2;
  }
  *(void *)&long long v10 = AAS3DownloadStreamOpen(v6, 0, 0, 0);
  sub_100107E5C(&v13, &v10);
  sub_100107F44(&v12, &v13);
  sub_100107F78(&v12, *a4, 0x20uLL);
  sub_100107E98(&v13, &v12, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 0, (uint64_t *)&v11);
  sub_10011CF74(&v13, (uint64_t *)&v12, &v11, &v10);
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v7;
  if (v8)
  {
    sub_100010A48(v8);
    if (*((void *)&v10 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  sub_100107E60(&v11);
  sub_100107F48(&v12);
  return sub_100107E60(&v13);
}

void sub_10012E210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  AAByteStream v4 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  AEAContext v6 = va_arg(va2, AEAContext);
  sub_100107E60((AAByteStream *)va);
  sub_100107F48((AEAContext *)va1);
  sub_100107E60((AAByteStream *)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_10012E248(uint64_t a1, char **a2, uint64_t a3, uint64_t *a4)
{
  long long v7 = sub_10014193C((void *)a1);
  *long long v7 = off_1001B4830;
  *(_OWORD *)(v7 + 3) = 0u;
  *(_OWORD *)(v7 + 5) = 0u;
  int v9 = *a2;
  uint64_t v10 = a4[1];
  v18[0] = (uint8_t *)*a4;
  v18[1] = (uint8_t *)v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10012E128(a1, v9, v8, v18);
  if (v10) {
    sub_100010A48((std::__shared_weak_count *)v10);
  }
  AAByteStream v11 = (long long *)*a2;
  uint64_t v16 = sub_100108274(*(void *)(a1 + 40));
  uint64_t v15 = sub_100108268(*(void *)(a1 + 40));
  sub_10012E654(v11, (uint64_t *)&v16, a4, (uint64_t *)&v15, &v17);
  long long v12 = v17;
  long long v17 = 0uLL;
  AAByteStream v13 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v12;
  if (v13)
  {
    sub_100010A48(v13);
    if (*((void *)&v17 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v17 + 1));
    }
  }
  return a1;
}

void sub_10012E340(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[6];
  if (v3) {
    sub_100010A48(v3);
  }
  AAByteStream v4 = (std::__shared_weak_count *)v1[4];
  if (v4) {
    sub_100010A48(v4);
  }
  long long v5 = (std::__shared_weak_count *)v1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

ssize_t sub_10012E38C(uint64_t a1, uint64_t a2)
{
  return sub_100108280(*(void *)(a1 + 40), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

void sub_10012E3B8(void *a1)
{
  sub_10012E47C(a1);

  operator delete();
}

uint64_t sub_10012E3F0()
{
  return 4294967251;
}

uint64_t sub_10012E3F8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 24);
}

uint64_t sub_10012E404()
{
  return 0;
}

uint64_t sub_10012E40C()
{
  return 4294967251;
}

void *sub_10012E414(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"knox", 4);
}

double sub_10012E428@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10012E4E0(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t sub_10012E468()
{
  return 4294967251;
}

uint64_t sub_10012E470(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 48);
}

void *sub_10012E47C(void *a1)
{
  *a1 = off_1001B4830;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_100010A48(v3);
  }
  AAByteStream v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_10012E4E0(void *a1@<X1>, void *a2@<X8>)
{
  AAByteStream v4 = operator new(0x50uLL);
  sub_10012E554(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1000196A4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10012E540(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10012E554(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A9888;
  sub_10012E5B0(a1 + 3, a2);
  return a1;
}

void sub_10012E59C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_10012E5B0(void *a1, void *a2)
{
  AAByteStream v4 = sub_10014193C(a1);
  *AAByteStream v4 = off_1001B4830;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  uint64_t v6 = a2[3];
  uint64_t v5 = a2[4];
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v7 = (std::__shared_weak_count *)a1[4];
    a1[3] = v6;
    a1[4] = v5;
    if (v7) {
      sub_100010A48(v7);
    }
  }
  else
  {
    a1[3] = v6;
    a1[4] = 0;
  }
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[6];
  a1[5] = v9;
  a1[6] = v8;
  if (v10) {
    sub_100010A48(v10);
  }
  return a1;
}

void *sub_10012E654@<X0>(long long *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x60uLL);
  double result = sub_10012E6D0(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_10012E6BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10012E6D0(void *a1, long long *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B4908;
  sub_10012E05C(a1 + 3, a2, *a3, a4, *a5);
  return a1;
}

void sub_10012E720(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10012E734(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B4908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10012E754(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B4908;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10012E7A8(uint64_t a1)
{
}

void sub_10012E7B4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_100010A48(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_10012E808(void *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  id v5 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  id v14 = v5;
  uint64_t v6 = [v5 activeNode];
  if (v6)
  {
    if ([v6 isCache])
    {
      int v7 = 1;
    }
    else
    {
      uint64_t v8 = [v6 parent];
      if (v8) {
        int v7 = 3;
      }
      else {
        int v7 = 0;
      }
    }
    if (*a3 != a3[1] || (a2 & 1) != 0 || !v7 || v7 == 3)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [v6 filePath];
        uint64_t v15 = [(id)objc_claimAutoreleasedReturnValue() path];
        sub_10012F3DC(&v16, &v15);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          sub_100047744(&__dst, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = v16;
        }
        operator new();
      }
      id v9 = v6;
      id v10 = [v9 pluginName];
      sub_100003BA4(&__dst, (char *)[v10 UTF8String]);

      [v9 pluginParams];
      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t error_code = make_error_code(150);
    void *exception = &off_1001B6CA0;
    exception[1] = error_code;
    exception[2] = v13;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Stack with cache as top image cannot be opened for writing.";
  }
}

void sub_10012ED28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_10012EE78(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v33 = 0;
  id v7 = [objc_alloc((Class)NSFileHandle) initWithFileDescriptor:a1 closeOnDealloc:0];
  id v32 = 0;
  uint64_t v8 = [v7 readDataUpToLength:0x100000 error:&v32];
  id v9 = v32;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t error_code = make_error_code(154);
    void *exception = &off_1001B6CA0;
    exception[1] = error_code;
    exception[2] = v18;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Failed to read from fd.";
  }
  id v31 = 0;
  id v10 = +[NSPropertyListSerialization propertyListWithData:v8 options:0 format:&v33 error:&v31];
  id v11 = v31;

  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (!a2[1]) {
        goto LABEL_14;
      }
      a2 = (uint64_t *)*a2;
    }
    else if (!*((unsigned char *)a2 + 23))
    {
LABEL_14:
      uint64_t v19 = __cxa_allocate_exception(0x40uLL);
      __int16 v20 = std::generic_category();
      *uint64_t v19 = &off_1001B6CA0;
      v19[1] = 22;
      v19[2] = v20;
      *((unsigned char *)v19 + 24) = 0;
      *((unsigned char *)v19 + 48) = 0;
      v19[7] = "Cannot initialize pstack disk image without path.";
    }
    long long v12 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, +[NSString defaultCStringEncoding]);
    uint64_t v13 = +[NSURL fileURLWithPath:v12];

    id v30 = v11;
    id v14 = [[DiskImageGraph alloc] initWithData:v10 pstackURL:v13 imported:0 error:&v30];
    id v15 = v30;

    if (!v14)
    {
      int v21 = *__error();
      if (sub_1000D29A0())
      {
        __int16 v22 = sub_1000D2920();
        os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
        long long v23 = [v15 description];
        *(_DWORD *)buf = 68158210;
        int v35 = 127;
        __int16 v36 = 2080;
        long long v37 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::file"
              "system::path &, BOOL)";
        __int16 v38 = 2112;
        long long v39 = v23;
        ssize_t v24 = (char *)_os_log_send_and_compose_impl();

        if (v24)
        {
          fprintf(__stderrp, "%s\n", v24);
          free(v24);
        }
      }
      else
      {
        size_t v25 = sub_1000D2920();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = [v15 description];
          *(_DWORD *)buf = 68158210;
          int v35 = 127;
          __int16 v36 = 2080;
          long long v37 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::fi"
                "lesystem::path &, BOOL)";
          __int16 v38 = 2112;
          long long v39 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%.*s: Failed to create graph from plist: %@.", buf, 0x1Cu);
        }
      }
      *__error() = v21;
      uint64_t v27 = __cxa_allocate_exception(0x40uLL);
      uint64_t v28 = make_error_code(161);
      void *v27 = &off_1001B6CA0;
      v27[1] = v28;
      v27[2] = v29;
      *((unsigned char *)v27 + 24) = 0;
      *((unsigned char *)v27 + 48) = 0;
      v27[7] = "Failed to create graph from plist.";
    }
    sub_10012E808(v14, a3, a4);

    id v11 = v15;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_10012F330(_Unwind_Exception *a1)
{
  __cxa_free_exception(v7);

  _Unwind_Resume(a1);
}

std::string *sub_10012F3DC(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a2;
  AAByteStream v4 = v3 - 1;
  while (*++v4)
    ;
  sub_100063AB8(this, v3, v4);
  return this;
}

void sub_10012F420(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012F43C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a3;
  sub_1000A6014(a3, a2);
}

uint64_t sub_10012F4AC(uint64_t a1)
{
  return a1;
}

void sub_10012F4E8()
{
}

void sub_10012F6E4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10012F710(uint64_t a1)
{
  return a1;
}

double sub_10012F77C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(a1 + 76));
  unsigned int v2 = atomic_load((unsigned int *)(a1 + 72));
  if (v2 - v1 < *(_DWORD *)(*(void *)(a1 + 8) + 8))
  {
    unsigned int v3 = v2;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 72), &v3, v2 + 1);
      if (v3 == v2) {
        break;
      }
      unsigned int v4 = atomic_load((unsigned int *)(a1 + 76));
      unsigned int v5 = v3 - v4;
      unsigned int v2 = v3;
      if (v5 >= *(_DWORD *)(*(void *)(a1 + 8) + 8)) {
        return result;
      }
    }
    return io_rings_sqe_allocate(*(void *)(a1 + 48));
  }
  return result;
}

void sub_10012F7E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t cqe = io_rings_get_cqe(*(void *)(a1 + 48));
  if ((v5 & 0x100000000) != 0)
  {
    uint64_t v7 = cqe;
    uint64_t v8 = v5;
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 76), 1u);
    if (atomic_load((unint64_t *)(a1 + 80)))
    {
      unsigned int v11 = atomic_load((unsigned int *)(a1 + 72));
      if (add + 1 == v11)
      {
        std::mutex::lock((std::mutex *)(a1 + 136));
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
        std::mutex::unlock((std::mutex *)(a1 + 136));
      }
    }
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v6;
}

uint64_t sub_10012F894(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 64);
  return result;
}

uint64_t sub_10012F8A0(uint64_t a1)
{
  io_rings_cq_get_overruns(a1);
  *(void *)&long long v3 = "di_plugin_cq_event_callback(io_uhandle_t, void *, enum io_rings_event_type_t, struct io_rings_event_type_data_t *)";
  *((void *)&v3 + 1) = 27;
  int v4 = 16;
  sub_10012F964(v5, &v3);
  std::ostream::operator<<();
  sub_100003DF0(v6, (uint64_t)" overrun events occurred in the plugin's ring!", 46);
  std::ostream::~ostream();
  sub_10012FB5C((uint64_t)v5);
  std::ios::~ios();
  return io_rings_cq_clear_overruns(a1);
}

void sub_10012F950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10012FA88((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10012F964(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10012FACC((uint64_t)a1, a2);
  *a1 = off_1001B4960;
  a1[45] = &off_1001B4A60;
  a1[46] = &off_1001B4A88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4960;
  a1[45] = off_1001B49E8;
  a1[46] = off_1001B4A10;
  return a1;
}

void sub_10012FA64(_Unwind_Exception *a1)
{
  sub_10012FB5C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10012FA88(uint64_t a1)
{
  return a1;
}

uint64_t sub_10012FACC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B4AF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10012FB48(_Unwind_Exception *a1)
{
}

uint64_t sub_10012FB5C(uint64_t a1)
{
  *(void *)a1 = off_1001B4AF8;
  sub_10012FF64(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10012FC98(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012FB5C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012FD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012FD38(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10012FDA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012FB5C(v1);

  return std::ios::~ios();
}

void sub_10012FDEC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012FB5C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10012FE50(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012FB5C(v1);

  return std::ios::~ios();
}

void sub_10012FEB0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012FB5C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10012FF2C(uint64_t a1)
{
  sub_10012FB5C(a1);

  operator delete();
}

uint64_t sub_10012FF64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1001300E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001300C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1001300E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 57;
    __int16 v22 = 2082;
    long long v23 = v8;
    id v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      id v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unsigned int v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        id v14 = a2;
      }
      else {
        id v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 57;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_1001302D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_100130350(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *double result = a2;
  if (v3) {
    return (uint64_t *)sub_100130380((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_100130380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1001303D8()
{
}

void *sub_1001303EC()
{
  double result = operator new(0x10uLL);
  *double result = off_1001B4B78;
  return result;
}

void sub_100130424(uint64_t a1, void *a2)
{
  *a2 = off_1001B4B78;
}

uint64_t sub_10013044C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 32))();
}

uint64_t sub_100130458(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100130498()
{
}

void *sub_1001304A4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100130528(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3 + v4 <= *(void *)(a1 + 72))
  {
    memcpy((void *)(*(void *)(a1 + 64) + v4), *(const void **)a2, v3);
    return *(unsigned int *)(a2 + 16);
  }
  else
  {
    *(void *)&long long v6 = "int Ram::write(const sg_entry &)";
    *((void *)&v6 + 1) = 14;
    int v7 = 16;
    sub_100130648(v8, &v6);
    sub_100003DF0(v9, (uint64_t)"Trying to write @ ", 18);
    std::ostream::operator<<();
    sub_100003DF0(v9, (uint64_t)" ", 1);
    std::ostream::operator<<();
    sub_100003DF0(v9, (uint64_t)"bytes, which is after end of ramdisk", 36);
    std::ostream::~ostream();
    sub_100130DF0((uint64_t)v8);
    std::ios::~ios();
    return 4294967274;
  }
}

void sub_10013062C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10013076C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100130648(void *a1, long long *a2)
{
  size_t v3 = (std::ios_base *)(a1 + 46);
  sub_100131AA4((uint64_t)a1, a2);
  *a1 = off_1001B4CE8;
  a1[45] = &off_1001B4DE8;
  a1[46] = &off_1001B4E10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4CE8;
  a1[45] = off_1001B4D70;
  a1[46] = off_1001B4D98;
  return a1;
}

void sub_100130748(_Unwind_Exception *a1)
{
  sub_100130DF0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10013076C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001307B0(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3 + v4 <= *(void *)(a1 + 72))
  {
    memcpy(*(void **)a2, (const void *)(*(void *)(a1 + 64) + v4), v3);
    return *(unsigned int *)(a2 + 16);
  }
  else
  {
    *(void *)&long long v6 = "int Ram::read(const sg_entry &)";
    *((void *)&v6 + 1) = 13;
    int v7 = 16;
    sub_1001308D4(v8, &v6);
    sub_100003DF0(v9, (uint64_t)"Trying to read @ ", 17);
    std::ostream::operator<<();
    sub_100003DF0(v9, (uint64_t)" ", 1);
    std::ostream::operator<<();
    sub_100003DF0(v9, (uint64_t)"bytes, which is after end of ramdisk", 36);
    std::ostream::~ostream();
    sub_100131564((uint64_t)v8);
    std::ios::~ios();
    return 4294967274;
  }
}

void sub_1001308B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001309F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1001308D4(void *a1, long long *a2)
{
  size_t v3 = (std::ios_base *)(a1 + 46);
  sub_100131B34((uint64_t)a1, a2);
  *a1 = off_1001B4F08;
  a1[45] = &off_1001B5008;
  a1[46] = &off_1001B5030;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4F08;
  a1[45] = off_1001B4F90;
  a1[46] = off_1001B4FB8;
  return a1;
}

void sub_1001309D4(_Unwind_Exception *a1)
{
  sub_100131564(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001309F8(uint64_t a1)
{
  return a1;
}

void sub_100130A40(void *a1)
{
  sub_100131A48(a1);

  operator delete();
}

uint64_t sub_100130A78()
{
  return 0;
}

uint64_t sub_100130A80(void *a1, unint64_t a2, uint64_t a3)
{
  if (a3 == -1) {
    return 0;
  }
  unint64_t v3 = a1[12];
  unint64_t v4 = (a2 + v3 - 1) / v3 * v3;
  if (a2 > v4 || v4 >= a3 + a2) {
    return 0;
  }
  unint64_t v6 = a2 - v4 + a3;
  size_t v7 = v6 / v3 * v3;
  if (v6 == v6 % v3) {
    return 0;
  }
  uint64_t v8 = 4294967262;
  if (__CFADD__(v4, v7)) {
    return v8;
  }
  unint64_t v10 = a1[9];
  if (v4 > v10 || v7 + v4 > v10) {
    return v8;
  }
  return madvise((void *)(a1[8] + v4), v7, 5);
}

uint64_t sub_100130B04()
{
  return 1;
}

uint64_t sub_100130B0C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_100130B14()
{
  return 1;
}

uint64_t sub_100130B1C(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 72) < a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(void *)(a1 + 72) = a2;
  return result;
}

void *sub_100130B40(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"ram", 3);
}

uint64_t sub_100130B54(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_100130B60(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100130DF0(v1);

  return std::ios::~ios();
}

uint64_t sub_100130BAC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100130DF0(v1);

  return std::ios::~ios();
}

void sub_100130C0C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100130DF0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100130C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100130CAC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100130D14(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100130DF0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100130D78(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100130DF0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100130DF0(uint64_t a1)
{
  *(void *)a1 = off_1001B4E80;
  sub_100130F2C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100130F2C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1001310EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100131088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001310B4(uint64_t a1)
{
  sub_100130DF0(a1);

  operator delete();
}

int *sub_1001310EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 30;
    __int16 v22 = 2082;
    long long v23 = v8;
    id v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unsigned int v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        id v14 = a2;
      }
      else {
        id v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 30;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1001312D4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100131564(v1);

  return std::ios::~ios();
}

uint64_t sub_100131320(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100131564(v1);

  return std::ios::~ios();
}

void sub_100131380(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100131564(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001313E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100131420(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100131488(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100131564(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1001314EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100131564(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100131564(uint64_t a1)
{
  *(void *)a1 = off_1001B50A0;
  sub_1001316A0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1001316A0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100131860((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001317FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100131828(uint64_t a1)
{
  sub_100131564(a1);

  operator delete();
}

int *sub_100131860(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 42;
    __int16 v22 = 2082;
    long long v23 = v8;
    id v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unsigned int v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        id v14 = a2;
      }
      else {
        id v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 42;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100131A48(void *a1)
{
  *a1 = off_1001B4C08;
  sub_1000176CC(a1 + 3, 0);
  sub_100017750(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_100131AA4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B4E80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100131B20(_Unwind_Exception *a1)
{
}

uint64_t sub_100131B34(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B50A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100131BB0(_Unwind_Exception *a1)
{
}

uint64_t sub_100131BC4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_1001343F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100134420(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4io_rings_get_max_version(0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4io_rings_get_max_version(0, 0) = 0;
  return result;
}

void sub_100134430(uint64_t a1)
{
}

void sub_100134438(void *a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = v6;
    uint64_t v8 = (void *)a1[4];
    id v9 = [v7 filePath];
    unint64_t v10 = [v9 lastPathComponent];
    unsigned int v11 = [v8 URLByAppendingPathComponent:v10];

    os_log_type_t v12 = (void *)a1[5];
    uint64_t v13 = [v7 filePath];
    uint64_t v14 = *(void *)(a1[6] + 8);
    obuint64_t j = *(id *)(v14 + 40);
    LOBYTE(v12) = [v12 copyItemAtURL:v13 toURL:v11 error:&obj];
    objc_storeStrong((id *)(v14 + 40), obj);

    if (v12) {
      [*(id *)(*(void *)(a1[7] + 8) + 40) addObject:v11];
    }
    else {
      *a4 = 1;
    }
  }
  else
  {
    *a4 = 1;
    uint64_t v15 = *(void *)(a1[6] + 8);
    id v18 = *(id *)(v15 + 40);
    +[DIError failWithPOSIXCode:45 verboseInfo:@"Clone of plugin nodes is not supported." error:&v18];
    id v16 = v18;
    id v7 = *(id *)(v15 + 40);
    *(void *)(v15 + 4io_rings_get_max_version(0, 0) = v16;
  }
}

id sub_1001345A4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeItemAtURL:a2 error:0];
}

void sub_100134B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100134B44(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  id v7 = *(void **)(a1 + 32);
  id v8 = a2;
  id v9 = [v7 URLByDeletingLastPathComponent];
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v10 + 40);
  unsigned int v11 = +[DiskImageGraphNode GraphNodeWithDictionary:v8 updateChangesToDict:v6 workDir:v9 error:&obj];

  objc_storeStrong((id *)(v10 + 40), obj);
  if (v11)
  {
    os_log_type_t v12 = *(void **)(a1 + 40);
    uint64_t v13 = [v11 UUID];
    uint64_t v14 = [v13 UUIDString];
    [v12 setObject:v11 forKey:v14];
  }
  else
  {
    *a4 = 1;
  }
}

void sub_100134D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100134D68(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v15 = a3;
  uint64_t v6 = [v15 parentUUID];

  if (v6)
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = [v15 parentUUID];
    id v9 = [v8 UUIDString];
    uint64_t v10 = [v7 objectForKey:v9];

    if (v10)
    {
      [v15 setParent:v10];
      unsigned int v11 = [v15 parent];
      os_log_type_t v12 = [v11 children];
      [v12 addObject:v15];
    }
    else
    {
      *a4 = 1;
      uint64_t v13 = +[DIError errorWithPOSIXCode:22 verboseInfo:@"Missing parent node in graph."];
      uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
      unsigned int v11 = *(void **)(v14 + 40);
      *(void *)(v14 + 4io_rings_get_max_version(0, 0) = v13;
    }
  }
}

void sub_1001352AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001352C4(uint64_t a1, uint64_t a2, void *a3)
{
  char v4 = [a3 tag];
  id v5 = [v4 isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];

  return v5;
}

uint64_t sub_100135A4C(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = 1919118949;
  int v6 = 1919118949;
  sub_100090DEC((uint64_t)"sig1_t", 1919118949, &v6, 1);
  *(_DWORD *)(a1 + 4) = 1634952291;
  int v6 = 1634952291;
  sub_100090DEC((uint64_t)"sig2_t", 1634952291, &v6, 1);
  *(_DWORD *)(a1 + 8) = 2;
  int v6 = 2;
  sub_100090DEC((uint64_t)"version_t", 2, &v6, 1);
  *(_DWORD *)(a1 + 12) = 16;
  int v6 = 16;
  sub_100090DEC((uint64_t)"iv_size_t", 16, &v6, 1);
  *(_DWORD *)(a1 + 16) = 5;
  int v6 = 5;
  sub_100090DEC((uint64_t)"encryption_mode", 5, &v6, 1);
  *(_DWORD *)(a1 + 2io_rings_get_max_version(0, 0) = -2147483647;
  int v6 = -2147483647;
  sub_100090DEC((uint64_t)"algorithm_type", -2147483647, &v6, 1);
  *(_DWORD *)(a1 + 24) = *a2;
  *(_DWORD *)(a1 + 28) = 91;
  int v6 = 91;
  sub_100090DEC((uint64_t)"prng_algorithm_type", 91, &v6, 1);
  *(_DWORD *)(a1 + 32) = 160;
  int v6 = 160;
  sub_100090DEC((uint64_t)"prng_key_bits_size_t", 160, &v6, 1);
  *(_DWORD *)(a1 + 52) = 512;
  *(_OWORD *)(a1 + 56) = xmmword_10016DD70;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 36) = sub_100143B3C();
  *(void *)(a1 + 44) = v4;
  return a1;
}

void sub_100135BD8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 6io_rings_get_max_version(0, 0) = 0;
  unint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  if (v3 < 0xC
    || (sub_1000380B0(a2, (uint64_t)v8, 12, v3 - 12) & 0x80000000) != 0
    || v8[0] != 0x1000000
    || v8[1] != 1634952291
    || v8[2] != 1919118949)
  {
    if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) > 0x4B) {
      operator new[]();
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    void *exception = &off_1001AEAE8;
    exception[1] = "crypto";
    exception[2] = 76;
    exception[3] = v5;
  }
  int v6 = __cxa_allocate_exception(0x40uLL);
  id v7 = (void *)sub_100003670((uint64_t)v6, (uint64_t)"The image is encrypted with obsolete encoding version 1", 0xA0u);
}

void sub_100136088(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100136098()
{
}

void sub_1001360A0(_Unwind_Exception *a1)
{
}

void sub_10013615C(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_10000E628((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x100136198);
}

void sub_1001361B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003744(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1001361CC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 6io_rings_get_max_version(0, 0) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 6io_rings_get_max_version(0, 0) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100136208(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(_DWORD *)(a2 + 16) = bswap32(*(_DWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 2io_rings_get_max_version(0, 0) = bswap32(*(_DWORD *)(a1 + 20));
  *(_DWORD *)(a2 + 24) = bswap32(*(_DWORD *)(a1 + 24));
  *(_DWORD *)(a2 + 28) = bswap32(*(_DWORD *)(a1 + 28));
  *(_DWORD *)(a2 + 32) = bswap32(*(_DWORD *)(a1 + 32));
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a1 + 36);
  *(_DWORD *)(a2 + 52) = bswap32(*(_DWORD *)(a1 + 52));
  *(void *)(a2 + 56) = bswap64(*(void *)(a1 + 56));
  *(void *)(a2 + 64) = bswap64(*(void *)(a1 + 64));
  *(_DWORD *)(a2 + 72) = bswap32(*(_DWORD *)(a1 + 72));
  return a2 + 76;
}

const void **sub_1001362AC(uint64_t a1, char *a2)
{
  uint64_t v3 = (*(uint64_t (**)(char *))(*(void *)&a2[*(void *)(*(void *)a2 - 40)] + 16))(&a2[*(void *)(*(void *)a2 - 40)]);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    id v9 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Image contains crypto format but info class is missing EncryptionInfo", 0x16u);
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!*(unsigned char *)(v3 + 16)) {
    *(unsigned char *)(v3 + 16) = 1;
  }
  *(void *)(v3 + 8) = v5;
  CFUUIDRef v11 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *(CFUUIDBytes *)(a1 + 36));
  CFStringRef v6 = CFUUIDCreateString(kCFAllocatorDefault, v11);
  CFStringRef v10 = v6;
  if (*(void *)(v4 + 24))
  {
    CFRelease(*(CFTypeRef *)(v4 + 24));
    CFStringRef v6 = v10;
  }
  *(void *)(v4 + 24) = v6;
  CFStringRef v10 = 0;
  sub_10002A560((const void **)&v10);
  return sub_10002B088((const void **)&v11);
}

void sub_1001363C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_1001363EC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  LODWORD(v9) = 0;
  sub_100090DEC((uint64_t)"public_key_crypto_algo_mode", 0, &v9, 1);
  bzero((void *)(a1 + 48), 0x204uLL);
  LODWORD(v9) = bswap32(*(_DWORD *)a2);
  sub_100136A44((_DWORD *)a1, &v9);
  long long v4 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 2io_rings_get_max_version(0, 0) = v4;
  int v5 = bswap32(*(_DWORD *)(a2 + 36));
  LODWORD(v9) = 42;
  sub_100090DEC((uint64_t)"public_key_crypto_algo", v5, &v9, 1);
  *(_DWORD *)(a1 + 36) = v5;
  int v6 = bswap32(*(_DWORD *)(a2 + 40));
  unint64_t v9 = 0x800000010000000ALL;
  sub_100090DEC((uint64_t)"public_key_padding_algo", v6, &v9, 2);
  *(_DWORD *)(a1 + 4io_rings_get_max_version(0, 0) = v6;
  int v7 = bswap32(*(_DWORD *)(a2 + 44));
  LODWORD(v9) = 0;
  sub_100090DEC((uint64_t)"public_key_crypto_algo_mode", v7, &v9, 1);
  *(_DWORD *)(a1 + 44) = v7;
  LODWORD(v9) = bswap32(*(_DWORD *)(a2 + 48));
  sub_100136B40((_DWORD *)(a1 + 48), &v9);
  memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  return a1;
}

uint64_t sub_10013656C(uint64_t a1, uint64_t a2, SecKeyRef *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x2A00000000;
  LODWORD(__p) = 42;
  sub_100090DEC((uint64_t)"public_key_crypto_algo", 42, &__p, 1);
  *(_DWORD *)(a1 + 4io_rings_get_max_version(0, 0) = 10;
  __p = (void *)0x800000010000000ALL;
  sub_100090DEC((uint64_t)"public_key_padding_algo", 10, &__p, 2);
  *(_DWORD *)(a1 + 44) = 0;
  LODWORD(__p) = 0;
  sub_100090DEC((uint64_t)"public_key_crypto_algo_mode", 0, &__p, 1);
  bzero((void *)(a1 + 48), 0x204uLL);
  sub_1001368FC(a2, &__p);
  CFErrorRef error = 0;
  CFDataRef v23 = SecKeyCopyExternalRepresentation(*a3, &error);
  if (!v23)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    void *exception = &off_1001B6CA0;
    uint64_t v14 = std::generic_category();
    exception[1] = Code;
    exception[2] = v14;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Key from the certificate is not exportable.";
  }
  sub_100136990((uint64_t *)&v23, (uint64_t *)&theData);
  BytePtr = CFDataGetBytePtr(theData);
  CC_LONG Length = CFDataGetLength(theData);
  CC_SHA1(BytePtr, Length, (unsigned __int8 *)(a1 + 4));
  LODWORD(plaintext) = 20;
  sub_100136A44((_DWORD *)a1, &plaintext);
  CFDataRef v20 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)__p, v26 - (unsigned char *)__p);
  sub_100136990((uint64_t *)&v20, (uint64_t *)&plaintext);
  id v8 = *a3;
  CFStringRef v9 = sub_100136ABC(a1);
  CFDataRef v20 = SecKeyCreateEncryptedData(v8, v9, plaintext, &error);
  if (!v20)
  {
    id v15 = __cxa_allocate_exception(0x40uLL);
    unsigned int v16 = CFErrorGetCode(error);
    void *v15 = &off_1001B6CA0;
    int v17 = std::generic_category();
    v15[1] = v16;
    void v15[2] = v17;
    *((unsigned char *)v15 + 24) = 0;
    *((unsigned char *)v15 + 48) = 0;
    v15[7] = "Failed to encrypt data using public key from certificate.";
  }
  sub_100136990((uint64_t *)&v20, (uint64_t *)&v19);
  int v18 = CFDataGetLength(v19);
  sub_100136B40((_DWORD *)(a1 + 48), &v18);
  CFDataRef v10 = v19;
  v27.length = CFDataGetLength(v19);
  v27.location = 0;
  CFDataGetBytes(v10, v27, (UInt8 *)(a1 + 52));
  sub_1000807A8((const void **)&v19);
  sub_1000807A8((const void **)&plaintext);
  sub_1000807A8((const void **)&theData);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_100136874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, const void *a13, const void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  __cxa_free_exception(v18);
  sub_1000807A8(&a13);
  sub_1000807A8(&a14);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **sub_1001368FC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = (void **)sub_10013AA64(a2, *(void *)(a1 + 8) + *(void *)(a1 + 32) - (*(void *)a1 + *(void *)(a1 + 24)) + 5);
  long long v4 = (char *)*result;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = v5 - *(void *)a1;
  if (v5 != *(void *)a1) {
    __n128 result = (void **)memmove(*result, *(const void **)a1, v5 - *(void *)a1);
  }
  int v7 = &v4[v6];
  id v8 = *(unsigned char **)(a1 + 24);
  CFStringRef v9 = *(unsigned char **)(a1 + 32);
  int64_t v10 = v9 - v8;
  if (v9 != v8) {
    __n128 result = (void **)memmove(v7, v8, v9 - v8);
  }
  strcpy(&v7[v10], "CKIE");
  return result;
}

uint64_t *sub_100136990@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    long long v4 = std::generic_category();
    exception[1] = 22;
    exception[2] = v4;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Failed creating CFAutoRelease instance.";
  }
  return result;
}

void sub_100136A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10)
{
}

_DWORD *sub_100136A44(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001B0860;
    exception[1] = "_publicKeyHash";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

SecKeyAlgorithm sub_100136ABC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 36) != 42) {
    goto LABEL_7;
  }
  int v1 = *(_DWORD *)(a1 + 40);
  if (v1 == 10)
  {
    uint64_t v2 = &kSecKeyAlgorithmRSAEncryptionPKCS1;
    return *v2;
  }
  if (v1 != -2147483647)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v5 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Unsupported public key algorithm.", 0xA1u);
  }
  uint64_t v2 = &kSecKeyAlgorithmRSAEncryptionOAEPSHA1;
  return *v2;
}

_DWORD *sub_100136B40(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001B0860;
    exception[1] = "_encryptedBlob";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

int *sub_100136BB8(int *a1, uint64_t a2)
{
  long long v4 = a1 + 3;
  uint64_t v5 = a1 + 12;
  uint64_t v6 = a1 + 25;
  bzero(a1, 0x268uLL);
  int v7 = bswap32(*(_DWORD *)a2);
  LODWORD(v12) = 103;
  sub_100090DEC((uint64_t)"key_derivation_algorithm_t", v7, &v12, 1);
  *a1 = v7;
  int v8 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v12) = 0;
  sub_100090DEC((uint64_t)"key_derivation_prng_algorithm_t", v8, &v12, 1);
  a1[1] = v8;
  a1[2] = bswap32(*(_DWORD *)(a2 + 8));
  LODWORD(v12) = bswap32(*(_DWORD *)(a2 + 12));
  sub_100136FF0(v4, &v12);
  long long v9 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)a1 + 2) = v9;
  LODWORD(v12) = bswap32(*(_DWORD *)(a2 + 48));
  sub_100137068(v5, &v12);
  long long v10 = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 17) = v10;
  a1[21] = bswap32(*(_DWORD *)(a2 + 84));
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 88));
  unint64_t v12 = 0x8000000100000011;
  sub_100090DEC((uint64_t)"wrap_key_crypto_algo", (int)v5, &v12, 2);
  a1[22] = (int)v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 92));
  LODWORD(v12) = 7;
  sub_100090DEC((uint64_t)"wrap_key_crypto_padding_algo", (int)v5, &v12, 1);
  a1[23] = (int)v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 96));
  LODWORD(v12) = 6;
  sub_100090DEC((uint64_t)"crypto_mode", (int)v5, &v12, 1);
  a1[24] = (int)v5;
  LODWORD(v12) = bswap32(*(_DWORD *)(a2 + 100));
  sub_1001373E0(v6, &v12);
  memcpy(a1 + 26, (const void *)(a2 + 104), 0x200uLL);
  return a1;
}

uint64_t sub_100136DA0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(_DWORD *)(a2 + 48) = bswap32(*(_DWORD *)(a1 + 48));
  long long v4 = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 52) = v4;
  *(_DWORD *)(a2 + 84) = bswap32(*(_DWORD *)(a1 + 84));
  *(_DWORD *)(a2 + 88) = bswap32(*(_DWORD *)(a1 + 88));
  *(_DWORD *)(a2 + 92) = bswap32(*(_DWORD *)(a1 + 92));
  *(_DWORD *)(a2 + 96) = bswap32(*(_DWORD *)(a1 + 96));
  *(_DWORD *)(a2 + 10io_rings_get_max_version(0, 0) = bswap32(*(_DWORD *)(a1 + 100));
  memcpy((void *)(a2 + 104), (const void *)(a1 + 104), 0x200uLL);
  return a2 + 616;
}

uint64_t sub_100136E68(uint64_t a1)
{
  *(_DWORD *)a1 = 103;
  LODWORD(v3) = 103;
  sub_100090DEC((uint64_t)"key_derivation_algorithm_t", 103, &v3, 1);
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(v3) = 0;
  sub_100090DEC((uint64_t)"key_derivation_prng_algorithm_t", 0, &v3, 1);
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 4io_rings_get_max_version(0, 0) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 84) = 0x11000000C0;
  unint64_t v3 = 0x8000000100000011;
  sub_100090DEC((uint64_t)"wrap_key_crypto_algo", 17, &v3, 2);
  *(_DWORD *)(a1 + 92) = 7;
  LODWORD(v3) = 7;
  sub_100090DEC((uint64_t)"wrap_key_crypto_padding_algo", 7, &v3, 1);
  *(_DWORD *)(a1 + 96) = 6;
  LODWORD(v3) = 6;
  sub_100090DEC((uint64_t)"crypto_mode", 6, &v3, 1);
  bzero((void *)(a1 + 100), 0x204uLL);
  LODWORD(v3) = 20;
  sub_100136FF0((_DWORD *)(a1 + 12), &v3);
  LODWORD(v3) = 8;
  sub_100137068((_DWORD *)(a1 + 48), &v3);
  sub_1001370E0((void *)(a1 + 16), *(unsigned int *)(a1 + 12));
  sub_1001370E0((void *)(a1 + 52), *(unsigned int *)(a1 + 48));
  return a1;
}

_DWORD *sub_100136FF0(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001B0860;
    exception[1] = "_salt";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

_DWORD *sub_100137068(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001B0860;
    exception[1] = "_blob_encryption_iv";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

uint64_t sub_1001370E0(void *a1, size_t a2)
{
  uint64_t result = CCRandomGenerateBytes(a1, a2);
  if (result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v4);
    sub_100003DF0(v4, (uint64_t)"random generation failed with err code ", 39);
    std::ostream::operator<<();
    sub_100010C3C((uint64_t)exception, (uint64_t)v4, 0x9Au);
  }
  return result;
}

void sub_100137180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001371B4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 88);
  if (v1 == -2147483647) {
    return 0;
  }
  if (v1 != 17)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v4);
    sub_100003DF0(v4, (uint64_t)"Unsupported key decryption algo", 31);
    sub_100010C3C((uint64_t)exception, (uint64_t)v4, 0xA1u);
  }
  return 2;
}

void sub_100137260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100137294@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint8_t **a3@<X8>)
{
  unint64_t v4 = *(unsigned int *)(a1 + 84);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFUUIDRef v11 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"crypto_format: key size isn't a multiple of 8", 0x16u);
  }
  char v14 = 0;
  sub_10013A204(a3, v4 >> 3, &v14);
  size_t v7 = strlen(a2);
  uint64_t result = CCKeyDerivationPBKDF(2u, a2, v7, (const uint8_t *)(a1 + 16), *(unsigned int *)(a1 + 12), 1u, *(_DWORD *)(a1 + 8), *a3, a3[1] - *a3);
  unsigned int v9 = result;
  if (result)
  {
    unint64_t v12 = __cxa_allocate_exception(0x40uLL);
    *unint64_t v12 = &off_1001B6CA0;
    uint64_t v13 = std::generic_category();
    v12[1] = v9;
    void v12[2] = v13;
    *((unsigned char *)v12 + 24) = 0;
    *((unsigned char *)v12 + 48) = 0;
    v12[7] = "crypto_format: Can't derive key";
  }
  return result;
}

void sub_1001373C4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1001373E0(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001B0860;
    exception[1] = "_blob";
    exception[2] = "field size too large";
  }
  *uint64_t result = *a2;
  return result;
}

_DWORD *sub_100137458(_DWORD *a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = sub_100136E68((uint64_t)a1);
  LODWORD(v11[0]) = 8;
  sub_100137068((_DWORD *)(v6 + 48), v11);
  size_t v7 = strlen(a3);
  a1[2] = CCCalibratePBKDF(2u, v7, a1[3], 1u, (unint64_t)a1[21] >> 3, 0x64u);
  sub_1001368FC(a2, &v15);
  size_t dataOutMoved = 0;
  sub_100137294((uint64_t)a1, a3, &v12);
  CCAlgorithm v8 = sub_1001371B4((uint64_t)a1);
  LODWORD(a3) = CCCrypt(0, v8, 1u, v12, v13 - v12, a1 + 13, v15, v16 - (unsigned char *)v15, a1 + 26, 0x200uLL, &dataOutMoved);
  bzero(v12, v13 - v12);
  if (a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v11);
    sub_100003DF0(v11, (uint64_t)"Image key encoding failed with err code ", 40);
    std::ostream::operator<<();
    sub_100010C3C((uint64_t)exception, (uint64_t)v11, 0x9Au);
  }
  LODWORD(v11[0]) = dataOutMoved;
  sub_1001373E0(a1 + 25, v11);
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  if (v15)
  {
    unsigned int v16 = v15;
    operator delete(v15);
  }
  return a1;
}

void sub_1001375E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10000E628((uint64_t)va);
  size_t v7 = *(void **)(v5 - 88);
  if (v7)
  {
    *(void *)(v5 - 8io_rings_get_max_version(0, 0) = v7;
    operator delete(v7);
  }
  CCAlgorithm v8 = *(void **)(v5 - 56);
  if (v8)
  {
    *(void *)(v5 - 48) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100137650(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  int v4 = bswap32(*(_DWORD *)a2);
  long long v6 = xmmword_10016CAF0;
  int v7 = 9;
  sub_100090DEC((uint64_t)"auth_table_entry_mechanism", v4, &v6, 5);
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 4) = bswap64(*(void *)(a2 + 4));
  *(void *)(a1 + 12) = bswap64(*(void *)(a2 + 12));
  return a1;
}

void sub_100137710(unsigned int *a1@<X1>, const char *a2@<X2>, unint64_t *a3@<X8>)
{
  size_t __sz = 0;
  sub_100137294((uint64_t)a1, a2, (uint8_t **)&__p);
  CCAlgorithm v5 = sub_1001371B4((uint64_t)a1);
  unsigned int v6 = CCCrypt(1u, v5, 1u, __p, v10 - (unsigned char *)__p, a1 + 13, a1 + 26, a1[25], __src, a1[25], &__sz);
  if (v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    CCAlgorithm v8 = std::generic_category();
    exception[1] = v6;
    exception[2] = v8;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't decrypt wrapped key";
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_10011B280(a3, __sz);
  sub_10011B494((uint64_t)a3, (char *)*a3, __src, &__src[__sz], __sz);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_100137874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  unsigned int v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1001378B4@<D0>(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  if (!sub_1001379BC(a1, a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v14 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"crypto_format: Cookie differs", 0x23u);
  }
  unsigned int v6 = *a2;
  size_t v7 = (unint64_t)*(unsigned int *)(a1 + 24) >> 3;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_10013A284(&v17, v6, (uint64_t)v6 + v7, v7);
  unint64_t v8 = *(unsigned int *)(a1 + 24);
  unsigned int v9 = (char *)*a2 + (v8 >> 3);
  uint64_t v10 = (*(_DWORD *)(a1 + 32) + v8) >> 3;
  uint64_t v11 = (uint64_t)*a2 + v10;
  uint64_t v16 = 0;
  long long v15 = 0uLL;
  sub_10013A284(&v15, v9, v11, v10 - (v8 >> 3));
  *(_OWORD *)a3 = v17;
  *(void *)(a3 + 16) = v18;
  double result = *(double *)&v15;
  *(_OWORD *)(a3 + 24) = v15;
  *(void *)(a3 + 4io_rings_get_max_version(0, 0) = v16;
  return result;
}

void sub_1001379A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1001379BC(uint64_t a1, void *a2)
{
  uint64_t v2 = ((*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 24)) >> 3) + 5;
  if (a2[1] - *a2 != v2) {
    return 0;
  }
  uint64_t v3 = *a2 + v2;
  *((unsigned char *)&v6.__r_.__value_.__s + 23) = 4;
  LODWORD(v6.__r_.__value_.__l.__data_) = *(_DWORD *)(v3 - 5);
  v6.__r_.__value_.__s.__data_[4] = 0;
  BOOL v4 = std::string::compare(&v6, "CKIE") == 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_100137A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 == 616) {
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x40uLL);
  std::string v6 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"UDIF encryption: password header size mismatch", 0x16u);
}

void sub_100137C08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete[]();
}

uint64_t sub_100137C4C(uint64_t a1, uint64_t a2, uint64_t *a3, __SecKey *a4, uint64_t a5)
{
  unsigned int v9 = (void *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  CFErrorRef error = 0;
  *(void *)&long long v21 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a5 + 52), *(unsigned int *)(a5 + 48));
  sub_100136990((uint64_t *)&v21, (uint64_t *)&v27);
  CFStringRef v10 = sub_100136ABC(a5);
  CFDataRef v26 = SecKeyCreateDecryptedData(a4, v10, v27, &error);
  if (!v26)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    void *exception = &off_1001B6CA0;
    CFDataRef v19 = std::generic_category();
    exception[1] = Code;
    exception[2] = v19;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Error while decrypting data using keychain";
  }
  sub_100136990((uint64_t *)&v26, (uint64_t *)&v25);
  uint64_t v11 = *a3;
  sub_10011B198(v25, 0, 0, (unint64_t *)__p);
  sub_1001378B4(v11, (const void **)__p, (uint64_t)&v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v12;
  if (v13) {
    operator delete();
  }
  uint64_t v14 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v14;
    operator delete(v14);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v21;
  *(void *)(a1 + 16) = v22;
  long long v15 = *(void **)(a1 + 24);
  if (v15)
  {
    *(void *)(a1 + 32) = v15;
    operator delete(v15);
    *unsigned int v9 = 0;
    v9[1] = 0;
    _OWORD v9[2] = 0;
  }
  *(_OWORD *)(a1 + 24) = v23;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = v24;
  sub_1000807A8((const void **)&v25);
  sub_1000807A8((const void **)&v27);
  return a1;
}

void sub_100137E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v20);
  sub_1000807A8((const void **)(v22 - 64));
  uint64_t v24 = *(void **)(v19 + 56);
  if (v24)
  {
    *(void *)(v19 + 64) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void *)(v19 + 48);
  *(void *)(v19 + 48) = 0;
  if (v25) {
    operator delete();
  }
  CFDataRef v26 = *v21;
  if (*v21)
  {
    *(void *)(v19 + 32) = v26;
    operator delete(v26);
  }
  CFDataRef v27 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100137EE4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100137F2C(_OWORD *a1)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  operator new[]();
}

void sub_10013823C()
{
  __cxa_end_catch();
  sub_100137EE4((uint64_t)&v0);
  JUMPOUT(0x100138270);
}

void sub_100138260()
{
}

__n128 sub_1001382F0(void *a1, uint64_t a2, __n128 *a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  __n128 result = *a3;
  *(__n128 *)(a1 + 3) = *a3;
  a1[5] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  uint64_t v5 = *a4;
  *a4 = 0;
  a1[6] = v5;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  return result;
}

const void **sub_100138344(uint64_t a1, char *a2)
{
  return sub_1001362AC(*(void *)(a1 + 48), a2);
}

uint64_t sub_10013834C(uint64_t a1, CCOperation a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v10 = a1 + 24;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = 0;
  sub_100060BA8((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  *(void *)(v10 + 24) = a5;
  *(void *)(v10 + 32) = a4;
  CCCryptorStatus v11 = CCCryptorCreate(a2, 0, 0, *(const void **)a3, *(void *)(a3 + 8) - *(void *)a3, 0, (CCCryptorRef *)(v10 - 16));
  if (v11)
  {
    unsigned int v13 = v11;
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    long long v15 = std::generic_category();
    exception[1] = v13;
    exception[2] = v15;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't initialize aes cryptor";
  }
  *(unsigned char *)a1 = 1;
  return a1;
}

void sub_100138450(_Unwind_Exception *exception_object)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013846C(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    CCCryptorRelease(*(CCCryptorRef *)(a1 + 8));
  }
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1001384B4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  uint64_t v3 = *(void *)(a2 + 48);
  *(_OWORD *)(a2 + 4io_rings_get_max_version(0, 0) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v3;
  sub_10013D768(a1 + 24, &v7);
  long long v4 = v7;
  long long v7 = 0uLL;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v4;
  if (v5)
  {
    sub_100010A48(v5);
    if (*((void *)&v7 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  return a1;
}

void sub_100138570(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v5) {
    operator delete();
  }
  std::string v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  long long v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001385CC(uint64_t a1, uint64_t *a2, uint64_t a3, const char *a4, __SecKey *a5)
{
  SecKeyRef v27 = a5;
  unsigned int v9 = (unint64_t *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v10;
  unint64_t v11 = (unint64_t)*(unsigned int *)(v10 + 24) >> 3;
  uint64_t v12 = *(char **)a1;
  unsigned int v13 = *(char **)(a1 + 8);
  if (v11 <= v13 - v12)
  {
    if (v11 < v13 - v12)
    {
      unsigned int v13 = &v12[v11];
      *(void *)(a1 + 8) = &v12[v11];
    }
  }
  else
  {
    sub_10013A300((unint64_t *)a1, v11 - (v13 - v12));
    uint64_t v12 = *(char **)a1;
    unsigned int v13 = *(char **)(a1 + 8);
  }
  sub_1001370E0(v12, v13 - v12);
  unint64_t v15 = (unint64_t)*(unsigned int *)(*(void *)(a1 + 48) + 32) >> 3;
  uint64_t v16 = *(char **)(a1 + 24);
  long long v17 = *(char **)(a1 + 32);
  if (v15 <= v17 - v16)
  {
    if (v15 < v17 - v16)
    {
      long long v17 = &v16[v15];
      *(void *)(a1 + 32) = &v16[v15];
    }
  }
  else
  {
    sub_10013A300(v9, v15 - (v17 - v16));
    uint64_t v16 = *(char **)(a1 + 24);
    long long v17 = *(char **)(a1 + 32);
  }
  sub_1001370E0(v16, v17 - v16);
  sub_10013D768((uint64_t)v9, v28);
  long long v18 = *(_OWORD *)v28;
  *(_OWORD *)uint64_t v28 = 0uLL;
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v18;
  if (v19)
  {
    sub_100010A48(v19);
    if (*(void *)&v28[8]) {
      sub_100010A48(*(std::__shared_weak_count **)&v28[8]);
    }
  }
  __p = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  if (a4)
  {
    sub_100137458(v28, a1, a4);
    unint64_t v25 = sub_10013A43C((uint64_t *)&__p, (uint64_t)v28);
  }
  if (a5)
  {
    sub_10013656C((uint64_t)v28, a1, &v27);
    unint64_t v20 = v25;
    if (v25 >= v26)
    {
      uint64_t v22 = sub_10013A86C((uint64_t *)&__p, (uint64_t)v28);
    }
    else
    {
      *(_DWORD *)(v25 + 32) = 0;
      *(_OWORD *)unint64_t v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_DWORD *)unint64_t v20 = *(_DWORD *)v28;
      long long v21 = *(_OWORD *)&v28[4];
      *(_OWORD *)(v20 + 2io_rings_get_max_version(0, 0) = v29;
      *(_OWORD *)(v20 + 4) = v21;
      *(void *)(v20 + 36) = v30;
      *(_DWORD *)(v20 + 44) = v31;
      bzero((void *)(v20 + 48), 0x204uLL);
      *(_DWORD *)(v20 + 48) = v32;
      memcpy((void *)(v20 + 52), v33, 0x200uLL);
      *(_DWORD *)(v20 + 616) = 1;
      uint64_t v22 = v20 + 620;
    }
    unint64_t v25 = v22;
  }
  sub_100138938(a1, a3, (uint64_t *)&__p);
  if (__p)
  {
    unint64_t v25 = (unint64_t)__p;
    operator delete(__p);
  }
  return a1;
}

void sub_1001388BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned int v13 = *(std::__shared_weak_count **)(v10 + 64);
  if (v13) {
    sub_100010A48(v13);
  }
  uint64_t v14 = *(void *)(v10 + 48);
  *(void *)(v10 + 48) = 0;
  if (v14) {
    operator delete();
  }
  unint64_t v15 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100138938(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (a3[1] - *a3) >> 2;
  *(_DWORD *)(*(void *)(a1 + 48) + 72) = 1496311187 * v6;
  uint64_t v30 = 76;
  unint64_t v7 = 0xBDEF7BDEF7BDEF7CLL * v6 + 76;
  unint64_t v29 = v7;
  uint64_t v8 = sub_100138C58(a1, a3);
  sub_10013AAE8(&__p, v8 + v7);
  sub_100136208(*(void *)(a1 + 48), (uint64_t)__p);
  uint64_t v9 = *a3;
  for (uint64_t i = a3[1]; v9 != i; v9 += 620)
  {
    long long v21 = &v30;
    uint64_t v22 = (std::__shared_weak_count *)&v29;
    p_p = &__p;
    uint64_t v11 = *(unsigned int *)(v9 + 616);
    if (v11 == -1) {
      sub_100017DCC();
    }
    int v31 = &v21;
    ((void (*)(uint64_t ***, uint64_t))off_1001B5310[v11])(&v31, v9);
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) < *(void *)(*(void *)(a1 + 48) + 64))
  {
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    if (v12)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001B6CA0;
      unint64_t v20 = std::generic_category();
      exception[1] = v12;
      exception[2] = v20;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Failed truncating crypto header";
    }
  }
  unsigned int v13 = (uint64_t *)__p;
  uint64_t v14 = v28;
  unint64_t v15 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  long long v21 = v13;
  uint64_t v22 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  p_p = (void **)(v14 - (unsigned char *)v13);
  uint64_t v24 = 0;
  int64_t v25 = v14 - (unsigned char *)v13;
  char v26 = 0;
  unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)a2 + 80))(a2, &v21);
  if (p_p != (void **)(int)v16)
  {
    long long v17 = __cxa_allocate_exception(0x40uLL);
    *long long v17 = &off_1001B6CA0;
    long long v18 = std::generic_category();
    v17[1] = v16;
    v17[2] = v18;
    *((unsigned char *)v17 + 24) = 0;
    *((unsigned char *)v17 + 48) = 0;
    v17[7] = "Failed writing crypto header";
  }
  if (v22) {
    sub_100010A48(v22);
  }
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
}

void sub_100138C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100138C58(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  int v4 = 0;
  do
  {
    uint64_t v5 = *(unsigned int *)(v2 + 616);
    if (v5 == -1) {
      sub_100017DCC();
    }
    uint64_t v8 = &v7;
    v4 += ((uint64_t (*)(char **, uint64_t))off_1001B5300[v5])(&v8, v2);
    v2 += 620;
  }
  while (v2 != v3);
  return v4;
}

uint64_t sub_100138CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a4;
  uint64_t v9 = 0;
  unint64_t v10 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 48) + 52);
  while (1)
  {
    int v11 = sub_100138E3C(a2, (a5 + v9) / v10, (const void *)(a3 + v9), (void *)(a3 + v9), 1);
    if (v11) {
      break;
    }
    v9 += v10;
    if (!--v6) {
      return 0;
    }
  }
  int v13 = v11;
  *(void *)&long long v14 = "crypto_format_backend::crypt_chunk(crypto::format::aes_context &, char *, size_t, uint64_t)";
  *((void *)&v14 + 1) = 34;
  int v15 = 16;
  sub_1001390D8(v16, &v14);
  sub_100003DF0(v17, (uint64_t)"Crypto operation on data of ", 28);
  std::ostream::operator<<();
  sub_100003DF0(v17, (uint64_t)" failed with ", 13);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_10013C2F0((uint64_t)v16);
  std::ios::~ios();
  if (v13 < 0) {
    return v13;
  }
  else {
    return -v13;
  }
}

void sub_100138E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001391FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100138E3C(uint64_t a1, unsigned int a2, const void *a3, void *a4, uint64_t a5)
{
  macOut[0] = 0;
  macOut[1] = 0;
  int v17 = 0;
  unint64_t v10 = *(const void **)(a1 + 56);
  LODWORD(v13) = bswap32(a2);
  memcpy(&__dst, v10, sizeof(__dst));
  CCHmacUpdate(&__dst, &v13, 4uLL);
  CCHmacFinal(&__dst, macOut);
  CCCryptorStatus v11 = CCCryptorReset(*(CCCryptorRef *)(a1 + 8), macOut);
  if (v11)
  {
    *(void *)&long long v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((void *)&v13 + 1) = 34;
    int v14 = 16;
    sub_10013AD88(&__dst, &v13);
    sub_100003DF0(&__dst.ctx[90], (uint64_t)"CommonCryptoReset @ ", 20);
    std::ostream::operator<<();
    sub_100003DF0(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<();
    sub_100003DF0(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10013B0E8((uint64_t)&__dst);
  }
  else
  {
    CCCryptorStatus v11 = CCCryptorUpdate(*(CCCryptorRef *)(a1 + 8), a3, *(void *)(a1 + 48) * a5, a4, *(void *)(a1 + 48) * a5, 0);
    if (!v11) {
      return 0;
    }
    *(void *)&long long v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((void *)&v13 + 1) = 34;
    int v14 = 16;
    sub_10013AEF0(&__dst, &v13);
    sub_100003DF0(&__dst.ctx[90], (uint64_t)"CommonCryptoUpdate @ ", 21);
    std::ostream::operator<<();
    sub_100003DF0(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<();
    sub_100003DF0(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10013B8EC((uint64_t)&__dst);
  }
  std::ios::~ios();
  if (v11 < 0) {
    return v11;
  }
  else {
    return -v11;
  }
}

void sub_1001390A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10013B014((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1001390D8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013D8A8((uint64_t)a1, a2);
  *a1 = off_1001B5778;
  a1[45] = &off_1001B5878;
  a1[46] = &off_1001B58A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5778;
  a1[45] = off_1001B5800;
  a1[46] = off_1001B5828;
  return a1;
}

void sub_1001391D8(_Unwind_Exception *a1)
{
  sub_10013C2F0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001391FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100139240(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4 >= 0x21 && (int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 48) + 52), qos_class_self() > 0x14))
  {
    unsigned int v14 = 0;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100139358;
    block[3] = &unk_1001B51F0;
    block[4] = a1;
    block[5] = a4;
    block[6] = a2;
    block[7] = a3;
    int v13 = v10;
    block[8] = a5;
    block[9] = &v14;
    dispatch_apply((a4 + 31) >> 5, 0, block);
    return atomic_load(&v14);
  }
  else
  {
    return sub_100138CE8(a1, a2, a3, a4, a5);
  }
}

uint64_t sub_100139358(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 32 * a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if ((unint64_t)(*(void *)(a1 + 40) - 32 * a2) >= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 40) - 32 * a2;
  }
  sub_10013834C((uint64_t)v8, *(_DWORD *)(*(void *)(a1 + 48) + 16), *(void *)(a1 + 48) + 24, *(void *)(*(void *)(a1 + 48) + 56), *(void *)(*(void *)(a1 + 48) + 48));
  unsigned int v6 = sub_100138CE8(v4, (uint64_t)v8, *(void *)(a1 + 56) + v3 * *(unsigned int *)(a1 + 80), v5, v3 * *(unsigned int *)(a1 + 80) + *(void *)(a1 + 64));
  if (v6) {
    atomic_store(v6, *(unsigned int **)(a1 + 72));
  }
  return sub_10013846C((uint64_t)v8);
}

void sub_1001393F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100139404(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 48);
  uint64_t v9 = *(unsigned int *)(v8 + 52);
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)(v8 + 64);
  }
  uint64_t v11 = sub_1000380B0(*(void *)(a1 + 24), a2, v9 * a3, v10 + a4);
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v13 = v11;
    *(void *)&long long v14 = "crypto_format_backend::read_aligned(char *, ssize_t, uint64_t)";
    *((void *)&v14 + 1) = 35;
    int v15 = 16;
    sub_10013958C(v16, &v14);
    sub_100003DF0(v17, (uint64_t)"Crypto couldn't read from inner backend @ ", 42);
    std::ostream::operator<<();
    sub_100003DF0(v17, (uint64_t)"/", 1);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10013CA64((uint64_t)v16);
    std::ios::~ios();
    return v13;
  }

  return sub_100139240(a1, a1 + 120, a2, a3, a4);
}

void sub_100139574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001396B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10013958C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013D938((uint64_t)a1, a2);
  *a1 = off_1001B5998;
  a1[45] = &off_1001B5A98;
  a1[46] = &off_1001B5AC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5998;
  a1[45] = off_1001B5A20;
  a1[46] = off_1001B5A48;
  return a1;
}

void sub_10013968C(_Unwind_Exception *a1)
{
  sub_10013CA64(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001396B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001396F4(uint64_t a1, char **a2)
{
  uint64_t v4 = *a2;
  uint64_t v6 = (uint64_t)a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 48) + 52);
  uint64_t v8 = (unint64_t)v5 / v7 * v7;
  unint64_t v9 = (unint64_t)v5 % v7;
  if ((unint64_t)v5 % v7)
  {
    uint64_t result = sub_100139404(a1, *(void *)(a1 + 184), 1uLL, (unint64_t)v5 / v7 * v7);
    if (result) {
      return result;
    }
    unint64_t v11 = v9;
    if (v6 >= (uint64_t)(v7 - v9)) {
      size_t v12 = v7 - v9;
    }
    else {
      size_t v12 = v6;
    }
    memcpy(v4, (const void *)(*(void *)(a1 + 184) + v11), v12);
    v6 -= v12;
    v4 += v12;
    v8 += v7;
  }
  uint64_t result = sub_100139404(a1, (uint64_t)v4, v6 / v7, v8);
  if (result) {
    return result;
  }
  if (!(v6 % v7)) {
    return *((unsigned int *)a2 + 4);
  }
  uint64_t result = sub_100139404(a1, *(void *)(a1 + 184), 1uLL, v6 - v6 % v7 + v8);
  if (!result)
  {
    memcpy(&v4[v6 / v7 * v7], *(const void **)(a1 + 184), v6 % v7);
    return *((unsigned int *)a2 + 4);
  }
  return result;
}

uint64_t sub_100139804(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 48);
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(v8 + 64);
  }
  uint64_t v10 = *(unsigned int *)(v8 + 52);
  uint64_t v11 = sub_100139240(a1, a1 + 56, a2, a3, a4);
  if (!v11)
  {
    uint64_t v12 = sub_10003D44C(*(void *)(a1 + 24), a2, v10 * a3, v9 + a4);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v11 = v12;
      *(void *)&long long v14 = "crypto_format_backend::write_aligned(char *, ssize_t, uint64_t)";
      *((void *)&v14 + 1) = 36;
      int v15 = 16;
      sub_100139968(v16, &v14);
      sub_100003DF0(v17, (uint64_t)"Crypto couldn't write to inner backend @ ", 41);
      std::ostream::operator<<();
      sub_100003DF0(v17, (uint64_t)"/", 1);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_10013D1D8((uint64_t)v16);
      std::ios::~ios();
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

void sub_100139950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100139A8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100139968(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013D9C8((uint64_t)a1, a2);
  *a1 = off_1001B5BB8;
  a1[45] = &off_1001B5CB8;
  a1[46] = &off_1001B5CE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5BB8;
  a1[45] = off_1001B5C40;
  a1[46] = off_1001B5C68;
  return a1;
}

void sub_100139A68(_Unwind_Exception *a1)
{
  sub_10013D1D8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100139A8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100139AD0(uint64_t a1, char **a2)
{
  uint64_t v4 = *a2;
  int64_t v6 = (int64_t)a2[2];
  uint64_t v5 = a2[3];
  int64_t v7 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 48) + 52);
  uint64_t v8 = (unint64_t)v5 / v7 * v7;
  unint64_t v9 = (unint64_t)v5 % v7;
  if ((unint64_t)v5 % v7)
  {
    uint64_t result = sub_100139404(a1, *(void *)(a1 + 184), 1uLL, (unint64_t)v5 / v7 * v7);
    if (result) {
      return result;
    }
    uint64_t v12 = &v4[v9];
    size_t v13 = v6 >= (uint64_t)(v7 - v9) ? v7 - v9 : v6;
    memcpy(*(void **)(a1 + 184), v12, v13);
    uint64_t result = sub_100139804(a1, *(void *)(a1 + 184), 1uLL, v8);
    if (result) {
      return result;
    }
    v6 -= v13;
    v4 += v13;
    v8 += v13;
  }
  if (!*((unsigned char *)a2 + 40))
  {
    uint64_t v10 = v6 / v7;
    uint64_t result = sub_100139804(a1, (uint64_t)v4, v6 / v7, v8);
    if (result) {
      return result;
    }
    v4 += v10 * v7;
    v8 += v10 * v7;
    v6 %= v7;
    goto LABEL_5;
  }
  if (v6 < v7)
  {
LABEL_5:
    if (!v6) {
      return *((unsigned int *)a2 + 4);
    }
    uint64_t result = sub_100139404(a1, *(void *)(a1 + 184), 1uLL, v8);
    if (!result)
    {
      memcpy(*(void **)(a1 + 184), v4, v6);
      uint64_t result = sub_100139804(a1, *(void *)(a1 + 184), 1uLL, v8);
      if (!result) {
        return *((unsigned int *)a2 + 4);
      }
    }
    return result;
  }
  uint64_t v14 = 0;
  while (1)
  {
    memcpy(*(void **)(a1 + 184), &v4[v14], v7);
    uint64_t result = sub_100139804(a1, *(void *)(a1 + 184), 1uLL, v8 + v14);
    if (result) {
      return result;
    }
    v6 -= v7;
    v14 += v7;
    if (v6 < v7)
    {
      v8 += v14;
      v4 += v14;
      goto LABEL_5;
    }
  }
}

uint64_t sub_100139C60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 48) + 64);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, v4 + a2);
}

uint64_t sub_100139CAC(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 192);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 48);
  if ((v3 & 2) == 0) {
    *(void *)(v4 + 56) = a2;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v5 + 56))(v5, (a2 + (unint64_t)*(unsigned int *)(v4 + 52) - 1)/ *(unsigned int *)(v4 + 52)* *(unsigned int *)(v4 + 52)+ v6);
  if (!v7)
  {
    sub_100136208(*(void *)(*(void *)(a1 + 40) + 48), (uint64_t)v16);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
    uint64_t v11 = v16;
    uint64_t v12 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v13 = xmmword_10016DD80;
    uint64_t v14 = 76;
    char v15 = 0;
    unsigned int v9 = (*(uint64_t (**)(void, unsigned char **))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v11);
    if ((void)v13 == v9) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v9;
    }
    if (v12) {
      sub_100010A48(v12);
    }
  }
  return v7;
}

void sub_100139DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_100010A48(a11);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100139E1C(uint64_t a1, char *a2)
{
  return sub_1001362AC(*(void *)(*(void *)(a1 + 40) + 48), a2);
}

void sub_100139E28(void *a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 72))(&v6);
  sub_10003C438(a1, &v6);
  if (v7) {
    sub_100010A48(v7);
  }
  *a1 = off_1001B5220;
  a1[5] = *a3;
  uint64_t v5 = a3[1];
  a1[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10013834C((uint64_t)(a1 + 7), 0, *a3, *(void *)(*a3 + 56), *(unsigned int *)(*(void *)(*a3 + 48) + 52));
  sub_10013834C((uint64_t)(a1 + 15), 1u, *a3, *(void *)(*a3 + 56), *(unsigned int *)(*(void *)(*a3 + 48) + 52));
  operator new[]();
}

void sub_100139F50(_Unwind_Exception *a1)
{
  sub_10013846C(v3);
  sub_10013846C(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[6];
  if (v5) {
    sub_100010A48(v5);
  }
  sub_10003C494(v1);
  _Unwind_Resume(a1);
}

void sub_100139F94(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_10003C438(a1, a3);
  *uint64_t v5 = off_1001B5220;
  uint64_t v6 = *(void *)(a2 + 48);
  v5[5] = *(void *)(a2 + 40);
  v5[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10013834C((uint64_t)(a1 + 7), *(_DWORD *)(a2 + 72), a2 + 80, *(void *)(a2 + 112), *(void *)(a2 + 104));
  sub_10013834C((uint64_t)(a1 + 15), *(_DWORD *)(a2 + 136), a2 + 144, *(void *)(a2 + 176), *(void *)(a2 + 168));
  operator new[]();
}

void sub_10013A05C(_Unwind_Exception *a1)
{
  sub_10013846C(v3);
  sub_10013846C(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[6];
  if (v5) {
    sub_100010A48(v5);
  }
  sub_10003C494(v1);
  _Unwind_Resume(a1);
}

void sub_10013A09C(uint64_t a1, void *a2)
{
  sub_10013DA58((uint64_t)&v2, a1, a2);
}

uint64_t sub_10013A0E0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 192) & 2) != 0 || (uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 48) + 56)) == 0)
  {
    unint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 192)) {
      unint64_t v4 = 0;
    }
    else {
      unint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 48) + 64);
    }
    if (v3 <= v4)
    {
      return 0;
    }
    else
    {
      uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
      if (*(unsigned char *)(a1 + 192)) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 48) + 64);
      }
      return v5 - v6;
    }
  }
  return result;
}

void sub_10013A1B8(void *a1)
{
  sub_10013D6BC(a1);

  operator delete();
}

void *sub_10013A1F0(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"crypto", 6);
}

void *sub_10013A204(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_100060C24(a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_10013A268(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10013A284(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100060C24(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10013A2E4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013A300(unint64_t *a1, size_t a2)
{
  size_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_10001796C();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    long long v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      size_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_10013A43C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4) {
    sub_10001796C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x34DA034DA034DALL) {
    unint64_t v9 = 0x69B4069B4069B4;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    size_t v10 = (char *)sub_10013A784(v7, v9);
  }
  else {
    size_t v10 = 0;
  }
  __p = v10;
  uint64_t v14 = &v10[620 * v4];
  uint64_t v15 = (uint64_t)v14;
  unsigned int v16 = &v10[620 * v9];
  *(_DWORD *)(sub_10013A5E0((uint64_t)v14, a2) + 616) = 0;
  v15 += 620;
  sub_10013A6A4(a1, &__p);
  uint64_t v11 = a1[1];
  if ((char *)v15 != v14) {
    uint64_t v15 = (uint64_t)&v14[(v15 - (uint64_t)v14 - 620) % 0x26CuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_10013A58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013A5E0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 8io_rings_get_max_version(0, 0) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 52) = v5;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  bzero((void *)(a1 + 100), 0x204uLL);
  *(_DWORD *)(a1 + 10io_rings_get_max_version(0, 0) = *(_DWORD *)(a2 + 100);
  memcpy((void *)(a1 + 104), (const void *)(a2 + 104), 0x200uLL);
  return a1;
}

uint64_t *sub_10013A6A4(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = v6 - 620;
    do
    {
      uint64_t v8 = v4 - 620;
      *(unsigned char *)uint64_t v7 = 0;
      *(_DWORD *)(v7 + 616) = -1;
      uint64_t v9 = *(unsigned int *)(v4 - 4);
      if (v9 != -1)
      {
        uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t, uint64_t))off_1001B52F0[v9])(&v13, v7, v8);
        *(_DWORD *)(v7 + 616) = v9;
      }
      v7 -= 620;
      uint64_t v4 = v8;
    }
    while (v8 != v5);
    uint64_t v6 = v7 + 620;
  }
  a2[1] = v6;
  uint64_t v10 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  _OWORD v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *sub_10013A784(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x69B4069B4069B5) {
    sub_100010CDC();
  }
  return operator new(620 * a2);
}

uint64_t sub_10013A7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013A5E0(a2, a3);
}

void *sub_10013A7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 4);
  *(_OWORD *)(a2 + 2io_rings_get_max_version(0, 0) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a2 + 4io_rings_get_max_version(0, 0) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
  bzero((void *)(a2 + 48), 0x204uLL);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);

  return memcpy((void *)(a2 + 52), (const void *)(a3 + 52), 0x200uLL);
}

uint64_t sub_10013A86C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4) {
    sub_10001796C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x34DA034DA034DALL) {
    unint64_t v9 = 0x69B4069B4069B4;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10013A784(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[620 * v4];
  __p = v10;
  unsigned int v16 = v11;
  long long v18 = &v10[620 * v9];
  *((_DWORD *)v11 + 8) = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  long long v12 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v11 + 2io_rings_get_max_version(0, 0) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v11 + 4) = v12;
  *((_DWORD *)v11 + 9) = *(_DWORD *)(a2 + 36);
  *((_DWORD *)v11 + 1io_rings_get_max_version(0, 0) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v11 + 11) = *(_DWORD *)(a2 + 44);
  bzero(v11 + 48, 0x204uLL);
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  memcpy(v11 + 52, (const void *)(a2 + 52), 0x200uLL);
  *((_DWORD *)v11 + 154) = 1;
  int v17 = v11 + 620;
  sub_10013A6A4(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    int v17 = &v16[(v17 - v16 - 620) % 0x26CuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_10013AA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10013AA64(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100060C24(a1, a2);
    uint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_10013AABC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013AAD8()
{
  return 616;
}

uint64_t sub_10013AAE0()
{
  return 564;
}

void *sub_10013AAE8(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100060C24(a1, a2);
    uint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_10013AB40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013AB5C(void ***a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  long long v7 = xmmword_10016CAF0;
  int v8 = 9;
  sub_100090DEC((uint64_t)"auth_table_entry_mechanism", 1, &v7, 5);
  unint64_t v4 = *v3[1];
  uint64_t v5 = *v3[2] + **v3;
  *(_DWORD *)uint64_t v5 = 0x1000000;
  *(void *)(v5 + 4) = bswap64(v4);
  *(void *)(v5 + 12) = 0x6802000000000000;
  **v3 += 20;
  uint64_t result = sub_100136DA0(a2, *v3[2] + *v3[1]);
  *v3[1] += 616;
  return result;
}

void *sub_10013AC48(void ***a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  long long v9 = xmmword_10016CAF0;
  int v10 = 9;
  sub_100090DEC((uint64_t)"auth_table_entry_mechanism", 2, &v9, 5);
  unint64_t v4 = *v3[1];
  uint64_t v5 = *v3[2] + **v3;
  *(_DWORD *)uint64_t v5 = 0x2000000;
  *(void *)(v5 + 4) = bswap64(v4);
  *(void *)(v5 + 12) = 0x3402000000000000;
  **v3 += 20;
  uint64_t v6 = *v3[2] + *v3[1];
  *(_DWORD *)uint64_t v6 = bswap32(*(_DWORD *)a2);
  long long v7 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v6 + 2io_rings_get_max_version(0, 0) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v6 + 4) = v7;
  *(_DWORD *)(v6 + 36) = bswap32(*(_DWORD *)(a2 + 36));
  *(_DWORD *)(v6 + 4io_rings_get_max_version(0, 0) = bswap32(*(_DWORD *)(a2 + 40));
  *(_DWORD *)(v6 + 44) = bswap32(*(_DWORD *)(a2 + 44));
  *(_DWORD *)(v6 + 48) = bswap32(*(_DWORD *)(a2 + 48));
  uint64_t result = memcpy((void *)(v6 + 52), (const void *)(a2 + 52), 0x200uLL);
  *v3[1] += 564;
  return result;
}

void *sub_10013AD88(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013B058((uint64_t)a1, a2);
  *a1 = off_1001B5338;
  a1[45] = &off_1001B5438;
  a1[46] = &off_1001B5460;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5338;
  a1[45] = off_1001B53C0;
  a1[46] = off_1001B53E8;
  return a1;
}

void sub_10013AE88(_Unwind_Exception *a1)
{
  sub_10013B0E8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10013AEAC(uint64_t a1)
{
  return a1;
}

void *sub_10013AEF0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013B85C((uint64_t)a1, a2);
  *a1 = off_1001B5558;
  a1[45] = &off_1001B5658;
  a1[46] = &off_1001B5680;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5558;
  a1[45] = off_1001B55E0;
  a1[46] = off_1001B5608;
  return a1;
}

void sub_10013AFF0(_Unwind_Exception *a1)
{
  sub_10013B8EC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10013B014(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013B058(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B54D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10013B0D4(_Unwind_Exception *a1)
{
}

uint64_t sub_10013B0E8(uint64_t a1)
{
  *(void *)a1 = off_1001B54D0;
  sub_10013B4F0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10013B224(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10013B0E8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013B28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10013B2C4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10013B32C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013B0E8(v1);

  return std::ios::~ios();
}

void sub_10013B378(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013B0E8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013B3DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013B0E8(v1);

  return std::ios::~ios();
}

void sub_10013B43C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013B0E8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10013B4B8(uint64_t a1)
{
  sub_10013B0E8(a1);

  operator delete();
}

uint64_t sub_10013B4F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10013B674((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10013B64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10013B674(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 564;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 564;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10013B85C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B56F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10013B8D8(_Unwind_Exception *a1)
{
}

uint64_t sub_10013B8EC(uint64_t a1)
{
  *(void *)a1 = off_1001B56F0;
  sub_10013BCF4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10013BA28(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10013B8EC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013BA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10013BAC8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10013BB30(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013B8EC(v1);

  return std::ios::~ios();
}

void sub_10013BB7C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013B8EC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013BBE0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013B8EC(v1);

  return std::ios::~ios();
}

void sub_10013BC40(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013B8EC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10013BCBC(uint64_t a1)
{
  sub_10013B8EC(a1);

  operator delete();
}

uint64_t sub_10013BCF4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10013BE78((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10013BE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10013BE78(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 578;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 578;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10013C060(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013C2F0(v1);

  return std::ios::~ios();
}

uint64_t sub_10013C0AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013C2F0(v1);

  return std::ios::~ios();
}

void sub_10013C10C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10013C2F0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013C174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10013C1AC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10013C214(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013C2F0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10013C278(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013C2F0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013C2F0(uint64_t a1)
{
  *(void *)a1 = off_1001B5910;
  sub_10013C42C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10013C42C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10013C5EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10013C588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013C5B4(uint64_t a1)
{
  sub_10013C2F0(a1);

  operator delete();
}

int *sub_10013C5EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 690;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 690;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10013C7D4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013CA64(v1);

  return std::ios::~ios();
}

uint64_t sub_10013C820(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013CA64(v1);

  return std::ios::~ios();
}

void sub_10013C880(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10013CA64(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013C8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10013C920(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10013C988(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013CA64(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10013C9EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013CA64(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013CA64(uint64_t a1)
{
  *(void *)a1 = off_1001B5B30;
  sub_10013CBA0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10013CBA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10013CD60((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10013CCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013CD28(uint64_t a1)
{
  sub_10013CA64(a1);

  operator delete();
}

int *sub_10013CD60(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 738;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 738;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10013CF48(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013D1D8(v1);

  return std::ios::~ios();
}

uint64_t sub_10013CF94(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013D1D8(v1);

  return std::ios::~ios();
}

void sub_10013CFF4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10013D1D8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013D05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10013D094(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10013D0FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013D1D8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10013D160(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013D1D8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013D1D8(uint64_t a1)
{
  *(void *)a1 = off_1001B5D50;
  sub_10013D314(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10013D314(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10013D4D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10013D470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013D49C(uint64_t a1)
{
  sub_10013D1D8(a1);

  operator delete();
}

int *sub_10013D4D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 806;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 806;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10013D6BC(void *a1)
{
  *a1 = off_1001B5220;
  if (a1[23]) {
    operator delete[]();
  }
  sub_10013846C((uint64_t)(a1 + 15));
  sub_10013846C((uint64_t)(a1 + 7));
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_100010A48(v2);
  }
  *a1 = off_1001966B0;
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_100010A48(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_10013D768@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x198uLL);
  uint64_t result = sub_10013D7C4((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10013D7B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10013D7C4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001B5DD0;
  CCHmacInit((CCHmacContext *)(a1 + 24), 0, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

void sub_10013D818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10013D82C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B5DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10013D84C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B5DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10013D8A8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B5910;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10013D924(_Unwind_Exception *a1)
{
}

uint64_t sub_10013D938(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B5B30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10013D9B4(_Unwind_Exception *a1)
{
}

uint64_t sub_10013D9C8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B5D50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10013DA44(_Unwind_Exception *a1)
{
}

void sub_10013DA58(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = operator new(0xE0uLL);
  sub_10013DAD4(v5, a2, a3);
}

void sub_10013DAC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10013DAD4(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019AE08;
  sub_100139F94(a1 + 3, a2, a3);
}

void sub_10013DB1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10013DB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *a4;
  *a4 = 0;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = 1;
  operator new();
}

void sub_10013DC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(v15 + 16);
  *(void *)(v15 + 16) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(v15 + 8);
  *(void *)(v15 + 8) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013DD30(uint64_t a1)
{
  unint64_t v2 = (unint64_t)(*(void *)(*(void *)(a1 + 8) + 16) + 7) >> 3;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  BOOL v4 = v3 == v2 || v3 == v2 + 16;
  uint64_t v5 = v4;
  if (v4)
  {
    unint64_t v6 = v3 - v2;
    uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 8);
    uint64_t v8 = *((void *)sub_100143B90() + 1);
    *(void *)&long long v19 = v7;
    *((void *)&v19 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v20 = v2;
    unint64_t v21 = v6;
    unint64_t v22 = v2;
    char v23 = 0;
    unsigned int v9 = (*(uint64_t (**)(void, long long *))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16), &v19);
    if (v2 != v9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100003C58((uint64_t)v17);
      sub_100003DF0(v17, (uint64_t)"Failed reading ", 15);
      sub_10013F0F0(v17);
      sub_100010C3C((uint64_t)exception, (uint64_t)v17, v9);
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v15 = "sparse_bundles::mapped_blocks_t::load_file()";
      *((void *)&v15 + 1) = 42;
      int v16 = 2;
      sub_10013E648(v17, &v15);
      sub_100003DF0(v18, (uint64_t)"Found a valid file for ", 23);
      sub_10013F0F0(v18);
      std::ostream::~ostream();
      sub_10013F41C((uint64_t)v17);
      std::ios::~ios();
    }
    *(unsigned char *)(a1 + 24) = 0;
    if (*((void *)&v19 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v19 + 1));
    }
  }
  else if (v3)
  {
    *(void *)&long long v19 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((void *)&v19 + 1) = 42;
    LODWORD(v2io_rings_get_max_version(0, 0) = 16;
    sub_100075538(v17, &v19);
    sub_100003DF0(v18, (uint64_t)"invalid file size for ", 22);
    sub_10013F0F0(v18);
    sub_100003DF0(v18, (uint64_t)", current is ", 13);
    std::ostream::operator<<();
    sub_100003DF0(v18, (uint64_t)" while expected is ", 19);
    std::ostream::operator<<();
    sub_100003DF0(v18, (uint64_t)", truncating", 12);
    std::ostream::~ostream();
    sub_100078D30((uint64_t)v17);
    std::ios::~ios();
    unsigned int v10 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), 0);
    if (v10)
    {
      unsigned int v11 = v10;
      os_log_type_t v12 = __cxa_allocate_exception(0x40uLL);
      sub_100003C58((uint64_t)v17);
      sub_100003DF0(v17, (uint64_t)"Failed truncating ", 18);
      sub_10013F0F0(v17);
      sub_100010C3C((uint64_t)v12, (uint64_t)v17, v11);
    }
  }
  else if (sub_1000D29B8())
  {
    *(void *)&long long v19 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((void *)&v19 + 1) = 42;
    LODWORD(v2io_rings_get_max_version(0, 0) = 2;
    sub_10013E7B0(v17, &v19);
    sub_100003DF0(v18, (uint64_t)"file of ", 8);
    sub_10013F0F0(v18);
    sub_100003DF0(v18, (uint64_t)" was just created (truncated)", 29);
    std::ostream::~ostream();
    sub_10013FB90((uint64_t)v17);
    std::ios::~ios();
  }
  return v5;
}

void sub_10013E108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10013E1B4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2 + a3 - 1;
  unint64_t result = sub_1000D29B8();
  if (result)
  {
    *(void *)&long long v10 = "sparse_bundles::mapped_blocks_t::map_range(uint64_t, uint64_t)";
    *((void *)&v10 + 1) = 42;
    int v11 = 2;
    sub_10013ED50(v12, &v10);
    sub_10013F0F0(v13);
    sub_100003DF0(v13, (uint64_t)" - map_range: [", 15);
    uint64_t v8 = v13[0];
    *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) |= 0x200u;
    *(_DWORD *)((char *)&v13[1] + *(void *)(v8 - 24)) = *(_DWORD *)((unsigned char *)&v13[1] + *(void *)(v8 - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    sub_100003DF0(v13, (uint64_t)"-", 1);
    std::ostream::operator<<();
    uint64_t v9 = v13[0];
    *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) &= ~0x200u;
    *(_DWORD *)((char *)&v13[1] + *(void *)(v9 - 24)) = *(_DWORD *)((unsigned char *)&v13[1] + *(void *)(v9 - 24)) & 0xFFFFFFB5 | 2;
    sub_100003DF0(v13, (uint64_t)"]", 1);
    std::ostream::~ostream();
    sub_100140A78((uint64_t)v12);
    unint64_t result = std::ios::~ios();
  }
  if (a3)
  {
    unint64_t result = sub_1000A421C(*(void *)(a1 + 8), a2 >> 12, v6 >> 12, 1);
    if (result) {
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  return result;
}

void sub_10013E3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10013EE74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10013E3C4(void *a1)
{
  (**(void (***)(void))*a1)(*a1);
  sub_1000449A4(&__p);
  operator new();
}

void sub_10013E48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013E4C8(uint64_t a1, uint64_t a2)
{
}

void sub_10013E574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100147240();
  }
  _Unwind_Resume(exception_object);
}

void sub_10013E590(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void sub_10013E62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100147240();
  }
  _Unwind_Resume(exception_object);
}

void *sub_10013E648(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100140F5C((uint64_t)a1, a2);
  *a1 = off_1001B5E28;
  a1[45] = &off_1001B5F28;
  a1[46] = &off_1001B5F50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5E28;
  a1[45] = off_1001B5EB0;
  a1[46] = off_1001B5ED8;
  return a1;
}

void sub_10013E748(_Unwind_Exception *a1)
{
  sub_10013F41C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10013E76C(uint64_t a1)
{
  return a1;
}

void *sub_10013E7B0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100140FEC((uint64_t)a1, a2);
  *a1 = off_1001B6048;
  a1[45] = &off_1001B6148;
  a1[46] = &off_1001B6170;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B6048;
  a1[45] = off_1001B60D0;
  a1[46] = off_1001B60F8;
  return a1;
}

void sub_10013E8B0(_Unwind_Exception *a1)
{
  sub_10013FB90(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10013E8D4(uint64_t a1)
{
  return a1;
}

unint64_t sub_10013E918(uint64_t a1, uint64_t a2)
{
  return sub_10013E1B4(a1, *(void *)(a2 + 24), *(void *)(a2 + 16));
}

uint64_t sub_10013E924(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(void *)(*(void *)(a1 + 8) + 16) + 7;
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16)) == v3 >> 3
      || (uint64_t v2 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), 0),
          !v2))
    {
      unint64_t v4 = v3 >> 3;
      *(unsigned char *)(a1 + 24) = 0;
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
      uint64_t v11 = v6;
      os_log_type_t v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v13 = v4;
      uint64_t v14 = 0;
      unint64_t v15 = v4;
      char v16 = 0;
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 80))(v5, &v11);
      if (v12) {
        sub_100010A48(v12);
      }
      if (v4 == (int)v2)
      {
        uint64_t v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 1);
        if (v2) {
          *(unsigned char *)(a1 + 24) = 1;
        }
        if (sub_1000D29B8())
        {
          *(void *)&long long v9 = "sparse_bundles::mapped_blocks_t::flush()";
          *((void *)&v9 + 1) = 38;
          int v10 = 2;
          sub_10013EBE8(&v11, &v9);
          sub_100003DF0(v17, (uint64_t)"Flushed ", 8);
          sub_10013F0F0(v17);
          sub_100003DF0(v17, (uint64_t)", res=", 6);
          std::ostream::operator<<();
          std::ostream::~ostream();
          sub_100140304((uint64_t)&v11);
          std::ios::~ios();
        }
      }
      else
      {
        *(unsigned char *)(a1 + 24) = 1;
      }
    }
  }
  else
  {
    if (sub_1000D29B8())
    {
      *(void *)&long long v9 = "sparse_bundles::mapped_blocks_t::flush()";
      *((void *)&v9 + 1) = 38;
      int v10 = 2;
      sub_1001061AC(&v11, &v9);
      sub_10013F0F0(v17);
      sub_100003DF0(v17, (uint64_t)" is clean, skipping flush", 25);
      std::ostream::~ostream();
      sub_100106904((uint64_t)&v11);
      std::ios::~ios();
    }
    return 0;
  }
  return v2;
}

void sub_10013EBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10013ED0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10013EBE8(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10014107C((uint64_t)a1, a2);
  *a1 = off_1001B6268;
  a1[45] = &off_1001B6368;
  a1[46] = &off_1001B6390;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B6268;
  a1[45] = off_1001B62F0;
  a1[46] = off_1001B6318;
  return a1;
}

void sub_10013ECE8(_Unwind_Exception *a1)
{
  sub_100140304(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10013ED0C(uint64_t a1)
{
  return a1;
}

void *sub_10013ED50(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10014110C((uint64_t)a1, a2);
  *a1 = off_1001B6488;
  a1[45] = &off_1001B6588;
  a1[46] = &off_1001B65B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B6488;
  a1[45] = off_1001B6510;
  a1[46] = off_1001B6538;
  return a1;
}

void sub_10013EE50(_Unwind_Exception *a1)
{
  sub_100140A78(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10013EE74(uint64_t a1)
{
  return a1;
}

unint64_t sub_10013EEB8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = sub_1000D29B8();
  if (result)
  {
    *(void *)&long long v11 = "sparse_bundles::mapped_blocks_t::unmap_interval(uint64_t, uint64_t)";
    *((void *)&v11 + 1) = 47;
    int v12 = 2;
    sub_100015AD4(v13, &v11);
    sub_10013F0F0(v14);
    sub_100003DF0(v14, (uint64_t)" - unmap_range: [", 17);
    uint64_t v7 = v14[0];
    *(_DWORD *)((char *)&v14[1] + *(void *)(v14[0] - 24)) |= 0x200u;
    *(_DWORD *)((char *)&v14[1] + *(void *)(v7 - 24)) = *(_DWORD *)((unsigned char *)&v14[1] + *(void *)(v7 - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    sub_100003DF0(v14, (uint64_t)"-", 1);
    std::ostream::operator<<();
    uint64_t v8 = v14[0];
    *(_DWORD *)((char *)&v14[1] + *(void *)(v14[0] - 24)) &= ~0x200u;
    *(_DWORD *)((char *)&v14[1] + *(void *)(v8 - 24)) = *(_DWORD *)((unsigned char *)&v14[1] + *(void *)(v8 - 24)) & 0xFFFFFFB5 | 2;
    sub_100003DF0(v14, (uint64_t)"]", 1);
    std::ostream::~ostream();
    sub_100015CCC((uint64_t)v13);
    unint64_t result = std::ios::~ios();
  }
  if (a3 != a2)
  {
    unint64_t v9 = a2 >> 12;
    unint64_t v10 = a3 >> 12;
    if ((a2 & 0xFFF) != 0)
    {
      if (v9 == v10) {
        return result;
      }
      ++v9;
    }
    if ((~(_WORD)a3 & 0xFFF) != 0)
    {
      if (v9 == v10) {
        return result;
      }
      --v10;
    }
    unint64_t result = sub_1000A421C(*(void *)(a1 + 8), v9, v10, 0);
    if (result) {
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  return result;
}

void sub_10013F0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100015BF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10013F0F0(void *a1)
{
  uint64_t v2 = sub_100003DF0(a1, (uint64_t)"mapped blocks of band ", 22);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 8;
  unint64_t v3 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 2;
  return a1;
}

uint64_t sub_10013F18C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013F41C(v1);

  return std::ios::~ios();
}

uint64_t sub_10013F1D8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013F41C(v1);

  return std::ios::~ios();
}

void sub_10013F238(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10013F41C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013F2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10013F2D8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10013F340(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013F41C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10013F3A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013F41C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013F41C(uint64_t a1)
{
  *(void *)a1 = off_1001B5FC0;
  sub_10013F558(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10013F558(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10013F718((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10013F6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013F6E0(uint64_t a1)
{
  sub_10013F41C(a1);

  operator delete();
}

int *sub_10013F718(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 89;
    __int16 v22 = 2082;
    char v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 89;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10013F900(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013FB90(v1);

  return std::ios::~ios();
}

uint64_t sub_10013F94C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013FB90(v1);

  return std::ios::~ios();
}

void sub_10013F9AC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10013FB90(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013FA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10013FA4C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10013FAB4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013FB90(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10013FB18(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013FB90(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10013FB90(uint64_t a1)
{
  *(void *)a1 = off_1001B61E0;
  sub_10013FCCC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10013FCCC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10013FE8C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10013FE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013FE54(uint64_t a1)
{
  sub_10013FB90(a1);

  operator delete();
}

int *sub_10013FE8C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 99;
    __int16 v22 = 2082;
    char v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 99;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100140074(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100140304(v1);

  return std::ios::~ios();
}

uint64_t sub_1001400C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100140304(v1);

  return std::ios::~ios();
}

void sub_100140120(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100140304(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100140188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001401C0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100140228(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100140304(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10014028C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100140304(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100140304(uint64_t a1)
{
  *(void *)a1 = off_1001B6400;
  sub_100140440(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100140440(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100140600((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10014059C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001405C8(uint64_t a1)
{
  sub_100140304(a1);

  operator delete();
}

int *sub_100140600(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 141;
    __int16 v22 = 2082;
    char v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 141;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1001407E8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100140A78(v1);

  return std::ios::~ios();
}

uint64_t sub_100140834(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100140A78(v1);

  return std::ios::~ios();
}

void sub_100140894(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100140A78(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001408FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100140934(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10014099C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100140A78(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100140A00(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100140A78(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100140A78(uint64_t a1)
{
  *(void *)a1 = off_1001B6620;
  sub_100140BB4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100140BB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100140D74((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100140D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100140D3C(uint64_t a1)
{
  sub_100140A78(a1);

  operator delete();
}

int *sub_100140D74(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 150;
    __int16 v22 = 2082;
    char v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 150;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100140F5C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B5FC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100140FD8(_Unwind_Exception *a1)
{
}

uint64_t sub_100140FEC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B61E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100141068(_Unwind_Exception *a1)
{
}

uint64_t sub_10014107C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B6400;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1001410F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10014110C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B6620;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100141188(_Unwind_Exception *a1)
{
}

char *sub_10014119C(unint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C5020, memory_order_acquire) & 1) == 0)
  {
    unint64_t v5 = a1;
    int v4 = __cxa_guard_acquire(&qword_1001C5020);
    a1 = v5;
    if (v4)
    {
      __cxa_atexit((void (*)(void *))sub_1001415A8, 0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001C5020);
      a1 = v5;
    }
  }
  unint64_t v1 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  unint64_t v2 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v1 >> 47) ^ v1);
  return (char *)&unk_1001C4828
       + 64 * (unint64_t)((9 * ((v2 >> 47) ^ v2)) & 0xF);
}

char *sub_100141268(unint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C5028, memory_order_acquire) & 1) == 0)
  {
    unint64_t v5 = a1;
    int v4 = __cxa_guard_acquire(&qword_1001C5028);
    a1 = v5;
    if (v4)
    {
      __cxa_atexit((void (*)(void *))sub_1001415E4, 0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001C5028);
      a1 = v5;
    }
  }
  unint64_t v1 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  unint64_t v2 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v1 >> 47) ^ v1);
  return (char *)&unk_1001C4C28 + 48 * ((9 * ((v2 >> 47) ^ v2)) & 0xF);
}

uint64_t sub_100141338(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)unint64_t result = off_1001B66A0;
  *(void *)(result + 8) = v2;
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t sub_100141368(uint64_t a1)
{
  *(void *)a1 = off_1001B66A0;
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (atomic_fetch_add_explicit(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed) == 1) {
      sub_100141520(v2);
    }
  }
  return a1;
}

void sub_1001413D0(uint64_t a1)
{
  sub_100141368(a1);

  operator delete();
}

atomic_ullong *sub_100141408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(unsigned __int8 *)(a1 + 16);
  unint64_t result = *(atomic_ullong **)(a1 + 8);
  if (v6)
  {
    if (atomic_fetch_add_explicit(result, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed) == 1) {
      sub_100141520((unint64_t)result);
    }
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v8 = *(void *)(a1 + 8);
    return (atomic_ullong *)sub_1000E40F4(v8, a2, a3);
  }
  else
  {
    *(unsigned char *)(a3 + 16) = 0;
    *(void *)a3 = off_1001B66C0;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 24) = a2;
  }
  return result;
}

uint64_t sub_1001414AC(uint64_t a1)
{
  *(void *)a1 = off_1001B66C0;
  if (*(unsigned char *)(a1 + 16))
  {
    atomic_store(*(void *)(a1 + 24), *(unint64_t **)(a1 + 8));
    sub_100141520(*(void *)(a1 + 8));
  }
  *(unsigned char *)(a1 + 16) = 0;

  return sub_100141368(a1);
}

void sub_100141520(unint64_t a1)
{
  unint64_t v2 = sub_10014119C(a1);
  std::mutex::lock((std::mutex *)v2);
  uint64_t v3 = sub_100141268(a1);
  std::condition_variable::notify_all((std::condition_variable *)v3);

  std::mutex::unlock((std::mutex *)v2);
}

void sub_100141570(uint64_t a1)
{
  sub_1001414AC(a1);

  operator delete();
}

void sub_1001415A8()
{
  for (uint64_t i = &stru_100000380.flags; i != -64; i -= 64)
    std::mutex::~mutex((std::mutex *)((char *)&unk_1001C4828 + i));
}

void sub_1001415E4()
{
  for (uint64_t i = &stru_100000290.flags; i != -48; i -= 48)
    std::condition_variable::~condition_variable((std::condition_variable *)((char *)&unk_1001C4C28 + i));
}

void *sub_100141620(void *a1, int a2)
{
  if (a2 == 2)
  {
    unint64_t v2 = "full_fsync";
    uint64_t v3 = 10;
  }
  else if (a2 == 1)
  {
    unint64_t v2 = "fsync";
    uint64_t v3 = 5;
  }
  else if (a2)
  {
    sub_100003DF0(a1, (uint64_t)"bad flush type (", 16);
    a1 = (void *)std::ostream::operator<<();
    unint64_t v2 = ")";
    uint64_t v3 = 1;
  }
  else
  {
    unint64_t v2 = "barrier";
    uint64_t v3 = 7;
  }

  return sub_100003DF0(a1, (uint64_t)v2, v3);
}

void *sub_1001416B8(void *a1)
{
  unint64_t v2 = (char *)a1 + *(void *)(*a1 - 24);
  int v3 = *((_DWORD *)v2 + 2);
  *((_DWORD *)v2 + 2) = v3 & 0xFFFFFFB5 | 8;
  char v16 = 48;
  int v4 = sub_100016CD0(a1, &v16);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 2;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) |= 0x200u;
  sub_100003DF0(v4, (uint64_t)"sg: buffer = ", 13);
  int v6 = (void *)std::ostream::operator<<();
  sub_100003DF0(v6, (uint64_t)" [", 2);
  uint64_t v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = sub_100003DF0(v7, (uint64_t)"] ", 2);
  uint64_t v9 = *v8;
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)v8 + *(void *)(v9 - 24) + 24) = 0;
  *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) &= ~0x200u;
  sub_100003DF0(v8, (uint64_t)" std::string::size_type size = ", 8);
  unint64_t v10 = (void *)std::ostream::operator<<();
  sub_100003DF0(v10, (uint64_t)" buffer_std::string::size_type size = ", 15);
  long long v11 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v15 = 48;
  os_log_type_t v12 = sub_100016CD0(v11, &v15);
  uint64_t v13 = *v12;
  *(uint64_t *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 2;
  *(_DWORD *)((char *)v12 + *(void *)(v13 - 24) + 8) |= 0x200u;
  sub_100003DF0(v12, (uint64_t)" offset = ", 10);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v3;
  return a1;
}

void *sub_10014193C(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *unint64_t result = off_1001B6718;
  return result;
}

uint64_t sub_100141960(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 152))(a2, a1);
}

void sub_100141990(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(const void **)a1;
  if (*(void *)a1
  {
    int v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 4);
    v9[0] = *((void *)v5 + 3);
    v9[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100141990(v9);
    if (v7) {
      sub_100010A48(v7);
    }
    if (v6)
    {
      sub_100010A48(v6);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *a2 = v4;
    a2[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_100141A9C(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_100010A48(v2);
  }
  if (v1) {
    sub_100010A48(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100141AC0(uint64_t a1, const void **a2, uint64_t *a3)
{
  int v4 = *(const void **)a1;
  if (v4 == *a2) {
    return 4294967274;
  }
  if (!v4) {
    return 4294967294;
  }
  if (!v7) {
    return 4294967294;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (const void *)*((void *)v7 + 3);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)v7 + 4);
  v16[0] = v9;
  v16[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9 == *a2)
  {
    uint64_t v14 = *a3;
    uint64_t v13 = a3[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    char v15 = (std::__shared_weak_count *)*((void *)v7 + 4);
    *((void *)v7 + 3) = v14;
    *((void *)v7 + 4) = v13;
    if (v15) {
      sub_100010A48(v15);
    }
    uint64_t v11 = 0;
    if (!v10) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v11 = sub_100141AC0(v16, a2, a3);
    if (!v10) {
      goto LABEL_11;
    }
  }
  sub_100010A48(v10);
LABEL_11:
  if (v8) {
    sub_100010A48(v8);
  }
  return v11;
}

void sub_100141BFC(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_100010A48(v2);
  }
  if (v1) {
    sub_100010A48(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100141C20(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(const void **)a1;
  if (*(void *)a1
  {
    int v6 = v5;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v6[3];
    uint64_t v8 = v6[4];
    *a2 = v9;
    a2[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    if (v7)
    {
      sub_100010A48(v7);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8);
    *a2 = v4;
    a2[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

uint64_t sub_100141D08(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v10 = a4;
  uint64_t v11 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001966B0;
  *(void *)(a1 + 24) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 32) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_1001B67D8;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = a3;
  unsigned int v9 = 0;
  sub_10014339C(&v11, &v9, &v10, (void *)(a1 + 48));
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8io_rings_get_max_version(0, 0) = 0u;
  *(unsigned char *)(a1 + 112) = a5;
  return a1;
}

void sub_100141DC8(_Unwind_Exception *a1)
{
  sub_10003C494(v1);
  _Unwind_Resume(a1);
}

void sub_100141DE0(uint64_t a1)
{
  sub_10011C3EC(*(void *)(a1 + 48), &v1);
}

void sub_100141F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1000419E4((uint64_t)va);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 - 40);
  if (v8) {
    sub_100010A48(v8);
  }
  _Unwind_Resume(a1);
}

void sub_100141F54(uint64_t a1)
{
  sub_10011C3EC(*(void *)(a1 + 48), &v1);
}

void sub_1001420B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100142204((uint64_t)va);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 - 56);
  if (v8) {
    sub_100010A48(v8);
  }
  _Unwind_Resume(a1);
}

void *sub_1001420E0(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1001434F8((uint64_t)a1, a2);
  *a1 = off_1001B69A0;
  a1[45] = &off_1001B6AA0;
  a1[46] = &off_1001B6AC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B69A0;
  a1[45] = off_1001B6A28;
  a1[46] = off_1001B6A50;
  return a1;
}

void sub_1001421E0(_Unwind_Exception *a1)
{
  sub_100142E20(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100142204(uint64_t a1)
{
  return a1;
}

uint64_t sub_100142248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))(*(void *)(a1 + 24));
  if (v4)
  {
    *(void *)&long long v11 = "int BackendSG::truncate(uint64_t)";
    *((void *)&v11 + 1) = 23;
    int v12 = 16;
    sub_10006B208(v13, &v11);
    sub_100003DF0(v14, (uint64_t)"BackendSG: truncating the inner backend failed, CFErrorRef error = ", 56);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100070B3C((uint64_t)v13);
    std::ios::~ios();
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 88);
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 64);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 72);
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = v6;
      if (v8)
      {
        long long v10 = v5;
        sub_100010A48(v8);
        long long v5 = v10;
      }
    }
    else
    {
      *(void *)(a1 + 72) = 0;
    }
    *(void *)(a1 + 8io_rings_get_max_version(0, 0) = a2;
    *(_OWORD *)(a1 + 88) = v5;
    *(unsigned char *)(a1 + 104) = 0;
  }
  return v4;
}

void sub_10014236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10006B32C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100142380(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001966B0;
  uint64_t v3 = a3[1];
  *(void *)(a1 + 24) = *a3;
  *(void *)(a1 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_1001B67D8;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a2 + 80);
  *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  *(__n128 *)(a1 + 8io_rings_get_max_version(0, 0) = result;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return result;
}

double sub_100142428@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_100143588(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

uint64_t sub_10014246C(uint64_t a1, void *a2, size_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001966B0;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_1001B68A0;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = 850045863;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8io_rings_get_max_version(0, 0) = 0u;
  *(void *)(a1 + 96) = 0;
  sub_10013AAE8((void *)(a1 + 104), a3);
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  return a1;
}

void sub_100142520(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  sub_10003C494(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100142540(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  unint64_t v5 = a2 % (*(void *)(a1 + 112) - v4);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  uint64_t v9 = v4;
  long long v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = v5;
  uint64_t v12 = a2 - v5;
  unint64_t v13 = v5;
  char v14 = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v9);
  if (v10) {
    sub_100010A48(v10);
  }
  if (v5 == (int)v7)
  {
LABEL_7:
    uint64_t v7 = 0;
    *(void *)(a1 + 128) = a2;
    *(unsigned char *)(a1 + 136) = 1;
  }
  return v7;
}

void sub_100142614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10014262C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (!*(unsigned char *)(a1 + 136))
  {
    unint64_t v13 = sub_100142540(a1, *(void *)(a2 + 24));
    if (v13) {
      goto LABEL_26;
    }
  }
  unint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 104);
  size_t v7 = *(void *)(a1 + 112) - v6;
  unint64_t v8 = v5 % v7;
  if (v5 % v7)
  {
    size_t v9 = v7 - v8;
    if (v9 >= *(void *)(a2 + 16)) {
      size_t v10 = *(void *)(a2 + 16);
    }
    else {
      size_t v10 = v9;
    }
    memcpy((void *)(v6 + v8), *(const void **)a2, v10);
    size_t v11 = *(void *)(a1 + 104);
    size_t v7 = *(void *)(a1 + 112) - v11;
    if (v10 + v8 == v7)
    {
      uint64_t v12 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
      size_t v20 = v11;
      uint64_t v21 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v22 = v10 + v8;
      size_t v23 = v5 - v8;
      size_t v24 = v10 + v8;
      char v25 = 0;
      unint64_t v13 = (*(uint64_t (**)(void, size_t *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v20);
      unint64_t v14 = v22;
      if (v21) {
        sub_100010A48(v21);
      }
      if (v14 != (int)v13) {
        goto LABEL_26;
      }
      size_t v7 = *(void *)(a1 + 112) - *(void *)(a1 + 104);
    }
  }
  else
  {
    size_t v10 = 0;
  }
  unint64_t v13 = *(void *)(a2 + 16);
  unint64_t v15 = (v13 - v10) / v7 * v7;
  if (v13 - v10 == (v13 - v10) % v7)
  {
LABEL_23:
    if (v13 > v10)
    {
      memcpy(*(void **)(a1 + 104), (const void *)(*(void *)a2 + v10), v13 - v10);
      unint64_t v13 = *(void *)(a2 + 16);
    }
    *(void *)(a1 + 128) += v13;
    goto LABEL_26;
  }
  uint64_t v16 = *(void *)(a2 + 32);
  size_t v17 = *(void *)(a2 + 24) + v10;
  __int16 v18 = *(std::__shared_weak_count **)(a2 + 8);
  size_t v20 = *(void *)a2 + v10;
  uint64_t v21 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v22 = v15;
  size_t v23 = v17;
  size_t v24 = v16 - v10;
  char v25 = 0;
  unint64_t v13 = (*(uint64_t (**)(void, size_t *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v20);
  if (v21) {
    sub_100010A48(v21);
  }
  if (v15 == (int)v13)
  {
    v10 += v15;
    unint64_t v13 = *(void *)(a2 + 16);
    goto LABEL_23;
  }
LABEL_26:
  std::mutex::unlock(v4);
  return v13;
}

void sub_100142844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100142874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v5 = *(void *)(a1 + 104);
    unint64_t v6 = *(void *)(a1 + 112) - v5;
    unint64_t v7 = *(void *)(a1 + 128) % v6;
    if (!v7) {
      goto LABEL_11;
    }
    bzero((void *)(v5 + v7), v6 - v7);
    uint64_t v8 = *(void *)(a1 + 128);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 112);
    size_t v11 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
    uint64_t v17 = v9;
    __int16 v18 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = v10 - v9;
    uint64_t v20 = v8 - v7;
    uint64_t v21 = v10 - v9;
    char v22 = 0;
    int v12 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v17);
    uint64_t v13 = v12;
    uint64_t v14 = v12 >= 0 ? 4294967291 : v12;
    uint64_t v15 = v19;
    if (v18) {
      sub_100010A48(v18);
    }
    if (v15 == v13) {
LABEL_11:
    }
      uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), a2);
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v4);
  return v14;
}

void sub_1001429BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1001429EC(uint64_t a1)
{
  sub_100143304(a1);

  operator delete();
}

void *sub_100142A24(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"BufferedWriteBackend", 20);
}

void *sub_100142A38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10001A6E0(a2, (void *)(a1 + 8));
}

void *sub_100142A44(void *a1)
{
  *a1 = off_1001B67D8;
  unint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_100010A48(v3);
  }
  *a1 = off_1001966B0;
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_100142AD0(void *a1)
{
  *a1 = off_1001B67D8;
  unint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_100010A48(v3);
  }
  *a1 = off_1001966B0;
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete();
}

void *sub_100142B7C(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"BackendSG", 9);
}

uint64_t sub_100142B90(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100142E20(v1);

  return std::ios::~ios();
}

uint64_t sub_100142BDC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100142E20(v1);

  return std::ios::~ios();
}

void sub_100142C3C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100142E20(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100142CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100142CDC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100142D44(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100142E20(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100142DA8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100142E20(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100142E20(uint64_t a1)
{
  *(void *)a1 = off_1001B6B38;
  sub_100142F5C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100142F5C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10014311C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001430B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001430E4(uint64_t a1)
{
  sub_100142E20(a1);

  operator delete();
}

int *sub_10014311C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 138;
    __int16 v22 = 2082;
    size_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    size_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 138;
      __int16 v22 = 2082;
      size_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100143304(uint64_t a1)
{
  *(void *)a1 = off_1001B68A0;
  sub_100142874(a1, 1);
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  *(void *)a1 = off_1001966B0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_100010A48(v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *sub_10014339C@<X0>(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xB8uLL);
  double result = sub_100143410(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1001433FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100143410(void *a1, uint64_t *a2, unsigned int *a3, unint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B6BB8;
  sub_10011C33C((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_100143464(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100143478(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100143498(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001434EC(uint64_t a1)
{
  return sub_10011C3E8(a1 + 24);
}

uint64_t sub_1001434F8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B6B38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100143574(_Unwind_Exception *a1)
{
}

void sub_100143588(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x90uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *char v6 = off_1001A5160;
  sub_100142380((uint64_t)(v6 + 3), a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100143620(char *__s, void *a2)
{
  uint64_t v3 = &v17;
  sub_100003BA4(&v17, __s);
  uint64_t v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  char v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = (std::string *)((char *)&v17 + HIBYTE(v17.__r_.__value_.__r.__words[2]));
  }
  else {
    uint64_t v8 = (std::string *)(v17.__r_.__value_.__r.__words[0] + v17.__r_.__value_.__l.__size_);
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v3 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v3 != v8)
  {
    do
    {
      v3->__r_.__value_.__s.__data_[0] = __tolower(v3->__r_.__value_.__s.__data_[0]);
      uint64_t v3 = (std::string *)((char *)v3 + 1);
    }
    while (v3 != v8);
    uint64_t v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
    std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
    char v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  if (v5 >= 0)
  {
    uint64_t v9 = &v17;
  }
  else
  {
    uint64_t v4 = size;
    uint64_t v9 = (std::string *)v6;
  }
  if (v4 >= 2)
  {
    uint64_t v10 = (std::string *)((char *)v9 + v4);
    size_t v11 = v9;
    while (1)
    {
      os_log_type_t v12 = (std::string *)memchr(v11, 48, v4 - 1);
      if (!v12) {
        goto LABEL_21;
      }
      if (LOWORD(v12->__r_.__value_.__l.__data_) == 30768) {
        break;
      }
      size_t v11 = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      uint64_t v4 = (char *)v10 - (char *)v11;
      if ((char *)v10 - (char *)v11 < 2) {
        goto LABEL_21;
      }
    }
    if (v12 != v10 && v12 == v9)
    {
      uint64_t v13 = std::string::erase(&v17, 0, 2uLL);
      std::string::operator=(&v17, v13);
    }
  }
LABEL_21:
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_1001439A4((uint64_t)&v17, &v14);
  if (a2) {
    *a2 = v15 - v14;
  }
  operator new[]();
}

void sub_1001437BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  switch(a2)
  {
    case 3:
      __cxa_begin_catch(exception_object);
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001B6CA0;
      __int16 v20 = std::generic_category();
      exception[1] = 22;
      exception[2] = v20;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Does not contain an \"even number\" of hex digits.";
    case 2:
      __cxa_begin_catch(exception_object);
      uint64_t v21 = __cxa_allocate_exception(0x40uLL);
      *uint64_t v21 = &off_1001B6CA0;
      __int16 v22 = std::generic_category();
      v21[1] = 22;
      uint64_t v21[2] = v22;
      *((unsigned char *)v21 + 24) = 0;
      *((unsigned char *)v21 + 48) = 0;
      v21[7] = "Contains non-hexadecimal characters.";
    case 1:
      __cxa_begin_catch(exception_object);
      size_t v23 = __cxa_allocate_exception(0x40uLL);
      *size_t v23 = &off_1001B6CA0;
      size_t v24 = std::generic_category();
      v23[1] = 22;
      v23[2] = v24;
      *((unsigned char *)v23 + 24) = 0;
      *((unsigned char *)v23 + 48) = 0;
      v23[7] = "Decoding error.";
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_1001439A4(uint64_t a1, unint64_t *a2)
{
  int v3 = *(char *)(a1 + 23);
  BOOL v4 = v3 < 0;
  uint64_t v5 = *(void *)a1;
  if (v3 >= 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if (v4) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  uint64_t v9 = v5;
  if (v6)
  {
    uint64_t v7 = v5 + v6;
    do
      a2 = sub_100144628(&v9, v7, a2, (unsigned int (*)(uint64_t, uint64_t))sub_100144754);
    while (v9 != v7);
  }
  return a2;
}

uint64_t sub_100143A20(char *a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = 0;
  return sub_100092E20((uint64_t)v3, a1, a2);
}

void *sub_100143A7C(void *a1, uint64_t a2)
{
  int v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  size_t v4 = strlen(v3);
  uint64_t v5 = sub_100003DF0(a1, (uint64_t)v3, v4);
  sub_100003DF0(v5, (uint64_t)" (error code ", 13);
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_100003DF0(v6, (uint64_t)")", 1);
  return a1;
}

uint64_t sub_100143B14(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t result = a1 + 56;
    return *(void *)result;
  }
  uint64_t result = a1 + 24;
  if (*(char *)(a1 + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_100143B3C()
{
  uuid_generate_random(out);
  return *(void *)out;
}

void *sub_100143B90()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C5050, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001C5050))
  {
    __cxa_atexit((void (*)(void *))sub_100143C4C, &unk_1001C5040, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001C5050);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1001C5030, memory_order_acquire) != -1)
  {
    int v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(qword_1001C5030, &v2, (void (__cdecl *)(void *))sub_1001460A0);
  }
  return &unk_1001C5040;
}

uint64_t sub_100143C4C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

uint64_t sub_100143C7C()
{
  if (byte_1001C4568)
  {
    char v0 = 0;
    atomic_compare_exchange_strong((atomic_uchar *volatile)&unk_1001C5060, (unsigned __int8 *)&v0, 1u);
    if (!v0)
    {
      *(void *)&long long v2 = "void process_terminator::terminate()";
      *((void *)&v2 + 1) = 34;
      int v3 = 16;
      sub_1000EC3D8(v4, &v2);
      sub_100003DF0(v5, (uint64_t)"Terminating due to unrecoverable I/O error", 42);
      std::ostream::~ostream();
      sub_1000EC5D0((uint64_t)v4);
      std::ios::~ios();
      return raise(15);
    }
  }
  return result;
}

void sub_100143D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000EC4FC((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100143D4C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 144);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v7 = a4[1];
  unint64_t v8 = *a4 - (v5 - v7);
  if (v8 >= a3) {
    unint64_t v8 = a3;
  }
  unint64_t v34 = v8;
  unint64_t v9 = v5 - v7;
  if (v5 == v7) {
    goto LABEL_86;
  }
  os_log_type_t v12 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v93 = *(void **)a1;
  char v94 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v95 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v95[9] = *(_OWORD *)(a1 + 25);
  uint64_t v96 = *(void *)(a1 + 48);
  long long v97 = *(_OWORD *)(a1 + 56);
  long long v98 = *(_OWORD *)(a1 + 72);
  long long v99 = *(_OWORD *)(a1 + 88);
  char v100 = *(unsigned char *)(a1 + 104);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v101 = *(void *)(a1 + 112);
  long long v102 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v103 = *(_OWORD *)(a1 + 128);
  uint64_t v104 = *v6;
  char v105 = *(unsigned char *)(a1 + 152);
  unint64_t v14 = v8 + v9;
  sub_10002FF28((uint64_t)&v93, v8 + v9);
  sub_10002F290(&v97);
  uint64_t v15 = (_OWORD *)(a1 + 16);
  uint64_t v16 = (long long *)(a1 + 72);
  std::string v17 = *(std::__shared_weak_count **)(a1 + 8);
  long long v62 = *(void **)a1;
  long long v63 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v64 = *v15;
  *(_OWORD *)&v64[9] = *(_OWORD *)(a1 + 25);
  long long v66 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 88);
  long long v67 = *v16;
  uint64_t v19 = (long long *)(a1 + 128);
  uint64_t v65 = *(void *)(a1 + 48);
  long long v68 = v18;
  char v69 = *(unsigned char *)(a1 + 104);
  __int16 v20 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v70 = *(void *)(a1 + 112);
  uint64_t v71 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v72 = *v19;
  uint64_t v73 = *v6;
  char v74 = *((unsigned char *)v6 + 8);
  sub_100030B34((uint64_t)&v62, a2, a4[1], v14, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v75);
  if (v71) {
    sub_100010A48(v71);
  }
  if (v63) {
    sub_100010A48(v63);
  }
  sub_10002F8C8((uint64_t)&v75, (uint64_t)v121);
  sub_10003AA88((uint64_t)&v93, v121);
  if (v122) {
    sub_100010A48(v122);
  }
  if (*((void *)&v121[0] + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v121[0] + 1));
  }
  sub_10002FF28((uint64_t)&v93, v9);
  sub_10002F51C((uint64_t)&v75, (uint64_t)v59);
  statfs __src = v93;
  long long v49 = v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v50[0] = *(_OWORD *)v95;
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)&v95[9];
  v52[0] = v97;
  v52[1] = v98;
  uint64_t v51 = v96;
  v52[2] = v99;
  char v53 = v100;
  uint64_t v54 = v101;
  long long v55 = v102;
  if (v102) {
    atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v56 = v103;
  uint64_t v57 = v104;
  char v58 = v105;
  uint64_t v21 = *(void **)a1;
  __int16 v22 = *(std::__shared_weak_count **)(a1 + 8);
  int v35 = *(void **)a1;
  __int16 v36 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v37 = *v15;
  *(_OWORD *)&v37[9] = *(_OWORD *)(a1 + 25);
  long long v23 = *v16;
  long long v24 = *(_OWORD *)(a1 + 88);
  long long v39 = *(_OWORD *)(a1 + 56);
  long long v40 = v23;
  uint64_t v38 = *(void *)(a1 + 48);
  long long v41 = v24;
  char v42 = *(unsigned char *)(a1 + 104);
  char v25 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v43 = *(void *)(a1 + 112);
  int v44 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v45 = *v19;
  uint64_t v46 = *v6;
  char v47 = *((unsigned char *)v6 + 8);
  CCHmacContext __dst = v21;
  long long v107 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)unint64_t v108 = *(_OWORD *)v37;
  *(_OWORD *)&v108[9] = *(_OWORD *)&v37[9];
  long long v110 = v39;
  long long v111 = v40;
  uint64_t v109 = v38;
  long long v112 = v41;
  char v113 = v42;
  uint64_t v114 = v43;
  long long v115 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v26 = 0;
  long long v116 = v45;
  uint64_t v117 = v46;
  char v118 = 0;
  while (!sub_10002F3D8((uint64_t)&__src, (uint64_t)v59))
  {
    sub_100016C64((uint64_t)v52);
    SecKeyRef v27 = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((void *)&v56 + 1))
    {
      unint64_t v28 = *(void *)&v108[16];
      if (*(void *)&v50[0] < *(void *)&v108[16]) {
        unint64_t v28 = *(void *)&v50[0];
      }
      if (v28 >= *((void *)&v56 + 1)) {
        int64_t v29 = *((void *)&v56 + 1);
      }
      else {
        int64_t v29 = v28;
      }
      if (v29)
      {
        memmove(__dst, __src, v29);
        if (v29 > 0)
        {
          sub_10002FF28((uint64_t)&__src, v29);
          sub_100030064((uint64_t)&__dst, v29);
          int v30 = 0;
          v26 += v29;
          if (!v27) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }
      }
      else
      {
        *(void *)&long long v119 = "trim_data(const sg_vec::iterator &, const sg_vec::iterator &, size_t, const io_result_t &)::(anonymous class)::operator()(const auto &, const auto &, size_t) const [src:auto = sg_vec_ns::details::sg_vec_iterator, dst:auto = sg_vec_ns::details::sg_vec_iterator]";
        *((void *)&v119 + 1) = 121;
        int v120 = 16;
        sub_10014623C(v121, &v119);
        sub_100003DF0(v123, (uint64_t)"Trimming: Written ", 18);
        std::ostream::operator<<();
        sub_100003DF0(v123, (uint64_t)", dest buffer_size ", 19);
        std::ostream::operator<<();
        sub_100003DF0(v123, (uint64_t)" src size ", 10);
        std::ostream::operator<<();
        sub_100003DF0(v123, (uint64_t)", trimmed size", 14);
        std::ostream::operator<<();
        std::ostream::~ostream();
        sub_100146434((uint64_t)v121);
        std::ios::~ios();
      }
      *(void *)&long long v119 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/utils.cpp:180:13)]";
      *((void *)&v119 + 1) = 97;
      int v120 = 16;
      sub_10003B6BC(v121, &v119);
      sub_100003DF0(v123, (uint64_t)"IO error with sg: ", 18);
      sub_1001416B8(v123);
      sub_100003DF0(v123, (uint64_t)" dest ", 6);
      sub_1001416B8(v123);
      sub_100003DF0(v123, (uint64_t)" returned status ", 17);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_10003B8B4((uint64_t)v121);
      std::ios::~ios();
      int v30 = 1;
      if (!v27) {
        goto LABEL_48;
      }
LABEL_47:
      sub_100010A48(v27);
      goto LABEL_48;
    }
    sub_1000301A0((uint64_t)&__src);
    int v30 = 2;
    if (v27) {
      goto LABEL_47;
    }
LABEL_48:
    if ((v30 | 2) != 2) {
      goto LABEL_54;
    }
  }
  sub_100030064((uint64_t)&v35, v26);
LABEL_54:
  if (v115) {
    sub_100010A48(v115);
  }
  if (v107) {
    sub_100010A48(v107);
  }
  if (v44) {
    sub_100010A48(v44);
  }
  if (v36) {
    sub_100010A48(v36);
  }
  if (v55) {
    sub_100010A48(v55);
  }
  if (v49) {
    sub_100010A48(v49);
  }
  if (v61) {
    sub_100010A48(v61);
  }
  if (v60) {
    sub_100010A48(v60);
  }
  if (v92) {
    sub_100010A48(v92);
  }
  if (v91) {
    sub_100010A48(v91);
  }
  if (v90) {
    sub_100010A48(v90);
  }
  if (v89) {
    sub_100010A48(v89);
  }
  if (v88) {
    sub_100010A48(v88);
  }
  if ((void)v80) {
    sub_100010A48((std::__shared_weak_count *)v80);
  }
  if (v102) {
    sub_100010A48(v102);
  }
  if (v94) {
    sub_100010A48(v94);
  }
LABEL_86:
  int v31 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v75 = *(void **)a1;
  uint64_t v76 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v77[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v77 + 9) = *(_OWORD *)(a1 + 25);
  uint64_t v78 = *(void *)(a1 + 48);
  long long v79 = *(_OWORD *)(a1 + 56);
  long long v80 = *(_OWORD *)(a1 + 72);
  long long v81 = *(_OWORD *)(a1 + 88);
  char v82 = *(unsigned char *)(a1 + 104);
  int v32 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v83 = *(void *)(a1 + 112);
  uint64_t v84 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v85 = *(_OWORD *)(a1 + 128);
  uint64_t v86 = *v6;
  char v87 = *((unsigned char *)v6 + 8);
  sub_10002FF28((uint64_t)&v75, v34);
  sub_10002F290(&v79);
  if (v84) {
    sub_100010A48(v84);
  }
  if (v76) {
    sub_100010A48(v76);
  }
  return v34;
}

void sub_100144530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_1001445F0(std::exception *a1)
{
  sub_100003828(a1);

  operator delete();
}

unint64_t *sub_100144628(uint64_t *a1, uint64_t a2, unint64_t *a3, unsigned int (*a4)(uint64_t, uint64_t))
{
  int v7 = 0;
  std::string v17 = a3;
  uint64_t v8 = *a1;
  char v9 = 1;
  do
  {
    char v10 = v9;
    if (a4(v8, a2))
    {
      long long v14 = 0u;
      long long v15 = 0u;
      DWORD2(v15) = -1;
      v13[0] = off_1001B6D08;
      v13[1] = off_1001B6D38;
      sub_100144760(v13);
    }
    int v11 = sub_10014480C(*(char *)*a1);
    char v9 = 0;
    int v7 = v11 + 16 * v7;
    char v16 = v7;
    uint64_t v8 = *a1 + 1;
    *a1 = v8;
  }
  while ((v10 & 1) != 0);
  sub_100144928(&v17, &v16);
  return v17;
}

void sub_100144740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001447BC((std::exception *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100144754(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_100144760(void *a1)
{
  exception = __cxa_allocate_exception(0x30uLL);
  sub_100144A30((uint64_t)exception, a1);
}

void sub_1001447A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::exception *sub_1001447BC(std::exception *a1)
{
  std::exception::~exception(a1);
  *(void *)(v2 + 8) = &off_1001B6D58;
  sub_100144C64((uint64_t *)(v2 + 16));
  return a1;
}

uint64_t sub_10014480C(int a1)
{
  unsigned __int8 v1 = a1 - 48;
  if ((a1 - 48) >= 0xA)
  {
    if ((a1 - 65) > 5)
    {
      if ((a1 - 97) > 5) {
        sub_100144FA4();
      }
      return (a1 - 87);
    }
    else
    {
      return (a1 - 55);
    }
  }
  return v1;
}

void sub_100144910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100144D20((std::exception *)va);
  _Unwind_Resume(a1);
}

unint64_t **sub_100144928(unint64_t **a1, unsigned char *a2)
{
  size_t v4 = *a1;
  uint64_t v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    char v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      sub_10001796C();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      long long v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*v4;
    }
    *size_t v4 = v13;
    v4[1] = v7;
    _OWORD v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

uint64_t sub_100144A30(uint64_t a1, void *a2)
{
  int v3 = (char *)a2 + *(void *)(*a2 - 40);
  uint64_t v4 = *((void *)v3 + 1);
  *(void *)(a1 + 8) = &off_1001B6D58;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *((_OWORD *)v3 + 1);
  *(_DWORD *)(a1 + 4io_rings_get_max_version(0, 0) = *((_DWORD *)v3 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)a1 = off_1001B6D08;
  *(void *)(a1 + 8) = off_1001B6D38;
  return a1;
}

void sub_100144B08(std::exception *a1)
{
  std::exception::~exception(a1);
  *(void *)(v1 + 8) = &off_1001B6D58;
  sub_100144C64((uint64_t *)(v1 + 16));

  operator delete();
}

uint64_t *sub_100144B78(void *a1)
{
  std::exception::~exception((std::exception *)((char *)a1 + *(void *)(*a1 - 24)));
  *(void *)(v1 + 8) = &off_1001B6D58;
  uint64_t v2 = (uint64_t *)(v1 + 16);

  return sub_100144C64(v2);
}

void sub_100144BDC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::exception::~exception((std::exception *)v1);
  *((void *)v1 + 1) = &off_1001B6D58;
  sub_100144C64((uint64_t *)v1 + 2);

  operator delete();
}

uint64_t *sub_100144C64(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void sub_100144CC0(void *a1)
{
  exception = __cxa_allocate_exception(0x30uLL);
  sub_100144D70((uint64_t)exception, a1);
}

void sub_100144D08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::exception *sub_100144D20(std::exception *a1)
{
  std::exception::~exception(a1);
  *(void *)(v2 + 8) = &off_1001B6D58;
  sub_100144C64((uint64_t *)(v2 + 16));
  return a1;
}

uint64_t sub_100144D70(uint64_t a1, void *a2)
{
  int v3 = (char *)a2 + *(void *)(*a2 - 40);
  uint64_t v4 = *((void *)v3 + 1);
  *(void *)(a1 + 8) = &off_1001B6D58;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *((_OWORD *)v3 + 1);
  *(_DWORD *)(a1 + 4io_rings_get_max_version(0, 0) = *((_DWORD *)v3 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)a1 = off_1001B6DA0;
  *(void *)(a1 + 8) = off_1001B6DD0;
  return a1;
}

void sub_100144E48(std::exception *a1)
{
  std::exception::~exception(a1);
  *(void *)(v1 + 8) = &off_1001B6D58;
  sub_100144C64((uint64_t *)(v1 + 16));

  operator delete();
}

uint64_t *sub_100144EB8(void *a1)
{
  std::exception::~exception((std::exception *)((char *)a1 + *(void *)(*a1 - 24)));
  *(void *)(v1 + 8) = &off_1001B6D58;
  uint64_t v2 = (uint64_t *)(v1 + 16);

  return sub_100144C64(v2);
}

void sub_100144F1C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::exception::~exception((std::exception *)v1);
  *((void *)v1 + 1) = &off_1001B6D58;
  sub_100144C64((uint64_t *)v1 + 2);

  operator delete();
}

void sub_100144FA4()
{
}

void sub_100145108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100010A48(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100145134(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void sub_1001451D0()
{
}

void sub_10014522C()
{
}

void sub_100145240(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_100145444((char **)__p, (char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL));
  if (__p[0]) {
    uint64_t v4 = (char *)__p[0];
  }
  else {
    uint64_t v4 = (char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL);
  }
  sub_100003BA4(&v14, v4);
  free(__p[0]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v14;
  }
  else {
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)v14.__r_.__value_.__r.__words[0];
  }
  std::string::insert(&v14, v5, 91);
  std::string v15 = v14;
  memset(&v14, 0, sizeof(v14));
  uint64_t v6 = std::string::append(&v15, "] = ", 4uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100145494((char *)(a1 + 8), __p);
  if ((v13 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v9 = v13;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  unint64_t v10 = std::string::append(&v16, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v17, 10);
  *a2 = v17;
  memset(&v17, 0, sizeof(v17));
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1001453B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

char **sub_100145444(char **a1, char *lpmangled)
{
  int status = 0;
  size_t v4 = 0;
  *a1 = __cxa_demangle(lpmangled, 0, &v4, &status);
  return a1;
}

uint64_t sub_100145494@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  sub_100003C58((uint64_t)&v5);
  char v8 = *a1;
  sub_100003DF0(&v5, (uint64_t)&v8, 1);
  sub_100003890((uint64_t)v6, a2);
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1001455D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1001455EC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100145654(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10014727C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100145670(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001456A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_1001456D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10014571C(uint64_t a1, const char *a2)
{
  if (a2)
  {
    sub_100003C58((uint64_t)&v16);
    size_t v4 = strlen(a2);
    sub_100003DF0(&v16, (uint64_t)a2, v4);
    uint64_t v5 = *(void **)(a1 + 8);
    if (v5 != (void *)(a1 + 16))
    {
      do
      {
        (**(void (***)(void **__return_ptr))v5[5])(__p);
        if (v15 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        if (v15 >= 0) {
          uint64_t v7 = HIBYTE(v15);
        }
        else {
          uint64_t v7 = (uint64_t)__p[1];
        }
        sub_100003DF0(&v16, (uint64_t)v6, v7);
        if (SHIBYTE(v15) < 0) {
          operator delete(__p[0]);
        }
        char v8 = (void *)v5[1];
        if (v8)
        {
          do
          {
            std::string::size_type v9 = v8;
            char v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            std::string::size_type v9 = (void *)v5[2];
            BOOL v10 = *v9 == (void)v5;
            uint64_t v5 = v9;
          }
          while (!v10);
        }
        uint64_t v5 = v9;
      }
      while (v9 != (void *)(a1 + 16));
    }
    sub_100003890((uint64_t)v17, __p);
    uint64_t v11 = v15;
    long long v12 = *(_OWORD *)__p;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v12;
    *(void *)(a1 + 48) = v11;
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete((void *)v17[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t result = a1 + 32;
  if (*(char *)(a1 + 55) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_100145954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void *sub_100145988@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_100145C70(a1 + 8, a2);
  if ((void *)(a1 + 16) == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = result[6];
    *a3 = result[5];
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void sub_1001459E0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::string::size_type v9 = a3;
  uint64_t v5 = sub_100145D5C((uint64_t **)(a1 + 8), a3, (uint64_t)&unk_100164F68, &v9);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v8 = (std::__shared_weak_count *)v5[6];
  v5[5] = v7;
  v5[6] = v6;
  if (v8) {
    sub_100010A48(v8);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    **(unsigned char **)(a1 + 32) = 0;
    *(void *)(a1 + 4io_rings_get_max_version(0, 0) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 55) = 0;
  }
}

uint64_t sub_100145A78(uint64_t result)
{
  return result;
}

BOOL sub_100145A88(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 56) - 1;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 56) = v1;
  if (a1 && !v1)
  {
    sub_100145EA0(a1);
    operator delete();
  }
  return v1 == 0;
}

void sub_100145AD8(void *a1@<X8>)
{
  *a1 = 0;
  operator new();
}

void sub_100145C38(_Unwind_Exception *a1)
{
  sub_100144C64(v1);
  _Unwind_Resume(a1);
}

void *sub_100145C70(uint64_t a1, uint64_t *a2)
{
  int v3 = (void *)(a1 + 8);
  size_t v4 = sub_100145CE4(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  uint64_t v6 = v4[4];
  if (*a2 != v6
    && strcmp((const char *)(*(void *)(*a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
  {
    return v3;
  }
  return v5;
}

void *sub_100145CE4(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *a2;
    do
    {
      uint64_t v7 = v5[4];
      if (v7 == v6)
      {
        a4 = v5;
      }
      else if (strcmp((const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
      {
        ++v5;
      }
      else
      {
        a4 = v5;
      }
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a4;
}

uint64_t *sub_100145D5C(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6 = (uint64_t **)sub_100145DE8((uint64_t)a1, &v10, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x38uLL);
    void v7[4] = **a4;
    v7[5] = 0;
    v7[6] = 0;
    sub_10002B3B8(a1, v10, v8, v7);
  }
  return v7;
}

void *sub_100145DE8(uint64_t a1, void *a2, uint64_t *a3)
{
  size_t v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = v5[4];
    if (*a3 != v7)
    {
      char v8 = (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        std::string::size_type v9 = (const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          uint64_t v10 = (void *)*v5;
          size_t v4 = v5;
          if (!*v5) {
            break;
          }
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0) {
            break;
          }
          size_t v4 = v5 + 1;
          uint64_t v10 = (void *)v5[1];
          if (!v10) {
            break;
          }
        }
        uint64_t v7 = v10[4];
        uint64_t v5 = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    uint64_t v5 = (void *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

uint64_t sub_100145EA0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_10005358C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_100145EE0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100145F48(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10014727C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100145F64(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100145F9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_100145FCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *sub_100146010(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_100145DE8((uint64_t)a1, &v9, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x38uLL);
    *((void *)v6 + 4) = *(void *)a3;
    *(_OWORD *)(v6 + 4io_rings_get_max_version(0, 0) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_10002B3B8(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1001460A0()
{
}

void sub_10014610C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100146174(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_1001461A0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001461D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1001461F8(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *sub_10014623C(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1001463A4((uint64_t)a1, a2);
  *a1 = off_1001B7020;
  a1[45] = &off_1001B7120;
  a1[46] = &off_1001B7148;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B7020;
  a1[45] = off_1001B70A8;
  a1[46] = off_1001B70D0;
  return a1;
}

void sub_10014633C(_Unwind_Exception *a1)
{
  sub_100146434(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100146360(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001463A4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B71B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100146420(_Unwind_Exception *a1)
{
}

uint64_t sub_100146434(uint64_t a1)
{
  *(void *)a1 = off_1001B71B8;
  sub_10014683C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100146570(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100146434(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1001465D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100146610(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100146678(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100146434(v1);

  return std::ios::~ios();
}

void sub_1001466C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100146434(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100146728(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100146434(v1);

  return std::ios::~ios();
}

void sub_100146788(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100146434(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100146804(uint64_t a1)
{
  sub_100146434(a1);

  operator delete();
}

uint64_t sub_10014683C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1001469C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100146998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1001469C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      char v8 = a2;
    }
    else {
      char v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 183;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::string v14 = a2;
      }
      else {
        std::string v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 183;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100146BA8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
}

uint64_t sub_100146BE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t sub_100146C04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

void (***sub_100146C28(void (***a1)(void), void (***a2)(void)))(void)
{
  uint64_t v3 = a1;
  int v4 = a1;
  do
  {
    int v5 = *v4;
    v4 += 2;
    (*v5)();
    v3 += 2;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

uint64_t sub_100146D54(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

uint64_t sub_100146DC0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t sub_100146DF8()
{
  return std::ios::~ios();
}

uint64_t sub_100146E38(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
}

void sub_100146E78(std::__shared_weak_count **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v8 = *a1;
  if (v8) {
    sub_100010A48(v8);
  }
  __cxa_begin_catch(a2);
  for (; a5 != a4; a5 += 104)
  {
    uint64_t v9 = *(void *)(a5 + 48);
    if (v9) {
      *(void *)(v9 + 32) = 0;
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a5 + 8);
    if (v10) {
      sub_100010A48(v10);
    }
  }
}

void sub_100146EF0(void *a1)
{
  uint64_t v1 = __cxa_begin_catch(a1);
  sub_100063DD8(v1);
}

uint64_t sub_100146F18()
{
  sub_100063DF4();
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_100146F4C()
{
  sub_100063DF4();
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_100146F74()
{
  sub_100063DF4();
  return (*(uint64_t (**)(void))(v0 + 40))();
}

void sub_100146FB8(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3)
  {
    sub_100010A48(v3);
  }
}

uint64_t sub_100147008(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t sub_10014702C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
}

uint64_t sub_10014706C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_100147090(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1001470D4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void (***sub_100147100())(void)
{
  sub_100104724();
  do
  {
    uint64_t v3 = *v2;
    v2 += 4;
    (*v3)();
    v1 += 32;
    uint64_t result = v2;
  }
  while (v2 != v0);
  return result;
}

void (***sub_10014715C())(void)
{
  sub_100104724();
  do
  {
    uint64_t v3 = *v2;
    v2 += 3;
    (*v3)();
    v1 += 24;
    uint64_t result = v2;
  }
  while (v2 != v0);
  return result;
}

void sub_1001471B8(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_100010A48(v3);
  }
}

void sub_1001471F0(uint64_t a1, std::__shared_weak_count **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    sub_100010A48(v3);
  }
  int v4 = *a2;
  if (*a2)
  {
    sub_100010A48(v4);
  }
}

uint64_t sub_100147240()
{
  sub_100063DF4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014727C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter()
{
  return static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter();
}

uint64_t type metadata accessor for HPKE.Ciphersuite()
{
  return type metadata accessor for HPKE.Ciphersuite();
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)()
{
  return HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
}

uint64_t HPKE.Sender.encapsulatedKey.getter()
{
  return HPKE.Sender.encapsulatedKey.getter();
}

uint64_t HPKE.Sender.seal<A>(_:)()
{
  return HPKE.Sender.seal<A>(_:)();
}

uint64_t type metadata accessor for HPKE.Sender()
{
  return type metadata accessor for HPKE.Sender();
}

uint64_t HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)()
{
  return HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)();
}

uint64_t HPKE.Recipient.open<A>(_:)()
{
  return HPKE.Recipient.open<A>(_:)();
}

uint64_t type metadata accessor for HPKE.Recipient()
{
  return type metadata accessor for HPKE.Recipient();
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(x963Representation:)()
{
  return P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
}

uint64_t type metadata accessor for P256.KeyAgreement.PublicKey()
{
  return type metadata accessor for P256.KeyAgreement.PublicKey();
}

uint64_t P256.KeyAgreement.PrivateKey.init(pemRepresentation:)()
{
  return P256.KeyAgreement.PrivateKey.init(pemRepresentation:)();
}

uint64_t P256.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return P256.KeyAgreement.PrivateKey.pemRepresentation.getter();
}

uint64_t P256.KeyAgreement.PrivateKey.x963Representation.getter()
{
  return P256.KeyAgreement.PrivateKey.x963Representation.getter();
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)()
{
  return P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)();
}

uint64_t type metadata accessor for P256.KeyAgreement.PrivateKey()
{
  return type metadata accessor for P256.KeyAgreement.PrivateKey();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t static String.Encoding.ascii.getter()
{
  return static String.Encoding.ascii.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t AAAsyncByteStreamProcess()
{
  return _AAAsyncByteStreamProcess();
}

int AAByteStreamClose(AAByteStream s)
{
  return _AAByteStreamClose(s);
}

ssize_t AAByteStreamPRead(AAByteStream s, void *buf, size_t nbyte, off_t offset)
{
  return _AAByteStreamPRead(s, buf, nbyte, offset);
}

ssize_t AAByteStreamRead(AAByteStream s, void *buf, size_t nbyte)
{
  return _AAByteStreamRead(s, buf, nbyte);
}

off_t AAByteStreamSeek(AAByteStream s, off_t offset, int whence)
{
  return _AAByteStreamSeek(s, offset, whence);
}

ssize_t AAByteStreamWrite(AAByteStream s, const void *buf, size_t nbyte)
{
  return _AAByteStreamWrite(s, buf, nbyte);
}

AAByteStream AACustomByteStreamOpen(void)
{
  return _AACustomByteStreamOpen();
}

void AACustomByteStreamSetCloseProc(AAByteStream s, AAByteStreamCloseProc proc)
{
}

void AACustomByteStreamSetData(AAByteStream s, void *data)
{
}

void AACustomByteStreamSetPReadProc(AAByteStream s, AAByteStreamPReadProc proc)
{
}

void AACustomByteStreamSetReadProc(AAByteStream s, AAByteStreamReadProc proc)
{
}

AAByteStream AAFileStreamOpenWithFD(int fd, int automatic_close)
{
  return _AAFileStreamOpenWithFD(fd, automatic_close);
}

uint64_t AATempStreamOpen()
{
  return _AATempStreamOpen();
}

AEAAuthData AEAAuthDataCreateWithContext(AEAContext context)
{
  return _AEAAuthDataCreateWithContext(context);
}

void AEAAuthDataDestroy(AEAAuthData auth_data)
{
}

int AEAAuthDataGetEntry(AEAAuthData auth_data, uint32_t i, size_t key_capacity, char *key, size_t *key_length, size_t data_capacity, uint8_t *data, size_t *data_size)
{
  return _AEAAuthDataGetEntry(auth_data, i, key_capacity, key, key_length, data_capacity, data, data_size);
}

uint32_t AEAAuthDataGetEntryCount(AEAAuthData auth_data)
{
  return _AEAAuthDataGetEntryCount(auth_data);
}

AEAContext AEAContextCreateWithEncryptedStream(AAByteStream encrypted_stream)
{
  return _AEAContextCreateWithEncryptedStream(encrypted_stream);
}

void AEAContextDestroy(AEAContext context)
{
}

int AEAContextGetFieldBlob(AEAContext context, AEAContextField field, AEAContextFieldRepresentation representation, size_t buf_capacity, uint8_t *buf, size_t *buf_size)
{
  return _AEAContextGetFieldBlob(context, field, representation, buf_capacity, buf, buf_size);
}

uint64_t AEAContextGetFieldUInt(AEAContext context, AEAContextField field)
{
  return _AEAContextGetFieldUInt(context, field);
}

int AEAContextSetFieldBlob(AEAContext context, AEAContextField field, AEAContextFieldRepresentation representation, const uint8_t *buf, size_t buf_size)
{
  return _AEAContextSetFieldBlob(context, field, representation, buf, buf_size);
}

AAByteStream AEADecryptionRandomAccessInputStreamOpen(AAByteStream encrypted_stream, AEAContext context, size_t alloc_limit, AAFlagSet flags, int n_threads)
{
  return _AEADecryptionRandomAccessInputStreamOpen(encrypted_stream, context, alloc_limit, flags, n_threads);
}

int BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor)
{
  return _BZ2_bzBuffToBuffCompress(dest, destLen, source, sourceLen, blockSize100k, verbosity, workFactor);
}

int BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity)
{
  return _BZ2_bzBuffToBuffDecompress(dest, destLen, source, sourceLen, small, verbosity);
}

unsigned int CCCalibratePBKDF(CCPBKDFAlgorithm algorithm, size_t passwordLen, size_t saltLen, CCPseudoRandomAlgorithm prf, size_t derivedKeyLen, uint32_t msec)
{
  return _CCCalibratePBKDF(algorithm, passwordLen, saltLen, prf, derivedKeyLen, msec);
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return _CCCrypt(op, alg, options, key, keyLength, iv, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return _CCCryptorCreate(op, alg, options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return _CCCryptorRelease(cryptorRef);
}

CCCryptorStatus CCCryptorReset(CCCryptorRef cryptorRef, const void *iv)
{
  return _CCCryptorReset(cryptorRef, iv);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return _CCCryptorUpdate(cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
}

int CCKeyDerivationPBKDF(CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, unsigned int rounds, uint8_t *derivedKey, size_t derivedKeyLen)
{
  return _CCKeyDerivationPBKDF(algorithm, password, passwordLen, salt, saltLen, prf, rounds, derivedKey, derivedKeyLen);
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return _CCRandomGenerateBytes(bytes, count);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA1(data, len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return _CC_SHA256_Final(md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return _CC_SHA256_Init(c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA256_Update(c, data, len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return _CFErrorGetCode(err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListCreateData(allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithData(allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return _CFStringCreateWithBytes(alloc, bytes, numBytes, encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return _CFStringGetBytes(theString, range, encoding, lossByte, isExternalRepresentation, buffer, maxBufLen, usedBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return _CFStringGetMaximumSizeForEncoding(length, encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return _CFUUIDCreateFromUUIDBytes(alloc, bytes);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return _CFUUIDCreateString(alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  CFUUIDBytes v3 = _CFUUIDGetUUIDBytes(uuid);
  uint64_t v2 = *(void *)&v3.byte8;
  uint64_t v1 = *(void *)&v3.byte0;
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

CFStringRef CFUserNotificationGetResponseValue(CFUserNotificationRef userNotification, CFStringRef key, CFIndex idx)
{
  return _CFUserNotificationGetResponseValue(userNotification, key, idx);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

uint64_t CacheDeleteRegisterInfoCallbacks()
{
  return _CacheDeleteRegisterInfoCallbacks();
}

CFDictionaryRef DADiskCopyDescription(DADiskRef disk)
{
  return _DADiskCopyDescription(disk);
}

DADiskRef DADiskCreateFromBSDName(CFAllocatorRef allocator, DASessionRef session, const char *name)
{
  return _DADiskCreateFromBSDName(allocator, session, name);
}

DADiskRef DADiskCreateFromVolumePath(CFAllocatorRef allocator, DASessionRef session, CFURLRef path)
{
  return _DADiskCreateFromVolumePath(allocator, session, path);
}

void DADiskEject(DADiskRef disk, DADiskEjectOptions options, DADiskEjectCallback callback, void *context)
{
}

void DADiskUnmount(DADiskRef disk, DADiskUnmountOptions options, DADiskUnmountCallback callback, void *context)
{
}

uint64_t DADissenterGetProcessID()
{
  return _DADissenterGetProcessID();
}

DAReturn DADissenterGetStatus(DADissenterRef dissenter)
{
  return _DADissenterGetStatus(dissenter);
}

void DARegisterDiskDisappearedCallback(DASessionRef session, CFDictionaryRef match, DADiskDisappearedCallback callback, void *context)
{
}

uint64_t DARegisterIdleCallback()
{
  return _DARegisterIdleCallback();
}

DASessionRef DASessionCreate(CFAllocatorRef allocator)
{
  return _DASessionCreate(allocator);
}

void DASessionScheduleWithRunLoop(DASessionRef session, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

void DASessionUnscheduleFromRunLoop(DASessionRef session, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

void DAUnregisterCallback(DASessionRef session, void *callback, void *context)
{
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return _IOBSDNameMatching(mainPort, options, bsdName);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallMethod(connection, selector, input, inputCnt, inputStruct, inputStructCnt, output, outputCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return _IOConnectCallScalarMethod(connection, selector, input, inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallStructMethod(connection, selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectSetNotificationPort(io_connect_t connect, uint32_t type, mach_port_t port, uintptr_t reference)
{
  return _IOConnectSetNotificationPort(connect, type, port, reference);
}

BOOLean_t IOIteratorIsValid(io_iterator_t iterator)
{
  return _IOIteratorIsValid(iterator);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

void IOIteratorReset(io_iterator_t iterator)
{
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return _IONotificationPortGetRunLoopSource(notify);
}

BOOLean_t IOObjectConformsTo(io_object_t object, const io_name_t className)
{
  return _IOObjectConformsTo(object, className);
}

CFStringRef IOObjectCopyClass(io_object_t object)
{
  return _IOObjectCopyClass(object);
}

BOOLean_t IOObjectIsEqualTo(io_object_t object, io_object_t anObject)
{
  return _IOObjectIsEqualTo(object, anObject);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

kern_return_t IOObjectRetain(io_object_t object)
{
  return _IOObjectRetain(object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

kern_return_t IORegistryEntryCreateIterator(io_registry_entry_t entry, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return _IORegistryEntryCreateIterator(entry, plane, options, iterator);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return _IORegistryEntryGetParentEntry(entry, plane, parent);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return _IORegistryEntryGetRegistryEntryID(entry, entryID);
}

CFMutableDictionaryRef IORegistryEntryIDMatching(uint64_t entryID)
{
  return _IORegistryEntryIDMatching(entryID);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

kern_return_t IOServiceWaitQuiet(io_service_t service, mach_timespec_t *waitTime)
{
  return _IOServiceWaitQuiet(service, waitTime);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return _SecCertificateCopyKey(certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return _SecCertificateCreateWithData(allocator, data);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return _SecKeyCopyExternalRepresentation(key, error);
}

CFDataRef SecKeyCreateDecryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef ciphertext, CFErrorRef *error)
{
  return _SecKeyCreateDecryptedData(key, algorithm, ciphertext, error);
}

CFDataRef SecKeyCreateEncryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef plaintext, CFErrorRef *error)
{
  return _SecKeyCreateEncryptedData(key, algorithm, plaintext, error);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return std::string::compare(this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return std::exception::what(this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return std::__get_sp_mut(a1);
}

size_t std::__next_prime(size_t __n)
{
  return std::__next_prime(__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return std::string::erase(this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return std::string::insert(this, __pos, __c);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return std::string::operator=(this, __str);
}

uint64_t std::ostream::put()
{
  return std::ostream::put();
}

uint64_t std::ostream::flush()
{
  return std::ostream::flush();
}

uint64_t std::ostream::write()
{
  return std::ostream::write();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::~ostream()
{
  return std::ostream::~ostream();
}

uint64_t std::ostream::operator<<()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

uint64_t std::iostream::~basic_iostream()
{
  return std::iostream::~basic_iostream();
}

void std::error_category::~error_category(std::error_category *this)
{
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return std::__thread_struct::__thread_struct(this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

uint64_t std::stringbuf::basic_stringbuf()
{
  return std::stringbuf::basic_stringbuf();
}

const std::error_category *std::generic_category(void)
{
  return std::generic_category();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return std::__shared_weak_count::lock(this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return std::__thread_local_data();
}

void std::__libcpp_atomic_wait(const void *a1, std::__cxx_contention_t a2)
{
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::__cxx_atomic_notify_all(const void *a1)
{
}

std::__cxx_contention_t std::__libcpp_atomic_monitor(const void *a1)
{
  return std::__libcpp_atomic_monitor(a1);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return std::__fs::filesystem::__status(a1, __ec);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return std::chrono::steady_clock::now();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return std::chrono::system_clock::now();
}

void std::locale::~locale(std::locale *this)
{
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return std::to_string(retstr, __val);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return std::bad_alloc::bad_alloc(this);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return ___cxa_demangle(lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)___dynamic_cast(lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return ___error();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t __strlcat_chk()
{
  return ___strlcat_chk();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return ___tolower(a1);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return __os_log_send_and_compose_impl();
}

int access(const char *a1, int a2)
{
  return _access(a1, a2);
}

char *__cdecl basename_r(const char *a1, char *a2)
{
  return _basename_r(a1, a2);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return _calloc(__count, __size);
}

int close(int a1)
{
  return _close(a1);
}

int closedir(DIR *a1)
{
  return _closedir(a1);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return _compression_decode_buffer(dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, algorithm);
}

size_t compression_decode_scratch_buffer_size(compression_algorithm algorithm)
{
  return _compression_decode_scratch_buffer_size(algorithm);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return _compression_encode_buffer(dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, algorithm);
}

size_t compression_encode_scratch_buffer_size(compression_algorithm algorithm)
{
  return _compression_encode_scratch_buffer_size(algorithm);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return _confstr(a1, a2, a3);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return _crc32(crc, buf, len);
}

void curl_easy_cleanup(CURL *curl)
{
}

CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...)
{
  return _curl_easy_getinfo(curl, info);
}

CURL *curl_easy_init(void)
{
  return _curl_easy_init();
}

CURLcode curl_easy_perform(CURL *curl)
{
  return _curl_easy_perform(curl);
}

CURLcode curl_easy_setopt(CURL *curl, CURLoption option, ...)
{
  return _curl_easy_setopt(curl, option);
}

const char *__cdecl curl_easy_strerror(CURLcode a1)
{
  return _curl_easy_strerror(a1);
}

CURLcode curl_global_init(uint64_t flags)
{
  return _curl_global_init(flags);
}

curl_slist *__cdecl curl_slist_append(curl_slist *list, const char *data)
{
  return _curl_slist_append(list, data);
}

void curl_slist_free_all(curl_slist *list)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

uint64_t dispatch_mach_create()
{
  return _dispatch_mach_create();
}

uint64_t dispatch_mach_msg_get_msg()
{
  return _dispatch_mach_msg_get_msg();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_queue_create_with_target_V2(label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

int dup(int a1)
{
  return _dup(a1);
}

void exit(int a1)
{
}

int faccessat(int a1, const char *a2, int a3, int a4)
{
  return _faccessat(a1, a2, a3, a4);
}

int fchmodat(int a1, const char *a2, mode_t a3, int a4)
{
  return _fchmodat(a1, a2, a3, a4);
}

int fchownat(int a1, const char *a2, uid_t a3, gid_t a4, int a5)
{
  return _fchownat(a1, a2, a3, a4, a5);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

DIR *__cdecl fdopendir(int a1)
{
  return _fdopendir(a1);
}

int feof(FILE *a1)
{
  return _feof(a1);
}

int ferror(FILE *a1)
{
  return _ferror(a1);
}

int fileno(FILE *a1)
{
  return _fileno(a1);
}

int flock(int a1, int a2)
{
  return _flock(a1, a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fread(__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return _fstat(a1, a2);
}

int fstatat(int a1, const char *a2, stat *a3, int a4)
{
  return _fstatat(a1, a2, a3, a4);
}

int fstatfs(int a1, statfs *a2)
{
  return _fstatfs(a1, a2);
}

int fsync(int a1)
{
  return _fsync(a1);
}

int ftruncate(int a1, off_t a2)
{
  return _ftruncate(a1, a2);
}

int futimes(int a1, const timeval *a2)
{
  return _futimes(a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

uid_t geteuid(void)
{
  return _geteuid();
}

group *__cdecl getgrgid(gid_t a1)
{
  return _getgrgid(a1);
}

int getiopolicy_np(int a1, int a2)
{
  return _getiopolicy_np(a1, a2);
}

int getmntinfo_r_np(statfs **a1, int a2)
{
  return _getmntinfo_r_np(a1, a2);
}

int getpagesize(void)
{
  return _getpagesize();
}

pid_t getpid(void)
{
  return _getpid();
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

uid_t getuid(void)
{
  return _getuid();
}

int ioctl(int a1, unint64_t a2, ...)
{
  return _ioctl(a1, a2);
}

int isatty(int a1)
{
  return _isatty(a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return _lseek(a1, a2, a3);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return _mach_port_allocate(task, right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return _mach_port_deallocate(task, name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return _mach_port_insert_right(task, name, poly, polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return _mach_port_mod_refs(task, name, right, delta);
}

int madvise(void *a1, size_t a2, int a3)
{
  return _madvise(a1, a2, a3);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_valloc(size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return _memset_s(__s, __smax, __c, __n);
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

int mkdirat(int a1, const char *a2, mode_t a3)
{
  return _mkdirat(a1, a2, a3);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return _mmap(a1, a2, a3, a4, a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return _munmap(a1, a2);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

uint64_t os_variant_allows_internal_security_policies()
{
  return _os_variant_allows_internal_security_policies();
}

int pclose(FILE *a1)
{
  return _pclose(a1);
}

void perror(const char *a1)
{
}

FILE *__cdecl popen(const char *a1, const char *a2)
{
  return _popen(a1, a2);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return _pread(__fd, __buf, __nbyte, a4);
}

ssize_t preadv(int a1, const iovec *a2, int a3, off_t a4)
{
  return _preadv(a1, a2, a3, a4);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return _pthread_create(a1, a2, a3, a4);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return _pthread_getspecific(a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return _pthread_key_create(a1, a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return _pthread_once(a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return _pthread_setspecific(a1, a2);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return _pwrite(__fd, __buf, __nbyte, a4);
}

ssize_t pwritev(int a1, const iovec *a2, int a3, off_t a4)
{
  return _pwritev(a1, a2, a3, a4);
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

int raise(int a1)
{
  return _raise(a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return _readdir(a1);
}

char *__cdecl readpassphrase(const char *a1, char *a2, size_t a3, int a4)
{
  return _readpassphrase(a1, a2, a3, a4);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return _realloc(__ptr, __size);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return _reallocf(__ptr, __size);
}

int sched_yield(void)
{
  return _sched_yield();
}

int seteuid(uid_t a1)
{
  return _seteuid(a1);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return _strcasecmp(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return _strlcpy(__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return _strncasecmp(a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return _strnlen(__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return _strrchr(__s, __c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return _strstr(__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  return _strtod(a1, a2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return _strtoll(__str, __endptr, __base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return _strtoull(__str, __endptr, __base);
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

mode_t umask(mode_t a1)
{
  return _umask(a1);
}

int unmount(const char *a1, int a2)
{
  return _unmount(a1, a2);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

void uuid_generate_random(uuid_t out)
{
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return _vsnprintf(__str, __size, __format, a4);
}

id objc_msgSend_BSDName(void *a1, const char *a2, ...)
{
  return _[a1 BSDName];
}

id objc_msgSend_CLIPassphrasePrompt(void *a1, const char *a2, ...)
{
  return _[a1 CLIPassphrasePrompt];
}

id objc_msgSend_CLIVerifyPassphrasePrompt(void *a1, const char *a2, ...)
{
  return _[a1 CLIVerifyPassphrasePrompt];
}

id objc_msgSend_DI1URLWithData_error_(void *a1, const char *a2, ...)
{
  return [a1 DI1URLWithData:x0 error:x1];
}

id objc_msgSend_GUIAskForPassphraseWithEncryptionFrontend_error_(void *a1, const char *a2, ...)
{
  return [a1 GUIAskForPassphraseWithEncryptionFrontend:error:];
}

id objc_msgSend_GUIAskForPassphraseWithEncryptionFrontend_reply_(void *a1, const char *a2, ...)
{
  return [a1 GUIAskForPassphraseWithEncryptionFrontend:reply:];
}

id objc_msgSend_GUIPassphraseLabel(void *a1, const char *a2, ...)
{
  return _[a1 GUIPassphraseLabel];
}

id objc_msgSend_GUIPassphrasePrompt(void *a1, const char *a2, ...)
{
  return _[a1 GUIPassphrasePrompt];
}

id objc_msgSend_GUIVerifyPassphraseLabel(void *a1, const char *a2, ...)
{
  return _[a1 GUIVerifyPassphraseLabel];
}

id objc_msgSend_GraphNodeWithDictionary_updateChangesToDict_workDir_error_(void *a1, const char *a2, ...)
{
  return [a1 GraphNodeWithDictionary:x0 updateChangesToDict:x1 workDir:x2 error:x3];
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_KKMSKeyWithURL_destKey_destKeySize_error_(void *a1, const char *a2, ...)
{
  return [a1 KKMSKeyWithURL:x0 destKey:x1 destKeySize:x2 error:x3];
}

id objc_msgSend_RAMdisk(void *a1, const char *a2, ...)
{
  return _[a1 RAMdisk];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathComponent:];
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathExtension:];
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_URLByStandardizingPath(void *a1, const char *a2, ...)
{
  return _[a1 URLByStandardizingPath];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_WKMSKeyWithURL_authData_destKey_destKeySize_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "WKMSKeyWithURL:authData:destKey:destKeySize:error:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteURL(void *a1, const char *a2, ...)
{
  return _[a1 absoluteURL];
}

id objc_msgSend_activeConnections(void *a1, const char *a2, ...)
{
  return _[a1 activeConnections];
}

id objc_msgSend_activeNode(void *a1, const char *a2, ...)
{
  return _[a1 activeNode];
}

id objc_msgSend_activeShadowURL(void *a1, const char *a2, ...)
{
  return _[a1 activeShadowURL];
}

id objc_msgSend_addBytesDownloaded_(void *a1, const char *a2, ...)
{
  return [a1 addBytesDownloaded:];
}

id objc_msgSend_addDecendantsToArray_(void *a1, const char *a2, ...)
{
  return [a1 addDecendantsToArray:];
}

id objc_msgSend_addDisappearedCallbackWithMountPoint_shadowMountPoints_delegate_(void *a1, const char *a2, ...)
{
  return [a1 addDisappearedCallbackWithMountPoint:x0 shadowMountPoints:x1 delegate:x2];
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return [a1 addEntriesFromDictionary:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addObjectsFromArray:];
}

id objc_msgSend_addRequest_(void *a1, const char *a2, ...)
{
  return [a1 addRequest:];
}

id objc_msgSend_addShadowNodes_error_(void *a1, const char *a2, ...)
{
  return [a1 addShadowNodes:error:];
}

id objc_msgSend_addShadowURLs_error_(void *a1, const char *a2, ...)
{
  return [a1 addShadowURLs:error:];
}

id objc_msgSend_addToRefCountWithError_(void *a1, const char *a2, ...)
{
  return [a1 addToRefCountWithError:];
}

id objc_msgSend_addToRefCountWithReply_(void *a1, const char *a2, ...)
{
  return [a1 addToRefCountWithReply:];
}

id objc_msgSend_addValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return [a1 addValue:forHTTPHeaderField:];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allowOnDiskCacheWithSinkDiskImage_(void *a1, const char *a2, ...)
{
  return [a1 allowOnDiskCacheWithSinkDiskImage:];
}

id objc_msgSend_allowStoringInKeychain(void *a1, const char *a2, ...)
{
  return _[a1 allowStoringInKeychain];
}

id objc_msgSend_anonymousListener(void *a1, const char *a2, ...)
{
  return _[a1 anonymousListener];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_applyMountPointsWithBSDName_error_(void *a1, const char *a2, ...)
{
  return [a1 applyMountPointsWithBSDName:x0 error:x1];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:")
}

id objc_msgSend_arguments(void *a1, const char *a2, ...)
{
  return _[a1 arguments];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithArray:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObject:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_askPermissionWithRememberPassword_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "askPermissionWithRememberPassword:error:");
}

id objc_msgSend_attachWithParams_reply_(void *a1, const char *a2, ...)
{
  return [a1 attachWithParams:reply:];
}

id objc_msgSend_autoMount(void *a1, const char *a2, ...)
{
  return _[a1 autoMount];
}

id objc_msgSend_backend(void *a1, const char *a2, ...)
{
  return _[a1 backend];
}

id objc_msgSend_backendXPC(void *a1, const char *a2, ...)
{
  return _[a1 backendXPC];
}

id objc_msgSend_baseBackendXPC(void *a1, const char *a2, ...)
{
  return _[a1 baseBackendXPC];
}

id objc_msgSend_blockSize(void *a1, const char *a2, ...)
{
  return _[a1 blockSize];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_buf(void *a1, const char *a2, ...)
{
  return _[a1 buf];
}

id objc_msgSend_bundleWithURL_(void *a1, const char *a2, ...)
{
  return [a1 bundleWithURL:];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_bytesDownloaded(void *a1, const char *a2, ...)
{
  return _[a1 bytesDownloaded];
}

id objc_msgSend_cache(void *a1, const char *a2, ...)
{
  return _[a1 cache];
}

id objc_msgSend_cacheDocument_(void *a1, const char *a2, ...)
{
  return [a1 cacheDocument:];
}

id objc_msgSend_cacheLock(void *a1, const char *a2, ...)
{
  return _[a1 cacheLock];
}

id objc_msgSend_cacheURL(void *a1, const char *a2, ...)
{
  return _[a1 cacheURL];
}

id objc_msgSend_callbackReached(void *a1, const char *a2, ...)
{
  return _[a1 callbackReached];
}

id objc_msgSend_certificate(void *a1, const char *a2, ...)
{
  return _[a1 certificate];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 characterAtIndex:];
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return [a1 characterIsMember:];
}

id objc_msgSend_checkBeforeSetWithIsPassphrase_error_(void *a1, const char *a2, ...)
{
  return [a1 checkBeforeSetWithIsPassphrase:error:];
}

id objc_msgSend_checkExistingFileWithURL_isDirectory_error_(void *a1, const char *a2, ...)
{
  return [a1 checkExistingFileWithURL:x0 isDirectory:x1 error:x2];
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 checkResourceIsReachableAndReturnError:];
}

id objc_msgSend_checkStackValidityWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkStackValidityWithError:");
}

id objc_msgSend_checkWithHasIcloudKeychain_error_(void *a1, const char *a2, ...)
{
  return [a1 checkWithHasIcloudKeychain:error];
}

id objc_msgSend_children(void *a1, const char *a2, ...)
{
  return _[a1 children];
}

id objc_msgSend_client2IOhandler(void *a1, const char *a2, ...)
{
  return _[a1 client2IOhandler];
}

id objc_msgSend_clientDelegate(void *a1, const char *a2, ...)
{
  return _[a1 clientDelegate];
}

id objc_msgSend_closeConnection(void *a1, const char *a2, ...)
{
  return _[a1 closeConnection];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_commandSize(void *a1, const char *a2, ...)
{
  return _[a1 commandSize];
}

id objc_msgSend_completeCommandWithError_(void *a1, const char *a2, ...)
{
  return [a1 completeCommandWithError:];
}

id objc_msgSend_completeRequest_data_response_error_(void *a1, const char *a2, ...)
{
  return [a1 completeRequest:data:response:error:];
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return [a1 componentsSeparatedByString:];
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_connectWithError_(void *a1, const char *a2, ...)
{
  return [a1 connectWithError:];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_consoleAskForPassphraseWithUseStdin_error_(void *a1, const char *a2, ...)
{
  return [a1 consoleAskForPassphraseWithUseStdin:error:];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return [a1 containsObject:];
}

id objc_msgSend_containsValueForKey_(void *a1, const char *a2, ...)
{
  return [a1 containsValueForKey:];
}

id objc_msgSend_conversionMethod(void *a1, const char *a2, ...)
{
  return _[a1 conversionMethod];
}

id objc_msgSend_convertPrivateKeyTox963WithPemPrivateKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertPrivateKeyTox963WithPemPrivateKey:error:");
}

id objc_msgSend_convertWithParams_reply_(void *a1, const char *a2, ...)
{
  return [a1 convertWithParams:x0 reply:x1];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyAllMountPoints(void *a1, const char *a2, ...)
{
  return _[a1 copyAllMountPoints];
}

id objc_msgSend_copyBlockDeviceWithError_(void *a1, const char *a2, ...)
{
  return [a1 copyBlockDeviceWithError:];
}

id objc_msgSend_copyDefaultLocalizedStringForDIErrorCode_(void *a1, const char *a2, ...)
{
  return [a1 copyDefaultLocalizedStringForDIErrorCode:];
}

id objc_msgSend_copyDevicePathWithStatfs_(void *a1, const char *a2, ...)
{
  return [a1 copyDevicePathWithStatfs:];
}

id objc_msgSend_copyDictNodesToFolder_dict_error_(void *a1, const char *a2, ...)
{
  return [a1 copyDictNodesToFolder:x0 dict:x1 error:x2];
}

id objc_msgSend_copyDiskImagesControllerWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyDiskImagesControllerWithError:");
}

id objc_msgSend_copyEntitiesList(void *a1, const char *a2, ...)
{
  return _[a1 copyEntitiesList];
}

id objc_msgSend_copyIOMediaWithError_(void *a1, const char *a2, ...)
{
  return [a1 copyIOMediaWithError:];
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return [a1 copyItemAtURL:toURL:error:];
}

id objc_msgSend_copyNextObject(void *a1, const char *a2, ...)
{
  return _[a1 copyNextObject];
}

id objc_msgSend_copyParentWithError_(void *a1, const char *a2, ...)
{
  return [a1 copyParentWithError:];
}

id objc_msgSend_copyPropertyWithClass_key_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyPropertyWithClass:key:");
}

id objc_msgSend_copyUnmatchedDiskImageWithRegEntryID_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyUnmatchedDiskImageWithRegEntryID:error:");
}

id objc_msgSend_copyUpdatedOutputURLWithError_(void *a1, const char *a2, ...)
{
  return [a1 copyUpdatedOutputURLWithError:];
}

id objc_msgSend_copyWithURL_outURLStr_maxLen_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyWithURL:outURLStr:maxLen:error:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [a1 countByEnumeratingWithState:x0 objects:x1 count:x2];
}

id objc_msgSend_createAEABackendWithBackendXPC_error_(void *a1, const char *a2, ...)
{
  return [a1 createAEABackendWithBackendXPC:error];
}

id objc_msgSend_createAndResumeTask(void *a1, const char *a2, ...)
{
  return _[a1 createAndResumeTask];
}

id objc_msgSend_createAndStoreInSystemKeychainWithCreator_account_error_(void *a1, const char *a2, ...)
{
  return [a1 createAndStoreInSystemKeychainWithCreator:account:error:];
}

id objc_msgSend_createAndStoreInSystemKeychainWithCreator_account_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createAndStoreInSystemKeychainWithCreator:account:reply:");
}

id objc_msgSend_createBackendWithFlags_(void *a1, const char *a2, ...)
{
  return [a1 createBackendWithFlags:];
}

id objc_msgSend_createConnection(void *a1, const char *a2, ...)
{
  return _[a1 createConnection];
}

id objc_msgSend_createDiskImageParamsWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createDiskImageParamsWithError:");
}

id objc_msgSend_createDiskImageParamsXPC(void *a1, const char *a2, ...)
{
  return _[a1 createDiskImageParamsXPC];
}

id objc_msgSend_createDiskImageWithCache_shadowValidation_(void *a1, const char *a2, ...)
{
  return [a1 createDiskImageWithCache:shadowValidation:];
}

id objc_msgSend_createEncryptionWithXPCHandler_error_(void *a1, const char *a2, ...)
{
  return [a1 createEncryptionWithXPCHandler:error:];
}

id objc_msgSend_createListener(void *a1, const char *a2, ...)
{
  return _[a1 createListener];
}

id objc_msgSend_createNodesConnectivityWithNodesDict_error_(void *a1, const char *a2, ...)
{
  return [a1 createNodesConnectivityWithNodesDict:error];
}

id objc_msgSend_createNotificationPortWithError_(void *a1, const char *a2, ...)
{
  return [a1 createNotificationPortWithError:];
}

id objc_msgSend_createPstackDictWithNode_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createPstackDictWithNode:");
}

id objc_msgSend_createPublicKeyHeaderWithBackendXPC_publicKeyHeader_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createPublicKeyHeaderWithBackendXPC:publicKeyHeader:error:");
}

id objc_msgSend_createRamBackend(void *a1, const char *a2, ...)
{
  return _[a1 createRamBackend];
}

id objc_msgSend_createShadowDiskImageWithBackend_numBlocks_sinkDiskImage_cache_only_stack_size_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createShadowDiskImageWithBackend:numBlocks:sinkDiskImage:cache_only:stack_size:");
}

id objc_msgSend_createSinkDiskImage(void *a1, const char *a2, ...)
{
  return _[a1 createSinkDiskImage];
}

id objc_msgSend_createWithXpcHandler_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createWithXpcHandler:error:");
}

id objc_msgSend_cryptoHeader(void *a1, const char *a2, ...)
{
  return _[a1 cryptoHeader];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_customCacheURL(void *a1, const char *a2, ...)
{
  return _[a1 customCacheURL];
}

id objc_msgSend_daSession(void *a1, const char *a2, ...)
{
  return _[a1 daSession];
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 dataTaskWithRequest:];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 dataUsingEncoding:];
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytes:];
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfFile:];
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return [a1 dataWithJSONObject:x0 options:x1 error:x2];
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return [a1 dataWithPropertyList:x0 format:x1 options:x2 error:x3];
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSinceNow:];
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 decimalDigitCharacterSet];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeBoolForKey:];
}

id objc_msgSend_decodeBytesForKey_returnedLength_(void *a1, const char *a2, ...)
{
  return [a1 decodeBytesForKey:returnedLength:];
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeInt64ForKey:];
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeIntegerForKey:];
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeObjectOfClass:[a1 class] forKey:];
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeObjectOfClasses:forKey:];
}

id objc_msgSend_decryptKeyWithData_destKey_destKeySize_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decryptKeyWithData:destKey:destKeySize:error:");
}

id objc_msgSend_defaultCStringEncoding(void *a1, const char *a2, ...)
{
  return _[a1 defaultCStringEncoding];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteImage(void *a1, const char *a2, ...)
{
  return _[a1 deleteImage];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_deserializationError(void *a1, const char *a2, ...)
{
  return _[a1 deserializationError];
}

id objc_msgSend_destroyNotificationPort(void *a1, const char *a2, ...)
{
  return _[a1 destroyNotificationPort];
}

id objc_msgSend_deviceHandle(void *a1, const char *a2, ...)
{
  return _[a1 deviceHandle];
}

id objc_msgSend_diParams(void *a1, const char *a2, ...)
{
  return _[a1 diParams];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithDictionary:];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjects:forKeys:count:];
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjectsAndKeys:];
}

id objc_msgSend_diskArbDisappear(void *a1, const char *a2, ...)
{
  return _[a1 diskArbDisappear];
}

id objc_msgSend_diskArbWithError_(void *a1, const char *a2, ...)
{
  return [a1 diskArbWithError:];
}

id objc_msgSend_diskImageDevice(void *a1, const char *a2, ...)
{
  return _[a1 diskImageDevice];
}

id objc_msgSend_diskImageParamsXPC(void *a1, const char *a2, ...)
{
  return _[a1 diskImageParamsXPC];
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 dispatchQueue];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_downloadSession(void *a1, const char *a2, ...)
{
  return _[a1 downloadSession];
}

id objc_msgSend_dupStderrWithError_(void *a1, const char *a2, ...)
{
  return [a1 dupStderrWithError:];
}

id objc_msgSend_dupWithStderrHandle_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dupWithStderrHandle:reply:");
}

id objc_msgSend_effectiveUserIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 effectiveUserIdentifier];
}

id objc_msgSend_embedUserDataWithParams_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "embedUserDataWithParams:reply:");
}

id objc_msgSend_emulateExternalDisk(void *a1, const char *a2, ...)
{
  return _[a1 emulateExternalDisk];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeBool:x0 forKey:x1];
}

id objc_msgSend_encodeBytes_length_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeBytes:length:forKey:];
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInt64:forKey:];
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInteger:x0 forKey:x1];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encryptionMethod(void *a1, const char *a2, ...)
{
  return _[a1 encryptionMethod];
}

id objc_msgSend_encryptionUUID(void *a1, const char *a2, ...)
{
  return _[a1 encryptionUUID];
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return _[a1 endpoint];
}

id objc_msgSend_enqueueRequestWithSize_atOffset_destinationBuffer_destinationStream_completionSemaphore_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "enqueueRequestWithSize:atOffset:destinationBuffer:destinationStream:completionSemaphore:");
}

id objc_msgSend_enterSandbox(void *a1, const char *a2, ...)
{
  return _[a1 enterSandbox];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsUsingBlock:];
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 ephemeralSessionConfiguration];
}

id objc_msgSend_eraseIfExistingWithURL_error_(void *a1, const char *a2, ...)
{
  return [a1 eraseIfExistingWithURL:x0 error:x1];
}

id objc_msgSend_eraseOldCacheFiles(void *a1, const char *a2, ...)
{
  return _[a1 eraseOldCacheFiles];
}

id objc_msgSend_errorWithDIException_description_prefix_error_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDIException:description:prefix:error:];
}

id objc_msgSend_errorWithDomain_code_description_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:x0 code:x1 description:x2 verboseInfo:x3 error:x4];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:code:userInfo:];
}

id objc_msgSend_errorWithEnumValue_verboseInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithEnumValue:verboseInfo:];
}

id objc_msgSend_errorWithPOSIXCode_verboseInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithPOSIXCode:];
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return _[a1 executablePath];
}

id objc_msgSend_executeWithPath_arguments_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "executeWithPath:arguments:error:");
}

id objc_msgSend_exitDaemon(void *a1, const char *a2, ...)
{
  return _[a1 exitDaemon];
}

id objc_msgSend_exitTimer(void *a1, const char *a2, ...)
{
  return _[a1 exitTimer];
}

id objc_msgSend_exitWithUnmount(void *a1, const char *a2, ...)
{
  return _[a1 exitWithUnmount];
}

id objc_msgSend_extraInfo(void *a1, const char *a2, ...)
{
  return _[a1 extraInfo];
}

id objc_msgSend_failWithDIException_description_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failWithDIException:description:error:")];
}

id objc_msgSend_failWithDIException_prefix_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failWithDIException:prefix:error:");
}

id objc_msgSend_failWithEnumValue_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failWithEnumValue:verboseInfo:error:")];
}

id objc_msgSend_failWithNoPstackError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failWithNoPstackError:");
}

id objc_msgSend_failWithOSStatus_description_error_(void *a1, const char *a2, ...)
{
  return [a1 failWithOSStatus:x0 description:x1 error:x2];
}

id objc_msgSend_failWithPOSIXCode_description_error_(void *a1, const char *a2, ...)
{
  return [a1 failWithPOSIXCode:x0 description:x1 error:x2];
}

id objc_msgSend_failWithPOSIXCode_error_(void *a1, const char *a2, ...)
{
  return [a1 failWithPOSIXCode:];
}

id objc_msgSend_failWithPOSIXCode_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return [a1 failWithPOSIXCode:verboseInfo:error:];
}

id objc_msgSend_fileBackend(void *a1, const char *a2, ...)
{
  return _[a1 fileBackend];
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 fileDescriptor];
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 fileExistsAtPath:isDirectory:];
}

id objc_msgSend_fileHandleForReading(void *a1, const char *a2, ...)
{
  return _[a1 fileHandleForReading];
}

id objc_msgSend_fileHandleForReadingFromURL_error_(void *a1, const char *a2, ...)
{
  return [a1 fileHandleForReadingFromURL:error:];
}

id objc_msgSend_fileMode(void *a1, const char *a2, ...)
{
  return _[a1 fileMode];
}

id objc_msgSend_filePath(void *a1, const char *a2, ...)
{
  return _[a1 filePath];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithFileSystemRepresentation:x0 isDirectory:x1 relativeToURL:x2];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:];
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:x0 isDirectory:x1];
}

id objc_msgSend_fileURLWithPath_relativeToURL_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:];
}

id objc_msgSend_fillDI1InfoWithDevice_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fillDI1InfoWithDevice:error:");
}

id objc_msgSend_fillDI2InfoWithDevice_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fillDI2InfoWithDevice:error:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_frameworkNum(void *a1, const char *a2, ...)
{
  return _[a1 frameworkNum];
}

id objc_msgSend_getAEAKeyFromSAKSWithMetadata_key_error_(void *a1, const char *a2, ...)
{
  return [a1 getAEAKeyFromSAKSWithMetadata:x0 key:x1 error:x2];
}

id objc_msgSend_getAEAKeyWithHelper_keyBuffer_bufferSize_error_(void *a1, const char *a2, ...)
{
  return [a1 getAEAKeyWithHelper:x0, x1, x2, x3];
}

id objc_msgSend_getAuthEntryWithBackend_authTableNumEntries_mechanism_error_(void *a1, const char *a2, ...)
{
  return [a1 getAuthEntryWithBackend:x0, x1, x2, x3];
}

id objc_msgSend_getAuthValueWithBackend_authTableNumEntries_mechanism_error_(void *a1, const char *a2, ...)
{
  return [a1 getAuthValueWithBackend:x0, x1, x2, x3];
}

id objc_msgSend_getCFRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 getCFRunLoop];
}

id objc_msgSend_getCertificateWithCertificatePath_error_(void *a1, const char *a2, ...)
{
  return [a1 getCertificateWithCertificatePath:x0 error:x1];
}

id objc_msgSend_getCertificateWithEncryptionCreator_outCertificate_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getCertificateWithEncryptionCreator:outCertificate:error:");
}

id objc_msgSend_getCertificateWithPublicKey_error_(void *a1, const char *a2, ...)
{
  return [a1 getCertificateWithPublicKey:x0 error:x1];
}

id objc_msgSend_getCryptoHeaderBackend(void *a1, const char *a2, ...)
{
  return _[a1 getCryptoHeaderBackend];
}

id objc_msgSend_getDescendants(void *a1, const char *a2, ...)
{
  return _[a1 getDescendants];
}

id objc_msgSend_getImageInfoWithExtra_error_(void *a1, const char *a2, ...)
{
  return [a1 getImageInfoWithExtra:error];
}

id objc_msgSend_getImageWithTag_error_(void *a1, const char *a2, ...)
{
  return [a1 getImageWithTag:error:];
}

id objc_msgSend_getPassphraseUsingSaksWithBackendXPC_passPhrase_error_(void *a1, const char *a2, ...)
{
  return [a1 getPassphraseUsingSaksWithBackendXPC:passPhrase:error:];
}

id objc_msgSend_getPrivateKeyWithHeader_privateKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getPrivateKeyWithHeader:privateKey:error:")];
}

id objc_msgSend_getPublicKeyWithCertificate_key_error_(void *a1, const char *a2, ...)
{
  return [a1 getPublicKeyWithCertificate:x0 key:x1 error:x2];
}

id objc_msgSend_getRequestWithURL_error_(void *a1, const char *a2, ...)
{
  return [a1 getRequestWithURL:error:];
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return [a1 getResourceValue:x0 forKey:x1 error:x2];
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 getUUIDBytes:];
}

id objc_msgSend_handleRefCount(void *a1, const char *a2, ...)
{
  return _[a1 handleRefCount];
}

id objc_msgSend_hasBaseImageCache(void *a1, const char *a2, ...)
{
  return _[a1 hasBaseImageCache];
}

id objc_msgSend_hasDirectoryPath(void *a1, const char *a2, ...)
{
  return _[a1 hasDirectoryPath];
}

id objc_msgSend_hasGUIaccess(void *a1, const char *a2, ...)
{
  return _[a1 hasGUIaccess];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return [a1 hasPrefix:];
}

id objc_msgSend_hasUnlockedBackend(void *a1, const char *a2, ...)
{
  return _[a1 hasUnlockedBackend];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hintFormat_(void *a1, const char *a2, ...)
{
  return [a1 hintFormat:];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_imageURL(void *a1, const char *a2, ...)
{
  return _[a1 imageURL];
}

id objc_msgSend_imagesDictsArray(void *a1, const char *a2, ...)
{
  return _[a1 imagesDictsArray];
}

id objc_msgSend_imported(void *a1, const char *a2, ...)
{
  return _[a1 imported];
}

id objc_msgSend_inPlaceConversion(void *a1, const char *a2, ...)
{
  return _[a1 inPlaceConversion];
}

id objc_msgSend_initFileURLWithPath_(void *a1, const char *a2, ...)
{
  return [a1 initFileURLWithPath:];
}

id objc_msgSend_initWithBSDName_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithBSDName:x0 error:x1];
}

id objc_msgSend_initWithBackend_(void *a1, const char *a2, ...)
{
  return [a1 initWithBackend:];
}

id objc_msgSend_initWithBackend_key_(void *a1, const char *a2, ...)
{
  return [a1 initWithBackend:key:];
}

id objc_msgSend_initWithBackendXPC_(void *a1, const char *a2, ...)
{
  return [a1 initWithBackendXPC:];
}

id objc_msgSend_initWithBackendXPC_blockSize_(void *a1, const char *a2, ...)
{
  return [a1 initWithBackendXPC:blockSize:];
}

id objc_msgSend_initWithBackendXPC_header_(void *a1, const char *a2, ...)
{
  return [a1 initWithBackendXPC:header:];
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return [a1 initWithBase64EncodedString:x0 options:x1];
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytes:x0 length:x1];
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytesNoCopy:x0 length:x1 freeWhenDone:x2];
}

id objc_msgSend_initWithClassName_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithClassName:error:];
}

id objc_msgSend_initWithDIIOObject_(void *a1, const char *a2, ...)
{
  return [a1 initWithDIIOObject:];
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:x0 encoding:x1];
}

id objc_msgSend_initWithData_pstackURL_imported_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:x0 pstackURL:x1 imported:x2 error:x3];
}

id objc_msgSend_initWithDebugServiceName_(void *a1, const char *a2, ...)
{
  return [a1 initWithDebugServiceName:];
}

id objc_msgSend_initWithDevName_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithDevName:error:];
}

id objc_msgSend_initWithDevice_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithDevice:error:];
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return [a1 initWithDictionary:x0 copyItems:x1];
}

id objc_msgSend_initWithDictionary_updateChangesToDict_workDir_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithDictionary:x0 updateChangesToDict:x1 workDir:x2 error:x3];
}

id objc_msgSend_initWithEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 initWithEndpoint:];
}

id objc_msgSend_initWithError_(void *a1, const char *a2, ...)
{
  return [a1 initWithError:];
}

id objc_msgSend_initWithFileDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 initWithFileDescriptor:];
}

id objc_msgSend_initWithFileDescriptor_closeOnDealloc_(void *a1, const char *a2, ...)
{
  return [a1 initWithFileDescriptor:x0 closeOnDealloc:x1];
}

id objc_msgSend_initWithFileDescriptor_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithFileDescriptor:x0 error:x1];
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 initWithFormat:];
}

id objc_msgSend_initWithIODaemon_(void *a1, const char *a2, ...)
{
  return [a1 initWithIODaemon:];
}

id objc_msgSend_initWithIOIterator_retain_(void *a1, const char *a2, ...)
{
  return [a1 initWithIOIterator:retain:];
}

id objc_msgSend_initWithIOObject_(void *a1, const char *a2, ...)
{
  return [a1 initWithIOObject:];
}

id objc_msgSend_initWithInputURL_outputURL_shadowURLs_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithInputURL:x0 outputURL:x1 shadowURLs:x2 error:x3];
}

id objc_msgSend_initWithIsRAM_(void *a1, const char *a2, ...)
{
  return [a1 initWithIsRAM:];
}

id objc_msgSend_initWithIteratorNext_(void *a1, const char *a2, ...)
{
  return [a1 initWithIteratorNext:x0];
}

id objc_msgSend_initWithListenerEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 initWithListenerEndpoint:];
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return [a1 initWithMachServiceName:];
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return [a1 initWithMachServiceName:x0 options:x1];
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return [a1 initWithObjectsAndKeys:];
}

id objc_msgSend_initWithParams_(void *a1, const char *a2, ...)
{
  return [a1 initWithParams:];
}

id objc_msgSend_initWithPluginName_params_(void *a1, const char *a2, ...)
{
  return [a1 initWithPluginName:params:];
}

id objc_msgSend_initWithPluginName_pluginParams_tag_UUID_parentNode_metadata_isCache_(void *a1, const char *a2, ...)
{
  return [a1 initWithPluginName:pluginName pluginParams:pluginParams tag:tag UUID:UUID parentNode:parentNode metadata:metadata isCache:isCache];
}

id objc_msgSend_initWithPstackURL_imported_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithPstackURL:x0 imported:x1 error:x2];
}

id objc_msgSend_initWithRegEntryID_(void *a1, const char *a2, ...)
{
  return [a1 initWithRegEntryID:];
}

id objc_msgSend_initWithRegEntryID_xpcEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 initWithRegEntryID:x0 xpcEndpoint:x1];
}

id objc_msgSend_initWithRegistryEntryID_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithRegistryEntryID:error:];
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return [a1 initWithServiceName:];
}

id objc_msgSend_initWithSession_size_atOffset_destinationBuffer_destinationStream_completionSemaphore_(void *a1, const char *a2, ...)
{
  return [a1 initWithSession:x0 size:x1 atOffset:x2 destinationBuffer:x3 destinationStream:x4 completionSemaphore:x5];
}

id objc_msgSend_initWithSize_(void *a1, const char *a2, ...)
{
  return [a1 initWithSize:];
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return [a1 initWithString:x0];
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:];
}

id objc_msgSend_initWithURL_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:x0 error:x1];
}

id objc_msgSend_initWithURL_fileOpenFlags_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:x0 fileOpenFlags:x1];
}

id objc_msgSend_initWithURL_fileOpenFlags_bandSize_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:x0 fileOpenFlags:x1 bandSize:x2];
}

id objc_msgSend_initWithURL_isCache_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:isCache:];
}

id objc_msgSend_initWithURL_key_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:key:];
}

id objc_msgSend_initWithURL_openMode_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:x0 openMode:x1];
}

id objc_msgSend_initWithURL_shadowURLs_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:x0 shadowURLs:x1 error:x2];
}

id objc_msgSend_initWithURL_streamBase_maxAttempts_pauseInterval_maxRequestsInFlight_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:x0 streamBase:x1 maxAttempts:x2 pauseInterval:x3 maxRequestsInFlight:x4];
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 initWithUTF8String:];
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDBytes:];
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDString:];
}

id objc_msgSend_initWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return [a1 initWithUnsignedInt:];
}

id objc_msgSend_initWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return [a1 initWithUnsignedLongLong:x0];
}

id objc_msgSend_initWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return [a1 initWithUnsignedShort:x0];
}

id objc_msgSend_inputMountedOnURL(void *a1, const char *a2, ...)
{
  return _[a1 inputMountedOnURL];
}

id objc_msgSend_inputStatFS(void *a1, const char *a2, ...)
{
  return _[a1 inputStatFS];
}

id objc_msgSend_inputURL(void *a1, const char *a2, ...)
{
  return _[a1 inputURL];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertObject:atIndex:];
}

id objc_msgSend_instanceID(void *a1, const char *a2, ...)
{
  return _[a1 instanceID];
}

id objc_msgSend_instanceId(void *a1, const char *a2, ...)
{
  return _[a1 instanceId];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return [a1 interfaceWithProtocol:];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAndCancel];
}

id objc_msgSend_ioMedia(void *a1, const char *a2, ...)
{
  return _[a1 ioMedia];
}

id objc_msgSend_ioObj(void *a1, const char *a2, ...)
{
  return _[a1 ioObj];
}

id objc_msgSend_ioObjectWithClassName_iterateParent_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "ioObjectWithClassName:iterateParent:error:");
}

id objc_msgSend_isCache(void *a1, const char *a2, ...)
{
  return _[a1 isCache];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isEmpty];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return [a1 isEqual:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _[a1 isFileURL];
}

id objc_msgSend_isPlugin(void *a1, const char *a2, ...)
{
  return _[a1 isPlugin];
}

id objc_msgSend_isPrivileged(void *a1, const char *a2, ...)
{
  return _[a1 isPrivileged];
}

id objc_msgSend_isPstack(void *a1, const char *a2, ...)
{
  return _[a1 isPstack];
}

id objc_msgSend_isQuarantined(void *a1, const char *a2, ...)
{
  return _[a1 isQuarantined];
}

id objc_msgSend_isRAM(void *a1, const char *a2, ...)
{
  return _[a1 isRAM];
}

id objc_msgSend_isSparseFormat(void *a1, const char *a2, ...)
{
  return _[a1 isSparseFormat];
}

id objc_msgSend_isUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 isUnlocked];
}

id objc_msgSend_isWritableFileAtPath_(void *a1, const char *a2, ...)
{
  return [a1 isWritableFileAtPath:];
}

id objc_msgSend_isWritableFormat(void *a1, const char *a2, ...)
{
  return _[a1 isWritableFormat];
}

id objc_msgSend_jsonResponseWithRequest_session_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "jsonResponseWithRequest:session:error:");
}

id objc_msgSend_keychainUnlockWithEncryptionUnlocker_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "keychainUnlockWithEncryptionUnlocker:error:");
}

id objc_msgSend_keychainUnlockWithEncryptionUnlocker_reply_(void *a1, const char *a2, ...)
{
  return [a1 keychainUnlockWithEncryptionUnlocker:reply:];
}

id objc_msgSend_keychainUnlockWithIsSystemKeychain_error_(void *a1, const char *a2, ...)
{
  return [a1 keychainUnlockWithIsSystemKeychain:error:];
}

id objc_msgSend_keysOfEntriesPassingTest_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "keysOfEntriesPassingTest:");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_launchAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 launchAndReturnError:];
}

id objc_msgSend_launchedTaskWithExecutableURL_arguments_error_terminationHandler_(void *a1, const char *a2, ...)
{
  return [a1 launchedTaskWithExecutableURL:x0 arguments:x1 error:x2 terminationHandler:x3];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _[a1 listener];
}

id objc_msgSend_loadImportedNodesWithError_(void *a1, const char *a2, ...)
{
  return [a1 loadImportedNodesWithError:];
}

id objc_msgSend_loadPlistDictFromURL_dict_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "loadPlistDictFromURL:dict:error:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_logWithHeader_(void *a1, const char *a2, ...)
{
  return [a1 logWithHeader:];
}

id objc_msgSend_lookupLegacyKeychainWithXpcHandler_error_(void *a1, const char *a2, ...)
{
  return [a1 lookupLegacyKeychainWithXpcHandler:x0 error:x1];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_makeCryptoFormatWithIsNewImage_pass_certificate_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "makeCryptoFormatWithIsNewImage:pass:certificate:error:");
}

id objc_msgSend_makeNewImageEncryptedWithPassphrase_certificate_error_(void *a1, const char *a2, ...)
{
  return [a1 makeNewImageEncryptedWithPassphrase:x0 certificate:x1 error:x2];
}

id objc_msgSend_maxAttempts(void *a1, const char *a2, ...)
{
  return _[a1 maxAttempts];
}

id objc_msgSend_maxRawUDIFRunSize(void *a1, const char *a2, ...)
{
  return _[a1 maxRawUDIFRunSize];
}

id objc_msgSend_maxRequests(void *a1, const char *a2, ...)
{
  return _[a1 maxRequests];
}

id objc_msgSend_mediaSize(void *a1, const char *a2, ...)
{
  return _[a1 mediaSize];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_mountPoints(void *a1, const char *a2, ...)
{
  return _[a1 mountPoints];
}

id objc_msgSend_mountedFrom(void *a1, const char *a2, ...)
{
  return _[a1 mountedFrom];
}

id objc_msgSend_mountedOnAPFS(void *a1, const char *a2, ...)
{
  return _[a1 mountedOnAPFS];
}

id objc_msgSend_mountedOnURL(void *a1, const char *a2, ...)
{
  return _[a1 mountedOnURL];
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return [a1 moveItemAtURL:toURL:error:];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_nbyte(void *a1, const char *a2, ...)
{
  return _[a1 nbyte];
}

id objc_msgSend_newACEndpointWithEnvironment_error_(void *a1, const char *a2, ...)
{
  return [a1 newACEndpointWithEnvironment:error];
}

id objc_msgSend_newAttachWithParams_error_(void *a1, const char *a2, ...)
{
  return [a1 newAttachWithParams:x0 error:x1];
}

id objc_msgSend_newDI1DevicesArrayWithError_(void *a1, const char *a2, ...)
{
  return [a1 newDI1DevicesArrayWithError:];
}

id objc_msgSend_newDI2DevicesArrayWithError_(void *a1, const char *a2, ...)
{
  return [a1 newDI2DevicesArrayWithError:];
}

id objc_msgSend_newDIURLWithNSURL_(void *a1, const char *a2, ...)
{
  return [a1 newDIURLWithNSURL:];
}

id objc_msgSend_newDIURLWithPluginName_params_(void *a1, const char *a2, ...)
{
  return [a1 newDIURLWithPluginName:params:];
}

id objc_msgSend_newDawTokenWithError_(void *a1, const char *a2, ...)
{
  return [a1 newDawTokenWithError:];
}

id objc_msgSend_newEntityDictWithIOMedia_mountPoints_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "newEntityDictWithIOMedia:mountPoints:");
}

id objc_msgSend_newEnvWithDictionary_error_(void *a1, const char *a2, ...)
{
  return [a1 newEnvWithDictionary:x0 error:x1];
}

id objc_msgSend_newFileBackendWithURL_fileOpenFlags_error_(void *a1, const char *a2, ...)
{
  return [a1 newFileBackendWithURL:x0 fileOpenFlags:x1 error:x2];
}

id objc_msgSend_newIteratorWithOptions_error_(void *a1, const char *a2, ...)
{
  return [a1 newIteratorWithOptions:error:];
}

id objc_msgSend_newSessionWithError_(void *a1, const char *a2, ...)
{
  return [a1 newSessionWithError:];
}

id objc_msgSend_newUnlockBackendXPCValidateArgsWithPassphrase_certificate_isNewImage_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "newUnlockBackendXPCValidateArgsWithPassphrase:certificate:isNewImage:error:");
}

id objc_msgSend_newUnlockedBackendXPCWithPassphrase_certificate_isNewImage_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "newUnlockedBackendXPCWithPassphrase:certificate:isNewImage:error:");
}

id objc_msgSend_newUrl_(void *a1, const char *a2, ...)
{
  return [a1 newUrl:];
}

id objc_msgSend_newWithCryptoFormat_(void *a1, const char *a2, ...)
{
  return [a1 newWithCryptoFormat:];
}

id objc_msgSend_newWithPassphrase_error_(void *a1, const char *a2, ...)
{
  return [a1 newWithPassphrase:error];
}

id objc_msgSend_newWithURL_fileOpenFlags_error_(void *a1, const char *a2, ...)
{
  return [a1 newWithURL:x0 fileOpenFlags:x1 error:x2];
}

id objc_msgSend_newWithUnlockedBackendXPC_error_(void *a1, const char *a2, ...)
{
  return [a1 newWithUnlockedBackendXPC:error];
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_nilWithDIException_description_error_(void *a1, const char *a2, ...)
{
  return [a1 nilWithDIException:description:error:];
}

id objc_msgSend_nilWithDIException_prefix_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "nilWithDIException:prefix:error:");
}

id objc_msgSend_nilWithEnumValue_description_error_(void *a1, const char *a2, ...)
{
  return [a1 nilWithEnumValue:x0 description:x1 error:x2];
}

id objc_msgSend_nilWithEnumValue_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return [a1 nilWithEnumValue:x0 verboseInfo:x1 error:x2];
}

id objc_msgSend_nilWithOSStatus_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return [a1 nilWithOSStatus:verboseInfo:error:];
}

id objc_msgSend_nilWithPOSIXCode_description_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "nilWithPOSIXCode:description:error:")];
}

id objc_msgSend_nilWithPOSIXCode_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "nilWithPOSIXCode:verboseInfo:error:");
}

id objc_msgSend_nodes(void *a1, const char *a2, ...)
{
  return _[a1 nodes];
}

id objc_msgSend_nonCacheNodes(void *a1, const char *a2, ...)
{
  return _[a1 nonCacheNodes];
}

id objc_msgSend_notificationPort(void *a1, const char *a2, ...)
{
  return _[a1 notificationPort];
}

id objc_msgSend_numBlocks(void *a1, const char *a2, ...)
{
  return _[a1 numBlocks];
}

id objc_msgSend_numBlocksWithSizeStr_blockSize_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "numBlocksWithSizeStr:blockSize:")];
}

id objc_msgSend_numberOfMatchesInString_options_range_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "numberOfMatchesInString:options:range:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return [a1 numberWithBool:];
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInteger:];
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedLongLong:];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndex:];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndexedSubscript:];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForKey:];
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectForKeyedSubscript:];
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return _[a1 offset];
}

id objc_msgSend_onClientInvalidateWithConnection_(void *a1, const char *a2, ...)
{
  return [a1 onClientInvalidateWithConnection:];
}

id objc_msgSend_onDisappearedMountPoint(void *a1, const char *a2, ...)
{
  return _[a1 onDisappearedMountPoint];
}

id objc_msgSend_onDiskCache(void *a1, const char *a2, ...)
{
  return _[a1 onDiskCache];
}

id objc_msgSend_onErrorCleanup(void *a1, const char *a2, ...)
{
  return _[a1 onErrorCleanup];
}

id objc_msgSend_onPeriodicWithInfo_urgency_(void *a1, const char *a2, ...)
{
  return [a1 onPeriodicWithInfo:urgency:];
}

id objc_msgSend_openEncryption(void *a1, const char *a2, ...)
{
  return _[a1 openEncryption];
}

id objc_msgSend_openExistingImageWithFlags_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "openExistingImageWithFlags:error:");
}

id objc_msgSend_openWritable_createNonExisting_(void *a1, const char *a2, ...)
{
  return [a1 openWritable:createNonExisting:];
}

id objc_msgSend_operationError(void *a1, const char *a2, ...)
{
  return _[a1 operationError];
}

id objc_msgSend_outputFormat(void *a1, const char *a2, ...)
{
  return _[a1 outputFormat];
}

id objc_msgSend_outputParams(void *a1, const char *a2, ...)
{
  return _[a1 outputParams];
}

id objc_msgSend_outputURL(void *a1, const char *a2, ...)
{
  return _[a1 outputURL];
}

id objc_msgSend_parent(void *a1, const char *a2, ...)
{
  return _[a1 parent];
}

id objc_msgSend_parentUUID(void *a1, const char *a2, ...)
{
  return _[a1 parentUUID];
}

id objc_msgSend_passphrase(void *a1, const char *a2, ...)
{
  return _[a1 passphrase];
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return _[a1 password];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pauseInterval(void *a1, const char *a2, ...)
{
  return _[a1 pauseInterval];
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_pipe(void *a1, const char *a2, ...)
{
  return _[a1 pipe];
}

id objc_msgSend_pluginHeader(void *a1, const char *a2, ...)
{
  return _[a1 pluginHeader];
}

id objc_msgSend_pluginName(void *a1, const char *a2, ...)
{
  return _[a1 pluginName];
}

id objc_msgSend_pluginParams(void *a1, const char *a2, ...)
{
  return _[a1 pluginParams];
}

id objc_msgSend_popObjectForKey_(void *a1, const char *a2, ...)
{
  return [a1 popObjectForKey:];
}

id objc_msgSend_populateNodesDictsWithArray_pstackURL_nodesDict_isTopLevelPstack_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "populateNodesDictsWithArray:pstackURL:nodesDict:isTopLevelPstack:error:");
}

id objc_msgSend_postRequestWithURL_session_data_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "postRequestWithURL:session:data:error:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_prepareImageWithXpcHandler_fileMode_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "prepareImageWithXpcHandler:fileMode:error:")
}

id objc_msgSend_prepareParamsWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "prepareParamsWithError:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_pstackDB(void *a1, const char *a2, ...)
{
  return _[a1 pstackDB];
}

id objc_msgSend_pstackDict(void *a1, const char *a2, ...)
{
  return _[a1 pstackDict];
}

id objc_msgSend_pstackURL(void *a1, const char *a2, ...)
{
  return _[a1 pstackURL];
}

id objc_msgSend_publicKey(void *a1, const char *a2, ...)
{
  return _[a1 publicKey];
}

id objc_msgSend_ramSizeStr(void *a1, const char *a2, ...)
{
  return _[a1 ramSizeStr];
}

id objc_msgSend_rawBlockSize(void *a1, const char *a2, ...)
{
  return _[a1 rawBlockSize];
}

id objc_msgSend_reOpenIfWritableWithError_(void *a1, const char *a2, ...)
{
  return [a1 reOpenIfWritableWithError:];
}

id objc_msgSend_readDataToEndOfFileAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 readDataToEndOfFileAndReturnError:];
}

id objc_msgSend_readDataUpToLength_error_(void *a1, const char *a2, ...)
{
  return [a1 readDataUpToLength:error:];
}

id objc_msgSend_readPassphraseFlags(void *a1, const char *a2, ...)
{
  return _[a1 readPassphraseFlags];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_regEntryID(void *a1, const char *a2, ...)
{
  return _[a1 regEntryID];
}

id objc_msgSend_registerPeriodicCallback(void *a1, const char *a2, ...)
{
  return _[a1 registerPeriodicCallback];
}

id objc_msgSend_registryEntryIDWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "registryEntryIDWithError:")];
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return [a1 regularExpressionWithPattern:x0 options:x1 error:x2];
}

id objc_msgSend_relativePath(void *a1, const char *a2, ...)
{
  return _[a1 relativePath];
}

id objc_msgSend_relativeString(void *a1, const char *a2, ...)
{
  return _[a1 relativeString];
}

id objc_msgSend_remainingAttempts(void *a1, const char *a2, ...)
{
  return _[a1 remainingAttempts];
}

id objc_msgSend_remoteObjectInterface(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectInterface];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return [a1 remoteObjectProxyWithErrorHandler:];
}

id objc_msgSend_remoteProxy(void *a1, const char *a2, ...)
{
  return _[a1 remoteProxy];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return [a1 removeItemAtURL:x0 error:x1];
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectAtIndex:];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectForKey:];
}

id objc_msgSend_removeRequest_(void *a1, const char *a2, ...)
{
  return [a1 removeRequest:];
}

id objc_msgSend_removeWithNode_recursive_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "removeWithNode:recursive:error:");
}

id objc_msgSend_replaceWithBackendXPC_(void *a1, const char *a2, ...)
{
  return [a1 replaceWithBackendXPC:];
}

id objc_msgSend_requestSynchronousDataWithRequest_session_(void *a1, const char *a2, ...)
{
  return [a1 requestSynchronousDataWithRequest:session:];
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return [a1 requestWithURL:];
}

id objc_msgSend_requests(void *a1, const char *a2, ...)
{
  return _[a1 requests];
}

id objc_msgSend_requestsLock(void *a1, const char *a2, ...)
{
  return _[a1 requestsLock];
}

id objc_msgSend_requestsSem(void *a1, const char *a2, ...)
{
  return _[a1 requestsSem];
}

id objc_msgSend_requestsStatsToNSArrayWithArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestsStatsToNSArrayWithArray:");
}

id objc_msgSend_requiresRootDaemon(void *a1, const char *a2, ...)
{
  return _[a1 requiresRootDaemon];
}

id objc_msgSend_restartExitTimer(void *a1, const char *a2, ...)
{
  return _[a1 restartExitTimer];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_retrieveStatsWithParams_reply_(void *a1, const char *a2, ...)
{
  return [a1 retrieveStatsWithParams:x0 reply:x1];
}

id objc_msgSend_retrieveUserDataWithParams_reply_(void *a1, const char *a2, ...)
{
  return [a1 retrieveUserDataWithParams:x0 reply:x1];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runIOmanager(void *a1, const char *a2, ...)
{
  return _[a1 runIOmanager];
}

id objc_msgSend_runLoopSource(void *a1, const char *a2, ...)
{
  return _[a1 runLoopSource];
}

id objc_msgSend_runMode_beforeDate_(void *a1, const char *a2, ...)
{
  return [a1 runMode:beforeDate:];
}

id objc_msgSend_saveToPlistWithDictionary_URL_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "saveToPlistWithDictionary:URL:error:")
}

id objc_msgSend_scanInteger_(void *a1, const char *a2, ...)
{
  return [a1 scanInteger:];
}

id objc_msgSend_scanUpToCharactersFromSet_intoString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "scanUpToCharactersFromSet:intoString:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return [a1 scannerWithString:];
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return [a1 scheduledTimerWithTimeInterval:repeats:block:];
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_sem(void *a1, const char *a2, ...)
{
  return _[a1 sem];
}

id objc_msgSend_semaphore(void *a1, const char *a2, ...)
{
  return _[a1 semaphore];
}

id objc_msgSend_serviceListener(void *a1, const char *a2, ...)
{
  return _[a1 serviceListener];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 sessionWithConfiguration:];
}

id objc_msgSend_setActiveNode_(void *a1, const char *a2, ...)
{
  return [a1 setActiveNode:];
}

id objc_msgSend_setAllowStoringInKeychain_(void *a1, const char *a2, ...)
{
  return [a1 setAllowStoringInKeychain:];
}

id objc_msgSend_setArguments_(void *a1, const char *a2, ...)
{
  return [a1 setArguments:];
}

id objc_msgSend_setAttachedTransaction_(void *a1, const char *a2, ...)
{
  return [a1 setAttachedTransaction:];
}

id objc_msgSend_setBSDName_(void *a1, const char *a2, ...)
{
  return [a1 setBSDName:];
}

id objc_msgSend_setBackend_(void *a1, const char *a2, ...)
{
  return [a1 setBackend:];
}

id objc_msgSend_setBackendXPC_(void *a1, const char *a2, ...)
{
  return [a1 setBackendXPC:];
}

id objc_msgSend_setBlockSize_(void *a1, const char *a2, ...)
{
  return [a1 setBlockSize:];
}

id objc_msgSend_setCache_(void *a1, const char *a2, ...)
{
  return [a1 setCache:];
}

id objc_msgSend_setCacheURL_(void *a1, const char *a2, ...)
{
  return [a1 setCacheURL:];
}

id objc_msgSend_setCallbackReached_(void *a1, const char *a2, ...)
{
  return [a1 setCallbackReached:];
}

id objc_msgSend_setCertificate_(void *a1, const char *a2, ...)
{
  return [a1 setCertificate:];
}

id objc_msgSend_setClient2IOhandler_(void *a1, const char *a2, ...)
{
  return [a1 setClient2IOhandler:];
}

id objc_msgSend_setClientDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setClientDelegate:];
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return [a1 setConnection:];
}

id objc_msgSend_setConnectionMode(void *a1, const char *a2, ...)
{
  return _[a1 setConnectionMode];
}

id objc_msgSend_setConversionMethod_(void *a1, const char *a2, ...)
{
  return [a1 setConversionMethod:];
}

id objc_msgSend_setDI2PIDWithDevice_error_(void *a1, const char *a2, ...)
{
  return [a1 setDI2PIDWithDevice:error:];
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:];
}

id objc_msgSend_setDeserializationError_(void *a1, const char *a2, ...)
{
  return [a1 setDeserializationError:];
}

id objc_msgSend_setDeviceHandle_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceHandle:];
}

id objc_msgSend_setDiskImageParamsXPC_(void *a1, const char *a2, ...)
{
  return [a1 setDiskImageParamsXPC:];
}

id objc_msgSend_setEncryptionMethod_(void *a1, const char *a2, ...)
{
  return [a1 setEncryptionMethod:];
}

id objc_msgSend_setExecutableURL_(void *a1, const char *a2, ...)
{
  return [a1 setExecutableURL:];
}

id objc_msgSend_setExitTimer_(void *a1, const char *a2, ...)
{
  return [a1 setExitTimer:];
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return [a1 setExportedInterface:];
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return [a1 setExportedObject:];
}

id objc_msgSend_setFileMode_(void *a1, const char *a2, ...)
{
  return [a1 setFileMode:];
}

id objc_msgSend_setHTTPAdditionalHeaders_(void *a1, const char *a2, ...)
{
  return [a1 setHTTPAdditionalHeaders:];
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return [a1 setHTTPBody:];
}

id objc_msgSend_setHTTPMaximumConnectionsPerHost_(void *a1, const char *a2, ...)
{
  return [a1 setHTTPMaximumConnectionsPerHost:];
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return [a1 setHTTPMethod:];
}

id objc_msgSend_setHandleRefCount_(void *a1, const char *a2, ...)
{
  return [a1 setHandleRefCount:];
}

id objc_msgSend_setInputMountedOnURL_(void *a1, const char *a2, ...)
{
  return [a1 setInputMountedOnURL:];
}

id objc_msgSend_setInputStatFS_(void *a1, const char *a2, ...)
{
  return [a1 setInputStatFS:];
}

id objc_msgSend_setInputURL_(void *a1, const char *a2, ...)
{
  return [a1 setInputURL:];
}

id objc_msgSend_setInstanceID_(void *a1, const char *a2, ...)
{
  return [a1 setInstanceID:];
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInterruptionHandler:];
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInvalidationHandler:];
}

id objc_msgSend_setListener_(void *a1, const char *a2, ...)
{
  return [a1 setListener:];
}

id objc_msgSend_setNotificationPort_(void *a1, const char *a2, ...)
{
  return [a1 setNotificationPort:];
}

id objc_msgSend_setNumBlocks_(void *a1, const char *a2, ...)
{
  return [a1 setNumBlocks:];
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKey:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setOperationError_(void *a1, const char *a2, ...)
{
  return [a1 setOperationError:];
}

id objc_msgSend_setOutputParams_(void *a1, const char *a2, ...)
{
  return [a1 setOutputParams:];
}

id objc_msgSend_setParent_(void *a1, const char *a2, ...)
{
  return [a1 setParent:];
}

id objc_msgSend_setPassphrase_(void *a1, const char *a2, ...)
{
  return [a1 setPassphrase:];
}

id objc_msgSend_setPassphrase_error_(void *a1, const char *a2, ...)
{
  return [a1 setPassphrase:error:];
}

id objc_msgSend_setPassword_(void *a1, const char *a2, ...)
{
  return [a1 setPassword:];
}

id objc_msgSend_setPauseInterval_(void *a1, const char *a2, ...)
{
  return [a1 setPauseInterval:];
}

id objc_msgSend_setPstackDict_(void *a1, const char *a2, ...)
{
  return [a1 setPstackDict:];
}

id objc_msgSend_setPublicKey_(void *a1, const char *a2, ...)
{
  return [a1 setPublicKey:];
}

id objc_msgSend_setReadPassphraseFlags_(void *a1, const char *a2, ...)
{
  return [a1 setReadPassphraseFlags:];
}

id objc_msgSend_setRemainingAttempts_(void *a1, const char *a2, ...)
{
  return [a1 setRemainingAttempts:];
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return [a1 setRemoteObjectInterface:];
}

id objc_msgSend_setRemoteProxy_(void *a1, const char *a2, ...)
{
  return [a1 setRemoteProxy:];
}

id objc_msgSend_setRunLoopSource_(void *a1, const char *a2, ...)
{
  return [a1 setRunLoopSource:];
}

id objc_msgSend_setSemaphore_(void *a1, const char *a2, ...)
{
  return [a1 setSemaphore:];
}

id objc_msgSend_setShadowChain_(void *a1, const char *a2, ...)
{
  return [a1 setShadowChain:];
}

id objc_msgSend_setShadowMountedOnURLs_(void *a1, const char *a2, ...)
{
  return [a1 setShadowMountedOnURLs:];
}

id objc_msgSend_setShouldValidate_(void *a1, const char *a2, ...)
{
  return [a1 setShouldValidate:];
}

id objc_msgSend_setSigtermHandler_(void *a1, const char *a2, ...)
{
  return [a1 setSigtermHandler:];
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return [a1 setSize:];
}

id objc_msgSend_setSizeWithDiskImage_newSize_(void *a1, const char *a2, ...)
{
  return [a1 setSizeWithDiskImage:newSize:];
}

id objc_msgSend_setSparseBundleBandSize_(void *a1, const char *a2, ...)
{
  return [a1 setSparseBundleBandSize:];
}

id objc_msgSend_setStandardOutput_(void *a1, const char *a2, ...)
{
  return [a1 setStandardOutput:];
}

id objc_msgSend_setStartedOver_(void *a1, const char *a2, ...)
{
  return [a1 setStartedOver:];
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return [a1 setStatus:];
}

id objc_msgSend_setTimeoutIntervalForRequest_(void *a1, const char *a2, ...)
{
  return [a1 setTimeoutIntervalForRequest:];
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return [a1 setTimeoutIntervalForResource:];
}

id objc_msgSend_setUserDict_(void *a1, const char *a2, ...)
{
  return [a1 setUserDict:];
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return [a1 setValue:forHTTPHeaderField:];
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setValue:forKey:];
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 setWithObjects:];
}

id objc_msgSend_setXpcEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 setXpcEndpoint:];
}

id objc_msgSend_setXpcError_(void *a1, const char *a2, ...)
{
  return [a1 setXpcError:];
}

id objc_msgSend_setupDefaults(void *a1, const char *a2, ...)
{
  return _[a1 setupDefaults];
}

id objc_msgSend_setupExitDaemonWatchdog(void *a1, const char *a2, ...)
{
  return _[a1 setupExitDaemonWatchdog];
}

id objc_msgSend_setupNewConnection_(void *a1, const char *a2, ...)
{
  return [a1 setupNewConnection];
}

id objc_msgSend_setupSigtermHandler(void *a1, const char *a2, ...)
{
  return _[a1 setupSigtermHandler];
}

id objc_msgSend_setupTerminationNotificationWithError_(void *a1, const char *a2, ...)
{
  return [a1 setupTerminationNotificationWithError:];
}

id objc_msgSend_shadowChain(void *a1, const char *a2, ...)
{
  return _[a1 shadowChain];
}

id objc_msgSend_shadowMountedOnURLs(void *a1, const char *a2, ...)
{
  return _[a1 shadowMountedOnURLs];
}

id objc_msgSend_shadowStats(void *a1, const char *a2, ...)
{
  return _[a1 shadowStats];
}

id objc_msgSend_shadowURL(void *a1, const char *a2, ...)
{
  return _[a1 shadowURL];
}

id objc_msgSend_shadowURLs(void *a1, const char *a2, ...)
{
  return _[a1 shadowURLs];
}

id objc_msgSend_sharedSession(void *a1, const char *a2, ...)
{
  return _[a1 sharedSession];
}

id objc_msgSend_shouldPerformInplaceSquash(void *a1, const char *a2, ...)
{
  return _[a1 shouldPerformInplaceSquash];
}

id objc_msgSend_shouldValidate(void *a1, const char *a2, ...)
{
  return _[a1 shouldValidate];
}

id objc_msgSend_shouldValidateShadows(void *a1, const char *a2, ...)
{
  return _[a1 shouldValidateShadows];
}

id objc_msgSend_signalCommandCompletedWithXpcError_(void *a1, const char *a2, ...)
{
  return [a1 signalCommandCompletedWithXpcError:];
}

id objc_msgSend_sigtermHandler(void *a1, const char *a2, ...)
{
  return _[a1 sigtermHandler];
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 sleepForTimeInterval:];
}

id objc_msgSend_sparseBundleBandSize(void *a1, const char *a2, ...)
{
  return _[a1 sparseBundleBandSize];
}

id objc_msgSend_startXPClistener(void *a1, const char *a2, ...)
{
  return _[a1 startXPClistener];
}

id objc_msgSend_startedOver(void *a1, const char *a2, ...)
{
  return _[a1 startedOver];
}

id objc_msgSend_statWithError_(void *a1, const char *a2, ...)
{
  return [a1 statWithError:];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_storeInKeychainWithPassphrase_forceSystemKeychain_error_(void *a1, const char *a2, ...)
{
  return [a1 storeInKeychainWithPassphrase:x0 forceSystemKeychain:x1 error:x2];
}

id objc_msgSend_stream(void *a1, const char *a2, ...)
{
  return _[a1 stream];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingString:];
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return [a1 stringByTrimmingCharactersInSet:];
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return [a1 stringWithCString:x0 encoding:x1];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringFromIndex:];
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringToIndex:];
}

id objc_msgSend_supportsPstack(void *a1, const char *a2, ...)
{
  return _[a1 supportsPstack];
}

id objc_msgSend_syncRequests(void *a1, const char *a2, ...)
{
  return _[a1 syncRequests];
}

id objc_msgSend_systemKeychainAccount(void *a1, const char *a2, ...)
{
  return _[a1 systemKeychainAccount];
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _[a1 tag];
}

id objc_msgSend_terminationStatus(void *a1, const char *a2, ...)
{
  return _[a1 terminationStatus];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_toDIShadowNode(void *a1, const char *a2, ...)
{
  return _[a1 toDIShadowNode];
}

id objc_msgSend_toDictionary(void *a1, const char *a2, ...)
{
  return _[a1 toDictionary];
}

id objc_msgSend_tryAttachWithParams_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "tryAttachWithParams:error:");
}

id objc_msgSend_tryCreateAEABackendWithBackendXPC_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "tryCreateAEABackendWithBackendXPC:error:");
}

id objc_msgSend_tryCreateUsingKeychainCertificateWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "tryCreateUsingKeychainCertificateWithError:");
}

id objc_msgSend_tryCreatingCryptoHeader(void *a1, const char *a2, ...)
{
  return _[a1 tryCreatingCryptoHeader];
}

id objc_msgSend_tryResolvePstackChain_(void *a1, const char *a2, ...)
{
  return [a1 tryResolvePstackChain:];
}

id objc_msgSend_tryUnlockUsingKeychainCertificateWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "tryUnlockUsingKeychainCertificateWithError:");
}

id objc_msgSend_tryUnlockUsingSaksWithHasSaksKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "tryUnlockUsingSaksWithHasSaksKey:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_uniqueDevice(void *a1, const char *a2, ...)
{
  return _[a1 uniqueDevice];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unlockWithXpcHandler_error_(void *a1, const char *a2, ...)
{
  return [a1 unlockWithXpcHandler:error:];
}

id objc_msgSend_unmountAll(void *a1, const char *a2, ...)
{
  return _[a1 unmountAll];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unwrapEncryptionKeyWithWrappedKey_encapsulatedKey_privateKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "unwrapEncryptionKeyWithWrappedKey:encapsulatedKey:privateKey:error:");
}

id objc_msgSend_updateBSDNameWithBlockDevice_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateBSDNameWithBlockDevice:error:");
}

id objc_msgSend_updateDiskImageParamsWithFrontend_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateDiskImageParamsWithFrontend:error:");
}

id objc_msgSend_updateStatFSWithError_(void *a1, const char *a2, ...)
{
  return [a1 updateStatFSWithError:];
}

id objc_msgSend_updateSystemKeychainAttrWithDict_isStoring_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateSystemKeychainAttrWithDict:isStoring:error:");
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _[a1 url];
}

id objc_msgSend_urlRequest(void *a1, const char *a2, ...)
{
  return _[a1 urlRequest];
}

id objc_msgSend_urlSession(void *a1, const char *a2, ...)
{
  return _[a1 urlSession];
}

id objc_msgSend_useFormatMappingInfo(void *a1, const char *a2, ...)
{
  return _[a1 useFormatMappingInfo];
}

id objc_msgSend_userDict(void *a1, const char *a2, ...)
{
  return _[a1 userDict];
}

id objc_msgSend_validateAndPopObjectForKey_className_isOptional_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "validateAndPopObjectForKey:className:isOptional:error:");
}

id objc_msgSend_validateConnection(void *a1, const char *a2, ...)
{
  return _[a1 validateConnection];
}

id objc_msgSend_validateDeserializationWithError_(void *a1, const char *a2, ...)
{
  return [a1 validateDeserializationWithError:];
}

id objc_msgSend_validateDeserializationWithParams_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "validateDeserializationWithParams:reply:");
}

id objc_msgSend_validateFileWithURL_error_(void *a1, const char *a2, ...)
{
  return [a1 validateFileWithURL:error:];
}

id objc_msgSend_validateInstance(void *a1, const char *a2, ...)
{
  return _[a1 validateInstance];
}

id objc_msgSend_validateObjWithKey_className_isOptional_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "validateObjWithKey:className:isOptional:error:")];
}

id objc_msgSend_validateSquashFormats(void *a1, const char *a2, ...)
{
  return _[a1 validateSquashFormats];
}

id objc_msgSend_validateSupportedFormatWithBackendXPC_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "validateSupportedFormatWithBackendXPC:error:")
}

id objc_msgSend_validateWithDictionary_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "validateWithDictionary:error:")];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return [a1 valueForEntitlement:];
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return [a1 valueForKey:];
}

id objc_msgSend_verifyNodes_error_(void *a1, const char *a2, ...)
{
  return [a1 verifyNodes:error:];
}

id objc_msgSend_verifyWithParams_reply_(void *a1, const char *a2, ...)
{
  return [a1 verifyWithParams:reply:];
}

id objc_msgSend_waitForDAIdleWithError_(void *a1, const char *a2, ...)
{
  return [a1 waitForDAIdleWithError:];
}

id objc_msgSend_waitForDeviceWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "waitForDeviceWithError:");
}

id objc_msgSend_waitForQuietWithService_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "waitForQuietWithService:error:");
}

id objc_msgSend_waitUntilExit(void *a1, const char *a2, ...)
{
  return _[a1 waitUntilExit];
}

id objc_msgSend_weakDaemon(void *a1, const char *a2, ...)
{
  return _[a1 weakDaemon];
}

id objc_msgSend_writeHexKeyToBuffer_hexKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeHexKeyToBuffer:hexKey:error:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return [a1 writeToURL:x0 options:x1 error:x2];
}

id objc_msgSend_xpcEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 xpcEndpoint];
}

id objc_msgSend_xpcError(void *a1, const char *a2, ...)
{
  return _[a1 xpcError];
}

id objc_msgSend_xpcListenerEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 xpcListenerEndpoint];
}