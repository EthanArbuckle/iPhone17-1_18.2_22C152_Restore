uint64_t sub_1000034B8(uint64_t a1, io_connect_t a2, uint32_t a3)
{
  uint64_t v6;
  kern_return_t v7;
  kern_return_t inserted;
  unsigned int v10;
  const char *v11;
  void *exception;
  const std::error_category *v13;

  v6 = sub_1000035D8(a1);
  *(void *)v6 = off_1001914E0;
  v7 = IOConnectSetNotificationPort(a2, a3, *(_DWORD *)(v6 + 8), 0);
  if (v7)
  {
    v10 = v7;
    v11 = "Can't register notification port";
    goto LABEL_6;
  }
  inserted = mach_port_insert_right(mach_task_self_, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 8), 0x14u);
  if (inserted)
  {
    v10 = inserted;
    v11 = "Can't get send rights";
LABEL_6:
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001B6CA0;
    v13 = std::generic_category();
    exception[1] = v10;
    exception[2] = v13;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = v11;
  }
  return a1;
}

void sub_1000035C4(_Unwind_Exception *a1)
{
  sub_1000036DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000035D8(uint64_t a1)
{
  kern_return_t v2;
  unsigned int v4;
  void *exception;
  void *v6;

  *(void *)a1 = &off_100191528;
  *(_DWORD *)(a1 + 8) = 0;
  v2 = mach_port_allocate(mach_task_self_, 1u, (mach_port_name_t *)(a1 + 8));
  if (v2)
  {
    v4 = v2;
    exception = __cxa_allocate_exception(0x40uLL);
    v6 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Can't allocate mach port", v4);
  }
  return a1;
}

uint64_t sub_100003670(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_1001B6CA0;
  v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  return a1;
}

uint64_t sub_1000036DC(uint64_t a1)
{
  *(void *)a1 = &off_100191528;
  mach_port_name_t v2 = *(_DWORD *)(a1 + 8);
  if (v2) {
    mach_port_mod_refs(mach_task_self_, v2, 1u, -1);
  }
  return a1;
}

void sub_100003744(void *a1)
{
}

uint64_t *sub_100003758(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  return a1;
}

void sub_1000037B4(uint64_t a1)
{
  sub_1000041C8(a1);

  operator delete();
}

void sub_1000037F0(uint64_t a1)
{
  sub_1000036DC(a1);

  operator delete();
}

void sub_100003828(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1001B6CA0;
  if (LOBYTE(this[6].__vftable) && SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }

  std::exception::~exception(this);
}

uint64_t sub_100003890@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100003930(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10000397C();
  }
  v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t sub_100003930(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void sub_10000397C()
{
}

void sub_100003994(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000039F0(exception, a1);
}

void sub_1000039DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1000039F0(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100003A24(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;

  sub_100003A90(a1);
}

void sub_100003A90(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void *sub_100003BA4(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10000397C();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_100003C58(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  size_t v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_100003DC8(_Unwind_Exception *a1)
{
}

void *sub_100003DF0(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_100003F94(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_100003F2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x100003F0CLL);
}

void sub_100003F80(_Unwind_Exception *a1)
{
}

uint64_t sub_100003F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_10000411C(__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_100004100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10000411C(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_10000397C();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t sub_1000041C8(uint64_t a1)
{
  *(void *)a1 = off_1001914E0;
  mach_port_name_t v2 = *(_DWORD *)(a1 + 8);
  if (v2) {
    mach_port_deallocate(mach_task_self_, v2);
  }

  return sub_1000036DC(a1);
}

void sub_100004344(id a1)
{
  int v1 = *__error();
  if (sub_1000D29A0())
  {
    mach_port_name_t v2 = sub_1000D2920();
    os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 68157954;
    int v6 = 51;
    __int16 v7 = 2080;
    size_t v8 = "-[DIIOCacheDelete setupSigtermHandler]_block_invoke";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    size_t v4 = sub_1000D2920();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v6 = 51;
      __int16 v7 = 2080;
      size_t v8 = "-[DIIOCacheDelete setupSigtermHandler]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%.*s: Terminating cache delete instance due to SIGTERM", buf, 0x12u);
    }
  }
  *__error() = v1;
  exit(0);
}

void sub_10000460C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100004628(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_sync_enter(v3);
  size_t v4 = [*(id *)(a1 + 32) exitTimer];

  if (v4)
  {
    int v5 = *__error();
    if (sub_1000D29A0())
    {
      int v6 = sub_1000D2920();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      *(_DWORD *)buf = 68157954;
      int v11 = 47;
      __int16 v12 = 2080;
      char v13 = "-[DIIOCacheDelete setupExitTimer:]_block_invoke";
      __int16 v7 = (char *)_os_log_send_and_compose_impl();

      if (v7)
      {
        fprintf(__stderrp, "%s\n", v7);
        free(v7);
      }
    }
    else
    {
      size_t v8 = sub_1000D2920();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        int v11 = 47;
        __int16 v12 = 2080;
        char v13 = "-[DIIOCacheDelete setupExitTimer:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%.*s: Shutting down cache delete instance", buf, 0x12u);
      }
    }
    *__error() = v5;
    exit(0);
  }
  objc_sync_exit(v3);
}

void sub_100004820(_Unwind_Exception *exception_object)
{
}

BOOL sub_1000054D0(id a1, NSURL *a2, NSError *a3)
{
  size_t v4 = a2;
  int v5 = a3;
  int v6 = *__error();
  if (sub_1000D29A0())
  {
    __int16 v7 = sub_1000D2920();
    os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 68158466;
    int v12 = 50;
    __int16 v13 = 2080;
    uint64_t v14 = "-[DIIOCacheDelete eraseOldCacheFiles]_block_invoke";
    __int16 v15 = 2114;
    v16 = v4;
    __int16 v17 = 2114;
    char v18 = v5;
    size_t v8 = (char *)_os_log_send_and_compose_impl();

    if (v8)
    {
      fprintf(__stderrp, "%s\n", v8);
      free(v8);
    }
  }
  else
  {
    id v9 = sub_1000D2920();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158466;
      int v12 = 50;
      __int16 v13 = 2080;
      uint64_t v14 = "-[DIIOCacheDelete eraseOldCacheFiles]_block_invoke";
      __int16 v15 = 2114;
      v16 = v4;
      __int16 v17 = 2114;
      char v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%.*s: Failed looking up %{public}@: %{public}@", buf, 0x26u);
    }
  }
  *__error() = v6;

  return 1;
}

void sub_100005DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100005E30(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_sync_enter(v5);
  id v6 = a3;
  uint64_t v7 = [v5 onPeriodicWithInfo:v6 urgency:a2];

  objc_sync_exit(v5);
  return v7;
}

void sub_100005EA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000060EC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [[DIIOCacheDelete alloc] initWithDebugServiceName:v1];

  [(DIBaseServiceDelegate *)v2 enterSandbox];
  if ([(DIIOCacheDelete *)v2 registerPeriodicCallback])
  {
    [(DIBaseServiceDelegate *)v2 startXPClistener];
    id v3 = +[NSRunLoop currentRunLoop];
    [v3 run];
  }
  return 78;
}

uint64_t start()
{
  int v0 = *__error();
  if (sub_1000D29A0())
  {
    id v1 = sub_1000D2920();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    uint64_t v2 = +[NSBundle mainBundle];
    [v2 executablePath];
    *(_DWORD *)buf = 68158210;
    int v41 = 28;
    __int16 v42 = 2080;
    v43 = "int main(int, const char **)";
    *(void *)v45 = __int16 v44 = 2114;
    id v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    size_t v4 = sub_1000D2920();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = +[NSBundle mainBundle];
      id v6 = [v5 executablePath];
      *(_DWORD *)buf = 68158210;
      int v41 = 28;
      __int16 v42 = 2080;
      v43 = "int main(int, const char **)";
      __int16 v44 = 2114;
      *(void *)v45 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%.*s: IO daemon path: %{public}@", buf, 0x1Cu);
    }
  }
  *__error() = v0;
  uint64_t v7 = +[NSProcessInfo processInfo];
  size_t v8 = [v7 arguments];

  id v9 = [v8 count];
  if ((unint64_t)v9 >= 2)
  {
    if ((unint64_t)[v8 count] > 2
      || ([v8 objectAtIndexedSubscript:1],
          unint64_t v10 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v11 = [v10 isEqualToString:@"--ram"],
          v10,
          (v11 & 1) == 0))
    {
      int v19 = *__error();
      if (sub_1000D29A0())
      {
LABEL_15:
        v20 = sub_1000D2920();
        os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 68157954;
        int v41 = 28;
        __int16 v42 = 2080;
        v43 = "int main(int, const char **)";
        v21 = (char *)_os_log_send_and_compose_impl();

        if (v21)
        {
          fprintf(__stderrp, "%s\n", v21);
          free(v21);
        }
        goto LABEL_33;
      }
      v33 = sub_1000D2920();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v41 = 28;
        __int16 v42 = 2080;
        v43 = "int main(int, const char **)";
        v34 = "%.*s: Invalid arguments specified";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, v34, buf, 0x12u);
      }
LABEL_32:

LABEL_33:
      *__error() = v19;
      uint64_t v23 = 1;
      goto LABEL_48;
    }
  }
  if (!getenv("LaunchInstanceID"))
  {
    if (getuid())
    {
      if ((unint64_t)v9 <= 1) {
        v22 = @"com.apple.diskimagesiod";
      }
      else {
        v22 = @"com.apple.diskimagesiod.ram";
      }
      sub_1000060EC(v22);
      uint64_t v23 = 78;
      goto LABEL_48;
    }
    int v19 = *__error();
    if (sub_1000D29A0()) {
      goto LABEL_15;
    }
    v33 = sub_1000D2920();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v41 = 28;
      __int16 v42 = 2080;
      v43 = "int main(int, const char **)";
      v34 = "%.*s: Root daemon must be launched with an instance";
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  int v12 = getiopolicy_np(0, 0);
  int v13 = getiopolicy_np(0, 1);
  int v14 = *__error();
  if (sub_1000D29A0())
  {
    __int16 v15 = sub_1000D2920();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    uid_t v16 = geteuid();
    pid_t v17 = getpid();
    *(_DWORD *)buf = 68159234;
    int v41 = 28;
    __int16 v42 = 2080;
    v43 = "int main(int, const char **)";
    __int16 v44 = 1024;
    *(_DWORD *)v45 = v16;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = v17;
    __int16 v46 = 1024;
    BOOL v47 = (unint64_t)v9 > 1;
    __int16 v48 = 1024;
    int v49 = v12;
    __int16 v50 = 1024;
    int v51 = v13;
    char v18 = (char *)_os_log_send_and_compose_impl();

    if (v18)
    {
      fprintf(__stderrp, "%s\n", v18);
      free(v18);
    }
  }
  else
  {
    v24 = sub_1000D2920();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uid_t v25 = geteuid();
      pid_t v26 = getpid();
      *(_DWORD *)buf = 68159234;
      int v41 = 28;
      __int16 v42 = 2080;
      v43 = "int main(int, const char **)";
      __int16 v44 = 1024;
      *(_DWORD *)v45 = v25;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = v26;
      __int16 v46 = 1024;
      BOOL v47 = (unint64_t)v9 > 1;
      __int16 v48 = 1024;
      int v49 = v12;
      __int16 v50 = 1024;
      int v51 = v13;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%.*s: IO daemon euid: %d, pid: %d, isRAM: %d, IOpolicy process=%d thread=%d", buf, 0x30u);
    }
  }
  *__error() = v14;
  v27 = [[DIIODaemonDelegate alloc] initWithIsRAM:(unint64_t)v9 > 1];
  v28 = v27;
  if (v27)
  {
    [(DIBaseServiceDelegate *)v27 enterSandbox];
    [(DIBaseServiceDelegate *)v28 startXPClistener];
    v29 = +[NSRunLoop currentRunLoop];
    [v29 run];

    int v30 = *__error();
    if (sub_1000D29A0())
    {
      v31 = sub_1000D2920();
      os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v41 = 28;
      __int16 v42 = 2080;
      v43 = "int main(int, const char **)";
      v32 = (char *)_os_log_send_and_compose_impl();

      if (v32)
      {
        fprintf(__stderrp, "%s\n", v32);
        free(v32);
      }
    }
    else
    {
      v37 = sub_1000D2920();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v41 = 28;
        __int16 v42 = 2080;
        v43 = "int main(int, const char **)";
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%.*s: Run loop aborted", buf, 0x12u);
      }
    }
    uint64_t v23 = 0;
  }
  else
  {
    int v30 = *__error();
    if (sub_1000D29A0())
    {
      v35 = sub_1000D2920();
      os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v41 = 28;
      __int16 v42 = 2080;
      v43 = "int main(int, const char **)";
      v36 = (char *)_os_log_send_and_compose_impl();

      if (v36)
      {
        fprintf(__stderrp, "%s\n", v36);
        free(v36);
      }
    }
    else
    {
      v38 = sub_1000D2920();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v41 = 28;
        __int16 v42 = 2080;
        v43 = "int main(int, const char **)";
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%.*s: IO daemon initialization failed. Quitting.", buf, 0x12u);
      }
    }
    uint64_t v23 = 1;
  }
  *__error() = v30;

LABEL_48:
  return v23;
}

void sub_100007518(uint64_t a1, uint64_t a2)
{
  id v9 = [[DIIOIterator alloc] initWithIOIterator:a2 retain:1];
  id v3 = [[DIIOObject alloc] initWithIteratorNext:v9];
  if (v3)
  {
    size_t v4 = v3;
    id v5 = 0;
    do
    {
      id v6 = [(DIIOObject *)v4 newIteratorWithOptions:3 error:0];
      if (v6)
      {
        while (1)
        {
          uint64_t v7 = v5;
          id v5 = [[DIIOObject alloc] initWithIteratorNext:v6];

          if (!v5 || IOObjectConformsTo([(DIIOObject *)v5 ioObj], "IOMedia")) {
            break;
          }
          if (IOObjectIsEqualTo([(DIIOObject *)v5 ioObj], *(_DWORD *)(a1 + 8)))
          {
            **(unsigned char **)a1 = 1;

            goto LABEL_9;
          }
        }
      }

      size_t v8 = [[DIIOObject alloc] initWithIteratorNext:v9];
      size_t v4 = v8;
    }
    while (v8);
LABEL_9:
  }
}

void sub_1000081A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,id a26)
{
  objc_sync_exit(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a26);
  _Unwind_Resume(a1);
}

void sub_10000821C(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000D29A0())
  {
    id v3 = sub_1000D2920();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    int v10 = 54;
    __int16 v11 = 2080;
    int v12 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
    size_t v4 = (char *)_os_log_send_and_compose_impl();

    if (v4)
    {
      fprintf(__stderrp, "%s\n", v4);
      free(v4);
    }
  }
  else
  {
    id v5 = sub_1000D2920();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v10 = 54;
      __int16 v11 = 2080;
      int v12 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an invalidation handler for an attached client", buf, 0x12u);
    }
  }
  *__error() = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = [WeakRetained weakDaemon];
  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  [v7 onClientInvalidateWithConnection:v8];
}

void sub_1000083EC(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000D29A0())
  {
    id v3 = sub_1000D2920();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    int v10 = 54;
    __int16 v11 = 2080;
    int v12 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
    size_t v4 = (char *)_os_log_send_and_compose_impl();

    if (v4)
    {
      fprintf(__stderrp, "%s\n", v4);
      free(v4);
    }
  }
  else
  {
    id v5 = sub_1000D2920();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v10 = 54;
      __int16 v11 = 2080;
      int v12 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an interruption handler for an attached client", buf, 0x12u);
    }
  }
  *__error() = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = [WeakRetained weakDaemon];
  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  [v7 onClientInvalidateWithConnection:v8];
}

void sub_1000087CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100008854(id a1)
{
  int v1 = *__error();
  if (sub_1000D29A0())
  {
    int v2 = sub_1000D2920();
    os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    int v6 = 58;
    __int16 v7 = 2080;
    *(_DWORD *)buf = 68158210;
    id v8 = "-[DIIODaemonDelegate setupExitDaemonWatchdog]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 8;
    id v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    size_t v4 = sub_1000D2920();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158210;
      int v6 = 58;
      __int16 v7 = 2080;
      id v8 = "-[DIIODaemonDelegate setupExitDaemonWatchdog]_block_invoke";
      __int16 v9 = 1024;
      int v10 = 8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%.*s: Exit daemon timeout (%d sec) expired", buf, 0x18u);
    }
  }
  *__error() = v1;
  exit(0);
}

id sub_100008A9C(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000D29A0())
  {
    id v3 = sub_1000D2920();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    int v8 = 54;
    __int16 v9 = 2080;
    int v10 = "-[DIIODaemonDelegate setupSigtermHandler]_block_invoke";
    size_t v4 = (char *)_os_log_send_and_compose_impl();

    if (v4)
    {
      fprintf(__stderrp, "%s\n", v4);
      free(v4);
    }
  }
  else
  {
    id v5 = sub_1000D2920();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v8 = 54;
      __int16 v9 = 2080;
      int v10 = "-[DIIODaemonDelegate setupSigtermHandler]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%.*s: Terminating due to SIGTERM", buf, 0x12u);
    }
  }
  *__error() = v2;
  return [*(id *)(a1 + 32) exitWithUnmount];
}

void sub_100008E84(void *a1, uint64_t a2)
{
  id v3 = a1;
  objc_sync_enter(v3);
  size_t v4 = [[DIIOIterator alloc] initWithIOIterator:a2 retain:1];
  id v5 = 0;
  while (1)
  {
    int v6 = [[DIIOObject alloc] initWithIteratorNext:v4];

    if (!v6) {
      break;
    }
    id v7 = [(DIIOObject *)v6 registryEntryIDWithError:0];
    int v8 = [v3 deviceHandle];
    LODWORD(v7) = v7 == [v8 regEntryID];

    id v5 = v6;
    if (v7)
    {
      int v9 = *__error();
      if (sub_1000D29A0())
      {
        int v10 = sub_1000D2920();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        *(_DWORD *)buf = 68157954;
        int v14 = 47;
        __int16 v15 = 2080;
        uid_t v16 = "void terminationCallback(void *, io_iterator_t)";
        __int16 v11 = (char *)_os_log_send_and_compose_impl();

        if (v11)
        {
          fprintf(__stderrp, "%s\n", v11);
          free(v11);
        }
      }
      else
      {
        int v12 = sub_1000D2920();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68157954;
          int v14 = 47;
          __int16 v15 = 2080;
          uid_t v16 = "void terminationCallback(void *, io_iterator_t)";
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%.*s: Reached termination callback, stopping the daemon.", buf, 0x12u);
        }
      }
      *__error() = v9;

      id v5 = 0;
      [v3 exitDaemon];
    }
  }

  objc_sync_exit(v3);
}

void sub_1000090E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_10000971C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_10000A1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10000A7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

intptr_t sub_10000A7E8(uint64_t a1)
{
  [*(id *)(a1 + 32) unmountAll];
  int v2 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v2);
}

#error "10000AF5C: call analysis failed (funcsize=111)"

void sub_10000B704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,uint8_t buf,int a22,__int16 a23,uint64_t a24,__int16 a25,uint64_t a26,__int16 a27,int a28)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10000BA98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained runIOmanager];
}

void sub_10000BAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000BB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000BEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10000BF5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    objc_sync_enter(v4);
    id v5 = [v4 deviceHandle];

    if (v5)
    {
      int v6 = +[DIError errorWithEnumValue:155 verboseInfo:@"A second controller XPC service attempted to create a new device"];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      objc_sync_exit(v4);
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 32);
      id v12 = 0;
      unsigned int v8 = [v4 tryAttachWithParams:v7 error:&v12];
      id v9 = v12;
      uint64_t v10 = *(void *)(a1 + 40);
      if (v8)
      {
        __int16 v11 = [v4 deviceHandle];
        (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v11, 0);
      }
      else
      {
        (*(void (**)(void, void, id))(v10 + 16))(*(void *)(a1 + 40), 0, v9);
        [v4 exitDaemon];
      }
      objc_sync_exit(v4);
    }
  }
}

void sub_10000C0BC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v8 = objc_begin_catch(a1);
    id v9 = [v8 reason];
    +[DIError errorWithEnumValue:150 verboseInfo:v9];
    objc_claimAutoreleasedReturnValue();

    (*(void (**)(void))(*(void *)(v4 + 40) + 16))();
    [v2 exitDaemon];

    objc_end_catch();
    JUMPOUT(0x10000C08CLL);
  }
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_10000C974(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_10000D244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,id a25)
{
  objc_sync_exit(v27);

  _Unwind_Resume(a1);
}

void sub_10000D31C(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000D29A0())
  {
    id v3 = sub_1000D2920();
    os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 68157954;
    int v9 = 54;
    __int16 v10 = 2080;
    __int16 v11 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();

    if (v4)
    {
      fprintf(__stderrp, "%s\n", v4);
      free(v4);
    }
  }
  else
  {
    id v5 = sub_1000D2920();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v9 = 54;
      __int16 v10 = 2080;
      __int16 v11 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%.*s: Reached an interruption handler for an attached controller service", buf, 0x12u);
    }
  }
  *__error() = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained onClientInvalidateWithConnection:v7];
}

void sub_10000D4DC(_Unwind_Exception *a1)
{
  id v3 = v1;

  _Unwind_Resume(a1);
}

void sub_10000D4FC(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000D29A0())
  {
    id v3 = sub_1000D2920();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    int v9 = 54;
    __int16 v10 = 2080;
    __int16 v11 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();

    if (v4)
    {
      fprintf(__stderrp, "%s\n", v4);
      free(v4);
    }
  }
  else
  {
    id v5 = sub_1000D2920();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v9 = 54;
      __int16 v10 = 2080;
      __int16 v11 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an invalidation handler for an attached controller service", buf, 0x12u);
    }
  }
  *__error() = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained onClientInvalidateWithConnection:v7];
}

void sub_10000D6BC(_Unwind_Exception *a1)
{
  id v3 = v1;

  _Unwind_Resume(a1);
}

void sub_10000D890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DACC()
{
}

void sub_10000DAD4()
{
}

uint64_t sub_10000DCE0(const void **a1)
{
  int v1 = *a1;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t result = sub_100010B94(v2[2], v3, v2[3]);
    if (v4[3] != result)
    {
      {
        sub_10000DE80();
      }
      __cxa_bad_cast();
    }
  }
  else
  {
    if (result) {
      sub_10000DE80();
    }
  }
  return result;
}

void sub_10000DE80()
{
}

void sub_10000E01C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  sub_100010978((uint64_t)va2);
  sub_100010978((uint64_t)va);
  sub_100010978((uint64_t)va1);
  sub_1000109B8(v2 - 112);
  _Unwind_Resume(a1);
}

void sub_10000E068(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  byte_1001C4568 = 1;
  uint64_t v6 = [v5 diskImageParamsXPC];
  uint64_t v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v6;

  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = [v5 onDiskCache];
  uint64_t v10 = [v5 shadowChain];
  id v11 = [v10 shouldValidate];
  if (v8) {
    [v8 createDiskImageWithCache:v9 shadowValidation:v11];
  }
  else {
    uint64_t v16 = 0;
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 40))(v16))
  {
    uint64_t v12 = [v5 inputStatFS];
    if (v12)
    {
      unint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
      uint64_t v14 = [v5 inputStatFS];
      LODWORD(v13) = v13 > (unint64_t)[v14 blockSize];

      if (v13)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_100003C58((uint64_t)&v17);
        sub_100003DF0(&v17, (uint64_t)"The underlying file system doesn't support writable images with ", 64);
        (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
        std::ostream::operator<<();
        sub_100003DF0(&v17, (uint64_t)"-bytes block size", 17);
        sub_100010C3C((uint64_t)exception, (uint64_t)&v17, 0x13u);
      }
    }
  }
  sub_10000DCE0((const void **)&v16);
  sub_10000E72C((io_service_t *)a1);
  sub_10000E92C(a1, v5, v16);
}

void sub_10000E4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000E628((uint64_t)va);
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  sub_1000176CC(v8, 0);
  sub_100017750((void *)(v5 + 80));
  sub_1000177D4((void ***)va);

  if (*(unsigned char *)(v5 + 32)) {
    sub_1000037AC(v7);
  }
  sub_100017894(v6, 0);
  uint64_t v11 = *v9;
  uint64_t *v9 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10000E628(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_10000E72C(io_service_t *a1)
{
  uint64_t result = IOServiceOpen(*a1, mach_task_self_, 0, a1 + 1);
  if (result)
  {
    int v2 = result;
    int v3 = *__error();
    if (sub_1000D29A0())
    {
      uint64_t v4 = sub_1000D2920();
      os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68158210;
      int v10 = 31;
      __int16 v11 = 2080;
      uint64_t v12 = "void DIIOManager::setupDriver()";
      __int16 v13 = 1024;
      int v14 = v2;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();

      if (v5)
      {
        fprintf(__stderrp, "%s\n", v5);
        free(v5);
      }
    }
    else
    {
      uint64_t v6 = sub_1000D2920();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68158210;
        int v10 = 31;
        __int16 v11 = 2080;
        uint64_t v12 = "void DIIOManager::setupDriver()";
        __int16 v13 = 1024;
        int v14 = v2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%.*s: IOServiceOpen returned %d", buf, 0x18u);
      }
    }
    *__error() = v3;
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v8 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"IOServiceOpen failed", 0x9Bu);
  }
  return result;
}

void sub_10000E92C(uint64_t a1, void *a2, uint64_t a3)
{
  a2;
  sub_100105648(a3);
  int v5 = sub_1001056BC(a3);
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a3 + 72))(inputStruct, a3);
  unsigned __int16 v6 = *(_WORD *)&inputStruct[8];
  uint64_t v7 = sub_10003C118();
  unint64_t v8 = (unint64_t)v7[3];
  unsigned int v9 = sub_10003C028();
  if (!v9)
  {
    int v10 = *((_DWORD *)v7 + 2);
    if (v10 == 1)
    {
      unsigned int v9 = (*v7)();
    }
    else
    {
      if (v10) {
        sub_100017DCC();
      }
      unsigned int v9 = *(_DWORD *)v7;
    }
  }
  uint64_t v11 = v8 / (v5 + v5 * v6);
  if (v9 < v11) {
    LODWORD(v11) = v9;
  }
  if (v11 >= 0x30) {
    LODWORD(v11) = 48;
  }
  if (v11 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v11;
  }
  uint32_t outputCnt = 1;
  uint64_t input = v11;
  uint64_t output = 0;
  unsigned int v12 = IOConnectCallMethod(*(_DWORD *)(a1 + 4), 2u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
  if (!v12)
  {
    sub_1000103F4(a1, (unsigned __int16)output, (uint64_t *)inputStruct);
    sub_100017E1C((void **)(a1 + 48));
    *(_OWORD *)(a1 + 48) = *(_OWORD *)inputStruct;
    *(void *)(a1 + 64) = *(void *)&inputStruct[16];
    memset(inputStruct, 0, sizeof(inputStruct));
    *(void *)buf = inputStruct;
    sub_1000177D4((void ***)buf);
    operator new();
  }
  int v13 = *__error();
  if (sub_1000D29A0())
  {
    *(void *)buf = 0;
    int v14 = sub_1000D2920();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    *(void *)inputStruct = 0x4C04100302;
    *(_WORD *)&inputStruct[8] = 2080;
    *(void *)&inputStruct[10] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
    *(_WORD *)&inputStruct[18] = 1024;
    *(_DWORD *)&inputStruct[20] = v12;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    if (v15)
    {
      fprintf(__stderrp, "%s\n", v15);
      free(v15);
    }
  }
  else
  {
    uint64_t v16 = sub_1000D2920();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(void *)inputStruct = 0x4C04100302;
      *(_WORD *)&inputStruct[8] = 2080;
      *(void *)&inputStruct[10] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
      *(_WORD *)&inputStruct[18] = 1024;
      *(_DWORD *)&inputStruct[20] = v12;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%.*s: IOAllocatePortsArrayCallMethod returned %d", inputStruct, 0x18u);
    }
  }
  *__error() = v13;
  exception = __cxa_allocate_exception(0x40uLL);
  void *exception = &off_1001B6CA0;
  char v18 = std::generic_category();
  exception[1] = v12;
  exception[2] = v18;
  *((unsigned char *)exception + 24) = 0;
  *((unsigned char *)exception + 48) = 0;
  exception[7] = "Can't allocate ports array in driver";
}

void sub_10000F850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10000E628((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_10000F860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_10000E628((uint64_t)va);
  __cxa_free_exception(v10);

  JUMPOUT(0x10000FB20);
}

void sub_10000F8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  JUMPOUT(0x10000FB20);
}

void sub_10000F8D0()
{
}

void sub_10000F908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  JUMPOUT(0x10000FB20);
}

void sub_10000FACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  JUMPOUT(0x10000FB20);
}

void sub_10000FAE4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003744(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10000FB28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v29 = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  uint64_t v4 = [*(id *)(a1 + 40) backendXPC];
  int v5 = v4;
  if (v4) {
    [v4 backend];
  }
  else {
    long long v26 = 0uLL;
  }
  sub_100141990((uint64_t)&v26, &lpsrc);
  if (*((void *)&v26 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v26 + 1));
  }

  if (lpsrc
  {
    *(void *)&long long v26 = v6;
    *((void *)&v26 + 1) = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100010004((uint64_t *)&v29, &v26);
  }
  else
  {
    long long v26 = 0uLL;
  }
  if (*((void *)&v26 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v26 + 1));
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v7 = [*(id *)(a1 + 40) shadowChain];
  unint64_t v8 = [v7 nodes];

  id v9 = [v8 countByEnumeratingWithState:&v22 objects:v32 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v23;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(v8);
        }
        unsigned int v12 = [*(id *)(*((void *)&v22 + 1) + 8 * i) fileBackend];
        int v13 = v12;
        if (v12) {
          [v12 backend];
        }
        else {
          long long v21 = 0uLL;
        }
        sub_100141990((uint64_t)&v21, &v26);
        if (*((void *)&v21 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v21 + 1));
        }

        if ((void)v26
        {
          *(void *)&long long v21 = v14;
          *((void *)&v21 + 1) = *((void *)&v26 + 1);
          if (*((void *)&v26 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          sub_100010004((uint64_t *)&v29, &v21);
        }
        else
        {
          long long v21 = 0uLL;
        }
        if (*((void *)&v21 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v21 + 1));
        }
        if (*((void *)&v26 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v26 + 1));
        }
      }
      id v9 = [v8 countByEnumeratingWithState:&v22 objects:v32 count:16];
    }
    while (v9);
  }

  long long v18 = 0uLL;
  uint64_t v19 = 0;
  sub_100017B54(&v18, v29, v30, (v30 - v29) >> 4);
  uint64_t v15 = a1 + 112;
  uint64_t v20 = v15;
  *(void *)(a2 + 24) = 0;
  uint64_t v16 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v16 = off_1001933A8;
  *(_OWORD *)(v16 + 8) = v18;
  uint64_t v17 = v19;
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  *((void *)v16 + 3) = v17;
  *((void *)v16 + 4) = v15;
  *(void *)(a2 + 24) = v16;
  *(void *)&long long v26 = &v18;
  sub_100017D2C((void ***)&v26);
  if (v28) {
    sub_100010A48(v28);
  }
  lpsrc = &v29;
  sub_100017D2C((void ***)&lpsrc);
}

void sub_10000FE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void **a26,std::__shared_weak_count *a27,char a28)
{
  if (a25) {
    sub_100010A48(a25);
  }
  if (a27) {
    sub_100010A48(a27);
  }
  a26 = (void **)&a28;
  sub_100017D2C(&a26);
  _Unwind_Resume(a1);
}

void sub_10000FF68()
{
}

void sub_10000FFDC()
{
}

void **sub_100010004(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_10001796C();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)sub_100017984((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_1000178F4(a1, v18);
    id v9 = (void *)a1[1];
    uint64_t result = sub_100017ACC(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    id v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_10001010C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100017ACC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100010120(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  int v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;

  int v4 = *__error();
  if (sub_1000D29A0())
  {
    unint64_t v5 = sub_1000D2920();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)&uint8_t buf[4] = 27;
    __int16 v11 = 2080;
    uint64_t v12 = "DIIOManager::~DIIOManager()";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }
  else
  {
    uint64_t v7 = sub_1000D2920();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 27;
      __int16 v11 = 2080;
      uint64_t v12 = "DIIOManager::~DIIOManager()";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%.*s: Closing IO user client", buf, 0x12u);
    }
  }
  *__error() = v4;
  IOServiceClose(*(_DWORD *)(a1 + 4));
  if (*(_DWORD *)a1)
  {
    IOObjectRelease(*(_DWORD *)a1);
    *(_DWORD *)a1 = 0;
  }
  sub_1000176CC((uint64_t *)(a1 + 72), 0);
  sub_100017750((void *)(a1 + 80));
  *(void *)buf = a1 + 48;
  sub_1000177D4((void ***)buf);

  if (*(unsigned char *)(a1 + 32)) {
    sub_1000037AC((uint64_t *)(a1 + 24));
  }
  sub_100017894((void ***)(a1 + 16), 0);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  return a1;
}

void sub_100010388(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100003744(a1);
}

uint64_t *sub_100010398(uint64_t *result)
{
  if (*((unsigned char *)result + 32))
  {
    int v1 = result;
    uint64_t result = sub_1000037AC(result + 3);
    *((unsigned char *)v1 + 32) = 0;
  }
  return result;
}

uint64_t sub_1000103CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t sub_1000103F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = sub_100010544(a3, a2);
  if (a2)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100003740((uint64_t)&v10, *(_DWORD *)(a1 + 4), v7);
      unint64_t v8 = a3[1];
      if (v8 >= a3[2])
      {
        uint64_t v9 = sub_100018324(a3, (uint64_t)&v10);
      }
      else
      {
        sub_1000035D8(a3[1]);
        *(void *)unint64_t v8 = off_1001914E0;
        *(_DWORD *)(v8 + 8) = v11;
        int v11 = 0;
        uint64_t v9 = v8 + 16;
        a3[1] = v8 + 16;
      }
      a3[1] = v9;
      uint64_t result = sub_1000041C8((uint64_t)&v10);
      ++v7;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_1000104C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t *sub_100010500(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  sub_1000176CC(a1, v4);
  sub_10001807C(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t sub_100010544(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_10001796C();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100017984(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_100018188(a1, v7);
    return sub_1000182B8((uint64_t)v7);
  }
  return result;
}

void sub_1000105C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000182B8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000105D8(uint64_t a1, void *a2, uint64_t *a3)
{
  kern_return_t v5;
  int v6;
  NSObject *v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  uint32_t outputCnt;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t output[2];

  uint32_t outputCnt = 2;
  uint64_t v5 = IOConnectCallScalarMethod(*(_DWORD *)(a1 + 4), 3u, 0, 0, output, &outputCnt);
  if (v5)
  {
    uint64_t v6 = *__error();
    if (sub_1000D29A0())
    {
      uint64_t v7 = sub_1000D2920();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      *(_DWORD *)buf = 68157954;
      int v14 = 56;
      uint64_t v15 = 2080;
      uint64_t v16 = "BOOL DIIOManager::fetchCacheStat(uint64_t &, uint64_t &)";
      unint64_t v8 = (char *)_os_log_send_and_compose_impl();

      if (v8)
      {
        fprintf(__stderrp, "%s\n", v8);
        free(v8);
      }
    }
    else
    {
      uint64_t v10 = sub_1000D2920();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        int v14 = 56;
        uint64_t v15 = 2080;
        uint64_t v16 = "BOOL DIIOManager::fetchCacheStat(uint64_t &, uint64_t &)";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%.*s: fetch failed", buf, 0x12u);
      }
    }
    *__error() = v6;
  }
  else
  {
    uint64_t v9 = output[1];
    *a2 = output[0];
    *a3 = v9;
  }
  return v5 == 0;
}

BOOL sub_1000107B4(uint64_t a1, void *outputStruct)
{
  kern_return_t v2;
  int v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  size_t outputStructCnt;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;

  outputStructCnt = 1924;
  uint64_t v2 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 4), 4u, 0, 0, outputStruct, &outputStructCnt);
  if (v2)
  {
    int v3 = *__error();
    if (sub_1000D29A0())
    {
      uint64_t v4 = sub_1000D2920();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      *(_DWORD *)buf = 68157954;
      uint64_t v10 = 59;
      int v11 = 2080;
      uint64_t v12 = "BOOL DIIOManager::fetchRequestsStat(DIRequestsStatsArray *)";
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();

      if (v5)
      {
        fprintf(__stderrp, "%s\n", v5);
        free(v5);
      }
    }
    else
    {
      uint64_t v6 = sub_1000D2920();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        uint64_t v10 = 59;
        int v11 = 2080;
        uint64_t v12 = "BOOL DIIOManager::fetchRequestsStat(DIRequestsStatsArray *)";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%.*s: fetch failed", buf, 0x12u);
      }
    }
    *__error() = v3;
  }
  return v2 == 0;
}

uint64_t sub_100010978(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)) {
    sub_100010A14((const void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

uint64_t sub_1000109B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64)) {
    sub_100010A14((const void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100010A48(v2);
  }
  if (*(unsigned char *)(a1 + 24)) {
    sub_100010A14((const void **)(a1 + 16));
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_100010A48(v3);
  }
  return a1;
}

const void **sub_100010A14(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_100010A48(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_100010ABC(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100010B28((unsigned char *)(a1 + 16), (uint64_t)(a2 + 2));
  *(void *)(a1 + 32) = a2[4];
  return a1;
}

void sub_100010B10(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_100010A48(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100010B28(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    *(void *)a1 = 0;
    int v3 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v3) {
      CFRetain(v3);
    }
    a1[8] = 1;
  }
  return a1;
}

void sub_100010B78(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8)) {
    sub_100010A14((const void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100010B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a3)
  {
    {
      v3 += 48;
      if (v3 == a3) {
        return a3;
      }
    }
  }
  return v3;
}

uint64_t sub_100010C3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_1001B6CA0;
  uint64_t v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  sub_100003890(a2 + 8, &v8);
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_100010CC8(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_100010CDC()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_100010D10(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *a1 = off_100191728;
  a1[1] = v4;
  sub_100010F94((uint64_t)(a1 + 2), a3);
  return a1;
}

void sub_100010D60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    sub_100146BE0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100010D7C()
{
}

void sub_100010DD4()
{
}

void *sub_100010DF8(void *a1)
{
  *a1 = off_100191728;
  sub_100018430(a1 + 2);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  return a1;
}

void sub_100010E6C(void *a1)
{
  *a1 = off_100191728;
  sub_100018430(a1 + 2);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }

  operator delete();
}

uint64_t sub_100010F00(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_100010F08(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v3();
  }
  return result;
}

uint64_t sub_100010F94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10001102C(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_100191788;
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 136))(a2);
  sub_100011910(a1 + 4);
}

void sub_1000110A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v3) {
    sub_100146C04(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000110C4(void *a1)
{
  *a1 = off_100191788;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

void sub_100011140(void *a1)
{
  *a1 = off_100191788;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }

  operator delete();
}

uint64_t sub_1000111DC(uint64_t a1, uint64_t a2)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v23 = "int CommandDispatcherImpl::CommandDispatcherContextImpl::execute(Command &)";
    *((void *)&v23 + 1) = 64;
    int v24 = 2;
    sub_100011A68(v33, &v23);
    uint64_t v4 = v35[0];
    *(_DWORD *)((char *)&v35[1] + *(void *)(v35[0] - 24)) = *(_DWORD *)((unsigned char *)&v35[1] + *(void *)(v35[0] - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v35[1] + *(void *)(v4 - 24)) |= 0x200u;
    sub_100003DF0(v35, (uint64_t)"buffer[0]=[ptr=", 15);
    std::ostream::operator<<();
    sub_100003DF0(v35, (uint64_t)", size=", 7);
    std::ostream::operator<<();
    sub_100003DF0(v35, (uint64_t)"], cmd=", 7);
    sub_100046CC4(v35, a2);
    std::ostream::~ostream();
    sub_100012308((uint64_t)v33);
    std::ios::~ios();
  }
  uint64_t v5 = 0xFFFFFFFFLL;
  switch(*(unsigned char *)(a2 + 16))
  {
    case 0:
    case 1:
      v32[0] = a2;
      v32[1] = a1 + 32;
      sub_1000147FC(v33, (uint64_t *)(a2 + 24), v32, (uint64_t *)(a2 + 24 + 16 * *(unsigned __int16 *)(a2 + 18)), (uint64_t)v32, *(void *)a2, *(void *)(a2 + 8));
      uint64_t v6 = *(void **)(a1 + 24);
      if (*(unsigned char *)(a2 + 16))
      {
        sub_10002F8C8((uint64_t)v34, (uint64_t)&v23);
        sub_10002F51C((uint64_t)v34, (uint64_t)&v29);
        uint64_t v7 = sub_100011E8C(v6);
      }
      else
      {
        sub_10002F8C8((uint64_t)v34, (uint64_t)&v23);
        sub_10002F51C((uint64_t)v34, (uint64_t)&v29);
        uint64_t v7 = sub_100011DAC((uint64_t)v6);
      }
      uint64_t v5 = v7;
      unint64_t v10 = v8;
      if (v31) {
        sub_100010A48(v31);
      }
      if (*((void *)&v29 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v29 + 1));
      }
      if (v26) {
        sub_100010A48(v26);
      }
      if (*((void *)&v23 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v23 + 1));
      }
      if (v5 < 0 && v5)
      {
        *(void *)&long long v29 = "int CommandDispatcherImpl::CommandDispatcherContextImpl::execute(Command &)";
        *((void *)&v29 + 1) = 64;
        int v30 = 16;
        sub_100011FA8(&v23, &v29);
        sub_100003DF0(v28, (uint64_t)"IO returned an error for command ", 33);
        std::ostream::operator<<();
        sub_1000120CC((uint64_t)&v23);
      }
      else
      {
        sub_10002F51C((uint64_t)v34, (uint64_t)&v29);
        sub_10002F8C8((uint64_t)v34, (uint64_t)&v23);
        for (unint64_t i = 0; a2 + i + 24 < a2 + 24 + 16 * (unint64_t)*(unsigned __int16 *)(a2 + 18); i += 16)
        {
          sub_100016C64((uint64_t)&v25);
          uint64_t v12 = v26;
          if (v26)
          {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            *(_DWORD *)(a2 + i + 32) = v27;
            sub_100010A48(v12);
          }
          else
          {
            *(_DWORD *)(a2 + i + 32) = v27;
          }
          sub_1000301A0((uint64_t)&v23);
        }
        if (v26) {
          sub_100010A48(v26);
        }
        if (*((void *)&v23 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v23 + 1));
        }
        uint64_t v13 = sub_10002F7CC((uint64_t)v34);
        unint64_t v14 = *(void *)a2;
        if (v37 >= *(void *)a2 + v13 - v36) {
          unint64_t v15 = *(void *)a2 + v13 - v36;
        }
        else {
          unint64_t v15 = v37;
        }
        if (v10 > v14 || v15 < *(void *)(a2 + 8))
        {
          *(void *)&long long v21 = "int CommandDispatcherImpl::CommandDispatcherContextImpl::execute(Command &)";
          *((void *)&v21 + 1) = 64;
          int v22 = 16;
          sub_100012110(&v23, &v21);
          sub_100003DF0(v28, (uint64_t)"Can't fulfill kernel's request. command: ", 41);
          sub_100046CC4(v28, a2);
          *(_DWORD *)((char *)&v28[1] + *(void *)(v28[0] - 24)) = *(_DWORD *)((unsigned char *)&v28[1]
                                                                                + *(void *)(v28[0] - 24)) & 0xFFFFFFB5 | 8;
          char v20 = 48;
          sub_100016CD0(v28, &v20);
          uint64_t v18 = v28[0];
          *(void *)((char *)&v28[3] + *(void *)(v28[0] - 24)) = 2;
          *(_DWORD *)((char *)&v28[1] + *(void *)(v18 - 24)) |= 0x200u;
          sub_100003DF0(v28, (uint64_t)" io_start_offset: ", 18);
          std::ostream::operator<<();
          uint64_t v19 = v28[0];
          *(_DWORD *)((char *)&v28[1] + *(void *)(v28[0] - 24)) = *(_DWORD *)((unsigned char *)&v28[1]
                                                                                + *(void *)(v28[0] - 24)) & 0xFFFFFFB5 | 2;
          *(void *)((char *)&v28[3] + *(void *)(v19 - 24)) = 0;
          *(_DWORD *)((char *)&v28[1] + *(void *)(v19 - 24)) &= ~0x200u;
          sub_100003DF0(v28, (uint64_t)" io_size: ", 10);
          unint64_t v16 = v15 - v10;
          std::ostream::operator<<();
          sub_100003DF0(v28, (uint64_t)" num_buffers: ", 14);
          std::ostream::operator<<();
          sub_100012234((uint64_t)&v23);
          unint64_t v14 = *(void *)a2;
        }
        else
        {
          unint64_t v16 = v15 - v10;
        }
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v14 + v16;
        *(_WORD *)(a2 + 18) = i >> 4;
        if (v31) {
          sub_100010A48(v31);
        }
        if (*((void *)&v29 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v29 + 1));
        }
        uint64_t v5 = 0;
      }
      sub_1000175AC(v33);
      break;
    case 3:
    case 4:
      uint64_t v9 = sub_100011BD0(*(void **)(a1 + 24));
      goto LABEL_8;
    case 5:
      (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
      uint64_t v5 = 0;
      break;
    case 6:
      uint64_t v9 = sub_100011CCC(a1);
LABEL_8:
      uint64_t v5 = v9;
      break;
    default:
      return v5;
  }
  return v5;
}

void sub_100011834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100012234((uint64_t)va);
  sub_100011F6C((uint64_t)&STACK[0x228]);
  sub_1000175AC(&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

void sub_100011910(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_100011974(void *a1)
{
}

void sub_100011980(_Unwind_Exception *a1)
{
}

void sub_100011998(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000119D4(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_100191818)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

BOOL sub_100011A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_100011A68(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100012278((uint64_t)a1, a2);
  *a1 = off_100191840;
  a1[45] = &off_100191940;
  a1[46] = &off_100191968;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100191840;
  a1[45] = off_1001918C8;
  a1[46] = off_1001918F0;
  return a1;
}

void sub_100011B68(_Unwind_Exception *a1)
{
  sub_100012308(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100011B8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100011BD0(void *a1)
{
  if (*(unsigned char *)(a1[1] + 8))
  {
    if (sub_1000D29B8())
    {
      *(void *)&long long v3 = "DiskImage::Context::flush(di_flush_mode)";
      *((void *)&v3 + 1) = 25;
      int v4 = 2;
      sub_100012A8C(v5, &v3);
      sub_100003DF0(v6, (uint64_t)"Disk image is terminated, skipping flush", 40);
      std::ostream::~ostream();
      sub_100012C84((uint64_t)v5);
      std::ios::~ios();
    }
    return 4294967290;
  }
  else
  {
    uint64_t v1 = *(uint64_t (**)(void))(*a1 + 24);
    return v1();
  }
}

void sub_100011CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100012BB0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100011CCC(uint64_t a1)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v3 = "CommandDispatcherImpl::CommandDispatcherContextImpl::unmap(const Command &)";
    *((void *)&v3 + 1) = 58;
    int v4 = 2;
    sub_100013408(v5, &v3);
    sub_100003DF0(v6, (uint64_t)"Num extents: ", 13);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000136FC((uint64_t)v5);
    std::ios::~ios();
  }
  return sub_100013570(*(void **)(a1 + 24));
}

void sub_100011D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10001352C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100011DAC(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)(a1 + 8) + 8) & 1) == 0) {
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (sub_1000D29B8())
  {
    *(void *)&long long v2 = "DiskImage::Context::read(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v2 + 1) = 24;
    int v3 = 2;
    sub_100015158(v4, &v2);
    sub_100003DF0(v5, (uint64_t)"Disk image is terminated, skipping read", 39);
    std::ostream::~ostream();
    sub_100015350((uint64_t)v4);
    std::ios::~ios();
  }
  return -6;
}

void sub_100011E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10001527C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100011E8C(void *a1)
{
  if ((*(unsigned char *)(a1[1] + 8) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 8))(a1);
  }
  if (sub_1000D29B8())
  {
    *(void *)&long long v2 = "DiskImage::Context::write(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v2 + 1) = 25;
    int v3 = 2;
    sub_100015AD4(v4, &v2);
    sub_100003DF0(v5, (uint64_t)"Disk image is terminated, skipping write", 40);
    std::ostream::~ostream();
    sub_100015CCC((uint64_t)v4);
    std::ios::~ios();
  }
  return -6;
}

void sub_100011F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100015BF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100011F6C(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    sub_100010A48(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_100010A48(v3);
  }
  return a1;
}

void *sub_100011FA8(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100016450((uint64_t)a1, a2);
  *a1 = off_100192500;
  a1[45] = &off_100192600;
  a1[46] = &off_100192628;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100192500;
  a1[45] = off_100192588;
  a1[46] = off_1001925B0;
  return a1;
}

void sub_1000120A8(_Unwind_Exception *a1)
{
  sub_1000164E0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000120CC(uint64_t a1)
{
  return a1;
}

void *sub_100012110(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100016D98((uint64_t)a1, a2);
  *a1 = off_100192720;
  a1[45] = &off_100192820;
  a1[46] = &off_100192848;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100192720;
  a1[45] = off_1001927A8;
  a1[46] = off_1001927D0;
  return a1;
}

void sub_100012210(_Unwind_Exception *a1)
{
  sub_100016E28(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100012234(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012278(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001919D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000122F4(_Unwind_Exception *a1)
{
}

uint64_t sub_100012308(uint64_t a1)
{
  *(void *)a1 = off_1001919D8;
  sub_100012710(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100012444(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100012308(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000124AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000124E4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001254C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100012308(v1);

  return std::ios::~ios();
}

void sub_100012598(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100012308(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000125FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100012308(v1);

  return std::ios::~ios();
}

void sub_10001265C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100012308(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000126D8(uint64_t a1)
{
  sub_100012308(a1);

  operator delete();
}

uint64_t sub_100012710(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100012894((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001286C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100012894(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 69;
    __int16 v21 = 2082;
    int v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    unint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 69;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100012A8C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100012BF4((uint64_t)a1, a2);
  *a1 = off_100191A60;
  a1[45] = &off_100191B60;
  a1[46] = &off_100191B88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100191A60;
  a1[45] = off_100191AE8;
  a1[46] = off_100191B10;
  return a1;
}

void sub_100012B8C(_Unwind_Exception *a1)
{
  sub_100012C84(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100012BB0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012BF4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100191BF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100012C70(_Unwind_Exception *a1)
{
}

uint64_t sub_100012C84(uint64_t a1)
{
  *(void *)a1 = off_100191BF8;
  sub_10001308C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100012DC0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100012C84(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100012E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100012E60(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100012EC8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100012C84(v1);

  return std::ios::~ios();
}

void sub_100012F14(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100012C84(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100012F78(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100012C84(v1);

  return std::ios::~ios();
}

void sub_100012FD8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100012C84(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100013054(uint64_t a1)
{
  sub_100012C84(a1);

  operator delete();
}

uint64_t sub_10001308C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100013210((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000131E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100013210(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 191;
    __int16 v21 = 2082;
    int v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    unint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 191;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100013408(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001366C((uint64_t)a1, a2);
  *a1 = off_100191C80;
  a1[45] = &off_100191D80;
  a1[46] = &off_100191DA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100191C80;
  a1[45] = off_100191D08;
  a1[46] = off_100191D30;
  return a1;
}

void sub_100013508(_Unwind_Exception *a1)
{
  sub_1000136FC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001352C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100013570(void *a1)
{
  if (*(unsigned char *)(a1[1] + 8))
  {
    if (sub_1000D29B8())
    {
      *(void *)&long long v3 = "DiskImage::Context::unmap(const unmap_extent_t *, size_t)";
      *((void *)&v3 + 1) = 25;
      int v4 = 2;
      sub_100013E80(v5, &v3);
      sub_100003DF0(v6, (uint64_t)"Disk image is terminated, skipping unmap", 40);
      std::ostream::~ostream();
      sub_100014078((uint64_t)v5);
      std::ios::~ios();
    }
    return 4294967290;
  }
  else
  {
    uint64_t v1 = *(uint64_t (**)(void))(*a1 + 16);
    return v1();
  }
}

void sub_100013658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100013FA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001366C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100191E18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000136E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000136FC(uint64_t a1)
{
  *(void *)a1 = off_100191E18;
  sub_100013B04(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100013838(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000136FC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000138A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000138D8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100013940(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000136FC(v1);

  return std::ios::~ios();
}

void sub_10001398C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000136FC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000139F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000136FC(v1);

  return std::ios::~ios();
}

void sub_100013A50(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000136FC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100013ACC(uint64_t a1)
{
  sub_1000136FC(a1);

  operator delete();
}

uint64_t sub_100013B04(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100013C88((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100013C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100013C88(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 156;
    __int16 v21 = 2082;
    int v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    unint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 156;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100013E80(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100013FE8((uint64_t)a1, a2);
  *a1 = off_100191EA0;
  a1[45] = &off_100191FA0;
  a1[46] = &off_100191FC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100191EA0;
  a1[45] = off_100191F28;
  a1[46] = off_100191F50;
  return a1;
}

void sub_100013F80(_Unwind_Exception *a1)
{
  sub_100014078(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100013FA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100013FE8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100192038;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100014064(_Unwind_Exception *a1)
{
}

uint64_t sub_100014078(uint64_t a1)
{
  *(void *)a1 = off_100192038;
  sub_100014480(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000141B4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100014078(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10001421C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100014254(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000142BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100014078(v1);

  return std::ios::~ios();
}

void sub_100014308(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100014078(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10001436C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100014078(v1);

  return std::ios::~ios();
}

void sub_1000143CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100014078(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100014448(uint64_t a1)
{
  sub_100014078(a1);

  operator delete();
}

uint64_t sub_100014480(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100014604((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000145DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100014604(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 173;
    __int16 v21 = 2082;
    int v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    unint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 173;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t *sub_1000147FC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = sub_100014890((uint64_t)a1, a2, a3, a4);
  uint64_t v11 = a1[1];
  uint64_t v18 = *a1;
  uint64_t v12 = v18 + 24 * v11;
  uint64_t v13 = a1[19];
  int v16 = (unint64_t *)a1[18];
  uint64_t v17 = v12;
  unint64_t v15 = &v16[v13];
  sub_10002F660(v10 + 208, &v18, &v17, &v16, &v15, a6, a7);
  return a1;
}

void sub_10001487C(_Unwind_Exception *a1)
{
  sub_100014940(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100014890(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_100163280;
  sub_100014990((void *)a1, a2, a3, a4);
  *(void *)(a1 + 144) = a1 + 168;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_100163280;
  sub_100014E18(a1 + 144, v5);
  return a1;
}

void sub_10001490C(_Unwind_Exception *a1)
{
  if (v1[20])
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }
  sub_100014DA8(v1);
  _Unwind_Resume(a1);
}

void *sub_100014940(void *a1)
{
  if (a1[20])
  {
    unsigned __int8 v2 = (void *)a1[18];
    if (a1 + 21 != v2) {
      operator delete(v2);
    }
  }

  return sub_100014DA8(a1);
}

void sub_100014990(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a4 == a2) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = ((unint64_t)((char *)a4 - (char *)a2 - 16) >> 4) + 1;
  }
  if (v7 <= a1[2])
  {
    sub_100014BF0((uint64_t)a1, a2, a3, v7, (void *)*a1, a1[1]);
    a1[1] = v7;
  }
  else
  {
    if (v7 >= 0x555555555555556) {
      sub_100014AAC("get_next_capacity, allocator's max size reached");
    }
    uint64_t v9 = operator new(24 * v7);
    uint64_t v10 = (void *)*a1;
    if (*a1)
    {
      sub_100014B08(a1);
      if (a1 + 3 != v10) {
        operator delete(v10);
      }
    }
    a1[1] = 0;
    a1[2] = v7;
    *a1 = v9;
    sub_100014B5C(a1, a2, a3, a4);
  }
}

void sub_100014AAC(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000039F0(exception, a1);
}

void sub_100014AF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100014B08(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v3) {
        sub_100010A48(*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

void *sub_100014B5C(void *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = result[1];
  uint64_t v5 = *result + 24 * v4;
  if (a2 == a4)
  {
    unint64_t v7 = (void *)(*result + 24 * v4);
  }
  else
  {
    uint64_t v6 = *a3;
    unint64_t v7 = (void *)(*result + 24 * v4);
    do
    {
      _X12 = *a2;
      if (*(unsigned char *)(v6 + 16)) {
        __asm { PRFM            #0, [X12] }
      }
      else {
        __asm { PRFM            #0x10, [X12] }
      }
      uint64_t v15 = *(void *)(a3[1] + 8);
      if (v15)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        uint64_t v6 = *a3;
      }
      uint64_t v16 = *(unsigned int *)(v6 + 20);
      *unint64_t v7 = _X12;
      v7[1] = v15;
      v7[2] = v16;
      a2 += 2;
      v7 += 3;
    }
    while (a2 != a4);
    uint64_t v4 = result[1];
  }
  result[1] = v4 - 0x5555555555555555 * (((uint64_t)v7 - v5) >> 3);
  return result;
}

void sub_100014BF0(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4, void *a5, unint64_t a6)
{
  uint64_t v10 = a2;
  unint64_t v11 = a6 - a4;
  if (a6 >= a4)
  {
    if (a4)
    {
      unint64_t v31 = a4;
      do
      {
        uint64_t v32 = *a3;
        _X8 = *v10;
        if (*(unsigned char *)(*a3 + 16)) {
          __asm { PRFM            #0, [X8] }
        }
        else {
          __asm { PRFM            #0x10, [X8] }
        }
        uint64_t v36 = *(void *)(a3[1] + 8);
        if (v36)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
          uint64_t v32 = *a3;
        }
        uint64_t v37 = *(unsigned int *)(v32 + 20);
        v38 = (std::__shared_weak_count *)a5[1];
        *a5 = _X8;
        a5[1] = v36;
        if (v38) {
          sub_100010A48(v38);
        }
        a5[2] = v37;
        v10 += 2;
        a5 += 3;
        --v31;
      }
      while (v31);
    }
    if (a6 != a4)
    {
      unint64_t v39 = a4 - a6;
      v40 = (std::__shared_weak_count **)(a5 + 1);
      do
      {
        if (*v40) {
          sub_100010A48(*v40);
        }
        v40 += 3;
        _CF = __CFADD__(v39++, 1);
      }
      while (!_CF);
    }
  }
  else
  {
    if (a6)
    {
      uint64_t v12 = a2;
      unint64_t v13 = a6;
      uint64_t v10 = &a2[2 * a6];
      do
      {
        uint64_t v14 = *a3;
        _X8 = *v12;
        if (*(unsigned char *)(*a3 + 16)) {
          __asm { PRFM            #0, [X8] }
        }
        else {
          __asm { PRFM            #0x10, [X8] }
        }
        uint64_t v22 = *(void *)(a3[1] + 8);
        if (v22)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
          uint64_t v14 = *a3;
        }
        uint64_t v23 = *(unsigned int *)(v14 + 20);
        int v24 = (std::__shared_weak_count *)a5[1];
        *a5 = _X8;
        a5[1] = v22;
        if (v24) {
          sub_100010A48(v24);
        }
        a5[2] = v23;
        v12 += 2;
        a5 += 3;
        --v13;
      }
      while (v13);
    }
    if (a4 != a6)
    {
      uint64_t v25 = *a3;
      do
      {
        _X10 = *v10;
        if (*(unsigned char *)(v25 + 16)) {
          __asm { PRFM            #0, [X10] }
        }
        else {
          __asm { PRFM            #0x10, [X10] }
        }
        uint64_t v29 = *(void *)(a3[1] + 8);
        if (v29)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          uint64_t v25 = *a3;
        }
        uint64_t v30 = *(unsigned int *)(v25 + 20);
        *a5 = _X10;
        a5[1] = v29;
        a5[2] = v30;
        v10 += 2;
        a5 += 3;
        _CF = __CFADD__(v11++, 1);
      }
      while (!_CF);
    }
  }
}

void *sub_100014DA8(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v3) {
        sub_100010A48(*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  if (a1[2] && a1 + 3 != (void *)*a1) {
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_100014E18(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = a2 - v3;
  if (a2 >= v3)
  {
    uint64_t v5 = (char *)(*(void *)a1 + 8 * v3);
    if (*(void *)(a1 + 16) - v3 < v4)
    {
      sub_100014E9C((void **)a1, v5, v4, &v6);
    }
    else
    {
      sub_100014F2C(a1, v5, v5, v4);
      *(void *)(a1 + 8) += v4;
    }
  }
  else
  {
    *(void *)(a1 + 8) = a2;
  }
}

void sub_100014E9C(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = *a1;
  unint64_t v9 = sub_100015010((uint64_t)a1, a3);
  if (v9 >> 60) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  uint64_t v10 = (char *)v9;
  unint64_t v11 = (char *)operator new(8 * v9);
  sub_100015088(a1, v11, v10, a2, a3);
  *a4 = (char *)*a1 + a2 - v8;
}

void sub_100014F2C(int a1, unsigned char *__src, unsigned char *__dst, unint64_t a4)
{
  if (!a4) {
    return;
  }
  int64_t v7 = __dst - __src;
  if (__dst == __src)
  {
    size_t v9 = 8 * a4;
    goto LABEL_9;
  }
  if (a4 <= v7 >> 3)
  {
    uint64_t v11 = 8 * a4;
    uint64_t v12 = &__dst[-8 * a4];
    memmove(__dst, v12, 8 * a4);
    if (v12 != __src) {
      memmove(&__dst[-(v12 - __src)], __src, v12 - __src);
    }
    uint64_t v10 = __src;
    size_t v9 = v11;
    goto LABEL_13;
  }
  uint64_t v8 = v7 >> 3;
  if (__src) {
    memmove(&__src[8 * a4], __src, __dst - __src);
  }
  bzero(__src, v7);
  if (a4 != v8)
  {
    size_t v9 = 8 * (a4 - v8);
LABEL_9:
    uint64_t v10 = __dst;
LABEL_13:
    bzero(v10, v9);
  }
}

unint64_t sub_100015010(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xFFFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_100015088(void **a1, char *__dst, char *a3, char *__src, uint64_t a5)
{
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (*a1) {
    BOOL v12 = __dst == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = v12 || v10 == __src;
  uint64_t v14 = __dst;
  if (!v13)
  {
    memmove(__dst, v10, __src - v10);
    uint64_t v14 = &__dst[__src - v10];
  }
  if (a5) {
    bzero(v14, 8 * a5);
  }
  if (__src)
  {
    uint64_t v15 = &v10[8 * (void)v11];
    if (v15 != __src && v14 != 0) {
      memmove(&v14[8 * a5], __src, v15 - __src);
    }
  }
  if (v10 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  uint64_t v17 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v17;
  a1[2] = a3;
}

void *sub_100015158(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000152C0((uint64_t)a1, a2);
  *a1 = off_1001920C0;
  a1[45] = &off_1001921C0;
  a1[46] = &off_1001921E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001920C0;
  a1[45] = off_100192148;
  a1[46] = off_100192170;
  return a1;
}

void sub_100015258(_Unwind_Exception *a1)
{
  sub_100015350(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001527C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000152C0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100192258;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10001533C(_Unwind_Exception *a1)
{
}

uint64_t sub_100015350(uint64_t a1)
{
  *(void *)a1 = off_100192258;
  sub_100015758(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10001548C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100015350(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000154F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001552C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100015594(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100015350(v1);

  return std::ios::~ios();
}

void sub_1000155E0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100015350(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100015644(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100015350(v1);

  return std::ios::~ios();
}

void sub_1000156A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100015350(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100015720(uint64_t a1)
{
  sub_100015350(a1);

  operator delete();
}

uint64_t sub_100015758(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000158DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000158B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000158DC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 159;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v13 = a2;
      }
      else {
        BOOL v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 159;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100015AD4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100015C3C((uint64_t)a1, a2);
  *a1 = off_1001922E0;
  a1[45] = &off_1001923E0;
  a1[46] = &off_100192408;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001922E0;
  a1[45] = off_100192368;
  a1[46] = off_100192390;
  return a1;
}

void sub_100015BD4(_Unwind_Exception *a1)
{
  sub_100015CCC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100015BF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100015C3C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100192478;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100015CB8(_Unwind_Exception *a1)
{
}

uint64_t sub_100015CCC(uint64_t a1)
{
  *(void *)a1 = off_100192478;
  sub_1000160D4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100015E08(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100015CCC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100015E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100015EA8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100015F10(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100015CCC(v1);

  return std::ios::~ios();
}

void sub_100015F5C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100015CCC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100015FC0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100015CCC(v1);

  return std::ios::~ios();
}

void sub_100016020(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100015CCC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10001609C(uint64_t a1)
{
  sub_100015CCC(a1);

  operator delete();
}

uint64_t sub_1000160D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100016258((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100016230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100016258(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 166;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v13 = a2;
      }
      else {
        BOOL v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 166;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100016450(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100192698;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000164CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000164E0(uint64_t a1)
{
  *(void *)a1 = off_100192698;
  sub_1000168E8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10001661C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000164E0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100016684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000166BC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100016724(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000164E0(v1);

  return std::ios::~ios();
}

void sub_100016770(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000164E0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000167D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000164E0(v1);

  return std::ios::~ios();
}

void sub_100016834(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000164E0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000168B0(uint64_t a1)
{
  sub_1000164E0(a1);

  operator delete();
}

uint64_t sub_1000168E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100016A6C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100016A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100016A6C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 117;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v13 = a2;
      }
      else {
        BOOL v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 117;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

double sub_100016C64(uint64_t a1)
{
  sub_10002EE9C(a1, 1, (uint64_t)&v6);
  long long v2 = v6;
  long long v6 = 0uLL;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v2;
  if (v3)
  {
    sub_100010A48(v3);
    int v4 = (std::__shared_weak_count *)*((void *)&v6 + 1);
    double result = *(double *)&v7;
    *(_OWORD *)(a1 + 72) = v7;
    if (v4) {
      sub_100010A48(v4);
    }
  }
  else
  {
    double result = *(double *)&v7;
    *(_OWORD *)(a1 + 72) = v7;
  }
  return result;
}

void *sub_100016CD0(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    int v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_100016D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_100016D98(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001928B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100016E14(_Unwind_Exception *a1)
{
}

uint64_t sub_100016E28(uint64_t a1)
{
  *(void *)a1 = off_1001928B8;
  sub_100017230(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100016F64(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100016E28(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100016FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100017004(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001706C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100016E28(v1);

  return std::ios::~ios();
}

void sub_1000170B8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100016E28(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10001711C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100016E28(v1);

  return std::ios::~ios();
}

void sub_10001717C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100016E28(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000171F8(uint64_t a1)
{
  sub_100016E28(a1);

  operator delete();
}

uint64_t sub_100017230(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000173B4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001738C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000173B4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      std::locale v8 = a2;
    }
    else {
      std::locale v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 133;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v13 = a2;
      }
      else {
        BOOL v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 133;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

void *sub_1000175AC(void *a1)
{
  unsigned __int8 v2 = (std::__shared_weak_count *)a1[87];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[73];
  if (v3) {
    sub_100010A48(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[67];
  if (v4) {
    sub_100010A48(v4);
  }
  int v5 = (std::__shared_weak_count *)a1[53];
  if (v5) {
    sub_100010A48(v5);
  }
  char v6 = (std::__shared_weak_count *)a1[46];
  if (v6) {
    sub_100010A48(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[35];
  if (v7) {
    sub_100010A48(v7);
  }
  if (a1[20])
  {
    std::locale v8 = (void *)a1[18];
    if (a1 + 21 != v8) {
      operator delete(v8);
    }
  }

  return sub_100014DA8(a1);
}

void sub_100017644()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_100192950;
}

void sub_100017694(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t *sub_1000176CC(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *double result = a2;
  if (v3) {
    return (uint64_t *)sub_1000176FC((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_1000176FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_100017750(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000177D4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      char v6 = v4 - 16;
      uint64_t v7 = v4 - 16;
      std::locale v8 = v4 - 16;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 16;
        (*v9)(v7);
        v6 -= 16;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***sub_100017894(void ***result, void **a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    free(*v2);
    operator delete();
  }
  return result;
}

uint64_t sub_1000178F4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000179BC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_10001796C()
{
}

void *sub_100017984(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100010CDC();
  }
  return operator new(16 * a2);
}

uint64_t sub_1000179BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100017A50((uint64_t)v12);
  return v10;
}

uint64_t sub_100017A50(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100017A88(a1);
  }
  return a1;
}

void sub_100017A88(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_100010A48(v3);
    }
    v1 += 16;
  }
}

void **sub_100017ACC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100017B00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_100010A48(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void *sub_100017B54(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100017BDC(result, a4);
    uint64_t result = sub_100017C20((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100017BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100017D2C(&a9);
  _Unwind_Resume(a1);
}

char *sub_100017BDC(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_10001796C();
  }
  uint64_t result = (char *)sub_100017984((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_100017C20(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_100017CB0((uint64_t)v7);
  return v4;
}

uint64_t sub_100017CB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100017CE8(a1);
  }
  return a1;
}

void sub_100017CE8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      sub_100010A48(v3);
    }
    v1 -= 16;
  }
}

void sub_100017D2C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100017D80((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100017D80(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_100010A48(v4);
    }
  }
  a1[1] = v2;
}

void sub_100017DCC()
{
  exception = __cxa_allocate_exception(8uLL);
}

void sub_100017E1C(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 16;
      uint64_t v6 = v3 - 16;
      uint64_t v7 = v3 - 16;
      do
      {
        char v8 = *(void (***)(char *))v7;
        v7 -= 16;
        (*v8)(v6);
        v5 -= 16;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_100017EBC(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = a3;
  a1[2] = a2;
  size_t v4 = a3 * a2;
  uint64_t v5 = malloc_type_valloc(a3 * a2, 0x901EC93FuLL);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    char v8 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v5, v4);
  return a1;
}

void sub_100017F34()
{
}

void *sub_100017F48()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_100192978;
  return result;
}

void sub_100017F80(uint64_t a1, void *a2)
{
  *a2 = off_100192978;
}

void sub_100017FA8(uint64_t a1, void **a2)
{
}

uint64_t sub_100017FB0(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001929E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100017FF0()
{
  return &off_1001929E8;
}

uint64_t sub_100017FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_10001807C(void *a1, uint64_t a2)
{
  sub_100018100(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_100018100(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100018188(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100018200((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100018200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(void *)sub_1000035D8(a7 + v11 - 16) = off_1001914E0;
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      *(_DWORD *)(a3 + v11 - 8) = 0;
      v11 -= 16;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_10001829C(_Unwind_Exception *exception_object)
{
  if (v3) {
    sub_100146C28(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000182B8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100018324(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_10001796C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100017984(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v14 = v10;
  long long v15 = &v10[16 * v4];
  uint64_t v16 = (uint64_t)v15;
  __int16 v17 = &v10[16 * v9];
  uint64_t v11 = sub_1000035D8((uint64_t)v15);
  *(void *)uint64_t v11 = off_1001914E0;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v16 += 16;
  sub_100018188(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1000182B8((uint64_t)&v14);
  return v12;
}

void sub_10001841C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000182B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100018430(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000184B4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  *(void *)a1 = off_100192A08;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v22 = (void *)(a1 + 16);
  *(void *)(a1 + 64) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 200) = a4;
  sub_1000191E8(a1 + 208, a5);
  *(void *)(a1 + 240) = 0;
  if (a4[1] != *a4)
  {
    unint64_t v8 = 0;
    do
    {
      sub_100003C58((uint64_t)&v25);
      sub_100003DF0(&v25, (uint64_t)"com.apple.diskimagesio_", 23);
      std::ostream::operator<<();
      sub_100018D7C(&v32, &v25);
      uint64_t v25 = v21;
      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v25 + (void)*(v21 - 3)) = v20;
      if (v31 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      uint64_t v10 = v9;
      std::ostream::~ostream();
      std::ios::~ios();
      sub_100003890((uint64_t)v33, v23);
      if (v24 >= 0) {
        uint64_t v11 = (char *)v23;
      }
      else {
        uint64_t v11 = (char *)v23[0];
      }
      unint64_t v13 = *(void *)(a1 + 24);
      unint64_t v12 = *(void *)(a1 + 32);
      if (v13 >= v12)
      {
        uint64_t v15 = (uint64_t)(v13 - *v22) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_10001796C();
        }
        uint64_t v16 = v12 - *v22;
        uint64_t v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
          uint64_t v17 = v15 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        uint64_t v29 = a1 + 32;
        if (v18) {
          __int16 v19 = (void (__cdecl **)(std::ostringstream *__hidden))sub_100019308(a1 + 32, v18);
        }
        else {
          __int16 v19 = 0;
        }
        uint64_t v25 = v19;
        long long v26 = (void (__cdecl **)(std::stringbuf *__hidden))&v19[v15];
        int v27 = v26;
        v28 = (char *)&v19[v18];
        sub_10011DF70(v19 + 8 * v15, v11);
        ++v27;
        sub_100019280(v22, &v25);
        unint64_t v14 = *(void *)(a1 + 24);
        sub_100019340((uint64_t)&v25);
      }
      else
      {
        sub_10011DF70(*(void *)(a1 + 24), v11);
        unint64_t v14 = v13 + 8;
        *(void *)(a1 + 24) = v13 + 8;
      }
      unint64_t v9 = v10;
      *(void *)(a1 + 24) = v14;
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      uint64_t v32 = v21;
      *(void *)((char *)&v33[-1] + (void)*(v21 - 3)) = v20;
      if (v34 < 0) {
        operator delete((void *)v33[8]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      ++v8;
    }
    while (v8 < (uint64_t)(a4[1] - *a4) >> 4);
  }
  operator new[]();
}

void sub_100018BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, std::mutex *a10, std::condition_variable *a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p)
{
  uint64_t v33 = *a13;
  *a13 = 0;
  if (v33) {
    sub_100019390((uint64_t)a13, v33);
  }
  sub_10001C2E0(a9);
  char v34 = *(std::__shared_weak_count **)(v31 + 184);
  if (v34) {
    sub_100010A48(v34);
  }
  std::mutex::~mutex(a10);
  std::condition_variable::~condition_variable(a11);
  __p = a21;
  sub_10001A770((void ***)&__p);
  __p = a22;
  sub_10001A830((void ***)&__p);
  uint64_t v35 = *(void *)(v31 + 8);
  *(void *)(v31 + 8) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
  }
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_100018D7C(void (__cdecl ***a1)(std::ostringstream *__hidden this), void *a2))(std::ostringstream *__hidden this)
{
  *a1 = v4;
  *(void *)((char *)*(v4 - 3) + (void)a1) = v3;
  unint64_t v5 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  uint64_t v6 = (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24));
  std::ios_base::move(v5, v6);
  v5[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = 0;
  v5[1].__fmtflags_ = v6[1].__fmtflags_;
  *(void *)((char *)*(*a1 - 3) + (void)a1 + 40) = std::stringbuf::basic_stringbuf();
  return a1;
}

void sub_100018F10(_Unwind_Exception *a1)
{
}

uint64_t sub_100018F38@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = result;
  uint64_t v4 = **(void **)(result + 200);
  if (*(void *)(*(void *)(result + 200) + 8) != v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t result = sub_10011E4FC(*(void *)(*(void *)(v2 + 40) + 8 * v6++), v4 + v5, 0);
      uint64_t v4 = **(void **)(v2 + 200);
      v5 += 16;
    }
    while (v6 < (*(void *)(*(void *)(v2 + 200) + 8) - v4) >> 4);
  }
  *a2 = v2;
  return result;
}

void *sub_100018FB0(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[5];
  uint64_t v3 = (uint64_t *)a1[6];
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    sub_10011E518(v4);
  }
  *(void *)&long long v6 = "void ExecutionEngineCommand<CommandQueue, MachPort>::signal_terminate() [Container = CommandQueue, Port = MachPort]";
  *((void *)&v6 + 1) = 69;
  int v7 = 0;
  sub_10001A8B4(v8, &v6);
  sub_100003DF0(v9, (uint64_t)"Cancelling mach ports...", 24);
  std::ostream::~ostream();
  sub_10001AD40((uint64_t)v8);
  std::ios::~ios();
  sub_100019594(a1[22]);
  *(void *)&long long v6 = "void ExecutionEngineCommand<CommandQueue, MachPort>::signal_terminate() [Container = CommandQueue, Port = MachPort]";
  *((void *)&v6 + 1) = 69;
  int v7 = 0;
  sub_10001AA1C(v8, &v6);
  sub_100003DF0(v9, (uint64_t)"Waiting for barrier to complete", 31);
  std::ostream::~ostream();
  sub_10001B554((uint64_t)v8);
  std::ios::~ios();
  v8[0] = off_100193228;
  v8[1] = a1;
  v8[3] = v8;
  sub_10001AB84((uint64_t)a1, (uint64_t)v8);
  return sub_10001C09C(v8);
}

void sub_100019118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001C09C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100019158(uint64_t a1)
{
  sub_10001C120(a1);

  operator delete();
}

void sub_100019190(uint64_t a1)
{
  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 112);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 112));
  std::condition_variable::wait((std::condition_variable *)(a1 + 64), &v2);
  if (v2.__owns_) {
    std::mutex::unlock(v2.__m_);
  }
}

uint64_t sub_1000191E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100019280(void *a1, void *a2)
{
  uint64_t v5 = (void *)*a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t result = (void *)a2[1];
  while (v4 != v5)
    uint64_t result = sub_10011DF74(result - 1, --v4);
  a2[1] = result;
  int v7 = (void *)*a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_100019308(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100010CDC();
  }
  return operator new(8 * a2);
}

uint64_t sub_100019340(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_10011DEBC((NSObject **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100019390(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 - 8;
    uint64_t v2 = *(void *)(a2 - 8);
    if (v2)
    {
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(v3 + v4);
        *(void *)(v3 + v4) = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        v4 -= 8;
      }
      while (v4);
    }
    operator delete[]();
  }
}

void sub_10001942C(int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = off_100192A68;
  uint64_t v5 = *a1;
  v4[4] = 0;
  v4[5] = 1018212795;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0;
  v4[11] = 850045863;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  v4[20] = v5;
  v4[3] = 0;
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1000196A4((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_1000194CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100192A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000194EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100192A68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100019540(uint64_t a1)
{
  return sub_10001954C(a1 + 24);
}

uint64_t sub_10001954C(uint64_t a1)
{
  sub_100019594(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100019594(uint64_t a1)
{
  v11.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v11.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (!atomic_load((unint64_t *)(a1 + 128))) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 < 1) {
    goto LABEL_17;
  }
  uint64_t v4 = (std::condition_variable *)(a1 + 16);
  std::chrono::steady_clock::now();
  v5.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (!v5.__d_.__rep_)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = 0;
    goto LABEL_11;
  }
  if (v5.__d_.__rep_ < 1)
  {
    if ((unint64_t)v5.__d_.__rep_ < 0xFFDF3B645A1CAC09)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = 0x8000000000000000;
      goto LABEL_11;
    }
LABEL_10:
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = 1000 * v5.__d_.__rep_;
    goto LABEL_11;
  }
  if ((unint64_t)v5.__d_.__rep_ <= 0x20C49BA5E353F7) {
    goto LABEL_10;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_11:
  uint64_t v7 = 1000000 * v3;
  if ((unint64_t)v3 > 0x8637BD05AF6) {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v8 = v7 ^ 0x7FFFFFFFFFFFFFFFLL;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = v6 + v7;
  if (v6 <= v8) {
    v10.__d_.__rep_ = v9;
  }
  else {
    v10.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
  }
  std::condition_variable::__do_timed_wait(v4, &v11, v10);
  std::chrono::steady_clock::now();
LABEL_17:
  if (v11.__owns_) {
    std::mutex::unlock(v11.__m_);
  }
}

void sub_1000196A4(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      std::chrono::system_clock::time_point v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        sub_100010A48(v5);
      }
    }
  }
}

uint64_t sub_10001972C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000197A4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000197A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10001983C((uint64_t)v13);
  return v11;
}

uint64_t sub_10001983C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100019874((void *)a1);
  }
  return a1;
}

void *sub_100019874(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_1000198DC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_100019914(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_10001998C()
{
}

__n128 sub_1000199A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100192AB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1000199EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100192AB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100019A1C(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)a2 + 20) != 1) {
    return sub_100019A90(*(void *)(result + 8), *(_DWORD *)(result + 16), 1);
  }
  return result;
}

uint64_t sub_100019A44(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_100192D48)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100019A84()
{
  return &off_100192D48;
}

uint64_t sub_100019A90(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = a2;
  uint64_t v7 = *(void *)(a1 + 240);
  uint64_t v8 = **(void **)(a1 + 192) + *(void *)(*(void *)(a1 + 192) + 8) * a2;
  uint64_t v9 = *(void *)(v7 + 8 * a2);
  if (!v9)
  {
    (***(void (****)(void *__return_ptr))(a1 + 8))(v15);
    uint64_t v12 = v15[0];
    v15[0] = 0;
    uint64_t v13 = *(void *)(v7 + 8 * v6);
    *(void *)(v7 + 8 * v6) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      uint64_t v14 = v15[0];
      v15[0] = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t v9 = *(void *)(v7 + 8 * v6);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
  if (a3) {
    sub_100019DEC(a1 + 208, v8, a2, v10);
  }
  return v10;
}

void *sub_100019C84(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100019E48((uint64_t)a1, a2);
  *a1 = off_100192B40;
  a1[45] = &off_100192C40;
  a1[46] = &off_100192C68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100192B40;
  a1[45] = off_100192BC8;
  a1[46] = off_100192BF0;
  return a1;
}

void sub_100019D84(_Unwind_Exception *a1)
{
  sub_100019ED8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100019DA8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100019DEC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7 = a3;
  int v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, int *))(*(void *)v4 + 48))(v4, a2, &v7, &v6);
}

uint64_t sub_100019E48(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100192CD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100019EC4(_Unwind_Exception *a1)
{
}

uint64_t sub_100019ED8(uint64_t a1)
{
  *(void *)a1 = off_100192CD8;
  sub_10001A2E0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10001A014(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100019ED8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10001A07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001A0B4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001A11C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100019ED8(v1);

  return std::ios::~ios();
}

void sub_10001A168(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100019ED8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10001A1CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100019ED8(v1);

  return std::ios::~ios();
}

void sub_10001A22C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100019ED8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10001A2A8(uint64_t a1)
{
  sub_100019ED8(a1);

  operator delete();
}

uint64_t sub_10001A2E0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10001A464((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001A43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001A464(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 232;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 232;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void *sub_10001A65C(void *a1)
{
  unsigned __int8 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10001A6E0(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_10001A724();
  }
  int v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_10001A724()
{
  exception = __cxa_allocate_exception(8uLL);
}

void sub_10001A770(void ***a1)
{
  unsigned __int8 v2 = *a1;
  if (*v2)
  {
    sub_10001A7C4(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_10001A7C4(void *result)
{
  uint64_t v1 = result;
  unsigned __int8 v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    int v4 = (void *)*--v3;
    __n128 result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_10001A830(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = (NSObject **)**a1;
  if (v2)
  {
    int v4 = (NSObject **)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        int v4 = sub_10011DEBC(v4 - 1);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_10001A8B4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001ACB0((uint64_t)a1, a2);
  *a1 = off_100192D70;
  a1[45] = &off_100192E70;
  a1[46] = &off_100192E98;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100192D70;
  a1[45] = off_100192DF8;
  a1[46] = off_100192E20;
  return a1;
}

void sub_10001A9B4(_Unwind_Exception *a1)
{
  sub_10001AD40(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001A9D8(uint64_t a1)
{
  return a1;
}

void *sub_10001AA1C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001B4C4((uint64_t)a1, a2);
  *a1 = off_100192F90;
  a1[45] = &off_100193090;
  a1[46] = &off_1001930B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100192F90;
  a1[45] = off_100193018;
  a1[46] = off_100193040;
  return a1;
}

void sub_10001AB1C(_Unwind_Exception *a1)
{
  sub_10001B554(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001AB40(uint64_t a1)
{
  return a1;
}

void sub_10001AB84(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  sub_10001BD80(a1, &v7, a2, &v8);
  uint64_t v3 = *(dispatch_queue_t **)(a1 + 16);
  for (uint64_t i = *(dispatch_queue_t **)(a1 + 24); v3 != i; ++v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3321888768;
    v5[2] = sub_10001BCD8;
    v5[3] = &unk_100193198;
    v5[4] = v8;
    char v6 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10011E028(v3, v5);
    if (v6) {
      sub_100010A48(v6);
    }
  }
  if (v9) {
    sub_100010A48(v9);
  }
}

void sub_10001AC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14) {
    sub_100010A48(a14);
  }
  if (a17) {
    sub_100010A48(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001ACB0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100192F08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10001AD2C(_Unwind_Exception *a1)
{
}

uint64_t sub_10001AD40(uint64_t a1)
{
  *(void *)a1 = off_100192F08;
  sub_10001B148(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10001AE7C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10001AD40(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10001AEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001AF1C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001AF84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001AD40(v1);

  return std::ios::~ios();
}

void sub_10001AFD0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001AD40(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10001B034(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001AD40(v1);

  return std::ios::~ios();
}

void sub_10001B094(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001AD40(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10001B110(uint64_t a1)
{
  sub_10001AD40(a1);

  operator delete();
}

uint64_t sub_10001B148(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10001B2CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001B2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001B2CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 182;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 182;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10001B4C4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100193128;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10001B540(_Unwind_Exception *a1)
{
}

uint64_t sub_10001B554(uint64_t a1)
{
  *(void *)a1 = off_100193128;
  sub_10001B95C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10001B690(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10001B554(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10001B6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001B730(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001B798(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001B554(v1);

  return std::ios::~ios();
}

void sub_10001B7E4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001B554(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10001B848(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001B554(v1);

  return std::ios::~ios();
}

void sub_10001B8A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001B554(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10001B924(uint64_t a1)
{
  sub_10001B554(a1);

  operator delete();
}

uint64_t sub_10001B95C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10001BAE0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001BAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001BAE0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 185;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 185;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10001BCD8(uint64_t a1)
{
  return sub_10001BCE0(*(void *)(a1 + 32));
}

uint64_t sub_10001BCE0(uint64_t result)
{
  if (atomic_fetch_add((atomic_uint *volatile)(result + 40), 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = *(void *)(result + 32);
    if (!v1) {
      sub_100017644();
    }
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 48);
    uint64_t v4 = *(void *)(result + 32);
    return v3(v4, v2);
  }
  return result;
}

uint64_t sub_10001BD54(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10001BD70(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_100010A48(v1);
  }
}

uint64_t sub_10001BD80@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x48uLL);
  uint64_t result = sub_10001BDF4((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_10001BDE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001BDF4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001931D8;
  uint64_t v5 = *a3;
  *(void *)(a1 + 24) = a2;
  sub_10001BEE4(a1 + 32, a4);
  *(_DWORD *)(a1 + 64) = v5;
  return a1;
}

void sub_10001BE50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10001BE64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001931D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10001BE84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001931D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_10001BED8(uint64_t a1)
{
  return sub_10001C09C((void *)(a1 + 32));
}

uint64_t sub_10001BEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10001BF80()
{
}

void *sub_10001BF94(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_100193228;
  result[1] = v3;
  return result;
}

uint64_t sub_10001BFDC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100193228;
  a2[1] = v2;
  return result;
}

void sub_10001C008(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 112));
  std::condition_variable::notify_all((std::condition_variable *)(v1 + 64));

  std::mutex::unlock((std::mutex *)(v1 + 112));
}

uint64_t sub_10001C050(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_100193298)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10001C090()
{
  return &off_100193298;
}

void *sub_10001C09C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10001C120(uint64_t a1)
{
  *(void *)a1 = off_100192A08;
  uint64_t v4 = *(void *)(a1 + 240);
  uint64_t v2 = (void *)(a1 + 240);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_100019390((uint64_t)v2, v3);
  }
  sub_10001C2E0((void *)(a1 + 208));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 184);
  if (v5) {
    sub_100010A48(v5);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  uint64_t v8 = (void **)(a1 + 40);
  sub_10001A770(&v8);
  uint64_t v8 = (void **)(a1 + 16);
  sub_10001A830(&v8);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  return a1;
}

void sub_10001C1F0()
{
}

__n128 sub_10001C204(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1001932B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10001C250(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001932B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10001C280(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(a1 + 8))(*(unsigned int *)(a1 + 16), a2, *a3, *a4);
}

uint64_t sub_10001C294(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10001C2D4()
{
}

void *sub_10001C2E0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10001C364(uint64_t a1)
{
  *(void *)a1 = off_1001933A8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_100017D2C(&v3);
  return a1;
}

void sub_10001C3BC(uint64_t a1)
{
  *(void *)a1 = off_1001933A8;
  uint64_t v1 = (void **)(a1 + 8);
  sub_100017D2C(&v1);
  operator delete();
}

void *sub_10001C428(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = off_1001933A8;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_100017B54(v2 + 1, *(void **)(a1 + 8), *(void **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
  v2[4] = *(void *)(a1 + 32);
  return v2;
}

void sub_10001C494(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10001C4A8(uint64_t a1, void *a2)
{
  *a2 = off_1001933A8;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  __n128 result = sub_100017B54(a2 + 1, *(void **)(a1 + 8), *(void **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
  a2[4] = *(void *)(a1 + 32);
  return result;
}

void sub_10001C50C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  sub_100017D2C(&v1);
}

void sub_10001C538(void **a1)
{
  uint64_t v2 = a1 + 1;
  sub_100017D2C(&v2);
  operator delete(a1);
}

uint64_t sub_10001C578(uint64_t result)
{
  **(unsigned char **)(result + 32) = 1;
  uint64_t v1 = *(uint64_t **)(result + 8);
  uint64_t v2 = *(uint64_t **)(result + 16);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    v1 += 2;
    __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

uint64_t sub_10001C5D8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10001C618()
{
}

id frk_unwrapped_symmetric_key_with_shipping_private_key(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = [a1 objectForKey:@"com.apple.wkms.fcs-response"];
  uint64_t v7 = (void *)v6;
  if (!v5)
  {
    uint64_t v25 = a3;
    NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
    CFStringRef v38 = @"ERROR: Shipping private key is NULL.";
    id v12 = +[NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
    uint64_t v18 = 26;
LABEL_14:
    id v15 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:v18 userInfo:v12];
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    os_log_type_t v11 = 0;
LABEL_16:
    uint64_t v14 = 0;
    int v16 = 0;
    goto LABEL_17;
  }
  if (!v6)
  {
    uint64_t v25 = a3;
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    CFStringRef v36 = @"ERROR: This archive does not contain a shipping key response.";
    id v12 = +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
    uint64_t v18 = 25;
    goto LABEL_14;
  }
  id v28 = 0;
  uint64_t v8 = +[NSJSONSerialization JSONObjectWithData:v6 options:0 error:&v28];
  id v9 = v28;
  if (!v8)
  {
    uint64_t v10 = 0;
    os_log_type_t v11 = 0;
    uint64_t v14 = 0;
    int v16 = 0;
    if (!a3) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v10 = [v8 objectForKey:@"wrapped-key"];
  os_log_type_t v11 = [v8 objectForKey:@"enc-request"];
  uint64_t v25 = a3;
  if (!v10
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || !v11
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
    CFStringRef v34 = @"ERROR: Response dictionary is missing required keys. Will fail";
    id v12 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    id v15 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:23 userInfo:v12];

    goto LABEL_16;
  }
  id v12 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v10 options:0];
  id v13 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v11 options:0];
  char v24 = v13;
  if (!v12)
  {
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    CFStringRef v32 = @"ERROR: shipping key wrapped-key failed base64 decode";
    __int16 v21 = &v32;
    uint64_t v22 = &v31;
LABEL_24:
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v22, 1, v13);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v23 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:19 userInfo:v15];

    id v17 = (id)v23;
    uint64_t v14 = 0;
    int v16 = 0;
    goto LABEL_25;
  }
  if (!v13)
  {
    NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
    CFStringRef v30 = @"ERROR: shipping key enc-request failed base64 decode";
    __int16 v21 = &v30;
    uint64_t v22 = &v29;
    goto LABEL_24;
  }
  id v27 = v9;
  uint64_t v14 = +[CryptoKitWrapper convertPrivateKeyTox963WithPemPrivateKey:v5 error:&v27];
  id v15 = v27;

  if (!v14)
  {
    int v16 = 0;
    goto LABEL_26;
  }
  id v26 = v15;
  int v16 = +[CryptoKitWrapper unwrapEncryptionKeyWithWrappedKey:v12 encapsulatedKey:v24 privateKey:v14 error:&v26];
  id v17 = v26;
LABEL_25:

  id v15 = v17;
LABEL_26:

LABEL_17:
  id v9 = v15;
  a3 = v25;
  if (v25) {
LABEL_18:
  }
    *a3 = v9;
LABEL_19:
  id v19 = v16;

  return v19;
}

id frk_metadata_from_aea_auth_data(AEAAuthData_impl *a1, void *a2)
{
  uint64_t v4 = +[NSMutableDictionary dictionary];
  uint32_t EntryCount = AEAAuthDataGetEntryCount(a1);
  if (!EntryCount)
  {
LABEL_12:
    id v16 = [v4 copy];
    id v17 = 0;
    if (a2) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  uint32_t v6 = EntryCount;
  uint32_t v7 = 0;
  while (1)
  {
    size_t data_size = 0;
    size_t key_length = 0;
    if (AEAAuthDataGetEntry(a1, v7, 0, 0, &key_length, 0, 0, &data_size))
    {
      NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
      CFStringRef v26 = @"Failed to parse auth data blob.";
      uint64_t v18 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
      id v17 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:17 userInfo:v18];

      goto LABEL_22;
    }
    if (!key_length)
    {
      NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
      CFStringRef v38 = @"Failed to parse key in KVS (zero size key).";
      id v19 = &v38;
      uint64_t v20 = &v37;
LABEL_20:
      id v13 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v20 count:1];
      id v17 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:17 userInfo:v13];
      goto LABEL_21;
    }
    size_t v8 = ++key_length;
    if (!data_size)
    {
      NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
      CFStringRef v36 = @"Failed to parse key in KVS (zero size data).";
      id v19 = &v36;
      uint64_t v20 = &v35;
      goto LABEL_20;
    }
    id v9 = malloc_type_calloc(1uLL, v8, 0xA4E106D4uLL);
    if (!v9)
    {
      NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
      CFStringRef v34 = @"KVS keyBuffer allocation failure.";
      id v19 = &v34;
      uint64_t v20 = &v33;
      goto LABEL_20;
    }
    uint64_t v10 = v9;
    os_log_type_t v11 = (uint8_t *)malloc_type_calloc(1uLL, data_size, 0xE9F1B555uLL);
    if (!v11)
    {
      free(v10);
      NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
      CFStringRef v32 = @"KVS dataBuffer allocation failure.";
      id v19 = &v32;
      uint64_t v20 = &v31;
      goto LABEL_20;
    }
    id v12 = v11;
    if (AEAAuthDataGetEntry(a1, v7, key_length, (char *)v10, &key_length, data_size, v11, &data_size))
    {
      free(v10);
      free(v12);
      NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
      CFStringRef v30 = @"KVS data fetch failure.";
      id v19 = &v30;
      uint64_t v20 = &v29;
      goto LABEL_20;
    }
    id v13 = [objc_alloc((Class)NSString) initWithUTF8String:v10];
    id v14 = objc_alloc((Class)NSData);
    id v15 = [v14 initWithBytesNoCopy:v12 length:data_size freeWhenDone:1];
    free(v10);
    if (!v13 || !v15) {
      break;
    }
    [v4 setObject:v15 forKey:v13];

    if (v6 == ++v7) {
      goto LABEL_12;
    }
  }
  NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
  CFStringRef v28 = @"KVS key value - parse failure.";
  uint64_t v22 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  id v17 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:17 userInfo:v22];

LABEL_21:
LABEL_22:
  id v16 = 0;
  if (a2) {
LABEL_23:
  }
    *a2 = v17;
LABEL_24:

  return v16;
}

void *sub_10001CEF0(uint64_t a1, void *a2)
{
  return sub_10001D7A0(a1, a2);
}

unint64_t sub_10001CF08(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001F044(&qword_1001C45B8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001F134(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10001D644(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    os_log_type_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *os_log_type_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10001F19C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001D034(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001F044(&qword_1001C45B0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10001D644(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    os_log_type_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *os_log_type_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10001D170()
{
  return sub_10001DAC8();
}

Class sub_10001D1A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  id v6 = a3;
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = a5(v7, v9);
  unint64_t v12 = v11;
  sub_10001EFEC(v7, v9);
  v13.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001EFEC(v10, v12);

  return v13.super.isa;
}

id sub_10001D2A0(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5, unint64_t a6)
{
  return sub_10001DD94(a1, a2, a3, a4, a5, a6);
}

char *static CryptoKitWrapper.wrappedDataDictionaryWithCert(plainText:certificate:)(void *a1, unint64_t a2, __SecCertificate *a3)
{
  return sub_10001E3B0(a1, a2, a3);
}

id CryptoKitWrapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id CryptoKitWrapper.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CryptoKitWrapper();
  return [super init];
}

id CryptoKitWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CryptoKitWrapper();
  return [super dealloc];
}

unint64_t sub_10001D644(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10001D6BC(a1, a2, v4);
}

unint64_t sub_10001D6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        NSData v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void *sub_10001D7A0(uint64_t a1, void *isa)
{
  uint64_t v5 = type metadata accessor for String.Encoding();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = a1;
  uint64_t v22 = isa;
  sub_10001F0DC(a1, (unint64_t)isa);
  P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)();
  if (!v2)
  {
    uint64_t v23 = v10;
    P256.KeyAgreement.PrivateKey.pemRepresentation.getter();
    static String.Encoding.ascii.getter();
    isa = (void *)String.data(using:allowLossyConversion:)();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    if (v14 >> 60 == 15)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_10001F044(&qword_1001C4598);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100163E80;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v16;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = 0xD000000000000017;
      *(void *)(inited + 56) = 0x800000010016FD20;
      sub_10001CF08(inited);
      id v17 = objc_allocWithZone((Class)NSError);
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v17 initWithDomain:v18 code:31 userInfo:isa];

      swift_willThrow();
      (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v12, v9);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v12, v9);
    }
  }
  return isa;
}

void *sub_10001DAC8()
{
  isa = v0;
  type metadata accessor for String.Encoding();
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  ((void (*)(void))__chkstk_darwin)();
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  static String.Encoding.ascii.getter();
  uint64_t v6 = String.init(data:encoding:)();
  if (v7)
  {
    __chkstk_darwin(v6);
    P256.KeyAgreement.PrivateKey.init(pemRepresentation:)();
    if (!v0)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32))(&v13[-v5], &v13[-v5], v2);
      isa = (void *)P256.KeyAgreement.PrivateKey.x963Representation.getter();
      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(&v13[-v5], v2);
    }
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10001F044(&qword_1001C4598);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100163E80;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v9;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000017;
    *(void *)(inited + 56) = 0x800000010016FD20;
    sub_10001CF08(inited);
    id v10 = objc_allocWithZone((Class)NSError);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v10 initWithDomain:v11 code:31 userInfo:isa];

    swift_willThrow();
  }
  return isa;
}

id sub_10001DD94(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, id a5, unint64_t a6)
{
  if (&type metadata accessor for HPKE) {
    BOOL v7 = &type metadata for HPKE == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || &nominal type descriptor for HPKE == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10001F044(&qword_1001C4598);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100163E80;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v15;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000027;
    *(void *)(inited + 56) = 0x800000010016FCF0;
    sub_10001CF08(inited);
    a5 = objc_allocWithZone((Class)NSError);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [a5 initWithDomain:v16 code:12 userInfo:isa];

    swift_willThrow();
  }
  else
  {
    unint64_t v45 = a2;
    unint64_t v46 = a4;
    __int16 v44 = a1;
    uint64_t v12 = type metadata accessor for P256.KeyAgreement.PrivateKey();
    uint64_t v49 = *(void *)(v12 - 8);
    uint64_t v13 = *(void *)(v49 + 64);
    __chkstk_darwin(v12);
    id v47 = a5;
    unint64_t v48 = a6;
    sub_10001F0DC((uint64_t)a5, a6);
    P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)();
    if (!v6)
    {
      int v41 = &v32;
      uint64_t v43 = type metadata accessor for HPKE.Ciphersuite();
      CFStringRef v36 = &v32;
      uint64_t v19 = *(void *)(v43 - 8);
      uint64_t v20 = *(void *)(v19 + 64);
      __chkstk_darwin(v43);
      uint64_t v42 = a3;
      static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter();
      uint64_t v21 = type metadata accessor for HPKE.Recipient();
      NSErrorUserInfoKey v35 = &v32;
      uint64_t v32 = v21;
      uint64_t v33 = *(void *)(v21 - 8);
      uint64_t v22 = __chkstk_darwin(v21);
      char v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v39 = &v32;
      __chkstk_darwin(v22);
      NSErrorUserInfoKey v25 = *(uint64_t (**)(char *))(v49 + 16);
      uint64_t v38 = v26;
      uint64_t v27 = v25((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      NSErrorUserInfoKey v37 = &v32;
      __chkstk_darwin(v27);
      uint64_t v40 = v19;
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))((char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v43);
      sub_10001F0DC(v42, v46);
      CFStringRef v34 = v24;
      HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)();
      uint64_t v28 = v49;
      uint64_t v29 = v33;
      unint64_t v46 = (unint64_t)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v30 = v40;
      uint64_t v31 = v38;
      id v47 = v44;
      unint64_t v48 = v45;
      sub_10001F1AC();
      a5 = (id)HPKE.Recipient.open<A>(_:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v32);
      (*(void (**)(unint64_t, uint64_t))(v30 + 8))(v46, v43);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v12);
    }
  }
  return a5;
}

char *sub_10001E3B0(void *a1, unint64_t a2, SecCertificateRef certificate)
{
  if (&type metadata accessor for HPKE) {
    BOOL v4 = &type metadata for HPKE == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || &nominal type descriptor for HPKE == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10001F044(&qword_1001C4598);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100163E80;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v16;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000027;
    *(void *)(inited + 56) = 0x800000010016FCF0;
    sub_10001CF08(inited);
    id v17 = objc_allocWithZone((Class)NSError);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = (char *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v17 initWithDomain:v18 code:12 userInfo:isa];

    swift_willThrow();
    return isa;
  }
  unint64_t countAndFlagsBits = a2;
  object = a1;
  uint64_t v6 = SecCertificateCopyKey(certificate);
  if (!v6)
  {
    __break(1u);
    goto LABEL_47;
  }
  BOOL v7 = v6;
  CFDataRef v8 = SecKeyCopyExternalRepresentation(v6, 0);
  if (!v8)
  {
LABEL_47:
    __break(1u);
    JUMPOUT(0x10001EFB8);
  }
  CFDataRef v9 = v8;
  uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v11 = *(void *)(v10 - 8);
  Class isa = *(char **)(v11 + 64);
  __chkstk_darwin(v10);
  unint64_t v13 = (unint64_t)(isa + 15) & 0xFFFFFFFFFFFFFFF0;
  v90 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v91 = v14;
  P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
  if (v3)
  {

    return isa;
  }
  CFDataRef v76 = v9;
  v77 = v7;
  v82 = &v71;
  uint64_t v20 = type metadata accessor for HPKE.Ciphersuite();
  v80 = 0;
  uint64_t v21 = (uint64_t *)v20;
  v84 = &v71;
  uint64_t v85 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v85 + 64);
  __chkstk_darwin(v20);
  uint64_t v88 = v10;
  uint64_t v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter();
  uint64_t v24 = type metadata accessor for HPKE.Sender();
  v81 = &v71;
  uint64_t v75 = v24;
  uint64_t v74 = *(void *)(v24 - 8);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = &v71;
  __chkstk_darwin(v25);
  Class isa = (char *)&v71 - v13;
  uint64_t v28 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 16);
  v83 = (char *)&v71 - v13;
  uint64_t v29 = v28((char *)&v71 - v13, (char *)&v71 - v13, v88);
  v78 = &v71;
  __chkstk_darwin(v29);
  uint64_t v30 = v88;
  uint64_t v31 = v85;
  (*(void (**)(char *, char *, uint64_t *))(v85 + 16))(v23, v23, v21);
  uint64_t v32 = v80;
  HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
  if (v32)
  {

    (*(void (**)(char *, uint64_t *))(v31 + 8))(v23, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v83, v30);
    return isa;
  }
  v80 = v27;
  v72 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = v11;
  switch(countAndFlagsBits >> 62)
  {
    case 1uLL:
      v79 = v21;
      uint64_t v34 = (uint64_t)object;
      uint64_t v35 = (int)object;
      uint64_t v36 = (v34 >> 32) - (int)v34;
      if (v34 >> 32 < (int)v34)
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      sub_10001F0DC((uint64_t)object, countAndFlagsBits);
      uint64_t v37 = __DataStorage._bytes.getter();
      if (v37)
      {
        uint64_t v38 = v37;
        uint64_t v39 = __DataStorage._offset.getter();
        if (!__OFSUB__(v35, v39))
        {
          uint64_t v40 = (void *)(v38 + v35 - v39);
          goto LABEL_34;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
      }
      uint64_t v40 = 0;
LABEL_34:
      uint64_t v57 = __DataStorage._length.getter();
      if (v57 >= v36) {
        uint64_t v58 = v36;
      }
      else {
        uint64_t v58 = v57;
      }
      v59 = (char *)v40 + v58;
      if (!v40) {
        v59 = 0;
      }
      v90 = v40;
      v91 = v59;
      sub_10001F088();
      uint64_t v52 = HPKE.Sender.seal<A>(_:)();
      unint64_t v54 = v61;
      sub_10001EFEC((uint64_t)object, countAndFlagsBits);
      CFDataRef v55 = v76;
LABEL_40:
      uint64_t v33 = v80;
LABEL_41:
      Swift::String v62 = Data.base64EncodedString(options:)(0);
      unint64_t countAndFlagsBits = v62._countAndFlagsBits;
      object = v62._object;
      unint64_t v63 = v54;
      uint64_t v64 = v52;
      uint64_t v65 = HPKE.Sender.encapsulatedKey.getter();
      unint64_t v67 = v66;
      Swift::String v68 = Data.base64EncodedString(options:)(0);
      sub_10001EFEC(v65, v67);
      sub_10001F044(&qword_1001C45A8);
      uint64_t v69 = swift_initStackObject();
      *(_OWORD *)(v69 + 16) = xmmword_100163E90;
      *(void *)(v69 + 32) = 0x2D64657070617277;
      *(void *)(v69 + 40) = 0xEB0000000079656BLL;
      v70 = object;
      *(void *)(v69 + 48) = countAndFlagsBits;
      *(void *)(v69 + 56) = v70;
      *(void *)(v69 + 64) = 0x757165722D636E65;
      *(void *)(v69 + 72) = 0xEB00000000747365;
      *(Swift::String *)(v69 + 80) = v68;
      Class isa = (char *)sub_10001D034(v69);
      sub_10001EFEC(v64, v63);

      (*(void (**)(char *, uint64_t *))(v85 + 8))(v72, v79);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v83, v88);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v33, v75);
      return isa;
    case 2uLL:
      uint64_t v41 = *((void *)object + 2);
      uint64_t v42 = *((void *)object + 3);
      swift_retain();
      swift_retain();
      uint64_t v43 = __DataStorage._bytes.getter();
      if (!v43) {
        goto LABEL_25;
      }
      uint64_t v44 = __DataStorage._offset.getter();
      if (__OFSUB__(v41, v44)) {
        goto LABEL_45;
      }
      v43 += v41 - v44;
LABEL_25:
      BOOL v45 = __OFSUB__(v42, v41);
      uint64_t v46 = v42 - v41;
      if (v45) {
        goto LABEL_43;
      }
      uint64_t v47 = __DataStorage._length.getter();
      if (v47 >= v46) {
        uint64_t v48 = v46;
      }
      else {
        uint64_t v48 = v47;
      }
      uint64_t v49 = (char *)(v43 + v48);
      if (!v43) {
        uint64_t v49 = 0;
      }
      v90 = (void *)v43;
      v91 = v49;
      sub_10001F088();
      uint64_t v50 = HPKE.Sender.seal<A>(_:)();
      CFDataRef v55 = v76;
      uint64_t v52 = v50;
      unint64_t v54 = v60;
      swift_release();
      swift_release();
      v79 = v21;
      goto LABEL_40;
    case 3uLL:
      v79 = v21;
      memset(v89, 0, 14);
      v90 = v89;
      v91 = (char *)v89;
      sub_10001F088();
      uint64_t v33 = v80;
      uint64_t v51 = HPKE.Sender.seal<A>(_:)();
      unint64_t v54 = v56;
      CFDataRef v55 = v76;
      uint64_t v52 = v51;
      goto LABEL_41;
    default:
      v79 = v21;
      v89[0] = object;
      LODWORD(v89[1]) = countAndFlagsBits;
      WORD2(v89[1]) = WORD2(countAndFlagsBits);
      v90 = v89;
      v91 = (char *)v89 + BYTE6(countAndFlagsBits);
      sub_10001F088();
      uint64_t v33 = v80;
      uint64_t v52 = HPKE.Sender.seal<A>(_:)();
      unint64_t v54 = v53;
      CFDataRef v55 = v76;
      goto LABEL_41;
  }
}

uint64_t type metadata accessor for CryptoKitWrapper()
{
  return self;
}

uint64_t sub_10001EFEC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10001F044(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_10001F088()
{
  unint64_t result = qword_1001C45A0;
  if (!qword_1001C45A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C45A0);
  }
  return result;
}

uint64_t sub_10001F0DC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10001F134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001F044(&qword_1001C45C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10001F19C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10001F1AC()
{
  unint64_t result = qword_1001C45C8;
  if (!qword_1001C45C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001C45C8);
  }
  return result;
}

uint64_t sub_10001F200(uint64_t a1)
{
  long long v2 = malloc(0xAF8uLL);
  uint64_t v3 = (uint64_t)v2;
  if (!v2)
  {
    __int16 v7 = 192;
LABEL_36:
    uint64_t v33 = __error();
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"aaS3ContextClone", v7, 80, *v33, "malloc", v34, v35, v46);
    AAS3ContextDestroy(v3);
    return 0;
  }
  memset_s(v2, 0xAF8uLL, 0, 0xAF8uLL);
  if (*(_DWORD *)a1)
  {
    *(_DWORD *)uint64_t v3 = 1;
    memcpy((void *)(v3 + 4), (const void *)(a1 + 4), 0xAC4uLL);
  }
  uint64_t v4 = *(const void **)(a1 + 2760);
  if (v4)
  {
    size_t v5 = strlen(*(const char **)(a1 + 2760));
    size_t v6 = v5 + 1;
    if (v5 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_13:
      unint64_t v13 = (void *)(v3 + 2760);
      __int16 v7 = 198;
LABEL_35:
      *unint64_t v13 = 0;
      goto LABEL_36;
    }
    CFDataRef v8 = malloc(v5 + 1);
    if (!v8) {
      goto LABEL_13;
    }
    CFDataRef v9 = v8;
    memcpy(v8, v4, v6);
    *(void *)(v3 + 2760) = v9;
  }
  uint64_t v10 = *(const void **)(a1 + 2768);
  if (v10)
  {
    size_t v11 = strlen(*(const char **)(a1 + 2768));
    size_t v12 = v11 + 1;
    if (v11 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_19:
      unint64_t v13 = (void *)(v3 + 2768);
      __int16 v7 = 199;
      goto LABEL_35;
    }
    unint64_t v14 = malloc(v11 + 1);
    if (!v14) {
      goto LABEL_19;
    }
    uint64_t v15 = v14;
    memcpy(v14, v10, v12);
    *(void *)(v3 + 2768) = v15;
  }
  uint64_t v16 = *(const void **)(a1 + 2776);
  if (v16)
  {
    size_t v17 = strlen(*(const char **)(a1 + 2776));
    size_t v18 = v17 + 1;
    if (v17 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_25:
      unint64_t v13 = (void *)(v3 + 2776);
      __int16 v7 = 200;
      goto LABEL_35;
    }
    uint64_t v19 = malloc(v17 + 1);
    if (!v19) {
      goto LABEL_25;
    }
    uint64_t v20 = v19;
    memcpy(v19, v16, v18);
    *(void *)(v3 + 2776) = v20;
  }
  uint64_t v21 = *(const void **)(a1 + 2784);
  if (v21)
  {
    size_t v22 = strlen(*(const char **)(a1 + 2784));
    size_t v23 = v22 + 1;
    if (v22 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_34:
      unint64_t v13 = (void *)(v3 + 2784);
      __int16 v7 = 201;
      goto LABEL_35;
    }
    uint64_t v24 = malloc(v22 + 1);
    if (!v24) {
      goto LABEL_34;
    }
    uint64_t v25 = v24;
    memcpy(v24, v21, v23);
    *(void *)(v3 + 2784) = v25;
  }
  uint64_t v26 = *(void *)(a1 + 2792);
  if (v26)
  {
    list = 0;
    p_list = &list;
    while (1)
    {
      uint64_t v28 = (curl_slist *)malloc(0x10uLL);
      if (!v28) {
        break;
      }
      p_data = &v28->data;
      v28->data = 0;
      v28->next = 0;
      *p_list = v28;
      uint64_t v30 = strdup(*(const char **)v26);
      *p_data = v30;
      if (!v30) {
        break;
      }
      p_list = (curl_slist **)(p_data + 1);
      uint64_t v26 = *(void *)(v26 + 8);
      if (!v26)
      {
        BOOL v31 = 1;
        uint64_t v32 = list;
        goto LABEL_39;
      }
    }
    curl_slist_free_all(list);
    uint64_t v32 = 0;
    BOOL v31 = *(void *)(a1 + 2792) != 0;
LABEL_39:
    *(void *)(v3 + 2792) = v32;
    if (v31 && v32 == 0)
    {
      __int16 v7 = 202;
      goto LABEL_36;
    }
  }
  else
  {
    *(void *)(v3 + 2792) = 0;
  }
  uint64_t v38 = *(void *)(a1 + 2800);
  if (!v38)
  {
    *(void *)(v3 + 2800) = 0;
    return v3;
  }
  list = 0;
  uint64_t v39 = &list;
  while (1)
  {
    uint64_t v40 = (curl_slist *)malloc(0x10uLL);
    if (!v40) {
      break;
    }
    uint64_t v41 = &v40->data;
    v40->data = 0;
    v40->next = 0;
    *uint64_t v39 = v40;
    uint64_t v42 = strdup(*(const char **)v38);
    *uint64_t v41 = v42;
    if (!v42) {
      break;
    }
    uint64_t v39 = (curl_slist **)(v41 + 1);
    uint64_t v38 = *(void *)(v38 + 8);
    if (!v38)
    {
      BOOL v43 = 1;
      uint64_t v44 = list;
      goto LABEL_53;
    }
  }
  curl_slist_free_all(list);
  uint64_t v44 = 0;
  BOOL v43 = *(void *)(a1 + 2800) != 0;
LABEL_53:
  *(void *)(v3 + 2800) = v44;
  if (v43 && v44 == 0)
  {
    __int16 v7 = 203;
    goto LABEL_36;
  }
  return v3;
}

void AAS3ContextDestroy(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 2760));
    free(*(void **)(a1 + 2768));
    free(*(void **)(a1 + 2776));
    free(*(void **)(a1 + 2784));
    curl_slist_free_all(*(curl_slist **)(a1 + 2792));
    curl_slist_free_all(*(curl_slist **)(a1 + 2800));
    memset_s((void *)a1, 0xAF8uLL, 0, 0xAF8uLL);
    free((void *)a1);
  }
}

void *AAS3ContextCreate()
{
  int v0 = malloc(0xAF8uLL);
  id v1 = v0;
  if (!v0)
  {
    CFDataRef v9 = __error();
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextCreate", 355, 80, *v9, "malloc", v10, v11, v13);
    goto LABEL_5;
  }
  memset_s(v0, 0xAF8uLL, 0, 0xAF8uLL);
  if ((AAS3ContextSetFieldString((uint64_t)v1, 5, "Not A Ninja/1.0", v2, v3, v4, v5, v6) & 0x80000000) != 0)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextCreate", 358, 80, 0, "set context", v7, v8, v13);
    memset_s(v1, 0xAF8uLL, 0, 0xAF8uLL);
LABEL_5:
    free(v1);
    return 0;
  }
  return v1;
}

uint64_t AAS3ContextSetFieldString(uint64_t a1, int a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 0:
      CFDataRef v9 = (void **)(a1 + 2760);
      if (__s) {
        goto LABEL_17;
      }
      goto LABEL_20;
    case 1:
      CFDataRef v9 = (void **)(a1 + 2768);
      if (!__s) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 2:
      CFDataRef v9 = (void **)(a1 + 2776);
      if (!__s) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 3:
      uint64_t v10 = (curl_slist **)(a1 + 2792);
      if (!__s) {
        return 0;
      }
      goto LABEL_12;
    case 4:
      uint64_t v10 = (curl_slist **)(a1 + 2800);
      if (!__s) {
        return 0;
      }
LABEL_12:
      if (!*__s) {
        return 0;
      }
      uint64_t v11 = curl_slist_append(*v10, __s);
      if (v11)
      {
        size_t v12 = v11;
        uint64_t result = 0;
        *uint64_t v10 = v12;
        return result;
      }
      int v18 = *__error();
      __int16 v21 = 407;
      goto LABEL_26;
    case 5:
      CFDataRef v9 = (void **)(a1 + 2784);
      if (!__s) {
        goto LABEL_20;
      }
LABEL_17:
      if (!*__s)
      {
LABEL_20:
        uint64_t v16 = 0;
LABEL_21:
        free(*v9);
        uint64_t result = 0;
        int *v9 = v16;
        return result;
      }
      size_t v14 = strlen(__s);
      size_t v15 = v14 + 1;
      if (v14 + 1 >= 0x2000000001)
      {
        *__error() = 12;
        goto LABEL_24;
      }
      size_t v17 = malloc(v14 + 1);
      if (v17)
      {
        uint64_t v16 = v17;
        memcpy(v17, __s, v15);
        goto LABEL_21;
      }
LABEL_24:
      int v18 = *__error();
      __int16 v21 = 399;
LABEL_26:
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextSetFieldString", v21, 80, v18, "malloc", v19, v20, v22);
      return 0xFFFFFFFFLL;
    default:
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextSetFieldString", 391, 80, 0, "invalid field %u", a7, a8, a2);
      return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10001F874(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1 >> 62)
    {
      v9.tv_sec = 0;
      *(void *)&v9.tv_usec = 0;
      gettimeofday(&v9, 0);
      double v2 = (double)v9.tv_sec + (double)v9.tv_usec * 0.000001 - *(double *)(a1 + 40);
      fwrite("AAS3DownloadStream (curl)\n", 0x1AuLL, 1uLL, __stderrp);
      uint64_t v3 = __stderrp;
      unint64_t v4 = atomic_load((unint64_t *)(a1 + 32));
      unint64_t v5 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v3, "%12llu bytes downloaded (%.2f MB)\n", v4, (double)v5 * 0.000000953674316);
      uint64_t v6 = __stderrp;
      unint64_t v7 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v6, "%12.2f MB/s download speed\n", (double)v7 / v2 * 0.000000953674316);
    }
    sub_1000216B4(a1);
    memset_s((void *)a1, 0x30uLL, 0, 0x30uLL);
    free((void *)a1);
  }
  return 0;
}

AAByteStream_impl *sub_10001F994(char *a1, uint64_t a2, uint64_t a3)
{
  curl_global_init(3);
  uint64_t v6 = AACustomByteStreamOpen();
  unint64_t v7 = (double *)malloc(0x30uLL);
  if (!v7 || (uint64_t v8 = v7, memset_s(v7, 0x30uLL, 0, 0x30uLL), !v6))
  {
    perror("malloc");
    goto LABEL_7;
  }
  if ((sub_100021584(v8, a1, a2, a3) & 0x80000000) != 0)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c", (uint64_t)"s3DownloadStreamOpen_curl", 132, 83, 0, "s3StreamBaseInit", v9, v10, v12.tv_sec);
LABEL_7:
    AAByteStreamClose(v6);
    return 0;
  }
  v12.tv_sec = 0;
  *(void *)&v12.tv_usec = 0;
  gettimeofday(&v12, 0);
  v8[5] = (double)v12.tv_sec + (double)v12.tv_usec * 0.000001;
  AACustomByteStreamSetData(v6, v8);
  AACustomByteStreamSetCloseProc(v6, (AAByteStreamCloseProc)sub_10001F874);
  AACustomByteStreamSetPReadProc(v6, (AAByteStreamPReadProc)sub_10001FAF0);
  AACustomByteStreamSetReadProc(v6, (AAByteStreamReadProc)sub_10001FCB0);
  return v6;
}

uint64_t sub_10001FAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v19 = a2;
  *((void *)&v19 + 1) = a3;
  uint64_t v20 = 0;
  uint64_t v5 = a2;
  if (a3)
  {
    uint64_t v16 = a2;
    uint64_t v6 = a4 + a3;
    uint64_t v7 = a4 + a3 - 1;
    while (1)
    {
      snprintf(__str, 0xC8uLL, "Range: bytes=%llu-%llu", v6 - a3, v7);
      unsigned int v11 = 0;
      v21[0] = __str;
      v21[1] = 0;
      long long v17 = v19;
      uint64_t v18 = v20;
      useconds_t v12 = 125000;
      do
      {
        if (v11)
        {
          sub_100025BC8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c", (uint64_t)"downloadStreamPRead", 65, 83, "s3Perform retry after %u ms", v8, v9, v10, v12 / 0x3E8);
          usleep(v12);
          v12 *= 2;
        }
        long long v19 = v17;
        uint64_t v20 = v18;
        int v13 = sub_10002022C(1u, *(char **)(a1 + 8), a1, 0, &v19, 0, v21);
        if ((v13 & 0x80000000) == 0) {
          break;
        }
      }
      while (v11++ < 3);
      if (v13 < 0) {
        break;
      }
      a3 = *((void *)&v19 + 1);
      if (!*((void *)&v19 + 1))
      {
        uint64_t v5 = v19;
        a2 = v16;
        goto LABEL_12;
      }
    }
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c", (uint64_t)"downloadStreamPRead", 81, 83, 0, "s3Perform failed (after retry), %s", v9, v10, (char)__str);
    return -1;
  }
  else
  {
LABEL_12:
    uint64_t result = v5 - a2;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 32), v5 - a2, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10001FCB0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10001FAF0(a1, a2, a3, atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), a3));
}

uint64_t sub_10001FCBC(_DWORD *a1, unsigned int *a2, const void *a3, size_t a4)
{
  memset(&v8, 0, sizeof(v8));
  CCHmacInit(&v8, 2u, a2 + 1, *a2);
  CCHmacUpdate(&v8, a3, a4);
  CCHmacFinal(&v8, a1 + 1);
  *a1 = 32;
  memset_s(a1 + 9, 0xE0uLL, 0, 0xE0uLL);
  memset_s(&v8, 0x180uLL, 0, 0x180uLL);
  return 0;
}

uint64_t sub_10001FD8C(uint64_t a1, const void *a2, CC_LONG a3)
{
  memset(&v7, 0, sizeof(v7));
  CC_SHA256_Init(&v7);
  CC_SHA256_Update(&v7, a2, a3);
  CC_SHA256_Final((unsigned __int8 *)(a1 + 4), &v7);
  *(_DWORD *)a1 = 32;
  memset_s((void *)(a1 + 36), 0xE0uLL, 0, 0xE0uLL);
  return memset_s(&v7, 0x68uLL, 0, 0x68uLL);
}

size_t sub_10001FE2C(char *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = __src;
  size_t v5 = a3 * a2;
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    if (*(void *)(v6 + 24))
    {
      uint64_t v7 = 0;
      if (v5)
      {
        while (1)
        {
          uint64_t v8 = (*(uint64_t (**)(void, char *, size_t))(v6 + 24))(*(void *)v6, v4, v5);
          if (v8 < 1) {
            break;
          }
          v4 += v8;
          v7 += v8;
          v5 -= v8;
          if (!v5) {
            return v7 & ~(v7 >> 63);
          }
        }
        uint64_t v7 = v8;
      }
    }
    else
    {
      uint64_t v7 = -1;
    }
    return v7 & ~(v7 >> 63);
  }
  else
  {
    if (v5 >= *(void *)(a4 + 8)) {
      size_t v5 = *(void *)(a4 + 8);
    }
    memcpy(*(void **)a4, __src, v5);
    size_t v10 = *(void *)(a4 + 8) - v5;
    *(void *)a4 += v5;
    *(void *)(a4 + 8) = v10;
    return v5;
  }
}

size_t sub_10001FEE4(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = __dst;
  size_t v5 = a3 * a2;
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    if (*(void *)(v6 + 16))
    {
      uint64_t v7 = 0;
      if (v5)
      {
        while (1)
        {
          uint64_t v8 = (*(uint64_t (**)(void, char *, size_t))(v6 + 16))(*(void *)v6, v4, v5);
          if (v8 < 0) {
            break;
          }
          if (v8)
          {
            v4 += v8;
            v7 += v8;
            v5 -= v8;
            if (v5) {
              continue;
            }
          }
          return v7 & ~(v7 >> 63);
        }
        uint64_t v7 = v8;
      }
    }
    else
    {
      uint64_t v7 = -1;
    }
    return v7 & ~(v7 >> 63);
  }
  else
  {
    if (v5 >= *(void *)(a4 + 8)) {
      size_t v5 = *(void *)(a4 + 8);
    }
    memcpy(__dst, *(const void **)a4, v5);
    size_t v10 = *(void *)(a4 + 8) - v5;
    *(void *)a4 += v5;
    *(void *)(a4 + 8) = v10;
    return v5;
  }
}

uint64_t sub_10001FF9C(curl_slist **a1, char *__format, ...)
{
  va_start(va, __format);
  int v4 = vsnprintf(0, 0, __format, va);
  if (v4 < 0)
  {
    unsigned int v11 = 0;
LABEL_8:
    useconds_t v12 = "vsnprintf";
    __int16 v13 = 156;
    int v14 = 0;
LABEL_12:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3HeaderAppendWithFormat", v13, 84, v14, v12, v5, v6, v20);
    uint64_t v18 = 0xFFFFFFFFLL;
    uint64_t v7 = v11;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = 1;
    while ((v8 & 1) != 0)
    {
      size_t v9 = (v4 + 1);
      size_t v10 = (char *)realloc(v7, v9);
      unsigned int v11 = v10;
      if (!v10)
      {
        free(v7);
        int v14 = *__error();
        useconds_t v12 = "malloc";
        __int16 v13 = 161;
        goto LABEL_12;
      }
      int v4 = vsnprintf(v10, v9, __format, va);
      char v8 = 0;
      uint64_t v7 = v11;
      if (v4 < 0) {
        goto LABEL_8;
      }
    }
    size_t v15 = curl_slist_append(*a1, v7);
    if (v15)
    {
      uint64_t v18 = 0;
      *a1 = v15;
    }
    else
    {
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3HeaderAppendWithFormat", 168, 84, 0, "curl_slist_append failed\n", v16, v17, v20);
      uint64_t v18 = 0xFFFFFFFFLL;
    }
  }
  free(v7);
  return v18;
}

uint64_t sub_100020104(curl_slist **a1, const char *a2)
{
  uint64_t v3 = curl_slist_append(*a1, a2);
  uint64_t v6 = v3;
  if (v3) {
    *a1 = v3;
  }
  else {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3HeaderAppend", 182, 84, 0, "curl_slist_append failed\n", v4, v5, v8);
  }
  if (v6) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

unint64_t sub_10002016C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 * a2;
  if ((*(_DWORD *)(a4 + 8) & 0x80000000) != 0)
  {
    uint64_t v11 = 499;
    curl_easy_getinfo(*(CURL **)a4, CURLINFO_RESPONSE_CODE, &v11);
    int v7 = v11;
    *(_DWORD *)(a4 + 8) = v11;
    if (v7 == 200)
    {
      if (*(_DWORD *)(a4 + 12)) {
        *(void *)(a4 + 24) = *(void *)(a4 + 16);
      }
    }
  }
  unint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = v6 - v8;
  if (v6 >= v8)
  {
    if (v8)
    {
      a1 += v8;
      *(void *)(a4 + 24) = 0;
    }
    else
    {
      uint64_t v9 = v6;
    }
    sub_10001FE2C(a1, v9, 1, *(void *)(a4 + 32));
  }
  else
  {
    *(void *)(a4 + 24) = v8 - v6;
  }
  return v6;
}

uint64_t sub_10002022C(unsigned int a1, char *a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, const char **a7)
{
  uint64_t v14 = *(void *)(a3 + 16);
  unint64_t v60 = 0;
  if (a4) {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  else {
    uint64_t v15 = -1;
  }
  long long v58 = 0uLL;
  uint64_t v59 = 0;
  if (a5)
  {
    long long v58 = *a5;
    uint64_t v59 = *((void *)a5 + 2);
  }
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v16 = curl_easy_init();
  if (!v16)
  {
    uint64_t v26 = __stderrp;
    uint64_t v27 = "curl_easy_init failed\n";
    size_t v28 = 22;
LABEL_42:
    fwrite(v27, v28, 1uLL, v26);
    goto LABEL_43;
  }
  if ((sub_100020104(&v60, "Content-Type:") & 0x80000000) != 0
    || (sub_100020104(&v60, "Transfer-Encoding:") & 0x80000000) != 0
    || (sub_100020104(&v60, "Accept: application/xml") & 0x80000000) != 0
    || (v15 & 0x8000000000000000) == 0 && (sub_10001FF9C(&v60, "Content-Length: %zd", v15) & 0x80000000) != 0)
  {
    goto LABEL_43;
  }
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) + 2792);
  if (v17)
  {
    while ((sub_100020104(&v60, *(const char **)v17) & 0x80000000) == 0)
    {
      uint64_t v17 = *(void *)(v17 + 8);
      if (!v17) {
        goto LABEL_15;
      }
    }
    goto LABEL_43;
  }
LABEL_15:
  if (a7)
  {
    uint64_t v18 = *a7;
    if (*a7)
    {
      long long v19 = a7 + 1;
      while ((sub_100020104(&v60, v18) & 0x80000000) == 0)
      {
        char v20 = *v19++;
        uint64_t v18 = v20;
        if (!v20) {
          goto LABEL_20;
        }
      }
      goto LABEL_43;
    }
  }
LABEL_20:
  if (*(_DWORD *)v14 && (sub_100020860(&v60, a1, a2, v14, a4) & 0x80000000) != 0)
  {
    uint64_t v26 = __stderrp;
    uint64_t v27 = "Failed to sign request\n";
    size_t v28 = 23;
    goto LABEL_42;
  }
  CURLcode v21 = curl_easy_setopt(v16, CURLOPT_URL, a2);
  CURLcode v22 = curl_easy_setopt(v16, CURLOPT_HTTPHEADER, v60);
  CURLcode v23 = curl_easy_setopt(v16, CURLOPT_BUFFERSIZE, 102400);
  BOOL v24 = (curl_easy_setopt(v16, CURLOPT_TCP_KEEPALIVE, 1) | v23 | v22 | v21) == 0;
  if (*(void *)(v14 + 2784) && curl_easy_setopt(v16, CURLOPT_USERAGENT, *(void *)(v14 + 2784))) {
    BOOL v24 = 0;
  }
  if (*(void *)(v14 + 2760) && curl_easy_setopt(v16, CURLOPT_PROXY, *(void *)(v14 + 2760))) {
    BOOL v24 = 0;
  }
  if (*(void *)(v14 + 2768) && curl_easy_setopt(v16, CURLOPT_PINNEDPUBLICKEY, *(void *)(v14 + 2768))) {
    BOOL v24 = 0;
  }
  if (*(void *)(v14 + 2776) && curl_easy_setopt(v16, CURLOPT_PROXY_PINNEDPUBLICKEY, *(void *)(v14 + 2776))) {
    BOOL v24 = 0;
  }
  if (*(void *)(v14 + 2800) && curl_easy_setopt(v16, CURLOPT_PROXYHEADER, *(void *)(v14 + 2800))) {
    BOOL v24 = 0;
  }
  if (a1 != 2)
  {
    if (a1 == 1)
    {
      CURLcode v33 = curl_easy_setopt(v16, CURLOPT_CUSTOMREQUEST, "GET");
      BOOL v25 = (curl_easy_setopt(v16, CURLOPT_FOLLOWLOCATION, 1) | v33) == 0;
    }
    else
    {
      if (a1) {
        goto LABEL_53;
      }
      BOOL v25 = curl_easy_setopt(v16, CURLOPT_PUT, 1) == CURLE_OK;
    }
    if (!v25) {
      BOOL v24 = 0;
    }
LABEL_53:
    if (!a4) {
      goto LABEL_57;
    }
    goto LABEL_54;
  }
  if (curl_easy_setopt(v16, CURLOPT_POST, 1)) {
    BOOL v24 = 0;
  }
  if (!a4)
  {
    CURLcode v31 = curl_easy_setopt(v16, CURLOPT_POSTFIELDS, "");
    unsigned __int32 v32 = curl_easy_setopt(v16, CURLOPT_POSTFIELDSIZE, 0) | v31;
    goto LABEL_55;
  }
LABEL_54:
  CURLcode v34 = curl_easy_setopt(v16, CURLOPT_READFUNCTION, sub_10001FEE4);
  unsigned __int32 v32 = curl_easy_setopt(v16, CURLOPT_READDATA, a4) | v34;
LABEL_55:
  if (v32) {
    BOOL v24 = 0;
  }
LABEL_57:
  if (a5)
  {
    *(void *)&long long v55 = v16;
    uint64_t v57 = a5;
    DWORD2(v55) = -1;
    if (a7)
    {
      uint64_t v35 = *a7;
      if (*a7)
      {
        uint64_t v36 = 0;
        do
        {
          if (!strncmp(v35, "Range:", 6uLL))
          {
            int v39 = *((unsigned __int8 *)v35 + 6);
            uint64_t v38 = v35 + 6;
            char v37 = v39;
            if (v39)
            {
              do
              {
                if (v37 < 0)
                {
                  if (!__maskrune(v37, 0x4000uLL)) {
                    break;
                  }
                }
                else if ((_DefaultRuneLocale.__runetype[v37] & 0x4000) == 0)
                {
                  break;
                }
                int v40 = *(unsigned __int8 *)++v38;
                char v37 = v40;
              }
              while (v40);
            }
            if (!strncmp(v38, "bytes=", 6uLL))
            {
              int v43 = *((unsigned __int8 *)v38 + 6);
              uint64_t v42 = v38 + 6;
              char v41 = v43;
              if (v43)
              {
                do
                {
                  if (v41 < 0)
                  {
                    if (!__maskrune(v41, 0x4000uLL)) {
                      break;
                    }
                  }
                  else if ((_DefaultRuneLocale.__runetype[v41] & 0x4000) == 0)
                  {
                    break;
                  }
                  int v44 = *(unsigned __int8 *)++v42;
                  char v41 = v44;
                }
                while (v44);
              }
              HIDWORD(v55) = 1;
              *(void *)&long long v56 = strtoull(v42, 0, 0);
            }
          }
          uint64_t v35 = a7[++v36];
        }
        while (v35);
      }
    }
    CURLcode v45 = curl_easy_setopt(v16, CURLOPT_WRITEFUNCTION, sub_10002016C);
    if (curl_easy_setopt(v16, CURLOPT_WRITEDATA, &v55) | v45) {
      BOOL v24 = 0;
    }
  }
  if (a6)
  {
    if (curl_easy_setopt(v16, CURLOPT_HEADERFUNCTION, sub_10001FE2C)) {
      BOOL v24 = 0;
    }
    if (curl_easy_setopt(v16, CURLOPT_HEADERDATA, a6)) {
      goto LABEL_86;
    }
  }
  if (!v24)
  {
LABEL_86:
    uint64_t v26 = __stderrp;
    uint64_t v27 = "curl_easy_setopt failed\n";
    size_t v28 = 24;
    goto LABEL_42;
  }
  CURLcode v46 = curl_easy_perform(v16);
  if (v46 == CURLE_OK)
  {
    uint64_t v54 = 499;
    curl_easy_getinfo(v16, CURLINFO_RESPONSE_CODE, &v54);
    if ((unint64_t)(v54 - 400) <= 0xC7)
    {
      if (a1 != 1 || v54 != 416)
      {
        sub_100025BC8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Perform", 401, 84, "HTTP %u\n", v51, v52, v53, v54);
        goto LABEL_43;
      }
      if (a5)
      {
        uint64_t v29 = 0;
        *a5 = v58;
        *((void *)a5 + 2) = v59;
        goto LABEL_44;
      }
    }
    uint64_t v29 = 0;
    goto LABEL_44;
  }
  char v47 = v46;
  curl_easy_strerror(v46);
  sub_100025BC8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Perform", 379, 84, "> %d %s\n", v48, v49, v50, v47);
LABEL_43:
  uint64_t v29 = 0xFFFFFFFFLL;
LABEL_44:
  curl_slist_free_all(v60);
  curl_easy_cleanup(v16);
  return v29;
}

uint64_t sub_100020860(curl_slist **a1, unsigned int a2, char *__s, uint64_t a4, uint64_t a5)
{
  v118[0] = 0;
  v118[1] = 0;
  v119 = 0;
  v116[0] = 0;
  v116[1] = 0;
  v117 = 0;
  v114[0] = 0;
  v114[1] = 0;
  v115 = 0;
  v112[0] = 0;
  v112[1] = 0;
  v113 = 0;
  int v123 = 0;
  memset(__sa, 0, sizeof(__sa));
  size_t v10 = strlen(__s);
  if (v10 < 7) {
    goto LABEL_8;
  }
  if (*(_DWORD *)__s == 1886680168 && *(_DWORD *)(__s + 3) == 791624304)
  {
    uint64_t v19 = 7;
  }
  else
  {
    if (v10 < 8 || *(void *)__s != 0x2F2F3A7370747468)
    {
LABEL_8:
      uint64_t v14 = "Invalid URL";
      __int16 v15 = 486;
LABEL_9:
      int v16 = 0;
LABEL_10:
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Sign", v15, 84, v16, v14, v11, v12, v100);
LABEL_11:
      BOOL v17 = 0;
      goto LABEL_12;
    }
    uint64_t v19 = 8;
  }
  char v20 = &__s[v19];
  CURLcode v21 = strchr(&__s[v19], 47);
  if (!v21)
  {
    uint64_t v14 = "Invalid URL";
    __int16 v15 = 488;
    goto LABEL_9;
  }
  CURLcode v22 = v21;
  v110 = v20;
  unsigned int v108 = a2;
  CURLcode v23 = strchr(v21, 63);
  BOOL v24 = "/";
  v109 = v22;
  if (!v23)
  {
    size_t v30 = strlen(v22);
    if (v30 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v30;
    }
    if (v30) {
      BOOL v24 = v22;
    }
    goto LABEL_32;
  }
  BOOL v25 = v23;
  uint64_t v26 = v23 + 1;
  size_t v27 = strlen(v23 + 1);
  BOOL v28 = v25 == v22;
  if (v25 == v22) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v25 - v22;
  }
  if (!v28) {
    BOOL v24 = v22;
  }
  if (!v27)
  {
LABEL_32:
    size_t v27 = 0;
    uint64_t v26 = "";
  }
  size_t __n = v27;
  v107 = (char *)v26;
  if ((sub_10001FF9C(a1, "X-Amz-Date: %s", (const char *)(a4 + 68)) & 0x80000000) != 0
    || *(unsigned char *)(a4 + 452)
    && (sub_10001FF9C(a1, "X-Amz-Security-Token: %s", (const char *)(a4 + 452)) & 0x80000000) != 0)
  {
    goto LABEL_11;
  }
  __src = (char *)v24;
  if (a5)
  {
    CURLcode v31 = *(const void **)a5;
    uint64_t v32 = *(void *)(a5 + 8);
    int v140 = 0;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    sub_10001FD8C((uint64_t)&v124, v31, v32);
    if (v124)
    {
      uint64_t v33 = v29;
      CURLcode v34 = (unsigned __int8 *)&v124 + 4;
      uint64_t v35 = 2 * v124;
      size_t v36 = v35 | 1;
      char v37 = __str;
      do
      {
        int v38 = *v34++;
        snprintf(v37, v36, "%02x", v38);
        v36 -= 2;
        v37 += 2;
      }
      while (v36 != 1);
LABEL_44:
      uint64_t v29 = v33;
      goto LABEL_46;
    }
  }
  else
  {
    int v140 = 0;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    sub_10001FD8C((uint64_t)&v124, 0, 0);
    if (v124)
    {
      uint64_t v33 = v29;
      int v39 = (unsigned __int8 *)&v124 + 4;
      uint64_t v35 = 2 * v124;
      size_t v40 = v35 | 1;
      char v41 = __str;
      do
      {
        int v42 = *v39++;
        snprintf(v41, v40, "%02x", v42);
        v40 -= 2;
        v41 += 2;
      }
      while (v40 != 1);
      goto LABEL_44;
    }
  }
  uint64_t v35 = 0;
LABEL_46:
  __str[v35] = 0;
  memset_s(&v124, 0x104uLL, 0, 0x104uLL);
  if ((sub_10001FF9C(a1, "X-Amz-Content-Sha256: %s", __str) & 0x80000000) != 0) {
    goto LABEL_11;
  }
  int v43 = *a1;
  if (*a1)
  {
    uint64_t v44 = 0;
    do
    {
      ++v44;
      int v43 = v43->next;
    }
    while (v43);
  }
  else
  {
    uint64_t v44 = 0;
  }
  v111 = calloc(v44 + 1, 8uLL);
  if (!v111)
  {
    int v16 = *__error();
    uint64_t v14 = "malloc";
    __int16 v15 = 520;
    goto LABEL_10;
  }
  v103 = (char *)(a4 + 68);
  size_t v104 = v29;
  v101 = a1;
  uint64_t v102 = a4;
  CURLcode v45 = *a1;
  if (!v45)
  {
    uint64_t v46 = 0;
LABEL_77:
    size_t v55 = v22 - v110;
    size_t v56 = v109 - v110 + 6;
    if (v56 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_82:
      int v60 = *__error();
      __int16 v63 = 554;
      goto LABEL_85;
    }
    uint64_t v57 = (char *)malloc(v56);
    if (!v57) {
      goto LABEL_82;
    }
    long long v58 = &v57[v55];
    v111[v46] = v57;
    v57[4] = 58;
    *(_DWORD *)uint64_t v57 = 1953722216;
    memcpy(v57 + 5, v110, v55);
    v58[5] = 0;
    qsort(v111, v46 + 1, 8uLL, (int (__cdecl *)(const void *, const void *))sub_100021420);
    if (v108 > 3) {
      uint64_t v59 = "???";
    }
    else {
      uint64_t v59 = off_1001934B0[v108];
    }
    size_t v64 = strlen(v59);
    if ((sub_10002142C(v118, v59, v64) & 0x80000000) == 0
      && (sub_10002142C(v118, "\n", 1uLL) & 0x80000000) == 0
      && (sub_10002142C(v118, __src, v104) & 0x80000000) == 0
      && (sub_10002142C(v118, "\n", 1uLL) & 0x80000000) == 0
      && (sub_10002142C(v118, v107, __n) & 0x80000000) == 0
      && (sub_10002142C(v118, "\n", 1uLL) & 0x80000000) == 0)
    {
      if (v46 == -1)
      {
LABEL_102:
        if ((sub_10002142C(v118, "\n", 1uLL) & 0x80000000) == 0)
        {
          v72 = v117;
          size_t v73 = strlen(v117);
          if ((sub_10002142C(v118, v117, v73) & 0x80000000) == 0 && (sub_10002142C(v118, "\n", 1uLL) & 0x80000000) == 0)
          {
            size_t v74 = strlen(__str);
            if ((sub_10002142C(v118, __str, v74) & 0x80000000) == 0
              && (sub_10002142C(v114, "AWS4-HMAC-SHA256\n", 0x11uLL) & 0x80000000) == 0)
            {
              size_t v75 = strlen(v103);
              if ((sub_10002142C(v114, v103, v75) & 0x80000000) == 0
                && (sub_10002142C(v114, "\n", 1uLL) & 0x80000000) == 0)
              {
                CFDataRef v76 = (char *)(v102 + 4);
                size_t v77 = strlen((const char *)(v102 + 4));
                if ((sub_10002142C(v114, (void *)(v102 + 4), v77) & 0x80000000) == 0
                  && (sub_10002142C(v114, "/", 1uLL) & 0x80000000) == 0)
                {
                  v78 = (char *)(v102 + 132);
                  size_t v79 = strlen((const char *)(v102 + 132));
                  if ((sub_10002142C(v114, (void *)(v102 + 132), v79) & 0x80000000) == 0
                    && (sub_10002142C(v114, "/s3/aws4_request\n", 0x11uLL) & 0x80000000) == 0)
                  {
                    int v140 = 0;
                    long long v138 = 0u;
                    long long v139 = 0u;
                    long long v136 = 0u;
                    long long v137 = 0u;
                    long long v134 = 0u;
                    long long v135 = 0u;
                    long long v132 = 0u;
                    long long v133 = 0u;
                    long long v130 = 0u;
                    long long v131 = 0u;
                    long long v128 = 0u;
                    long long v129 = 0u;
                    long long v126 = 0u;
                    long long v127 = 0u;
                    long long v124 = 0u;
                    long long v125 = 0u;
                    CC_LONG v80 = strlen(v119);
                    sub_10001FD8C((uint64_t)&v124, v119, v80);
                    if (v124)
                    {
                      v81 = (unsigned __int8 *)&v124 + 4;
                      uint64_t v82 = 2 * v124;
                      size_t v83 = v82 | 1;
                      v84 = v120;
                      do
                      {
                        int v85 = *v81++;
                        snprintf(v84, v83, "%02x", v85);
                        v83 -= 2;
                        v84 += 2;
                      }
                      while (v83 != 1);
                    }
                    else
                    {
                      uint64_t v82 = 0;
                    }
                    v120[v82] = 0;
                    memset_s(&v124, 0x104uLL, 0, 0x104uLL);
                    size_t v88 = strlen(v120);
                    if ((sub_10002142C(v114, v120, v88) & 0x80000000) == 0)
                    {
                      size_t v89 = strlen(v115);
                      sub_10001FCBC(__sa, (unsigned int *)(v102 + 2500), v115, v89);
                      if (LODWORD(__sa[0]))
                      {
                        v90 = (unsigned __int8 *)__sa + 4;
                        uint64_t v91 = 2 * LODWORD(__sa[0]);
                        size_t v92 = v91 | 1;
                        v93 = v120;
                        do
                        {
                          int v94 = *v90++;
                          snprintf(v93, v92, "%02x", v94);
                          v92 -= 2;
                          v93 += 2;
                        }
                        while (v92 != 1);
                      }
                      else
                      {
                        uint64_t v91 = 0;
                      }
                      v120[v91] = 0;
                      if ((sub_10002142C(v112, "AWS4-HMAC-SHA256 Credential=", 0x1CuLL) & 0x80000000) == 0)
                      {
                        size_t v95 = strlen((const char *)(v102 + 196));
                        if ((sub_10002142C(v112, (void *)(v102 + 196), v95) & 0x80000000) == 0
                          && (sub_10002142C(v112, "/", 1uLL) & 0x80000000) == 0)
                        {
                          size_t v96 = strlen(v76);
                          if ((sub_10002142C(v112, v76, v96) & 0x80000000) == 0
                            && (sub_10002142C(v112, "/", 1uLL) & 0x80000000) == 0)
                          {
                            size_t v97 = strlen(v78);
                            if ((sub_10002142C(v112, v78, v97) & 0x80000000) == 0
                              && (sub_10002142C(v112, "/s3/aws4_request,SignedHeaders=", 0x1FuLL) & 0x80000000) == 0)
                            {
                              size_t v98 = strlen(v72);
                              if ((sub_10002142C(v112, v72, v98) & 0x80000000) == 0
                                && (sub_10002142C(v112, ",Signature=", 0xBuLL) & 0x80000000) == 0)
                              {
                                size_t v99 = strlen(v120);
                                if ((sub_10002142C(v112, v120, v99) & 0x80000000) == 0)
                                {
                                  BOOL v17 = (int)sub_10001FF9C(v101, "Authorization: %s", v113) >= 0;
                                  goto LABEL_119;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        uint64_t v65 = 0;
        while (1)
        {
          unint64_t v66 = (char *)v111[v65];
          unint64_t v67 = strchr(v66, 58);
          if (!v67) {
            break;
          }
          v70 = v67;
          size_t v71 = strlen(v66);
          if ((sub_10002142C(v118, v66, v71) & 0x80000000) != 0
            || (sub_10002142C(v118, "\n", 1uLL) & 0x80000000) != 0
            || v65 && (sub_10002142C(v116, ";", 1uLL) & 0x80000000) != 0
            || (sub_10002142C(v116, v66, v70 - v66) & 0x80000000) != 0)
          {
            goto LABEL_118;
          }
          if (v46 + 1 == ++v65) {
            goto LABEL_102;
          }
        }
        sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Sign", 580, 84, 0, "Invalid header: %s", v68, v69, (char)v66);
      }
    }
LABEL_118:
    BOOL v17 = 0;
LABEL_119:
    ++v46;
    goto LABEL_120;
  }
  uint64_t v46 = 0;
  while (1)
  {
    data = v45->data;
    if (strncasecmp(v45->data, "x-amz-", 6uLL)) {
      goto LABEL_73;
    }
    size_t v48 = strlen(data);
    if (v48 + 1 >= 0x2000000001) {
      break;
    }
    uint64_t v49 = malloc(v48 + 1);
    if (!v49) {
      goto LABEL_84;
    }
    uint64_t v50 = v49;
    v111[v46] = v49;
    if (v48)
    {
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      int v53 = 1;
      while (1)
      {
        __darwin_ct_rune_t v54 = v45->data[v51];
        if (v54 < 0)
        {
          if (!__maskrune(v45->data[v51], 0x4000uLL))
          {
LABEL_64:
            if (v54 == 58) {
              int v53 = 0;
            }
            if (v53) {
              LOBYTE(v54) = __tolower(v54);
            }
            v50[v52++] = v54;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[v54] & 0x4000) == 0)
        {
          goto LABEL_64;
        }
        if (v48 == ++v51) {
          goto LABEL_72;
        }
      }
    }
    uint64_t v52 = 0;
LABEL_72:
    ++v46;
    v50[v52] = 0;
LABEL_73:
    CURLcode v45 = v45->next;
    if (!v45) {
      goto LABEL_77;
    }
  }
  *__error() = 12;
LABEL_84:
  int v60 = *__error();
  __int16 v63 = 538;
LABEL_85:
  sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Sign", v63, 84, v60, "malloc", v61, v62, v100);
  BOOL v17 = 0;
LABEL_120:
  if (v46)
  {
    v86 = (void **)v111;
    do
    {
      v87 = *v86++;
      free(v87);
      --v46;
    }
    while (v46);
  }
  free(v111);
LABEL_12:
  memset_s(__sa, 0x104uLL, 0, 0x104uLL);
  memset_s(v120, 0x80uLL, 0, 0x80uLL);
  memset_s(__str, 0x80uLL, 0, 0x80uLL);
  sub_100021538((uint64_t)v118);
  sub_100021538((uint64_t)v116);
  sub_100021538((uint64_t)v114);
  sub_100021538((uint64_t)v112);
  if (v17) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100021420(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_10002142C(unint64_t *a1, void *__src, size_t __n)
{
  unint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  size_t v8 = v6 + __n + 1;
  BOOL v9 = v8 >= *a1;
  size_t v10 = v8 - *a1;
  if (!v9) {
    size_t v10 = 0;
  }
  unint64_t v11 = (v10 + 255) & 0xFFFFFFFFFFFFFF00;
  unint64_t v12 = v7 + v11;
  __int16 v13 = (char *)a1[2];
  if (v7 + v11 <= v7) {
    goto LABEL_8;
  }
  if (v12 < 0x2000000001)
  {
    uint64_t v14 = (char *)realloc((void *)a1[2], v7 + v11);
    if (!v14)
    {
      free(v13);
      goto LABEL_10;
    }
    a1[2] = (unint64_t)v14;
    *a1 = v12;
    __int16 v13 = v14;
    unint64_t v6 = a1[1];
LABEL_8:
    memcpy(&v13[v6], __src, __n);
    uint64_t result = 0;
    unint64_t v16 = a1[2];
    uint64_t v17 = a1[1] + __n;
    a1[1] = v17;
    *(unsigned char *)(v16 + v17) = 0;
    return result;
  }
  *__error() = 12;
LABEL_10:
  a1[2] = 0;
  uint64_t v18 = __error();
  sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3StringBufferAppend", 431, 84, *v18, "malloc", v19, v20, v21);
  *a1 = 0;
  a1[1] = 0;
  return 0xFFFFFFFFLL;
}

void sub_100021538(uint64_t a1)
{
  id v1 = *(void **)(a1 + 16);
  if (v1) {
    memset_s(*(void **)(a1 + 16), *(void *)a1, 0, *(void *)a1);
  }

  free(v1);
}

uint64_t sub_100021584(void *__s, char *a2, uint64_t a3, uint64_t a4)
{
  if (__s) {
    memset_s(__s, 0x18uLL, 0, 0x18uLL);
  }
  *__s = a4;
  if (a2)
  {
    size_t v8 = strlen(a2);
    size_t v9 = v8 + 1;
    if (v8 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_10:
      __s[1] = 0;
      int v13 = *__error();
      unint64_t v16 = "strdup";
      __int16 v17 = 653;
      goto LABEL_15;
    }
    size_t v10 = malloc(v8 + 1);
    if (!v10) {
      goto LABEL_10;
    }
    unint64_t v11 = v10;
    memcpy(v10, a2, v9);
    __s[1] = v11;
  }
  if (a3) {
    uint64_t v12 = sub_10001F200(a3);
  }
  else {
    uint64_t v12 = (uint64_t)AAS3ContextCreate();
  }
  __s[2] = v12;
  if (v12) {
    return 0;
  }
  int v13 = *__error();
  unint64_t v16 = "malloc";
  __int16 v17 = 656;
LABEL_15:
  sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3StreamBaseInit", v17, 84, v13, v16, v14, v15, v19);
  sub_1000216B4((uint64_t)__s);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000216B4(uint64_t a1)
{
  free(*(void **)(a1 + 8));
  AAS3ContextDestroy(*(void *)(a1 + 16));

  return memset_s((void *)a1, 0x18uLL, 0, 0x18uLL);
}

AAByteStream_impl *AAS3DownloadStreamOpen(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 && *(_DWORD *)a2) {
    return sub_10001F994(a1, a2, a3);
  }
  else {
    return sub_1000230D8(a1, a2, a3, a4);
  }
}

void sub_100021A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100021AB8(uint64_t a1, void *a2, void *a3, id a4)
{
  unint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  +[AAS3DownloadSession completeRequest:WeakRetained data:v9 response:v8 error:v7];
}

void sub_100021B6C(uint64_t a1, uint64_t a2)
{
}

void sub_100021B78(uint64_t a1)
{
}

uint64_t sub_100022F40(void *a1)
{
  if (a1)
  {
    double v2 = (void *)a1[3];
    if (v2)
    {
      a1[3] = 0;
      atomic_store((unint64_t)[v2 bytesDownloaded], a1 + 5);
      [v2 invalidateAndCancel];
    }
    if (*a1 >> 62)
    {
      v10.tv_sec = 0;
      *(void *)&v10.tv_usec = 0;
      gettimeofday(&v10, 0);
      double v3 = (double)v10.tv_sec + (double)v10.tv_usec * 0.000001 - *((double *)a1 + 6);
      fwrite("AAS3DownloadStream (NSURLSession)\n", 0x22uLL, 1uLL, __stderrp);
      fprintf(__stderrp, "%12u max attempts for a request\n", *((_DWORD *)a1 + 14));
      fprintf(__stderrp, "%12u max requests in flight\n", *((_DWORD *)a1 + 16));
      fprintf(__stderrp, "%12.2f initial interval between retries (s)\n", *((float *)a1 + 15));
      uint64_t v4 = __stderrp;
      unint64_t v5 = atomic_load(a1 + 5);
      unint64_t v6 = atomic_load(a1 + 5);
      fprintf(v4, "%12llu bytes downloaded (%.2f MB)\n", v5, (double)v6 * 0.000000953674316);
      id v7 = __stderrp;
      unint64_t v8 = atomic_load(a1 + 5);
      fprintf(v7, "%12.2f MB/s download speed\n", (double)v8 / v3 * 0.000000953674316);
    }
    sub_1000216B4((uint64_t)a1);
    memset_s(a1, 0x48uLL, 0, 0x48uLL);
    free(a1);
  }
  return 0;
}

AAByteStream sub_1000230D8(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  AAByteStream v8 = AACustomByteStreamOpen();
  id v9 = (double *)malloc(0x48uLL);
  timeval v10 = v9;
  if (!v9 || (memset_s(v9, 0x48uLL, 0, 0x48uLL), !v8))
  {
    perror("malloc");
    goto LABEL_12;
  }
  if ((sub_100021584(v10, a1, a2, a3) & 0x80000000) != 0)
  {
    char v19 = "s3StreamBaseInit";
    __int16 v20 = 697;
LABEL_11:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamURLSession.m", (uint64_t)"s3DownloadStreamOpen_urlsession", v20, 121, 0, v19, v11, v12, v22.tv_sec);
LABEL_12:
    free(v8);
    sub_100022F40(v10);
    return 0;
  }
  v22.tv_sec = 0;
  *(void *)&v22.tv_usec = 0;
  gettimeofday(&v22, 0);
  v10[6] = (double)v22.tv_sec + (double)v22.tv_usec * 0.000001;
  v10[7] = 32.0;
  if (a4) {
    int v13 = a4;
  }
  else {
    int v13 = 16;
  }
  *((_DWORD *)v10 + 16) = v13;
  uint64_t v14 = [AAS3DownloadSession alloc];
  uint64_t v15 = +[NSString stringWithUTF8String:a1];
  unint64_t v16 = +[NSURL URLWithString:v15];
  LODWORD(v17) = *((_DWORD *)v10 + 15);
  uint64_t v18 = [(AAS3DownloadSession *)v14 initWithURL:v16 streamBase:v10 maxAttempts:*((unsigned int *)v10 + 14) pauseInterval:*((unsigned int *)v10 + 16) maxRequestsInFlight:v17];

  if (!v18)
  {
    char v19 = "creating session";
    __int16 v20 = 710;
    goto LABEL_11;
  }
  *((void *)v10 + 3) = v18;
  *(void *)AAByteStream v8 = v10;
  *((void *)v8 + 1) = sub_100022F40;
  *((void *)v8 + 4) = sub_1000232E8;
  *((void *)v8 + 2) = sub_100023370;
  *((void *)v8 + 10) = sub_10002337C;
  return v8;
}

id sub_1000232E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*a1 >> 62 == 3) {
    fprintf(__stderrp, "NSURLSession read to buffer nbyte=%zx offset=%llx\n", a3, a4);
  }
  AAByteStream v8 = (void *)a1[3];

  return _[v8 readToBuffer:a2 size:a3 atOffset:a4];
}

id sub_100023370(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_1000232E8(a1, a2, a3, atomic_fetch_add(a1 + 4, a3));
}

id sub_10002337C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*a1 >> 62 == 3) {
    fprintf(__stderrp, "NSURLSession read to stream nbyte=%zx offset=%llx\n", a3, a4);
  }
  AAByteStream v8 = (void *)a1[3];

  return _[v8 readToAsyncByteStream:a2 size:a3 atOffset:a4];
}

uint64_t sub_100023404(char **a1, uint64_t a2)
{
  uint64_t v4 = malloc(0x58uLL);
  uint64_t v5 = (uint64_t)v4;
  if (!v4)
  {
    int v7 = *__error();
    timeval v10 = "malloc";
    __int16 v11 = 308;
LABEL_12:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextCreate", v11, 125, v7, v10, v8, v9, v16);
    goto LABEL_13;
  }
  memset_s(v4, 0x58uLL, 0, 0x58uLL);
  *(void *)(v5 + 80) = a2;
  if (a1)
  {
    if ((sub_1000254D4(v5, 0, *a1, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0
      || (sub_1000254D4(v5, 1u, a1[1], "KNOX_KEYTAB_FILE") & 0x80000000) != 0
      || (sub_1000254D4(v5, 2u, a1[2], "KNOX_DAW_TOKEN") & 0x80000000) != 0
      || (sub_1000254D4(v5, 3u, a1[3], "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0
      || (sub_1000254D4(v5, 4u, a1[4], "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0
      || (sub_1000254D4(v5, 5u, a1[5], "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0
      || (sub_1000254D4(v5, 8u, a1[6], "KNOX_USER_AGENT") & 0x80000000) != 0)
    {
      goto LABEL_13;
    }
    unint64_t v6 = a1[7];
  }
  else
  {
    if ((sub_1000254D4(v5, 0, 0, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_1000254D4(v5, 1u, 0, "KNOX_KEYTAB_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_1000254D4(v5, 2u, 0, "KNOX_DAW_TOKEN") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_1000254D4(v5, 3u, 0, "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_1000254D4(v5, 4u, 0, "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_1000254D4(v5, 5u, 0, "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    int v13 = sub_1000254D4(v5, 8u, 0, "KNOX_USER_AGENT");
    unint64_t v6 = 0;
    if (v13 < 0) {
      goto LABEL_13;
    }
  }
  if ((sub_1000254D4(v5, 9u, v6, "KNOX_PROXY") & 0x80000000) != 0)
  {
LABEL_13:
    sub_1000243D4((char *)v5);
    return 0;
  }
  if (!*(void *)(v5 + 16))
  {
    uint64_t v15 = *(char **)(v5 + 24);
    if (v15)
    {
      if ((sub_1000255B8(v5, 2u, v15) & 0x80000000) != 0)
      {
        timeval v10 = "loading daw token";
        __int16 v11 = 324;
        goto LABEL_31;
      }
    }
  }
  if (!*(void *)(v5 + 32))
  {
    uint64_t v14 = *(char **)(v5 + 40);
    if (v14)
    {
      if ((sub_1000255B8(v5, 4u, v14) & 0x80000000) != 0)
      {
        timeval v10 = "loading westgate token";
        __int16 v11 = 327;
LABEL_31:
        int v7 = 0;
        goto LABEL_12;
      }
    }
  }
  return v5;
}

uint64_t sub_1000236CC(uint64_t a1, char *__s)
{
  if (*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    goto LABEL_4;
  }
  size_t v11 = strlen(__s);
  size_t v12 = v11 + 200;
  if (v11 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_72:
    size_t v64 = __error();
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetServiceName", 345, 125, *v64, "malloc", v65, v66, v115);
    size_t v27 = 0;
    int v38 = 0;
    size_t v30 = 0;
LABEL_101:
    sub_10002630C(v38);
    AAByteStreamClose(v30);
    free(v27);
    BOOL v24 = "getting service name and realm";
    __int16 v25 = 649;
    goto LABEL_102;
  }
  uint64_t v26 = malloc(v11 + 200);
  if (!v26) {
    goto LABEL_72;
  }
  size_t v27 = v26;
  size_t v30 = (AAByteStream_impl *)AATempStreamOpen();
  if (!v30)
  {
    v87 = "AATempStreamOpen";
    __int16 v88 = 348;
LABEL_94:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetServiceName", v88, 125, 0, v87, v28, v29, v115);
    int v38 = 0;
    goto LABEL_101;
  }
  snprintf((char *)v27, v12, "https://%s/westgate/appinfo", __s);
  if ((sub_100024428(a1, 1u, (char *)v27, 0, (uint64_t)v30) & 0x80000000) != 0)
  {
    char v115 = (char)v27;
    v87 = "Knox request failed: %s";
    __int16 v88 = 351;
    goto LABEL_94;
  }
  AAByteStreamSeek(v30, 0, 0);
  CURLcode v31 = (void **)sub_100026220((uint64_t)v30);
  int v38 = v31;
  if (!v31)
  {
    size_t v99 = "AAJSONInputStreamOpen";
    __int16 v100 = 356;
    goto LABEL_100;
  }
  uint64_t v120 = 0;
  *(_OWORD *)__sa = 0u;
  long long v119 = 0u;
  *(_OWORD *)__s1 = 0u;
  if ((sub_100026368((uint64_t)v31, (int *)__s1, v32, v33, v34, v35, v36, v37) & 0x80000000) != 0)
  {
LABEL_95:
    size_t v99 = "parsing JSON";
    __int16 v100 = 363;
    goto LABEL_100;
  }
  int v43 = 0;
  int v44 = 0;
  while (1)
  {
    if (LODWORD(__s1[0]) < 2)
    {
      if (v44 == 1 && __s1[1] && !strcmp(__s1[1], "idms")) {
        int v43 = 1;
      }
      ++v44;
      goto LABEL_41;
    }
    if (LODWORD(__s1[0]) != 2)
    {
      if (LODWORD(__s1[0]) == 3)
      {
        if (v43)
        {
          CURLcode v45 = __s1[1];
          if (__s1[1])
          {
            if (strcmp(__s1[1], "realm"))
            {
LABEL_33:
              if (!strcmp(v45, "serviceName") && (sub_1000254D4(a1, 7u, __sa[0], 0) & 0x80000000) != 0)
              {
                size_t v99 = "serviceName";
                __int16 v100 = 378;
                goto LABEL_100;
              }
              goto LABEL_41;
            }
            if ((sub_1000254D4(a1, 6u, __sa[0], 0) & 0x80000000) == 0)
            {
              CURLcode v45 = __s1[1];
              goto LABEL_33;
            }
            size_t v99 = "realm";
            __int16 v100 = 377;
LABEL_100:
            sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetServiceName", v100, 125, 0, v99, v36, v37, v116);
            goto LABEL_101;
          }
        }
      }
LABEL_41:
      if (!v44) {
        break;
      }
      goto LABEL_42;
    }
    int v43 = 0;
    if (!--v44) {
      break;
    }
LABEL_42:
    uint64_t v120 = 0;
    *(_OWORD *)__sa = 0u;
    long long v119 = 0u;
    *(_OWORD *)__s1 = 0u;
    if ((sub_100026368((uint64_t)v38, (int *)__s1, v39, v40, v41, v42, v36, v37) & 0x80000000) != 0) {
      goto LABEL_95;
    }
  }
  if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56))
  {
    size_t v99 = "could not parse service name and realm";
    __int16 v100 = 389;
    goto LABEL_100;
  }
  sub_10002630C(v38);
  AAByteStreamClose(v30);
  free(v27);
  __s1[0] = 0;
  __s1[1] = 0;
  __sa[0] = 0;
  size_t v48 = *(const char **)(a1 + 48);
  if (!v48 || (uint64_t v49 = *(const char **)(a1 + 56)) == 0)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", 411, 125, 0, "missing service name or realm", v46, v47, v116);
    uint64_t v52 = 0;
LABEL_111:
    int v93 = 0;
    __darwin_ct_rune_t v54 = 0;
    goto LABEL_156;
  }
  uint64_t v50 = *(void *)(a1 + 80) >> 62;
  if (v50)
  {
    fwrite("  obtaining a DAW token from the appleconnect CLI\n", 0x32uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  - realm: %s\n", v48);
    fprintf(__stderrp, "  - service name: %s\n", v49);
  }
  uint64_t v51 = (char *)malloc(0x4000uLL);
  uint64_t v52 = v51;
  if (!v51)
  {
    __s1[0] = 0;
    __s1[1] = 0;
    __sa[0] = 0;
    v90 = __error();
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", 420, 125, *v90, "malloc", v91, v92, v116);
    goto LABEL_111;
  }
  __s1[1] = (char *)0x4000;
  __sa[0] = v51;
  int v53 = (char *)malloc(0x4000uLL);
  __darwin_ct_rune_t v54 = v53;
  if (!v53)
  {
    int v94 = *__error();
    size_t v97 = "malloc";
    __int16 v98 = 422;
LABEL_115:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", v98, 125, v94, v97, v95, v96, v116);
    int v93 = 0;
    goto LABEL_156;
  }
  snprintf(v53, 0x4000uLL, "/usr/local/bin/appleconnect serviceTicket --show-signIn-dialog --dawToken --realm %s --serviceName %s", v48, v49);
  if (*(void *)a1)
  {
    if (v50) {
      fprintf(__stderrp, "  - account: %s\n", *(const char **)a1);
    }
    __strlcat_chk();
    __strlcat_chk();
  }
  if (*(void *)(a1 + 8))
  {
    if (v50) {
      fprintf(__stderrp, "  - keytab file: %s\n", *(const char **)(a1 + 8));
    }
    __strlcat_chk();
    __strlcat_chk();
  }
  size_t v55 = popen(v54, "r");
  if (!v55)
  {
    int v94 = *__error();
    char v116 = (char)v54;
    size_t v97 = "%s";
    __int16 v98 = 444;
    goto LABEL_115;
  }
  size_t v56 = v55;
  uint64_t v57 = 0;
  while (1)
  {
    size_t v58 = fread(&v57[(void)v52], 1uLL, 0x4000 - (void)v57, v56);
    if (v58)
    {
      unint64_t v61 = (unint64_t)&v57[v58];
      if (__CFADD__(v57, v58) || v61 > 0x4000)
      {
        __s1[0] = v57;
        uint64_t v62 = "invalid read";
        __int16 v63 = 454;
        goto LABEL_153;
      }
      goto LABEL_70;
    }
    if (feof(v56)) {
      break;
    }
    if (ferror(v56))
    {
      __s1[0] = v57;
      int v109 = *__error();
      uint64_t v62 = "fread";
      __int16 v63 = 452;
      goto LABEL_154;
    }
    unint64_t v61 = (unint64_t)v57;
LABEL_70:
    uint64_t v57 = (char *)v61;
    if (v61 == 0x4000)
    {
      __s1[0] = (char *)0x4000;
      uint64_t v62 = "token is too long";
      __int16 v63 = 447;
      goto LABEL_153;
    }
  }
  __s1[0] = v57;
  if (v57)
  {
    v101 = (char *)v52 - 1;
    do
    {
      uint64_t v102 = v57[(void)v101];
      if (v57[(void)v101] < 0) {
        __uint32_t v103 = __maskrune(v102, 0x4000uLL);
      }
      else {
        __uint32_t v103 = _DefaultRuneLocale.__runetype[v102] & 0x4000;
      }
      if (!v103) {
        break;
      }
      --v57;
    }
    while (v57);
    __s1[0] = v57;
  }
  unint64_t v104 = (unint64_t)(v57 + 1);
  uint64_t v105 = v57 == (char *)-1;
  uint64_t v106 = v105 << 63 >> 63;
  if (v106 != v105 || v106 < 0 || (v104 & 0x8000000000000000) != 0) {
    goto LABEL_152;
  }
  if (v104 <= 0x4000)
  {
    v110 = __sa[0];
LABEL_140:
    __s1[0] = v57 + 1;
    v57[(void)v52] = 0;
    if ((unint64_t)(v57 + 1) >= 6
      && (*(_DWORD *)v110 == 1415004484 ? (BOOL v112 = *((unsigned __int16 *)v110 + 2) == 20043) : (BOOL v112 = 0), v112))
    {
      if ((sub_1000254D4(a1, 2u, v110, 0) & 0x80000000) == 0)
      {
        int v93 = 1;
        goto LABEL_147;
      }
      v113 = "daw token";
      __int16 v114 = 463;
    }
    else
    {
      v113 = "invalid token format";
      __int16 v114 = 460;
    }
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", v114, 125, 0, v113, v59, v60, v115);
    int v93 = 0;
LABEL_147:
    uint64_t v52 = v110;
    goto LABEL_155;
  }
  for (size_t i = 0x4000; i < v104; i += v108)
  {
    size_t v108 = i >> 1;
    if ((i & (i >> 1)) != 0) {
      size_t v108 = i & (i >> 1);
    }
  }
  if (i >= 0x2000000001)
  {
    *__error() = 12;
    goto LABEL_151;
  }
  v111 = (char *)realloc(v52, i);
  if (v111)
  {
    v110 = v111;
    __s1[1] = (char *)i;
    __sa[0] = v111;
    uint64_t v52 = v111;
    goto LABEL_140;
  }
  free(v52);
LABEL_151:
  uint64_t v52 = 0;
  __s1[0] = 0;
  __s1[1] = 0;
  __sa[0] = 0;
LABEL_152:
  uint64_t v62 = "token is too long";
  __int16 v63 = 459;
LABEL_153:
  int v109 = 0;
LABEL_154:
  sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", v63, 125, v109, v62, v59, v60, v115);
  int v93 = 0;
LABEL_155:
  pclose(v56);
LABEL_156:
  free(v54);
  free(v52);
  memset_s(__s1, 0x18uLL, 0, 0x18uLL);
  if (!v93)
  {
    BOOL v24 = "getting DAW token";
    __int16 v25 = 650;
    goto LABEL_102;
  }
  if (*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = *(const char **)(a1 + 16);
  if (!v5)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", 486, 125, 0, "missing host or DAW token", v22, v23, v115);
    __int16 v20 = 0;
    uint64_t v8 = 0;
LABEL_17:
    char v21 = 0;
    double v17 = 0;
LABEL_18:
    sub_10002630C(v20);
    AAByteStreamClose(v8);
    free(v17);
    free(v21);
    BOOL v24 = "getting Westgate token";
    __int16 v25 = 655;
LABEL_102:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextResolveWestgateToken", v25, 125, 0, v24, v22, v23, v115);
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  if (*(void *)(a1 + 80) >> 62) {
    fwrite("  requesting Westgate token from the Knox server\n", 0x31uLL, 1uLL, __stderrp);
  }
  uint64_t v8 = (AAByteStream_impl *)AATempStreamOpen();
  if (!v8)
  {
    int v13 = "AATempStreamOpen";
    __int16 v14 = 491;
    int v15 = 0;
LABEL_16:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", v14, 125, v15, v13, v6, v7, v115);
    __int16 v20 = 0;
    goto LABEL_17;
  }
  size_t v9 = strlen(__s);
  size_t v10 = v9 + 200;
  if (v9 + 200 >= 0x2000000001)
  {
    *__error() = 12;
    goto LABEL_15;
  }
  char v16 = malloc(v9 + 200);
  if (!v16)
  {
LABEL_15:
    int v15 = *__error();
    int v13 = "malloc";
    __int16 v14 = 495;
    goto LABEL_16;
  }
  double v17 = v16;
  size_t v18 = strlen(v5);
  size_t v19 = v18 + 200;
  if (v18 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_91:
    v84 = __error();
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", 498, 125, *v84, "malloc", v85, v86, v115);
    __int16 v20 = 0;
    char v21 = 0;
    goto LABEL_18;
  }
  unint64_t v67 = (char *)malloc(v18 + 200);
  if (!v67) {
    goto LABEL_91;
  }
  char v21 = v67;
  snprintf(v67, v19, "Authorization: Bearer %s", v5);
  v121[0] = v21;
  v121[1] = 0;
  snprintf((char *)v17, v10, "https://%s/westgate/token", __s);
  if ((sub_100024428(a1, 2u, (char *)v17, v121, (uint64_t)v8) & 0x80000000) != 0)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", 505, 125, 0, "Knox request failed: %s", v68, v69, (char)v17);
    __int16 v20 = 0;
    goto LABEL_18;
  }
  AAByteStreamSeek(v8, 0, 0);
  v70 = (void **)sub_100026220((uint64_t)v8);
  __int16 v20 = v70;
  if (!v70)
  {
    uint64_t v82 = "AAJSONInputStreamOpen";
    __int16 v83 = 510;
    goto LABEL_106;
  }
  uint64_t v120 = 0;
  *(_OWORD *)__sa = 0u;
  long long v119 = 0u;
  *(_OWORD *)__s1 = 0u;
  if ((sub_100026368((uint64_t)v70, (int *)__s1, v71, v72, v73, v74, v75, v76) & 0x80000000) != 0)
  {
LABEL_90:
    uint64_t v82 = "parsing JSON";
    __int16 v83 = 516;
LABEL_106:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", v83, 125, 0, v82, v75, v76, v115);
    goto LABEL_18;
  }
  int v81 = 0;
  while (1)
  {
    if (LODWORD(__s1[0]) < 2)
    {
      ++v81;
      goto LABEL_88;
    }
    if (LODWORD(__s1[0]) == 2) {
      break;
    }
    if (LODWORD(__s1[0]) != 3 || v81 != 1 || !__s1[1]) {
      goto LABEL_88;
    }
    if (!strcasecmp(__s1[1], "password") && (sub_1000254D4(a1, 4u, __sa[0], 0) & 0x80000000) != 0)
    {
      uint64_t v82 = "password";
      __int16 v83 = 529;
      goto LABEL_106;
    }
    int v81 = 1;
LABEL_89:
    uint64_t v120 = 0;
    *(_OWORD *)__sa = 0u;
    long long v119 = 0u;
    *(_OWORD *)__s1 = 0u;
    if ((sub_100026368((uint64_t)v20, (int *)__s1, v77, v78, v79, v80, v75, v76) & 0x80000000) != 0) {
      goto LABEL_90;
    }
  }
  --v81;
LABEL_88:
  if (v81) {
    goto LABEL_89;
  }
  size_t v89 = *(const char **)(a1 + 32);
  if (!v89 || strncmp(v89, "WGTKN", 5uLL))
  {
    uint64_t v82 = "invalid/missing token";
    __int16 v83 = 537;
    goto LABEL_106;
  }
  sub_10002630C(v20);
  AAByteStreamClose(v8);
  free(v17);
  free(v21);
  if (!*(void *)(a1 + 32))
  {
    BOOL v24 = "invalid Westgate token";
    __int16 v25 = 658;
    goto LABEL_102;
  }
  return 0;
}

void sub_1000243D4(char *a1)
{
  if (a1)
  {
    for (uint64_t i = 0; i != 80; i += 8)
      free(*(void **)&a1[i]);
    free(a1);
  }
}

uint64_t sub_100024428(uint64_t a1, unsigned int a2, char *a3, const char **a4, uint64_t a5)
{
  v77[0] = 0;
  v77[1] = 0;
  long long v75 = 0uLL;
  uint64_t v76 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  size_t v10 = AAS3ContextCreate();
  uint64_t v78 = (uint64_t)v10;
  if (!v10)
  {
    uint64_t v57 = "AAS3ContextCreate";
    __int16 v58 = 189;
LABEL_41:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", v58, 125, 0, v57, v11, v12, v68);
    uint64_t v22 = 0;
LABEL_42:
    uint64_t v29 = 0;
    uint64_t v28 = 0;
LABEL_43:
    uint64_t v59 = 0xFFFFFFFFLL;
    goto LABEL_44;
  }
  uint64_t v13 = (uint64_t)v10;
  __int16 v14 = malloc(0x18uLL);
  int v15 = v14;
  if (!v14)
  {
    uint64_t v22 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
    goto LABEL_40;
  }
  memset_s(v14, 0x18uLL, 0, 0x18uLL);
  char v16 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
  uint64_t v22 = v16;
  if (!v16)
  {
LABEL_40:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamOpen", 165, 125, 0, "malloc", v20, v21, v68);
    free(v15);
    free(v22);
    uint64_t v57 = "open page stream";
    __int16 v58 = 192;
    goto LABEL_41;
  }
  *int v15 = a5;
  void *v16 = (uint64_t (*)(int *))v15;
  v16[1] = sub_1000257E0;
  v16[3] = (uint64_t (*)(int *))sub_10002587C;
  if ((AAS3ContextSetFieldString(v13, 5, *(char **)(a1 + 64), v17, v18, v19, v20, v21) & 0x80000000) != 0)
  {
    __int16 v61 = 194;
LABEL_47:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", v61, 125, 0, "setup context", v26, v27, v68);
    goto LABEL_42;
  }
  if ((AAS3ContextSetFieldString(v13, 0, *(char **)(a1 + 72), v23, v24, v25, v26, v27) & 0x80000000) != 0)
  {
    __int16 v61 = 195;
    goto LABEL_47;
  }
  uint64_t v28 = (char *)malloc(0x800uLL);
  if (!v28)
  {
    int v62 = *__error();
    __int16 v63 = 200;
LABEL_53:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", v63, 125, v62, "malloc", v55, v56, v68);
    uint64_t v29 = 0;
    goto LABEL_43;
  }
  uint64_t v29 = 0;
  size_t v30 = "link:";
  v70 = a3;
  uint64_t v71 = a4;
  while (2)
  {
    memset_s(v28, 0x800uLL, 0, 0x800uLL);
    long long v75 = 0uLL;
    uint64_t v76 = v22;
    uint64_t v72 = v28;
    uint64_t v73 = 2047;
    uint64_t v33 = a3;
    uint64_t v74 = 0;
    if (v29)
    {
      if (v22[1] == sub_1000257E0)
      {
        uint64_t v34 = *v22;
        if (*((int *)*v22 + 2) < 1 || !*((_DWORD *)v34 + 4)) {
          goto LABEL_15;
        }
        if (!*((_DWORD *)v34 + 5) || AAByteStreamWrite(*(AAByteStream *)v34, ",", 1uLL) == 1)
        {
          *(void *)((char *)v34 + 12) = 1;
LABEL_15:
          *((_DWORD *)v34 + 5) = 0;
          uint64_t v33 = v29;
          goto LABEL_16;
        }
        size_t v64 = "writing ','";
        __int16 v65 = 146;
      }
      else
      {
        size_t v64 = "invalid stream";
        __int16 v65 = 132;
      }
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamEndPage", v65, 125, 0, v64, v31, v32, v68);
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 209, 125, 0, "page stream next page", v66, v67, v69);
      goto LABEL_43;
    }
LABEL_16:
    if ((sub_10002022C(a2, v33, (uint64_t)v77, 0, &v75, (uint64_t)&v72, a4) & 0x80000000) != 0)
    {
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 212, 125, 0, "request: %s", v35, v36, (char)v33);
      goto LABEL_43;
    }
    free(v29);
    size_t v37 = strlen(v28);
    if (v37)
    {
      unint64_t v38 = v37;
      uint64_t v29 = 0;
      unint64_t v39 = 0;
      do
      {
        if (v38 <= v39 + 1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v38;
        }
        unint64_t v41 = v39;
        while (v28[v41] != 10)
        {
          if (v40 == ++v41)
          {
            unint64_t v41 = v40;
            break;
          }
        }
        v28[v41] = 0;
        if (v41 - v39 >= 5)
        {
          uint64_t v42 = &v28[v39];
          if (!strncmp(&v28[v39], v30, 5uLL))
          {
            int v43 = v30;
            int v44 = strchr(v42, 60);
            CURLcode v45 = strrchr(v42, 62);
            if (!v44 || (size_t v48 = v45) == 0 || v45 <= v44)
            {
              sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 231, 125, 0, "invalid link header (1): %s", v46, v47, (char)v42);
              goto LABEL_43;
            }
            if (!strstr(v45, "rel=\"next\""))
            {
              sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 233, 125, 0, "invalid link header (2): %s", v49, v50, (char)v42);
              goto LABEL_43;
            }
            *size_t v48 = 0;
            uint64_t v51 = v44 + 1;
            size_t v52 = strlen(v51);
            size_t v53 = v52 + 1;
            if (v52 + 1 >= 0x2000000001)
            {
              *__error() = 12;
LABEL_52:
              __int16 v63 = 236;
              int v62 = 0;
              goto LABEL_53;
            }
            __darwin_ct_rune_t v54 = (char *)malloc(v52 + 1);
            if (!v54) {
              goto LABEL_52;
            }
            uint64_t v29 = v54;
            memcpy(v54, v51, v53);
            size_t v30 = v43;
          }
        }
        unint64_t v39 = v41 + 1;
      }
      while (v41 + 1 < v38);
      a3 = v70;
      a4 = v71;
      if (v29) {
        continue;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    break;
  }
  uint64_t v59 = 0;
LABEL_44:
  free(v29);
  free(v28);
  AAByteStreamClose((AAByteStream)v22);
  AAS3ContextDestroy(v78);
  return v59;
}

uint64_t sub_10002498C(uint64_t a1, const char *a2, const char *a3, const char *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(char **)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 80);
  *a5 = 0;
  *a6 = 0;
  if (!v8)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 568, 125, 0, "missing Westgate token", a7, a8, v64);
    uint64_t v21 = 0;
    uint64_t v18 = 0;
LABEL_14:
    uint64_t v27 = 0;
    goto LABEL_15;
  }
  if (v9 >> 62) {
    fwrite("  requesting decryption components from the Knox server\n", 0x38uLL, 1uLL, __stderrp);
  }
  uint64_t v18 = (AAByteStream_impl *)AATempStreamOpen();
  if (!v18)
  {
    uint64_t v22 = "AATempStreamOpen";
    __int16 v23 = 573;
    int v24 = 0;
LABEL_13:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", v23, 125, v24, v22, v16, v17, v64);
    uint64_t v21 = 0;
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  size_t v19 = strlen(a2);
  size_t v20 = v19 + 200;
  if (v19 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_12:
    int v24 = *__error();
    uint64_t v22 = "malloc";
    __int16 v23 = 577;
    goto LABEL_13;
  }
  __str = (char *)malloc(v19 + 200);
  if (!__str) {
    goto LABEL_12;
  }
  size_t v25 = strlen(v8);
  size_t v26 = v25 + 200;
  if (v25 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_54:
    uint64_t v59 = __error();
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 580, 125, *v59, "malloc", v60, v61, v64);
    uint64_t v21 = 0;
    uint64_t v8 = 0;
    uint64_t v28 = 0xFFFFFFFFLL;
    uint64_t v27 = __str;
    goto LABEL_16;
  }
  size_t v30 = (char *)malloc(v25 + 200);
  if (!v30) {
    goto LABEL_54;
  }
  __int16 v65 = v8;
  uint64_t v8 = v30;
  snprintf(v30, v26, "Authorization: Bearer %s", v65);
  v76[0] = v8;
  v76[1] = 0;
  uint64_t v67 = a4;
  uint64_t v27 = __str;
  snprintf(__str, v20, "https://%s/spaces/%s/files/%s/decryption-components", a2, a3, v67);
  if ((sub_100024428(a1, 2u, __str, v76, (uint64_t)v18) & 0x80000000) != 0)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 587, 125, 0, "Knox request failed: %s", v31, v32, (char)__str);
    uint64_t v21 = 0;
    goto LABEL_15;
  }
  AAByteStreamSeek(v18, 0, 0);
  uint64_t v33 = (void **)sub_100026220((uint64_t)v18);
  uint64_t v21 = v33;
  if (!v33)
  {
    int v62 = "AAJSONInputStreamOpen";
    __int16 v63 = 592;
    goto LABEL_62;
  }
  uint64_t v75 = 0;
  *(_OWORD *)__s = 0u;
  long long v74 = 0u;
  *(_OWORD *)__s1 = 0u;
  if ((sub_100026368((uint64_t)v33, (int *)__s1, v34, v35, v36, v37, v38, v39) & 0x80000000) != 0)
  {
LABEL_56:
    int v62 = "parsing JSON";
    __int16 v63 = 600;
    goto LABEL_62;
  }
  int v44 = 0;
  int v45 = 0;
  int v46 = 0;
  v70 = v8;
  while (LODWORD(__s1[0]) >= 2)
  {
    if (LODWORD(__s1[0]) == 2)
    {
      int v45 = 0;
      int v44 = 0;
      --v46;
      goto LABEL_47;
    }
    if (LODWORD(__s1[0]) != 3) {
      goto LABEL_47;
    }
    uint64_t v47 = __s1[1];
    if (v46 == 2 && v45 && __s1[1] && !strcmp(__s1[1], "key"))
    {
      int v68 = v44;
      size_t v48 = __s[0];
      if (!__s[0]) {
        goto LABEL_64;
      }
      size_t v49 = strlen(__s[0]);
      size_t v50 = v49 + 1;
      if (v49 + 1 >= 0x2000000001)
      {
        *__error() = 12;
LABEL_64:
        *a6 = 0;
        sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 618, 125, 0, "key", v38, v39, v66);
        uint64_t v8 = v70;
        uint64_t v27 = __str;
        goto LABEL_15;
      }
      uint64_t v51 = malloc(v49 + 1);
      if (!v51) {
        goto LABEL_64;
      }
      size_t v52 = v51;
      memcpy(v51, v48, v50);
      *a6 = v52;
      uint64_t v27 = __str;
      int v44 = v68;
    }
    if (v46 != 2 || !v44 || !v47)
    {
      uint64_t v8 = v70;
      goto LABEL_47;
    }
    if (!strcmp(v47, "uri"))
    {
      int v69 = v44;
      __darwin_ct_rune_t v54 = __s[0];
      uint64_t v8 = v70;
      if (!__s[0]) {
        goto LABEL_66;
      }
      size_t v55 = strlen(__s[0]);
      size_t v56 = v55 + 1;
      if (v55 + 1 >= 0x2000000001)
      {
        *__error() = 12;
LABEL_66:
        *a5 = 0;
        sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 623, 125, 0, "uri", v38, v39, v66);
        uint64_t v27 = __str;
        goto LABEL_15;
      }
      uint64_t v57 = malloc(v55 + 1);
      if (!v57) {
        goto LABEL_66;
      }
      __int16 v58 = v57;
      memcpy(v57, v54, v56);
      *a5 = v58;
      int v46 = 2;
      uint64_t v27 = __str;
      int v44 = v69;
    }
    else
    {
      int v46 = 2;
      uint64_t v8 = v70;
    }
LABEL_48:
    uint64_t v75 = 0;
    *(_OWORD *)__s = 0u;
    long long v74 = 0u;
    *(_OWORD *)__s1 = 0u;
    if ((sub_100026368((uint64_t)v21, (int *)__s1, v40, v41, v42, v43, v38, v39) & 0x80000000) != 0) {
      goto LABEL_56;
    }
  }
  if (v46 == 1)
  {
    size_t v53 = __s1[1];
    if (__s1[1])
    {
      if (!strcmp(__s1[1], "encryption")) {
        int v45 = 1;
      }
      if (!strcmp(v53, "location")) {
        int v44 = 1;
      }
    }
  }
  ++v46;
LABEL_47:
  if (v46) {
    goto LABEL_48;
  }
  if (*a5 && *a6)
  {
    uint64_t v28 = 0;
    goto LABEL_16;
  }
  int v62 = "invalid/missing decryption components";
  __int16 v63 = 631;
LABEL_62:
  sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", v63, 125, 0, v62, v38, v39, v66);
LABEL_15:
  uint64_t v28 = 0xFFFFFFFFLL;
LABEL_16:
  sub_10002630C(v21);
  AAByteStreamClose(v18);
  free(v27);
  free(v8);
  return v28;
}

uint64_t AAS3KnoxResolveURL(uint64_t a1, char **a2, void *a3, size_t a4, unsigned char *a5, size_t *a6, unint64_t a7)
{
  __s = 0;
  if (strncmp((const char *)a1, "knox://", 7uLL))
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 854, 125, 0, "invalid Knox scheme: %s", v14, v15, a1);
LABEL_13:
    __int16 v23 = 0;
    int v24 = 0;
    size_t v20 = 0;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 7;
  uint64_t v17 = strchr((char *)(a1 + 7), 47);
  size_t v20 = v17;
  if (!v17)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 859, 125, 0, "invalid Knox host: %s", v18, v19, a1);
    __int16 v23 = 0;
    int v24 = 0;
LABEL_14:
    uint64_t v32 = 0;
    size_t v26 = 0;
    goto LABEL_15;
  }
  uint64_t v21 = &v17[-v16];
  size_t v22 = (size_t)&v17[-v16 + 1];
  if (v22 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_12:
    int v33 = *__error();
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 863, 125, v33, "malloc", v34, v35, v71);
    goto LABEL_13;
  }
  uint64_t v72 = a6;
  size_t v25 = (char *)malloc(v22);
  if (!v25) {
    goto LABEL_12;
  }
  size_t v26 = v25;
  memcpy(v25, (const void *)(a1 + 7), (size_t)&v20[-v16]);
  v21[(void)v26] = 0;
  if (strncmp(v20 + 1, "download/", 9uLL))
  {
    char v71 = a1;
    uint64_t v29 = "invalid Knox action: %s";
    __int16 v30 = 869;
LABEL_10:
    int v31 = 0;
LABEL_11:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", v30, 125, v31, v29, v27, v28, v71);
    __int16 v23 = 0;
    int v24 = 0;
    size_t v20 = 0;
    uint64_t v32 = 0;
    goto LABEL_15;
  }
  uint64_t v38 = v20 + 10;
  uint64_t v39 = strchr(v38, 47);
  if (!v39)
  {
    char v71 = a1;
    uint64_t v29 = "invalid Knox space: %s";
    __int16 v30 = 874;
    goto LABEL_10;
  }
  uint64_t v40 = v39;
  size_t v41 = v39 - v38;
  size_t v42 = v39 - v38 + 1;
  if (v42 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_37:
    int v31 = *__error();
    uint64_t v29 = "malloc";
    __int16 v30 = 878;
    goto LABEL_11;
  }
  uint64_t v43 = (char *)malloc(v42);
  if (!v43) {
    goto LABEL_37;
  }
  uint64_t v32 = v43;
  memcpy(v43, v38, v41);
  size_t v44 = 0;
  v32[v41] = 0;
  int v45 = v40 + 1;
  int v46 = v40 + 1;
  do
  {
    size_t v47 = v44;
    int v48 = (char)v45[v44];
    if (!v45[v44]) {
      break;
    }
    if (v48 < 0)
    {
      __uint32_t v49 = __maskrune((char)v45[v44], 0x4000uLL);
      int v45 = v46;
    }
    else
    {
      __uint32_t v49 = _DefaultRuneLocale.__runetype[v48] & 0x4000;
    }
    if ((v48 - 127) < 0xA1u) {
      break;
    }
    if (v48 == 47 || (v48 - 37) < 2u) {
      break;
    }
    if (v48 == 35) {
      break;
    }
    size_t v44 = v47 + 1;
  }
  while (!v49);
  if (v47 + 1 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_48:
    char v66 = __error();
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 895, 125, *v66, "malloc", v67, v68, v71);
    __int16 v23 = 0;
    int v24 = 0;
    size_t v20 = 0;
    goto LABEL_15;
  }
  uint64_t v51 = (char *)malloc(v47 + 1);
  if (!v51) {
    goto LABEL_48;
  }
  size_t v20 = v51;
  memcpy(v51, v46, v47);
  v20[v47] = 0;
  if (a7 >> 62)
  {
    fwrite("Knox resolve URL\n", 0x11uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  host: %s\n", v26);
    fprintf(__stderrp, "  space: %s\n", v32);
    fprintf(__stderrp, "  file digest: %s\n", v20);
  }
  uint64_t v52 = sub_100023404(a2, a7);
  int v24 = (char *)v52;
  if (!v52)
  {
    int v69 = "contextInit failed";
    __int16 v70 = 909;
LABEL_51:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", v70, 125, 0, v69, v53, v54, v71);
    __int16 v23 = 0;
    goto LABEL_15;
  }
  if ((sub_1000236CC(v52, v26) & 0x80000000) != 0)
  {
    int v69 = "getting Westgate token";
    __int16 v70 = 912;
    goto LABEL_51;
  }
  if ((sub_10002498C((uint64_t)v24, v26, v32, v20, a3, &__s, v53, v54) & 0x80000000) != 0)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 915, 125, 0, "getting decryption credentials", v55, v56, v71);
    uint64_t v36 = 0xFFFFFFFFLL;
    __int16 v23 = __s;
    goto LABEL_16;
  }
  __int16 v23 = __s;
  size_t v57 = strlen(__s);
  if (!v57 || (v57 & 1) != 0)
  {
    char v71 = v57;
    char v64 = "invalid key length: %zu";
    __int16 v65 = 919;
  }
  else
  {
    size_t v63 = v57 >> 1;
    if (v57 >> 1 <= a4)
    {
      if ((sub_100025FC0(v57 >> 1, a5, (uint64_t)__s, v58, v59, v60, v61, v62) & 0x80000000) == 0)
      {
        uint64_t v36 = 0;
        size_t *v72 = v63;
        goto LABEL_16;
      }
      char v64 = "invalid hex key";
      __int16 v65 = 922;
    }
    else
    {
      char v64 = "key_capacity is too low";
      __int16 v65 = 921;
    }
  }
  sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", v65, 125, 0, v64, v61, v62, v71);
LABEL_15:
  uint64_t v36 = 0xFFFFFFFFLL;
LABEL_16:
  free(v26);
  free(v32);
  free(v20);
  free(v23);
  sub_1000243D4(v24);
  return v36;
}

uint64_t sub_1000254D4(uint64_t a1, unsigned int a2, char *__s, char *a4)
{
  uint64_t v4 = __s;
  if (!__s)
  {
    if (a4) {
      uint64_t v4 = getenv(a4);
    }
  }
  if (!v4)
  {
    uint64_t result = 0;
    *(void *)(a1 + 8 * a2) = 0;
    return result;
  }
  size_t v7 = strlen(v4);
  size_t v8 = v7 + 1;
  if (v7 + 1 < 0x2000000001)
  {
    size_t v10 = malloc(v7 + 1);
    if (v10)
    {
      uint64_t v11 = v10;
      memcpy(v10, v4, v8);
      uint64_t result = 0;
      *(void *)(a1 + 8 * a2) = v11;
      return result;
    }
  }
  else
  {
    *__error() = 12;
  }
  *(void *)(a1 + 8 * a2) = 0;
  uint64_t v12 = __error();
  sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextSetString", 259, 125, *v12, "malloc", v13, v14, v15);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000255B8(uint64_t a1, unsigned int a2, char *a3)
{
  memset(&v32, 0, sizeof(v32));
  int v6 = open(a3, 0);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    if (fstat(v6, &v32) < 0
      || ((st_size = v32.st_size, (v32.st_mode & 0xF000) == 0x8000) ? (BOOL v11 = v32.st_size == 0) : (BOOL v11 = 1), v11))
    {
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", 274, 125, 0, "invalid file: %s", v8, v9, (char)a3);
    }
    else
    {
      if ((unint64_t)(v32.st_size + 1) < 0x2000000001)
      {
        uint64_t v16 = malloc(v32.st_size + 1);
        if (v16)
        {
          uint64_t v17 = v16;
          ssize_t v18 = read(v7, v16, st_size);
          if (v18 < 0)
          {
            int v28 = *__error();
            __int16 v29 = 280;
            __int16 v30 = a3;
          }
          else
          {
            if (v18 == st_size)
            {
              do
              {
                off_t v21 = st_size;
                if (!st_size) {
                  break;
                }
                __darwin_ct_rune_t v22 = (char)v17[st_size - 1];
                __uint32_t v23 = v22 < 0 ? __maskrune(v22, 0x4000uLL) : _DefaultRuneLocale.__runetype[v22] & 0x4000;
                --st_size;
              }
              while (v23);
              uint64_t v15 = 0;
              v17[v21] = 0;
              *(void *)(a1 + 8 * a2) = v17;
              goto LABEL_24;
            }
            __int16 v30 = "truncated read";
            __int16 v29 = 281;
            int v28 = 0;
          }
          sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", v29, 125, v28, v30, v19, v20, v31);
LABEL_23:
          free(v17);
          uint64_t v15 = 0xFFFFFFFFLL;
LABEL_24:
          close(v7);
          return v15;
        }
      }
      else
      {
        *__error() = 12;
      }
      int v24 = *__error();
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", 277, 125, v24, "malloc", v25, v26, v31);
    }
    uint64_t v17 = 0;
    goto LABEL_23;
  }
  uint64_t v12 = __error();
  sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", 273, 125, *v12, a3, v13, v14, v31);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000257E0(int *a1)
{
  if (!a1) {
    return 0;
  }
  if (a1[2] >= 1 && a1[4] && AAByteStreamWrite(*(AAByteStream *)a1, "]\n", 2uLL) != 2)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamClose", 67, 125, 0, "writing final ']'", v2, v3, v6);
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v4 = 0;
  }
  free(a1);
  return v4;
}

uint64_t sub_10002587C(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  int v11 = *(_DWORD *)(a1 + 8);
  if (v11)
  {
    if (v11 < 1)
    {
      uint64_t v12 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    if (!a3 || *a2 != 91)
    {
      uint64_t v12 = 0;
      *(_DWORD *)(a1 + 8) = -1;
      goto LABEL_28;
    }
    *(_DWORD *)(a1 + 8) = 1;
  }
  uint64_t v12 = 0;
  if (a3 && *(_DWORD *)(a1 + 12))
  {
    if (*a2 != 91)
    {
      uint64_t v14 = "expected '['";
      __int16 v15 = 93;
LABEL_41:
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamWrite", v15, 125, 0, v14, a7, a8, v22);
      return -1;
    }
    *(_DWORD *)(a1 + 12) = 0;
    uint64_t v9 = a2 + 1;
    uint64_t v8 = a3 - 1;
    uint64_t v12 = 1;
  }
  if (!v8) {
    goto LABEL_35;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    uint64_t v13 = 0;
    goto LABEL_18;
  }
  if (AAByteStreamWrite(*(AAByteStream *)a1, "]", 1uLL) != 1)
  {
    uint64_t v14 = "writing ']'";
    __int16 v15 = 105;
    goto LABEL_41;
  }
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v13 = 1;
LABEL_18:
  uint64_t v16 = v12 + 1;
  uint64_t v17 = v8 - 1;
  while (1)
  {
    __darwin_ct_rune_t v18 = (char)v9[v17];
    if (v18 < 0) {
      break;
    }
    if ((_DefaultRuneLocale.__runetype[v18] & 0x4000) == 0) {
      goto LABEL_25;
    }
LABEL_23:
    ++v16;
    if (--v17 == -1) {
      goto LABEL_27;
    }
  }
  if (__maskrune(v18, 0x4000uLL)) {
    goto LABEL_23;
  }
LABEL_25:
  if (v9[v17] == 93)
  {
    *(_DWORD *)(a1 + 16) = 1;
    uint64_t v12 = v16;
    uint64_t v8 = v17;
  }
LABEL_27:
  if (v8)
  {
LABEL_28:
    *(_DWORD *)(a1 + 20) = 1;
    AAByteStream v19 = *(AAByteStream *)a1;
    if (*((void *)v19 + 3))
    {
      if (v8)
      {
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t v20 = (*((uint64_t (**)(void, unsigned char *, uint64_t))v19 + 3))(*(void *)v19, v9, v8);
          if (v20 < 1) {
            break;
          }
          v9 += v20;
          v13 += v20;
          v8 -= v20;
          if (!v8)
          {
            if ((v13 & 0x8000000000000000) == 0) {
              goto LABEL_39;
            }
            goto LABEL_37;
          }
        }
        uint64_t v13 = v20;
        if (v20 < 0) {
          goto LABEL_37;
        }
        goto LABEL_39;
      }
LABEL_35:
      uint64_t v13 = 0;
      goto LABEL_39;
    }
    uint64_t v13 = -1;
LABEL_37:
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamWrite", 124, 125, 0, "write", a7, a8, v22);
  }
  else
  {
LABEL_39:
    v13 += v12;
  }
  return v13;
}

size_t sub_100025AB4(uint64_t a1, uint64_t a2, __int16 a3, int a4, int a5, const char *a6, uint64_t a7, uint64_t a8, char a9)
{
  bzero(__str, 0x400uLL);
  uint64_t v13 = (_WORD *)(((a3 & 0x3FFF) << 10) | (a4 << 24) | a5 & 0x3FF | 0x80000000);
  if (a5 >= 1)
  {
    uint64_t v14 = strerror(a5);
    snprintf(__str, 0x400uLL, "%s: ", v14);
  }
  size_t v15 = strlen(__str);
  vsnprintf(&__str[v15], 1024 - v15, a6, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100025CE0((uint64_t)__str, (int)v13);
  }
  return ParallelCompressionUpdateError(v13, (size_t)__str);
}

uint64_t sub_100025BC8(uint64_t a1, uint64_t a2, __int16 a3, int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  bzero(__s, 0x400uLL);
  uint64_t v12 = ((a3 & 0x3FFF) << 10) | (a4 << 24) | 0x80000000;
  size_t v13 = strlen(__s);
  vsnprintf(&__s[v13], 1024 - v13, a5, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109378;
    int v16 = v12;
    __int16 v17 = 2080;
    __darwin_ct_rune_t v18 = __s;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "[0x%08x](warning) %s", buf, 0x12u);
  }
  return ParallelCompressionUpdateWarning(v12, __s);
}

void sub_100025CE0(uint64_t a1, int a2)
{
  v2[0] = 67109378;
  v2[1] = a2;
  __int16 v3 = 2080;
  uint64_t v4 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "[0x%08x] %s", (uint8_t *)v2, 0x12u);
}

size_t sub_100025D6C(size_t result)
{
  if (result)
  {
    id v1 = (const void *)result;
    uint64_t result = strlen((const char *)result);
    if (result - 8193 >= 0xFFFFFFFFFFFFE000)
    {
      size_t v2 = result;
      pthread_key_t v3 = sub_100025EF0();
      uint64_t result = (size_t)pthread_getspecific(v3);
      if (result)
      {
        size_t v4 = result;
        __int16 v5 = v2 + 3;
        uint64_t v6 = *(unsigned __int16 *)(result + 72);
        if (v6 + (unsigned __int16)(v2 + 3) <= *(unsigned __int16 *)(result + 74))
        {
          size_t v7 = result + v6;
          *(_WORD *)(v7 + 76) = v5;
          size_t v8 = v7 + 78;
          uint64_t result = (size_t)memcpy((void *)(v7 + 78), v1, v2);
          *(unsigned char *)(v8 + v2) = 0;
          *(_WORD *)(v4 + 72) += v5;
        }
      }
    }
  }
  return result;
}

_WORD *sub_100025E10(_WORD *result)
{
  if ((result & 0x80000000) != 0)
  {
    int v1 = (int)result;
    pthread_key_t v2 = sub_100025EF0();
    uint64_t result = pthread_getspecific(v2);
    if (result)
    {
      if ((*(_DWORD *)result & 0x80000000) == 0)
      {
        *(_DWORD *)uint64_t result = v1;
        result[3] = 0;
      }
    }
  }
  return result;
}

_DWORD *sub_100025E58(_DWORD *result)
{
  if ((result & 0x80000000) != 0)
  {
    int v1 = (int)result;
    pthread_key_t v2 = sub_100025EF0();
    uint64_t result = pthread_getspecific(v2);
    if (result)
    {
      if ((*result & 0x80000000) == 0)
      {
        uint64_t v3 = *((unsigned __int16 *)result + 3);
        if (v3 <= 0xF)
        {
          result[v3 + 2] = v1;
          *((_WORD *)result + 3) = v3 + 1;
        }
      }
    }
  }
  return result;
}

size_t ParallelCompressionUpdateError(_WORD *a1, size_t a2)
{
  sub_100025E10(a1);

  return sub_100025D6C(a2);
}

uint64_t sub_100025EF0()
{
  if (pthread_once(&stru_1001C45D0, (void (*)(void))sub_100025F58))
  {
    int v0 = __error();
    sub_100025AB4("/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c", "getErrorContextKey", 53, 5, *v0, "pthread_once");
  }
  return qword_1001C4F30;
}

uint64_t sub_100025F58()
{
  uint64_t result = pthread_key_create((pthread_key_t *)&qword_1001C4F30, 0);
  if (result)
  {
    uint64_t v1 = *__error();
    return sub_100025AB4("/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c", "createErrorContextKey", 42, 5, v1, "pthread_key_create");
  }
  return result;
}

uint64_t sub_100025FC0(int a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = (2 * a1);
  if (!v8)
  {
LABEL_13:
    int v11 = 0;
    return (v11 << 31 >> 31);
  }
  uint64_t v9 = 0;
  char v10 = 0;
  int v11 = 1;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(a3 + v9);
    if (!*(unsigned char *)(a3 + v9))
    {
      uint64_t v14 = "truncated hex string";
      __int16 v15 = 13;
      goto LABEL_16;
    }
    if ((v12 - 48) >= 0xA) {
      break;
    }
    char v13 = -48;
LABEL_10:
    char v10 = v13 + 16 * v10 + v12;
    if (v9)
    {
      *a2++ = v10;
      char v10 = 0;
    }
    int v11 = ++v9 < v8;
    if (v8 == v9) {
      goto LABEL_13;
    }
  }
  if ((v12 - 97) < 6)
  {
    char v13 = -87;
    goto LABEL_10;
  }
  if ((v12 - 65) < 6)
  {
    char v13 = -55;
    goto LABEL_10;
  }
  uint64_t v14 = "invalid hex string";
  __int16 v15 = 18;
LABEL_16:
  sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AASerialization.c", (uint64_t)"aaParseHexString", v15, 106, 0, v14, a7, a8, v17);
  return (v11 << 31 >> 31);
}

uint64_t sub_1000260B0(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = (void *)(a1 + 72);
  if (v5 >= v4)
  {
    if (v4) {
      size_t v8 = v4 + (v4 >> 1);
    }
    else {
      size_t v8 = 256;
    }
    *(void *)(a1 + 72) = v8;
    size_t v7 = reallocf(*(void **)(a1 + 88), v8);
    *(void *)(a1 + 88) = v7;
    if (!v7)
    {
      char v10 = __error();
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"jsonPushLabel", 358, 109, *v10, "malloc", v11, v12, v14);
      void *v6 = 0;
      v6[1] = 0;
      return 0xFFFFFFFFLL;
    }
    unint64_t v5 = *(void *)(a1 + 80);
  }
  else
  {
    size_t v7 = *(unsigned char **)(a1 + 88);
  }
  uint64_t v9 = 0;
  *(void *)(a1 + 80) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

uint64_t sub_100026168(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(a1 + 96);
  unint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = (void *)(a1 + 96);
  if (v5 >= v4)
  {
    if (v4) {
      size_t v8 = v4 + (v4 >> 1);
    }
    else {
      size_t v8 = 256;
    }
    *(void *)(a1 + 96) = v8;
    size_t v7 = reallocf(*(void **)(a1 + 112), v8);
    *(void *)(a1 + 112) = v7;
    if (!v7)
    {
      char v10 = __error();
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"jsonPushValue", 372, 109, *v10, "malloc", v11, v12, v14);
      void *v6 = 0;
      v6[1] = 0;
      return 0xFFFFFFFFLL;
    }
    unint64_t v5 = *(void *)(a1 + 104);
  }
  else
  {
    size_t v7 = *(unsigned char **)(a1 + 112);
  }
  uint64_t v9 = 0;
  *(void *)(a1 + 104) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

void *sub_100026220(uint64_t a1)
{
  pthread_key_t v2 = malloc(0x78uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    memset_s(v2, 0x78uLL, 0, 0x78uLL);
    v3[1] = a1;
    v3[5] = 0x10000;
    unint64_t v4 = malloc(0x10000uLL);
    v3[8] = v4;
    if (v4)
    {
      *(void *)((char *)v3 + 20) = 32;
      v3[4] = calloc(0x20uLL, 4uLL);
    }
    else
    {
      size_t v8 = __error();
      sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamOpen", 387, 109, *v8, "malloc", v9, v10, v12);
      sub_10002630C((void **)v3);
      return 0;
    }
  }
  else
  {
    unint64_t v5 = __error();
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamOpen", 382, 109, *v5, "malloc", v6, v7, v12);
  }
  return v3;
}

void sub_10002630C(void **a1)
{
  if (a1)
  {
    free(a1[4]);
    free(a1[11]);
    free(a1[14]);
    free(a1[8]);
    free(a1);
  }
}

uint64_t sub_100026368(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (atomic_load((unsigned int *)a1)) {
    return 0xFFFFFFFFLL;
  }
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10 == 9 || v10 == -1)
  {
    sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamRead", 418, 109, 0, "unexpected read call", a7, a8, v45);
    return 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 104) = 0;
  while (2)
  {
    unint64_t v14 = *(void *)(a1 + 56);
    __int16 v15 = *(unsigned __int8 **)(a1 + 64);
    if (v14 >= *(void *)(a1 + 48))
    {
      ssize_t v16 = AAByteStreamRead(*(AAByteStream *)(a1 + 8), v15, *(void *)(a1 + 40));
      if (v16 < 0)
      {
        sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamRead", 430, 109, 0, "read error: %zd", a7, a8, v16);
LABEL_104:
        uint64_t result = 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 16) = -1;
        return result;
      }
      if (!v16)
      {
        __int16 v29 = "EOF reached";
        __int16 v30 = 431;
        goto LABEL_103;
      }
      unint64_t v14 = 0;
      *(void *)(a1 + 48) = v16;
      __int16 v15 = *(unsigned __int8 **)(a1 + 64);
    }
    *(void *)(a1 + 56) = v14 + 1;
    int v17 = v15[v14];
    char v18 = v15[v14];
    switch(*(_DWORD *)(a1 + 16))
    {
      case 0:
        *(void *)(a1 + 104) = 0;
        if ((char)v17 < 0)
        {
          if (__maskrune((char)v17, 0x4000uLL)) {
            continue;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }
        if (v17 == 34) {
          goto LABEL_68;
        }
        if (v17 == 43 || v17 == 45 || ((char)v17 - 48) <= 9)
        {
          if ((sub_100026168(a1, v17) & 0x80000000) == 0)
          {
            int v22 = 3;
            goto LABEL_69;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 451;
          goto LABEL_103;
        }
        if (v17 == 123)
        {
          uint64_t v31 = *(unsigned int *)(a1 + 24);
          if (v31 == *(_DWORD *)(a1 + 20))
          {
            __int16 v29 = "max level reached";
            __int16 v30 = 465;
            goto LABEL_103;
          }
          int v26 = 0;
          uint64_t v43 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v31 + 1;
          *(_DWORD *)(v43 + 4 * v31) = 0;
          int v36 = 6;
          goto LABEL_125;
        }
        if (v17 == 91)
        {
          uint64_t v32 = *(unsigned int *)(a1 + 24);
          if (v32 == *(_DWORD *)(a1 + 20))
          {
            __int16 v29 = "max level reached";
            __int16 v30 = 457;
            goto LABEL_103;
          }
          int v36 = 0;
          uint64_t v44 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v32 + 1;
          int v26 = 1;
          *(_DWORD *)(v44 + 4 * v32) = 1;
          goto LABEL_125;
        }
        if (((char)v17 - 97) <= 0x19)
        {
          if ((sub_100026168(a1, v17) & 0x80000000) == 0)
          {
            int v22 = 4;
            goto LABEL_69;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 473;
          goto LABEL_103;
        }
        unsigned int v24 = *(_DWORD *)(a1 + 24) - 1;
        BOOL v33 = (*(_DWORD *)(*(void *)(a1 + 32) + 4 * v24) & 1) == 0 || (char)v17 != 93;
        BOOL v34 = (*(_DWORD *)(*(void *)(a1 + 32) + 4 * v24) & 1) == 0 && (char)v17 == 125;
        if (v33 && !v34) {
          goto LABEL_102;
        }
        goto LABEL_121;
      case 1:
        if (v17 == 92)
        {
          int v22 = 2;
          goto LABEL_69;
        }
        if (v17 == 34)
        {
          *(_DWORD *)(a1 + 16) = 5;
          if ((sub_100026168(a1, 0) & 0x80000000) == 0)
          {
            int v26 = 3;
            goto LABEL_126;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 499;
          goto LABEL_103;
        }
        if ((sub_100026168(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 503;
          goto LABEL_103;
        }
        continue;
      case 2:
        HIDWORD(v20) = (char)v17;
        LODWORD(v20) = ((char)v17 << 24) - 1644167168;
        unsigned __int8 v19 = v20 >> 25;
        if (v19 < 0xAu && ((0x341u >> v19) & 1) != 0)
        {
          char v21 = aN4info7details[(char)v19];
        }
        else if ((char)v17 == 102)
        {
          char v21 = 12;
        }
        else
        {
          char v21 = v18;
        }
        if ((sub_100026168(a1, v21) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 512;
          goto LABEL_103;
        }
LABEL_68:
        int v22 = 1;
        goto LABEL_69;
      case 3:
        if (((char)v17 - 48) > 9)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(void *)(a1 + 56) = v14;
          if ((sub_100026168(a1, 0) & 0x80000000) == 0)
          {
            int v26 = 4;
            goto LABEL_126;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 539;
          goto LABEL_103;
        }
        if ((sub_100026168(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 533;
          goto LABEL_103;
        }
        continue;
      case 4:
        if (((char)v17 - 97) > 0x19)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(void *)(a1 + 56) = v14;
          if ((sub_100026168(a1, 0) & 0x80000000) == 0)
          {
            uint64_t v27 = *(const char **)(a1 + 112);
            if (!strcmp(v27, "false") || !strcmp(v27, "true"))
            {
              int v26 = 6;
            }
            else
            {
              if (strcmp(v27, "null")) {
                goto LABEL_102;
              }
              int v26 = 7;
            }
            goto LABEL_126;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 524;
          goto LABEL_103;
        }
        if ((sub_100026168(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 519;
          goto LABEL_103;
        }
        continue;
      case 5:
        if ((char)v17 < 0)
        {
          if (__maskrune((char)v17, 0x4000uLL)) {
            continue;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }
        int v23 = *(_DWORD *)(a1 + 24);
        if (!v23)
        {
          __int16 v29 = "invalid JSON state";
          __int16 v30 = 546;
          goto LABEL_103;
        }
        unsigned int v24 = v23 - 1;
        int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v24);
        if (v17 != 44)
        {
          if (v17 == 93)
          {
            if (v25) {
              goto LABEL_121;
            }
            char v18 = 93;
          }
          else if (v17 == 125)
          {
            goto LABEL_91;
          }
LABEL_102:
          char v45 = v18;
          __int16 v29 = "invalid char %c %s";
          __int16 v30 = 610;
          goto LABEL_103;
        }
        if (v25) {
          int v22 = 0;
        }
        else {
          int v22 = 6;
        }
LABEL_69:
        *(_DWORD *)(a1 + 16) = v22;
        continue;
      case 6:
        *(void *)(a1 + 80) = 0;
        if (((char)v17 & 0x80000000) == 0)
        {
          if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) == 0) {
            goto LABEL_61;
          }
          continue;
        }
        if (__maskrune((char)v17, 0x4000uLL)) {
          continue;
        }
LABEL_61:
        if (v17 == 34)
        {
          int v22 = 7;
          goto LABEL_69;
        }
        if (v17 != 125) {
          goto LABEL_102;
        }
        int v28 = *(_DWORD *)(a1 + 24);
        if (!v28) {
          goto LABEL_92;
        }
        unsigned int v24 = v28 - 1;
        int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v24);
LABEL_91:
        if (v25)
        {
LABEL_92:
          char v18 = 125;
          goto LABEL_102;
        }
LABEL_121:
        *(_DWORD *)(a1 + 24) = v24;
        if (v24) {
          int v36 = 5;
        }
        else {
          int v36 = 9;
        }
        int v26 = 2;
LABEL_125:
        *(_DWORD *)(a1 + 16) = v36;
LABEL_126:
        if (a2) {
          memset_s(a2, 0x38uLL, 0, 0x38uLL);
        }
        *a2 = v26;
        uint64_t v37 = *(void *)(a1 + 80);
        if (v37) {
          uint64_t v37 = *(void *)(a1 + 88);
        }
        *((void *)a2 + 1) = v37;
        a2[12] = *(_DWORD *)(a1 + 24);
        if (v26 == 6)
        {
          int v38 = strcmp(*(const char **)(a1 + 112), "true");
          uint64_t result = 0;
          a2[9] = v38 == 0;
        }
        else if (v26 == 4)
        {
          uint64_t v39 = *(const char **)(a1 + 112);
          if (*v39 == 45)
          {
            unint64_t v40 = strtoull(v39 + 1, 0, 10);
            uint64_t result = 0;
            *((void *)a2 + 3) = v40;
            int v41 = -1;
          }
          else
          {
            unint64_t v42 = strtoull(v39, 0, 0);
            uint64_t result = 0;
            *((void *)a2 + 3) = v42;
            int v41 = v42 != 0;
          }
          a2[8] = v41;
        }
        else
        {
          uint64_t result = 0;
          if (v26 == 3) {
            *((void *)a2 + 2) = *(void *)(a1 + 112);
          }
        }
        return result;
      case 7:
        if ((char)v17 == 34)
        {
          if ((sub_1000260B0(a1, 0) & 0x80000000) == 0)
          {
            int v22 = 8;
            goto LABEL_69;
          }
          __int16 v29 = "jsonPushLabel";
          __int16 v30 = 587;
LABEL_103:
          sub_100025AB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamRead", v30, 109, 0, v29, a7, a8, v45);
          goto LABEL_104;
        }
        if ((sub_1000260B0(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushLabel";
          __int16 v30 = 591;
          goto LABEL_103;
        }
        continue;
      case 8:
        if ((char)v17 < 0)
        {
          if (__maskrune((char)v17, 0x4000uLL)) {
            continue;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }
        if ((char)v17 != 58) {
          goto LABEL_102;
        }
        int v22 = 0;
        goto LABEL_69;
      default:
        goto LABEL_102;
    }
  }
}

BOOL sub_100026BC4(const char *a1)
{
  return !strcmp(a1, "lifs") || strcmp(a1, "fskit") == 0;
}

uint64_t _FSGetLocationFromStatfs(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6 = malloc_type_calloc(1uLL, 0x400uLL, 0x1359B406uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    if (sub_100026BC4((const char *)(a1 + 72)))
    {
      size_t v8 = strstr((char *)(a1 + 1112), "://");
      if (!v8 || (uint64_t v9 = v8 + 3, (v10 = strchr(v8 + 3, 47)) == 0))
      {
        uint64_t v12 = 22;
LABEL_17:
        free(v7);
        return v12;
      }
      if (v10 - v9 >= 1023) {
        uint64_t v11 = 1023;
      }
      else {
        uint64_t v11 = v10 - v9;
      }
      __memcpy_chk();
      *((unsigned char *)v7 + v11) = 0;
      if (!a2)
      {
LABEL_16:
        uint64_t v12 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      if (strncmp((const char *)(a1 + 1112), "/dev/disk", 9uLL)) {
        strncmp((const char *)(a1 + 1112), "/dev/rdisk", 0xAuLL);
      }
      __strlcpy_chk();
      if (!a2) {
        goto LABEL_16;
      }
    }
    strlcpy(a2, (const char *)v7, a3);
    goto LABEL_16;
  }
  return 12;
}

void sub_100026D54(void *a1, uint64_t a2)
{
  sub_10002B0BC((uint64_t)&v14, a2 + 72);
  uint64_t v3 = v14;
  if (v14 != v15)
  {
    unint64_t v4 = a1 + 1;
    uint64_t v5 = *a1;
    do
    {
      uint64_t v6 = *(void *)(v5 - 128);
      if (!*(_DWORD *)((char *)v4 + v6))
      {
        int v7 = *((_DWORD *)v3 + 14) + 2147483643;
        if (v7 <= 3)
        {
          int v8 = dword_1001642D0[v7];
          int v9 = dword_1001642E0[v7];
          *(_DWORD *)((char *)v4 + v6) = v8;
          *unint64_t v4 = v9;
        }
      }
      int64_t v10 = (char *)v3[5] - (char *)v3[4] + ((_BYTE)v3[6] & 1) + ((*((unsigned __int8 *)v3 + 48) >> 1) & 1) - 1;
      *(void *)((char *)a1 + *(void *)(v5 - 128) + 16) += v3[9];
      *(void *)((char *)a1 + *(void *)(v5 - 112) + 56) -= v10 << 9;
      uint64_t v11 = v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (void **)v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void **)v3[2];
          BOOL v13 = *v12 == v3;
          uint64_t v3 = v12;
        }
        while (!v13);
      }
      uint64_t v3 = v12;
    }
    while (v12 != v15);
  }
  sub_10002A594((uint64_t)&v14, v15[0]);
}

uint64_t sub_100026E98(void *a1, uint64_t a2)
{
  sub_100003C58((uint64_t)&v22);
  int v21 = *(_DWORD *)(*(void *)(a2 + 136) + 352);
  sub_100028324(&v22, &v21);
  sub_100003890((uint64_t)v23, __p);
  unint64_t v4 = (char *)a1 + *(void *)(*a1 - 136);
  uint64_t v5 = v4 + 8;
  if (v4[31] < 0) {
    operator delete(*(void **)v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
  *((void *)v5 + 2) = v20;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  sub_100003A24((uint64_t)v23, (long long *)__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(void *)(a2 + 136);
  unint64_t v7 = *(unsigned int *)(v6 + 356);
  if (v7 >= 8)
  {
    uint64_t v8 = v6 + 360;
    unint64_t v9 = v7 >> 3;
    uint64_t v10 = v22;
    int v11 = *(_DWORD *)((char *)v23 + *(void *)(v22 - 24));
    if (v9 != 1)
    {
      unint64_t v12 = v9 - 1;
      do
      {
        *(_DWORD *)((char *)v23 + *(void *)(v22 - 24)) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v22 - 24)) & 0xFFFFFFB5 | 8;
        LOBYTE(__p[0]) = 48;
        BOOL v13 = sub_100016CD0(&v22, (char *)__p);
        *(void *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 2;
        unint64_t v14 = (void *)std::ostream::operator<<();
        sub_100003DF0(v14, (uint64_t)" ", 1);
        ++v8;
        --v12;
      }
      while (v12);
      uint64_t v10 = v22;
    }
    *(_DWORD *)((char *)v23 + *(void *)(v10 - 24)) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v10 - 24)) & 0xFFFFFFB5 | 8;
    LOBYTE(__p[0]) = 48;
    __int16 v15 = sub_100016CD0(&v22, (char *)__p);
    *(void *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 2;
    std::ostream::operator<<();
    *(_DWORD *)((char *)v23 + *(void *)(v22 - 24)) = v11;
  }
  sub_100003890((uint64_t)v23, __p);
  ssize_t v16 = (char *)a1 + *(void *)(*a1 - 136);
  int v17 = v16 + 32;
  if (v16[55] < 0) {
    operator delete(*(void **)v17);
  }
  *(_OWORD *)int v17 = *(_OWORD *)__p;
  *((void *)v17 + 2) = v20;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100027208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
}

void sub_100027240(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        sub_100010A48(v3);
      }
      sub_100141C20((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      uint64_t v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    sub_100010A48(v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_100027348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100010A48(v12);
  }
  if (a12) {
    sub_100010A48(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100027378()
{
}

void sub_100027494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000109B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000274B0(uint64_t a1)
{
  *(void *)(a1 + 40) = off_100194960;
  *(void *)(a1 + 48) = off_100194990;
  *(void *)(a1 + 56) = off_1001949C0;
  *(void *)(a1 + 64) = off_1001949F0;
  *(void *)a1 = off_100193EC0;
  *(void *)(a1 + 24) = off_100193F08;
  *(void *)(a1 + 32) = off_100193F50;
  *(void *)(a1 + 40) = off_100193F98;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_100193FE0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_100194028;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_100194070;
  *(void *)a1 = off_100193B78;
  *(void *)(a1 + 24) = off_100193BC0;
  *(void *)(a1 + 32) = off_100193C08;
  *(void *)(a1 + 40) = off_100193C50;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_100193C98;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_100193CE0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_100193D28;
  *(void *)(a1 + 72) = off_1001940D0;
  *(void *)(a1 + 24) = off_100194128;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = off_100194278;
  *(void *)(a1 + 40) = off_1001942D0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = off_100194420;
  *(void *)(a1 + 32) = off_100194478;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 200) = off_1001945C8;
  *(void *)(a1 + 48) = off_100194620;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  sub_100027D58((uint64_t *)(a1 + 256), (uint64_t *)&off_100193AF8);
}

void sub_100027CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10002B054((const void **)va);
  sub_10002B054(v8);
  sub_100027F6C(v9, (uint64_t *)&off_100193AF8);
  sub_10002802C(v7, (uint64_t *)&off_100193AD8);
  sub_1000280F4(v6, (uint64_t *)&off_100193A98);
  _Unwind_Resume(a1);
}

void sub_100027D58(uint64_t *a1, uint64_t *a2)
{
  *a1 = (uint64_t)off_100194E80;
  uint64_t v2 = a2[1];
  *a1 = v2;
  *(uint64_t *)((char *)a1 + *(void *)(v2 - 24)) = a2[2];
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_100112414();
}

void sub_100027F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_10002A560(&a9);
  sub_10002B088(&a10);
  sub_10002A560((const void **)(v10 + 24));
  sub_10002A560((const void **)(v10 + 16));
  sub_10002A560(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100027F6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[3];
  sub_10002A560((const void **)(a1 + 24));
  sub_10002A560((const void **)(a1 + 16));
  sub_10002A560((const void **)(a1 + 8));
  return a1;
}

uint64_t sub_10002802C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[3];
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1000280F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[3];
  sub_10002A560((const void **)(a1 + 24));
  return a1;
}

CFStringRef sub_1000281A4(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100194EA0[v1];
  }
}

CFStringRef sub_1000281D0(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100194EA0[v1];
  }
}

CFStringRef sub_100028214(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100194EA0[v1];
  }
}

CFStringRef sub_100028258(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100194EA0[v1];
  }
}

CFStringRef sub_10002829C(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100194EA0[v1];
  }
}

CFStringRef sub_1000282E0(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100194EA0[v1];
  }
}

void *sub_100028324(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_100194A10[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 66)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return sub_100003DF0(a1, (uint64_t)v3, v4);
    }
  }
  long long v5 = &dword_100194A10[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_100003DF0(a1, (uint64_t)v3, v4);
}

void sub_100028368(int a1, CFArrayRef theArray)
{
}

void sub_1000285E8()
{
}

void sub_100028654(uint64_t a1, int *a2)
{
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v5 = *a2;
  sub_10002A7B8((uint64_t)v13);
  int v12 = v5;
  sub_10002AA90(&v14, &v12);
  sub_100003890((uint64_t)v15, __p);
  if (v10 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  CFStringRef v7 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v6, 0x8000100u);
  CFStringRef v11 = v7;
  sub_10002A560((const void **)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)((char *)v13
  uint64_t v14 = v8;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  CFDictionaryAddValue(Mutable, @"Type", v7);
  CFRelease(v7);
  sub_10011AC68(Mutable, @"Reserved", a2[1]);
  sub_10011AC68(Mutable, @"Sector Count", *((void *)a2 + 2));
  sub_10011AC68(Mutable, @"Start Offset", *((void *)a2 + 1));
  sub_10011AC68(Mutable, @"Compressed Offset", *((void *)a2 + 3));
  sub_10011AC68(Mutable, @"Compressed Length", *((void *)a2 + 4));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), Mutable);
}

void sub_1000288DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void (__cdecl **a21)(std::stringbuf *__hidden this),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(uint64_t *)((char *)&a18
  a20 = v35;
  if (a34 < 0) {
    operator delete(a29);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_100028A14()
{
}

const void **sub_100028A28@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10011AD9C((CFMutableDictionaryRef *)&v6);
  uint64_t valuePtr = *(void *)(a1 + 8);
  uint64_t v8 = (const __CFString **)@"Total Bytes";
  uint64_t v9 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v10 = @"Sector Count";
  uint64_t valuePtr = *(void *)(a1 + 16);
  CFNumberRef v11 = 0;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v12 = @"Empty Bytes";
  uint64_t valuePtr = *(void *)(a1 + 56);
  CFNumberRef v13 = 0;
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v14 = (const __CFString *)&v8;
  uint64_t v15 = 3;
  sub_10011B3DC((CFMutableDictionaryRef *)&v6, (uint64_t *)&v14);
  for (uint64_t i = 5; i != -1; i -= 2)
    sub_10002AAD4((const void **)&(&v8)[i]);
  if (*(unsigned char *)(a1 + 48))
  {
    CFStringRef v14 = @"Max Size Bytes";
    uint64_t valuePtr = *(void *)(a1 + 40);
    uint64_t v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    uint64_t v8 = &v14;
    uint64_t v9 = 1;
    sub_10011B3DC((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_10002AAD4((const void **)&v15);
  }
  if (*(unsigned char *)(a1 + 32))
  {
    CFStringRef v14 = @"Min Size Bytes";
    uint64_t valuePtr = *(void *)(a1 + 24);
    uint64_t v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    uint64_t v8 = &v14;
    uint64_t v9 = 1;
    sub_10011B3DC((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_10002AAD4((const void **)&v15);
  }
  *a2 = v6;
  uint64_t v6 = 0;
  return sub_10002AB08(&v6);
}

void sub_100028C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002AAD4(v2);
  sub_10002AB08((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100028C90()
{
}

CFStringRef sub_100028C98()
{
  return @"Size Info";
}

void sub_100028CA8()
{
}

uint64_t sub_100028CD4(uint64_t a1)
{
  *(void *)a1 = off_100194CD8;
  *(void *)(a1 + 32) = off_100194D30;
  sub_10002A560((const void **)(a1 + 24));
  return a1;
}

void sub_100028D3C(uint64_t a1)
{
  *(void *)a1 = off_100194CD8;
  *(void *)(a1 + 32) = off_100194D30;
  sub_10002A560((const void **)(a1 + 24));

  operator delete();
}

const void **sub_100028DC4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = &kCFBooleanTrue;
  }
  else {
    uint64_t v4 = &kCFBooleanFalse;
  }
  CFBooleanRef v5 = *v4;
  uint64_t v15 = (uint64_t *)@"Is Encrypted";
  uint64_t v16 = (uint64_t)v5;
  uint64_t valuePtr = 0;
  CFNumberRef v11 = &v15;
  uint64_t v12 = 1;
  sub_10011B428((uint64_t *)&v11, (CFMutableDictionaryRef *)&v9);
  sub_10002AAD4((const void **)&v16);
  sub_10002AB3C(&valuePtr);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t valuePtr = *(const void **)(a1 + 8);
    CFNumberRef v11 = (uint64_t **)@"Key Size";
    uint64_t v12 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    CFStringRef v13 = @"UUID";
    uint64_t v6 = *(const void **)(a1 + 24);
    CFStringRef v14 = v6;
    if (v6) {
      CFRetain(v6);
    }
    uint64_t v15 = (uint64_t *)&v11;
    uint64_t v16 = 2;
    sub_10011B3DC((CFMutableDictionaryRef *)&v9, (uint64_t *)&v15);
    for (uint64_t i = 3; i != -1; i -= 2)
      sub_10002AAD4((const void **)&(&v11)[i]);
  }
  *a2 = v9;
  uint64_t v9 = 0;
  return sub_10002AB08(&v9);
}

void sub_100028F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002AAD4(v2);
  sub_10002AB08((const void **)va);
  _Unwind_Resume(a1);
}

CFStringRef sub_100028F78()
{
  return @"Encryption Info";
}

const void **sub_100028F84(void *a1)
{
  unsigned int v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)unsigned int v1 = off_100194CD8;
  *((void *)v1 + 4) = off_100194D30;
  return sub_10002A560((const void **)v1 + 3);
}

void sub_100028FE0(void *a1)
{
  unsigned int v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)unsigned int v1 = off_100194CD8;
  *((void *)v1 + 4) = off_100194D30;
  sub_10002A560((const void **)v1 + 3);

  operator delete();
}

void sub_100029080()
{
}

const void **sub_100029094@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t valuePtr = *(void *)(a1 + 16);
  v11[0] = @"Compressed Bytes";
  v11[1] = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  LODWORD(valuePtr) = *(_DWORD *)(a1 + 24);
  v11[2] = @"Compression Ratio";
  CFNumberRef v12 = 0;
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  unsigned int v4 = *(_DWORD *)(a1 + 8) - 1;
  if (v4 > 3) {
    CFStringRef v5 = @"raw";
  }
  else {
    CFStringRef v5 = off_100194EE0[v4];
  }
  CFStringRef v13 = @"Compression Type";
  CFStringRef v14 = v5;
  v8[0] = (uint64_t)v11;
  v8[1] = 3;
  sub_10011B428(v8, (CFMutableDictionaryRef *)&v9);
  *a2 = v9;
  uint64_t v9 = 0;
  sub_10002AB08(&v9);
  for (uint64_t i = 5; i != -1; i -= 2)
    uint64_t result = sub_10002AAD4((const void **)&v11[i]);
  return result;
}

void sub_1000291CC(_Unwind_Exception *a1)
{
  for (uint64_t i = 40; i != -8; i -= 16)
    sub_10002AAD4((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_100029208()
{
  return @"Compression Info";
}

void sub_100029218()
{
}

uint64_t sub_100029244(uint64_t a1)
{
  *(void *)a1 = off_100194D68;
  *(void *)(a1 + 56) = off_100194DC0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1000292C4(uint64_t a1)
{
  *(void *)a1 = off_100194D68;
  *(void *)(a1 + 56) = off_100194DC0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

const void **sub_100029364@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    unsigned int v4 = *(const UInt8 **)(a1 + 32);
    CFIndex v5 = *(void *)(a1 + 40);
  }
  else
  {
    unsigned int v4 = (const UInt8 *)(a1 + 32);
    CFIndex v5 = *(unsigned __int8 *)(a1 + 55);
  }
  CFTypeRef cf = CFStringCreateWithBytes(kCFAllocatorDefault, v4, v5, 0x8000100u, 0);
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v6 = *(const UInt8 **)(a1 + 8);
    CFIndex v7 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v6 = (const UInt8 *)(a1 + 8);
    CFIndex v7 = *(unsigned __int8 *)(a1 + 31);
  }
  uint64_t v8 = CFStringCreateWithBytes(kCFAllocatorDefault, v6, v7, 0x8000100u, 0);
  CFTypeRef v13 = v8;
  v15[0] = @"Checksum Value";
  v15[1] = cf;
  if (cf)
  {
    CFRetain(cf);
    uint64_t v8 = v13;
  }
  v15[2] = @"Checksum Type";
  v15[3] = v8;
  if (v8) {
    CFRetain(v8);
  }
  v11[0] = (uint64_t)v15;
  v11[1] = 2;
  sub_10011B428(v11, (CFMutableDictionaryRef *)&v12);
  *a2 = v12;
  CFNumberRef v12 = 0;
  sub_10002AB08(&v12);
  for (uint64_t i = 3; i != -1; i -= 2)
    sub_10002AAD4((const void **)&v15[i]);
  sub_10002A560(&v13);
  return sub_10002A560(&cf);
}

void sub_1000294C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, const void *);
  sub_10002AAD4(v4);
  sub_10002A560((const void **)va);
  sub_10002A560((const void **)va1);
  _Unwind_Resume(a1);
}

CFStringRef sub_100029514()
{
  return @"Master Checksum Info";
}

void sub_100029520(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_100194D68;
  *((void *)v1 + 7) = off_100194DC0;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
}

void sub_1000295B0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_100194D68;
  *((void *)v1 + 7) = off_100194DC0;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }

  operator delete();
}

uint64_t sub_100029664(uint64_t a1)
{
  *(void *)a1 = off_100194DF8;
  *(void *)(a1 + 32) = off_100194E50;
  sub_10002A560((const void **)(a1 + 24));
  sub_10002A560((const void **)(a1 + 16));
  sub_10002A560((const void **)(a1 + 8));
  return a1;
}

void sub_1000296DC(uint64_t a1)
{
  *(void *)a1 = off_100194DF8;
  *(void *)(a1 + 32) = off_100194E50;
  sub_10002A560((const void **)(a1 + 24));
  sub_10002A560((const void **)(a1 + 16));
  sub_10002A560((const void **)(a1 + 8));

  operator delete();
}

const void **sub_100029774@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (const void *)a1[1];
  CFStringRef v11 = @"UUID";
  CFNumberRef v12 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v8 = &v11;
  uint64_t v9 = 1;
  sub_10011B428((uint64_t *)&v8, (CFMutableDictionaryRef *)&v10);
  sub_10002AAD4(&v12);
  CFIndex v5 = (const void *)a1[3];
  if (v5)
  {
    CFStringRef v11 = @"Parent UUID";
    CFNumberRef v12 = v5;
    CFRetain(v5);
    uint64_t v8 = &v11;
    uint64_t v9 = 1;
    sub_10011B3DC((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_10002AAD4(&v12);
  }
  uint64_t v6 = (const void *)a1[2];
  if (v6)
  {
    CFStringRef v11 = @"Stable UUID";
    CFNumberRef v12 = v6;
    CFRetain(v6);
    uint64_t v8 = &v11;
    uint64_t v9 = 1;
    sub_10011B3DC((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_10002AAD4(&v12);
  }
  *a2 = v10;
  CFStringRef v10 = 0;
  return sub_10002AB08(&v10);
}

void sub_10002989C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10002AAD4(v3);
  sub_10002AB08((const void **)va);
  _Unwind_Resume(a1);
}

CFStringRef sub_1000298E8()
{
  return @"Identity Info";
}

const void **sub_1000298F4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_100194DF8;
  *((void *)v1 + 4) = off_100194E50;
  sub_10002A560((const void **)v1 + 3);
  sub_10002A560((const void **)v1 + 2);

  return sub_10002A560((const void **)v1 + 1);
}

void sub_100029988(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_100194DF8;
  *((void *)v1 + 4) = off_100194E50;
  sub_10002A560((const void **)v1 + 3);
  sub_10002A560((const void **)v1 + 2);
  sub_10002A560((const void **)v1 + 1);

  operator delete();
}

uint64_t sub_100029A34(uint64_t a1)
{
  uint64_t v2 = sub_10002AB70(a1, (uint64_t *)off_100193990);
  *(void *)(v2 + 256) = off_100194770;
  *(void *)(v2 + 64) = off_1001947C8;
  sub_10002A560((const void **)(v2 + 280));
  sub_10002A560((const void **)(a1 + 272));
  sub_10002A560((const void **)(a1 + 264));
  *(void *)(a1 + 200) = off_1001945C8;
  *(void *)(a1 + 48) = off_100194620;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  *(void *)(a1 + 136) = off_100194278;
  *(void *)(a1 + 40) = off_1001942D0;
  sub_10002A560((const void **)(a1 + 160));
  return a1;
}

void sub_100029B64(uint64_t a1)
{
  sub_100029A34(a1);

  operator delete();
}

const void **sub_100029B9C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  CFStringRef v11 = (uint64_t **)@"Image Format";
  uint64_t v12 = v4;
  sub_10002AFB0(a1, (CFStringRef *)&cf);
  CFStringRef v13 = @"Format Description";
  CFTypeRef v14 = cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_100028A28((uint64_t)a1 + *(void *)(*a1 - 112), &v10);
  CFStringRef v15 = @"Size Info";
  uint64_t v16 = v10;
  CFStringRef v10 = 0;
  sub_100010A14(&v10);
  sub_100028DC4((uint64_t)a1 + *(void *)(*a1 - 120), &v10);
  CFStringRef v17 = @"Encryption Info";
  char v18 = v10;
  CFStringRef v10 = 0;
  sub_100010A14(&v10);
  sub_100029094((uint64_t)a1 + *(void *)(*a1 - 128), &v10);
  CFStringRef v19 = @"Compression Info";
  uint64_t v20 = v10;
  CFStringRef v10 = 0;
  sub_100010A14(&v10);
  sub_100029364((uint64_t)a1 + *(void *)(*a1 - 136), &v10);
  CFStringRef v21 = @"Master Checksum Info";
  uint64_t v22 = v10;
  CFStringRef v10 = 0;
  sub_100010A14(&v10);
  sub_100029774((void *)((char *)a1 + *(void *)(*a1 - 144)), &v10);
  CFStringRef v23 = @"Identity Info";
  char v24 = v10;
  CFStringRef v10 = 0;
  sub_100010A14(&v10);
  int v25 = (uint64_t *)&v11;
  uint64_t v26 = 7;
  sub_10011B428((uint64_t *)&v25, (CFMutableDictionaryRef *)&v9);
  for (uint64_t i = 13; i != -1; i -= 2)
    sub_10002AAD4((const void **)&(&v11)[i]);
  sub_10002A560(&cf);
  uint64_t v6 = (const void *)a1[2];
  if (v6)
  {
    int v25 = (uint64_t *)@"Runs";
    uint64_t v26 = (uint64_t)v6;
    CFRetain(v6);
    CFStringRef v11 = &v25;
    uint64_t v12 = 1;
    sub_10011B3DC((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    sub_10002AAD4((const void **)&v26);
  }
  *a2 = v9;
  uint64_t v9 = 0;
  return sub_10002AB08(&v9);
}

void sub_100029E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002AAD4(v2);
  sub_10002AB08((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100029EB8(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_100029ED4(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));

  operator delete();
}

uint64_t sub_100029F24(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_100029F40(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));

  operator delete();
}

uint64_t sub_100029F90(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_100029FAC(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));

  operator delete();
}

uint64_t sub_100029FFC(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_10002A018(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));

  operator delete();
}

uint64_t sub_10002A068(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_10002A084(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));

  operator delete();
}

uint64_t sub_10002A0D4(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_10002A0F0(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 24));

  operator delete();
}

uint64_t sub_10002A140(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_10002A15C(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));

  operator delete();
}

const void **sub_10002A1AC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100029B9C((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

uint64_t sub_10002A1C8(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_10002A1E4(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));

  operator delete();
}

const void **sub_10002A234@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100029B9C((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

uint64_t sub_10002A250(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_10002A26C(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));

  operator delete();
}

const void **sub_10002A2BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100029B9C((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

uint64_t sub_10002A2D8(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_10002A2F4(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));

  operator delete();
}

const void **sub_10002A344@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100029B9C((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

uint64_t sub_10002A360(void *a1)
{
  return sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_10002A37C(void *a1)
{
  sub_100029A34((uint64_t)a1 + *(void *)(*a1 - 32));

  operator delete();
}

const void **sub_10002A3CC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100029B9C((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

char *sub_10002A3E8(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_10002A404(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

char *sub_10002A420(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_10002A43C(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

char *sub_10002A458(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_10002A474(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

char *sub_10002A490(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_10002A4AC(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

char *sub_10002A4C8(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_10002A4E4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

void sub_10002A504()
{
}

void sub_10002A51C()
{
}

void sub_10002A534()
{
}

void sub_10002A54C()
{
}

const void **sub_10002A560(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_10002A594(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10002A594(a1, *a2);
    sub_10002A594(a1, a2[1]);
    operator delete(a2);
  }
}

void *sub_10002A5EC(void *a1)
{
  sub_100003C58((uint64_t)v3);
  sub_100003DF0(v3, (uint64_t)"CoreFoundation type mismatch: ", 30);
  std::ostream::operator<<();
  sub_100003DF0(v3, (uint64_t)" while expecting ", 17);
  std::ostream::operator<<();
  sub_100010C3C((uint64_t)a1, (uint64_t)v3, 0x16u);
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *a1 = &off_100194B40;
  return a1;
}

void sub_10002A780(std::exception *a1)
{
  sub_100003828(a1);

  operator delete();
}

uint64_t sub_10002A7B8(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  CFIndex v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10002AA68(_Unwind_Exception *a1)
{
}

void *sub_10002AA90(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_100194B58[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 90)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return sub_100003DF0(a1, (uint64_t)v3, v4);
    }
  }
  CFIndex v5 = &dword_100194B58[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_100003DF0(a1, (uint64_t)v3, v4);
}

const void **sub_10002AAD4(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_10002AB08(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_10002AB3C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10002AB70(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 104)) = a2[1];
  *(void *)(a1 + *(void *)(*(void *)a1 - 96)) = a2[2];
  *(void *)(a1 + *(void *)(*(void *)a1 - 24)) = a2[3];
  *(void *)(a1 + *(void *)(*(void *)a1 - 32)) = a2[4];
  *(void *)(a1 + *(void *)(*(void *)a1 - 40)) = a2[5];
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = a2[6];
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = a2[7];
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = a2[8];
  *(void *)(a1 + *(void *)(*(void *)a1 - 112)) = a2[9];
  *(void *)(a1 + *(void *)(*(void *)a1 - 120)) = a2[10];
  *(void *)(a1 + *(void *)(*(void *)a1 - 128)) = a2[11];
  *(void *)(a1 + *(void *)(*(void *)a1 - 136)) = a2[12];
  *(void *)(a1 + *(void *)(*(void *)a1 - 144)) = a2[13];
  sub_10002B054((const void **)(a1 + 16));
  return a1;
}

CFStringRef sub_10002AFB0@<X0>(void *a1@<X0>, CFStringRef *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 128) + 8);
  if (v3)
  {
    if (v3 > 4) {
      CFStringRef v4 = @"raw";
    }
    else {
      CFStringRef v4 = off_100194EE0[v3 - 1];
    }
    CFStringRef result = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%s (%@)", "UDIF read-only compressed image", v4);
  }
  else
  {
    CFStringRef result = @"UDIF uncompressed read-only image";
  }
  *a2 = result;
  return result;
}

const void **sub_10002B054(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_10002B088(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10002B0BC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_10002B114((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10002B0FC(_Unwind_Exception *a1)
{
  sub_10002A594(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_10002B114(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    CFStringRef v4 = a2;
    CFIndex v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t *)result + 1;
    do
    {
      CFStringRef result = sub_10002B1A0(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          CFStringRef v4 = v8;
        }
        while (!v9);
      }
      CFStringRef v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_10002B1A0(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10002B240(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    sub_10002B3B8(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_10002B240(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_5;
  }
  char v5 = *(unsigned char *)(a5 + 16);
  unint64_t v6 = (v5 & 1) + *(void *)(a5 + 8) - 1;
  unint64_t v7 = a2[4];
  if ((a2[6] & 2) == 0) {
    ++v7;
  }
  if (v6 < v7)
  {
LABEL_5:
    uint64_t v8 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      CFStringRef v10 = a2;
LABEL_23:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        CFStringRef v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      CFStringRef v15 = a2;
      do
      {
        CFStringRef v10 = (uint64_t *)v15[2];
        BOOL v11 = *v10 == (void)v15;
        CFStringRef v15 = v10;
      }
      while (v11);
    }
    unint64_t v16 = *(void *)a5;
    if ((*(unsigned char *)(a5 + 16) & 2) == 0) {
      ++v16;
    }
    if ((unint64_t)(v10[6] & 1) + v10[5] - 1 < v16) {
      goto LABEL_23;
    }
    return sub_10002B410((uint64_t)a1, a3, a5);
  }
  BOOL v11 = (v5 & 2) == 0;
  unint64_t v12 = *(void *)a5;
  if (v11) {
    ++v12;
  }
  if ((unint64_t)(a2[6] & 1) + a2[5] - 1 < v12)
  {
    uint64_t v13 = a2[1];
    if (v13)
    {
      CFTypeRef v14 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v14;
        CFTypeRef v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      CFStringRef v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        BOOL v11 = *a4 == v17;
        CFStringRef v17 = (uint64_t *)a4;
      }
      while (!v11);
    }
    if (a4 == a1 + 1) {
      goto LABEL_34;
    }
    unint64_t v18 = (unint64_t)a4[4];
    if (((_BYTE)a4[6] & 2) == 0) {
      ++v18;
    }
    if (v6 < v18)
    {
LABEL_34:
      if (v13)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return sub_10002B410((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_10002B3B8(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  char v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  CFStringRef result = sub_10002B494(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *sub_10002B410(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  CFStringRef result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    if ((*(unsigned char *)(a3 + 16) & 2) != 0) {
      unint64_t v6 = *(void *)a3;
    }
    else {
      unint64_t v6 = *(void *)a3 + 1;
    }
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        char v8 = *(unsigned char *)(v4 + 48);
        unint64_t v9 = v7[4];
        if ((v8 & 2) == 0) {
          ++v9;
        }
        if ((unint64_t)(*(unsigned char *)(a3 + 16) & 1) + *(void *)(a3 + 8) - 1 >= v9) {
          break;
        }
        uint64_t v4 = *v7;
        CFStringRef result = v7;
        if (!*v7) {
          goto LABEL_14;
        }
      }
      if ((unint64_t)(v8 & 1) + v7[5] - 1 >= v6) {
        break;
      }
      CFStringRef result = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = result;
  }
LABEL_14:
  *a2 = v7;
  return result;
}

uint64_t *sub_10002B494(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unsigned int v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            CFStringRef v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unsigned int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            uint64_t *v9 = v2;
            _DWORD v2[2] = (uint64_t)v9;
            unsigned int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unsigned int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          _DWORD v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unsigned int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          _DWORD v2[2] = (uint64_t)a2;
          unsigned int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        _DWORD v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_10002B64C()
{
  return 0;
}

uint64_t sub_10002B654()
{
  return 0;
}

uint64_t sub_10002B664()
{
  return 0;
}

uint64_t sub_10002B66C()
{
  return 0;
}

uint64_t sub_10002B674()
{
  return 0;
}

uint64_t sub_10002B67C()
{
  return 0;
}

uint64_t sub_10002B684()
{
  return 0;
}

uint64_t sub_10002B68C()
{
  return 0;
}

uint64_t sub_10002B694()
{
  return 0;
}

uint64_t sub_10002B69C()
{
  return 0;
}

uint64_t sub_10002B6A4()
{
  return 0;
}

uint64_t sub_10002B6AC()
{
  return 0;
}

void sub_10002B880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_10002B894(uint64_t a1, void *a2)
{
  return _[a2 onDiskDisappearedWithDisk:a1];
}

id sub_10002C390(void *a1, const char *a2)
{
  return [a1 setCallbackReached:1];
}

void sub_10002CCCC(uint64_t a1, const __DADissenter *a2, void *a3)
{
  id v7 = a3;
  if (a2)
  {
    uint64_t Status = DADissenterGetStatus(a2);
    uint64_t v5 = +[NSString stringWithFormat:@"Dissented with status 0x%X, pid %d", Status, DADissenterGetProcessID()];
    int v6 = +[DIError errorWithEnumValue:156 verboseInfo:v5];
    [v7 setOperationError:v6];
  }
  [v7 setCallbackReached:1];
}

uint64_t sub_10002EE9C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 24) == *(void *)(result + 16))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  uint64_t v3 = **(void **)result + *(void *)(result + 32);
  if (*(void *)(result + 56)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    uint64_t v5 = *(void *)(*(void *)result + 8);
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(result + 64);
  if (v5) {
LABEL_10:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
LABEL_11:
  *(void *)a3 = v3;
  *(void *)(a3 + 8) = v5;
  unint64_t v6 = *(void *)(result + 32);
  unint64_t v7 = *(void *)(*(void *)result + 16) - v6;
  if (v7 >= *(void *)(result + 24) - *(void *)(result + 16)) {
    unint64_t v7 = *(void *)(result + 24) - *(void *)(result + 16);
  }
  unint64_t v8 = **(void **)(result + 8);
  BOOL v9 = v8 >= v6;
  unint64_t v10 = v8 - v6;
  if (!v9) {
    unint64_t v10 = 0;
  }
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v10;
  return result;
}

uint64_t sub_10002EF2C(uint64_t a1, void *a2, unint64_t **a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7)
{
  unint64_t v8 = 0;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(unsigned char *)(a1 + 48) = a7;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (a4 < a5)
  {
    unint64_t v8 = **a3;
    if (v8 >= a6) {
      unint64_t v8 = a6;
    }
  }
  *(void *)(a1 + 40) = v8;
  sub_10002EE9C(a1, 1, (uint64_t)v11);
  BOOL v9 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v11[0];
  if (v9) {
    sub_100010A48(v9);
  }
  *(_OWORD *)(a1 + 72) = v11[1];
  return a1;
}

uint64_t sub_10002EFC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(*(void *)a1 + 16) + v2 - *(void *)(a1 + 32);
    uint64_t v6 = *(void *)a1 + 24;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v4 + 8;
    *(void *)(a1 + 16) = v5;
  }
  sub_10002EE9C(a1, v2 != v3, (uint64_t)v9);
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v9[0];
  if (v7) {
    sub_100010A48(v7);
  }
  *(_OWORD *)(a1 + 72) = v9[1];
  return a1;
}

uint64_t sub_10002F050(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(void *)(a1 + 24) - v3;
    if (*(void *)(*(void *)a1 + 16) - *(void *)(a1 + 32) < v4) {
      unint64_t v4 = *(void *)(*(void *)a1 + 16) - *(void *)(a1 + 32);
    }
    BOOL v5 = v4 <= a2;
    if (v4 <= a2)
    {
      int v6 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 8) + 8;
      uint64_t v8 = *(void *)a1 + 24;
      do
      {
        uint64_t v9 = v7;
        uint64_t v10 = v8;
        if (v6)
        {
          *(void *)(v7 - 8) = *(void *)(a1 + 40) + v4;
          uint64_t v3 = *(void *)(a1 + 16);
        }
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        v3 += v4;
        *(void *)(a1 + 16) = v3;
        a2 -= v4;
        if (!a2) {
          break;
        }
        unint64_t v4 = *(void *)(v8 + 16);
        if (v4 >= *(void *)(a1 + 24) - v3) {
          unint64_t v4 = *(void *)(a1 + 24) - v3;
        }
        v7 += 8;
        v8 += 24;
        BOOL v11 = v4 > a2;
        if (v4 >= a2) {
          unint64_t v4 = a2;
        }
      }
      while (!v11);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v9;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  unint64_t v12 = *(void *)(a1 + 40) + a2;
  *(void *)(a1 + 40) = v12;
  if (v12 && *(unsigned char *)(a1 + 48)) {
    **(void **)(a1 + 8) = v12;
  }
  *(void *)(a1 + 16) += a2;
  *(void *)(a1 + 32) += a2;
  sub_10002EE9C(a1, v5, (uint64_t)v15);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v15[0];
  if (v13) {
    sub_100010A48(v13);
  }
  *(_OWORD *)(a1 + 72) = v15[1];
  return a1;
}

uint64_t sub_10002F188(uint64_t a1, unint64_t a2)
{
  char v3 = 0;
  if (a2)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 8) + 8;
    uint64_t v8 = *(void *)a1 + 24;
    while (1)
    {
      unint64_t v9 = v6 - v5;
      if (*(void *)(v8 - 8) - v4 < v6 - v5) {
        unint64_t v9 = *(void *)(v8 - 8) - v4;
      }
      unint64_t v10 = *(void *)(v7 - 8);
      BOOL v11 = v10 >= v4;
      unint64_t v12 = v10 - v4;
      unint64_t v13 = v11 ? v12 : 0;
      unint64_t v14 = v13 >= v9 ? v9 : v13;
      if (v14 >= a2 && (v9 > v13 || a2 != v14)) {
        break;
      }
      unint64_t v4 = 0;
      v5 += v9;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v5;
      *(void *)a1 = v8;
      if (a2 >= v14) {
        unint64_t v16 = a2 - v14;
      }
      else {
        unint64_t v16 = 0;
      }
      v7 += 8;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      char v3 = 1;
      v8 += 24;
      BOOL v11 = v14 >= a2;
      a2 = v16;
      if (v11) {
        goto LABEL_22;
      }
    }
    unint64_t v17 = *(void *)(a1 + 40) + a2;
    *(void *)(a1 + 16) = v5 + a2;
    *(void *)(a1 + 32) = v4 + a2;
    *(void *)(a1 + 40) = v17;
  }
LABEL_22:
  sub_10002EE9C(a1, v3 & 1, (uint64_t)v20);
  unint64_t v18 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v20[0];
  if (v18) {
    sub_100010A48(v18);
  }
  *(_OWORD *)(a1 + 72) = v20[1];
  return a1;
}

void *sub_10002F290(void *result)
{
  uint64_t v1 = result[2];
  if (v1 != result[3])
  {
    uint64_t v2 = result[4];
    char v3 = (void *)result[1];
    unint64_t v4 = (uint64_t *)(*result + 16);
    do
    {
      *v3++ = v2;
      uint64_t v5 = *v4;
      v4 += 3;
      uint64_t v6 = result[3];
      unint64_t v7 = v5 - v2;
      if (v7 >= v6 - v1) {
        unint64_t v7 = v6 - v1;
      }
      v1 += v7;
      uint64_t v2 = 0;
    }
    while (v1 != v6);
  }
  return result;
}

void sub_10002F2D8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[6];
  if (sub_10002F3D8((uint64_t)a1, a2))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    sub_100016C64((uint64_t)(a1 + 7));
    uint64_t v7 = a1[14];
    uint64_t v8 = (std::__shared_weak_count *)a1[15];
    if (v8)
    {
      p_shared_owners = &v8->__shared_owners_;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v10 = a1[16];
      uint64_t v11 = a1[18];
      unint64_t v12 = *(void *)(a2 + 144) - v11;
      if (v12 >= v10) {
        unint64_t v12 = a1[16];
      }
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      char v13 = *(unsigned char *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = v8;
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      *(void *)(a3 + 16) = v12;
      *(void *)(a3 + 24) = v11;
      *(void *)(a3 + 32) = v10;
      *(unsigned char *)(a3 + 40) = v13;
      sub_100010A48(v8);
      sub_100010A48(v8);
    }
    else
    {
      unint64_t v14 = a1[16];
      uint64_t v15 = a1[18];
      unint64_t v16 = *(void *)(a2 + 144) - v15;
      if (v16 >= v14) {
        unint64_t v16 = a1[16];
      }
      char v17 = *(unsigned char *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = v16;
      *(void *)(a3 + 24) = v15;
      *(void *)(a3 + 32) = v14;
      *(unsigned char *)(a3 + 40) = v17;
    }
  }
}

BOOL sub_10002F3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2 != *(void **)(a2 + 48)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 152)) {
    BOOL v5 = *(unsigned char *)(a2 + 152) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return *(void *)(a1 + 144) == *(void *)(a2 + 144);
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[27];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v2[33];
  uint64_t v8 = v2[34];
  uint64_t v9 = v2[35];
  unint64_t v10 = (std::__shared_weak_count *)v2[41];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  BOOL v12 = v11 == v7 && *(void *)(a1 + 64) == v8 && *(void *)(a1 + 72) == v9;
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  if (v14 == v7 && v13 == v8)
  {
    int v17 = v12 ^ (*(void *)(a2 + 72) != v9);
    if (v11 != v7 || v17 == 0) {
      goto LABEL_32;
    }
  }
  else
  {
    char v16 = v11 != v14 || v12;
    if (v16) {
      goto LABEL_32;
    }
  }
  if (*(void *)(a1 + 64) != v13 || *(void *)(a1 + 72) != *(void *)(a2 + 72))
  {
LABEL_32:
    BOOL v3 = 0;
    goto LABEL_33;
  }
  BOOL v3 = *(void *)(a1 + 144) == *(void *)(a2 + 144);
LABEL_33:
  if (v10) {
    sub_100010A48(v10);
  }
  if (v6) {
    sub_100010A48(v6);
  }
  return v3;
}

double sub_10002F51C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_100030CB0(a2, a1 + 208).n128_u64[0];
  return result;
}

uint64_t sub_10002F528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a1 + 8) = *(void *)a2;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)a1 = v7 - *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 96) = *(void *)a3;
  *(void *)(a1 + 104) = *(void *)(a3 + 8);
  long long v13 = *(_OWORD *)(a3 + 16);
  long long v14 = *(_OWORD *)(a3 + 32);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a3 + 48);
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 128) = v14;
  uint64_t v15 = *(void *)(a3 + 64);
  *(void *)(a1 + 152) = *(void *)(a3 + 56);
  *(void *)(a1 + 160) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a3 + 72);
  *(void *)(a1 + 184) = a4;
  *(void *)(a1 + 192) = a5;
  *(unsigned char *)(a1 + 200) = a6;
  sub_100030814(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_100030814(a1 + 368, a1, v8, 1);
  return a1;
}

void sub_10002F624(_Unwind_Exception *a1)
{
  sub_100011F6C(v2);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 160);
  if (v4) {
    sub_100010A48(v4);
  }
  BOOL v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5) {
    sub_100010A48(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10002F660(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t **a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *a2;
  uint64_t v13 = *a3;
  if (*a2 == *a3)
  {
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(std::__shared_weak_count **)(v12 + 8);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v16 = *(void *)(v12 + 16);
        sub_100010A48(v15);
      }
      else
      {
        uint64_t v16 = *(void *)(v12 + 16);
      }
      v14 += v16;
      v12 += 24;
    }
    while (v12 != v13);
  }
  *(void *)a1 = v14;
  sub_10002EF2C(a1 + 8, a2, a4, 0, v14, 0, 1);
  sub_10002EF2C(a1 + 96, a3, a5, *(void *)a1, *(void *)a1, 0, 1);
  *(void *)(a1 + 184) = a6;
  *(void *)(a1 + 192) = a7;
  *(unsigned char *)(a1 + 200) = 0;
  sub_100030814(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_100030814(a1 + 368, a1, (uint64_t *)(a1 + 8), 1);
  return a1;
}

void sub_10002F798(_Unwind_Exception *a1)
{
  sub_100011F6C(v2);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 160);
  if (v4) {
    sub_100010A48(v4);
  }
  BOOL v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5) {
    sub_100010A48(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10002F7CC(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)uint64_t v9 = v2;
  *(_OWORD *)&v9[16] = v3;
  long long v10 = *(_OWORD *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 56);
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  long long v14 = *(_OWORD *)(a1 + 80);
  for (uint64_t i = v2; i != *(void *)(a1 + 96) || *(_OWORD *)&v9[8] != *(_OWORD *)(a1 + 104); uint64_t i = *(void *)v9)
  {
    sub_100016C64((uint64_t)v9);
    uint64_t v7 = *((void *)&v14 + 1);
    if (*((void *)&v14 + 1)) {
      sub_10002F188((uint64_t)v9, *((unint64_t *)&v14 + 1));
    }
    else {
      sub_10002EFC0((uint64_t)v9);
    }
    v5 += v7;
  }
  if (v13) {
    sub_100010A48(v13);
  }
  return v5;
}

void sub_10002F8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_100010A48(a17);
  }
  _Unwind_Resume(exception_object);
}

double sub_10002F8C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_100030CB0(a2, a1 + 368).n128_u64[0];
  return result;
}

void sub_10002F8D4(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 216);
  uint64_t v64 = *(void *)(a1 + 208);
  __int16 v65 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v66[0] = *(_OWORD *)(a1 + 224);
  *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)(a1 + 233);
  long long v10 = (long long *)(a1 + 264);
  long long v68 = *(_OWORD *)(a1 + 264);
  long long v11 = *(_OWORD *)(a1 + 296);
  long long v69 = *(_OWORD *)(a1 + 280);
  uint64_t v67 = *(void *)(a1 + 256);
  char v71 = *(unsigned char *)(a1 + 312);
  long long v70 = v11;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 328);
  *(void *)&long long v72 = *(void *)(a1 + 320);
  *((void *)&v72 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v73 = *(_OWORD *)(a1 + 336);
  uint64_t v74 = *(void *)(a1 + 352);
  char v75 = *(unsigned char *)(a1 + 360);
  BOOL v13 = sub_10002F3D8(a2, (uint64_t)&v64);
  if (v12) {
    sub_100010A48(v12);
  }
  if (v9) {
    sub_100010A48(v9);
  }
  long long v14 = (_OWORD *)(a1 + 224);
  uint64_t v15 = (long long *)(a1 + 280);
  int v48 = (long long *)(a1 + 336);
  uint64_t v16 = (uint64_t *)(a1 + 352);
  if (!v13)
  {
    uint64_t v17 = *(void *)(a1 + 192);
    if (v17 + *(void *)(a1 + 184) < a3) {
      a3 = v17 + *(void *)(a1 + 184);
    }
    if (a3 >= *(void *)(a2 + 144))
    {
      int v25 = *(std::__shared_weak_count **)(a2 + 8);
      uint64_t v64 = *(void *)a2;
      __int16 v65 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v66[0] = *(_OWORD *)(a2 + 16);
      *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)(a2 + 25);
      uint64_t v67 = *(void *)(a2 + 48);
      long long v68 = *(_OWORD *)(a2 + 56);
      long long v69 = *(_OWORD *)(a2 + 72);
      long long v70 = *(_OWORD *)(a2 + 88);
      char v71 = *(unsigned char *)(a2 + 104);
      uint64_t v26 = *(void *)(a2 + 120);
      *(void *)&long long v72 = *(void *)(a2 + 112);
      *((void *)&v72 + 1) = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      long long v73 = *(_OWORD *)(a2 + 128);
      uint64_t v74 = *(void *)(a2 + 144);
      char v75 = *(unsigned char *)(a2 + 152);
      if (a4)
      {
        unint64_t v27 = *(void *)(a1 + 112);
        if ((unint64_t)v69 <= v27)
        {
          long long v52 = v68;
          *(_OWORD *)uint64_t v53 = v69;
          *(_OWORD *)&v53[16] = v70;
          LOBYTE(v54) = v71;
          __int16 v29 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          long long v55 = v72;
          if (*((void *)&v72 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
            unint64_t v27 = *(void *)(a1 + 112);
          }
          long long v56 = v73;
          if (*(void *)v53 >= v27)
          {
            unint64_t v28 = 0;
          }
          else
          {
            unint64_t v28 = 0;
            do
            {
              sub_100016C64((uint64_t)&v52);
              if (*(void *)(a1 + 112) - (void)v69 >= *((void *)&v56 + 1)) {
                unint64_t v30 = *((void *)&v56 + 1);
              }
              else {
                unint64_t v30 = *(void *)(a1 + 112) - v69;
              }
              if (v30) {
                sub_10002F188((uint64_t)&v52, v30);
              }
              else {
                sub_10002EFC0((uint64_t)&v52);
              }
              v28 += v30;
            }
            while (*(void *)v53 < *(void *)(a1 + 112));
            __int16 v29 = (std::__shared_weak_count *)*((void *)&v55 + 1);
          }
          if (v29) {
            sub_100010A48(v29);
          }
        }
        else
        {
          unint64_t v28 = 0;
        }
        if (v28 >= a4) {
          unint64_t v31 = a4;
        }
        else {
          unint64_t v31 = v28;
        }
        if (v31) {
          sub_10002FF28((uint64_t)&v64, v31);
        }
        if (v28 < a4) {
          sub_100030064((uint64_t)&v64, a4 - v31);
        }
      }
      uint64_t v33 = *(void *)(a1 + 208);
      uint64_t v32 = *(std::__shared_weak_count **)(a1 + 216);
      *(void *)&long long v52 = v33;
      *((void *)&v52 + 1) = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v47 = v33;
      *(_OWORD *)uint64_t v53 = *v14;
      *(_OWORD *)&v53[9] = *(_OWORD *)(a1 + 233);
      long long v34 = *(_OWORD *)(a1 + 296);
      long long v56 = *v15;
      uint64_t v35 = *(void *)(a1 + 264);
      uint64_t v36 = *(void *)(a1 + 256);
      uint64_t v54 = v36;
      *(void *)&long long v55 = v35;
      uint64_t v37 = v35;
      uint64_t v38 = *(void *)(a1 + 272);
      *((void *)&v55 + 1) = v38;
      long long v57 = v34;
      char v58 = *(unsigned char *)(a1 + 312);
      uint64_t v40 = *(void *)(a1 + 320);
      uint64_t v39 = *(std::__shared_weak_count **)(a1 + 328);
      uint64_t v59 = v40;
      uint64_t v60 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v61 = *v48;
      char v63 = *((unsigned char *)v16 + 8);
      unint64_t v62 = a3;
      sub_10002F2D8(&v64, (uint64_t)&v52, (uint64_t)&v49);
      int v41 = v50;
      unint64_t v42 = v65;
      uint64_t v64 = v49;
      __int16 v65 = v50;
      if (v42)
      {
        sub_100010A48(v42);
        int v41 = v65;
      }
      v66[0] = v51[0];
      *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v51 + 9);
      *(void *)a5 = v64;
      *(void *)(a5 + 8) = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a5 + 16) = v66[0];
      *(_OWORD *)(a5 + 25) = *(_OWORD *)((char *)v66 + 9);
      *(_OWORD *)(a5 + 56) = v68;
      long long v43 = v70;
      *(_OWORD *)(a5 + 72) = v69;
      *(void *)(a5 + 48) = v67;
      *(_OWORD *)(a5 + 88) = v43;
      *(unsigned char *)(a5 + 104) = v71;
      uint64_t v44 = *((void *)&v72 + 1);
      *(void *)(a5 + 112) = v72;
      *(void *)(a5 + 120) = v44;
      if (v44) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a5 + 128) = v73;
      *(void *)(a5 + 144) = v74;
      *(unsigned char *)(a5 + 152) = v75;
      *(void *)(a5 + 160) = v47;
      *(void *)(a5 + 168) = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a5 + 176) = *(_OWORD *)v53;
      *(_OWORD *)(a5 + 185) = *(_OWORD *)&v53[9];
      long long v45 = v57;
      *(_OWORD *)(a5 + 232) = v56;
      *(void *)(a5 + 208) = v36;
      *(void *)(a5 + 216) = v37;
      *(void *)(a5 + 224) = v38;
      *(_OWORD *)(a5 + 248) = v45;
      *(unsigned char *)(a5 + 264) = v58;
      *(void *)(a5 + 272) = v40;
      *(void *)(a5 + 280) = v39;
      if (v39)
      {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)(a5 + 288) = v61;
        *(void *)(a5 + 304) = v62;
        *(unsigned char *)(a5 + 312) = v63;
        sub_100010A48(v39);
        if (!v32) {
          goto LABEL_72;
        }
      }
      else
      {
        *(_OWORD *)(a5 + 288) = v61;
        *(void *)(a5 + 304) = v62;
        *(unsigned char *)(a5 + 312) = v63;
        if (!v32) {
          goto LABEL_72;
        }
      }
      char v24 = v32;
LABEL_71:
      sub_100010A48(v24);
      goto LABEL_72;
    }
  }
  unint64_t v18 = *(std::__shared_weak_count **)(a1 + 216);
  uint64_t v64 = *(void *)(a1 + 208);
  __int16 v65 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v66[0] = *v14;
  *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)(a1 + 233);
  long long v68 = *v10;
  long long v19 = v10[2];
  long long v69 = *v15;
  uint64_t v67 = *(void *)(a1 + 256);
  long long v70 = v19;
  char v71 = *((unsigned char *)v10 + 48);
  uint64_t v20 = *(void *)(a1 + 328);
  *(void *)&long long v72 = *(void *)(a1 + 320);
  *((void *)&v72 + 1) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  long long v73 = *v48;
  uint64_t v74 = *v16;
  char v75 = *(unsigned char *)(a1 + 360);
  uint64_t v21 = *(void *)(a1 + 216);
  *(void *)&long long v52 = *(void *)(a1 + 208);
  *((void *)&v52 + 1) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v53 = *v14;
  *(_OWORD *)&v53[9] = *(_OWORD *)(a1 + 233);
  long long v55 = *v10;
  long long v22 = v10[2];
  long long v56 = *v15;
  uint64_t v54 = *(void *)(a1 + 256);
  long long v57 = v22;
  char v58 = *((unsigned char *)v10 + 48);
  CFStringRef v23 = *(std::__shared_weak_count **)(a1 + 328);
  uint64_t v59 = *(void *)(a1 + 320);
  uint64_t v60 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v61 = *v48;
  unint64_t v62 = *v16;
  char v63 = *(unsigned char *)(a1 + 360);
  sub_100030D3C(a5, (uint64_t)&v64, (uint64_t)&v52);
  if (v60) {
    sub_100010A48(v60);
  }
  char v24 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1)) {
    goto LABEL_71;
  }
LABEL_72:
  if (*((void *)&v72 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v72 + 1));
  }
  if (v65) {
    sub_100010A48(v65);
  }
}

void sub_10002FEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t sub_10002FF28(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 144) += a2;
  sub_10002F188(a1 + 56, a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    unint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    v8[0] = *(void *)(v3 + 208);
    v8[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v10 = *(void *)(v3 + 256);
    long long v11 = *(_OWORD *)(v3 + 264);
    char v14 = *(unsigned char *)(v3 + 312);
    long long v12 = *(_OWORD *)(v3 + 280);
    long long v13 = *(_OWORD *)(v3 + 296);
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v15 = *(void *)(v3 + 320);
    uint64_t v16 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v17 = *(_OWORD *)(v3 + 336);
    uint64_t v18 = *(void *)(v3 + 352);
    char v19 = *(unsigned char *)(v3 + 360);
    sub_10002F2D8((void *)a1, (uint64_t)v8, (uint64_t)&v20);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v20;
    if (v6) {
      sub_100010A48(v6);
    }
    *(_OWORD *)(a1 + 16) = v21[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v21 + 9);
    if (v5) {
      sub_100010A48(v5);
    }
    if (v4) {
      sub_100010A48(v4);
    }
  }
  return a1;
}

void sub_100030050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100030064(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 144) += a2;
  sub_10002F050(a1 + 56, a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    unint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    v8[0] = *(void *)(v3 + 208);
    v8[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v10 = *(void *)(v3 + 256);
    long long v11 = *(_OWORD *)(v3 + 264);
    char v14 = *(unsigned char *)(v3 + 312);
    long long v12 = *(_OWORD *)(v3 + 280);
    long long v13 = *(_OWORD *)(v3 + 296);
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v15 = *(void *)(v3 + 320);
    uint64_t v16 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v17 = *(_OWORD *)(v3 + 336);
    uint64_t v18 = *(void *)(v3 + 352);
    char v19 = *(unsigned char *)(v3 + 360);
    sub_10002F2D8((void *)a1, (uint64_t)v8, (uint64_t)&v20);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v20;
    if (v6) {
      sub_100010A48(v6);
    }
    *(_OWORD *)(a1 + 16) = v21[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v21 + 9);
    if (v5) {
      sub_100010A48(v5);
    }
    if (v4) {
      sub_100010A48(v4);
    }
  }
  return a1;
}

void sub_10003018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000301A0(uint64_t a1)
{
  sub_10002EFC0(a1 + 56);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 216);
    v7[0] = *(void *)(v2 + 208);
    v7[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v8[0] = *(_OWORD *)(v2 + 224);
    *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(v2 + 233);
    uint64_t v9 = *(void *)(v2 + 256);
    long long v10 = *(_OWORD *)(v2 + 264);
    char v13 = *(unsigned char *)(v2 + 312);
    long long v11 = *(_OWORD *)(v2 + 280);
    long long v12 = *(_OWORD *)(v2 + 296);
    unint64_t v4 = *(std::__shared_weak_count **)(v2 + 328);
    uint64_t v14 = *(void *)(v2 + 320);
    uint64_t v15 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v16 = *(_OWORD *)(v2 + 336);
    uint64_t v17 = *(void *)(v2 + 352);
    char v18 = *(unsigned char *)(v2 + 360);
    sub_10002F2D8((void *)a1, (uint64_t)v7, (uint64_t)&v19);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v19;
    if (v5) {
      sub_100010A48(v5);
    }
    *(_OWORD *)(a1 + 16) = v20[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v20 + 9);
    if (v4) {
      sub_100010A48(v4);
    }
    if (v3) {
      sub_100010A48(v3);
    }
  }
  return a1;
}

void sub_1000302BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1000302D0(uint64_t a1)
{
  return *(void *)(a1 + 80) == *(void *)(a1 + 72);
}

void sub_1000302E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = *(void *)(a1 + 24);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v6 < (unint64_t)(v7 & 1) + *(void *)(a2 + 8) - 1)
  {
    unint64_t v10 = *(void *)(a1 + 16) + v6;
    char v11 = v7 & 2;
    unint64_t v12 = *(void *)a2;
    if ((v7 & 2) != 0) {
      unint64_t v13 = *(void *)a2;
    }
    else {
      unint64_t v13 = v12 + 1;
    }
    if (v10 <= v13)
    {
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v15 = *(std::__shared_weak_count **)(a1 + 8);
      uint64_t v73 = *(void *)a1;
      uint64_t v74 = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v16 = *(void *)(a1 + 48);
      }
      else
      {
        uint64_t v16 = v14;
      }
      v75[0] = *(_OWORD *)(a1 + 16);
      *(_OWORD *)((char *)v75 + 9) = *(_OWORD *)(a1 + 25);
      uint64_t v76 = v16;
      long long v77 = *(_OWORD *)(a1 + 56);
      long long v78 = *(_OWORD *)(a1 + 72);
      long long v79 = *(_OWORD *)(a1 + 88);
      char v80 = *(unsigned char *)(a1 + 104);
      uint64_t v17 = *(std::__shared_weak_count **)(a1 + 120);
      uint64_t v81 = *(void *)(a1 + 112);
      uint64_t v82 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v83 = *(_OWORD *)(a1 + 128);
      uint64_t v84 = *(void *)(a1 + 144);
      char v85 = *(unsigned char *)(a1 + 152);
      while (!sub_10002F3D8((uint64_t)&v73, a3))
      {
        v10 += *(void *)&v75[0];
        unint64_t v18 = *(void *)a2;
        if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
          ++v18;
        }
        if (v10 >= v18) {
          break;
        }
        sub_1000301A0((uint64_t)&v73);
      }
      long long v19 = *(std::__shared_weak_count **)(v14 + 216);
      uint64_t v60 = *(void *)(v14 + 208);
      long long v61 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v62[0] = *(_OWORD *)(v14 + 224);
      *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)(v14 + 233);
      long long v20 = (long long *)(v14 + 264);
      long long v64 = *(_OWORD *)(v14 + 264);
      long long v21 = *(_OWORD *)(v14 + 296);
      long long v65 = *(_OWORD *)(v14 + 280);
      uint64_t v63 = *(void *)(v14 + 256);
      char v67 = *(unsigned char *)(v14 + 312);
      long long v66 = v21;
      long long v22 = *(std::__shared_weak_count **)(v14 + 328);
      uint64_t v68 = *(void *)(v14 + 320);
      long long v69 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v70 = *(_OWORD *)(v14 + 336);
      uint64_t v71 = *(void *)(v14 + 352);
      char v72 = *(unsigned char *)(v14 + 360);
      BOOL v23 = sub_10002F3D8((uint64_t)&v73, (uint64_t)&v60);
      if (v22) {
        sub_100010A48(v22);
      }
      if (v19) {
        sub_100010A48(v19);
      }
      if (v23)
      {
        char v24 = (_OWORD *)(v14 + 224);
        int v25 = (long long *)(v14 + 280);
        uint64_t v26 = *(std::__shared_weak_count **)(v14 + 216);
        uint64_t v60 = *(void *)(v14 + 208);
        long long v61 = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v62[0] = *v24;
        *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)(v14 + 233);
        long long v64 = *v20;
        long long v27 = *(_OWORD *)(v14 + 296);
        long long v65 = *v25;
        unint64_t v28 = (long long *)(v14 + 336);
        __int16 v29 = (uint64_t *)(v14 + 352);
        uint64_t v63 = *(void *)(v14 + 256);
        long long v66 = v27;
        char v67 = *(unsigned char *)(v14 + 312);
        unint64_t v30 = *(std::__shared_weak_count **)(v14 + 328);
        uint64_t v68 = *(void *)(v14 + 320);
        long long v69 = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v70 = *v28;
        uint64_t v71 = *v29;
        char v72 = *(unsigned char *)(v14 + 360);
        unint64_t v31 = *(std::__shared_weak_count **)(v14 + 216);
        uint64_t v47 = *(void *)(v14 + 208);
        int v48 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)uint64_t v49 = *v24;
        *(_OWORD *)&v49[9] = *(_OWORD *)(v14 + 233);
        long long v32 = *v25;
        long long v33 = *(_OWORD *)(v14 + 296);
        long long v51 = *v20;
        long long v52 = v32;
        uint64_t v50 = *(void *)(v14 + 256);
        long long v53 = v33;
        char v54 = *(unsigned char *)(v14 + 312);
        long long v34 = *(std::__shared_weak_count **)(v14 + 328);
        uint64_t v55 = *(void *)(v14 + 320);
        long long v56 = v34;
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v57 = *v28;
        uint64_t v58 = *v29;
        char v59 = *(unsigned char *)(v14 + 360);
        sub_100030D3C(a4, (uint64_t)&v60, (uint64_t)&v47);
        if (v56) {
          sub_100010A48(v56);
        }
        if (v48) {
          sub_100010A48(v48);
        }
        if (v69) {
          sub_100010A48(v69);
        }
        if (v61) {
          sub_100010A48(v61);
        }
        if (v82) {
          sub_100010A48(v82);
        }
        if (v74) {
          sub_100010A48(v74);
        }
        return;
      }
      if (v82) {
        sub_100010A48(v82);
      }
      if (v74) {
        sub_100010A48(v74);
      }
      unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
      unint64_t v12 = *(void *)a2;
      unint64_t v6 = *(void *)(a1 + 24);
      char v11 = v7 & 2;
    }
    if (v11) {
      unint64_t v35 = v12;
    }
    else {
      unint64_t v35 = v12 + 1;
    }
    unint64_t v36 = v35 - v6;
    if (v35 < v6)
    {
      if (v7)
      {
        if (v7 == 3)
        {
          unint64_t v37 = *(void *)(a2 + 8);
          if (v37 < v12) {
            goto LABEL_70;
          }
        }
        else
        {
          unint64_t v37 = *(void *)(a2 + 8);
          if (v12 >= v37)
          {
LABEL_70:
            uint64_t v39 = qword_1001C45E0;
            goto LABEL_71;
          }
        }
      }
      else
      {
        unint64_t v37 = *(void *)(a2 + 8);
        if (v12 >= v37 || v12 + 1 >= v37) {
          goto LABEL_70;
        }
      }
      uint64_t v39 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v37;
LABEL_71:
      unint64_t v40 = v39 + v35;
      uint64_t v41 = *(void *)(a1 + 48);
      if (*(void *)(a3 + 144) >= v40) {
        unint64_t v42 = v40;
      }
      else {
        unint64_t v42 = *(void *)(a3 + 144);
      }
      uint64_t v43 = a4;
      uint64_t v44 = a1;
      unint64_t v36 = 0;
LABEL_84:
      sub_10002F8D4(v41, v44, v42, v36, v43);
      return;
    }
    if (v7)
    {
      if (v7 == 3)
      {
        unint64_t v38 = *(void *)(a2 + 8);
        if (v38 < v12) {
          goto LABEL_79;
        }
      }
      else
      {
        unint64_t v38 = *(void *)(a2 + 8);
        if (v12 >= v38)
        {
LABEL_79:
          uint64_t v45 = qword_1001C45E0;
          goto LABEL_80;
        }
      }
    }
    else
    {
      unint64_t v38 = *(void *)(a2 + 8);
      if (v12 >= v38 || v12 + 1 >= v38) {
        goto LABEL_79;
      }
    }
    uint64_t v45 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v38;
LABEL_80:
    unint64_t v46 = v45 + v35;
    uint64_t v41 = *(void *)(a1 + 48);
    if (*(void *)(a3 + 144) >= v46) {
      unint64_t v42 = v46;
    }
    else {
      unint64_t v42 = *(void *)(a3 + 144);
    }
    uint64_t v43 = a4;
    uint64_t v44 = a1;
    goto LABEL_84;
  }
  sub_100030CB0(a4, a3);

  sub_100030CB0(a4 + 160, a3);
}

void sub_1000307E4(_Unwind_Exception *a1)
{
  sub_100011F6C(v1 - 248);
  _Unwind_Resume(a1);
}

void sub_1000307F8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (*(void *)(a3 + 144) >= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)(a3 + 144);
  }
  sub_10002F8D4(v6, a1, v7, a4, a5);
}

uint64_t sub_100030814(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = *a3;
  *(void *)(a1 + 64) = a3[1];
  long long v6 = *((_OWORD *)a3 + 1);
  long long v7 = *((_OWORD *)a3 + 2);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a3 + 48);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(void *)(a1 + 112) = a3[7];
  uint64_t v8 = a3[8];
  *(void *)(a1 + 120) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a3 + 9);
  *(unsigned char *)(a1 + 152) = a4;
  uint64_t v9 = *a3;
  if (*a3 == *(void *)(a2 + 96) && a3[1] == *(void *)(a2 + 104) && a3[2] == *(void *)(a2 + 112))
  {
    *(void *)(a1 + 144) = *(void *)(a2 + 184) + *(void *)(a2 + 192);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 8);
    long long v11 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)unint64_t v40 = v10;
    *(_OWORD *)&v40[16] = v11;
    long long v41 = *(_OWORD *)(a2 + 40);
    char v42 = *(unsigned char *)(a2 + 56);
    unint64_t v12 = *(std::__shared_weak_count **)(a2 + 72);
    uint64_t v43 = *(void *)(a2 + 64);
    uint64_t v44 = v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *a3;
    }
    long long v45 = *(_OWORD *)(a2 + 80);
    unint64_t v13 = a3[1];
    unint64_t v14 = a3[2];
    uint64_t v15 = (std::__shared_weak_count *)a3[8];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((void)v10 == v9 && *(_OWORD *)&v40[8] == __PAIR128__(v14, v13))
    {
      uint64_t v16 = 0;
    }
    else
    {
      int v17 = 0;
      do
      {
        sub_100016C64((uint64_t)v40);
        unint64_t v18 = v44;
        if (v44)
        {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          int v19 = DWORD2(v45);
          sub_100010A48(v18);
        }
        else
        {
          int v19 = DWORD2(v45);
        }
        v17 += v19;
        sub_10002EFC0((uint64_t)v40);
      }
      while (*(void *)v40 != v9 || *(void *)&v40[8] != v13 || *(void *)&v40[16] != v14);
      uint64_t v16 = v17;
    }
    *(void *)(a1 + 144) = *(void *)(a2 + 184) + v16;
    if (v15) {
      sub_100010A48(v15);
    }
    if (v44) {
      sub_100010A48(v44);
    }
    long long v22 = *(std::__shared_weak_count **)(a2 + 216);
    v26[0] = *(void *)(a2 + 208);
    v26[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v27[0] = *(_OWORD *)(a2 + 224);
    *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)(a2 + 233);
    uint64_t v28 = *(void *)(a2 + 256);
    long long v29 = *(_OWORD *)(a2 + 264);
    char v32 = *(unsigned char *)(a2 + 312);
    long long v30 = *(_OWORD *)(a2 + 280);
    long long v31 = *(_OWORD *)(a2 + 296);
    BOOL v23 = *(std::__shared_weak_count **)(a2 + 328);
    uint64_t v33 = *(void *)(a2 + 320);
    long long v34 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v35 = *(_OWORD *)(a2 + 336);
    uint64_t v36 = *(void *)(a2 + 352);
    char v37 = *(unsigned char *)(a2 + 360);
    sub_10002F2D8((void *)a1, (uint64_t)v26, (uint64_t)&v38);
    char v24 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v38;
    if (v24) {
      sub_100010A48(v24);
    }
    *(_OWORD *)(a1 + 16) = v39[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v39 + 9);
    if (v23) {
      sub_100010A48(v23);
    }
    if (v22) {
      sub_100010A48(v22);
    }
  }
  return a1;
}

void sub_100030ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100011F6C((uint64_t)&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 + 120);
  if (v11) {
    sub_100010A48(v11);
  }
  unint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
  if (v12) {
    sub_100010A48(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100030B28(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 48) + 200);
}

uint64_t sub_100030B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6 = *(void *)(a2 + 144) - a3;
  if (v6 <= a4) {
    unint64_t v6 = a4;
  }
  if (v6 < a5) {
    a5 = v6;
  }
  return sub_10002F528(a6, a1 + 56, a2 + 56, a3, a5, *(unsigned char *)(*(void *)(a1 + 48) + 200));
}

BOOL sub_100030B70(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = *(void *)(a1 + 144);
  return v4 > a3 || *(void *)(a2 + 144) - v4 < a4;
}

void *sub_100030B8C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[61];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[47];
  if (v3) {
    sub_100010A48(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[41];
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[27];
  if (v5) {
    sub_100010A48(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)a1[20];
  if (v6) {
    sub_100010A48(v6);
  }
  long long v7 = (std::__shared_weak_count *)a1[9];
  if (v7) {
    sub_100010A48(v7);
  }
  return a1;
}

void *sub_100030BF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v9 = v11;
  v11[0] = v5;
  v11[1] = v4;
  _OWORD v11[2] = v7;
  long long v10 = xmmword_100164300;
  sub_100030FA8(a2, &v9, v6, a1[2]);
  return sub_100014DA8(&v9);
}

void sub_100030C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100014DA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_100030CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  uint64_t v8 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v8;
  return result;
}

__n128 sub_100030D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a3 + 25);
  *(_OWORD *)(a1 + 176) = v7;
  *(void *)(a1 + 208) = *(void *)(a3 + 48);
  *(void *)(a1 + 216) = *(void *)(a3 + 56);
  *(void *)(a1 + 224) = *(void *)(a3 + 64);
  long long v8 = *(_OWORD *)(a3 + 72);
  long long v9 = *(_OWORD *)(a3 + 88);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a3 + 104);
  *(_OWORD *)(a1 + 248) = v9;
  *(_OWORD *)(a1 + 232) = v8;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a3 + 112);
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  __n128 result = *(__n128 *)(a3 + 128);
  *(__n128 *)(a1 + 288) = result;
  uint64_t v11 = *(void *)(a3 + 144);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a3 + 152);
  *(void *)(a1 + 304) = v11;
  return result;
}

uint64_t sub_100030E20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  sub_100030814(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_100030814(a1 + 368, a1, v4, 1);
  return a1;
}

void sub_100030F00(_Unwind_Exception *a1)
{
  sub_100011F6C(v2);
  long long v4 = *(std::__shared_weak_count **)(v1 + 160);
  if (v4) {
    sub_100010A48(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5) {
    sub_100010A48(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100030F34(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 488);
    if (v2) {
      sub_100010A48(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 376);
    if (v3) {
      sub_100010A48(v3);
    }
    long long v4 = *(std::__shared_weak_count **)(a1 + 328);
    if (v4) {
      sub_100010A48(v4);
    }
    long long v5 = *(std::__shared_weak_count **)(a1 + 216);
    if (v5) {
      sub_100010A48(v5);
    }
    long long v6 = *(std::__shared_weak_count **)(a1 + 160);
    if (v6) {
      sub_100010A48(v6);
    }
    long long v7 = *(std::__shared_weak_count **)(a1 + 72);
    if (v7) {
      sub_100010A48(v7);
    }
  }
  return a1;
}

uint64_t *sub_100030FA8(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10003103C((uint64_t)a1, a2);
  uint64_t v8 = a1[1];
  uint64_t v15 = *a1;
  uint64_t v9 = v15 + 24 * v8;
  uint64_t v10 = a1[19];
  unint64_t v13 = (unint64_t *)a1[18];
  uint64_t v14 = v9;
  unint64_t v12 = &v13[v10];
  sub_10002F660(v7 + 208, &v15, &v14, &v13, &v12, a3, a4);
  return a1;
}

void sub_100031028(_Unwind_Exception *a1)
{
  sub_100014940(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003103C(uint64_t a1, void *a2)
{
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_100163280;
  sub_1000310E8(a1, a2);
  *(void *)(a1 + 144) = a1 + 168;
  unint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_100163280;
  sub_100014E18(a1 + 144, v3);
  return a1;
}

void sub_1000310B8(_Unwind_Exception *a1)
{
  if (v1[20])
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }
  sub_100014DA8(v1);
  _Unwind_Resume(a1);
}

void sub_1000310E8(uint64_t a1, void *a2)
{
  long long v4 = (long long *)(a2 + 3);
  unint64_t v3 = (long long *)*a2;
  if (v4 == v3)
  {
    sub_100031160((uint64_t *)a1, v3, (uint64_t)v3 + 24 * a2[1]);
    sub_100014B08(a2);
  }
  else
  {
    *(void *)a1 = v3;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_100031160(uint64_t *a1, long long *a2, uint64_t a3)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3);
  if (v5 <= a1[2])
  {
    sub_1000312B0((uint64_t)a1, a2, 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3), *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x555555555555556) {
      sub_100014AAC("get_next_capacity, allocator's max size reached");
    }
    uint64_t v7 = operator new(a3 - (void)a2);
    uint64_t v8 = (uint64_t *)*a1;
    if (*a1)
    {
      sub_100014B08(a1);
      if (a1 + 3 != v8) {
        operator delete(v8);
      }
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v7;
    sub_100031254(a1, (uint64_t)a2, a3);
  }
}

void *sub_100031254(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *result + 24 * v3;
  uint64_t v5 = v4;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      v5 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v3 = result[1];
  }
  result[1] = v3 - 0x5555555555555555 * ((v5 - v4) >> 3);
  return result;
}

void sub_1000312B0(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = a2;
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      unint64_t v15 = a3;
      do
      {
        long long v16 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        int v17 = *(std::__shared_weak_count **)(a4 + 8);
        *(_OWORD *)a4 = v16;
        if (v17) {
          sub_100010A48(v17);
        }
        *(void *)(a4 + 16) = *((void *)v8 + 2);
        a4 += 24;
        uint64_t v8 = (long long *)((char *)v8 + 24);
        --v15;
      }
      while (v15);
    }
    if (a5 != a3)
    {
      unint64_t v18 = a3 - a5;
      int v19 = (std::__shared_weak_count **)(a4 + 8);
      do
      {
        if (*v19) {
          sub_100010A48(*v19);
        }
        v19 += 3;
        BOOL v14 = __CFADD__(v18++, 1);
      }
      while (!v14);
    }
  }
  else
  {
    if (a5)
    {
      uint64_t v10 = a2;
      uint64_t v8 = (long long *)((char *)a2 + 24 * a5);
      unint64_t v11 = a5;
      do
      {
        long long v12 = *v10;
        *(void *)uint64_t v10 = 0;
        *((void *)v10 + 1) = 0;
        unint64_t v13 = *(std::__shared_weak_count **)(a4 + 8);
        *(_OWORD *)a4 = v12;
        if (v13) {
          sub_100010A48(v13);
        }
        *(void *)(a4 + 16) = *((void *)v10 + 2);
        a4 += 24;
        uint64_t v10 = (long long *)((char *)v10 + 24);
        --v11;
      }
      while (v11);
    }
    if (a3 != a5)
    {
      do
      {
        *(_OWORD *)a4 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *(void *)(a4 + 16) = *((void *)v8 + 2);
        uint64_t v8 = (long long *)((char *)v8 + 24);
        a4 += 24;
        BOOL v14 = __CFADD__(v9++, 1);
      }
      while (!v14);
    }
  }
}

void sub_100031B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2 == 1)
  {
    id v24 = objc_begin_catch(exception_object);
    int v25 = [v24 reason];
    +[DIError failWithEnumValue:150 verboseInfo:v25 error:v23];

    objc_end_catch();
    JUMPOUT(0x100031B58);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100031C60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100031C70(uint64_t a1)
{
}

void sub_100031C78(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (!v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) signalCommandCompletedWithXpcError:v6];
}

void sub_100032050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    int v19 = [v18 reason];
    +[DIError failWithEnumValue:150 verboseInfo:v19 error:v17];

    objc_end_catch();
    JUMPOUT(0x100032018);
  }
  _Unwind_Resume(exception_object);
}

id sub_100032100(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_10003214C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v2 = (unint64_t)(*(void *)(*(void *)(a2 + 560) + 120) + *(void *)(*(void *)(a2 + 560) + 128) - 1)
     / *(void *)(*(void *)(a2 + 560) + 128);
  sub_100077D04();
}

void sub_100032264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1000347B8((uint64_t *)va);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 16))(a6);
  }
  _Unwind_Resume(a1);
}

void sub_100032300(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        sub_100010A48(v3);
      }
      sub_100141C20((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      id v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    sub_100010A48(v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_100032408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100010A48(v12);
  }
  if (a12) {
    sub_100010A48(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100032438(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = off_100194960;
  *(void *)(a1 + 32) = off_100194990;
  *(void *)(a1 + 40) = off_1001949C0;
  *(void *)(a1 + 48) = off_1001949F0;
  *(void *)a1 = off_1001956B0;
  *(void *)(a1 + 8) = off_1001956F8;
  *(void *)(a1 + 16) = off_100195740;
  *(void *)(a1 + 24) = off_100195788;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001957D0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_100195818;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_100195860;
  *(void *)a1 = off_100195488;
  *(void *)(a1 + 8) = off_1001954D0;
  *(void *)(a1 + 16) = off_100195518;
  *(void *)(a1 + 24) = off_100195560;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001955A8;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_1001955F0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_100195638;
  *(void *)(a1 + 56) = off_1001958C0;
  *(void *)(a1 + 8) = off_100195918;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 120) = off_100195A08;
  *(void *)(a1 + 24) = off_100195A60;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_100032B70((uint64_t *)(a1 + 152), (uint64_t *)&off_100195408, a2);
  *(void *)a1 = off_100194FD0;
  *(void *)(a1 + 8) = off_100195018;
  *(void *)(a1 + 16) = off_100195060;
  *(void *)(a1 + 24) = off_1001950A8;
  *(void *)(a1 + 32) = off_1001950F0;
  *(void *)(a1 + 40) = off_100195138;
  *(void *)(a1 + 48) = off_100195180;
  *(void *)(a1 + 56) = off_1001951E0;
  *(void *)(a1 + 120) = off_100195250;
  *(void *)(a1 + 152) = off_1001952C0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112) + 8) = (*(uint64_t (**)(void))(**(void **)(a2 + 560)
                                                                                               + 40))(*(void *)(a2 + 560));
  sub_10003214C(a1, a2);
}

void sub_100032B18(_Unwind_Exception *a1)
{
  if (v1) {
    sub_100010A48(v1);
  }
  sub_100027F6C(v2, (uint64_t *)&off_100195408);
  sub_1000280F4(v3, (uint64_t *)&off_1001953E8);
  _Unwind_Resume(a1);
}

uint64_t *sub_100032B70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100194E80;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  id v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  CFUUIDRef v10 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *(CFUUIDBytes *)(*(void *)(a3 + 560) + 136));
  CFStringRef v7 = CFUUIDCreateString(kCFAllocatorDefault, v10);
  CFStringRef v9 = v7;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v7 = v9;
  }
  a1[1] = (uint64_t)v7;
  CFStringRef v9 = 0;
  sub_10002A560((const void **)&v9);
  sub_10002B088((const void **)&v10);
  return a1;
}

void sub_100032D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_10002A560(&a9);
  sub_10002B088(&a10);
  sub_10002A560((const void **)(v10 + 24));
  sub_10002A560((const void **)(v10 + 16));
  sub_10002A560(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100032D70(uint64_t a1)
{
  *(void *)(a1 + 152) = off_100195B50;
  *(void *)(a1 + 48) = off_100195BA8;
  sub_10002A560((const void **)(a1 + 176));
  sub_10002A560((const void **)(a1 + 168));
  sub_10002A560((const void **)(a1 + 160));
  *(void *)(a1 + 120) = off_100195A08;
  *(void *)(a1 + 24) = off_100195A60;
  sub_10002A560((const void **)(a1 + 144));
  return a1;
}

void sub_100032E34(uint64_t a1)
{
  *(void *)(a1 + 152) = off_100195B50;
  *(void *)(a1 + 48) = off_100195BA8;
  sub_10002A560((const void **)(a1 + 176));
  sub_10002A560((const void **)(a1 + 168));
  sub_10002A560((const void **)(a1 + 160));
  *(void *)(a1 + 120) = off_100195A08;
  *(void *)(a1 + 24) = off_100195A60;
  sub_10002A560((const void **)(a1 + 144));

  operator delete();
}

const void **sub_100032F18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  v10[2] = @"Format Description";
  v10[3] = @"Sparse bundle image";
  sub_100028A28(a1 + *(void *)(*(void *)a1 - 112), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  CFStringRef v9 = 0;
  sub_100010A14(&v9);
  sub_100028DC4(a1 + *(void *)(*(void *)a1 - 120), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  CFStringRef v9 = 0;
  sub_100010A14(&v9);
  sub_100029774((void *)(a1 + *(void *)(*(void *)a1 - 128)), &v9);
  v10[8] = @"Identity Info";
  v10[9] = v9;
  CFStringRef v9 = 0;
  sub_100010A14(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 5;
  sub_10011B428(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  long long v8 = 0;
  sub_10002AB08(&v8);
  for (uint64_t i = 9; i != -1; i -= 2)
    __n128 result = sub_10002AAD4((const void **)&v10[i]);
  return result;
}

void sub_1000330D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  for (uint64_t i = 72; i != -8; i -= 16)
    sub_10002AAD4((const void **)(&a14 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_100033118()
{
  return @"UDSB";
}

const void **sub_100033124(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;

  return sub_10002A560((const void **)v1 + 18);
}

void sub_100033204(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_1000332FC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;

  return sub_10002A560((const void **)v1 + 18);
}

void sub_1000333DC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_1000334D4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;

  return sub_10002A560((const void **)v1 + 18);
}

void sub_1000335B4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_1000336AC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;

  return sub_10002A560((const void **)v1 + 18);
}

void sub_10003378C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_100033884(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;

  return sub_10002A560((const void **)v1 + 18);
}

void sub_100033964(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_100033A5C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;

  return sub_10002A560((const void **)v1 + 18);
}

void sub_100033B3C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_100033C34(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;

  return sub_10002A560((const void **)v1 + 18);
}

void sub_100033D14(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_100033E0C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100032F18((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_100033E28()
{
  return @"UDSB";
}

const void **sub_100033E34(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;

  return sub_10002A560((const void **)v1 + 18);
}

void sub_100033F14(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_10003400C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100032F18((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_100034028()
{
  return @"UDSB";
}

const void **sub_100034034(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;

  return sub_10002A560((const void **)v1 + 18);
}

void sub_100034114(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_100195B50;
  *((void *)v1 + 6) = off_100195BA8;
  sub_10002A560((const void **)v1 + 22);
  sub_10002A560((const void **)v1 + 21);
  sub_10002A560((const void **)v1 + 20);
  *((void *)v1 + 15) = off_100195A08;
  *((void *)v1 + 3) = off_100195A60;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_10003420C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100032F18((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_100034228()
{
  return @"UDSB";
}

void sub_100034238()
{
}

__n128 sub_10003424C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_100195CC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1000342A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100195CC0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000342E8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (**(void **)(result + 8) <= (unint64_t)*a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)&v12);
    sub_100003DF0(&v12, (uint64_t)"Bands folder contains an out of range band (", 44);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    sub_100003DF0(&v12, v10, v11);
    sub_100003DF0(&v12, (uint64_t)")", 1);
    sub_100010C3C((uint64_t)exception, (uint64_t)&v12, 0x16u);
  }
  uint64_t v4 = *(void **)(result + 16);
  if (*v4) {
    sub_10013E590((uint64_t)&v12, *(void *)(result + 24) + 24, *a3, v4);
  }
  uint64_t v5 = *(void *)(result + 24);
  if ((unint64_t)(*(void *)(*(void *)(v5 + 560) + 120) + *(void *)(*(void *)(v5 + 560) + 128) - 1)
     / *(void *)(*(void *)(v5 + 560) + 128)
     - 1 == v3)
    uint64_t v6 = *(void *)(*(void *)(result + 40) + *(void *)(**(void **)(result + 40) - 112) + 8)
       - *(void *)(v5 + 64) * v3;
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  **(void **)(result + 32) += v6;
  return result;
}

void sub_1000344D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_10003475C()
{
}

uint64_t sub_10003476C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000347AC()
{
}

void *sub_1000347B8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000348E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003496C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100035414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000357D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100035BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100035CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100035DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100035E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100035EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100036030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000360F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000369D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100036C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100036EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100036FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003741C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000374A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037C74(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16))(a12);
  }

  if (a2 == 1)
  {
    uint64_t v17 = [objc_begin_catch(a1) reason];
    +[DIError failWithEnumValue:150 verboseInfo:v17 error:v12];

    objc_end_catch();
    JUMPOUT(0x1000376D0);
  }
  _Unwind_Resume(a1);
}

void sub_100038054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13)
{
  if (a11) {
    sub_100010A48(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000380B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  uint64_t v11 = a2;
  uint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  char v16 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v11);
  if (v12) {
    sub_100010A48(v12);
  }
  return v9;
}

void sub_100038154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000382B4()
{
}

void sub_100038454(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100010A48(v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100038870(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 564))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    long long v4 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v4;
    uint64_t v5 = *(void *)(a2 + 36);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(void *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    bzero((void *)(a1 + 48), 0x204uLL);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
    *(unsigned char *)(a1 + 564) = 1;
  }
  return a1;
}

void sub_100038AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100038BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100038BC8()
{
}

void *sub_100038BDC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_100195D50;
  return result;
}

void sub_100038C14(uint64_t a1, void *a2)
{
  *a2 = off_100195D50;
}

void sub_100038C3C(uint64_t a1, void **a2)
{
}

uint64_t sub_100038C44(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_100195DB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100038C84()
{
  return &off_100195DB0;
}

int64_t sub_100038C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t result = sub_100011DAC(*(void *)(a1 + 16));
  v11[0] = result;
  v11[1] = v6;
  if (result <= 0)
  {
    if ((int)result >= 0) {
      uint64_t v10 = result;
    }
    else {
      uint64_t v10 = -(int)result;
    }
    return -v10;
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 144);
    unint64_t v8 = (*(void *)(a3 + 144) - v7) & ~((uint64_t)(*(void *)(a3 + 144) - v7) >> 63);
    if (v7 > v6 || v8 < result) {
      return sub_100143D4C(a2, a3, v8, v11);
    }
  }
  return result;
}

unint64_t sub_100038D0C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  if (!*(unsigned char *)(a1 + 56))
  {
    if (!a2[6]
      || (uint64_t v7 = *(void *)(a4 + 144) - *(void *)(a3 + 144),
          *(void *)(a4 + 72) - *(void *)(a3 + 72) >= (v7 & (unint64_t)~(v7 >> 63)) + a2[8]))
    {
      sub_100011DAC(a2[2]);
    }
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v71 = *(void **)a3;
  char v72 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v73 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v73[9] = *(_OWORD *)(a3 + 25);
  uint64_t v74 = *(void *)(a3 + 48);
  long long v75 = *(_OWORD *)(a3 + 56);
  long long v76 = *(_OWORD *)(a3 + 72);
  long long v77 = *(_OWORD *)(a3 + 88);
  char v78 = *(unsigned char *)(a3 + 104);
  uint64_t v9 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v79 = *(void *)(a3 + 112);
  char v80 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a3 + 144);
  uint64_t v10 = a3 + 144;
  long long v81 = *(_OWORD *)(v10 - 16);
  uint64_t v82 = v11;
  char v83 = *(unsigned char *)(v10 + 8);
  if (((*(void *)(v4 + 144) - v11) & (unint64_t)~((*(void *)(v4 + 144) - v11) >> 63)) + v6[8] <= *(void *)&v73[16])
  {
    unint64_t v12 = sub_100038C90((uint64_t)v6, (uint64_t)&v71, v4);
    sub_10002FF28((uint64_t)&v71, v12);
    int64_t v13 = v12;
    if ((v12 & 0x8000000000000000) != 0) {
      goto LABEL_107;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v14 = *(void *)(v4 + 144);
  if (v12 == ((v14 - *(void *)v10) & ~((v14 - *(void *)v10) >> 63)))
  {
    int64_t v13 = v12;
    goto LABEL_107;
  }
  unint64_t v46 = v6;
  uint64_t v43 = v10;
  do
  {
    unint64_t v48 = v12;
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 72);
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = *(void *)(v4 + 144);
    }
    uint64_t v17 = (char *)v6[3];
    char v16 = (char *)v6[4];
    uint64_t v18 = v82;
    unint64_t v19 = (unint64_t)(v16 - v17 - 8) >> 3;
    if (v16 == v17) {
      unint64_t v20 = 0;
    }
    else {
      unint64_t v20 = v19 + 1;
    }
    unint64_t v21 = (v14 - v82) & ~((v14 - v82) >> 63);
    uint64_t v22 = v6[6];
    if (v6[7] * v22 >= v21) {
      unint64_t v23 = v21;
    }
    else {
      unint64_t v23 = v6[7] * v22;
    }
    __p = v105;
    long long v104 = xmmword_100163280;
    uint64_t v47 = v23;
    if (v20 < 6)
    {
      if (v17 != v16)
      {
        unint64_t v32 = v19 + 1;
        uint64_t v33 = v105;
        do
        {
          uint64_t v34 = *(void *)v17;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          void *v33 = v34;
          v33[1] = v15;
          v17 += 8;
          v33[2] = v22;
          v33 += 3;
          --v32;
        }
        while (v32);
        unint64_t v12 = v48;
        goto LABEL_49;
      }
      unint64_t v20 = 0;
    }
    else
    {
      uint64_t v44 = v82;
      if (v20 >= 0x555555555555556) {
        sub_100014AAC("get_next_capacity, allocator's max size reached");
      }
      uint64_t v24 = v4;
      int v25 = operator new(24 * v20);
      uint64_t v26 = __p;
      if (__p)
      {
        uint64_t v27 = v104;
        if ((void)v104)
        {
          uint64_t v28 = (std::__shared_weak_count **)((char *)__p + 8);
          do
          {
            if (*v28) {
              sub_100010A48(*v28);
            }
            v28 += 3;
            --v27;
          }
          while (v27);
        }
        *(void *)&long long v104 = 0;
        uint64_t v10 = v43;
        if (v105 != v26) {
          operator delete(v26);
        }
      }
      *((void *)&v104 + 1) = v20;
      __p = v25;
      *(void *)&long long v104 = 0;
      if (v17 == v16)
      {
        uint64_t v31 = 0;
        long long v29 = (char *)v25;
        uint64_t v4 = v24;
        unint64_t v6 = v46;
        uint64_t v18 = v44;
      }
      else
      {
        long long v29 = (char *)v25;
        uint64_t v4 = v24;
        unint64_t v6 = v46;
        uint64_t v18 = v44;
        do
        {
          uint64_t v30 = *(void *)v17;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)long long v29 = v30;
          *((void *)v29 + 1) = v15;
          *((void *)v29 + 2) = v22;
          v17 += 8;
          v29 += 24;
        }
        while (v17 != v16);
        uint64_t v31 = v104;
      }
      unint64_t v20 = v31 - 0x5555555555555555 * ((v29 - (unsigned char *)v25) >> 3);
    }
    unint64_t v12 = v48;
LABEL_49:
    *(void *)&long long v104 = v20;
    uint64_t v106 = (unint64_t *)&v108;
    long long v107 = xmmword_100163280;
    sub_100014E18((uint64_t)&v106, v20);
    uint64_t v86 = __p;
    __dst = (char *)__p + 24 * v104;
    unint64_t v62 = v106;
    *(void *)&long long v84 = &v106[v107];
    sub_10002F660((uint64_t)v109, (uint64_t *)&v86, (uint64_t *)&__dst, &v62, (unint64_t **)&v84, v18, v47);
    sub_10002F8C8((uint64_t)v109, (uint64_t)&v86);
    sub_10002F51C((uint64_t)v109, (uint64_t)&__dst);
    int64_t v13 = sub_100038C90((uint64_t)v6, (uint64_t)&v86, (uint64_t)&__dst);
    if (v99) {
      sub_100010A48(v99);
    }
    if (v91) {
      sub_100010A48(v91);
    }
    if (v88) {
      sub_100010A48(v88);
    }
    if (v87) {
      sub_100010A48(v87);
    }
    if ((v13 & 0x8000000080000000) == 0x8000000080000000) {
      goto LABEL_103;
    }
    sub_10002F8C8((uint64_t)v109, (uint64_t)&__src);
    sub_10002F51C((uint64_t)v109, (uint64_t)&v62);
    long long v35 = v71;
    uint64_t v49 = v71;
    uint64_t v50 = v72;
    if (v72) {
      atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v51[0] = *(_OWORD *)v73;
    *(_OWORD *)((char *)v51 + 9) = *(_OWORD *)&v73[9];
    uint64_t v52 = v74;
    long long v53 = v75;
    long long v54 = v76;
    long long v55 = v77;
    char v56 = v78;
    uint64_t v57 = v79;
    uint64_t v58 = v80;
    if (v80) {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v59 = v81;
    uint64_t v60 = v82;
    char v61 = v83;
    __dst = v35;
    uint64_t v91 = v50;
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v97 = v56;
    uint64_t v93 = v52;
    uint64_t v98 = v57;
    *(_OWORD *)uint64_t v92 = v51[0];
    *(_OWORD *)&v92[9] = *(_OWORD *)((char *)v51 + 9);
    long long v94 = v53;
    long long v95 = v54;
    long long v96 = v55;
    size_t v99 = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v36 = 0;
    long long v100 = v59;
    uint64_t v101 = v60;
    char v102 = 0;
    while (!sub_10002F3D8((uint64_t)&__src, (uint64_t)&v62))
    {
      sub_100016C64((uint64_t)&v68);
      char v37 = v69;
      if (v69) {
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v70)
      {
        sub_1000301A0((uint64_t)&__src);
        int v40 = 2;
        if (!v37) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
      unint64_t v38 = *(void *)&v92[16];
      if (v67 < *(void *)&v92[16]) {
        unint64_t v38 = v67;
      }
      if (v38 >= v70) {
        int64_t v39 = v70;
      }
      else {
        int64_t v39 = v38;
      }
      memmove(__dst, __src, v39);
      if (v39 <= 0)
      {
        *(void *)&long long v84 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/io_breaker.cpp:76:13)]";
        *((void *)&v84 + 1) = 97;
        int v85 = 16;
        sub_10003B6BC(&v86, &v84);
        sub_100003DF0(v89, (uint64_t)"IO error with sg: ", 18);
        sub_1001416B8(v89);
        sub_100003DF0(v89, (uint64_t)" dest ", 6);
        sub_1001416B8(v89);
        sub_100003DF0(v89, (uint64_t)" returned status ", 17);
        std::ostream::operator<<();
        std::ostream::~ostream();
        sub_10003B8B4((uint64_t)&v86);
        std::ios::~ios();
        int v40 = 1;
        if (!v37) {
          goto LABEL_79;
        }
LABEL_78:
        sub_100010A48(v37);
        goto LABEL_79;
      }
      sub_10002FF28((uint64_t)&__src, v39);
      sub_100030064((uint64_t)&__dst, v39);
      int v40 = 0;
      v36 += v39;
      if (v37) {
        goto LABEL_78;
      }
LABEL_79:
      if ((v40 | 2) != 2) {
        goto LABEL_86;
      }
    }
    sub_100030064((uint64_t)&v49, v36);
LABEL_86:
    if (v99) {
      sub_100010A48(v99);
    }
    if (v91) {
      sub_100010A48(v91);
    }
    if (v58) {
      sub_100010A48(v58);
    }
    if (v50) {
      sub_100010A48(v50);
    }
    if (v64) {
      sub_100010A48(v64);
    }
    if (v63) {
      sub_100010A48(v63);
    }
    if (v69) {
      sub_100010A48(v69);
    }
    if (v66) {
      sub_100010A48(v66);
    }
    sub_10002FF28((uint64_t)&v71, v13);
    sub_10002F290(&v75);
    v12 += v13;
LABEL_103:
    sub_1000175AC(&__p);
    if (v15) {
      sub_100010A48(v15);
    }
    if ((v13 & 0x8000000080000000) == 0x8000000080000000) {
      break;
    }
    uint64_t v14 = *(void *)(v4 + 144);
    unint64_t v6 = v46;
  }
  while (v12 != ((v14 - *(void *)v10) & ~((v14 - *(void *)v10) >> 63)));
LABEL_107:
  if (v80) {
    sub_100010A48(v80);
  }
  if (v72) {
    sub_100010A48(v72);
  }
  if (v13 < 0) {
    int v41 = v13;
  }
  else {
    int v41 = 0;
  }
  if (v41 >= 0) {
    return v12;
  }
  else {
    return v41;
  }
}

void sub_1000395E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (v58) {
    sub_100010A48(v58);
  }
  sub_100011F6C((uint64_t)&STACK[0x580]);
  sub_100011F6C((uint64_t)&a37);
  sub_100011F6C((uint64_t)&a57);
  sub_100011F6C((uint64_t)&STACK[0x220]);
  sub_1000175AC(&STACK[0x620]);
  if (v57) {
    sub_100010A48(v57);
  }
  sub_100011F6C((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000396DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

void *sub_10003970C(void *a1)
{
  *a1 = off_100195DD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void sub_100039758(void *a1)
{
  *a1 = off_100195DD0;
  uint64_t v1 = (std::__shared_weak_count *)a1[9];
  if (v1) {
    sub_100010A48(v1);
  }

  operator delete();
}

uint64_t sub_1000397C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t sub_1000397EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t sub_100039814(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

void sub_10003983C()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Image info is not supported for the given image type", 0x16u);
}

uint64_t sub_10003987C()
{
  return 4294967218;
}

double sub_100039884@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100039890(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))();
}

uint64_t sub_1000398B8()
{
  return 0;
}

uint64_t sub_1000398C0()
{
  return 0;
}

uint64_t sub_1000398CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16), a2, *(void *)(a3 + 16));
}

uint64_t sub_1000398F8(uint64_t a1)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16))) {
    operator new();
  }
  return 0;
}

void sub_1000399C0()
{
}

unint64_t sub_100039A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v34[0] = sub_10003A594;
  v34[1] = 0;
  v34[2] = a1;
  v34[3] = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)&long long v22 = *(void *)a3;
  *((void *)&v22 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v23[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v24 = *(void *)(a3 + 48);
  long long v25 = *(_OWORD *)(a3 + 56);
  long long v26 = *(_OWORD *)(a3 + 72);
  long long v27 = *(_OWORD *)(a3 + 88);
  char v28 = *(unsigned char *)(a3 + 104);
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v29 = *(void *)(a3 + 112);
  uint64_t v30 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v31 = *(_OWORD *)(a3 + 128);
  uint64_t v32 = *(void *)(a3 + 144);
  char v33 = *(unsigned char *)(a3 + 152);
  uint64_t v6 = *(void *)(a4 + 8);
  *(void *)&long long v10 = *(void *)a4;
  *((void *)&v10 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v11[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v12 = *(void *)(a4 + 48);
  long long v13 = *(_OWORD *)(a4 + 56);
  long long v14 = *(_OWORD *)(a4 + 72);
  long long v15 = *(_OWORD *)(a4 + 88);
  char v16 = *(unsigned char *)(a4 + 104);
  uint64_t v7 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v17 = *(void *)(a4 + 112);
  uint64_t v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = *(_OWORD *)(a4 + 128);
  uint64_t v20 = *(void *)(a4 + 144);
  char v21 = *(unsigned char *)(a4 + 152);
  unint64_t v8 = sub_10003A448((uint64_t)v34, &v22, &v10, 0xFFFFFFFFFFFFFFFFLL);
  if (v18) {
    sub_100010A48(v18);
  }
  if (*((void *)&v10 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v30) {
    sub_100010A48(v30);
  }
  if (*((void *)&v22 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v22 + 1));
  }
  return v8;
}

void sub_100039BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_100039BDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10003B48C(v14, a3);
  sub_10002F8C8((uint64_t)v15, (uint64_t)v11);
  double v5 = sub_10002F51C((uint64_t)v15, (uint64_t)v8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, unsigned char *, double))(*(void *)a1 + 144))(a1, a2, v11, v8, v5);
  if (v10) {
    sub_100010A48(v10);
  }
  if (v9) {
    sub_100010A48(v9);
  }
  if (v13) {
    sub_100010A48(v13);
  }
  if (v12) {
    sub_100010A48(v12);
  }
  sub_1000175AC(v14);
  return v6;
}

void sub_100039CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

uint64_t sub_100039D20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  return sub_10003B59C((uint64_t)&v4, a3);
}

uint64_t sub_100039D4C(uint64_t a1, uint64_t a2)
{
  return sub_100011BD0(*(void **)(a2 + 16));
}

uint64_t sub_100039D58(uint64_t a1, uint64_t a2)
{
  return sub_100013570(*(void **)(a2 + 16));
}

void *sub_100039D68(void *result, uint64_t a2, uint64_t *a3)
{
  *double result = off_100195ED0;
  result[1] = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  result[3] = 0;
  result[2] = v3;
  result[4] = 0;
  result[5] = 0;
  unint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  result[7] = v4 + 1;
  result[8] = v5;
  unint64_t v6 = v5 + v4;
  result[6] = v6 / (v4 + 1);
  if (v4 < v6) {
    operator new[]();
  }
  return result;
}

void sub_100039EE8()
{
}

uint64_t sub_100039F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), a1, a2, a3);
}

uint64_t sub_100039F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), a1, a2, a3);
}

uint64_t sub_100039FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8), a1, a2, a3);
}

uint64_t sub_10003A000(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), a1, a2);
}

uint64_t sub_10003A030(uint64_t a1)
{
  *(void *)a1 = off_100195ED0;
  unint64_t v4 = (void **)(a1 + 24);
  sub_10003A390(&v4);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  return a1;
}

void sub_10003A0B8(uint64_t a1)
{
  *(void *)a1 = off_100195ED0;
  uint64_t v3 = (void **)(a1 + 24);
  sub_10003A390(&v3);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  operator delete();
}

uint64_t sub_10003A154(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10003A1CC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10003A1CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10003A264((uint64_t)v13);
  return v11;
}

uint64_t sub_10003A264(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10003A29C(a1);
  }
  return a1;
}

uint64_t sub_10003A29C(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      operator delete[]();
    }
    ++v1;
  }
  return result;
}

uint64_t sub_10003A2F4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10003A32C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete[]();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_10003A390(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10003A3E4((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_10003A3E4(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void **)(result + 8);
  while (v3 != a2)
  {
    uint64_t v4 = *--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      operator delete[]();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

unint64_t sub_10003A448(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  unint64_t v15 = sub_10003A5B8(a1, &v28, (uint64_t)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_10003A578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_10003A594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

unint64_t sub_10003A5B8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v8 = 0;
  unint64_t v9 = *(void *)(a3 + 144);
  v31[0] = 0;
  v31[528] = 0;
  while (!sub_10002F3D8((uint64_t)a2, a3))
  {
    if (a2[18] >= v9 || v8 >= a4) {
      break;
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v29 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &, const sg_entry &), DiskImage *, std::reference_wrapper<DiskImage::Context>, const std::placeholders::__ph<1> &>]";
      *((void *)&v29 + 1) = 142;
      int v30 = 2;
      sub_10003A8D8(&v26, &v29);
      sub_100003DF0(v28, (uint64_t)"sg: ", 4);
      sub_1001416B8(v28);
      std::ostream::~ostream();
      sub_10003ABC8((uint64_t)&v26);
      std::ios::~ios();
    }
    *(void *)&long long v26 = 0;
    *((void *)&v26 + 1) = v9;
    char v27 = 2;
    sub_100081638(a2, (uint64_t)&v26, (uint64_t)&v29);
    long long v11 = *(uint64_t (**)(void *, void, long long *))a1;
    uint64_t v12 = *(void *)(a1 + 8);
    long long v13 = (void *)(*(void *)(a1 + 16) + (v12 >> 1));
    if (v12) {
      long long v11 = *(uint64_t (**)(void *, void, long long *))(*v13 + v11);
    }
    int64_t v14 = v11(v13, *(void *)(a1 + 24), &v29);
    unint64_t v16 = v14;
    BOOL v17 = v14 >= 0 || v14 == 0;
    char v18 = v17;
    if (v17)
    {
      uint64_t v19 = v15;
      if (sub_100030B70((uint64_t)a2, a3, v15, v14))
      {
        sub_100030CB0((uint64_t)v25, (uint64_t)a2);
        sub_100030B34((uint64_t)v25, a3, v19, v16, a4, (uint64_t)&v26);
        sub_10003AA40((uint64_t)v31, (uint64_t)&v26);
        sub_100030B8C(&v26);
        sub_100011F6C((uint64_t)v25);
        sub_10002F8C8((uint64_t)v31, (uint64_t)&v26);
        sub_10003AA88((uint64_t)a2, &v26);
        sub_100011F6C((uint64_t)&v26);
        sub_10002F51C((uint64_t)v31, (uint64_t)&v26);
        sub_10003AA88(a3, &v26);
        sub_100011F6C((uint64_t)&v26);
      }
      if (a5) {
        sub_10002FF28((uint64_t)a2, v16);
      }
      else {
        sub_100030064((uint64_t)a2, v16);
      }
      v8 += v16;
    }
    else
    {
      if ((int)v14 >= 0) {
        uint64_t v20 = v14;
      }
      else {
        uint64_t v20 = -(int)v14;
      }
      unint64_t v22 = -v20;
    }
    if (*((void *)&v29 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v29 + 1));
    }
    if ((v18 & 1) == 0) {
      goto LABEL_34;
    }
  }
  unint64_t v22 = v8;
LABEL_34:
  sub_100030F34((uint64_t)v31);
  return v22;
}

void sub_10003A868(_Unwind_Exception *a1)
{
  if (STACK[0x2E8]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x2E8]);
  }
  sub_100030F34((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void *sub_10003A8D8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003AB38((uint64_t)a1, a2);
  *a1 = off_100195F40;
  a1[45] = &off_100196040;
  a1[46] = &off_100196068;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100195F40;
  a1[45] = off_100195FC8;
  a1[46] = off_100195FF0;
  return a1;
}

void sub_10003A9D8(_Unwind_Exception *a1)
{
  sub_10003ABC8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10003A9FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003AA40(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 528))
  {
    sub_10003B33C(a1, a2);
  }
  else
  {
    sub_100030E20(a1, a2);
    *(unsigned char *)(a1 + 528) = 1;
  }
  return a1;
}

uint64_t sub_10003AA88(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    sub_100010A48(v5);
  }
  long long v6 = a2[1];
  *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  long long v7 = *(long long *)((char *)a2 + 72);
  long long v8 = *(long long *)((char *)a2 + 88);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  long long v9 = a2[7];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v10 = *(std::__shared_weak_count **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = v9;
  if (v10) {
    sub_100010A48(v10);
  }
  *(_OWORD *)(a1 + 128) = a2[8];
  uint64_t v11 = *((void *)a2 + 18);
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(void *)(a1 + 144) = v11;
  return a1;
}

uint64_t sub_10003AB38(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001960D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10003ABB4(_Unwind_Exception *a1)
{
}

uint64_t sub_10003ABC8(uint64_t a1)
{
  *(void *)a1 = off_1001960D8;
  sub_10003AFD0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10003AD04(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10003ABC8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003AD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10003ADA4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10003AE0C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003ABC8(v1);

  return std::ios::~ios();
}

void sub_10003AE58(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003ABC8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003AEBC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003ABC8(v1);

  return std::ios::~ios();
}

void sub_10003AF1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003ABC8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10003AF98(uint64_t a1)
{
  sub_10003ABC8(a1);

  operator delete();
}

uint64_t sub_10003AFD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10003B154((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10003B12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10003B154(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 545;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int64_t v14 = a2;
      }
      else {
        int64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 545;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10003B33C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  long long v8 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v7;
  if (v8) {
    sub_100010A48(v8);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  long long v11 = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  os_log_type_t v12 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v11;
  if (v12) {
    sub_100010A48(v12);
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  sub_10002F658((uint64_t)v14, a1, v4, 1);
  sub_10003AA88(a1 + 368, v14);
  if (v15) {
    sub_100010A48(v15);
  }
  if (*((void *)&v14[0] + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v14[0] + 1));
  }
  sub_10002F658((uint64_t)v14, a1, (uint64_t *)(a1 + 96), 0);
  sub_10003AA88(a1 + 208, v14);
  if (v15) {
    sub_100010A48(v15);
  }
  if (*((void *)&v14[0] + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v14[0] + 1));
  }
  return a1;
}

uint64_t *sub_10003B48C(uint64_t *a1, uint64_t *a2)
{
  int v4 = sub_100143B90();
  uint64_t v5 = *a2;
  uint64_t v6 = v4[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[4];
  unint64_t v15 = v17;
  v17[0] = v5;
  v17[1] = v6;
  v17[2] = v7;
  long long v16 = xmmword_100164300;
  sub_10003103C((uint64_t)a1, &v15);
  sub_100014DA8(&v15);
  uint64_t v8 = a1[1];
  unint64_t v15 = (void *)*a1;
  uint64_t v9 = (uint64_t)&v15[3 * v8];
  uint64_t v10 = a1[19];
  uint64_t v13 = (unint64_t *)a1[18];
  uint64_t v14 = v9;
  os_log_type_t v12 = &v13[v10];
  sub_10002F660((uint64_t)(a1 + 26), (uint64_t *)&v15, &v14, &v13, &v12, a2[3], a2[2]);
  return a1;
}

void sub_10003B578(_Unwind_Exception *a1)
{
  sub_100014940(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003B59C(uint64_t a1, uint64_t *a2)
{
  sub_100030BF8(a2, v11);
  sub_10002F8C8((uint64_t)v12, (uint64_t)v8);
  sub_10002F51C((uint64_t)v12, (uint64_t)v5);
  uint64_t v3 = sub_100011E8C(*(void **)(*(void *)a1 + 16));
  if (v7) {
    sub_100010A48(v7);
  }
  if (v6) {
    sub_100010A48(v6);
  }
  if (v10) {
    sub_100010A48(v10);
  }
  if (v9) {
    sub_100010A48(v9);
  }
  sub_1000175AC(v11);
  return v3;
}

void sub_10003B680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

void *sub_10003B6BC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003B824((uint64_t)a1, a2);
  *a1 = off_100196160;
  a1[45] = &off_100196260;
  a1[46] = &off_100196288;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100196160;
  a1[45] = off_1001961E8;
  a1[46] = off_100196210;
  return a1;
}

void sub_10003B7BC(_Unwind_Exception *a1)
{
  sub_10003B8B4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10003B7E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003B824(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001962F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10003B8A0(_Unwind_Exception *a1)
{
}

uint64_t sub_10003B8B4(uint64_t a1)
{
  *(void *)a1 = off_1001962F8;
  sub_10003BCBC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10003B9F0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10003B8B4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003BA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10003BA90(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10003BAF8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003B8B4(v1);

  return std::ios::~ios();
}

void sub_10003BB44(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003B8B4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003BBA8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003B8B4(v1);

  return std::ios::~ios();
}

void sub_10003BC08(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003B8B4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10003BC84(uint64_t a1)
{
  sub_10003B8B4(a1);

  operator delete();
}

uint64_t sub_10003BCBC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10003BE40((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10003BE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10003BE40(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 615;
    __int16 v22 = 2082;
    char v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 615;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10003C028()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1001C4F38, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    unsigned __int8 v2 = &v3;
    std::__call_once(&qword_1001C4F38, &v2, (void (__cdecl *)(void *))sub_10003C274);
  }
  return dword_1001C4F40;
}

uint64_t sub_10003C090()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1001C4F48, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    unsigned __int8 v2 = &v3;
    std::__call_once(&qword_1001C4F48, &v2, (void (__cdecl *)(void *))sub_10003C2C4);
  }
  return dword_1001C4F50;
}

uint64_t sub_10003C0F8()
{
  return 2 * sub_10003C090();
}

uint64_t (**sub_10003C118())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C4F60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001C4F60))
  {
    qword_1001C4F58 = (unint64_t)(sub_10003C1C0() + 0x3FFFFFFF) >> 30;
    __cxa_guard_release(&qword_1001C4F60);
  }
  int v0 = (uint64_t (**)())&unk_1001645F8;
  if ((unint64_t)qword_1001C4F58 > 3) {
    int v0 = &off_100196390;
  }
  if ((unint64_t)qword_1001C4F58 <= 8) {
    return v0;
  }
  else {
    return &off_100196368;
  }
}

void sub_10003C1A8(_Unwind_Exception *a1)
{
}

uint64_t sub_10003C1C0()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1001C4F68, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    unsigned __int8 v2 = &v3;
    std::__call_once(&qword_1001C4F68, &v2, (void (__cdecl *)(void *))sub_10003C228);
  }
  return qword_1001C4F70;
}

uint64_t sub_10003C228()
{
  size_t v1 = 8;
  uint64_t v2 = 0;
  uint64_t result = sysctlbyname("hw.memsize", &v2, &v1, 0, 0);
  qword_1001C4F70 = v2;
  return result;
}

uint64_t sub_10003C274()
{
  int v2 = 0;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("debug.didevice_queue_depth", &v2, &v1, 0, 0);
  dword_1001C4F40 = v2;
  return result;
}

uint64_t sub_10003C2C4()
{
  int v2 = 1;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("hw.logicalcpu", &v2, &v1, 0, 0);
  dword_1001C4F50 = v2;
  return result;
}

void sub_10003C318(void *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (*a2 == 4) {
    sub_100042CC8((uint64_t)&v4, a1, &v3);
  }
  sub_100042E70((uint64_t)&v4, a1, a2, &v3);
}

void sub_10003C388(void *a1, void *a2, _DWORD *a3, uint64_t a4)
{
  char v6 = sub_10003C438(a1, a2);
  void *v6 = off_1001963C8;
  *((_DWORD *)v6 + 10) = *a3;
  v6[6] = a4;
  operator new[]();
}

void sub_10003C424(_Unwind_Exception *a1)
{
  sub_10003C494(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C438(void *a1, void *a2)
{
  uint64_t result = sub_10014193C(a1);
  *uint64_t result = off_1001966B0;
  uint64_t v4 = a2[1];
  result[3] = *a2;
  result[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_10003C494(void *a1)
{
  *a1 = off_1001966B0;
  int v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_10003C4EC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_10003C438(a1, a3);
  *uint64_t v4 = off_1001963C8;
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a2 + 40);
  v4[6] = *(void *)(a2 + 48);
  operator new[]();
}

void sub_10003C58C(_Unwind_Exception *a1)
{
  sub_10003C494(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C5A0(void *a1)
{
  *a1 = off_1001963C8;
  sub_10003E868((uint64_t)(a1 + 9));
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    operator delete[]();
  }
  *a1 = off_1001966B0;
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_100010A48(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_10003C640(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[8];
  if (v4 != a1[7])
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    uint64_t v4 = a1[7];
  }
  uint64_t v5 = sub_1000380B0(a1[3], v4, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v7 = v5;
    *(void *)&long long v10 = "int CompressedBackend::read(const sg_entry &)";
    *((void *)&v10 + 1) = 27;
    int v11 = 16;
    sub_10003C884(v12, &v10);
    sub_100003DF0(v13, (uint64_t)"Internal backend read() failed. ret=", 36);
    std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[0] - 24)));
    uint64_t v8 = std::locale::use_facet(&v14, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::~ostream();
    sub_10003EB74((uint64_t)v12);
    std::ios::~ios();
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, a2, a1[7]);
    if (v6)
    {
      return v6;
    }
    else
    {
      *(void *)&long long v10 = "int CompressedBackend::read(const sg_entry &)";
      *((void *)&v10 + 1) = 27;
      int v11 = 16;
      sub_10003C9EC(v12, &v10);
      sub_100003DF0(v13, (uint64_t)"Decompression failed", 20);
      std::ostream::~ostream();
      sub_10003F2E8((uint64_t)v12);
      std::ios::~ios();
      return 4294967291;
    }
  }
  return v7;
}

void sub_10003C850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003CB10((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10003C884(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004300C((uint64_t)a1, a2);
  *a1 = off_100196780;
  a1[45] = &off_100196880;
  a1[46] = &off_1001968A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100196780;
  a1[45] = off_100196808;
  a1[46] = off_100196830;
  return a1;
}

void sub_10003C984(_Unwind_Exception *a1)
{
  sub_10003EB74(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10003C9A8(uint64_t a1)
{
  return a1;
}

void *sub_10003C9EC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004309C((uint64_t)a1, a2);
  *a1 = off_1001969A0;
  a1[45] = &off_100196AA0;
  a1[46] = &off_100196AC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001969A0;
  a1[45] = off_100196A28;
  a1[46] = off_100196A50;
  return a1;
}

void sub_10003CAEC(_Unwind_Exception *a1)
{
  sub_10003F2E8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10003CB10(uint64_t a1)
{
  return a1;
}

unint64_t sub_10003CB54@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v6 = a1[8];
  uint64_t v7 = a2 + 2;
  unint64_t v8 = a2[2];
  if (a1[6] - v6 + a1[7] < v8)
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    uint64_t v6 = a1[8];
    unint64_t v8 = *v7;
  }
  uint64_t v9 = a1[3];
  uint64_t v10 = a2[3];
  uint64_t v11 = *((void *)sub_100143B90() + 1);
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)__int16 v22 = v8;
  *(void *)&v22[8] = v10;
  *(void *)&v22[16] = v8;
  v22[24] = 0;
  (*(void (**)(void *__return_ptr, uint64_t, long long *))(*(void *)v9 + 128))(v28, v9, &v21);
  if (*((void *)&v21 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v21 + 1));
  }
  if (!BYTE4(v28[0]) && !v28[4]) {
    return sub_100042C50(a3, (uint64_t)v28);
  }
  LOBYTE(v21) = 0;
  BYTE4(v21) = 0;
  *((void *)&v21 + 1) = 0;
  *(void *)__int16 v22 = sub_10014119C((unint64_t)&v21);
  uint64_t v13 = sub_100141268((unint64_t)&v21);
  long long v29 = &v21;
  *(void *)&v22[8] = v13;
  *(void *)&v22[16] = &v29;
  sub_100042C50((unint64_t)v26, (uint64_t)&v21);
  std::locale v14 = v29;
  char v27 = v29;
  *((void *)v29 + 4) = &v27;
  uint64_t v15 = a2[1];
  *(void *)&long long v21 = *a2;
  *((void *)&v21 + 1) = v15;
  if (v15)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    std::locale v14 = v27;
  }
  *(_OWORD *)&v22[9] = *(_OWORD *)((char *)v7 + 9);
  *(_OWORD *)__int16 v22 = *(_OWORD *)v7;
  char v23 = v14;
  char v27 = 0;
  *((void *)v14 + 4) = &v23;
  sub_100042C50((unint64_t)v24, (uint64_t)v28);
  uint64_t v16 = a1[9];
  uint64_t v25 = a1[8];
  uint64_t v17 = a1[10];
  __int16 v18 = (_OWORD *)(v16 + 104 * v17);
  if (v17 == a1[11])
  {
    sub_10004312C(a1 + 9, (void *)(v16 + 104 * v17), 1, (uint64_t)&v21, &v29);
  }
  else
  {
    *__int16 v18 = v21;
    long long v21 = 0uLL;
    long long v19 = *(_OWORD *)v22;
    *(_OWORD *)((char *)v18 + 25) = *(_OWORD *)&v22[9];
    v18[1] = v19;
    __int16 v20 = (void *)(v16 + 104 * v17);
    v20[6] = v23;
    v20 += 6;
    char v23 = 0;
    *(void *)(*v20 + 32) = v20;
    sub_100042C50((unint64_t)(v20 + 1), (uint64_t)v24);
    *(void *)(v16 + 104 * v17 + 96) = v25;
    ++a1[10];
  }
  if (v23) {
    *((void *)v23 + 4) = 0;
  }
  if (*((void *)&v21 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v21 + 1));
  }
  a1[8] += *v7;
  unint64_t result = sub_100042C50(a3, (uint64_t)v26);
  if (v27) {
    *((void *)v27 + 4) = 0;
  }
  return result;
}

void sub_10003CDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a15) {
    *(void *)(a15 + 32) = 0;
  }
  if (a10) {
    sub_100010A48(a10);
  }
  if (a28) {
    *(void *)(a28 + 32) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_10003CE7C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 24) + 144))(*(void *)(a1 + 24));
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v4 = v3 + 48;
    uint64_t v5 = 104 * v2;
    do
    {
      unsigned int v6 = sub_10003D040((unsigned int *)(v4 + 8));
      unsigned int v7 = v6;
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v10 = v3 + 48;
        uint64_t v11 = *(unsigned int **)v4;
        *uint64_t v11 = v7;
        uint64_t v9 = v11 + 1;
      }
      else if (*(void *)(v4 - 32) <= (unint64_t)v6)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 192))(a1, v4 - 48, *(void *)(v4 + 48));
        if (v12)
        {
          int v13 = v12;
          uint64_t v10 = v3 + 48;
          std::locale v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = v13;
        }
        else
        {
          *(void *)&long long v15 = "void CompressedBackend::run_futures()";
          *((void *)&v15 + 1) = 35;
          int v16 = 16;
          sub_10003D100(v17, &v15);
          sub_100003DF0(v18, (uint64_t)"Decompression failed", 20);
          std::ostream::~ostream();
          sub_10003FA5C((uint64_t)v17);
          std::ios::~ios();
          uint64_t v10 = v3 + 48;
          std::locale v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = -5;
        }
        uint64_t v9 = v14 + 1;
      }
      else
      {
        unint64_t v8 = *(unsigned int **)v4;
        *unint64_t v8 = -5;
        uint64_t v9 = v8 + 1;
        uint64_t v10 = v4;
      }
      unsigned char *v9 = 1;
      sub_100042BDC(v10);
      v3 += 104;
      v4 += 104;
      v5 -= 104;
    }
    while (v5);
  }
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
  sub_100043624((void *)(a1 + 72));
}

void sub_10003D02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003D224((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D040(unsigned int *a1)
{
  if (*((unsigned char *)a1 + 4)) {
    return *a1;
  }
  atomic_fetch_add((atomic_ullong *volatile)a1 + 1, 1uLL);
  uint64_t v4 = (std::mutex *)*((void *)a1 + 2);
  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((void *)a1 + 2);
  v6.__owns_ = 1;
  std::mutex::lock(v4);
  if (!*((unsigned char *)a1 + 4))
  {
    uint64_t v5 = (std::condition_variable *)*((void *)a1 + 3);
    do
      std::condition_variable::wait(v5, &v6);
    while (!*((unsigned char *)a1 + 4));
  }
  atomic_fetch_add((atomic_ullong *volatile)a1 + 1, 0xFFFFFFFFFFFFFFFFLL);
  sub_100042B98((uint64_t)&v6);
  uint64_t v2 = *a1;
  if (v6.__owns_) {
    std::mutex::unlock(v6.__m_);
  }
  return v2;
}

void sub_10003D0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10003D100(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100043594((uint64_t)a1, a2);
  *a1 = off_100196BC0;
  a1[45] = &off_100196CC0;
  a1[46] = &off_100196CE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100196BC0;
  a1[45] = off_100196C48;
  a1[46] = off_100196C70;
  return a1;
}

void sub_10003D200(_Unwind_Exception *a1)
{
  sub_10003FA5C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10003D224(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003D268(uint64_t *a1, uint64_t a2)
{
  if (a1[8] != a1[7]) {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 184))(a1, a2);
  if (!v4) {
    return 4294967291;
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_10003D44C(a1[3], a1[7], v4, *(void *)(a2 + 24));
  if ((v6 & 0x80000000) == 0) {
    return v5;
  }
  uint64_t v7 = v6;
  *(void *)&long long v10 = "int CompressedBackend::write(const sg_entry &)";
  *((void *)&v10 + 1) = 28;
  int v11 = 16;
  sub_100011FA8(v12, &v10);
  sub_100003DF0(v13, (uint64_t)"Internal backend write() failed. ret=", 37);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[0] - 24)));
  unint64_t v8 = std::locale::use_facet(&v14, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  sub_1000164E0((uint64_t)v12);
  std::ios::~ios();
  return v7;
}

void sub_10003D428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::locale::~locale((std::locale *)(v5 - 40));
  sub_1000120CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (std::__shared_weak_count *)*((void *)sub_100143B90() + 1);
  uint64_t v11 = a2;
  uint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  char v16 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 96))(a1, &v11);
  if (v12) {
    sub_100010A48(v12);
  }
  return v9;
}

void sub_10003D4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10003D508(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100003DF0(a2, (uint64_t)"Compressed(", 11);
  int v6 = *(_DWORD *)(a1 + 40);
  uint64_t v4 = sub_10003D568(v3, &v6);
  return sub_100003DF0(v4, (uint64_t)")", 1);
}

void *sub_10003D568(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_100196DC8[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 30)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return sub_100003DF0(a1, (uint64_t)v3, v4);
    }
  }
  uint64_t v5 = &dword_100196DC8[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_100003DF0(a1, (uint64_t)v3, v4);
}

void sub_10003D5AC(void *a1, void *a2, int *a3, uint64_t a4)
{
  int v4 = *a3;
  sub_10003C388(a1, a2, &v4, a4);
}

void sub_10003D6AC(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[222];
  v1[222] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = v1[221];
  v1[221] = 0;
  if (v4) {
    operator delete[]();
  }
  sub_10003C5A0(v1);
  _Unwind_Resume(a1);
}

void sub_10003D71C(void *a1, uint64_t a2, void *a3)
{
}

void sub_10003D7E8(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[222];
  v1[222] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = v1[221];
  v1[221] = 0;
  if (v4) {
    operator delete[]();
  }
  sub_10003C5A0(v1);
  _Unwind_Resume(a1);
}

size_t sub_10003D844(uint64_t a1, uint64_t a2, const uint8_t *a3)
{
  return compression_decode_buffer(*(uint8_t **)a2, *(void *)(a2 + 32), a3, *(void *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

size_t sub_10003D868(uint64_t a1, uint64_t a2)
{
  return compression_encode_buffer(*(uint8_t **)(a1 + 56), *(void *)(a2 + 16), *(const uint8_t **)a2, *(void *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

void sub_10003D88C(uint64_t a1, void *a2)
{
  sub_100043684((uint64_t)&v2, a1, a2);
}

uint64_t sub_10003D8D0(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned int destLen = *(void *)(a2 + 32);
  if (!BZ2_bzBuffToBuffDecompress(*(char **)a2, &destLen, a3, *(_DWORD *)(a2 + 16), 0, 0)) {
    return destLen;
  }
  *(void *)&long long v4 = "size_t BZIPCompressedBackend::decompress(const sg_entry &, char *) const";
  *((void *)&v4 + 1) = 40;
  int v5 = 16;
  sub_10003D9B4(v6, &v4);
  sub_100003DF0(v7, (uint64_t)"BZIP decompression failed, res=", 31);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_100040C68((uint64_t)v6);
  std::ios::~ios();
  return 0;
}

void sub_10003D9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003DAD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10003D9B4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004375C((uint64_t)a1, a2);
  *a1 = off_100197078;
  a1[45] = &off_100197178;
  a1[46] = &off_1001971A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100197078;
  a1[45] = off_100197100;
  a1[46] = off_100197128;
  return a1;
}

void sub_10003DAB4(_Unwind_Exception *a1)
{
  sub_100040C68(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10003DAD8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003DB1C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  unsigned int destLen = v2;
  unint64_t v3 = v2 / 0x186A0;
  if ((int)(v2 / 0x186A0) >= 8) {
    LODWORD(v3) = 8;
  }
  int v4 = BZ2_bzBuffToBuffCompress(*(char **)(a1 + 56), &destLen, *(char **)a2, v2, v3 + 1, 0, 0);
  if (v4 != -8)
  {
    if (!v4) {
      return destLen;
    }
    *(void *)&long long v6 = "size_t BZIPCompressedBackend::compress(const sg_entry &) const";
    *((void *)&v6 + 1) = 38;
    int v7 = 16;
    sub_10003DC34(v8, &v6);
    sub_100003DF0(v9, (uint64_t)"BZIP compression failed, res=", 29);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000413DC((uint64_t)v8);
    std::ios::~ios();
  }
  return 0;
}

void sub_10003DC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003DD58((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10003DC34(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000437EC((uint64_t)a1, a2);
  *a1 = off_100197298;
  a1[45] = &off_100197398;
  a1[46] = &off_1001973C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100197298;
  a1[45] = off_100197320;
  a1[46] = off_100197348;
  return a1;
}

void sub_10003DD34(_Unwind_Exception *a1)
{
  sub_1000413DC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10003DD58(uint64_t a1)
{
  return a1;
}

void sub_10003DD9C(uint64_t a1, void *a2)
{
  sub_10004387C((uint64_t)&v2, a1, a2);
}

void *sub_10003DDE0(void *a1)
{
  *a1 = off_1001964A0;
  uint64_t v2 = a1[222];
  a1[222] = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = a1[221];
  a1[221] = 0;
  if (v3) {
    operator delete[]();
  }

  return sub_10003C5A0(a1);
}

void sub_10003DE74(void *a1)
{
  sub_10003DDE0(a1);

  operator delete();
}

uint64_t sub_10003DEAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

uint64_t sub_10003DED4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))();
}

uint64_t sub_10003DEFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

uint64_t sub_10003DF24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))();
}

uint64_t sub_10003DF4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

uint64_t sub_10003DF74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))();
}

void sub_10003DF9C(void **a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1[3] + 72))(&v2);
  ((void (*)(void **, uint64_t *))(*a1)[22])(a1, &v2);
  if (v3) {
    sub_100010A48(v3);
  }
}

void sub_10003E030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E048(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v6 = v2;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 80))(a1, &v6);
  if (*((void *)&v6 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v6 + 1));
  }
  return v4;
}

void sub_10003E0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E0D4(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v6 = v2;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, &v6);
  if (*((void *)&v6 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v6 + 1));
  }
  return v4;
}

void sub_10003E148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E160(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48;
    v5 -= 48;
    if (!v5) {
      return 0;
    }
  }
  uint64_t v7 = v6;
  *(void *)&long long v9 = "int Backend::read(const elements_t &)";
  *((void *)&v9 + 1) = 17;
  int v10 = 16;
  sub_1000418C0(v11, &v9);
  sub_100003DF0(v12, (uint64_t)"Backend: failed reading element in vector", 41);
  std::ostream::~ostream();
  sub_100041AB8((uint64_t)v11);
  std::ios::~ios();
  return v7;
}

void sub_10003E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000419E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E26C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48;
    v5 -= 48;
    if (!v5) {
      return 0;
    }
  }
  uint64_t v7 = v6;
  *(void *)&long long v9 = "int Backend::write(const elements_t &)";
  *((void *)&v9 + 1) = 18;
  int v10 = 16;
  sub_10004222C(v11, &v9);
  sub_100003DF0(v12, (uint64_t)"Backend: failed writing element in vector", 41);
  std::ostream::~ostream();
  sub_100042424((uint64_t)v11);
  std::ios::~ios();
  return v7;
}

void sub_10003E364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100042350((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10003E378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  v12[0] = 0;
  v12[4] = 0;
  uint64_t v13 = 0;
  uint64_t v14 = sub_10014119C((unint64_t)v12);
  uint64_t v11 = v12;
  uint64_t v15 = sub_100141268((unint64_t)v12);
  char v16 = &v11;
  sub_100042C50((unint64_t)v9, (uint64_t)v12);
  int v10 = v11;
  *((void *)v11 + 4) = &v10;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2);
  uint64_t v7 = v10;
  *(_DWORD *)int v10 = v6;
  v7[4] = 1;
  sub_100042BDC((uint64_t)&v10);
  unint64_t result = sub_100042C50(a3, (uint64_t)v9);
  if (v10) {
    *((void *)v10 + 4) = 0;
  }
  return result;
}

void sub_10003E45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0;
  }
  _Unwind_Resume(a1);
}

void *sub_10003E47C(void **a1)
{
  uint64_t v2 = (void *)((uint64_t (*)(void **))(*a1)[8])(a1);
  long long v3 = sub_100003DF0(v2, (uint64_t)"(", 1);
  uint64_t v4 = (void *)(*(uint64_t (**)(void *, void *))(*a1[3] + 64))(a1[3], v3);

  return sub_100003DF0(v4, (uint64_t)")", 1);
}

uint64_t sub_10003E518(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160))();
}

void sub_10003E544(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_100003C58((uint64_t)v3);
  sub_100003DF0(v3, (uint64_t)"Unexpected context construction by ", 35);
  sub_100141960((uint64_t)v3, a1);
  sub_100010C3C((uint64_t)exception, (uint64_t)v3, 0x16u);
}

void sub_10003E5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (v26) {
    __cxa_free_exception(v24);
  }
  _Unwind_Resume(a1);
}

void sub_10003E6D8(void *a1)
{
  sub_10003C5A0(a1);

  operator delete();
}

uint64_t sub_10003E710(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))();
}

uint64_t sub_10003E738(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))();
}

unint64_t sub_10003E760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  v12[0] = 0;
  v12[4] = 0;
  uint64_t v13 = 0;
  uint64_t v14 = sub_10014119C((unint64_t)v12);
  uint64_t v11 = v12;
  uint64_t v15 = sub_100141268((unint64_t)v12);
  char v16 = &v11;
  sub_100042C50((unint64_t)v9, (uint64_t)v12);
  int v10 = v11;
  *((void *)v11 + 4) = &v10;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
  uint64_t v7 = v10;
  *(_DWORD *)int v10 = v6;
  v7[4] = 1;
  sub_100042BDC((uint64_t)&v10);
  unint64_t result = sub_100042C50(a3, (uint64_t)v9);
  if (v10) {
    *((void *)v10 + 4) = 0;
  }
  return result;
}

void sub_10003E844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003E868(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 48;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      uint64_t v4 = *(std::__shared_weak_count **)(v3 - 40);
      if (v4) {
        sub_100010A48(v4);
      }
      v3 += 104;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10003E8E4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003EB74(v1);

  return std::ios::~ios();
}

uint64_t sub_10003E930(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003EB74(v1);

  return std::ios::~ios();
}

void sub_10003E990(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10003EB74(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003E9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10003EA30(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10003EA98(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003EB74(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10003EAFC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003EB74(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003EB74(uint64_t a1)
{
  *(void *)a1 = off_100196918;
  sub_10003ECB0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10003ECB0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10003EE70((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10003EE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003EE38(uint64_t a1)
{
  sub_10003EB74(a1);

  operator delete();
}

int *sub_10003EE70(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 49;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 49;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10003F058(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003F2E8(v1);

  return std::ios::~ios();
}

uint64_t sub_10003F0A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003F2E8(v1);

  return std::ios::~ios();
}

void sub_10003F104(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10003F2E8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003F16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10003F1A4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10003F20C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003F2E8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10003F270(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003F2E8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003F2E8(uint64_t a1)
{
  *(void *)a1 = off_100196B38;
  sub_10003F424(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10003F424(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10003F5E4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10003F580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003F5AC(uint64_t a1)
{
  sub_10003F2E8(a1);

  operator delete();
}

int *sub_10003F5E4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 55;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 55;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10003F7CC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003FA5C(v1);

  return std::ios::~ios();
}

uint64_t sub_10003F818(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003FA5C(v1);

  return std::ios::~ios();
}

void sub_10003F878(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10003FA5C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003F8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10003F918(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10003F980(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10003FA5C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10003F9E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10003FA5C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10003FA5C(uint64_t a1)
{
  *(void *)a1 = off_100196D58;
  sub_10003FB98(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10003FB98(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10003FD58((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10003FCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003FD20(uint64_t a1)
{
  sub_10003FA5C(a1);

  operator delete();
}

int *sub_10003FD58(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 94;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 94;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

_DWORD *sub_10003FF40(_DWORD *a1, int *a2)
{
  *a1 = dword_1001647A4[*a2];
  if (sub_1000D29B8())
  {
    *(void *)&long long v5 = "StandardCompressedBackend::pimpl::pimpl(algo_t)";
    *((void *)&v5 + 1) = 39;
    int v6 = 2;
    sub_10004006C(v7, &v5);
    sub_100003DF0(v8, (uint64_t)"Using compression ", 18);
    int v9 = *a2;
    sub_10003D568(v8, &v9);
    *(_DWORD *)((char *)&v8[1] + *(void *)(v8[0] - 24)) = *(_DWORD *)((unsigned char *)&v8[1] + *(void *)(v8[0] - 24)) & 0xFFFFFFB5 | 8;
    sub_100003DF0(v8, (uint64_t)" constant ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100040264((uint64_t)v7);
    std::ios::~ios();
  }
  return a1;
}

void sub_100040058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100040190((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10004006C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000401D4((uint64_t)a1, a2);
  *a1 = off_100196E58;
  a1[45] = &off_100196F58;
  a1[46] = &off_100196F80;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100196E58;
  a1[45] = off_100196EE0;
  a1[46] = off_100196F08;
  return a1;
}

void sub_10004016C(_Unwind_Exception *a1)
{
  sub_100040264(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100040190(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000401D4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100196FF0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100040250(_Unwind_Exception *a1)
{
}

uint64_t sub_100040264(uint64_t a1)
{
  *(void *)a1 = off_100196FF0;
  sub_10004066C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000403A0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100040264(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100040408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100040440(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000404A8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100040264(v1);

  return std::ios::~ios();
}

void sub_1000404F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100040264(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100040558(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100040264(v1);

  return std::ios::~ios();
}

void sub_1000405B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100040264(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100040634(uint64_t a1)
{
  sub_100040264(a1);

  operator delete();
}

uint64_t sub_10004066C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000407F0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000407C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000407F0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 175;
    __int16 v22 = 2082;
    char v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 175;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1000409D8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100040C68(v1);

  return std::ios::~ios();
}

uint64_t sub_100040A24(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100040C68(v1);

  return std::ios::~ios();
}

void sub_100040A84(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100040C68(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100040AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100040B24(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100040B8C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100040C68(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100040BF0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100040C68(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100040C68(uint64_t a1)
{
  *(void *)a1 = off_100197210;
  sub_100040DA4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100040DA4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100040F64((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100040F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100040F2C(uint64_t a1)
{
  sub_100040C68(a1);

  operator delete();
}

int *sub_100040F64(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 242;
    __int16 v22 = 2082;
    char v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 242;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10004114C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000413DC(v1);

  return std::ios::~ios();
}

uint64_t sub_100041198(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000413DC(v1);

  return std::ios::~ios();
}

void sub_1000411F8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000413DC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100041260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100041298(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100041300(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000413DC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100041364(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000413DC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000413DC(uint64_t a1)
{
  *(void *)a1 = off_100197430;
  sub_100041518(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100041518(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000416D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100041674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000416A0(uint64_t a1)
{
  sub_1000413DC(a1);

  operator delete();
}

int *sub_1000416D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 265;
    __int16 v22 = 2082;
    char v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 265;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *sub_1000418C0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100041A28((uint64_t)a1, a2);
  *a1 = off_1001974B8;
  a1[45] = &off_1001975B8;
  a1[46] = &off_1001975E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001974B8;
  a1[45] = off_100197540;
  a1[46] = off_100197568;
  return a1;
}

void sub_1000419C0(_Unwind_Exception *a1)
{
  sub_100041AB8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000419E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100041A28(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100197650;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100041AA4(_Unwind_Exception *a1)
{
}

uint64_t sub_100041AB8(uint64_t a1)
{
  *(void *)a1 = off_100197650;
  sub_100041EC0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100041BF4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100041AB8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100041C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100041C94(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100041CFC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100041AB8(v1);

  return std::ios::~ios();
}

void sub_100041D48(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100041AB8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100041DAC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100041AB8(v1);

  return std::ios::~ios();
}

void sub_100041E0C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100041AB8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100041E88(uint64_t a1)
{
  sub_100041AB8(a1);

  operator delete();
}

uint64_t sub_100041EC0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100042044((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10004201C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100042044(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 124;
    __int16 v22 = 2082;
    char v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 124;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *sub_10004222C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100042394((uint64_t)a1, a2);
  *a1 = off_1001976D8;
  a1[45] = &off_1001977D8;
  a1[46] = &off_100197800;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001976D8;
  a1[45] = off_100197760;
  a1[46] = off_100197788;
  return a1;
}

void sub_10004232C(_Unwind_Exception *a1)
{
  sub_100042424(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100042350(uint64_t a1)
{
  return a1;
}

uint64_t sub_100042394(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100197870;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100042410(_Unwind_Exception *a1)
{
}

uint64_t sub_100042424(uint64_t a1)
{
  *(void *)a1 = off_100197870;
  sub_10004282C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100042560(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100042424(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000425C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100042600(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100042668(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100042424(v1);

  return std::ios::~ios();
}

void sub_1000426B4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100042424(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100042718(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100042424(v1);

  return std::ios::~ios();
}

void sub_100042778(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100042424(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000427F4(uint64_t a1)
{
  sub_100042424(a1);

  operator delete();
}

uint64_t sub_10004282C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000429B0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100042988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000429B0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 135;
    __int16 v22 = 2082;
    char v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 135;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_100042B98(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_100042BDC();
  }
}

void sub_100042BDC(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 8))
  {
    unsigned __int8 v2 = *(std::mutex **)(*(void *)a1 + 16);
    std::mutex::lock(v2);
    if (atomic_load((unint64_t *)(*(void *)a1 + 8))) {
      std::condition_variable::notify_all(*(std::condition_variable **)(*(void *)a1 + 24));
    }
    std::mutex::unlock(v2);
  }
}

unint64_t sub_100042C50(unint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = sub_10014119C(a1);
  *(void *)(a1 + 24) = sub_100141268(a1);
  if (*(unsigned char *)(a2 + 4))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(unsigned char *)(a1 + 4) = 1;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  int v4 = *(unint64_t **)(a1 + 32);
  if (v4) {
    *int v4 = a1;
  }
  return a1;
}

void sub_100042CC8(uint64_t a1, void *a2, uint64_t *a3)
{
  int v5 = operator new(0x6F8uLL);
  sub_100042D44(v5, a2, a3);
}

void sub_100042D30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100042D44(void *a1, void *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001978F0;
  uint64_t v3 = *a3;
  int v4 = 4;
  sub_10003C388(a1 + 3, a2, &v4, v3);
}

void sub_100042DC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100042DD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001978F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100042DF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001978F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100042E48(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100042E70(uint64_t a1, void *a2, int *a3, uint64_t *a4)
{
  uint64_t v7 = operator new(0x710uLL);
  sub_100042EFC(v7, a2, a3, a4);
}

void sub_100042EE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100042EFC(void *a1, void *a2, int *a3, uint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100197940;
  int v4 = *a3;
  sub_10003D5AC(a1 + 3, a2, &v4, *a4);
}

void sub_100042F5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100042F70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100197940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100042F90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100197940;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100042FE4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_10004300C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100196918;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100043088(_Unwind_Exception *a1)
{
}

uint64_t sub_10004309C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100196B38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100043118(_Unwind_Exception *a1)
{
}

void sub_10004312C(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000431E0((uint64_t)a1, a3);
  if (v11 >= 0x13B13B13B13B13CLL) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(104 * v11);
  sub_100043264((uint64_t)a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_1000431E0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x13B13B13B13B13BLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x13B13B13B13B13BLL - v4 < a2 - v4 + v3) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x13B13B13B13B13BLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_100043264(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)a1;
  sub_100043344(a1, *(void **)a1, a4, (void *)(*(void *)a1 + 104 * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = v10 + 48;
      do
      {
        if (*(void *)v12) {
          *(void *)(*(void *)v12 + 32) = 0;
        }
        uint64_t v13 = *(std::__shared_weak_count **)(v12 - 40);
        if (v13) {
          sub_100010A48(v13);
        }
        v12 += 104;
        --v11;
      }
      while (v11);
    }
    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = a3;
}

void sub_100043320(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100043344(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a5;
  uint64_t v17 = a1;
  uint64_t v12 = sub_100043450(a1, a2, a3, a5);
  uint64_t v16 = v12;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  long long v13 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(v12 + 16) = v13;
  *(void *)(v12 + 48) = *(void *)(a7 + 48);
  *(void *)(a7 + 48) = 0;
  *(void *)(*(void *)(v12 + 48) + 32) = v12 + 48;
  sub_100042C50(v12 + 56, a7 + 56);
  *(void *)(v12 + 96) = *(void *)(a7 + 96);
  sub_100043450(a1, a3, a4, v12 + 104 * a6);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  return sub_10004353C(&v15);
}

void sub_10004341C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(void *)v3) {
    *(void *)(*(void *)v3 + 32) = 0;
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
  if (v5) {
    sub_100010A48(v5);
  }
  sub_10004353C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100043450(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      unint64_t v8 = &a2[v7];
      uint64_t v9 = a4 + v7 * 8;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)&a2[v7];
      *unint64_t v8 = 0;
      v8[1] = 0;
      long long v10 = *(_OWORD *)&a2[v7 + 2];
      *(_OWORD *)(v9 + 25) = *(_OWORD *)((char *)&a2[v7 + 3] + 1);
      *(_OWORD *)(v9 + 16) = v10;
      *(void *)(a4 + v7 * 8 + 48) = a2[v7 + 6];
      v8[6] = 0;
      *(void *)(*(void *)(a4 + v7 * 8 + 48) + 32) = a4 + v7 * 8 + 48;
      sub_100042C50(a4 + v7 * 8 + 56, (uint64_t)&a2[v7 + 7]);
      *(void *)(v9 + 96) = a2[v7 + 12];
      v7 += 13;
    }
    while (v8 + 13 != a3);
    a4 += v7 * 8;
  }
  return a4;
}

void sub_1000434FC(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4) {
    *(void *)(v4 + 32) = 0;
  }
  sub_100146E78((std::__shared_weak_count **)(v3 + 8), a1, a2, v3, v2);
  __cxa_rethrow();
}

void sub_100043528(_Unwind_Exception *a1)
{
}

uint64_t *sub_10004353C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 48);
    if (v4) {
      *(void *)(v4 + 32) = 0;
    }
    unint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
    if (v5)
    {
      sub_100010A48(v5);
      uint64_t v2 = *a1;
      uint64_t v3 = a1[1];
    }
    v2 += 104;
    *a1 = v2;
  }
  return a1;
}

uint64_t sub_100043594(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100196D58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100043610(_Unwind_Exception *a1)
{
}

void sub_100043624(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1 + 48;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      char v4 = *(std::__shared_weak_count **)(v3 - 40);
      if (v4) {
        sub_100010A48(v4);
      }
      v3 += 104;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

void sub_100043684(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = operator new(0x710uLL);
  sub_100043700(v5, a2, a3);
}

void sub_1000436EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100043700(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100197940;
  sub_10003D71C(a1 + 3, a2, a3);
}

void sub_100043748(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004375C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100197210;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000437D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000437EC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100197430;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100043868(_Unwind_Exception *a1)
{
}

void sub_10004387C(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = operator new(0x6F8uLL);
  sub_1000438F8(v5, a2, a3);
}

void sub_1000438E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000438F8(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001978F0;
  sub_10003C4EC(a1 + 3, a2, a3);
}

void sub_10004395C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_100043970(atomic_ullong *result)
{
  return result;
}

void sub_10004397C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (atomic_fetch_add((atomic_ullong *volatile)a1, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(unsigned char *)(a1 + 72))
  {
    *(unsigned char *)(a1 + 72) = 0;
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
  }

  std::mutex::unlock(v2);
}

uint64_t sub_1000439E0(uint64_t result)
{
  *(unsigned char *)(result + 72) = 1;
  return result;
}

void sub_1000439F0(uint64_t a1)
{
  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (atomic_fetch_add((atomic_ullong *volatile)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    *(unsigned char *)(a1 + 72) = 0;
  }
  else
  {
    while (*(unsigned char *)(a1 + 72))
      std::condition_variable::wait((std::condition_variable *)(a1 + 80), &v2);
  }
  if (v2.__owns_) {
    std::mutex::unlock(v2.__m_);
  }
}

uint64_t sub_100043A74(uint64_t a1, unint64_t a2)
{
  unint64_t v18 = a2;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  LOBYTE(v15[0]) = 0;
  sub_100046280((uint64_t **)a1, &v18, &v18, v15);
  char v4 = v3;
  if ((v3 & 1) == 0)
  {
    if (sub_1000D29B8())
    {
      *(void *)&long long v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36;
      int v14 = 2;
      sub_100043D60(v15, &v13);
      sub_100003DF0(v16, (uint64_t)"Band ", 5);
      *(_DWORD *)((char *)&v16[1] + *(void *)(v16[0] - 24)) = *(_DWORD *)((unsigned char *)&v16[1]
                                                                            + *(void *)(v16[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v16[1] + *(void *)(v16[0] - 24)) = *(_DWORD *)((unsigned char *)&v16[1]
                                                                            + *(void *)(v16[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_100003DF0(v16, (uint64_t)" was opened in the background, waiting for it to become available", 65);
      std::ostream::~ostream();
      sub_100044DAC((uint64_t)v15);
      std::ios::~ios();
    }
    uint64_t v7 = *(void **)(a1 + 8);
    uint64_t v6 = a1 + 8;
    long long v5 = v7;
    if (v7)
    {
      do
      {
        unint64_t v8 = (void *)v6;
        do
        {
          unint64_t v9 = v5[4];
          BOOL v10 = v9 >= v18;
          if (v9 >= v18) {
            uint64_t v11 = v5;
          }
          else {
            uint64_t v11 = v5 + 1;
          }
          if (v10) {
            unint64_t v8 = v5;
          }
          long long v5 = (void *)*v11;
        }
        while (*v11);
        if (v8 == (void *)v6) {
          break;
        }
        if (v18 < v8[4]) {
          break;
        }
        if (*((unsigned char *)v8 + 40)) {
          break;
        }
        std::condition_variable::wait((std::condition_variable *)(v6 + 80), &__lk);
        long long v5 = *(void **)v6;
      }
      while (*(void *)v6);
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36;
      int v14 = 2;
      sub_100043EC8(v15, &v13);
      sub_100003DF0(v16, (uint64_t)"Band ", 5);
      *(_DWORD *)((char *)&v16[1] + *(void *)(v16[0] - 24)) = *(_DWORD *)((unsigned char *)&v16[1]
                                                                            + *(void *)(v16[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v16[1] + *(void *)(v16[0] - 24)) = *(_DWORD *)((unsigned char *)&v16[1]
                                                                            + *(void *)(v16[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_100003DF0(v16, (uint64_t)" is now available", 17);
      std::ostream::~ostream();
      sub_100045520((uint64_t)v15);
      std::ios::~ios();
    }
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v4 & 1;
}

void sub_100043D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (*(unsigned char *)(v13 - 64)) {
    std::mutex::unlock(*(std::mutex **)(v13 - 72));
  }
  _Unwind_Resume(exception_object);
}

void *sub_100043D60(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_100046348((uint64_t)a1, a2);
  *a1 = off_1001979C0;
  a1[45] = &off_100197AC0;
  a1[46] = &off_100197AE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001979C0;
  a1[45] = off_100197A48;
  a1[46] = off_100197A70;
  return a1;
}

void sub_100043E60(_Unwind_Exception *a1)
{
  sub_100044DAC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100043E84(uint64_t a1)
{
  return a1;
}

void *sub_100043EC8(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_1000463D8((uint64_t)a1, a2);
  *a1 = off_100197BE0;
  a1[45] = &off_100197CE0;
  a1[46] = &off_100197D08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100197BE0;
  a1[45] = off_100197C68;
  a1[46] = off_100197C90;
  return a1;
}

void sub_100043FC8(_Unwind_Exception *a1)
{
  sub_100045520(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100043FEC(uint64_t a1)
{
  return a1;
}

void sub_100044030(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v7 = *(void **)(a1 + 8);
  if (!v7) {
    goto LABEL_12;
  }
  unint64_t v8 = (void *)(a1 + 8);
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v11 = v7 + 1;
    }
    if (v10) {
      unint64_t v8 = v7;
    }
    uint64_t v7 = (void *)*v11;
  }
  while (*v11);
  if (v8 == (void *)(a1 + 8) || v8[4] > a2) {
LABEL_12:
  }
    unint64_t v8 = (void *)(a1 + 8);
  *((unsigned char *)v8 + 40) = a3;
  if (a3) {
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  }

  std::mutex::unlock(v6);
}

void sub_1000440D4(uint64_t a1, unint64_t a2)
{
  unint64_t v8 = a2;
  char v3 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_100046468(a1, &v8);
  if (sub_1000D29B8())
  {
    *(void *)&long long v4 = "sparse_bundles::open_bands_t::remove(uint64_t)";
    *((void *)&v4 + 1) = 36;
    int v5 = 2;
    sub_100044240(v6, &v4);
    sub_100003DF0(v7, (uint64_t)"Band ", 5);
    *(_DWORD *)((char *)&v7[1] + *(void *)(v7[0] - 24)) = *(_DWORD *)((unsigned char *)&v7[1] + *(void *)(v7[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v7[1] + *(void *)(v7[0] - 24)) = *(_DWORD *)((unsigned char *)&v7[1] + *(void *)(v7[0] - 24)) & 0xFFFFFFB5 | 2;
    sub_100003DF0(v7, (uint64_t)" is closed, notifying waiters", 29);
    std::ostream::~ostream();
    sub_100045C94((uint64_t)v6);
    std::ios::~ios();
  }
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v3);
}

void sub_100044218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void *sub_100044240(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_1000468DC((uint64_t)a1, a2);
  *a1 = off_100197E00;
  a1[45] = &off_100197F00;
  a1[46] = &off_100197F28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100197E00;
  a1[45] = off_100197E88;
  a1[46] = off_100197EB0;
  return a1;
}

void sub_100044340(_Unwind_Exception *a1)
{
  sub_100045C94(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100044364(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000443A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v7 = 0;
  sub_10004696C(&v7, __p);
  long long v3 = *(_OWORD *)__p;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 136) = 1018212795;
  *(_OWORD *)(a1 + 56) = xmmword_100164A20;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 850045863;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 1018212795;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_100003BA4(__p, "com.apple.diskimages.band_management");
  sub_10003C090();
  sub_1000471B8((void *)(a1 + 328));
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  sub_1000474F4(a1 + 328, 0, a1 + 392);
  sub_1000471BC(a1 + 328, 3);
  return a1;
}

void sub_1000444CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v20 = v17;
  sub_100047470(v20);
  sub_1000445D4(v18);
  uint64_t v22 = v14[40];
  v14[40] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  sub_100044620(v15);
  std::condition_variable::~condition_variable(v16);
  std::mutex::~mutex((std::mutex *)(v15 - 120));
  char v23 = (std::__shared_weak_count *)v14[4];
  if (v23) {
    sub_100010A48(v23);
  }
  uint64_t v24 = v14[2];
  v14[2] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
  }
  uint64_t v25 = *v19;
  *uint64_t v19 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000445D4(uint64_t a1)
{
  long long v3 = (void **)(a1 + 24);
  sub_10001A830(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100044620(uint64_t a1)
{
  return a1;
}

void sub_100044664(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  uint64_t v11 = 0x4802000000;
  uint64_t v12 = sub_100044850;
  uint64_t v13 = sub_100044874;
  __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  sub_1000474F4(a1 + 328, 0, (uint64_t)v18);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _OWORD v8[2] = sub_100044888;
  v8[3] = &unk_100197988;
  v8[4] = a2;
  v8[5] = &v9;
  sub_1000472D8(v18, v8);
  sub_100047470(v18);
  if (*((_DWORD *)v10 + 16))
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    long long v4 = v10;
    uint64_t v5 = *((unsigned int *)v10 + 16);
    *(void *)exception = &off_1001B6CA0;
    char v6 = std::generic_category();
    *((void *)exception + 1) = v5;
    *((void *)exception + 2) = v6;
    uint64_t v7 = v4[7];
    *(_OWORD *)(exception + 24) = *(_OWORD *)(v4 + 5);
    *((void *)exception + 5) = v7;
    v4[6] = 0;
    v4[7] = 0;
    v4[5] = 0;
    exception[48] = 1;
  }
  _Block_object_dispose(&v9, 8);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
}

void sub_100044814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_100044850(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_100044874(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t sub_100044888(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000449A4@<X0>(void *a1@<X8>)
{
  sub_100003C58((uint64_t)&v3);
  *(_DWORD *)((char *)v4 + *(void *)(v3 - 24)) = *(_DWORD *)((unsigned char *)v4 + *(void *)(v3 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  sub_100003890((uint64_t)v4, a1);
  if (v5 < 0) {
    operator delete((void *)v4[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100044B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100044B1C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100044DAC(v1);

  return std::ios::~ios();
}

uint64_t sub_100044B68(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100044DAC(v1);

  return std::ios::~ios();
}

void sub_100044BC8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100044DAC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100044C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100044C68(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100044CD0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100044DAC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100044D34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100044DAC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100044DAC(uint64_t a1)
{
  *(void *)a1 = off_100197B58;
  sub_100044EE8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100044EE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000450A8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100045044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100045070(uint64_t a1)
{
  sub_100044DAC(a1);

  operator delete();
}

int *sub_1000450A8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 72;
    __int16 v22 = 2082;
    char v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 72;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100045290(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100045520(v1);

  return std::ios::~ios();
}

uint64_t sub_1000452DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100045520(v1);

  return std::ios::~ios();
}

void sub_10004533C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100045520(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000453A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000453DC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100045444(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100045520(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000454A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100045520(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100045520(uint64_t a1)
{
  *(void *)a1 = off_100197D78;
  sub_10004565C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10004565C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10004581C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000457B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000457E4(uint64_t a1)
{
  sub_100045520(a1);

  operator delete();
}

int *sub_10004581C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 79;
    __int16 v22 = 2082;
    char v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 79;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100045A04(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100045C94(v1);

  return std::ios::~ios();
}

uint64_t sub_100045A50(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100045C94(v1);

  return std::ios::~ios();
}

void sub_100045AB0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100045C94(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100045B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100045B50(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100045BB8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100045C94(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100045C1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100045C94(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100045C94(uint64_t a1)
{
  *(void *)a1 = off_100197F98;
  sub_100045DD0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100045DD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100045F90((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100045F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100045F58(uint64_t a1)
{
  sub_100045C94(a1);

  operator delete();
}

int *sub_100045F90(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 98;
    __int16 v22 = 2082;
    char v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 98;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

std::string *sub_100046178(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = __dst->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_100046238(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return sub_100046178(a1, __s, v4);
}

uint64_t **sub_100046280(uint64_t **a1, unint64_t *a2, void *a3, unsigned char *a4)
{
  unint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        unint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        unint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
LABEL_10:
    os_log_type_t v12 = operator new(0x30uLL);
    v12[4] = *a3;
    *((unsigned char *)v12 + 40) = *a4;
    sub_10002B3B8(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t sub_100046348(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100197B58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000463C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000463D8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100197D78;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100046454(_Unwind_Exception *a1)
{
}

uint64_t sub_100046468(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  char v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      char v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_1000464E4((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *sub_1000464E4(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    char v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      char v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_100046558(v6, a2);
  return v3;
}

uint64_t *sub_100046558(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    char v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      char v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      __n128 result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      __n128 result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      void v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        __n128 result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        _OWORD v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        _OWORD v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    _OWORD v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      __n128 result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  __int16 v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    __int16 v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    _OWORD v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    _OWORD v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_1000468DC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100197F98;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100046958(_Unwind_Exception *a1)
{
}

void sub_10004696C(int *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x48uLL);
  sub_1000469E0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1000196A4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000469CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000469E0(void *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100198018;
  uint64_t v3 = *a2;
  uint64_t v4 = sub_100143B3C();
  uint64_t v6 = v5;
  sub_10014193C(a1 + 3);
  a1[3] = off_100198068;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_100046A68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100046A7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100198018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100046A9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100198018;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100046AF0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100046B18(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100046B48(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

uint64_t sub_100046B98()
{
  return 0;
}

uint64_t sub_100046BA0()
{
  return 4294967251;
}

uint64_t sub_100046BA8()
{
  return 0;
}

uint64_t sub_100046BB0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_100046BB8()
{
  return 1;
}

uint64_t sub_100046BC0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  return 0;
}

void *sub_100046BCC(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"BackendNull", 11);
}

void *sub_100046BE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10001A6E0(a2, (void *)(a1 + 8));
}

uint64_t sub_100046BEC(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_100046BF4(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_100046BFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t sub_100046C20(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void *sub_100046C2C(void *result, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v2 = "write";
      goto LABEL_9;
    case 2:
      return result;
    case 3:
      uint64_t v2 = "barrier";
      uint64_t v3 = 7;
      return sub_100003DF0(result, (uint64_t)v2, v3);
    case 4:
      uint64_t v2 = "flush";
      goto LABEL_9;
    case 5:
      uint64_t v2 = "eject";
      goto LABEL_9;
    case 6:
      uint64_t v2 = "unmap";
LABEL_9:
      uint64_t v3 = 5;
      break;
    default:
      uint64_t v2 = "read";
      uint64_t v3 = 4;
      break;
  }
  return sub_100003DF0(result, (uint64_t)v2, v3);
}

void *sub_100046CC4(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  uint64_t v5 = sub_100003DF0(a1, (uint64_t)"device_command: ", 16);
  *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v16 = 48;
  uint64_t v6 = sub_100016CD0(v5, &v16);
  uint64_t v7 = *v6;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
  *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) |= 0x200u;
  sub_100003DF0(v6, (uint64_t)"[start: ", 8);
  int v8 = (uint64_t *)std::ostream::operator<<();
  uint64_t v9 = *v8;
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)v8 + *(void *)(v9 - 24) + 24) = 0;
  *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) &= ~0x200u;
  sub_100003DF0(v8, (uint64_t)" size: ", 7);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = sub_100003DF0(v10, (uint64_t)" op_code: ", 10);
  uint64_t v12 = sub_100046C2C(v11, *(unsigned __int8 *)(a2 + 16));
  sub_100003DF0(v12, (uint64_t)" num_buffers: ", 14);
  uint64_t v13 = (void *)std::ostream::operator<<();
  sub_100003DF0(v13, (uint64_t)" buffer_size: ", 14);
  uint64_t v14 = (void *)std::ostream::operator<<();
  sub_100003DF0(v14, (uint64_t)"]", 1);
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v4;
  return a1;
}

char *sub_100046EDC(char *__dst, long long *a2, unint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100047744(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  __dst[56] = a3 != 0;
  if (a3)
  {
    sub_10004701C((void *)__dst + 3, a3);
    do
    {
      uint64_t v6 = __dst;
      if (__dst[23] < 0) {
        uint64_t v6 = *(char **)__dst;
      }
      sub_10011DF70((int)&v9, v6);
      sub_1000470B0((void *)__dst + 3, &v9);
      sub_10011DEBC(&v9);
      --a3;
    }
    while (a3);
  }
  else
  {
    uint64_t v7 = __dst;
    if (__dst[23] < 0) {
      uint64_t v7 = *(char **)__dst;
    }
    sub_10011DF70((int)&v9, v7);
    sub_1000470B0((void *)__dst + 3, &v9);
    sub_10011DEBC(&v9);
  }
  return __dst;
}

void sub_100046FD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10011DEBC((NSObject **)va);
  sub_10001A830((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004701C(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_10001796C();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100019308(result, a2);
    v7[1] = v7[0] + v5;
    _OWORD v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 8 * v6;
    sub_100019280(a1, v7);
    return sub_100019340((uint64_t)v7);
  }
  return result;
}

void sub_10004709C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100019340((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000470B0(void *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10001796C();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_100019308(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    char v16 = &v13[8 * v9];
    uint64_t v18 = &v13[8 * v12];
    sub_10011DF74(v16, a2);
    int v17 = v16 + 8;
    sub_100019280(a1, &v15);
    unint64_t v8 = a1[1];
    sub_100019340((uint64_t)&v15);
  }
  else
  {
    sub_10011DF74(*(void **)(v4 - 8), a2);
    unint64_t v8 = v7 + 8;
    a1[1] = v7 + 8;
  }
  a1[1] = v8;
  return v8 - 8;
}

void sub_1000471A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100019340((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000471BC(uint64_t result, int a2)
{
  uint64_t v2 = *(dispatch_object_t **)(result + 24);
  for (uint64_t i = *(dispatch_object_t **)(result + 32); v2 != i; ++v2)
    uint64_t result = sub_10011E048(v2, a2);
  return result;
}

void sub_100047208(uint64_t a1)
{
  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 48);
  v5.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 112) = v2 - 1;
LABEL_5:
    std::mutex::unlock(v5.__m_);
    return;
  }
  do
  {
    std::condition_variable::wait((std::condition_variable *)a1, &v5);
    uint64_t v3 = *(void *)(a1 + 112);
  }
  while (!v3);
  BOOL owns = v5.__owns_;
  *(void *)(a1 + 112) = v3 - 1;
  if (owns) {
    goto LABEL_5;
  }
}

void sub_100047284(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  ++*(void *)(a1 + 112);
  std::condition_variable::notify_one((std::condition_variable *)a1);

  std::mutex::unlock(v2);
}

void sub_1000472D8(dispatch_group_t *a1, void *a2)
{
  if (*((unsigned char *)a1 + 136))
  {
    sub_100047208((uint64_t)(a1 + 2));
    dispatch_group_t v4 = *a1;
    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)&(*a1)[6], 1uLL);
    unint64_t v7 = v4 + 3;
    Class isa = v4[3].isa;
    unint64_t v8 = add % ((v7[1].isa - isa) >> 3);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000;
    _OWORD v11[2] = sub_1000473E0;
    void v11[3] = &unk_100198138;
    v11[4] = a2;
    v11[5] = a1;
    sub_10011DF8C((dispatch_queue_t *)isa + v8, a1 + 1, v11);
  }
  else
  {
    dispatch_group_t v9 = *a1;
    uint64_t v10 = (dispatch_queue_t *)((char *)v9[3].isa
                             + 8
                             * (atomic_fetch_add((atomic_ullong *volatile)&(*a1)[6], 1uLL)
                              % ((v9[4].isa - v9[3].isa) >> 3)));
    sub_10011DF8C(v10, a1 + 1, a2);
  }
}

void sub_1000473E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  sub_100047284(v1 + 16);
}

intptr_t sub_100047420(uint64_t a1, dispatch_time_t a2)
{
  return sub_10011DEEC((dispatch_group_t *)(a1 + 8), a2);
}

uint64_t sub_100047428(uint64_t a1)
{
  uint64_t v2 = (NSObject **)(a1 + 8);
  sub_10011DEEC((dispatch_group_t *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
  sub_1000477E4(a1 + 16);
  sub_10011DEBC(v2);
  return a1;
}

uint64_t sub_100047474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_10011DE90((dispatch_group_t *)(a1 + 8));
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (a3)
  {
    sub_100047820(a1 + 16);
    *(void *)(a1 + 16) = 1018212795;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 850045863;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = a3;
    *(unsigned char *)(a1 + 136) = 1;
  }
  return a1;
}

uint64_t sub_1000474F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100047474(a3, a1, a2);
}

uint64_t sub_100047504@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100047518(a4, a1, a2, a3);
}

uint64_t sub_100047518(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2[3] + 8 * (atomic_fetch_add(a2 + 6, 1uLL) % ((uint64_t)(a2[4] - a2[3]) >> 3));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _OWORD v8[2] = sub_100047610;
  v8[3] = &unk_100198160;
  unint64_t v6 = (void **)(a1 + 16);
  v8[4] = a3;
  v8[5] = a1;
  void v8[6] = a4;
  sub_10011E608((dispatch_block_t *)(a1 + 16), v8);
  if (*(void *)(a1 + 16) && *(unsigned char *)(*(void *)a1 + 56)) {
    sub_10011DF9C(*(NSObject ***)(a1 + 8), v6, a4);
  }
  return a1;
}

void sub_1000475FC(_Unwind_Exception *a1)
{
  sub_10011E688(v1);
  _Unwind_Resume(a1);
}

void sub_100047610(void *a1)
{
  uint64_t v2 = a1[5];
  (*(void (**)(void))(a1[4] + 16))();
  uint64_t v3 = *(NSObject ***)(v2 + 8);
  uint64_t v4 = a1[6];

  sub_10011DF9C(v3, (void **)(v2 + 16), v4);
}

uint64_t sub_10004765C(uint64_t a1)
{
  return a1;
}

void sub_100047690(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (*(unsigned char *)(*(void *)a1 + 56))
    {
      uint64_t v2 = *(dispatch_queue_t **)(a1 + 8);
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 0x40000000;
      v3[2] = sub_100047734;
      v3[3] = &unk_100198180;
      v3[4] = a1;
      sub_10011DF84(v2, v3);
      sub_10011E020(*(dispatch_queue_t **)(a1 + 8), &stru_1001981C0);
    }
  }
}

void sub_100047734(uint64_t a1)
{
}

void *sub_100047744(unsigned char *__dst, void *__src, unint64_t a3)
{
  std::unique_lock<std::mutex> v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_10000397C();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    std::unique_lock<std::mutex> v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_1000477E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
  }
  return a1;
}

void sub_100047820(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
    *(unsigned char *)(a1 + 120) = 0;
  }
}

void sub_10004794C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100047CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000484C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004862C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000488C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000489A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

#error "100049144: call analysis failed (funcsize=235)"

void sub_1000495DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100049B94(_Unwind_Exception *a1, int a2)
{
  uint64_t v7 = v5;

  if (a2 == 1)
  {
    uint64_t v10 = [objc_begin_catch(a1) reason];
    +[DIError nilWithEnumValue:150 verboseInfo:v10 error:v2];
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x100049B4CLL);
  }

  _Unwind_Resume(a1);
}

void sub_100049DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a15) {
    sub_100010A48(a15);
  }
  sub_10004A808(&a20);

  _Unwind_Resume(a1);
}

void *sub_10004A784@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    std::unique_lock<std::mutex> v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_10004A808(void *a1)
{
  *a1 = off_1001B1DB0;
  a1[3] = off_1001B1E90;
  a1[4] = off_1001B1EC8;
  sub_10004CD98((uint64_t)(a1 + 8));
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_10004AEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10004B388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  sub_10004A808(&a22);
  if (a2 == 1)
  {
    +[DIError nilWithDIException:__cxa_begin_catch(a1) prefix:@"failed to open existing output file" error:v22];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x10004B674);
  }
  _Unwind_Resume(a1);
}

void sub_10004C350(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  if (a2 == 1)
  {
    int v30 = [objc_begin_catch(a1) reason];
    +[DIError failWithEnumValue:150 verboseInfo:v30 error:v22];

    objc_end_catch();
    JUMPOUT(0x10004B958);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004C64C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004C65C(uint64_t a1)
{
}

id sub_10004C664(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_10004C6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004C904(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v9 = a4;
  uint64_t v7 = sub_10014193C((void *)a1);
  *uint64_t v7 = off_1001B1DB0;
  void v7[3] = off_1001B1E90;
  v7[4] = off_1001B1EC8;
  sub_10011FFD0(v10, a2, a3);
  sub_10004CA44((uint64_t)v10, &v9, (void *)(a1 + 40));
  sub_10011F87C((uint64_t)v10);
  *(void *)(a1 + 56) = *(void *)(a1 + 40) + 8;
  *(void *)(a1 + 64) = a1 + 88;
  *(_OWORD *)(a1 + 72) = xmmword_100164620;
  return a1;
}

void sub_10004CA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10011F87C((uint64_t)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_10004CA44@<X0>(uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB0uLL);
  uint64_t result = sub_10004CAA8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10004CA94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10004CAA8(void *a1, uint64_t a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100198218;
  sub_10004CB88((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_10004CAF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10004CB08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100198218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004CB28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100198218;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10004CB7C(uint64_t a1)
{
  return sub_10004CD08(a1 + 24);
}

uint64_t sub_10004CB88(uint64_t a1, uint64_t a2, char a3)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = -1;
  *(void *)a1 = off_100198268;
  long long v4 = *(_OWORD *)(a2 + 12);
  long long v5 = *(_OWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 12) = v4;
  *(unsigned char *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 49) = sub_10004CC34(a1);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 144) = 0;
  return a1;
}

void sub_10004CC20(_Unwind_Exception *a1)
{
  sub_10011F87C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10004CC34(uint64_t a1)
{
  sub_100120124(a1);
  unint64_t v1 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 5)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    int v3 = *(_DWORD *)v2;
    int v4 = *((unsigned __int8 *)v2 + 4);
    BOOL v6 = v3 == 1717726579 && v4 == 115;
    if ((char)v9 < 0) {
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v6 = 0;
    if ((char)v9 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }
  return v6;
}

uint64_t sub_10004CCC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_10004CCD0(uint64_t a1)
{
  sub_10011F87C(a1);

  operator delete();
}

uint64_t sub_10004CD08(uint64_t a1)
{
  sub_10004CD48((uint64_t *)(a1 + 96));

  return sub_10011F87C(a1);
}

uint64_t *sub_10004CD48(uint64_t *result)
{
  if (*((unsigned char *)result + 40))
  {
    unint64_t v1 = result;
    sub_1000176CC(result, 0);
    return sub_100017750(v1 + 1);
  }
  return result;
}

uint64_t sub_10004CD98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 56;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      int v4 = *(std::__shared_weak_count **)(v3 - 48);
      if (v4) {
        sub_100010A48(v4);
      }
      v3 += 64;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10004D624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004DB44(id a1)
{
  id v3 = +[NSURL fileURLWithPath:@"/System/Library/PrivateFrameworks/DiskImages2.framework"];
  uint64_t v1 = +[NSBundle bundleWithURL:](NSBundle, "bundleWithURL:");
  uint64_t v2 = (void *)qword_1001C4F78;
  qword_1001C4F78 = v1;
}

void sub_10004DBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10004DD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004E1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004E1C4(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

void sub_10004E630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004E658(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

uint64_t make_error_code(uint64_t result)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C4F88, memory_order_acquire) & 1) == 0)
  {
    int v2 = result;
    int v1 = __cxa_guard_acquire(&qword_1001C4F88);
    LODWORD(result) = v2;
    if (v1)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_1001C45E8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001C4F88);
      LODWORD(result) = v2;
    }
  }
  return result;
}

void diskimage_uio::diskimage_open_params::diskimage_open_params()
{
}

{
  operator new();
}

{
  operator new();
}

void sub_10004ED90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const std::error_category *sub_10004EDA4@<X0>(std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::__fs::filesystem::__status(a1, 0);
  if (LOBYTE(v16[0]) == 255 || LOBYTE(v16[0]) == 0)
  {
    *(void *)&long long v14 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_path(const std::filesystem::path &, const diskimage_open_params::mode)";
    *((void *)&v14 + 1) = 75;
    int v15 = 16;
    sub_1000590DC(v16, &v14);
    sub_100003DF0(v17, (uint64_t)"Diskimageuio: path ", 19);
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100047744(__p, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)&a1->__pn_.__r_.__value_.__l.__data_;
      int64_t v13 = a1->__pn_.__r_.__value_.__r.__words[2];
    }
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if (v13 >= 0) {
      uint64_t v11 = HIBYTE(v13);
    }
    else {
      uint64_t v11 = (uint64_t)__p[1];
    }
    sub_100003DF0(v17, (uint64_t)v10, v11);
    sub_100003DF0(v17, (uint64_t)" doesn't exist", 14);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    std::ostream::~ostream();
    sub_100059A3C((uint64_t)v16);
    std::ios::~ios();
    uint64_t result = std::generic_category();
    *(void *)a4 = 2;
    *(void *)(a4 + 8) = result;
    *(unsigned char *)(a4 + 16) = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 564) = a3;
    std::string::operator=((std::string *)a2, &a1->__pn_);
    return (const std::error_category *)sub_100059244(a2, 0, 1);
  }
  return result;
}

void sub_10004EF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t sub_10004EF44(uint64_t result)
{
  if (*(unsigned char *)(result + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_1001983A0;
  }
  return result;
}

void sub_10004F088(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10004F09C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unsigned char *a5@<X8>)
{
  memset(v12, 0, sizeof(v12));
  if (a4 == 1) {
    uint64_t v7 = &_mh_execute_header + 2;
  }
  else {
    uint64_t v7 = &_mh_execute_header;
  }
  sub_10006B97C(&v8, a2, a3, v7, v12, 0);
  sub_100050AE4(a1 + 48, a1 + 48, (uint64_t)&v8);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    sub_100010A48(v9);
  }
  *(_DWORD *)(a1 + 560) = 12;
  *a5 = 0;
  a5[16] = 1;
}

void sub_10004F2B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10004F2CC(uint64_t a1, unsigned int a2, int a3, char a4)
{
  unsigned int v10 = a2;
  char v9 = a4;
  *(_DWORD *)(a1 + 564) = a3;
  *(_DWORD *)(a1 + 568) = a3;
  int v7 = 2 * ((a3 - 1) < 2);
  sub_100060A38(&v10, &v7, &v9, &v8);
  long long v5 = v8;
  long long v8 = 0uLL;
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v5;
  if (v6)
  {
    sub_100010A48(v6);
    if (*((void *)&v8 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  operator new();
}

void sub_10004F3C4()
{
}

void diskimage_uio::diskimage_open_params::create()
{
}

{
  diskimage_uio::diskimage_open_params::diskimage_open_params();
}

{
  diskimage_uio::diskimage_open_params::diskimage_open_params();
}

uint64_t *diskimage_uio::diskimage_open_params::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    id v3 = *(std::__shared_weak_count **)(v2 + 616);
    if (v3) {
      sub_100010A48(v3);
    }
    int v4 = *(std::__shared_weak_count **)(v2 + 600);
    if (v4) {
      sub_100010A48(v4);
    }
    long long v5 = *(std::__shared_weak_count **)(v2 + 584);
    if (v5) {
      sub_100010A48(v5);
    }
    sub_10005149C(v2 + 48);
    uint64_t v6 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    if (v6) {
      operator delete();
    }
    int v7 = *(std::__shared_weak_count **)(v2 + 32);
    if (v7) {
      sub_100010A48(v7);
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

void diskimage_uio::diskimage_open_params::~diskimage_open_params(diskimage_uio::diskimage_open_params *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 616);
    if (v2) {
      sub_100010A48(v2);
    }
    id v3 = *(std::__shared_weak_count **)(v1 + 600);
    if (v3) {
      sub_100010A48(v3);
    }
    int v4 = *(std::__shared_weak_count **)(v1 + 584);
    if (v4) {
      sub_100010A48(v4);
    }
    sub_10005149C(v1 + 48);
    uint64_t v5 = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (v5) {
      operator delete();
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v1 + 32);
    if (v6) {
      sub_100010A48(v6);
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  *(void *)this = 0;
}

_OWORD *sub_10004F6F8@<X0>(const std::error_category *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = sub_100057BA4(a1, (uint64_t)v6);
  if (v6[16])
  {
    *a2 = a1[5].__vftable != 0;
    char v5 = 1;
  }
  else
  {
    uint64_t result = (_OWORD *)sub_10004EF44((uint64_t)v6);
    char v5 = 0;
    *(_OWORD *)a2 = *result;
  }
  a2[16] = v5;
  return result;
}

double diskimage_uio::diskimage_open_params::get_nr_blocks@<D0>(diskimage_uio::diskimage_open_params *this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_10004F76C(*(void *)this, a2).n128_u64[0];
  return result;
}

__n128 sub_10004F76C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  sub_100060E08((const std::error_category *)a1, (uint64_t)v12);
  if (v12[16])
  {
    uint64_t v4 = *(unsigned int *)(a1 + 552);
    if (v4 == -1) {
      sub_100017DCC();
    }
    v10[0] = &v8;
    ((void (*)(void *, uint64_t))off_10019B4A8[v4])(v10, a1 + 48);
  }
  else
  {
    *(void *)&long long v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks() const";
    *((void *)&v8 + 1) = 80;
    int v9 = 16;
    sub_1000622D4(v10, &v8);
    sub_100003DF0(v11, (uint64_t)"Diskimageuio: query format failed ", 34);
    uint64_t v6 = sub_10004EF44((uint64_t)v12);
    sub_10005A1B0((uint64_t)v10, v6);
    std::ostream::~ostream();
    sub_1000624CC((uint64_t)v10);
    std::ios::~ios();
    int v7 = (__n128 *)sub_10004EF44((uint64_t)v12);
    __n128 result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }
  return result;
}

void sub_10004F874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000623F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *diskimage_uio::operator<<(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = "auto";
    uint64_t v3 = 4;
  }
  else if (a2 == 1)
  {
    uint64_t v2 = "read write";
    uint64_t v3 = 10;
  }
  else if (a2)
  {
    uint64_t v2 = "unknown";
    uint64_t v3 = 7;
  }
  else
  {
    uint64_t v2 = "read only";
    uint64_t v3 = 9;
  }
  return sub_100003DF0(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;

  switch(a2)
  {
    case 1:
      uint64_t v2 = "raw";
      uint64_t v3 = 3;
      return sub_100003DF0(a1, (uint64_t)v2, v3);
    case 2:
      uint64_t v2 = "udro";
      goto LABEL_11;
    case 3:
      uint64_t v2 = "udzo";
      goto LABEL_11;
    case 4:
      uint64_t v2 = "ulfo";
      goto LABEL_11;
    case 5:
      uint64_t v2 = "ulmo";
      goto LABEL_11;
    case 6:
      uint64_t v2 = "udzo_max";
      uint64_t v3 = 8;
      return sub_100003DF0(a1, (uint64_t)v2, v3);
    case 7:
      uint64_t v2 = "udsb";
      goto LABEL_11;
    case 8:
      uint64_t v2 = "asif";
LABEL_11:
      uint64_t v3 = 4;
      break;
    case 11:
      uint64_t v2 = "pstack";
      uint64_t v3 = 6;
      break;
    default:
      uint64_t v2 = "unknown";
      uint64_t v3 = 7;
      break;
  }
  return sub_100003DF0(a1, (uint64_t)v2, v3);
}

void sub_10004F9C0(void *a1, const void **a2, char *a3, char a4)
{
  *a1 = 0;
  if (*a2)
  {
    if (v6)
    {
      memset(&v12[3], 0, 24);
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 176))(v6);
      sub_100063A50(&__p, a3);
      sub_10012EE78(v7, (uint64_t *)&__p, a4, v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v12[0] != v12[1]) {
        operator new();
      }
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001B6CA0;
      char v11 = std::generic_category();
      exception[1] = 22;
      exception[2] = v11;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "pstack_header";
      void *exception = &off_10019B708;
    }
  }
  long long v8 = __cxa_allocate_exception(0x40uLL);
  *long long v8 = &off_1001B6CA0;
  int v9 = std::generic_category();
  v8[1] = 22;
  _OWORD v8[2] = v9;
  *((unsigned char *)v8 + 24) = 0;
  *((unsigned char *)v8 + 48) = 0;
  void v8[7] = "pstack_header";
  *long long v8 = &off_10019B708;
}

void sub_10004FEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, char a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,char a27,int a28,__int16 a29,char a30)
{
  a16 = &a19;
  sub_1000503C4((void ***)&a16);
  a19 = &a22;
  sub_1000638D4((void ***)&a19);
  sub_10006382C(v30, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10004FFA4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_1001B6CA0;
  uint64_t v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  *(void *)a1 = &off_10019B708;
  return a1;
}

uint64_t sub_10005002C(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_10001796C();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    uint64_t v6 = (char *)sub_100017984(result, a2);
    int v9 = *a1;
    unint64_t v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64(v8);
      unsigned int v10 = &v6[v5];
    }
    else
    {
      unsigned int v10 = &v6[v5];
      do
      {
        int v11 = *(_DWORD *)(v8 - 16);
        v8 -= 16;
        *((_DWORD *)v10 - 4) = v11;
        v10 -= 16;
        *((void *)v10 + 1) = *(void *)(v8 + 8);
        *(void *)(v8 + 8) = 0;
      }
      while ((char *)v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v15 = v12;
    int64_t v13 = a1[2];
    a1[2] = &v6[16 * v7];
    char v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_100063880((uint64_t)&v14);
  }
  return result;
}

diskimage_uio::diskimage_open_params *sub_1000500EC(diskimage_uio::diskimage_open_params *a1, long long *a2)
{
  char v5 = *((unsigned char *)a2 + 16);
  if (v5)
  {
    *(void *)&long long v4 = *(void *)a2;
    *(void *)a2 = 0;
  }
  else
  {
    long long v4 = *a2;
  }
  sub_100063CD8((diskimage_uio::diskimage_open_params *)&v4, a1);
  if (v5) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  }
  return a1;
}

void sub_100050158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::stack_image_node::stack_image_node(uint64_t a1, int a2, int a3, long long *a4, long long *a5, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100047744((unsigned char *)(a1 + 8), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 24) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_100047744((unsigned char *)(a1 + 32), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(a1 + 48) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }
  *(void *)(a1 + 56) = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sub_10005021C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void diskimage_uio::stack_image_node::~stack_image_node(diskimage_uio::stack_image_node *this)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void sub_1000502B0(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  operator delete();
}

const char *sub_1000502E8()
{
  return "disk image";
}

void *sub_1000502F4@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if ((a1 - 150) > 0x10) {
    uint64_t v2 = "(unrecognized error)";
  }
  else {
    uint64_t v2 = off_10019B720[a1 - 150];
  }
  return sub_100003BA4(a2, v2);
}

uint64_t sub_100050320(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_100050374((diskimage_uio::stack_image_node **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

diskimage_uio::stack_image_node *sub_100050374(diskimage_uio::stack_image_node **a1, diskimage_uio::stack_image_node *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    diskimage_uio::stack_image_node::~stack_image_node(result);
    operator delete();
  }
  return result;
}

void sub_1000503C4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (diskimage_uio::stack_image_node **)**a1;
  if (v2)
  {
    long long v4 = (diskimage_uio::stack_image_node **)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_100050374(--v4, 0);
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100050450(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_100050488(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 504);
  uint64_t v4 = *(unsigned int *)(a2 + 504);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1001983B8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 504) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1001983E8[v4])(&v5, result, a2);
}

void ***sub_100050528(uint64_t a1, void ***a2)
{
  return sub_10006382C(a2, 0);
}

void sub_100050534(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    sub_100010A48(v3);
  }
}

uint64_t sub_100050588(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504)) {
    return sub_100050610(result);
  }
  return result;
}

void sub_1000505A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000505A8(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 2) {
    return sub_100050938(result, (uint64_t)a3);
  }
  *a2 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[2];
  long long v6 = a3[4];
  a2[3] = a3[3];
  a2[4] = v6;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1000505DC(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 3) {
    return sub_1000509E0(result, a3);
  }
  *a2 = *a3;
  return result;
}

void ***sub_100050600(uint64_t *a1, void ***a2, uint64_t *a3)
{
  return sub_100050A50(*a1, a2, a3);
}

void sub_100050608(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100050610(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1001983B8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = 0;
  return a1;
}

void sub_100050668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v3 = *(_OWORD *)(a3 + 16);
    long long v4 = *(_OWORD *)(a3 + 32);
    long long v5 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v5;
    *(_OWORD *)(a2 + 16) = v3;
    *(_OWORD *)(a2 + 32) = v4;
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a3 + 84);
    long long v6 = *(_OWORD *)(a3 + 88);
    long long v7 = *(_OWORD *)(a3 + 104);
    long long v8 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 120) = v8;
    *(_OWORD *)(a2 + 104) = v7;
    *(_OWORD *)(a2 + 88) = v6;
    long long v9 = *(_OWORD *)(a3 + 152);
    long long v10 = *(_OWORD *)(a3 + 168);
    long long v11 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a2 + 200) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a2 + 184) = v11;
    *(_OWORD *)(a2 + 168) = v10;
    *(_OWORD *)(a2 + 152) = v9;
    long long v12 = *(_OWORD *)(a3 + 248);
    long long v13 = *(_OWORD *)(a3 + 264);
    long long v14 = *(_OWORD *)(a3 + 280);
    *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(a2 + 264) = v13;
    *(_OWORD *)(a2 + 280) = v14;
    *(_OWORD *)(a2 + 248) = v12;
    long long v16 = *(_OWORD *)(a3 + 312);
    long long v15 = *(_OWORD *)(a3 + 328);
    long long v17 = *(_OWORD *)(a3 + 296);
    *(void *)(a2 + 344) = *(void *)(a3 + 344);
    *(_OWORD *)(a2 + 312) = v16;
    *(_OWORD *)(a2 + 328) = v15;
    *(_OWORD *)(a2 + 296) = v17;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a2 + 352) = *(_DWORD *)(a3 + 352);
    *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
    long long v18 = *(_OWORD *)(a3 + 360);
    long long v19 = *(_OWORD *)(a3 + 376);
    long long v20 = *(_OWORD *)(a3 + 392);
    *(_OWORD *)(a2 + 408) = *(_OWORD *)(a3 + 408);
    *(_OWORD *)(a2 + 392) = v20;
    *(_OWORD *)(a2 + 376) = v19;
    *(_OWORD *)(a2 + 360) = v18;
    long long v21 = *(_OWORD *)(a3 + 424);
    long long v22 = *(_OWORD *)(a3 + 440);
    long long v23 = *(_OWORD *)(a3 + 456);
    *(_OWORD *)(a2 + 472) = *(_OWORD *)(a3 + 472);
    *(_OWORD *)(a2 + 456) = v23;
    *(_OWORD *)(a2 + 440) = v22;
    *(_OWORD *)(a2 + 424) = v21;
    uint64_t v24 = *(void *)(a3 + 488);
    *(_DWORD *)(a2 + 496) = *(_DWORD *)(a3 + 496);
    *(void *)(a2 + 488) = v24;
  }
  else
  {
    sub_100050790(a1, a3);
  }
}

void sub_100050790(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001983B8[v4])(&v5, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  sub_100050800(a1, a2);
  *(_DWORD *)(a1 + 504) = 1;
}

__n128 sub_100050800(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x4796C6F6BLL;
  *(_DWORD *)(a1 + 8) = 512;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  long long v7 = *(_OWORD *)(a2 + 152);
  long long v8 = *(_OWORD *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  long long v10 = *(_OWORD *)(a2 + 248);
  long long v11 = *(_OWORD *)(a2 + 264);
  long long v12 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 280) = v12;
  *(_OWORD *)(a1 + 248) = v10;
  long long v14 = *(_OWORD *)(a2 + 312);
  long long v13 = *(_OWORD *)(a2 + 328);
  long long v15 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v14;
  *(_OWORD *)(a1 + 328) = v13;
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  long long v16 = *(_OWORD *)(a2 + 360);
  long long v17 = *(_OWORD *)(a2 + 376);
  long long v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = v18;
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 360) = v16;
  __n128 result = *(__n128 *)(a2 + 424);
  long long v20 = *(_OWORD *)(a2 + 440);
  long long v21 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v21;
  *(_OWORD *)(a1 + 440) = v20;
  *(__n128 *)(a1 + 424) = result;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  *(void *)(a1 + 492) = *(void *)(a2 + 492);
  return result;
}

uint64_t sub_100050938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001983B8[v4])(&v9, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_DWORD *)a1 = 2003069043;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 62) = *(void *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 70) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 504) = 2;
  return a1;
}

uint64_t sub_1000509E0(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001983B8[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 504) = 3;
  return a1;
}

void ***sub_100050A50(uint64_t a1, void ***a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 504) != 4) {
    return (void ***)sub_100050A78(a1, a3);
  }
  long long v3 = (void **)*a3;
  *a3 = 0;
  return sub_10006382C(a2, v3);
}

uint64_t sub_100050A78(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001983B8[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 504) = 4;
  return a1;
}

void sub_100050AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 5)
  {
    long long v5 = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    char v6 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v5;
    if (v6) {
      sub_100010A48(v6);
    }
    char v7 = (void **)(a2 + 16);
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*v7);
    }
    long long v8 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)char v7 = v8;
    *(unsigned char *)(a3 + 39) = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  else
  {
    sub_100050B84(a1, a3);
  }
}

uint64_t sub_100050B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001983B8[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 504) = 5;
  return a1;
}

void sub_100050C10(uint64_t a1)
{
  sub_100113C08(&v23, a1);
  long long v1 = *(_OWORD *)(v23 + 32);
  long long v20 = *(_OWORD *)(v23 + 16);
  long long v21 = v1;
  uint64_t v22 = *(void *)(v23 + 48);
  long long v2 = *(_OWORD *)(v23 + 64);
  long long v3 = *(_OWORD *)(v23 + 88);
  long long v4 = *(_OWORD *)(v23 + 104);
  long long v5 = *(_OWORD *)(v23 + 136);
  long long v43 = *(_OWORD *)(v23 + 120);
  long long v44 = v5;
  long long v41 = v3;
  long long v42 = v4;
  long long v6 = *(_OWORD *)(v23 + 152);
  long long v7 = *(_OWORD *)(v23 + 168);
  long long v8 = *(_OWORD *)(v23 + 184);
  long long v48 = *(_OWORD *)(v23 + 200);
  long long v49 = v2;
  long long v46 = v7;
  long long v47 = v8;
  long long v45 = v6;
  long long v9 = *(_OWORD *)(v23 + 216);
  long long v10 = *(_OWORD *)(v23 + 232);
  long long v11 = *(_OWORD *)(v23 + 264);
  long long v12 = *(_OWORD *)(v23 + 280);
  long long v34 = *(_OWORD *)(v23 + 248);
  long long v35 = v11;
  long long v32 = v9;
  long long v33 = v10;
  long long v13 = *(_OWORD *)(v23 + 296);
  long long v14 = *(_OWORD *)(v23 + 312);
  long long v15 = *(_OWORD *)(v23 + 328);
  uint64_t v40 = *(void *)(v23 + 344);
  long long v38 = v14;
  long long v39 = v15;
  long long v36 = v12;
  long long v37 = v13;
  long long v16 = *(_OWORD *)(v23 + 440);
  long long v28 = *(_OWORD *)(v23 + 424);
  long long v29 = v16;
  long long v17 = *(_OWORD *)(v23 + 472);
  long long v30 = *(_OWORD *)(v23 + 456);
  long long v31 = v17;
  long long v18 = *(_OWORD *)(v23 + 376);
  long long v24 = *(_OWORD *)(v23 + 360);
  long long v25 = v18;
  long long v19 = *(_OWORD *)(v23 + 408);
  long long v26 = *(_OWORD *)(v23 + 392);
  long long v27 = v19;
  operator new();
}

void sub_100050FCC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  if (a2)
  {
    sub_10005149C((uint64_t)&STACK[0x258]);
    sub_10005149C((uint64_t)va1);
    if (a4) {
      (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    sub_1000510E4((uint64_t *)va);
    __cxa_begin_catch(a1);
    sub_100051134();
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1000510E4(uint64_t *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    operator delete();
  }
  return a1;
}

void sub_100051134()
{
}

void sub_100051168(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    goto LABEL_8;
  }
  if (a2 != 3 && a2 != 2)
  {
    if (a2 == 1)
    {
      uint64_t v3 = __cxa_begin_catch(a1);
      *(void *)&long long v5 = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions()";
      *((void *)&v5 + 1) = 146;
      int v6 = 16;
      sub_1000514F8(v8, &v5);
      sub_100143A7C(&v9, (uint64_t)v3);
      std::ostream::~ostream();
      sub_1000516F0((uint64_t)v8);
      std::ios::~ios();
      *(void *)uint64_t v2 = make_error_code(161);
      *(void *)(v2 + 8) = v4;
      *(unsigned char *)(v2 + 520) = 0;
      goto LABEL_7;
    }
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  int v7 = 0;
  sub_10005132C((uint64_t)v8, (uint64_t)&v5);
  int v10 = 0;
  sub_10005132C(v2, (uint64_t)v8);
  *(_DWORD *)(v2 + 512) = v10;
  *(unsigned char *)(v2 + 520) = 1;
  sub_10005149C((uint64_t)v8);
  sub_10005149C((uint64_t)&v5);
LABEL_7:
  __cxa_end_catch();
}

uint64_t sub_10005132C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 504) = -1;
  sub_100051374(a1, a2);
  return a1;
}

void sub_100051360(_Unwind_Exception *a1)
{
  sub_10005149C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100051374(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 504);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1001983B8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 504) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 504);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_100198418[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 504) = v5;
  }
  return result;
}

double sub_100051408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = sub_100050800(a2, a3).n128_u64[0];
  return result;
}

__n128 sub_100051414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = 2003069043;
  *(void *)(a2 + 4) = *(void *)(a3 + 4);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  __n128 result = *(__n128 *)(a3 + 16);
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 62) = *(void *)(a3 + 62);
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_WORD *)(a2 + 70) = 0;
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  return result;
}

__n128 sub_100051458(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void sub_100051464(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 sub_100051474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  __n128 result = *(__n128 *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_10005149C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1001983B8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  return a1;
}

void *sub_1000514F8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100051660((uint64_t)a1, a2);
  *a1 = off_100198478;
  a1[45] = &off_100198578;
  a1[46] = &off_1001985A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100198478;
  a1[45] = off_100198500;
  a1[46] = off_100198528;
  return a1;
}

void sub_1000515F8(_Unwind_Exception *a1)
{
  sub_1000516F0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005161C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100051660(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100198610;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000516DC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000516F0(uint64_t a1)
{
  *(void *)a1 = off_100198610;
  sub_100051AF8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005182C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000516F0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100051894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000518CC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100051934(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000516F0(v1);

  return std::ios::~ios();
}

void sub_100051980(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000516F0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000519E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000516F0(v1);

  return std::ios::~ios();
}

void sub_100051A44(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000516F0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100051AC0(uint64_t a1)
{
  sub_1000516F0(a1);

  operator delete();
}

uint64_t sub_100051AF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100051C7C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100051C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100051C7C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 393;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 393;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

BOOL sub_100051E64(_DWORD *a1, _DWORD *a2)
{
  if (*a1 == *a2 && (unint64_t v2 = a1[1], v2 == a2[1])) {
    return memcmp(a1 + 2, a2 + 2, v2 >> 3) == 0;
  }
  else {
    return 0;
  }
}

void sub_100051EB8(uint64_t a1, uint64_t *a2)
{
  sub_100111D64((uint64_t)v2, a2);
}

void sub_100051F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000562CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100051F60(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &off_1001986D0;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + 56) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)sub_100053198(a1 + 64, a2) = &off_100198690;
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v6 = *(void *)(a2 + 96);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = 1;
    *(void *)(a1 + 32) = 2 * v6;
    *(void *)(a1 + 40) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return a1;
}

void sub_100052010(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    sub_100010A48(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005202C(uint64_t a1)
{
  sub_1000562CC(a1);

  operator delete();
}

uint64_t sub_10005206C()
{
  return 512;
}

uint64_t sub_100052074(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t sub_10005207C()
{
  return 1;
}

__n128 sub_100052084@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_100052090()
{
  return 0;
}

uint64_t sub_100052098(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

void sub_1000520A0()
{
}

void sub_100052130()
{
}

void sub_100052178()
{
}

uint64_t sub_10005219C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v119 = v121;
  long long v120 = xmmword_100164620;
  std::string __p = v118;
  long long v117 = xmmword_100164620;
  unint64_t v8 = sub_1000535EC(a3, a4);
  uint64_t v9 = v8;
  if (v8 > 0x10)
  {
    if (v8 >= 0x333333333333334) {
      sub_100014AAC("get_next_capacity, allocator's max size reached");
    }
    int v10 = operator new(40 * v8);
    sub_100053D1C((uint64_t *)&__p, (unint64_t)v10, v9, (uint64_t)__p + 40 * v117, 0, 0);
  }
  uint64_t v11 = a4[18] - *(void *)(a3 + 144);
  sub_100111638(a1 + 64, *(void *)(a3 + 24), v11 & ~(v11 >> 63), (uint64_t *)&v119);
  os_log_type_t v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v102 = *a4;
  __uint32_t v103 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v67 = a1;
  uint64_t v13 = (uint64_t)(a4 + 7);
  long long v14 = *(_OWORD *)(a4 + 7);
  v104[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v104 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v105 = a4[6];
  long long v106 = v14;
  long long v15 = *(_OWORD *)(a4 + 11);
  long long v107 = *(_OWORD *)(a4 + 9);
  long long v108 = v15;
  char v109 = *((unsigned char *)a4 + 104);
  long long v16 = (std::__shared_weak_count *)a4[15];
  uint64_t v110 = a4[14];
  v111 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v112 = *((_OWORD *)a4 + 8);
  uint64_t v113 = a4[18];
  char v114 = *((unsigned char *)a4 + 152);
  v100[0] = 0;
  char v101 = 0;
  int v17 = (char *)v119;
  uint64_t v18 = *((void *)v119 + 3);
  uint64_t v19 = *(std::__shared_weak_count **)(a3 + 8);
  v87 = *(void **)a3;
  __int16 v88 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = a3 + 56;
  long long v21 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)size_t v89 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v89[9] = *(_OWORD *)(a3 + 25);
  uint64_t v90 = *(void *)(a3 + 48);
  long long v91 = v21;
  long long v22 = *(_OWORD *)(a3 + 88);
  long long v92 = *(_OWORD *)(a3 + 72);
  long long v93 = v22;
  char v94 = *(unsigned char *)(a3 + 104);
  uint64_t v23 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v95 = *(void *)(a3 + 112);
  long long v96 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v97 = *(_OWORD *)(a3 + 128);
  uint64_t v98 = *(void *)(a3 + 144);
  char v99 = *(unsigned char *)(a3 + 152);
  uint64_t v68 = a2;
  if (!(void)v120)
  {
    uint64_t v24 = 0;
    uint64_t v71 = 0;
    goto LABEL_83;
  }
  uint64_t v66 = a3;
  uint64_t v24 = 0;
  unint64_t v70 = &v17[64 * (void)v120];
  uint64_t v71 = 0;
  long long v69 = (uint64_t **)(a2 + 16);
  while (1)
  {
    unint64_t v25 = *((void *)v17 + 4);
    if (v25)
    {
      if (sub_10002F3D8((uint64_t)&v87, (uint64_t)&v102)) {
        break;
      }
    }
    if (v25 > *(void *)&v89[16]) {
      sub_1000301A0((uint64_t)&v87);
    }
    if (sub_10002F3D8((uint64_t)&v87, (uint64_t)&v102))
    {
      *(void *)&long long v83 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((void *)&v83 + 1) = 75;
      v84.i32[0] = 16;
      sub_1000536E4(v72, &v83);
      sub_100003DF0(v78, (uint64_t)"Udif: advanced buffer, needs to read ", 37);
      sub_1001131F8(v78, (int *)v17);
      sub_100003DF0(v78, (uint64_t)" but buffer is full", 19);
      std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
      uint64_t v52 = std::locale::use_facet((const std::locale *)&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
      std::locale::~locale((std::locale *)&v81);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::~ostream();
      sub_100053F68((uint64_t)v72);
      goto LABEL_82;
    }
    long long v26 = v87;
    long long v27 = v88;
    if (v88) {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v28 = *(void *)&v89[16];
    if (v25 <= *(void *)&v89[16])
    {
      if (*(_DWORD *)v17)
      {
        int8x16_t v31 = *(int8x16_t *)(v17 + 8);
        uint64_t v32 = *((void *)v17 + 4);
        *(void *)&long long v83 = v26;
        *((void *)&v83 + 1) = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int8x16_t v84 = vextq_s8(v31, v31, 8uLL);
        uint64_t v85 = v32;
        char v86 = 0;
        if (v71)
        {
          *(void *)&long long v81 = v17;
          long long v33 = sub_100054EE0(v69, (unsigned int *)v17, (uint64_t)&unk_100164F68, (_DWORD **)&v81);
          (*(void (**)(long long *__return_ptr))(*v33[5] + 128))(v72);
          if ((void)v117 == *((void *)&v117 + 1))
          {
            sub_10005581C((uint64_t *)&__p, (uint64_t)__p + 40 * v117, 1, (uint64_t)v72, &v81);
          }
          else
          {
            sub_100042C50((unint64_t)__p + 40 * v117, (uint64_t)v72);
            *(void *)&long long v117 = v117 + 1;
          }
          sub_100030064((uint64_t)&v87, v25);
          goto LABEL_30;
        }
        *(void *)&v72[0] = v17;
        long long v35 = sub_100054EE0(v69, (unsigned int *)v17, (uint64_t)&unk_100164F68, (_DWORD **)v72);
        int v36 = (*(uint64_t (**)(uint64_t *, long long *))(*v35[5] + 88))(v35[5], &v83);
        uint64_t v24 = v36;
        if (v36 < 0)
        {
          char v34 = 0;
          int v30 = 2;
        }
        else if (*(unsigned char *)(v68 + 56) && *((int *)v17 + 8) > (uint64_t)v36)
        {
          *(void *)&long long v81 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
          *((void *)&v81 + 1) = 75;
          int v82 = 16;
          sub_1000539B4(v72, &v81);
          sub_100003DF0(v78, (uint64_t)"Error: Not enough data read. expected: ", 39);
          std::ostream::operator<<();
          sub_100003DF0(v78, (uint64_t)" read: ", 7);
          std::ostream::operator<<();
          sub_100003DF0(v78, (uint64_t)" backend: ", 10);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
          long long v37 = std::locale::use_facet(&v115, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
          std::locale::~locale(&v115);
          std::ostream::put();
          std::ostream::flush();
          std::ostream::~ostream();
          sub_100055034((uint64_t)v72);
          std::ios::~ios();
          char v34 = 0;
          int v30 = 2;
          uint64_t v24 = -5;
        }
        else
        {
          uint64_t v38 = sub_100053B1C(v67, (void **)&v83, (uint64_t)v17, &v119, v28);
          v25 -= v38;
          sub_100030064((uint64_t)&v87, v25);
          uint64_t v65 = v18;
          if ((void)v120)
          {
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = (void)v120 << 6;
            long long v42 = (uint64_t *)((char *)v119 + 32);
            do
            {
              uint64_t v44 = *v42;
              v42 += 8;
              uint64_t v43 = v44;
              uint64_t v45 = v44 + v39;
              uint64_t v46 = v44 + v40;
              uint64_t v47 = v28 - v40;
              BOOL v48 = v44 + v40 > v28;
              if (v44 + v40 >= v28) {
                uint64_t v40 = 0;
              }
              else {
                uint64_t v40 = v46;
              }
              if (v48)
              {
                uint64_t v40 = v43;
                uint64_t v49 = v47;
              }
              else
              {
                uint64_t v49 = 0;
              }
              uint64_t v39 = v45 + v49;
              v41 -= 64;
            }
            while (v41);
          }
          else
          {
            uint64_t v39 = 0;
          }
          char v50 = sub_100030B28(v66);
          uint64_t v51 = v39 - v38;
          uint64_t v18 = v38 + v65;
          sub_10002F65C((uint64_t)v72, v20, v13, v38 + v65, v51, v50);
          sub_1000557A8((uint64_t)v100);
          sub_100030E20((uint64_t)v100, (uint64_t)v72);
          char v101 = 1;
          if (v80) {
            sub_100010A48(v80);
          }
          if (v79) {
            sub_100010A48(v79);
          }
          if (v77) {
            sub_100010A48(v77);
          }
          if (v76) {
            sub_100010A48(v76);
          }
          if (v75) {
            sub_100010A48(v75);
          }
          if (v73) {
            sub_100010A48(v73);
          }
          sub_10002F8C8((uint64_t)v100, (uint64_t)v72);
          sub_10003AA88((uint64_t)&v87, v72);
          if (v74) {
            sub_100010A48(v74);
          }
          if (*((void *)&v72[0] + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v72[0] + 1));
          }
          sub_10002FF28((uint64_t)&v87, v25);
          sub_10002F51C((uint64_t)v100, (uint64_t)v72);
          sub_10003AA88((uint64_t)&v102, v72);
          if (v74) {
            sub_100010A48(v74);
          }
          if (*((void *)&v72[0] + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v72[0] + 1));
          }
LABEL_30:
          int v30 = 0;
          char v34 = 1;
        }
        if (*((void *)&v83 + 1)) {
          sub_100010A48(*((std::__shared_weak_count **)&v83 + 1));
        }
        if ((v34 & 1) == 0) {
          goto LABEL_37;
        }
      }
      else
      {
        bzero(v26, v25);
        sub_100030064((uint64_t)&v87, v25);
      }
      int v30 = 0;
      v71 += v25;
      goto LABEL_37;
    }
    *(void *)&long long v83 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
    *((void *)&v83 + 1) = 75;
    v84.i32[0] = 16;
    sub_10005384C(v72, &v83);
    sub_100003DF0(v78, (uint64_t)"Udif: needs to read ", 20);
    sub_1001131F8(v78, (int *)v17);
    sub_100003DF0(v78, (uint64_t)" but buffer is too small ", 25);
    std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
    long long v29 = std::locale::use_facet((const std::locale *)&v81, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale((std::locale *)&v81);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::~ostream();
    sub_10005476C((uint64_t)v72);
    std::ios::~ios();
    int v30 = 2;
    uint64_t v24 = -28;
LABEL_37:
    if (v27) {
      sub_100010A48(v27);
    }
    if (!v30)
    {
      v17 += 64;
      if (v17 != v70) {
        continue;
      }
    }
    goto LABEL_83;
  }
  *(void *)&long long v83 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
  *((void *)&v83 + 1) = 75;
  v84.i32[0] = 16;
  sub_10004006C(v72, &v83);
  sub_100003DF0(v78, (uint64_t)"Udif: needs to read ", 20);
  sub_1001131F8(v78, (int *)v17);
  sub_100003DF0(v78, (uint64_t)" but buffer is full", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
  long long v53 = std::locale::use_facet((const std::locale *)&v81, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
  std::locale::~locale((std::locale *)&v81);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  sub_100040264((uint64_t)v72);
LABEL_82:
  std::ios::~ios();
  uint64_t v24 = -28;
LABEL_83:
  long long v54 = *(void **)(v68 + 16);
  if (v54 != (void *)(v68 + 24))
  {
    do
    {
      (*(void (**)(void))(*(void *)v54[5] + 144))(v54[5]);
      long long v55 = (void *)v54[1];
      if (v55)
      {
        do
        {
          char v56 = v55;
          long long v55 = (void *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          char v56 = (void *)v54[2];
          BOOL v57 = *v56 == (void)v54;
          long long v54 = v56;
        }
        while (!v57);
      }
      long long v54 = v56;
    }
    while (v56 != (void *)(v68 + 24));
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
    if ((void)v117)
    {
      uint64_t v58 = (unsigned int *)__p;
      long long v59 = (unsigned int *)((char *)__p + 40 * v117);
      uint64_t v60 = v119;
      while (1)
      {
        do
        {
          int v61 = v60[16];
          v60 += 16;
        }
        while (!v61);
        int v62 = sub_10003D040(v58);
        uint64_t v24 = v62;
        if (v62 < 0) {
          break;
        }
        if (*(unsigned char *)(v68 + 56) && (int)v60[8] > (uint64_t)v62)
        {
          *(void *)&long long v83 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
          *((void *)&v83 + 1) = 75;
          v84.i32[0] = 16;
          sub_100053BB4(v72, &v83);
          sub_100003DF0(v78, (uint64_t)"Error: Not enough data read. expected: ", 39);
          std::ostream::operator<<();
          sub_100003DF0(v78, (uint64_t)" read: ", 7);
          std::ostream::operator<<();
          sub_100003DF0(v78, (uint64_t)" backend: ", 10);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
          uint64_t v63 = std::locale::use_facet((const std::locale *)&v81, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
          std::locale::~locale((std::locale *)&v81);
          std::ostream::put();
          std::ostream::flush();
          std::ostream::~ostream();
          sub_100055B58((uint64_t)v72);
          std::ios::~ios();
          uint64_t v24 = -5;
          break;
        }
        v58 += 10;
        if (v58 == v59)
        {
          uint64_t v24 = v71;
          break;
        }
      }
    }
    else
    {
      uint64_t v24 = v71;
    }
  }
  if (v96) {
    sub_100010A48(v96);
  }
  if (v88) {
    sub_100010A48(v88);
  }
  sub_100030F34((uint64_t)v100);
  if (v111) {
    sub_100010A48(v111);
  }
  if (v103) {
    sub_100010A48(v103);
  }
  if (*((void *)&v117 + 1) && v118 != __p) {
    operator delete(__p);
  }
  if (*((void *)&v120 + 1) && v121 != v119) {
    operator delete(v119);
  }
  return v24;
}

void sub_100052ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (STACK[0x620] && a12 != STACK[0x610]) {
    operator delete((void *)STACK[0x610]);
  }
  if (STACK[0x8B8])
  {
    if (a13 != STACK[0x8A8]) {
      operator delete((void *)STACK[0x8A8]);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100053044(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10003B48C(v14, a3);
  sub_10002F8C8((uint64_t)v15, (uint64_t)v11);
  double v5 = sub_10002F51C((uint64_t)v15, (uint64_t)v8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, unsigned char *, double))(*(void *)a1 + 152))(a1, a2, v11, v8, v5);
  if (v10) {
    sub_100010A48(v10);
  }
  if (v9) {
    sub_100010A48(v9);
  }
  if (v13) {
    sub_100010A48(v13);
  }
  if (v12) {
    sub_100010A48(v12);
  }
  sub_1000175AC(v14);
  return v6;
}

void sub_10005314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

uint64_t sub_100053188()
{
  return 4294967251;
}

uint64_t sub_100053190()
{
  return 4294967251;
}

uint64_t sub_100053198(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)__n128 result = off_1001B05C8;
  *(void *)(result + 8) = v2;
  long long v3 = (void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v4;
  uint64_t v5 = result + 16;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(result + 24) = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)(a2 + 8) = v3;
    *long long v3 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *(void *)(result + 8) = v5;
  }
  *(void *)(result + 32) = *(void *)(a2 + 32);
  uint64_t v7 = (void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(result + 40) = v8;
  uint64_t v9 = result + 40;
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 32) = v7;
    *uint64_t v7 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    *(void *)(result + 32) = v9;
  }
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(result + 72) = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(result + 80) = v12;
  *(void *)(result + 104) = *(void *)(a2 + 104);
  uint64_t v13 = (void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(result + 112) = v14;
  uint64_t v15 = result + 112;
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(result + 120) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *(void *)(a2 + 104) = v13;
    *uint64_t v13 = 0;
    *(void *)(a2 + 120) = 0;
  }
  else
  {
    *(void *)(result + 104) = v15;
  }
  return result;
}

__n128 sub_100053284@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[1];
  *a2 = result;
  a2[1].n128_u64[0] = a1[2].n128_u64[0];
  a2[1].n128_u32[2] = 1;
  return result;
}

void sub_1000532A0()
{
}

void sub_100053320()
{
}

uint64_t sub_100053334(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100198840;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  uint64_t v3 = a1 + 16;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = a1 + 40;
  *(void *)(a1 + 48) = 0;
  sub_1001103A8(a2 + 64, (uint64_t)v7);
  v6[0] = v3;
  v6[1] = v4;
  sub_100053404(v6, (uint64_t)v7);
  if (v9) {
    sub_100010A48(v9);
  }
  sub_10005358C((uint64_t)v7, v8);
  *(unsigned char *)(a1 + 56) = 1;
  return a1;
}

void sub_1000533E0(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    sub_100010A48(v5);
  }
  sub_10005358C(v2, *v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_100053404(uint64_t *a1, uint64_t a2)
{
  sub_100053520(*a1, (void *)a2);
  uint64_t v4 = a1[1];
  long long v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
  *(_OWORD *)uint64_t v4 = v5;
  if (v6) {
    sub_100010A48(v6);
  }
  return a1;
}

uint64_t sub_100053450(uint64_t a1)
{
  *(void *)a1 = off_100198840;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100010A48(v2);
  }
  sub_10005358C(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_1000534A8(uint64_t a1)
{
  *(void *)a1 = off_100198840;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100010A48(v2);
  }
  sub_10005358C(a1 + 16, *(void **)(a1 + 24));

  operator delete();
}

void sub_100053520(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_10005358C(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void sub_10005358C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10005358C(a1, *a2);
    sub_10005358C(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      sub_100010A48(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_1000535EC(uint64_t a1, void *a2)
{
  long long v2 = *(_OWORD *)(a1 + 72);
  long long v12 = *(_OWORD *)(a1 + 56);
  long long v13 = v2;
  long long v14 = *(_OWORD *)(a1 + 88);
  char v15 = *(unsigned char *)(a1 + 104);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v16 = *(void *)(a1 + 112);
  int v17 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = *(_OWORD *)(a1 + 128);
  uint64_t v4 = a2[7];
  uint64_t v5 = a2[8];
  uint64_t v6 = a2[9];
  uint64_t v7 = (std::__shared_weak_count *)a2[15];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  for (uint64_t i = 0; ; ++i)
  {
    BOOL v9 = (void)v12 == v4 && *((void *)&v12 + 1) == v5;
    if (v9 && (void)v13 == v6) {
      break;
    }
    sub_10002EFC0((uint64_t)&v12);
  }
  if (v7) {
    sub_100010A48(v7);
  }
  if (v17) {
    sub_100010A48(v17);
  }
  return i;
}

void sub_1000536C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (v17) {
    sub_100010A48(v17);
  }
  if (a17) {
    sub_100010A48(a17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000536E4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100053ED8((uint64_t)a1, a2);
  *a1 = off_1001988A0;
  a1[45] = &off_1001989A0;
  a1[46] = &off_1001989C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001988A0;
  a1[45] = off_100198928;
  a1[46] = off_100198950;
  return a1;
}

void sub_1000537E4(_Unwind_Exception *a1)
{
  sub_100053F68(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100053808(uint64_t a1)
{
  return a1;
}

void *sub_10005384C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000546DC((uint64_t)a1, a2);
  *a1 = off_100198AC0;
  a1[45] = &off_100198BC0;
  a1[46] = &off_100198BE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100198AC0;
  a1[45] = off_100198B48;
  a1[46] = off_100198B70;
  return a1;
}

void sub_10005394C(_Unwind_Exception *a1)
{
  sub_10005476C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100053970(uint64_t a1)
{
  return a1;
}

void *sub_1000539B4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100054FA4((uint64_t)a1, a2);
  *a1 = off_100198CE0;
  a1[45] = &off_100198DE0;
  a1[46] = &off_100198E08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100198CE0;
  a1[45] = off_100198D68;
  a1[46] = off_100198D90;
  return a1;
}

void sub_100053AB4(_Unwind_Exception *a1)
{
  sub_100055034(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100053AD8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053B1C(uint64_t a1, void **a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v5 = a4[1];
  if (!v5) {
    return 0;
  }
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = v5 << 6;
  BOOL v9 = (uint64_t *)(*a4 + 32);
  do
  {
    uint64_t v11 = *v9;
    v9 += 8;
    uint64_t v10 = v11;
    uint64_t v12 = v11 + v6;
    uint64_t v13 = v11 + v7;
    uint64_t v14 = a5 - v7;
    BOOL v15 = v11 + v7 > a5;
    if (v11 + v7 >= a5) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v13;
    }
    if (v15)
    {
      uint64_t v7 = v10;
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v6 = v12 + v16;
    v8 -= 64;
  }
  while (v8);
  if (v6 <= a5 + a5 * *(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v17 = *(void *)(a3 + 48);
  memmove(*a2, (char *)*a2 + v17, *(void *)(a3 + 32) - v17);
  return v17;
}

void *sub_100053BB4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100055AC8((uint64_t)a1, a2);
  *a1 = off_100198F00;
  a1[45] = &off_100199000;
  a1[46] = &off_100199028;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100198F00;
  a1[45] = off_100198F88;
  a1[46] = off_100198FB0;
  return a1;
}

void sub_100053CB4(_Unwind_Exception *a1)
{
  sub_100055B58(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100053CD8(uint64_t a1)
{
  return a1;
}

void sub_100053D1C(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_100053DCC((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  if (v10 && a1 + 3 != (uint64_t *)*a1) {
    operator delete((void *)*a1);
  }
  uint64_t v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_100053DA8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100053DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      sub_100042C50(a5, v12);
      v12 += 40;
      a5 += 40;
    }
    while (v12 != v11);
  }
  if (a6)
  {
    uint64_t v13 = a6;
    unint64_t v14 = a5;
    do
    {
      unint64_t v15 = sub_100042C50(v14, a7);
      a7 += 40;
      unint64_t v14 = v15 + 40;
      --v13;
    }
    while (v13);
  }
  if (v11 != a4)
  {
    unint64_t v16 = a5 + 40 * a6;
    do
    {
      unint64_t v17 = sub_100042C50(v16, v11);
      v11 += 40;
      unint64_t v16 = v17 + 40;
    }
    while (v11 != a4);
  }
}

void sub_100053E80(void *a1)
{
}

void sub_100053E88()
{
}

void sub_100053EC4()
{
}

uint64_t sub_100053ED8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100198A38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100053F54(_Unwind_Exception *a1)
{
}

uint64_t sub_100053F68(uint64_t a1)
{
  *(void *)a1 = off_100198A38;
  sub_100054370(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000540A4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100053F68(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005410C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100054144(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000541AC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100053F68(v1);

  return std::ios::~ios();
}

void sub_1000541F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100053F68(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005425C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100053F68(v1);

  return std::ios::~ios();
}

void sub_1000542BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100053F68(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100054338(uint64_t a1)
{
  sub_100053F68(a1);

  operator delete();
}

uint64_t sub_100054370(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000544F4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000544CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000544F4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 184;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    BOOL v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v14 = a2;
      }
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 184;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_1000546DC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100198C58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100054758(_Unwind_Exception *a1)
{
}

uint64_t sub_10005476C(uint64_t a1)
{
  *(void *)a1 = off_100198C58;
  sub_100054B74(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000548A8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005476C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100054910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100054948(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000549B0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005476C(v1);

  return std::ios::~ios();
}

void sub_1000549FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005476C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100054A60(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005476C(v1);

  return std::ios::~ios();
}

void sub_100054AC0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005476C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100054B3C(uint64_t a1)
{
  sub_10005476C(a1);

  operator delete();
}

uint64_t sub_100054B74(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100054CF8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100054CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100054CF8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 193;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    BOOL v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v14 = a2;
      }
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 193;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t **sub_100054EE0(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  char v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        char v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      char v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x38uLL);
    unsigned char v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    sub_10002B3B8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100054FA4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100198E78;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100055020(_Unwind_Exception *a1)
{
}

uint64_t sub_100055034(uint64_t a1)
{
  *(void *)a1 = off_100198E78;
  sub_10005543C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100055170(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100055034(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000551D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100055210(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100055278(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100055034(v1);

  return std::ios::~ios();
}

void sub_1000552C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100055034(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100055328(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100055034(v1);

  return std::ios::~ios();
}

void sub_100055388(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100055034(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100055404(uint64_t a1)
{
  sub_100055034(a1);

  operator delete();
}

uint64_t sub_10005543C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000555C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100055598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000555C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v8 = a2;
    }
    else {
      unsigned int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 214;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    BOOL v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v14 = a2;
      }
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 214;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void sub_1000557A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528))
  {
    unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 488);
    if (v2) {
      sub_100010A48(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 376);
    if (v3) {
      sub_100010A48(v3);
    }
    int v4 = *(std::__shared_weak_count **)(a1 + 328);
    if (v4) {
      sub_100010A48(v4);
    }
    int v5 = *(std::__shared_weak_count **)(a1 + 216);
    if (v5) {
      sub_100010A48(v5);
    }
    char v6 = *(std::__shared_weak_count **)(a1 + 160);
    if (v6) {
      sub_100010A48(v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 72);
    if (v7) {
      sub_100010A48(v7);
    }
    *(unsigned char *)(a1 + 528) = 0;
  }
}

void sub_10005581C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000558CC((uint64_t)a1, a3);
  if (v11 >= 0x333333333333334) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(40 * v11);
  sub_100055948(a1, (unint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_1000558CC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x333333333333333;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x333333333333333 - v4 < a2 - v4 + v3) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x333333333333333) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_100055948(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000559F8((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  if (v10 && a1 + 3 != (uint64_t *)*a1) {
    operator delete((void *)*a1);
  }
  uint64_t v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_1000559D4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000559F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      unint64_t v13 = sub_100042C50(a5, v12);
      v12 += 40;
      a5 = v13 + 40;
    }
    while (v12 != v11);
  }
  unint64_t result = sub_100042C50(a5, a7);
  if (v11 != a4)
  {
    result += 40 * a6;
    do
    {
      unint64_t v15 = sub_100042C50(result, v11);
      v11 += 40;
      unint64_t result = v15 + 40;
    }
    while (v11 != a4);
  }
  return result;
}

void sub_100055A8C(void *a1)
{
}

void sub_100055A94()
{
}

void sub_100055AB4()
{
}

uint64_t sub_100055AC8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100199098;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100055B44(_Unwind_Exception *a1)
{
}

uint64_t sub_100055B58(uint64_t a1)
{
  *(void *)a1 = off_100199098;
  sub_100055F60(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100055C94(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100055B58(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100055CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100055D34(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100055D9C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100055B58(v1);

  return std::ios::~ios();
}

void sub_100055DE8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100055B58(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100055E4C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100055B58(v1);

  return std::ios::~ios();
}

void sub_100055EAC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100055B58(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100055F28(uint64_t a1)
{
  sub_100055B58(a1);

  operator delete();
}

uint64_t sub_100055F60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000560E4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000560BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000560E4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 254;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v14 = a2;
      }
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 254;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1000562CC(uint64_t a1)
{
  *(void *)a1 = off_1001B05C8;
  sub_10005358C(a1 + 104, *(void **)(a1 + 112));
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    sub_100010A48(v3);
  }
  sub_10002A594(a1 + 32, *(void **)(a1 + 40));
  sub_10002A594(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_100056358@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000E7F78(v4, *a1);
  int v10 = 2003069043;
  uint64_t v11 = *(void *)&v4[4];
  int v12 = v5;
  long long v13 = v6;
  long long v14 = v7;
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v8;
  *(void *)&v15[14] = *(void *)&v8[14];
  __int16 v16 = 0;
  uint64_t v17 = v9;
  int v18 = 2;
  int v19 = 8;
  sub_10005132C(a2, (uint64_t)&v10);
  *(_DWORD *)(a2 + 512) = v19;
  *(unsigned char *)(a2 + 520) = 1;
  return sub_10005149C((uint64_t)&v10);
}

void sub_100056434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
  {
    sub_10005149C((uint64_t)&a19);
    __cxa_begin_catch(exception_object);
    sub_100051134();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100056494@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000565C0((unint64_t *)&v5, *a1, a2);
  v6[0] = v5;
  int v7 = 3;
  sub_10005132C((uint64_t)v8, (uint64_t)v6);
  int v9 = 1;
  sub_10005132C(a3, (uint64_t)v8);
  *(_DWORD *)(a3 + 512) = v9;
  *(unsigned char *)(a3 + 520) = 1;
  sub_10005149C((uint64_t)v8);
  return sub_10005149C((uint64_t)v6);
}

void sub_10005654C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a2)
  {
    sub_10005149C((uint64_t)&STACK[0x210]);
    sub_10005149C((uint64_t)va);
    __cxa_begin_catch(a1);
    sub_100051134();
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_1000565C0(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  unint64_t v6 = 512;
  if (a3) {
    unint64_t v6 = a3;
  }
  if (v5 % v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_10004FFA4((uint64_t)exception, (uint64_t)"raw_header", 0x16u);
  }
  *a1 = v6;
  a1[1] = v5 / v6;
  return a1;
}

void sub_100056668(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005667C(uint64_t a1, void *a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_100199118;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = a3;
  if ((*(uint64_t (**)(void))(*(void *)*a2 + 40))() % a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001B6CA0;
    int v7 = std::generic_category();
    exception[1] = 152;
    exception[2] = v7;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Size is not a multiple of block size";
  }
  return a1;
}

void sub_100056780(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_100010A48(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000567A0(void *a1)
{
  *a1 = off_100199118;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void sub_1000567EC(void *a1)
{
  *a1 = off_100199118;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100010A48(v1);
  }

  operator delete();
}

uint64_t sub_100056858(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_100056860(uint64_t a1)
{
  return (unint64_t)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16))
       / *(void *)(a1 + 32);
}

uint64_t sub_1000568B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

void sub_1000568D8()
{
}

void sub_100056944()
{
}

uint64_t sub_100056968(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

uint64_t sub_100056990(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

void sub_1000569B8()
{
}

void sub_100056A40()
{
}

uint64_t sub_100056A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string __p = v47;
  long long v46 = xmmword_100164620;
  unint64_t v7 = sub_1000535EC(a3, (void *)a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334) {
      sub_100014AAC("get_next_capacity, allocator's max size reached");
    }
    int v9 = operator new(40 * v7);
    sub_100053D1C((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v46, 0, 0);
  }
  v44[0] = &__p;
  v44[1] = a2;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)&long long v32 = *(void *)a3;
  *((void *)&v32 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  v33[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v34 = *(void *)(a3 + 48);
  long long v35 = *(_OWORD *)(a3 + 56);
  long long v36 = *(_OWORD *)(a3 + 72);
  long long v37 = *(_OWORD *)(a3 + 88);
  char v38 = *(unsigned char *)(a3 + 104);
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v39 = *(void *)(a3 + 112);
  uint64_t v40 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v41 = *(_OWORD *)(a3 + 128);
  uint64_t v42 = *(void *)(a3 + 144);
  char v43 = *(unsigned char *)(a3 + 152);
  uint64_t v12 = *(void *)(a4 + 8);
  *(void *)&long long v20 = *(void *)a4;
  *((void *)&v20 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  v21[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v22 = *(void *)(a4 + 48);
  long long v23 = *(_OWORD *)(a4 + 56);
  long long v24 = *(_OWORD *)(a4 + 72);
  long long v25 = *(_OWORD *)(a4 + 88);
  char v26 = *(unsigned char *)(a4 + 104);
  long long v13 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v27 = *(void *)(a4 + 112);
  unint64_t v28 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v29 = *(_OWORD *)(a4 + 128);
  uint64_t v30 = *(void *)(a4 + 144);
  char v31 = *(unsigned char *)(a4 + 152);
  sub_100057214((uint64_t)v44, &v32, &v20, 0xFFFFFFFFFFFFFFFFLL);
  if (v28) {
    sub_100010A48(v28);
  }
  if (*((void *)&v20 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v20 + 1));
  }
  if (v40) {
    sub_100010A48(v40);
  }
  if (*((void *)&v32 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v32 + 1));
  }
  (*(void (**)(void))(**(void **)(a2 + 16) + 144))(*(void *)(a2 + 16));
  if ((void)v46)
  {
    int v14 = 0;
    unint64_t v15 = (unsigned int *)__p;
    uint64_t v16 = 40 * v46;
    do
    {
      int v17 = sub_10003D040(v15);
      int v18 = v17;
      if (v17 < 0) {
        break;
      }
      v14 += v17;
      v15 += 10;
      int v18 = v14;
      v16 -= 40;
    }
    while (v16);
  }
  else
  {
    int v18 = 0;
  }
  if (*((void *)&v46 + 1) && v47 != __p) {
    operator delete(__p);
  }
  return v18;
}

void sub_100056D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  sub_100011F6C((uint64_t)&a9);
  sub_100011F6C((uint64_t)&a29);
  if (a53)
  {
    if (v53 != __p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100056D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string __p = v47;
  long long v46 = xmmword_100164620;
  unint64_t v7 = sub_1000535EC(a3, (void *)a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334) {
      sub_100014AAC("get_next_capacity, allocator's max size reached");
    }
    int v9 = operator new(40 * v7);
    sub_100053D1C((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v46, 0, 0);
  }
  v44[0] = &__p;
  v44[1] = a2;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)&long long v32 = *(void *)a3;
  *((void *)&v32 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  v33[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v34 = *(void *)(a3 + 48);
  long long v35 = *(_OWORD *)(a3 + 56);
  long long v36 = *(_OWORD *)(a3 + 72);
  long long v37 = *(_OWORD *)(a3 + 88);
  char v38 = *(unsigned char *)(a3 + 104);
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v39 = *(void *)(a3 + 112);
  uint64_t v40 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v41 = *(_OWORD *)(a3 + 128);
  uint64_t v42 = *(void *)(a3 + 144);
  char v43 = *(unsigned char *)(a3 + 152);
  uint64_t v12 = *(void *)(a4 + 8);
  *(void *)&long long v20 = *(void *)a4;
  *((void *)&v20 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  v21[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v22 = *(void *)(a4 + 48);
  long long v23 = *(_OWORD *)(a4 + 56);
  long long v24 = *(_OWORD *)(a4 + 72);
  long long v25 = *(_OWORD *)(a4 + 88);
  char v26 = *(unsigned char *)(a4 + 104);
  long long v13 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v27 = *(void *)(a4 + 112);
  unint64_t v28 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v29 = *(_OWORD *)(a4 + 128);
  uint64_t v30 = *(void *)(a4 + 144);
  char v31 = *(unsigned char *)(a4 + 152);
  sub_1000576BC((uint64_t)v44, &v32, &v20, 0xFFFFFFFFFFFFFFFFLL);
  if (v28) {
    sub_100010A48(v28);
  }
  if (*((void *)&v20 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v20 + 1));
  }
  if (v40) {
    sub_100010A48(v40);
  }
  if (*((void *)&v32 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v32 + 1));
  }
  (*(void (**)(void))(**(void **)(a2 + 16) + 144))(*(void *)(a2 + 16));
  if ((void)v46)
  {
    int v14 = 0;
    unint64_t v15 = (unsigned int *)__p;
    uint64_t v16 = 40 * v46;
    do
    {
      int v17 = sub_10003D040(v15);
      int v18 = v17;
      if (v17 < 0) {
        break;
      }
      v14 += v17;
      v15 += 10;
      int v18 = v14;
      v16 -= 40;
    }
    while (v16);
  }
  else
  {
    int v18 = 0;
  }
  if (*((void *)&v46 + 1) && v47 != __p) {
    operator delete(__p);
  }
  return v18;
}

void sub_10005705C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  sub_100011F6C((uint64_t)&a9);
  sub_100011F6C((uint64_t)&a29);
  if (a53)
  {
    if (v53 != __p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005709C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), a3);
}

uint64_t sub_1000570C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a4;
  for (uint64_t i = (void *)(a3 + 8); ; i += 2)
  {
    uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a2 + 16) + 24))(*(void *)(a2 + 16), *(void *)(a1 + 32) * *(i - 1), *i * *(void *)(a1 + 32));
    if (result) {
      break;
    }
    if (!--v4) {
      return 0;
    }
  }
  return result;
}

void *sub_10005715C(void *a1)
{
  *a1 = off_100199218;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void sub_1000571A8(void *a1)
{
  *a1 = off_100199218;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100010A48(v1);
  }

  operator delete();
}

uint64_t sub_100057214(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  uint64_t v15 = sub_100057360(a1, &v28, (uint64_t)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_100057344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_100057360(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = *(void *)(a3 + 144);
  v29[0] = 0;
  v29[528] = 0;
  while (!sub_10002F3D8((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v26 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:54:22)]";
      *((void *)&v26 + 1) = 104;
      LODWORD(v27) = 2;
      sub_10003A8D8(&v23, &v26);
      sub_100003DF0(v25, (uint64_t)"sg: ", 4);
      sub_1001416B8(v25);
      std::ostream::~ostream();
      sub_10003ABC8((uint64_t)&v23);
      std::ios::~ios();
    }
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = v8;
    char v24 = 2;
    sub_100081638(a2, (uint64_t)&v23, (uint64_t)&v26);
    long long v10 = *(uint64_t **)a1;
    (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 16) + 128))(&v23);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10005581C(v10, *v10 + 40 * v11, 1, (uint64_t)&v23, &v30);
    }
    else
    {
      sub_100042C50(*v10 + 40 * v11, (uint64_t)&v23);
      ++v10[1];
    }
    uint64_t v12 = (int)v27;
    if ((v27 & 0x80000000) != 0) {
      int64_t v13 = (int)v27;
    }
    else {
      int64_t v13 = v27;
    }
    BOOL v14 = v13 >= 0 || v13 == 0;
    char v15 = v14;
    if (v14)
    {
      uint64_t v16 = v28;
      if (sub_100030B70((uint64_t)a2, a3, v28, v13))
      {
        sub_100030CB0((uint64_t)v22, (uint64_t)a2);
        sub_100030B34((uint64_t)v22, a3, v16, v13, a4, (uint64_t)&v23);
        sub_10003AA40((uint64_t)v29, (uint64_t)&v23);
        sub_100030B8C(&v23);
        sub_100011F6C((uint64_t)v22);
        sub_10002F8C8((uint64_t)v29, (uint64_t)&v23);
        sub_10003AA88((uint64_t)a2, &v23);
        sub_100011F6C((uint64_t)&v23);
        sub_10002F51C((uint64_t)v29, (uint64_t)&v23);
        sub_10003AA88(a3, &v23);
        sub_100011F6C((uint64_t)&v23);
      }
      if (a5) {
        sub_10002FF28((uint64_t)a2, v13);
      }
      else {
        sub_100030064((uint64_t)a2, v13);
      }
      v7 += v13;
    }
    else
    {
      if ((int)v27 >= 0) {
        uint64_t v12 = -(uint64_t)(int)v27;
      }
      uint64_t v18 = v12;
    }
    if (*((void *)&v26 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v26 + 1));
    }
    if ((v15 & 1) == 0) {
      goto LABEL_37;
    }
  }
  uint64_t v18 = v7;
LABEL_37:
  sub_100030F34((uint64_t)v29);
  return v18;
}

void sub_10005764C(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x2E0]);
  }
  sub_100030F34((uint64_t)&STACK[0x308]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000576BC(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  uint64_t v15 = sub_100057808(a1, &v28, (uint64_t)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_1000577EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_100057808(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = *(void *)(a3 + 144);
  v29[0] = 0;
  v29[528] = 0;
  while (!sub_10002F3D8((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v26 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:67:22)]";
      *((void *)&v26 + 1) = 104;
      LODWORD(v27) = 2;
      sub_10003A8D8(&v23, &v26);
      sub_100003DF0(v25, (uint64_t)"sg: ", 4);
      sub_1001416B8(v25);
      std::ostream::~ostream();
      sub_10003ABC8((uint64_t)&v23);
      std::ios::~ios();
    }
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = v8;
    char v24 = 2;
    sub_100081638(a2, (uint64_t)&v23, (uint64_t)&v26);
    long long v10 = *(uint64_t **)a1;
    (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 16) + 136))(&v23);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10005581C(v10, *v10 + 40 * v11, 1, (uint64_t)&v23, &v30);
    }
    else
    {
      sub_100042C50(*v10 + 40 * v11, (uint64_t)&v23);
      ++v10[1];
    }
    uint64_t v12 = (int)v27;
    if ((v27 & 0x80000000) != 0) {
      int64_t v13 = (int)v27;
    }
    else {
      int64_t v13 = v27;
    }
    BOOL v14 = v13 >= 0 || v13 == 0;
    char v15 = v14;
    if (v14)
    {
      uint64_t v16 = v28;
      if (sub_100030B70((uint64_t)a2, a3, v28, v13))
      {
        sub_100030CB0((uint64_t)v22, (uint64_t)a2);
        sub_100030B34((uint64_t)v22, a3, v16, v13, a4, (uint64_t)&v23);
        sub_10003AA40((uint64_t)v29, (uint64_t)&v23);
        sub_100030B8C(&v23);
        sub_100011F6C((uint64_t)v22);
        sub_10002F8C8((uint64_t)v29, (uint64_t)&v23);
        sub_10003AA88((uint64_t)a2, &v23);
        sub_100011F6C((uint64_t)&v23);
        sub_10002F51C((uint64_t)v29, (uint64_t)&v23);
        sub_10003AA88(a3, &v23);
        sub_100011F6C((uint64_t)&v23);
      }
      if (a5) {
        sub_10002FF28((uint64_t)a2, v13);
      }
      else {
        sub_100030064((uint64_t)a2, v13);
      }
      v7 += v13;
    }
    else
    {
      if ((int)v27 >= 0) {
        uint64_t v12 = -(uint64_t)(int)v27;
      }
      uint64_t v18 = v12;
    }
    if (*((void *)&v26 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v26 + 1));
    }
    if ((v15 & 1) == 0) {
      goto LABEL_37;
    }
  }
  uint64_t v18 = v7;
LABEL_37:
  sub_100030F34((uint64_t)v29);
  return v18;
}

void sub_100057AF4(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x2E0]);
  }
  sub_100030F34((uint64_t)&STACK[0x308]);
  _Unwind_Resume(a1);
}

void sub_100057B68(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

const std::error_category *sub_100057BA4@<X0>(const std::error_category *result@<X0>, uint64_t a2@<X8>)
{
  if (LODWORD(result[70].__vftable) == 12 || result[3].__vftable)
  {
    *(unsigned char *)a2 = 0;
    char v3 = 1;
  }
  else
  {
    *(void *)&long long v4 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::verify_backend() const";
    *((void *)&v4 + 1) = 81;
    int v5 = 16;
    sub_100057D00(v6, &v4);
    sub_100003DF0(v7, (uint64_t)"Diskimageuio: backend doesn't exist", 35);
    std::ostream::~ostream();
    sub_100057EF8((uint64_t)v6);
    std::ios::~ios();
    uint64_t result = std::generic_category();
    char v3 = 0;
    *(void *)a2 = 6;
    *(void *)(a2 + 8) = result;
  }
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

void sub_100057C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100057E24((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100057C7C@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    int v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_100057D00(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_100057E68((uint64_t)a1, a2);
  *a1 = off_1001992B8;
  a1[45] = &off_1001993B8;
  a1[46] = &off_1001993E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001992B8;
  a1[45] = off_100199340;
  a1[46] = off_100199368;
  return a1;
}

void sub_100057E00(_Unwind_Exception *a1)
{
  sub_100057EF8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100057E24(uint64_t a1)
{
  return a1;
}

uint64_t sub_100057E68(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100199450;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100057EE4(_Unwind_Exception *a1)
{
}

uint64_t sub_100057EF8(uint64_t a1)
{
  *(void *)a1 = off_100199450;
  sub_100058300(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100058034(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100057EF8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005809C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000580D4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005813C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100057EF8(v1);

  return std::ios::~ios();
}

void sub_100058188(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100057EF8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000581EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100057EF8(v1);

  return std::ios::~ios();
}

void sub_10005824C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100057EF8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000582C8(uint64_t a1)
{
  sub_100057EF8(a1);

  operator delete();
}

uint64_t sub_100058300(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100058484((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005845C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100058484(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 617;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 617;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100058670(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000586A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_1000586D8(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t sub_10005871C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000587DC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100058794(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100010CDC();
  }
  return operator new(24 * a2);
}

uint64_t sub_1000587DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 24);
      a3 -= 24;
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(a3 + 16);
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100058878((uint64_t)v12);
  return v10;
}

uint64_t sub_100058878(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000588B0(a1);
  }
  return a1;
}

void sub_1000588B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_100010A48(v3);
    }
    v1 += 24;
  }
}

void **sub_1000588F4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100058928(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    int v4 = *(std::__shared_weak_count **)(v1 - 16);
    if (v4)
    {
      sub_100010A48(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

void sub_100058980(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

void sub_1000589B8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)sub_100131BC4(a1);
  sub_100003BA4(v14, v3);
  sub_10002A7B8((uint64_t)v10);
  if ((v15 & 0x80u) == 0) {
    int v4 = v14;
  }
  else {
    int v4 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  uint64_t v6 = sub_100003DF0(&v11, (uint64_t)v4, v5);
  uint64_t v7 = sub_100003DF0(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_100003DF0(v8, (uint64_t)"]", 1);
  sub_100003890((uint64_t)v12, a2);
  *(void *)((char *)v10
  uint64_t v11 = v9;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_100058BC0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100058C14((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100058C14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    int v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      sub_100010A48(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_100058C60(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_10019BC20;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)a2;
  *(void *)(a1 + 24) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = (unsigned char *)(a1 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100047744(v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 48) = *(void *)(a2 + 32);
    *(_OWORD *)int v4 = v5;
  }
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  return a1;
}

void sub_100058CF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_100010A48(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100058D14()
{
}

void *sub_100058D28()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_100199578;
  return result;
}

void sub_100058D60(uint64_t a1, void *a2)
{
  *a2 = off_100199578;
}

void *sub_100058D88@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 128))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_100058DF0(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001995E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100058E30()
{
  return &off_1001995E8;
}

void *sub_100058E3C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100058EC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100058F5C(a1 + 56, a1, *(void *)(a1 + 8));
  sub_100058FB0(a2, &v5, *(_DWORD *)(a1 + 48));
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_100058F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100146F18();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100058F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t sub_100058FB0(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = qword_1001C45E0;
  *(void *)(a1 + 8) = qword_1001C45E0;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  sub_100105B4C((_DWORD *)a1, (uint64_t)v8);
  _OWORD *v6 = v8[0];
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v8 + 12);
  return a1;
}

void sub_100059024(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_100146F18();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100059040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100058F5C(a1 + 56, a1, *(void *)(a1 + 16));
  sub_100058FB0(a2, &v5, *(_DWORD *)(a1 + 48));
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_1000590C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100146F18();
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000590DC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000599AC((uint64_t)a1, a2);
  *a1 = off_100199610;
  a1[45] = &off_100199710;
  a1[46] = &off_100199738;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100199610;
  a1[45] = off_100199698;
  a1[46] = off_1001996C0;
  return a1;
}

void sub_1000591DC(_Unwind_Exception *a1)
{
  sub_100059A3C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100059200(uint64_t a1)
{
  return a1;
}

_OWORD *sub_100059244@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(void *)(a1 + 24) || *(_DWORD *)(a1 + 568) != a2)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 32);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    if (v8) {
      sub_100010A48(v8);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 584);
    *(_OWORD *)(a1 + 576) = 0u;
    if (v9) {
      sub_100010A48(v9);
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 600);
    *(void *)(a1 + 592) = 0;
    *(void *)(a1 + 600) = 0;
    if (v10) {
      sub_100010A48(v10);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 616);
    *(void *)(a1 + 608) = 0;
    *(void *)(a1 + 616) = 0;
    if (v11) {
      sub_100010A48(v11);
    }
    if (*(char *)(a1 + 23) < 0)
    {
      sub_100047744(__p, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      uint64_t v30 = *(void *)(a1 + 16);
    }
    v27[0] = 2 * ((a2 - 1) < 2);
    sub_10005AE60((uint64_t)__p, v27, &v24);
    long long v12 = v24;
    long long v24 = 0uLL;
    char v13 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v12;
    if (v13)
    {
      sub_100010A48(v13);
      if (*((void *)&v24 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 568) = a2;
    operator new();
  }
  sub_10004F6F8((const std::error_category *)a1, (BOOL *)v27);
  if (!v28)
  {
    *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v24 + 1) = 83;
    int v25 = 16;
    sub_10005A248(__p, &v24);
    sub_100003DF0(v31, (uint64_t)"Diskimageuio: Couldn't get locked status ", 41);
    uint64_t v16 = sub_10004EF44((uint64_t)v27);
    sub_10005A1B0((uint64_t)__p, v16);
    std::ostream::~ostream();
    sub_10005B088((uint64_t)__p);
    std::ios::~ios();
    uint64_t result = (_OWORD *)sub_10004EF44((uint64_t)v27);
    *(_OWORD *)a4 = *result;
    goto LABEL_24;
  }
  if (LOBYTE(v27[0]))
  {
    *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v24 + 1) = 83;
    int v25 = 16;
    sub_10005ACF8(__p, &v24);
    sub_100003DF0(v31, (uint64_t)"Diskimageuio: decryption key missing", 36);
    std::ostream::~ostream();
    sub_10005F958((uint64_t)__p);
    std::ios::~ios();
    uint64_t result = (_OWORD *)make_error_code(162);
    *(void *)a4 = result;
    *(void *)(a4 + 8) = v15;
LABEL_24:
    *(unsigned char *)(a4 + 16) = 0;
    return result;
  }
  *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
  *((void *)&v24 + 1) = 83;
  int v25 = 2;
  sub_10005A3B0(__p, &v24);
  sub_100003DF0(v31, (uint64_t)"Diskimageuio: backend isn't locked", 34);
  std::ostream::~ostream();
  sub_10005B88C((uint64_t)__p);
  std::ios::~ios();
  sub_10005A518(a1, 0, (uint64_t)__p);
  if (v32)
  {
    uint64_t v17 = sub_10005AB20((uint64_t)__p);
    sub_100050488(a1 + 48, v17);
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(v17 + 512);
    *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v22 + 1) = 83;
    int v23 = 2;
    sub_10005AB90(&v24, &v22);
    sub_100003DF0(v26, (uint64_t)"Diskimageuio: resolved disk image format ", 41);
    diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 560));
    std::ostream::~ostream();
    sub_10005F154((uint64_t)&v24);
    uint64_t result = (_OWORD *)std::ios::~ios();
    *(unsigned char *)a4 = 0;
    char v18 = 1;
  }
  else
  {
    int v19 = *(_DWORD *)(a1 + 564);
    if (v19)
    {
      if (*(_DWORD *)(a1 + 568) != v19)
      {
        __int16 v20 = (unsigned int *)sub_10005A7F4((uint64_t)__p);
        uint64_t v21 = std::generic_category();
        *(void *)&long long v24 = 35;
        *((void *)&v24 + 1) = v21;
        if ((*(unsigned int (**)(void, void, long long *))(**((void **)v20 + 1) + 32))(*((void *)v20 + 1), *v20, &v24)|| (*(unsigned int (**)(void, unsigned int *, void))(**((void **)&v24 + 1) + 40))(*((void *)&v24 + 1), v20, v24))
        {
          *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v22 + 1) = 83;
          int v23 = 2;
          sub_10003A8D8(&v24, &v22);
          sub_100003DF0(v26, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 564));
          sub_100003DF0(v26, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 568));
          std::ostream::~ostream();
          sub_10003ABC8((uint64_t)&v24);
          std::ios::~ios();
          if (a3)
          {
            *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
            *((void *)&v22 + 1) = 83;
            int v23 = 2;
            sub_10005A850(&v24, &v22);
            sub_100003DF0(v26, (uint64_t)"Diskimageuio: reopen backend to required mode ", 46);
            diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 564));
            sub_10005A974((uint64_t)&v24);
            uint64_t result = (_OWORD *)sub_100059244(a1, *(unsigned int *)(a1 + 564), 0);
            goto LABEL_37;
          }
          *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v22 + 1) = 83;
          int v23 = 16;
          sub_10005A9B8(&v24, &v22);
          sub_100003DF0(v26, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 564));
          sub_100003DF0(v26, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 568));
          sub_10005AADC((uint64_t)&v24);
        }
      }
    }
    uint64_t result = (_OWORD *)sub_10005A7F4((uint64_t)__p);
    char v18 = 0;
    *(_OWORD *)a4 = *result;
  }
  *(unsigned char *)(a4 + 16) = v18;
LABEL_37:
  if (v32) {
    return (_OWORD *)sub_10005149C((uint64_t)__p);
  }
  return result;
}

void sub_100059828(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x458])) {
    sub_10005149C((uint64_t)&STACK[0x250]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000599AC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001997A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100059A28(_Unwind_Exception *a1)
{
}

uint64_t sub_100059A3C(uint64_t a1)
{
  *(void *)a1 = off_1001997A8;
  sub_100059E44(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100059B78(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100059A3C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100059BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100059C18(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100059C80(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100059A3C(v1);

  return std::ios::~ios();
}

void sub_100059CCC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100059A3C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100059D30(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100059A3C(v1);

  return std::ios::~ios();
}

void sub_100059D90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100059A3C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100059E0C(uint64_t a1)
{
  sub_100059A3C(a1);

  operator delete();
}

uint64_t sub_100059E44(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100059FC8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100059FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100059FC8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 573;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 573;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10005A1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 360);
  int v4 = (const char *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  size_t v5 = strlen(v4);
  char v6 = sub_100003DF0(v3, (uint64_t)v4, v5);
  char v8 = 58;
  sub_100003DF0(v6, (uint64_t)&v8, 1);
  std::ostream::operator<<();
  return a1;
}

void *sub_10005A248(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005AFF8((uint64_t)a1, a2);
  *a1 = off_100199880;
  a1[45] = &off_100199980;
  a1[46] = &off_1001999A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100199880;
  a1[45] = off_100199908;
  a1[46] = off_100199930;
  return a1;
}

void sub_10005A348(_Unwind_Exception *a1)
{
  sub_10005B088(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005A36C(uint64_t a1)
{
  return a1;
}

void *sub_10005A3B0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005B7FC((uint64_t)a1, a2);
  *a1 = off_100199AA0;
  a1[45] = &off_100199BA0;
  a1[46] = &off_100199BC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100199AA0;
  a1[45] = off_100199B28;
  a1[46] = off_100199B50;
  return a1;
}

void sub_10005A4B0(_Unwind_Exception *a1)
{
  sub_10005B88C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005A4D4(uint64_t a1)
{
  return a1;
}

double sub_10005A518@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10005C000(0, (const void **)(a1 + 24), *(_DWORD *)(a1 + 564) == 0, a1, a2, (uint64_t)v21);
  if (v23)
  {
    uint64_t v5 = sub_10005AB20((uint64_t)v21);
    sub_10005132C((uint64_t)v18, v5);
    unsigned int v20 = *(_DWORD *)(v5 + 512);
    BOOL v6 = v20 > 0xB || ((1 << v20) & 0x982) == 0;
    if (v6 || *(_DWORD *)(a1 + 568) || !*(_DWORD *)(a1 + 564))
    {
      sub_10005132C((uint64_t)&v14, (uint64_t)v18);
      unsigned int v17 = v20;
      sub_10005132C(a3, (uint64_t)&v14);
      *(_DWORD *)(a3 + 512) = v17;
      *(unsigned char *)(a3 + 520) = 1;
      sub_10005149C((uint64_t)&v14);
    }
    else
    {
      *(void *)&long long v12 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
      *((void *)&v12 + 1) = 107;
      int v13 = 2;
      sub_10005C5E0(&v14, &v12);
      sub_100003DF0(v16, (uint64_t)"Diskimageuio: Required read-write disk image (", 46);
      uint64_t v10 = diskimage_uio::operator<<(v16, v20);
      sub_100003DF0(v10, (uint64_t)")", 1);
      std::ostream::~ostream();
      sub_10005D948((uint64_t)&v14);
      std::ios::~ios();
      uint64_t v11 = std::generic_category();
      *(void *)a3 = 35;
      *(void *)(a3 + 8) = v11;
      *(unsigned char *)(a3 + 520) = 0;
    }
    sub_10005149C((uint64_t)v18);
  }
  else
  {
    *(void *)&long long v14 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
    *((void *)&v14 + 1) = 107;
    int v15 = 16;
    sub_10005C478(v18, &v14);
    sub_100003DF0(v19, (uint64_t)"Diskimageuio: Couldn't get diskimage: ", 38);
    uint64_t v8 = sub_10005A7F4((uint64_t)v21);
    sub_10005A1B0((uint64_t)v18, v8);
    std::ostream::~ostream();
    sub_10005D144((uint64_t)v18);
    std::ios::~ios();
    *(unsigned char *)a3 = 0;
    int v9 = v23;
    *(unsigned char *)(a3 + 520) = v23;
    if (!v9)
    {
      double result = v21[0];
      *(_OWORD *)a3 = *(_OWORD *)v21;
      return result;
    }
    sub_10005132C(a3, (uint64_t)v21);
    *(_DWORD *)(a3 + 512) = v22;
  }
  if (v23) {
    sub_10005149C((uint64_t)v21);
  }
  return result;
}

void sub_10005A784(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x630])) {
    sub_10005149C((uint64_t)&STACK[0x428]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005A7F4(uint64_t result)
{
  if (*(unsigned char *)(result + 520))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_1001983A0;
  }
  return result;
}

void *sub_10005A850(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005E0BC((uint64_t)a1, a2);
  *a1 = off_10019A320;
  a1[45] = &off_10019A420;
  a1[46] = &off_10019A448;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019A320;
  a1[45] = off_10019A3A8;
  a1[46] = off_10019A3D0;
  return a1;
}

void sub_10005A950(_Unwind_Exception *a1)
{
  sub_10005E14C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005A974(uint64_t a1)
{
  return a1;
}

void *sub_10005A9B8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005E8C0((uint64_t)a1, a2);
  *a1 = off_10019A540;
  a1[45] = &off_10019A640;
  a1[46] = &off_10019A668;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019A540;
  a1[45] = off_10019A5C8;
  a1[46] = off_10019A5F0;
  return a1;
}

void sub_10005AAB8(_Unwind_Exception *a1)
{
  sub_10005E950(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005AADC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005AB20(uint64_t result)
{
  if (!*(unsigned char *)(result + 520))
  {
    uint64_t v1 = (long long *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    long long v3 = *v1;
    *(void *)exception = &off_100199288;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

void *sub_10005AB90(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10005F0C4((uint64_t)a1, a2);
  *a1 = off_10019A760;
  a1[45] = &off_10019A860;
  a1[46] = &off_10019A888;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019A760;
  a1[45] = off_10019A7E8;
  a1[46] = off_10019A810;
  return a1;
}

void sub_10005AC90(_Unwind_Exception *a1)
{
  sub_10005F154(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005ACB4(uint64_t a1)
{
  return a1;
}

void *sub_10005ACF8(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10005F8C8((uint64_t)a1, a2);
  *a1 = off_10019A980;
  a1[45] = &off_10019AA80;
  a1[46] = &off_10019AAA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019A980;
  a1[45] = off_10019AA08;
  a1[46] = off_10019AA30;
  return a1;
}

void sub_10005ADF8(_Unwind_Exception *a1)
{
  sub_10005F958(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005AE1C(uint64_t a1)
{
  return a1;
}

void sub_10005AE60(uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x470uLL);
  sub_10005AEDC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10005AEC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10005AEDC(void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100199828;
  int v4 = *a3;
  uint64_t v5 = sub_10011EDAC(a2, *a3);
  sub_10004C904((uint64_t)(a1 + 3), v5, (v4 & 3) != 0, 0);
  return a1;
}

void sub_10005AF48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10005AF5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100199828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005AF7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100199828;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10005AFD0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_10005AFF8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100199A18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10005B074(_Unwind_Exception *a1)
{
}

uint64_t sub_10005B088(uint64_t a1)
{
  *(void *)a1 = off_100199A18;
  sub_10005B490(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005B1C4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005B088(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005B22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10005B264(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005B2CC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005B088(v1);

  return std::ios::~ios();
}

void sub_10005B318(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005B088(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005B37C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005B088(v1);

  return std::ios::~ios();
}

void sub_10005B3DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005B088(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10005B458(uint64_t a1)
{
  sub_10005B088(a1);

  operator delete();
}

uint64_t sub_10005B490(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10005B614((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005B5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005B614(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 534;
    __int16 v22 = 2082;
    unsigned __int8 v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 534;
      __int16 v22 = 2082;
      unsigned __int8 v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10005B7FC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100199C38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10005B878(_Unwind_Exception *a1)
{
}

uint64_t sub_10005B88C(uint64_t a1)
{
  *(void *)a1 = off_100199C38;
  sub_10005BC94(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005B9C8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005B88C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005BA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10005BA68(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005BAD0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005B88C(v1);

  return std::ios::~ios();
}

void sub_10005BB1C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005B88C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005BB80(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005B88C(v1);

  return std::ios::~ios();
}

void sub_10005BBE0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005B88C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10005BC5C(uint64_t a1)
{
  sub_10005B88C(a1);

  operator delete();
}

uint64_t sub_10005BC94(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10005BE18((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005BDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005BE18(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 539;
    __int16 v22 = 2082;
    unsigned __int8 v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 539;
      __int16 v22 = 2082;
      unsigned __int8 v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10005C000@<X0>(int a1@<W0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v13 = 1;
      break;
    case 1:
      goto LABEL_19;
    case 2:
      sub_100050C10((uint64_t)a2);
    case 7:
    case 9:
    case 12:
      int v20 = 0;
      sub_10005132C((uint64_t)v21, (uint64_t)__p);
      int v23 = 0;
      sub_10005132C(a6, (uint64_t)v21);
      *(_DWORD *)(a6 + 512) = v23;
      *(unsigned char *)(a6 + 520) = 1;
      sub_10005149C((uint64_t)v21);
      return sub_10005149C((uint64_t)__p);
    case 8:
      return sub_100056358(a2, a6);
    case 11:
      if (*(char *)(a4 + 23) < 0)
      {
        sub_100047744(__p, *(void **)a4, *(void *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a4;
        uint64_t v19 = *(void *)(a4 + 16);
      }
      sub_10004F9C0(&v17, a2, (char *)__p, a3);
    default:
      __p[0] = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(image_format, std::shared_ptr<Backend> &, BOOL, const std::filesystem::path &, size_t)";
      __p[1] = (void *)132;
      LODWORD(v19) = 16;
      sub_10005C748(v21, (long long *)__p);
      sub_100003DF0(v22, (uint64_t)"Diskimageuio: Unsupported image format", 38);
      diskimage_uio::operator<<(v22, a1);
      std::ostream::~ostream();
      sub_10005C940((uint64_t)v21);
      std::ios::~ios();
      uint64_t result = make_error_code(161);
      *(void *)a6 = result;
      *(void *)(a6 + 8) = v16;
      *(unsigned char *)(a6 + 520) = 0;
      return result;
  }
  do
  {
    int v14 = 2;
    if ((v13 - 2) >= 5)
    {
      if (v13 == 1) {
        goto LABEL_18;
      }
      if (v13 == 10) {
        int v14 = 2;
      }
      else {
        int v14 = v13;
      }
    }
    if (v13 == v14)
    {
      uint64_t result = sub_10005C000(v13, a2, a3, a4, a5);
      if (!*(unsigned char *)(a6 + 520)) {
        return result;
      }
      uint64_t result = sub_10005AB20(a6);
      int v15 = *(_DWORD *)(result + 512);
      if (v15 || !*(unsigned char *)(a6 + 520))
      {
        if (v15) {
          return result;
        }
      }
      else
      {
        sub_10005149C(a6);
      }
    }
LABEL_18:
    uint64_t v13 = (v13 + 1);
  }
  while (v13 != 13);
LABEL_19:

  return sub_100056494((uint64_t *)a2, a5, a6);
}

void sub_10005C378(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_100051134();
  }
  _Unwind_Resume(a1);
}

void *sub_10005C478(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005D0B4((uint64_t)a1, a2);
  *a1 = off_100199EE0;
  a1[45] = &off_100199FE0;
  a1[46] = &off_10019A008;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100199EE0;
  a1[45] = off_100199F68;
  a1[46] = off_100199F90;
  return a1;
}

void sub_10005C578(_Unwind_Exception *a1)
{
  sub_10005D144(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005C59C(uint64_t a1)
{
  return a1;
}

void *sub_10005C5E0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005D8B8((uint64_t)a1, a2);
  *a1 = off_10019A100;
  a1[45] = &off_10019A200;
  a1[46] = &off_10019A228;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019A100;
  a1[45] = off_10019A188;
  a1[46] = off_10019A1B0;
  return a1;
}

void sub_10005C6E0(_Unwind_Exception *a1)
{
  sub_10005D948(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005C704(uint64_t a1)
{
  return a1;
}

void *sub_10005C748(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005C8B0((uint64_t)a1, a2);
  *a1 = off_100199CC0;
  a1[45] = &off_100199DC0;
  a1[46] = &off_100199DE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100199CC0;
  a1[45] = off_100199D48;
  a1[46] = off_100199D70;
  return a1;
}

void sub_10005C848(_Unwind_Exception *a1)
{
  sub_10005C940(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005C86C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005C8B0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_100199E58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10005C92C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005C940(uint64_t a1)
{
  *(void *)a1 = off_100199E58;
  sub_10005CD48(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005CA7C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005C940(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005CAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10005CB1C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005CB84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005C940(v1);

  return std::ios::~ios();
}

void sub_10005CBD0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005C940(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005CC34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005C940(v1);

  return std::ios::~ios();
}

void sub_10005CC94(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005C940(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10005CD10(uint64_t a1)
{
  sub_10005C940(a1);

  operator delete();
}

uint64_t sub_10005CD48(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10005CECC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005CEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005CECC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 485;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 485;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10005D0B4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019A078;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10005D130(_Unwind_Exception *a1)
{
}

uint64_t sub_10005D144(uint64_t a1)
{
  *(void *)a1 = off_10019A078;
  sub_10005D54C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005D280(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005D144(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005D2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10005D320(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005D388(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005D144(v1);

  return std::ios::~ios();
}

void sub_10005D3D4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005D144(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005D438(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005D144(v1);

  return std::ios::~ios();
}

void sub_10005D498(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005D144(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10005D514(uint64_t a1)
{
  sub_10005D144(a1);

  operator delete();
}

uint64_t sub_10005D54C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10005D6D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005D6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005D6D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 495;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 495;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10005D8B8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019A298;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10005D934(_Unwind_Exception *a1)
{
}

uint64_t sub_10005D948(uint64_t a1)
{
  *(void *)a1 = off_10019A298;
  sub_10005DD50(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005DA84(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005D948(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005DAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10005DB24(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005DB8C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005D948(v1);

  return std::ios::~ios();
}

void sub_10005DBD8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005D948(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005DC3C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005D948(v1);

  return std::ios::~ios();
}

void sub_10005DC9C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005D948(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10005DD18(uint64_t a1)
{
  sub_10005D948(a1);

  operator delete();
}

uint64_t sub_10005DD50(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10005DED4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005DEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005DED4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 503;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 503;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10005E0BC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019A4B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10005E138(_Unwind_Exception *a1)
{
}

uint64_t sub_10005E14C(uint64_t a1)
{
  *(void *)a1 = off_10019A4B8;
  sub_10005E554(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005E288(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005E14C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005E2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10005E328(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005E390(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005E14C(v1);

  return std::ios::~ios();
}

void sub_10005E3DC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005E14C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005E440(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005E14C(v1);

  return std::ios::~ios();
}

void sub_10005E4A0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005E14C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10005E51C(uint64_t a1)
{
  sub_10005E14C(a1);

  operator delete();
}

uint64_t sub_10005E554(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10005E6D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005E6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005E6D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 551;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 551;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10005E8C0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019A6D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10005E93C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005E950(uint64_t a1)
{
  *(void *)a1 = off_10019A6D8;
  sub_10005ED58(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005EA8C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005E950(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005EAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10005EB2C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005EB94(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005E950(v1);

  return std::ios::~ios();
}

void sub_10005EBE0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005E950(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005EC44(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005E950(v1);

  return std::ios::~ios();
}

void sub_10005ECA4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005E950(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10005ED20(uint64_t a1)
{
  sub_10005E950(a1);

  operator delete();
}

uint64_t sub_10005ED58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10005EEDC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005EEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005EEDC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 554;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 554;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10005F0C4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019A8F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10005F140(_Unwind_Exception *a1)
{
}

uint64_t sub_10005F154(uint64_t a1)
{
  *(void *)a1 = off_10019A8F8;
  sub_10005F55C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005F290(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005F154(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005F2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10005F330(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005F398(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005F154(v1);

  return std::ios::~ios();
}

void sub_10005F3E4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005F154(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005F448(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005F154(v1);

  return std::ios::~ios();
}

void sub_10005F4A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005F154(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10005F524(uint64_t a1)
{
  sub_10005F154(a1);

  operator delete();
}

uint64_t sub_10005F55C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10005F6E0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005F6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005F6E0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 561;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 561;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10005F8C8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019AB18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10005F944(_Unwind_Exception *a1)
{
}

uint64_t sub_10005F958(uint64_t a1)
{
  *(void *)a1 = off_10019AB18;
  sub_10005FD60(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10005FA94(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005F958(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005FAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10005FB34(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10005FB9C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005F958(v1);

  return std::ios::~ios();
}

void sub_10005FBE8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005F958(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10005FC4C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005F958(v1);

  return std::ios::~ios();
}

void sub_10005FCAC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005F958(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10005FD28(uint64_t a1)
{
  sub_10005F958(a1);

  operator delete();
}

uint64_t sub_10005FD60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10005FEE4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10005FEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005FEE4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 565;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 565;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000600CC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100060234((uint64_t)a1, a2);
  *a1 = off_10019ABA0;
  a1[45] = &off_10019ACA0;
  a1[46] = &off_10019ACC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019ABA0;
  a1[45] = off_10019AC28;
  a1[46] = off_10019AC50;
  return a1;
}

void sub_1000601CC(_Unwind_Exception *a1)
{
  sub_1000602C4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000601F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100060234(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019AD38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000602B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000602C4(uint64_t a1)
{
  *(void *)a1 = off_10019AD38;
  sub_1000606CC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100060400(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000602C4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100060468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000604A0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100060508(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000602C4(v1);

  return std::ios::~ios();
}

void sub_100060554(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000602C4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000605B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000602C4(v1);

  return std::ios::~ios();
}

void sub_100060618(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000602C4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100060694(uint64_t a1)
{
  sub_1000602C4(a1);

  operator delete();
}

uint64_t sub_1000606CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100060850((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100060828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100060850(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 610;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 610;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100060A38(unsigned int *a1@<X1>, _DWORD *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_100060AC4(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1000196A4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100060AB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100060AC4(void *a1, unsigned int *a2, _DWORD *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100199828;
  sub_10004C904((uint64_t)(a1 + 3), *a2, *a3 != 0, *a4);
  return a1;
}

void sub_100060B20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100060B34(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    operator delete();
  }
  int v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_100060BA8(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    char v6 = result;
    uint64_t result = sub_100060C24(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100060C08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100060C24(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_10001796C();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_100060C68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10019ADB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100060C88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10019ADB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100060CDC(uint64_t a1)
{
}

void sub_100060CE8(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    operator delete();
  }
  int v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
}

void sub_100060D6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10019AE08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100060D8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10019AE08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100060DE0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

unsigned char *sub_100060E08@<X0>(const std::error_category *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10004F6F8(a1, v11);
  if (v11[16])
  {
    uint64_t result = (unsigned char *)sub_1000610F4((uint64_t)v11);
    if (*result)
    {
      *(void *)&long long v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
      *((void *)&v7 + 1) = 84;
      int v8 = 16;
      sub_100061164(v9, &v7);
      sub_100003DF0(v10, (uint64_t)"Diskimageuio: image is locked", 29);
      std::ostream::~ostream();
      sub_100061B60((uint64_t)v9);
      std::ios::~ios();
      uint64_t result = (unsigned char *)make_error_code(162);
      char v4 = 0;
      *(void *)a2 = result;
      *(void *)(a2 + 8) = v5;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      char v4 = 1;
    }
  }
  else
  {
    *(void *)&long long v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
    *((void *)&v7 + 1) = 84;
    int v8 = 16;
    sub_100060F8C(v9, &v7);
    sub_100003DF0(v10, (uint64_t)"Diskimageuio: can't get lock status ", 36);
    uint64_t v6 = sub_10004EF44((uint64_t)v11);
    sub_10005A1B0((uint64_t)v9, v6);
    std::ostream::~ostream();
    sub_10006135C((uint64_t)v9);
    std::ios::~ios();
    uint64_t result = (unsigned char *)sub_10004EF44((uint64_t)v11);
    char v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)result;
  }
  *(unsigned char *)(a2 + 16) = v4;
  return result;
}

void sub_100060F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100061288((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100060F8C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000612CC((uint64_t)a1, a2);
  *a1 = off_10019AE60;
  a1[45] = &off_10019AF60;
  a1[46] = &off_10019AF88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019AE60;
  a1[45] = off_10019AEE8;
  a1[46] = off_10019AF10;
  return a1;
}

void sub_10006108C(_Unwind_Exception *a1)
{
  sub_10006135C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000610B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000610F4(uint64_t result)
{
  if (!*(unsigned char *)(result + 16))
  {
    uint64_t v1 = (long long *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    long long v3 = *v1;
    *(void *)exception = &off_100199288;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

void *sub_100061164(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100061AD0((uint64_t)a1, a2);
  *a1 = off_10019B080;
  a1[45] = &off_10019B180;
  a1[46] = &off_10019B1A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019B080;
  a1[45] = off_10019B108;
  a1[46] = off_10019B130;
  return a1;
}

void sub_100061264(_Unwind_Exception *a1)
{
  sub_100061B60(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100061288(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000612CC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019AFF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100061348(_Unwind_Exception *a1)
{
}

uint64_t sub_10006135C(uint64_t a1)
{
  *(void *)a1 = off_10019AFF8;
  sub_100061764(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100061498(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006135C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100061500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100061538(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000615A0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006135C(v1);

  return std::ios::~ios();
}

void sub_1000615EC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006135C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100061650(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006135C(v1);

  return std::ios::~ios();
}

void sub_1000616B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006135C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10006172C(uint64_t a1)
{
  sub_10006135C(a1);

  operator delete();
}

uint64_t sub_100061764(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000618E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000618C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000618E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 645;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 645;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100061AD0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019B218;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100061B4C(_Unwind_Exception *a1)
{
}

uint64_t sub_100061B60(uint64_t a1)
{
  *(void *)a1 = off_10019B218;
  sub_100061F68(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100061C9C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100061B60(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100061D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100061D3C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100061DA4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100061B60(v1);

  return std::ios::~ios();
}

void sub_100061DF0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100061B60(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100061E54(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100061B60(v1);

  return std::ios::~ios();
}

void sub_100061EB4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100061B60(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100061F30(uint64_t a1)
{
  sub_100061B60(a1);

  operator delete();
}

uint64_t sub_100061F68(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000620EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000620C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000620EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 650;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 650;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000622D4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006243C((uint64_t)a1, a2);
  *a1 = off_10019B2A0;
  a1[45] = &off_10019B3A0;
  a1[46] = &off_10019B3C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019B2A0;
  a1[45] = off_10019B328;
  a1[46] = off_10019B350;
  return a1;
}

void sub_1000623D4(_Unwind_Exception *a1)
{
  sub_1000624CC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000623F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006243C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019B438;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000624B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000624CC(uint64_t a1)
{
  *(void *)a1 = off_10019B438;
  sub_1000628D4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100062608(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000624CC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100062670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000626A8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100062710(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000624CC(v1);

  return std::ios::~ios();
}

void sub_10006275C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000624CC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000627C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000624CC(v1);

  return std::ios::~ios();
}

void sub_100062820(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000624CC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10006289C(uint64_t a1)
{
  sub_1000624CC(a1);

  operator delete();
}

uint64_t sub_1000628D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100062A58((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100062A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100062A58(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 681;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 681;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

const std::error_category *sub_100062C40@<X0>(uint64_t a1@<X8>)
{
  *(void *)&long long v3 = "hdr_get_nr_blocks(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + 1) = 69;
  int v4 = 16;
  sub_100062DD0(v5, &v3);
  sub_100003DF0(v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66);
  std::ostream::~ostream();
  sub_100062FC8((uint64_t)v5);
  std::ios::~ios();
  uint64_t result = std::generic_category();
  *(void *)a1 = 6;
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void sub_100062CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostream::~ostream();
  sub_100062FC8((uint64_t)va);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_100062D0C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 492);
  *(unsigned char *)(a2 + 16) = 1;
}

void sub_100062D24(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 48);
  *(unsigned char *)(a2 + 16) = 1;
}

void sub_100062D38(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 16) = 1;
}

void sub_100062D4C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_10004F76C(*(void *)(*(void *)(*(void *)a1 + 8) - 8), &v3);
  *(void *)a2 = v3.n128_u64[0];
  *(unsigned char *)(a2 + 16) = 1;
}

uint64_t sub_100062D98@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 16))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

void *sub_100062DD0(void *a1, long long *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  sub_100062F38((uint64_t)a1, a2);
  *a1 = off_10019B4F0;
  a1[45] = &off_10019B5F0;
  a1[46] = &off_10019B618;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019B4F0;
  a1[45] = off_10019B578;
  a1[46] = off_10019B5A0;
  return a1;
}

void sub_100062ED0(_Unwind_Exception *a1)
{
  sub_100062FC8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100062EF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100062F38(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019B688;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100062FB4(_Unwind_Exception *a1)
{
}

uint64_t sub_100062FC8(uint64_t a1)
{
  *(void *)a1 = off_10019B688;
  sub_1000633D0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100063104(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100062FC8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10006316C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000631A4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10006320C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100062FC8(v1);

  return std::ios::~ios();
}

void sub_100063258(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100062FC8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000632BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100062FC8(v1);

  return std::ios::~ios();
}

void sub_10006331C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100062FC8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100063398(uint64_t a1)
{
  sub_100062FC8(a1);

  operator delete();
}

uint64_t sub_1000633D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100063554((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006352C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100063554(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 112;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 112;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10006373C@<X0>(void *a1@<X8>)
{
  unsigned __int8 v2 = operator new(0x60uLL);
  uint64_t result = sub_100063798(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100063784(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100063798(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019ADB8;
  sub_1001385C8(a1 + 3);
  return a1;
}

void sub_1000637E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000637F4(std::exception *a1)
{
  sub_100003828(a1);

  operator delete();
}

void ***sub_10006382C(void ***result, void **a2)
{
  unsigned __int8 v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_1000638D4(&v3);
    operator delete();
  }
  return result;
}

uint64_t sub_100063880(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000638D4(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 16;
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(v4 - 8));
        int v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_10006395C(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v13 = &v15;
  uint64_t v16 = v4;
  long long v14 = xmmword_100164300;
  long long v15 = v5;
  sub_10003103C((uint64_t)a1, &v13);
  sub_100014DA8(&v13);
  uint64_t v6 = a1[1];
  uint64_t v13 = (long long *)*a1;
  uint64_t v7 = (uint64_t)v13 + 24 * v6;
  uint64_t v8 = a1[19];
  uint64_t v11 = (unint64_t *)a1[18];
  uint64_t v12 = v7;
  uint64_t v10 = &v11[v8];
  sub_10002F660((uint64_t)(a1 + 26), (uint64_t *)&v13, &v12, &v11, &v10, *((void *)a2 + 3), *((void *)a2 + 2));
  return a1;
}

void sub_100063A2C(_Unwind_Exception *a1)
{
  sub_100014940(v1);
  _Unwind_Resume(a1);
}

std::string *sub_100063A50(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  sub_100063AB8(a1, a2, &a2[v3]);
  return a1;
}

void sub_100063A9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100063AB8(std::string *this, char *a2, char *a3)
{
  BOOL v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    uint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    long long v14 = this;
    if ((v6 & 0x80) != 0) {
      long long v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      unsigned char *i = v16;
    }
    unsigned char *i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_100063C30(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_100063C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100063C30(void *result, char *a2, char *a3, unint64_t a4)
{
  BOOL v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10000397C();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *BOOL v4 = result;
    BOOL v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)BOOL v4 = v10;
    BOOL v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)BOOL v4 = 0;
  return result;
}

__n128 sub_100063CD8(diskimage_uio::diskimage_open_params *this, diskimage_uio::diskimage_open_params *a2)
{
  if (*((unsigned char *)this + 16)) {
    BOOL v4 = *((unsigned char *)a2 + 16) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v9[0] = *(void *)this;
    *(void *)this = 0;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)this, (uint64_t *)a2);
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)a2, v9);
LABEL_11:
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v9);
    return result;
  }
  if (*((unsigned char *)this + 16))
  {
    if (!*((unsigned char *)a2 + 16))
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      *(void *)a2 = *(void *)this;
      *(void *)this = 0;
      diskimage_uio::diskimage_open_params::~diskimage_open_params(this);
      result.n128_u64[0] = v9[0];
      *(_OWORD *)this = *(_OWORD *)v9;
      char v6 = *((unsigned char *)this + 16);
      *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
      *((unsigned char *)a2 + 16) = v6;
      return result;
    }
  }
  else if (*((unsigned char *)a2 + 16))
  {
    uint64_t v7 = *(void *)a2;
    *(void *)a2 = 0;
    diskimage_uio::diskimage_open_params::~diskimage_open_params(a2);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)this = v7;
    v9[0] = 0;
    char v8 = *((unsigned char *)this + 16);
    *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
    *((unsigned char *)a2 + 16) = v8;
    goto LABEL_11;
  }
  __n128 result = *(__n128 *)this;
  *(_OWORD *)this = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

void sub_100063DD8(_OWORD *a1)
{
  *(_OWORD *)uint64_t v1 = *a1;
  *(unsigned char *)(v1 + 16) = 0;
  __cxa_end_catch();
}

uint64_t sub_100063E00(uint64_t (***a1)(void))
{
  v3[0] = (**a1)(a1);
  v3[1] = v1;
  if (v1 == 0xFFFFFFFFLL) {
    sub_100017DCC();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(char **, void *))off_10019B910[v1])(&v5, v3);
}

uint64_t sub_100063E78(uint64_t (***a1)(void))
{
  v3[0] = (**a1)(a1);
  v3[1] = v1;
  if (v1 == 0xFFFFFFFFLL) {
    sub_100017DCC();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(char **, void *))off_10019B950[v1])(&v5, v3);
}

uint64_t sub_100063EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24) - v2;
  uint64_t v4 = v3 / 48;
  if (v3 < 49)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 - 1;
    uint64_t v7 = (int *)(v2 + 48 * v4 - 96);
    do
    {
      int v8 = *v7;
      v7 -= 12;
      if (v8 != 2) {
        break;
      }
      ++v5;
    }
    while (v6-- > 1);
  }
  uint64_t v10 = v4 + ~v5;
  if (v5) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t sub_100063F64(_DWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void *)(a4 + 144);
  uint64_t v7 = (*((uint64_t (**)(_DWORD **))*a1 + 4))(a1);
  if (v6 > (*((uint64_t (**)(_DWORD **))*a1 + 3))(a1) * v7) {
    return -5;
  }
  if (*a1[2]) {
    return -78;
  }
  uint64_t v9 = *(void ***)(a2 + 16);
  if (!(*(unsigned int (**)(void))(*(void *)(*v9)[1] + 40))((*v9)[1]) || *a1[2]) {
    return -78;
  }
  return sub_100011E8C(*v9);
}

uint64_t sub_10006406C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a2 + 16);
  uint64_t v3 = *(void ***)(a2 + 24);
  if (v2 == v3) {
    return 4294967218;
  }
  uint64_t v4 = 4294967218;
  do
  {
    if ((*(unsigned int (**)(void))(*(void *)(*v2)[1] + 40))((*v2)[1]))
    {
      uint64_t v4 = sub_100011BD0(*v2);
      if (v4) {
        break;
      }
    }
    v2 += 2;
  }
  while (v2 != v3);
  return v4;
}

uint64_t sub_100064100(uint64_t a1, void **a2, unsigned char *a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_10019B7B8;
  *(void *)(a1 + 16) = 0;
  char v43 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  uint64_t v42 = (void *)(a1 + 56);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void))(*(void *)**a2 + 24))(**a2);
  *(unsigned char *)(a1 + 48) = 0;
  if ((*a3 & 2) != 0)
  {
    unint64_t v6 = a2[1];
    uint64_t v7 = (uint64_t (***)(void))*(v6 - 3);
    int v8 = (std::__shared_weak_count *)*(v6 - 2);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v6 = a2[1];
    }
    uint64_t v9 = v6 - 3;
    if (v6 - 3 == *a2)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        unint64_t v11 = (uint64_t (***)(void))*(v9 - 3);
        uint64_t v10 = (std::__shared_weak_count *)*(v9 - 2);
        v9 -= 3;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = sub_100063E00(v7);
        char v13 = v12;
        uint64_t v7 = v11;
        uint64_t v46 = v12;
        uint64_t v47 = v14;
        uint64_t v15 = sub_100063E78(v11);
        uint64_t v52 = v15;
        uint64_t v53 = v16;
        if (v13)
        {
LABEL_8:
          if ((_BYTE)v15)
          {
LABEL_9:
            if (v46 != v52 || v47 != v53)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              void *exception = &off_1001B6CA0;
              char v38 = std::generic_category();
              exception[1] = 166;
              exception[2] = v38;
              *((unsigned char *)exception + 24) = 0;
              *((unsigned char *)exception + 48) = 0;
              exception[7] = "Corrupted shadow file(s) chain";
            }
          }
          else
          {
            uint64_t v20 = 1;
            while (v20 != 16)
            {
              if (*((unsigned __int8 *)&v52 + v20++))
              {
                if ((unint64_t)(v20 - 2) <= 0xE) {
                  goto LABEL_9;
                }
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
          while (v18 != 16)
          {
            if (*((unsigned __int8 *)&v46 + v18++))
            {
              if ((unint64_t)(v18 - 2) <= 0xE) {
                goto LABEL_8;
              }
              break;
            }
          }
        }
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v8) {
          sub_100010A48(v8);
        }
        if (v10) {
          sub_100010A48(v10);
        }
        int v8 = v10;
      }
      while (v9 != *a2);
    }
    if (v10) {
      sub_100010A48(v10);
    }
  }
  uint64_t v22 = (uint64_t)*a2;
  if (a2[1] != *a2)
  {
    uint64_t v23 = 0;
    int v24 = 0;
    unint64_t v25 = 0;
    long long v41 = "Block size mismatch in DiskImageStackable";
    do
    {
      long long v26 = (_DWORD *)(v22 + v23);
      uint64_t v27 = *(void *)(a1 + 40);
      if (v27 != (*(uint64_t (**)(void))(**(void **)(v22 + v23) + 24))(*(void *)(v22 + v23))) {
        goto LABEL_66;
      }
      if (v26[4] == 2)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
        if (v28 >= 2 && v25 != v28 - 2)
        {
          uint64_t v30 = (const void *)(*a2)[a2[1] - *a2 - 3];
          if (v30)
          {
            {
              long long v41 = "Currently, cache can only be added directly above plugin";
LABEL_66:
              uint64_t v39 = __cxa_allocate_exception(0x40uLL);
              *uint64_t v39 = &off_1001B6CA0;
              uint64_t v40 = std::generic_category();
              v39[1] = 4294967274;
              _OWORD v39[2] = v40;
              *((unsigned char *)v39 + 24) = 0;
              *((unsigned char *)v39 + 48) = 0;
              v39[7] = v41;
            }
          }
        }
      }
      uint64_t v31 = v22 + v23;
      uint64_t v33 = *(void *)(v22 + v23);
      char v32 = *(std::__shared_weak_count **)(v22 + v23 + 8);
      uint64_t v34 = v33;
      if (v32)
      {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v34 = *(void *)v26;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 96))(v34))
      {
        char v45 = 1;
        sub_1000699BC((uint64_t)&v52, v33, &v45);
      }
      LODWORD(v46) = v26[4];
      uint64_t v47 = *(void *)v26;
      long long v35 = *(std::__shared_weak_count **)(v31 + 8);
      BOOL v48 = v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v49 = v33;
      char v50 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v51 = (*(uint64_t (**)(void))(**(void **)v26 + 32))();
      sub_100064774(v43, (uint64_t)&v46);
      if (v26[4] == 2) {
        v24 |= (*(uint64_t (**)(void))(**(void **)v26 + 40))();
      }
      if (v50) {
        sub_100010A48(v50);
      }
      if (v48) {
        sub_100010A48(v48);
      }
      if (v32) {
        sub_100010A48(v32);
      }
      ++v25;
      uint64_t v22 = (uint64_t)*a2;
      v23 += 24;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    if (v24)
    {
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 0x40000000;
      void v44[2] = sub_1000648D8;
      v44[3] = &unk_10019B878;
      v44[4] = a1;
      sub_100068620((uint64_t)v42);
      sub_1000678C8(v42, (uint64_t)v44, 600000000);
      *(unsigned char *)(a1 + 144) = 1;
    }
  }
  return a1;
}

void sub_1000646D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  sub_10006867C(v19);
  a19 = a12;
  sub_1000686D8(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100064774(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0x555555555555555) {
      sub_10001796C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      char v13 = (char *)sub_100068538(v4, v12);
    }
    else {
      char v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[48 * v9];
    uint64_t v18 = &v13[48 * v12];
    sub_100068460((uint64_t)v16, a2);
    std::string::size_type v17 = v16 + 48;
    sub_1000684A4(a1, &v15);
    uint64_t v8 = a1[1];
    sub_1000685D0((uint64_t)&v15);
  }
  else
  {
    sub_100068460(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v8;
  return v8 - 48;
}

void sub_100064888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000685D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006489C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_100010A48(v3);
  }
  return a1;
}

uint64_t sub_1000648D8(uint64_t a1)
{
  return sub_1000648E0(*(void *)(a1 + 32));
}

uint64_t sub_1000648E0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = *(void *)(result + 24);
  while (v1 != v2)
  {
    __n128 result = (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 40))(*(void *)(v1 + 8));
    if (result) {
      BOOL v3 = *(_DWORD *)v1 == 2;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3)
    {
      uint64_t v4 = (void *)(*(uint64_t (**)(void))(**(void **)(v1 + 8) + 136))(*(void *)(v1 + 8));
      __n128 result = sub_100011BD0(v4);
      if (v4) {
        __n128 result = (*(uint64_t (**)(void *))(*v4 + 40))(v4);
      }
    }
    v1 += 48;
  }
  return result;
}

void sub_1000649B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100146F4C();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000649CC(uint64_t a1)
{
  *(void *)a1 = off_10019B7B8;
  sub_1000648E0(a1);
  sub_10006867C(a1 + 56);
  BOOL v3 = (void **)(a1 + 16);
  sub_1000686D8(&v3);
  return a1;
}

void sub_100064A38(uint64_t a1)
{
  sub_1000649CC(a1);

  operator delete();
}

unint64_t sub_100064A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v15 = *(void *)(a1 + 40);
  unsigned int v16 = *((unsigned __int8 *)a6 + 16);
  uint64_t v17 = *a6;
  uint64_t v18 = a6[1];
  if ((v16 & 2) != 0) {
    uint64_t v19 = *a6;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  v22[0] = v19 * v15;
  v22[1] = ((v16 & 1) + v18 - v17 + (int)(((v16 >> 1) & 1) - 1) + v19) * v15;
  char v23 = 2;
  sub_1000302E0(a3, (uint64_t)v22, a4, (uint64_t)v24);
  unint64_t v20 = sub_100064BA4(a1, a2, (uint64_t)v24, (uint64_t)&v27, a5, a7, a8, a9, a10);
  if (v29) {
    sub_100010A48(v29);
  }
  if (v28) {
    sub_100010A48(v28);
  }
  if (v26) {
    sub_100010A48(v26);
  }
  if (v25) {
    sub_100010A48(v25);
  }
  return v20;
}

void sub_100064B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100064EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100064BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v14 = sub_100066264();
  uint64_t v16 = v14;
  unint64_t v17 = v15;
  v61[0] = v14;
  v61[1] = v15;
  if ((v14 & 0x8000000000000000) == 0 || !v14)
  {
    unint64_t v18 = *(void *)(a3 + 144);
    BOOL v19 = v15 < v18 || v14 > ((*(void *)(a4 + 144) - v18) & ~((uint64_t)(*(void *)(a4 + 144) - v18) >> 63));
    BOOL v20 = 0;
    if (a5 && v19)
    {
      unint64_t v21 = *(void *)(a1 + 40);
      uint64_t v22 = *(void *)(a4 + 144) - v18;
      unint64_t v23 = v22 & ~(v22 >> 63);
      if (v23 <= v21) {
        unint64_t v23 = *(void *)(a1 + 40);
      }
      if (v22 <= 0) {
        unint64_t v24 = 0;
      }
      else {
        unint64_t v24 = v23;
      }
      v59[0] = v18 / v21;
      v59[1] = (v18 + v21 + v24 - 1) / v21;
      char v60 = 2;
      BOOL v20 = sub_100065558(a1, a2, v61, (uint64_t)v59, a5, a9);
    }
    unint64_t v25 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v46 = *(void *)a3;
    uint64_t v47 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v48[0] = *(_OWORD *)(a3 + 16);
    *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)(a3 + 25);
    uint64_t v49 = *(void *)(a3 + 48);
    long long v50 = *(_OWORD *)(a3 + 56);
    long long v51 = *(_OWORD *)(a3 + 72);
    long long v52 = *(_OWORD *)(a3 + 88);
    char v53 = *(unsigned char *)(a3 + 104);
    long long v26 = *(std::__shared_weak_count **)(a3 + 120);
    uint64_t v54 = *(void *)(a3 + 112);
    long long v55 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v56 = *(_OWORD *)(a3 + 128);
    uint64_t v57 = *(void *)(a3 + 144);
    char v58 = *(unsigned char *)(a3 + 152);
    uint64_t v27 = *(std::__shared_weak_count **)(a4 + 8);
    uint64_t v33 = *(void *)a4;
    uint64_t v34 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)long long v35 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v35[9] = *(_OWORD *)(a4 + 25);
    uint64_t v36 = *(void *)(a4 + 48);
    long long v28 = *(_OWORD *)(a4 + 72);
    long long v37 = *(_OWORD *)(a4 + 56);
    long long v38 = v28;
    long long v39 = *(_OWORD *)(a4 + 88);
    char v40 = *(unsigned char *)(a4 + 104);
    long long v29 = *(std::__shared_weak_count **)(a4 + 120);
    uint64_t v41 = *(void *)(a4 + 112);
    uint64_t v42 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = *(void *)(a4 + 144);
    long long v43 = *(_OWORD *)(a4 + 128);
    uint64_t v44 = v30;
    char v45 = *(unsigned char *)(a4 + 152);
    uint64_t v16 = sub_100065BD0(a1, a2, (uint64_t)&v46, (uint64_t)&v33, v61, a5);
    if (v42) {
      sub_100010A48(v42);
    }
    if (v34) {
      sub_100010A48(v34);
    }
    if (v55) {
      sub_100010A48(v55);
    }
    if (v47) {
      sub_100010A48(v47);
    }
    if ((v16 & 0x8000000000000000) == 0 || !v16)
    {
      uint64_t v31 = *(void *)(a4 + 144);
      if (v20) {
        return sub_100143D4C(a3, a4, (v31 - *(void *)(a3 + 144)) & ~((v31 - *(void *)(a3 + 144)) >> 63), v61);
      }
      else {
        return v31 - v17;
      }
    }
  }
  return v16;
}

void *sub_100064EA4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[35];
  if (v2) {
    sub_100010A48(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)a1[21];
  if (v3) {
    sub_100010A48(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[15];
  if (v4) {
    sub_100010A48(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    sub_100010A48(v5);
  }
  return a1;
}

double sub_100064EF8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((*(unsigned char *)(a4 + 16) & 2) != 0) {
    uint64_t v8 = *(void *)a4;
  }
  else {
    uint64_t v8 = *(void *)a4 + 1;
  }
  unint64_t v9 = (*(unsigned char *)(a4 + 16) & 1) + *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  unint64_t v12 = *(void *)(v10 + 48 * a3 + 40);
  if (v12 < v9) {
    unint64_t v9 = *(void *)(v10 + 48 * a3 + 40);
  }
  *(void *)&long long v30 = v8;
  *((void *)&v30 + 1) = v9;
  LOBYTE(v31) = 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4) - 1 <= a3 || v12 <= *(void *)(v10 + 48 * a3 + 88)) {
    goto LABEL_18;
  }
  *(void *)&long long v28 = *(void *)(v10 + 48 * a3 + 88);
  *((void *)&v28 + 1) = v12;
  LOBYTE(v29) = 2;
  if (!sub_10006521C((uint64_t)&v28, (uint64_t)&v30))
  {
    uint64_t v10 = *(void *)(a1 + 16);
LABEL_18:
    uint64_t v20 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
    *(void *)a5 = *(void *)(v10 + 48 * a3 + 8);
    double result = *(double *)&v30;
    *(_OWORD *)(a5 + 8) = v30;
    *(void *)(a5 + 24) = v31;
    *(void *)(a5 + 32) = 0;
    *(void *)(a5 + 40) = v20;
    *(_DWORD *)(a5 + 48) = 6;
    *(void *)(a5 + 56) = off_100199578;
    *(void *)(a5 + 80) = a5 + 56;
    return result;
  }
  long long v24 = v28;
  uint64_t v25 = v29;
  sub_1000653F0((unint64_t *)&v24, (unint64_t *)&v30, (uint64_t)&v26);
  uint64_t v14 = v30;
  if ((v31 & 2) == 0) {
    uint64_t v14 = v30 + 1;
  }
  uint64_t v15 = v26;
  if ((v27 & 2) == 0) {
    uint64_t v15 = v26 + 1;
  }
  *(void *)&long long v30 = v14;
  *((void *)&v30 + 1) = v15;
  LOBYTE(v31) = 2;
  uint64_t v16 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
  uint64_t v32 = *(void *)(*(void *)(a1 + 16) + 48 * a3 + 8);
  long long v33 = v30;
  uint64_t v34 = v31;
  uint64_t v35 = 0;
  uint64_t v36 = v16;
  int v37 = 6;
  v38[0] = off_100199578;
  v38[3] = v38;
  unint64_t v17 = operator new(0x20uLL);
  uint64_t v22 = v17 + 4;
  unint64_t v23 = (char *)(v17 + 4);
  *(_OWORD *)unint64_t v17 = v26;
  v17[2] = v27;
  *((_DWORD *)v17 + 6) = 1;
  std::string __p = v17;
  sub_1000A8530((uint64_t)&v32, (uint64_t)&__p, a5);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  sub_100058E3C(v38);
  uint64_t v19 = v35;
  uint64_t v35 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 40))(v19);
  }
  return result;
}

void sub_10006518C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000651C0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1000651C0(uint64_t a1)
{
  sub_100058E3C((void *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_10006521C(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (v4 < *(void *)a1) {
        return 0;
      }
    }
    else
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (*(void *)a1 >= v4) {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v3 = *(void *)a1;
    unint64_t v4 = *(void *)(a1 + 8);
    if (*(void *)a1 >= v4 || *(void *)a1 + 1 >= v4) {
      return 0;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v6 == 3)
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (v7 < *(void *)a2) {
        return 0;
      }
    }
    else
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (*(void *)a2 >= v7) {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v8 = *(void *)a2;
    unint64_t v7 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v7 || *(void *)a2 + 1 >= v7) {
      return 0;
    }
  }
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(a1 + 16) == 3)
    {
      if (v4 < v3) {
        return 0;
      }
    }
    else if (v3 >= v4)
    {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
  }
  if ((_BYTE)v6)
  {
    if (*(unsigned char *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0;
      }
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }
  if ((v6 & 2) != 0) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = v8 + 1;
  }
  if ((v2 & 1) + v4 - 1 < v11) {
    return 0;
  }
  if ((_BYTE)v6)
  {
    if (*(unsigned char *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0;
      }
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }
  if (!(_BYTE)v2)
  {
    BOOL result = 0;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
    goto LABEL_60;
  }
  if (v2 == 3)
  {
    if (v4 >= v3) {
      goto LABEL_60;
    }
    return 0;
  }
  if (v3 >= v4) {
    return 0;
  }
LABEL_60:
  if ((v2 & 2) == 0) {
    ++v3;
  }
  return (v6 & 1) + v7 - 1 >= v3;
}

double sub_1000653F0@<D0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v3 == 3)
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (v4 < *a1) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (*a1 >= v4) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    if (*a1 >= v4 || *a1 + 1 >= v4) {
      goto LABEL_31;
    }
  }
  int v7 = *((unsigned __int8 *)a2 + 16);
  if (!*((unsigned char *)a2 + 16))
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (*a2 < v8 && *a2 + 1 < v8) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
  if (v7 == 3)
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (v8 >= *a2) {
      goto LABEL_15;
    }
LABEL_31:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C4608, memory_order_acquire) & 1) == 0)
    {
      uint64_t v19 = a3;
      int v18 = __cxa_guard_acquire(&qword_1001C4608);
      a3 = v19;
      if (v18)
      {
        *(void *)&xmmword_1001C45F0 = qword_1001C45E0;
        *((void *)&xmmword_1001C45F0 + 1) = qword_1001C45E0;
        LOBYTE(qword_1001C4600) = 2;
        __cxa_guard_release(&qword_1001C4608);
        a3 = v19;
      }
    }
    double result = *(double *)&xmmword_1001C45F0;
    *(_OWORD *)a3 = xmmword_1001C45F0;
    *(void *)(a3 + 16) = qword_1001C4600;
    return result;
  }
  unint64_t v9 = *a2;
  unint64_t v8 = a2[1];
  if (*a2 >= v8) {
    goto LABEL_31;
  }
LABEL_15:
  char v10 = v3 & 2;
  if ((v3 & 2) != 0) {
    unint64_t v11 = v5;
  }
  else {
    unint64_t v11 = v5 + 1;
  }
  char v12 = v7 & 2;
  if ((v7 & 2) != 0) {
    unint64_t v13 = v9;
  }
  else {
    unint64_t v13 = v9 + 1;
  }
  int v14 = v3 & 1;
  int v15 = v7 & 1;
  if (v11 < v13)
  {
    unint64_t v5 = v9;
    char v10 = v12;
  }
  if (v4 + v14 - 1 >= v8 + v15 - 1)
  {
    unint64_t v4 = v8;
    LOBYTE(v14) = v15;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 16) = v14 | v10;
  return result;
}

BOOL sub_100065558(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = a3[1];
  if (*a3 <= v6) {
    unint64_t v8 = *(void *)(a1 + 40);
  }
  else {
    unint64_t v8 = *a3;
  }
  if (*a3) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0;
  }
  v31[0] = v7 / v6;
  v31[1] = (v7 + v9) / v6;
  char v32 = 2;
  if (a5)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v26 = a5 - 1;
    BOOL v16 = 1;
    do
    {
      if (*(_DWORD *)(*(void *)(a1 + 16) + v14) != 2)
      {
        if (a6 && v26 == v15) {
          sub_10006875C((uint64_t)v36, a6);
        }
        else {
          sub_100064EF8(a1, a2, v15, a4, (uint64_t)v36);
        }
        sub_100064EF8(a1, a2, v15, (uint64_t)v31, (uint64_t)v33);
        sub_100058EC0((uint64_t)v33, (uint64_t)v30);
        sub_100059040((uint64_t)v33, (uint64_t)v29);
        sub_100058EC0((uint64_t)v36, (uint64_t)v28);
        sub_100059040((uint64_t)v36, (uint64_t)v27);
        BOOL v17 = sub_100065920((uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27);
        uint64_t v18 = v27[0];
        v27[0] = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
        }
        uint64_t v19 = v28[0];
        v28[0] = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
        }
        uint64_t v20 = v29[0];
        v29[0] = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
        }
        uint64_t v21 = v30[0];
        v30[0] = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
        }
        sub_100058E3C(v35);
        uint64_t v22 = v34;
        uint64_t v34 = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
        }
        sub_100058E3C(v38);
        uint64_t v23 = v37;
        uint64_t v37 = 0;
        if (v23) {
          (*(void (**)(uint64_t))(*(void *)v23 + 40))(v23);
        }
        if (!v17) {
          break;
        }
      }
      BOOL v16 = ++v15 < a5;
      v14 += 48;
    }
    while (a5 != v15);
  }
  else
  {
    return 0;
  }
  return v16;
}

void sub_100065834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a12) {
    sub_100146F18();
  }
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24))(a18);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 24))(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 24))(a30);
  }
  sub_1000651C0((uint64_t)&a39);
  sub_1000651C0(v39 - 184);
  _Unwind_Resume(a1);
}

void sub_100065910()
{
}

void sub_100065918()
{
}

BOOL sub_100065920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001059D4((uint64_t)&v20, a1);
  sub_1001059D4((uint64_t)v19, a2);
  sub_1001059D4((uint64_t)&v16, a3);
  sub_1001059D4((uint64_t)v15, a4);
  if (sub_100105B00((uint64_t)&v20, (uint64_t)v19))
  {
    while (sub_100105B00((uint64_t)&v16, (uint64_t)v15))
    {
      BOOL v7 = sub_100068BA0(v21, v17);
      if (v22 != v18 || !v7) {
        goto LABEL_10;
      }
      sub_100105D68(&v20);
      sub_100105D68(&v16);
      if (!sub_100105B00((uint64_t)&v20, (uint64_t)v19)) {
        break;
      }
    }
  }
  if (sub_100105A40((uint64_t)&v20, (uint64_t)v19)) {
    BOOL v9 = sub_100105A40((uint64_t)&v16, (uint64_t)v15);
  }
  else {
LABEL_10:
  }
    BOOL v9 = 0;
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  uint64_t v12 = v19[0];
  v19[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  return v9;
}

void sub_100065AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 24))(a21);
  }
  uint64_t v23 = *(void *)(v21 - 80);
  *(void *)(v21 - 80) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100065BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *a5;
  unint64_t v8 = a5[1] % v6;
  BOOL v9 = v8 == 0;
  unint64_t v10 = v6 - v8;
  if (v9) {
    unint64_t v10 = 0;
  }
  if (v7 < v10) {
    return 0;
  }
  uint64_t v15 = a1;
  v63[0] = 0;
  char v64 = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a3 + 8);
  unint64_t v17 = (v7 - v10) / v6 * v6;
  unint64_t v50 = *(void *)a3;
  long long v51 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = *(_OWORD *)(a3 + 56);
  v52[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v53 = *(void *)(a3 + 48);
  long long v54 = v18;
  long long v19 = *(_OWORD *)(a3 + 88);
  long long v55 = *(_OWORD *)(a3 + 72);
  long long v56 = v19;
  char v57 = *(unsigned char *)(a3 + 104);
  uint64_t v20 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v58 = *(void *)(a3 + 112);
  long long v59 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(a3 + 144);
  long long v60 = *(_OWORD *)(a3 + 128);
  uint64_t v61 = v21;
  char v62 = *(unsigned char *)(a3 + 152);
  sub_100030B34((uint64_t)&v50, a4, a5[1] + v10, v17, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v65);
  sub_1000557A8((uint64_t)v63);
  sub_100030E20((uint64_t)v63, (uint64_t)&v65);
  char v64 = 1;
  if (v74) {
    sub_100010A48(v74);
  }
  if (v73) {
    sub_100010A48(v73);
  }
  if (v72) {
    sub_100010A48(v72);
  }
  if (v71) {
    sub_100010A48(v71);
  }
  if (v69) {
    sub_100010A48(v69);
  }
  if (v67) {
    sub_100010A48(v67);
  }
  if (v59) {
    sub_100010A48(v59);
  }
  if (v51) {
    sub_100010A48(v51);
  }
  sub_10002FF28(a3, v17);
  sub_10002F290((void *)(a3 + 56));
  sub_10002F8C8((uint64_t)v63, (uint64_t)&v65);
  sub_10003AA88(a3, (long long *)&v65);
  if (v68) {
    sub_100010A48(v68);
  }
  if (v65.n128_u64[1]) {
    sub_100010A48((std::__shared_weak_count *)v65.n128_u64[1]);
  }
  sub_10002F51C((uint64_t)v63, (uint64_t)&v65);
  sub_10003AA88(a4, (long long *)&v65);
  if (v68) {
    sub_100010A48(v68);
  }
  if (v65.n128_u64[1]) {
    sub_100010A48((std::__shared_weak_count *)v65.n128_u64[1]);
  }
  int64_t v22 = a6 - 1;
  if (v22 < 0)
  {
LABEL_81:
    uint64_t v11 = (*(void *)(a4 + 144) - *(void *)(a3 + 144)) & ~((uint64_t)(*(void *)(a4 + 144) - *(void *)(a3 + 144)) >> 63);
    goto LABEL_82;
  }
  uint64_t v39 = v15;
  while (1)
  {
    int v23 = *(_DWORD *)(*(void *)(v15 + 16) + 48 * v22);
    if (v23 != 1) {
      break;
    }
LABEL_79:
    if (v22-- <= 0) {
      goto LABEL_81;
    }
  }
  if (!v23) {
    goto LABEL_81;
  }
  uint64_t v24 = *(void *)(*(void *)(*(void *)(a2 + 16) + 16 * v22) + 8);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24) & 1) == 0) {
    goto LABEL_81;
  }
  long long v75 = &v77;
  long long v76 = xmmword_100163280;
  uint64_t v25 = *(void *)(a3 + 24);
  uint64_t v26 = *(void *)(a4 + 144) - *(void *)(a3 + 144);
  uint64_t v27 = v26 & ~(v26 >> 63);
  while (!sub_10002F3D8(a3, a4))
  {
    sub_100016C64(a3 + 56);
    long long v28 = *(std::__shared_weak_count **)(a3 + 120);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = *(void *)(a3 + 144);
    if (((*(void *)(a4 + 144) - v29) & (unint64_t)~((*(void *)(a4 + 144) - v29) >> 63)) >= *(void *)(a3 + 136)) {
      unint64_t v30 = *(void *)(a3 + 136);
    }
    else {
      unint64_t v30 = (*(void *)(a4 + 144) - v29) & ~((*(void *)(a4 + 144) - v29) >> 63);
    }
    if (v28) {
      sub_100010A48(v28);
    }
    if (v30)
    {
      unint64_t v31 = *(void *)a3;
      unint64_t v32 = *(void *)(a3 + 8);
      v65.n128_u64[0] = *(void *)a3;
      v65.n128_u64[1] = v32;
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v66 = v30;
      uint64_t v34 = (uint64_t)v75;
      uint64_t v33 = v76;
      uint64_t v35 = (__n128 *)&v75[3 * v76];
      if ((void)v76 == *((void *)&v76 + 1))
      {
        sub_100069748((uint64_t *)&v75, v35, 1, &v65, &v44);
        if (v65.n128_u64[1]) {
          sub_100010A48((std::__shared_weak_count *)v65.n128_u64[1]);
        }
      }
      else
      {
        v35->n128_u64[0] = v31;
        v35->n128_u64[1] = v65.n128_u64[1];
        *(void *)(v34 + 24 * v33 + 16) = v30;
        *(void *)&long long v76 = v33 + 1;
      }
      sub_10002FF28(a3, v30);
    }
    else
    {
      sub_1000661D0(a3, (uint64_t)v47);
      if (v49) {
        sub_100010A48(v49);
      }
      if (v48) {
        sub_100010A48(v48);
      }
    }
  }
  sub_100030FA8((uint64_t *)&v65, &v75, v25, v27);
  sub_10002F8C8((uint64_t)&v70, (uint64_t)&v44);
  sub_10002F51C((uint64_t)&v70, (uint64_t)v41);
  BOOL v36 = sub_10002F3D8((uint64_t)&v44, (uint64_t)v41);
  if (v43) {
    sub_100010A48(v43);
  }
  if (v42) {
    sub_100010A48(v42);
  }
  if (v46) {
    sub_100010A48(v46);
  }
  if (v45) {
    sub_100010A48(v45);
  }
  if (v36) {
    goto LABEL_78;
  }
  sub_10002F8C8((uint64_t)&v70, (uint64_t)&v44);
  sub_10002F51C((uint64_t)&v70, (uint64_t)v41);
  uint64_t v11 = sub_10006621C(a2, v22);
  if (v43) {
    sub_100010A48(v43);
  }
  if (v42) {
    sub_100010A48(v42);
  }
  if (v46) {
    sub_100010A48(v46);
  }
  if (v45) {
    sub_100010A48(v45);
  }
  if ((v11 & 0x8000000000000000) == 0 || !v11)
  {
LABEL_78:
    sub_1000175AC(&v65);
    sub_100014DA8(&v75);
    uint64_t v15 = v39;
    goto LABEL_79;
  }
  sub_1000175AC(&v65);
  sub_100014DA8(&v75);
LABEL_82:
  sub_100030F34((uint64_t)v63);
  return v11;
}

void sub_100066124(_Unwind_Exception *a1)
{
  if (STACK[0x4D8]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x4D8]);
  }
  sub_100014DA8((void *)(v1 - 240));
  sub_100030F34((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000661D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000301A0(a1);
}

void sub_100066208(_Unwind_Exception *a1)
{
  sub_100011F6C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006621C(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 48) && *(void *)(a1 + 40) <= a2) {
    return 0;
  }
  else {
    return sub_100011E8C(*(void **)(*(void *)(a1 + 16) + 16 * a2));
  }
}

unint64_t sub_100066264(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, char a6, BOOL a7, uint64_t a8)
{
  uint64_t v11 = a2;
  unint64_t v13 = *(void *)(a3 + 144);
  long long v96 = (unint64_t *)(a3 + 144);
  unint64_t v14 = a1[5];
  unint64_t v15 = v13 % v14;
  uint64_t v16 = v14 - v13 % v14;
  uint64_t v17 = *(void *)(a3 + 8);
  if (v15) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0;
  }
  *(void *)&long long v177 = *(void *)a3;
  *((void *)&v177 + 1) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  v178[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v178 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v179 = *(void *)(a3 + 48);
  long long v180 = *(_OWORD *)(a3 + 56);
  long long v181 = *(_OWORD *)(a3 + 72);
  long long v182 = *(_OWORD *)(a3 + 88);
  char v183 = *(unsigned char *)(a3 + 104);
  uint64_t v19 = *(void *)(a3 + 120);
  *(void *)&long long v184 = *(void *)(a3 + 112);
  *((void *)&v184 + 1) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  long long v185 = *(_OWORD *)(a3 + 128);
  unint64_t v186 = *v96;
  char v187 = *(unsigned char *)(a3 + 152);
  uint64_t v20 = (std::__shared_weak_count *)a4[1];
  uint64_t v164 = *a4;
  v165 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v166[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v166 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v167 = a4[6];
  long long v21 = *(_OWORD *)(a4 + 9);
  long long v168 = *(_OWORD *)(a4 + 7);
  long long v169 = v21;
  long long v170 = *(_OWORD *)(a4 + 11);
  char v171 = *((unsigned char *)a4 + 104);
  int64_t v22 = (std::__shared_weak_count *)a4[15];
  uint64_t v172 = a4[14];
  v173 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = a4[18];
  int v23 = a4 + 18;
  long long v174 = *((_OWORD *)a4 + 8);
  uint64_t v175 = v24;
  char v176 = *((unsigned char *)a4 + 152);
  unint64_t v25 = a1[5];
  unint64_t v26 = *v96;
  uint64_t v27 = a4[18] - *v96;
  unint64_t v28 = v27 & ~(v27 >> 63);
  if (v28 <= v25) {
    unint64_t v28 = a1[5];
  }
  if (v27 <= 0) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v28;
  }
  *(void *)&long long v162 = v26 / v25;
  *((void *)&v162 + 1) = (v25 + v26 + v29 - 1) / v25;
  LOBYTE(v163) = 2;
  sub_100064EF8((uint64_t)a1, a2, a5, (uint64_t)&v162, (uint64_t)v218);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3] - a1[2]) >> 4) - 1 == a5)
  {
    unint64_t v30 = operator new(0x20uLL);
    *(void *)&v118[0] = v30 + 4;
    *(_OWORD *)unint64_t v30 = v162;
    v30[2] = v163;
    *((_DWORD *)v30 + 6) = 1;
    *(void *)&long long __p = v30;
    *((void *)&__p + 1) = v30 + 4;
    sub_1000A8530((uint64_t)v218, (uint64_t)&__p, (uint64_t)&v202);
    sub_100105E68((uint64_t)v218, (uint64_t)&v202);
    sub_100058E3C(&v205);
    uint64_t v31 = *(void *)&v203[16];
    *(void *)&v203[16] = 0;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 40))(v31);
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  sub_100058EC0((uint64_t)v218, (uint64_t)&v158);
  uint64_t v98 = v13;
  char v94 = v23;
  uint64_t v101 = a8;
  uint64_t v102 = (uint64_t)a1;
  sub_100059040((uint64_t)v218, (uint64_t)v157);
  unint64_t v32 = 0;
  unint64_t v95 = a5 + 1;
  uint64_t v99 = v11;
  unint64_t v97 = a5;
  while (1)
  {
    if (!sub_100105B00((uint64_t)&v158, (uint64_t)v157))
    {
      int v65 = 2;
      goto LABEL_175;
    }
    unint64_t v33 = v32;
    unint64_t v34 = v159;
    uint64_t v35 = v160;
    unsigned int v36 = v161;
    unint64_t v37 = v186;
    unint64_t v38 = *(void *)(v102 + 40);
    unint64_t v39 = v186 / v38;
    if ((v161 & 2) != 0) {
      unint64_t v40 = v159;
    }
    else {
      unint64_t v40 = v159 + 1;
    }
    v155[0] = v186 / v38;
    v155[1] = v40;
    char v156 = 2;
    unint64_t v41 = v40 - v39;
    if (v40 <= v39) {
      uint64_t v42 = qword_1001C45E0;
    }
    else {
      uint64_t v42 = v40 - v39;
    }
    if (!v42)
    {
      unint64_t v32 = v33;
      goto LABEL_99;
    }
    unint64_t v43 = sub_100064A70(v102, v11, (uint64_t)&v177, (uint64_t)&v164, v95, v155, a6 & 1, a7, v101, v218);
    unint64_t v188 = v43;
    uint64_t v189 = v44;
    if ((v43 & 0x8000000000000000) != 0 && v43)
    {
      int v65 = 1;
      unint64_t v32 = v33;
      goto LABEL_175;
    }
    uint64_t v45 = v98;
    if (v44 < v37) {
      uint64_t v45 = v44;
    }
    uint64_t v98 = v45;
    unint64_t v46 = v186;
    if (v44 >= v186)
    {
      BOOL v47 = v44 + v43 > *(void *)(v102 + 40) * (v40 - 1);
      if (v43 <= ((*v94 - *v96) & ~((uint64_t)(*v94 - *v96) >> 63)))
      {
        a7 = 0;
        goto LABEL_77;
      }
    }
    else
    {
      BOOL v47 = v44 + v43 > *(void *)(v102 + 40) * (v40 - 1);
    }
    long long v48 = v177;
    long long v144 = v177;
    if (*((void *)&v177 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v145[0] = v178[0];
    *(_OWORD *)((char *)v145 + 9) = *(_OWORD *)((char *)v178 + 9);
    uint64_t v49 = v179;
    uint64_t v50 = v180;
    uint64_t v146 = v179;
    long long v147 = v180;
    long long v148 = v181;
    long long v149 = v182;
    char v150 = v183;
    uint64_t v51 = *((void *)&v180 + 1);
    uint64_t v53 = (std::__shared_weak_count *)*((void *)&v184 + 1);
    uint64_t v52 = v184;
    long long v151 = v184;
    if (*((void *)&v184 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v152 = v185;
    unint64_t v153 = v186;
    char v154 = v187;
    uint64_t v54 = v189;
    long long __p = v48;
    if (*((void *)&v48 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v118[0] = v145[0];
    *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)((char *)v145 + 9);
    uint64_t v119 = v49;
    *(void *)&long long v120 = v50;
    long long v121 = v148;
    long long v122 = v149;
    char v123 = v150;
    *((void *)&v120 + 1) = v51;
    uint64_t v124 = v52;
    long long v125 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v126 = v152;
    unint64_t v127 = v153;
    char v128 = v154;
    sub_100030B34((uint64_t)&__p, (uint64_t)&v164, v54, v43, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v202);
    if (v125) {
      sub_100010A48(v125);
    }
    if (*((void *)&__p + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&__p + 1));
    }
    sub_1000557A8(v101);
    sub_100030E20(v101, (uint64_t)&v202);
    *(unsigned char *)(v101 + 528) = 1;
    if (v217) {
      sub_100010A48(v217);
    }
    if (v216) {
      sub_100010A48(v216);
    }
    if (v215) {
      sub_100010A48(v215);
    }
    if (v214) {
      sub_100010A48(v214);
    }
    if (v213) {
      sub_100010A48(v213);
    }
    if ((void)v206) {
      sub_100010A48((std::__shared_weak_count *)v206);
    }
    if (v53) {
      sub_100010A48(v53);
    }
    if (*((void *)&v48 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v48 + 1));
    }
    sub_10002F8C8(v101, (uint64_t)&v202);
    sub_10003AA88((uint64_t)&v177, &v202);
    if (*((void *)&v209 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v209 + 1));
    }
    if (*((void *)&v202 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v202 + 1));
    }
    sub_10002F51C(v101, (uint64_t)&v202);
    sub_10003AA88((uint64_t)&v164, &v202);
    if (*((void *)&v209 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v209 + 1));
    }
    if (*((void *)&v202 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v202 + 1));
    }
    a7 = 1;
    unint64_t v46 = v186;
LABEL_77:
    long long v133 = v177;
    if (*((void *)&v177 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)long long v134 = v178[0];
    *(_OWORD *)&v134[9] = *(_OWORD *)((char *)v178 + 9);
    long long v136 = v180;
    long long v137 = v181;
    long long v138 = v182;
    char v139 = v183;
    uint64_t v135 = v179;
    long long v140 = v184;
    if (*((void *)&v184 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v141 = v185;
    unint64_t v142 = v186;
    char v143 = v187;
    if (a7) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = v41 * *(void *)(v102 + 40);
    }
    unint64_t v56 = v55 - v189 + *(void *)&v134[8];
    if (v188 < v56) {
      unint64_t v56 = v188;
    }
    if (v55) {
      unint64_t v57 = v56;
    }
    else {
      unint64_t v57 = v188;
    }
    sub_10002FF28((uint64_t)&v133, v57);
    sub_10002F290(&v136);
    long long v202 = v133;
    long long v133 = 0uLL;
    *(_OWORD *)v203 = *(_OWORD *)v134;
    *(_OWORD *)&v203[9] = *(_OWORD *)&v134[9];
    uint64_t v204 = v135;
    long long v205 = v136;
    long long v206 = v137;
    long long v207 = v138;
    char v208 = v139;
    long long v209 = v140;
    long long v140 = 0uLL;
    long long v210 = v141;
    char v212 = v143;
    unint64_t v211 = v142;
    sub_10003AA88((uint64_t)&v177, &v202);
    if (*((void *)&v209 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v209 + 1));
    }
    if (*((void *)&v202 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v202 + 1));
    }
    if (*((void *)&v140 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v140 + 1));
    }
    if (*((void *)&v133 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v133 + 1));
    }
    unint64_t v37 = v186;
    unint64_t v32 = v186 - v46 + v33;
    if (!v47) {
      break;
    }
    uint64_t v18 = 0;
    a6 = 0;
    unint64_t v38 = *(void *)(v102 + 40);
    uint64_t v11 = v99;
LABEL_99:
    unint64_t v58 = (v36 & 1) + v35 - v34 + (int)(((v36 >> 1) & 1) - 1);
    unint64_t v59 = v38 * v58 - v18;
    if (v175 - v37 < v59) {
      unint64_t v59 = v175 - v37;
    }
    if ((void)v169 - (void)v181 < v59)
    {
      int v65 = 4;
      goto LABEL_175;
    }
    *(void *)&long long v202 = v38 * v40;
    *((void *)&v202 + 1) = v38 * (v58 + v40);
    v203[0] = 2;
    sub_1000302E0((uint64_t)&v177, (uint64_t)&v202, (uint64_t)&v164, (uint64_t)&__p);
    unint64_t v188 = -78;
    if (((uint64_t)(*(void *)(v11 + 24) - *(void *)(v11 + 16)) >> 4) - 1 != v97 || *(unsigned char *)(v11 + 56) == 0 || a7)
    {
LABEL_106:
      uint64_t v62 = sub_100011DAC(*(void *)(*(void *)(v11 + 16) + 16 * v97));
      uint64_t v64 = v63;
      unint64_t v188 = v62;
      uint64_t v189 = v63;
      goto LABEL_107;
    }
    uint64_t v60 = *(void *)(*(void *)(v102 + 16) + 48 * v97 + 24);
    *(_OWORD *)v203 = 0u;
    long long v202 = 0u;
    (*(void (**)(long long *__return_ptr))(*(void *)v60 + 72))(&v202);
    if ((void)v202)
    {
      unint64_t v61 = v202 + ((v132 - v127) & ~((uint64_t)(v132 - v127) >> 63)) - 1;
      if (v130 - (uint64_t)v121 < 1
                                - ((void)v202
                                 + ((v132 - v127) & ~((uint64_t)(v132 - v127) >> 63)))
                                + v61 / (unint64_t)v202 * (void)v202
                                + *((void *)&v202 + 1) * (void)v202
                                + v61)
        goto LABEL_106;
    }
    else if ((a6 & 1) == 0)
    {
      goto LABEL_106;
    }
    unint64_t v76 = sub_100011DAC(*(void *)(*(void *)(*(void *)(v11 + 16) + 16 * v97) + 16));
    uint64_t v62 = v76;
    uint64_t v64 = v77;
    unint64_t v188 = v76;
    uint64_t v189 = v77;
    a7 = v77 < v127 || v76 > ((*v94 - *v96) & ~((uint64_t)(*v94 - *v96) >> 63));
LABEL_107:
    if (v62 < 0 && v62)
    {
      int v65 = 1;
    }
    else
    {
      unint64_t v66 = v127;
      uint64_t v67 = v132;
      if (a6)
      {
        if (a7)
        {
          uint64_t v68 = *v94 - *v96;
          if (v68 <= v62) {
            uint64_t v68 = v62;
          }
          long long v69 = v177;
          if (*((void *)&v177 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(_OWORD *)uint64_t v110 = v178[0];
          *(_OWORD *)&v110[9] = *(_OWORD *)((char *)v178 + 9);
          uint64_t v70 = v179;
          uint64_t v71 = v180;
          long long v111 = v181;
          long long v112 = v182;
          char v113 = v183;
          uint64_t v72 = *((void *)&v180 + 1);
          long long v73 = v184;
          if (*((void *)&v184 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v114 = v185;
          unint64_t v115 = v186;
          char v116 = v187;
          long long v190 = v69;
          if (*((void *)&v69 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v191[0] = *(_OWORD *)v110;
          *(_OWORD *)((char *)v191 + 9) = *(_OWORD *)&v110[9];
          uint64_t v192 = v70;
          uint64_t v193 = v71;
          long long v195 = v111;
          long long v196 = v112;
          char v197 = v113;
          uint64_t v194 = v72;
          long long v198 = v73;
          if (*((void *)&v73 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v73 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v199 = v114;
          unint64_t v200 = v115;
          char v201 = v116;
          sub_100030B34((uint64_t)&v190, (uint64_t)&v164, v64, v68 & ~(v68 >> 63), 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v202);
          if (*((void *)&v198 + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v198 + 1));
          }
          if (*((void *)&v190 + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v190 + 1));
          }
          sub_1000557A8(v101);
          sub_100030E20(v101, (uint64_t)&v202);
          *(unsigned char *)(v101 + 528) = 1;
          if (v217) {
            sub_100010A48(v217);
          }
          if (v216) {
            sub_100010A48(v216);
          }
          if (v215) {
            sub_100010A48(v215);
          }
          if (v214) {
            sub_100010A48(v214);
          }
          if (v213) {
            sub_100010A48(v213);
          }
          if ((void)v206) {
            sub_100010A48((std::__shared_weak_count *)v206);
          }
          if (*((void *)&v73 + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v73 + 1));
          }
          if (*((void *)&v69 + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v69 + 1));
          }
          sub_10002F8C8(v101, (uint64_t)&v202);
          sub_10003AA88((uint64_t)&v177, &v202);
          if (*((void *)&v209 + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v209 + 1));
          }
          if (*((void *)&v202 + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v202 + 1));
          }
          sub_10002F51C(v101, (uint64_t)&v202);
          sub_10003AA88((uint64_t)&v164, &v202);
          if (*((void *)&v209 + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v209 + 1));
          }
          if (*((void *)&v202 + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v202 + 1));
          }
          a7 = 1;
          unint64_t v74 = v188;
        }
        else
        {
          a7 = 0;
          unint64_t v74 = v62;
        }
        uint64_t v98 = v64;
      }
      else if (v64 == v186)
      {
        unint64_t v74 = v62;
      }
      else
      {
        unint64_t v74 = sub_100143D4C((uint64_t)&v177, (uint64_t)&v164, *(void *)(v102 + 40) * v58, &v188);
        unint64_t v188 = v74;
        uint64_t v189 = v75;
        a7 = v74 != *(void *)(v102 + 40) * v58;
      }
      sub_10002FF28((uint64_t)&v177, v74);
      uint64_t v18 = 0;
      a6 = 0;
      v32 += v188;
      int v65 = 4 * (v64 + v62 < ((v67 - v66) & ~((uint64_t)(v67 - v66) >> 63)) + v66);
    }
    uint64_t v11 = v99;
    if (v131) {
      sub_100010A48(v131);
    }
    if (v129) {
      sub_100010A48(v129);
    }
    if (v125) {
      sub_100010A48(v125);
    }
    if (*((void *)&__p + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&__p + 1));
    }
    if (v65) {
      goto LABEL_175;
    }
    sub_100105D68(&v158);
  }
  a6 = 0;
  int v65 = 4;
  uint64_t v11 = v99;
LABEL_175:
  uint64_t v78 = v157[0];
  v157[0] = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 24))(v78);
  }
  uint64_t v79 = v158;
  uint64_t v158 = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 24))(v79);
  }
  if (v65 != 2)
  {
    if (v65 != 4) {
      goto LABEL_228;
    }
LABEL_227:
    unint64_t v188 = v32;
    uint64_t v189 = v98;
    goto LABEL_228;
  }
  if (sub_10002F3D8((uint64_t)&v177, (uint64_t)&v164)) {
    goto LABEL_227;
  }
  if (sub_100067694((uint64_t)v218))
  {
    uint64_t v81 = v101;
    uint64_t v80 = v102;
  }
  else
  {
    sub_100105EF8((uint64_t)v218, (uint64_t)&v202);
    uint64_t v81 = v101;
    uint64_t v80 = v102;
    if (*(void *)(v102 + 40) * *((void *)&v202 + 1) >= *v94) {
      goto LABEL_227;
    }
  }
  unint64_t v82 = sub_100064BA4(v80, v11, (uint64_t)&v177, (uint64_t)&v164, v95, a6 & 1, a7, v81, v218);
  unint64_t v83 = v82;
  uint64_t v85 = v84;
  unint64_t v188 = v82;
  uint64_t v189 = v84;
  if ((v82 & 0x8000000000000000) == 0 || !v82)
  {
    if (a6)
    {
      long long v86 = v177;
      if (*((void *)&v177 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)__uint32_t v103 = v178[0];
      *(_OWORD *)&v103[9] = *(_OWORD *)((char *)v178 + 9);
      long long v104 = v181;
      uint64_t v87 = v179;
      long long v88 = v180;
      uint64_t v89 = v184;
      long long v105 = v182;
      char v106 = v183;
      uint64_t v90 = (std::__shared_weak_count *)*((void *)&v184 + 1);
      if (*((void *)&v184 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v107 = v185;
      unint64_t v108 = v186;
      char v109 = v187;
      uint64_t v91 = v189;
      long long __p = v86;
      if (*((void *)&v86 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v118[0] = *(_OWORD *)v103;
      *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)&v103[9];
      long long v121 = v104;
      uint64_t v119 = v87;
      long long v120 = v88;
      long long v122 = v105;
      char v123 = v106;
      uint64_t v124 = v89;
      long long v125 = v90;
      if (v90) {
        atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v126 = v107;
      unint64_t v127 = v108;
      char v128 = v109;
      sub_100030B34((uint64_t)&__p, (uint64_t)&v164, v91, v82, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v202);
      if (v125) {
        sub_100010A48(v125);
      }
      if (*((void *)&__p + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&__p + 1));
      }
      sub_1000557A8(v101);
      sub_100030E20(v101, (uint64_t)&v202);
      *(unsigned char *)(v101 + 528) = 1;
      if (v217) {
        sub_100010A48(v217);
      }
      if (v216) {
        sub_100010A48(v216);
      }
      if (v215) {
        sub_100010A48(v215);
      }
      if (v214) {
        sub_100010A48(v214);
      }
      if (v213) {
        sub_100010A48(v213);
      }
      if ((void)v206) {
        sub_100010A48((std::__shared_weak_count *)v206);
      }
      if (v90) {
        sub_100010A48(v90);
      }
      if (*((void *)&v86 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v86 + 1));
      }
      sub_10002F8C8(v101, (uint64_t)&v202);
      sub_10003AA88((uint64_t)&v177, &v202);
      if (*((void *)&v209 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v209 + 1));
      }
      if (*((void *)&v202 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v202 + 1));
      }
      sub_10002F51C(v101, (uint64_t)&v202);
      sub_10003AA88((uint64_t)&v164, &v202);
      if (*((void *)&v209 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v209 + 1));
      }
      if (*((void *)&v202 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v202 + 1));
      }
      unint64_t v83 = v188;
      uint64_t v98 = v85;
    }
    sub_10002FF28((uint64_t)&v177, v83);
    v32 += v188;
    goto LABEL_227;
  }
LABEL_228:
  sub_100058E3C(v220);
  uint64_t v92 = v219;
  uint64_t v219 = 0;
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 40))(v92);
  }
  if (v173) {
    sub_100010A48(v173);
  }
  if (v165) {
    sub_100010A48(v165);
  }
  if (*((void *)&v184 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v184 + 1));
  }
  if (*((void *)&v177 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v177 + 1));
  }
  return v188;
}

void sub_100067500(_Unwind_Exception *a1)
{
  sub_1000651C0(v1 - 192);
  sub_100011F6C((uint64_t)&STACK[0x5A0]);
  sub_100011F6C((uint64_t)&STACK[0x640]);
  _Unwind_Resume(a1);
}

BOOL sub_100067694(uint64_t a1)
{
  sub_100058EC0(a1, (uint64_t)v7);
  sub_100059040(a1, (uint64_t)v6);
  BOOL v2 = sub_100105A40((uint64_t)v7, (uint64_t)v6);
  uint64_t v3 = v6[0];
  v6[0] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = v7[0];
  v7[0] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return v2;
}

void sub_100067744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    sub_100146F18();
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100067798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3 == v4) {
    return 1;
  }
  uint64_t v7 = v3 + 48;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 - 40) + 56))(*(void *)(v7 - 40), a2, a3);
    if (result) {
      BOOL v9 = v7 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v7 += 48;
  }
  while (!v9);
  return result;
}

uint64_t sub_10006781C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)v2
    || !(*(unsigned int (**)(void))(**(void **)(v2 + 8) + 80))(*(void *)(v2 + 8))
    || **(_DWORD **)(a1 + 16))
  {
    return 0;
  }
  unint64_t v6 = **(void ***)(a2 + 16);

  return sub_100013570(v6);
}

void *sub_1000678C8(void *a1, uint64_t a2, uint64_t a3)
{
  sub_100003BA4(&__p, "com.apple.di_stackable.cache.flusher");
  sub_1000471B8(a1);
  if (v8 < 0) {
    operator delete(__p);
  }
  sub_100047504(a1, a2, a3, (uint64_t)(a1 + 8));
  return a1;
}

void sub_100067948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1000445D4(v15);
  _Unwind_Resume(a1);
}

double sub_100067974@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  v4[0] = *(void *)(a1 + 40);
  v4[1] = v2;
  char v5 = 2;
  *(void *)&double result = sub_1000679B0(a1, (uint64_t)v4, 0, a2).n128_u64[0];
  return result;
}

__n128 sub_1000679B0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v6 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 24) - v7) >> 4) == a3) {
    goto LABEL_48;
  }
  unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11 || *(void *)a2 + 1 >= v11) {
      goto LABEL_47;
    }
LABEL_5:
    if ((v10 & 1) + (uint64_t)(int)(((v10 >> 1) & 1) - 1) - v12 + v11) {
      goto LABEL_6;
    }
LABEL_48:
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(void *)(a4 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a4 + 24) = 0;
    return result;
  }
  if (v10 != 3)
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11) {
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  unint64_t v12 = *(void *)a2;
  unint64_t v11 = *(void *)(a2 + 8);
  if (v11 >= *(void *)a2) {
    goto LABEL_5;
  }
LABEL_47:
  if (!qword_1001C45E0) {
    goto LABEL_48;
  }
LABEL_6:
  uint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v7 + 48 * a3 + 8) + 32))(*(void *)(v7 + 48 * a3 + 8));
  unint64_t v15 = *(void *)a2;
  unint64_t v16 = *(void *)(a2 + 8);
  if (*(void *)a2 >= v14) {
    unint64_t v17 = v14;
  }
  else {
    unint64_t v17 = *(void *)a2;
  }
  if (v16 >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = *(void *)(a2 + 8);
  }
  uint64_t v19 = *(void *)(*(void *)(v13 + 16) + 16 * a3);
  v46[0] = *(void *)(*(void *)(v6 + 16) + 48 * a3 + 8);
  v46[1] = v17;
  v46[2] = v18;
  char v47 = 2;
  uint64_t v48 = 0;
  uint64_t v49 = v19;
  int v50 = 7;
  v51[0] = off_100199578;
  v51[3] = v51;
  if (v14 < v16)
  {
    unint64_t v20 = v14;
    long long v21 = operator new(0x20uLL);
    unint64_t v40 = v21 + 4;
    unint64_t v41 = (char *)(v21 + 4);
    void *v21 = v20;
    v21[1] = v16;
    *((unsigned char *)v21 + 16) = 2;
    *((_DWORD *)v21 + 6) = 2;
    long long __p = v21;
    sub_1000A8530((uint64_t)v46, (uint64_t)&__p, (uint64_t)v42);
    sub_100105E68((uint64_t)v46, (uint64_t)v42);
    sub_100058E3C(v45);
    uint64_t v22 = v44;
    uint64_t v44 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
    }
    if (__p)
    {
      unint64_t v40 = __p;
      operator delete(__p);
    }
    unint64_t v15 = *(void *)a2;
  }
  if ((*(unsigned char *)(a2 + 16) & 2) != 0) {
    unint64_t v23 = v15;
  }
  else {
    unint64_t v23 = v15 + 1;
  }
  sub_100058EC0((uint64_t)v46, (uint64_t)v42);
  int v24 = v44;
  uint64_t v25 = v42[0];
  v42[0] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
  }
  sub_100058EC0((uint64_t)v46, (uint64_t)v42);
  sub_100059040((uint64_t)v46, (uint64_t)&__p);
  uint64_t v26 = a3 + 1;
  while (sub_100105B00((uint64_t)v42, (uint64_t)&__p))
  {
    unint64_t v27 = v43;
    if (v44)
    {
      if (v44 != v24) {
        break;
      }
    }
    else
    {
      v34[0] = v23;
      v34[1] = v43;
      char v35 = 2;
      sub_1000679B0(&v36, a1, v34, v26);
      if (v24)
      {
        if (v38 != v24) {
          break;
        }
      }
      else
      {
        int v24 = v38;
      }
      unint64_t v23 = v37;
      if (v37 != v27) {
        break;
      }
    }
    sub_100105D68(v42);
    unint64_t v23 = v27;
  }
  unint64_t v28 = __p;
  long long __p = 0;
  if (v28) {
    (*(void (**)(void *))(*(void *)v28 + 24))(v28);
  }
  uint64_t v29 = v42[0];
  v42[0] = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  }
  unint64_t v30 = *(void *)a2;
  if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
    ++v30;
  }
  *(void *)a4 = v30;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = v24;
  sub_100058E3C(v51);
  uint64_t v32 = v48;
  uint64_t v48 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 40))(v32);
  }
  return result;
}

void sub_100067DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1000651C0((uint64_t)&a22);
  if (__p) {
    operator delete(__p);
  }
  sub_1000651C0(v22 - 176);
  _Unwind_Resume(a1);
}

void sub_100067E68()
{
}

void sub_100067EE8()
{
}

uint64_t sub_100067F04(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_100067F0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 8) + 32))();
}

uint64_t sub_100067F38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 40))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

void sub_100067FB4()
{
}

void sub_100068028()
{
}

uint64_t sub_10006804C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 24) + 64))();
}

uint64_t sub_100068078(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 24) - 24) + 72))();
}

uint64_t sub_1000680A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 80))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

uint64_t sub_100068120()
{
  return 1;
}

uint64_t sub_100068128(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

void sub_100068130()
{
}

void sub_1000681C0()
{
}

void sub_10006820C()
{
}

uint64_t sub_100068230(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = a4[18];
  uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  if (v8 > (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v9) {
    return -5;
  }
  v12[0] = 0;
  unsigned char v12[528] = 0;
  unint64_t v10 = sub_100066264(a1, a2, a3, a4, 0, 1, 0, (uint64_t)v12);
  sub_100030F34((uint64_t)v12);
  return v10;
}

void sub_100068328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100030F34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006833C(uint64_t a1, uint64_t a2)
{
  return sub_100063E00(*(uint64_t (****)(void))(*(void *)(*(void *)a2 + 16) + 8));
}

void sub_10006834C()
{
}

uint64_t sub_100068358()
{
  return 0;
}

uint64_t sub_100068364(uint64_t a1, uint64_t *a2)
{
  return sub_1000EBA4C(*a2);
}

uint64_t sub_10006836C(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)a2 + 560) + 136);
}

uint64_t sub_10006837C(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 72);
}

uint64_t sub_100068388()
{
  return 0;
}

uint64_t sub_100068394(uint64_t a1, void *a2)
{
  return sub_1000683A0(*a2 + 16);
}

uint64_t sub_1000683A0(uint64_t a1)
{
  CFUUIDRef v3 = (const __CFUUID *)(*(uint64_t (**)(void))(*(void *)a1 + 48))();
  uint64_t v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v3);
  sub_10002B088((const void **)&v3);
  return v1;
}

void sub_1000683F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002B088((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100068404()
{
  return 0;
}

uint64_t sub_100068410()
{
  return 0;
}

uint64_t sub_10006841C()
{
  return 0;
}

uint64_t sub_100068428(uint64_t a1, void **a2)
{
  return sub_1000EBA40(*a2);
}

uint64_t sub_100068430()
{
  return 0;
}

uint64_t sub_10006843C()
{
  return 0;
}

uint64_t sub_100068448()
{
  return 0;
}

uint64_t sub_100068454()
{
  return 0;
}

uint64_t sub_100068460(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 40) = *(void *)(a2 + 40);
  return result;
}

uint64_t *sub_1000684A4(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 48) = *(_DWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_100068538(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_100010CDC();
  }
  return operator new(48 * a2);
}

void sub_100068580(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    sub_100010A48(v3);
  }
}

uint64_t sub_1000685D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_100068580(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100068620(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_100047730(a1 + 64);
    uint64_t v2 = (void **)(a1 + 24);
    sub_10001A830(&v2);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
}

uint64_t sub_10006867C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_100047730(a1 + 64);
    uint64_t v3 = (void **)(a1 + 24);
    sub_10001A830(&v3);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void sub_1000686D8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_100068580(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10006875C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  long long v5 = *(_OWORD *)(a2 + 1);
  *(void *)(a1 + 24) = a2[3];
  *(_OWORD *)(a1 + 8) = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 136))(v4);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 56) = off_100199578;
  *(void *)(a1 + 80) = a1 + 56;
  sub_100068828((void *)(a1 + 56), (uint64_t)(a2 + 7));
  return a1;
}

void sub_100068804(_Unwind_Exception *a1)
{
  sub_100058E3C(v2);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v4) {
    sub_100146C04(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_100068828(void *a1, uint64_t a2)
{
  sub_10006889C((uint64_t)v4, a2);
  sub_100068934(v4, a1);
  sub_100058E3C(v4);
  return a1;
}

uint64_t sub_10006889C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100068934(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100068B94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100003744(a1);
}

BOOL sub_100068BA0(unint64_t *a1, unint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (v3 >= *a1) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (*a1 < v3) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3) {
      goto LABEL_21;
    }
  }
  if (!*((unsigned char *)a2 + 16))
  {
    unint64_t v7 = a2[1];
    if (*a2 < v7 && *a2 + 1 < v7) {
      goto LABEL_21;
    }
    return 1;
  }
  if (*((unsigned char *)a2 + 16) == 3)
  {
    if (a2[1] < *a2) {
      return 1;
    }
  }
  else if (*a2 >= a2[1])
  {
    return 1;
  }
LABEL_21:
  if ((v2 & 2) != 0) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = v4 + 1;
  }
  unint64_t v10 = *a2;
  if ((a2[2] & 2) == 0) {
    ++v10;
  }
  return v10 == v9 && (a2[2] & 1) + a2[1] == (v2 & 1) + v3;
}

uint64_t sub_100068C78(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_10019B9A0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (a3 == 1)
  {
    uint64_t v7 = sub_100063EF0(a1, a2);
    char v8 = 0;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v9;
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    char v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 24) - 24) + 96))(*(void *)(*(void *)(a2 + 24) - 24));
  }
  *(unsigned char *)(a1 + 56) = v8;
  uint64_t v10 = *(void *)(a2 + 16);
  for (uint64_t i = *(void *)(a2 + 24); v10 != i; v10 += 48)
  {
    if (a3 == 1
      && -1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4) == (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4)
    {
      uint64_t v12 = *(void *)(v10 + 32);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v10 + 8) + 136))(*(void *)(v10 + 8));
    sub_100069018(v6, &v15);
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
    }
  }
  return a1;
}

void sub_100068EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100017D2C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100068F00(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_10001796C();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_100017984(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    unint64_t v16 = (uint64_t *)&v13[16 * v9];
    unint64_t v18 = &v13[16 * v12];
    sub_1000691F4(v16, a2);
    unint64_t v17 = v16 + 2;
    sub_100069324(a1, &v15);
    uint64_t v8 = a1[1];
    sub_100017ACC(&v15);
  }
  else
  {
    sub_1000691F4(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_100068FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100069018(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_10001796C();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_100017984(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    unint64_t v16 = (uint64_t *)&v13[16 * v9];
    unint64_t v18 = &v13[16 * v12];
    sub_100069618(v16, a2);
    unint64_t v17 = v16 + 2;
    sub_100069324(a1, &v15);
    uint64_t v8 = a1[1];
    sub_100017ACC(&v15);
  }
  else
  {
    sub_100069618(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_100069110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100069130(uint64_t a1)
{
  *(void *)a1 = off_10019B9A0;
  unint64_t v3 = (void **)(a1 + 16);
  sub_100017D2C(&v3);
  return a1;
}

void sub_100069188(uint64_t a1)
{
  *(void *)a1 = off_10019B9A0;
  uint64_t v1 = (void **)(a1 + 16);
  sub_100017D2C(&v1);
  operator delete();
}

uint64_t *sub_1000691F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_100069278(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000692B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_1000692E0(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t sub_100069324(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10006939C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10006939C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100069430((uint64_t)v12);
  return v10;
}

uint64_t sub_100069430(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100017A88(a1);
  }
  return a1;
}

unint64_t sub_100069468(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return sub_10006CB50(a1[1], a1, a2, a3);
}

uint64_t sub_10006947C(uint64_t a1)
{
  *(void *)a1 = off_10019BA58;
  unint64_t v3 = (void **)(a1 + 16);
  sub_100069540(&v3);
  return a1;
}

void sub_1000694D4(uint64_t a1)
{
  *(void *)a1 = off_10019BA58;
  uint64_t v1 = (void **)(a1 + 16);
  sub_100069540(&v1);
  operator delete();
}

void sub_100069540(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        sub_1000695C4(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1000695C4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v4 = (void **)(a1 + 112);
  sub_100017D2C(&v4);
  unint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
}

uint64_t *sub_100069618(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_10006969C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000696D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_100069704(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void sub_100069748(uint64_t *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000697F8((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  char v13 = (__n128 *)operator new(24 * v11);
  sub_100069874((uint64_t)a1, v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_1000697F8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x555555555555555;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x555555555555555 - v4 < a2 - v4 + v3) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x555555555555555) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_100069874(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  uint64_t v10 = *(__n128 **)a1;
  sub_100069948(a1, *(__n128 **)a1, a4, (__n128 *)(*(void *)a1 + 24 * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count **)&v10->n128_u64[1];
      do
      {
        if (*v12) {
          sub_100010A48(*v12);
        }
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }
  uint64_t v13 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = a3;
}

void sub_100069924(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100069948(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, uint64_t a6, __n128 *a7)
{
  while (a2 != a3)
  {
    *a5 = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a5[1].n128_u64[0] = a2[1].n128_u64[0];
    a5 = (__n128 *)((char *)a5 + 24);
    a2 = (__n128 *)((char *)a2 + 24);
  }
  __n128 result = *a7;
  *a5 = *a7;
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a5[1].n128_u64[0] = a7[1].n128_u64[0];
  if (a3 != a4)
  {
    unint64_t v8 = (__n128 *)((char *)a5 + 24 * a6);
    do
    {
      __n128 result = *a3;
      *unint64_t v8 = *a3;
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      v8[1].n128_u64[0] = a3[1].n128_u64[0];
      a3 = (__n128 *)((char *)a3 + 24);
      unint64_t v8 = (__n128 *)((char *)v8 + 24);
    }
    while (a3 != a4);
  }
  return result;
}

void sub_1000699BC(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v5 = operator new(0x68uLL);
  sub_100069A20((uint64_t)v5, a2, a3);
}

void sub_100069A0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100069A20(uint64_t a1, uint64_t a2, char *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_10019BB10;
  char v4 = *a3;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = off_100195DD0;
  *(void *)(a1 + 40) = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 72))(a2);
  *(unsigned char *)(a1 + 80) = v4;
  sub_100069B7C((void *)(a1 + 88));
}

void sub_100069ACC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100069AE0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10019BB10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100069B00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10019BB10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100069B54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void sub_100069B7C(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_100069BE0(void *a1)
{
}

void sub_100069BEC(_Unwind_Exception *a1)
{
}

void sub_100069C04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100069C40(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_10019BBA0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_100069C84()
{
  uint64_t v1 = &stru_10019BBD0;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1001C4F90, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&qword_1001C4F90, &v2, (void (__cdecl *)(void *))sub_100072AC8);
  }
  return qword_1001C5058;
}

void sub_100069CF8(id a1)
{
}

void sub_100069D54(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v22 = (std::mutex *)(a1 + 24);
  char v23 = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  unint64_t v8 = sub_10006F090(a1, (void **)a2);
  if ((void **)(a1 + 8) != v8)
  {
    *(void *)a4 = v8[7];
    char v9 = 1;
LABEL_19:
    *(unsigned char *)(a4 + 16) = v9;
    goto LABEL_20;
  }
  sub_100042B98((uint64_t)&v22);
  if (!a3 || !os_variant_allows_internal_security_policies())
  {
    *(void *)&long long v20 = "*, diskimage_uio::diskimage_err> PluginsManager::get_plugin_ptr(const std::string &, BOOL)";
    *((void *)&v20 + 1) = 63;
    int v21 = 16;
    sub_10006A0F8(v24, &v20);
    sub_100003DF0(v27, (uint64_t)"Plugin ", 7);
    int v15 = *(char *)(a2 + 23);
    if (v15 >= 0) {
      unint64_t v16 = (void *)a2;
    }
    else {
      unint64_t v16 = *(void **)a2;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    sub_100003DF0(v27, (uint64_t)v16, v17);
    sub_100003DF0(v27, (uint64_t)" is not registered", 18);
    std::ostream::~ostream();
    sub_10006F4E0((uint64_t)v24);
    std::ios::~ios();
    unint64_t v18 = std::generic_category();
    char v9 = 0;
    *(void *)a4 = 45;
    *(void *)(a4 + 8) = v18;
    goto LABEL_19;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C4FB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001C4FB0))
  {
    sub_100003BA4(v24, "com.apple.raw");
    v24[3] = sub_1000923FC;
    v24[4] = 0;
    sub_100003BA4(v25, "com.apple.diskimage-plugin.nbd");
    v25[3] = sub_10006D6A4;
    v25[4] = 0;
    sub_100003BA4(v26, "com.apple.diskimage-plugin.amber");
    v26[3] = sub_10006D6A4;
    v26[4] = 16;
    sub_10006EB58((uint64_t)&qword_1001C4F98, v24, 3);
    for (uint64_t i = 0; i != -15; i -= 5)
    {
      if (SHIBYTE(v26[i + 2]) < 0) {
        operator delete((void *)v26[i]);
      }
    }
    __cxa_atexit((void (*)(void *))sub_10006D71C, &qword_1001C4F98, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001C4FB0);
  }
  if (sub_10006F090((uint64_t)&qword_1001C4F98, (void **)a2) != (void **)&unk_1001C4FA0)
  {
    v24[0] = (void *)a2;
    uint64_t v10 = sub_10006F110(&qword_1001C4F98, (void **)a2, (uint64_t)&unk_100164F68, (long long **)v24);
    int v11 = *(char *)(a2 + 23);
    uint64_t v12 = *(char **)a2;
    uint64_t v13 = ((uint64_t (*)(uint64_t))v10[7])(v10[8]);
    if (v11 >= 0) {
      long long v14 = (char *)a2;
    }
    else {
      long long v14 = v12;
    }
    di_plugin_register(v14, v13);
  }
  sub_100069D54(a1, a2, 0);
LABEL_20:
  if (v23) {
    std::mutex::unlock(v22);
  }
}

void sub_10006A05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v20 = 0;
  while (1)
  {
    if (*(char *)(v18 + v20 + 103) < 0) {
      operator delete(*(void **)(v18 + v20 + 80));
    }
    v20 -= 40;
    if (v20 == -120)
    {
      __cxa_guard_abort(&qword_1001C4FB0);
      if (a14) {
        std::mutex::unlock(a13);
      }
      _Unwind_Resume(a1);
    }
  }
}

void *sub_10006A0F8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100072AE0((uint64_t)a1, a2);
  *a1 = off_10019C1A8;
  a1[45] = &off_10019C2A8;
  a1[46] = &off_10019C2D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019C1A8;
  a1[45] = off_10019C230;
  a1[46] = off_10019C258;
  return a1;
}

void sub_10006A1F8(_Unwind_Exception *a1)
{
  sub_10006F4E0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006A21C(uint64_t a1)
{
  return a1;
}

void *sub_10006A260(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = *__error();
  if (sub_1000D29A0())
  {
    v18[0] = 0;
    unint64_t v8 = sub_1000D2920();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    uint64_t buf = 0x6704100402;
    char v9 = "RO";
    uint64_t v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
    __int16 v21 = 2080;
    if ((a3 & 3) != 0) {
      char v9 = "RW";
    }
    __int16 v23 = 2080;
    int v24 = v9;
    __int16 v25 = 2112;
    uint64_t v26 = a4;
    uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
    if (v10)
    {
      int v11 = (char *)v10;
      fprintf(__stderrp, "%s\n", v10);
      free(v11);
    }
  }
  else
  {
    uint64_t v12 = sub_1000D2920();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = "RW";
      uint64_t buf = 0x6704100402;
      uint64_t v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
      __int16 v21 = 2080;
      if ((a3 & 3) == 0) {
        uint64_t v13 = "RO";
      }
      __int16 v23 = 2080;
      int v24 = v13;
      __int16 v25 = 2112;
      uint64_t v26 = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%.*s: Creating %s plugin instance with params: %@", (uint8_t *)&buf, 0x26u);
    }
  }
  *__error() = v7;
  v18[1] = a4;
  uint64_t v19 = 0;
  LODWORD(v18[0]) = 16;
  HIDWORD(v18[0]) = a3;
  long long v14 = (void *)(*(uint64_t (**)(void *, __CFError **))(a2 + 8))(v18, &v19);
  int v15 = v14;
  if (v14 && *(_DWORD *)v14 <= 0x57u)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)&buf);
    sub_100003DF0(&buf, (uint64_t)"Plugin image struct size ", 25);
    std::ostream::operator<<();
    sub_100003DF0(&buf, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<();
    sub_100010C3C((uint64_t)exception, (uint64_t)&buf, 0xFFFFFFA9);
  }
  sub_10006A554(v14, v19);
  return v15;
}

void sub_10006A514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10006A554(void *result, __CFError *a2)
{
  if (!result)
  {
    if (a2)
    {
      int v7 = *__error();
      if (sub_1000D29A0())
      {
        unint64_t v8 = sub_1000D2920();
        os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t buf = 68158210;
        int v16 = 71;
        __int16 v17 = 2080;
        uint64_t v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
        __int16 v19 = 2114;
        uint64_t v20 = a2;
        char v9 = (const char *)_os_log_send_and_compose_impl();
        if (v9)
        {
          uint64_t v10 = (char *)v9;
          fprintf(__stderrp, "%s\n", v9);
          free(v10);
        }
      }
      else
      {
        int v11 = sub_1000D2920();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 68158210;
          int v16 = 71;
          __int16 v17 = 2080;
          uint64_t v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
          __int16 v19 = 2114;
          uint64_t v20 = a2;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%.*s: Failed initializing plugin: %{public}@", buf, 0x1Cu);
        }
      }
      *__error() = v7;
      uint64_t v12 = a2;
      int Code = CFErrorGetCode(a2);
      if (Code < 0) {
        int v14 = Code;
      }
      else {
        int v14 = -Code;
      }
      CFRelease(v12);
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin initialization failed";
      unsigned int v4 = v14;
    }
    else
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin bug: returned init failure without supplying the error";
      unsigned int v4 = -14;
    }
LABEL_9:
    unint64_t v5 = (void *)sub_100003670((uint64_t)exception, (uint64_t)v3, v4);
  }
  if (!result[1] || !result[2] || !result[3] || !result[6] || !result[7] || !result[8])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v3 = "Mandatory callbacks in the plugin's image struct are missing";
    unsigned int v4 = -22;
    goto LABEL_9;
  }
  return result;
}

void *sub_10006A7A8(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  int v7 = *__error();
  if (sub_1000D29A0())
  {
    uint64_t v17 = 0;
    unint64_t v8 = sub_1000D2920();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)uint64_t buf = 68157954;
    *(_DWORD *)&uint8_t buf[4] = 114;
    __int16 v19 = 2080;
    uint64_t v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = sub_1000D2920();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 114;
      __int16 v19 = 2080;
      uint64_t v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%.*s: Decoding plugin instance", buf, 0x12u);
    }
  }
  *__error() = v7;
  *(void *)uint64_t buf = 0;
  uint64_t v12 = *(uint64_t (**)(long long *, uint64_t, uint8_t *))(a2 + 16);
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  uint64_t v13 = (void *)v12(&v15, a4, buf);
  return sub_10006A554(v13, *(__CFError **)buf);
}

uint64_t sub_10006A96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294967274;
  }
  if (*(_DWORD *)(a3 + 4) != 1)
  {
    *(void *)&long long __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31;
    LODWORD(v16) = 16;
    sub_10006AF38(&v13, &__dst);
    sub_100003DF0(v14, (uint64_t)"Plugin version ", 15);
    std::ostream::operator<<();
    sub_100003DF0(v14, (uint64_t)" is incompatible with the framework, expected ", 46);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10006FC54((uint64_t)&v13);
    goto LABEL_6;
  }
  if (*(_DWORD *)a3 <= 0x27u)
  {
    *(void *)&long long __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31;
    LODWORD(v16) = 16;
    sub_10006B0A0(&v13, &__dst);
    sub_100003DF0(v14, (uint64_t)"Plugin struct size ", 19);
    std::ostream::operator<<();
    sub_100003DF0(v14, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000703C8((uint64_t)&v13);
LABEL_6:
    std::ios::~ios();
    return 4294967209;
  }
  if (!*(void *)(a3 + 8) || !*(void *)(a3 + 16))
  {
    *(void *)&long long __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31;
    LODWORD(v16) = 16;
    sub_10006B208(&v13, &__dst);
    sub_100003DF0(v14, (uint64_t)"Mandatory callbacks in the plugin's struct are missing", 54);
    std::ostream::~ostream();
    sub_100070B3C((uint64_t)&v13);
    std::ios::~ios();
    return 4294967274;
  }
  unint64_t v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((void **)(a1 + 8) == sub_10006F090(a1, (void **)a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100047744(v11, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)int v11 = *(_OWORD *)a2;
      uint64_t v12 = *(void *)(a2 + 16);
    }
    operator new();
  }
  *(void *)&long long __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
  *((void *)&__dst + 1) = 31;
  LODWORD(v16) = 16;
  sub_10006B370(&v13, &__dst);
  sub_100003DF0(v14, (uint64_t)"Plugin ", 7);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    unint64_t v8 = (void *)a2;
  }
  else {
    unint64_t v8 = *(void **)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_100003DF0(v14, (uint64_t)v8, v9);
  sub_100003DF0(v14, (uint64_t)" cannot be re-registered", 24);
  std::ostream::~ostream();
  sub_1000712B0((uint64_t)&v13);
  std::ios::~ios();
  uint64_t v3 = 4294967279;
  std::mutex::unlock(v6);
  return v3;
}

void sub_10006AE18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  if (*(char *)(v22 - 73) < 0) {
    operator delete(*(void **)(v22 - 96));
  }
  operator delete();
}

void sub_10006AEAC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10006B5FC((uint64_t)va);
  std::mutex::unlock(v3);
  JUMPOUT(0x10006AF30);
}

void sub_10006AEBC()
{
}

void sub_10006AEDC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10006AEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10006B32C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006AEF4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10006B494((uint64_t)va);
  JUMPOUT(0x10006AF00);
}

void sub_10006AF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10006B1C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10006AF38(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100072B70((uint64_t)a1, a2);
  *a1 = off_10019C3C8;
  a1[45] = &off_10019C4C8;
  a1[46] = &off_10019C4F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019C3C8;
  a1[45] = off_10019C450;
  a1[46] = off_10019C478;
  return a1;
}

void sub_10006B038(_Unwind_Exception *a1)
{
  sub_10006FC54(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006B05C(uint64_t a1)
{
  return a1;
}

void *sub_10006B0A0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100072C00((uint64_t)a1, a2);
  *a1 = off_10019C5E8;
  a1[45] = &off_10019C6E8;
  a1[46] = &off_10019C710;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019C5E8;
  a1[45] = off_10019C670;
  a1[46] = off_10019C698;
  return a1;
}

void sub_10006B1A0(_Unwind_Exception *a1)
{
  sub_1000703C8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006B1C4(uint64_t a1)
{
  return a1;
}

void *sub_10006B208(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100072C90((uint64_t)a1, a2);
  *a1 = off_10019C808;
  a1[45] = &off_10019C908;
  a1[46] = &off_10019C930;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019C808;
  a1[45] = off_10019C890;
  a1[46] = off_10019C8B8;
  return a1;
}

void sub_10006B308(_Unwind_Exception *a1)
{
  sub_100070B3C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006B32C(uint64_t a1)
{
  return a1;
}

void *sub_10006B370(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100072D20((uint64_t)a1, a2);
  *a1 = off_10019CA28;
  a1[45] = &off_10019CB28;
  a1[46] = &off_10019CB50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019CA28;
  a1[45] = off_10019CAB0;
  a1[46] = off_10019CAD8;
  return a1;
}

void sub_10006B470(_Unwind_Exception *a1)
{
  sub_1000712B0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006B494(uint64_t a1)
{
  return a1;
}

void *sub_10006B4D8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100073B54((uint64_t)a1, a2);
  *a1 = off_10019CC48;
  a1[45] = &off_10019CD48;
  a1[46] = &off_10019CD70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019CC48;
  a1[45] = off_10019CCD0;
  a1[46] = off_10019CCF8;
  return a1;
}

void sub_10006B5D8(_Unwind_Exception *a1)
{
  sub_100071A24(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006B5FC(uint64_t a1)
{
  return a1;
}

CFStringRef sub_10006B640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100069D54(a1, a2, 1, (uint64_t)&v8);
  if (v9 && (unint64_t v5 = *(uint64_t (**)(uint64_t))(v8 + 24)) != 0)
  {
    return (CFStringRef)v5(a3);
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v7 = (const char *)a2;
    }
    else {
      int v7 = *(const char **)a2;
    }
    return CFStringCreateWithCString(0, v7, 0x8000100u);
  }
}

void sub_10006B6DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, long long *a5, uint64_t a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100047744((unsigned char *)(a1 + 16), *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)a2;
    *(void *)(a1 + 32) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v11;
  }
  uint64_t v12 = sub_100069C84();
  sub_100069D54(v12, a2, 1, (uint64_t)v20);
  if (v21)
  {
    v24[0] = off_10019D358;
    v24[3] = v24;
    if (a6)
    {
      uint64_t v13 = sub_100069C84();
      int v14 = sub_10006A7A8(v13, v20[0], a5, a6);
      sub_100073D40((uint64_t)v23, (uint64_t)v24);
      sub_100073DD8(&v19, (uint64_t)v14);
    }
    uint64_t v15 = sub_100069C84();
    uint64_t v16 = sub_10006A260(v15, v20[0], a4, a3);
    sub_100073D40((uint64_t)v22, (uint64_t)v24);
    sub_100073DD8(&v19, (uint64_t)v16);
  }
  exception = (char *)__cxa_allocate_exception(0x40uLL);
  long long v18 = *(_OWORD *)sub_10004EF44((uint64_t)v20);
  *(void *)exception = &off_1001B6CA0;
  *(_OWORD *)(exception + 8) = v18;
  exception[24] = 0;
  exception[48] = 0;
  *((void *)exception + 7) = "Failed to get plugin instance";
}

void sub_10006B90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_100073CBC((uint64_t *)va);
  sub_100073CBC((uint64_t *)va1);
  if (*(char *)(v6 + 39) < 0) {
    operator delete(*v7);
  }
  char v9 = *(std::__shared_weak_count **)(v6 + 8);
  if (v9) {
    sub_100010A48(v9);
  }
  _Unwind_Resume(a1);
}

void sub_10006B980(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 264);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  void v3[2] = sub_10006BA24;
  v3[3] = &unk_10019BBF0;
  v3[4] = a1;
  unsigned int v4 = v3;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v6 = &v4;
    unint64_t v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_100072AC8);
  }
}

uint64_t sub_10006BA24(uint64_t a1)
{
  return sub_10006BA6C(*(void *)(a1 + 32) + 56);
}

uint64_t sub_10006BA6C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 200)) {
    *(unsigned char *)(sub_10012F778() + 200) = 0;
  }
  uint64_t result = sub_10012F70C();
  *(unsigned char *)(result + 200) = 1;
  return result;
}

void sub_10006BAC4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10006BACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10012F894(a1 + 56, a2);
  *(void *)(a2 + 16) = a3 + 16;
  uint64_t v6 = io_rings_enter(*(void *)(a1 + 104), 1, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    *(void *)&long long v9 = "DiskImagePlugin::sync_enter_and_wait(io_rings_sqe_t *, Context &)";
    *((void *)&v9 + 1) = 36;
    int v10 = 16;
    sub_10006BBC8(v11, &v9);
    sub_100003DF0(v12, (uint64_t)"failed to enter SQE to the ring, ret code ", 42);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100072198((uint64_t)v11);
    std::ios::~ios();
  }
  else
  {
    sub_10011E5F8((dispatch_semaphore_t *)(a3 + 24), 0xFFFFFFFFFFFFFFFFLL);
    return *(unsigned int *)(a3 + 16);
  }
  return v7;
}

void sub_10006BBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10006BCEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10006BBC8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000741C0((uint64_t)a1, a2);
  *a1 = off_10019CE68;
  a1[45] = &off_10019CF68;
  a1[46] = &off_10019CF90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019CE68;
  a1[45] = off_10019CEF0;
  a1[46] = off_10019CF18;
  return a1;
}

void sub_10006BCC8(_Unwind_Exception *a1)
{
  sub_100072198(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006BCEC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006BD30(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  double v9 = sub_10012F77C((uint64_t)(a1 + 7));
  if (!v8) {
    return -35;
  }
  uint64_t v10 = v8;
  int v65 = 0;
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v11 = *(void *)(a4 + 72);
  uint64_t v12 = a3[9];
  unint64_t v46 = (long long *)(a3 + 9);
  unint64_t v47 = (*(uint64_t (**)(void *, double))(*a1 + 24))(a1, v9);
  memset(v64, 0, sizeof(v64));
  (*(void (**)(_OWORD *__return_ptr, void *))(*a1 + 72))(v64, a1);
  unint64_t v13 = a3[18];
  uint64_t v45 = a3 + 18;
  unint64_t v14 = (*(void *)(a4 + 144) - v13) & ~((uint64_t)(*(void *)(a4 + 144) - v13) >> 63);
  if (*(void *)&v64[0]
    && v11 - v12 >= *((void *)&v64[0] + 1) * *(void *)&v64[0]
                  + (v14 - 1 + *(void *)&v64[0]) / *(void *)&v64[0] * *(void *)&v64[0])
  {
    uint64_t v15 = *(uint64_t (**)(void))(a1[2] + 32);
    if (v15)
    {
      unsigned int v16 = v15();
      unint64_t v17 = v13;
      if (v16) {
        unint64_t v17 = v13 / v16 * v16;
      }
    }
    else
    {
      unint64_t v17 = a3[18];
    }
    unint64_t v14 = (v14 - 1 + v13 - v17 + *(void *)&v64[0]) / *(void *)&v64[0] * *(void *)&v64[0];
    unint64_t v13 = v17;
  }
  long long v19 = (std::__shared_weak_count *)a3[1];
  uint64_t v51 = *a3;
  uint64_t v52 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v43 = v10;
  unint64_t v44 = v13;
  v53[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)a3 + 25);
  long long v55 = *(_OWORD *)(a3 + 7);
  long long v20 = *(_OWORD *)(a3 + 11);
  long long v56 = *v46;
  uint64_t v54 = a3[6];
  long long v57 = v20;
  char v58 = *((unsigned char *)a3 + 104);
  char v21 = (std::__shared_weak_count *)a3[15];
  uint64_t v59 = a3[14];
  uint64_t v60 = v21;
  unint64_t v22 = v14 / v47;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v61 = *((_OWORD *)a3 + 8);
  uint64_t v62 = *v45;
  char v63 = *((unsigned char *)a3 + 152);
  while (!sub_1000302D0((uint64_t)&v51))
  {
    sub_100016C64((uint64_t)&v55);
    uint64_t v24 = v59;
    __int16 v23 = v60;
    if (v60)
    {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v14 >= (unint64_t)v61) {
        unint64_t v25 = v61;
      }
      else {
        unint64_t v25 = v14;
      }
      if (!v25)
      {
        sub_100010A48(v23);
        break;
      }
    }
    else
    {
      if (v14 >= (unint64_t)v61) {
        unint64_t v25 = v61;
      }
      else {
        unint64_t v25 = v14;
      }
      if (!v25) {
        break;
      }
    }
    uint64_t v26 = v66;
    if (v66 >= v67)
    {
      uint64_t v28 = (v66 - v65) >> 4;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        sub_10001796C();
      }
      uint64_t v30 = v67 - v65;
      if ((v67 - v65) >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31) {
        uint64_t v32 = (char *)sub_100017984((uint64_t)&v67, v31);
      }
      else {
        uint64_t v32 = 0;
      }
      unint64_t v33 = &v32[16 * v28];
      *(void *)unint64_t v33 = v24;
      *((void *)v33 + 1) = v25;
      char v35 = v65;
      unint64_t v34 = v66;
      uint64_t v36 = v33;
      if (v66 != v65)
      {
        do
        {
          *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
          v36 -= 16;
          v34 -= 16;
        }
        while (v34 != v35);
        unint64_t v34 = v65;
      }
      unint64_t v27 = v33 + 16;
      int v65 = v36;
      unint64_t v66 = v33 + 16;
      uint64_t v67 = &v32[16 * v31];
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(void *)unint64_t v66 = v24;
      *((void *)v26 + 1) = v25;
      unint64_t v27 = v26 + 16;
    }
    unint64_t v66 = v27;
    if (v23) {
      sub_100010A48(v23);
    }
    sub_1000661D0((uint64_t)&v51, (uint64_t)v48);
    if (v50) {
      sub_100010A48(v50);
    }
    v14 -= v25;
    if (v49) {
      sub_100010A48(v49);
    }
  }
  if (v60) {
    sub_100010A48(v60);
  }
  if (v52) {
    sub_100010A48(v52);
  }
  unint64_t v37 = v65;
  *(unsigned char *)uint64_t v43 = 2;
  *(void *)(v43 + 24) = v37;
  *(void *)(v43 + 32) = v44 / v47;
  *(void *)(v43 + 40) = 0;
  *(_DWORD *)(v43 + 48) = v22;
  int v38 = sub_10006BACC((uint64_t)a1, v43, a2);
  if (v38 == (unint64_t)v22)
  {
    unint64_t v39 = (std::__shared_weak_count *)a3[1];
    unint64_t v18 = v47 * v38;
    uint64_t v51 = *a3;
    uint64_t v52 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v53[0] = *((_OWORD *)a3 + 1);
    *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)a3 + 25);
    long long v55 = *(_OWORD *)(a3 + 7);
    long long v40 = *(_OWORD *)(a3 + 11);
    long long v56 = *v46;
    uint64_t v54 = a3[6];
    long long v57 = v40;
    char v58 = *((unsigned char *)a3 + 104);
    unint64_t v41 = (std::__shared_weak_count *)a3[15];
    uint64_t v59 = a3[14];
    uint64_t v60 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v61 = *((_OWORD *)a3 + 8);
    uint64_t v62 = *v45;
    char v63 = *((unsigned char *)a3 + 152);
    sub_100030064((uint64_t)&v51, v18);
    if (v60) {
      sub_100010A48(v60);
    }
    if (v52) {
      sub_100010A48(v52);
    }
  }
  else if (v38 < 0)
  {
    unint64_t v18 = v38;
  }
  else
  {
    unint64_t v18 = -5;
  }
  if (v65)
  {
    unint64_t v66 = v65;
    operator delete(v65);
  }
  return v18;
}

void sub_10006C1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  unint64_t v39 = *(void **)(v37 - 120);
  if (v39)
  {
    *(void *)(v37 - 112) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006C244(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  sub_10012F77C(a1 + 56);
  if (!v8) {
    return -35;
  }
  uint64_t v9 = v8;
  long long __p = 0;
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v10 = *a3;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)char v58 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v58[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  long long v59 = *(_OWORD *)(a3 + 9);
  long long v60 = *(_OWORD *)(a3 + 11);
  char v61 = *((unsigned char *)a3 + 104);
  uint64_t v15 = a3[14];
  unsigned int v16 = (std::__shared_weak_count *)a3[15];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  unint64_t v18 = a3[18];
  unint64_t v17 = a3 + 18;
  long long v62 = *((_OWORD *)v17 - 1);
  unint64_t v63 = v18;
  char v64 = *((unsigned char *)v17 + 8);
  uint64_t v19 = *a4;
  long long v20 = (std::__shared_weak_count *)a4[1];
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v54 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v54[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v21 = a4[6];
  uint64_t v22 = a4[7];
  uint64_t v23 = a4[8];
  long long v55 = *(_OWORD *)(a4 + 9);
  long long v56 = *(_OWORD *)(a4 + 11);
  char v57 = *((unsigned char *)a4 + 104);
  uint64_t v24 = a4[14];
  unint64_t v25 = (std::__shared_weak_count *)a4[15];
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v26 = 0;
  v84[0] = *(_OWORD *)v58;
  *(_OWORD *)((char *)v84 + 9) = *(_OWORD *)&v58[9];
  long long v87 = v59;
  long long v88 = v60;
  long long v92 = v62;
  v70[0] = *(_OWORD *)v54;
  *(_OWORD *)((char *)v70 + 9) = *(_OWORD *)&v54[9];
  long long v75 = v56;
  uint64_t v82 = v10;
  unint64_t v83 = v11;
  uint64_t v85 = v12;
  *(void *)&long long v86 = v13;
  *((void *)&v86 + 1) = v14;
  char v89 = v61;
  uint64_t v90 = v15;
  uint64_t v91 = v16;
  unint64_t v93 = v63;
  char v94 = v64;
  uint64_t v68 = v19;
  long long v69 = v20;
  uint64_t v71 = v21;
  uint64_t v72 = v22;
  uint64_t v73 = v23;
  char v76 = v57;
  long long v74 = v55;
  uint64_t v77 = v24;
  uint64_t v78 = v25;
  long long v79 = *((_OWORD *)a4 + 8);
  char v81 = *((unsigned char *)a4 + 152);
  unint64_t v80 = a4[18];
  unint64_t v27 = v80;
  v113[0] = 0;
  v113[528] = 0;
  while (!sub_10002F3D8((uint64_t)&v82, (uint64_t)&v68))
  {
    if (v93 >= v27 || v26 == -1) {
      break;
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v110 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:305:45)]";
      *((void *)&v110 + 1) = 104;
      LODWORD(v111) = 2;
      sub_10003A8D8(&v107, &v110);
      sub_100003DF0(v109, (uint64_t)"sg: ", 4);
      sub_1001416B8(v109);
      std::ostream::~ostream();
      sub_10003ABC8((uint64_t)&v107);
      std::ios::~ios();
    }
    *(void *)&long long v107 = 0;
    *((void *)&v107 + 1) = v27;
    char v108 = 2;
    sub_100081638(&v82, (uint64_t)&v107, (uint64_t)&v110);
    uint64_t v29 = v110;
    int64_t v30 = v111;
    if (v66 >= v67)
    {
      uint64_t v32 = (v66 - __p) >> 4;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60) {
        sub_10001796C();
      }
      uint64_t v34 = v67 - __p;
      if ((v67 - __p) >> 3 > v33) {
        unint64_t v33 = v34 >> 3;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35) {
        uint64_t v36 = (char *)sub_100017984((uint64_t)&v67, v35);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v37 = &v36[16 * v32];
      *(void *)uint64_t v37 = v29;
      *((void *)v37 + 1) = v30;
      int v38 = v66;
      unint64_t v39 = v37;
      if (v66 != __p)
      {
        do
        {
          *((_OWORD *)v39 - 1) = *((_OWORD *)v38 - 1);
          v39 -= 16;
          v38 -= 16;
        }
        while (v38 != __p);
        int v38 = __p;
      }
      unint64_t v31 = v37 + 16;
      long long __p = v39;
      uint64_t v67 = &v36[16 * v35];
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)unint64_t v66 = v110;
      *((void *)v66 + 1) = v30;
      unint64_t v31 = v66 + 16;
    }
    unint64_t v66 = v31;
    uint64_t v40 = (int)v111;
    if ((v111 & 0x80000000) != 0) {
      int64_t v41 = (int)v111;
    }
    else {
      int64_t v41 = v111;
    }
    BOOL v42 = v41 >= 0 || v41 == 0;
    char v43 = v42;
    if (v42)
    {
      uint64_t v44 = v112;
      if (sub_100030B70((uint64_t)&v82, (uint64_t)&v68, v112, v41))
      {
        v95[0] = v82;
        v95[1] = v83;
        if (v83) {
          atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v96[0] = v84[0];
        *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v84 + 9);
        uint64_t v97 = v85;
        long long v98 = v86;
        long long v99 = v87;
        long long v100 = v88;
        char v101 = v89;
        uint64_t v102 = v90;
        __uint32_t v103 = v91;
        if (v91) {
          atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v104 = v92;
        unint64_t v105 = v93;
        char v106 = v94;
        sub_100030B34((uint64_t)v95, (uint64_t)&v68, v44, v41, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v107);
        sub_10003AA40((uint64_t)v113, (uint64_t)&v107);
        sub_100030B8C(&v107);
        sub_100011F6C((uint64_t)v95);
        sub_10002F8C8((uint64_t)v113, (uint64_t)&v107);
        sub_10003AA88((uint64_t)&v82, &v107);
        sub_100011F6C((uint64_t)&v107);
        sub_10002F51C((uint64_t)v113, (uint64_t)&v107);
        sub_10003AA88((uint64_t)&v68, &v107);
        sub_100011F6C((uint64_t)&v107);
      }
      sub_100030064((uint64_t)&v82, v41);
      v26 += v41;
    }
    else
    {
      if ((int)v111 >= 0) {
        uint64_t v40 = -(uint64_t)(int)v111;
      }
      unint64_t v51 = v40;
    }
    if (*((void *)&v110 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v110 + 1));
    }
    if ((v43 & 1) == 0) {
      goto LABEL_60;
    }
  }
  unint64_t v51 = v26;
LABEL_60:
  sub_100030F34((uint64_t)v113);
  if (v78) {
    sub_100010A48(v78);
  }
  if (v69) {
    sub_100010A48(v69);
  }
  if (v91) {
    sub_100010A48(v91);
  }
  if (v83) {
    sub_100010A48(v83);
  }
  unint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 24))(v53);
  unint64_t v46 = *v17 / v45;
  *(unsigned char *)uint64_t v9 = 4;
  *(void *)(v9 + 24) = __p;
  *(void *)(v9 + 32) = v46;
  *(void *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 48) = v51 / v45;
  int v47 = sub_10006BACC(v53, v9, v52);
  uint64_t v48 = -5;
  if (v47 < 0) {
    uint64_t v48 = v47;
  }
  if (v47 == (unint64_t)(v51 / v45)) {
    uint64_t v49 = v45 * v47;
  }
  else {
    uint64_t v49 = v48;
  }
  if (__p) {
    operator delete(__p);
  }
  return v49;
}

void sub_10006C920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (STACK[0x5B8]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x5B8]);
  }
  sub_100030F34((uint64_t)&STACK[0x5E0]);
  sub_100011F6C((uint64_t)&a65);
  sub_100011F6C((uint64_t)&STACK[0x260]);
  sub_100011F6C((uint64_t)&a22);
  sub_100011F6C((uint64_t)&a42);
  if (__p)
  {
    a63 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10006C9D0(uint64_t a1, uint64_t a2, int a3)
{
  sub_10012F77C(a1 + 56);
  if (!v6) {
    return 4294967261;
  }
  *(unsigned char *)uint64_t v6 = 5;
  *(_DWORD *)(v6 + 24) = a3 + 1;

  return sub_10006BACC(a1, v6, a2);
}

uint64_t sub_10006CA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a4;
  uint64_t v7 = a1 + 56;
  for (uint64_t i = (uint64_t *)(a3 + 8); ; i += 2)
  {
    sub_10012F77C(v7);
    if (!v9) {
      break;
    }
    uint64_t v10 = *(i - 1);
    uint64_t v11 = *i;
    *(unsigned char *)uint64_t v9 = 6;
    *(void *)(v9 + 24) = v10;
    *(_DWORD *)(v9 + 32) = v11;
    uint64_t result = sub_10006BACC(a1, v9, a2);
    if (result) {
      return result;
    }
    if (!--v4) {
      return 0;
    }
  }
  return 4294967261;
}

void sub_10006CAE8(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  sub_10012F7E8(a1 + 56, (uint64_t)&v4);
  if (v6)
  {
    uint64_t v2 = v4;
    int v3 = v5;
    do
    {
      *(_DWORD *)uint64_t v2 = v3;
      sub_10011E600((dispatch_semaphore_t *)(v2 + 8));
      sub_10012F7E8(v1, (uint64_t)&v4);
      uint64_t v2 = v4;
      int v3 = v5;
    }
    while (v6);
  }
}

unint64_t sub_10006CB50(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  memset(v71, 0, sizeof(v71));
  memset(v70, 0, sizeof(v70));
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  uint64_t v4 = *a3;
  int v5 = (std::__shared_weak_count *)a3[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)char v58 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v58[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v6 = a3[6];
  uint64_t v7 = a3[7];
  uint64_t v8 = a3[8];
  long long v59 = *(_OWORD *)(a3 + 9);
  long long v60 = *(_OWORD *)(a3 + 11);
  char v61 = *((unsigned char *)a3 + 104);
  uint64_t v9 = a3[14];
  uint64_t v10 = (std::__shared_weak_count *)a3[15];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (unint64_t *)(a3 + 18);
  long long v62 = *((_OWORD *)a3 + 8);
  unint64_t v63 = a3[18];
  char v64 = *((unsigned char *)a3 + 152);
  uint64_t v12 = *a4;
  uint64_t v13 = (std::__shared_weak_count *)a4[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v54 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v54[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v14 = a4[6];
  uint64_t v15 = a4[7];
  uint64_t v16 = a4[8];
  long long v55 = *(_OWORD *)(a4 + 9);
  long long v56 = *(_OWORD *)(a4 + 11);
  char v57 = *((unsigned char *)a4 + 104);
  uint64_t v18 = a4[14];
  unint64_t v17 = (std::__shared_weak_count *)a4[15];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = 0;
  uint64_t v86 = v4;
  long long v87 = v5;
  v88[0] = *(_OWORD *)v58;
  *(_OWORD *)((char *)v88 + 9) = *(_OWORD *)&v58[9];
  uint64_t v89 = v6;
  *(void *)&long long v90 = v7;
  *((void *)&v90 + 1) = v8;
  long long v91 = v59;
  long long v92 = v60;
  char v93 = v61;
  uint64_t v94 = v9;
  unint64_t v95 = v10;
  long long v96 = v62;
  unint64_t v97 = v63;
  char v98 = v64;
  uint64_t v72 = v12;
  uint64_t v73 = v13;
  v74[0] = *(_OWORD *)v54;
  *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)&v54[9];
  uint64_t v75 = v14;
  uint64_t v76 = v15;
  uint64_t v77 = v16;
  char v80 = v57;
  long long v78 = v55;
  long long v79 = v56;
  uint64_t v81 = v18;
  uint64_t v82 = v17;
  long long v83 = *((_OWORD *)a4 + 8);
  char v85 = *((unsigned char *)a4 + 152);
  unint64_t v84 = a4[18];
  unint64_t v20 = v84;
  LOBYTE(v117[0]) = 0;
  char v118 = 0;
  while (!sub_10002F3D8((uint64_t)&v86, (uint64_t)&v72))
  {
    if (v97 >= v20 || v19 == -1) {
      break;
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v114 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:385:45)]";
      *((void *)&v114 + 1) = 104;
      LODWORD(v115) = 2;
      sub_10003A8D8(&v111, &v114);
      sub_100003DF0(v113, (uint64_t)"sg: ", 4);
      sub_1001416B8(v113);
      std::ostream::~ostream();
      sub_10003ABC8((uint64_t)&v111);
      std::ios::~ios();
    }
    *(void *)&long long v111 = 0;
    *((void *)&v111 + 1) = v20;
    char v112 = 2;
    sub_100081638(&v86, (uint64_t)&v111, (uint64_t)&v114);
    sub_100074250((uint64_t *)v71, &v114);
    uint64_t v22 = v114;
    int64_t v23 = v115;
    uint64_t v24 = v70[2];
    if (v70[2] >= v70[3])
    {
      int64_t v26 = ((char *)v70[2] - (char *)v70[1]) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        sub_10001796C();
      }
      int64_t v28 = (char *)v70[3] - (char *)v70[1];
      if (((char *)v70[3] - (char *)v70[1]) >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29) {
        int64_t v30 = (char *)sub_100017984((uint64_t)&v70[3], v29);
      }
      else {
        int64_t v30 = 0;
      }
      unint64_t v31 = &v30[16 * v26];
      *(void *)unint64_t v31 = v22;
      *((void *)v31 + 1) = v23;
      uint64_t v32 = (char *)v70[2];
      unint64_t v33 = (char *)v70[1];
      uint64_t v34 = v31;
      if (v70[2] != v70[1])
      {
        do
        {
          *((_OWORD *)v34 - 1) = *((_OWORD *)v32 - 1);
          v34 -= 16;
          v32 -= 16;
        }
        while (v32 != v33);
        uint64_t v32 = (char *)v70[1];
      }
      unint64_t v25 = v31 + 16;
      v70[1] = v34;
      _OWORD v70[2] = v31 + 16;
      v70[3] = &v30[16 * v29];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(void *)_OWORD v70[2] = v114;
      v24[1] = v23;
      unint64_t v25 = v24 + 2;
    }
    _OWORD v70[2] = v25;
    uint64_t v35 = (int)v115;
    if ((v115 & 0x80000000) != 0) {
      int64_t v36 = (int)v115;
    }
    else {
      int64_t v36 = v115;
    }
    BOOL v37 = v36 >= 0 || v36 == 0;
    char v38 = v37;
    if (v37)
    {
      uint64_t v39 = v116;
      if (sub_100030B70((uint64_t)&v86, (uint64_t)&v72, v116, v36))
      {
        v99[0] = v86;
        v99[1] = v87;
        if (v87) {
          atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v100[0] = v88[0];
        *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)((char *)v88 + 9);
        uint64_t v101 = v89;
        long long v102 = v90;
        long long v103 = v91;
        long long v104 = v92;
        char v105 = v93;
        uint64_t v106 = v94;
        long long v107 = v95;
        if (v95) {
          atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v108 = v96;
        unint64_t v109 = v97;
        char v110 = v98;
        sub_100030B34((uint64_t)v99, (uint64_t)&v72, v39, v36, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v111);
        sub_10003AA40((uint64_t)v117, (uint64_t)&v111);
        sub_100030B8C(&v111);
        sub_100011F6C((uint64_t)v99);
        sub_10002F8C8((uint64_t)v117, (uint64_t)&v111);
        sub_10003AA88((uint64_t)&v86, &v111);
        sub_100011F6C((uint64_t)&v111);
        sub_10002F51C((uint64_t)v117, (uint64_t)&v111);
        sub_10003AA88((uint64_t)&v72, &v111);
        sub_100011F6C((uint64_t)&v111);
      }
      sub_100030064((uint64_t)&v86, v36);
      v19 += v36;
    }
    else
    {
      if ((int)v115 >= 0) {
        uint64_t v35 = -(uint64_t)(int)v115;
      }
      unint64_t v51 = v35;
    }
    if (*((void *)&v114 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v114 + 1));
    }
    if ((v38 & 1) == 0) {
      goto LABEL_59;
    }
  }
  unint64_t v51 = v19;
LABEL_59:
  sub_100030F34((uint64_t)v117);
  if (v82) {
    sub_100010A48(v82);
  }
  if (v73) {
    sub_100010A48(v73);
  }
  if (v95) {
    sub_100010A48(v95);
  }
  if (v87) {
    sub_100010A48(v87);
  }
  unint64_t v40 = *v11;
  unint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  unint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  LOBYTE(v65) = 2;
  *((void **)&v66 + 1) = v70[1];
  long long v67 = v40 / v41;
  LODWORD(v68) = v51 / v42;
  unint64_t v43 = a2[3];
  if (v43 >= a2[4])
  {
    uint64_t v48 = sub_10007267C(a2 + 2, (uint64_t)&v65);
    uint64_t v49 = *(std::__shared_weak_count **)&v71[32];
    a2[3] = v48;
    if (v49) {
      sub_100010A48(v49);
    }
  }
  else
  {
    long long v44 = v66;
    *(_OWORD *)unint64_t v43 = v65;
    *(_OWORD *)(v43 + 16) = v44;
    long long v45 = v67;
    long long v46 = v69;
    int v47 = v70[0];
    *(_OWORD *)(v43 + 48) = v68;
    *(_OWORD *)(v43 + 64) = v46;
    *(_OWORD *)(v43 + 32) = v45;
    *(void *)(v43 + 80) = v47;
    *(void *)(v43 + 88) = 0;
    *(void *)(v43 + 96) = 0;
    *(void *)(v43 + 104) = 0;
    *(_OWORD *)(v43 + 88) = *(_OWORD *)&v70[1];
    v70[1] = 0;
    _OWORD v70[2] = 0;
    *(void **)(v43 + 104) = v70[3];
    *(void *)(v43 + 112) = 0;
    v70[3] = 0;
    *(void *)(v43 + 120) = 0;
    *(void *)(v43 + 128) = 0;
    *(_OWORD *)(v43 + 112) = *(_OWORD *)v71;
    *(void *)(v43 + 128) = *(void *)&v71[16];
    memset(v71, 0, 24);
    *(_OWORD *)(v43 + 136) = *(_OWORD *)&v71[24];
    *(void *)&v71[32] = 0;
    *(void *)&v71[24] = 0;
    a2[3] = v43 + 152;
  }
  v117[0] = (void **)v71;
  sub_100017D2C(v117);
  if (v70[1])
  {
    _OWORD v70[2] = v70[1];
    operator delete(v70[1]);
  }
  return v51;
}

void sub_10006D318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (STACK[0x640]) {
    sub_100010A48((std::__shared_weak_count *)STACK[0x640]);
  }
  sub_100030F34((uint64_t)&STACK[0x668]);
  sub_100011F6C((uint64_t)&STACK[0x248]);
  sub_100011F6C((uint64_t)&STACK[0x2E8]);
  sub_100011F6C((uint64_t)&a23);
  sub_100011F6C((uint64_t)&a43);
  sub_10006D3BC((uint64_t)&a63);
  _Unwind_Resume(a1);
}

uint64_t sub_10006D3BC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2) {
    sub_100010A48(v2);
  }
  int v5 = (void **)(a1 + 112);
  sub_100017D2C(&v5);
  int v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_10006D41C(uint64_t a1)
{
  *(void *)a1 = off_10019BC20;
  if (*(unsigned char *)(a1 + 256)) {
    sub_10012F778(a1 + 56);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void sub_10006D488(uint64_t a1)
{
  *(void *)a1 = off_10019BC20;
  if (*(unsigned char *)(a1 + 256)) {
    sub_10012F778(a1 + 56);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_100010A48(v2);
  }

  operator delete();
}

uint64_t sub_10006D514(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 8))();
}

uint64_t sub_10006D520(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
}

uint64_t sub_10006D52C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24))();
}

uint64_t sub_10006D538()
{
  return 4294967218;
}

double sub_10006D540@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(uint64_t (**)(void))(v4 + 32);
  if (v5)
  {
    int v6 = v5();
    uint64_t v4 = *(void *)(a1 + 16);
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(void))(v4 + 40);
  if (v7 && (unsigned int v8 = v7()) != 0)
  {
    uint64_t v10 = v6 != 0;
    *a2 = v8;
    a2[1] = v10;
    a2[2] = v8 << v10;
    a2[3] = 0;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t sub_10006D5C0()
{
  return 1;
}

BOOL sub_10006D5C8(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 72))(v4);
  if (v4[0]) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v4[1] == 0;
  }
  return !v1 || v4[2] != 0 || v4[3] != 0;
}

void sub_10006D638()
{
}

void sub_10006D680()
{
}

uint64_t sub_10006D6A4(uint64_t a1)
{
  if (qword_1001C4FC0 != -1) {
    dispatch_once(&qword_1001C4FC0, &stru_10019BD30);
  }
  uint64_t v2 = (uint64_t (*)(uint64_t))off_1001C4FB8;
  if (!off_1001C4FB8) {
    return 0;
  }

  return v2(a1);
}

uint64_t sub_10006D71C(uint64_t a1)
{
  return a1;
}

void sub_10006D748(id a1)
{
  BOOL v1 = dlopen("/usr/lib/libAmber.dylib", 5);
  if (v1)
  {
    off_1001C4FB8 = dlsym(v1, "AmberDiskImagePluginCreate");
    if (off_1001C4FB8) {
      return;
    }
    *(void *)&long long v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18;
    int v3 = 16;
    sub_10006D9E8(v4, &v2);
    sub_100003DF0(v5, (uint64_t)"Cannot find AmberDiskImagePluginCreate in libAmber", 50);
    std::ostream::~ostream();
    sub_10006E3E4((uint64_t)v4);
  }
  else
  {
    *(void *)&long long v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18;
    int v3 = 16;
    sub_10006D880(v4, &v2);
    sub_100003DF0(v5, (uint64_t)"Cannot load libAmber", 20);
    std::ostream::~ostream();
    sub_10006DBE0((uint64_t)v4);
  }
  std::ios::~ios();
}

void sub_10006D85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10006DB0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10006D880(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10006DB50((uint64_t)a1, a2);
  *a1 = off_10019BD68;
  a1[45] = &off_10019BE68;
  a1[46] = &off_10019BE90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019BD68;
  a1[45] = off_10019BDF0;
  a1[46] = off_10019BE18;
  return a1;
}

void sub_10006D980(_Unwind_Exception *a1)
{
  sub_10006DBE0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006D9A4(uint64_t a1)
{
  return a1;
}

void *sub_10006D9E8(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10006E354((uint64_t)a1, a2);
  *a1 = off_10019BF88;
  a1[45] = &off_10019C088;
  a1[46] = &off_10019C0B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019BF88;
  a1[45] = off_10019C010;
  a1[46] = off_10019C038;
  return a1;
}

void sub_10006DAE8(_Unwind_Exception *a1)
{
  sub_10006E3E4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006DB0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006DB50(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019BF00;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10006DBCC(_Unwind_Exception *a1)
{
}

uint64_t sub_10006DBE0(uint64_t a1)
{
  *(void *)a1 = off_10019BF00;
  sub_10006DFE8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10006DD1C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006DBE0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10006DD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006DDBC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10006DE24(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006DBE0(v1);

  return std::ios::~ios();
}

void sub_10006DE70(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006DBE0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10006DED4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006DBE0(v1);

  return std::ios::~ios();
}

void sub_10006DF34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006DBE0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10006DFB0(uint64_t a1)
{
  sub_10006DBE0(a1);

  operator delete();
}

uint64_t sub_10006DFE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10006E16C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006E144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006E16C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v8 = a2;
    }
    else {
      unsigned int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 52;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 52;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10006E354(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019C120;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10006E3D0(_Unwind_Exception *a1)
{
}

uint64_t sub_10006E3E4(uint64_t a1)
{
  *(void *)a1 = off_10019C120;
  sub_10006E7EC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10006E520(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006E3E4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10006E588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006E5C0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10006E628(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006E3E4(v1);

  return std::ios::~ios();
}

void sub_10006E674(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006E3E4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10006E6D8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006E3E4(v1);

  return std::ios::~ios();
}

void sub_10006E738(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006E3E4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10006E7B4(uint64_t a1)
{
  sub_10006E3E4(a1);

  operator delete();
}

uint64_t sub_10006E7EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10006E970((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006E948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006E970(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v8 = a2;
    }
    else {
      unsigned int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 58;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 58;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10006EB58(uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      sub_10006EBDC((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_10006EBC4(_Unwind_Exception *a1)
{
  sub_10006F02C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10006EBDC(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_10006EC60(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    sub_10006EDF8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10002B3B8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **sub_10006EC60(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  uint64_t v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (sub_10006EF34(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      os_log_type_t v12 = (void *)a2;
    }
    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          os_log_type_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        uint64_t v16 = (void *)a2;
        do
        {
          os_log_type_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          uint64_t v16 = v12;
        }
        while (v17);
      }
      if ((sub_10006EF34(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((sub_10006EF34((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    uint64_t v14 = *(void ***)(a2 + 8);
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    uint64_t v19 = (void **)a2;
    do
    {
      uint64_t v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      uint64_t v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((sub_10006EF34(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:

  return (void **)sub_10006EEA0((uint64_t)a1, a3, a5);
}

__n128 sub_10006EDF8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100047744(v7, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10006EE84(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10006EFCC(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_10006EEA0(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unsigned int v8 = v4 + 4;
        if ((sub_10006EF34(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((sub_10006EF34(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_10006EF34(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_10006EF6C(a1, v2, v5, v6);
}

uint64_t sub_10006EF6C(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void sub_10006EFCC(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10006F02C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10006F02C(a1, *(void *)a2);
    sub_10006F02C(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void **sub_10006F090(uint64_t a1, void **a2)
{
  size_t v2 = (void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = sub_10006EF34(v3 + 4, a2);
    if (v6 >= 0) {
      size_t v7 = v3;
    }
    else {
      size_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = (void **)v3;
    }
    size_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_10006EF34(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

uint64_t *sub_10006F110(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  char v6 = (uint64_t **)sub_10006EEA0((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_10006F1A8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10002B3B8(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_10006F1A8@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = v6 + 4;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_100047744(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10006F234(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10006EFCC(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F250(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006F4E0(v1);

  return std::ios::~ios();
}

uint64_t sub_10006F29C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006F4E0(v1);

  return std::ios::~ios();
}

void sub_10006F2FC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006F4E0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10006F364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006F39C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10006F404(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006F4E0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10006F468(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006F4E0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10006F4E0(uint64_t a1)
{
  *(void *)a1 = off_10019C340;
  sub_10006F61C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10006F61C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10006F7DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006F778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F7A4(uint64_t a1)
{
  sub_10006F4E0(a1);

  operator delete();
}

int *sub_10006F7DC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 92;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 92;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10006F9C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006FC54(v1);

  return std::ios::~ios();
}

uint64_t sub_10006FA10(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006FC54(v1);

  return std::ios::~ios();
}

void sub_10006FA70(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006FC54(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10006FAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006FB10(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10006FB78(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006FC54(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10006FBDC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006FC54(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10006FC54(uint64_t a1)
{
  *(void *)a1 = off_10019C560;
  sub_10006FD90(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10006FD90(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10006FF50((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006FEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006FF18(uint64_t a1)
{
  sub_10006FC54(a1);

  operator delete();
}

int *sub_10006FF50(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 147;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 147;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100070138(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000703C8(v1);

  return std::ios::~ios();
}

uint64_t sub_100070184(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000703C8(v1);

  return std::ios::~ios();
}

void sub_1000701E4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000703C8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007024C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100070284(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000702EC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000703C8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100070350(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000703C8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000703C8(uint64_t a1)
{
  *(void *)a1 = off_10019C780;
  sub_100070504(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100070504(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000706C4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100070660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007068C(uint64_t a1)
{
  sub_1000703C8(a1);

  operator delete();
}

int *sub_1000706C4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 152;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 152;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_1000708AC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100070B3C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000708F8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100070B3C(v1);

  return std::ios::~ios();
}

void sub_100070958(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100070B3C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000709C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000709F8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100070A60(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100070B3C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100070AC4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100070B3C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100070B3C(uint64_t a1)
{
  *(void *)a1 = off_10019C9A0;
  sub_100070C78(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100070C78(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100070E38((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100070DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100070E00(uint64_t a1)
{
  sub_100070B3C(a1);

  operator delete();
}

int *sub_100070E38(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 157;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 157;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100071020(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000712B0(v1);

  return std::ios::~ios();
}

uint64_t sub_10007106C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000712B0(v1);

  return std::ios::~ios();
}

void sub_1000710CC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000712B0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100071134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007116C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000711D4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000712B0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100071238(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000712B0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000712B0(uint64_t a1)
{
  *(void *)a1 = off_10019CBC0;
  sub_1000713EC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000713EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000715AC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100071548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100071574(uint64_t a1)
{
  sub_1000712B0(a1);

  operator delete();
}

int *sub_1000715AC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 163;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 163;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100071794(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100071A24(v1);

  return std::ios::~ios();
}

uint64_t sub_1000717E0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100071A24(v1);

  return std::ios::~ios();
}

void sub_100071840(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100071A24(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000718A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000718E0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100071948(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100071A24(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000719AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100071A24(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100071A24(uint64_t a1)
{
  *(void *)a1 = off_10019CDE0;
  sub_100071B60(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100071B60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100071D20((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100071CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100071CE8(uint64_t a1)
{
  sub_100071A24(a1);

  operator delete();
}

int *sub_100071D20(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 171;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 171;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100071F08(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100072198(v1);

  return std::ios::~ios();
}

uint64_t sub_100071F54(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100072198(v1);

  return std::ios::~ios();
}

void sub_100071FB4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100072198(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007201C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100072054(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000720BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100072198(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100072120(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100072198(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100072198(uint64_t a1)
{
  *(void *)a1 = off_10019D000;
  sub_1000722D4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000722D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100072494((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100072430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007245C(uint64_t a1)
{
  sub_100072198(a1);

  operator delete();
}

int *sub_100072494(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 243;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 243;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10007267C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    sub_10001796C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  v19[4] = a1 + 2;
  uint64_t v10 = (char *)sub_100072864(v7, v9);
  uint64_t v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  long long v15 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v13;
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *((void *)v11 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *((void *)v11 + 15) = 0;
  *((void *)v11 + 16) = 0;
  *((void *)v11 + 14) = 0;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  v19[2] = v11 + 152;
  sub_1000727EC(a1, v19);
  uint64_t v17 = a1[1];
  sub_100072958((uint64_t)v19);
  return v17;
}

void sub_1000727D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100072958((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000727EC(uint64_t *a1, void *a2)
{
  sub_1000728B0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *sub_100072864(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    sub_100010CDC();
  }
  return operator new(152 * a2);
}

__n128 sub_1000728B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    unint64_t v8 = (__n128 *)(a7 - 64);
    do
    {
      __n128 v9 = *(__n128 *)(a3 - 152);
      *(__n128 *)((char *)v8 - 72) = *(__n128 *)(a3 - 136);
      *(__n128 *)((char *)v8 - 88) = v9;
      __n128 v10 = *(__n128 *)(a3 - 120);
      __n128 v11 = *(__n128 *)(a3 - 104);
      __n128 v12 = *(__n128 *)(a3 - 88);
      v8[-1].n128_u64[1] = *(void *)(a3 - 72);
      v8->n128_u64[0] = 0;
      *(__n128 *)((char *)v8 - 24) = v12;
      *(__n128 *)((char *)v8 - 40) = v11;
      *(__n128 *)((char *)v8 - 56) = v10;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *unint64_t v8 = *(__n128 *)(a3 - 64);
      v8[1].n128_u64[0] = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      v8[1].n128_u64[1] = 0;
      v8[2].n128_u64[0] = 0;
      v8[2].n128_u64[1] = 0;
      *(__n128 *)((char *)v8 + 24) = *(__n128 *)(a3 - 40);
      v8[2].n128_u64[1] = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      __n128 result = *(__n128 *)(a3 - 16);
      v8[3] = result;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      unint64_t v8 = (__n128 *)((char *)v8 - 152);
      v7 -= 152;
      a3 -= 152;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t sub_100072958(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    sub_1000695C4(i - 152);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000729A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10019D080;
  *(void *)(a1 + 8) = a2;
  sub_10011E5C8((dispatch_semaphore_t *)(a1 + 24), 0);
  sub_10006B980(a2);
  return a1;
}

void sub_100072A0C(_Unwind_Exception *a1)
{
  sub_10011DEBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100072A20(uint64_t a1)
{
  *(void *)a1 = off_10019D080;
  sub_10011DEBC((NSObject **)(a1 + 24));
  return a1;
}

void sub_100072A64(uint64_t a1)
{
  *(void *)a1 = off_10019D080;
  sub_10011DEBC((NSObject **)(a1 + 24));

  operator delete();
}

void *sub_100072AC8(void ***a1)
{
  return (*(void *(**)(void *__return_ptr))(***a1 + 16))(**a1);
}

uint64_t sub_100072AE0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019C340;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100072B5C(_Unwind_Exception *a1)
{
}

uint64_t sub_100072B70(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019C560;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100072BEC(_Unwind_Exception *a1)
{
}

uint64_t sub_100072C00(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019C780;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100072C7C(_Unwind_Exception *a1)
{
}

uint64_t sub_100072C90(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019C9A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100072D0C(_Unwind_Exception *a1)
{
}

uint64_t sub_100072D20(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019CBC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100072D9C(_Unwind_Exception *a1)
{
}

uint64_t *sub_100072DB0(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_10006EEA0((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_100072E5C((uint64_t)a1, a4, (uint64_t)v10);
    sub_10002B3B8(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100072EF0((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_100072E5C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = v6 + 4;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_100047744(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100072ED8(_Unwind_Exception *a1)
{
  sub_100072EF0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100072EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100072F48((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100072F48(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_100010A48(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_100072F9C(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v9 = "PluginsManager::register_plugin(const string &, di_plugin_t *)::(anonymous class)::operator()(di_plugin_t *) const";
  *((void *)&v9 + 1) = 93;
  int v10 = 0;
  sub_1000731E8(v11, &v9);
  sub_100003DF0(v12, (uint64_t)"Unregistering plugin ", 21);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  sub_100003DF0(v12, v5, v6);
  std::ostream::~ostream();
  sub_1000733E0((uint64_t)v11);
  uint64_t result = std::ios::~ios();
  unint64_t v8 = *(uint64_t (**)(uint64_t))(a2 + 32);
  if (v8) {
    return v8(a2);
  }
  return result;
}

void sub_100073060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10007330C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100073074(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10019D0D8;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000730D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10019D0D8;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);

  operator delete();
}

void sub_100073148(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  sub_100072F9C(a1 + 32, *(void *)(a1 + 24));
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *v2;
    operator delete(v3);
  }
}

uint64_t sub_1000731A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void *sub_1000731E8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100073350((uint64_t)a1, a2);
  *a1 = off_10019D140;
  a1[45] = &off_10019D240;
  a1[46] = &off_10019D268;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019D140;
  a1[45] = off_10019D1C8;
  a1[46] = off_10019D1F0;
  return a1;
}

void sub_1000732E8(_Unwind_Exception *a1)
{
  sub_1000733E0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007330C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100073350(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019D2D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000733CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000733E0(uint64_t a1)
{
  *(void *)a1 = off_10019D2D8;
  sub_1000737E8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10007351C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000733E0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100073584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000735BC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100073624(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000733E0(v1);

  return std::ios::~ios();
}

void sub_100073670(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000733E0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000736D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000733E0(v1);

  return std::ios::~ios();
}

void sub_100073734(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000733E0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000737B0(uint64_t a1)
{
  sub_1000733E0(a1);

  operator delete();
}

uint64_t sub_1000737E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007396C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100073944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10007396C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 167;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 167;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100073B54(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019CDE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100073BD0(_Unwind_Exception *a1)
{
}

void sub_100073BE8()
{
}

void *sub_100073BFC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_10019D358;
  return result;
}

void sub_100073C34(uint64_t a1, void *a2)
{
  *a2 = off_10019D358;
}

uint64_t sub_100073C5C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v3 = *(uint64_t (**)(void))(*a2 + 72);
  if (v3) {
    return v3();
  }
  return result;
}

uint64_t sub_100073C70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100073CB0()
{
}

void *sub_100073CBC(void *a1)
{
  unsigned __int8 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100073D40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100073DD8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100073E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    sub_100073CBC(&a10);
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100073EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_100073F50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_100073FD0(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019D3E8;
  sub_100073F50((uint64_t)v6, a3);
  a1[3] = a2;
  sub_100073F50((uint64_t)(a1 + 4), (uint64_t)v6);
  sub_100073CBC(v6);
  return a1;
}

void sub_10007407C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10019D3E8;
  sub_100073CBC(&a1[1].__shared_owners_);

  std::__shared_weak_count::~__shared_weak_count(a1);
}

void sub_1000740D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10019D3E8;
  sub_100073CBC(&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_100074138(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  sub_100073EFC(a1 + 32, *(void *)(a1 + 24));

  return sub_100073CBC(v1);
}

uint64_t sub_10007417C(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

uint64_t sub_1000741C0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019D000;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10007423C(_Unwind_Exception *a1)
{
}

void *sub_100074250(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  char v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_10001796C();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    long long v14 = (char *)sub_100017984((uint64_t)v4, v13);
    long long v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    sub_100074370(a1, v19);
    long long v9 = (void *)a1[1];
    sub_100017ACC(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_10007435C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100017ACC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100074370(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000743E8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000743E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10007447C((uint64_t)v12);
  return v10;
}

uint64_t sub_10007447C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100017A88(a1);
  }
  return a1;
}

uint64_t sub_1000744B4(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, _OWORD *a5)
{
  int v9 = sub_100074618(a2, a3);
  sub_10007482C((void *)a1, v9, (a3 & 3) != 0);
  *(void *)a1 = off_10019D4A8;
  *(void *)(a1 + 24) = off_10019D580;
  *(void *)(a1 + 72) = off_10019D5A8;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 136) = *a5;
  if ((a3 & 0x200) != 0)
  {
    sub_1000748C4(a1, a4);
    sub_1000749C4(a1);
    BOOL v10 = 1;
  }
  else if (*(unsigned char *)(a1 + 36))
  {
    BOOL v10 = faccessat(*(_DWORD *)(a1 + 32), "mapped", 0, 0) != 0;
  }
  else
  {
    BOOL v10 = 0;
  }
  if (!*(void *)(a1 + 112)) {
    sub_100074C70(a1);
  }
  if (v10) {
    sub_100074FCC(a1, (a3 & 0x200) != 0);
  }
  return a1;
}

void sub_1000745EC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = 0;
  if (v3) {
    sub_100147008(v3);
  }
  sub_100146FB8(v1);
  sub_10007527C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100074618(uint64_t a1, __int16 a2)
{
  uint64_t v2 = a1;
  if ((a2 & 0x200) != 0)
  {
    if (*(char *)(a1 + 23) < 0) {
      a1 = *(void *)a1;
    }
    if (mkdir((const char *)a1, 0x1FFu) != -1) {
      return sub_10011EDAC(v2, 0);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "Failed creating sparsebundle folder";
LABEL_16:
    int v9 = (void *)sub_100003670((uint64_t)exception, (uint64_t)v8, v7);
  }
  if ((a2 & 3) == 0 || geteuid()) {
    return sub_10011EDAC(v2, 0);
  }
  if (*(char *)(v2 + 23) >= 0) {
    uint64_t v3 = (const char *)v2;
  }
  else {
    uint64_t v3 = *(const char **)v2;
  }
  if (stat(v3, &v11))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "stat failed";
    goto LABEL_16;
  }
  if (!v11.st_uid) {
    return sub_10011EDAC(v2, 0);
  }
  sub_100079214((uint64_t)v10, v11.st_uid);
  uint64_t v4 = sub_10011EDAC(v2, 0);
  sub_100079CDC((uint64_t)v10);
  return v4;
}

void sub_100074738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void *sub_10007482C(void *a1, int a2, char a3)
{
  uint64_t v6 = sub_10014193C(a1);
  sub_10011FB10((uint64_t)(v6 + 3), a2, a3);
  *a1 = off_10019D650;
  a1[3] = &off_10019D710;
  return a1;
}

void sub_1000748AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000748C4(uint64_t result, unint64_t a2)
{
  if (a2 < 0x100000 || a2 > 0x200000000 || (a2 & 0xFFF) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v3);
    sub_100003DF0(v3, (uint64_t)"Invalid band size (", 19);
    std::ostream::operator<<();
    sub_100003DF0(v3, (uint64_t)" bytes)", 7);
    sub_100010C3C((uint64_t)exception, (uint64_t)v3, 0x16u);
  }
  *(void *)(result + 128) = a2;
  return result;
}

void sub_100074990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000749C4(uint64_t a1)
{
  if (mkdirat(*(_DWORD *)(a1 + 32), "bands", 0x1FFu) == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = __error();
    uint64_t v8 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Failed creating bands folder", *v7);
  }
  sub_10007580C(a1);
  int v2 = *(_DWORD *)(a1 + 32);
  sub_100003BA4(__p, "token");
  uint64_t v3 = sub_10011F3FC(v2, (uint64_t)__p, 1538);
  sub_10004C904((uint64_t)&v17, v3, 1, 0);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  int v4 = *(_DWORD *)(a1 + 32);
  sub_100003BA4(v9, "lock");
  uint64_t v5 = sub_10011F3FC(v4, (uint64_t)v9, 1538);
  sub_10004C904((uint64_t)__p, v5, 1, 0);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  __p[0] = off_1001B1DB0;
  char v13 = off_1001B1E90;
  long long v14 = off_1001B1EC8;
  sub_10004CD98((uint64_t)&v16);
  if (v15) {
    sub_100010A48(v15);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  long long v17 = off_1001B1DB0;
  uint64_t v19 = off_1001B1E90;
  __int16 v20 = off_1001B1EC8;
  sub_10004CD98((uint64_t)&v22);
  if (v21) {
    sub_100010A48(v21);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_100074C14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100074C70(uint64_t a1)
{
  sub_100003BA4(&__p, "Info.plist");
  sub_100075A1C(a1);
}

void sub_100074D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    char v64 = __cxa_begin_catch(exception_object);
    *(void *)&a11 = "SparseBundleBackend::read_info()";
    *((void *)&a11 + 1) = 30;
    a12 = 16;
    sub_1000763C8(&__p, &a11);
    sub_100003DF0(&a61, (uint64_t)"Failed to read ", 15);
    sub_100003DF0(&a61, (uint64_t)"Info.plist", 10);
    sub_100003DF0(&a61, (uint64_t)", ", 2);
    long long v65 = (const char *)(*(uint64_t (**)(void *))(*(void *)v64 + 16))(v64);
    size_t v66 = strlen(v65);
    sub_100003DF0(&a61, (uint64_t)v65, v66);
    sub_100003DF0(&a61, (uint64_t)", reading from backup", 21);
    sub_1000764EC((uint64_t)&__p);
    __cxa_end_catch();
    sub_100003BA4(&__p, "Info.bckup");
    sub_100075A1C(v61);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100074FCC(uint64_t a1, char a2)
{
  uint64_t result = mkdirat(*(_DWORD *)(a1 + 32), "mapped", 0x1FFu);
  if (result == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v12);
    sub_100003DF0(v12, (uint64_t)"Failed creating ", 16);
    sub_100003DF0(v12, (uint64_t)"mapped", 6);
    sub_100003DF0(v12, (uint64_t)" folder", 7);
    uint64_t v6 = __error();
    sub_100010C3C((uint64_t)exception, (uint64_t)v12, *v6);
  }
  if ((a2 & 1) == 0)
  {
    memset(&v11, 0, sizeof(v11));
    sub_10011FFD4(a1 + 24, &v11);
    if (fchmodat(*(_DWORD *)(a1 + 32), "mapped", v11.st_mode & 0x1FF, 0) == -1)
    {
      unsigned int v7 = __cxa_allocate_exception(0x40uLL);
      sub_100003C58((uint64_t)v12);
      sub_100003DF0(v12, (uint64_t)"fchmodat failed for ", 20);
      sub_100003DF0(v12, (uint64_t)"mapped", 6);
      sub_100003DF0(v12, (uint64_t)" folder", 7);
      uint64_t v8 = __error();
      sub_100010C3C((uint64_t)v7, (uint64_t)v12, *v8);
    }
    uint64_t result = geteuid();
    if (!result && v11.st_uid)
    {
      uint64_t result = fchownat(*(_DWORD *)(a1 + 32), "mapped", v11.st_uid, 0xFFFFFFFF, 0);
      if (result == -1)
      {
        int v9 = __cxa_allocate_exception(0x40uLL);
        sub_100003C58((uint64_t)v12);
        sub_100003DF0(v12, (uint64_t)"fchownat failed for ", 20);
        sub_100003DF0(v12, (uint64_t)"mapped", 6);
        sub_100003DF0(v12, (uint64_t)" folder", 7);
        char v10 = __error();
        sub_100010C3C((uint64_t)v9, (uint64_t)v12, *v10);
      }
    }
  }
  return result;
}

void sub_100075230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t sub_10007527C(uint64_t a1)
{
  sub_10011F87C(a1 + 24);
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1000752B8(void *a1, int a2, char a3, void *a4)
{
  uint64_t v6 = sub_10007482C(a1, a2, a3);
  void *v6 = off_10019D4A8;
  void v6[3] = off_10019D580;
  v6[9] = off_10019D5A8;
  v6[10] = *a4;
  uint64_t v7 = a4[1];
  v6[11] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  sub_100074C70((uint64_t)a1);
}

void sub_1000754BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10007565C((uint64_t)va);
  uint64_t v6 = v4[14];
  v4[14] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[13];
  if (v7) {
    sub_100010A48(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v4[11];
  if (v8) {
    sub_100010A48(v8);
  }
  sub_10007527C((uint64_t)v4);
  _Unwind_Resume(a1);
}

void *sub_100075538(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000805F8((uint64_t)a1, a2);
  *a1 = off_10019D740;
  a1[45] = &off_10019D840;
  a1[46] = &off_10019D868;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019D740;
  a1[45] = off_10019D7C8;
  a1[46] = off_10019D7F0;
  return a1;
}

void sub_100075638(_Unwind_Exception *a1)
{
  sub_100078D30(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007565C(uint64_t a1)
{
  return a1;
}

void *sub_1000756A4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100080688((uint64_t)a1, a2);
  *a1 = off_10019DB80;
  a1[45] = &off_10019DC80;
  a1[46] = &off_10019DCA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019DB80;
  a1[45] = off_10019DC08;
  a1[46] = off_10019DC30;
  return a1;
}

void sub_1000757A4(_Unwind_Exception *a1)
{
  sub_10007A030(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000757C8(uint64_t a1)
{
  return a1;
}

void sub_10007580C(uint64_t a1)
{
  *(void *)&long long __p = "SparseBundleBackend::write_info_plists()";
  *((void *)&__p + 1) = 38;
  int v5 = 0;
  sub_100076D8C(v7, &__p);
  sub_100003DF0(v13, (uint64_t)"Updating ", 9);
  sub_100003DF0(v13, (uint64_t)"Info.bckup", 10);
  sub_100003DF0(v13, (uint64_t)", disk size: ", 13);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_10007C660((uint64_t)v7);
  std::ios::~ios();
  int v2 = *(_DWORD *)(a1 + 32);
  sub_100003BA4(&__p, "Info.bckup");
  uint64_t v3 = sub_10011F3FC(v2, (uint64_t)&__p, 1538);
  sub_10004C904((uint64_t)v7, v3, 1, 0);
  if (v6 < 0) {
    operator delete((void *)__p);
  }
  sub_100076890(a1, (uint64_t)v7);
  sub_100076530(a1);
  v7[0] = off_1001B1DB0;
  int v9 = off_1001B1E90;
  char v10 = off_1001B1EC8;
  sub_10004CD98((uint64_t)&v12);
  if (v11) {
    sub_100010A48(v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1000759D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
}

void sub_100075A1C(uint64_t a1)
{
}

void sub_1000760CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_10000E628((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v23 = *v21;
  uint64_t *v21 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  _Unwind_Resume(a1);
}

void *sub_100076260(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100080718((uint64_t)a1, a2);
  *a1 = off_10019DDA0;
  a1[45] = &off_10019DEA0;
  a1[46] = &off_10019DEC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019DDA0;
  a1[45] = off_10019DE28;
  a1[46] = off_10019DE50;
  return a1;
}

void sub_100076360(_Unwind_Exception *a1)
{
  sub_10007A7A4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100076384(uint64_t a1)
{
  return a1;
}

void *sub_1000763C8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100080AF0((uint64_t)a1, a2);
  *a1 = off_10019DFC0;
  a1[45] = &off_10019E0C0;
  a1[46] = &off_10019E0E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019DFC0;
  a1[45] = off_10019E048;
  a1[46] = off_10019E070;
  return a1;
}

void sub_1000764C8(_Unwind_Exception *a1)
{
  sub_10007AF8C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000764EC(uint64_t a1)
{
  return a1;
}

const void **sub_100076530(uint64_t a1)
{
  *(void *)&long long v8 = "SparseBundleBackend::write_primary_info_plist()";
  *((void *)&v8 + 1) = 45;
  int v9 = 0;
  sub_100076C24(__p, &v8);
  sub_100003DF0(v11, (uint64_t)"Updating ", 9);
  sub_100003DF0(v11, (uint64_t)"Info.plist", 10);
  std::ostream::~ostream();
  sub_10007BEEC((uint64_t)__p);
  std::ios::~ios();
  uint64_t v2 = *(void *)(a1 + 112);
  if (!v2)
  {
    sub_100003BA4(__p, "Info.plist");
    operator new();
  }
  unsigned int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 56))(v2, 0);
  if (v3)
  {
    unsigned int v4 = v3;
    exception = __cxa_allocate_exception(0x40uLL);
    char v6 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Failed truncating plist", v4);
  }
  return sub_100076890(a1, *(void *)(a1 + 112));
}

void sub_1000766DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100076728(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100080B80((uint64_t)a1, a2);
  *a1 = off_10019E1E0;
  a1[45] = &off_10019E2E0;
  a1[46] = &off_10019E308;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019E1E0;
  a1[45] = off_10019E268;
  a1[46] = off_10019E290;
  return a1;
}

void sub_100076828(_Unwind_Exception *a1)
{
  sub_10007B700(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007684C(uint64_t a1)
{
  return a1;
}

const void **sub_100076890(uint64_t a1, uint64_t a2)
{
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"diskimage-bundle-type", @"com.apple.diskimage.sparsebundle");
  CFDictionarySetValue(Mutable, kCFBundleInfoDictionaryVersionKey, @"6.0");
  sub_10011AC68(Mutable, @"bundle-backingstore-version", 2);
  sub_10011AC68(Mutable, @"size", *(void *)(a1 + 120));
  sub_10011AC68(Mutable, @"band-size", *(void *)(a1 + 128));
  unsigned int v4 = Mutable;
  int v5 = operator new(0x28uLL);
  long long __p = v5;
  long long v17 = xmmword_100166550;
  _OWORD *v5 = 0u;
  v5[1] = 0u;
  *(void *)((char *)v5 + 29) = 0;
  sub_10007BBE4(a1 + 136, v5);
  sub_10011B33C(v4, @"uuid", (uint64_t)&__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  CFErrorRef error = 0;
  CFDataRef v6 = CFPropertyListCreateData(kCFAllocatorDefault, Mutable, kCFPropertyListXMLFormat_v1_0, 0, &error);
  CFDataRef v21 = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)&__p);
    sub_100003DF0(&__p, (uint64_t)"Failed creating property list", 29);
    unsigned int Code = CFErrorGetCode(error);
    sub_100010C3C((uint64_t)exception, (uint64_t)&__p, Code);
  }
  CFIndex Length = CFDataGetLength(v6);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v21);
  uint64_t v9 = *((void *)sub_100143B90() + 1);
  long long __p = BytePtr;
  *(void *)&long long v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v17 + 1) = Length;
  uint64_t v18 = 0;
  CFIndex v19 = Length;
  char v20 = 0;
  unsigned int v10 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 96))(a2, &__p);
  if ((void)v17) {
    sub_100010A48((std::__shared_weak_count *)v17);
  }
  if ((v10 & 0x80000000) != 0
    || (unsigned int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 2)) != 0)
  {
    uint64_t v12 = __cxa_allocate_exception(0x40uLL);
    void *v12 = &off_1001B6CA0;
    char v13 = std::generic_category();
    v12[1] = v10;
    v12[2] = v13;
    *((unsigned char *)v12 + 24) = 0;
    *((unsigned char *)v12 + 48) = 0;
    v12[7] = "Failed writing sparsebundle info";
  }
  sub_1000807A8((const void **)&v21);
  sub_100080C10((const void **)&error);
  return sub_10002AB08((const void **)&Mutable);
}

void sub_100076B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_10000E628((uint64_t)&__p);
  sub_1000807A8((const void **)(v14 - 72));
  sub_100080C10((const void **)(v14 - 64));
  sub_10002AB08((const void **)(v14 - 56));
  _Unwind_Resume(a1);
}

void *sub_100076C24(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100080C44((uint64_t)a1, a2);
  *a1 = off_10019E400;
  a1[45] = &off_10019E500;
  a1[46] = &off_10019E528;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019E400;
  a1[45] = off_10019E488;
  a1[46] = off_10019E4B0;
  return a1;
}

void sub_100076D24(_Unwind_Exception *a1)
{
  sub_10007BEEC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100076D48(uint64_t a1)
{
  return a1;
}

void *sub_100076D8C(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100080CD4((uint64_t)a1, a2);
  *a1 = off_10019E620;
  a1[45] = &off_10019E720;
  a1[46] = &off_10019E748;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019E620;
  a1[45] = off_10019E6A8;
  a1[46] = off_10019E6D0;
  return a1;
}

void sub_100076E8C(_Unwind_Exception *a1)
{
  sub_10007C660(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100076EB0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100076EF4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 120) = (a2 + 4095) & 0xFFFFFFFFFFFFF000;
  sub_10007580C(a1);
  return 0;
}

void *sub_100077044(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100080D64((uint64_t)a1, a2);
  *a1 = off_10019E840;
  a1[45] = &off_10019E940;
  a1[46] = &off_10019E968;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019E840;
  a1[45] = off_10019E8C8;
  a1[46] = off_10019E8F0;
  return a1;
}

void sub_100077144(_Unwind_Exception *a1)
{
  sub_10007CDD4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100077168(uint64_t a1)
{
  return a1;
}

void sub_1000771AC(int *a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = a1 + 8;
  if ((*(unsigned int (**)(int *))(*(void *)a1 + 48))(a1)) {
    int v4 = 2;
  }
  else {
    int v4 = 0;
  }
  int v7 = v4;
  sub_100003BA4(__p, "token");
  sub_100080DF4(v3, (uint64_t)__p, &v7, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100077244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100077260(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1) & 1) == 0)
  {
    int v11 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
      int v2 = 550;
    }
    else {
      int v2 = 20;
    }
    int v11 = v2;
    sub_100003BA4(__p, "lock");
    sub_100080DF4((int *)(a1 + 32), (uint64_t)__p, &v11, &v6);
    long long v3 = v6;
    long long v6 = 0uLL;
    int v4 = *(std::__shared_weak_count **)(a1 + 88);
    *(_OWORD *)(a1 + 80) = v3;
    if (v4)
    {
      sub_100010A48(v4);
      if (*((void *)&v6 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v6 + 1));
      }
    }
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    *(void *)&long long v6 = "int SparseBundleBackend::lock()";
    *((void *)&v6 + 1) = 29;
    int v7 = 0;
    sub_100077560(__p, &v6);
    sub_100003DF0(v10, (uint64_t)"Opened bundle's lock file with flags 0x", 39);
    *(_DWORD *)((char *)&v10[1] + *(void *)(v10[0] - 24)) = *(_DWORD *)((unsigned char *)&v10[1] + *(void *)(v10[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v10[1] + *(void *)(v10[0] - 24)) = *(_DWORD *)((unsigned char *)&v10[1] + *(void *)(v10[0] - 24)) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    sub_10007D548((uint64_t)__p);
    std::ios::~ios();
  }
  return 0;
}

void sub_10007741C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, int a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a2 == 1)
  {
    long long v60 = __cxa_begin_catch(exception_object);
    int v61 = v60[2];
    if (v61 < 0) {
      int v61 = -v61;
    }
    BOOL v62 = v61 == 45 || v61 == 2;
    *(void *)&a9 = "int SparseBundleBackend::lock()";
    *((void *)&a9 + 1) = 29;
    if (v62)
    {
      a10 = 0;
      sub_1000776C8(&__p, &a9);
      sub_100003DF0(&a60, (uint64_t)"Cannot lock bundle, ignoring: ", 30);
      sub_100143A7C(&a60, (uint64_t)v60);
      sub_1000777EC((uint64_t)&__p);
    }
    else
    {
      a10 = 16;
      sub_100077830(&__p, &a9);
      sub_100143A7C(&a60, (uint64_t)v60);
      sub_100077954((uint64_t)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x100077404);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100077560(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100080F04((uint64_t)a1, a2);
  *a1 = off_10019EA60;
  a1[45] = &off_10019EB60;
  a1[46] = &off_10019EB88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019EA60;
  a1[45] = off_10019EAE8;
  a1[46] = off_10019EB10;
  return a1;
}

void sub_100077660(_Unwind_Exception *a1)
{
  sub_10007D548(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100077684(uint64_t a1)
{
  return a1;
}

void *sub_1000776C8(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100080F94((uint64_t)a1, a2);
  *a1 = off_10019EC80;
  a1[45] = &off_10019ED80;
  a1[46] = &off_10019EDA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019EC80;
  a1[45] = off_10019ED08;
  a1[46] = off_10019ED30;
  return a1;
}

void sub_1000777C8(_Unwind_Exception *a1)
{
  sub_10007DCBC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000777EC(uint64_t a1)
{
  return a1;
}

void *sub_100077830(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100081024((uint64_t)a1, a2);
  *a1 = off_10019EEA0;
  a1[45] = &off_10019EFA0;
  a1[46] = &off_10019EFC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019EEA0;
  a1[45] = off_10019EF28;
  a1[46] = off_10019EF50;
  return a1;
}

void sub_100077930(_Unwind_Exception *a1)
{
  sub_10007E430(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100077954(uint64_t a1)
{
  return a1;
}

uint64_t sub_100077998(uint64_t a1)
{
  return sub_100077260(a1 - 72);
}

uint64_t sub_1000779A0(void *a1)
{
  if ((*(unsigned int (**)(void *))(*a1 + 192))(a1))
  {
    int v2 = (std::__shared_weak_count *)a1[11];
    a1[10] = 0;
    a1[11] = 0;
    if (v2) {
      sub_100010A48(v2);
    }
    *(void *)&long long v4 = "int SparseBundleBackend::unlock_all()";
    *((void *)&v4 + 1) = 35;
    int v5 = 0;
    sub_100077A7C(v6, &v4);
    sub_100003DF0(v7, (uint64_t)"Bundle's lock file is closed", 28);
    std::ostream::~ostream();
    sub_10007EBA4((uint64_t)v6);
    std::ios::~ios();
  }
  return 0;
}

void sub_100077A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100077BA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100077A7C(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000810B4((uint64_t)a1, a2);
  *a1 = off_10019F0C0;
  a1[45] = &off_10019F1C0;
  a1[46] = &off_10019F1E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019F0C0;
  a1[45] = off_10019F148;
  a1[46] = off_10019F170;
  return a1;
}

void sub_100077B7C(_Unwind_Exception *a1)
{
  sub_10007EBA4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100077BA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100077BE4(uint64_t a1)
{
  return 0;
}

BOOL sub_100077C04(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0;
}

BOOL sub_100077C14(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

void sub_100077C24()
{
  sub_100003BA4(&__p, "bands");
  operator new();
}

void sub_100077CC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_100077D04()
{
  sub_100003BA4(&__p, "mapped");
  operator new();
}

void sub_100077DA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100077DE4(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  sub_100003BA4(__p, "bands");
  int v4 = sub_10011F3FC(v3, (uint64_t)__p, 0);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  sub_10007F088(&v9, v4);
  while (1)
  {
    int v5 = readdir(v9);
    if (!v5) {
      break;
    }
    *__error() = 0;
    d_name = v5->d_name;
    uint64_t v7 = strtoll(v5->d_name, 0, 16);
    if (!*__error())
    {
      sub_100003BA4(__p, d_name);
      sub_100077F20(a2, (uint64_t)__p, v7);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return closedir(v9);
}

void sub_100077ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DIR *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100077F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

void sub_100077F74(uint64_t a1)
{
  unint64_t v1 = (unint64_t)(*(void *)(a1 + 120) + *(void *)(a1 + 128) - 1) / *(void *)(a1 + 128);
  operator new();
}

void sub_10007814C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14 = *(void *)(v12 - 104);
  *(void *)(v12 - 104) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000781E0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100081144((uint64_t)a1, a2);
  *a1 = off_10019F3B8;
  a1[45] = &off_10019F4B8;
  a1[46] = &off_10019F4E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019F3B8;
  a1[45] = off_10019F440;
  a1[46] = off_10019F468;
  return a1;
}

void sub_1000782E0(_Unwind_Exception *a1)
{
  sub_10007F9A0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100078304(uint64_t a1)
{
  return a1;
}

void *sub_100078348(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100081578((uint64_t)a1, a2);
  *a1 = off_10019F5D8;
  a1[45] = &off_10019F6D8;
  a1[46] = &off_10019F700;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019F5D8;
  a1[45] = off_10019F660;
  a1[46] = off_10019F688;
  return a1;
}

void sub_100078448(_Unwind_Exception *a1)
{
  sub_100080114(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007846C(uint64_t a1)
{
  return a1;
}

void *sub_1000784B0(void *a1)
{
  *a1 = off_10019D4A8;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[3] = off_10019D580;
  a1[9] = off_10019D5A8;
  uint64_t v3 = a1[14];
  a1[14] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[13];
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[11];
  if (v5) {
    sub_100010A48(v5);
  }
  sub_10011F87C(v2);
  long long v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_10007858C(void *a1)
{
  *a1 = off_10019D4A8;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[3] = off_10019D580;
  a1[9] = off_10019D5A8;
  uint64_t v3 = a1[14];
  a1[14] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[13];
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[11];
  if (v5) {
    sub_100010A48(v5);
  }
  sub_10011F87C(v2);
  long long v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete();
}

uint64_t sub_100078688(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 16))();
}

uint64_t sub_1000786B0(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t sub_1000786B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 36);
}

void *sub_1000786C0(uint64_t a1, void *a2)
{
  return sub_100003DF0(a2, (uint64_t)"sparsebundle", 12);
}

uint64_t sub_1000786D4()
{
  return 4294967251;
}

uint64_t sub_1000786DC()
{
  return 4294967251;
}

uint64_t sub_1000786E4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

void sub_1000786F0(void *a1)
{
  *(a1 - 3) = off_10019D4A8;
  *a1 = off_10019D580;
  a1[6] = off_10019D5A8;
  uint64_t v2 = a1[11];
  a1[11] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3) {
    sub_100010A48(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    sub_100010A48(v4);
  }
  sub_10011F87C((uint64_t)a1);
  uint64_t v5 = (std::__shared_weak_count *)*(a1 - 1);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1000787C8(void *a1)
{
  *(a1 - 3) = off_10019D4A8;
  *a1 = off_10019D580;
  a1[6] = off_10019D5A8;
  uint64_t v2 = a1[11];
  a1[11] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3) {
    sub_100010A48(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    sub_100010A48(v4);
  }
  sub_10011F87C((uint64_t)a1);
  uint64_t v5 = (std::__shared_weak_count *)*(a1 - 1);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete();
}

void sub_1000788C4(void *a1)
{
  *(a1 - 9) = off_10019D4A8;
  uint64_t v2 = (uint64_t)(a1 - 6);
  *(a1 - 6) = off_10019D580;
  *a1 = off_10019D5A8;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_100010A48(v5);
  }
  sub_10011F87C(v2);
  long long v6 = (std::__shared_weak_count *)*(a1 - 7);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_10007899C(void *a1)
{
  *(a1 - 9) = off_10019D4A8;
  uint64_t v2 = (uint64_t)(a1 - 6);
  *(a1 - 6) = off_10019D580;
  *a1 = off_10019D5A8;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100010A48(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_100010A48(v5);
  }
  sub_10011F87C(v2);
  long long v6 = (std::__shared_weak_count *)*(a1 - 7);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete();
}

uint64_t sub_100078AA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100078D30(v1);

  return std::ios::~ios();
}

uint64_t sub_100078AEC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100078D30(v1);

  return std::ios::~ios();
}

void sub_100078B4C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100078D30(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100078BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100078BEC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100078C54(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100078D30(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100078CB8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100078D30(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100078D30(uint64_t a1)
{
  *(void *)a1 = off_10019D8D8;
  sub_100078E6C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100078E6C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007902C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100078FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100078FF4(uint64_t a1)
{
  sub_100078D30(a1);

  operator delete();
}

int *sub_10007902C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 93;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 93;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100079214(uint64_t a1, uid_t a2)
{
  if (seteuid(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v7);
    sub_100003DF0(v7, (uint64_t)"failed to set euid to ", 22);
    std::ostream::operator<<();
    sub_100010C3C((uint64_t)exception, (uint64_t)v7, 1u);
  }
  *(void *)&long long v5 = "set_euid_wrapper::set_euid_wrapper(uid_t)";
  *((void *)&v5 + 1) = 34;
  int v6 = 0;
  sub_100079370(v7, &v5);
  sub_100003DF0(v8, (uint64_t)"uid temporarily set to ", 23);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_100079568((uint64_t)v7);
  std::ios::~ios();
  return a1;
}

void sub_10007932C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100079370(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000794D8((uint64_t)a1, a2);
  *a1 = off_10019D960;
  a1[45] = &off_10019DA60;
  a1[46] = &off_10019DA88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019D960;
  a1[45] = off_10019D9E8;
  a1[46] = off_10019DA10;
  return a1;
}

void sub_100079470(_Unwind_Exception *a1)
{
  sub_100079568(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100079494(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000794D8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019DAF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100079554(_Unwind_Exception *a1)
{
}

uint64_t sub_100079568(uint64_t a1)
{
  *(void *)a1 = off_10019DAF8;
  sub_100079970(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000796A4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100079568(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007970C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100079744(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000797AC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100079568(v1);

  return std::ios::~ios();
}

void sub_1000797F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100079568(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007985C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100079568(v1);

  return std::ios::~ios();
}

void sub_1000798BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100079568(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100079938(uint64_t a1)
{
  sub_100079568(a1);

  operator delete();
}

uint64_t sub_100079970(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100079AF4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100079ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100079AF4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 128;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 128;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100079CDC(uint64_t a1)
{
  seteuid(0);
  *(void *)&long long v3 = "set_euid_wrapper::~set_euid_wrapper()";
  *((void *)&v3 + 1) = 35;
  int v4 = 0;
  sub_100012110(v5, &v3);
  sub_100003DF0(v6, (uint64_t)"uid restored to 0 (res=", 23);
  std::ostream::operator<<();
  sub_100003DF0(v6, (uint64_t)")", 1);
  std::ostream::~ostream();
  sub_100016E28((uint64_t)v5);
  std::ios::~ios();
  return a1;
}

uint64_t sub_100079DA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007A030(v1);

  return std::ios::~ios();
}

uint64_t sub_100079DEC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007A030(v1);

  return std::ios::~ios();
}

void sub_100079E4C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007A030(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100079EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100079EEC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100079F54(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007A030(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100079FB8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007A030(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007A030(uint64_t a1)
{
  *(void *)a1 = off_10019DD18;
  sub_10007A16C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007A16C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007A32C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007A2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007A2F4(uint64_t a1)
{
  sub_10007A030(a1);

  operator delete();
}

int *sub_10007A32C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 161;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 161;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007A514(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007A7A4(v1);

  return std::ios::~ios();
}

uint64_t sub_10007A560(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007A7A4(v1);

  return std::ios::~ios();
}

void sub_10007A5C0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007A7A4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007A628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007A660(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007A6C8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007A7A4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007A72C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007A7A4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007A7A4(uint64_t a1)
{
  *(void *)a1 = off_10019DF38;
  sub_10007A8E0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007A8E0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007AAA0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007AA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007AA68(uint64_t a1)
{
  sub_10007A7A4(a1);

  operator delete();
}

int *sub_10007AAA0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 207;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 207;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10007AC88(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100060C24(a1, a2);
    int v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_10007ACE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007ACFC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007AF8C(v1);

  return std::ios::~ios();
}

uint64_t sub_10007AD48(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007AF8C(v1);

  return std::ios::~ios();
}

void sub_10007ADA8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007AF8C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007AE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007AE48(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007AEB0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007AF8C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007AF14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007AF8C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007AF8C(uint64_t a1)
{
  *(void *)a1 = off_10019E158;
  sub_10007B0C8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007B0C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007B288((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007B224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007B250(uint64_t a1)
{
  sub_10007AF8C(a1);

  operator delete();
}

int *sub_10007B288(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 263;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 263;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007B470(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007B700(v1);

  return std::ios::~ios();
}

uint64_t sub_10007B4BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007B700(v1);

  return std::ios::~ios();
}

void sub_10007B51C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007B700(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007B584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007B5BC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007B624(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007B700(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007B688(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007B700(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007B700(uint64_t a1)
{
  *(void *)a1 = off_10019E378;
  sub_10007B83C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007B83C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007B9FC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007B998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007B9C4(uint64_t a1)
{
  sub_10007B700(a1);

  operator delete();
}

int *sub_10007B9FC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 270;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 270;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

unsigned char *sub_10007BBE4(uint64_t a1, unsigned char *a2)
{
  for (unint64_t i = 0; i != 16; ++i)
  {
    uint64_t v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    *a2 = v4 + (*(unsigned char *)(a1 + i) >> 4);
    a2 += 2;
    unsigned int v5 = *(unsigned char *)(a1 + i) & 0xF;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      void v3[2] = 45;
    }
  }
  return a2;
}

uint64_t sub_10007BC5C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007BEEC(v1);

  return std::ios::~ios();
}

uint64_t sub_10007BCA8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007BEEC(v1);

  return std::ios::~ios();
}

void sub_10007BD08(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007BEEC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007BD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007BDA8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007BE10(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007BEEC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007BE74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007BEEC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007BEEC(uint64_t a1)
{
  *(void *)a1 = off_10019E598;
  sub_10007C028(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007C028(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007C1E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007C184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007C1B0(uint64_t a1)
{
  sub_10007BEEC(a1);

  operator delete();
}

int *sub_10007C1E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 304;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 304;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007C3D0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007C660(v1);

  return std::ios::~ios();
}

uint64_t sub_10007C41C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007C660(v1);

  return std::ios::~ios();
}

void sub_10007C47C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007C660(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007C4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007C51C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007C584(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007C660(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007C5E8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007C660(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007C660(uint64_t a1)
{
  *(void *)a1 = off_10019E7B8;
  sub_10007C79C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007C79C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007C95C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007C8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007C924(uint64_t a1)
{
  sub_10007C660(a1);

  operator delete();
}

int *sub_10007C95C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 322;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 322;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007CB44(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007CDD4(v1);

  return std::ios::~ios();
}

uint64_t sub_10007CB90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007CDD4(v1);

  return std::ios::~ios();
}

void sub_10007CBF0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007CDD4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007CC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007CC90(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007CCF8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007CDD4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007CD5C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007CDD4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007CDD4(uint64_t a1)
{
  *(void *)a1 = off_10019E9D8;
  sub_10007CF10(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007CF10(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007D0D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007D06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007D098(uint64_t a1)
{
  sub_10007CDD4(a1);

  operator delete();
}

int *sub_10007D0D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 340;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 340;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007D2B8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007D548(v1);

  return std::ios::~ios();
}

uint64_t sub_10007D304(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007D548(v1);

  return std::ios::~ios();
}

void sub_10007D364(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007D548(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007D3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007D404(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007D46C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007D548(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007D4D0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007D548(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007D548(uint64_t a1)
{
  *(void *)a1 = off_10019EBF8;
  sub_10007D684(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007D684(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007D844((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007D7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007D80C(uint64_t a1)
{
  sub_10007D548(a1);

  operator delete();
}

int *sub_10007D844(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 361;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 361;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007DA2C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007DCBC(v1);

  return std::ios::~ios();
}

uint64_t sub_10007DA78(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007DCBC(v1);

  return std::ios::~ios();
}

void sub_10007DAD8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007DCBC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007DB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007DB78(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007DBE0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007DCBC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007DC44(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007DCBC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007DCBC(uint64_t a1)
{
  *(void *)a1 = off_10019EE18;
  sub_10007DDF8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007DDF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007DFB8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007DF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007DF80(uint64_t a1)
{
  sub_10007DCBC(a1);

  operator delete();
}

int *sub_10007DFB8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 367;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 367;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007E1A0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007E430(v1);

  return std::ios::~ios();
}

uint64_t sub_10007E1EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007E430(v1);

  return std::ios::~ios();
}

void sub_10007E24C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007E430(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007E2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007E2EC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007E354(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007E430(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007E3B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007E430(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007E430(uint64_t a1)
{
  *(void *)a1 = off_10019F038;
  sub_10007E56C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007E56C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007E72C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007E6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007E6F4(uint64_t a1)
{
  sub_10007E430(a1);

  operator delete();
}

int *sub_10007E72C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 370;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 370;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007E914(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007EBA4(v1);

  return std::ios::~ios();
}

uint64_t sub_10007E960(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007EBA4(v1);

  return std::ios::~ios();
}

void sub_10007E9C0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007EBA4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007EA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007EA60(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007EAC8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007EBA4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007EB2C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007EBA4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007EBA4(uint64_t a1)
{
  *(void *)a1 = off_10019F258;
  sub_10007ECE0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007ECE0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007EEA0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007EE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007EE68(uint64_t a1)
{
  sub_10007EBA4(a1);

  operator delete();
}

int *sub_10007EEA0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 379;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 379;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

DIR **sub_10007F088(DIR **a1, int a2)
{
  uint64_t v3 = fdopendir(a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    char v6 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Failed opening folder for entries reading", 0x13u);
  }
  return a1;
}

void *sub_10007F0F0(void *a1, uint64_t a2, char a3)
{
  a1[2] = a2;
  *a1 = off_10019F2D8;
  unint64_t v5 = ((unint64_t)(a2 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  sub_10007F244(a1 + 3, v5);
  char v6 = (void *)a1[3];
  a1[8] = v6;
  a1[9] = v5;
  if ((a3 & 1) == 0 && v5) {
    bzero(v6, 8 * v5);
  }
  a1[1] = v6;
  return a1;
}

void *sub_10007F174(void *a1)
{
  *a1 = off_10019F2D8;
  uint64_t v2 = a1 + 4;
  sub_10007F4FC(a1 + 3, 0);
  sub_10007F68C(v2);
  return a1;
}

void sub_10007F1CC(void *a1)
{
  *a1 = off_10019F2D8;
  uint64_t v1 = a1 + 4;
  sub_10007F4FC(a1 + 3, 0);
  sub_10007F68C(v1);

  operator delete();
}

uint64_t *sub_10007F244(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[4] = 0;
  uint64_t v3 = malloc_type_valloc(8 * a2, 0x100004000313F17uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    char v6 = std::bad_alloc::bad_alloc(exception);
  }
  v7[0] = off_10019F320;
  void v7[3] = v7;
  long long v8 = v3;
  sub_10007F47C((uint64_t)v9, (uint64_t)v7);
  sub_10007F36C(a1, (uint64_t *)&v8);
  sub_10007F4FC((uint64_t *)&v8, 0);
  sub_10007F68C(v9);
  sub_10007F68C(v7);
  return a1;
}

void sub_10007F34C(_Unwind_Exception *a1)
{
  sub_10007F4FC(v1, 0);
  sub_10007F68C(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10007F36C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  sub_10007F4FC(a1, v4);
  sub_10007F580(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void sub_10007F3B4()
{
}

void *sub_10007F3C8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_10019F320;
  return result;
}

void sub_10007F400(uint64_t a1, void *a2)
{
  *a2 = off_10019F320;
}

void sub_10007F428(uint64_t a1, void **a2)
{
}

uint64_t sub_10007F430(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10007F470()
{
}

uint64_t sub_10007F47C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_10007F4FC(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)sub_10007F52C((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_10007F52C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_10007F580(void *a1, uint64_t a2)
{
  sub_10007F604(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_10007F604(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10007F68C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10007F710(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007F9A0(v1);

  return std::ios::~ios();
}

uint64_t sub_10007F75C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007F9A0(v1);

  return std::ios::~ios();
}

void sub_10007F7BC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007F9A0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007F824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007F85C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007F8C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007F9A0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10007F928(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007F9A0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007F9A0(uint64_t a1)
{
  *(void *)a1 = off_10019F550;
  sub_10007FADC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10007FADC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10007FC9C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007FC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007FC64(uint64_t a1)
{
  sub_10007F9A0(a1);

  operator delete();
}

int *sub_10007FC9C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 437;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 437;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007FE84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100080114(v1);

  return std::ios::~ios();
}

uint64_t sub_10007FED0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100080114(v1);

  return std::ios::~ios();
}

void sub_10007FF30(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100080114(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10007FF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007FFD0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100080038(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100080114(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008009C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100080114(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100080114(uint64_t a1)
{
  *(void *)a1 = off_10019F770;
  sub_100080250(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100080250(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100080410((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000803AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000803D8(uint64_t a1)
{
  sub_100080114(a1);

  operator delete();
}

int *sub_100080410(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 446;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 446;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000805F8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019D8D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100080674(_Unwind_Exception *a1)
{
}

uint64_t sub_100080688(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019DD18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100080704(_Unwind_Exception *a1)
{
}

uint64_t sub_100080718(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019DF38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100080794(_Unwind_Exception *a1)
{
}

const void **sub_1000807A8(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1000807DC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    goto LABEL_32;
  }
  long long v5 = (signed __int8 *)(a2 + 1);
  int v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    long long v5 = (signed __int8 *)(a2 + 2);
    signed __int8 v7 = a2[1];
  }
  else
  {
    signed __int8 v7 = *a2;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  while (1)
  {
    do
    {
      if (v8 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          int v9 = 1;
LABEL_22:
          signed __int8 v12 = *v5++;
          signed __int8 v7 = v12;
          goto LABEL_24;
        }
        int v9 = 0;
      }
      else
      {
        BOOL v11 = (v8 & 0x7FFFFFFD) == 8 || v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          goto LABEL_22;
        }
      }
LABEL_24:
      char v13 = sub_1000809E4(a1, v7);
      *((unsigned char *)&v17 + v8) = v13;
      if (v5 == (signed __int8 *)a3) {
        goto LABEL_32;
      }
      int v14 = *v5++;
      signed __int8 v7 = v14;
      *((unsigned char *)&v17 + v8++) = sub_1000809E4(a1, v14) | (16 * v13);
    }
    while (!v8);
    if (v8 == 16) {
      break;
    }
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    signed __int8 v10 = *v5++;
    signed __int8 v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (int v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_10008097C();
  }
  return v17;
}

void sub_10008097C()
{
  std::runtime_error::runtime_error(&v0, "invalid uuid string");
  sub_100080AB0(&v0);
}

void sub_1000809D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_1000809E4(uint64_t a1, int a2)
{
  p_info = &OBJC_METACLASS___DIClient2IODaemonXPCHandler.info;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001C4620, memory_order_acquire) & 1) == 0)
  {
    int v9 = a2;
    int v8 = __cxa_guard_acquire(&qword_1001C4620);
    p_info = &OBJC_METACLASS___DIClient2IODaemonXPCHandler.info;
    a2 = v9;
    if (v8)
    {
      qword_1001C4618 = (uint64_t)&a0123456789abcd[(void)off_1001C4610];
      __cxa_guard_release(&qword_1001C4620);
      p_info = (__objc2_class_ro **)(&OBJC_METACLASS___DIClient2IODaemonXPCHandler + 32);
      a2 = v9;
    }
  }
  uint64_t v3 = p_info[195];
  char v4 = (__objc2_class_ro *)memchr("0123456789abcdefABCDEF", a2, (char *)v3 - "0123456789abcdefABCDEF");
  if (v4) {
    long long v5 = v4;
  }
  else {
    long long v5 = v3;
  }
  unint64_t v6 = (char *)v5 - "0123456789abcdefABCDEF";
  if (v6 >= (unint64_t)off_1001C4610) {
    sub_10008097C();
  }
  return byte_100166C1C[v6];
}

void sub_100080AB0(const std::runtime_error *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  uint64_t v3 = std::runtime_error::runtime_error(exception, a1);
}

uint64_t sub_100080AF0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019E158;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100080B6C(_Unwind_Exception *a1)
{
}

uint64_t sub_100080B80(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019E378;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100080BFC(_Unwind_Exception *a1)
{
}

const void **sub_100080C10(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_100080C44(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019E598;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100080CC0(_Unwind_Exception *a1)
{
}

uint64_t sub_100080CD4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019E7B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100080D50(_Unwind_Exception *a1)
{
}

uint64_t sub_100080D64(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019E9D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100080DE0(_Unwind_Exception *a1)
{
}

void sub_100080DF4(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  int v8 = operator new(0x470uLL);
  sub_100080E80(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1000196A4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100080E6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100080E80(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100199828;
  int v5 = *a4;
  uint64_t v6 = sub_10011F3FC(*a2, a3, *a4);
  sub_10004C904((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_100080EF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100080F04(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019EBF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100080F80(_Unwind_Exception *a1)
{
}

uint64_t sub_100080F94(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019EE18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100081010(_Unwind_Exception *a1)
{
}

uint64_t sub_100081024(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019F038;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000810A0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000810B4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019F258;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100081130(_Unwind_Exception *a1)
{
}

uint64_t sub_100081144(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019F550;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000811C0(_Unwind_Exception *a1)
{
}

void sub_1000811D8()
{
}

__n128 sub_1000811EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_10019F7F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100081240(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10019F7F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_100081278(void **a1, uint64_t a2, unint64_t *a3)
{
  if (*a1[1] <= *a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v10);
    sub_100003DF0(v10, (uint64_t)"Bands folder contains an out of range band (", 44);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    sub_100003DF0(v10, v8, v9);
    sub_100003DF0(v10, (uint64_t)")", 1);
    sub_100010C3C((uint64_t)exception, (uint64_t)v10, 0x16u);
  }
  BOOL result = sub_1000A4D38(*a1[2], *a3, 1);
  ++*a1[3];
  return result;
}

void sub_100081374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_100146DF8();
  _Unwind_Resume(a1);
}

uint64_t sub_10008152C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10008156C()
{
}

uint64_t sub_100081578(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019F770;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000815F4(_Unwind_Exception *a1)
{
}

uint64_t sub_100081608(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_100081638@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result[3];
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 8);
  if (v3 > (v4 & 1) + v5 - 1
    || ((uint64_t v6 = result[2], v7 = v6 + v3, v8 = *(void *)a2, (v4 & 2) != 0) ? (v9 = *(void *)a2) : (v9 = v8 + 1),
        v7 <= v9))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  unint64_t v10 = v9 - v3;
  if (v9 >= v3)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      if (v4 == 3)
      {
        if (v5 < v8) {
          goto LABEL_30;
        }
      }
      else if (v8 >= v5)
      {
LABEL_30:
        unint64_t v16 = qword_1001C45E0;
        goto LABEL_31;
      }
    }
    else if (v8 >= v5 || v8 + 1 >= v5)
    {
      goto LABEL_30;
    }
    unint64_t v16 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_31:
    if (v6 - v10 < v16) {
      unint64_t v16 = v6 - v10;
    }
    uint64_t v17 = result[4];
    uint64_t v18 = result[1];
    *(void *)a3 = *result + v10;
    *(void *)(a3 + 8) = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a3 + 16) = v16;
    *(void *)(a3 + 24) = v9;
    *(void *)(a3 + 32) = v17 - v10;
    goto LABEL_36;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (v5 < v8) {
        goto LABEL_20;
      }
    }
    else if (v8 >= v5)
    {
LABEL_20:
      uint64_t v11 = qword_1001C45E0;
      goto LABEL_21;
    }
  }
  else if (v8 >= v5 || v8 + 1 >= v5)
  {
    goto LABEL_20;
  }
  uint64_t v11 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_21:
  unint64_t v12 = v11 + v9;
  if (v12 >= v7) {
    unint64_t v12 = v6 + v3;
  }
  unint64_t v13 = v12 - v3;
  uint64_t v14 = result[4];
  uint64_t v15 = result[1];
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a3 + 16) = v13;
  *(void *)(a3 + 24) = v3;
  *(void *)(a3 + 32) = v14;
LABEL_36:
  *(unsigned char *)(a3 + 40) = 0;
  return result;
}

uint64_t sub_1000817AC(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_10019F870;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(_WORD *)(a1 + 68) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  uint64_t v6 = a4[4];
  *(void *)(a1 + 160) = a4[3];
  *(void *)(a1 + 168) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a4[40];
  if (v7) {
    sub_1000A4D38(v7, a3, 1);
  }
  return a1;
}

void sub_100081870(_Unwind_Exception *a1)
{
  sub_1000851A8(v2);
  unsigned int v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    sub_100010A48(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100081890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v13 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
    *((void *)&v13 + 1) = 38;
    LODWORD(v14) = 2;
    sub_100081BB4(v18, &v13);
    sub_100003DF0(v19, (uint64_t)"Reading ", 8);
    sub_1001416B8(v19);
    sub_100003DF0(v19, (uint64_t)" to ", 4);
    sub_100083948(v19);
    std::ostream::~ostream();
    sub_1000855C8((uint64_t)v18);
    std::ios::~ios();
  }
  unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
  unint64_t v6 = *(void *)(a3 + 24);
  if (v5 >= *(void *)(a3 + 16) + v6)
  {
    int v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), a3);
  }
  else if (v5 <= v6)
  {
    if (sub_1000D29B8())
    {
      *(void *)&long long v13 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v13 + 1) = 38;
      LODWORD(v14) = 2;
      sub_100081E84(v18, &v13);
      sub_100003DF0(v19, (uint64_t)"Band data doesn't exist, zeroing", 32);
      std::ostream::~ostream();
      sub_1000864B0((uint64_t)v18);
      std::ios::~ios();
    }
    bzero(*(void **)a3, *(void *)(a3 + 16));
    int v9 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 32);
    uint64_t v8 = *(void *)(a3 + 8);
    *(void *)&long long v13 = *(void *)a3;
    *((void *)&v13 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = v5 - v6;
    unint64_t v15 = v6;
    uint64_t v16 = v7;
    char v17 = 0;
    if (sub_1000D29B8())
    {
      *(void *)&long long v11 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v11 + 1) = 38;
      int v12 = 2;
      sub_100081D1C(v18, &v11);
      sub_100003DF0(v19, (uint64_t)"Band data is partial, reading ", 30);
      sub_1001416B8(v19);
      std::ostream::~ostream();
      sub_100085D3C((uint64_t)v18);
      std::ios::~ios();
    }
    int v9 = (*(uint64_t (**)(void, long long *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v13);
    bzero((void *)(*(void *)a3 + v14), *(void *)(a3 + 16) - v14);
    if (v14 == v9) {
      int v9 = *(_DWORD *)(a3 + 16);
    }
    if (*((void *)&v13 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v9 >= 0) {
    return *(void *)(a3 + 16);
  }
  else {
    return v9;
  }
}

void sub_100081B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_100081FA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100081BB4(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008DCA0((uint64_t)a1, a2);
  *a1 = off_10019F9A0;
  a1[45] = &off_10019FAA0;
  a1[46] = &off_10019FAC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019F9A0;
  a1[45] = off_10019FA28;
  a1[46] = off_10019FA50;
  return a1;
}

void sub_100081CB4(_Unwind_Exception *a1)
{
  sub_1000855C8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100081CD8(uint64_t a1)
{
  return a1;
}

void *sub_100081D1C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008DD30((uint64_t)a1, a2);
  *a1 = off_10019FBC0;
  a1[45] = &off_10019FCC0;
  a1[46] = &off_10019FCE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019FBC0;
  a1[45] = off_10019FC48;
  a1[46] = off_10019FC70;
  return a1;
}

void sub_100081E1C(_Unwind_Exception *a1)
{
  sub_100085D3C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100081E40(uint64_t a1)
{
  return a1;
}

void *sub_100081E84(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008DDC0((uint64_t)a1, a2);
  *a1 = off_10019FDE0;
  a1[45] = &off_10019FEE0;
  a1[46] = &off_10019FF08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019FDE0;
  a1[45] = off_10019FE68;
  a1[46] = off_10019FE90;
  return a1;
}

void sub_100081F84(_Unwind_Exception *a1)
{
  sub_1000864B0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100081FA8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100081FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v8 = "io_result_t sparse_bundles::Band::write(DiskImage::Context &, const sg_entry &)";
    *((void *)&v8 + 1) = 39;
    int v9 = 2;
    sub_10008212C(v10, &v8);
    sub_100003DF0(v11, (uint64_t)"Writing ", 8);
    sub_1001416B8(v11);
    sub_100003DF0(v11, (uint64_t)" to ", 4);
    sub_100083948(v11);
    std::ostream::~ostream();
    sub_100086C24((uint64_t)v10);
    std::ios::~ios();
  }
  unint64_t v6 = sub_100082294(a1);
  sub_10013E918(v6, a3);
  LODWORD(result) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 80))(*(void *)(a2 + 16), a3);
  *(unsigned char *)(a1 + 68) = 1;
  if ((int)result >= 0) {
    return *(void *)(a3 + 16);
  }
  else {
    return (int)result;
  }
}

void sub_100082118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100082250((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10008212C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008DE50((uint64_t)a1, a2);
  *a1 = off_1001A0000;
  a1[45] = &off_1001A0100;
  a1[46] = &off_1001A0128;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0000;
  a1[45] = off_1001A0088;
  a1[46] = off_1001A00B0;
  return a1;
}

void sub_10008222C(_Unwind_Exception *a1)
{
  sub_100086C24(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100082250(uint64_t a1)
{
  return a1;
}

unint64_t sub_100082294(uint64_t a1)
{
  unint64_t result = atomic_load((unint64_t *)(a1 + 48));
  if (!result)
  {
    uint64_t v5 = a1;
    if (atomic_load_explicit((atomic_ullong *volatile)(a1 + 56), memory_order_acquire) != -1)
    {
      v4[0] = &v5;
      unint64_t v6 = v4;
      std::__call_once((std::once_flag::_State_type *)(a1 + 56), &v6, (void (__cdecl *)(void *))sub_10008E684);
    }
    unint64_t result = atomic_load((unint64_t *)(a1 + 48));
    if (!result)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100003C58((uint64_t)v4);
      sub_100003DF0(v4, (uint64_t)"Failed opening mapped blocks file for ", 38);
      sub_100083948(v4);
      sub_100010C3C((uint64_t)exception, (uint64_t)v4, *(_DWORD *)(a1 + 64));
    }
  }
  return result;
}

void sub_100082380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000823B4(uint64_t a1, void *a2)
{
  unint64_t v3 = sub_100082294(a1);
  unint64_t v6 = (void *)*a2;
  unsigned int v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      if ((v5[6] & 2) != 0) {
        unint64_t v7 = v5[4];
      }
      else {
        unint64_t v7 = v5[4] + 1;
      }
      sub_10013EEB8(v3, v7, (v5[6] & 1) + v5[5] - 1);
      long long v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          long long v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != v4);
  }
  uint64_t v11 = *(void *)(v3 + 8);

  return sub_1000A4AF8(v11);
}

void sub_100082460(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  int v14 = a3;
  int v12 = 0;
  long long v13 = 0;
  int v9 = (***(uint64_t (****)(void))(a2 + 8))(*(void *)(a2 + 8));
  sub_1000449A4(__p);
  sub_10008DEE0(&v9, (uint64_t)__p, &v14, &v10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (*a4)
  {
    int v9 = 3;
    sub_10008DFF0((uint64_t *)&v10, (uint64_t)a4, &v9, __p);
    uint64_t v5 = __p[0];
    unint64_t v6 = (atomic_ullong *)__p[1];
  }
  else
  {
    uint64_t v5 = v10;
    unint64_t v6 = v11;
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
  }
  int v12 = v5;
  long long v13 = v6;
  operator new();
}

void sub_100082590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_100010A48(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100082604(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 8))
  {
    *(void *)&long long __p = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&__p + 1) = 32;
    int v12 = 0;
    sub_100082B5C(v14, &__p);
    sub_100003DF0(v15, (uint64_t)"Skipping erase of band ", 23);
    std::ostream::operator<<();
    sub_100003DF0(v15, (uint64_t)", disk image is terminated", 26);
    std::ostream::~ostream();
    sub_100087398((uint64_t)v14);
    std::ios::~ios();
    return;
  }
  sub_1000449A4(&__p);
  int v4 = (***(uint64_t (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  int v5 = sub_1001203C4(v4, (uint64_t *)&__p);
  if (v5)
  {
    if (v5 >= 0) {
      int v6 = v5;
    }
    else {
      int v6 = -v5;
    }
    if (v6 != 2)
    {
      *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v9 + 1) = 32;
      int v10 = 16;
      sub_100082CC4(v14, &v9);
      sub_100003DF0(v15, (uint64_t)"Failed to erase mapped file of band ", 36);
      *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1]
                                                                            + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1]
                                                                            + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_100003DF0(v15, (uint64_t)", error ", 8);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_100087B0C((uint64_t)v14);
      goto LABEL_11;
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v9 + 1) = 32;
      int v10 = 2;
      sub_1000418C0(v14, &v9);
      sub_100003DF0(v15, (uint64_t)"No mapped file for band ", 24);
      *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1]
                                                                            + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1]
                                                                            + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 2;
      std::ostream::~ostream();
      sub_100041AB8((uint64_t)v14);
LABEL_11:
      std::ios::~ios();
    }
  }
  int v7 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  if (sub_1001203C4(v7, (uint64_t *)&__p))
  {
    *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v9 + 1) = 32;
    int v10 = 16;
    sub_100082E2C(v14, &v9);
    sub_100003DF0(v15, (uint64_t)"Failed to erase band ", 21);
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 2;
    sub_100003DF0(v15, (uint64_t)", error ", 8);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100088280((uint64_t)v14);
    std::ios::~ios();
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 320);
    if (v8) {
      sub_1000A4D38(v8, a2, 0);
    }
  }
  if (sub_1000D29B8())
  {
    *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v9 + 1) = 32;
    int v10 = 2;
    sub_100082F94(v14, &v9);
    sub_100003DF0(v15, (uint64_t)"Completed erase of band ", 24);
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    sub_1000889F4((uint64_t)v14);
    std::ios::~ios();
  }
  if (v13 < 0) {
    operator delete((void *)__p);
  }
}

void sub_100082AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100082B5C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008E1F4((uint64_t)a1, a2);
  *a1 = off_1001A0220;
  a1[45] = &off_1001A0320;
  a1[46] = &off_1001A0348;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0220;
  a1[45] = off_1001A02A8;
  a1[46] = off_1001A02D0;
  return a1;
}

void sub_100082C5C(_Unwind_Exception *a1)
{
  sub_100087398(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100082C80(uint64_t a1)
{
  return a1;
}

void *sub_100082CC4(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008E284((uint64_t)a1, a2);
  *a1 = off_1001A0440;
  a1[45] = &off_1001A0540;
  a1[46] = &off_1001A0568;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0440;
  a1[45] = off_1001A04C8;
  a1[46] = off_1001A04F0;
  return a1;
}

void sub_100082DC4(_Unwind_Exception *a1)
{
  sub_100087B0C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100082DE8(uint64_t a1)
{
  return a1;
}

void *sub_100082E2C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008E314((uint64_t)a1, a2);
  *a1 = off_1001A0660;
  a1[45] = &off_1001A0760;
  a1[46] = &off_1001A0788;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0660;
  a1[45] = off_1001A06E8;
  a1[46] = off_1001A0710;
  return a1;
}

void sub_100082F2C(_Unwind_Exception *a1)
{
  sub_100088280(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100082F50(uint64_t a1)
{
  return a1;
}

void *sub_100082F94(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008E3A4((uint64_t)a1, a2);
  *a1 = off_1001A0880;
  a1[45] = &off_1001A0980;
  a1[46] = &off_1001A09A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0880;
  a1[45] = off_1001A0908;
  a1[46] = off_1001A0930;
  return a1;
}

void sub_100083094(_Unwind_Exception *a1)
{
  sub_1000889F4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000830B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000830FC(uint64_t a1)
{
  *(void *)a1 = off_10019F870;
  sub_100044030(*(void *)(a1 + 40) + 184, *(void *)(a1 + 32), 0);
  sub_1000851FC(a1 + 72);
  uint64_t v2 = atomic_load((unint64_t *)(a1 + 48));
  if (*(unsigned char *)(a1 + 69))
  {
    if (!v2) {
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    operator delete();
  }
  if (v2)
  {
    if (*(unsigned char *)(**(void **)(a1 + 40) + 8))
    {
      *(void *)&long long v8 = "sparse_bundles::Band::~Band()";
      *((void *)&v8 + 1) = 27;
      int v9 = 0;
      sub_10006B0A0(v10, &v8);
      sub_100003DF0(v11, (uint64_t)"Disk image is terminated, skipping flush of ", 44);
      sub_100083948(v11);
      sub_100003DF0(v11, (uint64_t)", dirty=", 8);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_1000703C8((uint64_t)v10);
      std::ios::~ios();
    }
    else
    {
      if (sub_1000D29B8())
      {
        *(void *)&long long v8 = "sparse_bundles::Band::~Band()";
        *((void *)&v8 + 1) = 27;
        int v9 = 2;
        sub_10008341C(v10, &v8);
        sub_100003DF0(v11, (uint64_t)"flushing and closing ", 21);
        sub_100083948(v11);
        std::ostream::~ostream();
        sub_100089168((uint64_t)v10);
        std::ios::~ios();
      }
      sub_10013E924(v2);
      if (*(unsigned char *)(a1 + 68)) {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 1);
      }
    }
    goto LABEL_13;
  }
  if (sub_1000D29B8())
  {
    *(void *)&long long v8 = "sparse_bundles::Band::~Band()";
    *((void *)&v8 + 1) = 27;
    int v9 = 2;
    sub_10006B370(v10, &v8);
    sub_100003DF0(v11, (uint64_t)"Closing an unchanged ", 21);
    sub_100083948(v11);
    std::ostream::~ostream();
    sub_1000712B0((uint64_t)v10);
    std::ios::~ios();
  }
LABEL_18:
  int v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (v5) {
    sub_100010A48(v5);
  }
  if (*(unsigned char *)(a1 + 69)) {
    sub_100082604(*(void *)(a1 + 40), *(void *)(a1 + 32));
  }
  sub_1000440D4(*(void *)(a1 + 40) + 184, *(void *)(a1 + 32));
  sub_1000851A8(a1 + 72);
  int v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6) {
    sub_100010A48(v6);
  }
  return a1;
}

void *sub_10008341C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008E434((uint64_t)a1, a2);
  *a1 = off_1001A0AA0;
  a1[45] = &off_1001A0BA0;
  a1[46] = &off_1001A0BC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0AA0;
  a1[45] = off_1001A0B28;
  a1[46] = off_1001A0B50;
  return a1;
}

void sub_10008351C(_Unwind_Exception *a1)
{
  sub_100089168(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100083540(uint64_t a1)
{
  return a1;
}

void sub_100083588(uint64_t a1)
{
  sub_1000830FC(a1);

  operator delete();
}

void sub_1000835C0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  sub_10008E4C4(a2, v3);
}

void sub_100083620(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_100010A48(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100083638(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_10008964C((uint64_t *)a1, a2);

  std::mutex::unlock(v4);
}

void sub_100083690(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000836A4(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 68) & 1) == 0) {
    return 0;
  }
  *(unsigned char *)(a1 + 68) = 0;
  uint64_t v3 = atomic_load((unint64_t *)(a1 + 48));
  uint64_t v1 = sub_10013E924(v3);
  if (v1
    || (uint64_t v1 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 1),
        v1))
  {
    *(unsigned char *)(a1 + 68) = 1;
    *(void *)&long long v5 = "sparse_bundles::Band::flush()";
    *((void *)&v5 + 1) = 27;
    int v6 = 16;
    sub_1000837E0(v7, &v5);
    sub_100083948(v8);
    sub_100003DF0(v8, (uint64_t)": flush failed (", 16);
    std::ostream::operator<<();
    sub_100003DF0(v8, (uint64_t)")", 1);
    std::ostream::~ostream();
    sub_100089B40((uint64_t)v7);
    std::ios::~ios();
  }
  return v1;
}

void sub_1000837CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100083904((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000837E0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008E5F4((uint64_t)a1, a2);
  *a1 = off_1001A0CC0;
  a1[45] = &off_1001A0DC0;
  a1[46] = &off_1001A0DE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0CC0;
  a1[45] = off_1001A0D48;
  a1[46] = off_1001A0D70;
  return a1;
}

void sub_1000838E0(_Unwind_Exception *a1)
{
  sub_100089B40(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100083904(uint64_t a1)
{
  return a1;
}

void *sub_100083948(void *a1)
{
  uint64_t v1 = sub_100003DF0(a1, (uint64_t)"band ", 5);
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v1 + *(void *)(*v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  unint64_t result = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)result + *(void *)(*result - 24) + 8) = *(_DWORD *)((unsigned char *)result
                                                                            + *(void *)(*result - 24)
                                                                            + 8) & 0xFFFFFFB5 | 2;
  return result;
}

void *sub_1000839D4(void *result)
{
  if (*result && atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
    unint64_t result = (void *)*v1;
    if (*v1)
    {
      operator delete();
    }
  }
  return result;
}

void *sub_100083A6C(void *a1)
{
  return a1;
}

uint64_t sub_100083A94(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unint64_t **)a2;
  *(void *)unint64_t result = *(void *)a2;
  unint64_t v3 = atomic_load(v2);
  if (!v3) {
LABEL_5:
  }
    operator new();
  unint64_t v4 = v3;
  while (1)
  {
    atomic_compare_exchange_strong(*(atomic_ullong *volatile *)result, &v4, v3 + 1);
    if (v4 == v3) {
      break;
    }
    unint64_t v3 = v4;
    if (!v4) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v5;
  return result;
}

uint64_t sub_100083B34(uint64_t result, uint64_t a2)
{
  *(_OWORD *)unint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  if (result != a2) {
    *(void *)a2 = 0;
  }
  return result;
}

void *sub_100083B54(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_1000839D4(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *a2 = 0;
  }
  return a1;
}

uint64_t sub_100083BA0@<X0>(std::chrono::steady_clock::time_point **a1@<X0>, std::chrono::steady_clock::time_point *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = atomic_load((unint64_t *)*a1);
  sub_100043970((atomic_ullong *)((*a1)[1].__d_.__rep_ + 56));
  if (v6 != 1 || (uint64_t v7 = 1, atomic_compare_exchange_strong(&(*a1)->__d_.__rep_, (unint64_t *)&v7, 0), v7 != 1))
  {
    sub_10004397C((*a1)[1].__d_.__rep_ + 56);
    if (sub_1000D29B8())
    {
      *(void *)&long long v13 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
      *((void *)&v13 + 1) = 46;
      int v14 = 2;
      sub_100083E50(v15, &v13);
      sub_100003DF0(v16, (uint64_t)"Missed an evictable slot", 24);
      std::ostream::~ostream();
      sub_10008A2B4((uint64_t)v15);
      std::ios::~ios();
    }
    operator new();
  }
  long long v8 = a1[1];
  if (v8)
  {
    sub_1000851FC((uint64_t)&v8[9]);
    int v9 = a1[1];
    int v10 = (dispatch_group_t *)((*a1)[1].__d_.__rep_ + 392);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 0x40000000;
    v12[2] = sub_100083FB8;
    void v12[3] = &unk_10019F930;
    v12[4] = a1;
    v12[5] = v9;
    sub_1000472D8(v10, v12);
  }
  else
  {
    sub_10004397C((*a1)[1].__d_.__rep_ + 56);
    if (sub_1000D29B8())
    {
      *(void *)&long long v13 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
      *((void *)&v13 + 1) = 46;
      int v14 = 2;
      sub_100084294(v15, &v13);
      sub_100003DF0(v16, (uint64_t)"Replaced an empty slot", 22);
      std::ostream::~ostream();
      sub_10008B19C((uint64_t)v15);
      std::ios::~ios();
    }
  }
  a1[1] = a2;
  if (!a2)
  {
    a1[2] = (std::chrono::steady_clock::time_point *)-1;
    operator new();
  }
  a1[2] = (std::chrono::steady_clock::time_point *)a2[4].__d_.__rep_;
  atomic_store(2uLL, (unint64_t *)*a1);
  (*a1)[2].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t result = sub_100083A94(a3, (uint64_t)a1);
  atomic_fetch_add(&(*a1)->__d_.__rep_, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

void *sub_100083E50(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008FC44((uint64_t)a1, a2);
  *a1 = off_1001A0EE0;
  a1[45] = &off_1001A0FE0;
  a1[46] = &off_1001A1008;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0EE0;
  a1[45] = off_1001A0F68;
  a1[46] = off_1001A0F90;
  return a1;
}

void sub_100083F50(_Unwind_Exception *a1)
{
  sub_10008A2B4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100083F74(uint64_t a1)
{
  return a1;
}

uint64_t sub_100083FB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (sub_1000D29B8())
  {
    *(void *)&long long v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46;
    int v6 = 2;
    sub_100077044(v7, &v5);
    sub_100003DF0(v8, (uint64_t)"Background close of ", 20);
    sub_100083948(v8);
    std::ostream::~ostream();
    sub_10007CDD4((uint64_t)v7);
    std::ios::~ios();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  sub_10004397C(*(void *)(*(void *)v2 + 8) + 56);
  uint64_t result = sub_1000D29B8();
  if (result)
  {
    *(void *)&long long v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46;
    int v6 = 2;
    sub_10008412C(v7, &v5);
    sub_100003DF0(v8, (uint64_t)"Close completed", 15);
    std::ostream::~ostream();
    sub_10008AA28((uint64_t)v7);
    return std::ios::~ios();
  }
  return result;
}

void sub_100084108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100084250((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10008412C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008FCD4((uint64_t)a1, a2);
  *a1 = off_1001A1100;
  a1[45] = &off_1001A1200;
  a1[46] = &off_1001A1228;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1100;
  a1[45] = off_1001A1188;
  a1[46] = off_1001A11B0;
  return a1;
}

void sub_10008422C(_Unwind_Exception *a1)
{
  sub_10008AA28(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100084250(uint64_t a1)
{
  return a1;
}

void *sub_100084294(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008FD64((uint64_t)a1, a2);
  *a1 = off_1001A1320;
  a1[45] = &off_1001A1420;
  a1[46] = &off_1001A1448;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1320;
  a1[45] = off_1001A13A8;
  a1[46] = off_1001A13D0;
  return a1;
}

void sub_100084394(_Unwind_Exception *a1)
{
  sub_10008B19C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000843B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000843FC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = atomic_load(*(unint64_t **)a1);
  while (v4 == 1)
  {
    unint64_t v4 = 1;
    atomic_compare_exchange_strong(*(atomic_ullong *volatile *)a1, &v4, 0);
    if (v4 == 1)
    {
      unint64_t v5 = sub_100082294(*(void *)(a1 + 8));
      if (sub_1000A4AF8(*(void *)(v5 + 8)))
      {
        sub_1000851FC(*(void *)(a1 + 8) + 72);
        uint64_t v6 = *(void *)(a1 + 8);
        uint64_t v7 = (dispatch_group_t *)(*(void *)(*(void *)a1 + 8) + 392);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 0x40000000;
        _OWORD v11[2] = sub_100084CA8;
        void v11[3] = &unk_10019F950;
        v11[4] = v6;
        sub_1000472D8(v7, v11);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = -1;
        long long v8 = *(unint64_t **)a1;
        uint64_t v9 = 1;
        atomic_store(1uLL, v8);
      }
      else
      {
        if (sub_1000D29B8())
        {
          *(void *)&long long v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
          *((void *)&v14 + 1) = 43;
          int v15 = 2;
          sub_100084B40(v16, &v14);
          sub_100003DF0(v17, (uint64_t)"Skipping erase of ", 18);
          sub_100083948(v17);
          sub_100003DF0(v17, (uint64_t)", band was written to", 21);
          std::ostream::~ostream();
          sub_10008CF6C((uint64_t)v16);
          std::ios::~ios();
        }
        return 1;
      }
      return v9;
    }
  }
  if (v4)
  {
    sub_100083A94((uint64_t)&v14, a1);
    if (*((void *)&v14 + 1) && *(void *)(*((void *)&v14 + 1) + 32) == a2)
    {
      if (sub_1000D29B8())
      {
        *(void *)&long long v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43;
        int v13 = 2;
        sub_100084870(v16, &v12);
        sub_100003DF0(v17, (uint64_t)"Skipping band erase (in use)", 28);
        std::ostream::~ostream();
        sub_10008C084((uint64_t)v16);
        std::ios::~ios();
      }
      uint64_t v9 = 1;
    }
    else
    {
      if (sub_1000D29B8())
      {
        *(void *)&long long v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43;
        int v13 = 2;
        sub_1000849D8(v16, &v12);
        sub_100003DF0(v17, (uint64_t)"Band was evicted by another thread (during retain attempt), retry erase process", 79);
        std::ostream::~ostream();
        sub_10008C7F8((uint64_t)v16);
        std::ios::~ios();
      }
      uint64_t v9 = 0;
    }
    sub_1000839D4(&v14);
  }
  else
  {
    if (sub_1000D29B8())
    {
      *(void *)&long long v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
      *((void *)&v14 + 1) = 43;
      int v15 = 2;
      sub_100084708(v16, &v14);
      sub_100003DF0(v17, (uint64_t)"Band was evicted by another thread, retry erase process", 55);
      std::ostream::~ostream();
      sub_10008B910((uint64_t)v16);
      std::ios::~ios();
    }
    return 0;
  }
  return v9;
}

void *sub_100084708(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008FDF4((uint64_t)a1, a2);
  *a1 = off_1001A1540;
  a1[45] = &off_1001A1640;
  a1[46] = &off_1001A1668;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1540;
  a1[45] = off_1001A15C8;
  a1[46] = off_1001A15F0;
  return a1;
}

void sub_100084808(_Unwind_Exception *a1)
{
  sub_10008B910(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008482C(uint64_t a1)
{
  return a1;
}

void *sub_100084870(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008FE84((uint64_t)a1, a2);
  *a1 = off_1001A1760;
  a1[45] = &off_1001A1860;
  a1[46] = &off_1001A1888;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1760;
  a1[45] = off_1001A17E8;
  a1[46] = off_1001A1810;
  return a1;
}

void sub_100084970(_Unwind_Exception *a1)
{
  sub_10008C084(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100084994(uint64_t a1)
{
  return a1;
}

void *sub_1000849D8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008FF14((uint64_t)a1, a2);
  *a1 = off_1001A1980;
  a1[45] = &off_1001A1A80;
  a1[46] = &off_1001A1AA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1980;
  a1[45] = off_1001A1A08;
  a1[46] = off_1001A1A30;
  return a1;
}

void sub_100084AD8(_Unwind_Exception *a1)
{
  sub_10008C7F8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100084AFC(uint64_t a1)
{
  return a1;
}

void *sub_100084B40(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008FFA4((uint64_t)a1, a2);
  *a1 = off_1001A1BA0;
  a1[45] = &off_1001A1CA0;
  a1[46] = &off_1001A1CC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1BA0;
  a1[45] = off_1001A1C28;
  a1[46] = off_1001A1C50;
  return a1;
}

void sub_100084C40(_Unwind_Exception *a1)
{
  sub_10008CF6C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100084C64(uint64_t a1)
{
  return a1;
}

uint64_t sub_100084CA8(uint64_t a1)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v4 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)_block_invoke";
    *((void *)&v4 + 1) = 43;
    int v5 = 2;
    sub_100084D94(v6, &v4);
    sub_100003DF0(v7, (uint64_t)"Background erase of ", 20);
    sub_100083948(v7);
    std::ostream::~ostream();
    sub_10008D6E0((uint64_t)v6);
    std::ios::~ios();
  }
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  v2[69] = 1;
  return (*(uint64_t (**)(unsigned char *))(*(void *)v2 + 16))(v2);
}

void sub_100084D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100084EB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100084D94(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100090034((uint64_t)a1, a2);
  *a1 = off_1001A1DC0;
  a1[45] = &off_1001A1EC0;
  a1[46] = &off_1001A1EE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1DC0;
  a1[45] = off_1001A1E48;
  a1[46] = off_1001A1E70;
  return a1;
}

void sub_100084E94(_Unwind_Exception *a1)
{
  sub_10008D6E0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100084EB8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100084EFC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 48);
}

uint64_t sub_100084F08(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 40) / *(void *)(*(void *)(a1 + 40) + 48);
}

uint64_t sub_100084F18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

void sub_100084F40()
{
}

void sub_100084FC8()
{
}

unint64_t sub_100084FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v34[0] = sub_10008DC7C;
  v34[1] = 0;
  void v34[2] = a1;
  v34[3] = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)&long long v22 = *(void *)a3;
  *((void *)&v22 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v23[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v24 = *(void *)(a3 + 48);
  long long v25 = *(_OWORD *)(a3 + 56);
  long long v26 = *(_OWORD *)(a3 + 72);
  long long v27 = *(_OWORD *)(a3 + 88);
  char v28 = *(unsigned char *)(a3 + 104);
  int v5 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v29 = *(void *)(a3 + 112);
  int64_t v30 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v31 = *(_OWORD *)(a3 + 128);
  uint64_t v32 = *(void *)(a3 + 144);
  char v33 = *(unsigned char *)(a3 + 152);
  uint64_t v6 = *(void *)(a4 + 8);
  *(void *)&long long v10 = *(void *)a4;
  *((void *)&v10 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v11[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v12 = *(void *)(a4 + 48);
  long long v13 = *(_OWORD *)(a4 + 56);
  long long v14 = *(_OWORD *)(a4 + 72);
  long long v15 = *(_OWORD *)(a4 + 88);
  char v16 = *(unsigned char *)(a4 + 104);
  uint64_t v7 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v17 = *(void *)(a4 + 112);
  uint64_t v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = *(_OWORD *)(a4 + 128);
  uint64_t v20 = *(void *)(a4 + 144);
  char v21 = *(unsigned char *)(a4 + 152);
  unint64_t v8 = sub_10003A448((uint64_t)v34, &v22, &v10, 0xFFFFFFFFFFFFFFFFLL);
  if (v18) {
    sub_100010A48(v18);
  }
  if (*((void *)&v10 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v30) {
    sub_100010A48(v30);
  }
  if (*((void *)&v22 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v22 + 1));
  }
  return v8;
}

void sub_100085188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_1000851A8(uint64_t a1)
{
  sub_1000851FC(a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    sub_100010A48(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  uint64_t v4 = (void **)a1;
  sub_100017D2C(&v4);
  return a1;
}

void sub_1000851FC(uint64_t a1)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v9 = "sparse_bundles::Band::ContextsList::clear()";
    *((void *)&v9 + 1) = 41;
    int v10 = 2;
    sub_10006A0F8(v11, &v9);
    sub_100003DF0(v12, (uint64_t)"Resetting ", 10);
    std::ostream::operator<<();
    sub_100003DF0(v12, (uint64_t)" band contexts", 14);
    std::ostream::~ostream();
    sub_10006F4E0((uint64_t)v11);
    std::ios::~ios();
  }
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      int v5 = (std::__shared_weak_count *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = *(void *)(a1 + 88);
      uint64_t v6 = *(void *)(a1 + 96);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v8 = *(std::__shared_weak_count **)(v4 + 24);
      *(void *)(v4 + 16) = v7;
      *(void *)(v4 + 24) = v6;
      if (v8) {
        sub_100010A48(v8);
      }
      if (v5) {
        sub_100010A48(v5);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_100085320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10006A21C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100085338(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000855C8(v1);

  return std::ios::~ios();
}

uint64_t sub_100085384(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000855C8(v1);

  return std::ios::~ios();
}

void sub_1000853E4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000855C8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008544C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100085484(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000854EC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000855C8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100085550(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000855C8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000855C8(uint64_t a1)
{
  *(void *)a1 = off_10019FB38;
  sub_100085704(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100085704(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000858C4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100085860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008588C(uint64_t a1)
{
  sub_1000855C8(a1);

  operator delete();
}

int *sub_1000858C4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 47;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 47;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100085AAC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100085D3C(v1);

  return std::ios::~ios();
}

uint64_t sub_100085AF8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100085D3C(v1);

  return std::ios::~ios();
}

void sub_100085B58(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100085D3C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100085BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100085BF8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100085C60(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100085D3C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100085CC4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100085D3C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100085D3C(uint64_t a1)
{
  *(void *)a1 = off_10019FD58;
  sub_100085E78(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100085E78(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100086038((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100085FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100086000(uint64_t a1)
{
  sub_100085D3C(a1);

  operator delete();
}

int *sub_100086038(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 56;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 56;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100086220(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000864B0(v1);

  return std::ios::~ios();
}

uint64_t sub_10008626C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000864B0(v1);

  return std::ios::~ios();
}

void sub_1000862CC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000864B0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100086334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008636C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000863D4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000864B0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100086438(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000864B0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000864B0(uint64_t a1)
{
  *(void *)a1 = off_10019FF78;
  sub_1000865EC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000865EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000867AC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100086748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100086774(uint64_t a1)
{
  sub_1000864B0(a1);

  operator delete();
}

int *sub_1000867AC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 63;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 63;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100086994(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100086C24(v1);

  return std::ios::~ios();
}

uint64_t sub_1000869E0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100086C24(v1);

  return std::ios::~ios();
}

void sub_100086A40(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100086C24(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100086AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100086AE0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100086B48(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100086C24(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100086BAC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100086C24(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100086C24(uint64_t a1)
{
  *(void *)a1 = off_1001A0198;
  sub_100086D60(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100086D60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100086F20((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100086EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100086EE8(uint64_t a1)
{
  sub_100086C24(a1);

  operator delete();
}

int *sub_100086F20(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 74;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 74;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100087108(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100087398(v1);

  return std::ios::~ios();
}

uint64_t sub_100087154(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100087398(v1);

  return std::ios::~ios();
}

void sub_1000871B4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100087398(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008721C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100087254(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000872BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100087398(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100087320(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100087398(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100087398(uint64_t a1)
{
  *(void *)a1 = off_1001A03B8;
  sub_1000874D4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000874D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100087694((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100087630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008765C(uint64_t a1)
{
  sub_100087398(a1);

  operator delete();
}

int *sub_100087694(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 116;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 116;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008787C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100087B0C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000878C8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100087B0C(v1);

  return std::ios::~ios();
}

void sub_100087928(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100087B0C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100087990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000879C8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100087A30(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100087B0C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100087A94(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100087B0C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100087B0C(uint64_t a1)
{
  *(void *)a1 = off_1001A05D8;
  sub_100087C48(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100087C48(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100087E08((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100087DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100087DD0(uint64_t a1)
{
  sub_100087B0C(a1);

  operator delete();
}

int *sub_100087E08(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 126;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 126;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100087FF0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100088280(v1);

  return std::ios::~ios();
}

uint64_t sub_10008803C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100088280(v1);

  return std::ios::~ios();
}

void sub_10008809C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100088280(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100088104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008813C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000881A4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100088280(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100088208(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100088280(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100088280(uint64_t a1)
{
  *(void *)a1 = off_1001A07F8;
  sub_1000883BC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000883BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008857C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100088518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100088544(uint64_t a1)
{
  sub_100088280(a1);

  operator delete();
}

int *sub_10008857C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 136;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 136;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100088764(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000889F4(v1);

  return std::ios::~ios();
}

uint64_t sub_1000887B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000889F4(v1);

  return std::ios::~ios();
}

void sub_100088810(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000889F4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100088878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000888B0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100088918(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000889F4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008897C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000889F4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000889F4(uint64_t a1)
{
  *(void *)a1 = off_1001A0A18;
  sub_100088B30(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100088B30(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100088CF0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100088C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100088CB8(uint64_t a1)
{
  sub_1000889F4(a1);

  operator delete();
}

int *sub_100088CF0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 139;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 139;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100088ED8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100089168(v1);

  return std::ios::~ios();
}

uint64_t sub_100088F24(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100089168(v1);

  return std::ios::~ios();
}

void sub_100088F84(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100089168(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100088FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100089024(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008908C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100089168(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000890F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100089168(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100089168(uint64_t a1)
{
  *(void *)a1 = off_1001A0C38;
  sub_1000892A4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000892A4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100089464((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100089400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008942C(uint64_t a1)
{
  sub_100089168(a1);

  operator delete();
}

int *sub_100089464(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 154;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 154;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10008964C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  int v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_10001796C();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    long long v14 = (char *)sub_100017984((uint64_t)v4, v13);
    long long v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    sub_10008976C(a1, v19);
    long long v9 = (void *)a1[1];
    sub_100017ACC(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_100089758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100017ACC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10008976C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000897E4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000897E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100089878((uint64_t)v12);
  return v10;
}

uint64_t sub_100089878(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100017A88(a1);
  }
  return a1;
}

uint64_t sub_1000898B0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100089B40(v1);

  return std::ios::~ios();
}

uint64_t sub_1000898FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100089B40(v1);

  return std::ios::~ios();
}

void sub_10008995C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100089B40(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000899C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000899FC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100089A64(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100089B40(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100089AC8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100089B40(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100089B40(uint64_t a1)
{
  *(void *)a1 = off_1001A0E58;
  sub_100089C7C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_100089C7C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100089E3C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100089DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100089E04(uint64_t a1)
{
  sub_100089B40(a1);

  operator delete();
}

int *sub_100089E3C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 203;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 203;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008A024(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008A2B4(v1);

  return std::ios::~ios();
}

uint64_t sub_10008A070(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008A2B4(v1);

  return std::ios::~ios();
}

void sub_10008A0D0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008A2B4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008A138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008A170(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008A1D8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008A2B4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008A23C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008A2B4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008A2B4(uint64_t a1)
{
  *(void *)a1 = off_1001A1078;
  sub_10008A3F0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10008A3F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008A5B0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008A54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008A578(uint64_t a1)
{
  sub_10008A2B4(a1);

  operator delete();
}

int *sub_10008A5B0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 331;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 331;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008A798(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008AA28(v1);

  return std::ios::~ios();
}

uint64_t sub_10008A7E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008AA28(v1);

  return std::ios::~ios();
}

void sub_10008A844(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008AA28(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008A8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008A8E4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008A94C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008AA28(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008A9B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008AA28(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008AA28(uint64_t a1)
{
  *(void *)a1 = off_1001A1298;
  sub_10008AB64(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10008AB64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008AD24((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008ACC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008ACEC(uint64_t a1)
{
  sub_10008AA28(a1);

  operator delete();
}

int *sub_10008AD24(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 343;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 343;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008AF0C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008B19C(v1);

  return std::ios::~ios();
}

uint64_t sub_10008AF58(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008B19C(v1);

  return std::ios::~ios();
}

void sub_10008AFB8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008B19C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008B020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008B058(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008B0C0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008B19C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008B124(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008B19C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008B19C(uint64_t a1)
{
  *(void *)a1 = off_1001A14B8;
  sub_10008B2D8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10008B2D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008B498((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008B434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008B460(uint64_t a1)
{
  sub_10008B19C(a1);

  operator delete();
}

int *sub_10008B498(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 347;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 347;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008B680(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008B910(v1);

  return std::ios::~ios();
}

uint64_t sub_10008B6CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008B910(v1);

  return std::ios::~ios();
}

void sub_10008B72C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008B910(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008B794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008B7CC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008B834(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008B910(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008B898(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008B910(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008B910(uint64_t a1)
{
  *(void *)a1 = off_1001A16D8;
  sub_10008BA4C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10008BA4C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008BC0C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008BBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008BBD4(uint64_t a1)
{
  sub_10008B910(a1);

  operator delete();
}

int *sub_10008BC0C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 382;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 382;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008BDF4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008C084(v1);

  return std::ios::~ios();
}

uint64_t sub_10008BE40(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008C084(v1);

  return std::ios::~ios();
}

void sub_10008BEA0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008C084(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008BF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008BF40(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008BFA8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008C084(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008C00C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008C084(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008C084(uint64_t a1)
{
  *(void *)a1 = off_1001A18F8;
  sub_10008C1C0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10008C1C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008C380((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008C31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008C348(uint64_t a1)
{
  sub_10008C084(a1);

  operator delete();
}

int *sub_10008C380(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 387;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 387;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008C568(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008C7F8(v1);

  return std::ios::~ios();
}

uint64_t sub_10008C5B4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008C7F8(v1);

  return std::ios::~ios();
}

void sub_10008C614(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008C7F8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008C67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008C6B4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008C71C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008C7F8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008C780(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008C7F8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008C7F8(uint64_t a1)
{
  *(void *)a1 = off_1001A1B18;
  sub_10008C934(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10008C934(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008CAF4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008CA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008CABC(uint64_t a1)
{
  sub_10008C7F8(a1);

  operator delete();
}

int *sub_10008CAF4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 390;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 390;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008CCDC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008CF6C(v1);

  return std::ios::~ios();
}

uint64_t sub_10008CD28(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008CF6C(v1);

  return std::ios::~ios();
}

void sub_10008CD88(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008CF6C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008CDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008CE28(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008CE90(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008CF6C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008CEF4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008CF6C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008CF6C(uint64_t a1)
{
  *(void *)a1 = off_1001A1D38;
  sub_10008D0A8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10008D0A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008D268((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008D204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008D230(uint64_t a1)
{
  sub_10008CF6C(a1);

  operator delete();
}

int *sub_10008D268(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 399;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 399;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008D450(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008D6E0(v1);

  return std::ios::~ios();
}

uint64_t sub_10008D49C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008D6E0(v1);

  return std::ios::~ios();
}

void sub_10008D4FC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008D6E0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008D564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008D59C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008D604(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008D6E0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008D668(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008D6E0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008D6E0(uint64_t a1)
{
  *(void *)a1 = off_1001A1F58;
  sub_10008D81C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_10008D81C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008D9DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008D978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008D9A4(uint64_t a1)
{
  sub_10008D6E0(a1);

  operator delete();
}

int *sub_10008D9DC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 406;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 406;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10008DBC4(void *a1)
{
  *a1 = off_1001A1FD8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void sub_10008DC10(void *a1)
{
  *a1 = off_1001A1FD8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100010A48(v1);
  }

  operator delete();
}

uint64_t sub_10008DC7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t sub_10008DCA0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019FB38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008DD1C(_Unwind_Exception *a1)
{
}

uint64_t sub_10008DD30(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019FD58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008DDAC(_Unwind_Exception *a1)
{
}

uint64_t sub_10008DDC0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019FF78;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008DE3C(_Unwind_Exception *a1)
{
}

uint64_t sub_10008DE50(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A0198;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008DECC(_Unwind_Exception *a1)
{
}

void sub_10008DEE0(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_10008DF6C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1000196A4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10008DF58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10008DF6C(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100199828;
  int v5 = *a4;
  uint64_t v6 = sub_10011F3FC(*a2, a3, *a4);
  sub_10004C904((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_10008DFDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10008DFF0(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  sub_10008E07C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1000196A4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10008E068(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10008E07C(void *a1, uint64_t *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019AE08;
  sub_10008E0D8((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_10008E0C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008E0D8(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10008E164(&v8, *a4);
  sub_100139F90(a1, &v9, a3, &v8);
  if (v10) {
    sub_100010A48(v10);
  }
  return a1;
}

void sub_10008E14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100010A48(a12);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_10008E164(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if ((a2 & 0xFFFFFFFC) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFC;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "header_ignore_fields_t";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100199548;
    *((_DWORD *)exception + 8) = v2;
  }
  return result;
}

uint64_t sub_10008E1F4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A03B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008E270(_Unwind_Exception *a1)
{
}

uint64_t sub_10008E284(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A05D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008E300(_Unwind_Exception *a1)
{
}

uint64_t sub_10008E314(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A07F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008E390(_Unwind_Exception *a1)
{
}

uint64_t sub_10008E3A4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A0A18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008E420(_Unwind_Exception *a1)
{
}

uint64_t sub_10008E434(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A0C38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008E4B0(_Unwind_Exception *a1)
{
}

void sub_10008E4C4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10008E52C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100146C04(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008E548(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10008E580(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_10008E5B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10008E5F4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A0E58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008E670(_Unwind_Exception *a1)
{
}

void sub_10008E684(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  if (sub_1000D29B8())
  {
    *(void *)&long long v3 = "sparse_bundles::Band::get_mapped_blocks()::(anonymous class)::operator()() const";
    *((void *)&v3 + 1) = 72;
    LODWORD(v4) = 2;
    sub_10008E878(v7, &v3);
    sub_100003DF0(v8, (uint64_t)"Opening mapped blocks for ", 26);
    sub_100083948(v8);
    std::ostream::~ostream();
    sub_10008ECCC((uint64_t)v7);
    std::ios::~ios();
  }
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)&long long v3 = _NSConcreteStackBlock;
  *((void *)&v3 + 1) = 0x40000000;
  char v4 = sub_10008E9E0;
  long long v5 = &unk_1001A2098;
  uint64_t v6 = v1;
  sub_100044664(v2, (uint64_t)&v3);
}

void *sub_10008E878(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10008EC3C((uint64_t)a1, a2);
  *a1 = off_1001A20D0;
  a1[45] = &off_1001A21D0;
  a1[46] = &off_1001A21F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A20D0;
  a1[45] = off_1001A2158;
  a1[46] = off_1001A2180;
  return a1;
}

void sub_10008E978(_Unwind_Exception *a1)
{
  sub_10008ECCC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008E99C(uint64_t a1)
{
  return a1;
}

void sub_10008E9E0(uint64_t a1)
{
  sub_100141990(*(void *)(a1 + 32) + 16, &v1);
  operator new();
}

void sub_10008EA9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100010A48(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10008EAD4(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10008F440((uint64_t)a1, a2);
  *a1 = off_1001A22F0;
  a1[45] = &off_1001A23F0;
  a1[46] = &off_1001A2418;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A22F0;
  a1[45] = off_1001A2378;
  a1[46] = off_1001A23A0;
  return a1;
}

void sub_10008EBD4(_Unwind_Exception *a1)
{
  sub_10008F4D0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008EBF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008EC3C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A2268;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008ECB8(_Unwind_Exception *a1)
{
}

uint64_t sub_10008ECCC(uint64_t a1)
{
  *(void *)a1 = off_1001A2268;
  sub_10008F0D4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10008EE08(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008ECCC(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008EE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008EEA8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10008EF10(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008ECCC(v1);

  return std::ios::~ios();
}

void sub_10008EF5C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008ECCC(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008EFC0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008ECCC(v1);

  return std::ios::~ios();
}

void sub_10008F020(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008ECCC(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008F09C(uint64_t a1)
{
  sub_10008ECCC(a1);

  operator delete();
}

uint64_t sub_10008F0D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008F258((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008F230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10008F258(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 219;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 219;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008F440(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A2488;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008F4BC(_Unwind_Exception *a1)
{
}

uint64_t sub_10008F4D0(uint64_t a1)
{
  *(void *)a1 = off_1001A2488;
  sub_10008F8D8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_10008F60C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008F4D0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008F674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008F6AC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10008F714(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008F4D0(v1);

  return std::ios::~ios();
}

void sub_10008F760(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008F4D0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_10008F7C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008F4D0(v1);

  return std::ios::~ios();
}

void sub_10008F824(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008F4D0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10008F8A0(uint64_t a1)
{
  sub_10008F4D0(a1);

  operator delete();
}

uint64_t sub_10008F8D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_10008FA5C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008FA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10008FA5C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 226;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 226;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008FC44(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A1078;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008FCC0(_Unwind_Exception *a1)
{
}

uint64_t sub_10008FCD4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A1298;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008FD50(_Unwind_Exception *a1)
{
}

uint64_t sub_10008FD64(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A14B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008FDE0(_Unwind_Exception *a1)
{
}

uint64_t sub_10008FDF4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A16D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008FE70(_Unwind_Exception *a1)
{
}

uint64_t sub_10008FE84(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A18F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008FF00(_Unwind_Exception *a1)
{
}

uint64_t sub_10008FF14(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A1B18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_10008FF90(_Unwind_Exception *a1)
{
}

uint64_t sub_10008FFA4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A1D38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100090020(_Unwind_Exception *a1)
{
}

uint64_t sub_100090034(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A1F58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000900B0(_Unwind_Exception *a1)
{
}

void sub_10009052C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100090554(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

void sub_1000906B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000906DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    int v8 = *(void **)(a1 + 32);
    id v9 = 0;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }
  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_10009086C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100090894(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    int v8 = *(void **)(a1 + 32);
    id v9 = 0;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }
  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_100090A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100090A60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    int v8 = *(void **)(a1 + 32);
    id v9 = 0;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }
  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_100090AEC(_OWORD *a1)
{
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  operator new[]();
}

void sub_100090C00()
{
}

_DWORD *sub_100090C24(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  LODWORD(v14) = 1936879731;
  sub_100090DEC((uint64_t)"header_signature", v4, &v14, 1);
  *(_DWORD *)a1 = 1936879731;
  int v5 = bswap32(*(_DWORD *)(a2 + 4));
  uint64_t v14 = 0x200000001;
  int v15 = 3;
  sub_100090DEC((uint64_t)"version_t", v5, &v14, 3);
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = bswap32(*(_DWORD *)(a2 + 8));
  uint64_t result = sub_100090E8C(&v14, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v14;
  *(_DWORD *)(a1 + 16) = bswap32(*(_DWORD *)(a2 + 16));
  *(void *)(a1 + 20) = bswap64(*(void *)(a2 + 20));
  *(void *)(a1 + 28) = bswap64(*(void *)(a2 + 28));
  long long v7 = *(_OWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 52) = v8;
  *(_OWORD *)(a1 + 36) = v7;
  if (!*(_DWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v13 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Band size in sparse is zero", 0x16u);
  }
  for (uint64_t i = 0; i != 28; ++i)
  {
    if (*(unsigned char *)(a1 + 36 + i))
    {
      uint64_t v10 = __cxa_allocate_exception(0x40uLL);
      unint64_t v11 = (void *)sub_100003670((uint64_t)v10, (uint64_t)"Reserved part isn't zeroed", 0x16u);
    }
  }
  return result;
}

uint64_t sub_100090DEC(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  if (!a4)
  {
LABEL_5:
    uint64_t v5 = result;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = v5;
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_100199548;
    *((_DWORD *)exception + 8) = a2;
  }
  uint64_t v4 = 4 * a4;
  while (*a3 != a2)
  {
    ++a3;
    v4 -= 4;
    if (!v4) {
      goto LABEL_5;
    }
  }
  return result;
}

_DWORD *sub_100090E8C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "flags_t";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100199548;
    *((_DWORD *)exception + 8) = v2;
  }
  return result;
}

void sub_100090FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000912C0(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100091494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000914D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000914E8(uint64_t a1)
{
}

void sub_1000914F0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7)
  {
    int v8 = *__error();
    if (sub_1000D29A0())
    {
      id v9 = sub_1000D2920();
      os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68158210;
      int v16 = 73;
      __int16 v17 = 2080;
      __int16 v18 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v7;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();

      if (v10)
      {
        fprintf(__stderrp, "%s\n", v10);
        free(v10);
      }
    }
    else
    {
      unint64_t v11 = sub_1000D2920();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68158210;
        int v16 = 73;
        __int16 v17 = 2080;
        __int16 v18 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
        __int16 v19 = 2112;
        id v20 = v7;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%.*s: %@", buf, 0x1Cu);
      }
    }
    *__error() = v8;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v6;
  id v14 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000916E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *sub_1000923FC()
{
  return &unk_1001C46E8;
}

void sub_100092408()
{
}

void sub_10009245C()
{
}

void sub_1000924C4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a2, "fd");
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v15 = 0;
    uint64_t v5 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *))a1)(a2, "path", &v15);
    unsigned int v6 = v5;
    if (v5 > 0)
    {
      +[NSString stringWithUTF8String:v15];
      objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t))(a1 + 16))(v15);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *))a1)(a2, "writable", &v15);
      unsigned int v8 = v7;
      if (v7 == 1)
      {
        (*(void (**)(void))(a1 + 16))();
        operator new();
      }
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &off_1001A2C70;
      id v14 = std::generic_category();
      exception[1] = v8;
      exception[2] = v14;
      exception[3] = "Cannot decode writable";
    }
    unint64_t v11 = __cxa_allocate_exception(0x20uLL);
    *unint64_t v11 = &off_1001A2C70;
    uint64_t v12 = std::generic_category();
    v11[1] = v6;
    _OWORD v11[2] = v12;
    void v11[3] = "Cannot decode path";
  }
  id v9 = __cxa_allocate_exception(0x20uLL);
  void *v9 = &off_1001A2C70;
  uint64_t v10 = std::generic_category();
  v9[1] = v4;
  _OWORD v9[2] = v10;
  v9[3] = "Cannot decode file descriptor";
}

void sub_100092794(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = __cxa_begin_catch(exception_object);
    sub_1000929B4(v3, v2);
    __cxa_end_catch();
    JUMPOUT(0x10009264CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000927F0(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t sub_100092818(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [*(id *)(a2 + 8) objectForKeyedSubscript:@"path"];
  BOOL v5 = (*(_DWORD *)(a2 + 4) & 3) != 0;
  *(void *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 100) = -1;
  *(void *)a1 = 88;
  *(void *)(a1 + 8) = sub_100092C6C;
  *(void *)(a1 + 16) = sub_100092C74;
  *(void *)(a1 + 24) = sub_100092CA0;
  *(void *)(a1 + 32) = sub_100092CB0;
  *(void *)(a1 + 40) = sub_100092CB8;
  *(void *)(a1 + 48) = sub_100092CC0;
  *(void *)(a1 + 56) = sub_100092CC4;
  *(void *)(a1 + 64) = sub_100092CC8;
  *(void *)(a1 + 72) = sub_100092CCC;
  *(void *)(a1 + 80) = 0;
  int v6 = open((const char *)[v4 fileSystemRepresentation], *(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 100) = v6;
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = *__error();
    void *exception = &off_1001A2C70;
    uint64_t v10 = std::generic_category();
    exception[1] = v9;
    exception[2] = v10;
    exception[3] = "Failed opening the file";
  }
  return a1;
}

void sub_100092990(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_1000960E4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000929B4(_DWORD *a1, uint64_t *a2)
{
  int v4 = *__error();
  if (sub_1000D29A0())
  {
    BOOL v5 = sub_1000D2920();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
    int v7 = a1[2];
    *(_DWORD *)uint64_t buf = 68158466;
    int v14 = 97;
    __int16 v15 = 2080;
    int v16 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
    __int16 v17 = 2080;
    uint64_t v18 = v6;
    __int16 v19 = 1024;
    int v20 = v7;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();

    if (v8)
    {
      fprintf(__stderrp, "%s\n", v8);
      free(v8);
    }
  }
  else
  {
    uint64_t v9 = sub_1000D2920();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
      int v11 = a1[2];
      *(_DWORD *)uint64_t buf = 68158466;
      int v14 = 97;
      __int16 v15 = 2080;
      int v16 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
      __int16 v17 = 2080;
      uint64_t v18 = v10;
      __int16 v19 = 1024;
      int v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)", buf, 0x22u);
    }
  }
  *__error() = v4;
  if (a2)
  {
    *a2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:(int)a1[2] userInfo:0];
  }
  return 0;
}

void *sub_100092C08(void *a1, uint64_t a2, unsigned int a3)
{
  *a1 = &off_1001A2C70;
  uint64_t v6 = std::generic_category();
  a1[1] = a3;
  a1[2] = v6;
  a1[3] = a2;
  return a1;
}

uint64_t sub_100092C6C()
{
  return 512;
}

unint64_t sub_100092C74(uint64_t a1)
{
  sub_100092D0C(a1, &v2);
  return (unint64_t)v2.st_size >> 9;
}

BOOL sub_100092CA0(uint64_t a1)
{
  return *(unsigned char *)(a1 + 96) != 0;
}

uint64_t sub_100092CB0()
{
  return 1024;
}

uint64_t sub_100092CB8()
{
  return 1024;
}

uint64_t sub_100092CCC(uint64_t result)
{
  if (result)
  {
    sub_1000960E4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100092D0C@<X0>(uint64_t a1@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*(_DWORD *)(a1 + 100), a2);
  if (result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    int v4 = __error();
    BOOL v5 = sub_100092C08(exception, (uint64_t)"fstat failed", *v4);
  }
  return result;
}

void sub_100092D78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFUUIDRef sub_100092D8C(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v1 = sub_100092E20((uint64_t)v5, (char *)[*(id *)(a1 + 88) UTF8String], (uint64_t)[*(id *)(a1 + 88) length]);
  uint64_t v3 = v2;
  *(void *)&v6.byte0 = v1;
  *(void *)&v6.byte8 = v3;
  return CFUUIDCreateFromUUIDBytes(0, v6);
}

uint64_t sub_100092E20(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v13 = xmmword_1001675C0;
  int v14 = -1009589776;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v16 = 0;
  do
  {
    char v7 = *(unsigned char *)(a1 + v6);
    uint64_t v8 = v16++;
    v15[v8] = v7;
    if (v16 == 64)
    {
      uint64_t v16 = 0;
      sub_100093104(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_100080AB0(&v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++v6;
  }
  while (v6 != 16);
  for (; a3; --a3)
  {
    char v9 = *a2;
    uint64_t v10 = v16++;
    v15[v10] = v9;
    if (v16 == 64)
    {
      uint64_t v16 = 0;
      sub_100093104(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_100080AB0(&v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++a2;
  }
  return sub_100093058(a1, &v13);
}

void sub_100093038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_100093058(uint64_t a1, _DWORD *a2)
{
  v4[0] = 0;
  v4[1] = 0;
  int v5 = 0;
  sub_100093340(a2, v4);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)((char *)&v6 + i) = bswap32(*(_DWORD *)((char *)v4 + i));
  BYTE6(v6) = BYTE6(v6) & 0xF | 0x50;
  return v6;
}

_DWORD *sub_100093104(_DWORD *result)
{
  uint64_t v1 = 0;
  uint64_t v2 = (const char *)(result + 5);
  int8x16x4_t v40 = vld4q_s8(v2);
  uint16x8_t v3 = vmovl_u8(*(uint8x8_t *)v40.val[0].i8);
  uint16x8_t v4 = vmovl_high_u8((uint8x16_t)v40.val[0]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v40.val[1].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v40.val[1]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }
  uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v40.val[2]);
  uint16x8_t v14 = vmovl_u8(*(uint8x8_t *)v40.val[2].i8);
  int8x16_t v15 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  uint16x8_t v16 = vmovl_high_u8((uint8x16_t)v40.val[3]);
  v40.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v40.val[3].i8);
  v39[3] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), _Q18), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)), (int8x16_t)vmovl_high_u16(v16));
  _OWORD v39[2] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v39[1] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), _Q19), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v40.val[0]));
  v39[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v40.val[0].i8));
  do
  {
    HIDWORD(v17) = *(_DWORD *)((char *)&v39[2] + v1) ^ *(_DWORD *)((char *)&v39[3] + v1 + 4) ^ *(_DWORD *)((char *)v39 + v1 + 8) ^ *(_DWORD *)((char *)v39 + v1);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)((char *)&v39[4] + v1) = v17 >> 31;
    v1 += 4;
  }
  while (v1 != 256);
  unint64_t v18 = 0;
  int v19 = result[1];
  int v21 = result[3];
  int v20 = result[4];
  int v22 = v20;
  int v23 = result[2];
  int v24 = v21;
  int v25 = v23;
  int v26 = v19;
  int v27 = *result;
  do
  {
    int v28 = v27;
    int v29 = v25;
    int v30 = v24;
    int v31 = v25 ^ v26 ^ v24;
    int v32 = (v24 | v29) & v26 | v24 & v29;
    if (v18 <= 0x3B)
    {
      int v33 = -1894007588;
    }
    else
    {
      int v32 = v31;
      int v33 = -899497514;
    }
    if (v18 <= 0x27)
    {
      int v34 = 1859775393;
    }
    else
    {
      int v31 = v32;
      int v34 = v33;
    }
    if (v18 <= 0x13) {
      int v31 = v30 & ~v26 | v29 & v26;
    }
    HIDWORD(v36) = v28;
    LODWORD(v36) = v28;
    int v35 = v36 >> 27;
    if (v18 <= 0x13) {
      int v34 = 1518500249;
    }
    int v37 = v22 + v31 + v35 + v34;
    HIDWORD(v38) = v26;
    LODWORD(v38) = v26;
    int v25 = v38 >> 2;
    int v27 = v37 + *((_DWORD *)v39 + v18++);
    int v22 = v30;
    int v24 = v29;
    int v26 = v28;
  }
  while (v18 != 80);
  *result += v27;
  result[1] = v28 + v19;
  result[2] = v25 + v23;
  result[3] = v29 + v21;
  result[4] = v30 + v20;
  return result;
}

_DWORD *sub_100093340(_DWORD *result, _DWORD *a2)
{
  uint16x8_t v3 = result;
  uint64_t v4 = *((void *)result + 11);
  *((void *)result + 11) = v4 + 1;
  *((unsigned char *)result + v4 + 20) = 0x80;
  unint64_t v5 = *((void *)result + 11);
  if (v5 == 64)
  {
    *((void *)result + 11) = 0;
    uint64_t result = sub_100093104(result);
    unint64_t v5 = *((void *)v3 + 11);
  }
  if (v5 < 0x39)
  {
    if (v5 != 56)
    {
      do
      {
        *((void *)v3 + 11) = v5 + 1;
        *((unsigned char *)v3 + v5 + 20) = 0;
        unint64_t v5 = *((void *)v3 + 11);
      }
      while (v5 < 0x38);
    }
  }
  else
  {
    do
    {
      *((void *)v3 + 11) = v5 + 1;
      *((unsigned char *)v3 + v5 + 20) = 0;
      unint64_t v5 = *((void *)v3 + 11);
      if (v5 == 64)
      {
        *((void *)v3 + 11) = 0;
        uint64_t result = sub_100093104(v3);
        unint64_t v5 = *((void *)v3 + 11);
      }
    }
    while (v5);
    unint64_t v6 = 0;
    do
    {
      unint64_t v5 = v6 + 1;
      *((unsigned char *)v3 + v6 + 20) = 0;
    }
    while (v6++ < 0x37);
  }
  uint64_t v8 = *((void *)v3 + 13) >> 24;
  *((void *)v3 + 11) = v5 + 1;
  *((unsigned char *)v3 + v5 + 20) = v8;
  uint64_t v9 = *((void *)v3 + 11);
  if (v9 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_100093104(v3);
    uint64_t v9 = *((void *)v3 + 11);
  }
  uint64_t v10 = *((void *)v3 + 13) >> 16;
  *((void *)v3 + 11) = v9 + 1;
  *((unsigned char *)v3 + v9 + 20) = v10;
  uint64_t v11 = *((void *)v3 + 11);
  if (v11 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_100093104(v3);
    uint64_t v11 = *((void *)v3 + 11);
  }
  uint64_t v12 = *((void *)v3 + 13) >> 8;
  *((void *)v3 + 11) = v11 + 1;
  *((unsigned char *)v3 + v11 + 20) = v12;
  uint64_t v13 = *((void *)v3 + 11);
  if (v13 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_100093104(v3);
    uint64_t v13 = *((void *)v3 + 11);
  }
  uint64_t v14 = *((void *)v3 + 13);
  *((void *)v3 + 11) = v13 + 1;
  *((unsigned char *)v3 + v13 + 20) = v14;
  uint64_t v15 = *((void *)v3 + 11);
  if (v15 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_100093104(v3);
    uint64_t v15 = *((void *)v3 + 11);
  }
  uint64_t v16 = *((void *)v3 + 12) >> 24;
  *((void *)v3 + 11) = v15 + 1;
  *((unsigned char *)v3 + v15 + 20) = v16;
  uint64_t v17 = *((void *)v3 + 11);
  if (v17 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_100093104(v3);
    uint64_t v17 = *((void *)v3 + 11);
  }
  uint64_t v18 = *((void *)v3 + 12) >> 16;
  *((void *)v3 + 11) = v17 + 1;
  *((unsigned char *)v3 + v17 + 20) = v18;
  uint64_t v19 = *((void *)v3 + 11);
  if (v19 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_100093104(v3);
    uint64_t v19 = *((void *)v3 + 11);
  }
  uint64_t v20 = *((void *)v3 + 12) >> 8;
  *((void *)v3 + 11) = v19 + 1;
  *((unsigned char *)v3 + v19 + 20) = v20;
  uint64_t v21 = *((void *)v3 + 11);
  if (v21 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_100093104(v3);
    uint64_t v21 = *((void *)v3 + 11);
  }
  uint64_t v22 = *((void *)v3 + 12);
  *((void *)v3 + 11) = v21 + 1;
  *((unsigned char *)v3 + v21 + 20) = v22;
  if (*((void *)v3 + 11) == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_100093104(v3);
  }
  *a2 = *v3;
  a2[1] = v3[1];
  a2[2] = v3[2];
  a2[3] = v3[3];
  a2[4] = v3[4];
  return result;
}

void sub_1000935D0()
{
}

uint64_t sub_1000936D0()
{
  return 1;
}

uint64_t sub_1000936E4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 104));

    uint64_t v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(void *)(v1 + 80) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100093750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = *(void **)(a1 + 80);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10001796C();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_100019308(a1 + 88, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    char v7 = v14 + 8;
    uint64_t v17 = *(char **)(a1 + 72);
    uint64_t v16 = *(char **)(a1 + 80);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = *(char **)(a1 + 72);
    }
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v7;
    *(void *)(a1 + 88) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = a2;
    char v7 = v6 + 1;
  }
  *(void *)(a1 + 80) = v7;
  std::mutex::unlock(v4);
  return 0;
}

void sub_100093854(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100093868(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  uint16x8_t v3 = *(void **)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  std::mutex::unlock(v2);
  sub_100003DF0(&std::cerr, (uint64_t)"raw plugin: going to execute ", 29);
  unint64_t v5 = (void *)std::ostream::operator<<();
  unint64_t v6 = sub_100003DF0(v5, (uint64_t)" SQEs", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  char v7 = std::locale::use_facet(&v13, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v8 = *(NSObject **)(a1 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100093A28;
  block[3] = &unk_1001A25B0;
  block[4] = a1;
  long long __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_1000940E0(&__p, v3, v4, (v4 - (uint64_t)v3) >> 3);
  dispatch_async(v8, block);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v3) {
    operator delete(v3);
  }
}

void sub_100093A00(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v2 - 56));
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *sub_100093A28(void *result)
{
  uint64_t v1 = (uint64_t **)result[5];
  uint64_t v2 = (uint64_t **)result[6];
  if (v1 != v2)
  {
    uint64_t v3 = result[4];
    do
    {
      uint64_t v4 = *v1;
      unsigned int v5 = -45;
      switch(*(unsigned char *)*v1)
      {
        case 2:
          unsigned int v6 = sub_100093B18(*(void *)(v3 + 64), v4 + 3, (uint64_t (*)(void))&_preadv);
          goto LABEL_7;
        case 4:
          unsigned int v6 = sub_100093D98(*(void *)(v3 + 64), v4 + 3, (uint64_t (*)(void))&_pwritev);
          goto LABEL_7;
        case 5:
          unsigned int v6 = sub_100094018(*(void *)(v3 + 64));
LABEL_7:
          unsigned int v5 = v6;
          break;
        case 6:
          unsigned int v5 = 0;
          break;
        default:
          break;
      }
      uint64_t result = (void *)io_rings_return_status(*(void *)(v3 + 56), (uint64_t)v4, v5, 0);
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_100093B18(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if (v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }
    int v6 = -22;
  }
  else
  {
    int v6 = 0;
  }
LABEL_8:
  uint64_t v11 = a2[1] << 9;
  unsigned int v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  int v14 = *__error();
  if (sub_1000D29A0())
  {
    uint64_t v15 = sub_1000D2920();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    int v16 = *__error();
    *(_DWORD *)uint64_t buf = 68158722;
    int v22 = 132;
    __int16 v23 = 2080;
    int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_read_iov_t]";
    __int16 v25 = 2048;
    uint64_t v26 = v11;
    __int16 v27 = 1024;
    int v28 = v6;
    __int16 v29 = 1024;
    int v30 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf(__stderrp, "%s\n", v17);
      free(v17);
    }
  }
  else
  {
    uint64_t v18 = sub_1000D2920();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = *__error();
      *(_DWORD *)uint64_t buf = 68158722;
      int v22 = 132;
      __int16 v23 = 2080;
      int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_read_iov_t]";
      __int16 v25 = 2048;
      uint64_t v26 = v11;
      __int16 v27 = 1024;
      int v28 = v6;
      __int16 v29 = 1024;
      int v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }
  }
  *__error() = v14;
  int v20 = *__error();
  if (v20 < 0) {
    return v20;
  }
  else {
    return -v20;
  }
}

void sub_100093D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100093D98(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if (v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }
    int v6 = -22;
  }
  else
  {
    int v6 = 0;
  }
LABEL_8:
  uint64_t v11 = a2[1] << 9;
  unsigned int v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  int v14 = *__error();
  if (sub_1000D29A0())
  {
    uint64_t v15 = sub_1000D2920();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    int v16 = *__error();
    *(_DWORD *)uint64_t buf = 68158722;
    int v22 = 133;
    __int16 v23 = 2080;
    int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_write_iov_t]";
    __int16 v25 = 2048;
    uint64_t v26 = v11;
    __int16 v27 = 1024;
    int v28 = v6;
    __int16 v29 = 1024;
    int v30 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf(__stderrp, "%s\n", v17);
      free(v17);
    }
  }
  else
  {
    uint64_t v18 = sub_1000D2920();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = *__error();
      *(_DWORD *)uint64_t buf = 68158722;
      int v22 = 133;
      __int16 v23 = 2080;
      int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_write_iov_t]";
      __int16 v25 = 2048;
      uint64_t v26 = v11;
      __int16 v27 = 1024;
      int v28 = v6;
      __int16 v29 = 1024;
      int v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }
  }
  *__error() = v14;
  int v20 = *__error();
  if (v20 < 0) {
    return v20;
  }
  else {
    return -v20;
  }
}

void sub_100093FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100094018(uint64_t a1)
{
  uint64_t result = fcntl(*(_DWORD *)(a1 + 100), 51, 0);
  if (result != -1)
  {
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  if (*__error() != 22 && *__error() != 25 && *__error() != 45
    || (uint64_t result = fsync(*(_DWORD *)(a1 + 100)), result))
  {
LABEL_8:
    int v3 = *__error();
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }
  return result;
}

void *sub_1000940AC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  _DWORD v2[2] = 0;
  return sub_1000940E0(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
}

void sub_1000940C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *sub_1000940E0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_10009415C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100094140(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10009415C(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10001796C();
  }
  uint64_t result = (char *)sub_100019308((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_1000941A0()
{
  *(void *)&long long v1 = "rawTestPlugin_t::subscriber_t::_suspend()";
  *((void *)&v1 + 1) = 39;
  int v2 = 0;
  sub_10009423C(v3, &v1);
  sub_100003DF0(v4, (uint64_t)"Suspended", 9);
  std::ostream::~ostream();
  sub_100094434((uint64_t)v3);
  return std::ios::~ios();
}

void sub_100094228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100094360((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10009423C(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000943A4((uint64_t)a1, a2);
  *a1 = off_1001A25F8;
  a1[45] = &off_1001A26F8;
  a1[46] = &off_1001A2720;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A25F8;
  a1[45] = off_1001A2680;
  a1[46] = off_1001A26A8;
  return a1;
}

void sub_10009433C(_Unwind_Exception *a1)
{
  sub_100094434(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100094360(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000943A4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A2790;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100094420(_Unwind_Exception *a1)
{
}

uint64_t sub_100094434(uint64_t a1)
{
  *(void *)a1 = off_1001A2790;
  sub_10009483C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100094570(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100094434(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000945D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100094610(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100094678(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100094434(v1);

  return std::ios::~ios();
}

void sub_1000946C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100094434(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100094728(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100094434(v1);

  return std::ios::~ios();
}

void sub_100094788(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100094434(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100094804(uint64_t a1)
{
  sub_100094434(a1);

  operator delete();
}

uint64_t sub_10009483C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000949C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100094998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000949C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 121;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 121;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100094BB8()
{
  *(void *)&long long v1 = "rawTestPlugin_t::subscriber_t::_resume()";
  *((void *)&v1 + 1) = 38;
  int v2 = 0;
  sub_100094C54(v3, &v1);
  sub_100003DF0(v4, (uint64_t)"Resumed", 7);
  std::ostream::~ostream();
  sub_100094E4C((uint64_t)v3);
  return std::ios::~ios();
}

void sub_100094C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100094D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100094C54(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100094DBC((uint64_t)a1, a2);
  *a1 = off_1001A2818;
  a1[45] = &off_1001A2918;
  a1[46] = &off_1001A2940;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A2818;
  a1[45] = off_1001A28A0;
  a1[46] = off_1001A28C8;
  return a1;
}

void sub_100094D54(_Unwind_Exception *a1)
{
  sub_100094E4C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100094D78(uint64_t a1)
{
  return a1;
}

uint64_t sub_100094DBC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A29B0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100094E38(_Unwind_Exception *a1)
{
}

uint64_t sub_100094E4C(uint64_t a1)
{
  *(void *)a1 = off_1001A29B0;
  sub_100095254(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_100094F88(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100094E4C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100094FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100095028(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100095090(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100094E4C(v1);

  return std::ios::~ios();
}

void sub_1000950DC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100094E4C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100095140(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100094E4C(v1);

  return std::ios::~ios();
}

void sub_1000951A0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100094E4C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_10009521C(uint64_t a1)
{
  sub_100094E4C(a1);

  operator delete();
}

uint64_t sub_100095254(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000953D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000953B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000953D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 122;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 122;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000955D0(uint64_t a1)
{
  dispatch_barrier_sync(*(dispatch_queue_t *)(a1 + 96), &stru_1001A2A20);
  *(void *)&long long v2 = "rawTestPlugin_t::subscriber_t::_cancel()";
  *((void *)&v2 + 1) = 38;
  int v3 = 0;
  sub_100095680(v4, &v2);
  sub_100003DF0(v5, (uint64_t)"Cancelled", 9);
  std::ostream::~ostream();
  sub_100095878((uint64_t)v4);
  return std::ios::~ios();
}

void sub_100095668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000957A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100095680(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000957E8((uint64_t)a1, a2);
  *a1 = off_1001A2A58;
  a1[45] = &off_1001A2B58;
  a1[46] = &off_1001A2B80;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A2A58;
  a1[45] = off_1001A2AE0;
  a1[46] = off_1001A2B08;
  return a1;
}

void sub_100095780(_Unwind_Exception *a1)
{
  sub_100095878(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000957A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000957E8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A2BF0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100095864(_Unwind_Exception *a1)
{
}

uint64_t sub_100095878(uint64_t a1)
{
  *(void *)a1 = off_1001A2BF0;
  sub_100095C80(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000959B4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100095878(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100095A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100095A54(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100095ABC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100095878(v1);

  return std::ios::~ios();
}

void sub_100095B08(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100095878(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100095B6C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100095878(v1);

  return std::ios::~ios();
}

void sub_100095BCC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100095878(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100095C48(uint64_t a1)
{
  sub_100095878(a1);

  operator delete();
}

uint64_t sub_100095C80(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100095E04((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100095DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100095E04(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 118;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 118;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100095FFC(uint64_t a1, void (*a2)(uint64_t, const char *, id, char *), void (*a3)(uint64_t, const char *, void), uint64_t a4)
{
  a3(a4, "fd", *(unsigned int *)(a1 + 100));
  a2(a4, "path", [*(id *)(a1 + 88) UTF8String], (char *)[*(id *)(a1 + 88) length] + 1);

  return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a2)(a4, "writable", a1 + 96, 1);
}

void sub_1000960A4(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_1000960DC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1000960E4(uint64_t a1)
{
  close(*(_DWORD *)(a1 + 100));
  *(void *)&long long v3 = "rawTestPlugin_t::~rawTestPlugin_t()";
  *((void *)&v3 + 1) = 33;
  int v4 = 0;
  sub_10009618C(v5, &v3);
  sub_100003DF0(v6, (uint64_t)"Cleaning up!", 12);
  std::ostream::~ostream();
  sub_100096384((uint64_t)v5);
  std::ios::~ios();

  return a1;
}

void *sub_10009618C(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000962F4((uint64_t)a1, a2);
  *a1 = off_1001A2CA0;
  a1[45] = &off_1001A2DA0;
  a1[46] = &off_1001A2DC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A2CA0;
  a1[45] = off_1001A2D28;
  a1[46] = off_1001A2D50;
  return a1;
}

void sub_10009628C(_Unwind_Exception *a1)
{
  sub_100096384(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000962B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000962F4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A2E38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_100096370(_Unwind_Exception *a1)
{
}

uint64_t sub_100096384(uint64_t a1)
{
  *(void *)a1 = off_1001A2E38;
  sub_10009678C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

void sub_1000964C0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100096384(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100096528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100096560(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000965C8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100096384(v1);

  return std::ios::~ios();
}

void sub_100096614(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100096384(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_100096678(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100096384(v1);

  return std::ios::~ios();
}

void sub_1000966D8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100096384(v1);
  std::ios::~ios();

  operator delete();
}

void sub_100096754(uint64_t a1)
{
  sub_100096384(a1);

  operator delete();
}

uint64_t sub_10009678C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_100096910((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000968E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100096910(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 325;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 325;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100096F9C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    int v14 = [v13 reason];
    +[DIError failWithEnumValue:150 verboseInfo:v14 error:v10];

    objc_end_catch();
    JUMPOUT(0x100096F64);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100097038(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100097048(uint64_t a1)
{
}

id sub_100097050(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_100097218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009732C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000974B8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v14 = v13;

  if (a11) {
    operator delete[]();
  }
  if (a2 == 1)
  {
    __int16 v17 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(void *)v17 + 16))(v17);
    uint64_t v18 = +[NSString stringWithFormat:@"Invalid public key: %s"];
    +[DIError failWithPOSIXCode:22 verboseInfo:v18 error:v12];

    __cxa_end_catch();
    JUMPOUT(0x1000973F0);
  }

  _Unwind_Resume(a1);
}

void sub_100097770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097AB4(_Unwind_Exception *a1)
{
  unsigned __int8 v2 = v1;

  _Unwind_Resume(a1);
}

void sub_100097C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000981AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000985BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100098880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100098ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100098BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100098D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100098E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    operator delete();
  }

  _Unwind_Resume(a1);
}

_DWORD *sub_100098EA8(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if (a2 != 128 && a2 != 256)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "encryption_key_bits_size_t";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_100199548;
    *((_DWORD *)exception + 8) = a2;
  }
  return result;
}

void sub_100098F40(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        sub_100010A48(v3);
      }
      sub_100141C20((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      char v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    sub_100010A48(v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      sub_100010A48(*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_100099048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100010A48(v12);
  }
  if (a12) {
    sub_100010A48(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100099078(uint64_t *a1, void **a2)
{
  a1[3] = (uint64_t)off_100194960;
  a1[4] = (uint64_t)off_100194990;
  a1[5] = (uint64_t)off_1001949C0;
  a1[6] = (uint64_t)off_1001949F0;
  *a1 = (uint64_t)off_1001A3568;
  a1[1] = (uint64_t)off_1001A35B0;
  a1[2] = (uint64_t)off_1001A35F8;
  a1[3] = (uint64_t)off_1001A3640;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001A3688;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001A36D0;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001A3718;
  *a1 = (uint64_t)off_1001A3340;
  a1[1] = (uint64_t)off_1001A3388;
  a1[2] = (uint64_t)off_1001A33D0;
  a1[3] = (uint64_t)off_1001A3418;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001A3460;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001A34A8;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001A34F0;
  *((unsigned char *)a1 + 80) = 0;
  *((unsigned char *)a1 + 88) = 0;
  *((unsigned char *)a1 + 96) = 0;
  *((unsigned char *)a1 + 104) = 0;
  *((unsigned char *)a1 + 128) = 0;
  *((unsigned char *)a1 + 136) = 0;
  a1[18] = 0;
  *a1 = (uint64_t)off_1001A2F20;
  a1[1] = (uint64_t)off_1001A2F68;
  a1[2] = (uint64_t)off_1001A2FB0;
  a1[3] = (uint64_t)off_1001A2FF8;
  a1[4] = (uint64_t)off_1001A3040;
  a1[5] = (uint64_t)off_1001A3088;
  a1[6] = (uint64_t)off_1001A30D0;
  a1[7] = (uint64_t)off_1001A3130;
  a1[15] = (uint64_t)off_1001A31A0;
  long long v4 = a2 + 2;
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2[2] + 40))(a2[2]);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 8) = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v6 - 112) + 56) = 0;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = ((uint64_t (*)(void **))(*a2)[4])(a2);
  uint64_t v7 = ((uint64_t (*)(void **))(*a2)[3])(a2);
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 112);
  if (!*(unsigned char *)(v8 + 32)) {
    *(unsigned char *)(v8 + 32) = 1;
  }
  *(void *)(v8 + 24) = v7;
  sub_100098F40(v4, (uint64_t)a1 + *(void *)(*a1 - 104));
  return a1;
}

void sub_1000995D8(_Unwind_Exception *a1)
{
  sub_1000280F4(v1, (uint64_t *)&off_1001A32C0);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000995F8(uint64_t *a1, void **a2)
{
  a1[3] = (uint64_t)off_100194960;
  a1[4] = (uint64_t)off_100194990;
  a1[5] = (uint64_t)off_1001949C0;
  a1[6] = (uint64_t)off_1001949F0;
  *a1 = (uint64_t)off_1001A3568;
  a1[1] = (uint64_t)off_1001A35B0;
  a1[2] = (uint64_t)off_1001A35F8;
  a1[3] = (uint64_t)off_1001A3640;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001A3688;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001A36D0;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001A3718;
  *a1 = (uint64_t)off_1001A3340;
  a1[1] = (uint64_t)off_1001A3388;
  a1[2] = (uint64_t)off_1001A33D0;
  a1[3] = (uint64_t)off_1001A3418;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001A3460;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001A34A8;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001A34F0;
  *((unsigned char *)a1 + 80) = 0;
  *((unsigned char *)a1 + 88) = 0;
  *((unsigned char *)a1 + 96) = 0;
  *((unsigned char *)a1 + 104) = 0;
  *((unsigned char *)a1 + 128) = 0;
  *((unsigned char *)a1 + 136) = 0;
  a1[18] = 0;
  *a1 = (uint64_t)off_1001A2F20;
  a1[1] = (uint64_t)off_1001A2F68;
  a1[2] = (uint64_t)off_1001A2FB0;
  a1[3] = (uint64_t)off_1001A2FF8;
  a1[4] = (uint64_t)off_1001A3040;
  a1[5] = (uint64_t)off_1001A3088;
  a1[6] = (uint64_t)off_1001A30D0;
  a1[7] = (uint64_t)off_1001A3130;
  a1[15] = (uint64_t)off_1001A31A0;
  long long v4 = a2 + 2;
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2[2] + 40))(a2[2]);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 8) = v5;
  uint64_t v7 = (uint64_t)a1 + *(void *)(v6 - 112);
  *(void *)(v7 + 40) = *(void *)(v7 + 8);
  *(unsigned char *)(v7 + 48) = 1;
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 112);
  *(void *)(v8 + 24) = *(void *)(v8 + 8);
  *(unsigned char *)(v8 + 32) = 1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 56) = 0;
  uint64_t v9 = ((uint64_t (*)(void **))(*a2)[4])(a2);
  uint64_t v10 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = v9;
  sub_100098F40(v4, (uint64_t)a1 + *(void *)(v10 - 104));
  return a1;
}

void sub_100099B54(_Unwind_Exception *a1)
{
  sub_1000280F4(v1, (uint64_t *)&off_1001A32C0);
  _Unwind_Resume(a1);
}

uint64_t sub_100099B70(uint64_t a1)
{
  *(void *)(a1 + 120) = off_1001A38C0;
  *(void *)(a1 + 24) = off_1001A3918;
  sub_10002A560((const void **)(a1 + 144));
  return a1;
}

void sub_100099BDC(uint64_t a1)
{
  *(void *)(a1 + 120) = off_1001A38C0;
  *(void *)(a1 + 24) = off_1001A3918;
  sub_10002A560((const void **)(a1 + 144));

  operator delete();
}

const void **sub_100099C68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"RAW read-write image";
  sub_100028A28(a1 + *(void *)(*(void *)a1 - 112), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0;
  sub_100010A14(&v9);
  sub_100028DC4(a1 + *(void *)(*(void *)a1 - 120), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0;
  sub_100010A14(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 4;
  sub_10011B428(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0;
  sub_10002AB08(&v8);
  for (uint64_t i = 7; i != -1; i -= 2)
    uint64_t result = sub_10002AAD4((const void **)&v10[i]);
  return result;
}

void sub_100099DD4(_Unwind_Exception *a1)
{
  for (uint64_t i = 56; i != -8; i -= 16)
    sub_10002AAD4((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_100099E18()
{
  return @"RAW";
}

const void **sub_100099E24(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  return sub_10002A560((const void **)v1 + 18);
}

void sub_100099E84(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_100099F24(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  return sub_10002A560((const void **)v1 + 18);
}

void sub_100099F84(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_10009A024(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  return sub_10002A560((const void **)v1 + 18);
}

void sub_10009A084(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_10009A124(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  return sub_10002A560((const void **)v1 + 18);
}

void sub_10009A184(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_10009A224(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  return sub_10002A560((const void **)v1 + 18);
}

void sub_10009A284(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_10009A324(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  return sub_10002A560((const void **)v1 + 18);
}

void sub_10009A384(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_10009A424(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  return sub_10002A560((const void **)v1 + 18);
}

void sub_10009A484(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_10009A524@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100099C68((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_10009A540()
{
  return @"RAW";
}

const void **sub_10009A54C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  return sub_10002A560((const void **)v1 + 18);
}

void sub_10009A5AC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_1001A38C0;
  *((void *)v1 + 3) = off_1001A3918;
  sub_10002A560((const void **)v1 + 18);

  operator delete();
}

const void **sub_10009A64C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100099C68((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_10009A668()
{
  return @"RAW";
}

uint64_t sub_10009A674(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 24) = off_100194960;
  *(void *)(a1 + 32) = off_100194990;
  *(void *)(a1 + 40) = off_1001949C0;
  *(void *)(a1 + 48) = off_1001949F0;
  *(void *)a1 = off_1001A4030;
  *(void *)(a1 + 8) = off_1001A4078;
  *(void *)(a1 + 16) = off_1001A40C0;
  *(void *)(a1 + 24) = off_1001A4108;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001A4150;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_1001A4198;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_1001A41E0;
  *(void *)a1 = off_1001A3E08;
  *(void *)(a1 + 8) = off_1001A3E50;
  *(void *)(a1 + 16) = off_1001A3E98;
  *(void *)(a1 + 24) = off_1001A3EE0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001A3F28;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_1001A3F70;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_1001A3FB8;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = off_1001A3A80;
  *(void *)(a1 + 8) = off_1001A3AC8;
  *(void *)(a1 + 16) = off_1001A3B10;
  *(void *)(a1 + 24) = off_1001A3B58;
  *(void *)(a1 + 32) = off_1001A3BA0;
  *(void *)(a1 + 40) = off_1001A3BE8;
  *(void *)(a1 + 48) = off_1001A3C30;
  *(void *)(a1 + 56) = off_1001A3C90;
  sub_1001362AC(*a2, (char *)a1);
  return a1;
}

void sub_10009AA6C(_Unwind_Exception *a1)
{
  sub_1000280F4(v1, (uint64_t *)&off_1001A3D88);
  _Unwind_Resume(a1);
}

uint64_t sub_10009AA88(uint64_t a1)
{
  *(void *)(a1 + 56) = off_1001A4240;
  *(void *)(a1 + 24) = off_1001A4298;
  sub_10002A560((const void **)(a1 + 80));
  return a1;
}

void sub_10009AAF4(uint64_t a1)
{
  *(void *)(a1 + 56) = off_1001A4240;
  *(void *)(a1 + 24) = off_1001A4298;
  sub_10002A560((const void **)(a1 + 80));

  operator delete();
}

const void **sub_10009AB80@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"Locked encrypted image";
  sub_100028DC4(a1 + *(void *)(*(void *)a1 - 112), &v9);
  v10[4] = @"Encryption Info";
  v10[5] = v9;
  uint64_t v9 = 0;
  sub_100010A14(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 3;
  sub_10011B428(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0;
  sub_10002AB08(&v8);
  for (uint64_t i = 5; i != -1; i -= 2)
    uint64_t result = sub_10002AAD4((const void **)&v10[i]);
  return result;
}

void sub_10009ACA4(_Unwind_Exception *a1)
{
  for (uint64_t i = 40; i != -8; i -= 16)
    sub_10002AAD4((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_10009ACEC()
{
  return @"Unknown";
}

const void **sub_10009ACF8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  return sub_10002A560((const void **)v1 + 10);
}

void sub_10009AD58(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  sub_10002A560((const void **)v1 + 10);

  operator delete();
}

const void **sub_10009ADF8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  return sub_10002A560((const void **)v1 + 10);
}

void sub_10009AE58(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  sub_10002A560((const void **)v1 + 10);

  operator delete();
}

const void **sub_10009AEF8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  return sub_10002A560((const void **)v1 + 10);
}

void sub_10009AF58(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  sub_10002A560((const void **)v1 + 10);

  operator delete();
}

const void **sub_10009AFF8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  return sub_10002A560((const void **)v1 + 10);
}

void sub_10009B058(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  sub_10002A560((const void **)v1 + 10);

  operator delete();
}

const void **sub_10009B0F8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  return sub_10002A560((const void **)v1 + 10);
}

void sub_10009B158(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  sub_10002A560((const void **)v1 + 10);

  operator delete();
}

const void **sub_10009B1F8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  return sub_10002A560((const void **)v1 + 10);
}

void sub_10009B258(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  sub_10002A560((const void **)v1 + 10);

  operator delete();
}

const void **sub_10009B2F8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  return sub_10002A560((const void **)v1 + 10);
}

void sub_10009B358(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 7) = off_1001A4240;
  *((void *)v1 + 3) = off_1001A4298;
  sub_10002A560((const void **)v1 + 10);

  operator delete();
}

const void **sub_10009B3F8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10009AB80((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_10009B414()
{
  return @"Unknown";
}

void sub_10009BAA8()
{
}

void sub_10009BAB8()
{
  JUMPOUT(0x10009BAECLL);
}

void sub_10009BAC8()
{
}

void sub_10009BAD4()
{
}

void sub_10009BB08()
{
  JUMPOUT(0x10009BB24);
}

void sub_10009BB1C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    uint64_t v7 = [v2 path];
    +[DIError nilWithDIException:v6 prefix:v7 error:v3];
    objc_claimAutoreleasedReturnValue();

    __cxa_end_catch();
    JUMPOUT(0x10009B4ACLL);
  }

  _Unwind_Resume(a1);
}

#error "10009BE8C: call analysis failed (funcsize=146)"

void sub_10009C070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009C238(_Unwind_Exception *a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  AEAAuthData v12 = va_arg(va1, AEAAuthData);
  if (a4) {
    sub_100010A48(a4);
  }
  if (a6) {
    sub_100010A48(a6);
  }
  sub_1000A23B4((uint64_t)va1);
  sub_100108200((AEAAuthData *)va);
  os_log_type_t v11 = *(std::__shared_weak_count **)(v8 - 40);
  if (v11) {
    sub_100010A48(v11);
  }
  if (a2 == 1)
  {
    +[DIError nilWithDIException:__cxa_begin_catch(a1) description:@"Error while creating AEA backend" error:v7];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x10009C20CLL);
  }

  _Unwind_Resume(a1);
}

void sub_10009C49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009C4AC(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100107E60((AAByteStream *)va);
  __cxa_begin_catch(a1);
  +[DIError nilWithEnumValue:150 verboseInfo:@"Error checking for AEA file" error:v2];
  objc_claimAutoreleasedReturnValue();
  __cxa_end_catch();
  JUMPOUT(0x10009C3F8);
}

void sub_10009C4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_100010A48(a13);
  }
  JUMPOUT(0x10009C4A0);
}

void sub_10009C67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::string *a19, std::__shared_weak_count *a20,uint64_t a21,uint8_t buf,uint64_t a23,__int16 bufa,__int16 a25,uint64_t a26)
{
  uint64_t v29 = a23;
  a23 = 0;
  if (v29) {
    operator delete();
  }
  if (a2 == 2)
  {
    +[DIError nilWithDIException:__cxa_begin_catch(a1) description:0 error:v27];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x10009C640);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    [v26 backend];
    sub_100113C08(&bufa, &a19);
    if (a20) {
      sub_100010A48(a20);
    }
    sub_10009CC68();
  }

  _Unwind_Resume(a1);
}

void sub_10009CC68()
{
}

void sub_10009CE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CF34(_Unwind_Exception *a1, int a2)
{
  uint64_t v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Error encrypting new image" error:v3];
    __cxa_end_catch();
    JUMPOUT(0x10009CF18);
  }

  _Unwind_Resume(a1);
}

void sub_10009D054(_Unwind_Exception *a1, int a2)
{
  uint64_t v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Error encrypting new image" error:v3];
    __cxa_end_catch();
    JUMPOUT(0x10009D038);
  }

  _Unwind_Resume(a1);
}

void sub_10009D154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009D554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10009D564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint8_t buf,int a27,__int16 a28,uint64_t a29,__int16 a30,uint64_t a31)
{
  sub_10000E628((uint64_t)&buf);
  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

void sub_10009D5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x10009D5BCLL);
  }
  JUMPOUT(0x10009D5D8);
}

#error "10009D710: call analysis failed (funcsize=151)"

void sub_10009D858(_Unwind_Exception *a1)
{
}

void sub_10009D860(_Unwind_Exception *a1)
{
}

void sub_10009D878(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10009D880);
  }
  sub_100003744(a1);
}

void sub_10009DA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009E458(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint8_t buf,uint64_t a51,__int16 a52,__int16 a53)
{
}

void sub_10009EA7C(_Unwind_Exception *a1)
{
}

void sub_10009EAA0(_Unwind_Exception *a1)
{
}

void sub_10009EAAC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003744(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10009EAC8(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v12 = *a1;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      sub_10001796C();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12) >> 3);
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v12) >> 3);
    unint64_t v16 = 2 * v15;
    if (2 * v15 <= v13) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v24 = v7;
    if (v17) {
      uint64_t v18 = (char *)sub_100058794(v7, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v20 = v18;
    __int16 v21 = &v18[24 * v14];
    int v22 = v21;
    __int16 v23 = &v18[24 * v17];
    sub_1000A24E4(&v20, a3);
    uint64_t v4 = sub_1000A263C(a1, &v20, v4);
    sub_1000588F4(&v20);
  }
  else if (a2 == v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    *(_DWORD *)(a2 + 16) = a3[1].n128_u32[0];
    a1[1] = a2 + 24;
  }
  else
  {
    sub_1000A2470((uint64_t)a1, a2, v6, a2 + 24);
    __n128 v10 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    os_log_type_t v11 = *(std::__shared_weak_count **)(v4 + 8);
    *(__n128 *)uint64_t v4 = v10;
    if (v11) {
      sub_100010A48(v11);
    }
    *(_DWORD *)(v4 + 16) = a3[1].n128_u32[0];
  }
  return v4;
}

void sub_10009EC30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000588F4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EC44(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_10001796C();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = v4;
    if (v12) {
      unint64_t v13 = (char *)sub_100058794((uint64_t)v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v12];
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    sub_10005871C(a1, v16);
    uint64_t v8 = a1[1];
    sub_1000588F4(v16);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return v8 - 24;
}

void sub_10009ED68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000588F4((void **)va);
  _Unwind_Resume(a1);
}

void sub_10009EFB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009F0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009F1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009F2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10009F4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009F618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100010A48(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009F82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "10009FA1C: call analysis failed (funcsize=181)"

void sub_10009FB50()
{
}

void sub_10009FB90(void *a1, int a2)
{
  if (a2) {
    sub_100003744(a1);
  }
  JUMPOUT(0x10009F840);
}

void *sub_10009FBA0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000A3E50((uint64_t)a1, a2);
  *a1 = off_1001A43F0;
  a1[45] = &off_1001A44F0;
  a1[46] = &off_1001A4518;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A43F0;
  a1[45] = off_1001A4478;
  a1[46] = off_1001A44A0;
  return a1;
}

void sub_10009FCA0(_Unwind_Exception *a1)
{
  sub_1000A2CA0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10009FCC4(uint64_t a1)
{
  return a1;
}

void sub_10009FDA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A00D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000A0190@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    unint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1000A0214@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    unint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void sub_1000A0338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A04A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A051C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A070C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A07C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10014702C(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1000A0C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100010A48(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A0F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000E628((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000A1048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A114C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A126C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A136C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A19AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v16) {
    sub_100010A48(v16);
  }
  if (a16) {
    sub_100010A48(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1000A1E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000E628((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000A1F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A20B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A210C(uint64_t a1, const void **a2)
{
  return 1;
}

id sub_1000A213C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100047744(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }
  int v3 = SHIBYTE(v11);
  uint64_t v4 = (void **)__p[0];
  NSStringEncoding v5 = +[NSString defaultCStringEncoding];
  if (v3 >= 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v7 = +[NSString stringWithCString:v6 encoding:v5];
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  id v8 = [**(id **)(v2 + 24) getAEAKeyFromSAKSWithMetadata:v7 key:**(void **)(v2 + 32) error:**(void **)(v2 + 40)];

  return v8;
}

void sub_1000A220C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000A2234(void ***a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((char *)a2 + 23) >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = (uint64_t *)*a2;
  }
  uint64_t v4 = +[NSString stringWithCString:v3 encoding:4];
  NSStringEncoding v5 = +[NSURL URLWithString:v4];

  BOOL v6 = +[DIKeyRetriever KKMSKeyWithURL:v5 destKey:**v2 destKeySize:*v2[1] error:*v2[2]];
  return v6;
}

void sub_1000A22D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000A22F0(void *a1, uint64_t *a2)
{
  int v3 = (void **)*a1;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  NSStringEncoding v5 = +[NSString stringWithCString:v4 encoding:1];
  BOOL v6 = +[NSURL URLWithString:v5];

  BOOL v7 = +[DIKeyRetriever WKMSKeyWithURL:v6 authData:a2[3] destKey:*v3[6] destKeySize:*v3[7] error:*v3[8]];
  return v7;
}

void sub_1000A2398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A23B4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1001A43B8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t sub_1000A2410(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    operator delete[]();
  }
  return result;
}

void sub_1000A2434(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_1000A2448(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_1000A245C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t sub_1000A2470(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1000A26F0((uint64_t)&v11, a2, v7, v6);
}

__n128 sub_1000A24E4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    NSStringEncoding v5 = (long long *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x5555555555555556 * ((v4 - *a1) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      uint64_t v12 = a1[4];
      uint64_t v26 = a1[4];
      unint64_t v13 = (char *)sub_100058794(v12, v10);
      unint64_t v15 = &v13[24 * v11];
      unint64_t v16 = a1[1];
      unint64_t v17 = a1[2] - v16;
      if (v17)
      {
        uint64_t v18 = &v15[v17];
        __int16 v19 = &v13[24 * v11];
        do
        {
          *(_OWORD *)__int16 v19 = *(_OWORD *)v16;
          *(void *)unint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v16 + 16);
          v19 += 24;
          v16 += 24;
        }
        while (v19 != v18);
        int64x2_t v20 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v20 = vdupq_n_s64(v16);
        uint64_t v18 = &v13[24 * v11];
      }
      __int16 v23 = (void *)*a1;
      *a1 = v13;
      a1[1] = v15;
      int64x2_t v24 = v20;
      uint64_t v21 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[24 * v14];
      uint64_t v25 = v21;
      sub_1000588F4(&v23);
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      sub_1000A2778((uint64_t)&v23, v5, (long long *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      uint64_t v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(_DWORD *)(v4 + 16) = a2[1].n128_u32[0];
  a1[2] += 24;
  return result;
}

uint64_t sub_1000A263C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_1000587DC((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1000A27EC(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1000A26F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      long long v9 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      uint64_t v10 = *(std::__shared_weak_count **)(a4 + v7 - 16);
      *(_OWORD *)(a4 + v7 - 24) = v9;
      if (v10) {
        sub_100010A48(v10);
      }
      *(_DWORD *)(a4 + v7 - 8) = *(_DWORD *)(v8 - 8);
      v7 -= 24;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

long long *sub_1000A2778(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  NSStringEncoding v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)NSStringEncoding v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        sub_100010A48(v8);
      }
      *(_DWORD *)(a4 + 16) = *((_DWORD *)v5 + 4);
      a4 += 24;
      NSStringEncoding v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1000A27EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  uint64_t v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
      v4 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  sub_1000A2870((uint64_t)v6);
  return v4;
}

uint64_t sub_1000A2870(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000A28A8(a1);
  }
  return a1;
}

void sub_1000A28A8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    int v3 = *(std::__shared_weak_count **)(v1 - 16);
    if (v3) {
      sub_100010A48(v3);
    }
    v1 -= 24;
  }
}

uint64_t sub_1000A28EC(uint64_t result, int a2, int *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = 4 * a4;
    do
    {
      int v5 = *a3++;
      a2 &= ~v5;
      v4 -= 4;
    }
    while (v4);
  }
  if (a2)
  {
    uint64_t v6 = result;
    int v7 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = v6;
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100199548;
    *((_DWORD *)exception + 8) = v7;
  }
  return result;
}

BOOL sub_1000A2988(uint64_t a1)
{
  sub_100120124(a1);
  unint64_t v1 = v6;
  if ((v6 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 4)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v6 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    BOOL v3 = *(_DWORD *)v2 == 1936093281;
    if ((char)v6 < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v3 = 0;
    if ((char)v6 < 0) {
LABEL_9:
    }
      operator delete(__p[0]);
  }
  return v3;
}

uint64_t sub_1000A2A10(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000A2CA0(v1);

  return std::ios::~ios();
}

uint64_t sub_1000A2A5C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000A2CA0(v1);

  return std::ios::~ios();
}

void sub_1000A2ABC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000A2CA0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000A2B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000A2B5C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000A2BC4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000A2CA0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000A2C28(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000A2CA0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000A2CA0(uint64_t a1)
{
  *(void *)a1 = off_1001A4588;
  sub_1000A2DDC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000A2DDC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000A2F9C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000A2F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A2F64(uint64_t a1)
{
  sub_1000A2CA0(a1);

  operator delete();
}

int *sub_1000A2F9C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 651;
    __int16 v21 = 2082;
    int v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D2920();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v13 = a2;
      }
      else {
        unint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 651;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void *sub_1000A319C(void *a1)
{
  *a1 = off_1001A4608;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void sub_1000A31E8(void *a1)
{
  *a1 = off_1001A4608;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100010A48(v1);
  }

  operator delete();
}

uint64_t sub_1000A3254(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_1000A325C(uint64_t a1)
{
  return (unint64_t)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16))
       / *(void *)(a1 + 32);
}

uint64_t sub_1000A32AC()
{
  return 0;
}

void sub_1000A32B4()
{
}

void sub_1000A3320()
{
}

uint64_t sub_1000A3344()
{
  return 4294967251;
}

__n128 sub_1000A334C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 40);
  long long v3 = *(_OWORD *)(a1 + 56);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1000A335C()
{
}

void sub_1000A33E4()
{
}

uint64_t sub_1000A3408(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000A3564(a1, a3, (uint64_t)&v6);
  int v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v6);
  if (v7) {
    sub_100010A48(v7);
  }
  return v4;
}

void sub_1000A3484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A349C()
{
  return -102;
}

uint64_t sub_1000A34A4()
{
  return 4294967251;
}

void *sub_1000A34AC(void *a1)
{
  *a1 = off_1001A4708;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void sub_1000A34F8(void *a1)
{
  *a1 = off_1001A4708;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100010A48(v1);
  }

  operator delete();
}

void *sub_1000A3564@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  unint64_t v9 = a2[4];
  uint64_t v10 = *a2;
  __n128 result = sub_100143B90();
  uint64_t v12 = result[1];
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = v6 / v7 * v7;
  unint64_t v14 = v8 - v13;
  unint64_t v15 = v5 + v6 + v7 - 1 - v13 - (v5 + v6 + v7 - 1) % v7;
  if (v9 < v15) {
    unint64_t v15 = v9;
  }
  if (v14 >= v15) {
    unint64_t v14 = v15;
  }
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v14;
  *(unsigned char *)(a3 + 40) = 0;
  return result;
}

void sub_1000A363C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000A36A4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete[]();
  }
  __cxa_rethrow();
}

void sub_1000A36CC(_Unwind_Exception *a1)
{
}

void sub_1000A36E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000A371C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete[]();
  }
  return result;
}

uint64_t sub_1000A373C(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void sub_1000A3780(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000A37E8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete[]();
  }
  __cxa_rethrow();
}

void sub_1000A3810(_Unwind_Exception *a1)
{
}

void sub_1000A3828(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000A3860(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete[]();
  }
  return result;
}

uint64_t sub_1000A3880(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *sub_1000A38C4@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x1008uLL);
  uint64_t result = sub_1000A3938(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000A3924(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000A3938(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A4820;
  uint64_t v8 = sub_1000EAEE8(*a2, a3);
  sub_1000EA6C0(a1 + 3, a2, a3, v8, v9, a4);
  return a1;
}

void sub_1000A39B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000A39CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A4820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000A39EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A4820;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000A3A40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void sub_1000A3A68(uint64_t a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, void *a6, uint64_t *a7, _OWORD *a8)
{
  unint64_t v15 = operator new(0x1008uLL);
  sub_1000A3B1C(v15, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1000A3B08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000A3B1C(void *a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, void *a6, uint64_t *a7, _OWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A4820;
  sub_1000EAEDC((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, a6, a7, a8);
}

void sub_1000A3BC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000A3BD8(char **a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x470uLL);
  sub_1000A3C4C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1000196A4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000A3C38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000A3C4C(void *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A4870;
  sub_1000A3D44(a1 + 3, a2);
  return a1;
}

void sub_1000A3C94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000A3CA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A4870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000A3CC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A4870;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000A3D1C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000A3D44(void *a1, char **a2)
{
  sub_100003BA4(__p, *a2);
  sub_1000A3DB4(a1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000A3D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A3DB4(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_10011EDAC(a2, 514);
  uint64_t result = sub_10004C904((uint64_t)a1, v3, 1, 0);
  *a1 = off_1001B1C48;
  a1[3] = off_1001B1D28;
  a1[4] = off_1001B1D60;
  return result;
}

uint64_t sub_1000A3E50(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A4588;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000A3ECC(_Unwind_Exception *a1)
{
}

void sub_1000A3EE0(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0xA8uLL);
  sub_1000A3F5C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000196A4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000A3F48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000A3F5C(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A48C0;
  sub_10014253C(a1 + 3, a2, *a3);
  return a1;
}

void sub_1000A3FA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000A3FBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A48C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000A3FDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A48C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000A4030(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

BOOL sub_1000A4058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unint64_t v5 = a4 - a3 + 2;
  unint64_t v6 = ~(-1 << v5) << a3;
  if (a4 - a3 == 62) {
    unint64_t v6 = -1;
  }
  int v7 = *a5;
  int v8 = a5[1];
  if (v7 == v8)
  {
    uint64_t v9 = (atomic_ullong *)(*(void *)(a1 + 8) + 8 * a2);
    if (*a5) {
      BOOL v10 = (v6 & ~atomic_fetch_or(v9, v6)) == 0;
    }
    else {
      BOOL v10 = (atomic_fetch_and(v9, ~v6) & v6) == 0;
    }
  }
  else
  {
    if ((unint64_t)(a4 - a3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = 0;
      unint64_t v12 = v5 >> 1;
      uint64_t v13 = v7 | (2 * v8);
      do
      {
        uint64_t v11 = v13 | (4 * v11);
        --v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v14 = v11 << a3;
    uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 8 * a2);
    unint64_t v16 = v15 & ~v6 | v14;
    uint64_t v17 = v15;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 8) + 8 * a2), (unint64_t *)&v17, v16);
    if (v17 != v15)
    {
      unint64_t v18 = ~v6;
      do
      {
        uint64_t v15 = v17;
        unint64_t v16 = v17 & v18 | v14;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 8) + 8 * a2), (unint64_t *)&v17, v16);
      }
      while (v17 != v15);
    }
    BOOL v10 = v15 == v16;
  }
  return !v10;
}

unint64_t sub_1000A412C(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a3 - a2 == 62) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = ~(-1 << v4) << a2;
  }
  unint64_t v9 = ((v5 << a2) ^ v7 & a1 | (((v5 << a2) ^ v7 & a1) >> 1)) & 0x5555555555555555;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

unint64_t sub_1000A41A4(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a3 - a2 == 62) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = ~(-1 << v4) << a2;
  }
  unint64_t v9 = v7 & ~((v5 << a2) ^ a1) & ((v7 & ~((v5 << a2) ^ a1)) >> 1) & 0x5555555555555555;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

unint64_t sub_1000A421C(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  if (a2 > a3 || *(void *)(a1 + 16) <= a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v22);
    sub_100003DF0(v22, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    sub_100003DF0(v22, (uint64_t)"-", 1);
    std::ostream::operator<<();
    sub_100010C3C((uint64_t)exception, (uint64_t)v22, 0x16u);
  }
  unint64_t v4 = a2 >> 6;
  unint64_t v5 = a2 & 0x3F;
  uint64_t v6 = a3 & 0x3F;
  if (a2 >> 6 == a3 >> 6)
  {
    uint64_t v7 = v6 - v5 + 1;
    uint64_t v8 = ~(-1 << v7) << v5;
    if (v7 == 64) {
      unint64_t v9 = -1;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t v10 = *(void *)(a1 + 8);
    if (a4)
    {
      unint64_t v11 = atomic_fetch_or((atomic_ullong *volatile)(v10 + 8 * v4), v9);
      unint64_t v5 = v9;
    }
    else
    {
      unint64_t v5 = 0;
      unint64_t v11 = atomic_fetch_and((atomic_ullong *volatile)(v10 + 8 * v4), ~v9);
    }
    LOBYTE(v5) = (v11 & v9) != v5;
  }
  else
  {
    unint64_t v12 = a3 >> 6;
    if ((a2 & 0x3F) != 0)
    {
      unint64_t v5 = ~(-1 << -(char)v5) << v5;
      uint64_t v13 = *(void *)(a1 + 8);
      if (a4)
      {
        unint64_t v14 = atomic_fetch_or((atomic_ullong *volatile)(v13 + 8 * v4), v5);
        unint64_t v15 = v5;
      }
      else
      {
        unint64_t v15 = 0;
        unint64_t v14 = atomic_fetch_and((atomic_ullong *volatile)(v13 + 8 * v4), ~v5);
      }
      LOBYTE(v5) = (v14 & v5) != v15;
      ++v4;
    }
    if (v6 != 63)
    {
      unint64_t v16 = ~(-2 << v6);
      uint64_t v17 = *(void *)(a1 + 8);
      if (a4)
      {
        unint64_t v18 = atomic_fetch_or((atomic_ullong *volatile)(v17 + 8 * v12), v16);
        unint64_t v19 = v16;
      }
      else
      {
        unint64_t v19 = 0;
        unint64_t v18 = atomic_fetch_and((atomic_ullong *volatile)(v17 + 8 * v12), ~v16);
      }
      if ((v18 & v16) != v19) {
        LOBYTE(v5) = 1;
      }
      --v12;
    }
    for (; v4 <= v12; ++v4)
      LOBYTE(v5) = (*(void *)(a1 + 8) + 8 * v4 != __swp(*(_DWORD *)(a1 + 8) + 8 * v4, (unsigned int *)(*(void *)(a1 + 8) + 8 * v4))) | v5;
  }
  return v5 & 1;
}

void sub_1000A4420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000A4454(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || ((a3 - a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v19);
    sub_100003DF0(v19, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    sub_100003DF0(v19, (uint64_t)"-", 1);
    std::ostream::operator<<();
    sub_100010C3C((uint64_t)exception, (uint64_t)v19, 0x16u);
  }
  unint64_t v6 = a3 - 2;
  unint64_t v7 = a2 >> 6;
  uint64_t v8 = a2 & 0x3F;
  unint64_t v9 = v6 & 0x3F;
  if (a2 >> 6 == v6 >> 6)
  {
    uint64_t v10 = a2 >> 6;
    return sub_1000A4058(a1, v10, v8, v6 & 0x3F, a4);
  }
  else
  {
    unint64_t v12 = v6 >> 6;
    uint64_t v13 = (a2 & 0x3F) != 0 && sub_1000A4058(a1, v7++, v8, 62, a4);
    if (v9 <= 0x3D) {
      uint64_t v13 = sub_1000A4058(a1, v12--, 0, v9, a4) | v13;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 32;
    do
    {
      uint64_t v14 = *a4 | (2 * a4[1]) | (4 * v14);
      --v15;
    }
    while (v15);
    while (v7 <= v12)
    {
      uint64_t v16 = *(void *)(a1 + 8);
      if (v13)
      {
        *(void *)(v16 + 8 * v7) = v14;
        uint64_t v13 = 1;
      }
      else
      {
        uint64_t v17 = (unsigned int *)(v16 + 8 * v7);
        uint64_t v14 = __swp(v17, v17);
        uint64_t v13 = v17 != (unsigned int *)v14;
      }
      ++v7;
    }
    return v13;
  }
}

void sub_1000A4644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000A4678(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || ((a3 - a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v26);
    sub_100003DF0(v26, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    sub_100003DF0(v26, (uint64_t)"-", 1);
    std::ostream::operator<<();
    sub_100010C3C((uint64_t)exception, (uint64_t)v26, 0x16u);
  }
  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000A412C(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000A412C(v14, v10, 62, a4);
    if (v13 != 64) {
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
    }
    ++v9;
  }
  uint64_t v15 = 0;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = -1;
  }
  uint64_t v18 = 32;
  do
  {
    uint64_t v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v22 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v23 = sub_1000A412C(v22, 0, (v4 - 2) & 0x3F, a4);
      if (v23 != v11 + 2) {
        return v23 + (v8 & 0xFFFFFFFFFFFFFFC0);
      }
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = v9 << 6;
    while (((*(void *)(v20 + 8 * v9) ^ v15 | ((*(void *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555) == 0)
    {
      ++v9;
      v21 += 64;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
    return __clz(__rbit64((*(void *)(v20 + 8 * v9) ^ v15 | ((*(void *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555))
         + v21;
  }
  return v4;
}

void sub_1000A4880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000A48B4(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || ((a3 - a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v27);
    sub_100003DF0(v27, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    sub_100003DF0(v27, (uint64_t)"-", 1);
    std::ostream::operator<<();
    sub_100010C3C((uint64_t)exception, (uint64_t)v27, 0x16u);
  }
  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000A41A4(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000A41A4(v14, v10, 62, a4);
    if (v13 != 64) {
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
    }
    ++v9;
  }
  uint64_t v15 = 0;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = -1;
  }
  uint64_t v18 = 32;
  do
  {
    uint64_t v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v23 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v24 = sub_1000A41A4(v23, 0, (v4 - 2) & 0x3F, a4);
      if (v24 != v11 + 2) {
        return v24 + (v8 & 0xFFFFFFFFFFFFFFC0);
      }
    }
  }
  else
  {
    uint64_t v20 = v9 << 6;
    while (1)
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8 * v9);
      unint64_t v22 = ((v15 ^ (unint64_t)~v21) >> 1) & ~(v15 ^ v21) & 0x5555555555555555;
      if (v22) {
        return __clz(__rbit64(v22)) + v20;
      }
      ++v9;
      v20 += 64;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
  }
  return v4;
}

void sub_1000A4AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000A4AF8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) + 63;
  if (v1 < 0x40) {
    return 1;
  }
  unint64_t v3 = v1 >> 6;
  unint64_t v4 = *(void **)(a1 + 8);
  if (v3 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*v4) {
    return 0;
  }
  uint64_t v6 = 1;
  do
  {
    unint64_t v7 = v6;
    if (v5 == v6) {
      break;
    }
  }
  while (!v4[v6++]);
  return v7 >= v3;
}

uint64_t sub_1000A4B58(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) + 63;
  if (v1 < 0x40) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v2 = 0;
  uint64_t v5 = (v1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  do
  {
    unint64_t v6 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + v4));
    unint64_t v8 = v6;
    BYTE6(v9) = 1;
    v2 += sub_1000A4E78((int8x8_t *)&v8, 0, (uint64_t)&v9, 0, (unsigned char *)&v9 + 6);
    v4 += 8;
  }
  while (v5 != v4);
  return v2;
}

uint64_t sub_1000A4C0C(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v5);
    sub_100003DF0(v5, (uint64_t)"Bit ", 4);
    std::ostream::operator<<();
    sub_100003DF0(v5, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<();
    sub_100003DF0(v5, (uint64_t)" bits in the bitmap", 19);
    sub_100010C3C((uint64_t)exception, (uint64_t)v5, 0x16u);
  }
  unint64_t v2 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * (a2 >> 6)));
  return (v2 >> a2) & 1;
}

void sub_1000A4D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000A4D38(uint64_t a1, unint64_t a2, int a3)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003C58((uint64_t)v8);
    sub_100003DF0(v8, (uint64_t)"Bit ", 4);
    std::ostream::operator<<();
    sub_100003DF0(v8, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<();
    sub_100003DF0(v8, (uint64_t)" bits in the bitmap", 19);
    sub_100010C3C((uint64_t)exception, (uint64_t)v8, 0x16u);
  }
  unint64_t v3 = 1 << a2;
  uint64_t v4 = (atomic_ullong *)(*(void *)(a1 + 8) + 8 * (a2 >> 6));
  if (a3) {
    unint64_t v5 = atomic_fetch_or(v4, v3);
  }
  else {
    unint64_t v5 = atomic_fetch_and(v4, ~v3);
  }
  return (v5 & v3) == 0;
}

void sub_1000A4E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000E628((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A4E78(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return sub_1000A4E98(a1, a2, v5);
  }
  else {
    return sub_1000A4F3C((uint64_t *)a1, a2, v5);
  }
}

uint64_t sub_1000A4E98(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_1000A4F3C(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_1000A4FE8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + 8) = a2;
  sub_10011DF70(a1 + 16, "rings_queue");
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

void sub_1000A5030(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 1) {
    io_rings_return_status(v3, a2, 0xFFFFFFA7, 0);
  }
  else {
    sub_1000A61B8(v3, a2);
  }
}

uint64_t sub_1000A5050(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2) {
    return 0;
  }
  int v3 = 0;
  int v4 = 0;
  uint64_t v5 = 0;
  uint8x8_t v6 = 0;
  uint64_t v7 = (dispatch_queue_t *)(a1 + 16);
  do
  {
    uint64_t v8 = sub_1000A5EC0(*(void *)(a1 + 8));
    uint64_t v9 = v8;
    if (!v8) {
      break;
    }
    __dmb(9u);
    if (*(_WORD *)(v8 + 2))
    {
      int v10 = 1;
      goto LABEL_8;
    }
    if (*(unsigned char *)(a1 + 24))
    {
      int v10 = 2;
LABEL_8:
      if (*(unsigned char *)(a1 + 24)) {
        int v11 = v10;
      }
      else {
        int v11 = 0;
      }
      sub_1000A6538(*(void *)(a1 + 8), v8, v11);
      char v12 = *(unsigned char *)(v9 + 2);
      goto LABEL_12;
    }
    char v12 = *(_WORD *)(v8 + 2);
LABEL_12:
    *(unsigned char *)(a1 + 24) = v12 & 1;
    sub_1000A626C(*(void *)(a1 + 8), *(_DWORD *)(v9 + 8), &v18);
    if (v18)
    {
      if (v3 && *(_DWORD *)(v9 + 8) != v4)
      {
        (*(void (**)(uint64_t))(v5 + 8))(v5);
        if (v6)
        {
          sub_100010A48(v6);
          uint8x8_t v6 = 0;
        }
        uint64_t v5 = 0;
        int v3 = 0;
      }
      if ((*(unsigned int (**)(void))(v18 + 16))())
      {
        (*(void (**)(uint64_t, uint64_t))v18)(v18, v9);
        if (!v5)
        {
          int v4 = *(_DWORD *)(v9 + 8);
          uint64_t v5 = v18;
          unint64_t v13 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v6) {
            sub_100010A48(v6);
          }
          int v3 = 1;
          uint8x8_t v6 = v13;
        }
      }
      else if (sub_1000A6004((unsigned __int8 *)v9))
      {
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 0x40000000;
        v17[2] = sub_1000A52F4;
        unint64_t v17[3] = &unk_1001A4920;
        v17[4] = a1;
        v17[5] = v9;
        sub_10011E028(v7, v17);
      }
      else
      {
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 0x40000000;
        v16[2] = sub_1000A53C0;
        v16[3] = &unk_1001A4940;
        v16[4] = a1;
        v16[5] = v9;
        sub_10011DF84(v7, v16);
      }
    }
    else
    {
      io_rings_return_status(*(void *)(a1 + 8), v9, 0xFFFFFFFA, 0);
    }
    if (v19) {
      sub_100010A48(v19);
    }
    unsigned int v14 = atomic_load((unsigned int *)a1);
  }
  while (v14 == 2);
  if (v3) {
    (*(void (**)(uint64_t))(v5 + 8))(v5);
  }
  if (v6) {
    sub_100010A48(v6);
  }
  return 0;
}

void sub_1000A52BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (v22) {
    sub_100010A48(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A52F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = atomic_load((unsigned int *)v1);
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(v1 + 8);
    io_rings_return_status(v4, v3, 0xFFFFFFA7, 0);
  }
  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    uint64_t v6[2] = sub_1000A53AC;
    void v6[3] = &unk_1001A4900;
    uint64_t v5 = *(void *)(a1 + 40);
    void v6[4] = v1;
    v6[5] = v5;
    sub_10011DF84((dispatch_queue_t *)(v1 + 16), v6);
  }
}

void sub_1000A53AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  sub_1000A5030(v1, *(void *)(a1 + 40));
}

void sub_1000A53C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  sub_1000A5030(v1, *(void *)(a1 + 40));
}

uint64_t sub_1000A53D4(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2) {
    return 4294967260;
  }
  atomic_store(0, (unsigned int *)a1);
  sub_10011E038((dispatch_object_t *)(a1 + 16));
  return 0;
}

void sub_1000A540C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 1)
  {
    if (atomic_exchange((atomic_uint *volatile)a1, 1u) == 2) {
      sub_10011E038((dispatch_object_t *)(a1 + 16));
    }
    sub_1000A6300(*(void *)(a1 + 8));
    sub_10011E040((dispatch_object_t *)(a1 + 16));
    sub_1000A5050(a1);
    sub_10011E030((dispatch_queue_t *)(a1 + 16), &stru_1001A4980);
    sub_10011E030((dispatch_queue_t *)(a1 + 16), &stru_1001A49C0);
  }
}

uint64_t sub_1000A54AC(uint64_t a1)
{
  if (atomic_load((unsigned int *)a1)) {
    return 4294967274;
  }
  atomic_store(2u, (unsigned int *)a1);
  sub_10011E040((dispatch_object_t *)(a1 + 16));
  sub_1000A5050(a1);
  return 0;
}

uint64_t sub_1000A54F8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 4294967274;
  if (a1 && a2 && a3 && a4)
  {
    if (*(_DWORD *)a2 <= 1u)
    {
      uint64_t v5 = *(unsigned int *)(a2 + 4);
      if (v5 < 9) {
        return v4;
      }
      if (v5 < 0x10
        || ((uint8x8_t v6 = *(_DWORD **)(a2 + 8)) == 0 || !*v6)
        && (v5 < 0x31
         || !*(unsigned char *)(a2 + 48) && !memcmp((const void *)(a2 + 48), (const void *)(a2 + 49), v5 - 49)))
      {
        operator new();
      }
    }
    return 4294967251;
  }
  return v4;
}

void sub_1000A56BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    sub_1000A6E24((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_get_max_version(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v2 = -22;
  }
  else {
    unsigned int v2 = 1;
  }
  if (a2 <= 0 && a1 == 0) {
    return v2;
  }
  else {
    return 4294967251;
  }
}

void *sub_1000A56F8(void *result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  if (v2 >= 0x18)
  {
    result[52] = *(void *)(a2 + 16);
    if (v2 >= 0x20)
    {
      result[53] = *(void *)(a2 + 24);
      if (v2 >= 0x28)
      {
        result[54] = *(void *)(a2 + 32);
        if (v2 >= 0x30) {
          result[55] = *(void *)(a2 + 40);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000A5740(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x2000) {
    unsigned int v3 = 0x2000;
  }
  else {
    unsigned int v3 = a2;
  }
  if (a2 + 1 < 0x2000) {
    unsigned int v4 = a2 + 1;
  }
  else {
    unsigned int v4 = 0x2000;
  }
  if ((v4 & (v4 - 1)) != 0)
  {
    char v5 = 0;
    unsigned int v6 = 2 * v4;
    do
    {
      v6 >>= 1;
      ++v5;
    }
    while (v6 != 1);
    unsigned int v4 = 1 << v5;
  }
  uint64_t v7 = mmap(0, 88 * v3 + 8 + 4 * v4, 3, 4097, 0, 0);
  if (v7 == (void *)-1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  *(void *)a1 = v8;
  uint64_t v9 = mmap(0, (16 * v4) | 8, 3, 4097, 0, 0);
  if (v9 == (void *)-1) {
    int v10 = 0;
  }
  else {
    int v10 = v9;
  }
  *(void *)(a1 + 8) = v10;
  uint64_t result = 4294967284;
  if (*(void *)a1)
  {
    if (v10)
    {
      sub_1000A65E4((std::mutex *)(a1 + 16));
      uint64_t v12 = *(void *)a1;
      uint64_t v13 = *(void *)(a1 + 8);
      v14[0] = off_1001A4A18;
      v14[1] = a1;
      v14[3] = v14;
      sub_1000A6788(a1 + 16, v12, v13, v3, v4, v4, (uint64_t)v14);
    }
  }
  return result;
}

void sub_1000A5954(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_1000A69E8((uint64_t *)va);
  sub_100018430((uint64_t *)va1);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1000A5908);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A599C(uint64_t result)
{
  if (*(unsigned char *)(result + 264))
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 408))
    {
      unsigned int v2 = *(_DWORD *)(result + 136);
      uint64_t v3 = *(unsigned int *)(result + 312);
      uint64_t v4 = *(unsigned int *)(result + 56);
      sub_1000A65E4((std::mutex *)(result + 16));
      sub_1000A69AC((void *)(v1 + 272));
      if (*(void *)v1)
      {
        munmap(*(void **)v1, 4 * v4 + 88 * v2 + 8);
        *(void *)uint64_t v1 = 0;
      }
      uint64_t v5 = *(void **)(v1 + 8);
      if (v5)
      {
        munmap(v5, (16 * v3) | 8);
        *(void *)(v1 + 8) = 0;
      }
      uint64_t v6 = *(void *)(v1 + 704);
      *(void *)(v1 + 704) = 0;
      if (v6) {
        (*(void (**)(void))(v6 + 32))();
      }
      uint64_t v7 = 696;
      while (1)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v1 + v7);
        if (v8) {
          sub_100010A48(v8);
        }
        v7 -= 16;
        if (v7 == 440)
        {
          sub_1000A6D80(v1 + 272);
          sub_1000A6DBC(v1 + 16);
          operator delete();
        }
      }
    }
  }
  return result;
}

void io_rings_setup()
{
}

void sub_1000A5BAC()
{
}

uint64_t io_rings_enter(uint64_t a1, int a2, int a3)
{
  if (a3) {
    return 4294967194;
  }
  if (*(_DWORD *)(a1 + 712) == 2) {
    return 4294967207;
  }
  return sub_1000A6FAC(a1 + 16, a2, 1);
}

double io_rings_sqe_allocate(uint64_t a1)
{
  uint64_t v1 = sub_1000A5C3C(a1 + 16);
  if (v1)
  {
    *(_DWORD *)(v1 + 12) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_DWORD *)(v1 + 1) = 0;
    *(_DWORD *)(v1 + 4) = 0;
  }
  return result;
}

uint64_t sub_1000A5C3C(uint64_t a1)
{
  uint64_t v2 = sub_1000A719C((void *)(a1 + 104));
  if (v2 < 0) {
    return 0;
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 1u);
  *(_DWORD *)(*(void *)(a1 + 24) + 4
                                   * (*(_DWORD *)(a1 + 44) & atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u))) = v2;
  return *(void *)(a1 + 96) + 88 * v2;
}

uint64_t io_rings_get_cqe(uint64_t a1)
{
  return sub_1000A5CA8(a1 + 272);
}

uint64_t sub_1000A5CA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    unsigned int v2 = atomic_load(*(unsigned int **)a1);
    *(_DWORD *)(a1 + 92) = v2;
    __dmb(9u);
    *(unsigned char *)(a1 + 96) = 0;
  }
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 16));
  sub_1000A7210(a1, (uint64_t)&v5);
  if (!v7) {
    return 0;
  }
  if (v3 == *(_DWORD *)(a1 + 92)) {
    *(unsigned char *)(a1 + 96) = 1;
  }
  v6 |= 1u;
  return v5;
}

uint64_t io_rings_cq_get_overruns(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 372));
}

uint64_t io_rings_cq_clear_overruns(uint64_t result)
{
  return result;
}

uint64_t io_rings_suspend(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712)) {
    return 4294967274;
  }
  unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 16);
  if (!v3 || (uint64_t result = v3(), !result))
  {
    sub_1000A6288(a1 + 448);
    uint64_t result = 0;
    *(_DWORD *)(a1 + 712) = 1;
  }
  return result;
}

uint64_t io_rings_cancel(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712) != 1) {
    return -16;
  }
  unsigned int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 8);
  if (v2 && (int v3 = v2()) != 0)
  {
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 712) = 2;
    unint64_t v7 = sub_1000A7300(a1 + 16);
    if ((v7 & 0xFF00000000) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v8 = *(void *)(a1 + 112);
        if (!v8) {
          break;
        }
        uint64_t v9 = v8 + 88 * v7;
        sub_1000A5F80(a1 + 272, *(void *)(v9 + 16), 0x1FFFFFFA7, 0);
        unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - *(void *)(a1 + 112)) >> 3);
        atomic_fetch_or((atomic_ullong *volatile)(*(void *)(a1 + 128) + 8 * (v10 >> 6)), 1 << v10);
        ++v5;
        unint64_t v7 = sub_1000A7300(a1 + 16);
      }
      while ((v7 & 0xFF00000000) != 0);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_1000A5EC0(uint64_t a1)
{
  unint64_t v2 = sub_1000A7300(a1 + 16);
  if ((v2 & 0xFF00000000) != 0) {
    return *(void *)(a1 + 112) + 88 * v2;
  }
  else {
    return 0;
  }
}

void io_rings_unsubscribe_dest_object(uint64_t a1, unsigned int a2)
{
}

void sub_1000A5F10(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  sub_1000A7538((uint64_t *)(a1 + 16 * a2), &v2);
  if (v3) {
    sub_100010A48(v3);
  }
}

void sub_1000A5F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_release(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 712) == 2) {
      return sub_1000A599C(result);
    }
  }
  return result;
}

uint64_t sub_1000A5F80(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __dmb(0xBu);
  uint64_t result = sub_1000A7424(a1, a2, a3);
  if (result)
  {
    if (result == -28)
    {
      if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 100), 1u)) {
        sub_1000A74DC(a1 + 104, 0, 4);
      }
      return 4294967268;
    }
  }
  else
  {
    return sub_1000A6FAC(a1, 1, a4);
  }
  return result;
}

BOOL sub_1000A6004(unsigned __int8 *a1)
{
  return *a1 == 5;
}

void sub_1000A6014(uint64_t a1, uint64_t a2)
{
}

void sub_1000A601C(uint64_t a1, uint64_t a2)
{
  sub_1000A7680(&v2, a2);
}

void sub_1000A60D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t io_rings_return_status(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8 = sub_1000A6460(a1 + 144, a2);
  __int16 v9 = *(_WORD *)(a2 + 2);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((a2 - *(void *)(a1 + 112)) >> 3);
  atomic_fetch_or((atomic_ullong *volatile)(*(void *)(a1 + 128) + 8 * (v11 >> 6)), 1 << v11);
  if ((v9 & 4) != 0) {
    int v12 = 0;
  }
  else {
    int v12 = v8;
  }

  return sub_1000A5F80(a1 + 272, v10, a3 | ((unint64_t)(a4 | 1u) << 32), v12);
}

void sub_1000A61B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= 5)
  {
    uint64_t v5 = 0;
    int v6 = 0;
LABEL_6:
    io_rings_return_status(a1, a2, 0xFFFFFFFA, 0);
    goto LABEL_7;
  }
  sub_1000A77B8((void *)(a1 + 16 * v4 + 448), &v5);
  if (!v5) {
    goto LABEL_6;
  }
  if (!(*(unsigned int (**)(void))v5)()) {
    (*(void (**)(void))(v5 + 8))();
  }
LABEL_7:
  if (v6) {
    sub_100010A48(v6);
  }
}

void sub_1000A6250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A626C(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 < 5)
  {
    sub_1000A77B8((void *)(a1 + 16 * a2 + 448), a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1000A6288(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; i += 16)
  {
    sub_1000A77B8((void *)(a1 + i), &v3);
    if (v3) {
      (*(void (**)(void))(v3 + 24))();
    }
    if (v4) {
      sub_100010A48(v4);
    }
  }
}

void sub_1000A62E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A6300(uint64_t a1)
{
}

void sub_1000A6308(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; i += 16)
  {
    sub_1000A77B8((void *)(a1 + i), &v3);
    if (v3) {
      (*(void (**)(void))(v3 + 40))();
    }
    if (v4) {
      sub_100010A48(v4);
    }
  }
}

void sub_1000A6368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100010A48(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A6380(uint64_t a1, uint64_t a2, int a3, int a4)
{
  std::mutex::lock((std::mutex *)a1);
  uint64_t v8 = *(void *)(a1 + 112);
  if (a3)
  {
    if (v8) {
      *(unsigned char *)(v8 + 4) = 1;
    }
    operator new();
  }
  if (a4 && v8) {
    *(unsigned char *)(v8 + 4) = 1;
  }
  atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = v9;
  sub_1000A781C(a1 + 64, &v10, &v10);
  if (a4) {
    *(void *)(a1 + 112) = 0;
  }
  ++*(void *)(a1 + 104);
  std::mutex::unlock((std::mutex *)a1);
}

void sub_1000A6448(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A6460(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  if (!*(void *)(a1 + 104)) {
    return 1;
  }
  std::mutex::lock((std::mutex *)a1);
  uint64_t v3 = sub_1000A7CBC((void *)(a1 + 64), &v6);
  if (!v3)
  {
    std::mutex::unlock((std::mutex *)a1);
    return 1;
  }
  --*(void *)(a1 + 104);
  uint64_t v4 = v3[3];
  sub_1000A7DA8((void *)(a1 + 64), v3);
  std::mutex::unlock((std::mutex *)a1);
  if (!v4) {
    return 1;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    if (*(unsigned char *)(v4 + 4)) {
      operator delete();
    }
  }
  return 0;
}

void sub_1000A6524(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000A6538(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000A6380(a1 + 144, a2, a3 == 0, a3 == 2);
}

uint64_t di_plugin_register(char *a1, uint64_t a2)
{
  uint64_t v4 = sub_100069C84();
  sub_100003BA4(__p, a1);
  uint64_t v5 = sub_10006A96C(v4, (uint64_t)__p, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_1000A65C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::mutex *sub_1000A65E4(std::mutex *result)
{
  if (result[3].__m_.__opaque[48])
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 2;
    sub_1000A664C((uint64_t)&result[3]);
    std::mutex::~mutex(v2);
    uint64_t v3 = *(void *)&v1[1].__m_.__opaque[40];
    *(void *)&v1[1].__m_.__opaque[40] = 0;
    if (v3) {
      operator delete[]();
    }
    uint64_t result = (std::mutex *)sub_100018430(&v1->__m_.__opaque[48]);
    v1[3].__m_.__opaque[48] = 0;
  }
  return result;
}

uint64_t sub_1000A664C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1000A669C()
{
}

void *sub_1000A66B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1001A4A18;
  result[1] = v3;
  return result;
}

uint64_t sub_1000A66F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001A4A18;
  a2[1] = v2;
  return result;
}

uint64_t (**sub_1000A6724(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (***)(void))(*(void *)(a1 + 8) + 704);
  if (*result) {
    return (uint64_t (**)(void))(*result)();
  }
  return result;
}

uint64_t sub_1000A673C(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001A4A78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000A677C()
{
  return &off_1001A4A78;
}

void sub_1000A6788(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v8 = a4;
  *(void *)&long long v10 = a2 + 88 * a4;
  *((void *)&v10 + 1) = a5;
  uint64_t v9 = sub_1000A6854(a1, a2 + 4 * a5 + 88 * a4, a3 + 16 * a6 + 4, &v10, a5, a7);
  *(void *)(v9 + 96) = a2;
  sub_1000A68D8((void *)(v9 + 104), v8);
}

void sub_1000A6840(_Unwind_Exception *a1)
{
  sub_100018430((void *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000A6854(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 40) = a5;
  if ((a5 & (a5 - 1)) != 0)
  {
    char v7 = 0;
    unsigned int v8 = 2 * a5;
    do
    {
      v8 >>= 1;
      ++v7;
    }
    while (v8 != 1);
    a5 = 1 << v7;
  }
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = a5 - 1;
  sub_100010F94(a1 + 56, a6);
  *(_WORD *)(a1 + 88) = 1;
  return a1;
}

void sub_1000A68D8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new[]();
}

void *sub_1000A69AC(void *result)
{
  if (*((unsigned char *)result + 136))
  {
    uint64_t v1 = result;
    sub_1000A69E8(result + 13);
    uint64_t result = sub_100018430(v1 + 7);
    *((unsigned char *)v1 + 136) = 0;
  }
  return result;
}

void *sub_1000A69E8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000A6A70()
{
}

void *sub_1000A6A84(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1001A4A98;
  result[1] = v3;
  return result;
}

uint64_t sub_1000A6ACC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001A4A98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000A6AF8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t, void))(result + 432);
  if (v2) {
    return v2(result, *(void *)(result + 440));
  }
  return result;
}

uint64_t sub_1000A6B10(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001A4AF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000A6B50()
{
  return &off_1001A4AF8;
}

void sub_1000A6B60()
{
}

void *sub_1000A6B74(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1001A4B18;
  result[1] = v3;
  return result;
}

uint64_t sub_1000A6BBC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001A4B18;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000A6BE8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(result + 416);
  if (v4) {
    return v4(result, *(void *)(result + 424), *a2, a3);
  }
  return result;
}

uint64_t sub_1000A6C08(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001A4B88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000A6C48()
{
  return &off_1001A4B88;
}

uint64_t sub_1000A6C54(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  *(void *)&long long v12 = a3;
  *((void *)&v12 + 1) = a6;
  uint64_t v10 = sub_1000A6854(a1, a3 + 16 * a6, 4 * a5 + 88 * a4 + a2 + 4, &v12, a6, a7);
  *(unsigned char *)(v10 + 96) = 1;
  *(_DWORD *)(v10 + 100) = 0;
  sub_1000A6CE8(v10 + 104, a8);
  return a1;
}

void sub_1000A6CD4(_Unwind_Exception *a1)
{
  sub_100018430((void *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000A6CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1000A6D80(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    sub_1000A69E8((void *)(a1 + 104));
    sub_100018430((void *)(a1 + 56));
  }
  return a1;
}

uint64_t sub_1000A6DBC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 248))
  {
    sub_1000A664C(a1 + 192);
    std::mutex::~mutex((std::mutex *)(a1 + 128));
    uint64_t v2 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    if (v2) {
      operator delete[]();
    }
    sub_100018430((void *)(a1 + 56));
  }
  return a1;
}

void sub_1000A6E24(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 704);
    *(void *)(a2 + 704) = 0;
    if (v3) {
      (*(void (**)(void))(v3 + 32))();
    }
    uint64_t v4 = 696;
    while (1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a2 + v4);
      if (v5) {
        sub_100010A48(v5);
      }
      v4 -= 16;
      if (v4 == 440)
      {
        sub_1000A6D80(a2 + 272);
        sub_1000A6DBC(a2 + 16);
        operator delete();
      }
    }
  }
}

uint64_t sub_1000A6EBC(uint64_t a1)
{
  return sub_1000A5050(*(void *)(a1 + 48));
}

uint64_t sub_1000A6EC4(uint64_t a1)
{
  return 0;
}

uint64_t sub_1000A6EE4(uint64_t a1)
{
  return sub_1000A53D4(*(void *)(a1 + 48));
}

uint64_t sub_1000A6EEC(uint64_t a1)
{
  return sub_1000A54AC(*(void *)(a1 + 48));
}

uint64_t sub_1000A6EF4(uint64_t result)
{
  if (result)
  {
    sub_1000A6F4C((uint64_t *)(result + 48), 0);
    operator delete();
  }
  return result;
}

uint64_t *sub_1000A6F4C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_10011DEBC((NSObject **)(v2 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_1000A6FAC(uint64_t a1, int a2, int a3)
{
  int v4 = *(_DWORD *)(a1 + 52);
  int v5 = v4;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), (unsigned int *)&v5, (v4 + 2 * a2) | a3);
  if (v5 != v4)
  {
    int v6 = v5;
    do
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), (unsigned int *)&v6, (v5 + 2 * a2) | a3);
      BOOL v13 = v6 == v5;
      int v5 = v6;
    }
    while (!v13);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 48), -a2) == a2
    && (atomic_exchange((atomic_uchar *volatile)(a1 + 89), 1u) & 1) == 0)
  {
    while (1)
    {
      unsigned int v7 = *(_DWORD *)(a1 + 52);
      if (atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
        break;
      }
      unsigned int v8 = v7;
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), &v8, 0);
      if (v8 == v7)
      {
        unint64_t v9 = (v7 >> 1) | ((unint64_t)(v7 & 1) << 32);
        goto LABEL_11;
      }
    }
    unint64_t v9 = 0;
LABEL_11:
    unint64_t v10 = HIDWORD(v9);
    if (v9)
    {
LABEL_12:
      __dmb(0xBu);
      int v11 = v9 + atomic_fetch_add(*(atomic_uint *volatile *)a1, v9);
      unsigned int v12 = atomic_load(*(unsigned int **)(a1 + 16));
      BOOL v13 = v11 == v12 || v10 == 0;
      if (!v13)
      {
        int v14 = 1;
        atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 88), (unsigned __int8 *)&v14, 0);
        if (v14 == 1)
        {
          uint64_t v15 = *(void *)(a1 + 80);
          if (!v15) {
            sub_100017644();
          }
          (*(void (**)(uint64_t))(*(void *)v15 + 48))(v15);
        }
      }
      while (1)
      {
        unsigned int v16 = *(_DWORD *)(a1 + 52);
        if (atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
          break;
        }
        unsigned int v17 = v16;
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), &v17, 0);
        if (v17 == v16)
        {
          LODWORD(v9) = v16 >> 1;
          LODWORD(v10) = v16 & 1;
          if (v16 > 1) {
            goto LABEL_12;
          }
          break;
        }
      }
    }
LABEL_22:
    atomic_store(0, (unsigned __int8 *)(a1 + 89));
    __dmb(0xBu);
    if (*(_DWORD *)(a1 + 52))
    {
      while (2)
      {
        if ((atomic_exchange((atomic_uchar *volatile)(a1 + 89), 1u) & 1) == 0)
        {
          while (1)
          {
            unsigned int v18 = *(_DWORD *)(a1 + 52);
            if (atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
              break;
            }
            unsigned int v19 = v18;
            atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), &v19, 0);
            if (v19 == v18)
            {
              if (v18 > 1)
              {
                LODWORD(v10) = v18 & 1;
                LODWORD(v9) = v18 >> 1;
                if (v9) {
                  goto LABEL_12;
                }
                goto LABEL_22;
              }
              break;
            }
          }
          atomic_store(0, (unsigned __int8 *)(a1 + 89));
          __dmb(0xBu);
          if (*(_DWORD *)(a1 + 52) && !atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
            continue;
          }
        }
        break;
      }
    }
  }
  return 0;
}

uint64_t sub_1000A719C(void *a1)
{
  unint64_t v1 = *a1 + 63;
  if (v1 >= 0x40)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    int v4 = &v3[v1 >> 6];
    do
    {
      if (atomic_load(v3))
      {
        while (1)
        {
          unint64_t v6 = atomic_load(v3);
          if (!v6) {
            break;
          }
          unint64_t v7 = __clz(__rbit64(v6));
          if ((atomic_fetch_and((atomic_ullong *volatile)v3, ~(1 << v7)) & (1 << v7)) != 0) {
            return v7 + 8 * ((void)v3 - a1[1]);
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return -1;
}

uint64_t sub_1000A7210@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  while (1)
  {
    unsigned int v2 = atomic_load(*(unsigned int **)result);
    unsigned int v3 = atomic_load(*(unsigned int **)(result + 16));
    if (v2 == v3)
    {
      if (atomic_exchange((atomic_uchar *volatile)(result + 88), 1u)) {
        break;
      }
      unsigned int v4 = atomic_load(*(unsigned int **)result);
      unsigned int v5 = atomic_load(*(unsigned int **)(result + 16));
      if (v4 == v5) {
        break;
      }
      int v6 = 1;
      atomic_compare_exchange_strong((atomic_uchar *volatile)(result + 88), (unsigned __int8 *)&v6, 0);
      if (v6 != 1) {
        break;
      }
    }
    uint64_t v7 = atomic_load(*(unsigned int **)(result + 16));
    unsigned int v8 = atomic_load(*(unsigned int **)result);
    if (v7 != v8)
    {
      uint64_t v9 = v7;
      atomic_compare_exchange_strong(*(atomic_uint *volatile *)(result + 16), (unsigned int *)&v9, v7 + 1);
      if (v9 == v7) {
        goto LABEL_11;
      }
      while (1)
      {
        LODWORD(v7) = v9;
        unsigned int v8 = atomic_load(*(unsigned int **)result);
        if (v9 == v8) {
          break;
        }
        uint64_t v10 = v9;
        atomic_compare_exchange_strong(*(atomic_uint *volatile *)(result + 16), (unsigned int *)&v10, v9 + 1);
        BOOL v11 = v10 == v9;
        uint64_t v9 = v10;
        if (v11) {
          goto LABEL_11;
        }
      }
    }
    unsigned int v8 = v7;
LABEL_11:
    if (v7 != v8)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(void *)(result + 24) + 16 * (*(_DWORD *)(result + 44) & v7));
      char v12 = 1;
      goto LABEL_14;
    }
  }
  char v12 = 0;
  *(unsigned char *)a2 = 0;
LABEL_14:
  *(unsigned char *)(a2 + 16) = v12;
  return result;
}

unint64_t sub_1000A7300(uint64_t a1)
{
  unsigned int v1 = atomic_load(*(unsigned int **)a1);
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v1 == v2
    && ((atomic_exchange((atomic_uchar *volatile)(a1 + 88), 1u) & 1) != 0
     || (v3 = atomic_load(*(unsigned int **)a1), unsigned int v4 = atomic_load(*(unsigned int **)(a1 + 16)), v3 == v4)
     || (int v5 = 1, atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 88), (unsigned __int8 *)&v5, 0), v5 != 1)))
  {
    LOBYTE(a1) = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    int v11 = 0;
  }
  else
  {
    uint64_t v6 = atomic_load(*(unsigned int **)(a1 + 16));
    unsigned int v7 = atomic_load(*(unsigned int **)a1);
    if (v6 != v7)
    {
      uint64_t v8 = v6;
      atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 16), (unsigned int *)&v8, v6 + 1);
      if (v8 == v6)
      {
LABEL_10:
        if (v6 != v7)
        {
          unint64_t v12 = 0;
          LODWORD(a1) = *(_DWORD *)(*(void *)(a1 + 24) + 4 * (*(_DWORD *)(a1 + 44) & v6));
          int v11 = a1 & 0xFFFFFF00;
          uint64_t v13 = (uint64_t)&_mh_execute_header;
          return v13 | v12 | v11 | a1;
        }
      }
      else
      {
        while (1)
        {
          unsigned int v7 = atomic_load(*(unsigned int **)a1);
          if (v8 == v7) {
            break;
          }
          LODWORD(v6) = v8;
          uint64_t v9 = v8;
          atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 16), (unsigned int *)&v9, v8 + 1);
          BOOL v10 = v9 == v8;
          uint64_t v8 = v9;
          if (v10) {
            goto LABEL_10;
          }
        }
      }
    }
    a1 = sub_1000A7300();
    int v11 = a1 & 0xFFFFFF00;
    unint64_t v12 = a1 & 0xFFFFFF0000000000;
    uint64_t v13 = a1 & 0xFF00000000;
  }
  return v13 | v12 | v11 | a1;
}

uint64_t sub_1000A7424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 1u);
  uint64_t v3 = atomic_load((unsigned int *)(a1 + 8));
  unsigned int v4 = atomic_load(*(unsigned int **)(a1 + 16));
  int v5 = v4 - v3;
  while (v5 != 1 && v5 != 1 - *(_DWORD *)(a1 + 40))
  {
    uint64_t v6 = v3;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 8), (unsigned int *)&v6, v3 + 1);
    if (v6 == v3)
    {
      uint64_t v8 = 0;
      BOOL v10 = (void *)(*(void *)(a1 + 24) + 16 * (*(_DWORD *)(a1 + 44) & v3));
      *BOOL v10 = a2;
      v10[1] = a3;
      return v8;
    }
    unsigned int v7 = atomic_load(*(unsigned int **)(a1 + 16));
    int v5 = v7 - v6;
    uint64_t v3 = v6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 0xFFFFFFFF) == 1) {
    sub_1000A6FAC(a1, 0, 1);
  }
  return 4294967268;
}

uint64_t sub_1000A74DC(uint64_t a1, int a2, int a3)
{
  int v6 = a3;
  int v5 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100017644();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48))(v3, &v5, &v6);
}

void sub_1000A7538(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;

  std::__sp_mut::unlock(sp_mut);
}

BOOL sub_1000A75A4(uint64_t *a1, void *a2, uint64_t *a3)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  unsigned int v7 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    if (v13)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      int v14 = (std::__shared_weak_count *)a1[1];
      *a1 = v12;
      a1[1] = v13;
      if (v14) {
        sub_100010A48(v14);
      }
    }
    else
    {
      *a1 = v12;
      a1[1] = 0;
    }
    uint64_t v15 = v7;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    if (v10)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      int v11 = (std::__shared_weak_count *)a2[1];
      *a2 = v9;
      a2[1] = v10;
      if (v11) {
        sub_100010A48(v11);
      }
    }
    else
    {
      *a2 = v9;
      a2[1] = 0;
    }
    uint64_t v15 = v8;
  }
  std::__sp_mut::unlock(sp_mut);
  if (v15) {
    sub_100010A48(v15);
  }
  return v7 == v8;
}

void sub_1000A7680(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000A76E8(void *a1)
{
  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(v1 + 48))(v1);
  __cxa_rethrow();
}

void sub_1000A7700(_Unwind_Exception *a1)
{
}

void sub_1000A7718(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000A7750(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

uint64_t sub_1000A7774(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1000A77B8(void *a1@<X0>, void *a2@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }

  std::__sp_mut::unlock(sp_mut);
}

void *sub_1000A781C(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_1000A7A70(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1000A7A5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000A7A70(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1000A7B60(a1, prime);
    }
  }
}

void sub_1000A7B60(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_100010CDC();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_1000A7CBC(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1000A7DA8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_1000A7DEC(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_1000A7DEC@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint8x8_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_1000A7F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)a1 = &off_1001A4C50;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)a1 = off_1001A4C08;
  sub_1001059D4(a1 + 48, a2 + 48);
  sub_1001059D4(a1 + 96, a2 + 96);
  unint64_t v7 = *(_OWORD **)(a2 + 144);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  *(void *)(a1 + 152) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    unint64_t v7 = *(_OWORD **)(a1 + 144);
  }
  *(_OWORD *)(a1 + 160) = *v7;
  return a1;
}

void sub_1000A7FE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_10014706C(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A7FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = &off_1001A4C50;
  *(void *)(a1 + 8) = a2;
  uint64_t v10 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = a4;
  *(void *)a1 = off_1001A4C08;
  sub_1001059D4(a1 + 48, a5);
  sub_1001059D4(a1 + 96, a6);
  sub_1000A8C14(a7, (void *)(a1 + 144));
  unint64_t v11 = *(uint64_t **)(a1 + 144);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 168) = v12;
  if (v12 == v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *(void *)(v12 - 24);
  }
  if (*(void *)(a1 + 24) > v14) {
    unint64_t v14 = *(void *)(a1 + 24);
  }
  *(void *)(a1 + 24) = v14;
  *(unsigned char *)(a1 + 32) = 2;
  return a1;
}

void sub_1000A80F0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    sub_100146F18();
  }
  uint64_t v5 = *v1;
  *uint64_t v1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000A8144@<W0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  while (v7 != v6 && *(void *)(v7 + 8) <= a2)
  {
    v7 += 32;
    *(void *)(a1 + 160) = v7;
  }
  while (sub_100105B00(a1 + 48, a1 + 96))
  {
    if (*(_DWORD *)(a1 + 80) == 3 || *(void *)(a1 + 64) > v3) {
      break;
    }
    sub_100105DE0((uint64_t *)(a1 + 48), (uint64_t)v19);
    uint64_t v8 = v19[0];
    v19[0] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
  }
  BOOL result = sub_100105B00(a1 + 48, a1 + 96);
  if (result && *(_DWORD *)(a1 + 80) == 3)
  {
    unint64_t v10 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 56) > v3) {
      unint64_t v3 = *(void *)(a1 + 56);
    }
    int v11 = 3;
    goto LABEL_44;
  }
  BOOL result = sub_100105A40(a1 + 48, a1 + 96);
  uint64_t v12 = *(void *)(a1 + 160);
  uint64_t v13 = *(void *)(a1 + 168);
  if (result && v12 == v13)
  {
    int v11 = 0;
    unint64_t v10 = *(void *)(a1 + 24);
    goto LABEL_44;
  }
  if (v12 == v13)
  {
    unint64_t v10 = *(void *)(a1 + 56);
    if (v10 <= v3)
    {
      unint64_t v10 = *(void *)(a1 + 64);
      int v11 = *(_DWORD *)(a1 + 80);
      goto LABEL_44;
    }
    goto LABEL_39;
  }
  BOOL result = sub_100105A40(a1 + 48, a1 + 96);
  if (result)
  {
    unint64_t v14 = *(unint64_t **)(a1 + 160);
    unint64_t v10 = *v14;
    if (*v14 <= v3)
    {
      unint64_t v10 = v14[1];
      int v11 = *((_DWORD *)v14 + 6);
      goto LABEL_44;
    }
LABEL_39:
    int v11 = 0;
    goto LABEL_44;
  }
  unint64_t v15 = *(void *)(a1 + 56);
  BOOL v16 = *(unint64_t **)(a1 + 160);
  unint64_t v17 = *v16;
  if (*v16 >= v15) {
    unint64_t v10 = *(void *)(a1 + 56);
  }
  else {
    unint64_t v10 = *v16;
  }
  if (v10 <= v3) {
    unint64_t v10 = v3;
  }
  if (v10 < v15 && v10 < v17) {
    goto LABEL_39;
  }
  if (v10 >= v17)
  {
    unint64_t v17 = v16[1];
  }
  else
  {
    if (v17 >= *(void *)(a1 + 64)) {
      unint64_t v17 = *(void *)(a1 + 64);
    }
    BOOL v16 = (unint64_t *)(a1 + 56);
  }
  int v11 = *((_DWORD *)v16 + 6);
  unint64_t v3 = v10;
  if (*(void *)(a1 + 24) >= v17) {
    unint64_t v10 = v17;
  }
  else {
    unint64_t v10 = *(void *)(a1 + 24);
  }
LABEL_44:
  *(void *)a3 = v3;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = v11;
  return result;
}

BOOL sub_1000A8344@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = sub_1000A8144(a1, *(void *)(a1 + 40), (uint64_t)v9);
  int v5 = *(_DWORD *)&v9[24];
  unint64_t v6 = *(void *)&v9[8];
  uint64_t v7 = *(void *)v9;
  do
  {
    if (v6 >= *(void *)(a1 + 24)) {
      break;
    }
    if (v5 == 3) {
      break;
    }
    if (v5 != *(_DWORD *)&v9[24]) {
      break;
    }
    unint64_t v6 = *(void *)&v9[8];
    BOOL result = sub_1000A8144(a1, *(unint64_t *)&v9[8], (uint64_t)v8);
    *(_OWORD *)unint64_t v9 = v8[0];
    *(_OWORD *)&v9[12] = *(_OWORD *)((char *)v8 + 12);
  }
  while (*(void *)&v8[0] == v6);
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

void *sub_1000A83F4@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  sub_10006889C((uint64_t)v8, a2);
  sub_1000A8498(a4, a1, (uint64_t)v8, a3);
  return sub_100058E3C(v8);
}

void sub_1000A847C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100058E3C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8498(uint64_t a1, long long *a2, uint64_t a3, long long *a4)
{
  long long v7 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v7;
  uint64_t v8 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *((void *)a2 + 5);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 40) = v9;
  unint64_t v10 = (void *)sub_1000A8B94(a1 + 56, (uint64_t)a2 + 56);
  sub_100068828(v10, a3);
  long long v11 = *a4;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a4 + 16);
  *(_OWORD *)(a1 + 8) = v11;
  return a1;
}

void sub_1000A851C(_Unwind_Exception *a1)
{
  sub_1000651C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100058EC0(a1, (uint64_t)v35);
  sub_100059040(a1, (uint64_t)v34);
  unint64_t v6 = (char *)operator new(0x30uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  *(void *)unint64_t v6 = off_1001A4C80;
  *((void *)v6 + 5) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_1001059D4((uint64_t)v31, (uint64_t)v35);
  sub_1001059D4((uint64_t)v32, (uint64_t)v34);
  *(void *)&long long v33 = v6 + 24;
  *((void *)&v33 + 1) = v6;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  uint64_t v7 = *((void *)v6 + 4);
  if (v7 == *((void *)v6 + 3)) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = *(void *)(v7 - 24);
  }
  if (*(void *)(a1 + 16) > v8) {
    unint64_t v8 = *(void *)(a1 + 16);
  }
  *(void *)&long long v29 = *(void *)(a1 + 8);
  *((void *)&v29 + 1) = v8;
  char v30 = 2;
  sub_1001059D4((uint64_t)&v20, (uint64_t)v31);
  sub_1001059D4((uint64_t)&v24, (uint64_t)v32);
  long long v28 = v33;
  if (*((void *)&v33 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v37 = 0;
  uint64_t v9 = (char *)operator new(0x78uLL);
  uint64_t v10 = v20;
  *(void *)uint64_t v9 = off_1001A4CD0;
  *((void *)v9 + 1) = v10;
  long long v11 = v22;
  *((_OWORD *)v9 + 1) = v21;
  *((_OWORD *)v9 + 2) = v11;
  *((_DWORD *)v9 + 12) = v23;
  uint64_t v12 = v24;
  uint64_t v20 = 0;
  uint64_t v24 = 0;
  *((void *)v9 + 7) = v12;
  long long v13 = v26;
  *((_OWORD *)v9 + 4) = v25;
  *((_OWORD *)v9 + 5) = v13;
  *((_DWORD *)v9 + 24) = v27;
  *(_OWORD *)(v9 + 104) = v28;
  long long v28 = 0uLL;
  int v37 = v9;
  sub_1000A83F4((long long *)a1, (uint64_t)v36, &v29, a3);
  sub_100058E3C(v36);
  if (*((void *)&v28 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v28 + 1));
  }
  uint64_t v14 = v24;
  uint64_t v24 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  uint64_t v15 = v20;
  uint64_t v20 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  if (*((void *)&v33 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v33 + 1));
  }
  uint64_t v16 = v32[0];
  v32[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  uint64_t v17 = v31[0];
  v31[0] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  sub_100010A48((std::__shared_weak_count *)v6);
  uint64_t v18 = v34[0];
  v34[0] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  }
  uint64_t result = v35[0];
  v35[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_1000A8860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100058E3C((void *)(v27 - 88));
  sub_1000A894C(&a9);
  sub_1000A894C(&a26);
  sub_100010A48(v26);
  uint64_t v29 = *(void *)(v27 - 184);
  *(void *)(v27 - 184) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  }
  uint64_t v30 = *(void *)(v27 - 136);
  *(void *)(v27 - 136) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1000A894C(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void sub_1000A89DC()
{
}

void sub_1000A8A30()
{
}

void *sub_1000A8A54(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = a1[12];
  a1[12] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void sub_1000A8AE4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = a1[12];
  a1[12] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }

  operator delete();
}

uint64_t sub_1000A8B94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_1000A8C14@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = sub_1000A8C70((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1000A8C5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8C70(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1001A4C80;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  sub_1000A8D78((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  return a1;
}

void sub_1000A8CD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000A8CE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A4C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000A8D08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A4C80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000A8D5C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_1000A8D78(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_1000A8DF4(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000A8DD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1000A8DF4(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_10001796C();
  }
  uint64_t result = (char *)sub_1000A8E38((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_1000A8E38(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100010CDC();
  }
  return operator new(32 * a2);
}

void *sub_1000A8E70(void *a1)
{
  *a1 = off_1001A4CD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void sub_1000A8F1C(void *a1)
{
  *a1 = off_1001A4CD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }

  operator delete();
}

void *sub_1000A8FE8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x78uLL);
  *uint64_t v2 = off_1001A4CD0;
  sub_1000A91C4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1000A903C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A9050(uint64_t a1, void *a2)
{
  *a2 = off_1001A4CD0;
  return sub_1000A91C4((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1000A907C(uint64_t a1)
{
  return sub_1000A9230((uint64_t *)(a1 + 8));
}

void sub_1000A9084(uint64_t *a1)
{
  sub_1000A9230(a1 + 1);

  operator delete(a1);
}

void sub_1000A90C0()
{
}

void sub_1000A9154()
{
}

uint64_t sub_1000A9178(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000A91B8()
{
}

uint64_t sub_1000A91C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001059D4(a1, a2);
  sub_1001059D4(v4 + 48, a2 + 48);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1000A9214(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_10014706C(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A9230(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v5();
  }
  return result;
}

void sub_1000A9654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A9680(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A9690(uint64_t a1)
{
}

void sub_1000A9698(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (!v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) signalCommandCompletedWithXpcError:v6];
}

const void **sub_1000A97AC(const __CFString *a1, void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) != TypeID)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(a1);
    goto LABEL_20;
  }
  int v7 = sub_10011AB10(a1);
  if (v7 == 1651272568 || v7 == 1970628964 || v7 == 1886155636)
  {
    uint64_t v10 = __cxa_allocate_exception(0x40uLL);
    long long v11 = "User data contains reserved key(s)";
LABEL_16:
    uint64_t v12 = (void *)sub_100003670((uint64_t)v10, (uint64_t)v11, 0x16u);
    uint64_t v14 = (void (*)(void *))sub_1000036D8;
    goto LABEL_17;
  }
  CFTypeID v8 = CFDataGetTypeID();
  if (!a2)
  {
    uint64_t v10 = __cxa_allocate_exception(0x40uLL);
    long long v11 = "Invalid user data content";
    goto LABEL_16;
  }
  if (CFGetTypeID(a2) != v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(a2);
LABEL_20:
    uint64_t v12 = sub_1000AC5D0(exception);
    uint64_t v14 = (void (*)(void *))sub_10002A5E8;
LABEL_17:
    __cxa_throw(v12, v13, v14);
  }
  sub_100003BA4(v20, "");
  LOBYTE(__p[0]) = 0;
  char v19 = 0;
  sub_1000AC5D4(&v16, 80);
  sub_100112C70((uint64_t)v20, (uint64_t)__p, 0, a2, (CFDictionaryRef *)&v22);
  if (v19 && v18 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  __p[0] = v22;
  v20[0] = CFArrayCreate(kCFAllocatorDefault, (const void **)__p, 1, &kCFTypeArrayCallBacks);
  CFDictionarySetValue(a3, a1, v20[0]);
  sub_1000AD6B8((const void **)v20);
  return sub_100010A14((const void **)&v22);
}

void sub_1000A99A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A9A10(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 284);
  if (v1) {
    uint64_t v2 = *(long long **)(a1 + 72);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 280);
  if (v4)
  {
    long long v16 = *(_OWORD *)(a1 + 96);
    LOBYTE(v4) = 1;
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  uint64_t v5 = *(long long **)(a1 + 80);
  BOOL v6 = v1 == 0;
  char v17 = v4;
  uint64_t v7 = *(void *)(v3 + 72);
  uint64_t v22 = *(void *)(v7 + 352);
  long long v27 = *(_OWORD *)(v7 + 424);
  long long v28 = *(_OWORD *)(v7 + 440);
  long long v29 = *(_OWORD *)(v7 + 456);
  long long v30 = *(_OWORD *)(v7 + 472);
  long long v23 = *(_OWORD *)(v7 + 360);
  long long v24 = *(_OWORD *)(v7 + 376);
  long long v25 = *(_OWORD *)(v7 + 392);
  long long v26 = *(_OWORD *)(v7 + 408);
  *(void *)&long long v21 = sub_10010C9C8((unsigned int *)&v22);
  *((void *)&v21 + 1) = v8;
  if (v6)
  {
    if (!v17) {
      return 1;
    }
  }
  else
  {
    uint64_t v9 = *(void **)(v3 + 32);
    if (v9 == (void *)(v3 + 40) || v2 == v5) {
      goto LABEL_23;
    }
    BOOL v10 = 1;
    do
    {
      long long v20 = *v2;
      if (v10) {
        BOOL v10 = sub_10010E904((_DWORD *)v9 + 15, (uint64_t)&v20);
      }
      sub_100003BA4(__p, "BLX");
      sub_1001118A4(v3, (uint64_t)__p, (uint64_t)&v20, (int *)v9 + 15);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      long long v21 = *(_OWORD *)sub_1000AD6EC((uint64_t)&v21, (uint64_t)&v20);
      long long v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          uint64_t v9 = v12;
        }
        while (!v13);
      }
      if (v12 == (void *)(v3 + 40)) {
        break;
      }
      uint64_t v2 = (long long *)((char *)v2 + 184);
      uint64_t v9 = v12;
    }
    while (v2 != v5);
    if (v10) {
LABEL_23:
    }
      BOOL v10 = sub_10010E904(&v22, (uint64_t)&v21);
    sub_100003BA4(__p, "Master checksum");
    sub_1001118A4(v3, (uint64_t)__p, (uint64_t)&v21, (int *)&v22);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (!v17) {
      return v10;
    }
    if (!v10)
    {
      BOOL v14 = 0;
      goto LABEL_31;
    }
  }
  BOOL v14 = sub_10010E904((_DWORD *)(*(void *)(v3 + 72) + 80), (uint64_t)&v16);
LABEL_31:
  sub_100003BA4(__p, "Data Fork");
  sub_1001118A4(v3, (uint64_t)__p, (uint64_t)&v16, (int *)(*(void *)(v3 + 72) + 80));
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

void sub_1000A9CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A9CD8(uint64_t a1)
{
  unsigned __int8 v4 = 0;
  uint64_t v3 = &v4;
  uint64_t v1 = *(unsigned int *)(a1 + 12);
  if (v1 == -1) {
    sub_100017DCC();
  }
  uint64_t v5 = &v3;
  ((void (*)(unsigned __int8 ***, uint64_t))off_1001A4F10[v1])(&v5, a1 + 4);
  return v4;
}

uint64_t sub_1000A9D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v5 = sub_100111894(*(void *)(a1 + 8));
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v7 = *(void *)(a3 + 72);
  uint64_t v8 = *(void *)(a1 + 16) * *(void *)(a3 + 80);
  v11[0] = 0;
  v11[1] = v8;
  char v12 = 2;
  sub_1000A9E48((long long *)(a1 + 40), (long long *)(a1 + 56), (uint64_t)v11, (unsigned int *)(v7 + 80), a1 + 96);
  if (sub_1000A9CD8(a1 + 96)) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)(a1 + 284) = v9;
  *(_DWORD *)(a1 + 280) = sub_1000A9CD8(a1 + 96) ^ 1;
  return a1;
}

void sub_1000A9E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000AC99C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1000A9E48(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  uLong v9 = sub_10010C9C8(a4);
  *(void *)char v12 = 850045863;
  v14[0] = 0;
  v14[1] = 0;
  memset(&v12[8], 0, 60);
  BOOL v13 = v14;
  long long v15 = *a1;
  long long v16 = v15;
  long long v17 = *a2;
  char v19 = 0;
  uint64_t v11 = v15;
  if ((void)v15 != (void)v17)
  {
    uint64_t v11 = *(void *)(v15 + 32);
    if ((*(unsigned char *)(v15 + 48) & 2) == 0) {
      ++v11;
    }
    uint64_t v18 = v11;
  }
  v20[0] = v9;
  v20[1] = v10;
  memset(&v21[8], 0, 60);
  v23[0] = 0;
  v23[1] = 0;
  *(void *)long long v21 = 850045863;
  uint64_t v22 = v23;
  long long v24 = *a1;
  long long v25 = v24;
  long long v26 = *a2;
  uint64_t v27 = v11;
  char v28 = 0;
  char v29 = 0;
  sub_1000AD86C(a5, (uint64_t)v20, a3);
  sub_1000AC93C((uint64_t)&v22, v23[0]);
  std::mutex::~mutex((std::mutex *)v21);
  sub_1000AC93C((uint64_t)&v13, v14[0]);
  std::mutex::~mutex((std::mutex *)v12);
}

void sub_1000A9FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_1000AC93C(v43, a41);
  std::mutex::~mutex(v42);
  sub_1000AC93C(v41, a19);
  std::mutex::~mutex((std::mutex *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A9FF8(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 16);
  sub_1000AC93C(a1 + 88, *(void **)(a1 + 96));
  std::mutex::~mutex(v2);
  return a1;
}

uint64_t sub_1000AA034(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_DWORD *)(sub_1000A9D34(a1, a2, a3) + 284) = 4 * (a4 & 1);
  if ((a4 & 2) != 0) {
    int v6 = sub_1000A9CD8(a1 + 96) ^ 1;
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 280) = v6;
  return a1;
}

void sub_1000AA084(_Unwind_Exception *a1)
{
  sub_1000AA098(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA098(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 112);
  sub_1000AC93C(a1 + 184, *(void **)(a1 + 192));
  std::mutex::~mutex(v2);
  unsigned __int8 v4 = (void **)(a1 + 72);
  sub_1000AC99C(&v4);
  return a1;
}

uint64_t sub_1000AA0EC(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned int *)(a2 + 1);
  uint64_t v3 = (unsigned int *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0;
  }
  LODWORD(v5) = 0;
  int v6 = (long long *)(a1 + 40);
  uint64_t v7 = (long long *)(a1 + 56);
  long long v15 = (uint64_t *)(a1 + 72);
  do
  {
    sub_1000A9E48(v6, v7, (uint64_t)(v3 + 8), v3 + 15, (uint64_t)v16);
    unint64_t v8 = *(void *)(a1 + 80);
    if (v8 >= *(void *)(a1 + 88))
    {
      uint64_t v9 = sub_1000ACA54(v15, (uint64_t)v16);
    }
    else
    {
      sub_1000ACB74(*(void *)(a1 + 80), (uint64_t)v16);
      uint64_t v9 = v8 + 184;
      *(void *)(a1 + 80) = v8 + 184;
    }
    *(void *)(a1 + 80) = v9;
    sub_1000AC93C((uint64_t)v18, v18[1]);
    std::mutex::~mutex(&v17);
    unsigned int v10 = v3[15];
    BOOL v11 = v10 == 10 || v10 == 0;
    if (v11) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = 2;
    }
    char v12 = (unsigned int *)*((void *)v3 + 1);
    if (v12)
    {
      do
      {
        BOOL v13 = v12;
        char v12 = *(unsigned int **)v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        BOOL v13 = (unsigned int *)*((void *)v3 + 2);
        BOOL v11 = *(void *)v13 == (void)v3;
        uint64_t v3 = v13;
      }
      while (!v11);
    }
    uint64_t v3 = v13;
  }
  while (v13 != v2);
  return v5;
}

void sub_1000AA248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A9FF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA270@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v29 = a2;
  uint64_t result = sub_1000ADA2C(a5, a4);
  if (a4)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*a1 + 136))();
    uint64_t v28 = v9;
    long long v27 = 0uLL;
    if ((sub_1000AA5DC(*a1) & 1) == 0)
    {
      unsigned int v10 = *(std::__shared_weak_count **)(v9 + 48);
      long long v25 = *(const void **)(v9 + 40);
      long long v26 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v11 = *(void **)(v9 + 16);
      if (v11 != (void *)(v9 + 24))
      {
        char v12 = 0;
        BOOL v13 = 0;
        do
        {
          if (v12)
          {
            if (!(void)v27)
            {
              sub_10003DF9C(v12);
              long long v14 = v24;
              long long v24 = 0uLL;
              long long v15 = (std::__shared_weak_count *)*((void *)&v27 + 1);
              long long v27 = v14;
              if (v15)
              {
                sub_100010A48(v15);
                if (*((void *)&v24 + 1)) {
                  sub_100010A48(*((std::__shared_weak_count **)&v24 + 1));
                }
              }
            }
          }
          else
          {
            int v23 = 1;
            BOOL v22 = a3 != 1;
            sub_1000ADC5C((uint64_t)&v25, &v29, &v23, (unsigned __int8 *)&v22, &v24);
            long long v16 = (std::__shared_weak_count *)*((void *)&v24 + 1);
            char v12 = (void **)v24;
            long long v24 = 0uLL;
            if (v13)
            {
              sub_100010A48(v13);
              if (*((void *)&v24 + 1)) {
                sub_100010A48(*((std::__shared_weak_count **)&v24 + 1));
              }
            }
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::mutex v17 = (std::__shared_weak_count *)*((void *)&v27 + 1);
            *(void *)&long long v27 = v12;
            *((void *)&v27 + 1) = v16;
            if (v17) {
              sub_100010A48(v17);
            }
            BOOL v13 = v16;
          }
          if (a3 == 1 || (const void *)v11[5] == v25)
          {
            int v21 = *((_DWORD *)v11 + 8);
            long long v24 = v27;
            if (*((void *)&v27 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            sub_1000AA690(v9, &v21, (uint64_t **)&v24);
          }
          else
          {
            long long v24 = v27;
            if (*((void *)&v27 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            sub_100141AC0((uint64_t)(v11 + 5), &v25, (uint64_t *)&v24);
          }
          if (*((void *)&v24 + 1)) {
            sub_100010A48(*((std::__shared_weak_count **)&v24 + 1));
          }
          uint64_t v18 = (void *)v11[1];
          if (v18)
          {
            do
            {
              char v19 = v18;
              uint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              char v19 = (void *)v11[2];
              BOOL v20 = *v19 == (void)v11;
              BOOL v11 = v19;
            }
            while (!v20);
          }
          BOOL v11 = v19;
        }
        while (v19 != (void *)(v9 + 24));
      }
      *(unsigned char *)(v9 + 56) = 0;
      if (v26) {
        sub_100010A48(v26);
      }
    }
    sub_1000AA6FC();
  }
  return result;
}

void sub_1000AA544(_Unwind_Exception *a1)
{
  sub_1000ADB94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA5DC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 168);
  uint64_t v2 = (void *)(a1 + 176);
  if (v1 == (void *)(a1 + 176)) {
    return 1;
  }
  do
  {
    sub_100141990((uint64_t)(v1 + 5), &v10);
    uint64_t v3 = v1[5];
    uint64_t v4 = v10;
    BOOL v5 = v3 == v10;
    if (v11) {
      sub_100010A48(v11);
    }
    if (v3 != v4) {
      break;
    }
    int v6 = (void *)v1[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        int v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (void *)v1[2];
        BOOL v8 = *v7 == (void)v1;
        uint64_t v1 = v7;
      }
      while (!v8);
    }
    uint64_t v1 = v7;
  }
  while (v7 != v2);
  return v5;
}

void sub_1000AA690(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  BOOL v8 = a2;
  uint64_t v4 = sub_100054EE0((uint64_t **)(a1 + 16), a2, (uint64_t)&unk_100164F68, &v8);
  int v6 = *a3;
  BOOL v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[6];
  v4[5] = v6;
  v4[6] = v5;
  if (v7) {
    sub_100010A48(v7);
  }
}

void sub_1000AA6FC()
{
}

uint64_t sub_1000AA824(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_10003C118();
  unint64_t v32 = (*(uint64_t (**)(void))(**(void **)a1 + 24))();
  BOOL v5 = (*(void *(**)(void *__return_ptr))(**(void **)a1 + 72))(v45);
  if (v45[0] <= (unint64_t)v4[2] / v32 * v32) {
    unint64_t v6 = (unint64_t)v4[2] / v32 * v32;
  }
  else {
    unint64_t v6 = v45[0];
  }
  int v7 = *((_DWORD *)v4 + 2);
  if (v7 == 1)
  {
    unsigned int v8 = ((uint64_t (*)(void *))*v4)(v5);
  }
  else
  {
    if (v7) {
      sub_100017DCC();
    }
    unsigned int v8 = *(_DWORD *)v4;
  }
  unint64_t v9 = (unint64_t)v4[3] / v6;
  if (v8 < v9) {
    LODWORD(v9) = v8;
  }
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v9;
  }
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 72))(v45);
  uint64_t v31 = v46 + v6;
  sub_10011C33C((uint64_t)v45, v46 + v6, 0, v10);
  uint64_t v11 = (uint64_t)a1[1];
  uint64_t v12 = sub_100111894(v11);
  long long v30 = v13;
  long long v14 = (void *)v12;
  if (a1[35].i32[1])
  {
    __int32 v15 = sub_1000AA0EC((uint64_t)a1, (void *)(v11 + 32));
    a1[35].i32[1] = v15;
  }
  else
  {
    __int32 v15 = 0;
  }
  __int32 v16 = a1[35].i32[0];
  if (sub_1000AA5DC((uint64_t)*a1))
  {
    a1[35] = (int32x2_t)vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32(a1[35]));
    int v17 = 2;
  }
  else
  {
    int v17 = v16 | v15;
  }
  sub_1000AA270((uint64_t *)a1, v31, v17, v10, (uint64_t)v44);
  sub_1000474F4(a2, v10, (uint64_t)v43);
  int32x2_t v18 = a1[9];
  unsigned int v42 = 0;
  char v19 = *(void **)(v11 + 32);
  if (v19 != (void *)(v11 + 40) && v14 != v30)
  {
    while ((unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v19[6] & 1) + v19[5] - 1)
    {
LABEL_22:
      BOOL v20 = (void *)v19[1];
      if (v20)
      {
        do
        {
          int v21 = v20;
          BOOL v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          int v21 = (void *)v19[2];
          BOOL v25 = *v21 == (void)v19;
          char v19 = v21;
        }
        while (!v25);
      }
      if (v21 != (void *)(v11 + 40))
      {
        *(void *)&v18 += 184;
        char v19 = v21;
        if (v14 != v30) {
          continue;
        }
      }
      goto LABEL_52;
    }
    BOOL v22 = v14;
    while (1)
    {
      long long v38 = *((_OWORD *)v19 + 2);
      uint64_t v39 = v19[6];
      sub_1000653F0((unint64_t *)&v38, v22 + 4, (uint64_t)v40);
      unint64_t v23 = v40[0];
      if ((v41 & 2) == 0) {
        unint64_t v23 = v40[0] + 1;
      }
      if (v23 <= (v41 & 1) + v40[1] - 1) {
        break;
      }
      long long v24 = (void *)v22[1];
      if (v24)
      {
        do
        {
          long long v14 = v24;
          long long v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          long long v14 = (void *)v22[2];
          BOOL v25 = *v14 == (void)v22;
          BOOL v22 = v14;
        }
        while (!v25);
      }
      BOOL v25 = (unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v19[6] & 1) + v19[5] - 1 || v14 == v30;
      BOOL v22 = v14;
      if (v25) {
        goto LABEL_22;
      }
    }
    if (!atomic_load_explicit((atomic_uint *volatile)&v42, memory_order_acquire))
    {
      v35[0] = v23;
      v35[1] = v23 + (v32 + v6 - 1) / v32;
      char v36 = 2;
      sub_1000653F0(v35, v40, (uint64_t)&v37);
      if (v17 == 1)
      {
        v34[0] = 0;
        v34[1] = 0;
        sub_1000AAE08((uint64_t)v44, &v33);
      }
      sub_10011C3EC((uint64_t)v45, v34);
    }
    int32x2_t v26 = a1[9];
    for (int32x2_t i = a1[10]; *(void *)&v26 != *(void *)&i; *(void *)&v26 += 184)
    {
      *(unsigned char *)(*(void *)&v26 + 176) = 1;
      sub_1000ADDF4(*(void *)&v26 + 16);
    }
    a1[34].i8[0] = 1;
    sub_1000ADDF4((uint64_t)&a1[14]);
  }
LABEL_52:
  uint64_t v28 = atomic_load(&v42);
  sub_100047470(v43);
  sub_1000ADB94((uint64_t)v44);
  sub_10011C3E8(v45);
  return v28;
}

void sub_1000AAD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_100047470(&a50);
  sub_1000ADB94((uint64_t)&a68);
  sub_10011C3E8(&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_1000AAE08(uint64_t a1@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 144)) {
    BOOL v6 = v5 == v4;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    if (v5 == v4)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 96), &__lk);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      while (*(void *)(a1 + 8) == v4);
    }
    uint64_t v7 = *(void *)(v4 - 8);
    *(void *)(a1 + 16) = v4 - 8;
    sub_1000ADE50(a2, v7);
  }
  sub_1000AA6FC();
}

void sub_1000AAF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a11) {
    sub_100010A48(a11);
  }
  sub_100147090((uint64_t)&a10, &a12);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void sub_1000AAF44(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = (*(void *)(a1 + 48) - v3 + (v2 & 1) + (int)(((v2 >> 1) & 1) - 1)) * v5;
  if ((v2 & 2) != 0) {
    uint64_t v7 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v7 = v3 + 1;
  }
  uint64_t v8 = v7 * v5;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v51 = *(void *)(a1 + 72);
  uint64_t v52 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v53 = v6;
  uint64_t v54 = v8;
  uint64_t v55 = v9;
  char v56 = 0;
  uint64_t v11 = *(uint64_t **)(a1 + 96);
  sub_100030BF8(&v51, &v63);
  sub_10002F8C8((uint64_t)v69, (uint64_t)&v60);
  sub_10002F51C((uint64_t)v69, (uint64_t)v57);
  uint64_t v12 = sub_100011DAC(*v11);
  uint64_t v14 = v13;
  if (v59) {
    sub_100010A48(v59);
  }
  if (v58) {
    sub_100010A48(v58);
  }
  if (v62) {
    sub_100010A48(v62);
  }
  if (*((void *)&v60 + 1)) {
    sub_100010A48(*((std::__shared_weak_count **)&v60 + 1));
  }
  sub_1000175AC(&v63);
  if ((v12 & 0x8000000000000000) == 0 || !v12)
  {
    uint64_t v15 = v6;
    uint64_t v16 = *(void *)(a1 + 72);
    int v17 = *(std::__shared_weak_count **)(a1 + 80);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int32x2_t v18 = 0;
    uint64_t v49 = v16 + v8 - v14;
    int v50 = v17;
    unint64_t v19 = *(void *)(a1 + 64);
    unint64_t v20 = v54;
    if (v53 <= v19) {
      unint64_t v21 = *(void *)(a1 + 64);
    }
    else {
      unint64_t v21 = v53;
    }
    if (v53) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v23 = v19 + v54 + v22 - 1;
    if (*(unsigned char *)(a1 + 128))
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      if (v8 != v14) {
        goto LABEL_32;
      }
      uint64_t v26 = *(void *)(a1 + 96);
      long long v27 = *(void **)(v26 + 8);
      uint64_t v24 = v27[8];
      int32x2_t v18 = (std::__shared_weak_count *)v27[9];
      if (v18)
      {
        uint64_t v48 = v27[8];
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_100010A48(v18);
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v27 = *(void **)(v26 + 8);
        uint64_t v28 = (std::__shared_weak_count *)v27[9];
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v25 = v27[10];
          sub_100010A48(v28);
          uint64_t v24 = v48;
          goto LABEL_32;
        }
        uint64_t v24 = v48;
      }
      uint64_t v25 = v27[10];
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
    }
LABEL_32:
    uint64_t v29 = v20 / v19;
    uint64_t v30 = v4;
    int v31 = *(_DWORD *)(v4 + 284);
    uint64_t v32 = v25;
    unint64_t v33 = v23 / v19;
    if (v31 != 1)
    {
      if (v31 != 2) {
        goto LABEL_54;
      }
      uint64_t v32 = v15;
    }
    if (!v32)
    {
LABEL_54:
      int v41 = *(_DWORD *)(v30 + 280);
      uint64_t v42 = v25;
      if (v41 != 1)
      {
        if (v41 != 2) {
          goto LABEL_76;
        }
        uint64_t v42 = v15;
      }
      if (v42)
      {
        if (v41 == 2)
        {
          if (!v50)
          {
            uint64_t v43 = 0;
            uint64_t v24 = v49;
            goto LABEL_66;
          }
          uint64_t v43 = v50;
          uint64_t v24 = v49;
        }
        else
        {
          if (!v18)
          {
            uint64_t v43 = 0;
            goto LABEL_66;
          }
          uint64_t v43 = v18;
        }
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_66:
        int v44 = *(_DWORD *)(v30 + 280);
        if (v44 == 2)
        {
          uint64_t v25 = v15;
        }
        else if (v44 != 1)
        {
          uint64_t v25 = 0;
        }
        uint64_t v63 = v29;
        unint64_t v64 = v33;
        char v65 = 2;
        uint64_t v66 = v24;
        long long v67 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v68 = v25;
        sub_1000AB610(v30 + 96, (uint64_t)&v63);
        if (v67) {
          sub_100010A48(v67);
        }
        if (v43) {
          sub_100010A48(v43);
        }
      }
LABEL_76:
      if (!*(unsigned char *)(a1 + 132))
      {
        uint64_t v45 = *(void *)(*(void *)(a1 + 96) + 8);
        uint64_t v46 = *(std::__shared_weak_count **)(v45 + 72);
        *(void *)(v45 + 64) = 0;
        *(void *)(v45 + 72) = 0;
        if (v46) {
          sub_100010A48(v46);
        }
        *(void *)(v45 + 80) = 0;
        *(void *)(v45 + 88) = 0;
        *(unsigned char *)(v45 + 104) = 0;
        *(void *)(v45 + 96) = 0;
      }
      if (v18) {
        sub_100010A48(v18);
      }
      if (v50) {
        sub_100010A48(v50);
      }
      goto LABEL_84;
    }
    uint64_t v34 = *(void *)(a1 + 120);
    if (v31 == 2)
    {
      int v35 = v50;
      uint64_t v36 = v49;
      if (!v50)
      {
        uint64_t v36 = v49;
        goto LABEL_42;
      }
    }
    else
    {
      int v35 = v18;
      uint64_t v36 = v24;
      if (!v18)
      {
        uint64_t v36 = v24;
LABEL_42:
        int v37 = *(_DWORD *)(v4 + 284);
        if (v37 == 2)
        {
          uint64_t v38 = v15;
        }
        else if (v37 == 1)
        {
          uint64_t v38 = v25;
        }
        else
        {
          uint64_t v38 = 0;
        }
        uint64_t v39 = v24;
        uint64_t v40 = v29;
        uint64_t v63 = v29;
        unint64_t v64 = v33;
        char v65 = 2;
        uint64_t v66 = v36;
        long long v67 = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v68 = v38;
        sub_1000AB610(v34, (uint64_t)&v63);
        if (v67) {
          sub_100010A48(v67);
        }
        if (v35) {
          sub_100010A48(v35);
        }
        uint64_t v24 = v39;
        uint64_t v29 = v40;
        goto LABEL_54;
      }
    }
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_42;
  }
  int v47 = 0;
  atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 112), (unsigned int *)&v47, v12);
  if (!v47)
  {
    *(void *)&long long v60 = "details::udif_verify::calculate_checksums(workqueue::workqueue &)_block_invoke";
    *((void *)&v60 + 1) = 41;
    int v61 = 16;
    sub_1000AB4A8(&v63, &v60);
    sub_100003DF0(v70, (uint64_t)"Error reading sectors for verify ", 33);
    std::ostream::operator<<();
    sub_1000AB5CC((uint64_t)&v63);
  }
LABEL_84:
  if (v52) {
    sub_100010A48(v52);
  }
}

void sub_1000AB3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a14) {
    sub_100010A48(a14);
  }
  _Unwind_Resume(a1);
}

void *sub_1000AB4A8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000AE0D0((uint64_t)a1, a2);
  *a1 = off_1001A4F38;
  a1[45] = &off_1001A5038;
  a1[46] = &off_1001A5060;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A4F38;
  a1[45] = off_1001A4FC0;
  a1[46] = off_1001A4FE8;
  return a1;
}

void sub_1000AB5A8(_Unwind_Exception *a1)
{
  sub_1000AD1D4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB5CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AB610(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (std::mutex *)(a1 + 16);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  *(_DWORD *)int v47 = *(_DWORD *)(a2 + 17);
  *(_DWORD *)&v47[3] = *(_DWORD *)(a2 + 20);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v9 = *(void *)(a2 + 40);
  *(_DWORD *)uint64_t v48 = *(_DWORD *)(a2 + 17);
  *(_DWORD *)&v48[3] = *(_DWORD *)(a2 + 20);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(unsigned char *)(a1 + 168))
  {
    std::mutex::unlock(v3);
    if (v7) {
      sub_100010A48(v7);
    }
  }
  else
  {
    int v50 = (void *)v4;
    *(void *)&long long v51 = v5;
    BYTE8(v51) = v6;
    *(_DWORD *)((char *)&v51 + 9) = *(_DWORD *)v48;
    HIDWORD(v51) = *(_DWORD *)&v48[3];
    v52[0] = a1;
    v52[1] = v4;
    _OWORD v52[2] = v5;
    char v53 = v6;
    *(_DWORD *)uint64_t v54 = *(_DWORD *)v47;
    *(_DWORD *)&v54[3] = *(_DWORD *)&v47[3];
    uint64_t v55 = v8;
    char v56 = v7;
    uint64_t v57 = v9;
    sub_1000AE160((uint64_t **)(a1 + 88), (unint64_t *)&v50, (uint64_t)&v50);
    if (v56) {
      sub_100010A48(v56);
    }
    if ((v6 & 2) != 0) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    uint64_t v11 = *(void *)(a1 + 160);
    std::mutex::unlock(v3);
    if (v10 == v11)
    {
      uint64_t v12 = (uint64_t *)(a1 + 96);
      while (1)
      {
        int v50 = v52;
        long long v51 = xmmword_100164620;
        std::mutex::lock(v3);
        uint64_t v13 = *(uint64_t **)(a1 + 88);
        unint64_t v14 = *(void *)(a1 + 160);
        if (v13 == v12)
        {
          int v17 = (uint64_t *)(a1 + 96);
        }
        else
        {
          uint64_t v15 = *(void **)(a1 + 144);
          uint64_t v16 = *(void **)(a1 + 112);
          int v17 = *(uint64_t **)(a1 + 88);
          while (v16 != v15)
          {
            uint64_t v18 = v17[4];
            if ((v17[6] & 2) == 0) {
              ++v18;
            }
            if (v18 != v14) {
              break;
            }
            unint64_t v14 = v17[5] + (v17[6] & 1);
            for (uint64_t i = (v16[6] & 1) + v16[5]; v14 > i - 1; uint64_t i = (v16[6] & 1) + v16[5])
            {
              unint64_t v20 = (void *)v16[1];
              unint64_t v21 = v16;
              if (v20)
              {
                do
                {
                  uint64_t v16 = v20;
                  unint64_t v20 = (void *)*v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  uint64_t v16 = (void *)v21[2];
                  BOOL v22 = *v16 == (void)v21;
                  unint64_t v21 = v16;
                }
                while (!v22);
              }
              *(void *)(a1 + 112) = v16;
              if (v16 == v15)
              {
                uint64_t v16 = v15;
                break;
              }
              if ((v16[6] & 2) != 0) {
                unint64_t v14 = v16[4];
              }
              else {
                unint64_t v14 = v16[4] + 1;
              }
            }
            unint64_t v23 = (uint64_t *)v17[1];
            if (v23)
            {
              do
              {
                uint64_t v24 = v23;
                unint64_t v23 = (uint64_t *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                uint64_t v24 = (uint64_t *)v17[2];
                BOOL v22 = *v24 == (void)v17;
                int v17 = v24;
              }
              while (!v22);
            }
            int v17 = v24;
            if (v24 == v12)
            {
              int v17 = (uint64_t *)(a1 + 96);
              break;
            }
          }
          if (v13 == v17)
          {
            int v17 = v13;
          }
          else
          {
            uint64_t v25 = 0;
            uint64_t v26 = v13;
            do
            {
              unint64_t v27 = v25;
              uint64_t v28 = (uint64_t *)v26[1];
              if (v28)
              {
                do
                {
                  uint64_t v29 = v28;
                  uint64_t v28 = (uint64_t *)*v28;
                }
                while (v28);
              }
              else
              {
                do
                {
                  uint64_t v29 = (uint64_t *)v26[2];
                  BOOL v22 = *v29 == (void)v26;
                  uint64_t v26 = v29;
                }
                while (!v22);
              }
              ++v25;
              uint64_t v26 = v29;
            }
            while (v29 != v17);
            if (*((void *)&v51 + 1) <= v27)
            {
              if (v27 >= 0x249249249249249) {
                sub_100014AAC("get_next_capacity, allocator's max size reached");
              }
              uint64_t v30 = operator new(56 * v25);
              sub_1000AE39C((uint64_t *)&v50, (uint64_t)v30, v25, (uint64_t)&v50[7 * v51], 0, 0);
            }
          }
        }
        while (v17 != v13)
        {
          uint64_t v31 = (uint64_t)v50;
          uint64_t v32 = v51;
          unint64_t v33 = &v50[7 * v51];
          if ((void)v51 == *((void *)&v51 + 1))
          {
            sub_1000AE548((uint64_t *)&v50, (uint64_t)v33, 1, (uint64_t)(v13 + 7), v49);
          }
          else
          {
            void *v33 = v13[7];
            uint64_t v34 = v31 + 56 * v32;
            long long v35 = *((_OWORD *)v13 + 4);
            *(void *)(v34 + 24) = v13[10];
            *(_OWORD *)(v34 + 8) = v35;
            *(_OWORD *)(v34 + 32) = *(_OWORD *)(v13 + 11);
            v13[11] = 0;
            v13[12] = 0;
            *(void *)(v34 + 48) = v13[13];
            *(void *)&long long v51 = v51 + 1;
          }
          uint64_t v13 = sub_1000AE810((uint64_t **)(a1 + 88), v13);
        }
        std::mutex::unlock(v3);
        if ((void)v51)
        {
          uint64_t v36 = v50;
          int v37 = &v50[7 * v51];
          do
          {
            uint64_t v38 = *v36;
            uint64_t v39 = v36[6];
            v49[0] = v36[4];
            v49[1] = v39;
            sub_1000AD7CC(v38, (uint64_t)v49);
            v36 += 7;
          }
          while (v36 != v37);
          uint64_t v40 = v51;
          if ((void)v51)
          {
            int v41 = (std::__shared_weak_count **)(v50 + 5);
            do
            {
              if (*v41) {
                sub_100010A48(*v41);
              }
              v41 += 7;
              --v40;
            }
            while (v40);
          }
        }
        *(void *)&long long v51 = 0;
        std::mutex::lock(v3);
        *(void *)(a1 + 160) = v14;
        uint64_t v42 = *(void *)(a1 + 88);
        if ((uint64_t *)v42 == v12 || *(void *)(a1 + 112) == *(void *)(a1 + 144)) {
          break;
        }
        char v43 = *(unsigned char *)(v42 + 48);
        uint64_t v44 = *(void *)(v42 + 32);
        if ((v43 & 2) != 0) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = v44 + 1;
        }
        std::mutex::unlock(v3);
        if (v45 != v14) {
          goto LABEL_71;
        }
        sub_1000AE850(&v50);
      }
      std::mutex::unlock(v3);
LABEL_71:
      sub_1000AE850(&v50);
    }
  }
  return a1;
}

void sub_1000ABA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::mutex::unlock(v24);
  sub_1000AE850(&a16);
  _Unwind_Resume(a1);
}

void *sub_1000ABB00(void *result, void *a2)
{
  uint64_t v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[13];
  result[12] = a2[12];
  result[13] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000ABB34(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_100010A48(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3)
  {
    sub_100010A48(v3);
  }
}

void sub_1000ABB84()
{
}

void sub_1000ABC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100010A14((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000ABC1C(const __CFString *a1, const void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) != TypeID)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFStringRef v13 = a1;
    unint64_t v14 = exception;
    CFGetTypeID(v13);
LABEL_18:
    uint64_t v15 = v14;
    goto LABEL_19;
  }
  int v7 = sub_10011AB10(a1);
  switch(v7)
  {
    case 1651272568:
      return;
    case 1886155636:
      return;
    case 1970628964:
      return;
  }
  CFTypeID v8 = CFArrayGetTypeID();
  if (!a2) {
    return;
  }
  if (CFGetTypeID(a2) != v8)
  {
    unint64_t v14 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(a2);
    goto LABEL_18;
  }
  if (CFArrayGetCount((CFArrayRef)a2) < 1) {
    return;
  }
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
  CFTypeID v10 = CFDictionaryGetTypeID();
  if (!ValueAtIndex) {
    return;
  }
  if (CFGetTypeID(ValueAtIndex) != v10) {
    goto LABEL_21;
  }
  ValueAtIndex = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Data");
  CFTypeID v11 = CFDataGetTypeID();
  if (!ValueAtIndex) {
    return;
  }
  if (CFGetTypeID(ValueAtIndex) != v11)
  {
LABEL_21:
    int v17 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(ValueAtIndex);
    uint64_t v15 = v17;
LABEL_19:
    uint64_t v16 = sub_1000AC5D0(v15);
  }

  CFDictionaryAddValue(a3, a1, ValueAtIndex);
}

void sub_1000ABDF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000ABE14()
{
}

void sub_1000ABFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_1000AC02C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 64;
  if (a3)
  {
    sub_1000AA034((uint64_t)v9, a1, v5, 3);
    if (!sub_1000AA824(v9, a2)) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_1000A9D34((uint64_t)v9, a1, v5);
    if (!sub_1000AA824(v9, a2))
    {
LABEL_6:
      uint64_t v6 = sub_1000A9A10((uint64_t)v9);
      goto LABEL_7;
    }
  }
  uint64_t v6 = 0;
LABEL_7:
  sub_1000AC93C((uint64_t)v12, v12[1]);
  std::mutex::~mutex(&v11);
  CFTypeID v8 = (void **)&v10;
  sub_1000AC99C(&v8);
  return v6;
}

void sub_1000AC11C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000AA098((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000AC13C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[5];
  uint64_t v4 = (void *)result[8];
  uint64_t v3 = (void *)result[9];
  if (v4 == v3)
  {
LABEL_9:
    int v8 = 0;
    int v9 = 1;
    uint64_t v4 = v3;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v5 = v4[5];
    if (v2 <= (v4[6] & 1) + v5 - 1) {
      break;
    }
    uint64_t v6 = (void *)v4[1];
    if (v6)
    {
      do
      {
        int v7 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        int v7 = (void *)v4[2];
        BOOL v16 = *v7 == (void)v4;
        uint64_t v4 = v7;
      }
      while (!v16);
    }
    result[8] = v7;
    uint64_t v4 = v7;
    if (v7 == v3) {
      goto LABEL_9;
    }
  }
  unint64_t v10 = v4[4];
  if ((v4[6] & 2) != 0)
  {
    if (v2 < v10) {
      goto LABEL_20;
    }
  }
  else if (v10 >= v2)
  {
    goto LABEL_20;
  }
  if (v4[6])
  {
    if (v5 >= v2) {
      goto LABEL_18;
    }
LABEL_20:
    int v8 = 0;
    int v9 = 1;
    goto LABEL_21;
  }
  if (v2 >= v5) {
    goto LABEL_20;
  }
LABEL_18:
  int v11 = *((_DWORD *)v4 + 14);
  if (v11 != 1 && (v11 & 0xFF000000) != 0x80000000) {
    goto LABEL_20;
  }
  int v9 = 0;
  int v8 = 1;
LABEL_21:
  unint64_t v12 = result[3];
  unint64_t v13 = v2;
  if (v2 < v12)
  {
    unint64_t v13 = v2;
    do
    {
      unint64_t v14 = v12;
      if (v4 == v3) {
        goto LABEL_27;
      }
      unint64_t v14 = v4[4];
      if ((v4[6] & 2) == 0) {
        ++v14;
      }
      if (v14 > v13)
      {
LABEL_27:
        if (v8) {
          break;
        }
      }
      else
      {
        if (v8)
        {
          int v15 = *((_DWORD *)v4 + 14);
          BOOL v16 = v15 == 1 || (v15 & 0xFF000000) == 0x80000000;
          if (!v16) {
            break;
          }
        }
        if (v9)
        {
          int v17 = *((_DWORD *)v4 + 14);
          if (v17 == 1 || (v17 & 0xFF000000) == 0x80000000) {
            break;
          }
        }
        uint64_t v18 = (void *)v4[1];
        unint64_t v19 = v4;
        if (v18)
        {
          do
          {
            unint64_t v20 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            unint64_t v20 = (void *)v19[2];
            BOOL v16 = *v20 == (void)v19;
            unint64_t v19 = v20;
          }
          while (!v16);
        }
        unint64_t v14 = (v4[6] & 1) + v4[5];
        result[8] = v20;
        uint64_t v4 = v20;
      }
      unint64_t v13 = v14;
    }
    while (v14 < v12);
  }
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v13;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v8;
  return result;
}

void sub_1000AC2F4()
{
}

void sub_1000AC378()
{
}

void *sub_1000AC38C(void *a1)
{
  *a1 = &off_1001986D0;
  sub_1000562CC((uint64_t)(a1 + 8));
  unint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_100010A48(v2);
  }
  return a1;
}

void sub_1000AC3DC(void *a1)
{
  *a1 = &off_1001986D0;
  sub_1000562CC((uint64_t)(a1 + 8));
  unint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_100010A48(v2);
  }

  operator delete();
}

uint64_t sub_1000AC44C()
{
  return 0;
}

void sub_1000AC454()
{
}

void sub_1000AC4C8()
{
}

uint64_t sub_1000AC4EC()
{
  return 1;
}

void sub_1000AC4F4()
{
}

void sub_1000AC5A4()
{
}

uint64_t sub_1000AC5C8()
{
  return -78;
}

_WORD *sub_1000AC5D4(_WORD *result, int a2)
{
  uint64_t v2 = 0;
  *uint64_t result = a2;
  uint64_t v5 = 0x10000800040002;
  int v6 = 4194336;
  __int16 v7 = 128;
  do
  {
    a2 &= *(unsigned __int16 *)((char *)&v5 + v2) ^ 0xFFFF;
    v2 += 2;
  }
  while (v2 != 14);
  if (a2)
  {
    __int16 v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "block_attributes";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_1001A4EF0;
    *((_WORD *)exception + 16) = v3;
  }
  return result;
}

void sub_1000AC6D8(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

void sub_1000AC710(uint64_t a1@<X0>, void *a2@<X8>)
{
  __int16 v3 = (char *)sub_100131BC4(a1);
  sub_100003BA4(v14, v3);
  sub_10002A7B8((uint64_t)v10);
  if ((v15 & 0x80u) == 0) {
    uint64_t v4 = v14;
  }
  else {
    uint64_t v4 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  int v6 = sub_100003DF0(&v11, (uint64_t)v4, v5);
  __int16 v7 = sub_100003DF0(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  int v8 = (void *)std::ostream::operator<<();
  sub_100003DF0(v8, (uint64_t)"]", 1);
  sub_100003890((uint64_t)v12, a2);
  *(void *)((char *)v10
  uint64_t v11 = v9;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
}

unsigned char ***sub_1000AC918(unsigned char ***result)
{
  ***uint64_t result = 1;
  return result;
}

unsigned char ***sub_1000AC92C(unsigned char ***result)
{
  ***uint64_t result = 0;
  return result;
}

void sub_1000AC93C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000AC93C(a1, *a2);
    sub_1000AC93C(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[12];
    if (v4) {
      sub_100010A48(v4);
    }
    operator delete(a2);
  }
}

void sub_1000AC99C(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_1000AC9F0((uint64_t)v2, *v2);
    __int16 v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000AC9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 184;
      int v6 = (std::mutex *)(v4 - 168);
      sub_1000AC93C(v4 - 96, *(void **)(v4 - 88));
      std::mutex::~mutex(v6);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_1000ACA54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642) {
    sub_10001796C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xB21642C8590B21) {
    unint64_t v9 = 0x1642C8590B21642;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_1000ACC84(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  char v13 = v10;
  unint64_t v14 = &v10[184 * v4];
  BOOL v16 = &v10[184 * v9];
  sub_1000ACB74((uint64_t)v14, a2);
  unsigned __int8 v15 = v14 + 184;
  sub_1000ACC0C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1000ACEA8((uint64_t)&v13);
  return v11;
}

void sub_1000ACB60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000ACEA8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1000ACB74(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v2 = (void *)(a2 + 96);
  uint64_t v3 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v3;
  uint64_t v4 = a1 + 96;
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 88) = v2;
    *uint64_t v2 = 0;
    *(void *)(a2 + 104) = 0;
  }
  else
  {
    *(void *)(a1 + 88) = v4;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  __n128 result = *(__n128 *)(a2 + 144);
  *(__n128 *)(a1 + 144) = result;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return result;
}

uint64_t sub_1000ACC0C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000ACCD0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000ACC84(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    sub_100010CDC();
  }
  return operator new(184 * a2);
}

uint64_t sub_1000ACCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 184;
      sub_1000ACB74(v7 - 184, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 184;
      *((void *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1000ACD8C((uint64_t)v12);
  return v10;
}

void sub_1000ACD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000ACD8C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000ACDC4((uint64_t *)a1);
  }
  return a1;
}

void sub_1000ACDC4(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_1000ACE3C(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_1000ACE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = (std::mutex *)(i + 16);
    sub_1000AC93C(i + 88, *(void **)(i + 96));
    std::mutex::~mutex(v6);
    uint64_t i = *(void *)(a2 + 32) + 184;
  }
}

uint64_t sub_1000ACEA8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000ACEE0(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    uint64_t v5 = (std::mutex *)(i - 168);
    sub_1000AC93C(i - 96, *(void **)(i - 88));
    std::mutex::~mutex(v5);
  }
}

uint64_t sub_1000ACF44(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000AD1D4(v1);

  return std::ios::~ios();
}

uint64_t sub_1000ACF90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000AD1D4(v1);

  return std::ios::~ios();
}

void sub_1000ACFF0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000AD1D4(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000AD058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000AD090(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000AD0F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000AD1D4(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000AD15C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000AD1D4(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000AD1D4(uint64_t a1)
{
  *(void *)a1 = off_1001A50D0;
  sub_1000AD310(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000AD310(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000AD4D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000AD46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AD498(uint64_t a1)
{
  sub_1000AD1D4(a1);

  operator delete();
}

int *sub_1000AD4D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 337;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 337;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

const void **sub_1000AD6B8(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1000AD6EC(uint64_t a1, uint64_t a2)
{
  sub_10010E96C((uint64_t)&v15, a2);
  int v4 = v15;
  long long v9 = v20;
  long long v10 = v21;
  long long v11 = v22;
  long long v12 = v23;
  long long v5 = v16;
  long long v6 = v17;
  long long v7 = v18;
  long long v8 = v19;
  sub_10010EA8C((uint64_t)&v4, (uint64_t)v13);
  int v4 = &v14;
  *(void *)&long long v5 = (unint64_t)HIDWORD(v15) >> 3;
  sub_1000AD7CC(a1, (uint64_t)&v4);
  return a1;
}

uint64_t sub_1000AD7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if (v2 == -1) {
    sub_100017DCC();
  }
  long long v6 = &v5;
  ((void (*)(uint64_t **, uint64_t))off_1001A5140[v2])(&v6, a1 + 4);
  return a1;
}

uLong sub_1000AD830(const Bytef ****a1, _DWORD *a2)
{
  uLong result = crc32(*a2, ***a1, *((_DWORD *)**a1 + 2));
  *a2 = result;
  return result;
}

uint64_t sub_1000AD86C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uLong result = *(_OWORD *)a2;
  if ((*(unsigned char *)(a3 + 16) & 2) != 0) {
    unint64_t v3 = *(void *)a3;
  }
  else {
    unint64_t v3 = *(void *)a3 + 1;
  }
  uint64_t v5 = (_OWORD *)(a2 + 144);
  int v4 = *(void **)(a2 + 144);
  long long v6 = *(void **)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 136);
  if (v6 != v4)
  {
    while (1)
    {
      unint64_t v8 = v6[4];
      if ((v6[6] & 2) == 0) {
        ++v8;
      }
      if (v8 >= v3) {
        break;
      }
      long long v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          long long v10 = v9;
          long long v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          long long v6 = v10;
        }
        while (!v11);
      }
      long long v6 = v10;
      if (v10 == v4) {
        goto LABEL_29;
      }
    }
  }
  if (v6 == v4)
  {
LABEL_29:
    int v17 = *(_DWORD *)(a2 + 80);
    *(void *)(result + 96) = 0;
    *(void *)(result + 16) = 850045863;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 72) = 0;
    *(_DWORD *)(result + 80) = v17;
    *(void *)(result + 104) = 0;
    *(void *)(result + 88) = result + 96;
    *(_OWORD *)(result + 112) = *v5;
    *(_OWORD *)(result + 128) = *v5;
    *(_OWORD *)(result + 144) = *v5;
    *(unsigned char *)(result + 168) = 0;
    long long v6 = *(void **)(result + 112);
    if (v6 == *(void **)(result + 144)) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  long long v12 = v6;
  while (1)
  {
    unint64_t v13 = v12[4];
    if ((v12[6] & 2) == 0) {
      ++v13;
    }
    if (v13 > (unint64_t)(*(unsigned char *)(a3 + 16) & 1) + *(void *)(a3 + 8) - 1) {
      break;
    }
    uint64_t v14 = (void *)v12[1];
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t v15 = (void *)v12[2];
        BOOL v11 = *v15 == (void)v12;
        long long v12 = v15;
      }
      while (!v11);
    }
    long long v12 = v15;
    if (v15 == v4)
    {
      long long v12 = *(void **)(a2 + 144);
      break;
    }
  }
  int v16 = *(_DWORD *)(a2 + 80);
  *(void *)(result + 96) = 0;
  *(void *)(result + 16) = 850045863;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = v16;
  *(void *)(result + 88) = result + 96;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = v6;
  *(void *)(result + 120) = v7;
  *(void *)(result + 128) = v6;
  *(void *)(result + 136) = v7;
  *(void *)(result + 144) = v12;
  *(void *)(result + 152) = v7;
  *(unsigned char *)(result + 168) = 0;
  if (v6 != v12)
  {
LABEL_30:
    char v18 = *((unsigned char *)v6 + 48);
    uint64_t v19 = v6[4];
    if ((v18 & 2) == 0) {
      ++v19;
    }
    *(void *)(result + 160) = v19;
  }
LABEL_33:
  *(unsigned char *)(result + 176) = 0;
  return result;
}

uint64_t sub_1000ADA2C(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 850045863;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 1018212795;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  if (a2) {
    sub_1000ADAEC((void **)(a1 + 8), a2);
  }
  return a1;
}

void sub_1000ADAC0(_Unwind_Exception *a1)
{
  std::condition_variable::~condition_variable(v4);
  std::mutex::~mutex(v3);
  long long v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void sub_1000ADAEC(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_10001796C();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long long v6 = (char *)sub_100019308(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    BOOL v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_1000ADB94(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      int v4 = *v2;
      if (*v2)
      {
        int64_t v5 = (std::__shared_weak_count *)v4[2];
        if (v5) {
          sub_100010A48(v5);
        }
        uint64_t v6 = *v4;
        *int v4 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        operator delete();
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(uint64_t ***)(a1 + 8);
  }
  *(void *)(a1 + 16) = v2;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_1000ADC5C(uint64_t a1@<X1>, void *a2@<X2>, int *a3@<X3>, unsigned __int8 *a4@<X4>, void *a5@<X8>)
{
  long long v10 = operator new(0x90uLL);
  sub_1000ADCF0(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1000196A4((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1000ADCDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000ADCF0(void *a1, uint64_t a2, void *a3, int *a4, unsigned __int8 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A5160;
  sub_100141DDC(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_1000ADD44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000ADD58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A5160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000ADD78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A5160;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000ADDCC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000ADDF4(uint64_t a1)
{
  std::mutex::lock((std::mutex *)a1);
  *(unsigned char *)(a1 + 152) = 1;
  sub_1000AC93C(a1 + 72, *(void **)(a1 + 80));
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;

  std::mutex::unlock((std::mutex *)a1);
}

void sub_1000ADE50(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000ADED4(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_begin_catch(a1);
  sub_1000ADF00((uint64_t *)va, v2);
  __cxa_rethrow();
}

void sub_1000ADEEC(_Unwind_Exception *a1)
{
}

void sub_1000ADF00(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = (std::mutex *)(*a1 + 32);
  std::mutex::lock(v4);
  int64_t v5 = *(void **)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 8);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10001796C();
    }
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_100019308(v3 + 24, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    uint64_t v7 = v14 + 8;
    int v17 = *(char **)(v3 + 8);
    int v16 = *(char **)(v3 + 16);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int v16 = *(char **)(v3 + 8);
    }
    *(void *)(v3 + 8) = v14;
    *(void *)(v3 + 16) = v7;
    *(void *)(v3 + 24) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v5 = a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v3 + 16) = v7;
  std::mutex::unlock(v4);

  std::condition_variable::notify_one((std::condition_variable *)(v3 + 96));
}

void sub_1000AE014(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000AE02C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000AE064(uint64_t a1)
{
}

uint64_t sub_1000AE08C(uint64_t a1, uint64_t a2)
{
  if (sub_100011A18(a2, (uint64_t)&off_1001A51F0)) {
    return a1 + 32;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000AE0D0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A50D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D29B8();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003C58(a1 + 96);
  return a1;
}

void sub_1000AE14C(_Unwind_Exception *a1)
{
}

_OWORD *sub_1000AE160(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  long long v5 = (void **)sub_1000AE210((uint64_t)a1, &v10, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x70uLL);
    uint64_t v6[2] = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 24);
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *((void *)v6 + 7) = v8;
    void v6[4] = *(_OWORD *)(a3 + 32);
    *((void *)v6 + 10) = *(void *)(a3 + 48);
    *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)(a3 + 56);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *((void *)v6 + 13) = *(void *)(a3 + 72);
    sub_10002B3B8(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_1000AE210(uint64_t a1, void *a2, unint64_t *a3)
{
  long long v5 = (void *)(a1 + 8);
  char v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!sub_1000AE2A4(a3, v4 + 4)) {
          break;
        }
        char v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_1000AE2A4(v8, a3)) {
        break;
      }
      long long v5 = v7 + 1;
      char v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_1000AE2A4(unint64_t *a1, unint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (v3 >= *a1)
      {
LABEL_4:
        if ((v2 & 2) != 0) {
          unint64_t v5 = v4;
        }
        else {
          unint64_t v5 = v4 + 1;
        }
        unint64_t v6 = *a2;
        if ((a2[2] & 2) == 0) {
          ++v6;
        }
        if (v5 < v6) {
          return 1;
        }
        if (v6 == v5) {
          return (v2 & 1) + v3 - 1 < (a2[2] & 1) + a2[1] - 1;
        }
        return 0;
      }
    }
    else
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (*a1 < v3) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3) {
      goto LABEL_4;
    }
  }
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3) {
      BOOL v9 = a2[1] < *a2;
    }
    else {
      BOOL v9 = *a2 >= a2[1];
    }
  }
  else
  {
    unint64_t v10 = a2[1];
    BOOL v9 = *a2 >= v10 || *a2 + 1 >= v10;
  }
  return !v9;
}

void sub_1000AE39C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000AE470((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      unint64_t v12 = (std::__shared_weak_count **)(v10 + 40);
      do
      {
        if (*v12) {
          sub_100010A48(*v12);
        }
        v12 += 7;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_1000AE44C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1000AE470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a2 != a3)
  {
    *(void *)a5 = *(void *)a2;
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    __n128 result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a5 + 32) = result;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a5 + 48) = *(void *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  if (a6)
  {
    uint64_t v9 = a6;
    uint64_t v10 = a5;
    do
    {
      *(void *)uint64_t v10 = *(void *)a7;
      long long v11 = *(_OWORD *)(a7 + 8);
      *(void *)(v10 + 24) = *(void *)(a7 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      __n128 result = *(__n128 *)(a7 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(void *)(a7 + 32) = 0;
      *(void *)(a7 + 40) = 0;
      *(void *)(v10 + 48) = *(void *)(a7 + 48);
      a7 += 56;
      v10 += 56;
      --v9;
    }
    while (v9);
  }
  if (a3 != a4)
  {
    uint64_t v12 = a5 + 56 * a6;
    do
    {
      *(void *)uint64_t v12 = *(void *)a3;
      long long v13 = *(_OWORD *)(a3 + 8);
      *(void *)(v12 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v12 + 8) = v13;
      __n128 result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v12 + 32) = result;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(v12 + 48) = *(void *)(a3 + 48);
      a3 += 56;
      v12 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

void sub_1000AE548(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000AE5FC((uint64_t)a1, a3);
  if (v11 >= 0x24924924924924ALL) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  long long v13 = operator new(56 * v11);
  sub_1000AE680(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_1000AE5FC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x249249249249249;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x249249249249249 - v4 < a2 - v4 + v3) {
    sub_100014AAC("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x249249249249249) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000AE680(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000AE754((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count **)(v10 + 40);
      do
      {
        if (*v12) {
          sub_100010A48(*v12);
        }
        v12 += 7;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_1000AE730(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1000AE754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a2 != a3)
  {
    *(void *)a5 = *(void *)a2;
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a5 + 48) = *(void *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  *(void *)a5 = *(void *)a7;
  long long v8 = *(_OWORD *)(a7 + 8);
  *(void *)(a5 + 24) = *(void *)(a7 + 24);
  *(_OWORD *)(a5 + 8) = v8;
  __n128 result = *(__n128 *)(a7 + 32);
  *(__n128 *)(a5 + 32) = result;
  *(void *)(a7 + 32) = 0;
  *(void *)(a7 + 40) = 0;
  *(void *)(a5 + 48) = *(void *)(a7 + 48);
  if (a3 != a4)
  {
    uint64_t v10 = a5 + 56 * a6;
    do
    {
      *(void *)uint64_t v10 = *(void *)a3;
      long long v11 = *(_OWORD *)(a3 + 8);
      *(void *)(v10 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      __n128 result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(v10 + 48) = *(void *)(a3 + 48);
      a3 += 56;
      v10 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t *sub_1000AE810(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000464E4(a1, a2);
  unint64_t v4 = (std::__shared_weak_count *)a2[12];
  if (v4) {
    sub_100010A48(v4);
  }
  operator delete(a2);
  return v3;
}

void *sub_1000AE850(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 40);
    do
    {
      if (*v3) {
        sub_100010A48(*v3);
      }
      v3 += 7;
      --v2;
    }
    while (v2);
  }
  if (a1[2] && a1 + 3 != (void *)*a1) {
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_1000AE8C0(uint64_t a1, void *a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001A5210;
  sub_100044660(a1 + 24, a1);
  *(void *)(a1 + 560) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 568) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 576) = 850045863;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  sub_100003BA4(&__p, "com.apple.diskimages.band_unmap");
  sub_10003C090();
  sub_1000471B8((void *)(a1 + 640));
  if (v10 < 0) {
    operator delete(__p);
  }
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  sub_1000AED10(a1);
  *(void *)(a1 + 64) = *(void *)(*(void *)(a1 + 560) + 128);
  *(void *)(a1 + 72) = a3;
  sub_1000AEDE0((uint64_t *)(a1 + 712), *(void *)(a1 + 16));
  if (*(void *)(a1 + 16)) {
    operator new();
  }
  *(void *)&long long v7 = "DiskImageSparseBundle::DiskImageSparseBundle(const shared_ptr<SparseBundleBackend> &, size_t)";
  *((void *)&v7 + 1) = 44;
  int v8 = 0;
  sub_1000AEE94(&__p, &v7);
  sub_100003DF0(v11, (uint64_t)"Initialized bands array of size ", 32);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_1000B4DD0((uint64_t)&__p);
  std::ios::~ios();
  sub_100077C24();
}

void sub_1000AEC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1000B52B4((void ***)&__p);
  sub_1000445D4(v20);
  std::mutex::~mutex(v19);
  long long v22 = *(std::__shared_weak_count **)(v17 + 568);
  if (v22) {
    sub_100010A48(v22);
  }
  sub_1000B5338(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AED10(uint64_t a1)
{
  uint64_t result = sub_1000AF000(*(void *)(a1 + 560) + 24);
  if (result)
  {
    *(void *)&long long v4 = "DiskImageSparseBundle::init_bands_array_size()";
    *((void *)&v4 + 1) = 44;
    int v5 = 0;
    sub_1000AF094(v6, &v4);
    sub_100003DF0(v7, (uint64_t)"Mounted on AFP, max open bands is set to ", 41);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000B56E8((uint64_t)v6);
    uint64_t result = std::ios::~ios();
    uint64_t v3 = 3;
  }
  else
  {
    uint64_t v3 = 64;
  }
  *(void *)(a1 + 16) = v3;
  return result;
}

void sub_1000AEDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000AF1B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AEDE0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_10001796C();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_100058794(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    sub_1000B48DC(a1, v7);
    return sub_1000B49E8((uint64_t)v7);
  }
  return result;
}

void sub_1000AEE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000B49E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000AEE94(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C47C4((uint64_t)a1, a2);
  *a1 = off_1001A53B8;
  a1[45] = &off_1001A54B8;
  a1[46] = &off_1001A54E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A53B8;
  a1[45] = off_1001A5440;
  a1[46] = off_1001A5468;
  return a1;
}

void sub_1000AEF94(_Unwind_Exception *a1)
{
  sub_1000B4DD0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000AEFB8(uint64_t a1)
{
  return a1;
}

BOOL sub_1000AF000(uint64_t a1)
{
  sub_100120124(a1);
  unint64_t v1 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 5)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    int v3 = *(_DWORD *)v2;
    int v4 = *((unsigned __int8 *)v2 + 4);
    BOOL v6 = v3 == 1718642273 && v4 == 115;
    if ((char)v9 < 0) {
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v6 = 0;
    if ((char)v9 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }
  return v6;
}

void *sub_1000AF094(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4854((uint64_t)a1, a2);
  *a1 = off_1001A55D8;
  a1[45] = &off_1001A56D8;
  a1[46] = &off_1001A5700;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A55D8;
  a1[45] = off_1001A5660;
  a1[46] = off_1001A5688;
  return a1;
}

void sub_1000AF194(_Unwind_Exception *a1)
{
  sub_1000B56E8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF1B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AF1FC(uint64_t a1)
{
  unsigned int v10 = 0;
  sub_1000474F4(a1 + 352, 0, (uint64_t)v11);
  uint64_t v2 = *(void *)(a1 + 712);
  uint64_t v3 = *(void *)(a1 + 720);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    do
    {
      sub_100083B30(&v8, v2);
      if (v9 && (*(unsigned char *)(v9 + 68) & 1) != 0)
      {
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 1174405120;
        uint64_t v6[2] = sub_1000AF370;
        void v6[3] = &unk_1001A52D0;
        sub_100083B30(v7, &v8);
        void v7[3] = &v10;
        sub_1000472D8(v11, v6);
        ++v4;
        sub_100083A6C(v7);
      }
      sub_100083A6C(&v8);
      v2 += 24;
    }
    while (v2 != v3);
  }
  sub_100047470(v11);
  return atomic_load(&v10);
}

void sub_1000AF360(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003744(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF370(uint64_t a1)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v3 = "size_t> DiskImageSparseBundle::flush_open_bands()_block_invoke";
    *((void *)&v3 + 1) = 47;
    int v4 = 2;
    sub_1000AF440(v5, &v3);
    sub_100003DF0(v6, (uint64_t)"Flushing ", 9);
    sub_100083948(v6);
    std::ostream::~ostream();
    sub_1000B5E5C((uint64_t)v5);
    std::ios::~ios();
  }
  uint64_t result = sub_1000836A4(*(void *)(a1 + 40));
  if (result) {
    atomic_store(result, *(unsigned int **)(a1 + 56));
  }
  return result;
}

void sub_1000AF42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000AF564((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000AF440(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C48E4((uint64_t)a1, a2);
  *a1 = off_1001A57F8;
  a1[45] = &off_1001A58F8;
  a1[46] = &off_1001A5920;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A57F8;
  a1[45] = off_1001A5880;
  a1[46] = off_1001A58A8;
  return a1;
}

void sub_1000AF540(_Unwind_Exception *a1)
{
  sub_1000B5E5C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF564(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AF5A8(uint64_t a1, uint64_t a2)
{
  return sub_100083B30(a1 + 32, a2 + 32);
}

void *sub_1000AF5B4(uint64_t a1)
{
  return sub_100083A6C((void *)(a1 + 32));
}

uint64_t sub_1000AF5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v7 + 1) = 32;
    int v8 = 2;
    sub_1000AF810(v9, &v7);
    sub_100003DF0(v10, (uint64_t)"Starting flush", 14);
    std::ostream::~ostream();
    sub_1000B65D0((uint64_t)v9);
    std::ios::~ios();
  }
  std::mutex::lock((std::mutex *)(a1 + 576));
  sub_1000439E0(a1 + 80);
  uint64_t v5 = sub_1000AF1FC(a1);
  sub_1000439F0(a1 + 80);
  if (v5)
  {
    *(void *)&long long v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v7 + 1) = 32;
    int v8 = 16;
    sub_1000AF978(v9, &v7);
    sub_100003DF0(v10, (uint64_t)"Flush failed - returning ", 25);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000B6D44((uint64_t)v9);
    std::ios::~ios();
  }
  else
  {
    if (sub_1000D29B8())
    {
      *(void *)&long long v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
      *((void *)&v7 + 1) = 32;
      int v8 = 2;
      sub_1000AFAE0(v9, &v7);
      std::ostream::operator<<();
      sub_100003DF0(v10, (uint64_t)" bands flushed, calling ", 24);
      sub_100141620(v10, a3);
      std::ostream::~ostream();
      sub_1000B74B8((uint64_t)v9);
      std::ios::~ios();
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 16))(*(void *)(a1 + 560), a3);
  }
  std::mutex::unlock((std::mutex *)(a1 + 576));
  return v5;
}

void sub_1000AF7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void *sub_1000AF810(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4974((uint64_t)a1, a2);
  *a1 = off_1001A5A18;
  a1[45] = &off_1001A5B18;
  a1[46] = &off_1001A5B40;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A5A18;
  a1[45] = off_1001A5AA0;
  a1[46] = off_1001A5AC8;
  return a1;
}

void sub_1000AF910(_Unwind_Exception *a1)
{
  sub_1000B65D0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF934(uint64_t a1)
{
  return a1;
}

void *sub_1000AF978(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4A04((uint64_t)a1, a2);
  *a1 = off_1001A5C38;
  a1[45] = &off_1001A5D38;
  a1[46] = &off_1001A5D60;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A5C38;
  a1[45] = off_1001A5CC0;
  a1[46] = off_1001A5CE8;
  return a1;
}

void sub_1000AFA78(_Unwind_Exception *a1)
{
  sub_1000B6D44(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000AFA9C(uint64_t a1)
{
  return a1;
}

void *sub_1000AFAE0(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4A94((uint64_t)a1, a2);
  *a1 = off_1001A5E58;
  a1[45] = &off_1001A5F58;
  a1[46] = &off_1001A5F80;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A5E58;
  a1[45] = off_1001A5EE0;
  a1[46] = off_1001A5F08;
  return a1;
}

void sub_1000AFBE0(_Unwind_Exception *a1)
{
  sub_1000B74B8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000AFC04(uint64_t a1)
{
  return a1;
}

void *sub_1000AFC48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1)) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  if (a3) {
    int v9 = v8 | 0x200;
  }
  else {
    int v9 = v8;
  }
  sub_1000AFDF8(a1, a2, &v11);
  if (v12)
  {
LABEL_10:
    sub_100083B34((uint64_t)a4, (uint64_t)&v11);
  }
  else
  {
    while (!sub_100043A74(a1 + 208, a2))
    {
      sub_100083A6C(&v11);
      sub_1000AFDF8(a1, a2, &v11);
      if (v12) {
        goto LABEL_10;
      }
    }
    sub_1000B0050(a1, a2, v9, a4);
  }
  return sub_100083A6C(&v11);
}

std::chrono::steady_clock::time_point sub_1000AFDF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::chrono::steady_clock::time_point **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 712);
  while (*(void *)(v7 + 16) != a2)
  {
    ++v6;
    v7 += 24;
    if (v4 == v6) {
      goto LABEL_14;
    }
  }
  sub_100083B30(a3, v7);
  int v8 = a3[1];
  if (!v8 || v8[4].__d_.__rep_ != a2)
  {
    if (sub_1000D29B8())
    {
      *(void *)&long long v10 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
      *((void *)&v10 + 1) = 41;
      int v11 = 2;
      sub_1000B0C28(v12, &v10);
      sub_100003DF0(v13, (uint64_t)"Band ", 5);
      *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                            + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                            + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_100003DF0(v13, (uint64_t)" changed before retain completed", 32);
      std::ostream::~ostream();
      sub_1000B9288((uint64_t)v12);
      std::ios::~ios();
    }
    sub_100083A6C(a3);
LABEL_14:
    operator new();
  }
  if (sub_1000D29B8())
  {
    *(void *)&long long v10 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
    *((void *)&v10 + 1) = 41;
    int v11 = 2;
    sub_1000B0AC0(v12, &v10);
    sub_100003DF0(v13, (uint64_t)"Found ", 6);
    sub_100083948(v13);
    sub_100003DF0(v13, (uint64_t)" at index ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000B8B14((uint64_t)v12);
    std::ios::~ios();
  }
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*a3)[2].__d_.__rep_ = result.__d_.__rep_;
  return result;
}

void sub_1000B0050(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v15 = 0;
  int v16 = &v15;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 0;
  if (sub_1000D29B8())
  {
    *(void *)&long long v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + 1) = 32;
    int v12 = 2;
    sub_10008341C(v13, &v11);
    sub_100003DF0(v14, (uint64_t)"Opening band ", 13);
    *(_DWORD *)((char *)&v14[1] + *(void *)(v14[0] - 24)) = *(_DWORD *)((unsigned char *)&v14[1] + *(void *)(v14[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v14[1] + *(void *)(v14[0] - 24)) = *(_DWORD *)((unsigned char *)&v14[1] + *(void *)(v14[0] - 24)) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    sub_100089168((uint64_t)v13);
    std::ios::~ios();
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  _OWORD v9[2] = sub_1000B03D8;
  v9[3] = &unk_1001A5308;
  void v9[4] = &v15;
  v9[5] = a1;
  v9[6] = a2;
  int v10 = a3;
  sub_100044664(a1 + 24, (uint64_t)v9);
  sub_1000B041C(a1, (std::chrono::steady_clock::time_point *)v16[3], a4);
  if (!a4[1])
  {
    uint64_t v8 = 0;
    do
    {
      if (!v8 && sub_1000D29B8())
      {
        *(void *)&long long v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
        *((void *)&v11 + 1) = 32;
        int v12 = 2;
        sub_1000B0958(v13, &v11);
        sub_100003DF0(v14, (uint64_t)"Failed to evict band to make room for ", 38);
        sub_100083948(v14);
        sub_100003DF0(v14, (uint64_t)", retrying", 10);
        std::ostream::~ostream();
        sub_1000B83A0((uint64_t)v13);
        std::ios::~ios();
      }
      usleep(0x3E8u);
      sub_100083A6C(a4);
      ++v8;
      sub_1000B041C(a1, (std::chrono::steady_clock::time_point *)v16[3], a4);
    }
    while (!a4[1]);
  }
  if (sub_1000D29B8())
  {
    *(void *)&long long v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + 1) = 32;
    int v12 = 2;
    sub_1000B07F0(v13, &v11);
    sub_100083948(v14);
    sub_100003DF0(v14, (uint64_t)" opened and replaced at attempt ", 32);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000B7C2C((uint64_t)v13);
    std::ios::~ios();
  }
  _Block_object_dispose(&v15, 8);
}

void sub_1000B0370(_Unwind_Exception *a1)
{
  sub_100083A6C(v1);
  _Block_object_dispose((const void *)(v2 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1000B03D8(uint64_t a1)
{
}

void sub_1000B041C(uint64_t a1@<X0>, std::chrono::steady_clock::time_point *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = v22;
  long long __p = v22;
  long long v21 = xmmword_1001684D0;
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = atomic_load(*(unint64_t **)(*(void *)(a1 + 712) + v7));
      if (v9 == 1)
      {
        *(void *)&v18[0] = *(void *)(*(void *)(*(void *)(a1 + 712) + v7) + 16);
        *((void *)&v18[0] + 1) = v8;
        int v10 = (char *)__p + 16 * v21;
        if ((void)v21 == *((void *)&v21 + 1))
        {
          sub_1000C4D64(&__p, v10, 1, v18, &v16);
        }
        else
        {
          *(_OWORD *)int v10 = v18[0];
          *(void *)&long long v21 = v21 + 1;
        }
      }
      ++v8;
      v7 += 24;
    }
    while (v8 < *(void *)(a1 + 16));
    uint64_t v6 = __p;
    long long v11 = (char *)__p + 16 * v21;
    if ((void)v21)
    {
      uint64_t v12 = 126 - 2 * __clz(v21);
      goto LABEL_13;
    }
  }
  else
  {
    long long v11 = v22;
  }
  uint64_t v12 = 0;
LABEL_13:
  sub_1000B976C((uint64_t)v6, v11, (uint64_t)v18, v12, 1);
  if (sub_1000D29B8())
  {
    *(void *)&long long v16 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((void *)&v16 + 1) = 42;
    int v17 = 2;
    sub_1000B0D90(v18, &v16);
    sub_100003DF0(v19, (uint64_t)"Looking for an evictable slot for ", 34);
    sub_100083948(v19);
    std::ostream::~ostream();
    sub_1000BAC18((uint64_t)v18);
    std::ios::~ios();
  }
  if (!(void)v21) {
LABEL_21:
  }
    operator new();
  uint64_t v13 = (uint64_t *)((char *)__p + 8);
  uint64_t v14 = 16 * v21;
  while (1)
  {
    uint64_t v15 = *v13;
    v13 += 2;
    sub_100083BA0((std::chrono::steady_clock::time_point **)(*(void *)(a1 + 712) + 24 * v15), a2, (uint64_t)a3);
    if (a3[1]) {
      break;
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v16 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
      *((void *)&v16 + 1) = 42;
      int v17 = 2;
      sub_1000B1060(v18, &v16);
      sub_100003DF0(v19, (uint64_t)"Failed placing new ", 19);
      sub_100083948(v19);
      sub_100003DF0(v19, (uint64_t)" at index ", 10);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_1000BBB00((uint64_t)v18);
      std::ios::~ios();
    }
    sub_100083A6C(a3);
    v14 -= 16;
    if (!v14) {
      goto LABEL_21;
    }
  }
  if (sub_1000D29B8())
  {
    *(void *)&long long v16 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((void *)&v16 + 1) = 42;
    int v17 = 2;
    sub_1000B0EF8(v18, &v16);
    sub_100003DF0(v19, (uint64_t)"Placed new ", 11);
    sub_100083948(v19);
    sub_100003DF0(v19, (uint64_t)" at index ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000BB38C((uint64_t)v18);
    std::ios::~ios();
  }
  sub_100044030(a1 + 208, a2[4].__d_.__rep_, 1);
  if (*((void *)&v21 + 1) && v22 != __p) {
    operator delete(__p);
  }
}

void sub_1000B07D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003744(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_1000B07F0(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4B24((uint64_t)a1, a2);
  *a1 = off_1001A6078;
  a1[45] = &off_1001A6178;
  a1[46] = &off_1001A61A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A6078;
  a1[45] = off_1001A6100;
  a1[46] = off_1001A6128;
  return a1;
}

void sub_1000B08F0(_Unwind_Exception *a1)
{
  sub_1000B7C2C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0914(uint64_t a1)
{
  return a1;
}

void *sub_1000B0958(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4BB4((uint64_t)a1, a2);
  *a1 = off_1001A6298;
  a1[45] = &off_1001A6398;
  a1[46] = &off_1001A63C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A6298;
  a1[45] = off_1001A6320;
  a1[46] = off_1001A6348;
  return a1;
}

void sub_1000B0A58(_Unwind_Exception *a1)
{
  sub_1000B83A0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0A7C(uint64_t a1)
{
  return a1;
}

void *sub_1000B0AC0(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4C44((uint64_t)a1, a2);
  *a1 = off_1001A64B8;
  a1[45] = &off_1001A65B8;
  a1[46] = &off_1001A65E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A64B8;
  a1[45] = off_1001A6540;
  a1[46] = off_1001A6568;
  return a1;
}

void sub_1000B0BC0(_Unwind_Exception *a1)
{
  sub_1000B8B14(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0BE4(uint64_t a1)
{
  return a1;
}

void *sub_1000B0C28(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4CD4((uint64_t)a1, a2);
  *a1 = off_1001A66D8;
  a1[45] = &off_1001A67D8;
  a1[46] = &off_1001A6800;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A66D8;
  a1[45] = off_1001A6760;
  a1[46] = off_1001A6788;
  return a1;
}

void sub_1000B0D28(_Unwind_Exception *a1)
{
  sub_1000B9288(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0D4C(uint64_t a1)
{
  return a1;
}

void *sub_1000B0D90(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4F50((uint64_t)a1, a2);
  *a1 = off_1001A68F8;
  a1[45] = &off_1001A69F8;
  a1[46] = &off_1001A6A20;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A68F8;
  a1[45] = off_1001A6980;
  a1[46] = off_1001A69A8;
  return a1;
}

void sub_1000B0E90(_Unwind_Exception *a1)
{
  sub_1000BAC18(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0EB4(uint64_t a1)
{
  return a1;
}

void *sub_1000B0EF8(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C4FE0((uint64_t)a1, a2);
  *a1 = off_1001A6B18;
  a1[45] = &off_1001A6C18;
  a1[46] = &off_1001A6C40;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A6B18;
  a1[45] = off_1001A6BA0;
  a1[46] = off_1001A6BC8;
  return a1;
}

void sub_1000B0FF8(_Unwind_Exception *a1)
{
  sub_1000BB38C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B101C(uint64_t a1)
{
  return a1;
}

void *sub_1000B1060(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000C5070((uint64_t)a1, a2);
  *a1 = off_1001A6D38;
  a1[45] = &off_1001A6E38;
  a1[46] = &off_1001A6E60;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A6D38;
  a1[45] = off_1001A6DC0;
  a1[46] = off_1001A6DE8;
  return a1;
}

void sub_1000B1160(_Unwind_Exception *a1)
{
  sub_1000BBB00(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1184(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B11C8(uint64_t a1)
{
  *(void *)a1 = off_1001A5210;
  *(void *)&long long v8 = "DiskImageSparseBundle::~DiskImageSparseBundle()";
  *((void *)&v8 + 1) = 45;
  int v9 = 0;
  sub_1000B1378(v10, &v8);
  sub_100003DF0(v11, (uint64_t)"Closing bands", 13);
  std::ostream::~ostream();
  sub_1000BC274((uint64_t)v10);
  std::ios::~ios();
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    do
    {
      if (*(void *)(*(void *)(a1 + 712) + v4))
      {
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 0x40000000;
        uint64_t v7[2] = sub_1000B14E0;
        void v7[3] = &unk_1001A5328;
        void v7[4] = a1;
        void v7[5] = v3;
        sub_1000472D8((dispatch_group_t *)(a1 + 416), v7);
        unint64_t v2 = *(void *)(a1 + 16);
      }
      ++v3;
      v4 += 24;
    }
    while (v3 < v2);
  }
  sub_100047420(a1 + 416, 0xFFFFFFFFFFFFFFFFLL);
  v10[0] = (void **)(a1 + 712);
  sub_1000B52B4(v10);
  v10[0] = (void **)(a1 + 664);
  sub_10001A830(v10);
  if (*(char *)(a1 + 663) < 0) {
    operator delete(*(void **)(a1 + 640));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 576));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 568);
  if (v5) {
    sub_100010A48(v5);
  }
  sub_1000B5338(a1 + 24);
  return a1;
}

void *sub_1000B1378(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C5100((uint64_t)a1, a2);
  *a1 = off_1001A6F58;
  a1[45] = &off_1001A7058;
  a1[46] = &off_1001A7080;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A6F58;
  a1[45] = off_1001A6FE0;
  a1[46] = off_1001A7008;
  return a1;
}

void sub_1000B1478(_Unwind_Exception *a1)
{
  sub_1000BC274(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B149C(uint64_t a1)
{
  return a1;
}

void sub_1000B14E0()
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v0 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((void *)&v0 + 1) = 45;
    int v1 = 2;
    sub_1000B1690(&v2, &v0);
    sub_100003DF0(v3, (uint64_t)"Background close of band at index ", 34);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000BC9E8((uint64_t)&v2);
    std::ios::~ios();
  }
  operator new();
}

void sub_1000B165C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000B191C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000B1690(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C5190((uint64_t)a1, a2);
  *a1 = off_1001A7178;
  a1[45] = &off_1001A7278;
  a1[46] = &off_1001A72A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7178;
  a1[45] = off_1001A7200;
  a1[46] = off_1001A7228;
  return a1;
}

void sub_1000B1790(_Unwind_Exception *a1)
{
  sub_1000BC9E8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B17B4(uint64_t a1)
{
  return a1;
}

void *sub_1000B17F8(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C5220((uint64_t)a1, a2);
  *a1 = off_1001A7398;
  a1[45] = &off_1001A7498;
  a1[46] = &off_1001A74C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7398;
  a1[45] = off_1001A7420;
  a1[46] = off_1001A7448;
  return a1;
}

void sub_1000B18F8(_Unwind_Exception *a1)
{
  sub_1000BD15C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B191C(uint64_t a1)
{
  return a1;
}

void sub_1000B1964(uint64_t a1)
{
  sub_1000B11C8(a1);

  operator delete();
}

size_t sub_1000B199C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 64);
  size_t v10 = a4[2];
  unint64_t v9 = a4[3];
  unint64_t v11 = v9 / v8;
  unint64_t v22 = v8;
  unint64_t v12 = v9 % v8;
  while (v10)
  {
    if (v10 >= v22 - v12) {
      size_t v13 = v22 - v12;
    }
    else {
      size_t v13 = v10;
    }
    uint64_t v14 = a4[4];
    uint64_t v15 = (std::__shared_weak_count *)a4[1];
    uint64_t v33 = *a4 + v7;
    uint64_t v34 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v35 = v13;
    unint64_t v36 = v12;
    uint64_t v37 = v14 - v7;
    char v38 = 0;
    sub_1000AFC48(a1, v11, a3, &v31);
    uint64_t v16 = v32;
    if (v32)
    {
      uint64_t v17 = *(void *)(v31 + 24);
      if (!*(void *)(*(void *)(a2 + 16) + 16 * v17)) {
        goto LABEL_12;
      }
      if (sub_1000B1F6C(*(void *)(*(void *)(a2 + 16) + 16 * v17)))
      {
        uint64_t v16 = v32;
LABEL_12:
        sub_1000835C0(v16, v39);
      }
      sub_100030BF8(&v33, v39);
      uint64_t v18 = *(void **)(*(void *)(a2 + 16) + 16 * v17);
      sub_10002F8C8((uint64_t)v40, (uint64_t)&v28);
      sub_10002F51C((uint64_t)v40, (uint64_t)v25);
      if (a3) {
        uint64_t v19 = sub_100011E8C(v18);
      }
      else {
        uint64_t v19 = sub_100011DAC((uint64_t)v18);
      }
      size_t v4 = v19;
      if (v27) {
        sub_100010A48(v27);
      }
      if (v26) {
        sub_100010A48(v26);
      }
      if (v30) {
        sub_100010A48(v30);
      }
      if (*((void *)&v28 + 1)) {
        sub_100010A48(*((std::__shared_weak_count **)&v28 + 1));
      }
      sub_1000175AC(v39);
      if (v4 != v13)
      {
        char v20 = 0;
        goto LABEL_31;
      }
      size_t v4 = v13;
    }
    else
    {
      if (sub_1000D29B8())
      {
        *(void *)&long long v28 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
        *((void *)&v28 + 1) = 33;
        int v29 = 2;
        sub_1000B2004(v39, &v28);
        sub_100003DF0(v41, (uint64_t)"Band ", 5);
        *(_DWORD *)((char *)&v41[1] + *(void *)(v41[0] - 24)) = *(_DWORD *)((unsigned char *)&v41[1]
                                                                              + *(void *)(v41[0] - 24)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)((char *)&v41[1] + *(void *)(v41[0] - 24)) = *(_DWORD *)((unsigned char *)&v41[1]
                                                                              + *(void *)(v41[0] - 24)) & 0xFFFFFFB5 | 2;
        sub_100003DF0(v41, (uint64_t)" doesn't exist, returning zeros", 31);
        std::ostream::~ostream();
        sub_1000BD8D0((uint64_t)v39);
        std::ios::~ios();
      }
      bzero((void *)(*a4 + v7), v13);
    }
    unint64_t v12 = 0;
    v10 -= v13;
    v7 += v13;
    ++v11;
    char v20 = 1;
LABEL_31:
    sub_100083A6C(&v31);
    if (v34) {
      sub_100010A48(v34);
    }
    if ((v20 & 1) == 0) {
      return v4;
    }
  }
  return a4[2];
}

void sub_1000B1CF0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,long long a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    sub_100083A6C(&a56);
    if (a60) {
      sub_100010A48((std::__shared_weak_count *)a60);
    }
    if (a2 == 2)
    {
      long long v67 = __cxa_begin_catch(a1);
      *(void *)&a37 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
      *((void *)&a37 + 1) = 33;
      a38 = 16;
      sub_1000B216C(&a65, &a37);
      if (a16) {
        uint64_t v68 = "Write error: ";
      }
      else {
        uint64_t v68 = "Read error: ";
      }
      if (a16) {
        uint64_t v69 = 13;
      }
      else {
        uint64_t v69 = 12;
      }
      sub_100003DF0(&STACK[0x328], (uint64_t)v68, v69);
      uint64_t v70 = (const char *)(*(uint64_t (**)(void *))(*(void *)v67 + 16))(v67);
      size_t v71 = strlen(v70);
      sub_100003DF0(&STACK[0x328], (uint64_t)v70, v71);
      sub_100003DF0(&STACK[0x328], (uint64_t)" (band ", 7);
      *(_DWORD *)((char *)&STACK[0x328] + *(void *)(STACK[0x328] - 24) + 8) = *(_DWORD *)((unsigned char *)&STACK[0x328]
                                                                                          + *(void *)(STACK[0x328] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&STACK[0x328] + *(void *)(STACK[0x328] - 24) + 8) = *(_DWORD *)((unsigned char *)&STACK[0x328]
                                                                                          + *(void *)(STACK[0x328] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 2;
      sub_100003DF0(&STACK[0x328], (uint64_t)", err ", 6);
      std::ostream::operator<<();
      sub_100003DF0(&STACK[0x328], (uint64_t)")", 1);
      sub_1000B2290((uint64_t)&a65);
      __cxa_end_catch();
      JUMPOUT(0x1000B1CACLL);
    }
    sub_100003744(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000B1F5C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1000B1F4CLL);
  }
  JUMPOUT(0x1000B1DC4);
}

uint64_t sub_1000B1F6C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (!v2
  {
    return 0;
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  uint64_t v4 = 1;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_100010A48(v3);
  }
  return v4;
}

void *sub_1000B2004(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C52B0((uint64_t)a1, a2);
  *a1 = off_1001A75B8;
  a1[45] = &off_1001A76B8;
  a1[46] = &off_1001A76E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A75B8;
  a1[45] = off_1001A7640;
  a1[46] = off_1001A7668;
  return a1;
}

void sub_1000B2104(_Unwind_Exception *a1)
{
  sub_1000BD8D0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2128(uint64_t a1)
{
  return a1;
}

void *sub_1000B216C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C5340((uint64_t)a1, a2);
  *a1 = off_1001A77D8;
  a1[45] = &off_1001A78D8;
  a1[46] = &off_1001A7900;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A77D8;
  a1[45] = off_1001A7860;
  a1[46] = off_1001A7888;
  return a1;
}

void sub_1000B226C(_Unwind_Exception *a1)
{
  sub_1000BE044(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2290(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B22D4(uint64_t a1)
{
  unsigned int v5 = 0;
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 704);
  v4[0] = a1;
  v4[1] = &v5;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v7 = v4;
    uint64_t v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_1000C53D0);
  }
  return v5;
}

size_t sub_1000B233C(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = sub_1000B22D4(a1);
  if (v6)
  {
    if (v6 >= 0) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = -v6;
    }
    return -v7;
  }
  else
  {
    size_t v9 = sub_1000B199C(a1, a2, 1, a3);
    size_t v8 = v9;
    if ((v9 & 0x8000000000000000) != 0 && v9) {
      sub_1000B23BC(a2);
    }
  }
  return v8;
}

uint64_t sub_1000B23BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)&long long v3 = "DiskImage::terminate()";
  *((void *)&v3 + 1) = 20;
  int v4 = 16;
  sub_1000BE528(v5, &v3);
  sub_100003DF0(v6, (uint64_t)"Encountered an inrecoverable I/O error, all future I/Os will be invalidated", 75);
  std::ostream::~ostream();
  sub_1000BE720((uint64_t)v5);
  std::ios::~ios();
  atomic_store(1u, (unsigned __int8 *)(v1 + 8));
  return sub_100143C7C();
}

void sub_1000B245C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostream::~ostream();
  sub_1000BE720((uint64_t)va);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

unint64_t sub_1000B248C(void **a1)
{
  unint64_t v2 = (*(uint64_t (**)(void *))(*a1[70] + 40))(a1[70]);
  if (v2 % ((uint64_t (*)(void **))(*a1)[3])(a1))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v5 = (void *)sub_100003670((uint64_t)exception, (uint64_t)"Size is not a multiple of block size", 0x16u);
  }
  return v2 / ((uint64_t (*)(void **))(*a1)[3])(a1);
}

uint64_t sub_1000B256C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_100083B30(&v10, *(void *)(a1 + 712) + 24 * a2);
  BOOL v8 = v11 != 0;
  if (v11 && sub_1000823B4(v11, a4))
  {
    sub_100083A6C(&v10);
    return sub_1000843FC(*(void *)(a1 + 712) + 24 * a2, a3);
  }
  else
  {
    sub_100083A6C(&v10);
  }
  return v8;
}

void sub_1000B2610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100083A6C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2624(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1 + 208;
  uint64_t v7 = sub_100043A74(a1 + 208, a2);
  if (v7)
  {
    uint64_t v8 = a1 + 24;
    if (sub_1000C5E64(a3) != *(void *)(a1 + 64))
    {
      if (sub_1000D29B8())
      {
        *(void *)&long long v10 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((void *)&v10 + 1) = 58;
        int v11 = 2;
        sub_1000849D8(&v12, &v10);
        sub_100003DF0(v13, (uint64_t)"Unmapping band ", 15);
        *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                              + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                              + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 2;
        sub_100003DF0(v13, (uint64_t)" directly (without list)", 24);
        std::ostream::~ostream();
        sub_10008C7F8((uint64_t)&v12);
        std::ios::~ios();
      }
      sub_10013E4C8((uint64_t)&v12, v8);
    }
    if (sub_1000D29B8())
    {
      *(void *)&long long v10 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
      *((void *)&v10 + 1) = 58;
      int v11 = 2;
      sub_100084870(&v12, &v10);
      sub_100003DF0(v13, (uint64_t)"Unmapping band ", 15);
      *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                            + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                            + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_100003DF0(v13, (uint64_t)" completely", 11);
      std::ostream::~ostream();
      sub_10008C084((uint64_t)&v12);
      std::ios::~ios();
    }
    sub_100082604(v8, a2);
    sub_1000440D4(v6, a2);
  }
  return v7;
}

void sub_1000B297C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2 == 1)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    sub_1000440D4(v13, v12);
    exception = __cxa_allocate_exception(0x40uLL);
    sub_1000B2AD0((uint64_t)exception, (uint64_t)v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B2A4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_1000B2AD0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1001B6CA0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1000BEE94(a1 + 24, (long long *)(a2 + 24));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void sub_1000B2B30(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2B44(uint64_t a1, unint64_t a2, void *a3)
{
  do
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      if (!v6) {
        break;
      }
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)(*(void *)(a1 + 712) + 16);
      while (1)
      {
        uint64_t v9 = *v8;
        v8 += 3;
        if (v9 == a2) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_9;
        }
      }
      if (v7 < 0) {
        break;
      }
      uint64_t result = sub_1000B256C(a1, v7, a2, a3);
      if (result) {
        return result;
      }
      usleep(0x3E8u);
    }
LABEL_9:
    uint64_t result = sub_1000B2624(a1, a2, a3);
  }
  while (!result);
  return result;
}

uint64_t sub_1000B2BDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v37 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v37 + 1) = 32;
    int v38 = 2;
    sub_1000B3440(&v30, &v37);
    sub_100003DF0(v36, (uint64_t)"Starting unmap of ", 18);
    std::ostream::operator<<();
    sub_100003DF0(v36, (uint64_t)" extents", 8);
    std::ostream::~ostream();
    sub_1000BF1CC((uint64_t)&v30);
    std::ios::~ios();
  }
  unint64_t v6 = a1[8];
  unsigned int v29 = 0;
  v28[0] = 0;
  v28[1] = 0;
  unint64_t v27 = (uint64_t *)v28;
  if (a1[43])
  {
    uint64_t v7 = sub_1000B22D4((uint64_t)a1);
    if (!v7)
    {
      sub_1000474F4((uint64_t)(a1 + 80), 0, (uint64_t)&v37);
      if (a4)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        uint64_t v20 = a3;
        do
        {
          uint64_t v10 = *(void *)(a3 + 16 * v8);
          uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
          uint64_t v22 = v8;
          uint64_t v12 = *(void *)(a3 + 16 * v8 + 8);
          unint64_t v23 = v11 * v10;
          unint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v12;
          if (sub_1000D29B8())
          {
            *(void *)&long long v25 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
            *((void *)&v25 + 1) = 32;
            int v26 = 2;
            sub_1000B3710(&v30, &v25);
            sub_100003DF0(v36, (uint64_t)"Extent ", 7);
            std::ostream::operator<<();
            sub_100003DF0(v36, (uint64_t)": [", 3);
            uint64_t v14 = v36[0];
            *(_DWORD *)((char *)&v36[1] + *(void *)(v36[0] - 24)) |= 0x200u;
            *(_DWORD *)((char *)&v36[1] + *(void *)(v14 - 24)) = *(_DWORD *)((unsigned char *)&v36[1] + *(void *)(v14 - 24)) & 0xFFFFFFB5 | 8;
            std::ostream::operator<<();
            sub_100003DF0(v36, (uint64_t)"-", 1);
            std::ostream::operator<<();
            sub_100003DF0(v36, (uint64_t)"]", 1);
            uint64_t v15 = v36[0];
            *(_DWORD *)((char *)&v36[1] + *(void *)(v36[0] - 24)) &= ~0x200u;
            *(_DWORD *)((char *)&v36[1] + *(void *)(v15 - 24)) = *(_DWORD *)((unsigned char *)&v36[1] + *(void *)(v15 - 24)) & 0xFFFFFFB5 | 2;
            std::ostream::~ostream();
            sub_1000C00B4((uint64_t)&v30);
            std::ios::~ios();
          }
          if (v13)
          {
            unint64_t v16 = v23 / v6;
            unint64_t v17 = v23 % v6;
            do
            {
              if (v16 != v9 && v27 != (uint64_t *)v28)
              {
                unint64_t v30 = 0;
                uint64_t v31 = &v30;
                uint64_t v32 = 0x4002000000;
                uint64_t v33 = sub_1000B3878;
                uint64_t v34 = sub_1000B38B4;
                sub_1000C6100((uint64_t)v35, (uint64_t)&v27);
                v24[0] = _NSConcreteStackBlock;
                v24[1] = 0x40000000;
                v24[2] = sub_1000B38C4;
                v24[3] = &unk_1001A5350;
                void v24[4] = &v30;
                v24[5] = a1;
                v24[6] = v9;
                v24[7] = &v29;
                sub_1000472D8((dispatch_group_t *)&v37, v24);
                sub_1000C6304(&v27, v27, (uint64_t *)v28);
                _Block_object_dispose(&v30, 8);
                sub_10002A594((uint64_t)v35, v35[1]);
              }
              if (v13 >= v6 - v17) {
                unint64_t v18 = v6 - v17;
              }
              else {
                unint64_t v18 = v13;
              }
              if (sub_1000A4C0C(a1[43], v16))
              {
                unint64_t v30 = v17;
                uint64_t v31 = (unint64_t *)(v18 + v17);
                LOBYTE(v32) = 2;
                sub_1000C6364(&v27, (uint64_t)&v30);
                unint64_t v9 = v16;
              }
              unint64_t v17 = 0;
              ++v16;
              v13 -= v18;
            }
            while (v13);
          }
          uint64_t v8 = v22 + 1;
          a3 = v20;
        }
        while (v22 + 1 != a4);
      }
      else
      {
        unint64_t v9 = 0;
      }
      if (v27 != (uint64_t *)v28) {
        sub_1000B2B44((uint64_t)a1, v9, &v27);
      }
      sub_100047470(&v37);
      if (sub_1000D29B8())
      {
        *(void *)&long long v37 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
        *((void *)&v37 + 1) = 32;
        int v38 = 2;
        sub_1000B3D68(&v30, &v37);
        sub_100003DF0(v36, (uint64_t)"Unmap done", 10);
        std::ostream::~ostream();
        sub_1000C1710((uint64_t)&v30);
        std::ios::~ios();
      }
      uint64_t v7 = atomic_load(&v29);
    }
  }
  else
  {
    *(void *)&long long v37 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v37 + 1) = 32;
    int v38 = 16;
    sub_1000B35A8(&v30, &v37);
    sub_100003DF0(v36, (uint64_t)"Unexpected unmap command received on read only image", 52);
    std::ostream::~ostream();
    sub_1000BF940((uint64_t)&v30);
    std::ios::~ios();
    uint64_t v7 = 4294967277;
  }
  sub_10002A594((uint64_t)&v27, v28[0]);
  return v7;
}

void sub_1000B31F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
}

void *sub_1000B3440(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C5F50((uint64_t)a1, a2);
  *a1 = off_1001A7C18;
  a1[45] = &off_1001A7D18;
  a1[46] = &off_1001A7D40;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7C18;
  a1[45] = off_1001A7CA0;
  a1[46] = off_1001A7CC8;
  return a1;
}

void sub_1000B3540(_Unwind_Exception *a1)
{
  sub_1000BF1CC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3564(uint64_t a1)
{
  return a1;
}

void *sub_1000B35A8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C5FE0((uint64_t)a1, a2);
  *a1 = off_1001A7E38;
  a1[45] = &off_1001A7F38;
  a1[46] = &off_1001A7F60;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7E38;
  a1[45] = off_1001A7EC0;
  a1[46] = off_1001A7EE8;
  return a1;
}

void sub_1000B36A8(_Unwind_Exception *a1)
{
  sub_1000BF940(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B36CC(uint64_t a1)
{
  return a1;
}

void *sub_1000B3710(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C6070((uint64_t)a1, a2);
  *a1 = off_1001A8058;
  a1[45] = &off_1001A8158;
  a1[46] = &off_1001A8180;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A8058;
  a1[45] = off_1001A80E0;
  a1[46] = off_1001A8108;
  return a1;
}

void sub_1000B3810(_Unwind_Exception *a1)
{
  sub_1000C00B4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3834(uint64_t a1)
{
  return a1;
}

void *sub_1000B3878(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  int v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_1000B38B4(uint64_t a1)
{
}

uint64_t sub_1000B38C4(void *a1)
{
  return sub_1000B2B44(a1[5], a1[6], (void *)(*(void *)(a1[4] + 8) + 40));
}

void *sub_1000B3A98(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C6274((uint64_t)a1, a2);
  *a1 = off_1001A8278;
  a1[45] = &off_1001A8378;
  a1[46] = &off_1001A83A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A8278;
  a1[45] = off_1001A8300;
  a1[46] = off_1001A8328;
  return a1;
}

void sub_1000B3B98(_Unwind_Exception *a1)
{
  sub_1000C0828(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3BBC(uint64_t a1)
{
  return a1;
}

void *sub_1000B3C00(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C6BAC((uint64_t)a1, a2);
  *a1 = off_1001A8498;
  a1[45] = &off_1001A8598;
  a1[46] = &off_1001A85C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A8498;
  a1[45] = off_1001A8520;
  a1[46] = off_1001A8548;
  return a1;
}

void sub_1000B3D00(_Unwind_Exception *a1)
{
  sub_1000C0F9C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3D24(uint64_t a1)
{
  return a1;
}

void *sub_1000B3D68(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C6C3C((uint64_t)a1, a2);
  *a1 = off_1001A86B8;
  a1[45] = &off_1001A87B8;
  a1[46] = &off_1001A87E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A86B8;
  a1[45] = off_1001A8740;
  a1[46] = off_1001A8768;
  return a1;
}

void sub_1000B3E68(_Unwind_Exception *a1)
{
  sub_1000C1710(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3E8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B3ED0(uint64_t a1)
{
  if (sub_1000D29B8())
  {
    *(void *)&long long v6 = "void DiskImageSparseBundle::on_eject()";
    *((void *)&v6 + 1) = 36;
    int v7 = 2;
    sub_1000B4034(v8, &v6);
    sub_100003DF0(v9, (uint64_t)"Evicting all bands for eject", 28);
    std::ostream::~ostream();
    sub_1000C1E84((uint64_t)v8);
    std::ios::~ios();
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      sub_100083BA0((std::chrono::steady_clock::time_point **)(*(void *)(a1 + 712) + v2), 0, (uint64_t)v5);
      sub_100083A6C(v5);
      ++v3;
      v2 += 24;
    }
    while (v3 < *(void *)(a1 + 16));
  }
  sub_100047420(a1 + 416, 0xFFFFFFFFFFFFFFFFLL);
  *(void *)&long long v6 = "void DiskImageSparseBundle::on_eject()";
  *((void *)&v6 + 1) = 36;
  int v7 = 0;
  sub_1000B419C(v8, &v6);
  sub_100003DF0(v9, (uint64_t)"Sparse bundle ejected", 21);
  std::ostream::~ostream();
  sub_1000C25F8((uint64_t)v8);
  return std::ios::~ios();
}

void sub_1000B4010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000B4158((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000B4034(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C6CCC((uint64_t)a1, a2);
  *a1 = off_1001A88D8;
  a1[45] = &off_1001A89D8;
  a1[46] = &off_1001A8A00;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A88D8;
  a1[45] = off_1001A8960;
  a1[46] = off_1001A8988;
  return a1;
}

void sub_1000B4134(_Unwind_Exception *a1)
{
  sub_1000C1E84(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B4158(uint64_t a1)
{
  return a1;
}

void *sub_1000B419C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C6D5C((uint64_t)a1, a2);
  *a1 = off_1001A8AF8;
  a1[45] = &off_1001A8BF8;
  a1[46] = &off_1001A8C20;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A8AF8;
  a1[45] = off_1001A8B80;
  a1[46] = off_1001A8BA8;
  return a1;
}

void sub_1000B429C(_Unwind_Exception *a1)
{
  sub_1000C25F8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B42C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B4304(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000B4450(a1, a2);
  if (!result)
  {
    if (((a2 + 4095) & 0xFFFFFFFFFFFFF000) < 0x200000000000001)
    {
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a1 + 560) + 56);
      return v5();
    }
    else
    {
      *(void *)&long long v6 = "int DiskImageSparseBundle::set_size(uint64_t)";
      *((void *)&v6 + 1) = 35;
      int v7 = 16;
      sub_1000B462C(v8, &v6);
      std::ostream::operator<<();
      sub_100003DF0(v9, (uint64_t)" bytes are above the sparsebundle limit of ", 43);
      std::ostream::operator<<();
      sub_100003DF0(v9, (uint64_t)" bytes", 6);
      std::ostream::~ostream();
      sub_1000C2D6C((uint64_t)v8);
      std::ios::~ios();
      return 4294967269;
    }
  }
  return result;
}

void sub_1000B4438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000B4750((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B4450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) * v4;
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  unint64_t v7 = (a2 + v6 - 1) / v6 * v6;
  if (v5 <= v7) {
    return 0;
  }
  v11[0] = v7 / (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v11[1] = (v5 - v7) / (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a1 + 184))(a1, v8, v11, 1);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  return v9;
}

void sub_1000B4614(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100146E38(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000B462C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C6DEC((uint64_t)a1, a2);
  *a1 = off_1001A8D18;
  a1[45] = &off_1001A8E18;
  a1[46] = &off_1001A8E40;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A8D18;
  a1[45] = off_1001A8DA0;
  a1[46] = off_1001A8DC8;
  return a1;
}

void sub_1000B472C(_Unwind_Exception *a1)
{
  sub_1000C2D6C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B4750(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B479C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1000B47A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 560) + 48))();
}

void sub_1000B47CC()
{
}

void sub_1000B4838()
{
}

uint64_t sub_1000B485C()
{
  return 1;
}

void sub_1000B4864()
{
}

void sub_1000B48AC()
{
}

size_t sub_1000B48D0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000B199C(a1, a2, 0, a3);
}

uint64_t sub_1000B48DC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000B4954((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000B4954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 24;
    sub_100083B30(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_1000B49E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_100083A6C((void *)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000B4A38(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10001796C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100058794(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  unint64_t v16 = &v10[24 * v9];
  sub_100083B34((uint64_t)v14, a2);
  uint64_t v15 = v14 + 24;
  sub_1000B48DC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1000B49E8((uint64_t)&v13);
  return v11;
}

void sub_1000B4B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000B49E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B4B40(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B4DD0(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B4B8C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B4DD0(v1);

  return std::ios::~ios();
}

void sub_1000B4BEC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B4DD0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B4C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B4C8C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B4CF4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B4DD0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B4D58(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B4DD0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B4DD0(uint64_t a1)
{
  *(void *)a1 = off_1001A5550;
  sub_1000B4F0C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B4F0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B50CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B5068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B5094(uint64_t a1)
{
  sub_1000B4DD0(a1);

  operator delete();
}

int *sub_1000B50CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 46;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 46;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_1000B52B4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        int v4 = sub_100083A6C(v4 - 3);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000B5338(uint64_t a1)
{
  sub_100047470(a1 + 392);
  uint64_t v7 = (void **)(a1 + 352);
  sub_10001A830(&v7);
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  uint64_t v2 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 272));
  std::mutex::~mutex((std::mutex *)(a1 + 208));
  sub_10002A594(a1 + 184, *(void **)(a1 + 192));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_100010A48(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  return a1;
}

uint64_t sub_1000B5458(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B56E8(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B54A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B56E8(v1);

  return std::ios::~ios();
}

void sub_1000B5504(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B56E8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B556C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B55A4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B560C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B56E8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B5670(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B56E8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B56E8(uint64_t a1)
{
  *(void *)a1 = off_1001A5770;
  sub_1000B5824(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B5824(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B59E4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B5980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B59AC(uint64_t a1)
{
  sub_1000B56E8(a1);

  operator delete();
}

int *sub_1000B59E4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 59;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 59;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B5BCC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B5E5C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B5C18(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B5E5C(v1);

  return std::ios::~ios();
}

void sub_1000B5C78(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B5E5C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B5CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B5D18(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B5D80(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B5E5C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B5DE4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B5E5C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B5E5C(uint64_t a1)
{
  *(void *)a1 = off_1001A5990;
  sub_1000B5F98(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B5F98(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B6158((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B60F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B6120(uint64_t a1)
{
  sub_1000B5E5C(a1);

  operator delete();
}

int *sub_1000B6158(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 80;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 80;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B6340(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B65D0(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B638C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B65D0(v1);

  return std::ios::~ios();
}

void sub_1000B63EC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B65D0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B6454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B648C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B64F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B65D0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B6558(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B65D0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B65D0(uint64_t a1)
{
  *(void *)a1 = off_1001A5BB0;
  sub_1000B670C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B670C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B68CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B6868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B6894(uint64_t a1)
{
  sub_1000B65D0(a1);

  operator delete();
}

int *sub_1000B68CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 101;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 101;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B6AB4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B6D44(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B6B00(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B6D44(v1);

  return std::ios::~ios();
}

void sub_1000B6B60(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B6D44(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B6BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B6C00(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B6C68(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B6D44(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B6CCC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B6D44(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B6D44(uint64_t a1)
{
  *(void *)a1 = off_1001A5DD0;
  sub_1000B6E80(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B6E80(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B7040((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B6FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B7008(uint64_t a1)
{
  sub_1000B6D44(a1);

  operator delete();
}

int *sub_1000B7040(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 107;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 107;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B7228(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B74B8(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B7274(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B74B8(v1);

  return std::ios::~ios();
}

void sub_1000B72D4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B74B8(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B733C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B7374(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B73DC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B74B8(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B7440(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B74B8(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B74B8(uint64_t a1)
{
  *(void *)a1 = off_1001A5FF0;
  sub_1000B75F4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B75F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B77B4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B7750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B777C(uint64_t a1)
{
  sub_1000B74B8(a1);

  operator delete();
}

int *sub_1000B77B4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 111;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 111;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B799C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B7C2C(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B79E8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B7C2C(v1);

  return std::ios::~ios();
}

void sub_1000B7A48(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B7C2C(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B7AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B7AE8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B7B50(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B7C2C(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B7BB4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B7C2C(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B7C2C(uint64_t a1)
{
  *(void *)a1 = off_1001A6210;
  sub_1000B7D68(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B7D68(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B7F28((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B7EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B7EF0(uint64_t a1)
{
  sub_1000B7C2C(a1);

  operator delete();
}

int *sub_1000B7F28(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 165;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 165;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B8110(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B83A0(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B815C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B83A0(v1);

  return std::ios::~ios();
}

void sub_1000B81BC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B83A0(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B8224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B825C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B82C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B83A0(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B8328(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B83A0(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B83A0(uint64_t a1)
{
  *(void *)a1 = off_1001A6430;
  sub_1000B84DC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B84DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B869C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B8638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B8664(uint64_t a1)
{
  sub_1000B83A0(a1);

  operator delete();
}

int *sub_1000B869C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 172;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 172;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B8884(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B8B14(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B88D0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B8B14(v1);

  return std::ios::~ios();
}

void sub_1000B8930(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B8B14(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B8998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B89D0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B8A38(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B8B14(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B8A9C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B8B14(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B8B14(uint64_t a1)
{
  *(void *)a1 = off_1001A6650;
  sub_1000B8C50(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B8C50(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B8E10((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B8DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B8DD8(uint64_t a1)
{
  sub_1000B8B14(a1);

  operator delete();
}

int *sub_1000B8E10(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 190;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 190;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B8FF8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B9288(v1);

  return std::ios::~ios();
}

uint64_t sub_1000B9044(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B9288(v1);

  return std::ios::~ios();
}

void sub_1000B90A4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B9288(a1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B910C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B9144(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B91AC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B9288(v1);
  std::ios::~ios();

  operator delete();
}

void sub_1000B9210(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B9288(v1);
  std::ios::~ios();

  operator delete();
}

uint64_t sub_1000B9288(uint64_t a1)
{
  *(void *)a1 = off_1001A6870;
  sub_1000B93C4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  return std::streambuf::~streambuf();
}

uint64_t sub_1000B93C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100003890(a1 + 104, __p);
        sub_1000B9584((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100003BA4(__p, "");
        sub_100003A24(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B9520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B954C(uint64_t a1)
{
  sub_1000B9288(a1);

  operator delete();
}

int *sub_1000B9584(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D29A0())
  {
    char v6 = sub_1000D2920();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 194;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D2920();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 194;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B976C(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 4;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v28 = *((void *)a2 - 2);
          uint64_t v29 = *v11;
          char v30 = -1;
          if (v28 >= *v11) {
            char v30 = 1;
          }
          if (v28 == *v11)
          {
            unint64_t v31 = *((void *)a2 - 1);
            unint64_t v32 = v11[1];
            BOOL v5 = v31 >= v32;
            BOOL v33 = v31 == v32;
            char v30 = -1;
            if (v5) {
              char v30 = 1;
            }
            if (v33) {
              char v30 = 0;
            }
          }
          if (v30 < 0)
          {
            uint64_t v34 = v11[1];
            uint64_t v35 = *((void *)a2 - 1);
            *uint64_t v11 = v28;
            v11[1] = v35;
            *((void *)a2 - 2) = v29;
            *((void *)a2 - 1) = v34;
          }
          break;
        case 3uLL:
          uint64_t result = sub_1000B9CD4(v11, v11 + 2, (uint64_t *)a2 - 2);
          break;
        case 4uLL:
          uint64_t result = sub_1000BA31C(v11, v11 + 2, v11 + 4, (uint64_t *)a2 - 2);
          break;
        case 5uLL:
          uint64_t result = sub_1000BA42C(v11, v11 + 2, v11 + 4, v11 + 6, (uint64_t *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (uint64_t)sub_1000BA590((char *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_1000B9CD4(v11, &v11[2 * (v15 >> 1)], (uint64_t *)a2 - 2);
      sub_1000B9CD4(v11 + 2, v17 - 2, (uint64_t *)a2 - 4);
      sub_1000B9CD4(v11 + 4, &v11[2 * v16 + 2], (uint64_t *)a2 - 6);
      sub_1000B9CD4(v17 - 2, v17, &v11[2 * v16 + 2]);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)int v17 = v18;
      if (a5) {
        goto LABEL_24;
      }
    }
    else
    {
      sub_1000B9CD4(&v11[2 * (v15 >> 1)], v11, (uint64_t *)a2 - 2);
      if (a5) {
        goto LABEL_24;
      }
    }
    uint64_t v19 = *(v11 - 2);
    BOOL v20 = v19 == *v11;
    if (v19 >= *v11) {
      char v21 = 1;
    }
    else {
      char v21 = -1;
    }
    if (v20)
    {
      unint64_t v22 = *(v11 - 1);
      unint64_t v23 = v11[1];
      BOOL v24 = v22 == v23;
      char v21 = v22 >= v23 ? 1 : -1;
      if (v24) {
        char v21 = 0;
      }
    }
    if ((v21 & 0x80) == 0)
    {
      uint64_t result = (uint64_t)sub_1000B9E28(v11, a2);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_29;
    }
LABEL_24:
    long long v25 = sub_1000B9FB0(v11, (uint64_t *)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_27;
    }
    BOOL v27 = sub_1000BA118(v11, v25);
    uint64_t v11 = v25 + 2;
    uint64_t result = sub_1000BA118(v25 + 2, (uint64_t *)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v25;
      if (v27) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_27:
      uint64_t result = sub_1000B976C(v10, v25, a3, -v13, a5 & 1);
      uint64_t v11 = v25 + 2;
LABEL_29:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_1000B9B70(v11, (uint64_t *)a2);
  }
  else
  {
    return (uint64_t)sub_1000B9C30(v11, (uint64_t *)a2);
  }
}

uint64_t *sub_1000B9B70(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      int v4 = result;
      do
      {
        BOOL v5 = v2;
        uint64_t v6 = v4[2];
        uint64_t v7 = *v4;
        if (v6 >= *v4) {
          char v8 = 1;
        }
        else {
          char v8 = -1;
        }
        if (v6 == *v4)
        {
          unint64_t v9 = v4[3];
          unint64_t v10 = v4[1];
          BOOL v11 = v9 == v10;
          char v8 = v9 >= v10 ? 1 : -1;
          if (v11) {
            char v8 = 0;
          }
        }
        if (v8 < 0)
        {
          unint64_t v12 = v4[3];
          uint64_t v13 = v3;
          while (1)
          {
            uint64_t v14 = (char *)result + v13;
            uint64_t v15 = *(uint64_t *)((char *)result + v13 + 8);
            *((void *)v14 + 2) = v7;
            *((void *)v14 + 3) = v15;
            if (!v13) {
              break;
            }
            uint64_t v7 = *((void *)v14 - 2);
            if (v6 >= v7) {
              char v16 = 1;
            }
            else {
              char v16 = -1;
            }
            if (v6 == v7)
            {
              unint64_t v17 = *(uint64_t *)((char *)result + v13 - 8);
              BOOL v18 = v12 == v17;
              if (v12 >= v17) {
                char v16 = 1;
              }
              else {
                char v16 = -1;
              }
              if (v18) {
                char v16 = 0;
              }
            }
            v13 -= 16;
            if ((v16 & 0x80) == 0)
            {
              uint64_t v19 = (uint64_t *)((char *)result + v13 + 16);
              goto LABEL_28;
            }
          }
          uint64_t v19 = result;
LABEL_28:
          *uint64_t v19 = v6;
          v19[1] = v12;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        int v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t *sub_1000B9C30(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = (unint64_t *)(result + 3);
      do
      {
        int v4 = v2;
        uint64_t v5 = result[2];
        uint64_t v6 = *result;
        if (v5 >= *result) {
          char v7 = 1;
        }
        else {
          char v7 = -1;
        }
        if (v5 == *result)
        {
          unint64_t v8 = result[3];
          unint64_t v9 = result[1];
          BOOL v10 = v8 == v9;
          char v7 = v8 >= v9 ? 1 : -1;
          if (v10) {
            char v7 = 0;
          }
        }
        if (v7 < 0)
        {
          unint64_t v11 = result[3];
          unint64_t v12 = v3;
          do
          {
            *(v12 - 1) = v6;
            unint64_t *v12 = *(v12 - 2);
            uint64_t v6 = *(v12 - 5);
            if (v5 >= v6) {
              char v13 = 1;
            }
            else {
              char v13 = -1;
            }
            if (v5 == v6)
            {
              unint64_t v14 = *(v12 - 4);
              BOOL v15 = v11 == v14;
              if (v11 >= v14) {
                char v13 = 1;
              }
              else {
                char v13 = -1;
              }
              if (v15) {
                char v13 = 0;
              }
            }
            v12 -= 2;
          }
          while (v13 < 0);
          *(v12 - 1) = v5;
          unint64_t *v12 = v11;
        }
        uint64_t v2 = v4 + 2;
        v3 += 2;
        uint64_t result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1000B9CD4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2 >= *a1) {
    char v5 = 1;
  }
  else {
    char v5 = -1;
  }
  if (*a2 == *a1)
  {
    unint64_t v6 = a2[1];
    unint64_t v7 = a1[1];
    BOOL v8 = v6 >= v7;
    BOOL v9 = v6 == v7;
    char v10 = -1;
    if (v8) {
      char v10 = 1;
    }
    if (v9) {
      char v5 = 0;
    }
    else {
      char v5 = v10;
    }
  }
  uint64_t v11 = *a3;
  char v12 = -1;
  if (*a3 >= v3) {
    char v12 = 1;
  }
  if (v5 < 0)
  {
    if (v11 == v3)
    {
      unint64_t v18 = a3[1];
      unint64_t v19 = a2[1];
      BOOL v8 = v18 >= v19;
      BOOL v20 = v18 == v19;
      char v12 = -1;
      if (v8) {
        char v12 = 1;
      }
      if (v20) {
        char v12 = 0;
      }
    }
    if (v12 < 0)
    {
      uint64_t v36 = a1[1];
      uint64_t v37 = a3[1];
      *a1 = v11;
      a1[1] = v37;
      *a3 = v4;
      a3[1] = v36;
    }
    else
    {
      unint64_t v21 = a1[1];
      uint64_t v22 = a2[1];
      *a1 = v3;
      a1[1] = v22;
      *a2 = v4;
      a2[1] = v21;
      char v23 = -1;
      if (*a3 >= v4) {
        char v23 = 1;
      }
      if (*a3 == v4)
      {
        unint64_t v24 = a3[1];
        BOOL v8 = v24 >= v21;
        BOOL v25 = v24 == v21;
        char v23 = -1;
        if (v8) {
          char v23 = 1;
        }
        if (v25) {
          char v23 = 0;
        }
      }
      if (v23 < 0)
      {
        uint64_t v26 = a3[1];
        *a2 = *a3;
        a2[1] = v26;
        *a3 = v4;
        a3[1] = v21;
        return 2;
      }
    }
  }
  else
  {
    if (v11 == v3)
    {
      unint64_t v13 = a3[1];
      unint64_t v14 = a2[1];
      BOOL v8 = v13 >= v14;
      BOOL v15 = v13 == v14;
      char v16 = -1;
      if (v8) {
        char v16 = 1;
      }
      if (v15) {
        char v12 = 0;
      }
      else {
        char v12 = v16;
      }
    }
    if ((v12 & 0x80) == 0) {
      return 0;
    }
    *a2 = v11;
    *a3 = v3;
    uint64_t v27 = *a2;
    uint64_t v28 = a2[1];
    a2[1] = a3[1];
    a3[1] = v28;
    uint64_t v29 = *a1;
    char v30 = -1;
    if (v27 >= *a1) {
      char v30 = 1;
    }
    if (v27 == *a1)
    {
      unint64_t v31 = a2[1];
      unint64_t v32 = a1[1];
      BOOL v8 = v31 >= v32;
      BOOL v33 = v31 == v32;
      char v30 = -1;
      if (v8) {
        char v30 = 1;
      }
      if (v33) {
        char v30 = 0;
      }
    }
    if (v30 < 0)
    {
      uint64_t v34 = a1[1];
      uint64_t v35 = a2[1];
      *a1 = v27;
      a1[1] = v35;
      *a2 = v29;
      a2[1] = v34;
      return 2;
    }
  }
  return 1;
}

void *sub_1000B9E28(void *a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(a2 - 2);
  BOOL v5 = *a1 == v4;
  if (*a1 >= v4) {
    char v6 = 1;
  }
  else {
    char v6 = -1;
  }
  if (v5)
  {
    unint64_t v7 = *(a2 - 1);
    BOOL v8 = v3 >= v7;
    BOOL v9 = v3 == v7;
    char v6 = -1;
    if (v8) {
      char v6 = 1;
    }
    if (v9) {
      char v6 = 0;
    }
  }
  if (v6 < 0)
  {
    BOOL v15 = a1;
    uint64_t v11 = a1;
    do
    {
      uint64_t v16 = v11[2];
      v11 += 2;
      BOOL v17 = v2 == v16;
      if (v2 >= v16) {
        char v18 = 1;
      }
      else {
        char v18 = -1;
      }
      if (v17)
      {
        unint64_t v19 = v15[3];
        BOOL v20 = v3 == v19;
        char v18 = v3 >= v19 ? 1 : -1;
        if (v20) {
          char v18 = 0;
        }
      }
      BOOL v15 = v11;
    }
    while ((v18 & 0x80) == 0);
  }
  else
  {
    char v10 = a1 + 2;
    do
    {
      uint64_t v11 = v10;
      if (v10 >= a2) {
        break;
      }
      if (v2 >= *v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v2 == *v10)
      {
        unint64_t v13 = v10[1];
        BOOL v14 = v3 == v13;
        char v12 = v3 >= v13 ? 1 : -1;
        if (v14) {
          char v12 = 0;
        }
      }
      v10 += 2;
    }
    while ((v12 & 0x80) == 0);
  }
  if (v11 >= a2)
  {
    unint64_t v21 = a2;
  }
  else
  {
    unint64_t v21 = a2;
    do
    {
      uint64_t v22 = *(v21 - 2);
      v21 -= 2;
      BOOL v23 = v2 == v22;
      if (v2 >= v22) {
        char v24 = 1;
      }
      else {
        char v24 = -1;
      }
      if (v23)
      {
        unint64_t v25 = *(a2 - 1);
        BOOL v26 = v3 == v25;
        char v24 = v3 >= v25 ? 1 : -1;
        if (v26) {
          char v24 = 0;
        }
      }
      a2 = v21;
    }
    while (v24 < 0);
  }
  if (v11 < v21)
  {
    uint64_t v27 = *v11;
    uint64_t v28 = *v21;
    do
    {
      uint64_t v29 = v11[1];
      uint64_t v30 = v21[1];
      *uint64_t v11 = v28;
      v11[1] = v30;
      void *v21 = v27;
      v21[1] = v29;
      unint64_t v31 = v11;
      do
      {
        uint64_t v32 = v11[2];
        v11 += 2;
        uint64_t v27 = v32;
        BOOL v33 = v2 == v32;
        if (v2 >= v32) {
          char v34 = 1;
        }
        else {
          char v34 = -1;
        }
        if (v33)
        {
          unint64_t v35 = v31[3];
          BOOL v36 = v3 == v35;
          char v34 = v3 >= v35 ? 1 : -1;
          if (v36) {
            char v34 = 0;
          }
        }
        unint64_t v31 = v11;
      }
      while ((v34 & 0x80) == 0);
      uint64_t v37 = v21;
      do
      {
        uint64_t v38 = *(v21 - 2);
        v21 -= 2;
        uint64_t v28 = v38;
        BOOL v39 = v2 == v38;
        if (v2 >= v38) {
          char v40 = 1;
        }
        else {
          char v40 = -1;
        }
        if (v39)
        {
          unint64_t v41 = *(v37 - 1);
          BOOL v42 = v3 == v41;
          char v40 = v3 >= v41 ? 1 : -1;
          if (v42) {
            char v40 = 0;
          }
        }
        uint64_t v37 = v21;
      }
      while (v40 < 0);
    }
    while (v11 < v21);
  }
  if (v11 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
  }
  *(v11 - 2) = v2;
  *(v11 - 1) = v3;
  return v11;
}